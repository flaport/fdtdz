//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_70
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<488>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7915>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<566>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1718, %r1719}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1720, %r1721}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1722, %r1723}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1724, %r1725}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1726, %r1727}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1728, %r1729}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r31, %tid.y;
	mov.u32 	%r32, %tid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %ctaid.z;
	mov.u32 	%r1738, 32;
	sub.s32 	%r35, %r1738, %r1725;
	mov.u32 	%r36, %tid.x;
	setp.le.s32 	%p15, %r35, %r36;
	add.s32 	%r1739, %r1731, -1;
	mad.lo.s32 	%r1740, %r1739, %r1730, %r1729;
	add.s32 	%r1741, %r1724, %r1723;
	add.s32 	%r1742, %r1741, %r1740;
	add.s32 	%r1743, %r1742, 1;
	mul.lo.s32 	%r1744, %r1718, %r1720;
	shl.b32 	%r37, %r1744, 1;
	shl.b32 	%r1745, %r1744, 2;
	div.s32 	%r1746, %r1743, %r1745;
	add.s32 	%r1747, %r1746, 1;
	mul.lo.s32 	%r1748, %r1747, %r1724;
	mul.lo.s32 	%r1749, %r1719, %r1721;
	shl.b32 	%r38, %r1749, 1;
	div.s32 	%r1750, %r1748, %r38;
	add.s32 	%r1751, %r1750, 1;
	mul.lo.s32 	%r39, %r1751, %r1723;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7294, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7294, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1754, %r1720, %r34, %r33;
	mad.lo.s32 	%r1755, %r1754, %r1719, %r32;
	mul.lo.s32 	%r43, %r1755, %r1718;
	add.s32 	%r1756, %r43, %r31;
	shl.b32 	%r44, %r1756, 5;
	add.s32 	%r7299, %r44, %r36;
	mul.lo.s32 	%r1757, %r1749, %r1744;
	shl.b32 	%r48, %r1757, 5;
	sub.s32 	%r1758, %r1733, %r1732;
	mul.lo.s32 	%r1759, %r1731, %r1758;
	sub.s32 	%r1760, %r1735, %r1734;
	mul.lo.s32 	%r1761, %r1759, %r1760;
	sub.s32 	%r49, %r1737, %r1736;
	mul.lo.s32 	%r1762, %r1761, %r49;
	mul.lo.s32 	%r50, %r1762, 3;
	setp.ge.s32 	%p16, %r7299, %r50;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1763, %r36;
	add.s32 	%r1764, %r50, %r1763;
	sub.s32 	%r1765, %r1764, %r44;
	mul.lo.s32 	%r1766, %r1749, %r1718;
	mul.lo.s32 	%r1767, %r1766, %r1720;
	shl.b32 	%r51, %r1767, 5;
	div.u32 	%r52, %r1765, %r51;
	add.s32 	%r1768, %r52, 1;
	and.b32  	%r7296, %r1768, 3;
	setp.eq.s32 	%p17, %r7296, 0;
	mov.u32 	%r7297, %r7299;
	@%p17 bra 	$L__BB0_7;

	shl.b32 	%r1769, %r43, 5;
	add.s32 	%r1770, %r36, %r1769;
	shl.b32 	%r1771, %r31, 5;
	add.s32 	%r7297, %r1770, %r1771;
	mul.wide.s32 	%rd46, %r7299, 4;
	add.s64 	%rd563, %rd2, %rd46;
	mul.wide.s32 	%rd4, %r51, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1772, 0;
	st.global.u32 	[%rd563], %r1772;
	add.s32 	%r7297, %r7297, %r51;
	add.s64 	%rd563, %rd563, %rd4;
	add.s32 	%r7296, %r7296, -1;
	setp.ne.s32 	%p18, %r7296, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r52, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd49, %r48, 4;

$L__BB0_9:
	mul.wide.s32 	%rd47, %r7297, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1773, 0;
	st.global.u32 	[%rd48], %r1773;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.u32 	[%rd50], %r1773;
	add.s32 	%r1774, %r7297, %r48;
	add.s32 	%r1775, %r1774, %r48;
	add.s64 	%rd51, %rd50, %rd49;
	st.global.u32 	[%rd51], %r1773;
	add.s32 	%r1776, %r1775, %r48;
	add.s64 	%rd52, %rd51, %rd49;
	st.global.u32 	[%rd52], %r1773;
	add.s32 	%r7297, %r1776, %r48;
	setp.lt.s32 	%p20, %r7297, %r50;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd53, [%rd1+80];
	cvta.to.global.u64 	%rd7, %rd53;
	sub.s32 	%r1777, %r1724, %r37;
	div.s32 	%r1778, %r1777, %r38;
	mul.lo.s32 	%r1779, %r1778, %r1723;
	sub.s32 	%r62, %r1779, %r37;
	sub.s32 	%r1780, %r1723, %r38;
	mul.lo.s32 	%r1781, %r1780, %r1720;
	mul.lo.s32 	%r63, %r1718, 384;
	add.s32 	%r1782, %r63, %r63;
	add.s32 	%r1783, %r1782, 128;
	mul.lo.s32 	%r1785, %r1749, 768;
	mul.lo.s32 	%r1786, %r1781, %r1783;
	mad.lo.s32 	%r64, %r1785, %r62, %r1786;
	bra.uni 	$L__BB0_11;

$L__BB0_865:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7271, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd551, %r7299, 4;
	add.s64 	%rd552, %rd7, %rd551;
	st.global.u32 	[%rd552], %r7271;
	add.s32 	%r7299, %r7299, %r48;

$L__BB0_11:
	setp.lt.s32 	%p21, %r7299, %r64;
	@%p21 bra 	$L__BB0_865;

	ld.param.u64 	%rd54, [%rd1+120];
	cvta.to.global.u64 	%rd9, %rd54;
	ld.param.u64 	%rd55, [%rd1+88];
	cvta.to.global.u64 	%rd10, %rd55;
	mad.lo.s32 	%r7341, %r1718, %r33, %r31;
	mul.lo.s32 	%r68, %r1719, %r34;
	add.s32 	%r69, %r68, %r32;
	setp.ge.s32 	%p22, %r7341, %r1723;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r35, %r36;
	mov.u32 	%r1787, 31;
	sub.s32 	%r1788, %r1787, %r36;
	selp.b32 	%r1789, %r36, %r1788, %p23;
	shl.b32 	%r1790, %r1789, 2;
	mov.u32 	%r1791, 2;
	sub.s32 	%r70, %r1790, %r1726;
	shl.b32 	%r1792, %r1725, 2;
	mov.u32 	%r1793, 128;
	sub.s32 	%r71, %r1793, %r1792;
	sub.s32 	%r1794, %r1791, %r1726;
	add.s32 	%r72, %r1794, %r1790;
	mul.lo.s32 	%r1795, %r1724, %r1723;
	shl.b32 	%r73, %r1795, 6;
	add.s32 	%r74, %r1723, -1;
	add.s32 	%r75, %r70, 1;
	add.s32 	%r76, %r72, 1;
	shl.b32 	%r77, %r36, 1;
	or.b32  	%r78, %r77, 1;
	shr.u32 	%r1796, %r78, 31;
	add.s32 	%r1797, %r78, %r1796;
	shr.s32 	%r80, %r1797, 1;
	and.b32  	%r1798, %r1797, -2;
	sub.s32 	%r1799, %r78, %r1798;
	add.s32 	%r79, %r1799, %r73;
	rem.s32 	%r1834, %r75, %r71;
	add.s32 	%r1835, %r1834, %r71;
	rem.s32 	%r103, %r1835, %r71;
	rem.s32 	%r1836, %r76, %r71;
	add.s32 	%r1837, %r1836, %r71;
	rem.s32 	%r104, %r1837, %r71;
	mov.u32 	%r7300, %r7341;

$L__BB0_14:
	setp.ge.s32 	%p24, %r69, %r1724;
	@%p24 bra 	$L__BB0_35;

	add.s32 	%r82, %r74, %r7300;
	rem.s32 	%r1800, %r70, %r71;
	add.s32 	%r1801, %r1800, %r71;
	rem.s32 	%r83, %r1801, %r71;
	rem.s32 	%r1802, %r72, %r71;
	add.s32 	%r1803, %r1802, %r71;
	rem.s32 	%r84, %r1803, %r71;
	mul.lo.s32 	%r85, %r7300, %r1724;
	add.s32 	%r1804, %r1723, %r7300;
	mul.lo.s32 	%r86, %r1804, %r1724;
	add.s32 	%r1805, %r1804, %r1723;
	mul.lo.s32 	%r87, %r1805, %r1724;
	mov.u32 	%r7301, %r69;

$L__BB0_16:
	mul.lo.s32 	%r89, %r7301, %r1723;
	add.s32 	%r90, %r89, %r7300;
	shl.b32 	%r91, %r90, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1808, %r85, %r7301;
	mul.lo.s32 	%r1809, %r1808, %r71;
	add.s32 	%r1810, %r1809, %r83;
	mul.wide.s32 	%rd56, %r1810, 4;
	add.s64 	%rd57, %rd9, %rd56;
	ld.global.f32 	%f41, [%rd57];
	add.s32 	%r1811, %r1809, %r84;
	mul.wide.s32 	%rd58, %r1811, 4;
	add.s64 	%rd59, %rd9, %rd58;
	ld.global.f32 	%f42, [%rd59];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r95, %r90, 5;
	add.s32 	%r1812, %r95, %r36;
	shl.b32 	%r1813, %r1812, 2;
	add.s32 	%r1814, %r73, %r1813;
	mul.wide.s32 	%rd60, %r1814, 4;
	add.s64 	%rd61, %rd10, %rd60;
	st.global.u32 	[%rd61], %r7302;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1817, %r86, %r7301;
	mul.lo.s32 	%r1818, %r1817, %r71;
	add.s32 	%r1819, %r1818, %r83;
	mul.wide.s32 	%rd62, %r1819, 4;
	add.s64 	%rd63, %rd9, %rd62;
	ld.global.f32 	%f45, [%rd63];
	add.s32 	%r1820, %r1818, %r84;
	mul.wide.s32 	%rd64, %r1820, 4;
	add.s64 	%rd65, %rd9, %rd64;
	ld.global.f32 	%f46, [%rd65];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1821, %r77, %r91;
	mul.wide.s32 	%rd66, %r1821, 4;
	add.s64 	%rd67, %rd10, %rd66;
	st.global.u32 	[%rd67], %r7303;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1824, %r87, %r7301;
	mul.lo.s32 	%r1825, %r1824, %r71;
	add.s32 	%r1826, %r1825, %r83;
	mul.wide.s32 	%rd68, %r1826, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f49, [%rd69];
	add.s32 	%r1827, %r1825, %r84;
	mul.wide.s32 	%rd70, %r1827, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f50, [%rd71];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1828, %r82, %r1723;
	add.s32 	%r1829, %r1828, %r89;
	shl.b32 	%r102, %r1829, 5;
	add.s32 	%r1830, %r102, %r36;
	shl.b32 	%r1831, %r1830, 2;
	add.s32 	%r1832, %r73, %r1831;
	add.s32 	%r1833, %r1832, 2;
	mul.wide.s32 	%rd72, %r1833, 4;
	add.s64 	%rd73, %rd10, %rd72;
	st.global.u32 	[%rd73], %r7304;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1840, %r85, %r7301;
	mul.lo.s32 	%r1841, %r1840, %r71;
	add.s32 	%r1842, %r1841, %r103;
	mul.wide.s32 	%rd74, %r1842, 4;
	add.s64 	%rd75, %rd9, %rd74;
	ld.global.f32 	%f53, [%rd75];
	add.s32 	%r1843, %r1841, %r104;
	mul.wide.s32 	%rd76, %r1843, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f54, [%rd77];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7305, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1844, %r95, %r80;
	shl.b32 	%r1845, %r1844, 2;
	add.s32 	%r1846, %r79, %r1845;
	mul.wide.s32 	%rd78, %r1846, 4;
	add.s64 	%rd79, %rd10, %rd78;
	st.global.u32 	[%rd79], %r7305;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1849, %r86, %r7301;
	mul.lo.s32 	%r1850, %r1849, %r71;
	add.s32 	%r1851, %r1850, %r103;
	mul.wide.s32 	%rd80, %r1851, 4;
	add.s64 	%rd81, %rd9, %rd80;
	ld.global.f32 	%f57, [%rd81];
	add.s32 	%r1852, %r1850, %r104;
	mul.wide.s32 	%rd82, %r1852, 4;
	add.s64 	%rd83, %rd9, %rd82;
	ld.global.f32 	%f58, [%rd83];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1853, %r78, %r91;
	mul.wide.s32 	%rd84, %r1853, 4;
	add.s64 	%rd85, %rd10, %rd84;
	st.global.u32 	[%rd85], %r7306;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1856, %r87, %r7301;
	mul.lo.s32 	%r1857, %r1856, %r71;
	add.s32 	%r1858, %r1857, %r103;
	mul.wide.s32 	%rd86, %r1858, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f61, [%rd87];
	add.s32 	%r1859, %r1857, %r104;
	mul.wide.s32 	%rd88, %r1859, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f62, [%rd89];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7307, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1860, %r102, %r80;
	shl.b32 	%r1861, %r1860, 2;
	add.s32 	%r1862, %r79, %r1861;
	add.s32 	%r1863, %r1862, 2;
	mul.wide.s32 	%rd90, %r1863, 4;
	add.s64 	%rd91, %rd10, %rd90;
	st.global.u32 	[%rd91], %r7307;
	add.s32 	%r7301, %r7301, %r1749;
	setp.lt.s32 	%p31, %r7301, %r1724;
	@%p31 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7300, %r7300, %r1744;
	setp.lt.s32 	%p32, %r7300, %r1723;
	@%p32 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd92, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd92;
	ld.param.u64 	%rd93, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd93;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r116, %r69, 1;
	mov.u64 	%rd94, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7308, %r7341;

$L__BB0_38:
	setp.ge.s32 	%p34, %r116, %r1724;
	@%p34 bra 	$L__BB0_119;

	mov.u32 	%r7309, %r116;

$L__BB0_40:
	setp.ne.s32 	%p35, %r36, 0;
	@%p35 bra 	$L__BB0_118;

	shr.u32 	%r1865, %r7309, 31;
	add.s32 	%r1866, %r7309, %r1865;
	shr.s32 	%r1867, %r1866, 1;
	mad.lo.s32 	%r1868, %r1867, %r1723, %r7308;
	shl.b32 	%r120, %r1868, 5;
	add.s32 	%r121, %r7309, -2;
	mul.lo.s32 	%r122, %r121, %r1723;
	add.s32 	%r1869, %r1724, %r121;
	mul.lo.s32 	%r123, %r1869, %r1723;
	add.s32 	%r1870, %r1869, %r1724;
	mul.lo.s32 	%r124, %r1870, %r1723;
	add.s32 	%r125, %r122, %r1723;
	add.s32 	%r126, %r7309, -1;
	add.s32 	%r1871, %r1724, %r126;
	mul.lo.s32 	%r127, %r1871, %r1723;
	add.s32 	%r1872, %r1871, %r1724;
	mul.lo.s32 	%r128, %r1872, %r1723;
	add.s32 	%r1873, %r1724, %r7309;
	mul.lo.s32 	%r129, %r1873, %r1723;
	add.s32 	%r1874, %r1873, %r1724;
	mul.lo.s32 	%r130, %r1874, %r1723;
	mul.lo.s32 	%r131, %r7309, %r1723;
	add.s32 	%r132, %r131, %r1723;
	add.s32 	%r133, %r7309, 1;
	add.s32 	%r1875, %r1724, %r133;
	mul.lo.s32 	%r134, %r1875, %r1723;
	add.s32 	%r1876, %r1875, %r1724;
	mul.lo.s32 	%r135, %r1876, %r1723;
	add.s32 	%r136, %r132, %r1723;
	add.s32 	%r137, %r7309, 2;
	add.s32 	%r1877, %r1724, %r137;
	mul.lo.s32 	%r138, %r1877, %r1723;
	add.s32 	%r1878, %r1877, %r1724;
	mul.lo.s32 	%r139, %r1878, %r1723;
	mov.u32 	%r7312, 0;
	mov.u64 	%rd564, %rd94;

$L__BB0_42:
	ld.global.nc.u32 	%r1879, [%rd564];
	cvt.rn.f64.s32 	%fd1, %r1879;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r141, %r1879, %r7308;
	setp.lt.s32 	%p36, %r141, %r1723;
	or.b32  	%r1880, %r121, %r141;
	setp.gt.s32 	%p37, %r1880, -1;
	and.pred  	%p38, %p36, %p37;
	setp.lt.s32 	%p39, %r121, %r1724;
	and.pred  	%p1, %p39, %p38;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p40, %f65, 0f40000000;
	@%p40 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1883, %r122, %r141;
	mul.wide.s32 	%rd95, %r1883, 4;
	add.s64 	%rd96, %rd11, %rd95;
	ld.global.f32 	%f68, [%rd96];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7311, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7311, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1884, %r7312, %r120;
	mul.wide.s32 	%rd97, %r1884, 4;
	add.s64 	%rd98, %rd12, %rd97;
	st.global.u32 	[%rd98], %r7311;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p41, %f3, 0f40000000;
	@%p41 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1887, %r123, %r141;
	mul.wide.s32 	%rd99, %r1887, 4;
	add.s64 	%rd100, %rd11, %rd99;
	ld.global.f32 	%f73, [%rd100];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7313, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7313, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1888, %r7312, %r120;
	mul.wide.s32 	%rd101, %r1888, 4;
	add.s64 	%rd102, %rd12, %rd101;
	st.global.u32 	[%rd102], %r7313;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p42, %f74, 0f40000000;
	@%p42 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1891, %r124, %r141;
	mul.wide.s32 	%rd103, %r1891, 4;
	add.s64 	%rd104, %rd11, %rd103;
	ld.global.f32 	%f77, [%rd104];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7315, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7315, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1892, %r7312, %r120;
	mul.wide.s32 	%rd105, %r1892, 4;
	add.s64 	%rd106, %rd12, %rd105;
	st.global.u32 	[%rd106], %r7315;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_57:
	or.b32  	%r1893, %r126, %r141;
	setp.gt.s32 	%p43, %r1893, -1;
	and.pred  	%p45, %p36, %p43;
	setp.le.s32 	%p46, %r7309, %r1724;
	and.pred  	%p2, %p46, %p45;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p47, %f4, 0f40000000;
	@%p47 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1896, %r125, %r141;
	mul.wide.s32 	%rd107, %r1896, 4;
	add.s64 	%rd108, %rd11, %rd107;
	ld.global.f32 	%f80, [%rd108];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7317, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7317, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1897, %r7312, %r120;
	mul.wide.s32 	%rd109, %r1897, 4;
	add.s64 	%rd110, %rd12, %rd109;
	st.global.u32 	[%rd110], %r7317;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p48, %f5, 0f40000000;
	@%p48 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1900, %r127, %r141;
	mul.wide.s32 	%rd111, %r1900, 4;
	add.s64 	%rd112, %rd11, %rd111;
	ld.global.f32 	%f83, [%rd112];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7319, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7319, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1901, %r7312, %r120;
	mul.wide.s32 	%rd113, %r1901, 4;
	add.s64 	%rd114, %rd12, %rd113;
	st.global.u32 	[%rd114], %r7319;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p49, %f6, 0f40000000;
	@%p49 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1904, %r128, %r141;
	mul.wide.s32 	%rd115, %r1904, 4;
	add.s64 	%rd116, %rd11, %rd115;
	ld.global.f32 	%f86, [%rd116];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7321, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7321, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1905, %r7312, %r120;
	mul.wide.s32 	%rd117, %r1905, 4;
	add.s64 	%rd118, %rd12, %rd117;
	st.global.u32 	[%rd118], %r7321;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_72:
	or.b32  	%r1906, %r7309, %r141;
	setp.gt.s32 	%p50, %r1906, -1;
	and.pred  	%p52, %p36, %p50;
	setp.lt.s32 	%p53, %r7309, %r1724;
	and.pred  	%p3, %p53, %p52;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p54, %f7, 0f40000000;
	@%p54 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1909, %r131, %r141;
	mul.wide.s32 	%rd119, %r1909, 4;
	add.s64 	%rd120, %rd11, %rd119;
	ld.global.f32 	%f89, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7323, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1910, %r7312, %r120;
	mul.wide.s32 	%rd121, %r1910, 4;
	add.s64 	%rd122, %rd12, %rd121;
	st.global.u32 	[%rd122], %r7323;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p55, %f90, 0f40000000;
	@%p55 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1913, %r129, %r141;
	mul.wide.s32 	%rd123, %r1913, 4;
	add.s64 	%rd124, %rd11, %rd123;
	ld.global.f32 	%f93, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7325, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1914, %r7312, %r120;
	mul.wide.s32 	%rd125, %r1914, 4;
	add.s64 	%rd126, %rd12, %rd125;
	st.global.u32 	[%rd126], %r7325;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p56, %f8, 0f40000000;
	@%p56 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1917, %r130, %r141;
	mul.wide.s32 	%rd127, %r1917, 4;
	add.s64 	%rd128, %rd11, %rd127;
	ld.global.f32 	%f96, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7327, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1918, %r7312, %r120;
	mul.wide.s32 	%rd129, %r1918, 4;
	add.s64 	%rd130, %rd12, %rd129;
	st.global.u32 	[%rd130], %r7327;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_87:
	or.b32  	%r1919, %r133, %r141;
	setp.gt.s32 	%p57, %r1919, -1;
	and.pred  	%p59, %p36, %p57;
	setp.lt.s32 	%p60, %r133, %r1724;
	and.pred  	%p4, %p60, %p59;
	@%p54 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1922, %r132, %r141;
	mul.wide.s32 	%rd131, %r1922, 4;
	add.s64 	%rd132, %rd11, %rd131;
	ld.global.f32 	%f99, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7329, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1923, %r7312, %r120;
	mul.wide.s32 	%rd133, %r1923, 4;
	add.s64 	%rd134, %rd12, %rd133;
	st.global.u32 	[%rd134], %r7329;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_92:
	@%p48 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1926, %r134, %r141;
	mul.wide.s32 	%rd135, %r1926, 4;
	add.s64 	%rd136, %rd11, %rd135;
	ld.global.f32 	%f102, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7331, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7331, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1927, %r7312, %r120;
	mul.wide.s32 	%rd137, %r1927, 4;
	add.s64 	%rd138, %rd12, %rd137;
	st.global.u32 	[%rd138], %r7331;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_97:
	@%p56 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1930, %r135, %r141;
	mul.wide.s32 	%rd139, %r1930, 4;
	add.s64 	%rd140, %rd11, %rd139;
	ld.global.f32 	%f105, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7333, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7333, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1931, %r7312, %r120;
	mul.wide.s32 	%rd141, %r1931, 4;
	add.s64 	%rd142, %rd12, %rd141;
	st.global.u32 	[%rd142], %r7333;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_102:
	or.b32  	%r1932, %r137, %r141;
	setp.gt.s32 	%p64, %r1932, -1;
	and.pred  	%p66, %p36, %p64;
	setp.lt.s32 	%p67, %r137, %r1724;
	and.pred  	%p5, %p67, %p66;
	@%p47 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1935, %r136, %r141;
	mul.wide.s32 	%rd143, %r1935, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f108, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7335, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7335, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1936, %r7312, %r120;
	mul.wide.s32 	%rd145, %r1936, 4;
	add.s64 	%rd146, %rd12, %rd145;
	st.global.u32 	[%rd146], %r7335;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_107:
	@%p41 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1939, %r138, %r141;
	mul.wide.s32 	%rd147, %r1939, 4;
	add.s64 	%rd148, %rd11, %rd147;
	ld.global.f32 	%f111, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7337, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7337, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1940, %r7312, %r120;
	mul.wide.s32 	%rd149, %r1940, 4;
	add.s64 	%rd150, %rd12, %rd149;
	st.global.u32 	[%rd150], %r7337;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_112:
	@%p49 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1943, %r139, %r141;
	mul.wide.s32 	%rd151, %r1943, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f114, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7339, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7339, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1944, %r7312, %r120;
	mul.wide.s32 	%rd153, %r1944, 4;
	add.s64 	%rd154, %rd12, %rd153;
	st.global.u32 	[%rd154], %r7339;
	add.s32 	%r7312, %r7312, 1;

$L__BB0_117:
	add.s64 	%rd564, %rd564, 4;
	mov.u64 	%rd155, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd156, %rd155, 24;
	setp.ne.s64 	%p71, %rd564, %rd156;
	@%p71 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7309, %r7309, %r38;
	setp.lt.s32 	%p72, %r7309, %r1724;
	@%p72 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7308, %r7308, %r1744;
	setp.lt.s32 	%p73, %r7308, %r1723;
	@%p73 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p74, %r1727, 1;
	ld.param.u64 	%rd157, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd157;
	ld.param.u64 	%rd158, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd158;
	@%p74 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r245, %r69, 1;
	shr.u32 	%r1992, %r1728, 31;
	add.s32 	%r1993, %r1728, %r1992;
	shr.u32 	%r1994, %r1993, 1;
	and.b32  	%r246, %r1994, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd259, %rd177, 24;

$L__BB0_140:
	setp.ge.s32 	%p84, %r245, %r1724;
	@%p84 bra 	$L__BB0_266;

	mov.u32 	%r7347, %r245;

$L__BB0_142:
	setp.ne.s32 	%p85, %r36, 0;
	@%p85 bra 	$L__BB0_265;

	shr.u32 	%r1996, %r7347, 31;
	add.s32 	%r1997, %r7347, %r1996;
	shr.s32 	%r1998, %r1997, 1;
	mad.lo.s32 	%r1999, %r1998, %r1723, %r7341;
	shl.b32 	%r250, %r1999, 5;
	add.s32 	%r251, %r7347, -2;
	mul.lo.s32 	%r252, %r251, %r1723;
	add.s32 	%r2000, %r1724, %r251;
	mul.lo.s32 	%r253, %r2000, %r1723;
	add.s32 	%r254, %r252, %r1723;
	add.s32 	%r255, %r7347, -1;
	add.s32 	%r2001, %r1724, %r255;
	mul.lo.s32 	%r256, %r2001, %r1723;
	add.s32 	%r2002, %r1724, %r7347;
	mul.lo.s32 	%r257, %r2002, %r1723;
	mul.lo.s32 	%r258, %r7347, %r1723;
	add.s32 	%r259, %r258, %r1723;
	add.s32 	%r260, %r7347, 1;
	add.s32 	%r2003, %r1724, %r260;
	mul.lo.s32 	%r261, %r2003, %r1723;
	add.s32 	%r262, %r259, %r1723;
	add.s32 	%r263, %r7347, 2;
	add.s32 	%r2004, %r1724, %r263;
	mul.lo.s32 	%r264, %r2004, %r1723;
	mov.u32 	%r7351, 0;
	mov.u64 	%rd565, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r2005, [%rd565];
	cvt.rn.f64.s32 	%fd2, %r2005;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r266, %r2005, %r7341;
	setp.lt.s32 	%p86, %r266, %r1723;
	or.b32  	%r2006, %r251, %r266;
	setp.gt.s32 	%p87, %r2006, -1;
	and.pred  	%p88, %p86, %p87;
	setp.lt.s32 	%p89, %r251, %r1724;
	and.pred  	%p6, %p89, %p88;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p90, %f133, 0f40000000;
	@%p90 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p91, %r246, 0;
	add.s32 	%r2008, %r252, %r266;
	shl.b32 	%r2009, %r2008, 1;
	mul.wide.s32 	%rd178, %r2009, 4;
	add.s64 	%rd179, %rd15, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p91 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7349, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7349, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7349, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r271, %r7351, %r250;
	mul.wide.s32 	%rd180, %r271, 4;
	add.s64 	%rd181, %rd16, %rd180;
	st.global.u32 	[%rd181], %r7349;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p92, %r246, 0;
	add.s32 	%r2013, %r253, %r266;
	shl.b32 	%r2014, %r2013, 1;
	mul.wide.s32 	%rd182, %r2014, 4;
	add.s64 	%rd183, %rd15, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p92 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7350, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7350, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7350, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2017, %r271, 1;
	mul.wide.s32 	%rd184, %r2017, 4;
	add.s64 	%rd185, %rd16, %rd184;
	st.global.u32 	[%rd185], %r7350;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p93, %f13, 0f40000000;
	@%p93 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p94, %r246, 0;
	add.s32 	%r2019, %r252, %r266;
	shl.b32 	%r2020, %r2019, 1;
	or.b32  	%r2021, %r2020, 1;
	mul.wide.s32 	%rd186, %r2021, 4;
	add.s64 	%rd187, %rd15, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p94 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7352, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7352, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7352, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r282, %r7351, %r250;
	mul.wide.s32 	%rd188, %r282, 4;
	add.s64 	%rd189, %rd16, %rd188;
	st.global.u32 	[%rd189], %r7352;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p95, %r246, 0;
	add.s32 	%r2025, %r253, %r266;
	shl.b32 	%r2026, %r2025, 1;
	or.b32  	%r2027, %r2026, 1;
	mul.wide.s32 	%rd190, %r2027, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p95 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7353, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7353, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7353, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2030, %r282, 1;
	mul.wide.s32 	%rd192, %r2030, 4;
	add.s64 	%rd193, %rd16, %rd192;
	st.global.u32 	[%rd193], %r7353;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_168:
	or.b32  	%r2031, %r255, %r266;
	setp.gt.s32 	%p96, %r2031, -1;
	and.pred  	%p98, %p86, %p96;
	setp.le.s32 	%p99, %r7347, %r1724;
	and.pred  	%p7, %p99, %p98;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p100, %f16, 0f40000000;
	@%p100 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p101, %r246, 0;
	add.s32 	%r2033, %r254, %r266;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd194, %r2034, 4;
	add.s64 	%rd195, %rd15, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p101 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7355, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7355, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7355, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r293, %r7351, %r250;
	mul.wide.s32 	%rd196, %r293, 4;
	add.s64 	%rd197, %rd16, %rd196;
	st.global.u32 	[%rd197], %r7355;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p102, %r246, 0;
	add.s32 	%r2038, %r256, %r266;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd198, %r2039, 4;
	add.s64 	%rd199, %rd15, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p102 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7356, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7356, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7356, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2042, %r293, 1;
	mul.wide.s32 	%rd200, %r2042, 4;
	add.s64 	%rd201, %rd16, %rd200;
	st.global.u32 	[%rd201], %r7356;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p103, %f19, 0f40000000;
	@%p103 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p104, %r246, 0;
	add.s32 	%r2044, %r254, %r266;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd202, %r2046, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p104 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7358, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7358, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7358, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r304, %r7351, %r250;
	mul.wide.s32 	%rd204, %r304, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7358;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p105, %r246, 0;
	add.s32 	%r2050, %r256, %r266;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd206, %r2052, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p105 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7359, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7359, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7359, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2055, %r304, 1;
	mul.wide.s32 	%rd208, %r2055, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7359;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_192:
	or.b32  	%r2056, %r7347, %r266;
	setp.gt.s32 	%p106, %r2056, -1;
	and.pred  	%p108, %p86, %p106;
	setp.lt.s32 	%p109, %r7347, %r1724;
	and.pred  	%p8, %p109, %p108;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p110, %f22, 0f40000000;
	@%p110 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p111, %r246, 0;
	add.s32 	%r2058, %r258, %r266;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd210, %r2059, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p111 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7361, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7361, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7361, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r315, %r7351, %r250;
	mul.wide.s32 	%rd212, %r315, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7361;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p112, %r246, 0;
	add.s32 	%r2063, %r257, %r266;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd214, %r2064, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p112 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7362, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7362, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7362, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2067, %r315, 1;
	mul.wide.s32 	%rd216, %r2067, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7362;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p113, %f196, 0f40000000;
	@%p113 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p114, %r246, 0;
	add.s32 	%r2069, %r258, %r266;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd218, %r2071, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p114 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7364, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7364, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7364, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r326, %r7351, %r250;
	mul.wide.s32 	%rd220, %r326, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7364;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p115, %r246, 0;
	add.s32 	%r2075, %r257, %r266;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd222, %r2077, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p115 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7365, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7365, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7365, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2080, %r326, 1;
	mul.wide.s32 	%rd224, %r2080, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7365;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_216:
	or.b32  	%r2081, %r260, %r266;
	setp.gt.s32 	%p116, %r2081, -1;
	and.pred  	%p118, %p86, %p116;
	setp.lt.s32 	%p119, %r260, %r1724;
	and.pred  	%p9, %p119, %p118;
	@%p110 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p121, %r246, 0;
	add.s32 	%r2083, %r259, %r266;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd226, %r2084, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p121 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7367, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7367, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7367, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r337, %r7351, %r250;
	mul.wide.s32 	%rd228, %r337, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7367;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p122, %r246, 0;
	add.s32 	%r2088, %r261, %r266;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd230, %r2089, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p122 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7368, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7368, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7368, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2092, %r337, 1;
	mul.wide.s32 	%rd232, %r2092, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7368;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_228:
	@%p103 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p124, %r246, 0;
	add.s32 	%r2094, %r259, %r266;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd234, %r2096, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p124 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7370, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r348, %r7351, %r250;
	mul.wide.s32 	%rd236, %r348, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7370;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p125, %r246, 0;
	add.s32 	%r2100, %r261, %r266;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd238, %r2102, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p125 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7371, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7371, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7371, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2105, %r348, 1;
	mul.wide.s32 	%rd240, %r2105, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7371;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_240:
	or.b32  	%r2106, %r263, %r266;
	setp.gt.s32 	%p126, %r2106, -1;
	and.pred  	%p128, %p86, %p126;
	setp.lt.s32 	%p129, %r263, %r1724;
	and.pred  	%p10, %p129, %p128;
	@%p100 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p131, %r246, 0;
	add.s32 	%r2108, %r262, %r266;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd242, %r2109, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p131 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7373, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7373, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7373, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r359, %r7351, %r250;
	mul.wide.s32 	%rd244, %r359, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7373;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p132, %r246, 0;
	add.s32 	%r2113, %r264, %r266;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd246, %r2114, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p132 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7374, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2117, %r359, 1;
	mul.wide.s32 	%rd248, %r2117, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7374;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_252:
	@%p93 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p134, %r246, 0;
	add.s32 	%r2119, %r262, %r266;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd250, %r2121, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p134 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7376, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7376, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7376, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r370, %r7351, %r250;
	mul.wide.s32 	%rd252, %r370, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7376;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p135, %r246, 0;
	add.s32 	%r2125, %r264, %r266;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd254, %r2127, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p135 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7377, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2130, %r370, 1;
	mul.wide.s32 	%rd256, %r2130, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7377;
	add.s32 	%r7351, %r7351, 2;

$L__BB0_264:
	add.s64 	%rd565, %rd565, 4;
	setp.ne.s64 	%p136, %rd565, %rd259;
	@%p136 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7347, %r7347, %r38;
	setp.lt.s32 	%p137, %r7347, %r1724;
	@%p137 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7341, %r7341, %r1744;
	setp.lt.s32 	%p138, %r7341, %r1723;
	@%p138 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r219, %r68;
	mov.u32 	%r1945, 31;
	sub.s32 	%r1946, %r1945, %r36;
	setp.gt.s32 	%p76, %r35, %r36;
	selp.b32 	%r1947, %r36, %r1946, %p76;
	shl.b32 	%r1948, %r1947, 2;
	mov.u32 	%r1949, 2;
	sub.s32 	%r220, %r1948, %r1726;
	shl.b32 	%r1950, %r1725, 2;
	mov.u32 	%r1951, 128;
	sub.s32 	%r221, %r1951, %r1950;
	sub.s32 	%r1952, %r1949, %r1726;
	add.s32 	%r222, %r1952, %r1948;
	add.s32 	%r223, %r1723, -1;
	add.s32 	%r224, %r220, 1;
	add.s32 	%r225, %r222, 1;
	rem.s32 	%r1977, %r224, %r221;
	add.s32 	%r1978, %r1977, %r221;
	rem.s32 	%r236, %r1978, %r221;
	rem.s32 	%r1979, %r225, %r221;
	add.s32 	%r1980, %r1979, %r221;
	rem.s32 	%r237, %r1980, %r221;

$L__BB0_123:
	setp.ne.s32 	%p77, %r32, %r219;
	@%p77 bra 	$L__BB0_137;

	shl.b32 	%r227, %r7341, 1;
	rem.s32 	%r1953, %r220, %r221;
	add.s32 	%r1954, %r1953, %r221;
	rem.s32 	%r228, %r1954, %r221;
	rem.s32 	%r1955, %r222, %r221;
	add.s32 	%r1956, %r1955, %r221;
	rem.s32 	%r229, %r1956, %r221;
	@%p76 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1959, %r227, %r221;
	add.s32 	%r1960, %r1959, %r228;
	mul.wide.s32 	%rd159, %r1960, 4;
	add.s64 	%rd160, %rd15, %rd159;
	ld.global.f32 	%f117, [%rd160];
	add.s32 	%r1961, %r1959, %r229;
	mul.wide.s32 	%rd161, %r1961, 4;
	add.s64 	%rd162, %rd15, %rd161;
	ld.global.f32 	%f118, [%rd162];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1962, %r7341, 5;
	add.s32 	%r1963, %r1962, %r36;
	shl.b32 	%r1964, %r1963, 2;
	mul.wide.s32 	%rd163, %r1964, 4;
	add.s64 	%rd17, %rd16, %rd163;
	st.global.u32 	[%rd17], %r7342;
	@%p76 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1967, %r227, 1;
	mul.lo.s32 	%r1968, %r1967, %r221;
	add.s32 	%r1969, %r1968, %r228;
	mul.wide.s32 	%rd164, %r1969, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f121, [%rd165];
	add.s32 	%r1970, %r1968, %r229;
	mul.wide.s32 	%rd166, %r1970, 4;
	add.s64 	%rd167, %rd15, %rd166;
	ld.global.f32 	%f122, [%rd167];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7343, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7343, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1971, %r223, %r7341;
	rem.s32 	%r1972, %r1971, %r1723;
	shl.b32 	%r1973, %r1972, 5;
	add.s32 	%r1974, %r1973, %r36;
	shl.b32 	%r1975, %r1974, 2;
	or.b32  	%r1976, %r1975, 2;
	mul.wide.s32 	%rd168, %r1976, 4;
	add.s64 	%rd18, %rd16, %rd168;
	st.global.u32 	[%rd18], %r7343;
	@%p76 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1983, %r227, %r221;
	add.s32 	%r1984, %r1983, %r236;
	mul.wide.s32 	%rd169, %r1984, 4;
	add.s64 	%rd170, %rd15, %rd169;
	ld.global.f32 	%f125, [%rd170];
	add.s32 	%r1985, %r1983, %r237;
	mul.wide.s32 	%rd171, %r1985, 4;
	add.s64 	%rd172, %rd15, %rd171;
	ld.global.f32 	%f126, [%rd172];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd17+4], %r7344;
	@%p76 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1988, %r227, 1;
	mul.lo.s32 	%r1989, %r1988, %r221;
	add.s32 	%r1990, %r1989, %r236;
	mul.wide.s32 	%rd173, %r1990, 4;
	add.s64 	%rd174, %rd15, %rd173;
	ld.global.f32 	%f129, [%rd174];
	add.s32 	%r1991, %r1989, %r237;
	mul.wide.s32 	%rd175, %r1991, 4;
	add.s64 	%rd176, %rd15, %rd175;
	ld.global.f32 	%f130, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7345, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd18+4], %r7345;

$L__BB0_137:
	add.s32 	%r7341, %r7341, %r1744;
	setp.lt.s32 	%p82, %r7341, %r1723;
	@%p82 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2132, %r1718, -1;
	mad.lo.s32 	%r2133, %r1719, 576, 128;
	mul.lo.s32 	%r2134, %r2133, %r2132;
	add.s32 	%r2135, %r63, -64;
	add.s32 	%r2136, %r2135, %r63;
	add.s32 	%r2137, %r1719, -1;
	mad.lo.s32 	%r2138, %r2136, %r2137, %r2134;
	mul.lo.s32 	%r2139, %r2132, %r1719;
	mul.lo.s32 	%r2140, %r2139, 320;
	mad.lo.s32 	%r2141, %r2135, %r2137, %r2140;
	add.s32 	%r379, %r2141, %r2138;
	setp.lt.s32 	%p139, %r379, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7560, {low,high};}

	// end inline asm
	@%p139 bra 	$L__BB0_270;

	mov.u32 	%r7381, 0;
	mov.u32 	%r7379, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7379], %r7560;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7379+4], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2145, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7379+8], %r2145;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2146, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7379+12], %r2146;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7560, {low,high};}

	// end inline asm
	add.s32 	%r7379, %r7379, 16;
	add.s32 	%r7381, %r7381, 4;
	setp.lt.s32 	%p140, %r7381, %r379;
	@%p140 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7561, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2149, {low,high};}

	// end inline asm
	ld.param.u64 	%rd260, [%rd1+152];
	cvta.to.global.u64 	%rd21, %rd260;
	mov.u32 	%r2150, 31;
	sub.s32 	%r2151, %r2150, %r36;
	setp.gt.s32 	%p141, %r35, %r36;
	selp.b32 	%r2152, %r36, %r2151, %p141;
	shl.b32 	%r2153, %r2152, 2;
	sub.s32 	%r390, %r2153, %r1726;
	shl.b32 	%r2154, %r1725, 2;
	mov.u32 	%r2155, 128;
	sub.s32 	%r391, %r2155, %r2154;
	rem.s32 	%r2156, %r390, %r391;
	add.s32 	%r2157, %r2156, %r391;
	rem.s32 	%r392, %r2157, %r391;
	add.s32 	%r2158, %r390, 2;
	rem.s32 	%r2159, %r2158, %r391;
	add.s32 	%r2160, %r2159, %r391;
	rem.s32 	%r393, %r2160, %r391;
	mul.lo.s32 	%r2161, %r392, 6;
	mul.lo.s32 	%r2162, %r393, 6;
	mul.wide.s32 	%rd261, %r2161, 4;
	add.s64 	%rd22, %rd21, %rd261;
	mul.wide.s32 	%rd262, %r2162, 4;
	add.s64 	%rd23, %rd21, %rd262;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd22];
	ld.global.f32 	%f274, [%rd22+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd23+8];
	ld.global.f32 	%f276, [%rd23];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7383, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd22+4];
	ld.global.f32 	%f282, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7384, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd22];
	ld.global.f32 	%f280, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7384, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd22+20];
	ld.global.f32 	%f286, [%rd22+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd23+20];
	ld.global.f32 	%f288, [%rd23+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7385, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd22+16];
	ld.global.f32 	%f294, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd22+12];
	ld.global.f32 	%f292, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7386, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2171, %r390, 1;
	rem.s32 	%r2172, %r2171, %r391;
	add.s32 	%r2173, %r2172, %r391;
	rem.s32 	%r406, %r2173, %r391;
	add.s32 	%r2174, %r390, 3;
	rem.s32 	%r2175, %r2174, %r391;
	add.s32 	%r2176, %r2175, %r391;
	rem.s32 	%r407, %r2176, %r391;
	mul.lo.s32 	%r2177, %r406, 6;
	mul.lo.s32 	%r2178, %r407, 6;
	mul.wide.s32 	%rd263, %r2177, 4;
	add.s64 	%rd24, %rd21, %rd263;
	mul.wide.s32 	%rd264, %r2178, 4;
	add.s64 	%rd25, %rd21, %rd264;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7387, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd24];
	ld.global.f32 	%f298, [%rd24+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd25+8];
	ld.global.f32 	%f300, [%rd25];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7387, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd24+4];
	ld.global.f32 	%f306, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd24];
	ld.global.f32 	%f304, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7388, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd24+20];
	ld.global.f32 	%f310, [%rd24+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd25+20];
	ld.global.f32 	%f312, [%rd25+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7389, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd24+16];
	ld.global.f32 	%f318, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7390, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd24+12];
	ld.global.f32 	%f316, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7390, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2187, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd265, %r2187;
	// begin inline asm
	mov.u32 %r2188, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd266, %r2188;
	bfi.b64 	%rd26, %rd266, %rd265, 32, 32;
	setp.ne.s64 	%p150, %rd26, 0;
	@%p150 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd27, %rd26, 4;
	mov.u32 	%r2189, %nctaid.y;
	mov.u32 	%r2190, %nctaid.x;
	mul.lo.s32 	%r2191, %r2190, %r2189;
	mov.u32 	%r2192, %nctaid.z;
	mul.lo.s32 	%r420, %r2191, %r2192;
	neg.s32 	%r2193, %r32;
	add.s32 	%r2194, %r36, %r31;
	setp.ne.s32 	%p151, %r2194, %r2193;
	mov.u32 	%r2195, %ctaid.x;
	add.s32 	%r421, %r2195, %r33;
	neg.s32 	%r422, %r34;
	bar.sync 	0;
	@%p151 bra 	$L__BB0_300;

	setp.eq.s32 	%p152, %r421, %r422;
	mov.u32 	%r2198, -2147483647;
	sub.s32 	%r2199, %r2198, %r420;
	selp.b32 	%r2197, %r2199, 1, %p152;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2196,[%rd27],%r2197;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2200, [%rd27];
	xor.b32  	%r2201, %r2200, %r2196;
	setp.gt.s32 	%p153, %r2201, -1;
	@%p153 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2202,[%rd27];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p154, %r39, 1;
	@%p154 bra 	$L__BB0_864;

	shr.s32 	%r2216, %r1728, 31;
	shr.u32 	%r2217, %r2216, 30;
	add.s32 	%r2218, %r1728, %r2217;
	shr.s32 	%r424, %r2218, 2;
	add.s32 	%r2219, %r36, 28;
	mul.hi.s32 	%r2220, %r2219, -1925330167;
	add.s32 	%r2221, %r2220, %r2219;
	shr.u32 	%r2222, %r2221, 31;
	shr.s32 	%r2223, %r2221, 4;
	add.s32 	%r2224, %r2223, %r2222;
	mul.lo.s32 	%r2225, %r2224, 29;
	sub.s32 	%r2226, %r2219, %r2225;
	add.s32 	%r2227, %r36, 30;
	mul.hi.s32 	%r2228, %r2227, -1925330167;
	add.s32 	%r2229, %r2228, %r2227;
	shr.u32 	%r2230, %r2229, 31;
	shr.s32 	%r2231, %r2229, 4;
	add.s32 	%r2232, %r2231, %r2230;
	mul.lo.s32 	%r2233, %r2232, 29;
	sub.s32 	%r2234, %r2227, %r2233;
	shr.u32 	%r2235, %r1728, 31;
	add.s32 	%r2236, %r1728, %r2235;
	and.b32  	%r2237, %r2236, -2;
	sub.s32 	%r425, %r1728, %r2237;
	setp.lt.s32 	%p155, %r36, 29;
	selp.b32 	%r426, %r2226, %r36, %p155;
	setp.lt.s32 	%p156, %r392, %r1737;
	setp.ge.s32 	%p157, %r392, %r1736;
	and.pred  	%p11, %p156, %p157;
	setp.lt.s32 	%p158, %r406, %r1737;
	setp.ge.s32 	%p159, %r406, %r1736;
	and.pred  	%p12, %p158, %p159;
	setp.lt.s32 	%p160, %r393, %r1737;
	setp.ge.s32 	%p161, %r393, %r1736;
	and.pred  	%p13, %p160, %p161;
	setp.lt.s32 	%p162, %r407, %r1737;
	setp.ge.s32 	%p163, %r407, %r1736;
	and.pred  	%p14, %p162, %p163;
	selp.b32 	%r427, %r2234, %r36, %p155;
	mov.u32 	%r2215, 0;
	// begin inline asm
	{mov.u32 %r2238, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2564, %r2238, 8;
	add.s32 	%r2565, %r2564, -8192;
	or.b32  	%r2242, %r2565, 31;
	mul.wide.s32 	%rd277, %r36, 16;
	mul.wide.s32 	%rd279, %r36, 8;
	mov.u32 	%r7391, %r2215;
	mov.u32 	%r7392, %r2215;
	mov.u32 	%r7393, %r2215;
	mov.u32 	%r7394, %r2215;
	mov.u32 	%r7395, %r2215;
	mov.u32 	%r7396, %r2215;
	mov.u32 	%r7397, %r2215;
	mov.u32 	%r7398, %r2215;
	mov.u32 	%r7399, %r2215;
	mov.u32 	%r7400, %r2215;
	mov.u32 	%r7401, %r2215;
	mov.u32 	%r7402, %r2215;
	mov.u32 	%r7690, %r2149;
	mov.u32 	%r7691, %r2149;
	mov.u32 	%r7688, %r2149;
	mov.u32 	%r7689, %r2149;
	mov.u32 	%r7710, %r2149;
	mov.u32 	%r7711, %r2149;
	mov.u32 	%r7724, %r2149;
	mov.u32 	%r7712, %r2149;
	mov.u32 	%r7726, %r2149;
	mov.u32 	%r7713, %r2149;
	mov.u32 	%r7714, %r2149;
	mov.u32 	%r7715, %r2149;
	mov.u32 	%r7716, %r2149;
	mov.u32 	%r7717, %r2149;
	mov.u32 	%r7718, %r2149;
	mov.u32 	%r7719, %r2149;
	mov.u32 	%r7728, %r2149;
	mov.u32 	%r7729, %r2149;
	mov.u32 	%r7730, %r2149;
	mov.u32 	%r7731, %r2149;
	mov.u32 	%r7732, %r2149;
	mov.u32 	%r7733, %r2149;
	mov.u32 	%r7720, %r2149;
	mov.u32 	%r7721, %r2149;
	mov.u32 	%r7734, %r2149;
	mov.u32 	%r7735, %r2149;
	mov.u32 	%r7722, %r2149;
	mov.u32 	%r7723, %r2149;
	mov.u32 	%r7692, %r2149;
	mov.u32 	%r7693, %r2149;
	mov.u32 	%r7680, %r2149;
	mov.u32 	%r7681, %r2149;
	mov.u32 	%r7682, %r2149;
	mov.u32 	%r7683, %r2149;
	mov.u32 	%r7694, %r2149;
	mov.u32 	%r7695, %r2149;
	mov.u32 	%r7696, %r2149;
	mov.u32 	%r7697, %r2149;
	mov.u32 	%r7698, %r2149;
	mov.u32 	%r7699, %r2149;
	mov.u32 	%r7684, %r2149;
	mov.u32 	%r7685, %r2149;
	mov.u32 	%r7686, %r2149;
	mov.u32 	%r7687, %r2149;
	mov.u32 	%r7700, %r2149;
	mov.u32 	%r7701, %r2149;
	mov.u32 	%r7702, %r2149;
	mov.u32 	%r7703, %r2149;
	mov.u32 	%r7451, %r2149;
	mov.u32 	%r7452, %r2149;
	mov.u32 	%r7750, %r2149;
	mov.u32 	%r7751, %r2149;
	mov.u32 	%r7457, %r2149;
	mov.u32 	%r7458, %r2149;
	mov.u32 	%r7459, %r2149;
	mov.u32 	%r7460, %r2149;
	mov.u32 	%r7752, %r2149;
	mov.u32 	%r7753, %r2149;
	mov.u32 	%r7463, %r2149;
	mov.u32 	%r7754, %r2149;
	mov.u32 	%r7465, %r2149;
	mov.u32 	%r7466, %r2149;
	mov.u32 	%r7755, %r2149;
	mov.u32 	%r7468, %r2149;
	mov.u32 	%r7469, %r2149;
	mov.u32 	%r7470, %r2149;
	mov.u32 	%r7704, %r2149;
	mov.u32 	%r7705, %r2149;
	mov.u32 	%r7473, %r2149;
	mov.u32 	%r7474, %r2149;
	mov.u32 	%r7477, %r2149;
	mov.u32 	%r7478, %r2149;
	mov.u32 	%r7479, %r2149;
	mov.u32 	%r7480, %r2149;
	mov.u32 	%r7481, %r2149;
	mov.u32 	%r7759, %r2149;
	mov.u32 	%r7483, %r2149;
	mov.u32 	%r7484, %r2149;
	mov.u32 	%r7485, %r2149;
	mov.u32 	%r7486, %r2149;
	mov.u32 	%r7487, %r2149;
	mov.u32 	%r7488, %r2149;
	mov.u32 	%r7489, %r2149;
	mov.u32 	%r7761, %r2149;
	mov.u32 	%r7491, %r2149;
	mov.u32 	%r7492, %r2149;
	mov.u32 	%r7493, %r2149;
	mov.u32 	%r7762, %r2149;
	mov.u32 	%r7495, %r2149;
	mov.u32 	%r7496, %r2149;
	mov.u32 	%r7497, %r2149;
	mov.u32 	%r7498, %r2149;
	mov.u32 	%r7499, %r2149;
	mov.u32 	%r7500, %r2149;
	mov.u32 	%r7501, %r2149;
	mov.u32 	%r7763, %r2149;
	mov.u32 	%r7503, %r2149;
	mov.u32 	%r7706, %r2149;
	mov.u32 	%r7505, %r2149;
	mov.u32 	%r7506, %r2149;
	mov.u32 	%r7507, %r2149;
	mov.u32 	%r7508, %r2149;
	mov.u32 	%r7707, %r2149;
	mov.u32 	%r7510, %r2149;
	mov.u32 	%r7511, %r2149;
	mov.u32 	%r7512, %r2149;
	mov.u32 	%r7513, %r2149;
	mov.u32 	%r7514, %r2149;
	mov.u32 	%r7515, %r2149;
	mov.u32 	%r7516, %r2149;
	mov.u32 	%r7517, %r2149;
	mov.u32 	%r7518, %r2149;
	mov.u32 	%r7519, %r2149;
	mov.u32 	%r7520, %r2149;
	mov.u32 	%r7521, %r2149;
	mov.u32 	%r7522, %r2149;
	mov.u32 	%r7523, %r2149;
	mov.u32 	%r7524, %r2149;
	mov.u32 	%r7525, %r2149;
	mov.u32 	%r7526, %r2149;
	mov.u32 	%r7527, %r2149;
	mov.u32 	%r7528, %r2149;
	mov.u32 	%r7529, %r2149;
	mov.u32 	%r7530, %r2149;
	mov.u32 	%r7531, %r2149;
	mov.u32 	%r7532, %r2149;
	mov.u32 	%r7533, %r2149;
	mov.u32 	%r7534, %r2149;
	mov.u32 	%r7535, %r2149;
	mov.u32 	%r7536, %r2149;
	mov.u32 	%r7537, %r2149;
	mov.u32 	%r7538, %r2149;
	mov.u32 	%r7539, %r2149;
	mov.u32 	%r7540, %r2149;
	mov.u32 	%r7541, %r2149;
	mov.u32 	%r7542, %r2149;
	mov.u32 	%r7543, %r2149;
	mov.u32 	%r7544, %r2149;
	mov.u32 	%r7545, %r2149;
	mov.u32 	%r7546, %r2149;
	mov.u32 	%r7547, %r2149;
	mov.u32 	%r7548, %r2149;
	mov.u32 	%r7549, %r2149;
	mov.u32 	%r7550, %r2149;
	mov.u32 	%r7551, %r2149;
	mov.u32 	%r7552, %r2149;
	mov.u32 	%r7553, %r2149;
	mov.u32 	%r7554, %r2149;
	mov.u32 	%r7555, %r2149;
	mov.u32 	%r7556, %r2149;
	mov.u32 	%r7557, %r2149;
	mov.u32 	%r7558, %r2149;
	mov.u32 	%r7559, %r2215;

$L__BB0_302:
	mov.u32 	%r539, %r7763;
	mov.u32 	%r535, %r7498;
	mov.u32 	%r531, %r7762;
	mov.u32 	%r529, %r7492;
	mov.u32 	%r527, %r7761;
	mov.u32 	%r519, %r7759;
	mov.u32 	%r7498, %r7755;
	mov.u32 	%r501, %r7754;
	mov.u32 	%r7492, %r7753;
	mov.u32 	%r498, %r7752;
	mov.u32 	%r493, %r7751;
	mov.u32 	%r492, %r7750;
	sub.s32 	%r7282, %r1723, %r38;
	mov.u32 	%r2253, 1;
	not.b32 	%r2527, %r33;
	mov.u32 	%r2519, -1;
	add.s32 	%r2528, %r1720, %r2527;
	mul.lo.s32 	%r2529, %r2528, %r1722;
	add.s32 	%r2530, %r7559, %r2529;
	not.b32 	%r2532, %r34;
	add.s32 	%r2533, %r1721, %r2532;
	mul.lo.s32 	%r2534, %r2533, %r1722;
	add.s32 	%r2535, %r7559, %r2534;
	add.s32 	%r2536, %r2529, %r2534;
	add.s32 	%r2537, %r2536, %r1723;
	not.b32 	%r2538, %r31;
	add.s32 	%r2539, %r1718, %r2538;
	mad.lo.s32 	%r2540, %r2528, %r1718, %r2539;
	not.b32 	%r2541, %r32;
	add.s32 	%r2542, %r1719, %r2541;
	mad.lo.s32 	%r2543, %r2533, %r1719, %r2542;
	add.s32 	%r2544, %r2540, %r2543;
	shl.b32 	%r2545, %r2544, 1;
	add.s32 	%r2546, %r2537, %r2545;
	add.s32 	%r2547, %r7559, %r2546;
	add.s32 	%r2548, %r7559, %r2536;
	div.s32 	%r2549, %r2547, %r1723;
	neg.s32 	%r2550, %r1723;
	sub.s32 	%r2553, %r38, %r1723;
	sub.s32 	%r2554, %r2540, %r2543;
	shl.b32 	%r2555, %r2554, 1;
	add.s32 	%r2556, %r2555, %r1724;
	mad.lo.s32 	%r2557, %r2549, %r38, %r2556;
	mad.lo.s32 	%r2558, %r2549, %r2553, %r2548;
	div.s32 	%r2559, %r2557, %r1724;
	mul.lo.s32 	%r2560, %r2559, %r1724;
	sub.s32 	%r2563, %r1745, %r1724;
	mov.u32 	%r2337, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2239,%r7561,%r2215,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2245, %r7384, %r2239, %p15;
	// begin inline asm
	{mul.f16x2 %r7645,%r2245,%r7558;
}
	// end inline asm
	selp.b32 	%r2248, %r7388, %r2239, %p15;
	// begin inline asm
	{mul.f16x2 %r7643,%r2248,%r7557;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2251,%r7561,%r2253,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2257, %r7384, %r2251, %p15;
	// begin inline asm
	{mul.f16x2 %r7644,%r2257,%r7556;
}
	// end inline asm
	selp.b32 	%r2260, %r7388, %r2251, %p15;
	// begin inline asm
	{mul.f16x2 %r7642,%r2260,%r7555;
}
	// end inline asm
	mov.u32 	%r2265, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2263,%r7561,%r2265,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2269, %r7384, %r2263, %p15;
	// begin inline asm
	{mul.f16x2 %r7641,%r2269,%r7554;
}
	// end inline asm
	selp.b32 	%r2272, %r7388, %r2263, %p15;
	// begin inline asm
	{mul.f16x2 %r7640,%r2272,%r7553;
}
	// end inline asm
	mov.u32 	%r2277, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2275,%r7561,%r2277,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2281, %r7384, %r2275, %p15;
	// begin inline asm
	{mul.f16x2 %r7639,%r2281,%r7735;
}
	// end inline asm
	selp.b32 	%r2284, %r7388, %r2275, %p15;
	// begin inline asm
	{mul.f16x2 %r7637,%r2284,%r7734;
}
	// end inline asm
	mov.u32 	%r2289, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2287,%r7561,%r2289,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2293, %r7384, %r2287, %p15;
	// begin inline asm
	{mul.f16x2 %r7638,%r2293,%r7552;
}
	// end inline asm
	selp.b32 	%r2296, %r7388, %r2287, %p15;
	// begin inline asm
	{mul.f16x2 %r7636,%r2296,%r7551;
}
	// end inline asm
	mov.u32 	%r2301, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2299,%r7561,%r2301,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2305, %r7384, %r2299, %p15;
	// begin inline asm
	{mul.f16x2 %r7635,%r2305,%r7550;
}
	// end inline asm
	selp.b32 	%r2308, %r7388, %r2299, %p15;
	// begin inline asm
	{mul.f16x2 %r7632,%r2308,%r7549;
}
	// end inline asm
	mov.u32 	%r2313, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2311,%r7561,%r2313,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2317, %r7384, %r2311, %p15;
	// begin inline asm
	{mul.f16x2 %r7634,%r2317,%r7548;
}
	// end inline asm
	selp.b32 	%r2320, %r7388, %r2311, %p15;
	// begin inline asm
	{mul.f16x2 %r7631,%r2320,%r7547;
}
	// end inline asm
	mov.u32 	%r2325, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2323,%r7561,%r2325,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2329, %r7384, %r2323, %p15;
	// begin inline asm
	{mul.f16x2 %r7633,%r2329,%r7546;
}
	// end inline asm
	selp.b32 	%r2332, %r7388, %r2323, %p15;
	// begin inline asm
	{mul.f16x2 %r7630,%r2332,%r7545;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2335,%r7561,%r2337,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2341, %r7384, %r2335, %p15;
	// begin inline asm
	{mul.f16x2 %r7629,%r2341,%r7544;
}
	// end inline asm
	selp.b32 	%r2344, %r7388, %r2335, %p15;
	// begin inline asm
	{mul.f16x2 %r7626,%r2344,%r7543;
}
	// end inline asm
	mov.u32 	%r2349, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2347,%r7561,%r2349,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2353, %r7384, %r2347, %p15;
	// begin inline asm
	{mul.f16x2 %r7628,%r2353,%r7542;
}
	// end inline asm
	selp.b32 	%r2356, %r7388, %r2347, %p15;
	// begin inline asm
	{mul.f16x2 %r7625,%r2356,%r7541;
}
	// end inline asm
	mov.u32 	%r2361, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2359,%r7561,%r2361,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2365, %r7384, %r2359, %p15;
	// begin inline asm
	{mul.f16x2 %r7627,%r2365,%r7540;
}
	// end inline asm
	selp.b32 	%r2368, %r7388, %r2359, %p15;
	// begin inline asm
	{mul.f16x2 %r7624,%r2368,%r7539;
}
	// end inline asm
	mov.u32 	%r2373, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2371,%r7561,%r2373,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2377, %r7384, %r2371, %p15;
	// begin inline asm
	{mul.f16x2 %r7623,%r2377,%r7721;
}
	// end inline asm
	selp.b32 	%r2380, %r7388, %r2371, %p15;
	// begin inline asm
	{mul.f16x2 %r7622,%r2380,%r7720;
}
	// end inline asm
	mov.u32 	%r2385, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2383,%r7561,%r2385,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2389, %r7384, %r2383, %p15;
	// begin inline asm
	{mul.f16x2 %r7621,%r2389,%r7733;
}
	// end inline asm
	selp.b32 	%r2392, %r7388, %r2383, %p15;
	// begin inline asm
	{mul.f16x2 %r7619,%r2392,%r7731;
}
	// end inline asm
	mov.u32 	%r2397, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2395,%r7561,%r2397,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2401, %r7384, %r2395, %p15;
	// begin inline asm
	{mul.f16x2 %r7620,%r2401,%r7732;
}
	// end inline asm
	selp.b32 	%r2404, %r7388, %r2395, %p15;
	// begin inline asm
	{mul.f16x2 %r7618,%r2404,%r7730;
}
	// end inline asm
	mov.u32 	%r2409, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2407,%r7561,%r2409,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2413, %r7384, %r2407, %p15;
	// begin inline asm
	{mul.f16x2 %r7617,%r2413,%r7729;
}
	// end inline asm
	selp.b32 	%r2416, %r7388, %r2407, %p15;
	// begin inline asm
	{mul.f16x2 %r7614,%r2416,%r7728;
}
	// end inline asm
	mov.u32 	%r2421, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2419,%r7561,%r2421,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2425, %r7384, %r2419, %p15;
	// begin inline asm
	{mul.f16x2 %r7616,%r2425,%r7538;
}
	// end inline asm
	selp.b32 	%r2428, %r7388, %r2419, %p15;
	// begin inline asm
	{mul.f16x2 %r7613,%r2428,%r7537;
}
	// end inline asm
	mov.u32 	%r2433, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2431,%r7561,%r2433,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2437, %r7384, %r2431, %p15;
	// begin inline asm
	{mul.f16x2 %r7615,%r2437,%r7536;
}
	// end inline asm
	selp.b32 	%r2440, %r7388, %r2431, %p15;
	// begin inline asm
	{mul.f16x2 %r7612,%r2440,%r7535;
}
	// end inline asm
	mov.u32 	%r2445, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2443,%r7561,%r2445,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2449, %r7384, %r2443, %p15;
	// begin inline asm
	{mul.f16x2 %r7611,%r2449,%r7719;
}
	// end inline asm
	selp.b32 	%r2452, %r7388, %r2443, %p15;
	// begin inline asm
	{mul.f16x2 %r7608,%r2452,%r7717;
}
	// end inline asm
	mov.u32 	%r2457, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2455,%r7561,%r2457,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2461, %r7384, %r2455, %p15;
	// begin inline asm
	{mul.f16x2 %r7610,%r2461,%r7718;
}
	// end inline asm
	selp.b32 	%r2464, %r7388, %r2455, %p15;
	// begin inline asm
	{mul.f16x2 %r7607,%r2464,%r7716;
}
	// end inline asm
	mov.u32 	%r2469, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2467,%r7561,%r2469,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2473, %r7384, %r2467, %p15;
	// begin inline asm
	{mul.f16x2 %r7609,%r2473,%r7534;
}
	// end inline asm
	selp.b32 	%r2476, %r7388, %r2467, %p15;
	// begin inline asm
	{mul.f16x2 %r7606,%r2476,%r7533;
}
	// end inline asm
	mov.u32 	%r2481, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2479,%r7561,%r2481,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2485, %r7384, %r2479, %p15;
	// begin inline asm
	{mul.f16x2 %r7605,%r2485,%r7715;
}
	// end inline asm
	selp.b32 	%r2488, %r7388, %r2479, %p15;
	// begin inline asm
	{mul.f16x2 %r7604,%r2488,%r7714;
}
	// end inline asm
	mov.u32 	%r2493, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2491,%r7561,%r2493,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2497, %r7384, %r2491, %p15;
	// begin inline asm
	{mul.f16x2 %r7603,%r2497,%r7713;
}
	// end inline asm
	selp.b32 	%r2500, %r7388, %r2491, %p15;
	// begin inline asm
	{mul.f16x2 %r7601,%r2500,%r7712;
}
	// end inline asm
	mov.u32 	%r2505, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2503,%r7561,%r2505,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2509, %r7384, %r2503, %p15;
	// begin inline asm
	{mul.f16x2 %r7602,%r2509,%r7726;
}
	// end inline asm
	selp.b32 	%r2512, %r7388, %r2503, %p15;
	// begin inline asm
	{mul.f16x2 %r7600,%r2512,%r7724;
}
	// end inline asm
	mov.u32 	%r2517, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2515,%r7561,%r2517,%r2242,%r2519;
}
	// end inline asm
	selp.b32 	%r2521, %r7384, %r2515, %p15;
	// begin inline asm
	{mul.f16x2 %r7599,%r2521,%r7711;
}
	// end inline asm
	selp.b32 	%r2524, %r7388, %r2515, %p15;
	// begin inline asm
	{mul.f16x2 %r7598,%r2524,%r7710;
}
	// end inline asm
	rem.s32 	%r647, %r2530, %r62;
	rem.s32 	%r648, %r2535, %r7282;
	mad.lo.s32 	%r649, %r2549, %r2550, %r2547;
	sub.s32 	%r650, %r2557, %r2560;
	mad.lo.s32 	%r651, %r2559, %r2563, %r2558;
	ld.param.u64 	%rd270, [%rd1+144];
	cvta.to.global.u64 	%rd271, %rd270;
	shl.b32 	%r2613, %r651, 1;
	mul.wide.s32 	%rd272, %r2613, 4;
	add.s64 	%rd28, %rd271, %rd272;
	@%p74 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2816, %r1740, 1;
	setp.lt.s32 	%p171, %r651, %r2816;
	setp.eq.s32 	%p172, %r424, %r36;
	setp.gt.s32 	%p173, %r651, -1;
	and.pred  	%p174, %p172, %p173;
	and.pred  	%p175, %p171, %p174;
	@%p175 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7564, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7565, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2616, %r1740, 1;
	setp.lt.s32 	%p166, %r651, %r2616;
	setp.gt.s32 	%p167, %r651, -1;
	and.pred  	%p168, %p167, %p166;
	@%p168 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7562, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7563, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7564, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7565, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2824, 0;
	mov.u32 	%r2835, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2822,%r7560,%r2824,%r2242,%r2835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2827,%r7564,%r2822;
}
	// end inline asm
	mov.u32 	%r2833, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2831,%r7560,%r2833,%r2242,%r2835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2836,%r7565,%r2831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r2827,%r2836;
}
	// end inline asm
	setp.eq.s32 	%p176, %r425, 0;
	mov.u32 	%r7566, %r7567;
	@%p176 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7566, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7645,%r7645,%r7566;
}
	// end inline asm
	setp.eq.s32 	%p177, %r425, 1;
	@%p177 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7567, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r7567;
}
	// end inline asm
	mov.u32 	%r2857, 2;
	mov.u32 	%r2868, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2855,%r7560,%r2857,%r2242,%r2868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2860,%r7564,%r2855;
}
	// end inline asm
	mov.u32 	%r2866, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2864,%r7560,%r2866,%r2242,%r2868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2869,%r7565,%r2864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r2860,%r2869;
}
	// end inline asm
	mov.u32 	%r7568, %r7569;
	@%p176 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7568, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7644,%r7644,%r7568;
}
	// end inline asm
	@%p177 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7569, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7642,%r7642,%r7569;
}
	// end inline asm
	mov.u32 	%r2890, 4;
	mov.u32 	%r2901, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2888,%r7560,%r2890,%r2242,%r2901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2893,%r7564,%r2888;
}
	// end inline asm
	mov.u32 	%r2899, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2897,%r7560,%r2899,%r2242,%r2901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2902,%r7565,%r2897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r2893,%r2902;
}
	// end inline asm
	mov.u32 	%r7570, %r7571;
	@%p176 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7570, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7641,%r7641,%r7570;
}
	// end inline asm
	@%p177 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7571, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r7571;
}
	// end inline asm
	mov.u32 	%r2923, 6;
	mov.u32 	%r2934, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2921,%r7560,%r2923,%r2242,%r2934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2926,%r7564,%r2921;
}
	// end inline asm
	mov.u32 	%r2932, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2930,%r7560,%r2932,%r2242,%r2934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2935,%r7565,%r2930;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r2926,%r2935;
}
	// end inline asm
	mov.u32 	%r7572, %r7573;
	@%p176 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7572, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r7572;
}
	// end inline asm
	@%p177 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7573, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7637,%r7637,%r7573;
}
	// end inline asm
	mov.u32 	%r2956, 8;
	mov.u32 	%r2967, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2954,%r7560,%r2956,%r2242,%r2967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2959,%r7564,%r2954;
}
	// end inline asm
	mov.u32 	%r2965, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2963,%r7560,%r2965,%r2242,%r2967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2968,%r7565,%r2963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r2959,%r2968;
}
	// end inline asm
	mov.u32 	%r7574, %r7575;
	@%p176 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7574, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7638,%r7638,%r7574;
}
	// end inline asm
	@%p177 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7575, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7636,%r7636,%r7575;
}
	// end inline asm
	mov.u32 	%r2989, 10;
	mov.u32 	%r3000, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2987,%r7560,%r2989,%r2242,%r3000;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2992,%r7564,%r2987;
}
	// end inline asm
	mov.u32 	%r2998, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2996,%r7560,%r2998,%r2242,%r3000;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3001,%r7565,%r2996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r2992,%r3001;
}
	// end inline asm
	mov.u32 	%r7576, %r7577;
	@%p176 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7576, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r7576;
}
	// end inline asm
	@%p177 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7577, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r7577;
}
	// end inline asm
	mov.u32 	%r3022, 12;
	mov.u32 	%r3033, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3020,%r7560,%r3022,%r2242,%r3033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3025,%r7564,%r3020;
}
	// end inline asm
	mov.u32 	%r3031, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3029,%r7560,%r3031,%r2242,%r3033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3034,%r7565,%r3029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r3025,%r3034;
}
	// end inline asm
	mov.u32 	%r7578, %r7579;
	@%p176 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7578, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7634,%r7634,%r7578;
}
	// end inline asm
	@%p177 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7579, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7631,%r7631,%r7579;
}
	// end inline asm
	mov.u32 	%r3055, 14;
	mov.u32 	%r3066, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3053,%r7560,%r3055,%r2242,%r3066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3058,%r7564,%r3053;
}
	// end inline asm
	mov.u32 	%r3064, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3062,%r7560,%r3064,%r2242,%r3066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3067,%r7565,%r3062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r3058,%r3067;
}
	// end inline asm
	mov.u32 	%r7580, %r7581;
	@%p176 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7580, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7629,%r7629,%r7580;
}
	// end inline asm
	@%p177 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7581, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7626,%r7626,%r7581;
}
	// end inline asm
	mov.u32 	%r3088, 16;
	mov.u32 	%r3099, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3086,%r7560,%r3088,%r2242,%r3099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3091,%r7564,%r3086;
}
	// end inline asm
	mov.u32 	%r3097, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3095,%r7560,%r3097,%r2242,%r3099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3100,%r7565,%r3095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r3091,%r3100;
}
	// end inline asm
	mov.u32 	%r7582, %r7583;
	@%p176 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7582, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7628,%r7628,%r7582;
}
	// end inline asm
	@%p177 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7583, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7625,%r7625,%r7583;
}
	// end inline asm
	mov.u32 	%r3121, 18;
	mov.u32 	%r3132, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3119,%r7560,%r3121,%r2242,%r3132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3124,%r7564,%r3119;
}
	// end inline asm
	mov.u32 	%r3130, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3128,%r7560,%r3130,%r2242,%r3132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3133,%r7565,%r3128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7585,%r3124,%r3133;
}
	// end inline asm
	mov.u32 	%r7584, %r7585;
	@%p176 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7584, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7623,%r7623,%r7584;
}
	// end inline asm
	@%p177 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7585, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7622,%r7622,%r7585;
}
	// end inline asm
	mov.u32 	%r3154, 20;
	mov.u32 	%r3165, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3152,%r7560,%r3154,%r2242,%r3165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3157,%r7564,%r3152;
}
	// end inline asm
	mov.u32 	%r3163, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3161,%r7560,%r3163,%r2242,%r3165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3166,%r7565,%r3161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r3157,%r3166;
}
	// end inline asm
	mov.u32 	%r7586, %r7587;
	@%p176 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7586, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7621,%r7621,%r7586;
}
	// end inline asm
	@%p177 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7587, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7619,%r7619,%r7587;
}
	// end inline asm
	mov.u32 	%r3187, 22;
	mov.u32 	%r3198, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3185,%r7560,%r3187,%r2242,%r3198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3190,%r7564,%r3185;
}
	// end inline asm
	mov.u32 	%r3196, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3194,%r7560,%r3196,%r2242,%r3198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3199,%r7565,%r3194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7589,%r3190,%r3199;
}
	// end inline asm
	mov.u32 	%r7588, %r7589;
	@%p176 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7588, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7617,%r7617,%r7588;
}
	// end inline asm
	@%p177 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7589, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7614,%r7614,%r7589;
}
	// end inline asm
	mov.u32 	%r3220, 24;
	mov.u32 	%r3231, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3218,%r7560,%r3220,%r2242,%r3231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3223,%r7564,%r3218;
}
	// end inline asm
	mov.u32 	%r3229, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3227,%r7560,%r3229,%r2242,%r3231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3232,%r7565,%r3227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7591,%r3223,%r3232;
}
	// end inline asm
	mov.u32 	%r7590, %r7591;
	@%p176 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7590, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7616,%r7616,%r7590;
}
	// end inline asm
	@%p177 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7591, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7613,%r7613,%r7591;
}
	// end inline asm
	mov.u32 	%r3253, 26;
	mov.u32 	%r3264, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3251,%r7560,%r3253,%r2242,%r3264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3256,%r7564,%r3251;
}
	// end inline asm
	mov.u32 	%r3262, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3260,%r7560,%r3262,%r2242,%r3264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3265,%r7565,%r3260;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7593,%r3256,%r3265;
}
	// end inline asm
	mov.u32 	%r7592, %r7593;
	@%p176 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7592, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7611,%r7611,%r7592;
}
	// end inline asm
	@%p177 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7593, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7608,%r7608,%r7593;
}
	// end inline asm
	mov.u32 	%r3286, 28;
	mov.u32 	%r3297, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3284,%r7560,%r3286,%r2242,%r3297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3289,%r7564,%r3284;
}
	// end inline asm
	mov.u32 	%r3295, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3293,%r7560,%r3295,%r2242,%r3297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3298,%r7565,%r3293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r3289,%r3298;
}
	// end inline asm
	mov.u32 	%r7594, %r7595;
	@%p176 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7594, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7610,%r7610,%r7594;
}
	// end inline asm
	@%p177 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7595, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7607,%r7607,%r7595;
}
	// end inline asm
	mov.u32 	%r3328, 31;
	mov.u32 	%r3319, 30;
	mov.u32 	%r3330, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3317,%r7560,%r3319,%r2242,%r3330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3322,%r7564,%r3317;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3326,%r7560,%r3328,%r2242,%r3330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3331,%r7565,%r3326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7597,%r3322,%r3331;
}
	// end inline asm
	mov.u32 	%r7596, %r7597;
	@%p176 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7596, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7603,%r7603,%r7596;
}
	// end inline asm
	@%p177 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7597, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7601,%r7601,%r7597;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7562, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7563, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p169, %r650, %r1728;
	@%p169 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2718,%r7562,%r7394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7645,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7562,%r7392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7633,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7562,%r7398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7562,%r7396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7615,%r7615,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7562,%r7402;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7617,%r7617,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7562,%r7400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r7602,%r2748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7563,%r7398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7563,%r7396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r7620,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7562,%r7393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7562,%r7391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7630,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7562,%r7397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r2778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7562,%r7395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r7612,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7562,%r7401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r7614,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7562,%r7399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r7600,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7563,%r7397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7637,%r2802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7563,%r7395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7618,%r7618,%r2808;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2621, %r1728, -2;
	setp.ne.s32 	%p170, %r650, %r2621;
	@%p170 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2622,%r7562,%r7398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r7623,%r2622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2628,%r7562,%r7396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7605,%r7605,%r2628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2634,%r7563,%r7394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7641,%r2634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2640,%r7563,%r7392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r7627,%r2640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2646,%r7563,%r7398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r7629,%r2646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2652,%r7563,%r7396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7609,%r7609,%r2652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2658,%r7563,%r7402;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7611,%r7611,%r2658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2664,%r7563,%r7400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r7599,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2670,%r7562,%r7397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r7622,%r2670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r7562,%r7395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r7604,%r2676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2682,%r7563,%r7393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r2682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2688,%r7563,%r7391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7624,%r7624,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2694,%r7563,%r7397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7626,%r7626,%r2694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2700,%r7563,%r7395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r7606,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2706,%r7563,%r7401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7608,%r7608,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2712,%r7563,%r7399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r2712;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p208, %r31, 1;
	mov.u32 	%r7750, %r2149;
	mov.u32 	%r7751, %r2149;
	mov.u32 	%r7756, %r2149;
	mov.u32 	%r7757, %r2149;
	mov.u32 	%r7758, %r2149;
	mov.u32 	%r7759, %r2149;
	mov.u32 	%r7760, %r2149;
	mov.u32 	%r7761, %r2149;
	mov.u32 	%r7768, %r2149;
	mov.u32 	%r7769, %r2149;
	@%p208 bra 	$L__BB0_380;

	mul.lo.s32 	%r3349, %r1719, 320;
	add.s32 	%r3350, %r31, -1;
	mul.lo.s32 	%r3351, %r32, 320;
	mad.lo.s32 	%r3352, %r3349, %r3350, %r3351;
	add.s32 	%r3355, %r1782, -64;
	mad.lo.s32 	%r3360, %r3355, %r2137, %r2134;
	add.s32 	%r3361, %r3352, %r3360;
	shl.b32 	%r3362, %r3361, 2;
	mov.u32 	%r3363, _ZN6kernel5shmemE;
	add.s32 	%r3364, %r3363, %r3362;
	shl.b32 	%r3365, %r36, 4;
	add.s32 	%r3366, %r3364, %r3365;
	ld.shared.v4.u32 	{%r7761, %r7759, %r7751, %r7750}, [%r3366];
	shl.b32 	%r3371, %r36, 3;
	add.s32 	%r3372, %r3364, %r3371;
	ld.shared.v2.u32 	{%r7760, %r7758}, [%r3372+512];
	ld.shared.v4.u32 	{%r7769, %r7768, %r7757, %r7756}, [%r3366+768];

$L__BB0_380:
	setp.lt.s32 	%p209, %r32, 1;
	mov.u32 	%r7752, %r2149;
	mov.u32 	%r7753, %r2149;
	mov.u32 	%r7754, %r2149;
	mov.u32 	%r7755, %r2149;
	mov.u32 	%r7762, %r2149;
	mov.u32 	%r7763, %r2149;
	mov.u32 	%r7764, %r2149;
	mov.u32 	%r7765, %r2149;
	mov.u32 	%r7766, %r2149;
	mov.u32 	%r7767, %r2149;
	mov.u32 	%r7770, %r2149;
	mov.u32 	%r7771, %r2149;
	@%p209 bra 	$L__BB0_383;

	mad.lo.s32 	%r3384, %r2539, 384, %r2140;
	add.s32 	%r3387, %r32, -1;
	mad.lo.s32 	%r3388, %r2135, %r3387, %r3384;
	add.s32 	%r3394, %r3388, %r2138;
	shl.b32 	%r3395, %r3394, 2;
	mov.u32 	%r3396, _ZN6kernel5shmemE;
	add.s32 	%r3397, %r3396, %r3395;
	shl.b32 	%r3398, %r36, 4;
	add.s32 	%r3399, %r3397, %r3398;
	ld.shared.v4.u32 	{%r7771, %r7770, %r7766, %r7764}, [%r3399];
	shl.b32 	%r3404, %r36, 3;
	add.s32 	%r3405, %r3397, %r3404;
	ld.shared.v2.u32 	{%r7767, %r7765}, [%r3405+512];
	ld.shared.v4.u32 	{%r7763, %r7762, %r7754, %r7752}, [%r3399+768];
	mov.u32 	%r7753, %r2149;
	mov.u32 	%r7755, %r2149;
	@%p208 bra 	$L__BB0_383;

	add.s32 	%r7272, %r3405, 512;
	ld.shared.v2.u32 	{%r7755, %r7753}, [%r7272+768];

$L__BB0_383:
	setp.eq.s32 	%p211, %r31, 0;
	@%p211 bra 	$L__BB0_388;

	setp.eq.s32 	%p212, %r32, %r2137;
	@%p212 bra 	$L__BB0_386;

	sub.s32 	%r3415, %r1718, %r31;
	mul.lo.s32 	%r3417, %r63, %r32;
	mad.lo.s32 	%r3418, %r3415, 384, %r3417;
	mad.lo.s32 	%r3421, %r2135, %r2137, %r3418;
	mad.lo.s32 	%r3424, %r2133, %r2132, %r3421;
	shl.b32 	%r3425, %r3424, 2;
	mov.u32 	%r3426, _ZN6kernel5shmemE;
	add.s32 	%r3427, %r3426, %r3425;
	shl.b32 	%r3428, %r36, 4;
	add.s32 	%r3429, %r3427, %r3428;
	ld.shared.v4.u32 	{%r7689, %r7688, %r7691, %r7690}, [%r3429];

$L__BB0_386:
	shl.b32 	%r3434, %r32, 8;
	shl.b32 	%r3438, %r1719, 8;
	or.b32  	%r3439, %r3438, 128;
	add.s32 	%r3440, %r31, -1;
	mad.lo.s32 	%r3441, %r3439, %r3440, %r2140;
	add.s32 	%r3442, %r3441, %r3434;
	shl.b32 	%r3443, %r3442, 2;
	mov.u32 	%r3444, _ZN6kernel5shmemE;
	add.s32 	%r3445, %r3444, %r3443;
	setp.ne.s32 	%p213, %r32, %r2137;
	shl.b32 	%r3447, %r36, 4;
	add.s32 	%r913, %r3445, %r3447;
	ld.shared.v4.u32 	{%r7682, %r7680, %r7683, %r7681}, [%r913];
	ld.shared.v4.u32 	{%r7687, %r7686, %r7685, %r7684}, [%r913+512];
	@%p213 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7689, %r7688, %r7691, %r7690}, [%r913+1024];

$L__BB0_388:
	setp.eq.s32 	%p214, %r32, 0;
	@%p214 bra 	$L__BB0_391;

	mul.lo.s32 	%r3461, %r63, %r32;
	sub.s32 	%r3462, %r3461, %r63;
	mad.lo.s32 	%r3465, %r2539, 384, %r3462;
	mad.lo.s32 	%r3468, %r2135, %r2137, %r3465;
	mad.lo.s32 	%r3471, %r2133, %r2132, %r3468;
	shl.b32 	%r3472, %r3471, 2;
	mov.u32 	%r3473, _ZN6kernel5shmemE;
	add.s32 	%r3474, %r3473, %r3472;
	shl.b32 	%r3475, %r36, 4;
	add.s32 	%r942, %r3474, %r3475;
	ld.shared.v4.u32 	{%r7705, %r7704, %r7707, %r7706}, [%r942];
	ld.shared.v4.u32 	{%r7703, %r7701, %r7699, %r7698}, [%r942+512];
	ld.shared.v4.u32 	{%r7702, %r7700, %r7697, %r7695}, [%r942+1024];
	@%p211 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7693, %r7692, %r7696, %r7694}, [%r942+1536];

$L__BB0_391:
	setp.ne.s32 	%p216, %r31, 0;
	@%p216 bra 	$L__BB0_396;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3493, %r647, %r1721, %r34;
	mul.lo.s32 	%r3494, %r1719, %r3493;
	mul.lo.s32 	%r3495, %r3494, 768;
	mad.lo.s32 	%r3496, %r32, 384, %r3495;
	add.s32 	%r3497, %r3496, -64;
	mul.wide.s32 	%rd275, %r3497, 4;
	add.s64 	%rd276, %rd553, %rd275;
	add.s64 	%rd278, %rd276, %rd277;
	ld.global.v4.u32 	{%r7719, %r7717, %r7711, %r7710}, [%rd278+256];
	ld.global.v4.u32 	{%r7721, %r7720, %r7715, %r7714}, [%rd278+1024];
	add.s64 	%rd30, %rd276, %rd279;
	@%p214 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7713, %r7712}, [%rd30];

$L__BB0_394:
	setp.ne.s32 	%p218, %r32, %r2137;
	ld.global.v2.u32 	{%r7718, %r7716}, [%rd30+768];
	@%p218 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7723, %r7722}, [%rd30+1536];

$L__BB0_396:
	setp.ne.s32 	%p219, %r32, 0;
	@%p219 bra 	$L__BB0_398;

	ld.param.u64 	%rd556, [%rd1+80];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r3514, %r648, %r1720, %r33;
	mul.lo.s32 	%r3518, %r3514, %r1783;
	mad.lo.s32 	%r3521, %r2539, 384, %r3518;
	add.s32 	%r3522, %r3521, -64;
	mad.lo.s32 	%r3525, %r1785, %r62, %r3522;
	mul.wide.s32 	%rd280, %r3525, 4;
	add.s64 	%rd281, %rd555, %rd280;
	add.s64 	%rd283, %rd281, %rd277;
	ld.global.v4.u32 	{%r7735, %r7734, %r7732, %r7730}, [%rd283+256];
	ld.global.v4.u32 	{%r7729, %r7728, %r7726, %r7724}, [%rd283+1024];
	add.s64 	%rd285, %rd281, %rd279;
	ld.global.v2.u32 	{%r7733, %r7731}, [%rd285+768];
	ld.global.v2.u32 	{%r7713, %r7712}, [%rd285+1536];

$L__BB0_398:
	add.s32 	%r3538, %r1723, -1;
	setp.ge.s32 	%p220, %r649, %r3538;
	setp.lt.s32 	%p221, %r649, 2;
	or.pred  	%p222, %p221, %p220;
	setp.lt.s32 	%p223, %r650, 2;
	or.pred  	%p224, %p222, %p223;
	add.s32 	%r3539, %r1724, -2;
	setp.ge.s32 	%p225, %r650, %r3539;
	or.pred  	%p226, %p225, %p224;
	@%p226 bra 	$L__BB0_409;

	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	mad.lo.s32 	%r1037, %r650, %r1723, %r649;
	shl.b32 	%r3540, %r1037, 6;
	mul.wide.s32 	%rd288, %r3540, 4;
	add.s64 	%rd32, %rd557, %rd288;
	and.pred  	%p229, %p216, %p219;
	@%p229 bra 	$L__BB0_401;

	add.s64 	%rd290, %rd32, %rd279;
	ld.global.v2.u32 	{%r7755, %r7753}, [%rd290+256];

$L__BB0_401:
	@%p216 bra 	$L__BB0_403;

	shl.b32 	%r3543, %r1723, 5;
	cvt.s64.s32 	%rd291, %r3543;
	cvt.s64.s32 	%rd292, %r36;
	add.s64 	%rd293, %rd291, %rd292;
	shl.b64 	%rd294, %rd293, 3;
	add.s64 	%rd295, %rd32, %rd294;
	ld.global.v2.u32 	{%r7760, %r7758}, [%rd295];

$L__BB0_403:
	@%p219 bra 	$L__BB0_405;

	shl.b32 	%r3546, %r1723, 5;
	neg.s32 	%r3547, %r3546;
	cvt.s64.s32 	%rd296, %r3547;
	cvt.s64.s32 	%rd297, %r36;
	add.s64 	%rd298, %rd296, %rd297;
	shl.b64 	%rd299, %rd298, 3;
	add.s64 	%rd300, %rd32, %rd299;
	ld.global.v2.u32 	{%r7767, %r7765}, [%rd300];

$L__BB0_405:
	mad.lo.s32 	%r7283, %r650, %r1723, %r649;
	ld.param.u64 	%rd560, [%rd1+88];
	cvta.to.global.u64 	%rd559, %rd560;
	shl.b32 	%r3550, %r1724, 6;
	shl.b32 	%r3551, %r7283, 7;
	mad.lo.s32 	%r3552, %r3550, %r1723, %r3551;
	mul.wide.s32 	%rd301, %r3552, 4;
	add.s64 	%rd33, %rd559, %rd301;
	@%p216 bra 	$L__BB0_407;

	shl.b32 	%r3553, %r1723, 5;
	cvt.s64.s32 	%rd302, %r3553;
	cvt.s64.s32 	%rd303, %r36;
	add.s64 	%rd304, %rd302, %rd303;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd33, %rd305;
	ld.global.v4.u32 	{%r7761, %r7759, %r7751, %r7750}, [%rd306];
	shl.b32 	%r3558, %r1723, 6;
	add.s32 	%r3559, %r3558, -32;
	cvt.s64.s32 	%rd307, %r3559;
	add.s64 	%rd308, %rd307, %rd303;
	shl.b64 	%rd309, %rd308, 4;
	add.s64 	%rd310, %rd33, %rd309;
	ld.global.v4.u32 	{%r7769, %r7768, %r7757, %r7756}, [%rd310];

$L__BB0_407:
	@%p219 bra 	$L__BB0_409;

	shl.b32 	%r3564, %r1723, 5;
	xor.b32  	%r3565, %r3564, -32;
	cvt.s64.s32 	%rd311, %r3565;
	cvt.s64.s32 	%rd312, %r36;
	add.s64 	%rd313, %rd311, %rd312;
	shl.b64 	%rd314, %rd313, 4;
	add.s64 	%rd315, %rd33, %rd314;
	ld.global.v4.u32 	{%r7771, %r7770, %r7766, %r7764}, [%rd315];
	add.s64 	%rd317, %rd33, %rd277;
	ld.global.v4.u32 	{%r7763, %r7762, %r7754, %r7752}, [%rd317];

$L__BB0_409:
	mov.u32 	%r3579, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3575,%r7530,%r426,%r2242,%r3579;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3575;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7530;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3582, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3583,%r7531,%r3582;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3586,%r7383,%r3583;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7772,%r7645;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7772,%r7384,%r3583;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3599, 31;
	mov.u32 	%r3622, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3597,%r7772,%r3599,%r2242,%r3622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3602,%r3586,%r3597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3605,%r7529,%r7528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3608,%r3605,%r3602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3611,%r7532,%r3608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3614,%r7645,%r3611;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3618,%r7525,%r426,%r2242,%r3622;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3618;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7525;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3625, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3626,%r7526,%r3625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3629,%r7383,%r3626;
}
	// end inline asm
	mov.u32 	%r7773, %r7644;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7773,%r7384,%r3626;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3640,%r7773,%r3599,%r2242,%r3622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3645,%r3629,%r3640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3648,%r7529,%r7524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3651,%r3645,%r3648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3654,%r7527,%r3651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3657,%r7644,%r3654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3660,%r7530,%r7531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3663,%r7387,%r3660;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7774,%r7643;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7774,%r7388,%r3660;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3676, 31;
	mov.u32 	%r3678, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3674,%r7774,%r3676,%r2242,%r3678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3679,%r3663,%r3674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3682,%r7522,%r7521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3685,%r3682,%r3679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3688,%r7523,%r3685;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3691,%r7643,%r3688;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3694,%r7525,%r7526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3697,%r7387,%r3694;
}
	// end inline asm
	mov.u32 	%r7775, %r7642;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7775,%r7388,%r3694;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3706,%r7775,%r3676,%r2242,%r3678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3711,%r3697,%r3706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3714,%r7522,%r7519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3717,%r3711,%r3714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3720,%r7520,%r3717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3723,%r7642,%r3720;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3727,%r7516,%r426,%r2242,%r3678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3727;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7516;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3734, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3735,%r7517,%r3734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3738,%r7383,%r3735;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7776,%r7641;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7776,%r7384,%r3735;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3753, 31;
	mov.u32 	%r3755, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3751,%r7776,%r3753,%r2242,%r3755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3756,%r3738,%r3751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3759,%r7515,%r7529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3762,%r3759,%r3756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3765,%r7518,%r3762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3768,%r7641,%r3765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3771,%r7516,%r7517;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3774,%r7387,%r3771;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7777,%r7640;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7777,%r7388,%r3771;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3787, 31;
	mov.u32 	%r3810, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3785,%r7777,%r3787,%r2242,%r3810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3790,%r3774,%r3785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3793,%r7513,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3796,%r3793,%r3790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3799,%r7514,%r3796;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3802,%r7640,%r3799;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3806,%r7511,%r426,%r2242,%r3810;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3806;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7511;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3813, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3814,%r7512,%r3813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3817,%r7383,%r3814;
}
	// end inline asm
	@%p15 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7778,%r7639;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7778,%r7384,%r3814;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3832, 31;
	mov.u32 	%r3855, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3830,%r7778,%r3832,%r2242,%r3855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3835,%r3817,%r3830;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3838,%r7510,%r7707;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3841,%r3838,%r3835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3844,%r7771,%r3841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3847,%r7639,%r3844;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3851,%r7506,%r426,%r2242,%r3855;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3851;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7506;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3858, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3859,%r7507,%r3858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3862,%r7383,%r3859;
}
	// end inline asm
	mov.u32 	%r7779, %r7638;
	@%p15 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7779,%r7384,%r3859;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3873,%r7779,%r3832,%r2242,%r3855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3878,%r3862,%r3873;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3881,%r7510,%r7528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3884,%r3878,%r3881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3887,%r7508,%r3884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3890,%r7638,%r3887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3893,%r7511,%r7512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3896,%r7387,%r3893;
}
	// end inline asm
	@%p15 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7780,%r7637;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7780,%r7388,%r3893;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3909, 31;
	mov.u32 	%r3911, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3907,%r7780,%r3909,%r2242,%r3911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3912,%r3896,%r3907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3915,%r7505,%r7706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3918,%r3915,%r3912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3921,%r7770,%r3918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3924,%r7637,%r3921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3927,%r7506,%r7507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3930,%r7387,%r3927;
}
	// end inline asm
	mov.u32 	%r7781, %r7636;
	@%p15 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7781,%r7388,%r3927;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3939,%r7781,%r3909,%r2242,%r3911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3944,%r3930,%r3939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3947,%r7505,%r7521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3950,%r3944,%r3947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3953,%r7503,%r3950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3956,%r7636,%r3953;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3960,%r7500,%r426,%r2242,%r3911;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3960;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7500;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3967, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3968,%r7501,%r3967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3971,%r7383,%r3968;
}
	// end inline asm
	@%p15 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7782,%r7635;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7782,%r7384,%r3968;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3986, 31;
	mov.u32 	%r4009, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3984,%r7782,%r3986,%r2242,%r4009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3989,%r3971,%r3984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r7499,%r7510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r3992,%r3989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3998,%r539,%r3995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7635,%r3998;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4005,%r7496,%r426,%r2242,%r4009;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4005;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7496;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4012, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4013,%r7497,%r4012;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4016,%r7383,%r4013;
}
	// end inline asm
	mov.u32 	%r7783, %r7634;
	@%p15 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7783,%r7384,%r4013;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4027,%r7783,%r3986,%r2242,%r4009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4032,%r4016,%r4027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4035,%r7499,%r7529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4038,%r4032,%r4035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4041,%r535,%r4038;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7634,%r4041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4047,%r7501,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4050,%r7497,%r7507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4053,%r4047,%r4050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4056,%r7495,%r4053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4059,%r7633,%r4056;
}
	// end inline asm
	selp.b32 	%r1163, %r7633, %r4059, %p15;
	// begin inline asm
	{sub.f16x2 %r4062,%r7500,%r7501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4065,%r7387,%r4062;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7784,%r7632;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7784,%r7388,%r4062;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4078, 31;
	mov.u32 	%r4080, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4076,%r7784,%r4078,%r2242,%r4080;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4081,%r4065,%r4076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4084,%r7493,%r7505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4087,%r4084,%r4081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4090,%r531,%r4087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7632,%r4090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4096,%r7496,%r7497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4099,%r7387,%r4096;
}
	// end inline asm
	mov.u32 	%r7785, %r7631;
	@%p15 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7785,%r7388,%r4096;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4108,%r7785,%r4078,%r2242,%r4080;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4113,%r4099,%r4108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4116,%r7493,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4119,%r4113,%r4116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4122,%r529,%r4119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7631,%r4122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4128,%r7500,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4131,%r7496,%r7506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4134,%r4128,%r4131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4137,%r7491,%r4134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4140,%r7630,%r4137;
}
	// end inline asm
	selp.b32 	%r1175, %r7630, %r4140, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4144,%r7488,%r426,%r2242,%r4080;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4144;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7488;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4151, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4152,%r7489,%r4151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4155,%r7383,%r4152;
}
	// end inline asm
	@%p15 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7786,%r7629;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7786,%r7384,%r4152;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4170, 31;
	mov.u32 	%r4193, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4168,%r7786,%r4170,%r2242,%r4193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4173,%r4155,%r4168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4176,%r7487,%r7499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r4176,%r4173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4182,%r527,%r4179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r7629,%r4182;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4189,%r7484,%r426,%r2242,%r4193;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4189;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7484;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4196, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r7485,%r4196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4200,%r7383,%r4197;
}
	// end inline asm
	mov.u32 	%r7787, %r7628;
	@%p15 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7787,%r7384,%r4197;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4211,%r7787,%r4170,%r2242,%r4193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4216,%r4200,%r4211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r7487,%r7515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4222,%r4216,%r4219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4225,%r7486,%r4222;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4228,%r7628,%r4225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r7489,%r7517;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4234,%r7485,%r7497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4237,%r4231,%r4234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4240,%r7483,%r4237;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4243,%r7627,%r4240;
}
	// end inline asm
	selp.b32 	%r1187, %r7627, %r4243, %p15;
	// begin inline asm
	{sub.f16x2 %r4246,%r7488,%r7489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4249,%r7387,%r4246;
}
	// end inline asm
	@%p15 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7788,%r7626;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7788,%r7388,%r4246;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4262, 31;
	mov.u32 	%r4264, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4260,%r7788,%r4262,%r2242,%r4264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4265,%r4249,%r4260;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4268,%r7481,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4271,%r4268,%r4265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4274,%r519,%r4271;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7626,%r4274;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4280,%r7484,%r7485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4283,%r7387,%r4280;
}
	// end inline asm
	mov.u32 	%r7789, %r7625;
	@%p15 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7789,%r7388,%r4280;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4292,%r7789,%r4262,%r2242,%r4264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4297,%r4283,%r4292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4300,%r7481,%r7513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4303,%r4297,%r4300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4306,%r7480,%r4303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4309,%r7625,%r4306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4312,%r7488,%r7516;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4315,%r7484,%r7496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4318,%r4312,%r4315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4321,%r7479,%r4318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4324,%r7624,%r4321;
}
	// end inline asm
	selp.b32 	%r1199, %r7624, %r4324, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4328,%r7477,%r426,%r2242,%r4264;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4328;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7477;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4335, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4336,%r7478,%r4335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4339,%r7383,%r4336;
}
	// end inline asm
	@%p15 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7790,%r7623;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7790,%r7384,%r4336;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4354, 31;
	mov.u32 	%r4356, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4352,%r7790,%r4354,%r2242,%r4356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4357,%r4339,%r4352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4360,%r7691,%r7487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4363,%r4360,%r4357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4366,%r7769,%r4363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4369,%r7623,%r4366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4372,%r7477,%r7478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4375,%r7387,%r4372;
}
	// end inline asm
	@%p15 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7791,%r7622;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7791,%r7388,%r4372;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4388, 31;
	mov.u32 	%r4411, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4386,%r7791,%r4388,%r2242,%r4411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4391,%r4375,%r4386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4394,%r7690,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4397,%r4394,%r4391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4400,%r7768,%r4397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4403,%r7622,%r4400;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4407,%r7473,%r426,%r2242,%r4411;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4407;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7473;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4414, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4415,%r7474,%r4414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4418,%r7383,%r4415;
}
	// end inline asm
	mov.u32 	%r7792, %r7621;
	@%p15 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7792,%r7384,%r4415;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4429,%r7792,%r4388,%r2242,%r4411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4434,%r4418,%r4429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4437,%r7702,%r7510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4440,%r4434,%r4437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4443,%r7767,%r4440;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7621,%r4443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4449,%r7703,%r7512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4452,%r7474,%r7705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4455,%r4449,%r4452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4458,%r7766,%r4455;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4461,%r7620,%r4458;
}
	// end inline asm
	selp.b32 	%r1217, %r7620, %r4461, %p15;
	// begin inline asm
	{sub.f16x2 %r4464,%r7473,%r7474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4467,%r7387,%r4464;
}
	// end inline asm
	mov.u32 	%r7793, %r7619;
	@%p15 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7793,%r7388,%r4464;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4478, 31;
	mov.u32 	%r4516, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4476,%r7793,%r4478,%r2242,%r4516;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4481,%r4467,%r4476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4484,%r7700,%r7505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4487,%r4481,%r4484;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4490,%r7765,%r4487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7619,%r4490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r7701,%r7511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4499,%r7473,%r7704;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4502,%r4496,%r4499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4505,%r7764,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4508,%r7618,%r4505;
}
	// end inline asm
	selp.b32 	%r1223, %r7618, %r4508, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4512,%r7469,%r426,%r2242,%r4516;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4512;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7469;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4519, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4520,%r7470,%r4519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4523,%r7383,%r4520;
}
	// end inline asm
	@%p15 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7794,%r7617;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7794,%r7384,%r4520;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4538, 31;
	mov.u32 	%r4561, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4536,%r7794,%r4538,%r2242,%r4561;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4541,%r4523,%r4536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4544,%r7468,%r7702;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4547,%r4544,%r4541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4550,%r7763,%r4547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r7617,%r4550;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4557,%r7465,%r426,%r2242,%r4561;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4557;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7465;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4564, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4565,%r7466,%r4564;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4568,%r7383,%r4565;
}
	// end inline asm
	mov.u32 	%r7795, %r7616;
	@%p15 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7795,%r7384,%r4565;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4579,%r7795,%r4538,%r2242,%r4561;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4584,%r4568,%r4579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4587,%r7468,%r7499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4590,%r4584,%r4587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4593,%r7498,%r4590;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r7616,%r4593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r7470,%r7501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4602,%r7466,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4605,%r4599,%r4602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4608,%r501,%r4605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4611,%r7615,%r4608;
}
	// end inline asm
	selp.b32 	%r7546, %r7615, %r4611, %p15;
	// begin inline asm
	{sub.f16x2 %r4614,%r7469,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4617,%r7387,%r4614;
}
	// end inline asm
	@%p15 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7796,%r7614;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7796,%r7388,%r4614;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4630, 31;
	mov.u32 	%r4632, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4628,%r7796,%r4630,%r2242,%r4632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4633,%r4617,%r4628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4636,%r7463,%r7700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4639,%r4636,%r4633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4642,%r7762,%r4639;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7614,%r4642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4648,%r7465,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4651,%r7387,%r4648;
}
	// end inline asm
	mov.u32 	%r7797, %r7613;
	@%p15 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7797,%r7388,%r4648;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4660,%r7797,%r4630,%r2242,%r4632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4665,%r4651,%r4660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4668,%r7463,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4671,%r4665,%r4668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4674,%r7492,%r4671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r7613,%r4674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4680,%r7469,%r7500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4683,%r7465,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4686,%r4680,%r4683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4689,%r498,%r4686;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4692,%r7612,%r4689;
}
	// end inline asm
	selp.b32 	%r7545, %r7612, %r4692, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4696,%r7459,%r426,%r2242,%r4632;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4696;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7459;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4703, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4704,%r7460,%r4703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4707,%r7383,%r4704;
}
	// end inline asm
	@%p15 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7798,%r7611;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7798,%r7384,%r4704;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4722, 31;
	mov.u32 	%r4745, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4720,%r7798,%r4722,%r2242,%r4745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4725,%r4707,%r4720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4728,%r7687,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4731,%r4728,%r4725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4734,%r7761,%r4731;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r7611,%r4734;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4741,%r7457,%r426,%r2242,%r4745;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4741;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7457;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4748, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4749,%r7458,%r4748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4752,%r7383,%r4749;
}
	// end inline asm
	mov.u32 	%r7799, %r7610;
	@%p15 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7799,%r7384,%r4749;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4763,%r7799,%r4722,%r2242,%r4745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4768,%r4752,%r4763;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4771,%r7687,%r7487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4774,%r4768,%r4771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4777,%r7760,%r4774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7610,%r4777;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4783,%r7460,%r7489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4786,%r7458,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4789,%r4783,%r4786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4792,%r493,%r4789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4795,%r7609,%r4792;
}
	// end inline asm
	selp.b32 	%r7540, %r7609, %r4795, %p15;
	// begin inline asm
	{sub.f16x2 %r4798,%r7459,%r7460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4801,%r7387,%r4798;
}
	// end inline asm
	@%p15 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7800,%r7608;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7800,%r7388,%r4798;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4814, 31;
	mov.u32 	%r4816, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4812,%r7800,%r4814,%r2242,%r4816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4817,%r4801,%r4812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4820,%r7686,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4823,%r4820,%r4817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4826,%r7759,%r4823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7608,%r4826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4832,%r7457,%r7458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4835,%r7387,%r4832;
}
	// end inline asm
	mov.u32 	%r7801, %r7607;
	@%p15 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7801,%r7388,%r4832;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4844,%r7801,%r4814,%r2242,%r4816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4849,%r4835,%r4844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4852,%r7686,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4855,%r4849,%r4852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4858,%r7758,%r4855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r7607,%r4858;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4864,%r7459,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4867,%r7457,%r7465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4870,%r4864,%r4867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4873,%r492,%r4870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4876,%r7606,%r4873;
}
	// end inline asm
	selp.b32 	%r7539, %r7606, %r4876, %p15;
	// begin inline asm
	{sub.f16x2 %r4879,%r7685,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4882,%r7689,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4885,%r4879,%r4882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4888,%r7757,%r4885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4891,%r7605,%r4888;
}
	// end inline asm
	selp.b32 	%r1272, %r7605, %r4891, %p15;
	// begin inline asm
	{sub.f16x2 %r4894,%r7684,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4897,%r7688,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4900,%r4894,%r4897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4903,%r7756,%r4900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4906,%r7604,%r4903;
}
	// end inline asm
	selp.b32 	%r1273, %r7604, %r4906, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4910,%r7451,%r426,%r2242,%r4816;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4910;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7451;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4917, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4918,%r7452,%r4917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4921,%r7383,%r4918;
}
	// end inline asm
	mov.u32 	%r7802, %r7603;
	@%p15 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7802,%r7384,%r4918;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4934, 31;
	mov.u32 	%r4936, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4932,%r7802,%r4934,%r2242,%r4936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4937,%r4921,%r4932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4940,%r7696,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4943,%r4937,%r4940;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4946,%r7755,%r4943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7603,%r4946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r7697,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4955,%r7452,%r7699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4958,%r4952,%r4955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4961,%r7754,%r4958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4964,%r7602,%r4961;
}
	// end inline asm
	selp.b32 	%r7536, %r7602, %r4964, %p15;
	// begin inline asm
	{sub.f16x2 %r4967,%r7451,%r7452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4970,%r7387,%r4967;
}
	// end inline asm
	mov.u32 	%r7803, %r7601;
	@%p15 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7803,%r7388,%r4967;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4979,%r7803,%r4934,%r2242,%r4936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4984,%r4970,%r4979;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4987,%r7694,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4990,%r4984,%r4987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4993,%r7753,%r4990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r7601,%r4993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4999,%r7695,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5002,%r7451,%r7698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5005,%r4999,%r5002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5008,%r7752,%r5005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5011,%r7600,%r5008;
}
	// end inline asm
	selp.b32 	%r7535, %r7600, %r5011, %p15;
	// begin inline asm
	{sub.f16x2 %r5014,%r7682,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5017,%r7683,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r5014,%r5017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5023,%r7751,%r5020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5026,%r7599,%r5023;
}
	// end inline asm
	selp.b32 	%r7534, %r7599, %r5026, %p15;
	// begin inline asm
	{sub.f16x2 %r5029,%r7680,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5032,%r7681,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5035,%r5029,%r5032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5038,%r7750,%r5035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5041,%r7598,%r5038;
}
	// end inline asm
	selp.b32 	%r7533, %r7598, %r5041, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd318, [%rd1+160];
	cvta.to.global.u64 	%rd35, %rd318;
	add.s32 	%r5046, %r1732, 2;
	setp.lt.s32 	%p267, %r649, %r5046;
	add.s32 	%r5047, %r1733, -1;
	setp.ge.s32 	%p268, %r649, %r5047;
	or.pred  	%p269, %p268, %p267;
	add.s32 	%r5048, %r1734, 2;
	setp.lt.s32 	%p270, %r650, %r5048;
	or.pred  	%p271, %p269, %p270;
	add.s32 	%r5049, %r1735, -2;
	setp.ge.s32 	%p272, %r650, %r5049;
	or.pred  	%p273, %p272, %p271;
	setp.lt.s32 	%p274, %r651, %r1729;
	or.pred  	%p275, %p274, %p273;
	mad.lo.s32 	%r5050, %r1731, %r1730, %r1729;
	setp.ge.s32 	%p276, %r651, %r5050;
	or.pred  	%p277, %p275, %p276;
	@%p277 bra 	$L__BB0_731;

	sub.s32 	%r1288, %r651, %r1729;
	rem.s32 	%r5051, %r1288, %r1730;
	setp.ne.s32 	%p278, %r5051, 0;
	@%p278 bra 	$L__BB0_731;

	div.s32 	%r5052, %r1288, %r1730;
	mul.lo.s32 	%r5054, %r5052, %r1758;
	sub.s32 	%r1289, %r649, %r1732;
	sub.s32 	%r1290, %r650, %r1734;
	mul.lo.s32 	%r1291, %r5054, 3;
	add.s32 	%r5055, %r1289, %r1291;
	add.s32 	%r5056, %r5055, -2;
	mul.lo.s32 	%r1292, %r5056, %r1760;
	add.s32 	%r5058, %r1290, %r1292;
	mul.lo.s32 	%r5059, %r5058, %r49;
	sub.s32 	%r1293, %r5059, %r1736;
	@%p15 bra 	$L__BB0_496;

	not.pred 	%p280, %p11;
	@%p280 bra 	$L__BB0_494;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3614;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5061, %r1293, %r392;
	mul.wide.s32 	%rd319, %r5061, 4;
	add.s64 	%rd320, %rd35, %rd319;
	st.global.f32 	[%rd320], %f395;

$L__BB0_494:
	not.pred 	%p281, %p13;
	@%p281 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3614;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5063, %r1293, %r393;
	mul.wide.s32 	%rd321, %r5063, 4;
	add.s64 	%rd322, %rd35, %rd321;
	st.global.f32 	[%rd322], %f396;

$L__BB0_496:
	@%p15 bra 	$L__BB0_501;

	not.pred 	%p283, %p12;
	@%p283 bra 	$L__BB0_499;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3691;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5065, %r1293, %r406;
	mul.wide.s32 	%rd323, %r5065, 4;
	add.s64 	%rd324, %rd35, %rd323;
	st.global.f32 	[%rd324], %f397;

$L__BB0_499:
	not.pred 	%p284, %p14;
	@%p284 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3691;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5067, %r1293, %r407;
	mul.wide.s32 	%rd325, %r5067, 4;
	add.s64 	%rd326, %rd35, %rd325;
	st.global.f32 	[%rd326], %f398;

$L__BB0_501:
	sub.s32 	%r7291, %r649, %r1732;
	add.s32 	%r1294, %r1291, %r1758;
	add.s32 	%r5069, %r7291, %r1294;
	add.s32 	%r5070, %r5069, -2;
	mad.lo.s32 	%r5072, %r5070, %r1760, %r1290;
	mul.lo.s32 	%r5073, %r5072, %r49;
	sub.s32 	%r1295, %r5073, %r1736;
	@%p15 bra 	$L__BB0_506;

	not.pred 	%p286, %p11;
	@%p286 bra 	$L__BB0_504;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3657;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5075, %r1295, %r392;
	mul.wide.s32 	%rd327, %r5075, 4;
	add.s64 	%rd328, %rd35, %rd327;
	st.global.f32 	[%rd328], %f399;

$L__BB0_504:
	not.pred 	%p287, %p13;
	@%p287 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3657;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5077, %r1295, %r393;
	mul.wide.s32 	%rd329, %r5077, 4;
	add.s64 	%rd330, %rd35, %rd329;
	st.global.f32 	[%rd330], %f400;

$L__BB0_506:
	@%p15 bra 	$L__BB0_511;

	not.pred 	%p289, %p12;
	@%p289 bra 	$L__BB0_509;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3723;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5079, %r1295, %r406;
	mul.wide.s32 	%rd331, %r5079, 4;
	add.s64 	%rd332, %rd35, %rd331;
	st.global.f32 	[%rd332], %f401;

$L__BB0_509:
	not.pred 	%p290, %p14;
	@%p290 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3723;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5081, %r1295, %r407;
	mul.wide.s32 	%rd333, %r5081, 4;
	add.s64 	%rd334, %rd35, %rd333;
	st.global.f32 	[%rd334], %f402;

$L__BB0_511:
	add.s32 	%r1296, %r1290, 1;
	add.s32 	%r5082, %r1296, %r1292;
	mul.lo.s32 	%r5083, %r5082, %r49;
	sub.s32 	%r1297, %r5083, %r1736;
	@%p15 bra 	$L__BB0_516;

	not.pred 	%p292, %p11;
	@%p292 bra 	$L__BB0_514;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3768;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5085, %r1297, %r392;
	mul.wide.s32 	%rd335, %r5085, 4;
	add.s64 	%rd336, %rd35, %rd335;
	st.global.f32 	[%rd336], %f403;

$L__BB0_514:
	not.pred 	%p293, %p13;
	@%p293 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3768;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5087, %r1297, %r393;
	mul.wide.s32 	%rd337, %r5087, 4;
	add.s64 	%rd338, %rd35, %rd337;
	st.global.f32 	[%rd338], %f404;

$L__BB0_516:
	@%p15 bra 	$L__BB0_521;

	not.pred 	%p295, %p12;
	@%p295 bra 	$L__BB0_519;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3802;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5089, %r1297, %r406;
	mul.wide.s32 	%rd339, %r5089, 4;
	add.s64 	%rd340, %rd35, %rd339;
	st.global.f32 	[%rd340], %f405;

$L__BB0_519:
	not.pred 	%p296, %p14;
	@%p296 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3802;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5091, %r1297, %r407;
	mul.wide.s32 	%rd341, %r5091, 4;
	add.s64 	%rd342, %rd35, %rd341;
	st.global.f32 	[%rd342], %f406;

$L__BB0_521:
	not.b32 	%r5092, %r1732;
	add.s32 	%r1298, %r649, %r5092;
	not.b32 	%r5093, %r1734;
	add.s32 	%r1299, %r650, %r5093;
	add.s32 	%r5094, %r1298, %r1291;
	mul.lo.s32 	%r1300, %r5094, %r1760;
	add.s32 	%r5096, %r1299, %r1300;
	mul.lo.s32 	%r5097, %r5096, %r49;
	sub.s32 	%r1301, %r5097, %r1736;
	@%p15 bra 	$L__BB0_526;

	not.pred 	%p298, %p11;
	@%p298 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3847;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5099, %r1301, %r392;
	mul.wide.s32 	%rd343, %r5099, 4;
	add.s64 	%rd344, %rd35, %rd343;
	st.global.f32 	[%rd344], %f407;

$L__BB0_524:
	not.pred 	%p299, %p13;
	@%p299 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3847;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5101, %r1301, %r393;
	mul.wide.s32 	%rd345, %r5101, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f408;

$L__BB0_526:
	@%p15 bra 	$L__BB0_531;

	not.pred 	%p301, %p12;
	@%p301 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3924;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5103, %r1301, %r406;
	mul.wide.s32 	%rd347, %r5103, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f409;

$L__BB0_529:
	not.pred 	%p302, %p14;
	@%p302 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3924;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5105, %r1301, %r407;
	mul.wide.s32 	%rd349, %r5105, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f410;

$L__BB0_531:
	add.s32 	%r5107, %r1298, %r1294;
	mul.lo.s32 	%r1302, %r5107, %r1760;
	add.s32 	%r5108, %r1299, %r1302;
	mul.lo.s32 	%r5109, %r5108, %r49;
	sub.s32 	%r1303, %r5109, %r1736;
	@%p15 bra 	$L__BB0_536;

	not.pred 	%p304, %p11;
	@%p304 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3890;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5111, %r1303, %r392;
	mul.wide.s32 	%rd351, %r5111, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f411;

$L__BB0_534:
	not.pred 	%p305, %p13;
	@%p305 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3890;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5113, %r1303, %r393;
	mul.wide.s32 	%rd353, %r5113, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f412;

$L__BB0_536:
	@%p15 bra 	$L__BB0_541;

	not.pred 	%p307, %p12;
	@%p307 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5115, %r1303, %r406;
	mul.wide.s32 	%rd355, %r5115, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f413;

$L__BB0_539:
	not.pred 	%p308, %p14;
	@%p308 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5117, %r1303, %r407;
	mul.wide.s32 	%rd357, %r5117, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f414;

$L__BB0_541:
	add.s32 	%r5118, %r1290, %r1300;
	mul.lo.s32 	%r5119, %r5118, %r49;
	sub.s32 	%r1304, %r5119, %r1736;
	@%p15 bra 	$L__BB0_546;

	not.pred 	%p310, %p11;
	@%p310 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5121, %r1304, %r392;
	mul.wide.s32 	%rd359, %r5121, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f415;

$L__BB0_544:
	not.pred 	%p311, %p13;
	@%p311 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5123, %r1304, %r393;
	mul.wide.s32 	%rd361, %r5123, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f416;

$L__BB0_546:
	@%p15 bra 	$L__BB0_551;

	not.pred 	%p313, %p12;
	@%p313 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5125, %r1304, %r406;
	mul.wide.s32 	%rd363, %r5125, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f417;

$L__BB0_549:
	not.pred 	%p314, %p14;
	@%p314 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5127, %r1304, %r407;
	mul.wide.s32 	%rd365, %r5127, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f418;

$L__BB0_551:
	add.s32 	%r5128, %r1290, %r1302;
	mul.lo.s32 	%r5129, %r5128, %r49;
	sub.s32 	%r1305, %r5129, %r1736;
	@%p15 bra 	$L__BB0_556;

	not.pred 	%p316, %p11;
	@%p316 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5131, %r1305, %r392;
	mul.wide.s32 	%rd367, %r5131, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f419;

$L__BB0_554:
	not.pred 	%p317, %p13;
	@%p317 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5133, %r1305, %r393;
	mul.wide.s32 	%rd369, %r5133, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f420;

$L__BB0_556:
	@%p15 bra 	$L__BB0_561;

	not.pred 	%p319, %p12;
	@%p319 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5135, %r1305, %r406;
	mul.wide.s32 	%rd371, %r5135, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f421;

$L__BB0_559:
	not.pred 	%p320, %p14;
	@%p320 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5137, %r1305, %r407;
	mul.wide.s32 	%rd373, %r5137, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f422;

$L__BB0_561:
	add.s32 	%r1306, %r1294, %r1758;
	add.s32 	%r5139, %r1298, %r1306;
	mul.lo.s32 	%r1307, %r5139, %r1760;
	add.s32 	%r5141, %r1290, %r1307;
	mul.lo.s32 	%r5142, %r5141, %r49;
	sub.s32 	%r1308, %r5142, %r1736;
	@%p15 bra 	$L__BB0_566;

	not.pred 	%p322, %p11;
	@%p322 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5144, %r1308, %r392;
	mul.wide.s32 	%rd375, %r5144, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f423;

$L__BB0_564:
	not.pred 	%p323, %p13;
	@%p323 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5146, %r1308, %r393;
	mul.wide.s32 	%rd377, %r5146, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f424;

$L__BB0_566:
	@%p15 bra 	$L__BB0_571;

	not.pred 	%p325, %p12;
	@%p325 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1175;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5148, %r1308, %r406;
	mul.wide.s32 	%rd379, %r5148, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f425;

$L__BB0_569:
	not.pred 	%p326, %p14;
	@%p326 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1175;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5150, %r1308, %r407;
	mul.wide.s32 	%rd381, %r5150, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f426;

$L__BB0_571:
	add.s32 	%r7284, %r1290, 1;
	add.s32 	%r5151, %r7284, %r1300;
	mul.lo.s32 	%r5152, %r5151, %r49;
	sub.s32 	%r1309, %r5152, %r1736;
	@%p15 bra 	$L__BB0_576;

	not.pred 	%p328, %p11;
	@%p328 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5154, %r1309, %r392;
	mul.wide.s32 	%rd383, %r5154, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f427;

$L__BB0_574:
	not.pred 	%p329, %p13;
	@%p329 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5156, %r1309, %r393;
	mul.wide.s32 	%rd385, %r5156, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f428;

$L__BB0_576:
	@%p15 bra 	$L__BB0_581;

	not.pred 	%p331, %p12;
	@%p331 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5158, %r1309, %r406;
	mul.wide.s32 	%rd387, %r5158, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f429;

$L__BB0_579:
	not.pred 	%p332, %p14;
	@%p332 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5160, %r1309, %r407;
	mul.wide.s32 	%rd389, %r5160, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f430;

$L__BB0_581:
	add.s32 	%r7285, %r1290, 1;
	add.s32 	%r5161, %r7285, %r1302;
	mul.lo.s32 	%r5162, %r5161, %r49;
	sub.s32 	%r1310, %r5162, %r1736;
	@%p15 bra 	$L__BB0_586;

	not.pred 	%p334, %p11;
	@%p334 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4228;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5164, %r1310, %r392;
	mul.wide.s32 	%rd391, %r5164, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f431;

$L__BB0_584:
	not.pred 	%p335, %p13;
	@%p335 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4228;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5166, %r1310, %r393;
	mul.wide.s32 	%rd393, %r5166, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f432;

$L__BB0_586:
	@%p15 bra 	$L__BB0_591;

	not.pred 	%p337, %p12;
	@%p337 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4309;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5168, %r1310, %r406;
	mul.wide.s32 	%rd395, %r5168, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f433;

$L__BB0_589:
	not.pred 	%p338, %p14;
	@%p338 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4309;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5170, %r1310, %r407;
	mul.wide.s32 	%rd397, %r5170, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f434;

$L__BB0_591:
	add.s32 	%r7286, %r1290, 1;
	add.s32 	%r5171, %r7286, %r1307;
	mul.lo.s32 	%r5172, %r5171, %r49;
	sub.s32 	%r1311, %r5172, %r1736;
	@%p15 bra 	$L__BB0_596;

	not.pred 	%p340, %p11;
	@%p340 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1187;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5174, %r1311, %r392;
	mul.wide.s32 	%rd399, %r5174, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f435;

$L__BB0_594:
	not.pred 	%p341, %p13;
	@%p341 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1187;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5176, %r1311, %r393;
	mul.wide.s32 	%rd401, %r5176, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f436;

$L__BB0_596:
	@%p15 bra 	$L__BB0_601;

	not.pred 	%p343, %p12;
	@%p343 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1199;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5178, %r1311, %r406;
	mul.wide.s32 	%rd403, %r5178, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f437;

$L__BB0_599:
	not.pred 	%p344, %p14;
	@%p344 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1199;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5180, %r1311, %r407;
	mul.wide.s32 	%rd405, %r5180, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f438;

$L__BB0_601:
	add.s32 	%r1312, %r1290, 2;
	add.s32 	%r5181, %r1312, %r1300;
	mul.lo.s32 	%r5182, %r5181, %r49;
	sub.s32 	%r1313, %r5182, %r1736;
	@%p15 bra 	$L__BB0_606;

	not.pred 	%p346, %p11;
	@%p346 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4369;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5184, %r1313, %r392;
	mul.wide.s32 	%rd407, %r5184, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f439;

$L__BB0_604:
	not.pred 	%p347, %p13;
	@%p347 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4369;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5186, %r1313, %r393;
	mul.wide.s32 	%rd409, %r5186, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f440;

$L__BB0_606:
	@%p15 bra 	$L__BB0_611;

	not.pred 	%p349, %p12;
	@%p349 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4403;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5188, %r1313, %r406;
	mul.wide.s32 	%rd411, %r5188, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f441;

$L__BB0_609:
	not.pred 	%p350, %p14;
	@%p350 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4403;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5190, %r1313, %r407;
	mul.wide.s32 	%rd413, %r5190, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f442;

$L__BB0_611:
	mul.lo.s32 	%r1314, %r5069, %r1760;
	add.s32 	%r5193, %r1299, %r1314;
	mul.lo.s32 	%r5194, %r5193, %r49;
	sub.s32 	%r1315, %r5194, %r1736;
	@%p15 bra 	$L__BB0_616;

	not.pred 	%p352, %p11;
	@%p352 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5196, %r1315, %r392;
	mul.wide.s32 	%rd415, %r5196, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f443;

$L__BB0_614:
	not.pred 	%p353, %p13;
	@%p353 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5198, %r1315, %r393;
	mul.wide.s32 	%rd417, %r5198, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f444;

$L__BB0_616:
	@%p15 bra 	$L__BB0_621;

	not.pred 	%p355, %p12;
	@%p355 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5200, %r1315, %r406;
	mul.wide.s32 	%rd419, %r5200, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f445;

$L__BB0_619:
	not.pred 	%p356, %p14;
	@%p356 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5202, %r1315, %r407;
	mul.wide.s32 	%rd421, %r5202, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f446;

$L__BB0_621:
	sub.s32 	%r7292, %r649, %r1732;
	add.s32 	%r5204, %r7292, %r1306;
	mul.lo.s32 	%r1316, %r5204, %r1760;
	add.s32 	%r5205, %r1299, %r1316;
	mul.lo.s32 	%r5206, %r5205, %r49;
	sub.s32 	%r1317, %r5206, %r1736;
	@%p15 bra 	$L__BB0_626;

	not.pred 	%p358, %p11;
	@%p358 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1217;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5208, %r1317, %r392;
	mul.wide.s32 	%rd423, %r5208, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f447;

$L__BB0_624:
	not.pred 	%p359, %p13;
	@%p359 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1217;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5210, %r1317, %r393;
	mul.wide.s32 	%rd425, %r5210, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f448;

$L__BB0_626:
	@%p15 bra 	$L__BB0_631;

	not.pred 	%p361, %p12;
	@%p361 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1223;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5212, %r1317, %r406;
	mul.wide.s32 	%rd427, %r5212, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f449;

$L__BB0_629:
	not.pred 	%p362, %p14;
	@%p362 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1223;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5214, %r1317, %r407;
	mul.wide.s32 	%rd429, %r5214, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f450;

$L__BB0_631:
	mul.lo.s32 	%r1318, %r5055, %r1760;
	add.s32 	%r5217, %r1290, %r1318;
	mul.lo.s32 	%r5218, %r5217, %r49;
	sub.s32 	%r1319, %r5218, %r1736;
	@%p15 bra 	$L__BB0_636;

	not.pred 	%p364, %p11;
	@%p364 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7550;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5220, %r1319, %r392;
	mul.wide.s32 	%rd431, %r5220, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f451;

$L__BB0_634:
	not.pred 	%p365, %p13;
	@%p365 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7550;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5222, %r1319, %r393;
	mul.wide.s32 	%rd433, %r5222, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f452;

$L__BB0_636:
	@%p15 bra 	$L__BB0_641;

	not.pred 	%p367, %p12;
	@%p367 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7549;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5224, %r1319, %r406;
	mul.wide.s32 	%rd435, %r5224, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f453;

$L__BB0_639:
	not.pred 	%p368, %p14;
	@%p368 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7549;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5226, %r1319, %r407;
	mul.wide.s32 	%rd437, %r5226, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f454;

$L__BB0_641:
	add.s32 	%r5227, %r1290, %r1314;
	mul.lo.s32 	%r5228, %r5227, %r49;
	sub.s32 	%r1320, %r5228, %r1736;
	@%p15 bra 	$L__BB0_646;

	not.pred 	%p370, %p11;
	@%p370 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7548;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5230, %r1320, %r392;
	mul.wide.s32 	%rd439, %r5230, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f455;

$L__BB0_644:
	not.pred 	%p371, %p13;
	@%p371 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7548;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5232, %r1320, %r393;
	mul.wide.s32 	%rd441, %r5232, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f456;

$L__BB0_646:
	@%p15 bra 	$L__BB0_651;

	not.pred 	%p373, %p12;
	@%p373 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7547;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5234, %r1320, %r406;
	mul.wide.s32 	%rd443, %r5234, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f457;

$L__BB0_649:
	not.pred 	%p374, %p14;
	@%p374 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7547;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5236, %r1320, %r407;
	mul.wide.s32 	%rd445, %r5236, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f458;

$L__BB0_651:
	add.s32 	%r5237, %r1290, %r1316;
	mul.lo.s32 	%r5238, %r5237, %r49;
	sub.s32 	%r1321, %r5238, %r1736;
	@%p15 bra 	$L__BB0_656;

	not.pred 	%p376, %p11;
	@%p376 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7546;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5240, %r1321, %r392;
	mul.wide.s32 	%rd447, %r5240, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f459;

$L__BB0_654:
	not.pred 	%p377, %p13;
	@%p377 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7546;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5242, %r1321, %r393;
	mul.wide.s32 	%rd449, %r5242, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f460;

$L__BB0_656:
	@%p15 bra 	$L__BB0_661;

	not.pred 	%p379, %p12;
	@%p379 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7545;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5244, %r1321, %r406;
	mul.wide.s32 	%rd451, %r5244, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f461;

$L__BB0_659:
	not.pred 	%p380, %p14;
	@%p380 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7545;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5246, %r1321, %r407;
	mul.wide.s32 	%rd453, %r5246, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f462;

$L__BB0_661:
	add.s32 	%r7287, %r1290, 1;
	add.s32 	%r5247, %r7287, %r1318;
	mul.lo.s32 	%r5248, %r5247, %r49;
	sub.s32 	%r1322, %r5248, %r1736;
	@%p15 bra 	$L__BB0_666;

	not.pred 	%p382, %p11;
	@%p382 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7544;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5250, %r1322, %r392;
	mul.wide.s32 	%rd455, %r5250, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f463;

$L__BB0_664:
	not.pred 	%p383, %p13;
	@%p383 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7544;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5252, %r1322, %r393;
	mul.wide.s32 	%rd457, %r5252, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f464;

$L__BB0_666:
	@%p15 bra 	$L__BB0_671;

	not.pred 	%p385, %p12;
	@%p385 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5254, %r1322, %r406;
	mul.wide.s32 	%rd459, %r5254, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f465;

$L__BB0_669:
	not.pred 	%p386, %p14;
	@%p386 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5256, %r1322, %r407;
	mul.wide.s32 	%rd461, %r5256, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f466;

$L__BB0_671:
	add.s32 	%r7288, %r1290, 1;
	add.s32 	%r5257, %r7288, %r1314;
	mul.lo.s32 	%r5258, %r5257, %r49;
	sub.s32 	%r1323, %r5258, %r1736;
	@%p15 bra 	$L__BB0_676;

	not.pred 	%p388, %p11;
	@%p388 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5260, %r1323, %r392;
	mul.wide.s32 	%rd463, %r5260, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f467;

$L__BB0_674:
	not.pred 	%p389, %p13;
	@%p389 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5262, %r1323, %r393;
	mul.wide.s32 	%rd465, %r5262, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f468;

$L__BB0_676:
	@%p15 bra 	$L__BB0_681;

	not.pred 	%p391, %p12;
	@%p391 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7541;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5264, %r1323, %r406;
	mul.wide.s32 	%rd467, %r5264, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f469;

$L__BB0_679:
	not.pred 	%p392, %p14;
	@%p392 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7541;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5266, %r1323, %r407;
	mul.wide.s32 	%rd469, %r5266, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f470;

$L__BB0_681:
	add.s32 	%r7289, %r1290, 1;
	add.s32 	%r5267, %r7289, %r1316;
	mul.lo.s32 	%r5268, %r5267, %r49;
	sub.s32 	%r1324, %r5268, %r1736;
	@%p15 bra 	$L__BB0_686;

	not.pred 	%p394, %p11;
	@%p394 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5270, %r1324, %r392;
	mul.wide.s32 	%rd471, %r5270, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f471;

$L__BB0_684:
	not.pred 	%p395, %p13;
	@%p395 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7540;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5272, %r1324, %r393;
	mul.wide.s32 	%rd473, %r5272, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f472;

$L__BB0_686:
	@%p15 bra 	$L__BB0_691;

	not.pred 	%p397, %p12;
	@%p397 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7539;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5274, %r1324, %r406;
	mul.wide.s32 	%rd475, %r5274, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f473;

$L__BB0_689:
	not.pred 	%p398, %p14;
	@%p398 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7539;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5276, %r1324, %r407;
	mul.wide.s32 	%rd477, %r5276, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f474;

$L__BB0_691:
	add.s32 	%r5277, %r1312, %r1316;
	mul.lo.s32 	%r5278, %r5277, %r49;
	sub.s32 	%r1325, %r5278, %r1736;
	@%p15 bra 	$L__BB0_696;

	not.pred 	%p400, %p11;
	@%p400 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1272;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5280, %r1325, %r392;
	mul.wide.s32 	%rd479, %r5280, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f475;

$L__BB0_694:
	not.pred 	%p401, %p13;
	@%p401 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1272;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5282, %r1325, %r393;
	mul.wide.s32 	%rd481, %r5282, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f476;

$L__BB0_696:
	@%p15 bra 	$L__BB0_701;

	not.pred 	%p403, %p12;
	@%p403 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1273;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5284, %r1325, %r406;
	mul.wide.s32 	%rd483, %r5284, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f477;

$L__BB0_699:
	not.pred 	%p404, %p14;
	@%p404 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1273;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5286, %r1325, %r407;
	mul.wide.s32 	%rd485, %r5286, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f478;

$L__BB0_701:
	sub.s32 	%r7293, %r649, %r1732;
	add.s32 	%r1326, %r7293, 1;
	add.s32 	%r5287, %r1326, %r1294;
	mad.lo.s32 	%r5289, %r5287, %r1760, %r1290;
	mul.lo.s32 	%r5290, %r5289, %r49;
	sub.s32 	%r1327, %r5290, %r1736;
	@%p15 bra 	$L__BB0_706;

	not.pred 	%p406, %p11;
	@%p406 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5292, %r1327, %r392;
	mul.wide.s32 	%rd487, %r5292, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f479;

$L__BB0_704:
	not.pred 	%p407, %p13;
	@%p407 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7538;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5294, %r1327, %r393;
	mul.wide.s32 	%rd489, %r5294, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f480;

$L__BB0_706:
	@%p15 bra 	$L__BB0_711;

	not.pred 	%p409, %p12;
	@%p409 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7537;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5296, %r1327, %r406;
	mul.wide.s32 	%rd491, %r5296, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f481;

$L__BB0_709:
	not.pred 	%p410, %p14;
	@%p410 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7537;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5298, %r1327, %r407;
	mul.wide.s32 	%rd493, %r5298, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f482;

$L__BB0_711:
	add.s32 	%r5300, %r1326, %r1306;
	mul.lo.s32 	%r1328, %r5300, %r1760;
	add.s32 	%r5301, %r1290, %r1328;
	mul.lo.s32 	%r5302, %r5301, %r49;
	sub.s32 	%r1329, %r5302, %r1736;
	@%p15 bra 	$L__BB0_716;

	not.pred 	%p412, %p11;
	@%p412 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5304, %r1329, %r392;
	mul.wide.s32 	%rd495, %r5304, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f483;

$L__BB0_714:
	not.pred 	%p413, %p13;
	@%p413 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7536;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5306, %r1329, %r393;
	mul.wide.s32 	%rd497, %r5306, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f484;

$L__BB0_716:
	@%p15 bra 	$L__BB0_721;

	not.pred 	%p415, %p12;
	@%p415 bra 	$L__BB0_719;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7535;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5308, %r1329, %r406;
	mul.wide.s32 	%rd499, %r5308, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f485;

$L__BB0_719:
	not.pred 	%p416, %p14;
	@%p416 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7535;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5310, %r1329, %r407;
	mul.wide.s32 	%rd501, %r5310, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f486;

$L__BB0_721:
	add.s32 	%r7290, %r1290, 1;
	add.s32 	%r5311, %r7290, %r1328;
	mul.lo.s32 	%r5312, %r5311, %r49;
	sub.s32 	%r1330, %r5312, %r1736;
	@%p15 bra 	$L__BB0_726;

	not.pred 	%p418, %p11;
	@%p418 bra 	$L__BB0_724;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5314, %r1330, %r392;
	mul.wide.s32 	%rd503, %r5314, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f487;

$L__BB0_724:
	not.pred 	%p419, %p13;
	@%p419 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5316, %r1330, %r393;
	mul.wide.s32 	%rd505, %r5316, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f488;

$L__BB0_726:
	@%p15 bra 	$L__BB0_731;

	not.pred 	%p421, %p12;
	@%p421 bra 	$L__BB0_729;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5318, %r1330, %r406;
	mul.wide.s32 	%rd507, %r5318, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f489;

$L__BB0_729:
	not.pred 	%p422, %p14;
	@%p422 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5320, %r1330, %r407;
	mul.wide.s32 	%rd509, %r5320, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f490;

$L__BB0_731:
	setp.eq.s32 	%p423, %r31, %r2132;
	@%p423 bra 	$L__BB0_733;

	mad.lo.s32 	%r5321, %r1719, %r31, %r32;
	mov.u32 	%r5322, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5323, %r5321, 1280, %r5322;
	add.s32 	%r5324, %r5323, -256;
	shl.b32 	%r5325, %r36, 4;
	add.s32 	%r5326, %r5324, %r5325;
	st.shared.v4.u32 	[%r5326+256], {%r3847, %r3924, %r1217, %r1223};
	st.shared.v4.u32 	[%r5326+1024], {%r3614, %r3691, %r1163, %r1175};
	shl.b32 	%r5327, %r36, 3;
	add.s32 	%r5328, %r5324, %r5327;
	st.shared.v2.u32 	[%r5328+768], {%r3890, %r3956};

$L__BB0_733:
	setp.eq.s32 	%p424, %r32, %r2137;
	@%p424 bra 	$L__BB0_737;

	mad.lo.s32 	%r5332, %r1718, 384, -64;
	mul.lo.s32 	%r5333, %r5332, %r32;
	mad.lo.s32 	%r5335, %r2133, %r2132, %r5333;
	mad.lo.s32 	%r5336, %r2539, 384, %r5335;
	shl.b32 	%r5337, %r5336, 2;
	mov.u32 	%r5338, _ZN6kernel5shmemE;
	add.s32 	%r5339, %r5338, %r5337;
	add.s32 	%r5340, %r5339, -256;
	shl.b32 	%r5341, %r36, 4;
	add.s32 	%r5342, %r5340, %r5341;
	st.shared.v4.u32 	[%r5342+256], {%r3768, %r3802, %r1187, %r1199};
	st.shared.v4.u32 	[%r5342+1024], {%r4369, %r4403, %r1272, %r1273};
	shl.b32 	%r5343, %r36, 3;
	add.s32 	%r1334, %r5340, %r5343;
	@%p423 bra 	$L__BB0_736;

	st.shared.v2.u32 	[%r1334], {%r3657, %r3723};

$L__BB0_736:
	st.shared.v2.u32 	[%r1334+768], {%r4228, %r4309};

$L__BB0_737:
	setp.ne.s32 	%p426, %r31, %r2132;
	ld.param.u64 	%rd511, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd511;
	@%p426 bra 	$L__BB0_739;

	mad.lo.s32 	%r5345, %r647, %r1721, %r34;
	mul.lo.s32 	%r5346, %r1719, %r5345;
	mul.lo.s32 	%r5347, %r5346, 768;
	mad.lo.s32 	%r5348, %r32, 384, %r5347;
	add.s32 	%r5349, %r5348, -64;
	mul.wide.s32 	%rd512, %r5349, 4;
	add.s64 	%rd513, %rd36, %rd512;
	add.s64 	%rd515, %rd513, %rd277;
	st.global.v4.u32 	[%rd515+256], {%r3847, %r3924, %r1217, %r1223};
	st.global.v4.u32 	[%rd515+1024], {%r3614, %r3691, %r1163, %r1175};
	add.s64 	%rd517, %rd513, %rd279;
	st.global.v2.u32 	[%rd517+768], {%r3890, %r3956};
	st.global.v2.u32 	[%rd517+1536], {%r3657, %r3723};

$L__BB0_739:
	setp.ne.s32 	%p427, %r32, %r2137;
	@%p427 bra 	$L__BB0_744;

	ld.param.u64 	%rd562, [%rd1+80];
	cvta.to.global.u64 	%rd561, %rd562;
	mad.lo.s32 	%r5352, %r648, %r1720, %r33;
	mul.lo.s32 	%r5356, %r5352, %r1783;
	mad.lo.s32 	%r5359, %r2539, 384, %r5356;
	add.s32 	%r5360, %r5359, -64;
	mad.lo.s32 	%r5363, %r1785, %r62, %r5360;
	mul.wide.s32 	%rd518, %r5363, 4;
	add.s64 	%rd519, %rd561, %rd518;
	add.s64 	%rd521, %rd519, %rd277;
	st.global.v4.u32 	[%rd521+256], {%r3768, %r3802, %r1187, %r1199};
	st.global.v4.u32 	[%rd521+1024], {%r4369, %r4403, %r1272, %r1273};
	add.s64 	%rd37, %rd519, %rd279;
	@%p423 bra 	$L__BB0_742;

	st.global.v2.u32 	[%rd37], {%r3657, %r3723};

$L__BB0_742:
	st.global.v2.u32 	[%rd37+768], {%r4228, %r4309};
	@%p216 bra 	$L__BB0_744;

	st.global.v2.u32 	[%rd37+1536], {%r7723, %r7722};

$L__BB0_744:
	setp.ge.s32 	%p430, %r31, %r2132;
	@%p430 bra 	$L__BB0_746;

	mul.lo.s32 	%r5364, %r1719, 320;
	mul.lo.s32 	%r5365, %r32, 320;
	mad.lo.s32 	%r5366, %r5364, %r31, %r5365;
	add.s32 	%r5370, %r1782, -64;
	mad.lo.s32 	%r5374, %r5370, %r2137, %r2134;
	add.s32 	%r5375, %r5366, %r5374;
	shl.b32 	%r5376, %r5375, 2;
	mov.u32 	%r5377, _ZN6kernel5shmemE;
	add.s32 	%r5378, %r5377, %r5376;
	shl.b32 	%r5379, %r36, 4;
	add.s32 	%r5380, %r5378, %r5379;
	st.shared.v4.u32 	[%r5380], {%r7771, %r7770, %r7766, %r7764};
	shl.b32 	%r5381, %r36, 3;
	add.s32 	%r5382, %r5378, %r5381;
	st.shared.v2.u32 	[%r5382+512], {%r7508, %r7503};
	st.shared.v4.u32 	[%r5380+768], {%r7532, %r7523, %r7495, %r7491};

$L__BB0_746:
	setp.ge.s32 	%p431, %r32, %r2137;
	@%p431 bra 	$L__BB0_750;

	mad.lo.s32 	%r5388, %r2539, 384, %r2140;
	mad.lo.s32 	%r5391, %r2135, %r32, %r5388;
	add.s32 	%r5397, %r5391, %r2138;
	shl.b32 	%r5398, %r5397, 2;
	mov.u32 	%r5399, _ZN6kernel5shmemE;
	add.s32 	%r5400, %r5399, %r5398;
	shl.b32 	%r5401, %r36, 3;
	add.s32 	%r5402, %r5400, %r5401;
	@%p430 bra 	$L__BB0_749;

	add.s32 	%r7273, %r5402, -256;
	st.shared.v2.u32 	[%r7273], {%r7527, %r7520};

$L__BB0_749:
	shl.b32 	%r5421, %r36, 4;
	add.s32 	%r5422, %r5400, %r5421;
	st.shared.v4.u32 	[%r5422], {%r7518, %r7514, %r7483, %r7479};
	add.s32 	%r7274, %r5402, -256;
	st.shared.v2.u32 	[%r7274+768], {%r7486, %r7480};
	st.shared.v4.u32 	[%r5422+768], {%r7769, %r7768, %r7757, %r7756};

$L__BB0_750:
	bar.sync 	0;
	@%p211 bra 	$L__BB0_752;

	mul.lo.s32 	%r5423, %r1719, 320;
	add.s32 	%r5424, %r31, -1;
	mul.lo.s32 	%r5425, %r32, 320;
	mad.lo.s32 	%r5426, %r5423, %r5424, %r5425;
	shl.b32 	%r5427, %r5426, 2;
	mov.u32 	%r5428, _ZN6kernel5shmemE;
	add.s32 	%r5429, %r5428, %r5427;
	add.s32 	%r5430, %r5429, -256;
	shl.b32 	%r5431, %r36, 4;
	add.s32 	%r5432, %r5430, %r5431;
	ld.shared.v4.u32 	{%r7719, %r7717, %r7711, %r7710}, [%r5432+256];
	ld.shared.v4.u32 	{%r7721, %r7720, %r7715, %r7714}, [%r5432+1024];
	shl.b32 	%r5441, %r36, 3;
	add.s32 	%r5442, %r5430, %r5441;
	ld.shared.v2.u32 	{%r7718, %r7716}, [%r5442+768];

$L__BB0_752:
	@%p214 bra 	$L__BB0_755;

	mad.lo.s32 	%r5447, %r1718, 384, -64;
	add.s32 	%r5448, %r32, -1;
	mul.lo.s32 	%r5449, %r5447, %r5448;
	mad.lo.s32 	%r5452, %r2133, %r2132, %r5449;
	mad.lo.s32 	%r5453, %r2539, 384, %r5452;
	shl.b32 	%r5454, %r5453, 2;
	mov.u32 	%r5455, _ZN6kernel5shmemE;
	add.s32 	%r5456, %r5455, %r5454;
	add.s32 	%r5457, %r5456, -256;
	shl.b32 	%r5458, %r36, 4;
	add.s32 	%r5459, %r5457, %r5458;
	ld.shared.v4.u32 	{%r7735, %r7734, %r7732, %r7730}, [%r5459+256];
	ld.shared.v4.u32 	{%r7729, %r7728, %r7726, %r7724}, [%r5459+1024];
	shl.b32 	%r5468, %r36, 3;
	add.s32 	%r5469, %r5457, %r5468;
	ld.shared.v2.u32 	{%r7733, %r7731}, [%r5469+768];
	@%p211 bra 	$L__BB0_755;

	add.s32 	%r7275, %r5469, 768;
	ld.shared.v2.u32 	{%r7713, %r7712}, [%r7275+768];

$L__BB0_755:
	ld.param.u64 	%rd523, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd523;
	mov.u32 	%r7850, %r7692;
	mov.u32 	%r7851, %r7693;
	mov.u32 	%r7836, %r7680;
	mov.u32 	%r7837, %r7681;
	mov.u32 	%r7838, %r7682;
	mov.u32 	%r7839, %r7683;
	mov.u32 	%r7852, %r7694;
	mov.u32 	%r7854, %r7696;
	mov.u32 	%r7842, %r7684;
	mov.u32 	%r7843, %r7685;
	mov.u32 	%r7844, %r7686;
	mov.u32 	%r7845, %r7687;
	@%p216 bra 	$L__BB0_759;

	mad.lo.s32 	%r5475, %r647, %r1721, %r34;
	mad.lo.s32 	%r5476, %r5475, 768, 384;
	mul.lo.s32 	%r5477, %r5476, %r1719;
	mad.lo.s32 	%r5478, %r32, 384, %r5477;
	add.s32 	%r5479, %r5478, -128;
	mul.wide.s32 	%rd524, %r5479, 4;
	add.s64 	%rd525, %rd38, %rd524;
	add.s64 	%rd527, %rd525, %rd277;
	add.s64 	%rd39, %rd527, 512;
	mov.u32 	%r7850, %r7692;
	mov.u32 	%r7851, %r7693;
	mov.u32 	%r7852, %r7694;
	mov.u32 	%r7854, %r7696;
	@%p214 bra 	$L__BB0_758;

	ld.global.v4.u32 	{%r7851, %r7850, %r7854, %r7852}, [%rd39+-512];

$L__BB0_758:
	ld.global.v4.u32 	{%r7838, %r7836, %r7839, %r7837}, [%rd39];
	ld.global.v4.u32 	{%r7845, %r7844, %r7843, %r7842}, [%rd39+512];
	ld.global.v4.u32 	{%r7689, %r7688, %r7691, %r7690}, [%rd39+1024];

$L__BB0_759:
	mov.u32 	%r7853, %r7695;
	mov.u32 	%r7855, %r7697;
	mov.u32 	%r7856, %r7698;
	mov.u32 	%r7857, %r7699;
	mov.u32 	%r7858, %r7700;
	mov.u32 	%r7859, %r7701;
	mov.u32 	%r7860, %r7702;
	mov.u32 	%r7861, %r7703;
	@%p219 bra 	$L__BB0_761;

	mad.lo.s32 	%r5497, %r648, %r1720, %r33;
	mad.lo.s32 	%r5503, %r2539, 384, %r63;
	mad.lo.s32 	%r5504, %r5497, %r1783, %r5503;
	mad.lo.s32 	%r5507, %r1785, %r62, %r5504;
	mul.wide.s32 	%rd528, %r5507, 4;
	add.s64 	%rd529, %rd38, %rd528;
	add.s64 	%rd531, %rd529, %rd277;
	ld.global.v4.u32 	{%r7705, %r7704, %r7707, %r7706}, [%rd531];
	ld.global.v4.u32 	{%r7861, %r7859, %r7857, %r7856}, [%rd531+512];
	ld.global.v4.u32 	{%r7860, %r7858, %r7855, %r7853}, [%rd531+1024];
	ld.global.v4.u32 	{%r7851, %r7850, %r7854, %r7852}, [%rd531+1536];

$L__BB0_761:
	neg.s32 	%r7281, %r1723;
	not.b32 	%r7280, %r34;
	add.s32 	%r7279, %r1721, %r7280;
	mul.lo.s32 	%r7278, %r7279, %r1722;
	not.b32 	%r7277, %r33;
	add.s32 	%r7276, %r1720, %r7277;
	mad.lo.s32 	%r5531, %r7276, %r1722, %r7278;
	add.s32 	%r5532, %r5531, %r1723;
	add.s32 	%r5541, %r5532, %r2545;
	add.s32 	%r1454, %r7559, 1;
	add.s32 	%r5542, %r1454, %r5541;
	div.s32 	%r5543, %r5542, %r1723;
	mad.lo.s32 	%r1455, %r5543, %r7281, %r5542;
	mad.lo.s32 	%r5550, %r5543, %r38, %r2556;
	ld.param.u64 	%rd532, [%rd1+96];
	cvta.to.global.u64 	%rd533, %rd532;
	rem.s32 	%r5551, %r5550, %r1724;
	shr.u32 	%r5552, %r5551, 31;
	add.s32 	%r5553, %r5551, %r5552;
	shr.s32 	%r5554, %r5553, 1;
	mad.lo.s32 	%r5555, %r5554, %r1723, %r1455;
	shl.b32 	%r5556, %r5555, 5;
	add.s32 	%r5557, %r5556, %r36;
	cvt.s64.s32 	%rd40, %r5557;
	mul.wide.s32 	%rd534, %r5557, 4;
	add.s64 	%rd535, %rd533, %rd534;
	ld.global.u32 	%r7561, [%rd535];
	ld.param.u64 	%rd536, [%rd1+104];
	cvta.to.global.u64 	%rd41, %rd536;
	@%p74 bra 	$L__BB0_763;
	bra.uni 	$L__BB0_762;

$L__BB0_763:
	shl.b64 	%rd539, %rd40, 2;
	add.s64 	%rd540, %rd41, %rd539;
	ld.global.u32 	%r7560, [%rd540];
	bra.uni 	$L__BB0_764;

$L__BB0_762:
	shl.b32 	%r5558, %r1455, 5;
	add.s32 	%r5559, %r5558, %r36;
	mul.wide.s32 	%rd537, %r5559, 16;
	add.s64 	%rd538, %rd41, %rd537;
	ld.global.v4.u32 	{%r5560, %r5561, %r5562, %r5563}, [%rd538];
	mov.u32 	%r7391, %r7395;
	mov.u32 	%r7392, %r7396;
	mov.u32 	%r7393, %r7397;
	mov.u32 	%r7394, %r7398;
	mov.u32 	%r7395, %r7399;
	mov.u32 	%r7396, %r7400;
	mov.u32 	%r7397, %r7401;
	mov.u32 	%r7398, %r7402;
	mov.u32 	%r7399, %r5563;
	mov.u32 	%r7400, %r5562;
	mov.u32 	%r7401, %r5561;
	mov.u32 	%r7402, %r5560;

$L__BB0_764:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5564, {low,high};}

	// end inline asm
	selp.b32 	%r5566, %r7386, %r5564, %p15;
	// begin inline asm
	{mul.f16x2 %r5565,%r5566,%r7529;
}
	// end inline asm
	selp.b32 	%r5569, %r7390, %r5564, %p15;
	// begin inline asm
	{mul.f16x2 %r5568,%r5569,%r7522;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5571, {low,high};}

	// end inline asm
	selp.b32 	%r5573, %r7386, %r5571, %p15;
	// begin inline asm
	{mul.f16x2 %r5572,%r5573,%r7510;
}
	// end inline asm
	selp.b32 	%r5576, %r7390, %r5571, %p15;
	// begin inline asm
	{mul.f16x2 %r5575,%r5576,%r7505;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5578, {low,high};}

	// end inline asm
	selp.b32 	%r5580, %r7386, %r5578, %p15;
	// begin inline asm
	{mul.f16x2 %r5579,%r5580,%r7497;
}
	// end inline asm
	selp.b32 	%r5583, %r7390, %r5578, %p15;
	// begin inline asm
	{mul.f16x2 %r5582,%r5583,%r7496;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5585, {low,high};}

	// end inline asm
	selp.b32 	%r5587, %r7386, %r5585, %p15;
	// begin inline asm
	{mul.f16x2 %r5586,%r5587,%r7501;
}
	// end inline asm
	selp.b32 	%r5590, %r7390, %r5585, %p15;
	// begin inline asm
	{mul.f16x2 %r5589,%r5590,%r7500;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5592, {low,high};}

	// end inline asm
	selp.b32 	%r5594, %r7386, %r5592, %p15;
	// begin inline asm
	{mul.f16x2 %r5593,%r5594,%r7499;
}
	// end inline asm
	selp.b32 	%r5597, %r7390, %r5592, %p15;
	// begin inline asm
	{mul.f16x2 %r5596,%r5597,%r7493;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5599, {low,high};}

	// end inline asm
	selp.b32 	%r5601, %r7386, %r5599, %p15;
	// begin inline asm
	{mul.f16x2 %r5600,%r5601,%r7489;
}
	// end inline asm
	selp.b32 	%r5604, %r7390, %r5599, %p15;
	// begin inline asm
	{mul.f16x2 %r5603,%r5604,%r7488;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5606, {low,high};}

	// end inline asm
	selp.b32 	%r5608, %r7386, %r5606, %p15;
	// begin inline asm
	{mul.f16x2 %r5607,%r5608,%r7487;
}
	// end inline asm
	selp.b32 	%r5611, %r7390, %r5606, %p15;
	// begin inline asm
	{mul.f16x2 %r5610,%r5611,%r7481;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5613, {low,high};}

	// end inline asm
	selp.b32 	%r5615, %r7386, %r5613, %p15;
	// begin inline asm
	{mul.f16x2 %r5614,%r5615,%r7474;
}
	// end inline asm
	selp.b32 	%r5618, %r7390, %r5613, %p15;
	// begin inline asm
	{mul.f16x2 %r5617,%r5618,%r7473;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5620, {low,high};}

	// end inline asm
	selp.b32 	%r5622, %r7386, %r5620, %p15;
	// begin inline asm
	{mul.f16x2 %r5621,%r5622,%r7703;
}
	// end inline asm
	selp.b32 	%r5625, %r7390, %r5620, %p15;
	// begin inline asm
	{mul.f16x2 %r5624,%r5625,%r7701;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5627, {low,high};}

	// end inline asm
	selp.b32 	%r5629, %r7386, %r5627, %p15;
	// begin inline asm
	{mul.f16x2 %r5628,%r5629,%r7702;
}
	// end inline asm
	selp.b32 	%r5632, %r7390, %r5627, %p15;
	// begin inline asm
	{mul.f16x2 %r5631,%r5632,%r7700;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5634, {low,high};}

	// end inline asm
	selp.b32 	%r5636, %r7386, %r5634, %p15;
	// begin inline asm
	{mul.f16x2 %r5635,%r5636,%r7466;
}
	// end inline asm
	selp.b32 	%r5639, %r7390, %r5634, %p15;
	// begin inline asm
	{mul.f16x2 %r5638,%r5639,%r7465;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5641, {low,high};}

	// end inline asm
	selp.b32 	%r5643, %r7386, %r5641, %p15;
	// begin inline asm
	{mul.f16x2 %r5642,%r5643,%r7470;
}
	// end inline asm
	selp.b32 	%r5646, %r7390, %r5641, %p15;
	// begin inline asm
	{mul.f16x2 %r5645,%r5646,%r7469;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5648, {low,high};}

	// end inline asm
	selp.b32 	%r5650, %r7386, %r5648, %p15;
	// begin inline asm
	{mul.f16x2 %r5649,%r5650,%r7468;
}
	// end inline asm
	selp.b32 	%r5653, %r7390, %r5648, %p15;
	// begin inline asm
	{mul.f16x2 %r5652,%r5653,%r7463;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5655, {low,high};}

	// end inline asm
	selp.b32 	%r5657, %r7386, %r5655, %p15;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7458;
}
	// end inline asm
	selp.b32 	%r5660, %r7390, %r5655, %p15;
	// begin inline asm
	{mul.f16x2 %r5659,%r5660,%r7457;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5662, {low,high};}

	// end inline asm
	selp.b32 	%r5664, %r7386, %r5662, %p15;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7460;
}
	// end inline asm
	selp.b32 	%r5667, %r7390, %r5662, %p15;
	// begin inline asm
	{mul.f16x2 %r5666,%r5667,%r7459;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5669, {low,high};}

	// end inline asm
	selp.b32 	%r5671, %r7386, %r5669, %p15;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7687;
}
	// end inline asm
	selp.b32 	%r5674, %r7390, %r5669, %p15;
	// begin inline asm
	{mul.f16x2 %r5673,%r5674,%r7686;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5676, {low,high};}

	// end inline asm
	selp.b32 	%r5678, %r7386, %r5676, %p15;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7685;
}
	// end inline asm
	selp.b32 	%r5681, %r7390, %r5676, %p15;
	// begin inline asm
	{mul.f16x2 %r5680,%r5681,%r7684;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5683, {low,high};}

	// end inline asm
	selp.b32 	%r5685, %r7386, %r5683, %p15;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7699;
}
	// end inline asm
	selp.b32 	%r5688, %r7390, %r5683, %p15;
	// begin inline asm
	{mul.f16x2 %r5687,%r5688,%r7698;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5690, {low,high};}

	// end inline asm
	selp.b32 	%r5692, %r7386, %r5690, %p15;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7452;
}
	// end inline asm
	selp.b32 	%r5695, %r7390, %r5690, %p15;
	// begin inline asm
	{mul.f16x2 %r5694,%r5695,%r7451;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5697, {low,high};}

	// end inline asm
	selp.b32 	%r5699, %r7386, %r5697, %p15;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7697;
}
	// end inline asm
	selp.b32 	%r5702, %r7390, %r5697, %p15;
	// begin inline asm
	{mul.f16x2 %r5701,%r5702,%r7695;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5704, {low,high};}

	// end inline asm
	selp.b32 	%r5706, %r7386, %r5704, %p15;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7696;
}
	// end inline asm
	selp.b32 	%r5709, %r7390, %r5704, %p15;
	// begin inline asm
	{mul.f16x2 %r5708,%r5709,%r7694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5711, {low,high};}

	// end inline asm
	selp.b32 	%r5713, %r7386, %r5711, %p15;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7683;
}
	// end inline asm
	selp.b32 	%r5716, %r7390, %r5711, %p15;
	// begin inline asm
	{mul.f16x2 %r5715,%r5716,%r7681;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5718, {low,high};}

	// end inline asm
	selp.b32 	%r5720, %r7386, %r5718, %p15;
	// begin inline asm
	{mul.f16x2 %r5719,%r5720,%r7682;
}
	// end inline asm
	selp.b32 	%r5723, %r7390, %r5718, %p15;
	// begin inline asm
	{mul.f16x2 %r5722,%r5723,%r7680;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5725, {low,high};}

	// end inline asm
	selp.b32 	%r5727, %r7386, %r5725, %p15;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7693;
}
	// end inline asm
	selp.b32 	%r5730, %r7390, %r5725, %p15;
	// begin inline asm
	{mul.f16x2 %r5729,%r5730,%r7692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5732,%r7556,%r3657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5735,%r3768,%r3614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5738,%r5732,%r5735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5741,%r7294,%r5738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5744,%r5565,%r5741;
}
	// end inline asm
	selp.b32 	%r7524, %r5565, %r5744, %p15;
	// begin inline asm
	{sub.f16x2 %r5747,%r7555,%r3723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5750,%r3802,%r3691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5753,%r5747,%r5750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5756,%r7294,%r5753;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5759,%r5568,%r5756;
}
	// end inline asm
	selp.b32 	%r7519, %r5568, %r5759, %p15;
	// begin inline asm
	{sub.f16x2 %r5762,%r7552,%r3890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5765,%r7558,%r3847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r5762,%r5765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5771,%r7294,%r5768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5774,%r5572,%r5771;
}
	// end inline asm
	selp.b32 	%r7528, %r5572, %r5774, %p15;
	// begin inline asm
	{sub.f16x2 %r5777,%r7551,%r3956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5780,%r7557,%r3924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5783,%r5777,%r5780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5786,%r7294,%r5783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5789,%r5575,%r5786;
}
	// end inline asm
	selp.b32 	%r7521, %r5575, %r5789, %p15;
	// begin inline asm
	{sub.f16x2 %r5792,%r7555,%r7556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5795,%r7385,%r5792;
}
	// end inline asm
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r7879,%r5579;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r7879,%r7386,%r5792;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5806, 31;
	mov.u32 	%r5808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5804,%r7879,%r5806,%r2242,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5809,%r5795,%r5804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5812,%r1187,%r1163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r5812,%r5809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5818,%r7294,%r5815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r5579,%r5818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5824,%r7557,%r7558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5827,%r7385,%r5824;
}
	// end inline asm
	mov.u32 	%r7880, %r5586;
	@%p15 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r7880,%r7386,%r5824;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5836,%r7880,%r5806,%r2242,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5841,%r5827,%r5836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r7546,%r1163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5847,%r5841,%r5844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5850,%r7294,%r5847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r5586,%r5850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5856,%r7548,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r7554,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5856,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r7294,%r5862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r5593,%r5865;
}
	// end inline asm
	selp.b32 	%r7529, %r5593, %r5868, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7556;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5873,%r7556,%r427,%r2242,%r5808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5873;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5879, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5880,%r5879,%r7555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5883,%r7389,%r5880;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r7881,%r5582;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r7881,%r7390,%r5880;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5898, 31;
	mov.u32 	%r5922, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5896,%r7881,%r5898,%r2242,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5901,%r5883,%r5896;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5904,%r1199,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r5904,%r5901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5910,%r7294,%r5907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r5582,%r5910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7558;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5918,%r7558,%r427,%r2242,%r5922;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5918;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5924, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5925,%r5924,%r7557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5928,%r7389,%r5925;
}
	// end inline asm
	mov.u32 	%r7882, %r5589;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r7882,%r7390,%r5925;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5939,%r7882,%r5898,%r2242,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5944,%r5928,%r5939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r7545,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5944,%r5947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r7294,%r5950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r5589,%r5953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5959,%r7547,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5962,%r7553,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r5959,%r5962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5968,%r7294,%r5965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5596,%r5968;
}
	// end inline asm
	selp.b32 	%r7522, %r5596, %r5971, %p15;
	// begin inline asm
	{sub.f16x2 %r5974,%r7553,%r7554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5977,%r7385,%r5974;
}
	// end inline asm
	mov.u32 	%r7883, %r5600;
	@%p15 bra 	$L__BB0_776;

	// begin inline asm
	{mul.f16x2 %r7883,%r7386,%r5974;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r5988, 31;
	mov.u32 	%r6027, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5986,%r7883,%r5988,%r2242,%r6027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5991,%r5977,%r5986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5994,%r7540,%r1187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5997,%r5991,%r5994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6000,%r7294,%r5997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r5600,%r6000;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6006,%r7542,%r4228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6009,%r4369,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6012,%r6006,%r6009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6015,%r7294,%r6012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6018,%r5607,%r6015;
}
	// end inline asm
	selp.b32 	%r7515, %r5607, %r6018, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7554;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6023,%r7554,%r427,%r2242,%r6027;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6023;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6029, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r6029,%r7553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6033,%r7389,%r6030;
}
	// end inline asm
	mov.u32 	%r7884, %r5603;
	@%p15 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7884,%r7390,%r6030;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6044,%r7884,%r5988,%r2242,%r6027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6049,%r6033,%r6044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6052,%r7539,%r1199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r6049,%r6052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6058,%r7294,%r6055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7516,%r5603,%r6058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6064,%r7541,%r4309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r4403,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6070,%r6064,%r6067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6073,%r7294,%r6070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6076,%r5610,%r6073;
}
	// end inline asm
	selp.b32 	%r7513, %r5610, %r6076, %p15;
	// begin inline asm
	{sub.f16x2 %r6079,%r7551,%r7552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6082,%r7385,%r6079;
}
	// end inline asm
	@%p15 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7885,%r5614;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7885,%r7386,%r6079;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r6095, 31;
	mov.u32 	%r6097, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6093,%r7885,%r6095,%r2242,%r6097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6098,%r6082,%r6093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6101,%r7546,%r1217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6104,%r6101,%r6098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6107,%r7294,%r6104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r5614,%r6107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6113,%r7734,%r7735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6116,%r7385,%r6113;
}
	// end inline asm
	mov.u32 	%r7886, %r5621;
	@%p15 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7886,%r7386,%r6113;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6125,%r7886,%r6095,%r2242,%r6097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6130,%r6116,%r6125;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6133,%r7732,%r1217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r6130,%r6133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6139,%r7294,%r6136;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7512,%r5621,%r6139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6145,%r7733,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6148,%r7550,%r7735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6151,%r6145,%r6148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6154,%r7294,%r6151;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6157,%r5628,%r6154;
}
	// end inline asm
	selp.b32 	%r7510, %r5628, %r6157, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7552;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6162,%r7552,%r427,%r2242,%r6097;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6162;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6168, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6169,%r6168,%r7551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6172,%r7389,%r6169;
}
	// end inline asm
	@%p15 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7887,%r5617;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7887,%r7390,%r6169;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6187, 31;
	mov.u32 	%r6211, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6185,%r7887,%r6187,%r2242,%r6211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6190,%r6172,%r6185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6193,%r7545,%r1223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6196,%r6193,%r6190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6199,%r7294,%r6196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7506,%r5617,%r6199;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7735;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6207,%r7735,%r427,%r2242,%r6211;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6207;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6213, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6214,%r6213,%r7734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6217,%r7389,%r6214;
}
	// end inline asm
	mov.u32 	%r7888, %r5624;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7888,%r7390,%r6214;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6228,%r7888,%r6187,%r2242,%r6211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6233,%r6217,%r6228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r7730,%r1223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r6233,%r6236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6242,%r7294,%r6239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r5624,%r6242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6248,%r7731,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6251,%r7549,%r7734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6254,%r6248,%r6251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6257,%r7294,%r6254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6260,%r5631,%r6257;
}
	// end inline asm
	selp.b32 	%r7505, %r5631, %r6260, %p15;
	// begin inline asm
	{sub.f16x2 %r6263,%r7547,%r7548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6266,%r7385,%r6263;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7889,%r5635;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7889,%r7386,%r6263;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6279, 31;
	mov.u32 	%r6281, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6277,%r7889,%r6279,%r2242,%r6281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6282,%r6266,%r6277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6285,%r7540,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6288,%r6285,%r6282;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6291,%r7294,%r6288;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7497,%r5635,%r6291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6297,%r7549,%r7550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6300,%r7385,%r6297;
}
	// end inline asm
	mov.u32 	%r7890, %r5642;
	@%p15 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7890,%r7386,%r6297;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6309,%r7890,%r6279,%r2242,%r6281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6314,%r6300,%r6309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6317,%r7536,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r6314,%r6317;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6323,%r7294,%r6320;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7501,%r5642,%r6323;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6329,%r7538,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6332,%r7544,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6335,%r6329,%r6332;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6338,%r7294,%r6335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6341,%r5649,%r6338;
}
	// end inline asm
	selp.b32 	%r7499, %r5649, %r6341, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7548;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6346,%r7548,%r427,%r2242,%r6281;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6346;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6352, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6353,%r6352,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6356,%r7389,%r6353;
}
	// end inline asm
	@%p15 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7891,%r5638;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7891,%r7390,%r6353;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6371, 31;
	mov.u32 	%r6395, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6369,%r7891,%r6371,%r2242,%r6395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6374,%r6356,%r6369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6377,%r7539,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6380,%r6377,%r6374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6383,%r7294,%r6380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7496,%r5638,%r6383;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7550;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6391,%r7550,%r427,%r2242,%r6395;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6391;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6397, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6398,%r6397,%r7549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6401,%r7389,%r6398;
}
	// end inline asm
	mov.u32 	%r7892, %r5645;
	@%p15 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7892,%r7390,%r6398;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6412,%r7892,%r6371,%r2242,%r6395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6417,%r6401,%r6412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6420,%r7535,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r6417,%r6420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6426,%r7294,%r6423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7500,%r5645,%r6426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6432,%r7537,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6435,%r7543,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6438,%r6432,%r6435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6441,%r7294,%r6438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6444,%r5652,%r6441;
}
	// end inline asm
	selp.b32 	%r7493, %r5652, %r6444, %p15;
	// begin inline asm
	{sub.f16x2 %r6447,%r7541,%r7542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6450,%r7385,%r6447;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;
	bra.uni 	$L__BB0_799;

$L__BB0_800:
	// begin inline asm
	{neg.f16x2 %r7893,%r5656;
}
	// end inline asm
	bra.uni 	$L__BB0_801;

$L__BB0_799:
	// begin inline asm
	{mul.f16x2 %r7893,%r7386,%r6447;
}
	// end inline asm

$L__BB0_801:
	mov.u32 	%r6463, 31;
	mov.u32 	%r6465, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6461,%r7893,%r6463,%r2242,%r6465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6466,%r6450,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6469,%r1272,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6472,%r6469,%r6466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6475,%r7294,%r6472;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r5656,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6481,%r7543,%r7544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6484,%r7385,%r6481;
}
	// end inline asm
	mov.u32 	%r7894, %r5663;
	@%p15 bra 	$L__BB0_803;

	// begin inline asm
	{mul.f16x2 %r7894,%r7386,%r6481;
}
	// end inline asm

$L__BB0_803:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6493,%r7894,%r6463,%r2242,%r6465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6484,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6501,%r7534,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6504,%r6498,%r6501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6507,%r7294,%r6504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r5663,%r6507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6513,%r7718,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6516,%r7721,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6519,%r6513,%r6516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6522,%r7294,%r6519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r5670,%r6522;
}
	// end inline asm
	selp.b32 	%r7487, %r5670, %r6525, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7542;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6530,%r7542,%r427,%r2242,%r6465;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6530;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6536, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6537,%r6536,%r7541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6540,%r7389,%r6537;
}
	// end inline asm
	@%p15 bra 	$L__BB0_805;
	bra.uni 	$L__BB0_804;

$L__BB0_805:
	// begin inline asm
	{neg.f16x2 %r7895,%r5659;
}
	// end inline asm
	bra.uni 	$L__BB0_806;

$L__BB0_804:
	// begin inline asm
	{mul.f16x2 %r7895,%r7390,%r6537;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6555, 31;
	mov.u32 	%r6579, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6553,%r7895,%r6555,%r2242,%r6579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6558,%r6540,%r6553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6561,%r1273,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6564,%r6561,%r6558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6567,%r7294,%r6564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7484,%r5659,%r6567;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7544;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6575,%r7544,%r427,%r2242,%r6579;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6575;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6581, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6582,%r6581,%r7543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6585,%r7389,%r6582;
}
	// end inline asm
	mov.u32 	%r7896, %r5666;
	@%p15 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7896,%r7390,%r6582;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6596,%r7896,%r6555,%r2242,%r6579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6601,%r6585,%r6596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6604,%r7533,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r6601,%r6604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6610,%r7294,%r6607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7488,%r5666,%r6610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6616,%r7716,%r7541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6619,%r7720,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6622,%r6616,%r6619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6625,%r7294,%r6622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6628,%r5673,%r6625;
}
	// end inline asm
	selp.b32 	%r7481, %r5673, %r6628, %p15;
	// begin inline asm
	{sub.f16x2 %r6631,%r7720,%r7721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6634,%r7385,%r6631;
}
	// end inline asm
	mov.u32 	%r7897, %r5677;
	@%p15 bra 	$L__BB0_810;

	// begin inline asm
	{mul.f16x2 %r7897,%r7386,%r6631;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6645, 31;
	mov.u32 	%r6669, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6643,%r7897,%r6645,%r2242,%r6669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6648,%r6634,%r6643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6651,%r7715,%r1272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6654,%r6648,%r6651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6657,%r7294,%r6654;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7478,%r5677,%r6657;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7721;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6665,%r7721,%r427,%r2242,%r6669;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6665;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6671, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6672,%r6671,%r7720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6675,%r7389,%r6672;
}
	// end inline asm
	mov.u32 	%r7898, %r5680;
	@%p15 bra 	$L__BB0_812;

	// begin inline asm
	{mul.f16x2 %r7898,%r7390,%r6672;
}
	// end inline asm

$L__BB0_812:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6686,%r7898,%r6645,%r2242,%r6669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6691,%r6675,%r6686;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6694,%r7714,%r1273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6697,%r6691,%r6694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6700,%r7294,%r6697;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7477,%r5680,%r6700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6706,%r7731,%r7733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6709,%r7385,%r6706;
}
	// end inline asm
	@%p15 bra 	$L__BB0_814;
	bra.uni 	$L__BB0_813;

$L__BB0_814:
	// begin inline asm
	{neg.f16x2 %r7899,%r5684;
}
	// end inline asm
	bra.uni 	$L__BB0_815;

$L__BB0_813:
	// begin inline asm
	{mul.f16x2 %r7899,%r7386,%r6706;
}
	// end inline asm

$L__BB0_815:
	mov.u32 	%r6722, 31;
	mov.u32 	%r6746, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6720,%r7899,%r6722,%r2242,%r6746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6725,%r6709,%r6720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6728,%r7536,%r7732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6731,%r6728,%r6725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6734,%r7294,%r6731;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7474,%r5684,%r6734;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7733;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6742,%r7733,%r427,%r2242,%r6746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6742;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6748, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6749,%r6748,%r7731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6752,%r7389,%r6749;
}
	// end inline asm
	@%p15 bra 	$L__BB0_817;
	bra.uni 	$L__BB0_816;

$L__BB0_817:
	// begin inline asm
	{neg.f16x2 %r7900,%r5687;
}
	// end inline asm
	bra.uni 	$L__BB0_818;

$L__BB0_816:
	// begin inline asm
	{mul.f16x2 %r7900,%r7390,%r6749;
}
	// end inline asm

$L__BB0_818:
	mov.u32 	%r6767, 31;
	mov.u32 	%r6769, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6765,%r7900,%r6767,%r2242,%r6769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6770,%r6752,%r6765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6773,%r7535,%r7730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6776,%r6773,%r6770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6779,%r7294,%r6776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r5687,%r6779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6785,%r7537,%r7538;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6788,%r7385,%r6785;
}
	// end inline asm
	@%p15 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7901,%r5691;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7901,%r7386,%r6785;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6801, 31;
	mov.u32 	%r6803, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6799,%r7901,%r6801,%r2242,%r6803;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6804,%r6788,%r6799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6807,%r7534,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6810,%r6807,%r6804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6813,%r7294,%r6810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r5691,%r6813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6819,%r7728,%r7729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6822,%r7385,%r6819;
}
	// end inline asm
	mov.u32 	%r7902, %r5698;
	@%p15 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7902,%r7386,%r6819;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6831,%r7902,%r6801,%r2242,%r6803;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6836,%r6822,%r6831;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6839,%r7726,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6842,%r6836,%r6839;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6845,%r7294,%r6842;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r5698,%r6845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6851,%r7713,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6854,%r7719,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6857,%r6851,%r6854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6860,%r7294,%r6857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6863,%r5705,%r6860;
}
	// end inline asm
	selp.b32 	%r7468, %r5705, %r6863, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7538;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6868,%r7538,%r427,%r2242,%r6803;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6868;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6874, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6875,%r6874,%r7537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6878,%r7389,%r6875;
}
	// end inline asm
	@%p15 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7903,%r5694;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7903,%r7390,%r6875;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6893, 31;
	mov.u32 	%r6917, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6891,%r7903,%r6893,%r2242,%r6917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6896,%r6878,%r6891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6899,%r7533,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6902,%r6899,%r6896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6905,%r7294,%r6902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r5694,%r6905;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7729;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6913,%r7729,%r427,%r2242,%r6917;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6913;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6919, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6920,%r6919,%r7728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6923,%r7389,%r6920;
}
	// end inline asm
	mov.u32 	%r7904, %r5701;
	@%p15 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7904,%r7390,%r6920;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6934,%r7904,%r6893,%r2242,%r6917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6939,%r6923,%r6934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6942,%r7724,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r6939,%r6942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6948,%r7294,%r6945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r5701,%r6948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6954,%r7712,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6957,%r7717,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6960,%r6954,%r6957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6963,%r7294,%r6960;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6966,%r5708,%r6963;
}
	// end inline asm
	selp.b32 	%r7463, %r5708, %r6966, %p15;
	// begin inline asm
	{sub.f16x2 %r6969,%r7716,%r7718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6972,%r7385,%r6969;
}
	// end inline asm
	@%p15 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7905,%r5712;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7905,%r7386,%r6969;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6985, 31;
	mov.u32 	%r6987, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6983,%r7905,%r6985,%r2242,%r6987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6988,%r6972,%r6983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6991,%r7715,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6994,%r6991,%r6988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6997,%r7294,%r6994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7458,%r5712,%r6997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7003,%r7717,%r7719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7006,%r7385,%r7003;
}
	// end inline asm
	mov.u32 	%r7906, %r5719;
	@%p15 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7906,%r7386,%r7003;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7015,%r7906,%r6985,%r2242,%r6987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7020,%r7006,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7023,%r7711,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7026,%r7020,%r7023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7029,%r7294,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7460,%r5719,%r7029;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7718;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7037,%r7718,%r427,%r2242,%r6987;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7037;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7043, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7044,%r7043,%r7716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7047,%r7389,%r7044;
}
	// end inline asm
	@%p15 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7907,%r5715;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7907,%r7390,%r7044;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r7062, 31;
	mov.u32 	%r7086, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7060,%r7907,%r7062,%r2242,%r7086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7065,%r7047,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7068,%r7714,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7071,%r7068,%r7065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7074,%r7294,%r7071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r5715,%r7074;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7719;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7082,%r7719,%r427,%r2242,%r7086;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7082;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7088, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7089,%r7088,%r7717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7092,%r7389,%r7089;
}
	// end inline asm
	mov.u32 	%r7908, %r5722;
	@%p15 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7908,%r7390,%r7089;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7103,%r7908,%r7062,%r2242,%r7086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7092,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7111,%r7710,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7108,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7117,%r7294,%r7114;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7459,%r5722,%r7117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7123,%r7712,%r7713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7126,%r7385,%r7123;
}
	// end inline asm
	@%p15 bra 	$L__BB0_840;
	bra.uni 	$L__BB0_839;

$L__BB0_840:
	// begin inline asm
	{neg.f16x2 %r7909,%r5726;
}
	// end inline asm
	bra.uni 	$L__BB0_841;

$L__BB0_839:
	// begin inline asm
	{mul.f16x2 %r7909,%r7386,%r7123;
}
	// end inline asm

$L__BB0_841:
	mov.u32 	%r7139, 31;
	mov.u32 	%r7163, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7137,%r7909,%r7139,%r2242,%r7163;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7142,%r7126,%r7137;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7145,%r7711,%r7726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7148,%r7145,%r7142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7151,%r7294,%r7148;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7452,%r5726,%r7151;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7713;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7159,%r7713,%r427,%r2242,%r7163;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7159;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7165, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7166,%r7165,%r7712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7169,%r7389,%r7166;
}
	// end inline asm
	@%p15 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r7910,%r5729;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r7910,%r7390,%r7166;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r7184, 31;
	mov.u32 	%r7186, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7182,%r7910,%r7184,%r2242,%r7186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r7169,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7190,%r7710,%r7724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7193,%r7190,%r7187;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7196,%r7294,%r7193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7451,%r5729,%r7196;
}
	// end inline asm
	bar.sync 	0;
	@%p423 bra 	$L__BB0_847;

	setp.ne.s32 	%p486, %r32, %r2137;
	shl.b32 	%r7205, %r32, 8;
	shl.b32 	%r7209, %r1719, 8;
	or.b32  	%r7210, %r7209, 128;
	mad.lo.s32 	%r7211, %r7210, %r31, %r2140;
	add.s32 	%r7212, %r7211, %r7205;
	shl.b32 	%r7213, %r7212, 2;
	mov.u32 	%r7214, _ZN6kernel5shmemE;
	add.s32 	%r7215, %r7214, %r7213;
	shl.b32 	%r7216, %r36, 4;
	add.s32 	%r1711, %r7215, %r7216;
	st.shared.v4.u32 	[%r1711], {%r7512, %r7511, %r7507, %r7506};
	st.shared.v4.u32 	[%r1711+512], {%r7528, %r7521, %r7531, %r7530};
	@%p486 bra 	$L__BB0_847;

	st.shared.v4.u32 	[%r1711+1024], {%r7526, %r7525, %r7524, %r7519};

$L__BB0_847:
	setp.eq.s32 	%p484, %r32, %r2137;
	@%p484 bra 	$L__BB0_849;

	mul.lo.s32 	%r7220, %r2539, 384;
	mad.lo.s32 	%r7221, %r63, %r32, %r7220;
	mad.lo.s32 	%r7224, %r2135, %r2137, %r7221;
	mad.lo.s32 	%r7227, %r2133, %r2132, %r7224;
	shl.b32 	%r7228, %r7227, 2;
	mov.u32 	%r7229, _ZN6kernel5shmemE;
	add.s32 	%r7230, %r7229, %r7228;
	shl.b32 	%r7231, %r36, 4;
	add.s32 	%r7232, %r7230, %r7231;
	st.shared.v4.u32 	[%r7232], {%r7526, %r7525, %r7524, %r7519};
	st.shared.v4.u32 	[%r7232+512], {%r7517, %r7516, %r7485, %r7484};
	st.shared.v4.u32 	[%r7232+1024], {%r7515, %r7513, %r7478, %r7477};

$L__BB0_849:
	setp.ne.s32 	%p485, %r31, %r2132;
	ld.param.u64 	%rd541, [%rd1+80];
	cvta.to.global.u64 	%rd42, %rd541;
	@%p485 bra 	$L__BB0_851;

	mad.lo.s32 	%r7234, %r647, %r1721, %r34;
	mad.lo.s32 	%r7235, %r7234, 768, 384;
	mul.lo.s32 	%r7236, %r7235, %r1719;
	mad.lo.s32 	%r7237, %r32, 384, %r7236;
	add.s32 	%r7238, %r7237, -128;
	mul.wide.s32 	%rd542, %r7238, 4;
	add.s64 	%rd543, %rd42, %rd542;
	add.s64 	%rd545, %rd543, %rd277;
	st.global.v4.u32 	[%rd545+512], {%r7512, %r7511, %r7507, %r7506};
	st.global.v4.u32 	[%rd545+1024], {%r7528, %r7521, %r7531, %r7530};
	st.global.v4.u32 	[%rd545+1536], {%r7526, %r7525, %r7524, %r7519};

$L__BB0_851:
	setp.ne.s32 	%p487, %r32, %r2137;
	@%p487 bra 	$L__BB0_854;

	mad.lo.s32 	%r7240, %r648, %r1720, %r33;
	mad.lo.s32 	%r7246, %r2539, 384, %r63;
	mad.lo.s32 	%r7247, %r7240, %r1783, %r7246;
	mad.lo.s32 	%r7250, %r1785, %r62, %r7247;
	mul.wide.s32 	%rd546, %r7250, 4;
	add.s64 	%rd547, %rd42, %rd546;
	add.s64 	%rd43, %rd547, %rd277;
	st.global.v4.u32 	[%rd43], {%r7526, %r7525, %r7524, %r7519};
	st.global.v4.u32 	[%rd43+512], {%r7517, %r7516, %r7485, %r7484};
	st.global.v4.u32 	[%rd43+1024], {%r7515, %r7513, %r7478, %r7477};
	@%p216 bra 	$L__BB0_854;

	st.global.v4.u32 	[%rd43+1536], {%r7689, %r7688, %r7691, %r7690};

$L__BB0_854:
	rem.s32 	%r7251, %r7559, %r1722;
	setp.eq.s32 	%p478, %r7251, 0;
	@%p478 bra 	$L__BB0_856;

	bar.sync 	0;
	bra.uni 	$L__BB0_863;

$L__BB0_856:
	@%p150 bra 	$L__BB0_858;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_858:
	bar.sync 	0;
	@%p151 bra 	$L__BB0_862;

	membar.gl;
	setp.eq.s32 	%p481, %r421, %r422;
	mov.u32 	%r7266, -2147483647;
	sub.s32 	%r7267, %r7266, %r420;
	selp.b32 	%r7255, %r7267, 1, %p481;
	// begin inline asm
	atom.add.release.gpu.u32 %r7254,[%rd27],%r7255;
	// end inline asm

$L__BB0_860:
	ld.volatile.u32 	%r7268, [%rd27];
	xor.b32  	%r7269, %r7268, %r7254;
	setp.gt.s32 	%p482, %r7269, -1;
	@%p482 bra 	$L__BB0_860;

	// begin inline asm
	ld.acquire.gpu.u32 %r7270,[%rd27];
	// end inline asm

$L__BB0_862:
	bar.sync 	0;

$L__BB0_863:
	setp.lt.s32 	%p483, %r1454, %r39;
	mov.u32 	%r7692, %r7850;
	mov.u32 	%r7693, %r7851;
	mov.u32 	%r7680, %r7836;
	mov.u32 	%r7681, %r7837;
	mov.u32 	%r7682, %r7838;
	mov.u32 	%r7683, %r7839;
	mov.u32 	%r7694, %r7852;
	mov.u32 	%r7695, %r7853;
	mov.u32 	%r7696, %r7854;
	mov.u32 	%r7697, %r7855;
	mov.u32 	%r7698, %r7856;
	mov.u32 	%r7699, %r7857;
	mov.u32 	%r7684, %r7842;
	mov.u32 	%r7685, %r7843;
	mov.u32 	%r7686, %r7844;
	mov.u32 	%r7687, %r7845;
	mov.u32 	%r7700, %r7858;
	mov.u32 	%r7701, %r7859;
	mov.u32 	%r7702, %r7860;
	mov.u32 	%r7703, %r7861;
	mov.u32 	%r7479, %r492;
	mov.u32 	%r7480, %r7758;
	mov.u32 	%r7483, %r493;
	mov.u32 	%r7486, %r7760;
	mov.u32 	%r7491, %r498;
	mov.u32 	%r7495, %r501;
	mov.u32 	%r7503, %r7765;
	mov.u32 	%r7508, %r7767;
	mov.u32 	%r7514, %r519;
	mov.u32 	%r7518, %r527;
	mov.u32 	%r7520, %r529;
	mov.u32 	%r7523, %r531;
	mov.u32 	%r7527, %r535;
	mov.u32 	%r7532, %r539;
	mov.u32 	%r7559, %r1454;
	@%p483 bra 	$L__BB0_302;

$L__BB0_864:
	ret;

}

