//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<587>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<482>;
	.reg .b32 	%r<8054>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<585>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1775, %r1776}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1777, %r1778}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1779, %r1780}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1781, %r1782}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1783, %r1784}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1785, %r1786}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1787, %r1788}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1789, %r1790}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1791, %r1792}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1793, %r1794}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1795, %r1796}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1797, %r1798}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1799, %r1800}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1801, 32;
	sub.s32 	%r45, %r1801, %r1782;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1802, %r1788, -1;
	mad.lo.s32 	%r1803, %r1802, %r1787, %r1786;
	add.s32 	%r1804, %r1781, %r1780;
	add.s32 	%r1805, %r1804, %r1803;
	add.s32 	%r1806, %r1805, 1;
	mul.lo.s32 	%r1807, %r1775, %r1777;
	shl.b32 	%r47, %r1807, 1;
	shl.b32 	%r1808, %r1807, 2;
	div.s32 	%r1809, %r1806, %r1808;
	add.s32 	%r1810, %r1809, 1;
	mul.lo.s32 	%r1811, %r1810, %r1781;
	mul.lo.s32 	%r1812, %r1776, %r1778;
	shl.b32 	%r48, %r1812, 1;
	div.s32 	%r1813, %r1811, %r48;
	add.s32 	%r1814, %r1813, 1;
	mul.lo.s32 	%r49, %r1814, %r1780;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7427, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r7427, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1817, %r1777, %r44, %r43;
	mad.lo.s32 	%r1818, %r1817, %r1776, %r42;
	mad.lo.s32 	%r1819, %r1818, %r1775, %r41;
	shl.b32 	%r53, %r1819, 5;
	add.s32 	%r7432, %r53, %r46;
	mul.lo.s32 	%r1820, %r1812, %r1807;
	shl.b32 	%r57, %r1820, 5;
	mov.u32 	%r1821, 8;
	sub.s32 	%r1822, %r1821, %r1789;
	add.s32 	%r1823, %r1822, %r1790;
	sub.s32 	%r1824, %r1821, %r1791;
	add.s32 	%r1825, %r1824, %r1792;
	sub.s32 	%r58, %r1794, %r1793;
	mul.lo.s32 	%r1826, %r1788, %r58;
	mul.lo.s32 	%r1827, %r1826, %r1825;
	mul.lo.s32 	%r1828, %r1827, %r1823;
	mul.lo.s32 	%r59, %r1828, 3;
	setp.ge.s32 	%p29, %r7432, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1829, %r1792, 8;
	sub.s32 	%r1830, %r1829, %r1791;
	mul.lo.s32 	%r1831, %r1788, %r1830;
	add.s32 	%r1832, %r1790, 8;
	sub.s32 	%r1833, %r1832, %r1789;
	mul.lo.s32 	%r1834, %r1831, %r1833;
	mul.lo.s32 	%r1835, %r1834, %r58;
	not.b32 	%r1836, %r46;
	mad.lo.s32 	%r1837, %r1835, 3, %r1836;
	sub.s32 	%r1838, %r1837, %r53;
	mul.lo.s32 	%r1839, %r1812, %r1775;
	mul.lo.s32 	%r1840, %r1839, %r1777;
	shl.b32 	%r1841, %r1840, 5;
	div.u32 	%r60, %r1838, %r1841;
	add.s32 	%r1842, %r60, 1;
	and.b32  	%r7429, %r1842, 3;
	setp.eq.s32 	%p30, %r7429, 0;
	mov.u32 	%r7430, %r7432;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r7430, %r7432;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7430, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1843, 0;
	st.global.u32 	[%rd44], %r1843;
	add.s32 	%r7430, %r7430, %r57;
	add.s32 	%r7429, %r7429, -1;
	setp.ne.s32 	%p31, %r7429, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7430, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1844, 0;
	st.global.u32 	[%rd46], %r1844;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1844;
	add.s32 	%r1845, %r7430, %r57;
	add.s32 	%r1846, %r1845, %r57;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1844;
	add.s32 	%r1847, %r1846, %r57;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1844;
	add.s32 	%r7430, %r1847, %r57;
	setp.lt.s32 	%p33, %r7430, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1848, %r1781, %r47;
	div.s32 	%r1849, %r1848, %r48;
	mul.lo.s32 	%r1850, %r1849, %r1780;
	sub.s32 	%r69, %r1850, %r47;
	sub.s32 	%r1851, %r1780, %r48;
	mul.lo.s32 	%r1852, %r1851, %r1777;
	mul.lo.s32 	%r70, %r1775, 384;
	add.s32 	%r1853, %r70, %r70;
	add.s32 	%r1854, %r1853, 128;
	mul.lo.s32 	%r1856, %r1812, 768;
	mul.lo.s32 	%r1857, %r1852, %r1854;
	mad.lo.s32 	%r71, %r1856, %r69, %r1857;
	bra.uni 	$L__BB0_11;

$L__BB0_959:
	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7396, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd570, %r7432, 4;
	add.s64 	%rd571, %rd3, %rd570;
	st.global.u32 	[%rd571], %r7396;
	add.s32 	%r7432, %r7432, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7432, %r71;
	@%p34 bra 	$L__BB0_959;

	ld.param.u64 	%rd52, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7468, %r1775, %r43, %r41;
	mul.lo.s32 	%r79, %r1776, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7468, %r1780;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1858, 31;
	sub.s32 	%r1859, %r1858, %r46;
	selp.b32 	%r1860, %r46, %r1859, %p36;
	shl.b32 	%r1861, %r1860, 2;
	mov.u32 	%r1862, 2;
	sub.s32 	%r81, %r1861, %r1783;
	shl.b32 	%r1863, %r1782, 2;
	mov.u32 	%r1864, 128;
	sub.s32 	%r82, %r1864, %r1863;
	sub.s32 	%r1865, %r1862, %r1783;
	add.s32 	%r83, %r1865, %r1861;
	sub.s32 	%r84, %r1790, %r1789;
	sub.s32 	%r85, %r1792, %r1791;
	add.s32 	%r86, %r1790, -1;
	add.s32 	%r87, %r1792, -1;
	add.s32 	%r88, %r1794, -1;
	mul.lo.s32 	%r1866, %r1781, %r1780;
	shl.b32 	%r89, %r1866, 6;
	add.s32 	%r90, %r1780, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1867, %r94, 31;
	add.s32 	%r1868, %r94, %r1867;
	shr.s32 	%r96, %r1868, 1;
	and.b32  	%r1869, %r1868, -2;
	sub.s32 	%r1870, %r94, %r1869;
	add.s32 	%r95, %r1870, %r89;
	rem.s32 	%r1926, %r91, %r82;
	add.s32 	%r1927, %r1926, %r82;
	rem.s32 	%r1928, %r1927, %r82;
	rem.s32 	%r1929, %r92, %r82;
	add.s32 	%r1930, %r1929, %r82;
	rem.s32 	%r1931, %r1930, %r82;
	mov.u32 	%r7433, %r7468;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1781;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7433, %r1795;
	setp.lt.s32 	%p39, %r7433, %r1796;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7433, %r1790;
	setp.ge.s32 	%p41, %r7433, %r1789;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1871, %r7433, %r86, %p40;
	setp.lt.s32 	%p42, %r7433, %r1789;
	selp.b32 	%r1872, %r1789, %r1871, %p42;
	sub.s32 	%r1873, %r1872, %r1789;
	add.s32 	%r98, %r90, %r7433;
	rem.s32 	%r1874, %r81, %r82;
	add.s32 	%r1875, %r1874, %r82;
	rem.s32 	%r99, %r1875, %r82;
	rem.s32 	%r1876, %r83, %r82;
	add.s32 	%r1877, %r1876, %r82;
	rem.s32 	%r100, %r1877, %r82;
	setp.lt.s32 	%p43, %r99, %r1794;
	sub.s32 	%r101, %r99, %r1793;
	setp.lt.s32 	%p44, %r99, %r1793;
	selp.b32 	%r1878, %r99, %r88, %p43;
	selp.b32 	%r1879, %r1793, %r1878, %p44;
	sub.s32 	%r102, %r1879, %r1793;
	setp.lt.s32 	%p45, %r100, %r1794;
	sub.s32 	%r103, %r100, %r1793;
	setp.lt.s32 	%p46, %r100, %r1793;
	selp.b32 	%r1880, %r100, %r88, %p45;
	selp.b32 	%r1881, %r1793, %r1880, %p46;
	sub.s32 	%r104, %r1881, %r1793;
	sub.s32 	%r1882, %r7433, %r1789;
	mul.lo.s32 	%r105, %r1882, %r85;
	mul.lo.s32 	%r106, %r1873, %r85;
	add.s32 	%r1883, %r1882, %r84;
	mul.lo.s32 	%r107, %r1883, %r85;
	add.s32 	%r1884, %r1873, %r84;
	mul.lo.s32 	%r108, %r1884, %r85;
	add.s32 	%r1885, %r1883, %r84;
	mul.lo.s32 	%r109, %r1885, %r85;
	add.s32 	%r1886, %r1884, %r84;
	mul.lo.s32 	%r110, %r1886, %r85;
	mov.u32 	%r7434, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7434, %r1797;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7434, %r1798;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7434, %r1791;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7434, %r1792;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7434, %r1791;
	selp.b32 	%r1887, %r7434, %r87, %p52;
	setp.lt.s32 	%p53, %r7434, %r1791;
	selp.b32 	%r1888, %r1791, %r1887, %p53;
	sub.s32 	%r113, %r1888, %r1791;
	mul.lo.s32 	%r114, %r7434, %r1780;
	add.s32 	%r115, %r114, %r7433;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1799;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1800;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1793;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1793;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f470, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1891, %r112, %r105;
	mad.lo.s32 	%r1892, %r1891, %r58, %r101;
	mul.wide.s32 	%rd56, %r1892, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f470, [%rd57];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1889, %r113, %r106;
	mad.lo.s32 	%r1890, %r1889, %r58, %r102;
	mul.wide.s32 	%rd54, %r1890, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f470, [%rd55];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1800;
	setp.ge.s32 	%p68, %r100, %r1799;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f471, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1895, %r112, %r105;
	mad.lo.s32 	%r1896, %r1895, %r58, %r103;
	mul.wide.s32 	%rd60, %r1896, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f471, [%rd61];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1893, %r113, %r106;
	mad.lo.s32 	%r1894, %r1893, %r58, %r104;
	mul.wide.s32 	%rd58, %r1894, 4;
	add.s64 	%rd59, %rd5, %rd58;
	ld.global.f32 	%f471, [%rd59];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f470;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r1897, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1898, %r117, %r46;
	shl.b32 	%r1899, %r1898, 2;
	add.s32 	%r1900, %r89, %r1899;
	mul.wide.s32 	%rd62, %r1900, 4;
	add.s64 	%rd63, %rd6, %rd62;
	st.global.u32 	[%rd63], %r1897;
	mov.f32 	%f472, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1903, %r112, %r107;
	mad.lo.s32 	%r1904, %r1903, %r58, %r101;
	mul.wide.s32 	%rd66, %r1904, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f472, [%rd67];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1901, %r113, %r108;
	mad.lo.s32 	%r1902, %r1901, %r58, %r102;
	mul.wide.s32 	%rd64, %r1902, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f472, [%rd65];

$L__BB0_28:
	mov.f32 	%f473, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1907, %r112, %r107;
	mad.lo.s32 	%r1908, %r1907, %r58, %r103;
	mul.wide.s32 	%rd70, %r1908, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f473, [%rd71];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1905, %r113, %r108;
	mad.lo.s32 	%r1906, %r1905, %r58, %r104;
	mul.wide.s32 	%rd68, %r1906, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f473, [%rd69];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f472;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r1909, {low,high};}

	// end inline asm
	add.s32 	%r1910, %r93, %r116;
	mul.wide.s32 	%rd72, %r1910, 4;
	add.s64 	%rd73, %rd6, %rd72;
	st.global.u32 	[%rd73], %r1909;
	mov.f32 	%f474, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1913, %r112, %r109;
	mad.lo.s32 	%r1914, %r1913, %r58, %r101;
	mul.wide.s32 	%rd76, %r1914, 4;
	add.s64 	%rd77, %rd5, %rd76;
	ld.global.f32 	%f474, [%rd77];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1911, %r113, %r110;
	mad.lo.s32 	%r1912, %r1911, %r58, %r102;
	mul.wide.s32 	%rd74, %r1912, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f474, [%rd75];

$L__BB0_36:
	mov.f32 	%f475, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1917, %r112, %r109;
	mad.lo.s32 	%r1918, %r1917, %r58, %r103;
	mul.wide.s32 	%rd80, %r1918, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f475, [%rd81];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1915, %r113, %r110;
	mad.lo.s32 	%r1916, %r1915, %r58, %r104;
	mul.wide.s32 	%rd78, %r1916, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f475, [%rd79];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f474;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r1919, {low,high};}

	// end inline asm
	rem.s32 	%r1920, %r98, %r1780;
	add.s32 	%r1921, %r1920, %r114;
	shl.b32 	%r118, %r1921, 5;
	add.s32 	%r1922, %r118, %r46;
	shl.b32 	%r1923, %r1922, 2;
	add.s32 	%r1924, %r89, %r1923;
	add.s32 	%r1925, %r1924, 2;
	mul.wide.s32 	%rd82, %r1925, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r1919;
	setp.ge.s32 	%p76, %r1928, %r1799;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1928, %r1800;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1928, %r1793;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1928, %r1794;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1931, %r1799;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1931, %r1800;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r119, %r1928, %r1793;
	setp.lt.s32 	%p86, %r1928, %r1793;
	selp.b32 	%r1932, %r1928, %r88, %p82;
	selp.b32 	%r1933, %r1793, %r1932, %p86;
	sub.s32 	%r120, %r1933, %r1793;
	setp.ge.s32 	%p87, %r1931, %r1793;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1931, %r1794;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r121, %r1931, %r1793;
	setp.lt.s32 	%p90, %r1931, %r1793;
	selp.b32 	%r1934, %r1931, %r88, %p89;
	selp.b32 	%r1935, %r1793, %r1934, %p90;
	sub.s32 	%r122, %r1935, %r1793;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f476, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1938, %r112, %r105;
	mad.lo.s32 	%r1939, %r1938, %r58, %r119;
	mul.wide.s32 	%rd86, %r1939, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f476, [%rd87];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1936, %r113, %r106;
	mad.lo.s32 	%r1937, %r1936, %r58, %r120;
	mul.wide.s32 	%rd84, %r1937, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f476, [%rd85];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f477, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1942, %r112, %r105;
	mad.lo.s32 	%r1943, %r1942, %r58, %r121;
	mul.wide.s32 	%rd90, %r1943, 4;
	add.s64 	%rd91, %rd5, %rd90;
	ld.global.f32 	%f477, [%rd91];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1940, %r113, %r106;
	mad.lo.s32 	%r1941, %r1940, %r58, %r122;
	mul.wide.s32 	%rd88, %r1941, 4;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.f32 	%f477, [%rd89];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f476;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r1944, {low,high};}

	// end inline asm
	add.s32 	%r1945, %r117, %r96;
	shl.b32 	%r1946, %r1945, 2;
	add.s32 	%r1947, %r95, %r1946;
	mul.wide.s32 	%rd92, %r1947, 4;
	add.s64 	%rd93, %rd6, %rd92;
	st.global.u32 	[%rd93], %r1944;
	mov.f32 	%f478, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1950, %r112, %r107;
	mad.lo.s32 	%r1951, %r1950, %r58, %r119;
	mul.wide.s32 	%rd96, %r1951, 4;
	add.s64 	%rd97, %rd5, %rd96;
	ld.global.f32 	%f478, [%rd97];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1948, %r113, %r108;
	mad.lo.s32 	%r1949, %r1948, %r58, %r120;
	mul.wide.s32 	%rd94, %r1949, 4;
	add.s64 	%rd95, %rd5, %rd94;
	ld.global.f32 	%f478, [%rd95];

$L__BB0_52:
	mov.f32 	%f479, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1954, %r112, %r107;
	mad.lo.s32 	%r1955, %r1954, %r58, %r121;
	mul.wide.s32 	%rd100, %r1955, 4;
	add.s64 	%rd101, %rd5, %rd100;
	ld.global.f32 	%f479, [%rd101];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1952, %r113, %r108;
	mad.lo.s32 	%r1953, %r1952, %r58, %r122;
	mul.wide.s32 	%rd98, %r1953, 4;
	add.s64 	%rd99, %rd5, %rd98;
	ld.global.f32 	%f479, [%rd99];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f478;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r1956, {low,high};}

	// end inline asm
	add.s32 	%r1957, %r94, %r116;
	mul.wide.s32 	%rd102, %r1957, 4;
	add.s64 	%rd103, %rd6, %rd102;
	st.global.u32 	[%rd103], %r1956;
	mov.f32 	%f480, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1960, %r112, %r109;
	mad.lo.s32 	%r1961, %r1960, %r58, %r119;
	mul.wide.s32 	%rd106, %r1961, 4;
	add.s64 	%rd107, %rd5, %rd106;
	ld.global.f32 	%f480, [%rd107];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1958, %r113, %r110;
	mad.lo.s32 	%r1959, %r1958, %r58, %r120;
	mul.wide.s32 	%rd104, %r1959, 4;
	add.s64 	%rd105, %rd5, %rd104;
	ld.global.f32 	%f480, [%rd105];

$L__BB0_60:
	mov.f32 	%f481, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1964, %r112, %r109;
	mad.lo.s32 	%r1965, %r1964, %r58, %r121;
	mul.wide.s32 	%rd110, %r1965, 4;
	add.s64 	%rd111, %rd5, %rd110;
	ld.global.f32 	%f481, [%rd111];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1962, %r113, %r110;
	mad.lo.s32 	%r1963, %r1962, %r58, %r122;
	mul.wide.s32 	%rd108, %r1963, 4;
	add.s64 	%rd109, %rd5, %rd108;
	ld.global.f32 	%f481, [%rd109];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f480;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r1966, {low,high};}

	// end inline asm
	add.s32 	%r1967, %r118, %r96;
	shl.b32 	%r1968, %r1967, 2;
	add.s32 	%r1969, %r95, %r1968;
	add.s32 	%r1970, %r1969, 2;
	mul.wide.s32 	%rd112, %r1970, 4;
	add.s64 	%rd113, %rd6, %rd112;
	st.global.u32 	[%rd113], %r1966;
	add.s32 	%r7434, %r7434, %r1812;
	setp.lt.s32 	%p99, %r7434, %r1781;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7433, %r7433, %r1807;
	setp.lt.s32 	%p100, %r7433, %r1780;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd114, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd114;
	ld.param.u64 	%rd115, [%rd1+120];
	cvta.to.global.u64 	%rd8, %rd115;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r125, %r80, 1;
	mov.u64 	%rd116, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7435, %r7468;

$L__BB0_68:
	setp.ge.s32 	%p102, %r125, %r1781;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7436, %r125;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1972, %r7436, 31;
	add.s32 	%r1973, %r7436, %r1972;
	shr.s32 	%r1974, %r1973, 1;
	mad.lo.s32 	%r1975, %r1974, %r1780, %r7435;
	shl.b32 	%r129, %r1975, 5;
	add.s32 	%r130, %r7436, -2;
	mul.lo.s32 	%r131, %r130, %r1780;
	add.s32 	%r1976, %r1781, %r130;
	mul.lo.s32 	%r132, %r1976, %r1780;
	add.s32 	%r1977, %r1976, %r1781;
	mul.lo.s32 	%r133, %r1977, %r1780;
	add.s32 	%r134, %r131, %r1780;
	add.s32 	%r135, %r7436, -1;
	add.s32 	%r1978, %r1781, %r135;
	mul.lo.s32 	%r136, %r1978, %r1780;
	add.s32 	%r1979, %r1978, %r1781;
	mul.lo.s32 	%r137, %r1979, %r1780;
	add.s32 	%r1980, %r1781, %r7436;
	mul.lo.s32 	%r138, %r1980, %r1780;
	add.s32 	%r1981, %r1980, %r1781;
	mul.lo.s32 	%r139, %r1981, %r1780;
	mul.lo.s32 	%r140, %r7436, %r1780;
	add.s32 	%r141, %r140, %r1780;
	add.s32 	%r142, %r7436, 1;
	add.s32 	%r1982, %r1781, %r142;
	mul.lo.s32 	%r143, %r1982, %r1780;
	add.s32 	%r1983, %r1982, %r1781;
	mul.lo.s32 	%r144, %r1983, %r1780;
	add.s32 	%r145, %r141, %r1780;
	add.s32 	%r146, %r7436, 2;
	add.s32 	%r1984, %r1781, %r146;
	mul.lo.s32 	%r147, %r1984, %r1780;
	add.s32 	%r1985, %r1984, %r1781;
	mul.lo.s32 	%r148, %r1985, %r1780;
	mov.u32 	%r7439, 0;
	mov.u64 	%rd582, %rd116;

$L__BB0_72:
	ld.global.nc.u32 	%r1986, [%rd582];
	cvt.rn.f64.s32 	%fd1, %r1986;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r150, %r1986, %r7435;
	setp.lt.s32 	%p104, %r150, %r1780;
	or.b32  	%r1987, %r130, %r150;
	setp.gt.s32 	%p105, %r1987, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r130, %r1781;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1990, %r131, %r150;
	mul.wide.s32 	%rd117, %r1990, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f93, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7438, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7438, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1991, %r7439, %r129;
	mul.wide.s32 	%rd119, %r1991, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7438;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1994, %r132, %r150;
	mul.wide.s32 	%rd121, %r1994, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f98, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7440, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7440, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1995, %r7439, %r129;
	mul.wide.s32 	%rd123, %r1995, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7440;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1998, %r133, %r150;
	mul.wide.s32 	%rd125, %r1998, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f102, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7442, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7442, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1999, %r7439, %r129;
	mul.wide.s32 	%rd127, %r1999, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7442;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_87:
	or.b32  	%r2000, %r135, %r150;
	setp.gt.s32 	%p111, %r2000, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7436, %r1781;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r2003, %r134, %r150;
	mul.wide.s32 	%rd129, %r2003, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f105, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7444, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r2004, %r7439, %r129;
	mul.wide.s32 	%rd131, %r2004, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7444;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r2007, %r136, %r150;
	mul.wide.s32 	%rd133, %r2007, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f108, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7446, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7446, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r2008, %r7439, %r129;
	mul.wide.s32 	%rd135, %r2008, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7446;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r2011, %r137, %r150;
	mul.wide.s32 	%rd137, %r2011, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f111, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7448, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r2012, %r7439, %r129;
	mul.wide.s32 	%rd139, %r2012, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7448;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_102:
	or.b32  	%r2013, %r7436, %r150;
	setp.gt.s32 	%p118, %r2013, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7436, %r1781;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r2016, %r140, %r150;
	mul.wide.s32 	%rd141, %r2016, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f114, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7450, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r2017, %r7439, %r129;
	mul.wide.s32 	%rd143, %r2017, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7450;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r2020, %r138, %r150;
	mul.wide.s32 	%rd145, %r2020, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f118, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7452, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7452, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r2021, %r7439, %r129;
	mul.wide.s32 	%rd147, %r2021, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7452;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r2024, %r139, %r150;
	mul.wide.s32 	%rd149, %r2024, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f121, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r7454, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r2025, %r7439, %r129;
	mul.wide.s32 	%rd151, %r2025, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7454;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_117:
	or.b32  	%r2026, %r142, %r150;
	setp.gt.s32 	%p125, %r2026, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r142, %r1781;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r2029, %r141, %r150;
	mul.wide.s32 	%rd153, %r2029, 4;
	add.s64 	%rd154, %rd7, %rd153;
	ld.global.f32 	%f124, [%rd154];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r7456, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r2030, %r7439, %r129;
	mul.wide.s32 	%rd155, %r2030, 4;
	add.s64 	%rd156, %rd8, %rd155;
	st.global.u32 	[%rd156], %r7456;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r2033, %r143, %r150;
	mul.wide.s32 	%rd157, %r2033, 4;
	add.s64 	%rd158, %rd7, %rd157;
	ld.global.f32 	%f127, [%rd158];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r7458, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7458, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r2034, %r7439, %r129;
	mul.wide.s32 	%rd159, %r2034, 4;
	add.s64 	%rd160, %rd8, %rd159;
	st.global.u32 	[%rd160], %r7458;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r2037, %r144, %r150;
	mul.wide.s32 	%rd161, %r2037, 4;
	add.s64 	%rd162, %rd7, %rd161;
	ld.global.f32 	%f130, [%rd162];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r7460, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r2038, %r7439, %r129;
	mul.wide.s32 	%rd163, %r2038, 4;
	add.s64 	%rd164, %rd8, %rd163;
	st.global.u32 	[%rd164], %r7460;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_132:
	or.b32  	%r2039, %r146, %r150;
	setp.gt.s32 	%p132, %r2039, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r146, %r1781;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2042, %r145, %r150;
	mul.wide.s32 	%rd165, %r2042, 4;
	add.s64 	%rd166, %rd7, %rd165;
	ld.global.f32 	%f133, [%rd166];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7462, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2043, %r7439, %r129;
	mul.wide.s32 	%rd167, %r2043, 4;
	add.s64 	%rd168, %rd8, %rd167;
	st.global.u32 	[%rd168], %r7462;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2046, %r147, %r150;
	mul.wide.s32 	%rd169, %r2046, 4;
	add.s64 	%rd170, %rd7, %rd169;
	ld.global.f32 	%f136, [%rd170];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r7464, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7464, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2047, %r7439, %r129;
	mul.wide.s32 	%rd171, %r2047, 4;
	add.s64 	%rd172, %rd8, %rd171;
	st.global.u32 	[%rd172], %r7464;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2050, %r148, %r150;
	mul.wide.s32 	%rd173, %r2050, 4;
	add.s64 	%rd174, %rd7, %rd173;
	ld.global.f32 	%f139, [%rd174];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r7466, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7466, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2051, %r7439, %r129;
	mul.wide.s32 	%rd175, %r2051, 4;
	add.s64 	%rd176, %rd8, %rd175;
	st.global.u32 	[%rd176], %r7466;
	add.s32 	%r7439, %r7439, 1;

$L__BB0_147:
	add.s64 	%rd582, %rd582, 4;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd178, %rd177, 24;
	setp.ne.s64 	%p139, %rd582, %rd178;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7436, %r7436, %r48;
	setp.lt.s32 	%p140, %r7436, %r1781;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7435, %r7435, %r1807;
	setp.lt.s32 	%p141, %r7435, %r1780;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1784, 1;
	ld.param.u64 	%rd179, [%rd1+160];
	cvta.to.global.u64 	%rd11, %rd179;
	ld.param.u64 	%rd180, [%rd1+128];
	cvta.to.global.u64 	%rd12, %rd180;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r254, %r80, 1;
	shr.u32 	%r2099, %r1785, 31;
	add.s32 	%r2100, %r1785, %r2099;
	bfe.u32 	%r255, %r2100, 1, 1;
	mov.u64 	%rd200, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r254, %r1781;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7474, %r254;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2102, %r7474, 31;
	add.s32 	%r2103, %r7474, %r2102;
	shr.s32 	%r2104, %r2103, 1;
	mad.lo.s32 	%r2105, %r2104, %r1780, %r7468;
	shl.b32 	%r259, %r2105, 5;
	add.s32 	%r260, %r7474, -2;
	mul.lo.s32 	%r261, %r260, %r1780;
	add.s32 	%r2106, %r1781, %r260;
	mul.lo.s32 	%r262, %r2106, %r1780;
	add.s32 	%r263, %r261, %r1780;
	add.s32 	%r264, %r7474, -1;
	add.s32 	%r2107, %r1781, %r264;
	mul.lo.s32 	%r265, %r2107, %r1780;
	add.s32 	%r2108, %r1781, %r7474;
	mul.lo.s32 	%r266, %r2108, %r1780;
	mul.lo.s32 	%r267, %r7474, %r1780;
	add.s32 	%r268, %r267, %r1780;
	add.s32 	%r269, %r7474, 1;
	add.s32 	%r2109, %r1781, %r269;
	mul.lo.s32 	%r270, %r2109, %r1780;
	add.s32 	%r271, %r268, %r1780;
	add.s32 	%r272, %r7474, 2;
	add.s32 	%r2110, %r1781, %r272;
	mul.lo.s32 	%r273, %r2110, %r1780;
	mov.u32 	%r7478, 0;
	mov.u64 	%rd583, 24;
	mov.u64 	%rd584, %rd200;

$L__BB0_174:
	ld.global.nc.u32 	%r2111, [%rd584];
	cvt.rn.f64.s32 	%fd2, %r2111;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r275, %r2111, %r7468;
	setp.lt.s32 	%p154, %r275, %r1780;
	or.b32  	%r2112, %r260, %r275;
	setp.gt.s32 	%p155, %r2112, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r260, %r1781;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r255, 0;
	add.s32 	%r2114, %r261, %r275;
	shl.b32 	%r2115, %r2114, 1;
	mul.wide.s32 	%rd201, %r2115, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f47, [%rd202];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r7476, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r280, %r7478, %r259;
	mul.wide.s32 	%rd203, %r280, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7476;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r255, 0;
	add.s32 	%r2119, %r262, %r275;
	shl.b32 	%r2120, %r2119, 1;
	mul.wide.s32 	%rd205, %r2120, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f48, [%rd206];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2123, %r280, 1;
	mul.wide.s32 	%rd207, %r2123, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7477;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r255, 0;
	add.s32 	%r2125, %r261, %r275;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd209, %r2127, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f51, [%rd210];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r291, %r7478, %r259;
	mul.wide.s32 	%rd211, %r291, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7479;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r255, 0;
	add.s32 	%r2131, %r262, %r275;
	shl.b32 	%r2132, %r2131, 1;
	or.b32  	%r2133, %r2132, 1;
	mul.wide.s32 	%rd213, %r2133, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f52, [%rd214];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7480, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2136, %r291, 1;
	mul.wide.s32 	%rd215, %r2136, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7480;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_198:
	or.b32  	%r2137, %r264, %r275;
	setp.gt.s32 	%p164, %r2137, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7474, %r1781;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r255, 0;
	add.s32 	%r2139, %r263, %r275;
	shl.b32 	%r2140, %r2139, 1;
	mul.wide.s32 	%rd217, %r2140, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f54, [%rd218];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r302, %r7478, %r259;
	mul.wide.s32 	%rd219, %r302, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7482;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r255, 0;
	add.s32 	%r2144, %r265, %r275;
	shl.b32 	%r2145, %r2144, 1;
	mul.wide.s32 	%rd221, %r2145, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f55, [%rd222];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2148, %r302, 1;
	mul.wide.s32 	%rd223, %r2148, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7483;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r255, 0;
	add.s32 	%r2150, %r263, %r275;
	shl.b32 	%r2151, %r2150, 1;
	or.b32  	%r2152, %r2151, 1;
	mul.wide.s32 	%rd225, %r2152, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f57, [%rd226];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r313, %r7478, %r259;
	mul.wide.s32 	%rd227, %r313, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7485;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r255, 0;
	add.s32 	%r2156, %r265, %r275;
	shl.b32 	%r2157, %r2156, 1;
	or.b32  	%r2158, %r2157, 1;
	mul.wide.s32 	%rd229, %r2158, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f58, [%rd230];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2161, %r313, 1;
	mul.wide.s32 	%rd231, %r2161, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7486;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_222:
	or.b32  	%r2162, %r7474, %r275;
	setp.gt.s32 	%p174, %r2162, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7474, %r1781;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r255, 0;
	add.s32 	%r2164, %r267, %r275;
	shl.b32 	%r2165, %r2164, 1;
	mul.wide.s32 	%rd233, %r2165, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f60, [%rd234];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r324, %r7478, %r259;
	mul.wide.s32 	%rd235, %r324, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7488;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r255, 0;
	add.s32 	%r2169, %r266, %r275;
	shl.b32 	%r2170, %r2169, 1;
	mul.wide.s32 	%rd237, %r2170, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f61, [%rd238];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2173, %r324, 1;
	mul.wide.s32 	%rd239, %r2173, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7489;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r255, 0;
	add.s32 	%r2175, %r267, %r275;
	shl.b32 	%r2176, %r2175, 1;
	or.b32  	%r2177, %r2176, 1;
	mul.wide.s32 	%rd241, %r2177, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f62, [%rd242];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r335, %r7478, %r259;
	mul.wide.s32 	%rd243, %r335, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7491;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r255, 0;
	add.s32 	%r2181, %r266, %r275;
	shl.b32 	%r2182, %r2181, 1;
	or.b32  	%r2183, %r2182, 1;
	mul.wide.s32 	%rd245, %r2183, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f63, [%rd246];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2186, %r335, 1;
	mul.wide.s32 	%rd247, %r2186, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7492;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_246:
	or.b32  	%r2187, %r269, %r275;
	setp.gt.s32 	%p184, %r2187, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r269, %r1781;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r255, 0;
	add.s32 	%r2189, %r268, %r275;
	shl.b32 	%r2190, %r2189, 1;
	mul.wide.s32 	%rd249, %r2190, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f64, [%rd250];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r346, %r7478, %r259;
	mul.wide.s32 	%rd251, %r346, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7494;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r255, 0;
	add.s32 	%r2194, %r270, %r275;
	shl.b32 	%r2195, %r2194, 1;
	mul.wide.s32 	%rd253, %r2195, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f65, [%rd254];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2198, %r346, 1;
	mul.wide.s32 	%rd255, %r2198, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7495;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r255, 0;
	add.s32 	%r2200, %r268, %r275;
	shl.b32 	%r2201, %r2200, 1;
	or.b32  	%r2202, %r2201, 1;
	mul.wide.s32 	%rd257, %r2202, 4;
	add.s64 	%rd258, %rd11, %rd257;
	ld.global.f32 	%f66, [%rd258];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r357, %r7478, %r259;
	mul.wide.s32 	%rd259, %r357, 4;
	add.s64 	%rd260, %rd12, %rd259;
	st.global.u32 	[%rd260], %r7497;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r255, 0;
	add.s32 	%r2206, %r270, %r275;
	shl.b32 	%r2207, %r2206, 1;
	or.b32  	%r2208, %r2207, 1;
	mul.wide.s32 	%rd261, %r2208, 4;
	add.s64 	%rd262, %rd11, %rd261;
	ld.global.f32 	%f67, [%rd262];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2211, %r357, 1;
	mul.wide.s32 	%rd263, %r2211, 4;
	add.s64 	%rd264, %rd12, %rd263;
	st.global.u32 	[%rd264], %r7498;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_270:
	or.b32  	%r2212, %r272, %r275;
	setp.gt.s32 	%p194, %r2212, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r272, %r1781;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r255, 0;
	add.s32 	%r2214, %r271, %r275;
	shl.b32 	%r2215, %r2214, 1;
	mul.wide.s32 	%rd265, %r2215, 4;
	add.s64 	%rd266, %rd11, %rd265;
	ld.global.f32 	%f68, [%rd266];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r368, %r7478, %r259;
	mul.wide.s32 	%rd267, %r368, 4;
	add.s64 	%rd268, %rd12, %rd267;
	st.global.u32 	[%rd268], %r7500;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r255, 0;
	add.s32 	%r2219, %r273, %r275;
	shl.b32 	%r2220, %r2219, 1;
	mul.wide.s32 	%rd269, %r2220, 4;
	add.s64 	%rd270, %rd11, %rd269;
	ld.global.f32 	%f69, [%rd270];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2223, %r368, 1;
	mul.wide.s32 	%rd271, %r2223, 4;
	add.s64 	%rd272, %rd12, %rd271;
	st.global.u32 	[%rd272], %r7501;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r255, 0;
	add.s32 	%r2225, %r271, %r275;
	shl.b32 	%r2226, %r2225, 1;
	or.b32  	%r2227, %r2226, 1;
	mul.wide.s32 	%rd273, %r2227, 4;
	add.s64 	%rd274, %rd11, %rd273;
	ld.global.f32 	%f70, [%rd274];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r379, %r7478, %r259;
	mul.wide.s32 	%rd275, %r379, 4;
	add.s64 	%rd276, %rd12, %rd275;
	st.global.u32 	[%rd276], %r7503;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r255, 0;
	add.s32 	%r2231, %r273, %r275;
	shl.b32 	%r2232, %r2231, 1;
	or.b32  	%r2233, %r2232, 1;
	mul.wide.s32 	%rd277, %r2233, 4;
	add.s64 	%rd278, %rd11, %rd277;
	ld.global.f32 	%f71, [%rd278];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r7504, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r7504, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2236, %r379, 1;
	mul.wide.s32 	%rd279, %r2236, 4;
	add.s64 	%rd280, %rd12, %rd279;
	st.global.u32 	[%rd280], %r7504;
	add.s32 	%r7478, %r7478, 2;

$L__BB0_294:
	add.s64 	%rd584, %rd584, 4;
	add.s64 	%rd583, %rd583, -4;
	setp.ne.s64 	%p204, %rd583, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7474, %r7474, %r48;
	setp.lt.s32 	%p205, %r7474, %r1781;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7468, %r7468, %r1807;
	setp.lt.s32 	%p206, %r7468, %r1780;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r228, %r79;
	mov.u32 	%r2052, 31;
	sub.s32 	%r2053, %r2052, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2054, %r46, %r2053, %p144;
	shl.b32 	%r2055, %r2054, 2;
	mov.u32 	%r2056, 2;
	sub.s32 	%r229, %r2055, %r1783;
	shl.b32 	%r2057, %r1782, 2;
	mov.u32 	%r2058, 128;
	sub.s32 	%r230, %r2058, %r2057;
	sub.s32 	%r2059, %r2056, %r1783;
	add.s32 	%r231, %r2059, %r2055;
	add.s32 	%r232, %r1780, -1;
	add.s32 	%r233, %r229, 1;
	add.s32 	%r234, %r231, 1;
	rem.s32 	%r2084, %r233, %r230;
	add.s32 	%r2085, %r2084, %r230;
	rem.s32 	%r245, %r2085, %r230;
	rem.s32 	%r2086, %r234, %r230;
	add.s32 	%r2087, %r2086, %r230;
	rem.s32 	%r246, %r2087, %r230;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r228;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r236, %r7468, 1;
	rem.s32 	%r2060, %r229, %r230;
	add.s32 	%r2061, %r2060, %r230;
	rem.s32 	%r237, %r2061, %r230;
	rem.s32 	%r2062, %r231, %r230;
	add.s32 	%r2063, %r2062, %r230;
	rem.s32 	%r238, %r2063, %r230;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2066, %r236, %r230;
	add.s32 	%r2067, %r2066, %r237;
	mul.wide.s32 	%rd181, %r2067, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f142, [%rd182];
	add.s32 	%r2068, %r2066, %r238;
	mul.wide.s32 	%rd183, %r2068, 4;
	add.s64 	%rd184, %rd11, %rd183;
	ld.global.f32 	%f143, [%rd184];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r7469, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7469, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2069, %r7468, 5;
	add.s32 	%r2070, %r2069, %r46;
	shl.b32 	%r2071, %r2070, 2;
	mul.wide.s32 	%rd185, %r2071, 4;
	add.s64 	%rd13, %rd12, %rd185;
	st.global.u32 	[%rd13], %r7469;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2074, %r236, 1;
	mul.lo.s32 	%r2075, %r2074, %r230;
	add.s32 	%r2076, %r2075, %r237;
	mul.wide.s32 	%rd186, %r2076, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f146, [%rd187];
	add.s32 	%r2077, %r2075, %r238;
	mul.wide.s32 	%rd188, %r2077, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f147, [%rd189];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7470, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7470, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2078, %r232, %r7468;
	rem.s32 	%r2079, %r2078, %r1780;
	shl.b32 	%r2080, %r2079, 5;
	add.s32 	%r2081, %r2080, %r46;
	shl.b32 	%r2082, %r2081, 2;
	or.b32  	%r2083, %r2082, 2;
	mul.wide.s32 	%rd190, %r2083, 4;
	add.s64 	%rd14, %rd12, %rd190;
	st.global.u32 	[%rd14], %r7470;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2090, %r236, %r230;
	add.s32 	%r2091, %r2090, %r245;
	mul.wide.s32 	%rd191, %r2091, 4;
	add.s64 	%rd192, %rd11, %rd191;
	ld.global.f32 	%f150, [%rd192];
	add.s32 	%r2092, %r2090, %r246;
	mul.wide.s32 	%rd193, %r2092, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f151, [%rd194];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7471, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7471, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd13+4], %r7471;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2095, %r236, 1;
	mul.lo.s32 	%r2096, %r2095, %r230;
	add.s32 	%r2097, %r2096, %r245;
	mul.wide.s32 	%rd195, %r2097, 4;
	add.s64 	%rd196, %rd11, %rd195;
	ld.global.f32 	%f154, [%rd196];
	add.s32 	%r2098, %r2096, %r246;
	mul.wide.s32 	%rd197, %r2098, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f155, [%rd198];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd14+4], %r7472;

$L__BB0_167:
	add.s32 	%r7468, %r7468, %r1807;
	setp.lt.s32 	%p150, %r7468, %r1780;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2238, %r1775, -1;
	mad.lo.s32 	%r2239, %r1776, 576, 128;
	mul.lo.s32 	%r2240, %r2239, %r2238;
	add.s32 	%r2241, %r70, -64;
	add.s32 	%r2242, %r2241, %r70;
	add.s32 	%r2243, %r1776, -1;
	mad.lo.s32 	%r2244, %r2242, %r2243, %r2240;
	mul.lo.s32 	%r2245, %r2238, %r1776;
	mul.lo.s32 	%r2246, %r2245, 320;
	mad.lo.s32 	%r2247, %r2241, %r2243, %r2246;
	add.s32 	%r388, %r2247, %r2244;
	setp.lt.s32 	%p207, %r388, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7683, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7508, 0;
	mov.u32 	%r7506, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7506], %r7683;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2250, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7506+4], %r2250;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2251, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7506+8], %r2251;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2252, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7506+12], %r2252;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r7683, {low,high};}

	// end inline asm
	add.s32 	%r7506, %r7506, 16;
	add.s32 	%r7508, %r7508, 4;
	setp.lt.s32 	%p208, %r7508, %r388;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7684, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r2255, {low,high};}

	// end inline asm
	ld.param.u64 	%rd281, [%rd1+176];
	cvta.to.global.u64 	%rd19, %rd281;
	mov.u32 	%r2256, 31;
	sub.s32 	%r2257, %r2256, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2258, %r46, %r2257, %p209;
	shl.b32 	%r2259, %r2258, 2;
	sub.s32 	%r399, %r2259, %r1783;
	shl.b32 	%r2260, %r1782, 2;
	mov.u32 	%r2261, 128;
	sub.s32 	%r400, %r2261, %r2260;
	rem.s32 	%r2262, %r399, %r400;
	add.s32 	%r2263, %r2262, %r400;
	rem.s32 	%r401, %r2263, %r400;
	add.s32 	%r2264, %r399, 2;
	rem.s32 	%r2265, %r2264, %r400;
	add.s32 	%r2266, %r2265, %r400;
	rem.s32 	%r402, %r2266, %r400;
	mul.lo.s32 	%r2267, %r401, 6;
	mul.lo.s32 	%r2268, %r402, 6;
	mul.wide.s32 	%rd282, %r2267, 4;
	add.s64 	%rd20, %rd19, %rd282;
	mul.wide.s32 	%rd283, %r2268, 4;
	add.s64 	%rd21, %rd19, %rd283;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7510, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd20];
	ld.global.f32 	%f299, [%rd20+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd21+8];
	ld.global.f32 	%f301, [%rd21];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd20+4];
	ld.global.f32 	%f307, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r7511, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd20];
	ld.global.f32 	%f305, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7512, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd20+20];
	ld.global.f32 	%f311, [%rd20+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd21+20];
	ld.global.f32 	%f313, [%rd21+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd20+16];
	ld.global.f32 	%f319, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r7513, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd20+12];
	ld.global.f32 	%f317, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2277, %r399, 1;
	rem.s32 	%r2278, %r2277, %r400;
	add.s32 	%r2279, %r2278, %r400;
	rem.s32 	%r415, %r2279, %r400;
	add.s32 	%r2280, %r399, 3;
	rem.s32 	%r2281, %r2280, %r400;
	add.s32 	%r2282, %r2281, %r400;
	rem.s32 	%r416, %r2282, %r400;
	mul.lo.s32 	%r2283, %r415, 6;
	mul.lo.s32 	%r2284, %r416, 6;
	mul.wide.s32 	%rd284, %r2283, 4;
	add.s64 	%rd22, %rd19, %rd284;
	mul.wide.s32 	%rd285, %r2284, 4;
	add.s64 	%rd23, %rd19, %rd285;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7514, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd22];
	ld.global.f32 	%f323, [%rd22+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd23+8];
	ld.global.f32 	%f325, [%rd23];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd22+4];
	ld.global.f32 	%f331, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd22];
	ld.global.f32 	%f329, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7516, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd22+20];
	ld.global.f32 	%f335, [%rd22+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd23+20];
	ld.global.f32 	%f337, [%rd23+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd22+16];
	ld.global.f32 	%f343, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd22+12];
	ld.global.f32 	%f341, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2293, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd286, %r2293;
	// begin inline asm
	mov.u32 %r2294, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd287, %r2294;
	bfi.b64 	%rd24, %rd287, %rd286, 32, 32;
	setp.ne.s64 	%p218, %rd24, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	mov.u32 	%r2295, %nctaid.x;
	mov.u32 	%r2296, %nctaid.y;
	mul.lo.s32 	%r2297, %r2295, %r2296;
	mov.u32 	%r2298, %nctaid.z;
	mul.lo.s32 	%r429, %r2297, %r2298;
	neg.s32 	%r2299, %r42;
	add.s32 	%r2300, %r46, %r41;
	setp.ne.s32 	%p219, %r2300, %r2299;
	mov.u32 	%r2301, %ctaid.x;
	add.s32 	%r430, %r2301, %r43;
	neg.s32 	%r431, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r430, %r431;
	mov.u32 	%r2302, -2147483647;
	sub.s32 	%r2303, %r2302, %r429;
	selp.b32 	%r2304, %r2303, 1, %p220;
	membar.gl;
	add.s64 	%rd288, %rd24, 4;
	atom.add.u32 	%r432, [%rd288], %r2304;

$L__BB0_328:
	ld.volatile.u32 	%r2305, [%rd24+4];
	xor.b32  	%r2306, %r2305, %r432;
	setp.gt.s32 	%p221, %r2306, -1;
	@%p221 bra 	$L__BB0_328;

	membar.gl;

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_958;

	shr.s32 	%r2320, %r1785, 31;
	shr.u32 	%r2321, %r2320, 30;
	add.s32 	%r2322, %r1785, %r2321;
	shr.s32 	%r433, %r2322, 2;
	add.s32 	%r2323, %r46, 25;
	mul.hi.s32 	%r2324, %r2323, 1321528399;
	shr.u32 	%r2325, %r2324, 31;
	shr.s32 	%r2326, %r2324, 3;
	add.s32 	%r2327, %r2326, %r2325;
	mul.lo.s32 	%r2328, %r2327, 26;
	sub.s32 	%r2329, %r2323, %r2328;
	add.s32 	%r2330, %r46, 27;
	mul.hi.s32 	%r2331, %r2330, 1321528399;
	shr.u32 	%r2332, %r2331, 31;
	shr.s32 	%r2333, %r2331, 3;
	add.s32 	%r2334, %r2333, %r2332;
	mul.lo.s32 	%r2335, %r2334, 26;
	sub.s32 	%r2336, %r2330, %r2335;
	shr.u32 	%r2337, %r1785, 31;
	add.s32 	%r2338, %r1785, %r2337;
	and.b32  	%r2339, %r2338, -2;
	sub.s32 	%r434, %r1785, %r2339;
	setp.lt.s32 	%p223, %r46, 26;
	selp.b32 	%r435, %r2329, %r46, %p223;
	setp.lt.s32 	%p224, %r401, %r1794;
	setp.ge.s32 	%p225, %r401, %r1793;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r415, %r1794;
	setp.ge.s32 	%p227, %r415, %r1793;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r402, %r1794;
	setp.ge.s32 	%p229, %r402, %r1793;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r416, %r1794;
	setp.ge.s32 	%p231, %r416, %r1793;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r436, %r2336, %r46, %p223;
	mov.u32 	%r2319, 0;
	// begin inline asm
	{mov.u32 %r2340, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2666, %r2340, 8;
	add.s32 	%r2667, %r2666, -8192;
	or.b32  	%r2344, %r2667, 31;
	mul.wide.s32 	%rd297, %r46, 16;
	mul.wide.s32 	%rd299, %r46, 8;
	mov.u32 	%r7795, %r2255;
	mov.u32 	%r7825, %r2255;
	mov.u32 	%r7796, %r2255;
	mov.u32 	%r7826, %r2255;
	mov.u32 	%r7797, %r2255;
	mov.u32 	%r7523, %r2255;
	mov.u32 	%r7524, %r2255;
	mov.u32 	%r7838, %r2255;
	mov.u32 	%r7827, %r2255;
	mov.u32 	%r7828, %r2255;
	mov.u32 	%r7798, %r2255;
	mov.u32 	%r7799, %r2255;
	mov.u32 	%r7800, %r2255;
	mov.u32 	%r7531, %r2255;
	mov.u32 	%r7532, %r2255;
	mov.u32 	%r7837, %r2255;
	mov.u32 	%r7829, %r2255;
	mov.u32 	%r7830, %r2255;
	mov.u32 	%r7807, %r2255;
	mov.u32 	%r7537, %r2255;
	mov.u32 	%r7538, %r2255;
	mov.u32 	%r7539, %r2255;
	mov.u32 	%r7848, %r2255;
	mov.u32 	%r7834, %r2255;
	mov.u32 	%r7839, %r2255;
	mov.u32 	%r7808, %r2255;
	mov.u32 	%r7544, %r2255;
	mov.u32 	%r7545, %r2255;
	mov.u32 	%r7546, %r2255;
	mov.u32 	%r7842, %r2255;
	mov.u32 	%r7831, %r2255;
	mov.u32 	%r7840, %r2255;
	mov.u32 	%r7809, %r2255;
	mov.u32 	%r7810, %r2255;
	mov.u32 	%r7552, %r2255;
	mov.u32 	%r7843, %r2255;
	mov.u32 	%r7844, %r2255;
	mov.u32 	%r7555, %r2255;
	mov.u32 	%r7811, %r2255;
	mov.u32 	%r7812, %r2255;
	mov.u32 	%r7813, %r2255;
	mov.u32 	%r7559, %r2255;
	mov.u32 	%r7845, %r2255;
	mov.u32 	%r7846, %r2255;
	mov.u32 	%r7814, %r2255;
	mov.u32 	%r7815, %r2255;
	mov.u32 	%r7816, %r2255;
	mov.u32 	%r7801, %r2255;
	mov.u32 	%r7566, %r2255;
	mov.u32 	%r7832, %r2255;
	mov.u32 	%r7833, %r2255;
	mov.u32 	%r7802, %r2255;
	mov.u32 	%r7570, %r2255;
	mov.u32 	%r7835, %r2255;
	mov.u32 	%r7836, %r2255;
	mov.u32 	%r7865, %r2255;
	mov.u32 	%r7574, %r2255;
	mov.u32 	%r7575, %r2255;
	mov.u32 	%r7576, %r2255;
	mov.u32 	%r7721, %r2255;
	mov.u32 	%r7866, %r2255;
	mov.u32 	%r7579, %r2255;
	mov.u32 	%r7580, %r2255;
	mov.u32 	%r7581, %r2255;
	mov.u32 	%r7722, %r2255;
	mov.u32 	%r7867, %r2255;
	mov.u32 	%r7868, %r2255;
	mov.u32 	%r7585, %r2255;
	mov.u32 	%r7586, %r2255;
	mov.u32 	%r7587, %r2255;
	mov.u32 	%r7723, %r2255;
	mov.u32 	%r7589, %r2255;
	mov.u32 	%r7869, %r2255;
	mov.u32 	%r7870, %r2255;
	mov.u32 	%r7592, %r2255;
	mov.u32 	%r7593, %r2255;
	mov.u32 	%r7594, %r2255;
	mov.u32 	%r7725, %r2255;
	mov.u32 	%r7596, %r2255;
	mov.u32 	%r7597, %r2255;
	mov.u32 	%r7598, %r2255;
	mov.u32 	%r7599, %r2255;
	mov.u32 	%r7849, %r2255;
	mov.u32 	%r7601, %r2255;
	mov.u32 	%r7602, %r2255;
	mov.u32 	%r7603, %r2255;
	mov.u32 	%r7604, %r2255;
	mov.u32 	%r7850, %r2255;
	mov.u32 	%r7817, %r2255;
	mov.u32 	%r7818, %r2255;
	mov.u32 	%r7819, %r2255;
	mov.u32 	%r7820, %r2255;
	mov.u32 	%r7610, %r2255;
	mov.u32 	%r7611, %r2255;
	mov.u32 	%r7874, %r2255;
	mov.u32 	%r7613, %r2255;
	mov.u32 	%r7614, %r2255;
	mov.u32 	%r7729, %r2255;
	mov.u32 	%r7616, %r2255;
	mov.u32 	%r7617, %r2255;
	mov.u32 	%r7618, %r2255;
	mov.u32 	%r7619, %r2255;
	mov.u32 	%r7876, %r2255;
	mov.u32 	%r7621, %r2255;
	mov.u32 	%r7622, %r2255;
	mov.u32 	%r7732, %r2255;
	mov.u32 	%r7624, %r2255;
	mov.u32 	%r7625, %r2255;
	mov.u32 	%r7626, %r2255;
	mov.u32 	%r7627, %r2255;
	mov.u32 	%r7877, %r2255;
	mov.u32 	%r7629, %r2255;
	mov.u32 	%r7630, %r2255;
	mov.u32 	%r7631, %r2255;
	mov.u32 	%r7735, %r2255;
	mov.u32 	%r7633, %r2255;
	mov.u32 	%r7634, %r2255;
	mov.u32 	%r7635, %r2255;
	mov.u32 	%r7636, %r2255;
	mov.u32 	%r7878, %r2255;
	mov.u32 	%r7638, %r2255;
	mov.u32 	%r7639, %r2255;
	mov.u32 	%r7640, %r2255;
	mov.u32 	%r7738, %r2255;
	mov.u32 	%r7642, %r2255;
	mov.u32 	%r7643, %r2255;
	mov.u32 	%r7644, %r2255;
	mov.u32 	%r7645, %r2255;
	mov.u32 	%r7646, %r2255;
	mov.u32 	%r7647, %r2255;
	mov.u32 	%r7648, %r2255;
	mov.u32 	%r7649, %r2255;
	mov.u32 	%r7650, %r2255;
	mov.u32 	%r7651, %r2255;
	mov.u32 	%r7652, %r2255;
	mov.u32 	%r7653, %r2255;
	mov.u32 	%r7654, %r2255;
	mov.u32 	%r7655, %r2255;
	mov.u32 	%r7656, %r2255;
	mov.u32 	%r7657, %r2255;
	mov.u32 	%r7658, %r2255;
	mov.u32 	%r7659, %r2255;
	mov.u32 	%r7660, %r2255;
	mov.u32 	%r7661, %r2255;
	mov.u32 	%r7662, %r2255;
	mov.u32 	%r7663, %r2255;
	mov.u32 	%r7664, %r2319;
	mov.u32 	%r7665, %r2319;
	mov.u32 	%r7666, %r2319;
	mov.u32 	%r7667, %r2319;
	mov.u32 	%r7668, %r2319;
	mov.u32 	%r7669, %r2319;
	mov.u32 	%r7670, %r2319;
	mov.u32 	%r7671, %r2319;
	mov.u32 	%r7672, %r2319;
	mov.u32 	%r7673, %r2319;
	mov.u32 	%r7674, %r2319;
	mov.u32 	%r7675, %r2319;
	mov.u32 	%r7803, %r2255;
	mov.u32 	%r7804, %r2255;
	mov.u32 	%r7805, %r2255;
	mov.u32 	%r7806, %r2255;
	mov.u32 	%r7821, %r2255;
	mov.u32 	%r7822, %r2255;
	mov.u32 	%r7682, %r2319;

$L__BB0_332:
	mov.u32 	%r574, %r7878;
	mov.u32 	%r573, %r7636;
	mov.u32 	%r565, %r7877;
	mov.u32 	%r564, %r7627;
	mov.u32 	%r557, %r7876;
	mov.u32 	%r549, %r7874;
	mov.u32 	%r7636, %r7870;
	mov.u32 	%r519, %r7869;
	mov.u32 	%r7627, %r7868;
	mov.u32 	%r511, %r7867;
	mov.u32 	%r504, %r7866;
	mov.u32 	%r497, %r7865;
	sub.s32 	%r7407, %r1780, %r48;
	mov.u32 	%r2355, 1;
	not.b32 	%r2629, %r43;
	mov.u32 	%r2621, -1;
	add.s32 	%r2630, %r1777, %r2629;
	mul.lo.s32 	%r2631, %r2630, %r1779;
	add.s32 	%r2632, %r7682, %r2631;
	not.b32 	%r2634, %r44;
	add.s32 	%r2635, %r1778, %r2634;
	mul.lo.s32 	%r2636, %r2635, %r1779;
	add.s32 	%r2637, %r7682, %r2636;
	add.s32 	%r2638, %r2631, %r2636;
	add.s32 	%r2639, %r2638, %r1780;
	not.b32 	%r2640, %r41;
	add.s32 	%r2641, %r1775, %r2640;
	mad.lo.s32 	%r2642, %r2630, %r1775, %r2641;
	not.b32 	%r2643, %r42;
	add.s32 	%r2644, %r1776, %r2643;
	mad.lo.s32 	%r2645, %r2635, %r1776, %r2644;
	add.s32 	%r2646, %r2642, %r2645;
	shl.b32 	%r2647, %r2646, 1;
	add.s32 	%r2648, %r2639, %r2647;
	add.s32 	%r2649, %r7682, %r2648;
	add.s32 	%r2650, %r7682, %r2638;
	div.s32 	%r2651, %r2649, %r1780;
	neg.s32 	%r2652, %r1780;
	sub.s32 	%r2655, %r48, %r1780;
	sub.s32 	%r2656, %r2642, %r2645;
	shl.b32 	%r2657, %r2656, 1;
	add.s32 	%r2658, %r2657, %r1781;
	mad.lo.s32 	%r2659, %r2651, %r48, %r2658;
	mad.lo.s32 	%r2660, %r2651, %r2655, %r2650;
	div.s32 	%r2661, %r2659, %r1781;
	mul.lo.s32 	%r2662, %r2661, %r1781;
	sub.s32 	%r2665, %r1808, %r1781;
	mov.u32 	%r2439, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2341,%r7684,%r2319,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2347, %r7511, %r2341, %p28;
	// begin inline asm
	{mul.f16x2 %r7768,%r2347,%r7663;
}
	// end inline asm
	selp.b32 	%r2350, %r7515, %r2341, %p28;
	// begin inline asm
	{mul.f16x2 %r7766,%r2350,%r7658;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2353,%r7684,%r2355,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2359, %r7511, %r2353, %p28;
	// begin inline asm
	{mul.f16x2 %r7767,%r2359,%r7662;
}
	// end inline asm
	selp.b32 	%r2362, %r7515, %r2353, %p28;
	// begin inline asm
	{mul.f16x2 %r7765,%r2362,%r7657;
}
	// end inline asm
	mov.u32 	%r2367, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2365,%r7684,%r2367,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2371, %r7511, %r2365, %p28;
	// begin inline asm
	{mul.f16x2 %r7764,%r2371,%r7653;
}
	// end inline asm
	selp.b32 	%r2374, %r7515, %r2365, %p28;
	// begin inline asm
	{mul.f16x2 %r7763,%r2374,%r7651;
}
	// end inline asm
	mov.u32 	%r2379, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2377,%r7684,%r2379,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2383, %r7511, %r2377, %p28;
	// begin inline asm
	{mul.f16x2 %r7762,%r2383,%r7850;
}
	// end inline asm
	selp.b32 	%r2386, %r7515, %r2377, %p28;
	// begin inline asm
	{mul.f16x2 %r7760,%r2386,%r7849;
}
	// end inline asm
	mov.u32 	%r2391, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2389,%r7684,%r2391,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2395, %r7511, %r2389, %p28;
	// begin inline asm
	{mul.f16x2 %r7761,%r2395,%r7649;
}
	// end inline asm
	selp.b32 	%r2398, %r7515, %r2389, %p28;
	// begin inline asm
	{mul.f16x2 %r7759,%r2398,%r7646;
}
	// end inline asm
	mov.u32 	%r2403, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2401,%r7684,%r2403,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2407, %r7511, %r2401, %p28;
	// begin inline asm
	{mul.f16x2 %r7758,%r2407,%r7643;
}
	// end inline asm
	selp.b32 	%r2410, %r7515, %r2401, %p28;
	// begin inline asm
	{mul.f16x2 %r7755,%r2410,%r7634;
}
	// end inline asm
	mov.u32 	%r2415, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2413,%r7684,%r2415,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2419, %r7511, %r2413, %p28;
	// begin inline asm
	{mul.f16x2 %r7757,%r2419,%r7642;
}
	// end inline asm
	selp.b32 	%r2422, %r7515, %r2413, %p28;
	// begin inline asm
	{mul.f16x2 %r7754,%r2422,%r7633;
}
	// end inline asm
	mov.u32 	%r2427, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2425,%r7684,%r2427,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2431, %r7511, %r2425, %p28;
	// begin inline asm
	{mul.f16x2 %r7756,%r2431,%r7738;
}
	// end inline asm
	selp.b32 	%r2434, %r7515, %r2425, %p28;
	// begin inline asm
	{mul.f16x2 %r7753,%r2434,%r7735;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2437,%r7684,%r2439,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2443, %r7511, %r2437, %p28;
	// begin inline asm
	{mul.f16x2 %r7752,%r2443,%r7625;
}
	// end inline asm
	selp.b32 	%r2446, %r7515, %r2437, %p28;
	// begin inline asm
	{mul.f16x2 %r7749,%r2446,%r7617;
}
	// end inline asm
	mov.u32 	%r2451, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2449,%r7684,%r2451,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2455, %r7511, %r2449, %p28;
	// begin inline asm
	{mul.f16x2 %r7751,%r2455,%r7624;
}
	// end inline asm
	selp.b32 	%r2458, %r7515, %r2449, %p28;
	// begin inline asm
	{mul.f16x2 %r7748,%r2458,%r7616;
}
	// end inline asm
	mov.u32 	%r2463, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2461,%r7684,%r2463,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2467, %r7511, %r2461, %p28;
	// begin inline asm
	{mul.f16x2 %r7750,%r2467,%r7732;
}
	// end inline asm
	selp.b32 	%r2470, %r7515, %r2461, %p28;
	// begin inline asm
	{mul.f16x2 %r7747,%r2470,%r7729;
}
	// end inline asm
	mov.u32 	%r2475, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2473,%r7684,%r2475,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2479, %r7511, %r2473, %p28;
	// begin inline asm
	{mul.f16x2 %r7746,%r2479,%r7836;
}
	// end inline asm
	selp.b32 	%r2482, %r7515, %r2473, %p28;
	// begin inline asm
	{mul.f16x2 %r7745,%r2482,%r7833;
}
	// end inline asm
	mov.u32 	%r2487, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2485,%r7684,%r2487,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2491, %r7511, %r2485, %p28;
	// begin inline asm
	{mul.f16x2 %r7744,%r2491,%r7846;
}
	// end inline asm
	selp.b32 	%r2494, %r7515, %r2485, %p28;
	// begin inline asm
	{mul.f16x2 %r7742,%r2494,%r7844;
}
	// end inline asm
	mov.u32 	%r2499, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2497,%r7684,%r2499,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2503, %r7511, %r2497, %p28;
	// begin inline asm
	{mul.f16x2 %r7743,%r2503,%r7845;
}
	// end inline asm
	selp.b32 	%r2506, %r7515, %r2497, %p28;
	// begin inline asm
	{mul.f16x2 %r7741,%r2506,%r7843;
}
	// end inline asm
	mov.u32 	%r2511, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2509,%r7684,%r2511,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2515, %r7511, %r2509, %p28;
	// begin inline asm
	{mul.f16x2 %r7740,%r2515,%r7840;
}
	// end inline asm
	selp.b32 	%r2518, %r7515, %r2509, %p28;
	// begin inline asm
	{mul.f16x2 %r7737,%r2518,%r7839;
}
	// end inline asm
	mov.u32 	%r2523, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2521,%r7684,%r2523,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2527, %r7511, %r2521, %p28;
	// begin inline asm
	{mul.f16x2 %r7739,%r2527,%r7596;
}
	// end inline asm
	selp.b32 	%r2530, %r7515, %r2521, %p28;
	// begin inline asm
	{mul.f16x2 %r7736,%r2530,%r7589;
}
	// end inline asm
	mov.u32 	%r2535, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2533,%r7684,%r2535,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2539, %r7511, %r2533, %p28;
	// begin inline asm
	{mul.f16x2 %r7738,%r2539,%r7725;
}
	// end inline asm
	selp.b32 	%r2542, %r7515, %r2533, %p28;
	// begin inline asm
	{mul.f16x2 %r7735,%r2542,%r7723;
}
	// end inline asm
	mov.u32 	%r2547, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2545,%r7684,%r2547,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2551, %r7511, %r2545, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2551,%r7830;
}
	// end inline asm
	selp.b32 	%r2554, %r7515, %r2545, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2554,%r7828;
}
	// end inline asm
	mov.u32 	%r2559, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2557,%r7684,%r2559,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2563, %r7511, %r2557, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2563,%r7829;
}
	// end inline asm
	selp.b32 	%r2566, %r7515, %r2557, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2566,%r7827;
}
	// end inline asm
	mov.u32 	%r2571, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2569,%r7684,%r2571,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2575, %r7511, %r2569, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2575,%r7722;
}
	// end inline asm
	selp.b32 	%r2578, %r7515, %r2569, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2578,%r7721;
}
	// end inline asm
	mov.u32 	%r2583, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2581,%r7684,%r2583,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2587, %r7511, %r2581, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2587,%r7825;
}
	// end inline asm
	selp.b32 	%r2590, %r7515, %r2581, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2590,%r7826;
}
	// end inline asm
	mov.u32 	%r2595, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2593,%r7684,%r2595,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2599, %r7511, %r2593, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2599,%r7831;
}
	// end inline asm
	selp.b32 	%r2602, %r7515, %r2593, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2602,%r7834;
}
	// end inline asm
	mov.u32 	%r2607, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2605,%r7684,%r2607,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2611, %r7511, %r2605, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2611,%r7842;
}
	// end inline asm
	selp.b32 	%r2614, %r7515, %r2605, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2614,%r7848;
}
	// end inline asm
	mov.u32 	%r2619, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2617,%r7684,%r2619,%r2344,%r2621;
}
	// end inline asm
	selp.b32 	%r2623, %r7511, %r2617, %p28;
	// begin inline asm
	{mul.f16x2 %r7722,%r2623,%r7837;
}
	// end inline asm
	selp.b32 	%r2626, %r7515, %r2617, %p28;
	// begin inline asm
	{mul.f16x2 %r7721,%r2626,%r7838;
}
	// end inline asm
	rem.s32 	%r674, %r2632, %r69;
	rem.s32 	%r675, %r2637, %r7407;
	mad.lo.s32 	%r676, %r2651, %r2652, %r2649;
	sub.s32 	%r677, %r2659, %r2662;
	mad.lo.s32 	%r678, %r2661, %r2665, %r2660;
	ld.param.u64 	%rd290, [%rd1+168];
	cvta.to.global.u64 	%rd291, %rd290;
	shl.b32 	%r2715, %r678, 1;
	mul.wide.s32 	%rd292, %r2715, 4;
	add.s64 	%rd25, %rd291, %rd292;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2918, %r1803, 1;
	setp.lt.s32 	%p239, %r678, %r2918;
	setp.eq.s32 	%p240, %r433, %r46;
	setp.gt.s32 	%p241, %r678, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7687, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7688, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2718, %r1803, 1;
	setp.lt.s32 	%p234, %r678, %r2718;
	setp.gt.s32 	%p235, %r678, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7685, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7686, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7687, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7688, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2926, 0;
	mov.u32 	%r2937, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2924,%r7683,%r2926,%r2344,%r2937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2929,%r7687,%r2924;
}
	// end inline asm
	mov.u32 	%r2935, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2933,%r7683,%r2935,%r2344,%r2937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2938,%r7688,%r2933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7690,%r2929,%r2938;
}
	// end inline asm
	setp.eq.s32 	%p244, %r434, 0;
	mov.u32 	%r7689, %r7690;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7689, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r7689;
}
	// end inline asm
	setp.eq.s32 	%p245, %r434, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7690, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r7690;
}
	// end inline asm
	mov.u32 	%r2959, 2;
	mov.u32 	%r2970, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2957,%r7683,%r2959,%r2344,%r2970;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2962,%r7687,%r2957;
}
	// end inline asm
	mov.u32 	%r2968, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2966,%r7683,%r2968,%r2344,%r2970;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2971,%r7688,%r2966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7692,%r2962,%r2971;
}
	// end inline asm
	mov.u32 	%r7691, %r7692;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7691, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7767,%r7767,%r7691;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7692, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7765,%r7765,%r7692;
}
	// end inline asm
	mov.u32 	%r2992, 4;
	mov.u32 	%r3003, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2990,%r7683,%r2992,%r2344,%r3003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2995,%r7687,%r2990;
}
	// end inline asm
	mov.u32 	%r3001, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2999,%r7683,%r3001,%r2344,%r3003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3004,%r7688,%r2999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7694,%r2995,%r3004;
}
	// end inline asm
	mov.u32 	%r7693, %r7694;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7693, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r7693;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7694, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7763,%r7763,%r7694;
}
	// end inline asm
	mov.u32 	%r3025, 6;
	mov.u32 	%r3036, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3023,%r7683,%r3025,%r2344,%r3036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r7687,%r3023;
}
	// end inline asm
	mov.u32 	%r3034, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r3032,%r7683,%r3034,%r2344,%r3036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3037,%r7688,%r3032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r3028,%r3037;
}
	// end inline asm
	mov.u32 	%r7695, %r7696;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7695, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r7695;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7696, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r7696;
}
	// end inline asm
	mov.u32 	%r3058, 8;
	mov.u32 	%r3069, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3056,%r7683,%r3058,%r2344,%r3069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3061,%r7687,%r3056;
}
	// end inline asm
	mov.u32 	%r3067, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3065,%r7683,%r3067,%r2344,%r3069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3070,%r7688,%r3065;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r3061,%r3070;
}
	// end inline asm
	mov.u32 	%r7697, %r7698;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7697, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r7697;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7698, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7759,%r7759,%r7698;
}
	// end inline asm
	mov.u32 	%r3091, 10;
	mov.u32 	%r3102, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3089,%r7683,%r3091,%r2344,%r3102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3094,%r7687,%r3089;
}
	// end inline asm
	mov.u32 	%r3100, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3098,%r7683,%r3100,%r2344,%r3102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3103,%r7688,%r3098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r3094,%r3103;
}
	// end inline asm
	mov.u32 	%r7699, %r7700;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7699, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r7699;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7700, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r7700;
}
	// end inline asm
	mov.u32 	%r3124, 12;
	mov.u32 	%r3135, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3122,%r7683,%r3124,%r2344,%r3135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3127,%r7687,%r3122;
}
	// end inline asm
	mov.u32 	%r3133, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3131,%r7683,%r3133,%r2344,%r3135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3136,%r7688,%r3131;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r3127,%r3136;
}
	// end inline asm
	mov.u32 	%r7701, %r7702;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7701, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7757,%r7757,%r7701;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7702, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7754,%r7754,%r7702;
}
	// end inline asm
	mov.u32 	%r3157, 14;
	mov.u32 	%r3168, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3155,%r7683,%r3157,%r2344,%r3168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3160,%r7687,%r3155;
}
	// end inline asm
	mov.u32 	%r3166, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3164,%r7683,%r3166,%r2344,%r3168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3169,%r7688,%r3164;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r3160,%r3169;
}
	// end inline asm
	mov.u32 	%r7703, %r7704;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7703, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r7703;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7704, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7749,%r7749,%r7704;
}
	// end inline asm
	mov.u32 	%r3190, 16;
	mov.u32 	%r3201, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3188,%r7683,%r3190,%r2344,%r3201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3193,%r7687,%r3188;
}
	// end inline asm
	mov.u32 	%r3199, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3197,%r7683,%r3199,%r2344,%r3201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3202,%r7688,%r3197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r3193,%r3202;
}
	// end inline asm
	mov.u32 	%r7705, %r7706;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7705, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r7705;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7706, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7748,%r7748,%r7706;
}
	// end inline asm
	mov.u32 	%r3223, 18;
	mov.u32 	%r3234, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3221,%r7683,%r3223,%r2344,%r3234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3226,%r7687,%r3221;
}
	// end inline asm
	mov.u32 	%r3232, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3230,%r7683,%r3232,%r2344,%r3234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3235,%r7688,%r3230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7708,%r3226,%r3235;
}
	// end inline asm
	mov.u32 	%r7707, %r7708;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7707, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r7707;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7708, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7745,%r7745,%r7708;
}
	// end inline asm
	mov.u32 	%r3256, 20;
	mov.u32 	%r3267, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3254,%r7683,%r3256,%r2344,%r3267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3259,%r7687,%r3254;
}
	// end inline asm
	mov.u32 	%r3265, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3263,%r7683,%r3265,%r2344,%r3267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3268,%r7688,%r3263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r3259,%r3268;
}
	// end inline asm
	mov.u32 	%r7709, %r7710;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7709, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7744,%r7744,%r7709;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7710, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7742,%r7742,%r7710;
}
	// end inline asm
	mov.u32 	%r3289, 22;
	mov.u32 	%r3300, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3287,%r7683,%r3289,%r2344,%r3300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3292,%r7687,%r3287;
}
	// end inline asm
	mov.u32 	%r3298, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3296,%r7683,%r3298,%r2344,%r3300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3301,%r7688,%r3296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r3292,%r3301;
}
	// end inline asm
	mov.u32 	%r7711, %r7712;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7711, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r7711;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7712, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r7712;
}
	// end inline asm
	mov.u32 	%r3322, 24;
	mov.u32 	%r3333, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3320,%r7683,%r3322,%r2344,%r3333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3325,%r7687,%r3320;
}
	// end inline asm
	mov.u32 	%r3331, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3329,%r7683,%r3331,%r2344,%r3333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3334,%r7688,%r3329;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r3325,%r3334;
}
	// end inline asm
	mov.u32 	%r7713, %r7714;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7713, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r7713;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7714, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r7714;
}
	// end inline asm
	mov.u32 	%r3355, 26;
	mov.u32 	%r3366, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3353,%r7683,%r3355,%r2344,%r3366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3358,%r7687,%r3353;
}
	// end inline asm
	mov.u32 	%r3364, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3362,%r7683,%r3364,%r2344,%r3366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3367,%r7688,%r3362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r3358,%r3367;
}
	// end inline asm
	mov.u32 	%r7715, %r7716;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7715, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r7715;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7716, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7716;
}
	// end inline asm
	mov.u32 	%r3388, 28;
	mov.u32 	%r3399, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3386,%r7683,%r3388,%r2344,%r3399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3391,%r7687,%r3386;
}
	// end inline asm
	mov.u32 	%r3397, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3395,%r7683,%r3397,%r2344,%r3399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3400,%r7688,%r3395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r3391,%r3400;
}
	// end inline asm
	mov.u32 	%r7717, %r7718;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7717, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r7717;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7718, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7718;
}
	// end inline asm
	mov.u32 	%r3430, 31;
	mov.u32 	%r3421, 30;
	mov.u32 	%r3432, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3419,%r7683,%r3421,%r2344,%r3432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3424,%r7687,%r3419;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3428,%r7683,%r3430,%r2344,%r3432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3433,%r7688,%r3428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r3424,%r3433;
}
	// end inline asm
	mov.u32 	%r7719, %r7720;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7719, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7719;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7720, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r7720;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7685, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7686, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r677, %r1785;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2820,%r7685,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r2820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2826,%r7685,%r7665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7756,%r7756,%r2826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2832,%r7685,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2838,%r7685,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r2838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2844,%r7685,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r2844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r7685,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2856,%r7686,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2862,%r7686,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2868,%r7685,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r2868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r7685,%r7664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7753,%r7753,%r2874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2880,%r7685,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r2880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2886,%r7685,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r2886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2892,%r7685,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r2892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2898,%r7685,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2904,%r7686,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r2904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2910,%r7686,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7741,%r7741,%r2910;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2723, %r1785, -2;
	setp.ne.s32 	%p238, %r677, %r2723;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2724,%r7685,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7685,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7686,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7686,%r7665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7750,%r7750,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7686,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r2748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7686,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7686,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7686,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7685,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7745,%r7745,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7685,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7686,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7763,%r7763,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7686,%r7664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7686,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7749,%r7749,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7686,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r2802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7686,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r2808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7686,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r2814;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7865, %r2255;
	mov.u32 	%r7866, %r2255;
	mov.u32 	%r7871, %r2255;
	mov.u32 	%r7872, %r2255;
	mov.u32 	%r7873, %r2255;
	mov.u32 	%r7874, %r2255;
	mov.u32 	%r7875, %r2255;
	mov.u32 	%r7876, %r2255;
	mov.u32 	%r7883, %r2255;
	mov.u32 	%r7884, %r2255;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3451, %r1776, 320;
	add.s32 	%r3452, %r41, -1;
	mul.lo.s32 	%r3453, %r42, 320;
	mad.lo.s32 	%r3454, %r3451, %r3452, %r3453;
	add.s32 	%r3457, %r1853, -64;
	mad.lo.s32 	%r3462, %r3457, %r2243, %r2240;
	add.s32 	%r3463, %r3454, %r3462;
	shl.b32 	%r3464, %r3463, 2;
	mov.u32 	%r3465, _ZN6kernel5shmemE;
	add.s32 	%r3466, %r3465, %r3464;
	shl.b32 	%r3467, %r46, 4;
	add.s32 	%r3468, %r3466, %r3467;
	ld.shared.v4.u32 	{%r7876, %r7874, %r7866, %r7865}, [%r3468];
	shl.b32 	%r3473, %r46, 3;
	add.s32 	%r3474, %r3466, %r3473;
	ld.shared.v2.u32 	{%r7875, %r7873}, [%r3474+512];
	ld.shared.v4.u32 	{%r7884, %r7883, %r7872, %r7871}, [%r3468+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7867, %r2255;
	mov.u32 	%r7868, %r2255;
	mov.u32 	%r7869, %r2255;
	mov.u32 	%r7870, %r2255;
	mov.u32 	%r7877, %r2255;
	mov.u32 	%r7878, %r2255;
	mov.u32 	%r7879, %r2255;
	mov.u32 	%r7880, %r2255;
	mov.u32 	%r7881, %r2255;
	mov.u32 	%r7882, %r2255;
	mov.u32 	%r7885, %r2255;
	mov.u32 	%r7886, %r2255;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3486, %r2641, 384, %r2246;
	add.s32 	%r3489, %r42, -1;
	mad.lo.s32 	%r3490, %r2241, %r3489, %r3486;
	add.s32 	%r3496, %r3490, %r2244;
	shl.b32 	%r3497, %r3496, 2;
	mov.u32 	%r3498, _ZN6kernel5shmemE;
	add.s32 	%r3499, %r3498, %r3497;
	shl.b32 	%r3500, %r46, 4;
	add.s32 	%r3501, %r3499, %r3500;
	ld.shared.v4.u32 	{%r7886, %r7885, %r7881, %r7879}, [%r3501];
	shl.b32 	%r3506, %r46, 3;
	add.s32 	%r3507, %r3499, %r3506;
	ld.shared.v2.u32 	{%r7882, %r7880}, [%r3507+512];
	ld.shared.v4.u32 	{%r7878, %r7877, %r7869, %r7867}, [%r3501+768];
	mov.u32 	%r7868, %r2255;
	mov.u32 	%r7870, %r2255;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7397, %r3507, 512;
	ld.shared.v2.u32 	{%r7870, %r7868}, [%r7397+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2243;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3517, %r1775, %r41;
	mul.lo.s32 	%r3519, %r70, %r42;
	mad.lo.s32 	%r3520, %r3517, 384, %r3519;
	mad.lo.s32 	%r3523, %r2241, %r2243, %r3520;
	mad.lo.s32 	%r3526, %r2239, %r2238, %r3523;
	shl.b32 	%r3527, %r3526, 2;
	mov.u32 	%r3528, _ZN6kernel5shmemE;
	add.s32 	%r3529, %r3528, %r3527;
	shl.b32 	%r3530, %r46, 4;
	add.s32 	%r3531, %r3529, %r3530;
	ld.shared.v4.u32 	{%r7795, %r7798, %r7802, %r7801}, [%r3531];

$L__BB0_416:
	shl.b32 	%r3536, %r42, 8;
	shl.b32 	%r3540, %r1776, 8;
	or.b32  	%r3541, %r3540, 128;
	add.s32 	%r3542, %r41, -1;
	mad.lo.s32 	%r3543, %r3541, %r3542, %r2246;
	add.s32 	%r3544, %r3543, %r3536;
	shl.b32 	%r3545, %r3544, 2;
	mov.u32 	%r3546, _ZN6kernel5shmemE;
	add.s32 	%r3547, %r3546, %r3545;
	setp.ne.s32 	%p281, %r42, %r2243;
	shl.b32 	%r3549, %r46, 4;
	add.s32 	%r936, %r3547, %r3549;
	ld.shared.v4.u32 	{%r7804, %r7806, %r7803, %r7805}, [%r936];
	ld.shared.v4.u32 	{%r7800, %r7797, %r7796, %r7799}, [%r936+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7795, %r7798, %r7802, %r7801}, [%r936+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3563, %r70, %r42;
	sub.s32 	%r3564, %r3563, %r70;
	mad.lo.s32 	%r3567, %r2641, 384, %r3564;
	mad.lo.s32 	%r3570, %r2241, %r2243, %r3567;
	mad.lo.s32 	%r3573, %r2239, %r2238, %r3570;
	shl.b32 	%r3574, %r3573, 2;
	mov.u32 	%r3575, _ZN6kernel5shmemE;
	add.s32 	%r3576, %r3575, %r3574;
	shl.b32 	%r3577, %r46, 4;
	add.s32 	%r961, %r3576, %r3577;
	ld.shared.v4.u32 	{%r7815, %r7814, %r7819, %r7817}, [%r961];
	ld.shared.v4.u32 	{%r7813, %r7810, %r7807, %r7808}, [%r961+512];
	ld.shared.v4.u32 	{%r7812, %r7809, %r7811, %r7818}, [%r961+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7821, %r7822, %r7816, %r7820}, [%r961+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd573, [%rd1+104];
	cvta.to.global.u64 	%rd572, %rd573;
	mad.lo.s32 	%r3595, %r674, %r1778, %r44;
	mul.lo.s32 	%r3596, %r1776, %r3595;
	mul.lo.s32 	%r3597, %r3596, 768;
	mad.lo.s32 	%r3598, %r42, 384, %r3597;
	add.s32 	%r3599, %r3598, -64;
	mul.wide.s32 	%rd295, %r3599, 4;
	add.s64 	%rd296, %rd572, %rd295;
	add.s64 	%rd298, %rd296, %rd297;
	ld.global.v4.u32 	{%r7830, %r7828, %r7837, %r7838}, [%rd298+256];
	ld.global.v4.u32 	{%r7836, %r7833, %r7825, %r7826}, [%rd298+1024];
	add.s64 	%rd27, %rd296, %rd299;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7831, %r7834}, [%rd27];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2243;
	ld.global.v2.u32 	{%r7829, %r7827}, [%rd27+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7835, %r7832}, [%rd27+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd575, [%rd1+104];
	cvta.to.global.u64 	%rd574, %rd575;
	mad.lo.s32 	%r3616, %r675, %r1777, %r43;
	mul.lo.s32 	%r3620, %r3616, %r1854;
	mad.lo.s32 	%r3623, %r2641, 384, %r3620;
	add.s32 	%r3624, %r3623, -64;
	mad.lo.s32 	%r3627, %r1856, %r69, %r3624;
	mul.wide.s32 	%rd300, %r3627, 4;
	add.s64 	%rd301, %rd574, %rd300;
	add.s64 	%rd303, %rd301, %rd297;
	ld.global.v4.u32 	{%r7850, %r7849, %r7845, %r7843}, [%rd303+256];
	ld.global.v4.u32 	{%r7840, %r7839, %r7842, %r7848}, [%rd303+1024];
	add.s64 	%rd305, %rd301, %rd299;
	ld.global.v2.u32 	{%r7846, %r7844}, [%rd305+768];
	ld.global.v2.u32 	{%r7831, %r7834}, [%rd305+1536];

$L__BB0_428:
	add.s32 	%r3640, %r1780, -1;
	setp.ge.s32 	%p288, %r676, %r3640;
	setp.lt.s32 	%p289, %r676, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r677, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3641, %r1781, -2;
	setp.ge.s32 	%p293, %r677, %r3641;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd577, [%rd1+112];
	cvta.to.global.u64 	%rd576, %rd577;
	mad.lo.s32 	%r1056, %r677, %r1780, %r676;
	shl.b32 	%r3642, %r1056, 6;
	mul.wide.s32 	%rd308, %r3642, 4;
	add.s64 	%rd29, %rd576, %rd308;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd310, %rd29, %rd299;
	ld.global.v2.u32 	{%r7870, %r7868}, [%rd310+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3645, %r1780, 5;
	cvt.s64.s32 	%rd311, %r3645;
	cvt.s64.s32 	%rd312, %r46;
	add.s64 	%rd313, %rd311, %rd312;
	shl.b64 	%rd314, %rd313, 3;
	add.s64 	%rd315, %rd29, %rd314;
	ld.global.v2.u32 	{%r7875, %r7873}, [%rd315];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3648, %r1780, 5;
	neg.s32 	%r3649, %r3648;
	cvt.s64.s32 	%rd316, %r3649;
	cvt.s64.s32 	%rd317, %r46;
	add.s64 	%rd318, %rd316, %rd317;
	shl.b64 	%rd319, %rd318, 3;
	add.s64 	%rd320, %rd29, %rd319;
	ld.global.v2.u32 	{%r7882, %r7880}, [%rd320];

$L__BB0_435:
	mad.lo.s32 	%r7408, %r677, %r1780, %r676;
	ld.param.u64 	%rd579, [%rd1+112];
	cvta.to.global.u64 	%rd578, %rd579;
	shl.b32 	%r3652, %r1781, 6;
	shl.b32 	%r3653, %r7408, 7;
	mad.lo.s32 	%r3654, %r3652, %r1780, %r3653;
	mul.wide.s32 	%rd321, %r3654, 4;
	add.s64 	%rd30, %rd578, %rd321;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3655, %r1780, 5;
	cvt.s64.s32 	%rd322, %r3655;
	cvt.s64.s32 	%rd323, %r46;
	add.s64 	%rd324, %rd322, %rd323;
	shl.b64 	%rd325, %rd324, 4;
	add.s64 	%rd326, %rd30, %rd325;
	ld.global.v4.u32 	{%r7876, %r7874, %r7866, %r7865}, [%rd326];
	shl.b32 	%r3660, %r1780, 6;
	add.s32 	%r3661, %r3660, -32;
	cvt.s64.s32 	%rd327, %r3661;
	add.s64 	%rd328, %rd327, %rd323;
	shl.b64 	%rd329, %rd328, 4;
	add.s64 	%rd330, %rd30, %rd329;
	ld.global.v4.u32 	{%r7884, %r7883, %r7872, %r7871}, [%rd330];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3666, %r1780, 5;
	xor.b32  	%r3667, %r3666, -32;
	cvt.s64.s32 	%rd331, %r3667;
	cvt.s64.s32 	%rd332, %r46;
	add.s64 	%rd333, %rd331, %rd332;
	shl.b64 	%rd334, %rd333, 4;
	add.s64 	%rd335, %rd30, %rd334;
	ld.global.v4.u32 	{%r7886, %r7885, %r7881, %r7879}, [%rd335];
	add.s64 	%rd337, %rd30, %rd297;
	ld.global.v4.u32 	{%r7878, %r7877, %r7869, %r7867}, [%rd337];

$L__BB0_439:
	mov.u32 	%r3681, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3677,%r7630,%r435,%r2344,%r3681;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3677;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7630;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3684, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3685,%r7639,%r3684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3688,%r7510,%r3685;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7887,%r7768;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7887,%r7511,%r3685;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3701, 31;
	mov.u32 	%r3724, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3699,%r7887,%r3701,%r2344,%r3724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3704,%r3688,%r3699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r7638,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3710,%r3707,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3713,%r7660,%r3710;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3716,%r7768,%r3713;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3720,%r7631,%r435,%r2344,%r3724;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3720;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7631;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3727, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3728,%r7640,%r3727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3731,%r7510,%r3728;
}
	// end inline asm
	mov.u32 	%r7888, %r7767;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7888,%r7511,%r3728;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3742,%r7888,%r3701,%r2344,%r3724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3747,%r3731,%r3742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3750,%r7638,%r7661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r3747,%r3750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3756,%r7659,%r3753;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3759,%r7767,%r3756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3762,%r7630,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3765,%r7514,%r3762;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7889,%r7766;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7889,%r7515,%r3762;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3778, 31;
	mov.u32 	%r3780, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3776,%r7889,%r3778,%r2344,%r3780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3781,%r3765,%r3776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3784,%r7629,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r3784,%r3781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3790,%r7655,%r3787;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3793,%r7766,%r3790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3796,%r7631,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3799,%r7514,%r3796;
}
	// end inline asm
	mov.u32 	%r7890, %r7765;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7890,%r7515,%r3796;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3808,%r7890,%r3778,%r2344,%r3780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3813,%r3799,%r3808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3816,%r7629,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3819,%r3813,%r3816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3822,%r7654,%r3819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3825,%r7765,%r3822;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3829,%r7614,%r435,%r2344,%r3780;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3829;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7614;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3836, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3837,%r7622,%r3836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3840,%r7510,%r3837;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7891,%r7764;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7891,%r7511,%r3837;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3855, 31;
	mov.u32 	%r3857, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3853,%r7891,%r3855,%r2344,%r3857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3858,%r3840,%r3853;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3861,%r7621,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3864,%r3861,%r3858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3867,%r7652,%r3864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3870,%r7764,%r3867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3873,%r7614,%r7622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3876,%r7514,%r3873;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7892,%r7763;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7892,%r7515,%r3873;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3889, 31;
	mov.u32 	%r3912, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3887,%r7892,%r3889,%r2344,%r3912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3892,%r3876,%r3887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3895,%r7613,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3898,%r3895,%r3892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3901,%r7650,%r3898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3904,%r7763,%r3901;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3908,%r7598,%r435,%r2344,%r3912;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3908;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7598;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3915, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3916,%r7603,%r3915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3919,%r7510,%r3916;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7893,%r7762;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7893,%r7511,%r3916;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3934, 31;
	mov.u32 	%r3957, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3932,%r7893,%r3934,%r2344,%r3957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3937,%r3919,%r3932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3940,%r7602,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3943,%r3940,%r3937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3946,%r7886,%r3943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3949,%r7762,%r3946;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3953,%r7599,%r435,%r2344,%r3957;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3953;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7599;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3960, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3961,%r7604,%r3960;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3964,%r7510,%r3961;
}
	// end inline asm
	mov.u32 	%r7894, %r7761;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7894,%r7511,%r3961;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3975,%r7894,%r3934,%r2344,%r3957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3980,%r3964,%r3975;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3983,%r7602,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3986,%r3980,%r3983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3989,%r7647,%r3986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3992,%r7761,%r3989;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r7598,%r7603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3998,%r7514,%r3995;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7895,%r7760;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7895,%r7515,%r3995;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r4011, 31;
	mov.u32 	%r4013, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4009,%r7895,%r4011,%r2344,%r4013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4014,%r3998,%r4009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4017,%r7597,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4020,%r4017,%r4014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4023,%r7885,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4026,%r7760,%r4023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4029,%r7599,%r7604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4032,%r7514,%r4029;
}
	// end inline asm
	mov.u32 	%r7896, %r7759;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7896,%r7515,%r4029;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4041,%r7896,%r4011,%r2344,%r4013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4046,%r4032,%r4041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4049,%r7597,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4052,%r4046,%r4049;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4055,%r7644,%r4052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4058,%r7759,%r4055;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4062,%r7586,%r435,%r2344,%r4013;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4062;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7586;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4069, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4070,%r7593,%r4069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4073,%r7510,%r4070;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7897,%r7758;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7897,%r7511,%r4070;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4088, 31;
	mov.u32 	%r4111, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4086,%r7897,%r4088,%r2344,%r4111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4091,%r4073,%r4086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4094,%r7592,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4097,%r4094,%r4091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4100,%r574,%r4097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7663,%r7758,%r4100;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4107,%r7587,%r435,%r2344,%r4111;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4107;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7587;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4114, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4115,%r7594,%r4114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4118,%r7510,%r4115;
}
	// end inline asm
	mov.u32 	%r7898, %r7757;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7898,%r7511,%r4115;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4129,%r7898,%r4088,%r2344,%r4111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4134,%r4118,%r4129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4137,%r7592,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4140,%r4134,%r4137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4143,%r573,%r4140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r7757,%r4143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4149,%r7593,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4152,%r7594,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4155,%r4149,%r4152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4158,%r7635,%r4155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4161,%r7756,%r4158;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;

	mov.u32 	%r7756, %r4161;

$L__BB0_472:
	// begin inline asm
	{sub.f16x2 %r4166,%r7586,%r7593;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4169,%r7514,%r4166;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7900,%r7755;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7900,%r7515,%r4166;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4180, 31;
	mov.u32 	%r4182, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4178,%r7900,%r4180,%r2344,%r4182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4183,%r4169,%r4178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4186,%r7585,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4189,%r4186,%r4183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4192,%r565,%r4189;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r7755,%r4192;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4198,%r7587,%r7594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4201,%r7514,%r4198;
}
	// end inline asm
	mov.u32 	%r7901, %r7754;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7901,%r7515,%r4198;
}
	// end inline asm

$L__BB0_477:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4210,%r7901,%r4180,%r2344,%r4182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4215,%r4201,%r4210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4218,%r7585,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4221,%r4215,%r4218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4224,%r564,%r4221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7657,%r7754,%r4224;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4230,%r7586,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4233,%r7587,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4236,%r4230,%r4233;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4239,%r7626,%r4236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4242,%r7753,%r4239;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;

	mov.u32 	%r7753, %r4242;

$L__BB0_479:
	mov.u32 	%r4252, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4248,%r7575,%r435,%r2344,%r4252;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4248;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7575;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4255, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4256,%r7580,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4259,%r7510,%r4256;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r7903,%r7752;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r7903,%r7511,%r4256;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4272, 31;
	mov.u32 	%r4295, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4270,%r7903,%r4272,%r2344,%r4295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4275,%r4259,%r4270;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4278,%r7579,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4281,%r4278,%r4275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4284,%r557,%r4281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7653,%r7752,%r4284;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4291,%r7576,%r435,%r2344,%r4295;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4291;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7576;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4298, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4299,%r7581,%r4298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4302,%r7510,%r4299;
}
	// end inline asm
	mov.u32 	%r7904, %r7751;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r7904,%r7511,%r4299;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4313,%r7904,%r4272,%r2344,%r4295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4318,%r4302,%r4313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4321,%r7579,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4324,%r4318,%r4321;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4327,%r7619,%r4324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4330,%r7751,%r4327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4333,%r7580,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4336,%r7581,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4339,%r4333,%r4336;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4342,%r7618,%r4339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4345,%r7750,%r4342;
}
	// end inline asm
	@%p28 bra 	$L__BB0_486;

	mov.u32 	%r7750, %r4345;

$L__BB0_486:
	// begin inline asm
	{sub.f16x2 %r4350,%r7575,%r7580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4353,%r7514,%r4350;
}
	// end inline asm
	@%p28 bra 	$L__BB0_488;
	bra.uni 	$L__BB0_487;

$L__BB0_488:
	// begin inline asm
	{neg.f16x2 %r7906,%r7749;
}
	// end inline asm
	bra.uni 	$L__BB0_489;

$L__BB0_487:
	// begin inline asm
	{mul.f16x2 %r7906,%r7515,%r4350;
}
	// end inline asm

$L__BB0_489:
	mov.u32 	%r4364, 31;
	mov.u32 	%r4366, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4362,%r7906,%r4364,%r2344,%r4366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4367,%r4353,%r4362;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4370,%r7574,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4373,%r4370,%r4367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4376,%r549,%r4373;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7749,%r4376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4382,%r7576,%r7581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4385,%r7514,%r4382;
}
	// end inline asm
	mov.u32 	%r7907, %r7748;
	@%p28 bra 	$L__BB0_491;

	// begin inline asm
	{mul.f16x2 %r7907,%r7515,%r4382;
}
	// end inline asm

$L__BB0_491:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4394,%r7907,%r4364,%r2344,%r4366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4399,%r4385,%r4394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4402,%r7574,%r7613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4405,%r4399,%r4402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4408,%r7611,%r4405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4411,%r7748,%r4408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4414,%r7575,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4417,%r7576,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4420,%r4414,%r4417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4423,%r7610,%r4420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4426,%r7747,%r4423;
}
	// end inline asm
	@%p28 bra 	$L__BB0_493;

	mov.u32 	%r7747, %r4426;

$L__BB0_493:
	mov.u32 	%r4436, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4432,%r7566,%r435,%r2344,%r4436;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4432;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7566;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4439, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4440,%r7570,%r4439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4443,%r7510,%r4440;
}
	// end inline asm
	@%p28 bra 	$L__BB0_495;
	bra.uni 	$L__BB0_494;

$L__BB0_495:
	// begin inline asm
	{neg.f16x2 %r7909,%r7746;
}
	// end inline asm
	bra.uni 	$L__BB0_496;

$L__BB0_494:
	// begin inline asm
	{mul.f16x2 %r7909,%r7511,%r4440;
}
	// end inline asm

$L__BB0_496:
	mov.u32 	%r4456, 31;
	mov.u32 	%r4458, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4454,%r7909,%r4456,%r2344,%r4458;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4459,%r4443,%r4454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4462,%r7802,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4465,%r4462,%r4459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4468,%r7884,%r4465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4471,%r7746,%r4468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4474,%r7566,%r7570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4477,%r7514,%r4474;
}
	// end inline asm
	@%p28 bra 	$L__BB0_498;
	bra.uni 	$L__BB0_497;

$L__BB0_498:
	// begin inline asm
	{neg.f16x2 %r7910,%r7745;
}
	// end inline asm
	bra.uni 	$L__BB0_499;

$L__BB0_497:
	// begin inline asm
	{mul.f16x2 %r7910,%r7515,%r4474;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4490, 31;
	mov.u32 	%r4513, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4488,%r7910,%r4490,%r2344,%r4513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4493,%r4477,%r4488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r7801,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4499,%r4496,%r4493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4502,%r7883,%r4499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4505,%r7745,%r4502;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4509,%r7552,%r435,%r2344,%r4513;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4509;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7552;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4516, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4517,%r7559,%r4516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4520,%r7510,%r4517;
}
	// end inline asm
	mov.u32 	%r7911, %r7744;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7911,%r7511,%r4517;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4531,%r7911,%r4490,%r2344,%r4513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4536,%r4520,%r4531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4539,%r7812,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4542,%r4536,%r4539;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4545,%r7882,%r4542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7744,%r4545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4551,%r7813,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4554,%r7559,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4557,%r4551,%r4554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4560,%r7881,%r4557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4563,%r7743,%r4560;
}
	// end inline asm
	@%p28 bra 	$L__BB0_503;

	mov.u32 	%r7743, %r4563;

$L__BB0_503:
	// begin inline asm
	{sub.f16x2 %r4568,%r7552,%r7559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4571,%r7514,%r4568;
}
	// end inline asm
	mov.u32 	%r7913, %r7742;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7913,%r7515,%r4568;
}
	// end inline asm

$L__BB0_505:
	mov.u32 	%r4580, 31;
	mov.u32 	%r4582, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4578,%r7913,%r4580,%r2344,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4583,%r4571,%r4578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r7809,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r4583,%r4586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4592,%r7880,%r4589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r7742,%r4592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4598,%r7810,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4601,%r7552,%r7814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4604,%r4598,%r4601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4607,%r7879,%r4604;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4610,%r7741,%r4607;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;

	mov.u32 	%r7741, %r4610;

$L__BB0_507:
	// begin inline asm
	{shfl.sync.idx.b32 %r4616,%r7538,%r435,%r2344,%r4582;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4616;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7538;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4623, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4624,%r7545,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4627,%r7510,%r4624;
}
	// end inline asm
	@%p28 bra 	$L__BB0_509;
	bra.uni 	$L__BB0_508;

$L__BB0_509:
	// begin inline asm
	{neg.f16x2 %r7915,%r7740;
}
	// end inline asm
	bra.uni 	$L__BB0_510;

$L__BB0_508:
	// begin inline asm
	{mul.f16x2 %r7915,%r7511,%r4624;
}
	// end inline asm

$L__BB0_510:
	mov.u32 	%r4640, 31;
	mov.u32 	%r4663, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4638,%r7915,%r4640,%r2344,%r4663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4643,%r4627,%r4638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4646,%r7544,%r7812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4649,%r4646,%r4643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4652,%r7878,%r4649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7740,%r4652;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4659,%r7539,%r435,%r2344,%r4663;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4659;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7539;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4666, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4667,%r7546,%r4666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4670,%r7510,%r4667;
}
	// end inline asm
	mov.u32 	%r7916, %r7739;
	@%p28 bra 	$L__BB0_512;

	// begin inline asm
	{mul.f16x2 %r7916,%r7511,%r4667;
}
	// end inline asm

$L__BB0_512:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4681,%r7916,%r4640,%r2344,%r4663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4686,%r4670,%r4681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4689,%r7544,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4692,%r4686,%r4689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4695,%r7636,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7739,%r4695;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4701,%r7545,%r7593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4704,%r7546,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4707,%r4701,%r4704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4710,%r519,%r4707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4713,%r7738,%r4710;
}
	// end inline asm
	@%p28 bra 	$L__BB0_514;

	mov.u32 	%r7738, %r4713;

$L__BB0_514:
	// begin inline asm
	{sub.f16x2 %r4718,%r7538,%r7545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4721,%r7514,%r4718;
}
	// end inline asm
	@%p28 bra 	$L__BB0_516;
	bra.uni 	$L__BB0_515;

$L__BB0_516:
	// begin inline asm
	{neg.f16x2 %r7918,%r7737;
}
	// end inline asm
	bra.uni 	$L__BB0_517;

$L__BB0_515:
	// begin inline asm
	{mul.f16x2 %r7918,%r7515,%r4718;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4732, 31;
	mov.u32 	%r4734, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4730,%r7918,%r4732,%r2344,%r4734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4735,%r4721,%r4730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4738,%r7537,%r7809;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4741,%r4738,%r4735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4744,%r7877,%r4741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7634,%r7737,%r4744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4750,%r7539,%r7546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4753,%r7514,%r4750;
}
	// end inline asm
	mov.u32 	%r7919, %r7736;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7919,%r7515,%r4750;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4762,%r7919,%r4732,%r2344,%r4734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4767,%r4753,%r4762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4770,%r7537,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4773,%r4767,%r4770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4776,%r7627,%r4773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7736,%r4776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4782,%r7538,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4785,%r7539,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4788,%r4782,%r4785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4791,%r511,%r4788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4794,%r7735,%r4791;
}
	// end inline asm
	@%p28 bra 	$L__BB0_521;

	mov.u32 	%r7735, %r4794;

$L__BB0_521:
	mov.u32 	%r4804, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4800,%r7523,%r435,%r2344,%r4804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4800;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7523;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4807, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4808,%r7531,%r4807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4811,%r7510,%r4808;
}
	// end inline asm
	@%p28 bra 	$L__BB0_523;
	bra.uni 	$L__BB0_522;

$L__BB0_523:
	// begin inline asm
	{neg.f16x2 %r7921,%r7734;
}
	// end inline asm
	bra.uni 	$L__BB0_524;

$L__BB0_522:
	// begin inline asm
	{mul.f16x2 %r7921,%r7511,%r4808;
}
	// end inline asm

$L__BB0_524:
	mov.u32 	%r4824, 31;
	mov.u32 	%r4847, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4822,%r7921,%r4824,%r2344,%r4847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4827,%r4811,%r4822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4830,%r7800,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4833,%r4830,%r4827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4836,%r7876,%r4833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r7734,%r4836;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4843,%r7524,%r435,%r2344,%r4847;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4843;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7524;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4850, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4851,%r7532,%r4850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4854,%r7510,%r4851;
}
	// end inline asm
	mov.u32 	%r7922, %r7733;
	@%p28 bra 	$L__BB0_526;

	// begin inline asm
	{mul.f16x2 %r7922,%r7511,%r4851;
}
	// end inline asm

$L__BB0_526:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4865,%r7922,%r4824,%r2344,%r4847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4870,%r4854,%r4865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4873,%r7800,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r4870,%r4873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4879,%r7875,%r4876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7624,%r7733,%r4879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4885,%r7531,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4888,%r7532,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r4885,%r4888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4894,%r504,%r4891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4897,%r7732,%r4894;
}
	// end inline asm
	@%p28 bra 	$L__BB0_528;

	mov.u32 	%r7732, %r4897;

$L__BB0_528:
	// begin inline asm
	{sub.f16x2 %r4902,%r7523,%r7531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4905,%r7514,%r4902;
}
	// end inline asm
	@%p28 bra 	$L__BB0_530;
	bra.uni 	$L__BB0_529;

$L__BB0_530:
	// begin inline asm
	{neg.f16x2 %r7924,%r7731;
}
	// end inline asm
	bra.uni 	$L__BB0_531;

$L__BB0_529:
	// begin inline asm
	{mul.f16x2 %r7924,%r7515,%r4902;
}
	// end inline asm

$L__BB0_531:
	mov.u32 	%r4916, 31;
	mov.u32 	%r4918, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4914,%r7924,%r4916,%r2344,%r4918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4919,%r4905,%r4914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4922,%r7797,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4925,%r4922,%r4919;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4928,%r7874,%r4925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7617,%r7731,%r4928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4934,%r7524,%r7532;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4937,%r7514,%r4934;
}
	// end inline asm
	mov.u32 	%r7925, %r7730;
	@%p28 bra 	$L__BB0_533;

	// begin inline asm
	{mul.f16x2 %r7925,%r7515,%r4934;
}
	// end inline asm

$L__BB0_533:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4946,%r7925,%r4916,%r2344,%r4918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4951,%r4937,%r4946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4954,%r7797,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4957,%r4951,%r4954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4960,%r7873,%r4957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7616,%r7730,%r4960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4966,%r7523,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4969,%r7524,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4972,%r4966,%r4969;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4975,%r497,%r4972;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4978,%r7729,%r4975;
}
	// end inline asm
	@%p28 bra 	$L__BB0_535;

	mov.u32 	%r7729, %r4978;

$L__BB0_535:
	// begin inline asm
	{sub.f16x2 %r4983,%r7796,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4986,%r7795,%r7532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4989,%r4983,%r4986;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4992,%r7872,%r4989;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4995,%r7728,%r4992;
}
	// end inline asm
	@%p28 bra 	$L__BB0_537;

	mov.u32 	%r7728, %r4995;

$L__BB0_537:
	// begin inline asm
	{sub.f16x2 %r4998,%r7799,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5001,%r7798,%r7524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5004,%r4998,%r5001;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5007,%r7871,%r5004;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5010,%r7727,%r5007;
}
	// end inline asm
	@%p28 bra 	$L__BB0_539;

	mov.u32 	%r7727, %r5010;

$L__BB0_539:
	mov.u32 	%r5018, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5014,%r7601,%r435,%r2344,%r5018;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5014;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7601;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5021, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5022,%r7555,%r5021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5025,%r7510,%r5022;
}
	// end inline asm
	mov.u32 	%r7929, %r7726;
	@%p28 bra 	$L__BB0_541;

	// begin inline asm
	{mul.f16x2 %r7929,%r7511,%r5022;
}
	// end inline asm

$L__BB0_541:
	mov.u32 	%r5036, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5034,%r7929,%r5036,%r2344,%r5018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5039,%r5025,%r5034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5042,%r7816,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5045,%r5039,%r5042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5048,%r7870,%r5045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r7726,%r5048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5054,%r7811,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5057,%r7555,%r7807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5060,%r5054,%r5057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5063,%r7869,%r5060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5066,%r7725,%r5063;
}
	// end inline asm
	@%p28 bra 	$L__BB0_543;

	mov.u32 	%r7725, %r5066;

$L__BB0_543:
	// begin inline asm
	{sub.f16x2 %r5071,%r7601,%r7555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5074,%r7514,%r5071;
}
	// end inline asm
	mov.u32 	%r7931, %r7724;
	@%p28 bra 	$L__BB0_545;

	// begin inline asm
	{mul.f16x2 %r7931,%r7515,%r5071;
}
	// end inline asm

$L__BB0_545:
	mov.u32 	%r5083, 31;
	mov.u32 	%r5085, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5081,%r7931,%r5083,%r2344,%r5085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5086,%r5074,%r5081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5089,%r7820,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5092,%r5086,%r5089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5095,%r7868,%r5092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7589,%r7724,%r5095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5101,%r7818,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5104,%r7601,%r7808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5107,%r5101,%r5104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5110,%r7867,%r5107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5113,%r7723,%r5110;
}
	// end inline asm
	@%p28 bra 	$L__BB0_547;

	mov.u32 	%r7723, %r5113;

$L__BB0_547:
	// begin inline asm
	{sub.f16x2 %r5118,%r7804,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5121,%r7803,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5124,%r5118,%r5121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5127,%r7866,%r5124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5130,%r7722,%r5127;
}
	// end inline asm
	@%p28 bra 	$L__BB0_549;

	mov.u32 	%r7722, %r5130;

$L__BB0_549:
	// begin inline asm
	{sub.f16x2 %r5133,%r7806,%r7523;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5136,%r7805,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5139,%r5133,%r5136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5142,%r7865,%r5139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5145,%r7721,%r5142;
}
	// end inline asm
	@%p28 bra 	$L__BB0_551;

	mov.u32 	%r7721, %r5145;

$L__BB0_551:
	bar.sync 	0;
	ld.param.u64 	%rd338, [%rd1+184];
	cvta.to.global.u64 	%rd32, %rd338;
	add.s32 	%r5148, %r1789, -2;
	setp.lt.s32 	%p350, %r676, %r5148;
	add.s32 	%r5149, %r1790, 3;
	setp.ge.s32 	%p351, %r676, %r5149;
	or.pred  	%p352, %p350, %p351;
	add.s32 	%r5150, %r1791, -2;
	setp.lt.s32 	%p353, %r677, %r5150;
	or.pred  	%p354, %p352, %p353;
	add.s32 	%r5151, %r1792, 2;
	setp.ge.s32 	%p355, %r677, %r5151;
	or.pred  	%p356, %p355, %p354;
	setp.lt.s32 	%p357, %r678, %r1786;
	or.pred  	%p358, %p357, %p356;
	mad.lo.s32 	%r5152, %r1788, %r1787, %r1786;
	setp.ge.s32 	%p359, %r678, %r5152;
	or.pred  	%p360, %p358, %p359;
	@%p360 bra 	$L__BB0_793;

	sub.s32 	%r1323, %r678, %r1786;
	rem.s32 	%r5153, %r1323, %r1787;
	setp.ne.s32 	%p361, %r5153, 0;
	@%p361 bra 	$L__BB0_793;

	div.s32 	%r5154, %r1323, %r1787;
	mov.u32 	%r5155, 8;
	sub.s32 	%r5156, %r5155, %r1789;
	add.s32 	%r5157, %r5156, %r1790;
	mul.lo.s32 	%r5158, %r5154, %r5157;
	mov.u32 	%r5159, 4;
	sub.s32 	%r5160, %r5159, %r1789;
	add.s32 	%r1324, %r5160, %r676;
	sub.s32 	%r5161, %r5159, %r1791;
	add.s32 	%r1325, %r5161, %r677;
	mul.lo.s32 	%r1326, %r5158, 3;
	add.s32 	%r5162, %r1324, %r1326;
	add.s32 	%r5163, %r5162, -2;
	sub.s32 	%r5164, %r5155, %r1791;
	add.s32 	%r5165, %r5164, %r1792;
	mul.lo.s32 	%r1327, %r5163, %r5165;
	add.s32 	%r5166, %r1325, %r1327;
	mul.lo.s32 	%r5167, %r5166, %r58;
	sub.s32 	%r1328, %r5167, %r1793;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p363, %p24;
	@%p363 bra 	$L__BB0_556;

	add.s32 	%r5168, %r1328, %r401;
	mul.wide.s32 	%rd339, %r5168, 4;
	add.s64 	%rd340, %rd32, %rd339;
	mov.u32 	%r5169, 1109917696;
	st.global.u32 	[%rd340], %r5169;

$L__BB0_556:
	not.pred 	%p364, %p26;
	@%p364 bra 	$L__BB0_558;

	add.s32 	%r5170, %r1328, %r402;
	mul.wide.s32 	%rd341, %r5170, 4;
	add.s64 	%rd342, %rd32, %rd341;
	mov.u32 	%r5171, 1109917696;
	st.global.u32 	[%rd342], %r5171;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p366, %p25;
	@%p366 bra 	$L__BB0_561;

	add.s32 	%r5172, %r1328, %r415;
	mul.wide.s32 	%rd343, %r5172, 4;
	add.s64 	%rd344, %rd32, %rd343;
	mov.u32 	%r5173, 1109917696;
	st.global.u32 	[%rd344], %r5173;

$L__BB0_561:
	not.pred 	%p367, %p27;
	@%p367 bra 	$L__BB0_563;

	add.s32 	%r5174, %r1328, %r416;
	mul.wide.s32 	%rd345, %r5174, 4;
	add.s64 	%rd346, %rd32, %rd345;
	mov.u32 	%r5175, 1109917696;
	st.global.u32 	[%rd346], %r5175;

$L__BB0_563:
	mov.u32 	%r5176, 8;
	sub.s32 	%r5177, %r5176, %r1789;
	add.s32 	%r5178, %r5177, %r1790;
	add.s32 	%r1329, %r1326, %r5178;
	add.s32 	%r5179, %r1324, %r1329;
	add.s32 	%r5180, %r5179, -2;
	sub.s32 	%r5181, %r5176, %r1791;
	add.s32 	%r5182, %r5181, %r1792;
	mad.lo.s32 	%r5183, %r5180, %r5182, %r1325;
	mul.lo.s32 	%r5184, %r5183, %r58;
	sub.s32 	%r1330, %r5184, %r1793;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p369, %p24;
	@%p369 bra 	$L__BB0_566;

	add.s32 	%r5185, %r1330, %r401;
	mul.wide.s32 	%rd347, %r5185, 4;
	add.s64 	%rd348, %rd32, %rd347;
	mov.u32 	%r5186, 1109917696;
	st.global.u32 	[%rd348], %r5186;

$L__BB0_566:
	not.pred 	%p370, %p26;
	@%p370 bra 	$L__BB0_568;

	add.s32 	%r5187, %r1330, %r402;
	mul.wide.s32 	%rd349, %r5187, 4;
	add.s64 	%rd350, %rd32, %rd349;
	mov.u32 	%r5188, 1109917696;
	st.global.u32 	[%rd350], %r5188;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p372, %p25;
	@%p372 bra 	$L__BB0_571;

	add.s32 	%r5189, %r1330, %r415;
	mul.wide.s32 	%rd351, %r5189, 4;
	add.s64 	%rd352, %rd32, %rd351;
	mov.u32 	%r5190, 1109917696;
	st.global.u32 	[%rd352], %r5190;

$L__BB0_571:
	not.pred 	%p373, %p27;
	@%p373 bra 	$L__BB0_573;

	add.s32 	%r5191, %r1330, %r416;
	mul.wide.s32 	%rd353, %r5191, 4;
	add.s64 	%rd354, %rd32, %rd353;
	mov.u32 	%r5192, 1109917696;
	st.global.u32 	[%rd354], %r5192;

$L__BB0_573:
	add.s32 	%r1331, %r1325, 1;
	add.s32 	%r5193, %r1331, %r1327;
	mul.lo.s32 	%r5194, %r5193, %r58;
	sub.s32 	%r1332, %r5194, %r1793;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p375, %p24;
	@%p375 bra 	$L__BB0_576;

	add.s32 	%r5195, %r1332, %r401;
	mul.wide.s32 	%rd355, %r5195, 4;
	add.s64 	%rd356, %rd32, %rd355;
	mov.u32 	%r5196, 1109917696;
	st.global.u32 	[%rd356], %r5196;

$L__BB0_576:
	not.pred 	%p376, %p26;
	@%p376 bra 	$L__BB0_578;

	add.s32 	%r5197, %r1332, %r402;
	mul.wide.s32 	%rd357, %r5197, 4;
	add.s64 	%rd358, %rd32, %rd357;
	mov.u32 	%r5198, 1109917696;
	st.global.u32 	[%rd358], %r5198;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p378, %p25;
	@%p378 bra 	$L__BB0_581;

	add.s32 	%r5199, %r1332, %r415;
	mul.wide.s32 	%rd359, %r5199, 4;
	add.s64 	%rd360, %rd32, %rd359;
	mov.u32 	%r5200, 1109917696;
	st.global.u32 	[%rd360], %r5200;

$L__BB0_581:
	not.pred 	%p379, %p27;
	@%p379 bra 	$L__BB0_583;

	add.s32 	%r5201, %r1332, %r416;
	mul.wide.s32 	%rd361, %r5201, 4;
	add.s64 	%rd362, %rd32, %rd361;
	mov.u32 	%r5202, 1109917696;
	st.global.u32 	[%rd362], %r5202;

$L__BB0_583:
	add.s32 	%r1333, %r1324, -1;
	add.s32 	%r5203, %r1333, %r1326;
	mov.u32 	%r5204, 8;
	sub.s32 	%r5205, %r5204, %r1791;
	add.s32 	%r5206, %r5205, %r1792;
	mul.lo.s32 	%r1334, %r5203, %r5206;
	add.s32 	%r1335, %r1325, -1;
	add.s32 	%r5207, %r1335, %r1334;
	mul.lo.s32 	%r5208, %r5207, %r58;
	sub.s32 	%r1336, %r5208, %r1793;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p381, %p24;
	@%p381 bra 	$L__BB0_586;

	add.s32 	%r5209, %r1336, %r401;
	mul.wide.s32 	%rd363, %r5209, 4;
	add.s64 	%rd364, %rd32, %rd363;
	mov.u32 	%r5210, 1109917696;
	st.global.u32 	[%rd364], %r5210;

$L__BB0_586:
	not.pred 	%p382, %p26;
	@%p382 bra 	$L__BB0_588;

	add.s32 	%r5211, %r1336, %r402;
	mul.wide.s32 	%rd365, %r5211, 4;
	add.s64 	%rd366, %rd32, %rd365;
	mov.u32 	%r5212, 1109917696;
	st.global.u32 	[%rd366], %r5212;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p384, %p25;
	@%p384 bra 	$L__BB0_591;

	add.s32 	%r5213, %r1336, %r415;
	mul.wide.s32 	%rd367, %r5213, 4;
	add.s64 	%rd368, %rd32, %rd367;
	mov.u32 	%r5214, 1109917696;
	st.global.u32 	[%rd368], %r5214;

$L__BB0_591:
	not.pred 	%p385, %p27;
	@%p385 bra 	$L__BB0_593;

	add.s32 	%r5215, %r1336, %r416;
	mul.wide.s32 	%rd369, %r5215, 4;
	add.s64 	%rd370, %rd32, %rd369;
	mov.u32 	%r5216, 1109917696;
	st.global.u32 	[%rd370], %r5216;

$L__BB0_593:
	mov.u32 	%r5217, 8;
	sub.s32 	%r5218, %r5217, %r1791;
	add.s32 	%r5219, %r5218, %r1792;
	add.s32 	%r5220, %r1333, %r1329;
	mul.lo.s32 	%r1337, %r5220, %r5219;
	add.s32 	%r5221, %r1335, %r1337;
	mul.lo.s32 	%r5222, %r5221, %r58;
	sub.s32 	%r1338, %r5222, %r1793;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p387, %p24;
	@%p387 bra 	$L__BB0_596;

	add.s32 	%r5223, %r1338, %r401;
	mul.wide.s32 	%rd371, %r5223, 4;
	add.s64 	%rd372, %rd32, %rd371;
	mov.u32 	%r5224, 1109917696;
	st.global.u32 	[%rd372], %r5224;

$L__BB0_596:
	not.pred 	%p388, %p26;
	@%p388 bra 	$L__BB0_598;

	add.s32 	%r5225, %r1338, %r402;
	mul.wide.s32 	%rd373, %r5225, 4;
	add.s64 	%rd374, %rd32, %rd373;
	mov.u32 	%r5226, 1109917696;
	st.global.u32 	[%rd374], %r5226;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p390, %p25;
	@%p390 bra 	$L__BB0_601;

	add.s32 	%r5227, %r1338, %r415;
	mul.wide.s32 	%rd375, %r5227, 4;
	add.s64 	%rd376, %rd32, %rd375;
	mov.u32 	%r5228, 1109917696;
	st.global.u32 	[%rd376], %r5228;

$L__BB0_601:
	not.pred 	%p391, %p27;
	@%p391 bra 	$L__BB0_603;

	add.s32 	%r5229, %r1338, %r416;
	mul.wide.s32 	%rd377, %r5229, 4;
	add.s64 	%rd378, %rd32, %rd377;
	mov.u32 	%r5230, 1109917696;
	st.global.u32 	[%rd378], %r5230;

$L__BB0_603:
	add.s32 	%r5231, %r1325, %r1334;
	mul.lo.s32 	%r5232, %r5231, %r58;
	sub.s32 	%r1339, %r5232, %r1793;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p393, %p24;
	@%p393 bra 	$L__BB0_606;

	add.s32 	%r5233, %r1339, %r401;
	mul.wide.s32 	%rd379, %r5233, 4;
	add.s64 	%rd380, %rd32, %rd379;
	mov.u32 	%r5234, 1109917696;
	st.global.u32 	[%rd380], %r5234;

$L__BB0_606:
	not.pred 	%p394, %p26;
	@%p394 bra 	$L__BB0_608;

	add.s32 	%r5235, %r1339, %r402;
	mul.wide.s32 	%rd381, %r5235, 4;
	add.s64 	%rd382, %rd32, %rd381;
	mov.u32 	%r5236, 1109917696;
	st.global.u32 	[%rd382], %r5236;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p396, %p25;
	@%p396 bra 	$L__BB0_611;

	add.s32 	%r5237, %r1339, %r415;
	mul.wide.s32 	%rd383, %r5237, 4;
	add.s64 	%rd384, %rd32, %rd383;
	mov.u32 	%r5238, 1109917696;
	st.global.u32 	[%rd384], %r5238;

$L__BB0_611:
	not.pred 	%p397, %p27;
	@%p397 bra 	$L__BB0_613;

	add.s32 	%r5239, %r1339, %r416;
	mul.wide.s32 	%rd385, %r5239, 4;
	add.s64 	%rd386, %rd32, %rd385;
	mov.u32 	%r5240, 1109917696;
	st.global.u32 	[%rd386], %r5240;

$L__BB0_613:
	add.s32 	%r5241, %r1325, %r1337;
	mul.lo.s32 	%r5242, %r5241, %r58;
	sub.s32 	%r1340, %r5242, %r1793;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p399, %p24;
	@%p399 bra 	$L__BB0_616;

	add.s32 	%r5243, %r1340, %r401;
	mul.wide.s32 	%rd387, %r5243, 4;
	add.s64 	%rd388, %rd32, %rd387;
	mov.u32 	%r5244, 1109917696;
	st.global.u32 	[%rd388], %r5244;

$L__BB0_616:
	not.pred 	%p400, %p26;
	@%p400 bra 	$L__BB0_618;

	add.s32 	%r5245, %r1340, %r402;
	mul.wide.s32 	%rd389, %r5245, 4;
	add.s64 	%rd390, %rd32, %rd389;
	mov.u32 	%r5246, 1109917696;
	st.global.u32 	[%rd390], %r5246;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p402, %p25;
	@%p402 bra 	$L__BB0_621;

	add.s32 	%r5247, %r1340, %r415;
	mul.wide.s32 	%rd391, %r5247, 4;
	add.s64 	%rd392, %rd32, %rd391;
	mov.u32 	%r5248, 1109917696;
	st.global.u32 	[%rd392], %r5248;

$L__BB0_621:
	not.pred 	%p403, %p27;
	@%p403 bra 	$L__BB0_623;

	add.s32 	%r5249, %r1340, %r416;
	mul.wide.s32 	%rd393, %r5249, 4;
	add.s64 	%rd394, %rd32, %rd393;
	mov.u32 	%r5250, 1109917696;
	st.global.u32 	[%rd394], %r5250;

$L__BB0_623:
	mov.u32 	%r5251, 8;
	sub.s32 	%r5252, %r5251, %r1789;
	add.s32 	%r5253, %r5252, %r1790;
	add.s32 	%r1341, %r1329, %r5253;
	add.s32 	%r5254, %r1333, %r1341;
	sub.s32 	%r5255, %r5251, %r1791;
	add.s32 	%r5256, %r5255, %r1792;
	mul.lo.s32 	%r1342, %r5254, %r5256;
	add.s32 	%r5257, %r1325, %r1342;
	mul.lo.s32 	%r5258, %r5257, %r58;
	sub.s32 	%r1343, %r5258, %r1793;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p405, %p24;
	@%p405 bra 	$L__BB0_626;

	add.s32 	%r5259, %r1343, %r401;
	mul.wide.s32 	%rd395, %r5259, 4;
	add.s64 	%rd396, %rd32, %rd395;
	mov.u32 	%r5260, 1109917696;
	st.global.u32 	[%rd396], %r5260;

$L__BB0_626:
	not.pred 	%p406, %p26;
	@%p406 bra 	$L__BB0_628;

	add.s32 	%r5261, %r1343, %r402;
	mul.wide.s32 	%rd397, %r5261, 4;
	add.s64 	%rd398, %rd32, %rd397;
	mov.u32 	%r5262, 1109917696;
	st.global.u32 	[%rd398], %r5262;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p408, %p25;
	@%p408 bra 	$L__BB0_631;

	add.s32 	%r5263, %r1343, %r415;
	mul.wide.s32 	%rd399, %r5263, 4;
	add.s64 	%rd400, %rd32, %rd399;
	mov.u32 	%r5264, 1109917696;
	st.global.u32 	[%rd400], %r5264;

$L__BB0_631:
	not.pred 	%p409, %p27;
	@%p409 bra 	$L__BB0_633;

	add.s32 	%r5265, %r1343, %r416;
	mul.wide.s32 	%rd401, %r5265, 4;
	add.s64 	%rd402, %rd32, %rd401;
	mov.u32 	%r5266, 1109917696;
	st.global.u32 	[%rd402], %r5266;

$L__BB0_633:
	add.s32 	%r7409, %r1325, 1;
	add.s32 	%r5267, %r7409, %r1334;
	mul.lo.s32 	%r5268, %r5267, %r58;
	sub.s32 	%r1344, %r5268, %r1793;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p411, %p24;
	@%p411 bra 	$L__BB0_636;

	add.s32 	%r5269, %r1344, %r401;
	mul.wide.s32 	%rd403, %r5269, 4;
	add.s64 	%rd404, %rd32, %rd403;
	mov.u32 	%r5270, 1109917696;
	st.global.u32 	[%rd404], %r5270;

$L__BB0_636:
	not.pred 	%p412, %p26;
	@%p412 bra 	$L__BB0_638;

	add.s32 	%r5271, %r1344, %r402;
	mul.wide.s32 	%rd405, %r5271, 4;
	add.s64 	%rd406, %rd32, %rd405;
	mov.u32 	%r5272, 1109917696;
	st.global.u32 	[%rd406], %r5272;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p414, %p25;
	@%p414 bra 	$L__BB0_641;

	add.s32 	%r5273, %r1344, %r415;
	mul.wide.s32 	%rd407, %r5273, 4;
	add.s64 	%rd408, %rd32, %rd407;
	mov.u32 	%r5274, 1109917696;
	st.global.u32 	[%rd408], %r5274;

$L__BB0_641:
	not.pred 	%p415, %p27;
	@%p415 bra 	$L__BB0_643;

	add.s32 	%r5275, %r1344, %r416;
	mul.wide.s32 	%rd409, %r5275, 4;
	add.s64 	%rd410, %rd32, %rd409;
	mov.u32 	%r5276, 1109917696;
	st.global.u32 	[%rd410], %r5276;

$L__BB0_643:
	add.s32 	%r7410, %r1325, 1;
	add.s32 	%r5277, %r7410, %r1337;
	mul.lo.s32 	%r5278, %r5277, %r58;
	sub.s32 	%r1345, %r5278, %r1793;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p417, %p24;
	@%p417 bra 	$L__BB0_646;

	add.s32 	%r5279, %r1345, %r401;
	mul.wide.s32 	%rd411, %r5279, 4;
	add.s64 	%rd412, %rd32, %rd411;
	mov.u32 	%r5280, 1109917696;
	st.global.u32 	[%rd412], %r5280;

$L__BB0_646:
	not.pred 	%p418, %p26;
	@%p418 bra 	$L__BB0_648;

	add.s32 	%r5281, %r1345, %r402;
	mul.wide.s32 	%rd413, %r5281, 4;
	add.s64 	%rd414, %rd32, %rd413;
	mov.u32 	%r5282, 1109917696;
	st.global.u32 	[%rd414], %r5282;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p420, %p25;
	@%p420 bra 	$L__BB0_651;

	add.s32 	%r5283, %r1345, %r415;
	mul.wide.s32 	%rd415, %r5283, 4;
	add.s64 	%rd416, %rd32, %rd415;
	mov.u32 	%r5284, 1109917696;
	st.global.u32 	[%rd416], %r5284;

$L__BB0_651:
	not.pred 	%p421, %p27;
	@%p421 bra 	$L__BB0_653;

	add.s32 	%r5285, %r1345, %r416;
	mul.wide.s32 	%rd417, %r5285, 4;
	add.s64 	%rd418, %rd32, %rd417;
	mov.u32 	%r5286, 1109917696;
	st.global.u32 	[%rd418], %r5286;

$L__BB0_653:
	add.s32 	%r7411, %r1325, 1;
	add.s32 	%r5287, %r7411, %r1342;
	mul.lo.s32 	%r5288, %r5287, %r58;
	sub.s32 	%r1346, %r5288, %r1793;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p423, %p24;
	@%p423 bra 	$L__BB0_656;

	add.s32 	%r5289, %r1346, %r401;
	mul.wide.s32 	%rd419, %r5289, 4;
	add.s64 	%rd420, %rd32, %rd419;
	mov.u32 	%r5290, 1109917696;
	st.global.u32 	[%rd420], %r5290;

$L__BB0_656:
	not.pred 	%p424, %p26;
	@%p424 bra 	$L__BB0_658;

	add.s32 	%r5291, %r1346, %r402;
	mul.wide.s32 	%rd421, %r5291, 4;
	add.s64 	%rd422, %rd32, %rd421;
	mov.u32 	%r5292, 1109917696;
	st.global.u32 	[%rd422], %r5292;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p426, %p25;
	@%p426 bra 	$L__BB0_661;

	add.s32 	%r5293, %r1346, %r415;
	mul.wide.s32 	%rd423, %r5293, 4;
	add.s64 	%rd424, %rd32, %rd423;
	mov.u32 	%r5294, 1109917696;
	st.global.u32 	[%rd424], %r5294;

$L__BB0_661:
	not.pred 	%p427, %p27;
	@%p427 bra 	$L__BB0_663;

	add.s32 	%r5295, %r1346, %r416;
	mul.wide.s32 	%rd425, %r5295, 4;
	add.s64 	%rd426, %rd32, %rd425;
	mov.u32 	%r5296, 1109917696;
	st.global.u32 	[%rd426], %r5296;

$L__BB0_663:
	add.s32 	%r1347, %r1325, 2;
	add.s32 	%r5297, %r1347, %r1334;
	mul.lo.s32 	%r5298, %r5297, %r58;
	sub.s32 	%r1348, %r5298, %r1793;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p429, %p24;
	@%p429 bra 	$L__BB0_666;

	add.s32 	%r5299, %r1348, %r401;
	mul.wide.s32 	%rd427, %r5299, 4;
	add.s64 	%rd428, %rd32, %rd427;
	mov.u32 	%r5300, 1109917696;
	st.global.u32 	[%rd428], %r5300;

$L__BB0_666:
	not.pred 	%p430, %p26;
	@%p430 bra 	$L__BB0_668;

	add.s32 	%r5301, %r1348, %r402;
	mul.wide.s32 	%rd429, %r5301, 4;
	add.s64 	%rd430, %rd32, %rd429;
	mov.u32 	%r5302, 1109917696;
	st.global.u32 	[%rd430], %r5302;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p432, %p25;
	@%p432 bra 	$L__BB0_671;

	add.s32 	%r5303, %r1348, %r415;
	mul.wide.s32 	%rd431, %r5303, 4;
	add.s64 	%rd432, %rd32, %rd431;
	mov.u32 	%r5304, 1109917696;
	st.global.u32 	[%rd432], %r5304;

$L__BB0_671:
	not.pred 	%p433, %p27;
	@%p433 bra 	$L__BB0_673;

	add.s32 	%r5305, %r1348, %r416;
	mul.wide.s32 	%rd433, %r5305, 4;
	add.s64 	%rd434, %rd32, %rd433;
	mov.u32 	%r5306, 1109917696;
	st.global.u32 	[%rd434], %r5306;

$L__BB0_673:
	add.s32 	%r7412, %r1325, -1;
	mov.u32 	%r5307, 8;
	sub.s32 	%r5308, %r5307, %r1791;
	add.s32 	%r5309, %r5308, %r1792;
	mul.lo.s32 	%r1349, %r5179, %r5309;
	add.s32 	%r5311, %r7412, %r1349;
	mul.lo.s32 	%r5312, %r5311, %r58;
	sub.s32 	%r1350, %r5312, %r1793;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p435, %p24;
	@%p435 bra 	$L__BB0_676;

	add.s32 	%r5313, %r1350, %r401;
	mul.wide.s32 	%rd435, %r5313, 4;
	add.s64 	%rd436, %rd32, %rd435;
	mov.u32 	%r5314, 1109917696;
	st.global.u32 	[%rd436], %r5314;

$L__BB0_676:
	not.pred 	%p436, %p26;
	@%p436 bra 	$L__BB0_678;

	add.s32 	%r5315, %r1350, %r402;
	mul.wide.s32 	%rd437, %r5315, 4;
	add.s64 	%rd438, %rd32, %rd437;
	mov.u32 	%r5316, 1109917696;
	st.global.u32 	[%rd438], %r5316;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p438, %p25;
	@%p438 bra 	$L__BB0_681;

	add.s32 	%r5317, %r1350, %r415;
	mul.wide.s32 	%rd439, %r5317, 4;
	add.s64 	%rd440, %rd32, %rd439;
	mov.u32 	%r5318, 1109917696;
	st.global.u32 	[%rd440], %r5318;

$L__BB0_681:
	not.pred 	%p439, %p27;
	@%p439 bra 	$L__BB0_683;

	add.s32 	%r5319, %r1350, %r416;
	mul.wide.s32 	%rd441, %r5319, 4;
	add.s64 	%rd442, %rd32, %rd441;
	mov.u32 	%r5320, 1109917696;
	st.global.u32 	[%rd442], %r5320;

$L__BB0_683:
	mov.u32 	%r7417, 8;
	sub.s32 	%r7416, %r7417, %r1789;
	add.s32 	%r7415, %r7416, %r1790;
	add.s32 	%r7414, %r1329, %r7415;
	add.s32 	%r7413, %r1325, -1;
	mov.u32 	%r5321, 8;
	sub.s32 	%r5322, %r5321, %r1791;
	add.s32 	%r5323, %r5322, %r1792;
	add.s32 	%r5324, %r1324, %r7414;
	mul.lo.s32 	%r1351, %r5324, %r5323;
	add.s32 	%r5325, %r7413, %r1351;
	mul.lo.s32 	%r5326, %r5325, %r58;
	sub.s32 	%r1352, %r5326, %r1793;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p441, %p24;
	@%p441 bra 	$L__BB0_686;

	add.s32 	%r5327, %r1352, %r401;
	mul.wide.s32 	%rd443, %r5327, 4;
	add.s64 	%rd444, %rd32, %rd443;
	mov.u32 	%r5328, 1109917696;
	st.global.u32 	[%rd444], %r5328;

$L__BB0_686:
	not.pred 	%p442, %p26;
	@%p442 bra 	$L__BB0_688;

	add.s32 	%r5329, %r1352, %r402;
	mul.wide.s32 	%rd445, %r5329, 4;
	add.s64 	%rd446, %rd32, %rd445;
	mov.u32 	%r5330, 1109917696;
	st.global.u32 	[%rd446], %r5330;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p444, %p25;
	@%p444 bra 	$L__BB0_691;

	add.s32 	%r5331, %r1352, %r415;
	mul.wide.s32 	%rd447, %r5331, 4;
	add.s64 	%rd448, %rd32, %rd447;
	mov.u32 	%r5332, 1109917696;
	st.global.u32 	[%rd448], %r5332;

$L__BB0_691:
	not.pred 	%p445, %p27;
	@%p445 bra 	$L__BB0_693;

	add.s32 	%r5333, %r1352, %r416;
	mul.wide.s32 	%rd449, %r5333, 4;
	add.s64 	%rd450, %rd32, %rd449;
	mov.u32 	%r5334, 1109917696;
	st.global.u32 	[%rd450], %r5334;

$L__BB0_693:
	mov.u32 	%r5335, 8;
	sub.s32 	%r5336, %r5335, %r1791;
	add.s32 	%r5337, %r5336, %r1792;
	mul.lo.s32 	%r1353, %r5162, %r5337;
	add.s32 	%r5339, %r1325, %r1353;
	mul.lo.s32 	%r5340, %r5339, %r58;
	sub.s32 	%r1354, %r5340, %r1793;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p447, %p24;
	@%p447 bra 	$L__BB0_696;

	add.s32 	%r5341, %r1354, %r401;
	mul.wide.s32 	%rd451, %r5341, 4;
	add.s64 	%rd452, %rd32, %rd451;
	mov.u32 	%r5342, 1109917696;
	st.global.u32 	[%rd452], %r5342;

$L__BB0_696:
	not.pred 	%p448, %p26;
	@%p448 bra 	$L__BB0_698;

	add.s32 	%r5343, %r1354, %r402;
	mul.wide.s32 	%rd453, %r5343, 4;
	add.s64 	%rd454, %rd32, %rd453;
	mov.u32 	%r5344, 1109917696;
	st.global.u32 	[%rd454], %r5344;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p450, %p25;
	@%p450 bra 	$L__BB0_701;

	add.s32 	%r5345, %r1354, %r415;
	mul.wide.s32 	%rd455, %r5345, 4;
	add.s64 	%rd456, %rd32, %rd455;
	mov.u32 	%r5346, 1109917696;
	st.global.u32 	[%rd456], %r5346;

$L__BB0_701:
	not.pred 	%p451, %p27;
	@%p451 bra 	$L__BB0_703;

	add.s32 	%r5347, %r1354, %r416;
	mul.wide.s32 	%rd457, %r5347, 4;
	add.s64 	%rd458, %rd32, %rd457;
	mov.u32 	%r5348, 1109917696;
	st.global.u32 	[%rd458], %r5348;

$L__BB0_703:
	add.s32 	%r5349, %r1325, %r1349;
	mul.lo.s32 	%r5350, %r5349, %r58;
	sub.s32 	%r1355, %r5350, %r1793;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p453, %p24;
	@%p453 bra 	$L__BB0_706;

	add.s32 	%r5351, %r1355, %r401;
	mul.wide.s32 	%rd459, %r5351, 4;
	add.s64 	%rd460, %rd32, %rd459;
	mov.u32 	%r5352, 1109917696;
	st.global.u32 	[%rd460], %r5352;

$L__BB0_706:
	not.pred 	%p454, %p26;
	@%p454 bra 	$L__BB0_708;

	add.s32 	%r5353, %r1355, %r402;
	mul.wide.s32 	%rd461, %r5353, 4;
	add.s64 	%rd462, %rd32, %rd461;
	mov.u32 	%r5354, 1109917696;
	st.global.u32 	[%rd462], %r5354;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p456, %p25;
	@%p456 bra 	$L__BB0_711;

	add.s32 	%r5355, %r1355, %r415;
	mul.wide.s32 	%rd463, %r5355, 4;
	add.s64 	%rd464, %rd32, %rd463;
	mov.u32 	%r5356, 1109917696;
	st.global.u32 	[%rd464], %r5356;

$L__BB0_711:
	not.pred 	%p457, %p27;
	@%p457 bra 	$L__BB0_713;

	add.s32 	%r5357, %r1355, %r416;
	mul.wide.s32 	%rd465, %r5357, 4;
	add.s64 	%rd466, %rd32, %rd465;
	mov.u32 	%r5358, 1109917696;
	st.global.u32 	[%rd466], %r5358;

$L__BB0_713:
	add.s32 	%r5359, %r1325, %r1351;
	mul.lo.s32 	%r5360, %r5359, %r58;
	sub.s32 	%r1356, %r5360, %r1793;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p459, %p24;
	@%p459 bra 	$L__BB0_716;

	add.s32 	%r5361, %r1356, %r401;
	mul.wide.s32 	%rd467, %r5361, 4;
	add.s64 	%rd468, %rd32, %rd467;
	mov.u32 	%r5362, 1109917696;
	st.global.u32 	[%rd468], %r5362;

$L__BB0_716:
	not.pred 	%p460, %p26;
	@%p460 bra 	$L__BB0_718;

	add.s32 	%r5363, %r1356, %r402;
	mul.wide.s32 	%rd469, %r5363, 4;
	add.s64 	%rd470, %rd32, %rd469;
	mov.u32 	%r5364, 1109917696;
	st.global.u32 	[%rd470], %r5364;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p462, %p25;
	@%p462 bra 	$L__BB0_721;

	add.s32 	%r5365, %r1356, %r415;
	mul.wide.s32 	%rd471, %r5365, 4;
	add.s64 	%rd472, %rd32, %rd471;
	mov.u32 	%r5366, 1109917696;
	st.global.u32 	[%rd472], %r5366;

$L__BB0_721:
	not.pred 	%p463, %p27;
	@%p463 bra 	$L__BB0_723;

	add.s32 	%r5367, %r1356, %r416;
	mul.wide.s32 	%rd473, %r5367, 4;
	add.s64 	%rd474, %rd32, %rd473;
	mov.u32 	%r5368, 1109917696;
	st.global.u32 	[%rd474], %r5368;

$L__BB0_723:
	add.s32 	%r7418, %r1325, 1;
	add.s32 	%r5369, %r7418, %r1353;
	mul.lo.s32 	%r5370, %r5369, %r58;
	sub.s32 	%r1357, %r5370, %r1793;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p465, %p24;
	@%p465 bra 	$L__BB0_726;

	add.s32 	%r5371, %r1357, %r401;
	mul.wide.s32 	%rd475, %r5371, 4;
	add.s64 	%rd476, %rd32, %rd475;
	mov.u32 	%r5372, 1109917696;
	st.global.u32 	[%rd476], %r5372;

$L__BB0_726:
	not.pred 	%p466, %p26;
	@%p466 bra 	$L__BB0_728;

	add.s32 	%r5373, %r1357, %r402;
	mul.wide.s32 	%rd477, %r5373, 4;
	add.s64 	%rd478, %rd32, %rd477;
	mov.u32 	%r5374, 1109917696;
	st.global.u32 	[%rd478], %r5374;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p468, %p25;
	@%p468 bra 	$L__BB0_731;

	add.s32 	%r5375, %r1357, %r415;
	mul.wide.s32 	%rd479, %r5375, 4;
	add.s64 	%rd480, %rd32, %rd479;
	mov.u32 	%r5376, 1109917696;
	st.global.u32 	[%rd480], %r5376;

$L__BB0_731:
	not.pred 	%p469, %p27;
	@%p469 bra 	$L__BB0_733;

	add.s32 	%r5377, %r1357, %r416;
	mul.wide.s32 	%rd481, %r5377, 4;
	add.s64 	%rd482, %rd32, %rd481;
	mov.u32 	%r5378, 1109917696;
	st.global.u32 	[%rd482], %r5378;

$L__BB0_733:
	add.s32 	%r7419, %r1325, 1;
	add.s32 	%r5379, %r7419, %r1349;
	mul.lo.s32 	%r5380, %r5379, %r58;
	sub.s32 	%r1358, %r5380, %r1793;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p471, %p24;
	@%p471 bra 	$L__BB0_736;

	add.s32 	%r5381, %r1358, %r401;
	mul.wide.s32 	%rd483, %r5381, 4;
	add.s64 	%rd484, %rd32, %rd483;
	mov.u32 	%r5382, 1109917696;
	st.global.u32 	[%rd484], %r5382;

$L__BB0_736:
	not.pred 	%p472, %p26;
	@%p472 bra 	$L__BB0_738;

	add.s32 	%r5383, %r1358, %r402;
	mul.wide.s32 	%rd485, %r5383, 4;
	add.s64 	%rd486, %rd32, %rd485;
	mov.u32 	%r5384, 1109917696;
	st.global.u32 	[%rd486], %r5384;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p474, %p25;
	@%p474 bra 	$L__BB0_741;

	add.s32 	%r5385, %r1358, %r415;
	mul.wide.s32 	%rd487, %r5385, 4;
	add.s64 	%rd488, %rd32, %rd487;
	mov.u32 	%r5386, 1109917696;
	st.global.u32 	[%rd488], %r5386;

$L__BB0_741:
	not.pred 	%p475, %p27;
	@%p475 bra 	$L__BB0_743;

	add.s32 	%r5387, %r1358, %r416;
	mul.wide.s32 	%rd489, %r5387, 4;
	add.s64 	%rd490, %rd32, %rd489;
	mov.u32 	%r5388, 1109917696;
	st.global.u32 	[%rd490], %r5388;

$L__BB0_743:
	add.s32 	%r7420, %r1325, 1;
	add.s32 	%r5389, %r7420, %r1351;
	mul.lo.s32 	%r5390, %r5389, %r58;
	sub.s32 	%r1359, %r5390, %r1793;
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p477, %p24;
	@%p477 bra 	$L__BB0_746;

	add.s32 	%r5391, %r1359, %r401;
	mul.wide.s32 	%rd491, %r5391, 4;
	add.s64 	%rd492, %rd32, %rd491;
	mov.u32 	%r5392, 1109917696;
	st.global.u32 	[%rd492], %r5392;

$L__BB0_746:
	not.pred 	%p478, %p26;
	@%p478 bra 	$L__BB0_748;

	add.s32 	%r5393, %r1359, %r402;
	mul.wide.s32 	%rd493, %r5393, 4;
	add.s64 	%rd494, %rd32, %rd493;
	mov.u32 	%r5394, 1109917696;
	st.global.u32 	[%rd494], %r5394;

$L__BB0_748:
	@%p28 bra 	$L__BB0_753;

	not.pred 	%p480, %p25;
	@%p480 bra 	$L__BB0_751;

	add.s32 	%r5395, %r1359, %r415;
	mul.wide.s32 	%rd495, %r5395, 4;
	add.s64 	%rd496, %rd32, %rd495;
	mov.u32 	%r5396, 1109917696;
	st.global.u32 	[%rd496], %r5396;

$L__BB0_751:
	not.pred 	%p481, %p27;
	@%p481 bra 	$L__BB0_753;

	add.s32 	%r5397, %r1359, %r416;
	mul.wide.s32 	%rd497, %r5397, 4;
	add.s64 	%rd498, %rd32, %rd497;
	mov.u32 	%r5398, 1109917696;
	st.global.u32 	[%rd498], %r5398;

$L__BB0_753:
	add.s32 	%r5399, %r1347, %r1351;
	mul.lo.s32 	%r5400, %r5399, %r58;
	sub.s32 	%r1360, %r5400, %r1793;
	@%p28 bra 	$L__BB0_758;

	not.pred 	%p483, %p24;
	@%p483 bra 	$L__BB0_756;

	add.s32 	%r5401, %r1360, %r401;
	mul.wide.s32 	%rd499, %r5401, 4;
	add.s64 	%rd500, %rd32, %rd499;
	mov.u32 	%r5402, 1109917696;
	st.global.u32 	[%rd500], %r5402;

$L__BB0_756:
	not.pred 	%p484, %p26;
	@%p484 bra 	$L__BB0_758;

	add.s32 	%r5403, %r1360, %r402;
	mul.wide.s32 	%rd501, %r5403, 4;
	add.s64 	%rd502, %rd32, %rd501;
	mov.u32 	%r5404, 1109917696;
	st.global.u32 	[%rd502], %r5404;

$L__BB0_758:
	@%p28 bra 	$L__BB0_763;

	not.pred 	%p486, %p25;
	@%p486 bra 	$L__BB0_761;

	add.s32 	%r5405, %r1360, %r415;
	mul.wide.s32 	%rd503, %r5405, 4;
	add.s64 	%rd504, %rd32, %rd503;
	mov.u32 	%r5406, 1109917696;
	st.global.u32 	[%rd504], %r5406;

$L__BB0_761:
	not.pred 	%p487, %p27;
	@%p487 bra 	$L__BB0_763;

	add.s32 	%r5407, %r1360, %r416;
	mul.wide.s32 	%rd505, %r5407, 4;
	add.s64 	%rd506, %rd32, %rd505;
	mov.u32 	%r5408, 1109917696;
	st.global.u32 	[%rd506], %r5408;

$L__BB0_763:
	add.s32 	%r1361, %r1324, 1;
	add.s32 	%r5409, %r1361, %r1329;
	mov.u32 	%r5410, 8;
	sub.s32 	%r5411, %r5410, %r1791;
	add.s32 	%r5412, %r5411, %r1792;
	mad.lo.s32 	%r5413, %r5409, %r5412, %r1325;
	mul.lo.s32 	%r5414, %r5413, %r58;
	sub.s32 	%r1362, %r5414, %r1793;
	@%p28 bra 	$L__BB0_768;

	not.pred 	%p489, %p24;
	@%p489 bra 	$L__BB0_766;

	add.s32 	%r5415, %r1362, %r401;
	mul.wide.s32 	%rd507, %r5415, 4;
	add.s64 	%rd508, %rd32, %rd507;
	mov.u32 	%r5416, 1109917696;
	st.global.u32 	[%rd508], %r5416;

$L__BB0_766:
	not.pred 	%p490, %p26;
	@%p490 bra 	$L__BB0_768;

	add.s32 	%r5417, %r1362, %r402;
	mul.wide.s32 	%rd509, %r5417, 4;
	add.s64 	%rd510, %rd32, %rd509;
	mov.u32 	%r5418, 1109917696;
	st.global.u32 	[%rd510], %r5418;

$L__BB0_768:
	@%p28 bra 	$L__BB0_773;

	not.pred 	%p492, %p25;
	@%p492 bra 	$L__BB0_771;

	add.s32 	%r5419, %r1362, %r415;
	mul.wide.s32 	%rd511, %r5419, 4;
	add.s64 	%rd512, %rd32, %rd511;
	mov.u32 	%r5420, 1109917696;
	st.global.u32 	[%rd512], %r5420;

$L__BB0_771:
	not.pred 	%p493, %p27;
	@%p493 bra 	$L__BB0_773;

	add.s32 	%r5421, %r1362, %r416;
	mul.wide.s32 	%rd513, %r5421, 4;
	add.s64 	%rd514, %rd32, %rd513;
	mov.u32 	%r5422, 1109917696;
	st.global.u32 	[%rd514], %r5422;

$L__BB0_773:
	mov.u32 	%r7424, 8;
	sub.s32 	%r7423, %r7424, %r1789;
	add.s32 	%r7422, %r7423, %r1790;
	add.s32 	%r7421, %r1329, %r7422;
	mov.u32 	%r5423, 8;
	sub.s32 	%r5424, %r5423, %r1791;
	add.s32 	%r5425, %r5424, %r1792;
	add.s32 	%r5426, %r1361, %r7421;
	mul.lo.s32 	%r1363, %r5426, %r5425;
	add.s32 	%r5427, %r1325, %r1363;
	mul.lo.s32 	%r5428, %r5427, %r58;
	sub.s32 	%r1364, %r5428, %r1793;
	@%p28 bra 	$L__BB0_778;

	not.pred 	%p495, %p24;
	@%p495 bra 	$L__BB0_776;

	add.s32 	%r5429, %r1364, %r401;
	mul.wide.s32 	%rd515, %r5429, 4;
	add.s64 	%rd516, %rd32, %rd515;
	mov.u32 	%r5430, 1109917696;
	st.global.u32 	[%rd516], %r5430;

$L__BB0_776:
	not.pred 	%p496, %p26;
	@%p496 bra 	$L__BB0_778;

	add.s32 	%r5431, %r1364, %r402;
	mul.wide.s32 	%rd517, %r5431, 4;
	add.s64 	%rd518, %rd32, %rd517;
	mov.u32 	%r5432, 1109917696;
	st.global.u32 	[%rd518], %r5432;

$L__BB0_778:
	@%p28 bra 	$L__BB0_783;

	not.pred 	%p498, %p25;
	@%p498 bra 	$L__BB0_781;

	add.s32 	%r5433, %r1364, %r415;
	mul.wide.s32 	%rd519, %r5433, 4;
	add.s64 	%rd520, %rd32, %rd519;
	mov.u32 	%r5434, 1109917696;
	st.global.u32 	[%rd520], %r5434;

$L__BB0_781:
	not.pred 	%p499, %p27;
	@%p499 bra 	$L__BB0_783;

	add.s32 	%r5435, %r1364, %r416;
	mul.wide.s32 	%rd521, %r5435, 4;
	add.s64 	%rd522, %rd32, %rd521;
	mov.u32 	%r5436, 1109917696;
	st.global.u32 	[%rd522], %r5436;

$L__BB0_783:
	add.s32 	%r7425, %r1325, 1;
	add.s32 	%r5437, %r7425, %r1363;
	mul.lo.s32 	%r5438, %r5437, %r58;
	sub.s32 	%r1365, %r5438, %r1793;
	@%p28 bra 	$L__BB0_788;

	not.pred 	%p501, %p24;
	@%p501 bra 	$L__BB0_786;

	add.s32 	%r5439, %r1365, %r401;
	mul.wide.s32 	%rd523, %r5439, 4;
	add.s64 	%rd524, %rd32, %rd523;
	mov.u32 	%r5440, 1109917696;
	st.global.u32 	[%rd524], %r5440;

$L__BB0_786:
	not.pred 	%p502, %p26;
	@%p502 bra 	$L__BB0_788;

	add.s32 	%r5441, %r1365, %r402;
	mul.wide.s32 	%rd525, %r5441, 4;
	add.s64 	%rd526, %rd32, %rd525;
	mov.u32 	%r5442, 1109917696;
	st.global.u32 	[%rd526], %r5442;

$L__BB0_788:
	@%p28 bra 	$L__BB0_793;

	not.pred 	%p504, %p25;
	@%p504 bra 	$L__BB0_791;

	add.s32 	%r5443, %r1365, %r415;
	mul.wide.s32 	%rd527, %r5443, 4;
	add.s64 	%rd528, %rd32, %rd527;
	mov.u32 	%r5444, 1109917696;
	st.global.u32 	[%rd528], %r5444;

$L__BB0_791:
	not.pred 	%p505, %p27;
	@%p505 bra 	$L__BB0_793;

	add.s32 	%r5445, %r1365, %r416;
	mul.wide.s32 	%rd529, %r5445, 4;
	add.s64 	%rd530, %rd32, %rd529;
	mov.u32 	%r5446, 1109917696;
	st.global.u32 	[%rd530], %r5446;

$L__BB0_793:
	setp.eq.s32 	%p506, %r41, %r2238;
	@%p506 bra 	$L__BB0_795;

	mad.lo.s32 	%r5447, %r1776, %r41, %r42;
	mov.u32 	%r5448, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5449, %r5447, 1280, %r5448;
	add.s32 	%r5450, %r5449, -256;
	shl.b32 	%r5451, %r46, 4;
	add.s32 	%r5452, %r5450, %r5451;
	st.shared.v4.u32 	[%r5452+256], {%r3949, %r4026, %r7743, %r7741};
	st.shared.v4.u32 	[%r5452+1024], {%r3716, %r3793, %r7756, %r7753};
	shl.b32 	%r5453, %r46, 3;
	add.s32 	%r5454, %r5450, %r5453;
	st.shared.v2.u32 	[%r5454+768], {%r3992, %r4058};

$L__BB0_795:
	setp.eq.s32 	%p507, %r42, %r2243;
	@%p507 bra 	$L__BB0_799;

	mad.lo.s32 	%r5458, %r1775, 384, -64;
	mul.lo.s32 	%r5459, %r5458, %r42;
	mad.lo.s32 	%r5461, %r2239, %r2238, %r5459;
	mad.lo.s32 	%r5462, %r2641, 384, %r5461;
	shl.b32 	%r5463, %r5462, 2;
	mov.u32 	%r5464, _ZN6kernel5shmemE;
	add.s32 	%r5465, %r5464, %r5463;
	add.s32 	%r5466, %r5465, -256;
	shl.b32 	%r5467, %r46, 4;
	add.s32 	%r5468, %r5466, %r5467;
	st.shared.v4.u32 	[%r5468+256], {%r3870, %r3904, %r7750, %r7747};
	st.shared.v4.u32 	[%r5468+1024], {%r4471, %r4505, %r7728, %r7727};
	shl.b32 	%r5469, %r46, 3;
	add.s32 	%r1369, %r5466, %r5469;
	@%p506 bra 	$L__BB0_798;

	st.shared.v2.u32 	[%r1369], {%r3759, %r3825};

$L__BB0_798:
	st.shared.v2.u32 	[%r1369+768], {%r4330, %r4411};

$L__BB0_799:
	setp.ne.s32 	%p509, %r41, %r2238;
	ld.param.u64 	%rd531, [%rd1+104];
	cvta.to.global.u64 	%rd33, %rd531;
	@%p509 bra 	$L__BB0_801;

	mad.lo.s32 	%r5471, %r674, %r1778, %r44;
	mul.lo.s32 	%r5472, %r1776, %r5471;
	mul.lo.s32 	%r5473, %r5472, 768;
	mad.lo.s32 	%r5474, %r42, 384, %r5473;
	add.s32 	%r5475, %r5474, -64;
	mul.wide.s32 	%rd532, %r5475, 4;
	add.s64 	%rd533, %rd33, %rd532;
	add.s64 	%rd535, %rd533, %rd297;
	st.global.v4.u32 	[%rd535+256], {%r3949, %r4026, %r7743, %r7741};
	st.global.v4.u32 	[%rd535+1024], {%r3716, %r3793, %r7756, %r7753};
	add.s64 	%rd537, %rd533, %rd299;
	st.global.v2.u32 	[%rd537+768], {%r3992, %r4058};
	st.global.v2.u32 	[%rd537+1536], {%r3759, %r3825};

$L__BB0_801:
	setp.ne.s32 	%p510, %r42, %r2243;
	@%p510 bra 	$L__BB0_806;

	ld.param.u64 	%rd581, [%rd1+104];
	cvta.to.global.u64 	%rd580, %rd581;
	mad.lo.s32 	%r5478, %r675, %r1777, %r43;
	mul.lo.s32 	%r5482, %r5478, %r1854;
	mad.lo.s32 	%r5485, %r2641, 384, %r5482;
	add.s32 	%r5486, %r5485, -64;
	mad.lo.s32 	%r5489, %r1856, %r69, %r5486;
	mul.wide.s32 	%rd538, %r5489, 4;
	add.s64 	%rd539, %rd580, %rd538;
	add.s64 	%rd541, %rd539, %rd297;
	st.global.v4.u32 	[%rd541+256], {%r3870, %r3904, %r7750, %r7747};
	st.global.v4.u32 	[%rd541+1024], {%r4471, %r4505, %r7728, %r7727};
	add.s64 	%rd34, %rd539, %rd299;
	@%p506 bra 	$L__BB0_804;

	st.global.v2.u32 	[%rd34], {%r3759, %r3825};

$L__BB0_804:
	st.global.v2.u32 	[%rd34+768], {%r4330, %r4411};
	@%p284 bra 	$L__BB0_806;

	st.global.v2.u32 	[%rd34+1536], {%r7835, %r7832};

$L__BB0_806:
	setp.ge.s32 	%p513, %r41, %r2238;
	@%p513 bra 	$L__BB0_808;

	mul.lo.s32 	%r5490, %r1776, 320;
	mul.lo.s32 	%r5491, %r42, 320;
	mad.lo.s32 	%r5492, %r5490, %r41, %r5491;
	add.s32 	%r5496, %r1853, -64;
	mad.lo.s32 	%r5500, %r5496, %r2243, %r2240;
	add.s32 	%r5501, %r5492, %r5500;
	shl.b32 	%r5502, %r5501, 2;
	mov.u32 	%r5503, _ZN6kernel5shmemE;
	add.s32 	%r5504, %r5503, %r5502;
	shl.b32 	%r5505, %r46, 4;
	add.s32 	%r5506, %r5504, %r5505;
	st.shared.v4.u32 	[%r5506], {%r7886, %r7885, %r7881, %r7879};
	shl.b32 	%r5507, %r46, 3;
	add.s32 	%r5508, %r5504, %r5507;
	st.shared.v2.u32 	[%r5508+512], {%r7647, %r7644};
	st.shared.v4.u32 	[%r5506+768], {%r7660, %r7655, %r7635, %r7626};

$L__BB0_808:
	setp.ge.s32 	%p514, %r42, %r2243;
	@%p514 bra 	$L__BB0_812;

	mad.lo.s32 	%r5514, %r2641, 384, %r2246;
	mad.lo.s32 	%r5517, %r2241, %r42, %r5514;
	add.s32 	%r5523, %r5517, %r2244;
	shl.b32 	%r5524, %r5523, 2;
	mov.u32 	%r5525, _ZN6kernel5shmemE;
	add.s32 	%r5526, %r5525, %r5524;
	shl.b32 	%r5527, %r46, 3;
	add.s32 	%r5528, %r5526, %r5527;
	@%p513 bra 	$L__BB0_811;

	add.s32 	%r7398, %r5528, -256;
	st.shared.v2.u32 	[%r7398], {%r7659, %r7654};

$L__BB0_811:
	shl.b32 	%r5547, %r46, 4;
	add.s32 	%r5548, %r5526, %r5547;
	st.shared.v4.u32 	[%r5548], {%r7652, %r7650, %r7618, %r7610};
	add.s32 	%r7399, %r5528, -256;
	st.shared.v2.u32 	[%r7399+768], {%r7619, %r7611};
	st.shared.v4.u32 	[%r5548+768], {%r7884, %r7883, %r7872, %r7871};

$L__BB0_812:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_814;

	mul.lo.s32 	%r5549, %r1776, 320;
	add.s32 	%r5550, %r41, -1;
	mul.lo.s32 	%r5551, %r42, 320;
	mad.lo.s32 	%r5552, %r5549, %r5550, %r5551;
	shl.b32 	%r5553, %r5552, 2;
	mov.u32 	%r5554, _ZN6kernel5shmemE;
	add.s32 	%r5555, %r5554, %r5553;
	add.s32 	%r5556, %r5555, -256;
	shl.b32 	%r5557, %r46, 4;
	add.s32 	%r5558, %r5556, %r5557;
	ld.shared.v4.u32 	{%r7830, %r7828, %r7837, %r7838}, [%r5558+256];
	ld.shared.v4.u32 	{%r7836, %r7833, %r7825, %r7826}, [%r5558+1024];
	shl.b32 	%r5567, %r46, 3;
	add.s32 	%r5568, %r5556, %r5567;
	ld.shared.v2.u32 	{%r7829, %r7827}, [%r5568+768];

$L__BB0_814:
	@%p282 bra 	$L__BB0_817;

	mad.lo.s32 	%r5573, %r1775, 384, -64;
	add.s32 	%r5574, %r42, -1;
	mul.lo.s32 	%r5575, %r5573, %r5574;
	mad.lo.s32 	%r5578, %r2239, %r2238, %r5575;
	mad.lo.s32 	%r5579, %r2641, 384, %r5578;
	shl.b32 	%r5580, %r5579, 2;
	mov.u32 	%r5581, _ZN6kernel5shmemE;
	add.s32 	%r5582, %r5581, %r5580;
	add.s32 	%r5583, %r5582, -256;
	shl.b32 	%r5584, %r46, 4;
	add.s32 	%r5585, %r5583, %r5584;
	ld.shared.v4.u32 	{%r7850, %r7849, %r7845, %r7843}, [%r5585+256];
	ld.shared.v4.u32 	{%r7840, %r7839, %r7842, %r7848}, [%r5585+1024];
	shl.b32 	%r5594, %r46, 3;
	add.s32 	%r5595, %r5583, %r5594;
	ld.shared.v2.u32 	{%r7846, %r7844}, [%r5595+768];
	@%p279 bra 	$L__BB0_817;

	add.s32 	%r7400, %r5595, 768;
	ld.shared.v2.u32 	{%r7831, %r7834}, [%r7400+768];

$L__BB0_817:
	ld.param.u64 	%rd543, [%rd1+104];
	cvta.to.global.u64 	%rd35, %rd543;
	mov.u32 	%r7962, %r7796;
	mov.u32 	%r7963, %r7797;
	mov.u32 	%r7965, %r7799;
	mov.u32 	%r7966, %r7800;
	mov.u32 	%r7986, %r7816;
	mov.u32 	%r7990, %r7820;
	mov.u32 	%r7971, %r7803;
	mov.u32 	%r7972, %r7804;
	mov.u32 	%r7973, %r7805;
	mov.u32 	%r7974, %r7806;
	mov.u32 	%r7991, %r7821;
	mov.u32 	%r7992, %r7822;
	@%p284 bra 	$L__BB0_821;

	mad.lo.s32 	%r5601, %r674, %r1778, %r44;
	mad.lo.s32 	%r5602, %r5601, 768, 384;
	mul.lo.s32 	%r5603, %r5602, %r1776;
	mad.lo.s32 	%r5604, %r42, 384, %r5603;
	add.s32 	%r5605, %r5604, -128;
	mul.wide.s32 	%rd544, %r5605, 4;
	add.s64 	%rd545, %rd35, %rd544;
	add.s64 	%rd547, %rd545, %rd297;
	add.s64 	%rd36, %rd547, 512;
	mov.u32 	%r7986, %r7816;
	mov.u32 	%r7990, %r7820;
	mov.u32 	%r7991, %r7821;
	mov.u32 	%r7992, %r7822;
	@%p282 bra 	$L__BB0_820;

	ld.global.v4.u32 	{%r7991, %r7992, %r7986, %r7990}, [%rd36+-512];

$L__BB0_820:
	ld.global.v4.u32 	{%r7972, %r7974, %r7971, %r7973}, [%rd36];
	ld.global.v4.u32 	{%r7966, %r7963, %r7962, %r7965}, [%rd36+512];
	ld.global.v4.u32 	{%r7795, %r7798, %r7802, %r7801}, [%rd36+1024];

$L__BB0_821:
	mov.u32 	%r7977, %r7807;
	mov.u32 	%r7978, %r7808;
	mov.u32 	%r7979, %r7809;
	mov.u32 	%r7980, %r7810;
	mov.u32 	%r7981, %r7811;
	mov.u32 	%r7982, %r7812;
	mov.u32 	%r7983, %r7813;
	mov.u32 	%r7988, %r7818;
	@%p287 bra 	$L__BB0_823;

	mad.lo.s32 	%r5623, %r675, %r1777, %r43;
	mad.lo.s32 	%r5631, %r2641, 384, %r70;
	mad.lo.s32 	%r5632, %r1856, %r69, %r5631;
	mad.lo.s32 	%r5633, %r5623, %r1854, %r5632;
	mul.wide.s32 	%rd548, %r5633, 4;
	add.s64 	%rd549, %rd35, %rd548;
	add.s64 	%rd551, %rd549, %rd297;
	ld.global.v4.u32 	{%r7815, %r7814, %r7819, %r7817}, [%rd551];
	ld.global.v4.u32 	{%r7983, %r7980, %r7977, %r7978}, [%rd551+512];
	ld.global.v4.u32 	{%r7982, %r7979, %r7981, %r7988}, [%rd551+1024];
	ld.global.v4.u32 	{%r7991, %r7992, %r7986, %r7990}, [%rd551+1536];

$L__BB0_823:
	neg.s32 	%r7406, %r1780;
	not.b32 	%r7405, %r44;
	add.s32 	%r7404, %r1778, %r7405;
	mul.lo.s32 	%r7403, %r7404, %r1779;
	not.b32 	%r7402, %r43;
	add.s32 	%r7401, %r1777, %r7402;
	mad.lo.s32 	%r5657, %r7401, %r1779, %r7403;
	add.s32 	%r5658, %r5657, %r1780;
	add.s32 	%r5667, %r5658, %r2647;
	add.s32 	%r1489, %r7682, 1;
	add.s32 	%r5668, %r1489, %r5667;
	div.s32 	%r5669, %r5668, %r1780;
	mad.lo.s32 	%r1490, %r5669, %r7406, %r5668;
	mad.lo.s32 	%r5676, %r5669, %r48, %r2658;
	ld.param.u64 	%rd552, [%rd1+120];
	cvta.to.global.u64 	%rd553, %rd552;
	rem.s32 	%r5677, %r5676, %r1781;
	shr.u32 	%r5678, %r5677, 31;
	add.s32 	%r5679, %r5677, %r5678;
	shr.s32 	%r5680, %r5679, 1;
	mad.lo.s32 	%r5681, %r5680, %r1780, %r1490;
	shl.b32 	%r5682, %r5681, 5;
	add.s32 	%r5683, %r5682, %r46;
	cvt.s64.s32 	%rd37, %r5683;
	mul.wide.s32 	%rd554, %r5683, 4;
	add.s64 	%rd555, %rd553, %rd554;
	ld.global.u32 	%r7684, [%rd555];
	ld.param.u64 	%rd556, [%rd1+128];
	cvta.to.global.u64 	%rd38, %rd556;
	@%p142 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	shl.b64 	%rd559, %rd37, 2;
	add.s64 	%rd560, %rd38, %rd559;
	ld.global.u32 	%r7683, [%rd560];
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	shl.b32 	%r5684, %r1490, 5;
	add.s32 	%r5685, %r5684, %r46;
	mul.wide.s32 	%rd557, %r5685, 16;
	add.s64 	%rd558, %rd38, %rd557;
	ld.global.v4.u32 	{%r5686, %r5687, %r5688, %r5689}, [%rd558];
	mov.u32 	%r7664, %r7668;
	mov.u32 	%r7665, %r7669;
	mov.u32 	%r7666, %r7670;
	mov.u32 	%r7667, %r7671;
	mov.u32 	%r7668, %r7672;
	mov.u32 	%r7669, %r7673;
	mov.u32 	%r7670, %r7674;
	mov.u32 	%r7671, %r7675;
	mov.u32 	%r7672, %r5689;
	mov.u32 	%r7673, %r5688;
	mov.u32 	%r7674, %r5687;
	mov.u32 	%r7675, %r5686;

$L__BB0_826:
	mov.f32 	%f467, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5690, {low,high};}

	// end inline asm
	selp.b32 	%r5692, %r7513, %r5690, %p28;
	// begin inline asm
	{mul.f16x2 %r7661,%r5692,%r7638;
}
	// end inline asm
	selp.b32 	%r5695, %r7517, %r5690, %p28;
	// begin inline asm
	{mul.f16x2 %r7656,%r5695,%r7629;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5697, {low,high};}

	// end inline asm
	selp.b32 	%r5699, %r7513, %r5697, %p28;
	// begin inline asm
	{mul.f16x2 %r7648,%r5699,%r7602;
}
	// end inline asm
	selp.b32 	%r5702, %r7517, %r5697, %p28;
	// begin inline asm
	{mul.f16x2 %r7645,%r5702,%r7597;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5704, {low,high};}

	// end inline asm
	selp.b32 	%r5706, %r7513, %r5704, %p28;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7594;
}
	// end inline asm
	selp.b32 	%r5709, %r7517, %r5704, %p28;
	// begin inline asm
	{mul.f16x2 %r5708,%r5709,%r7587;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5711, {low,high};}

	// end inline asm
	selp.b32 	%r5713, %r7513, %r5711, %p28;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7593;
}
	// end inline asm
	selp.b32 	%r5716, %r7517, %r5711, %p28;
	// begin inline asm
	{mul.f16x2 %r5715,%r5716,%r7586;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5718, {low,high};}

	// end inline asm
	selp.b32 	%r5720, %r7513, %r5718, %p28;
	// begin inline asm
	{mul.f16x2 %r7638,%r5720,%r7592;
}
	// end inline asm
	selp.b32 	%r5723, %r7517, %r5718, %p28;
	// begin inline asm
	{mul.f16x2 %r7629,%r5723,%r7585;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5725, {low,high};}

	// end inline asm
	selp.b32 	%r5727, %r7513, %r5725, %p28;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7580;
}
	// end inline asm
	selp.b32 	%r5730, %r7517, %r5725, %p28;
	// begin inline asm
	{mul.f16x2 %r5729,%r5730,%r7575;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5732, {low,high};}

	// end inline asm
	selp.b32 	%r5734, %r7513, %r5732, %p28;
	// begin inline asm
	{mul.f16x2 %r7621,%r5734,%r7579;
}
	// end inline asm
	selp.b32 	%r5737, %r7517, %r5732, %p28;
	// begin inline asm
	{mul.f16x2 %r7613,%r5737,%r7574;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5739, {low,high};}

	// end inline asm
	selp.b32 	%r5741, %r7513, %r5739, %p28;
	// begin inline asm
	{mul.f16x2 %r5740,%r5741,%r7559;
}
	// end inline asm
	selp.b32 	%r5744, %r7517, %r5739, %p28;
	// begin inline asm
	{mul.f16x2 %r5743,%r5744,%r7552;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5746, {low,high};}

	// end inline asm
	selp.b32 	%r5748, %r7513, %r5746, %p28;
	// begin inline asm
	{mul.f16x2 %r5747,%r5748,%r7813;
}
	// end inline asm
	selp.b32 	%r5751, %r7517, %r5746, %p28;
	// begin inline asm
	{mul.f16x2 %r5750,%r5751,%r7810;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5753, {low,high};}

	// end inline asm
	selp.b32 	%r5755, %r7513, %r5753, %p28;
	// begin inline asm
	{mul.f16x2 %r7602,%r5755,%r7812;
}
	// end inline asm
	selp.b32 	%r5758, %r7517, %r5753, %p28;
	// begin inline asm
	{mul.f16x2 %r7597,%r5758,%r7809;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5760, {low,high};}

	// end inline asm
	selp.b32 	%r5762, %r7513, %r5760, %p28;
	// begin inline asm
	{mul.f16x2 %r5761,%r5762,%r7546;
}
	// end inline asm
	selp.b32 	%r5765, %r7517, %r5760, %p28;
	// begin inline asm
	{mul.f16x2 %r5764,%r5765,%r7539;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5767, {low,high};}

	// end inline asm
	selp.b32 	%r5769, %r7513, %r5767, %p28;
	// begin inline asm
	{mul.f16x2 %r5768,%r5769,%r7545;
}
	// end inline asm
	selp.b32 	%r5772, %r7517, %r5767, %p28;
	// begin inline asm
	{mul.f16x2 %r5771,%r5772,%r7538;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5774, {low,high};}

	// end inline asm
	selp.b32 	%r5776, %r7513, %r5774, %p28;
	// begin inline asm
	{mul.f16x2 %r7592,%r5776,%r7544;
}
	// end inline asm
	selp.b32 	%r5779, %r7517, %r5774, %p28;
	// begin inline asm
	{mul.f16x2 %r7585,%r5779,%r7537;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5781, {low,high};}

	// end inline asm
	selp.b32 	%r5783, %r7513, %r5781, %p28;
	// begin inline asm
	{mul.f16x2 %r5782,%r5783,%r7532;
}
	// end inline asm
	selp.b32 	%r5786, %r7517, %r5781, %p28;
	// begin inline asm
	{mul.f16x2 %r5785,%r5786,%r7524;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5788, {low,high};}

	// end inline asm
	selp.b32 	%r5790, %r7513, %r5788, %p28;
	// begin inline asm
	{mul.f16x2 %r5789,%r5790,%r7531;
}
	// end inline asm
	selp.b32 	%r5793, %r7517, %r5788, %p28;
	// begin inline asm
	{mul.f16x2 %r5792,%r5793,%r7523;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5795, {low,high};}

	// end inline asm
	selp.b32 	%r5797, %r7513, %r5795, %p28;
	// begin inline asm
	{mul.f16x2 %r7579,%r5797,%r7800;
}
	// end inline asm
	selp.b32 	%r5800, %r7517, %r5795, %p28;
	// begin inline asm
	{mul.f16x2 %r7574,%r5800,%r7797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5802, {low,high};}

	// end inline asm
	selp.b32 	%r5804, %r7513, %r5802, %p28;
	// begin inline asm
	{mul.f16x2 %r5803,%r5804,%r7796;
}
	// end inline asm
	selp.b32 	%r5807, %r7517, %r5802, %p28;
	// begin inline asm
	{mul.f16x2 %r5806,%r5807,%r7799;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5809, {low,high};}

	// end inline asm
	selp.b32 	%r5811, %r7513, %r5809, %p28;
	// begin inline asm
	{mul.f16x2 %r5810,%r5811,%r7807;
}
	// end inline asm
	selp.b32 	%r5814, %r7517, %r5809, %p28;
	// begin inline asm
	{mul.f16x2 %r5813,%r5814,%r7808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5816, {low,high};}

	// end inline asm
	selp.b32 	%r5818, %r7513, %r5816, %p28;
	// begin inline asm
	{mul.f16x2 %r5817,%r5818,%r7555;
}
	// end inline asm
	selp.b32 	%r5821, %r7517, %r5816, %p28;
	// begin inline asm
	{mul.f16x2 %r5820,%r5821,%r7601;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5823, {low,high};}

	// end inline asm
	selp.b32 	%r5825, %r7513, %r5823, %p28;
	// begin inline asm
	{mul.f16x2 %r5824,%r5825,%r7811;
}
	// end inline asm
	selp.b32 	%r5828, %r7517, %r5823, %p28;
	// begin inline asm
	{mul.f16x2 %r5827,%r5828,%r7818;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5830, {low,high};}

	// end inline asm
	selp.b32 	%r5832, %r7513, %r5830, %p28;
	// begin inline asm
	{mul.f16x2 %r7544,%r5832,%r7816;
}
	// end inline asm
	selp.b32 	%r5835, %r7517, %r5830, %p28;
	// begin inline asm
	{mul.f16x2 %r7537,%r5835,%r7820;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5837, {low,high};}

	// end inline asm
	selp.b32 	%r5839, %r7513, %r5837, %p28;
	// begin inline asm
	{mul.f16x2 %r5838,%r5839,%r7803;
}
	// end inline asm
	selp.b32 	%r5842, %r7517, %r5837, %p28;
	// begin inline asm
	{mul.f16x2 %r5841,%r5842,%r7805;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5844, {low,high};}

	// end inline asm
	selp.b32 	%r5846, %r7513, %r5844, %p28;
	// begin inline asm
	{mul.f16x2 %r5845,%r5846,%r7804;
}
	// end inline asm
	selp.b32 	%r5849, %r7517, %r5844, %p28;
	// begin inline asm
	{mul.f16x2 %r5848,%r5849,%r7806;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5851, {low,high};}

	// end inline asm
	selp.b32 	%r5853, %r7513, %r5851, %p28;
	// begin inline asm
	{mul.f16x2 %r5852,%r5853,%r7821;
}
	// end inline asm
	selp.b32 	%r5856, %r7517, %r5851, %p28;
	// begin inline asm
	{mul.f16x2 %r5855,%r5856,%r7822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5858,%r7662,%r3759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5861,%r3870,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5864,%r5858,%r5861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5867,%r7427,%r5864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5870,%r7661,%r5867;
}
	// end inline asm
	@%p28 bra 	$L__BB0_828;

	mov.u32 	%r7661, %r5870;

$L__BB0_828:
	// begin inline asm
	{sub.f16x2 %r5873,%r7657,%r3825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5876,%r3904,%r3793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5879,%r5873,%r5876;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5882,%r7427,%r5879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5885,%r7656,%r5882;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;

	mov.u32 	%r7656, %r5885;

$L__BB0_830:
	// begin inline asm
	{sub.f16x2 %r5888,%r7649,%r3992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5891,%r7663,%r3949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5894,%r5888,%r5891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5897,%r7427,%r5894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5900,%r7648,%r5897;
}
	// end inline asm
	@%p28 bra 	$L__BB0_832;

	mov.u32 	%r7648, %r5900;

$L__BB0_832:
	// begin inline asm
	{sub.f16x2 %r5903,%r7646,%r4058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5906,%r7658,%r4026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5909,%r5903,%r5906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5912,%r7427,%r5909;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5915,%r7645,%r5912;
}
	// end inline asm
	@%p28 bra 	$L__BB0_834;

	mov.u32 	%r7645, %r5915;

$L__BB0_834:
	// begin inline asm
	{sub.f16x2 %r5918,%r7657,%r7662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5921,%r7512,%r5918;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r8010,%r5705;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r8010,%r7513,%r5918;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r5932, 31;
	mov.u32 	%r5934, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5930,%r8010,%r5932,%r2344,%r5934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5935,%r5921,%r5930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5938,%r7750,%r7756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5941,%r5938,%r5935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5944,%r7427,%r5941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r5705,%r5944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r7658,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r7512,%r5950;
}
	// end inline asm
	mov.u32 	%r8011, %r5712;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r8011,%r7513,%r5950;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5962,%r8011,%r5932,%r2344,%r5934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5967,%r5953,%r5962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r7738,%r7756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5973,%r5967,%r5970;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5976,%r7427,%r5973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r5712,%r5976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5982,%r7642,%r7662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5985,%r7653,%r7663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5988,%r5982,%r5985;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5991,%r7427,%r5988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5994,%r7638,%r5991;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;

	mov.u32 	%r7638, %r5994;

$L__BB0_841:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7662;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r6005, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6001,%r7662,%r436,%r2344,%r6005;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6001;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6007, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6008,%r6007,%r7657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6011,%r7516,%r6008;
}
	// end inline asm
	@%p28 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r8013,%r5708;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r8013,%r7517,%r6008;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r6024, 31;
	mov.u32 	%r6048, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6022,%r8013,%r6024,%r2344,%r6048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6027,%r6011,%r6022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r7747,%r7753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r6030,%r6027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6036,%r7427,%r6033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r5708,%r6036;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7663;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6044,%r7663,%r436,%r2344,%r6048;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6044;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6050, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6051,%r6050,%r7658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6054,%r7516,%r6051;
}
	// end inline asm
	mov.u32 	%r8014, %r5715;
	@%p28 bra 	$L__BB0_846;

	// begin inline asm
	{mul.f16x2 %r8014,%r7517,%r6051;
}
	// end inline asm

$L__BB0_846:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6065,%r8014,%r6024,%r2344,%r6048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6070,%r6054,%r6065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r7735,%r7753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6076,%r6070,%r6073;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6079,%r7427,%r6076;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r5715,%r6079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6085,%r7633,%r7657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r7651,%r7658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6085,%r6088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r7427,%r6091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6097,%r7629,%r6094;
}
	// end inline asm
	@%p28 bra 	$L__BB0_848;

	mov.u32 	%r7629, %r6097;

$L__BB0_848:
	// begin inline asm
	{sub.f16x2 %r6102,%r7651,%r7653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6105,%r7512,%r6102;
}
	// end inline asm
	mov.u32 	%r8016, %r5726;
	@%p28 bra 	$L__BB0_850;

	// begin inline asm
	{mul.f16x2 %r8016,%r7513,%r6102;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r6114, 31;
	mov.u32 	%r6116, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6112,%r8016,%r6114,%r2344,%r6116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6117,%r6105,%r6112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6120,%r7732,%r7750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6123,%r6117,%r6120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6126,%r7427,%r6123;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r5726,%r6126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6132,%r7624,%r4330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6135,%r4471,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r6132,%r6135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r7427,%r6138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6144,%r7621,%r6141;
}
	// end inline asm
	@%p28 bra 	$L__BB0_852;

	mov.u32 	%r7621, %r6144;

$L__BB0_852:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7653;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6151,%r7653,%r436,%r2344,%r6116;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6151;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6157, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r6157,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6161,%r7516,%r6158;
}
	// end inline asm
	mov.u32 	%r8018, %r5729;
	@%p28 bra 	$L__BB0_854;

	// begin inline asm
	{mul.f16x2 %r8018,%r7517,%r6158;
}
	// end inline asm

$L__BB0_854:
	mov.u32 	%r6172, 31;
	mov.u32 	%r6174, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6170,%r8018,%r6172,%r2344,%r6174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6175,%r6161,%r6170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6178,%r7729,%r7747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6181,%r6175,%r6178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6184,%r7427,%r6181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r5729,%r6184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6190,%r7616,%r4411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6193,%r4505,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6196,%r6190,%r6193;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6199,%r7427,%r6196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6202,%r7613,%r6199;
}
	// end inline asm
	@%p28 bra 	$L__BB0_856;

	mov.u32 	%r7613, %r6202;

$L__BB0_856:
	// begin inline asm
	{sub.f16x2 %r6207,%r7646,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6210,%r7512,%r6207;
}
	// end inline asm
	@%p28 bra 	$L__BB0_858;
	bra.uni 	$L__BB0_857;

$L__BB0_858:
	// begin inline asm
	{neg.f16x2 %r8020,%r5740;
}
	// end inline asm
	bra.uni 	$L__BB0_859;

$L__BB0_857:
	// begin inline asm
	{mul.f16x2 %r8020,%r7513,%r6207;
}
	// end inline asm

$L__BB0_859:
	mov.u32 	%r6221, 31;
	mov.u32 	%r6223, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6219,%r8020,%r6221,%r2344,%r6223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6224,%r6210,%r6219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r7738,%r7743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6230,%r6227,%r6224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6233,%r7427,%r6230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r5740,%r6233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r7849,%r7850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6242,%r7512,%r6239;
}
	// end inline asm
	mov.u32 	%r8021, %r5747;
	@%p28 bra 	$L__BB0_861;

	// begin inline asm
	{mul.f16x2 %r8021,%r7513,%r6239;
}
	// end inline asm

$L__BB0_861:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6251,%r8021,%r6221,%r2344,%r6223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6256,%r6242,%r6251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6259,%r7845,%r7743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6262,%r6256,%r6259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6265,%r7427,%r6262;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7603,%r5747,%r6265;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6271,%r7846,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6274,%r7643,%r7850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r6271,%r6274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6280,%r7427,%r6277;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6283,%r7602,%r6280;
}
	// end inline asm
	@%p28 bra 	$L__BB0_863;

	mov.u32 	%r7602, %r6283;

$L__BB0_863:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6294, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6290,%r7649,%r436,%r2344,%r6294;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6290;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6296, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6297,%r6296,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6300,%r7516,%r6297;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r8023,%r5743;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r8023,%r7517,%r6297;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r6313, 31;
	mov.u32 	%r6337, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6311,%r8023,%r6313,%r2344,%r6337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6316,%r6300,%r6311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6319,%r7735,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r6319,%r6316;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6325,%r7427,%r6322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r5743,%r6325;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7850;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6333,%r7850,%r436,%r2344,%r6337;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6333;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6339, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6340,%r6339,%r7849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6343,%r7516,%r6340;
}
	// end inline asm
	mov.u32 	%r8024, %r5750;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r8024,%r7517,%r6340;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6354,%r8024,%r6313,%r2344,%r6337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6359,%r6343,%r6354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6362,%r7843,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6365,%r6359,%r6362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6368,%r7427,%r6365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r5750,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6374,%r7844,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6377,%r7634,%r7849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6380,%r6374,%r6377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6383,%r7427,%r6380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6386,%r7597,%r6383;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;

	mov.u32 	%r7597, %r6386;

$L__BB0_870:
	// begin inline asm
	{sub.f16x2 %r6391,%r7633,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6394,%r7512,%r6391;
}
	// end inline asm
	@%p28 bra 	$L__BB0_872;
	bra.uni 	$L__BB0_871;

$L__BB0_872:
	// begin inline asm
	{neg.f16x2 %r8026,%r5761;
}
	// end inline asm
	bra.uni 	$L__BB0_873;

$L__BB0_871:
	// begin inline asm
	{mul.f16x2 %r8026,%r7513,%r6391;
}
	// end inline asm

$L__BB0_873:
	mov.u32 	%r6405, 31;
	mov.u32 	%r6407, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6403,%r8026,%r6405,%r2344,%r6407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6408,%r6394,%r6403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6411,%r7732,%r7738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6414,%r6411,%r6408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6417,%r7427,%r6414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r5761,%r6417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r7634,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6426,%r7512,%r6423;
}
	// end inline asm
	mov.u32 	%r8027, %r5768;
	@%p28 bra 	$L__BB0_875;

	// begin inline asm
	{mul.f16x2 %r8027,%r7513,%r6423;
}
	// end inline asm

$L__BB0_875:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6435,%r8027,%r6405,%r2344,%r6407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6440,%r6426,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6443,%r7725,%r7738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6446,%r6440,%r6443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6449,%r7427,%r6446;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7593,%r5768,%r6449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6455,%r7596,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6458,%r7625,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6461,%r6455,%r6458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6464,%r7427,%r6461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r7592,%r6464;
}
	// end inline asm
	@%p28 bra 	$L__BB0_877;

	mov.u32 	%r7592, %r6467;

$L__BB0_877:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7642;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6478, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6474,%r7642,%r436,%r2344,%r6478;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6474;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6480, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6481,%r6480,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6484,%r7516,%r6481;
}
	// end inline asm
	@%p28 bra 	$L__BB0_879;
	bra.uni 	$L__BB0_878;

$L__BB0_879:
	// begin inline asm
	{neg.f16x2 %r8029,%r5764;
}
	// end inline asm
	bra.uni 	$L__BB0_880;

$L__BB0_878:
	// begin inline asm
	{mul.f16x2 %r8029,%r7517,%r6481;
}
	// end inline asm

$L__BB0_880:
	mov.u32 	%r6497, 31;
	mov.u32 	%r6521, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6495,%r8029,%r6497,%r2344,%r6521;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6500,%r6484,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6503,%r7729,%r7735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r6503,%r6500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6509,%r7427,%r6506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r5764,%r6509;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6517,%r7643,%r436,%r2344,%r6521;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6517;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6523, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6524,%r6523,%r7634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6527,%r7516,%r6524;
}
	// end inline asm
	mov.u32 	%r8030, %r5771;
	@%p28 bra 	$L__BB0_882;

	// begin inline asm
	{mul.f16x2 %r8030,%r7517,%r6524;
}
	// end inline asm

$L__BB0_882:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6538,%r8030,%r6497,%r2344,%r6521;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6543,%r6527,%r6538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6546,%r7723,%r7735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6549,%r6543,%r6546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6552,%r7427,%r6549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7586,%r5771,%r6552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r7589,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6561,%r7617,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6564,%r6558,%r6561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6567,%r7427,%r6564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r7585,%r6567;
}
	// end inline asm
	@%p28 bra 	$L__BB0_884;

	mov.u32 	%r7585, %r6570;

$L__BB0_884:
	// begin inline asm
	{sub.f16x2 %r6575,%r7616,%r7624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6578,%r7512,%r6575;
}
	// end inline asm
	@%p28 bra 	$L__BB0_886;
	bra.uni 	$L__BB0_885;

$L__BB0_886:
	// begin inline asm
	{neg.f16x2 %r8032,%r5782;
}
	// end inline asm
	bra.uni 	$L__BB0_887;

$L__BB0_885:
	// begin inline asm
	{mul.f16x2 %r8032,%r7513,%r6575;
}
	// end inline asm

$L__BB0_887:
	mov.u32 	%r6589, 31;
	mov.u32 	%r6591, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6587,%r8032,%r6589,%r2344,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6592,%r6578,%r6587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6595,%r7728,%r7732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6598,%r6595,%r6592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6601,%r7427,%r6598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r5782,%r6601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r7617,%r7625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6610,%r7512,%r6607;
}
	// end inline asm
	mov.u32 	%r8033, %r5789;
	@%p28 bra 	$L__BB0_889;

	// begin inline asm
	{mul.f16x2 %r8033,%r7513,%r6607;
}
	// end inline asm

$L__BB0_889:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6619,%r8033,%r6589,%r2344,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6624,%r6610,%r6619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6627,%r7722,%r7732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6630,%r6624,%r6627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6633,%r7427,%r6630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r5789,%r6633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6639,%r7829,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6642,%r7836,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6645,%r6639,%r6642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6648,%r7427,%r6645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6651,%r7579,%r6648;
}
	// end inline asm
	@%p28 bra 	$L__BB0_891;

	mov.u32 	%r7579, %r6651;

$L__BB0_891:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7624;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6662, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6658,%r7624,%r436,%r2344,%r6662;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6658;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6664, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6665,%r6664,%r7616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6668,%r7516,%r6665;
}
	// end inline asm
	@%p28 bra 	$L__BB0_893;
	bra.uni 	$L__BB0_892;

$L__BB0_893:
	// begin inline asm
	{neg.f16x2 %r8035,%r5785;
}
	// end inline asm
	bra.uni 	$L__BB0_894;

$L__BB0_892:
	// begin inline asm
	{mul.f16x2 %r8035,%r7517,%r6665;
}
	// end inline asm

$L__BB0_894:
	mov.u32 	%r6681, 31;
	mov.u32 	%r6705, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6679,%r8035,%r6681,%r2344,%r6705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6684,%r6668,%r6679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6687,%r7727,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6690,%r6687,%r6684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6693,%r7427,%r6690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r5785,%r6693;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7625;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6701,%r7625,%r436,%r2344,%r6705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6701;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6707, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6708,%r6707,%r7617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6711,%r7516,%r6708;
}
	// end inline asm
	mov.u32 	%r8036, %r5792;
	@%p28 bra 	$L__BB0_896;

	// begin inline asm
	{mul.f16x2 %r8036,%r7517,%r6708;
}
	// end inline asm

$L__BB0_896:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6722,%r8036,%r6681,%r2344,%r6705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6727,%r6711,%r6722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6730,%r7721,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6733,%r6727,%r6730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6736,%r7427,%r6733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r5792,%r6736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r7827,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6745,%r7833,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6748,%r6742,%r6745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6751,%r7427,%r6748;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6754,%r7574,%r6751;
}
	// end inline asm
	@%p28 bra 	$L__BB0_898;

	mov.u32 	%r7574, %r6754;

$L__BB0_898:
	// begin inline asm
	{sub.f16x2 %r6759,%r7833,%r7836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6762,%r7512,%r6759;
}
	// end inline asm
	mov.u32 	%r8038, %r5803;
	@%p28 bra 	$L__BB0_900;

	// begin inline asm
	{mul.f16x2 %r8038,%r7513,%r6759;
}
	// end inline asm

$L__BB0_900:
	mov.u32 	%r6771, 31;
	mov.u32 	%r6795, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6769,%r8038,%r6771,%r2344,%r6795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6774,%r6762,%r6769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6777,%r7825,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6780,%r6774,%r6777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6783,%r7427,%r6780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7570,%r5803,%r6783;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7836;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6791,%r7836,%r436,%r2344,%r6795;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6791;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6797, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6798,%r6797,%r7833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6801,%r7516,%r6798;
}
	// end inline asm
	mov.u32 	%r8039, %r5806;
	@%p28 bra 	$L__BB0_902;

	// begin inline asm
	{mul.f16x2 %r8039,%r7517,%r6798;
}
	// end inline asm

$L__BB0_902:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6812,%r8039,%r6771,%r2344,%r6795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6817,%r6801,%r6812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6820,%r7826,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6823,%r6817,%r6820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6826,%r7427,%r6823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r5806,%r6826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6832,%r7844,%r7846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6835,%r7512,%r6832;
}
	// end inline asm
	@%p28 bra 	$L__BB0_904;
	bra.uni 	$L__BB0_903;

$L__BB0_904:
	// begin inline asm
	{neg.f16x2 %r8040,%r5810;
}
	// end inline asm
	bra.uni 	$L__BB0_905;

$L__BB0_903:
	// begin inline asm
	{mul.f16x2 %r8040,%r7513,%r6832;
}
	// end inline asm

$L__BB0_905:
	mov.u32 	%r6848, 31;
	mov.u32 	%r6872, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6846,%r8040,%r6848,%r2344,%r6872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6851,%r6835,%r6846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6854,%r7725,%r7845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6857,%r6854,%r6851;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6860,%r7427,%r6857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r5810,%r6860;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7846;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6868,%r7846,%r436,%r2344,%r6872;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6868;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6874, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6875,%r6874,%r7844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6878,%r7516,%r6875;
}
	// end inline asm
	@%p28 bra 	$L__BB0_907;
	bra.uni 	$L__BB0_906;

$L__BB0_907:
	// begin inline asm
	{neg.f16x2 %r8041,%r5813;
}
	// end inline asm
	bra.uni 	$L__BB0_908;

$L__BB0_906:
	// begin inline asm
	{mul.f16x2 %r8041,%r7517,%r6875;
}
	// end inline asm

$L__BB0_908:
	mov.u32 	%r6893, 31;
	mov.u32 	%r6895, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6891,%r8041,%r6893,%r2344,%r6895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6896,%r6878,%r6891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6899,%r7723,%r7843;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6902,%r6899,%r6896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6905,%r7427,%r6902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r5813,%r6905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6911,%r7589,%r7596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6914,%r7512,%r6911;
}
	// end inline asm
	@%p28 bra 	$L__BB0_910;
	bra.uni 	$L__BB0_909;

$L__BB0_910:
	// begin inline asm
	{neg.f16x2 %r8042,%r5817;
}
	// end inline asm
	bra.uni 	$L__BB0_911;

$L__BB0_909:
	// begin inline asm
	{mul.f16x2 %r8042,%r7513,%r6911;
}
	// end inline asm

$L__BB0_911:
	mov.u32 	%r6927, 31;
	mov.u32 	%r6929, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6925,%r8042,%r6927,%r2344,%r6929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6930,%r6914,%r6925;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6933,%r7722,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6936,%r6933,%r6930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6939,%r7427,%r6936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r5817,%r6939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r7839,%r7840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6948,%r7512,%r6945;
}
	// end inline asm
	mov.u32 	%r8043, %r5824;
	@%p28 bra 	$L__BB0_913;

	// begin inline asm
	{mul.f16x2 %r8043,%r7513,%r6945;
}
	// end inline asm

$L__BB0_913:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6957,%r8043,%r6927,%r2344,%r6929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6962,%r6948,%r6957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6965,%r7842,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6968,%r6962,%r6965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6971,%r7427,%r6968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r5824,%r6971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6977,%r7831,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6980,%r7830,%r7840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6983,%r6977,%r6980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6986,%r7427,%r6983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6989,%r7544,%r6986;
}
	// end inline asm
	@%p28 bra 	$L__BB0_915;

	mov.u32 	%r7544, %r6989;

$L__BB0_915:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7596;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r7000, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6996,%r7596,%r436,%r2344,%r7000;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6996;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7002, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7003,%r7002,%r7589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7006,%r7516,%r7003;
}
	// end inline asm
	@%p28 bra 	$L__BB0_917;
	bra.uni 	$L__BB0_916;

$L__BB0_917:
	// begin inline asm
	{neg.f16x2 %r8045,%r5820;
}
	// end inline asm
	bra.uni 	$L__BB0_918;

$L__BB0_916:
	// begin inline asm
	{mul.f16x2 %r8045,%r7517,%r7003;
}
	// end inline asm

$L__BB0_918:
	mov.u32 	%r7019, 31;
	mov.u32 	%r7043, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7017,%r8045,%r7019,%r2344,%r7043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7022,%r7006,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7025,%r7721,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7028,%r7025,%r7022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7031,%r7427,%r7028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r5820,%r7031;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7840;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7039,%r7840,%r436,%r2344,%r7043;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7039;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7045, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7046,%r7045,%r7839;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7049,%r7516,%r7046;
}
	// end inline asm
	mov.u32 	%r8046, %r5827;
	@%p28 bra 	$L__BB0_920;

	// begin inline asm
	{mul.f16x2 %r8046,%r7517,%r7046;
}
	// end inline asm

$L__BB0_920:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7060,%r8046,%r7019,%r2344,%r7043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7065,%r7049,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7068,%r7848,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7071,%r7065,%r7068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7074,%r7427,%r7071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r5827,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7080,%r7834,%r7589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7083,%r7828,%r7839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7086,%r7080,%r7083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7089,%r7427,%r7086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r7537,%r7089;
}
	// end inline asm
	@%p28 bra 	$L__BB0_922;

	mov.u32 	%r7537, %r7092;

$L__BB0_922:
	// begin inline asm
	{sub.f16x2 %r7097,%r7827,%r7829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7100,%r7512,%r7097;
}
	// end inline asm
	@%p28 bra 	$L__BB0_924;
	bra.uni 	$L__BB0_923;

$L__BB0_924:
	// begin inline asm
	{neg.f16x2 %r8048,%r5838;
}
	// end inline asm
	bra.uni 	$L__BB0_925;

$L__BB0_923:
	// begin inline asm
	{mul.f16x2 %r8048,%r7513,%r7097;
}
	// end inline asm

$L__BB0_925:
	mov.u32 	%r7111, 31;
	mov.u32 	%r7113, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7109,%r8048,%r7111,%r2344,%r7113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7114,%r7100,%r7109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7117,%r7825,%r7722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7120,%r7117,%r7114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7123,%r7427,%r7120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r5838,%r7123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7129,%r7828,%r7830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7132,%r7512,%r7129;
}
	// end inline asm
	mov.u32 	%r8049, %r5845;
	@%p28 bra 	$L__BB0_927;

	// begin inline asm
	{mul.f16x2 %r8049,%r7513,%r7129;
}
	// end inline asm

$L__BB0_927:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7141,%r8049,%r7111,%r2344,%r7113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7146,%r7132,%r7141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7149,%r7837,%r7722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7152,%r7146,%r7149;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7155,%r7427,%r7152;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r5845,%r7155;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7829;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7163,%r7829,%r436,%r2344,%r7113;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7163;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7169, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7170,%r7169,%r7827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7173,%r7516,%r7170;
}
	// end inline asm
	@%p28 bra 	$L__BB0_929;
	bra.uni 	$L__BB0_928;

$L__BB0_929:
	// begin inline asm
	{neg.f16x2 %r8050,%r5841;
}
	// end inline asm
	bra.uni 	$L__BB0_930;

$L__BB0_928:
	// begin inline asm
	{mul.f16x2 %r8050,%r7517,%r7170;
}
	// end inline asm

$L__BB0_930:
	mov.u32 	%r7188, 31;
	mov.u32 	%r7212, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7186,%r8050,%r7188,%r2344,%r7212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7191,%r7173,%r7186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7194,%r7826,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7197,%r7194,%r7191;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7200,%r7427,%r7197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r5841,%r7200;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7830;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7208,%r7830,%r436,%r2344,%r7212;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7208;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7214, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7215,%r7214,%r7828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7218,%r7516,%r7215;
}
	// end inline asm
	mov.u32 	%r8051, %r5848;
	@%p28 bra 	$L__BB0_932;

	// begin inline asm
	{mul.f16x2 %r8051,%r7517,%r7215;
}
	// end inline asm

$L__BB0_932:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7229,%r8051,%r7188,%r2344,%r7212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7234,%r7218,%r7229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7237,%r7838,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7240,%r7234,%r7237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7243,%r7427,%r7240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r5848,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7249,%r7834,%r7831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7252,%r7512,%r7249;
}
	// end inline asm
	@%p28 bra 	$L__BB0_934;
	bra.uni 	$L__BB0_933;

$L__BB0_934:
	// begin inline asm
	{neg.f16x2 %r8052,%r5852;
}
	// end inline asm
	bra.uni 	$L__BB0_935;

$L__BB0_933:
	// begin inline asm
	{mul.f16x2 %r8052,%r7513,%r7249;
}
	// end inline asm

$L__BB0_935:
	mov.u32 	%r7265, 31;
	mov.u32 	%r7289, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7263,%r8052,%r7265,%r2344,%r7289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7268,%r7252,%r7263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7271,%r7837,%r7842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7274,%r7271,%r7268;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7277,%r7427,%r7274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r5852,%r7277;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7831;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7285,%r7831,%r436,%r2344,%r7289;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7285;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7291, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7292,%r7291,%r7834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7295,%r7516,%r7292;
}
	// end inline asm
	@%p28 bra 	$L__BB0_937;
	bra.uni 	$L__BB0_936;

$L__BB0_937:
	// begin inline asm
	{neg.f16x2 %r8053,%r5855;
}
	// end inline asm
	bra.uni 	$L__BB0_938;

$L__BB0_936:
	// begin inline asm
	{mul.f16x2 %r8053,%r7517,%r7292;
}
	// end inline asm

$L__BB0_938:
	mov.u32 	%r7310, 31;
	mov.u32 	%r7312, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7308,%r8053,%r7310,%r2344,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7313,%r7295,%r7308;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7316,%r7838,%r7848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7319,%r7316,%r7313;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7322,%r7427,%r7319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r5855,%r7322;
}
	// end inline asm
	bar.sync 	0;
	@%p506 bra 	$L__BB0_941;

	setp.ne.s32 	%p585, %r42, %r2243;
	shl.b32 	%r7331, %r42, 8;
	shl.b32 	%r7335, %r1776, 8;
	or.b32  	%r7336, %r7335, 128;
	mad.lo.s32 	%r7337, %r7336, %r41, %r2246;
	add.s32 	%r7338, %r7337, %r7331;
	shl.b32 	%r7339, %r7338, 2;
	mov.u32 	%r7340, _ZN6kernel5shmemE;
	add.s32 	%r7341, %r7340, %r7339;
	shl.b32 	%r7342, %r46, 4;
	add.s32 	%r1772, %r7341, %r7342;
	st.shared.v4.u32 	[%r1772], {%r7603, %r7598, %r7604, %r7599};
	st.shared.v4.u32 	[%r1772+512], {%r7648, %r7645, %r7639, %r7630};
	@%p585 bra 	$L__BB0_941;

	st.shared.v4.u32 	[%r1772+1024], {%r7640, %r7631, %r7661, %r7656};

$L__BB0_941:
	setp.eq.s32 	%p583, %r42, %r2243;
	@%p583 bra 	$L__BB0_943;

	mul.lo.s32 	%r7346, %r2641, 384;
	mad.lo.s32 	%r7347, %r70, %r42, %r7346;
	mad.lo.s32 	%r7350, %r2241, %r2243, %r7347;
	mad.lo.s32 	%r7353, %r2239, %r2238, %r7350;
	shl.b32 	%r7354, %r7353, 2;
	mov.u32 	%r7355, _ZN6kernel5shmemE;
	add.s32 	%r7356, %r7355, %r7354;
	shl.b32 	%r7357, %r46, 4;
	add.s32 	%r7358, %r7356, %r7357;
	st.shared.v4.u32 	[%r7358], {%r7640, %r7631, %r7661, %r7656};
	st.shared.v4.u32 	[%r7358+512], {%r7622, %r7614, %r7581, %r7576};
	st.shared.v4.u32 	[%r7358+1024], {%r7621, %r7613, %r7570, %r7566};

$L__BB0_943:
	setp.ne.s32 	%p584, %r41, %r2238;
	ld.param.u64 	%rd561, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd561;
	@%p584 bra 	$L__BB0_945;

	mad.lo.s32 	%r7360, %r674, %r1778, %r44;
	mul.lo.s32 	%r7361, %r7360, %r1776;
	mul.lo.s32 	%r7362, %r7361, 768;
	add.s32 	%r7363, %r1776, %r42;
	mad.lo.s32 	%r7364, %r7363, 384, %r7362;
	add.s32 	%r7365, %r7364, -128;
	mul.wide.s32 	%rd562, %r7365, 4;
	add.s64 	%rd563, %rd39, %rd562;
	add.s64 	%rd565, %rd563, %rd297;
	st.global.v4.u32 	[%rd565+512], {%r7603, %r7598, %r7604, %r7599};
	st.global.v4.u32 	[%rd565+1024], {%r7648, %r7645, %r7639, %r7630};
	st.global.v4.u32 	[%rd565+1536], {%r7640, %r7631, %r7661, %r7656};

$L__BB0_945:
	setp.ne.s32 	%p586, %r42, %r2243;
	@%p586 bra 	$L__BB0_948;

	mad.lo.s32 	%r7367, %r675, %r1777, %r43;
	mad.lo.s32 	%r7375, %r2641, 384, %r70;
	mad.lo.s32 	%r7376, %r1856, %r69, %r7375;
	mad.lo.s32 	%r7377, %r7367, %r1854, %r7376;
	mul.wide.s32 	%rd566, %r7377, 4;
	add.s64 	%rd567, %rd39, %rd566;
	add.s64 	%rd40, %rd567, %rd297;
	st.global.v4.u32 	[%rd40], {%r7640, %r7631, %r7661, %r7656};
	st.global.v4.u32 	[%rd40+512], {%r7622, %r7614, %r7581, %r7576};
	st.global.v4.u32 	[%rd40+1024], {%r7621, %r7613, %r7570, %r7566};
	@%p284 bra 	$L__BB0_948;

	st.global.v4.u32 	[%rd40+1536], {%r7795, %r7798, %r7802, %r7801};

$L__BB0_948:
	rem.s32 	%r7378, %r7682, %r1779;
	setp.eq.s32 	%p577, %r7378, 0;
	@%p577 bra 	$L__BB0_950;

	bar.sync 	0;
	bra.uni 	$L__BB0_957;

$L__BB0_950:
	@%p218 bra 	$L__BB0_952;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_952:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_956;

	membar.gl;
	add.s64 	%rd569, %rd24, 4;
	setp.eq.s32 	%p580, %r430, %r431;
	mov.u32 	%r7391, -2147483647;
	sub.s32 	%r7392, %r7391, %r429;
	selp.b32 	%r7393, %r7392, 1, %p580;
	atom.add.u32 	%r1773, [%rd569], %r7393;

$L__BB0_954:
	ld.volatile.u32 	%r7394, [%rd24+4];
	xor.b32  	%r7395, %r7394, %r1773;
	setp.gt.s32 	%p581, %r7395, -1;
	@%p581 bra 	$L__BB0_954;

	membar.gl;

$L__BB0_956:
	bar.sync 	0;

$L__BB0_957:
	add.s32 	%r7682, %r7682, 1;
	setp.lt.s32 	%p582, %r7682, %r49;
	mov.u32 	%r7796, %r7962;
	mov.u32 	%r7797, %r7963;
	mov.u32 	%r7799, %r7965;
	mov.u32 	%r7800, %r7966;
	mov.u32 	%r7807, %r7977;
	mov.u32 	%r7808, %r7978;
	mov.u32 	%r7809, %r7979;
	mov.u32 	%r7810, %r7980;
	mov.u32 	%r7811, %r7981;
	mov.u32 	%r7812, %r7982;
	mov.u32 	%r7813, %r7983;
	mov.u32 	%r7816, %r7986;
	mov.u32 	%r7818, %r7988;
	mov.u32 	%r7820, %r7990;
	mov.u32 	%r7610, %r497;
	mov.u32 	%r7611, %r7873;
	mov.u32 	%r7618, %r504;
	mov.u32 	%r7619, %r7875;
	mov.u32 	%r7626, %r511;
	mov.u32 	%r7635, %r519;
	mov.u32 	%r7644, %r7880;
	mov.u32 	%r7647, %r7882;
	mov.u32 	%r7650, %r549;
	mov.u32 	%r7652, %r557;
	mov.u32 	%r7654, %r564;
	mov.u32 	%r7655, %r565;
	mov.u32 	%r7659, %r573;
	mov.u32 	%r7660, %r574;
	mov.u32 	%r7803, %r7971;
	mov.u32 	%r7804, %r7972;
	mov.u32 	%r7805, %r7973;
	mov.u32 	%r7806, %r7974;
	mov.u32 	%r7821, %r7991;
	mov.u32 	%r7822, %r7992;
	@%p582 bra 	$L__BB0_332;

$L__BB0_958:
	ret;

}

