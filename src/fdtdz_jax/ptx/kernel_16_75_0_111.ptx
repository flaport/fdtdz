//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<500>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7936>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<566>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1728, %r1729}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1746, %r1747}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1748, 32;
	sub.s32 	%r39, %r1748, %r1735;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p15, %r39, %r40;
	add.s32 	%r1749, %r1741, -1;
	mad.lo.s32 	%r1750, %r1749, %r1740, %r1739;
	add.s32 	%r1751, %r1734, %r1733;
	add.s32 	%r1752, %r1751, %r1750;
	add.s32 	%r1753, %r1752, 1;
	mul.lo.s32 	%r1754, %r1728, %r1730;
	shl.b32 	%r41, %r1754, 1;
	shl.b32 	%r1755, %r1754, 2;
	div.s32 	%r1756, %r1753, %r1755;
	add.s32 	%r1757, %r1756, 1;
	mul.lo.s32 	%r1758, %r1757, %r1734;
	mul.lo.s32 	%r1759, %r1729, %r1731;
	shl.b32 	%r42, %r1759, 1;
	div.s32 	%r1760, %r1758, %r42;
	add.s32 	%r1761, %r1760, 1;
	mul.lo.s32 	%r43, %r1761, %r1733;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7315, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1764, %r1730, %r38, %r37;
	mad.lo.s32 	%r1765, %r1764, %r1729, %r36;
	mul.lo.s32 	%r47, %r1765, %r1728;
	add.s32 	%r1766, %r47, %r35;
	shl.b32 	%r48, %r1766, 5;
	add.s32 	%r7320, %r48, %r40;
	mul.lo.s32 	%r1767, %r1759, %r1754;
	shl.b32 	%r52, %r1767, 5;
	sub.s32 	%r53, %r1743, %r1742;
	mul.lo.s32 	%r1768, %r1741, %r53;
	sub.s32 	%r54, %r1745, %r1744;
	mul.lo.s32 	%r1769, %r1768, %r54;
	sub.s32 	%r55, %r1747, %r1746;
	mul.lo.s32 	%r1770, %r1769, %r55;
	mul.lo.s32 	%r56, %r1770, 3;
	setp.ge.s32 	%p16, %r7320, %r56;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1771, %r40;
	add.s32 	%r1772, %r56, %r1771;
	sub.s32 	%r1773, %r1772, %r48;
	mul.lo.s32 	%r1774, %r1759, %r1728;
	mul.lo.s32 	%r1775, %r1774, %r1730;
	shl.b32 	%r57, %r1775, 5;
	div.u32 	%r58, %r1773, %r57;
	add.s32 	%r1776, %r58, 1;
	and.b32  	%r7317, %r1776, 3;
	setp.eq.s32 	%p17, %r7317, 0;
	mov.u32 	%r7318, %r7320;
	@%p17 bra 	$L__BB0_7;

	shl.b32 	%r1777, %r47, 5;
	add.s32 	%r1778, %r40, %r1777;
	shl.b32 	%r1779, %r35, 5;
	add.s32 	%r7318, %r1778, %r1779;
	mul.wide.s32 	%rd46, %r7320, 4;
	add.s64 	%rd563, %rd2, %rd46;
	mul.wide.s32 	%rd4, %r57, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1780, 0;
	st.global.u32 	[%rd563], %r1780;
	add.s32 	%r7318, %r7318, %r57;
	add.s64 	%rd563, %rd563, %rd4;
	add.s32 	%r7317, %r7317, -1;
	setp.ne.s32 	%p18, %r7317, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r58, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd49, %r52, 4;

$L__BB0_9:
	mul.wide.s32 	%rd47, %r7318, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1781, 0;
	st.global.u32 	[%rd48], %r1781;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.u32 	[%rd50], %r1781;
	add.s32 	%r1782, %r7318, %r52;
	add.s32 	%r1783, %r1782, %r52;
	add.s64 	%rd51, %rd50, %rd49;
	st.global.u32 	[%rd51], %r1781;
	add.s32 	%r1784, %r1783, %r52;
	add.s64 	%rd52, %rd51, %rd49;
	st.global.u32 	[%rd52], %r1781;
	add.s32 	%r7318, %r1784, %r52;
	setp.lt.s32 	%p20, %r7318, %r56;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd53, [%rd1+80];
	cvta.to.global.u64 	%rd7, %rd53;
	sub.s32 	%r1785, %r1734, %r41;
	div.s32 	%r1786, %r1785, %r42;
	mul.lo.s32 	%r1787, %r1786, %r1733;
	sub.s32 	%r68, %r1787, %r41;
	sub.s32 	%r1788, %r1733, %r42;
	mul.lo.s32 	%r1789, %r1788, %r1730;
	mul.lo.s32 	%r69, %r1728, 384;
	add.s32 	%r1790, %r69, %r69;
	add.s32 	%r1791, %r1790, 128;
	mul.lo.s32 	%r1793, %r1759, 768;
	mul.lo.s32 	%r1794, %r1789, %r1791;
	mad.lo.s32 	%r70, %r1793, %r68, %r1794;
	bra.uni 	$L__BB0_11;

$L__BB0_865:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd551, %r7320, 4;
	add.s64 	%rd552, %rd7, %rd551;
	st.global.u32 	[%rd552], %r7292;
	add.s32 	%r7320, %r7320, %r52;

$L__BB0_11:
	setp.lt.s32 	%p21, %r7320, %r70;
	@%p21 bra 	$L__BB0_865;

	ld.param.u64 	%rd54, [%rd1+120];
	cvta.to.global.u64 	%rd9, %rd54;
	ld.param.u64 	%rd55, [%rd1+88];
	cvta.to.global.u64 	%rd10, %rd55;
	mad.lo.s32 	%r7362, %r1728, %r37, %r35;
	mul.lo.s32 	%r74, %r1729, %r38;
	add.s32 	%r75, %r74, %r36;
	setp.ge.s32 	%p22, %r7362, %r1733;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r39, %r40;
	mov.u32 	%r1795, 31;
	sub.s32 	%r1796, %r1795, %r40;
	selp.b32 	%r1797, %r40, %r1796, %p23;
	shl.b32 	%r1798, %r1797, 2;
	mov.u32 	%r1799, 2;
	sub.s32 	%r76, %r1798, %r1736;
	shl.b32 	%r1800, %r1735, 2;
	mov.u32 	%r1801, 128;
	sub.s32 	%r77, %r1801, %r1800;
	add.s32 	%r78, %r1743, -1;
	add.s32 	%r79, %r1745, -1;
	add.s32 	%r80, %r1747, -1;
	sub.s32 	%r1802, %r1799, %r1736;
	add.s32 	%r81, %r1802, %r1798;
	mul.lo.s32 	%r1803, %r1734, %r1733;
	shl.b32 	%r82, %r1803, 6;
	add.s32 	%r83, %r1733, -1;
	add.s32 	%r84, %r76, 1;
	add.s32 	%r85, %r81, 1;
	shl.b32 	%r86, %r40, 1;
	or.b32  	%r87, %r86, 1;
	shr.u32 	%r1804, %r87, 31;
	add.s32 	%r1805, %r87, %r1804;
	shr.s32 	%r89, %r1805, 1;
	and.b32  	%r1806, %r1805, -2;
	sub.s32 	%r1807, %r87, %r1806;
	add.s32 	%r88, %r1807, %r82;
	rem.s32 	%r1853, %r84, %r77;
	add.s32 	%r1854, %r1853, %r77;
	rem.s32 	%r1855, %r1854, %r77;
	rem.s32 	%r1858, %r85, %r77;
	add.s32 	%r1859, %r1858, %r77;
	rem.s32 	%r1860, %r1859, %r77;
	mov.u32 	%r7321, %r7362;

$L__BB0_14:
	setp.ge.s32 	%p24, %r75, %r1734;
	@%p24 bra 	$L__BB0_35;

	setp.gt.s32 	%p25, %r1742, %r7321;
	setp.gt.s32 	%p26, %r1743, %r7321;
	selp.b32 	%r1808, %r7321, %r78, %p26;
	selp.b32 	%r1809, %r1742, %r1808, %p25;
	sub.s32 	%r1810, %r1809, %r1742;
	add.s32 	%r91, %r83, %r7321;
	rem.s32 	%r1811, %r76, %r77;
	add.s32 	%r1812, %r1811, %r77;
	rem.s32 	%r1813, %r1812, %r77;
	setp.gt.s32 	%p27, %r1746, %r1813;
	setp.gt.s32 	%p28, %r1747, %r1813;
	selp.b32 	%r1814, %r1813, %r80, %p28;
	selp.b32 	%r1815, %r1746, %r1814, %p27;
	rem.s32 	%r1816, %r81, %r77;
	add.s32 	%r1817, %r1816, %r77;
	rem.s32 	%r1818, %r1817, %r77;
	setp.gt.s32 	%p29, %r1746, %r1818;
	setp.gt.s32 	%p30, %r1747, %r1818;
	selp.b32 	%r1819, %r1818, %r80, %p30;
	selp.b32 	%r1820, %r1746, %r1819, %p29;
	sub.s32 	%r92, %r1815, %r1746;
	sub.s32 	%r93, %r1820, %r1746;
	mul.lo.s32 	%r94, %r1810, %r54;
	add.s32 	%r1821, %r1810, %r53;
	mul.lo.s32 	%r95, %r1821, %r54;
	add.s32 	%r1822, %r1821, %r53;
	mul.lo.s32 	%r96, %r1822, %r54;
	mov.u32 	%r7322, %r75;

$L__BB0_16:
	setp.gt.s32 	%p31, %r1745, %r7322;
	selp.b32 	%r1823, %r7322, %r79, %p31;
	setp.gt.s32 	%p32, %r1744, %r7322;
	selp.b32 	%r1824, %r1744, %r1823, %p32;
	sub.s32 	%r98, %r1824, %r1744;
	mul.lo.s32 	%r99, %r7322, %r1733;
	add.s32 	%r100, %r99, %r7321;
	shl.b32 	%r101, %r100, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1827, %r98, %r94;
	mul.lo.s32 	%r1828, %r1827, %r55;
	add.s32 	%r1829, %r92, %r1828;
	mul.wide.s32 	%rd56, %r1829, 4;
	add.s64 	%rd57, %rd9, %rd56;
	ld.global.f32 	%f41, [%rd57];
	add.s32 	%r1830, %r93, %r1828;
	mul.wide.s32 	%rd58, %r1830, 4;
	add.s64 	%rd59, %rd9, %rd58;
	ld.global.f32 	%f42, [%rd59];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r105, %r100, 5;
	add.s32 	%r1831, %r105, %r40;
	shl.b32 	%r1832, %r1831, 2;
	add.s32 	%r1833, %r82, %r1832;
	mul.wide.s32 	%rd60, %r1833, 4;
	add.s64 	%rd61, %rd10, %rd60;
	st.global.u32 	[%rd61], %r7323;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1836, %r98, %r95;
	mul.lo.s32 	%r1837, %r1836, %r55;
	add.s32 	%r1838, %r92, %r1837;
	mul.wide.s32 	%rd62, %r1838, 4;
	add.s64 	%rd63, %rd9, %rd62;
	ld.global.f32 	%f45, [%rd63];
	add.s32 	%r1839, %r93, %r1837;
	mul.wide.s32 	%rd64, %r1839, 4;
	add.s64 	%rd65, %rd9, %rd64;
	ld.global.f32 	%f46, [%rd65];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7324, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1840, %r86, %r101;
	mul.wide.s32 	%rd66, %r1840, 4;
	add.s64 	%rd67, %rd10, %rd66;
	st.global.u32 	[%rd67], %r7324;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1843, %r98, %r96;
	mul.lo.s32 	%r1844, %r1843, %r55;
	add.s32 	%r1845, %r92, %r1844;
	mul.wide.s32 	%rd68, %r1845, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f49, [%rd69];
	add.s32 	%r1846, %r93, %r1844;
	mul.wide.s32 	%rd70, %r1846, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f50, [%rd71];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1847, %r91, %r1733;
	add.s32 	%r1848, %r1847, %r99;
	shl.b32 	%r112, %r1848, 5;
	add.s32 	%r1849, %r112, %r40;
	shl.b32 	%r1850, %r1849, 2;
	add.s32 	%r1851, %r82, %r1850;
	add.s32 	%r1852, %r1851, 2;
	mul.wide.s32 	%rd72, %r1852, 4;
	add.s64 	%rd73, %rd10, %rd72;
	st.global.u32 	[%rd73], %r7325;
	setp.gt.s32 	%p36, %r1746, %r1855;
	setp.gt.s32 	%p37, %r1747, %r1855;
	selp.b32 	%r1856, %r1855, %r80, %p37;
	selp.b32 	%r1857, %r1746, %r1856, %p36;
	setp.gt.s32 	%p38, %r1746, %r1860;
	setp.gt.s32 	%p39, %r1747, %r1860;
	selp.b32 	%r1861, %r1860, %r80, %p39;
	selp.b32 	%r1862, %r1746, %r1861, %p38;
	sub.s32 	%r113, %r1857, %r1746;
	sub.s32 	%r114, %r1862, %r1746;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1865, %r98, %r94;
	mul.lo.s32 	%r1866, %r1865, %r55;
	add.s32 	%r1867, %r113, %r1866;
	mul.wide.s32 	%rd74, %r1867, 4;
	add.s64 	%rd75, %rd9, %rd74;
	ld.global.f32 	%f53, [%rd75];
	add.s32 	%r1868, %r114, %r1866;
	mul.wide.s32 	%rd76, %r1868, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f54, [%rd77];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1869, %r105, %r89;
	shl.b32 	%r1870, %r1869, 2;
	add.s32 	%r1871, %r88, %r1870;
	mul.wide.s32 	%rd78, %r1871, 4;
	add.s64 	%rd79, %rd10, %rd78;
	st.global.u32 	[%rd79], %r7326;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1874, %r98, %r95;
	mul.lo.s32 	%r1875, %r1874, %r55;
	add.s32 	%r1876, %r113, %r1875;
	mul.wide.s32 	%rd80, %r1876, 4;
	add.s64 	%rd81, %rd9, %rd80;
	ld.global.f32 	%f57, [%rd81];
	add.s32 	%r1877, %r114, %r1875;
	mul.wide.s32 	%rd82, %r1877, 4;
	add.s64 	%rd83, %rd9, %rd82;
	ld.global.f32 	%f58, [%rd83];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1878, %r87, %r101;
	mul.wide.s32 	%rd84, %r1878, 4;
	add.s64 	%rd85, %rd10, %rd84;
	st.global.u32 	[%rd85], %r7327;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1881, %r98, %r96;
	mul.lo.s32 	%r1882, %r1881, %r55;
	add.s32 	%r1883, %r113, %r1882;
	mul.wide.s32 	%rd86, %r1883, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f61, [%rd87];
	add.s32 	%r1884, %r114, %r1882;
	mul.wide.s32 	%rd88, %r1884, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f62, [%rd89];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1885, %r112, %r89;
	shl.b32 	%r1886, %r1885, 2;
	add.s32 	%r1887, %r88, %r1886;
	add.s32 	%r1888, %r1887, 2;
	mul.wide.s32 	%rd90, %r1888, 4;
	add.s64 	%rd91, %rd10, %rd90;
	st.global.u32 	[%rd91], %r7328;
	add.s32 	%r7322, %r7322, %r1759;
	setp.lt.s32 	%p43, %r7322, %r1734;
	@%p43 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7321, %r7321, %r1754;
	setp.lt.s32 	%p44, %r7321, %r1733;
	@%p44 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd92, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd92;
	ld.param.u64 	%rd93, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd93;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r126, %r75, 1;
	mov.u64 	%rd94, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7329, %r7362;

$L__BB0_38:
	setp.ge.s32 	%p46, %r126, %r1734;
	@%p46 bra 	$L__BB0_119;

	mov.u32 	%r7330, %r126;

$L__BB0_40:
	setp.ne.s32 	%p47, %r40, 0;
	@%p47 bra 	$L__BB0_118;

	shr.u32 	%r1890, %r7330, 31;
	add.s32 	%r1891, %r7330, %r1890;
	shr.s32 	%r1892, %r1891, 1;
	mad.lo.s32 	%r1893, %r1892, %r1733, %r7329;
	shl.b32 	%r130, %r1893, 5;
	add.s32 	%r131, %r7330, -2;
	mul.lo.s32 	%r132, %r131, %r1733;
	add.s32 	%r1894, %r1734, %r131;
	mul.lo.s32 	%r133, %r1894, %r1733;
	add.s32 	%r1895, %r1894, %r1734;
	mul.lo.s32 	%r134, %r1895, %r1733;
	add.s32 	%r135, %r132, %r1733;
	add.s32 	%r136, %r7330, -1;
	add.s32 	%r1896, %r1734, %r136;
	mul.lo.s32 	%r137, %r1896, %r1733;
	add.s32 	%r1897, %r1896, %r1734;
	mul.lo.s32 	%r138, %r1897, %r1733;
	add.s32 	%r1898, %r1734, %r7330;
	mul.lo.s32 	%r139, %r1898, %r1733;
	add.s32 	%r1899, %r1898, %r1734;
	mul.lo.s32 	%r140, %r1899, %r1733;
	mul.lo.s32 	%r141, %r7330, %r1733;
	add.s32 	%r142, %r141, %r1733;
	add.s32 	%r143, %r7330, 1;
	add.s32 	%r1900, %r1734, %r143;
	mul.lo.s32 	%r144, %r1900, %r1733;
	add.s32 	%r1901, %r1900, %r1734;
	mul.lo.s32 	%r145, %r1901, %r1733;
	add.s32 	%r146, %r142, %r1733;
	add.s32 	%r147, %r7330, 2;
	add.s32 	%r1902, %r1734, %r147;
	mul.lo.s32 	%r148, %r1902, %r1733;
	add.s32 	%r1903, %r1902, %r1734;
	mul.lo.s32 	%r149, %r1903, %r1733;
	mov.u32 	%r7333, 0;
	mov.u64 	%rd564, %rd94;

$L__BB0_42:
	ld.global.nc.u32 	%r1904, [%rd564];
	cvt.rn.f64.s32 	%fd1, %r1904;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r151, %r1904, %r7329;
	setp.lt.s32 	%p48, %r151, %r1733;
	or.b32  	%r1905, %r131, %r151;
	setp.gt.s32 	%p49, %r1905, -1;
	and.pred  	%p50, %p48, %p49;
	setp.lt.s32 	%p51, %r131, %r1734;
	and.pred  	%p1, %p51, %p50;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p52, %f65, 0f40000000;
	@%p52 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1908, %r132, %r151;
	mul.wide.s32 	%rd95, %r1908, 4;
	add.s64 	%rd96, %rd11, %rd95;
	ld.global.f32 	%f68, [%rd96];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7332, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7332, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1909, %r7333, %r130;
	mul.wide.s32 	%rd97, %r1909, 4;
	add.s64 	%rd98, %rd12, %rd97;
	st.global.u32 	[%rd98], %r7332;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p53, %f3, 0f40000000;
	@%p53 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1912, %r133, %r151;
	mul.wide.s32 	%rd99, %r1912, 4;
	add.s64 	%rd100, %rd11, %rd99;
	ld.global.f32 	%f73, [%rd100];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7334, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7334, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1913, %r7333, %r130;
	mul.wide.s32 	%rd101, %r1913, 4;
	add.s64 	%rd102, %rd12, %rd101;
	st.global.u32 	[%rd102], %r7334;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p54, %f74, 0f40000000;
	@%p54 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1916, %r134, %r151;
	mul.wide.s32 	%rd103, %r1916, 4;
	add.s64 	%rd104, %rd11, %rd103;
	ld.global.f32 	%f77, [%rd104];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7336, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7336, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1917, %r7333, %r130;
	mul.wide.s32 	%rd105, %r1917, 4;
	add.s64 	%rd106, %rd12, %rd105;
	st.global.u32 	[%rd106], %r7336;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_57:
	or.b32  	%r1918, %r136, %r151;
	setp.gt.s32 	%p55, %r1918, -1;
	and.pred  	%p57, %p48, %p55;
	setp.le.s32 	%p58, %r7330, %r1734;
	and.pred  	%p2, %p58, %p57;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p59, %f4, 0f40000000;
	@%p59 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1921, %r135, %r151;
	mul.wide.s32 	%rd107, %r1921, 4;
	add.s64 	%rd108, %rd11, %rd107;
	ld.global.f32 	%f80, [%rd108];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7338, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7338, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1922, %r7333, %r130;
	mul.wide.s32 	%rd109, %r1922, 4;
	add.s64 	%rd110, %rd12, %rd109;
	st.global.u32 	[%rd110], %r7338;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p60, %f5, 0f40000000;
	@%p60 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1925, %r137, %r151;
	mul.wide.s32 	%rd111, %r1925, 4;
	add.s64 	%rd112, %rd11, %rd111;
	ld.global.f32 	%f83, [%rd112];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7340, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7340, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1926, %r7333, %r130;
	mul.wide.s32 	%rd113, %r1926, 4;
	add.s64 	%rd114, %rd12, %rd113;
	st.global.u32 	[%rd114], %r7340;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p61, %f6, 0f40000000;
	@%p61 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1929, %r138, %r151;
	mul.wide.s32 	%rd115, %r1929, 4;
	add.s64 	%rd116, %rd11, %rd115;
	ld.global.f32 	%f86, [%rd116];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7342, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1930, %r7333, %r130;
	mul.wide.s32 	%rd117, %r1930, 4;
	add.s64 	%rd118, %rd12, %rd117;
	st.global.u32 	[%rd118], %r7342;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_72:
	or.b32  	%r1931, %r7330, %r151;
	setp.gt.s32 	%p62, %r1931, -1;
	and.pred  	%p64, %p48, %p62;
	setp.lt.s32 	%p65, %r7330, %r1734;
	and.pred  	%p3, %p65, %p64;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p66, %f7, 0f40000000;
	@%p66 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1934, %r141, %r151;
	mul.wide.s32 	%rd119, %r1934, 4;
	add.s64 	%rd120, %rd11, %rd119;
	ld.global.f32 	%f89, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7344, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1935, %r7333, %r130;
	mul.wide.s32 	%rd121, %r1935, 4;
	add.s64 	%rd122, %rd12, %rd121;
	st.global.u32 	[%rd122], %r7344;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p67, %f90, 0f40000000;
	@%p67 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1938, %r139, %r151;
	mul.wide.s32 	%rd123, %r1938, 4;
	add.s64 	%rd124, %rd11, %rd123;
	ld.global.f32 	%f93, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7346, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7346, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1939, %r7333, %r130;
	mul.wide.s32 	%rd125, %r1939, 4;
	add.s64 	%rd126, %rd12, %rd125;
	st.global.u32 	[%rd126], %r7346;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p68, %f8, 0f40000000;
	@%p68 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1942, %r140, %r151;
	mul.wide.s32 	%rd127, %r1942, 4;
	add.s64 	%rd128, %rd11, %rd127;
	ld.global.f32 	%f96, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7348, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7348, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1943, %r7333, %r130;
	mul.wide.s32 	%rd129, %r1943, 4;
	add.s64 	%rd130, %rd12, %rd129;
	st.global.u32 	[%rd130], %r7348;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_87:
	or.b32  	%r1944, %r143, %r151;
	setp.gt.s32 	%p69, %r1944, -1;
	and.pred  	%p71, %p48, %p69;
	setp.lt.s32 	%p72, %r143, %r1734;
	and.pred  	%p4, %p72, %p71;
	@%p66 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1947, %r142, %r151;
	mul.wide.s32 	%rd131, %r1947, 4;
	add.s64 	%rd132, %rd11, %rd131;
	ld.global.f32 	%f99, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7350, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7350, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1948, %r7333, %r130;
	mul.wide.s32 	%rd133, %r1948, 4;
	add.s64 	%rd134, %rd12, %rd133;
	st.global.u32 	[%rd134], %r7350;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_92:
	@%p60 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1951, %r144, %r151;
	mul.wide.s32 	%rd135, %r1951, 4;
	add.s64 	%rd136, %rd11, %rd135;
	ld.global.f32 	%f102, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7352, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7352, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1952, %r7333, %r130;
	mul.wide.s32 	%rd137, %r1952, 4;
	add.s64 	%rd138, %rd12, %rd137;
	st.global.u32 	[%rd138], %r7352;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_97:
	@%p68 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1955, %r145, %r151;
	mul.wide.s32 	%rd139, %r1955, 4;
	add.s64 	%rd140, %rd11, %rd139;
	ld.global.f32 	%f105, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7354, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7354, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1956, %r7333, %r130;
	mul.wide.s32 	%rd141, %r1956, 4;
	add.s64 	%rd142, %rd12, %rd141;
	st.global.u32 	[%rd142], %r7354;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_102:
	or.b32  	%r1957, %r147, %r151;
	setp.gt.s32 	%p76, %r1957, -1;
	and.pred  	%p78, %p48, %p76;
	setp.lt.s32 	%p79, %r147, %r1734;
	and.pred  	%p5, %p79, %p78;
	@%p59 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1960, %r146, %r151;
	mul.wide.s32 	%rd143, %r1960, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f108, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7356, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7356, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1961, %r7333, %r130;
	mul.wide.s32 	%rd145, %r1961, 4;
	add.s64 	%rd146, %rd12, %rd145;
	st.global.u32 	[%rd146], %r7356;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_107:
	@%p53 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1964, %r148, %r151;
	mul.wide.s32 	%rd147, %r1964, 4;
	add.s64 	%rd148, %rd11, %rd147;
	ld.global.f32 	%f111, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7358, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7358, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1965, %r7333, %r130;
	mul.wide.s32 	%rd149, %r1965, 4;
	add.s64 	%rd150, %rd12, %rd149;
	st.global.u32 	[%rd150], %r7358;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_112:
	@%p61 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1968, %r149, %r151;
	mul.wide.s32 	%rd151, %r1968, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f114, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7360, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7360, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1969, %r7333, %r130;
	mul.wide.s32 	%rd153, %r1969, 4;
	add.s64 	%rd154, %rd12, %rd153;
	st.global.u32 	[%rd154], %r7360;
	add.s32 	%r7333, %r7333, 1;

$L__BB0_117:
	add.s64 	%rd564, %rd564, 4;
	mov.u64 	%rd155, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd156, %rd155, 24;
	setp.ne.s64 	%p83, %rd564, %rd156;
	@%p83 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7330, %r7330, %r42;
	setp.lt.s32 	%p84, %r7330, %r1734;
	@%p84 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7329, %r7329, %r1754;
	setp.lt.s32 	%p85, %r7329, %r1733;
	@%p85 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p86, %r1737, 1;
	ld.param.u64 	%rd157, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd157;
	ld.param.u64 	%rd158, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd158;
	@%p86 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r255, %r75, 1;
	shr.u32 	%r2017, %r1738, 31;
	add.s32 	%r2018, %r1738, %r2017;
	shr.u32 	%r2019, %r2018, 1;
	and.b32  	%r256, %r2019, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd259, %rd177, 24;

$L__BB0_140:
	setp.ge.s32 	%p96, %r255, %r1734;
	@%p96 bra 	$L__BB0_266;

	mov.u32 	%r7368, %r255;

$L__BB0_142:
	setp.ne.s32 	%p97, %r40, 0;
	@%p97 bra 	$L__BB0_265;

	shr.u32 	%r2021, %r7368, 31;
	add.s32 	%r2022, %r7368, %r2021;
	shr.s32 	%r2023, %r2022, 1;
	mad.lo.s32 	%r2024, %r2023, %r1733, %r7362;
	shl.b32 	%r260, %r2024, 5;
	add.s32 	%r261, %r7368, -2;
	mul.lo.s32 	%r262, %r261, %r1733;
	add.s32 	%r2025, %r1734, %r261;
	mul.lo.s32 	%r263, %r2025, %r1733;
	add.s32 	%r264, %r262, %r1733;
	add.s32 	%r265, %r7368, -1;
	add.s32 	%r2026, %r1734, %r265;
	mul.lo.s32 	%r266, %r2026, %r1733;
	add.s32 	%r2027, %r1734, %r7368;
	mul.lo.s32 	%r267, %r2027, %r1733;
	mul.lo.s32 	%r268, %r7368, %r1733;
	add.s32 	%r269, %r268, %r1733;
	add.s32 	%r270, %r7368, 1;
	add.s32 	%r2028, %r1734, %r270;
	mul.lo.s32 	%r271, %r2028, %r1733;
	add.s32 	%r272, %r269, %r1733;
	add.s32 	%r273, %r7368, 2;
	add.s32 	%r2029, %r1734, %r273;
	mul.lo.s32 	%r274, %r2029, %r1733;
	mov.u32 	%r7372, 0;
	mov.u64 	%rd565, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r2030, [%rd565];
	cvt.rn.f64.s32 	%fd2, %r2030;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r276, %r2030, %r7362;
	setp.lt.s32 	%p98, %r276, %r1733;
	or.b32  	%r2031, %r261, %r276;
	setp.gt.s32 	%p99, %r2031, -1;
	and.pred  	%p100, %p98, %p99;
	setp.lt.s32 	%p101, %r261, %r1734;
	and.pred  	%p6, %p101, %p100;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p102, %f133, 0f40000000;
	@%p102 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p103, %r256, 0;
	add.s32 	%r2033, %r262, %r276;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd178, %r2034, 4;
	add.s64 	%rd179, %rd15, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p103 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7370, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r281, %r7372, %r260;
	mul.wide.s32 	%rd180, %r281, 4;
	add.s64 	%rd181, %rd16, %rd180;
	st.global.u32 	[%rd181], %r7370;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p104, %r256, 0;
	add.s32 	%r2038, %r263, %r276;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd182, %r2039, 4;
	add.s64 	%rd183, %rd15, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p104 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7371, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7371, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7371, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2042, %r281, 1;
	mul.wide.s32 	%rd184, %r2042, 4;
	add.s64 	%rd185, %rd16, %rd184;
	st.global.u32 	[%rd185], %r7371;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p105, %f13, 0f40000000;
	@%p105 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p106, %r256, 0;
	add.s32 	%r2044, %r262, %r276;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd186, %r2046, 4;
	add.s64 	%rd187, %rd15, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p106 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7373, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7373, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7373, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r292, %r7372, %r260;
	mul.wide.s32 	%rd188, %r292, 4;
	add.s64 	%rd189, %rd16, %rd188;
	st.global.u32 	[%rd189], %r7373;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p107, %r256, 0;
	add.s32 	%r2050, %r263, %r276;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd190, %r2052, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p107 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7374, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2055, %r292, 1;
	mul.wide.s32 	%rd192, %r2055, 4;
	add.s64 	%rd193, %rd16, %rd192;
	st.global.u32 	[%rd193], %r7374;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_168:
	or.b32  	%r2056, %r265, %r276;
	setp.gt.s32 	%p108, %r2056, -1;
	and.pred  	%p110, %p98, %p108;
	setp.le.s32 	%p111, %r7368, %r1734;
	and.pred  	%p7, %p111, %p110;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p112, %f16, 0f40000000;
	@%p112 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p113, %r256, 0;
	add.s32 	%r2058, %r264, %r276;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd194, %r2059, 4;
	add.s64 	%rd195, %rd15, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p113 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7376, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7376, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7376, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r303, %r7372, %r260;
	mul.wide.s32 	%rd196, %r303, 4;
	add.s64 	%rd197, %rd16, %rd196;
	st.global.u32 	[%rd197], %r7376;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p114, %r256, 0;
	add.s32 	%r2063, %r266, %r276;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd198, %r2064, 4;
	add.s64 	%rd199, %rd15, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p114 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7377, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2067, %r303, 1;
	mul.wide.s32 	%rd200, %r2067, 4;
	add.s64 	%rd201, %rd16, %rd200;
	st.global.u32 	[%rd201], %r7377;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p115, %f19, 0f40000000;
	@%p115 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p116, %r256, 0;
	add.s32 	%r2069, %r264, %r276;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd202, %r2071, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p116 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7379, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7379, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7379, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r314, %r7372, %r260;
	mul.wide.s32 	%rd204, %r314, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7379;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p117, %r256, 0;
	add.s32 	%r2075, %r266, %r276;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd206, %r2077, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p117 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7380, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7380, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7380, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2080, %r314, 1;
	mul.wide.s32 	%rd208, %r2080, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7380;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_192:
	or.b32  	%r2081, %r7368, %r276;
	setp.gt.s32 	%p118, %r2081, -1;
	and.pred  	%p120, %p98, %p118;
	setp.lt.s32 	%p121, %r7368, %r1734;
	and.pred  	%p8, %p121, %p120;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p122, %f22, 0f40000000;
	@%p122 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p123, %r256, 0;
	add.s32 	%r2083, %r268, %r276;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd210, %r2084, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p123 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7382, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7382, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7382, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r325, %r7372, %r260;
	mul.wide.s32 	%rd212, %r325, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7382;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p124, %r256, 0;
	add.s32 	%r2088, %r267, %r276;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd214, %r2089, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p124 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7383, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2092, %r325, 1;
	mul.wide.s32 	%rd216, %r2092, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7383;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p125, %f196, 0f40000000;
	@%p125 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p126, %r256, 0;
	add.s32 	%r2094, %r268, %r276;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd218, %r2096, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p126 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7385, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r336, %r7372, %r260;
	mul.wide.s32 	%rd220, %r336, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7385;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p127, %r256, 0;
	add.s32 	%r2100, %r267, %r276;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd222, %r2102, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p127 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7386, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2105, %r336, 1;
	mul.wide.s32 	%rd224, %r2105, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7386;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_216:
	or.b32  	%r2106, %r270, %r276;
	setp.gt.s32 	%p128, %r2106, -1;
	and.pred  	%p130, %p98, %p128;
	setp.lt.s32 	%p131, %r270, %r1734;
	and.pred  	%p9, %p131, %p130;
	@%p122 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p133, %r256, 0;
	add.s32 	%r2108, %r269, %r276;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd226, %r2109, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p133 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7388, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r347, %r7372, %r260;
	mul.wide.s32 	%rd228, %r347, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7388;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p134, %r256, 0;
	add.s32 	%r2113, %r271, %r276;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd230, %r2114, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p134 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7389, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2117, %r347, 1;
	mul.wide.s32 	%rd232, %r2117, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7389;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_228:
	@%p115 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p136, %r256, 0;
	add.s32 	%r2119, %r269, %r276;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd234, %r2121, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p136 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7391, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7391, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7391, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r358, %r7372, %r260;
	mul.wide.s32 	%rd236, %r358, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7391;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p137, %r256, 0;
	add.s32 	%r2125, %r271, %r276;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd238, %r2127, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p137 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7392, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2130, %r358, 1;
	mul.wide.s32 	%rd240, %r2130, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7392;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_240:
	or.b32  	%r2131, %r273, %r276;
	setp.gt.s32 	%p138, %r2131, -1;
	and.pred  	%p140, %p98, %p138;
	setp.lt.s32 	%p141, %r273, %r1734;
	and.pred  	%p10, %p141, %p140;
	@%p112 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p143, %r256, 0;
	add.s32 	%r2133, %r272, %r276;
	shl.b32 	%r2134, %r2133, 1;
	mul.wide.s32 	%rd242, %r2134, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p143 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7394, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r369, %r7372, %r260;
	mul.wide.s32 	%rd244, %r369, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7394;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p144, %r256, 0;
	add.s32 	%r2138, %r274, %r276;
	shl.b32 	%r2139, %r2138, 1;
	mul.wide.s32 	%rd246, %r2139, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p144 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7395, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2142, %r369, 1;
	mul.wide.s32 	%rd248, %r2142, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7395;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_252:
	@%p105 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p146, %r256, 0;
	add.s32 	%r2144, %r272, %r276;
	shl.b32 	%r2145, %r2144, 1;
	or.b32  	%r2146, %r2145, 1;
	mul.wide.s32 	%rd250, %r2146, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p146 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7397, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r380, %r7372, %r260;
	mul.wide.s32 	%rd252, %r380, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7397;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p147, %r256, 0;
	add.s32 	%r2150, %r274, %r276;
	shl.b32 	%r2151, %r2150, 1;
	or.b32  	%r2152, %r2151, 1;
	mul.wide.s32 	%rd254, %r2152, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p147 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7398, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2155, %r380, 1;
	mul.wide.s32 	%rd256, %r2155, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7398;
	add.s32 	%r7372, %r7372, 2;

$L__BB0_264:
	add.s64 	%rd565, %rd565, 4;
	setp.ne.s64 	%p148, %rd565, %rd259;
	@%p148 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7368, %r7368, %r42;
	setp.lt.s32 	%p149, %r7368, %r1734;
	@%p149 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7362, %r7362, %r1754;
	setp.lt.s32 	%p150, %r7362, %r1733;
	@%p150 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r229, %r74;
	mov.u32 	%r1970, 31;
	sub.s32 	%r1971, %r1970, %r40;
	setp.gt.s32 	%p88, %r39, %r40;
	selp.b32 	%r1972, %r40, %r1971, %p88;
	shl.b32 	%r1973, %r1972, 2;
	mov.u32 	%r1974, 2;
	sub.s32 	%r230, %r1973, %r1736;
	shl.b32 	%r1975, %r1735, 2;
	mov.u32 	%r1976, 128;
	sub.s32 	%r231, %r1976, %r1975;
	sub.s32 	%r1977, %r1974, %r1736;
	add.s32 	%r232, %r1977, %r1973;
	add.s32 	%r233, %r1733, -1;
	add.s32 	%r234, %r230, 1;
	add.s32 	%r235, %r232, 1;
	rem.s32 	%r2002, %r234, %r231;
	add.s32 	%r2003, %r2002, %r231;
	rem.s32 	%r246, %r2003, %r231;
	rem.s32 	%r2004, %r235, %r231;
	add.s32 	%r2005, %r2004, %r231;
	rem.s32 	%r247, %r2005, %r231;

$L__BB0_123:
	setp.ne.s32 	%p89, %r36, %r229;
	@%p89 bra 	$L__BB0_137;

	shl.b32 	%r237, %r7362, 1;
	rem.s32 	%r1978, %r230, %r231;
	add.s32 	%r1979, %r1978, %r231;
	rem.s32 	%r238, %r1979, %r231;
	rem.s32 	%r1980, %r232, %r231;
	add.s32 	%r1981, %r1980, %r231;
	rem.s32 	%r239, %r1981, %r231;
	@%p88 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1984, %r237, %r231;
	add.s32 	%r1985, %r1984, %r238;
	mul.wide.s32 	%rd159, %r1985, 4;
	add.s64 	%rd160, %rd15, %rd159;
	ld.global.f32 	%f117, [%rd160];
	add.s32 	%r1986, %r1984, %r239;
	mul.wide.s32 	%rd161, %r1986, 4;
	add.s64 	%rd162, %rd15, %rd161;
	ld.global.f32 	%f118, [%rd162];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7363, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7363, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1987, %r7362, 5;
	add.s32 	%r1988, %r1987, %r40;
	shl.b32 	%r1989, %r1988, 2;
	mul.wide.s32 	%rd163, %r1989, 4;
	add.s64 	%rd17, %rd16, %rd163;
	st.global.u32 	[%rd17], %r7363;
	@%p88 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1992, %r237, 1;
	mul.lo.s32 	%r1993, %r1992, %r231;
	add.s32 	%r1994, %r1993, %r238;
	mul.wide.s32 	%rd164, %r1994, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f121, [%rd165];
	add.s32 	%r1995, %r1993, %r239;
	mul.wide.s32 	%rd166, %r1995, 4;
	add.s64 	%rd167, %rd15, %rd166;
	ld.global.f32 	%f122, [%rd167];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7364, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7364, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1996, %r233, %r7362;
	rem.s32 	%r1997, %r1996, %r1733;
	shl.b32 	%r1998, %r1997, 5;
	add.s32 	%r1999, %r1998, %r40;
	shl.b32 	%r2000, %r1999, 2;
	or.b32  	%r2001, %r2000, 2;
	mul.wide.s32 	%rd168, %r2001, 4;
	add.s64 	%rd18, %rd16, %rd168;
	st.global.u32 	[%rd18], %r7364;
	@%p88 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r2008, %r237, %r231;
	add.s32 	%r2009, %r2008, %r246;
	mul.wide.s32 	%rd169, %r2009, 4;
	add.s64 	%rd170, %rd15, %rd169;
	ld.global.f32 	%f125, [%rd170];
	add.s32 	%r2010, %r2008, %r247;
	mul.wide.s32 	%rd171, %r2010, 4;
	add.s64 	%rd172, %rd15, %rd171;
	ld.global.f32 	%f126, [%rd172];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7365, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7365, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd17+4], %r7365;
	@%p88 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2013, %r237, 1;
	mul.lo.s32 	%r2014, %r2013, %r231;
	add.s32 	%r2015, %r2014, %r246;
	mul.wide.s32 	%rd173, %r2015, 4;
	add.s64 	%rd174, %rd15, %rd173;
	ld.global.f32 	%f129, [%rd174];
	add.s32 	%r2016, %r2014, %r247;
	mul.wide.s32 	%rd175, %r2016, 4;
	add.s64 	%rd176, %rd15, %rd175;
	ld.global.f32 	%f130, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7366, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7366, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd18+4], %r7366;

$L__BB0_137:
	add.s32 	%r7362, %r7362, %r1754;
	setp.lt.s32 	%p94, %r7362, %r1733;
	@%p94 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2157, %r1728, -1;
	mad.lo.s32 	%r2158, %r1729, 576, 128;
	mul.lo.s32 	%r2159, %r2158, %r2157;
	add.s32 	%r2160, %r69, -64;
	add.s32 	%r2161, %r2160, %r69;
	add.s32 	%r2162, %r1729, -1;
	mad.lo.s32 	%r2163, %r2161, %r2162, %r2159;
	mul.lo.s32 	%r2164, %r2157, %r1729;
	mul.lo.s32 	%r2165, %r2164, 320;
	mad.lo.s32 	%r2166, %r2160, %r2162, %r2165;
	add.s32 	%r389, %r2166, %r2163;
	setp.lt.s32 	%p151, %r389, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7581, {low,high};}

	// end inline asm
	@%p151 bra 	$L__BB0_270;

	mov.u32 	%r7402, 0;
	mov.u32 	%r7400, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7400], %r7581;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2169, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7400+4], %r2169;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2170, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7400+8], %r2170;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2171, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7400+12], %r2171;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7581, {low,high};}

	// end inline asm
	add.s32 	%r7400, %r7400, 16;
	add.s32 	%r7402, %r7402, 4;
	setp.lt.s32 	%p152, %r7402, %r389;
	@%p152 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7582, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2174, {low,high};}

	// end inline asm
	ld.param.u64 	%rd260, [%rd1+152];
	cvta.to.global.u64 	%rd21, %rd260;
	mov.u32 	%r2175, 31;
	sub.s32 	%r2176, %r2175, %r40;
	setp.gt.s32 	%p153, %r39, %r40;
	selp.b32 	%r2177, %r40, %r2176, %p153;
	shl.b32 	%r2178, %r2177, 2;
	sub.s32 	%r400, %r2178, %r1736;
	shl.b32 	%r2179, %r1735, 2;
	mov.u32 	%r2180, 128;
	sub.s32 	%r401, %r2180, %r2179;
	rem.s32 	%r2181, %r400, %r401;
	add.s32 	%r2182, %r2181, %r401;
	rem.s32 	%r402, %r2182, %r401;
	add.s32 	%r2183, %r400, 2;
	rem.s32 	%r2184, %r2183, %r401;
	add.s32 	%r2185, %r2184, %r401;
	rem.s32 	%r403, %r2185, %r401;
	mul.lo.s32 	%r2186, %r402, 6;
	mul.lo.s32 	%r2187, %r403, 6;
	mul.wide.s32 	%rd261, %r2186, 4;
	add.s64 	%rd22, %rd21, %rd261;
	mul.wide.s32 	%rd262, %r2187, 4;
	add.s64 	%rd23, %rd21, %rd262;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd22];
	ld.global.f32 	%f274, [%rd22+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd23+8];
	ld.global.f32 	%f276, [%rd23];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7404, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd22+4];
	ld.global.f32 	%f282, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd22];
	ld.global.f32 	%f280, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7405, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7406, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd22+20];
	ld.global.f32 	%f286, [%rd22+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd23+20];
	ld.global.f32 	%f288, [%rd23+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7406, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd22+16];
	ld.global.f32 	%f294, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd22+12];
	ld.global.f32 	%f292, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7407, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2196, %r400, 1;
	rem.s32 	%r2197, %r2196, %r401;
	add.s32 	%r2198, %r2197, %r401;
	rem.s32 	%r416, %r2198, %r401;
	add.s32 	%r2199, %r400, 3;
	rem.s32 	%r2200, %r2199, %r401;
	add.s32 	%r2201, %r2200, %r401;
	rem.s32 	%r417, %r2201, %r401;
	mul.lo.s32 	%r2202, %r416, 6;
	mul.lo.s32 	%r2203, %r417, 6;
	mul.wide.s32 	%rd263, %r2202, 4;
	add.s64 	%rd24, %rd21, %rd263;
	mul.wide.s32 	%rd264, %r2203, 4;
	add.s64 	%rd25, %rd21, %rd264;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd24];
	ld.global.f32 	%f298, [%rd24+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd25+8];
	ld.global.f32 	%f300, [%rd25];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7408, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd24+4];
	ld.global.f32 	%f306, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd24];
	ld.global.f32 	%f304, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7409, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd24+20];
	ld.global.f32 	%f310, [%rd24+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd25+20];
	ld.global.f32 	%f312, [%rd25+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd24+16];
	ld.global.f32 	%f318, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd24+12];
	ld.global.f32 	%f316, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7411, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2212, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd265, %r2212;
	// begin inline asm
	mov.u32 %r2213, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd266, %r2213;
	bfi.b64 	%rd26, %rd266, %rd265, 32, 32;
	setp.ne.s64 	%p162, %rd26, 0;
	@%p162 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd27, %rd26, 4;
	mov.u32 	%r2214, %nctaid.y;
	mov.u32 	%r2215, %nctaid.x;
	mul.lo.s32 	%r2216, %r2215, %r2214;
	mov.u32 	%r2217, %nctaid.z;
	mul.lo.s32 	%r430, %r2216, %r2217;
	neg.s32 	%r2218, %r36;
	add.s32 	%r2219, %r40, %r35;
	setp.ne.s32 	%p163, %r2219, %r2218;
	mov.u32 	%r2220, %ctaid.x;
	add.s32 	%r431, %r2220, %r37;
	neg.s32 	%r432, %r38;
	bar.sync 	0;
	@%p163 bra 	$L__BB0_300;

	setp.eq.s32 	%p164, %r431, %r432;
	mov.u32 	%r2223, -2147483647;
	sub.s32 	%r2224, %r2223, %r430;
	selp.b32 	%r2222, %r2224, 1, %p164;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2221,[%rd27],%r2222;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2225, [%rd27];
	xor.b32  	%r2226, %r2225, %r2221;
	setp.gt.s32 	%p165, %r2226, -1;
	@%p165 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2227,[%rd27];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p166, %r43, 1;
	@%p166 bra 	$L__BB0_864;

	shr.s32 	%r2241, %r1738, 31;
	shr.u32 	%r2242, %r2241, 30;
	add.s32 	%r2243, %r1738, %r2242;
	shr.s32 	%r434, %r2243, 2;
	add.s32 	%r2244, %r40, 31;
	shr.s32 	%r2245, %r2244, 31;
	shr.u32 	%r2246, %r2245, 27;
	add.s32 	%r2247, %r2244, %r2246;
	and.b32  	%r2248, %r2247, -32;
	sub.s32 	%r2249, %r2244, %r2248;
	add.s32 	%r2250, %r40, 33;
	shr.s32 	%r2251, %r2250, 31;
	shr.u32 	%r2252, %r2251, 27;
	add.s32 	%r2253, %r2250, %r2252;
	and.b32  	%r2254, %r2253, -32;
	sub.s32 	%r2255, %r2250, %r2254;
	shr.u32 	%r2256, %r1738, 31;
	add.s32 	%r2257, %r1738, %r2256;
	and.b32  	%r2258, %r2257, -2;
	sub.s32 	%r435, %r1738, %r2258;
	setp.lt.s32 	%p167, %r40, 32;
	selp.b32 	%r436, %r2249, %r40, %p167;
	setp.lt.s32 	%p168, %r402, %r1747;
	setp.ge.s32 	%p169, %r402, %r1746;
	and.pred  	%p11, %p168, %p169;
	setp.lt.s32 	%p170, %r416, %r1747;
	setp.ge.s32 	%p171, %r416, %r1746;
	and.pred  	%p12, %p170, %p171;
	setp.lt.s32 	%p172, %r403, %r1747;
	setp.ge.s32 	%p173, %r403, %r1746;
	and.pred  	%p13, %p172, %p173;
	setp.lt.s32 	%p174, %r417, %r1747;
	setp.ge.s32 	%p175, %r417, %r1746;
	and.pred  	%p14, %p174, %p175;
	selp.b32 	%r437, %r2255, %r40, %p167;
	mov.u32 	%r2240, 0;
	// begin inline asm
	{mov.u32 %r2259, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2585, %r2259, 8;
	add.s32 	%r2586, %r2585, -8192;
	or.b32  	%r2263, %r2586, 31;
	mul.wide.s32 	%rd277, %r40, 16;
	mul.wide.s32 	%rd279, %r40, 8;
	mov.u32 	%r7412, %r2240;
	mov.u32 	%r7413, %r2240;
	mov.u32 	%r7414, %r2240;
	mov.u32 	%r7415, %r2240;
	mov.u32 	%r7416, %r2240;
	mov.u32 	%r7417, %r2240;
	mov.u32 	%r7418, %r2240;
	mov.u32 	%r7419, %r2240;
	mov.u32 	%r7420, %r2240;
	mov.u32 	%r7421, %r2240;
	mov.u32 	%r7422, %r2240;
	mov.u32 	%r7423, %r2240;
	mov.u32 	%r7711, %r2174;
	mov.u32 	%r7712, %r2174;
	mov.u32 	%r7709, %r2174;
	mov.u32 	%r7710, %r2174;
	mov.u32 	%r7731, %r2174;
	mov.u32 	%r7732, %r2174;
	mov.u32 	%r7745, %r2174;
	mov.u32 	%r7733, %r2174;
	mov.u32 	%r7747, %r2174;
	mov.u32 	%r7734, %r2174;
	mov.u32 	%r7735, %r2174;
	mov.u32 	%r7736, %r2174;
	mov.u32 	%r7737, %r2174;
	mov.u32 	%r7738, %r2174;
	mov.u32 	%r7739, %r2174;
	mov.u32 	%r7740, %r2174;
	mov.u32 	%r7749, %r2174;
	mov.u32 	%r7750, %r2174;
	mov.u32 	%r7751, %r2174;
	mov.u32 	%r7752, %r2174;
	mov.u32 	%r7753, %r2174;
	mov.u32 	%r7754, %r2174;
	mov.u32 	%r7741, %r2174;
	mov.u32 	%r7742, %r2174;
	mov.u32 	%r7755, %r2174;
	mov.u32 	%r7756, %r2174;
	mov.u32 	%r7743, %r2174;
	mov.u32 	%r7744, %r2174;
	mov.u32 	%r7713, %r2174;
	mov.u32 	%r7714, %r2174;
	mov.u32 	%r7701, %r2174;
	mov.u32 	%r7702, %r2174;
	mov.u32 	%r7703, %r2174;
	mov.u32 	%r7704, %r2174;
	mov.u32 	%r7715, %r2174;
	mov.u32 	%r7716, %r2174;
	mov.u32 	%r7717, %r2174;
	mov.u32 	%r7718, %r2174;
	mov.u32 	%r7719, %r2174;
	mov.u32 	%r7720, %r2174;
	mov.u32 	%r7705, %r2174;
	mov.u32 	%r7706, %r2174;
	mov.u32 	%r7707, %r2174;
	mov.u32 	%r7708, %r2174;
	mov.u32 	%r7721, %r2174;
	mov.u32 	%r7722, %r2174;
	mov.u32 	%r7723, %r2174;
	mov.u32 	%r7724, %r2174;
	mov.u32 	%r7472, %r2174;
	mov.u32 	%r7473, %r2174;
	mov.u32 	%r7771, %r2174;
	mov.u32 	%r7772, %r2174;
	mov.u32 	%r7478, %r2174;
	mov.u32 	%r7479, %r2174;
	mov.u32 	%r7480, %r2174;
	mov.u32 	%r7481, %r2174;
	mov.u32 	%r7773, %r2174;
	mov.u32 	%r7774, %r2174;
	mov.u32 	%r7484, %r2174;
	mov.u32 	%r7775, %r2174;
	mov.u32 	%r7486, %r2174;
	mov.u32 	%r7487, %r2174;
	mov.u32 	%r7776, %r2174;
	mov.u32 	%r7489, %r2174;
	mov.u32 	%r7490, %r2174;
	mov.u32 	%r7491, %r2174;
	mov.u32 	%r7725, %r2174;
	mov.u32 	%r7726, %r2174;
	mov.u32 	%r7494, %r2174;
	mov.u32 	%r7495, %r2174;
	mov.u32 	%r7498, %r2174;
	mov.u32 	%r7499, %r2174;
	mov.u32 	%r7500, %r2174;
	mov.u32 	%r7501, %r2174;
	mov.u32 	%r7502, %r2174;
	mov.u32 	%r7780, %r2174;
	mov.u32 	%r7504, %r2174;
	mov.u32 	%r7505, %r2174;
	mov.u32 	%r7506, %r2174;
	mov.u32 	%r7507, %r2174;
	mov.u32 	%r7508, %r2174;
	mov.u32 	%r7509, %r2174;
	mov.u32 	%r7510, %r2174;
	mov.u32 	%r7782, %r2174;
	mov.u32 	%r7512, %r2174;
	mov.u32 	%r7513, %r2174;
	mov.u32 	%r7514, %r2174;
	mov.u32 	%r7783, %r2174;
	mov.u32 	%r7516, %r2174;
	mov.u32 	%r7517, %r2174;
	mov.u32 	%r7518, %r2174;
	mov.u32 	%r7519, %r2174;
	mov.u32 	%r7520, %r2174;
	mov.u32 	%r7521, %r2174;
	mov.u32 	%r7522, %r2174;
	mov.u32 	%r7784, %r2174;
	mov.u32 	%r7524, %r2174;
	mov.u32 	%r7727, %r2174;
	mov.u32 	%r7526, %r2174;
	mov.u32 	%r7527, %r2174;
	mov.u32 	%r7528, %r2174;
	mov.u32 	%r7529, %r2174;
	mov.u32 	%r7728, %r2174;
	mov.u32 	%r7531, %r2174;
	mov.u32 	%r7532, %r2174;
	mov.u32 	%r7533, %r2174;
	mov.u32 	%r7534, %r2174;
	mov.u32 	%r7535, %r2174;
	mov.u32 	%r7536, %r2174;
	mov.u32 	%r7537, %r2174;
	mov.u32 	%r7538, %r2174;
	mov.u32 	%r7539, %r2174;
	mov.u32 	%r7540, %r2174;
	mov.u32 	%r7541, %r2174;
	mov.u32 	%r7542, %r2174;
	mov.u32 	%r7543, %r2174;
	mov.u32 	%r7544, %r2174;
	mov.u32 	%r7545, %r2174;
	mov.u32 	%r7546, %r2174;
	mov.u32 	%r7547, %r2174;
	mov.u32 	%r7548, %r2174;
	mov.u32 	%r7549, %r2174;
	mov.u32 	%r7550, %r2174;
	mov.u32 	%r7551, %r2174;
	mov.u32 	%r7552, %r2174;
	mov.u32 	%r7553, %r2174;
	mov.u32 	%r7554, %r2174;
	mov.u32 	%r7555, %r2174;
	mov.u32 	%r7556, %r2174;
	mov.u32 	%r7557, %r2174;
	mov.u32 	%r7558, %r2174;
	mov.u32 	%r7559, %r2174;
	mov.u32 	%r7560, %r2174;
	mov.u32 	%r7561, %r2174;
	mov.u32 	%r7562, %r2174;
	mov.u32 	%r7563, %r2174;
	mov.u32 	%r7564, %r2174;
	mov.u32 	%r7565, %r2174;
	mov.u32 	%r7566, %r2174;
	mov.u32 	%r7567, %r2174;
	mov.u32 	%r7568, %r2174;
	mov.u32 	%r7569, %r2174;
	mov.u32 	%r7570, %r2174;
	mov.u32 	%r7571, %r2174;
	mov.u32 	%r7572, %r2174;
	mov.u32 	%r7573, %r2174;
	mov.u32 	%r7574, %r2174;
	mov.u32 	%r7575, %r2174;
	mov.u32 	%r7576, %r2174;
	mov.u32 	%r7577, %r2174;
	mov.u32 	%r7578, %r2174;
	mov.u32 	%r7579, %r2174;
	mov.u32 	%r7580, %r2240;

$L__BB0_302:
	mov.u32 	%r549, %r7784;
	mov.u32 	%r545, %r7519;
	mov.u32 	%r541, %r7783;
	mov.u32 	%r539, %r7513;
	mov.u32 	%r537, %r7782;
	mov.u32 	%r529, %r7780;
	mov.u32 	%r7519, %r7776;
	mov.u32 	%r511, %r7775;
	mov.u32 	%r7513, %r7774;
	mov.u32 	%r508, %r7773;
	mov.u32 	%r503, %r7772;
	mov.u32 	%r502, %r7771;
	sub.s32 	%r7303, %r1733, %r42;
	mov.u32 	%r2274, 1;
	not.b32 	%r2548, %r37;
	mov.u32 	%r2540, -1;
	add.s32 	%r2549, %r1730, %r2548;
	mul.lo.s32 	%r2550, %r2549, %r1732;
	add.s32 	%r2551, %r7580, %r2550;
	not.b32 	%r2553, %r38;
	add.s32 	%r2554, %r1731, %r2553;
	mul.lo.s32 	%r2555, %r2554, %r1732;
	add.s32 	%r2556, %r7580, %r2555;
	add.s32 	%r2557, %r2550, %r2555;
	add.s32 	%r2558, %r2557, %r1733;
	not.b32 	%r2559, %r35;
	add.s32 	%r2560, %r1728, %r2559;
	mad.lo.s32 	%r2561, %r2549, %r1728, %r2560;
	not.b32 	%r2562, %r36;
	add.s32 	%r2563, %r1729, %r2562;
	mad.lo.s32 	%r2564, %r2554, %r1729, %r2563;
	add.s32 	%r2565, %r2561, %r2564;
	shl.b32 	%r2566, %r2565, 1;
	add.s32 	%r2567, %r2558, %r2566;
	add.s32 	%r2568, %r7580, %r2567;
	add.s32 	%r2569, %r7580, %r2557;
	div.s32 	%r2570, %r2568, %r1733;
	neg.s32 	%r2571, %r1733;
	sub.s32 	%r2574, %r42, %r1733;
	sub.s32 	%r2575, %r2561, %r2564;
	shl.b32 	%r2576, %r2575, 1;
	add.s32 	%r2577, %r2576, %r1734;
	mad.lo.s32 	%r2578, %r2570, %r42, %r2577;
	mad.lo.s32 	%r2579, %r2570, %r2574, %r2569;
	div.s32 	%r2580, %r2578, %r1734;
	mul.lo.s32 	%r2581, %r2580, %r1734;
	sub.s32 	%r2584, %r1755, %r1734;
	mov.u32 	%r2358, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2260,%r7582,%r2240,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2266, %r7405, %r2260, %p15;
	// begin inline asm
	{mul.f16x2 %r7666,%r2266,%r7579;
}
	// end inline asm
	selp.b32 	%r2269, %r7409, %r2260, %p15;
	// begin inline asm
	{mul.f16x2 %r7664,%r2269,%r7578;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2272,%r7582,%r2274,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2278, %r7405, %r2272, %p15;
	// begin inline asm
	{mul.f16x2 %r7665,%r2278,%r7577;
}
	// end inline asm
	selp.b32 	%r2281, %r7409, %r2272, %p15;
	// begin inline asm
	{mul.f16x2 %r7663,%r2281,%r7576;
}
	// end inline asm
	mov.u32 	%r2286, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2284,%r7582,%r2286,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2290, %r7405, %r2284, %p15;
	// begin inline asm
	{mul.f16x2 %r7662,%r2290,%r7575;
}
	// end inline asm
	selp.b32 	%r2293, %r7409, %r2284, %p15;
	// begin inline asm
	{mul.f16x2 %r7661,%r2293,%r7574;
}
	// end inline asm
	mov.u32 	%r2298, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2296,%r7582,%r2298,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2302, %r7405, %r2296, %p15;
	// begin inline asm
	{mul.f16x2 %r7660,%r2302,%r7756;
}
	// end inline asm
	selp.b32 	%r2305, %r7409, %r2296, %p15;
	// begin inline asm
	{mul.f16x2 %r7658,%r2305,%r7755;
}
	// end inline asm
	mov.u32 	%r2310, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2308,%r7582,%r2310,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2314, %r7405, %r2308, %p15;
	// begin inline asm
	{mul.f16x2 %r7659,%r2314,%r7573;
}
	// end inline asm
	selp.b32 	%r2317, %r7409, %r2308, %p15;
	// begin inline asm
	{mul.f16x2 %r7657,%r2317,%r7572;
}
	// end inline asm
	mov.u32 	%r2322, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2320,%r7582,%r2322,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2326, %r7405, %r2320, %p15;
	// begin inline asm
	{mul.f16x2 %r7656,%r2326,%r7571;
}
	// end inline asm
	selp.b32 	%r2329, %r7409, %r2320, %p15;
	// begin inline asm
	{mul.f16x2 %r7653,%r2329,%r7570;
}
	// end inline asm
	mov.u32 	%r2334, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2332,%r7582,%r2334,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2338, %r7405, %r2332, %p15;
	// begin inline asm
	{mul.f16x2 %r7655,%r2338,%r7569;
}
	// end inline asm
	selp.b32 	%r2341, %r7409, %r2332, %p15;
	// begin inline asm
	{mul.f16x2 %r7652,%r2341,%r7568;
}
	// end inline asm
	mov.u32 	%r2346, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2344,%r7582,%r2346,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2350, %r7405, %r2344, %p15;
	// begin inline asm
	{mul.f16x2 %r7654,%r2350,%r7567;
}
	// end inline asm
	selp.b32 	%r2353, %r7409, %r2344, %p15;
	// begin inline asm
	{mul.f16x2 %r7651,%r2353,%r7566;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2356,%r7582,%r2358,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2362, %r7405, %r2356, %p15;
	// begin inline asm
	{mul.f16x2 %r7650,%r2362,%r7565;
}
	// end inline asm
	selp.b32 	%r2365, %r7409, %r2356, %p15;
	// begin inline asm
	{mul.f16x2 %r7647,%r2365,%r7564;
}
	// end inline asm
	mov.u32 	%r2370, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2368,%r7582,%r2370,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2374, %r7405, %r2368, %p15;
	// begin inline asm
	{mul.f16x2 %r7649,%r2374,%r7563;
}
	// end inline asm
	selp.b32 	%r2377, %r7409, %r2368, %p15;
	// begin inline asm
	{mul.f16x2 %r7646,%r2377,%r7562;
}
	// end inline asm
	mov.u32 	%r2382, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2380,%r7582,%r2382,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2386, %r7405, %r2380, %p15;
	// begin inline asm
	{mul.f16x2 %r7648,%r2386,%r7561;
}
	// end inline asm
	selp.b32 	%r2389, %r7409, %r2380, %p15;
	// begin inline asm
	{mul.f16x2 %r7645,%r2389,%r7560;
}
	// end inline asm
	mov.u32 	%r2394, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2392,%r7582,%r2394,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2398, %r7405, %r2392, %p15;
	// begin inline asm
	{mul.f16x2 %r7644,%r2398,%r7742;
}
	// end inline asm
	selp.b32 	%r2401, %r7409, %r2392, %p15;
	// begin inline asm
	{mul.f16x2 %r7643,%r2401,%r7741;
}
	// end inline asm
	mov.u32 	%r2406, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2404,%r7582,%r2406,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2410, %r7405, %r2404, %p15;
	// begin inline asm
	{mul.f16x2 %r7642,%r2410,%r7754;
}
	// end inline asm
	selp.b32 	%r2413, %r7409, %r2404, %p15;
	// begin inline asm
	{mul.f16x2 %r7640,%r2413,%r7752;
}
	// end inline asm
	mov.u32 	%r2418, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2416,%r7582,%r2418,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2422, %r7405, %r2416, %p15;
	// begin inline asm
	{mul.f16x2 %r7641,%r2422,%r7753;
}
	// end inline asm
	selp.b32 	%r2425, %r7409, %r2416, %p15;
	// begin inline asm
	{mul.f16x2 %r7639,%r2425,%r7751;
}
	// end inline asm
	mov.u32 	%r2430, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2428,%r7582,%r2430,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2434, %r7405, %r2428, %p15;
	// begin inline asm
	{mul.f16x2 %r7638,%r2434,%r7750;
}
	// end inline asm
	selp.b32 	%r2437, %r7409, %r2428, %p15;
	// begin inline asm
	{mul.f16x2 %r7635,%r2437,%r7749;
}
	// end inline asm
	mov.u32 	%r2442, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2440,%r7582,%r2442,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2446, %r7405, %r2440, %p15;
	// begin inline asm
	{mul.f16x2 %r7637,%r2446,%r7559;
}
	// end inline asm
	selp.b32 	%r2449, %r7409, %r2440, %p15;
	// begin inline asm
	{mul.f16x2 %r7634,%r2449,%r7558;
}
	// end inline asm
	mov.u32 	%r2454, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2452,%r7582,%r2454,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2458, %r7405, %r2452, %p15;
	// begin inline asm
	{mul.f16x2 %r7636,%r2458,%r7557;
}
	// end inline asm
	selp.b32 	%r2461, %r7409, %r2452, %p15;
	// begin inline asm
	{mul.f16x2 %r7633,%r2461,%r7556;
}
	// end inline asm
	mov.u32 	%r2466, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2464,%r7582,%r2466,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2470, %r7405, %r2464, %p15;
	// begin inline asm
	{mul.f16x2 %r7632,%r2470,%r7740;
}
	// end inline asm
	selp.b32 	%r2473, %r7409, %r2464, %p15;
	// begin inline asm
	{mul.f16x2 %r7629,%r2473,%r7738;
}
	// end inline asm
	mov.u32 	%r2478, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2476,%r7582,%r2478,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2482, %r7405, %r2476, %p15;
	// begin inline asm
	{mul.f16x2 %r7631,%r2482,%r7739;
}
	// end inline asm
	selp.b32 	%r2485, %r7409, %r2476, %p15;
	// begin inline asm
	{mul.f16x2 %r7628,%r2485,%r7737;
}
	// end inline asm
	mov.u32 	%r2490, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2488,%r7582,%r2490,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2494, %r7405, %r2488, %p15;
	// begin inline asm
	{mul.f16x2 %r7630,%r2494,%r7555;
}
	// end inline asm
	selp.b32 	%r2497, %r7409, %r2488, %p15;
	// begin inline asm
	{mul.f16x2 %r7627,%r2497,%r7554;
}
	// end inline asm
	mov.u32 	%r2502, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2500,%r7582,%r2502,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2506, %r7405, %r2500, %p15;
	// begin inline asm
	{mul.f16x2 %r7626,%r2506,%r7736;
}
	// end inline asm
	selp.b32 	%r2509, %r7409, %r2500, %p15;
	// begin inline asm
	{mul.f16x2 %r7625,%r2509,%r7735;
}
	// end inline asm
	mov.u32 	%r2514, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2512,%r7582,%r2514,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2518, %r7405, %r2512, %p15;
	// begin inline asm
	{mul.f16x2 %r7624,%r2518,%r7734;
}
	// end inline asm
	selp.b32 	%r2521, %r7409, %r2512, %p15;
	// begin inline asm
	{mul.f16x2 %r7622,%r2521,%r7733;
}
	// end inline asm
	mov.u32 	%r2526, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2524,%r7582,%r2526,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2530, %r7405, %r2524, %p15;
	// begin inline asm
	{mul.f16x2 %r7623,%r2530,%r7747;
}
	// end inline asm
	selp.b32 	%r2533, %r7409, %r2524, %p15;
	// begin inline asm
	{mul.f16x2 %r7621,%r2533,%r7745;
}
	// end inline asm
	mov.u32 	%r2538, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2536,%r7582,%r2538,%r2263,%r2540;
}
	// end inline asm
	selp.b32 	%r2542, %r7405, %r2536, %p15;
	// begin inline asm
	{mul.f16x2 %r7620,%r2542,%r7732;
}
	// end inline asm
	selp.b32 	%r2545, %r7409, %r2536, %p15;
	// begin inline asm
	{mul.f16x2 %r7619,%r2545,%r7731;
}
	// end inline asm
	rem.s32 	%r657, %r2551, %r68;
	rem.s32 	%r658, %r2556, %r7303;
	mad.lo.s32 	%r659, %r2570, %r2571, %r2568;
	sub.s32 	%r660, %r2578, %r2581;
	mad.lo.s32 	%r661, %r2580, %r2584, %r2579;
	ld.param.u64 	%rd270, [%rd1+144];
	cvta.to.global.u64 	%rd271, %rd270;
	shl.b32 	%r2634, %r661, 1;
	mul.wide.s32 	%rd272, %r2634, 4;
	add.s64 	%rd28, %rd271, %rd272;
	@%p86 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2837, %r1750, 1;
	setp.lt.s32 	%p183, %r661, %r2837;
	setp.eq.s32 	%p184, %r434, %r40;
	setp.gt.s32 	%p185, %r661, -1;
	and.pred  	%p186, %p184, %p185;
	and.pred  	%p187, %p183, %p186;
	@%p187 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7585, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7586, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2637, %r1750, 1;
	setp.lt.s32 	%p178, %r661, %r2637;
	setp.gt.s32 	%p179, %r661, -1;
	and.pred  	%p180, %p179, %p178;
	@%p180 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7583, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7584, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7585, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7586, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2845, 0;
	mov.u32 	%r2856, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2843,%r7581,%r2845,%r2263,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2848,%r7585,%r2843;
}
	// end inline asm
	mov.u32 	%r2854, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2852,%r7581,%r2854,%r2263,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2857,%r7586,%r2852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r2848,%r2857;
}
	// end inline asm
	setp.eq.s32 	%p188, %r435, 0;
	mov.u32 	%r7587, %r7588;
	@%p188 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7587, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7666,%r7666,%r7587;
}
	// end inline asm
	setp.eq.s32 	%p189, %r435, 1;
	@%p189 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7588, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r7588;
}
	// end inline asm
	mov.u32 	%r2878, 2;
	mov.u32 	%r2889, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2876,%r7581,%r2878,%r2263,%r2889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2881,%r7585,%r2876;
}
	// end inline asm
	mov.u32 	%r2887, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2885,%r7581,%r2887,%r2263,%r2889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2890,%r7586,%r2885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7590,%r2881,%r2890;
}
	// end inline asm
	mov.u32 	%r7589, %r7590;
	@%p188 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7589, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7665,%r7665,%r7589;
}
	// end inline asm
	@%p189 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7590, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7663,%r7663,%r7590;
}
	// end inline asm
	mov.u32 	%r2911, 4;
	mov.u32 	%r2922, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2909,%r7581,%r2911,%r2263,%r2922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2914,%r7585,%r2909;
}
	// end inline asm
	mov.u32 	%r2920, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2918,%r7581,%r2920,%r2263,%r2922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2923,%r7586,%r2918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r2914,%r2923;
}
	// end inline asm
	mov.u32 	%r7591, %r7592;
	@%p188 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7591, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7662,%r7662,%r7591;
}
	// end inline asm
	@%p189 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7592, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7661,%r7661,%r7592;
}
	// end inline asm
	mov.u32 	%r2944, 6;
	mov.u32 	%r2955, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2942,%r7581,%r2944,%r2263,%r2955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2947,%r7585,%r2942;
}
	// end inline asm
	mov.u32 	%r2953, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2951,%r7581,%r2953,%r2263,%r2955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2956,%r7586,%r2951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r2947,%r2956;
}
	// end inline asm
	mov.u32 	%r7593, %r7594;
	@%p188 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7593, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7660,%r7660,%r7593;
}
	// end inline asm
	@%p189 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7594, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7658,%r7658,%r7594;
}
	// end inline asm
	mov.u32 	%r2977, 8;
	mov.u32 	%r2988, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2975,%r7581,%r2977,%r2263,%r2988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2980,%r7585,%r2975;
}
	// end inline asm
	mov.u32 	%r2986, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2984,%r7581,%r2986,%r2263,%r2988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2989,%r7586,%r2984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r2980,%r2989;
}
	// end inline asm
	mov.u32 	%r7595, %r7596;
	@%p188 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7595, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7659,%r7659,%r7595;
}
	// end inline asm
	@%p189 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7596, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7657,%r7657,%r7596;
}
	// end inline asm
	mov.u32 	%r3010, 10;
	mov.u32 	%r3021, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3008,%r7581,%r3010,%r2263,%r3021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3013,%r7585,%r3008;
}
	// end inline asm
	mov.u32 	%r3019, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3017,%r7581,%r3019,%r2263,%r3021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3022,%r7586,%r3017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r3013,%r3022;
}
	// end inline asm
	mov.u32 	%r7597, %r7598;
	@%p188 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7597, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7656,%r7656,%r7597;
}
	// end inline asm
	@%p189 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7598, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7653,%r7653,%r7598;
}
	// end inline asm
	mov.u32 	%r3043, 12;
	mov.u32 	%r3054, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3041,%r7581,%r3043,%r2263,%r3054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3046,%r7585,%r3041;
}
	// end inline asm
	mov.u32 	%r3052, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3050,%r7581,%r3052,%r2263,%r3054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3055,%r7586,%r3050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r3046,%r3055;
}
	// end inline asm
	mov.u32 	%r7599, %r7600;
	@%p188 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7599, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7655,%r7655,%r7599;
}
	// end inline asm
	@%p189 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7600, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7652,%r7652,%r7600;
}
	// end inline asm
	mov.u32 	%r3076, 14;
	mov.u32 	%r3087, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3074,%r7581,%r3076,%r2263,%r3087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3079,%r7585,%r3074;
}
	// end inline asm
	mov.u32 	%r3085, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3083,%r7581,%r3085,%r2263,%r3087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3088,%r7586,%r3083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r3079,%r3088;
}
	// end inline asm
	mov.u32 	%r7601, %r7602;
	@%p188 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7601, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7650,%r7650,%r7601;
}
	// end inline asm
	@%p189 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7602, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7647,%r7647,%r7602;
}
	// end inline asm
	mov.u32 	%r3109, 16;
	mov.u32 	%r3120, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3107,%r7581,%r3109,%r2263,%r3120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3112,%r7585,%r3107;
}
	// end inline asm
	mov.u32 	%r3118, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3116,%r7581,%r3118,%r2263,%r3120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3121,%r7586,%r3116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r3112,%r3121;
}
	// end inline asm
	mov.u32 	%r7603, %r7604;
	@%p188 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7603, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7649,%r7649,%r7603;
}
	// end inline asm
	@%p189 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7604, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7646,%r7646,%r7604;
}
	// end inline asm
	mov.u32 	%r3142, 18;
	mov.u32 	%r3153, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3140,%r7581,%r3142,%r2263,%r3153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3145,%r7585,%r3140;
}
	// end inline asm
	mov.u32 	%r3151, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3149,%r7581,%r3151,%r2263,%r3153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3154,%r7586,%r3149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r3145,%r3154;
}
	// end inline asm
	mov.u32 	%r7605, %r7606;
	@%p188 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7605, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7644,%r7644,%r7605;
}
	// end inline asm
	@%p189 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7606, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r7606;
}
	// end inline asm
	mov.u32 	%r3175, 20;
	mov.u32 	%r3186, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3173,%r7581,%r3175,%r2263,%r3186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3178,%r7585,%r3173;
}
	// end inline asm
	mov.u32 	%r3184, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3182,%r7581,%r3184,%r2263,%r3186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3187,%r7586,%r3182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7608,%r3178,%r3187;
}
	// end inline asm
	mov.u32 	%r7607, %r7608;
	@%p188 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7607, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7642,%r7642,%r7607;
}
	// end inline asm
	@%p189 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7608, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r7608;
}
	// end inline asm
	mov.u32 	%r3208, 22;
	mov.u32 	%r3219, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3206,%r7581,%r3208,%r2263,%r3219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3211,%r7585,%r3206;
}
	// end inline asm
	mov.u32 	%r3217, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3215,%r7581,%r3217,%r2263,%r3219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3220,%r7586,%r3215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7610,%r3211,%r3220;
}
	// end inline asm
	mov.u32 	%r7609, %r7610;
	@%p188 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7609, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7638,%r7638,%r7609;
}
	// end inline asm
	@%p189 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7610, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r7610;
}
	// end inline asm
	mov.u32 	%r3241, 24;
	mov.u32 	%r3252, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3239,%r7581,%r3241,%r2263,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3244,%r7585,%r3239;
}
	// end inline asm
	mov.u32 	%r3250, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3248,%r7581,%r3250,%r2263,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3253,%r7586,%r3248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r3244,%r3253;
}
	// end inline asm
	mov.u32 	%r7611, %r7612;
	@%p188 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7611, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7637,%r7637,%r7611;
}
	// end inline asm
	@%p189 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7612, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7634,%r7634,%r7612;
}
	// end inline asm
	mov.u32 	%r3274, 26;
	mov.u32 	%r3285, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3272,%r7581,%r3274,%r2263,%r3285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3277,%r7585,%r3272;
}
	// end inline asm
	mov.u32 	%r3283, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3281,%r7581,%r3283,%r2263,%r3285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3286,%r7586,%r3281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r3277,%r3286;
}
	// end inline asm
	mov.u32 	%r7613, %r7614;
	@%p188 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7613, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r7613;
}
	// end inline asm
	@%p189 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7614, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7629,%r7629,%r7614;
}
	// end inline asm
	mov.u32 	%r3307, 28;
	mov.u32 	%r3318, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3305,%r7581,%r3307,%r2263,%r3318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3310,%r7585,%r3305;
}
	// end inline asm
	mov.u32 	%r3316, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3314,%r7581,%r3316,%r2263,%r3318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3319,%r7586,%r3314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7616,%r3310,%r3319;
}
	// end inline asm
	mov.u32 	%r7615, %r7616;
	@%p188 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7615, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7631,%r7631,%r7615;
}
	// end inline asm
	@%p189 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7616, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7628,%r7628,%r7616;
}
	// end inline asm
	mov.u32 	%r3349, 31;
	mov.u32 	%r3340, 30;
	mov.u32 	%r3351, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3338,%r7581,%r3340,%r2263,%r3351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r7585,%r3338;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3347,%r7581,%r3349,%r2263,%r3351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3352,%r7586,%r3347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7618,%r3343,%r3352;
}
	// end inline asm
	mov.u32 	%r7617, %r7618;
	@%p188 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7617, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7624,%r7624,%r7617;
}
	// end inline asm
	@%p189 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7618, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7622,%r7622,%r7618;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7583, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7584, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p181, %r660, %r1738;
	@%p181 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2739,%r7583,%r7415;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r7666,%r2739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2745,%r7583,%r7413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7654,%r7654,%r2745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2751,%r7583,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7656,%r7656,%r2751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2757,%r7583,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7636,%r2757;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2763,%r7583,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7638,%r2763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2769,%r7583,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r7623,%r2769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2775,%r7584,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r7660,%r2775;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2781,%r7584,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7641,%r2781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2787,%r7583,%r7414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r2787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2793,%r7583,%r7412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7651,%r2793;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2799,%r7583,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7653,%r7653,%r2799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2805,%r7583,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7633,%r2805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2811,%r7583,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r2811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2817,%r7583,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7621,%r7621,%r2817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2823,%r7584,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r7658,%r2823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2829,%r7584,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r2829;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2642, %r1738, -2;
	setp.ne.s32 	%p182, %r660, %r2642;
	@%p182 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2643,%r7583,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7644,%r2643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2649,%r7583,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7626,%r7626,%r2649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2655,%r7584,%r7415;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r7662,%r2655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2661,%r7584,%r7413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7648,%r2661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2667,%r7584,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7650,%r7650,%r2667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2673,%r7584,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7630,%r2673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2679,%r7584,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r2679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2685,%r7584,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r7620,%r2685;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2691,%r7583,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r2691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2697,%r7583,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r7625,%r2697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2703,%r7584,%r7414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7661,%r7661,%r2703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2709,%r7584,%r7412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7645,%r2709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2715,%r7584,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7647,%r2715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2721,%r7584,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r7627,%r2721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2727,%r7584,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r7629,%r2727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2733,%r7584,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7619,%r7619,%r2733;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p220, %r35, 1;
	mov.u32 	%r7771, %r2174;
	mov.u32 	%r7772, %r2174;
	mov.u32 	%r7777, %r2174;
	mov.u32 	%r7778, %r2174;
	mov.u32 	%r7779, %r2174;
	mov.u32 	%r7780, %r2174;
	mov.u32 	%r7781, %r2174;
	mov.u32 	%r7782, %r2174;
	mov.u32 	%r7789, %r2174;
	mov.u32 	%r7790, %r2174;
	@%p220 bra 	$L__BB0_380;

	mul.lo.s32 	%r3370, %r1729, 320;
	add.s32 	%r3371, %r35, -1;
	mul.lo.s32 	%r3372, %r36, 320;
	mad.lo.s32 	%r3373, %r3370, %r3371, %r3372;
	add.s32 	%r3376, %r1790, -64;
	mad.lo.s32 	%r3381, %r3376, %r2162, %r2159;
	add.s32 	%r3382, %r3373, %r3381;
	shl.b32 	%r3383, %r3382, 2;
	mov.u32 	%r3384, _ZN6kernel5shmemE;
	add.s32 	%r3385, %r3384, %r3383;
	shl.b32 	%r3386, %r40, 4;
	add.s32 	%r3387, %r3385, %r3386;
	ld.shared.v4.u32 	{%r7782, %r7780, %r7772, %r7771}, [%r3387];
	shl.b32 	%r3392, %r40, 3;
	add.s32 	%r3393, %r3385, %r3392;
	ld.shared.v2.u32 	{%r7781, %r7779}, [%r3393+512];
	ld.shared.v4.u32 	{%r7790, %r7789, %r7778, %r7777}, [%r3387+768];

$L__BB0_380:
	setp.lt.s32 	%p221, %r36, 1;
	mov.u32 	%r7773, %r2174;
	mov.u32 	%r7774, %r2174;
	mov.u32 	%r7775, %r2174;
	mov.u32 	%r7776, %r2174;
	mov.u32 	%r7783, %r2174;
	mov.u32 	%r7784, %r2174;
	mov.u32 	%r7785, %r2174;
	mov.u32 	%r7786, %r2174;
	mov.u32 	%r7787, %r2174;
	mov.u32 	%r7788, %r2174;
	mov.u32 	%r7791, %r2174;
	mov.u32 	%r7792, %r2174;
	@%p221 bra 	$L__BB0_383;

	mad.lo.s32 	%r3405, %r2560, 384, %r2165;
	add.s32 	%r3408, %r36, -1;
	mad.lo.s32 	%r3409, %r2160, %r3408, %r3405;
	add.s32 	%r3415, %r3409, %r2163;
	shl.b32 	%r3416, %r3415, 2;
	mov.u32 	%r3417, _ZN6kernel5shmemE;
	add.s32 	%r3418, %r3417, %r3416;
	shl.b32 	%r3419, %r40, 4;
	add.s32 	%r3420, %r3418, %r3419;
	ld.shared.v4.u32 	{%r7792, %r7791, %r7787, %r7785}, [%r3420];
	shl.b32 	%r3425, %r40, 3;
	add.s32 	%r3426, %r3418, %r3425;
	ld.shared.v2.u32 	{%r7788, %r7786}, [%r3426+512];
	ld.shared.v4.u32 	{%r7784, %r7783, %r7775, %r7773}, [%r3420+768];
	mov.u32 	%r7774, %r2174;
	mov.u32 	%r7776, %r2174;
	@%p220 bra 	$L__BB0_383;

	add.s32 	%r7293, %r3426, 512;
	ld.shared.v2.u32 	{%r7776, %r7774}, [%r7293+768];

$L__BB0_383:
	setp.eq.s32 	%p223, %r35, 0;
	@%p223 bra 	$L__BB0_388;

	setp.eq.s32 	%p224, %r36, %r2162;
	@%p224 bra 	$L__BB0_386;

	sub.s32 	%r3436, %r1728, %r35;
	mul.lo.s32 	%r3438, %r69, %r36;
	mad.lo.s32 	%r3439, %r3436, 384, %r3438;
	mad.lo.s32 	%r3442, %r2160, %r2162, %r3439;
	mad.lo.s32 	%r3445, %r2158, %r2157, %r3442;
	shl.b32 	%r3446, %r3445, 2;
	mov.u32 	%r3447, _ZN6kernel5shmemE;
	add.s32 	%r3448, %r3447, %r3446;
	shl.b32 	%r3449, %r40, 4;
	add.s32 	%r3450, %r3448, %r3449;
	ld.shared.v4.u32 	{%r7710, %r7709, %r7712, %r7711}, [%r3450];

$L__BB0_386:
	shl.b32 	%r3455, %r36, 8;
	shl.b32 	%r3459, %r1729, 8;
	or.b32  	%r3460, %r3459, 128;
	add.s32 	%r3461, %r35, -1;
	mad.lo.s32 	%r3462, %r3460, %r3461, %r2165;
	add.s32 	%r3463, %r3462, %r3455;
	shl.b32 	%r3464, %r3463, 2;
	mov.u32 	%r3465, _ZN6kernel5shmemE;
	add.s32 	%r3466, %r3465, %r3464;
	setp.ne.s32 	%p225, %r36, %r2162;
	shl.b32 	%r3468, %r40, 4;
	add.s32 	%r923, %r3466, %r3468;
	ld.shared.v4.u32 	{%r7703, %r7701, %r7704, %r7702}, [%r923];
	ld.shared.v4.u32 	{%r7708, %r7707, %r7706, %r7705}, [%r923+512];
	@%p225 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7710, %r7709, %r7712, %r7711}, [%r923+1024];

$L__BB0_388:
	setp.eq.s32 	%p226, %r36, 0;
	@%p226 bra 	$L__BB0_391;

	mul.lo.s32 	%r3482, %r69, %r36;
	sub.s32 	%r3483, %r3482, %r69;
	mad.lo.s32 	%r3486, %r2560, 384, %r3483;
	mad.lo.s32 	%r3489, %r2160, %r2162, %r3486;
	mad.lo.s32 	%r3492, %r2158, %r2157, %r3489;
	shl.b32 	%r3493, %r3492, 2;
	mov.u32 	%r3494, _ZN6kernel5shmemE;
	add.s32 	%r3495, %r3494, %r3493;
	shl.b32 	%r3496, %r40, 4;
	add.s32 	%r952, %r3495, %r3496;
	ld.shared.v4.u32 	{%r7726, %r7725, %r7728, %r7727}, [%r952];
	ld.shared.v4.u32 	{%r7724, %r7722, %r7720, %r7719}, [%r952+512];
	ld.shared.v4.u32 	{%r7723, %r7721, %r7718, %r7716}, [%r952+1024];
	@%p223 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7714, %r7713, %r7717, %r7715}, [%r952+1536];

$L__BB0_391:
	setp.ne.s32 	%p228, %r35, 0;
	@%p228 bra 	$L__BB0_396;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3514, %r657, %r1731, %r38;
	mul.lo.s32 	%r3515, %r1729, %r3514;
	mul.lo.s32 	%r3516, %r3515, 768;
	mad.lo.s32 	%r3517, %r36, 384, %r3516;
	add.s32 	%r3518, %r3517, -64;
	mul.wide.s32 	%rd275, %r3518, 4;
	add.s64 	%rd276, %rd553, %rd275;
	add.s64 	%rd278, %rd276, %rd277;
	ld.global.v4.u32 	{%r7740, %r7738, %r7732, %r7731}, [%rd278+256];
	ld.global.v4.u32 	{%r7742, %r7741, %r7736, %r7735}, [%rd278+1024];
	add.s64 	%rd30, %rd276, %rd279;
	@%p226 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7734, %r7733}, [%rd30];

$L__BB0_394:
	setp.ne.s32 	%p230, %r36, %r2162;
	ld.global.v2.u32 	{%r7739, %r7737}, [%rd30+768];
	@%p230 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7744, %r7743}, [%rd30+1536];

$L__BB0_396:
	setp.ne.s32 	%p231, %r36, 0;
	@%p231 bra 	$L__BB0_398;

	ld.param.u64 	%rd556, [%rd1+80];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r3535, %r658, %r1730, %r37;
	mul.lo.s32 	%r3539, %r3535, %r1791;
	mad.lo.s32 	%r3542, %r2560, 384, %r3539;
	add.s32 	%r3543, %r3542, -64;
	mad.lo.s32 	%r3546, %r1793, %r68, %r3543;
	mul.wide.s32 	%rd280, %r3546, 4;
	add.s64 	%rd281, %rd555, %rd280;
	add.s64 	%rd283, %rd281, %rd277;
	ld.global.v4.u32 	{%r7756, %r7755, %r7753, %r7751}, [%rd283+256];
	ld.global.v4.u32 	{%r7750, %r7749, %r7747, %r7745}, [%rd283+1024];
	add.s64 	%rd285, %rd281, %rd279;
	ld.global.v2.u32 	{%r7754, %r7752}, [%rd285+768];
	ld.global.v2.u32 	{%r7734, %r7733}, [%rd285+1536];

$L__BB0_398:
	add.s32 	%r3559, %r1733, -1;
	setp.ge.s32 	%p232, %r659, %r3559;
	setp.lt.s32 	%p233, %r659, 2;
	or.pred  	%p234, %p233, %p232;
	setp.lt.s32 	%p235, %r660, 2;
	or.pred  	%p236, %p234, %p235;
	add.s32 	%r3560, %r1734, -2;
	setp.ge.s32 	%p237, %r660, %r3560;
	or.pred  	%p238, %p237, %p236;
	@%p238 bra 	$L__BB0_409;

	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	mad.lo.s32 	%r1047, %r660, %r1733, %r659;
	shl.b32 	%r3561, %r1047, 6;
	mul.wide.s32 	%rd288, %r3561, 4;
	add.s64 	%rd32, %rd557, %rd288;
	and.pred  	%p241, %p228, %p231;
	@%p241 bra 	$L__BB0_401;

	add.s64 	%rd290, %rd32, %rd279;
	ld.global.v2.u32 	{%r7776, %r7774}, [%rd290+256];

$L__BB0_401:
	@%p228 bra 	$L__BB0_403;

	shl.b32 	%r3564, %r1733, 5;
	cvt.s64.s32 	%rd291, %r3564;
	cvt.s64.s32 	%rd292, %r40;
	add.s64 	%rd293, %rd291, %rd292;
	shl.b64 	%rd294, %rd293, 3;
	add.s64 	%rd295, %rd32, %rd294;
	ld.global.v2.u32 	{%r7781, %r7779}, [%rd295];

$L__BB0_403:
	@%p231 bra 	$L__BB0_405;

	shl.b32 	%r3567, %r1733, 5;
	neg.s32 	%r3568, %r3567;
	cvt.s64.s32 	%rd296, %r3568;
	cvt.s64.s32 	%rd297, %r40;
	add.s64 	%rd298, %rd296, %rd297;
	shl.b64 	%rd299, %rd298, 3;
	add.s64 	%rd300, %rd32, %rd299;
	ld.global.v2.u32 	{%r7788, %r7786}, [%rd300];

$L__BB0_405:
	mad.lo.s32 	%r7304, %r660, %r1733, %r659;
	ld.param.u64 	%rd560, [%rd1+88];
	cvta.to.global.u64 	%rd559, %rd560;
	shl.b32 	%r3571, %r1734, 6;
	shl.b32 	%r3572, %r7304, 7;
	mad.lo.s32 	%r3573, %r3571, %r1733, %r3572;
	mul.wide.s32 	%rd301, %r3573, 4;
	add.s64 	%rd33, %rd559, %rd301;
	@%p228 bra 	$L__BB0_407;

	shl.b32 	%r3574, %r1733, 5;
	cvt.s64.s32 	%rd302, %r3574;
	cvt.s64.s32 	%rd303, %r40;
	add.s64 	%rd304, %rd302, %rd303;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd33, %rd305;
	ld.global.v4.u32 	{%r7782, %r7780, %r7772, %r7771}, [%rd306];
	shl.b32 	%r3579, %r1733, 6;
	add.s32 	%r3580, %r3579, -32;
	cvt.s64.s32 	%rd307, %r3580;
	add.s64 	%rd308, %rd307, %rd303;
	shl.b64 	%rd309, %rd308, 4;
	add.s64 	%rd310, %rd33, %rd309;
	ld.global.v4.u32 	{%r7790, %r7789, %r7778, %r7777}, [%rd310];

$L__BB0_407:
	@%p231 bra 	$L__BB0_409;

	shl.b32 	%r3585, %r1733, 5;
	xor.b32  	%r3586, %r3585, -32;
	cvt.s64.s32 	%rd311, %r3586;
	cvt.s64.s32 	%rd312, %r40;
	add.s64 	%rd313, %rd311, %rd312;
	shl.b64 	%rd314, %rd313, 4;
	add.s64 	%rd315, %rd33, %rd314;
	ld.global.v4.u32 	{%r7792, %r7791, %r7787, %r7785}, [%rd315];
	add.s64 	%rd317, %rd33, %rd277;
	ld.global.v4.u32 	{%r7784, %r7783, %r7775, %r7773}, [%rd317];

$L__BB0_409:
	mov.u32 	%r3600, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3596,%r7551,%r436,%r2263,%r3600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3596;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7551;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3603, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3604,%r7552,%r3603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3607,%r7404,%r3604;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7793,%r7666;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7793,%r7405,%r3604;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3620, 31;
	mov.u32 	%r3643, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3618,%r7793,%r3620,%r2263,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3623,%r3607,%r3618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3626,%r7550,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3629,%r3626,%r3623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3632,%r7553,%r3629;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3635,%r7666,%r3632;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3639,%r7546,%r436,%r2263,%r3643;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3639;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7546;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3646, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3647,%r7547,%r3646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3650,%r7404,%r3647;
}
	// end inline asm
	mov.u32 	%r7794, %r7665;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7794,%r7405,%r3647;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3661,%r7794,%r3620,%r2263,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3666,%r3650,%r3661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3669,%r7550,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r3666,%r3669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3675,%r7548,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3678,%r7665,%r3675;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3681,%r7551,%r7552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3684,%r7408,%r3681;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7795,%r7664;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7795,%r7409,%r3681;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3697, 31;
	mov.u32 	%r3699, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3695,%r7795,%r3697,%r2263,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3700,%r3684,%r3695;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r7543,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3706,%r3703,%r3700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3709,%r7544,%r3706;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3712,%r7664,%r3709;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3715,%r7546,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3718,%r7408,%r3715;
}
	// end inline asm
	mov.u32 	%r7796, %r7663;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7796,%r7409,%r3715;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3727,%r7796,%r3697,%r2263,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3732,%r3718,%r3727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3735,%r7543,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3738,%r3732,%r3735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3741,%r7541,%r3738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3744,%r7663,%r3741;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3748,%r7537,%r436,%r2263,%r3699;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3748;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7537;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3755, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3756,%r7538,%r3755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3759,%r7404,%r3756;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7797,%r7662;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7797,%r7405,%r3756;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3774, 31;
	mov.u32 	%r3776, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3772,%r7797,%r3774,%r2263,%r3776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3777,%r3759,%r3772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r7536,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r3780,%r3777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3786,%r7539,%r3783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3789,%r7662,%r3786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3792,%r7537,%r7538;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3795,%r7408,%r3792;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7798,%r7661;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7798,%r7409,%r3792;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3808, 31;
	mov.u32 	%r3831, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3806,%r7798,%r3808,%r2263,%r3831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3811,%r3795,%r3806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3814,%r7534,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3817,%r3814,%r3811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3820,%r7535,%r3817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3823,%r7661,%r3820;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3827,%r7532,%r436,%r2263,%r3831;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3827;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7532;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3834, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r7533,%r3834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r7404,%r3835;
}
	// end inline asm
	@%p15 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7799,%r7660;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7799,%r7405,%r3835;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3853, 31;
	mov.u32 	%r3876, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3851,%r7799,%r3853,%r2263,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3856,%r3838,%r3851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3859,%r7531,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r3859,%r3856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3865,%r7792,%r3862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r7660,%r3865;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3872,%r7527,%r436,%r2263,%r3876;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3872;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7527;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3879, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3880,%r7528,%r3879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3883,%r7404,%r3880;
}
	// end inline asm
	mov.u32 	%r7800, %r7659;
	@%p15 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7800,%r7405,%r3880;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3894,%r7800,%r3853,%r2263,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3899,%r3883,%r3894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3902,%r7531,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3905,%r3899,%r3902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3908,%r7529,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3911,%r7659,%r3908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r7532,%r7533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3917,%r7408,%r3914;
}
	// end inline asm
	@%p15 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7801,%r7658;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7801,%r7409,%r3914;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3930, 31;
	mov.u32 	%r3932, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3928,%r7801,%r3930,%r2263,%r3932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3933,%r3917,%r3928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r7526,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r3936,%r3933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3942,%r7791,%r3939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3945,%r7658,%r3942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3948,%r7527,%r7528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3951,%r7408,%r3948;
}
	// end inline asm
	mov.u32 	%r7802, %r7657;
	@%p15 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7802,%r7409,%r3948;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3960,%r7802,%r3930,%r2263,%r3932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3965,%r3951,%r3960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3968,%r7526,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3971,%r3965,%r3968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3974,%r7524,%r3971;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3977,%r7657,%r3974;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3981,%r7521,%r436,%r2263,%r3932;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3981;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7521;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3988, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r7522,%r3988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3992,%r7404,%r3989;
}
	// end inline asm
	@%p15 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7803,%r7656;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7803,%r7405,%r3989;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r4007, 31;
	mov.u32 	%r4030, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4005,%r7803,%r4007,%r2263,%r4030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4010,%r3992,%r4005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4013,%r7520,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4016,%r4013,%r4010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4019,%r549,%r4016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7656,%r4019;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4026,%r7517,%r436,%r2263,%r4030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4026;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7517;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4033, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4034,%r7518,%r4033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4037,%r7404,%r4034;
}
	// end inline asm
	mov.u32 	%r7804, %r7655;
	@%p15 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7804,%r7405,%r4034;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4048,%r7804,%r4007,%r2263,%r4030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4053,%r4037,%r4048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4056,%r7520,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r4053,%r4056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4062,%r545,%r4059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7655,%r4062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4068,%r7522,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4071,%r7518,%r7528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r4068,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4077,%r7516,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r7654,%r4077;
}
	// end inline asm
	selp.b32 	%r1173, %r7654, %r4080, %p15;
	// begin inline asm
	{sub.f16x2 %r4083,%r7521,%r7522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4086,%r7408,%r4083;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7805,%r7653;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7805,%r7409,%r4083;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4099, 31;
	mov.u32 	%r4101, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4097,%r7805,%r4099,%r2263,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4102,%r4086,%r4097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4105,%r7514,%r7526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4108,%r4105,%r4102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4111,%r541,%r4108;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r7653,%r4111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r7517,%r7518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4120,%r7408,%r4117;
}
	// end inline asm
	mov.u32 	%r7806, %r7652;
	@%p15 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7806,%r7409,%r4117;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4129,%r7806,%r4099,%r2263,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4134,%r4120,%r4129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4137,%r7514,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4140,%r4134,%r4137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4143,%r539,%r4140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r7652,%r4143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4149,%r7521,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4152,%r7517,%r7527;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4155,%r4149,%r4152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4158,%r7512,%r4155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4161,%r7651,%r4158;
}
	// end inline asm
	selp.b32 	%r1185, %r7651, %r4161, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4165,%r7509,%r436,%r2263,%r4101;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4165;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7509;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4172, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4173,%r7510,%r4172;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4176,%r7404,%r4173;
}
	// end inline asm
	@%p15 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7807,%r7650;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7807,%r7405,%r4173;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4191, 31;
	mov.u32 	%r4214, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4189,%r7807,%r4191,%r2263,%r4214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4194,%r4176,%r4189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r7508,%r7520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4200,%r4197,%r4194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4203,%r537,%r4200;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7650,%r4203;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4210,%r7505,%r436,%r2263,%r4214;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4210;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7505;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4217, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4218,%r7506,%r4217;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4221,%r7404,%r4218;
}
	// end inline asm
	mov.u32 	%r7808, %r7649;
	@%p15 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7808,%r7405,%r4218;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4232,%r7808,%r4191,%r2263,%r4214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r4221,%r4232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4240,%r7508,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4243,%r4237,%r4240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4246,%r7507,%r4243;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4249,%r7649,%r4246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4252,%r7510,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4255,%r7506,%r7518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r4252,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4261,%r7504,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4264,%r7648,%r4261;
}
	// end inline asm
	selp.b32 	%r1197, %r7648, %r4264, %p15;
	// begin inline asm
	{sub.f16x2 %r4267,%r7509,%r7510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4270,%r7408,%r4267;
}
	// end inline asm
	@%p15 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7809,%r7647;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7809,%r7409,%r4267;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4283, 31;
	mov.u32 	%r4285, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4281,%r7809,%r4283,%r2263,%r4285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4286,%r4270,%r4281;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4289,%r7502,%r7514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4292,%r4289,%r4286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4295,%r529,%r4292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r7647,%r4295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4301,%r7505,%r7506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4304,%r7408,%r4301;
}
	// end inline asm
	mov.u32 	%r7810, %r7646;
	@%p15 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7810,%r7409,%r4301;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4313,%r7810,%r4283,%r2263,%r4285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4318,%r4304,%r4313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4321,%r7502,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4324,%r4318,%r4321;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4327,%r7501,%r4324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4330,%r7646,%r4327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4333,%r7509,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4336,%r7505,%r7517;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4339,%r4333,%r4336;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4342,%r7500,%r4339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4345,%r7645,%r4342;
}
	// end inline asm
	selp.b32 	%r1209, %r7645, %r4345, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4349,%r7498,%r436,%r2263,%r4285;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4349;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7498;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4356, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4357,%r7499,%r4356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4360,%r7404,%r4357;
}
	// end inline asm
	@%p15 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7811,%r7644;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7811,%r7405,%r4357;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4375, 31;
	mov.u32 	%r4377, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4373,%r7811,%r4375,%r2263,%r4377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4378,%r4360,%r4373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4381,%r7712,%r7508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r4381,%r4378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4387,%r7790,%r4384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4390,%r7644,%r4387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4393,%r7498,%r7499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4396,%r7408,%r4393;
}
	// end inline asm
	@%p15 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7812,%r7643;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7812,%r7409,%r4393;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4409, 31;
	mov.u32 	%r4432, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4407,%r7812,%r4409,%r2263,%r4432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4412,%r4396,%r4407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4415,%r7711,%r7502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4418,%r4415,%r4412;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4421,%r7789,%r4418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4424,%r7643,%r4421;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4428,%r7494,%r436,%r2263,%r4432;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4428;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7494;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4435, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4436,%r7495,%r4435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4439,%r7404,%r4436;
}
	// end inline asm
	mov.u32 	%r7813, %r7642;
	@%p15 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7813,%r7405,%r4436;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4450,%r7813,%r4409,%r2263,%r4432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4455,%r4439,%r4450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4458,%r7723,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4461,%r4455,%r4458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4464,%r7788,%r4461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7642,%r4464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4470,%r7724,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4473,%r7495,%r7726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4476,%r4470,%r4473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4479,%r7787,%r4476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4482,%r7641,%r4479;
}
	// end inline asm
	selp.b32 	%r1227, %r7641, %r4482, %p15;
	// begin inline asm
	{sub.f16x2 %r4485,%r7494,%r7495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4488,%r7408,%r4485;
}
	// end inline asm
	mov.u32 	%r7814, %r7640;
	@%p15 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7814,%r7409,%r4485;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4499, 31;
	mov.u32 	%r4537, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4497,%r7814,%r4499,%r2263,%r4537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4502,%r4488,%r4497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4505,%r7721,%r7526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4508,%r4502,%r4505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4511,%r7786,%r4508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r7640,%r4511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4517,%r7722,%r7532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4520,%r7494,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4523,%r4517,%r4520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4526,%r7785,%r4523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4529,%r7639,%r4526;
}
	// end inline asm
	selp.b32 	%r1233, %r7639, %r4529, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4533,%r7490,%r436,%r2263,%r4537;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4533;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7490;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4540, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4541,%r7491,%r4540;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4544,%r7404,%r4541;
}
	// end inline asm
	@%p15 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7815,%r7638;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7815,%r7405,%r4541;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4559, 31;
	mov.u32 	%r4582, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4557,%r7815,%r4559,%r2263,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4562,%r4544,%r4557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4565,%r7489,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4568,%r4565,%r4562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4571,%r7784,%r4568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7638,%r4571;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4578,%r7486,%r436,%r2263,%r4582;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4578;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7486;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4585, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r7487,%r4585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4589,%r7404,%r4586;
}
	// end inline asm
	mov.u32 	%r7816, %r7637;
	@%p15 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7816,%r7405,%r4586;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4600,%r7816,%r4559,%r2263,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4605,%r4589,%r4600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4608,%r7489,%r7520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4611,%r4605,%r4608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4614,%r7519,%r4611;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7637,%r4614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4620,%r7491,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4623,%r7487,%r7495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r4620,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4629,%r511,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4632,%r7636,%r4629;
}
	// end inline asm
	selp.b32 	%r7567, %r7636, %r4632, %p15;
	// begin inline asm
	{sub.f16x2 %r4635,%r7490,%r7491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4638,%r7408,%r4635;
}
	// end inline asm
	@%p15 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7817,%r7635;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7817,%r7409,%r4635;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4651, 31;
	mov.u32 	%r4653, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4649,%r7817,%r4651,%r2263,%r4653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4654,%r4638,%r4649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4657,%r7484,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4660,%r4657,%r4654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4663,%r7783,%r4660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7570,%r7635,%r4663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4669,%r7486,%r7487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4672,%r7408,%r4669;
}
	// end inline asm
	mov.u32 	%r7818, %r7634;
	@%p15 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7818,%r7409,%r4669;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4681,%r7818,%r4651,%r2263,%r4653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4686,%r4672,%r4681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4689,%r7484,%r7514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4692,%r4686,%r4689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4695,%r7513,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7634,%r4695;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4701,%r7490,%r7521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4704,%r7486,%r7494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4707,%r4701,%r4704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4710,%r508,%r4707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4713,%r7633,%r4710;
}
	// end inline asm
	selp.b32 	%r7566, %r7633, %r4713, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4717,%r7480,%r436,%r2263,%r4653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4717;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7480;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4724, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4725,%r7481,%r4724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4728,%r7404,%r4725;
}
	// end inline asm
	@%p15 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7819,%r7632;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7819,%r7405,%r4725;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4743, 31;
	mov.u32 	%r4766, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4741,%r7819,%r4743,%r2263,%r4766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4746,%r4728,%r4741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4749,%r7708,%r7489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r4749,%r4746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r7782,%r4752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r7632,%r4755;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4762,%r7478,%r436,%r2263,%r4766;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4762;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7478;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4769, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4770,%r7479,%r4769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4773,%r7404,%r4770;
}
	// end inline asm
	mov.u32 	%r7820, %r7631;
	@%p15 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7820,%r7405,%r4770;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4784,%r7820,%r4743,%r2263,%r4766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4789,%r4773,%r4784;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4792,%r7708,%r7508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4795,%r4789,%r4792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4798,%r7781,%r4795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7631,%r4798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4804,%r7481,%r7510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4807,%r7479,%r7487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r4804,%r4807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4813,%r503,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4816,%r7630,%r4813;
}
	// end inline asm
	selp.b32 	%r7561, %r7630, %r4816, %p15;
	// begin inline asm
	{sub.f16x2 %r4819,%r7480,%r7481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4822,%r7408,%r4819;
}
	// end inline asm
	@%p15 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7821,%r7629;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7821,%r7409,%r4819;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4835, 31;
	mov.u32 	%r4837, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4833,%r7821,%r4835,%r2263,%r4837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4838,%r4822,%r4833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4841,%r7707,%r7484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r4841,%r4838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4847,%r7780,%r4844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r7629,%r4847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4853,%r7478,%r7479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4856,%r7408,%r4853;
}
	// end inline asm
	mov.u32 	%r7822, %r7628;
	@%p15 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7822,%r7409,%r4853;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4865,%r7822,%r4835,%r2263,%r4837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4870,%r4856,%r4865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4873,%r7707,%r7502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r4870,%r4873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4879,%r7779,%r4876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7628,%r4879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4885,%r7480,%r7509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4888,%r7478,%r7486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r4885,%r4888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4894,%r502,%r4891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4897,%r7627,%r4894;
}
	// end inline asm
	selp.b32 	%r7560, %r7627, %r4897, %p15;
	// begin inline asm
	{sub.f16x2 %r4900,%r7706,%r7499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4903,%r7710,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4906,%r4900,%r4903;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4909,%r7778,%r4906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4912,%r7626,%r4909;
}
	// end inline asm
	selp.b32 	%r1282, %r7626, %r4912, %p15;
	// begin inline asm
	{sub.f16x2 %r4915,%r7705,%r7498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4918,%r7709,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4921,%r4915,%r4918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4924,%r7777,%r4921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4927,%r7625,%r4924;
}
	// end inline asm
	selp.b32 	%r1283, %r7625, %r4927, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4931,%r7472,%r436,%r2263,%r4837;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4931;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7472;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4938, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4939,%r7473,%r4938;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4942,%r7404,%r4939;
}
	// end inline asm
	mov.u32 	%r7823, %r7624;
	@%p15 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7823,%r7405,%r4939;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4955, 31;
	mov.u32 	%r4957, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4953,%r7823,%r4955,%r2263,%r4957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4958,%r4942,%r4953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4961,%r7717,%r7489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4964,%r4958,%r4961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4967,%r7776,%r4964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7624,%r4967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4973,%r7718,%r7491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4976,%r7473,%r7720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r4973,%r4976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4982,%r7775,%r4979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4985,%r7623,%r4982;
}
	// end inline asm
	selp.b32 	%r7557, %r7623, %r4985, %p15;
	// begin inline asm
	{sub.f16x2 %r4988,%r7472,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4991,%r7408,%r4988;
}
	// end inline asm
	mov.u32 	%r7824, %r7622;
	@%p15 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7824,%r7409,%r4988;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5000,%r7824,%r4955,%r2263,%r4957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5005,%r4991,%r5000;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5008,%r7715,%r7484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5011,%r5005,%r5008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5014,%r7774,%r5011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7622,%r5014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r7716,%r7490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5023,%r7472,%r7719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5026,%r5020,%r5023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5029,%r7773,%r5026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5032,%r7621,%r5029;
}
	// end inline asm
	selp.b32 	%r7556, %r7621, %r5032, %p15;
	// begin inline asm
	{sub.f16x2 %r5035,%r7703,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5038,%r7704,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5041,%r5035,%r5038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5044,%r7772,%r5041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5047,%r7620,%r5044;
}
	// end inline asm
	selp.b32 	%r7555, %r7620, %r5047, %p15;
	// begin inline asm
	{sub.f16x2 %r5050,%r7701,%r7480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5053,%r7702,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5056,%r5050,%r5053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5059,%r7771,%r5056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5062,%r7619,%r5059;
}
	// end inline asm
	selp.b32 	%r7554, %r7619, %r5062, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd318, [%rd1+160];
	cvta.to.global.u64 	%rd35, %rd318;
	add.s32 	%r5067, %r1742, 2;
	setp.lt.s32 	%p279, %r659, %r5067;
	add.s32 	%r5068, %r1743, -1;
	setp.ge.s32 	%p280, %r659, %r5068;
	or.pred  	%p281, %p280, %p279;
	add.s32 	%r5069, %r1744, 2;
	setp.lt.s32 	%p282, %r660, %r5069;
	or.pred  	%p283, %p281, %p282;
	add.s32 	%r5070, %r1745, -2;
	setp.ge.s32 	%p284, %r660, %r5070;
	or.pred  	%p285, %p284, %p283;
	setp.lt.s32 	%p286, %r661, %r1739;
	or.pred  	%p287, %p286, %p285;
	mad.lo.s32 	%r5071, %r1741, %r1740, %r1739;
	setp.ge.s32 	%p288, %r661, %r5071;
	or.pred  	%p289, %p287, %p288;
	@%p289 bra 	$L__BB0_731;

	sub.s32 	%r1298, %r661, %r1739;
	rem.s32 	%r5072, %r1298, %r1740;
	setp.ne.s32 	%p290, %r5072, 0;
	@%p290 bra 	$L__BB0_731;

	div.s32 	%r5073, %r1298, %r1740;
	mul.lo.s32 	%r5075, %r5073, %r53;
	sub.s32 	%r1299, %r659, %r1742;
	sub.s32 	%r1300, %r660, %r1744;
	mul.lo.s32 	%r1301, %r5075, 3;
	add.s32 	%r5076, %r1299, %r1301;
	add.s32 	%r5077, %r5076, -2;
	mul.lo.s32 	%r1302, %r5077, %r54;
	add.s32 	%r5079, %r1300, %r1302;
	mul.lo.s32 	%r5080, %r5079, %r55;
	sub.s32 	%r1303, %r5080, %r1746;
	@%p15 bra 	$L__BB0_496;

	not.pred 	%p292, %p11;
	@%p292 bra 	$L__BB0_494;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3635;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5082, %r1303, %r402;
	mul.wide.s32 	%rd319, %r5082, 4;
	add.s64 	%rd320, %rd35, %rd319;
	st.global.f32 	[%rd320], %f395;

$L__BB0_494:
	not.pred 	%p293, %p13;
	@%p293 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3635;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5084, %r1303, %r403;
	mul.wide.s32 	%rd321, %r5084, 4;
	add.s64 	%rd322, %rd35, %rd321;
	st.global.f32 	[%rd322], %f396;

$L__BB0_496:
	@%p15 bra 	$L__BB0_501;

	not.pred 	%p295, %p12;
	@%p295 bra 	$L__BB0_499;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3712;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5086, %r1303, %r416;
	mul.wide.s32 	%rd323, %r5086, 4;
	add.s64 	%rd324, %rd35, %rd323;
	st.global.f32 	[%rd324], %f397;

$L__BB0_499:
	not.pred 	%p296, %p14;
	@%p296 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3712;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5088, %r1303, %r417;
	mul.wide.s32 	%rd325, %r5088, 4;
	add.s64 	%rd326, %rd35, %rd325;
	st.global.f32 	[%rd326], %f398;

$L__BB0_501:
	sub.s32 	%r7312, %r659, %r1742;
	add.s32 	%r1304, %r1301, %r53;
	add.s32 	%r5090, %r7312, %r1304;
	add.s32 	%r5091, %r5090, -2;
	mad.lo.s32 	%r5093, %r5091, %r54, %r1300;
	mul.lo.s32 	%r5094, %r5093, %r55;
	sub.s32 	%r1305, %r5094, %r1746;
	@%p15 bra 	$L__BB0_506;

	not.pred 	%p298, %p11;
	@%p298 bra 	$L__BB0_504;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3678;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5096, %r1305, %r402;
	mul.wide.s32 	%rd327, %r5096, 4;
	add.s64 	%rd328, %rd35, %rd327;
	st.global.f32 	[%rd328], %f399;

$L__BB0_504:
	not.pred 	%p299, %p13;
	@%p299 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3678;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5098, %r1305, %r403;
	mul.wide.s32 	%rd329, %r5098, 4;
	add.s64 	%rd330, %rd35, %rd329;
	st.global.f32 	[%rd330], %f400;

$L__BB0_506:
	@%p15 bra 	$L__BB0_511;

	not.pred 	%p301, %p12;
	@%p301 bra 	$L__BB0_509;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3744;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5100, %r1305, %r416;
	mul.wide.s32 	%rd331, %r5100, 4;
	add.s64 	%rd332, %rd35, %rd331;
	st.global.f32 	[%rd332], %f401;

$L__BB0_509:
	not.pred 	%p302, %p14;
	@%p302 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3744;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5102, %r1305, %r417;
	mul.wide.s32 	%rd333, %r5102, 4;
	add.s64 	%rd334, %rd35, %rd333;
	st.global.f32 	[%rd334], %f402;

$L__BB0_511:
	add.s32 	%r1306, %r1300, 1;
	add.s32 	%r5103, %r1306, %r1302;
	mul.lo.s32 	%r5104, %r5103, %r55;
	sub.s32 	%r1307, %r5104, %r1746;
	@%p15 bra 	$L__BB0_516;

	not.pred 	%p304, %p11;
	@%p304 bra 	$L__BB0_514;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3789;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5106, %r1307, %r402;
	mul.wide.s32 	%rd335, %r5106, 4;
	add.s64 	%rd336, %rd35, %rd335;
	st.global.f32 	[%rd336], %f403;

$L__BB0_514:
	not.pred 	%p305, %p13;
	@%p305 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3789;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5108, %r1307, %r403;
	mul.wide.s32 	%rd337, %r5108, 4;
	add.s64 	%rd338, %rd35, %rd337;
	st.global.f32 	[%rd338], %f404;

$L__BB0_516:
	@%p15 bra 	$L__BB0_521;

	not.pred 	%p307, %p12;
	@%p307 bra 	$L__BB0_519;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3823;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5110, %r1307, %r416;
	mul.wide.s32 	%rd339, %r5110, 4;
	add.s64 	%rd340, %rd35, %rd339;
	st.global.f32 	[%rd340], %f405;

$L__BB0_519:
	not.pred 	%p308, %p14;
	@%p308 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3823;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5112, %r1307, %r417;
	mul.wide.s32 	%rd341, %r5112, 4;
	add.s64 	%rd342, %rd35, %rd341;
	st.global.f32 	[%rd342], %f406;

$L__BB0_521:
	not.b32 	%r5113, %r1742;
	add.s32 	%r1308, %r659, %r5113;
	not.b32 	%r5114, %r1744;
	add.s32 	%r1309, %r660, %r5114;
	add.s32 	%r5115, %r1308, %r1301;
	mul.lo.s32 	%r1310, %r5115, %r54;
	add.s32 	%r5117, %r1309, %r1310;
	mul.lo.s32 	%r5118, %r5117, %r55;
	sub.s32 	%r1311, %r5118, %r1746;
	@%p15 bra 	$L__BB0_526;

	not.pred 	%p310, %p11;
	@%p310 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3868;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5120, %r1311, %r402;
	mul.wide.s32 	%rd343, %r5120, 4;
	add.s64 	%rd344, %rd35, %rd343;
	st.global.f32 	[%rd344], %f407;

$L__BB0_524:
	not.pred 	%p311, %p13;
	@%p311 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3868;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5122, %r1311, %r403;
	mul.wide.s32 	%rd345, %r5122, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f408;

$L__BB0_526:
	@%p15 bra 	$L__BB0_531;

	not.pred 	%p313, %p12;
	@%p313 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3945;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5124, %r1311, %r416;
	mul.wide.s32 	%rd347, %r5124, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f409;

$L__BB0_529:
	not.pred 	%p314, %p14;
	@%p314 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3945;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5126, %r1311, %r417;
	mul.wide.s32 	%rd349, %r5126, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f410;

$L__BB0_531:
	add.s32 	%r5128, %r1308, %r1304;
	mul.lo.s32 	%r1312, %r5128, %r54;
	add.s32 	%r5129, %r1309, %r1312;
	mul.lo.s32 	%r5130, %r5129, %r55;
	sub.s32 	%r1313, %r5130, %r1746;
	@%p15 bra 	$L__BB0_536;

	not.pred 	%p316, %p11;
	@%p316 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3911;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5132, %r1313, %r402;
	mul.wide.s32 	%rd351, %r5132, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f411;

$L__BB0_534:
	not.pred 	%p317, %p13;
	@%p317 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3911;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5134, %r1313, %r403;
	mul.wide.s32 	%rd353, %r5134, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f412;

$L__BB0_536:
	@%p15 bra 	$L__BB0_541;

	not.pred 	%p319, %p12;
	@%p319 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3977;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5136, %r1313, %r416;
	mul.wide.s32 	%rd355, %r5136, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f413;

$L__BB0_539:
	not.pred 	%p320, %p14;
	@%p320 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3977;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5138, %r1313, %r417;
	mul.wide.s32 	%rd357, %r5138, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f414;

$L__BB0_541:
	add.s32 	%r5139, %r1300, %r1310;
	mul.lo.s32 	%r5140, %r5139, %r55;
	sub.s32 	%r1314, %r5140, %r1746;
	@%p15 bra 	$L__BB0_546;

	not.pred 	%p322, %p11;
	@%p322 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5142, %r1314, %r402;
	mul.wide.s32 	%rd359, %r5142, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f415;

$L__BB0_544:
	not.pred 	%p323, %p13;
	@%p323 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5144, %r1314, %r403;
	mul.wide.s32 	%rd361, %r5144, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f416;

$L__BB0_546:
	@%p15 bra 	$L__BB0_551;

	not.pred 	%p325, %p12;
	@%p325 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7578;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5146, %r1314, %r416;
	mul.wide.s32 	%rd363, %r5146, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f417;

$L__BB0_549:
	not.pred 	%p326, %p14;
	@%p326 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7578;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5148, %r1314, %r417;
	mul.wide.s32 	%rd365, %r5148, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f418;

$L__BB0_551:
	add.s32 	%r5149, %r1300, %r1312;
	mul.lo.s32 	%r5150, %r5149, %r55;
	sub.s32 	%r1315, %r5150, %r1746;
	@%p15 bra 	$L__BB0_556;

	not.pred 	%p328, %p11;
	@%p328 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5152, %r1315, %r402;
	mul.wide.s32 	%rd367, %r5152, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f419;

$L__BB0_554:
	not.pred 	%p329, %p13;
	@%p329 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5154, %r1315, %r403;
	mul.wide.s32 	%rd369, %r5154, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f420;

$L__BB0_556:
	@%p15 bra 	$L__BB0_561;

	not.pred 	%p331, %p12;
	@%p331 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7576;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5156, %r1315, %r416;
	mul.wide.s32 	%rd371, %r5156, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f421;

$L__BB0_559:
	not.pred 	%p332, %p14;
	@%p332 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7576;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5158, %r1315, %r417;
	mul.wide.s32 	%rd373, %r5158, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f422;

$L__BB0_561:
	add.s32 	%r1316, %r1304, %r53;
	add.s32 	%r5160, %r1308, %r1316;
	mul.lo.s32 	%r1317, %r5160, %r54;
	add.s32 	%r5162, %r1300, %r1317;
	mul.lo.s32 	%r5163, %r5162, %r55;
	sub.s32 	%r1318, %r5163, %r1746;
	@%p15 bra 	$L__BB0_566;

	not.pred 	%p334, %p11;
	@%p334 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5165, %r1318, %r402;
	mul.wide.s32 	%rd375, %r5165, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f423;

$L__BB0_564:
	not.pred 	%p335, %p13;
	@%p335 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5167, %r1318, %r403;
	mul.wide.s32 	%rd377, %r5167, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f424;

$L__BB0_566:
	@%p15 bra 	$L__BB0_571;

	not.pred 	%p337, %p12;
	@%p337 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5169, %r1318, %r416;
	mul.wide.s32 	%rd379, %r5169, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f425;

$L__BB0_569:
	not.pred 	%p338, %p14;
	@%p338 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5171, %r1318, %r417;
	mul.wide.s32 	%rd381, %r5171, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f426;

$L__BB0_571:
	add.s32 	%r7305, %r1300, 1;
	add.s32 	%r5172, %r7305, %r1310;
	mul.lo.s32 	%r5173, %r5172, %r55;
	sub.s32 	%r1319, %r5173, %r1746;
	@%p15 bra 	$L__BB0_576;

	not.pred 	%p340, %p11;
	@%p340 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5175, %r1319, %r402;
	mul.wide.s32 	%rd383, %r5175, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f427;

$L__BB0_574:
	not.pred 	%p341, %p13;
	@%p341 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5177, %r1319, %r403;
	mul.wide.s32 	%rd385, %r5177, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f428;

$L__BB0_576:
	@%p15 bra 	$L__BB0_581;

	not.pred 	%p343, %p12;
	@%p343 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7574;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5179, %r1319, %r416;
	mul.wide.s32 	%rd387, %r5179, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f429;

$L__BB0_579:
	not.pred 	%p344, %p14;
	@%p344 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7574;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5181, %r1319, %r417;
	mul.wide.s32 	%rd389, %r5181, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f430;

$L__BB0_581:
	add.s32 	%r7306, %r1300, 1;
	add.s32 	%r5182, %r7306, %r1312;
	mul.lo.s32 	%r5183, %r5182, %r55;
	sub.s32 	%r1320, %r5183, %r1746;
	@%p15 bra 	$L__BB0_586;

	not.pred 	%p346, %p11;
	@%p346 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4249;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5185, %r1320, %r402;
	mul.wide.s32 	%rd391, %r5185, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f431;

$L__BB0_584:
	not.pred 	%p347, %p13;
	@%p347 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4249;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5187, %r1320, %r403;
	mul.wide.s32 	%rd393, %r5187, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f432;

$L__BB0_586:
	@%p15 bra 	$L__BB0_591;

	not.pred 	%p349, %p12;
	@%p349 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4330;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5189, %r1320, %r416;
	mul.wide.s32 	%rd395, %r5189, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f433;

$L__BB0_589:
	not.pred 	%p350, %p14;
	@%p350 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4330;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5191, %r1320, %r417;
	mul.wide.s32 	%rd397, %r5191, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f434;

$L__BB0_591:
	add.s32 	%r7307, %r1300, 1;
	add.s32 	%r5192, %r7307, %r1317;
	mul.lo.s32 	%r5193, %r5192, %r55;
	sub.s32 	%r1321, %r5193, %r1746;
	@%p15 bra 	$L__BB0_596;

	not.pred 	%p352, %p11;
	@%p352 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1197;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5195, %r1321, %r402;
	mul.wide.s32 	%rd399, %r5195, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f435;

$L__BB0_594:
	not.pred 	%p353, %p13;
	@%p353 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1197;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5197, %r1321, %r403;
	mul.wide.s32 	%rd401, %r5197, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f436;

$L__BB0_596:
	@%p15 bra 	$L__BB0_601;

	not.pred 	%p355, %p12;
	@%p355 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5199, %r1321, %r416;
	mul.wide.s32 	%rd403, %r5199, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f437;

$L__BB0_599:
	not.pred 	%p356, %p14;
	@%p356 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5201, %r1321, %r417;
	mul.wide.s32 	%rd405, %r5201, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f438;

$L__BB0_601:
	add.s32 	%r1322, %r1300, 2;
	add.s32 	%r5202, %r1322, %r1310;
	mul.lo.s32 	%r5203, %r5202, %r55;
	sub.s32 	%r1323, %r5203, %r1746;
	@%p15 bra 	$L__BB0_606;

	not.pred 	%p358, %p11;
	@%p358 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4390;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5205, %r1323, %r402;
	mul.wide.s32 	%rd407, %r5205, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f439;

$L__BB0_604:
	not.pred 	%p359, %p13;
	@%p359 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4390;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5207, %r1323, %r403;
	mul.wide.s32 	%rd409, %r5207, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f440;

$L__BB0_606:
	@%p15 bra 	$L__BB0_611;

	not.pred 	%p361, %p12;
	@%p361 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4424;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5209, %r1323, %r416;
	mul.wide.s32 	%rd411, %r5209, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f441;

$L__BB0_609:
	not.pred 	%p362, %p14;
	@%p362 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4424;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5211, %r1323, %r417;
	mul.wide.s32 	%rd413, %r5211, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f442;

$L__BB0_611:
	mul.lo.s32 	%r1324, %r5090, %r54;
	add.s32 	%r5214, %r1309, %r1324;
	mul.lo.s32 	%r5215, %r5214, %r55;
	sub.s32 	%r1325, %r5215, %r1746;
	@%p15 bra 	$L__BB0_616;

	not.pred 	%p364, %p11;
	@%p364 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5217, %r1325, %r402;
	mul.wide.s32 	%rd415, %r5217, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f443;

$L__BB0_614:
	not.pred 	%p365, %p13;
	@%p365 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5219, %r1325, %r403;
	mul.wide.s32 	%rd417, %r5219, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f444;

$L__BB0_616:
	@%p15 bra 	$L__BB0_621;

	not.pred 	%p367, %p12;
	@%p367 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5221, %r1325, %r416;
	mul.wide.s32 	%rd419, %r5221, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f445;

$L__BB0_619:
	not.pred 	%p368, %p14;
	@%p368 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5223, %r1325, %r417;
	mul.wide.s32 	%rd421, %r5223, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f446;

$L__BB0_621:
	sub.s32 	%r7313, %r659, %r1742;
	add.s32 	%r5225, %r7313, %r1316;
	mul.lo.s32 	%r1326, %r5225, %r54;
	add.s32 	%r5226, %r1309, %r1326;
	mul.lo.s32 	%r5227, %r5226, %r55;
	sub.s32 	%r1327, %r5227, %r1746;
	@%p15 bra 	$L__BB0_626;

	not.pred 	%p370, %p11;
	@%p370 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1227;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5229, %r1327, %r402;
	mul.wide.s32 	%rd423, %r5229, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f447;

$L__BB0_624:
	not.pred 	%p371, %p13;
	@%p371 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1227;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5231, %r1327, %r403;
	mul.wide.s32 	%rd425, %r5231, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f448;

$L__BB0_626:
	@%p15 bra 	$L__BB0_631;

	not.pred 	%p373, %p12;
	@%p373 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1233;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5233, %r1327, %r416;
	mul.wide.s32 	%rd427, %r5233, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f449;

$L__BB0_629:
	not.pred 	%p374, %p14;
	@%p374 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1233;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5235, %r1327, %r417;
	mul.wide.s32 	%rd429, %r5235, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f450;

$L__BB0_631:
	mul.lo.s32 	%r1328, %r5076, %r54;
	add.s32 	%r5238, %r1300, %r1328;
	mul.lo.s32 	%r5239, %r5238, %r55;
	sub.s32 	%r1329, %r5239, %r1746;
	@%p15 bra 	$L__BB0_636;

	not.pred 	%p376, %p11;
	@%p376 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5241, %r1329, %r402;
	mul.wide.s32 	%rd431, %r5241, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f451;

$L__BB0_634:
	not.pred 	%p377, %p13;
	@%p377 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5243, %r1329, %r403;
	mul.wide.s32 	%rd433, %r5243, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f452;

$L__BB0_636:
	@%p15 bra 	$L__BB0_641;

	not.pred 	%p379, %p12;
	@%p379 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5245, %r1329, %r416;
	mul.wide.s32 	%rd435, %r5245, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f453;

$L__BB0_639:
	not.pred 	%p380, %p14;
	@%p380 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5247, %r1329, %r417;
	mul.wide.s32 	%rd437, %r5247, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f454;

$L__BB0_641:
	add.s32 	%r5248, %r1300, %r1324;
	mul.lo.s32 	%r5249, %r5248, %r55;
	sub.s32 	%r1330, %r5249, %r1746;
	@%p15 bra 	$L__BB0_646;

	not.pred 	%p382, %p11;
	@%p382 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5251, %r1330, %r402;
	mul.wide.s32 	%rd439, %r5251, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f455;

$L__BB0_644:
	not.pred 	%p383, %p13;
	@%p383 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5253, %r1330, %r403;
	mul.wide.s32 	%rd441, %r5253, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f456;

$L__BB0_646:
	@%p15 bra 	$L__BB0_651;

	not.pred 	%p385, %p12;
	@%p385 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5255, %r1330, %r416;
	mul.wide.s32 	%rd443, %r5255, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f457;

$L__BB0_649:
	not.pred 	%p386, %p14;
	@%p386 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5257, %r1330, %r417;
	mul.wide.s32 	%rd445, %r5257, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f458;

$L__BB0_651:
	add.s32 	%r5258, %r1300, %r1326;
	mul.lo.s32 	%r5259, %r5258, %r55;
	sub.s32 	%r1331, %r5259, %r1746;
	@%p15 bra 	$L__BB0_656;

	not.pred 	%p388, %p11;
	@%p388 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5261, %r1331, %r402;
	mul.wide.s32 	%rd447, %r5261, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f459;

$L__BB0_654:
	not.pred 	%p389, %p13;
	@%p389 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5263, %r1331, %r403;
	mul.wide.s32 	%rd449, %r5263, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f460;

$L__BB0_656:
	@%p15 bra 	$L__BB0_661;

	not.pred 	%p391, %p12;
	@%p391 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5265, %r1331, %r416;
	mul.wide.s32 	%rd451, %r5265, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f461;

$L__BB0_659:
	not.pred 	%p392, %p14;
	@%p392 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5267, %r1331, %r417;
	mul.wide.s32 	%rd453, %r5267, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f462;

$L__BB0_661:
	add.s32 	%r7308, %r1300, 1;
	add.s32 	%r5268, %r7308, %r1328;
	mul.lo.s32 	%r5269, %r5268, %r55;
	sub.s32 	%r1332, %r5269, %r1746;
	@%p15 bra 	$L__BB0_666;

	not.pred 	%p394, %p11;
	@%p394 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5271, %r1332, %r402;
	mul.wide.s32 	%rd455, %r5271, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f463;

$L__BB0_664:
	not.pred 	%p395, %p13;
	@%p395 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5273, %r1332, %r403;
	mul.wide.s32 	%rd457, %r5273, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f464;

$L__BB0_666:
	@%p15 bra 	$L__BB0_671;

	not.pred 	%p397, %p12;
	@%p397 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5275, %r1332, %r416;
	mul.wide.s32 	%rd459, %r5275, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f465;

$L__BB0_669:
	not.pred 	%p398, %p14;
	@%p398 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5277, %r1332, %r417;
	mul.wide.s32 	%rd461, %r5277, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f466;

$L__BB0_671:
	add.s32 	%r7309, %r1300, 1;
	add.s32 	%r5278, %r7309, %r1324;
	mul.lo.s32 	%r5279, %r5278, %r55;
	sub.s32 	%r1333, %r5279, %r1746;
	@%p15 bra 	$L__BB0_676;

	not.pred 	%p400, %p11;
	@%p400 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5281, %r1333, %r402;
	mul.wide.s32 	%rd463, %r5281, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f467;

$L__BB0_674:
	not.pred 	%p401, %p13;
	@%p401 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5283, %r1333, %r403;
	mul.wide.s32 	%rd465, %r5283, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f468;

$L__BB0_676:
	@%p15 bra 	$L__BB0_681;

	not.pred 	%p403, %p12;
	@%p403 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5285, %r1333, %r416;
	mul.wide.s32 	%rd467, %r5285, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f469;

$L__BB0_679:
	not.pred 	%p404, %p14;
	@%p404 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5287, %r1333, %r417;
	mul.wide.s32 	%rd469, %r5287, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f470;

$L__BB0_681:
	add.s32 	%r7310, %r1300, 1;
	add.s32 	%r5288, %r7310, %r1326;
	mul.lo.s32 	%r5289, %r5288, %r55;
	sub.s32 	%r1334, %r5289, %r1746;
	@%p15 bra 	$L__BB0_686;

	not.pred 	%p406, %p11;
	@%p406 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5291, %r1334, %r402;
	mul.wide.s32 	%rd471, %r5291, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f471;

$L__BB0_684:
	not.pred 	%p407, %p13;
	@%p407 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5293, %r1334, %r403;
	mul.wide.s32 	%rd473, %r5293, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f472;

$L__BB0_686:
	@%p15 bra 	$L__BB0_691;

	not.pred 	%p409, %p12;
	@%p409 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5295, %r1334, %r416;
	mul.wide.s32 	%rd475, %r5295, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f473;

$L__BB0_689:
	not.pred 	%p410, %p14;
	@%p410 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5297, %r1334, %r417;
	mul.wide.s32 	%rd477, %r5297, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f474;

$L__BB0_691:
	add.s32 	%r5298, %r1322, %r1326;
	mul.lo.s32 	%r5299, %r5298, %r55;
	sub.s32 	%r1335, %r5299, %r1746;
	@%p15 bra 	$L__BB0_696;

	not.pred 	%p412, %p11;
	@%p412 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1282;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5301, %r1335, %r402;
	mul.wide.s32 	%rd479, %r5301, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f475;

$L__BB0_694:
	not.pred 	%p413, %p13;
	@%p413 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1282;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5303, %r1335, %r403;
	mul.wide.s32 	%rd481, %r5303, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f476;

$L__BB0_696:
	@%p15 bra 	$L__BB0_701;

	not.pred 	%p415, %p12;
	@%p415 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1283;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5305, %r1335, %r416;
	mul.wide.s32 	%rd483, %r5305, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f477;

$L__BB0_699:
	not.pred 	%p416, %p14;
	@%p416 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1283;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5307, %r1335, %r417;
	mul.wide.s32 	%rd485, %r5307, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f478;

$L__BB0_701:
	sub.s32 	%r7314, %r659, %r1742;
	add.s32 	%r1336, %r7314, 1;
	add.s32 	%r5308, %r1336, %r1304;
	mad.lo.s32 	%r5310, %r5308, %r54, %r1300;
	mul.lo.s32 	%r5311, %r5310, %r55;
	sub.s32 	%r1337, %r5311, %r1746;
	@%p15 bra 	$L__BB0_706;

	not.pred 	%p418, %p11;
	@%p418 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5313, %r1337, %r402;
	mul.wide.s32 	%rd487, %r5313, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f479;

$L__BB0_704:
	not.pred 	%p419, %p13;
	@%p419 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5315, %r1337, %r403;
	mul.wide.s32 	%rd489, %r5315, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f480;

$L__BB0_706:
	@%p15 bra 	$L__BB0_711;

	not.pred 	%p421, %p12;
	@%p421 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5317, %r1337, %r416;
	mul.wide.s32 	%rd491, %r5317, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f481;

$L__BB0_709:
	not.pred 	%p422, %p14;
	@%p422 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5319, %r1337, %r417;
	mul.wide.s32 	%rd493, %r5319, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f482;

$L__BB0_711:
	add.s32 	%r5321, %r1336, %r1316;
	mul.lo.s32 	%r1338, %r5321, %r54;
	add.s32 	%r5322, %r1300, %r1338;
	mul.lo.s32 	%r5323, %r5322, %r55;
	sub.s32 	%r1339, %r5323, %r1746;
	@%p15 bra 	$L__BB0_716;

	not.pred 	%p424, %p11;
	@%p424 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5325, %r1339, %r402;
	mul.wide.s32 	%rd495, %r5325, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f483;

$L__BB0_714:
	not.pred 	%p425, %p13;
	@%p425 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5327, %r1339, %r403;
	mul.wide.s32 	%rd497, %r5327, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f484;

$L__BB0_716:
	@%p15 bra 	$L__BB0_721;

	not.pred 	%p427, %p12;
	@%p427 bra 	$L__BB0_719;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5329, %r1339, %r416;
	mul.wide.s32 	%rd499, %r5329, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f485;

$L__BB0_719:
	not.pred 	%p428, %p14;
	@%p428 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5331, %r1339, %r417;
	mul.wide.s32 	%rd501, %r5331, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f486;

$L__BB0_721:
	add.s32 	%r7311, %r1300, 1;
	add.s32 	%r5332, %r7311, %r1338;
	mul.lo.s32 	%r5333, %r5332, %r55;
	sub.s32 	%r1340, %r5333, %r1746;
	@%p15 bra 	$L__BB0_726;

	not.pred 	%p430, %p11;
	@%p430 bra 	$L__BB0_724;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5335, %r1340, %r402;
	mul.wide.s32 	%rd503, %r5335, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f487;

$L__BB0_724:
	not.pred 	%p431, %p13;
	@%p431 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5337, %r1340, %r403;
	mul.wide.s32 	%rd505, %r5337, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f488;

$L__BB0_726:
	@%p15 bra 	$L__BB0_731;

	not.pred 	%p433, %p12;
	@%p433 bra 	$L__BB0_729;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5339, %r1340, %r416;
	mul.wide.s32 	%rd507, %r5339, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f489;

$L__BB0_729:
	not.pred 	%p434, %p14;
	@%p434 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5341, %r1340, %r417;
	mul.wide.s32 	%rd509, %r5341, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f490;

$L__BB0_731:
	setp.eq.s32 	%p435, %r35, %r2157;
	@%p435 bra 	$L__BB0_733;

	mad.lo.s32 	%r5342, %r1729, %r35, %r36;
	mov.u32 	%r5343, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5344, %r5342, 1280, %r5343;
	add.s32 	%r5345, %r5344, -256;
	shl.b32 	%r5346, %r40, 4;
	add.s32 	%r5347, %r5345, %r5346;
	st.shared.v4.u32 	[%r5347+256], {%r3868, %r3945, %r1227, %r1233};
	st.shared.v4.u32 	[%r5347+1024], {%r3635, %r3712, %r1173, %r1185};
	shl.b32 	%r5348, %r40, 3;
	add.s32 	%r5349, %r5345, %r5348;
	st.shared.v2.u32 	[%r5349+768], {%r3911, %r3977};

$L__BB0_733:
	setp.eq.s32 	%p436, %r36, %r2162;
	@%p436 bra 	$L__BB0_737;

	mad.lo.s32 	%r5353, %r1728, 384, -64;
	mul.lo.s32 	%r5354, %r5353, %r36;
	mad.lo.s32 	%r5356, %r2158, %r2157, %r5354;
	mad.lo.s32 	%r5357, %r2560, 384, %r5356;
	shl.b32 	%r5358, %r5357, 2;
	mov.u32 	%r5359, _ZN6kernel5shmemE;
	add.s32 	%r5360, %r5359, %r5358;
	add.s32 	%r5361, %r5360, -256;
	shl.b32 	%r5362, %r40, 4;
	add.s32 	%r5363, %r5361, %r5362;
	st.shared.v4.u32 	[%r5363+256], {%r3789, %r3823, %r1197, %r1209};
	st.shared.v4.u32 	[%r5363+1024], {%r4390, %r4424, %r1282, %r1283};
	shl.b32 	%r5364, %r40, 3;
	add.s32 	%r1344, %r5361, %r5364;
	@%p435 bra 	$L__BB0_736;

	st.shared.v2.u32 	[%r1344], {%r3678, %r3744};

$L__BB0_736:
	st.shared.v2.u32 	[%r1344+768], {%r4249, %r4330};

$L__BB0_737:
	setp.ne.s32 	%p438, %r35, %r2157;
	ld.param.u64 	%rd511, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd511;
	@%p438 bra 	$L__BB0_739;

	mad.lo.s32 	%r5366, %r657, %r1731, %r38;
	mul.lo.s32 	%r5367, %r1729, %r5366;
	mul.lo.s32 	%r5368, %r5367, 768;
	mad.lo.s32 	%r5369, %r36, 384, %r5368;
	add.s32 	%r5370, %r5369, -64;
	mul.wide.s32 	%rd512, %r5370, 4;
	add.s64 	%rd513, %rd36, %rd512;
	add.s64 	%rd515, %rd513, %rd277;
	st.global.v4.u32 	[%rd515+256], {%r3868, %r3945, %r1227, %r1233};
	st.global.v4.u32 	[%rd515+1024], {%r3635, %r3712, %r1173, %r1185};
	add.s64 	%rd517, %rd513, %rd279;
	st.global.v2.u32 	[%rd517+768], {%r3911, %r3977};
	st.global.v2.u32 	[%rd517+1536], {%r3678, %r3744};

$L__BB0_739:
	setp.ne.s32 	%p439, %r36, %r2162;
	@%p439 bra 	$L__BB0_744;

	ld.param.u64 	%rd562, [%rd1+80];
	cvta.to.global.u64 	%rd561, %rd562;
	mad.lo.s32 	%r5373, %r658, %r1730, %r37;
	mul.lo.s32 	%r5377, %r5373, %r1791;
	mad.lo.s32 	%r5380, %r2560, 384, %r5377;
	add.s32 	%r5381, %r5380, -64;
	mad.lo.s32 	%r5384, %r1793, %r68, %r5381;
	mul.wide.s32 	%rd518, %r5384, 4;
	add.s64 	%rd519, %rd561, %rd518;
	add.s64 	%rd521, %rd519, %rd277;
	st.global.v4.u32 	[%rd521+256], {%r3789, %r3823, %r1197, %r1209};
	st.global.v4.u32 	[%rd521+1024], {%r4390, %r4424, %r1282, %r1283};
	add.s64 	%rd37, %rd519, %rd279;
	@%p435 bra 	$L__BB0_742;

	st.global.v2.u32 	[%rd37], {%r3678, %r3744};

$L__BB0_742:
	st.global.v2.u32 	[%rd37+768], {%r4249, %r4330};
	@%p228 bra 	$L__BB0_744;

	st.global.v2.u32 	[%rd37+1536], {%r7744, %r7743};

$L__BB0_744:
	setp.ge.s32 	%p442, %r35, %r2157;
	@%p442 bra 	$L__BB0_746;

	mul.lo.s32 	%r5385, %r1729, 320;
	mul.lo.s32 	%r5386, %r36, 320;
	mad.lo.s32 	%r5387, %r5385, %r35, %r5386;
	add.s32 	%r5391, %r1790, -64;
	mad.lo.s32 	%r5395, %r5391, %r2162, %r2159;
	add.s32 	%r5396, %r5387, %r5395;
	shl.b32 	%r5397, %r5396, 2;
	mov.u32 	%r5398, _ZN6kernel5shmemE;
	add.s32 	%r5399, %r5398, %r5397;
	shl.b32 	%r5400, %r40, 4;
	add.s32 	%r5401, %r5399, %r5400;
	st.shared.v4.u32 	[%r5401], {%r7792, %r7791, %r7787, %r7785};
	shl.b32 	%r5402, %r40, 3;
	add.s32 	%r5403, %r5399, %r5402;
	st.shared.v2.u32 	[%r5403+512], {%r7529, %r7524};
	st.shared.v4.u32 	[%r5401+768], {%r7553, %r7544, %r7516, %r7512};

$L__BB0_746:
	setp.ge.s32 	%p443, %r36, %r2162;
	@%p443 bra 	$L__BB0_750;

	mad.lo.s32 	%r5409, %r2560, 384, %r2165;
	mad.lo.s32 	%r5412, %r2160, %r36, %r5409;
	add.s32 	%r5418, %r5412, %r2163;
	shl.b32 	%r5419, %r5418, 2;
	mov.u32 	%r5420, _ZN6kernel5shmemE;
	add.s32 	%r5421, %r5420, %r5419;
	shl.b32 	%r5422, %r40, 3;
	add.s32 	%r5423, %r5421, %r5422;
	@%p442 bra 	$L__BB0_749;

	add.s32 	%r7294, %r5423, -256;
	st.shared.v2.u32 	[%r7294], {%r7548, %r7541};

$L__BB0_749:
	shl.b32 	%r5442, %r40, 4;
	add.s32 	%r5443, %r5421, %r5442;
	st.shared.v4.u32 	[%r5443], {%r7539, %r7535, %r7504, %r7500};
	add.s32 	%r7295, %r5423, -256;
	st.shared.v2.u32 	[%r7295+768], {%r7507, %r7501};
	st.shared.v4.u32 	[%r5443+768], {%r7790, %r7789, %r7778, %r7777};

$L__BB0_750:
	bar.sync 	0;
	@%p223 bra 	$L__BB0_752;

	mul.lo.s32 	%r5444, %r1729, 320;
	add.s32 	%r5445, %r35, -1;
	mul.lo.s32 	%r5446, %r36, 320;
	mad.lo.s32 	%r5447, %r5444, %r5445, %r5446;
	shl.b32 	%r5448, %r5447, 2;
	mov.u32 	%r5449, _ZN6kernel5shmemE;
	add.s32 	%r5450, %r5449, %r5448;
	add.s32 	%r5451, %r5450, -256;
	shl.b32 	%r5452, %r40, 4;
	add.s32 	%r5453, %r5451, %r5452;
	ld.shared.v4.u32 	{%r7740, %r7738, %r7732, %r7731}, [%r5453+256];
	ld.shared.v4.u32 	{%r7742, %r7741, %r7736, %r7735}, [%r5453+1024];
	shl.b32 	%r5462, %r40, 3;
	add.s32 	%r5463, %r5451, %r5462;
	ld.shared.v2.u32 	{%r7739, %r7737}, [%r5463+768];

$L__BB0_752:
	@%p226 bra 	$L__BB0_755;

	mad.lo.s32 	%r5468, %r1728, 384, -64;
	add.s32 	%r5469, %r36, -1;
	mul.lo.s32 	%r5470, %r5468, %r5469;
	mad.lo.s32 	%r5473, %r2158, %r2157, %r5470;
	mad.lo.s32 	%r5474, %r2560, 384, %r5473;
	shl.b32 	%r5475, %r5474, 2;
	mov.u32 	%r5476, _ZN6kernel5shmemE;
	add.s32 	%r5477, %r5476, %r5475;
	add.s32 	%r5478, %r5477, -256;
	shl.b32 	%r5479, %r40, 4;
	add.s32 	%r5480, %r5478, %r5479;
	ld.shared.v4.u32 	{%r7756, %r7755, %r7753, %r7751}, [%r5480+256];
	ld.shared.v4.u32 	{%r7750, %r7749, %r7747, %r7745}, [%r5480+1024];
	shl.b32 	%r5489, %r40, 3;
	add.s32 	%r5490, %r5478, %r5489;
	ld.shared.v2.u32 	{%r7754, %r7752}, [%r5490+768];
	@%p223 bra 	$L__BB0_755;

	add.s32 	%r7296, %r5490, 768;
	ld.shared.v2.u32 	{%r7734, %r7733}, [%r7296+768];

$L__BB0_755:
	ld.param.u64 	%rd523, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd523;
	mov.u32 	%r7871, %r7713;
	mov.u32 	%r7872, %r7714;
	mov.u32 	%r7857, %r7701;
	mov.u32 	%r7858, %r7702;
	mov.u32 	%r7859, %r7703;
	mov.u32 	%r7860, %r7704;
	mov.u32 	%r7873, %r7715;
	mov.u32 	%r7875, %r7717;
	mov.u32 	%r7863, %r7705;
	mov.u32 	%r7864, %r7706;
	mov.u32 	%r7865, %r7707;
	mov.u32 	%r7866, %r7708;
	@%p228 bra 	$L__BB0_759;

	mad.lo.s32 	%r5496, %r657, %r1731, %r38;
	mad.lo.s32 	%r5497, %r5496, 768, 384;
	mul.lo.s32 	%r5498, %r5497, %r1729;
	mad.lo.s32 	%r5499, %r36, 384, %r5498;
	add.s32 	%r5500, %r5499, -128;
	mul.wide.s32 	%rd524, %r5500, 4;
	add.s64 	%rd525, %rd38, %rd524;
	add.s64 	%rd527, %rd525, %rd277;
	add.s64 	%rd39, %rd527, 512;
	mov.u32 	%r7871, %r7713;
	mov.u32 	%r7872, %r7714;
	mov.u32 	%r7873, %r7715;
	mov.u32 	%r7875, %r7717;
	@%p226 bra 	$L__BB0_758;

	ld.global.v4.u32 	{%r7872, %r7871, %r7875, %r7873}, [%rd39+-512];

$L__BB0_758:
	ld.global.v4.u32 	{%r7859, %r7857, %r7860, %r7858}, [%rd39];
	ld.global.v4.u32 	{%r7866, %r7865, %r7864, %r7863}, [%rd39+512];
	ld.global.v4.u32 	{%r7710, %r7709, %r7712, %r7711}, [%rd39+1024];

$L__BB0_759:
	mov.u32 	%r7874, %r7716;
	mov.u32 	%r7876, %r7718;
	mov.u32 	%r7877, %r7719;
	mov.u32 	%r7878, %r7720;
	mov.u32 	%r7879, %r7721;
	mov.u32 	%r7880, %r7722;
	mov.u32 	%r7881, %r7723;
	mov.u32 	%r7882, %r7724;
	@%p231 bra 	$L__BB0_761;

	mad.lo.s32 	%r5518, %r658, %r1730, %r37;
	mad.lo.s32 	%r5524, %r2560, 384, %r69;
	mad.lo.s32 	%r5525, %r5518, %r1791, %r5524;
	mad.lo.s32 	%r5528, %r1793, %r68, %r5525;
	mul.wide.s32 	%rd528, %r5528, 4;
	add.s64 	%rd529, %rd38, %rd528;
	add.s64 	%rd531, %rd529, %rd277;
	ld.global.v4.u32 	{%r7726, %r7725, %r7728, %r7727}, [%rd531];
	ld.global.v4.u32 	{%r7882, %r7880, %r7878, %r7877}, [%rd531+512];
	ld.global.v4.u32 	{%r7881, %r7879, %r7876, %r7874}, [%rd531+1024];
	ld.global.v4.u32 	{%r7872, %r7871, %r7875, %r7873}, [%rd531+1536];

$L__BB0_761:
	neg.s32 	%r7302, %r1733;
	not.b32 	%r7301, %r38;
	add.s32 	%r7300, %r1731, %r7301;
	mul.lo.s32 	%r7299, %r7300, %r1732;
	not.b32 	%r7298, %r37;
	add.s32 	%r7297, %r1730, %r7298;
	mad.lo.s32 	%r5552, %r7297, %r1732, %r7299;
	add.s32 	%r5553, %r5552, %r1733;
	add.s32 	%r5562, %r5553, %r2566;
	add.s32 	%r1464, %r7580, 1;
	add.s32 	%r5563, %r1464, %r5562;
	div.s32 	%r5564, %r5563, %r1733;
	mad.lo.s32 	%r1465, %r5564, %r7302, %r5563;
	mad.lo.s32 	%r5571, %r5564, %r42, %r2577;
	ld.param.u64 	%rd532, [%rd1+96];
	cvta.to.global.u64 	%rd533, %rd532;
	rem.s32 	%r5572, %r5571, %r1734;
	shr.u32 	%r5573, %r5572, 31;
	add.s32 	%r5574, %r5572, %r5573;
	shr.s32 	%r5575, %r5574, 1;
	mad.lo.s32 	%r5576, %r5575, %r1733, %r1465;
	shl.b32 	%r5577, %r5576, 5;
	add.s32 	%r5578, %r5577, %r40;
	cvt.s64.s32 	%rd40, %r5578;
	mul.wide.s32 	%rd534, %r5578, 4;
	add.s64 	%rd535, %rd533, %rd534;
	ld.global.u32 	%r7582, [%rd535];
	ld.param.u64 	%rd536, [%rd1+104];
	cvta.to.global.u64 	%rd41, %rd536;
	@%p86 bra 	$L__BB0_763;
	bra.uni 	$L__BB0_762;

$L__BB0_763:
	shl.b64 	%rd539, %rd40, 2;
	add.s64 	%rd540, %rd41, %rd539;
	ld.global.u32 	%r7581, [%rd540];
	bra.uni 	$L__BB0_764;

$L__BB0_762:
	shl.b32 	%r5579, %r1465, 5;
	add.s32 	%r5580, %r5579, %r40;
	mul.wide.s32 	%rd537, %r5580, 16;
	add.s64 	%rd538, %rd41, %rd537;
	ld.global.v4.u32 	{%r5581, %r5582, %r5583, %r5584}, [%rd538];
	mov.u32 	%r7412, %r7416;
	mov.u32 	%r7413, %r7417;
	mov.u32 	%r7414, %r7418;
	mov.u32 	%r7415, %r7419;
	mov.u32 	%r7416, %r7420;
	mov.u32 	%r7417, %r7421;
	mov.u32 	%r7418, %r7422;
	mov.u32 	%r7419, %r7423;
	mov.u32 	%r7420, %r5584;
	mov.u32 	%r7421, %r5583;
	mov.u32 	%r7422, %r5582;
	mov.u32 	%r7423, %r5581;

$L__BB0_764:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5585, {low,high};}

	// end inline asm
	selp.b32 	%r5587, %r7407, %r5585, %p15;
	// begin inline asm
	{mul.f16x2 %r5586,%r5587,%r7550;
}
	// end inline asm
	selp.b32 	%r5590, %r7411, %r5585, %p15;
	// begin inline asm
	{mul.f16x2 %r5589,%r5590,%r7543;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5592, {low,high};}

	// end inline asm
	selp.b32 	%r5594, %r7407, %r5592, %p15;
	// begin inline asm
	{mul.f16x2 %r5593,%r5594,%r7531;
}
	// end inline asm
	selp.b32 	%r5597, %r7411, %r5592, %p15;
	// begin inline asm
	{mul.f16x2 %r5596,%r5597,%r7526;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5599, {low,high};}

	// end inline asm
	selp.b32 	%r5601, %r7407, %r5599, %p15;
	// begin inline asm
	{mul.f16x2 %r5600,%r5601,%r7518;
}
	// end inline asm
	selp.b32 	%r5604, %r7411, %r5599, %p15;
	// begin inline asm
	{mul.f16x2 %r5603,%r5604,%r7517;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5606, {low,high};}

	// end inline asm
	selp.b32 	%r5608, %r7407, %r5606, %p15;
	// begin inline asm
	{mul.f16x2 %r5607,%r5608,%r7522;
}
	// end inline asm
	selp.b32 	%r5611, %r7411, %r5606, %p15;
	// begin inline asm
	{mul.f16x2 %r5610,%r5611,%r7521;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5613, {low,high};}

	// end inline asm
	selp.b32 	%r5615, %r7407, %r5613, %p15;
	// begin inline asm
	{mul.f16x2 %r5614,%r5615,%r7520;
}
	// end inline asm
	selp.b32 	%r5618, %r7411, %r5613, %p15;
	// begin inline asm
	{mul.f16x2 %r5617,%r5618,%r7514;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5620, {low,high};}

	// end inline asm
	selp.b32 	%r5622, %r7407, %r5620, %p15;
	// begin inline asm
	{mul.f16x2 %r5621,%r5622,%r7510;
}
	// end inline asm
	selp.b32 	%r5625, %r7411, %r5620, %p15;
	// begin inline asm
	{mul.f16x2 %r5624,%r5625,%r7509;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5627, {low,high};}

	// end inline asm
	selp.b32 	%r5629, %r7407, %r5627, %p15;
	// begin inline asm
	{mul.f16x2 %r5628,%r5629,%r7508;
}
	// end inline asm
	selp.b32 	%r5632, %r7411, %r5627, %p15;
	// begin inline asm
	{mul.f16x2 %r5631,%r5632,%r7502;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5634, {low,high};}

	// end inline asm
	selp.b32 	%r5636, %r7407, %r5634, %p15;
	// begin inline asm
	{mul.f16x2 %r5635,%r5636,%r7495;
}
	// end inline asm
	selp.b32 	%r5639, %r7411, %r5634, %p15;
	// begin inline asm
	{mul.f16x2 %r5638,%r5639,%r7494;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5641, {low,high};}

	// end inline asm
	selp.b32 	%r5643, %r7407, %r5641, %p15;
	// begin inline asm
	{mul.f16x2 %r5642,%r5643,%r7724;
}
	// end inline asm
	selp.b32 	%r5646, %r7411, %r5641, %p15;
	// begin inline asm
	{mul.f16x2 %r5645,%r5646,%r7722;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5648, {low,high};}

	// end inline asm
	selp.b32 	%r5650, %r7407, %r5648, %p15;
	// begin inline asm
	{mul.f16x2 %r5649,%r5650,%r7723;
}
	// end inline asm
	selp.b32 	%r5653, %r7411, %r5648, %p15;
	// begin inline asm
	{mul.f16x2 %r5652,%r5653,%r7721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5655, {low,high};}

	// end inline asm
	selp.b32 	%r5657, %r7407, %r5655, %p15;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7487;
}
	// end inline asm
	selp.b32 	%r5660, %r7411, %r5655, %p15;
	// begin inline asm
	{mul.f16x2 %r5659,%r5660,%r7486;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5662, {low,high};}

	// end inline asm
	selp.b32 	%r5664, %r7407, %r5662, %p15;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7491;
}
	// end inline asm
	selp.b32 	%r5667, %r7411, %r5662, %p15;
	// begin inline asm
	{mul.f16x2 %r5666,%r5667,%r7490;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5669, {low,high};}

	// end inline asm
	selp.b32 	%r5671, %r7407, %r5669, %p15;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7489;
}
	// end inline asm
	selp.b32 	%r5674, %r7411, %r5669, %p15;
	// begin inline asm
	{mul.f16x2 %r5673,%r5674,%r7484;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5676, {low,high};}

	// end inline asm
	selp.b32 	%r5678, %r7407, %r5676, %p15;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7479;
}
	// end inline asm
	selp.b32 	%r5681, %r7411, %r5676, %p15;
	// begin inline asm
	{mul.f16x2 %r5680,%r5681,%r7478;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5683, {low,high};}

	// end inline asm
	selp.b32 	%r5685, %r7407, %r5683, %p15;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7481;
}
	// end inline asm
	selp.b32 	%r5688, %r7411, %r5683, %p15;
	// begin inline asm
	{mul.f16x2 %r5687,%r5688,%r7480;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5690, {low,high};}

	// end inline asm
	selp.b32 	%r5692, %r7407, %r5690, %p15;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7708;
}
	// end inline asm
	selp.b32 	%r5695, %r7411, %r5690, %p15;
	// begin inline asm
	{mul.f16x2 %r5694,%r5695,%r7707;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5697, {low,high};}

	// end inline asm
	selp.b32 	%r5699, %r7407, %r5697, %p15;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7706;
}
	// end inline asm
	selp.b32 	%r5702, %r7411, %r5697, %p15;
	// begin inline asm
	{mul.f16x2 %r5701,%r5702,%r7705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5704, {low,high};}

	// end inline asm
	selp.b32 	%r5706, %r7407, %r5704, %p15;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7720;
}
	// end inline asm
	selp.b32 	%r5709, %r7411, %r5704, %p15;
	// begin inline asm
	{mul.f16x2 %r5708,%r5709,%r7719;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5711, {low,high};}

	// end inline asm
	selp.b32 	%r5713, %r7407, %r5711, %p15;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7473;
}
	// end inline asm
	selp.b32 	%r5716, %r7411, %r5711, %p15;
	// begin inline asm
	{mul.f16x2 %r5715,%r5716,%r7472;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5718, {low,high};}

	// end inline asm
	selp.b32 	%r5720, %r7407, %r5718, %p15;
	// begin inline asm
	{mul.f16x2 %r5719,%r5720,%r7718;
}
	// end inline asm
	selp.b32 	%r5723, %r7411, %r5718, %p15;
	// begin inline asm
	{mul.f16x2 %r5722,%r5723,%r7716;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5725, {low,high};}

	// end inline asm
	selp.b32 	%r5727, %r7407, %r5725, %p15;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7717;
}
	// end inline asm
	selp.b32 	%r5730, %r7411, %r5725, %p15;
	// begin inline asm
	{mul.f16x2 %r5729,%r5730,%r7715;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5732, {low,high};}

	// end inline asm
	selp.b32 	%r5734, %r7407, %r5732, %p15;
	// begin inline asm
	{mul.f16x2 %r5733,%r5734,%r7704;
}
	// end inline asm
	selp.b32 	%r5737, %r7411, %r5732, %p15;
	// begin inline asm
	{mul.f16x2 %r5736,%r5737,%r7702;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5739, {low,high};}

	// end inline asm
	selp.b32 	%r5741, %r7407, %r5739, %p15;
	// begin inline asm
	{mul.f16x2 %r5740,%r5741,%r7703;
}
	// end inline asm
	selp.b32 	%r5744, %r7411, %r5739, %p15;
	// begin inline asm
	{mul.f16x2 %r5743,%r5744,%r7701;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5746, {low,high};}

	// end inline asm
	selp.b32 	%r5748, %r7407, %r5746, %p15;
	// begin inline asm
	{mul.f16x2 %r5747,%r5748,%r7714;
}
	// end inline asm
	selp.b32 	%r5751, %r7411, %r5746, %p15;
	// begin inline asm
	{mul.f16x2 %r5750,%r5751,%r7713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5753,%r7577,%r3678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5756,%r3789,%r3635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5759,%r5753,%r5756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5762,%r7315,%r5759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5765,%r5586,%r5762;
}
	// end inline asm
	selp.b32 	%r7545, %r5586, %r5765, %p15;
	// begin inline asm
	{sub.f16x2 %r5768,%r7576,%r3744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r3823,%r3712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5774,%r5768,%r5771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5777,%r7315,%r5774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5780,%r5589,%r5777;
}
	// end inline asm
	selp.b32 	%r7540, %r5589, %r5780, %p15;
	// begin inline asm
	{sub.f16x2 %r5783,%r7573,%r3911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r7579,%r3868;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5789,%r5783,%r5786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5792,%r7315,%r5789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5795,%r5593,%r5792;
}
	// end inline asm
	selp.b32 	%r7549, %r5593, %r5795, %p15;
	// begin inline asm
	{sub.f16x2 %r5798,%r7572,%r3977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5801,%r7578,%r3945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5804,%r5798,%r5801;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5807,%r7315,%r5804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5810,%r5596,%r5807;
}
	// end inline asm
	selp.b32 	%r7542, %r5596, %r5810, %p15;
	// begin inline asm
	{sub.f16x2 %r5813,%r7576,%r7577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5816,%r7406,%r5813;
}
	// end inline asm
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r7900,%r5600;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r7900,%r7407,%r5813;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5827, 31;
	mov.u32 	%r5829, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5825,%r7900,%r5827,%r2263,%r5829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5830,%r5816,%r5825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5833,%r1197,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r5833,%r5830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5839,%r7315,%r5836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r5600,%r5839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5845,%r7578,%r7579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5848,%r7406,%r5845;
}
	// end inline asm
	mov.u32 	%r7901, %r5607;
	@%p15 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r7901,%r7407,%r5845;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5857,%r7901,%r5827,%r2263,%r5829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5862,%r5848,%r5857;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5865,%r7567,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5868,%r5862,%r5865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5871,%r7315,%r5868;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r5607,%r5871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5877,%r7569,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5880,%r7575,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r5877,%r5880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5886,%r7315,%r5883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5889,%r5614,%r5886;
}
	// end inline asm
	selp.b32 	%r7550, %r5614, %r5889, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7577;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5894,%r7577,%r437,%r2263,%r5829;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5894;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5900, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5901,%r5900,%r7576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5904,%r7410,%r5901;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r7902,%r5603;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r7902,%r7411,%r5901;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5919, 31;
	mov.u32 	%r5943, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5917,%r7902,%r5919,%r2263,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5922,%r5904,%r5917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5925,%r1209,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r5925,%r5922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5931,%r7315,%r5928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r5603,%r5931;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7579;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5939,%r7579,%r437,%r2263,%r5943;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5939;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5945, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5946,%r5945,%r7578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5949,%r7410,%r5946;
}
	// end inline asm
	mov.u32 	%r7903, %r5610;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r7903,%r7411,%r5946;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5960,%r7903,%r5919,%r2263,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5965,%r5949,%r5960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r7566,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5971,%r5965,%r5968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5974,%r7315,%r5971;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r5610,%r5974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5980,%r7568,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r7574,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r5980,%r5983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5989,%r7315,%r5986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5992,%r5617,%r5989;
}
	// end inline asm
	selp.b32 	%r7543, %r5617, %r5992, %p15;
	// begin inline asm
	{sub.f16x2 %r5995,%r7574,%r7575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5998,%r7406,%r5995;
}
	// end inline asm
	mov.u32 	%r7904, %r5621;
	@%p15 bra 	$L__BB0_776;

	// begin inline asm
	{mul.f16x2 %r7904,%r7407,%r5995;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r6009, 31;
	mov.u32 	%r6048, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6007,%r7904,%r6009,%r2263,%r6048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6012,%r5998,%r6007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6015,%r7561,%r1197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6018,%r6012,%r6015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6021,%r7315,%r6018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r5621,%r6021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6027,%r7563,%r4249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r4390,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r6027,%r6030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6036,%r7315,%r6033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6039,%r5628,%r6036;
}
	// end inline asm
	selp.b32 	%r7536, %r5628, %r6039, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7575;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6044,%r7575,%r437,%r2263,%r6048;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6044;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6050, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6051,%r6050,%r7574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6054,%r7410,%r6051;
}
	// end inline asm
	mov.u32 	%r7905, %r5624;
	@%p15 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7905,%r7411,%r6051;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6065,%r7905,%r6009,%r2263,%r6048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6070,%r6054,%r6065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r7560,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6076,%r6070,%r6073;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6079,%r7315,%r6076;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r5624,%r6079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6085,%r7562,%r4330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r4424,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6085,%r6088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r7315,%r6091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6097,%r5631,%r6094;
}
	// end inline asm
	selp.b32 	%r7534, %r5631, %r6097, %p15;
	// begin inline asm
	{sub.f16x2 %r6100,%r7572,%r7573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6103,%r7406,%r6100;
}
	// end inline asm
	@%p15 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7906,%r5635;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7906,%r7407,%r6100;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r6116, 31;
	mov.u32 	%r6118, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6114,%r7906,%r6116,%r2263,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6119,%r6103,%r6114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6122,%r7567,%r1227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6125,%r6122,%r6119;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6128,%r7315,%r6125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r5635,%r6128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r7755,%r7756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r7406,%r6134;
}
	// end inline asm
	mov.u32 	%r7907, %r5642;
	@%p15 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7907,%r7407,%r6134;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6146,%r7907,%r6116,%r2263,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6151,%r6137,%r6146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6154,%r7753,%r1227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6157,%r6151,%r6154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6160,%r7315,%r6157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r5642,%r6160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6166,%r7754,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6169,%r7571,%r7756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6172,%r6166,%r6169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6175,%r7315,%r6172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6178,%r5649,%r6175;
}
	// end inline asm
	selp.b32 	%r7531, %r5649, %r6178, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7573;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6183,%r7573,%r437,%r2263,%r6118;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6183;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6189, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6190,%r6189,%r7572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6193,%r7410,%r6190;
}
	// end inline asm
	@%p15 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7908,%r5638;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7908,%r7411,%r6190;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6208, 31;
	mov.u32 	%r6232, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6206,%r7908,%r6208,%r2263,%r6232;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6211,%r6193,%r6206;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6214,%r7566,%r1233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6217,%r6214,%r6211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6220,%r7315,%r6217;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r5638,%r6220;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7756;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6228,%r7756,%r437,%r2263,%r6232;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6228;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6234, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6235,%r6234,%r7755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6238,%r7410,%r6235;
}
	// end inline asm
	mov.u32 	%r7909, %r5645;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7909,%r7411,%r6235;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6249,%r7909,%r6208,%r2263,%r6232;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6254,%r6238,%r6249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r7751,%r1233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6260,%r6254,%r6257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6263,%r7315,%r6260;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r5645,%r6263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6269,%r7752,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6272,%r7570,%r7755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r6269,%r6272;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6278,%r7315,%r6275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6281,%r5652,%r6278;
}
	// end inline asm
	selp.b32 	%r7526, %r5652, %r6281, %p15;
	// begin inline asm
	{sub.f16x2 %r6284,%r7568,%r7569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6287,%r7406,%r6284;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7910,%r5656;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7910,%r7407,%r6284;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6300, 31;
	mov.u32 	%r6302, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6298,%r7910,%r6300,%r2263,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6303,%r6287,%r6298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6306,%r7561,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6309,%r6306,%r6303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6312,%r7315,%r6309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7518,%r5656,%r6312;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6318,%r7570,%r7571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6321,%r7406,%r6318;
}
	// end inline asm
	mov.u32 	%r7911, %r5663;
	@%p15 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7911,%r7407,%r6318;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6330,%r7911,%r6300,%r2263,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6335,%r6321,%r6330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6338,%r7557,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6341,%r6335,%r6338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6344,%r7315,%r6341;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r5663,%r6344;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6350,%r7559,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6353,%r7565,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6356,%r6350,%r6353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6359,%r7315,%r6356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6362,%r5670,%r6359;
}
	// end inline asm
	selp.b32 	%r7520, %r5670, %r6362, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7569;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6367,%r7569,%r437,%r2263,%r6302;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6367;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6373, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6374,%r6373,%r7568;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6377,%r7410,%r6374;
}
	// end inline asm
	@%p15 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7912,%r5659;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7912,%r7411,%r6374;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6392, 31;
	mov.u32 	%r6416, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6390,%r7912,%r6392,%r2263,%r6416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6395,%r6377,%r6390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6398,%r7560,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6401,%r6398,%r6395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6404,%r7315,%r6401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r5659,%r6404;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7571;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6412,%r7571,%r437,%r2263,%r6416;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6412;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6418, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6419,%r6418,%r7570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6422,%r7410,%r6419;
}
	// end inline asm
	mov.u32 	%r7913, %r5666;
	@%p15 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7913,%r7411,%r6419;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6433,%r7913,%r6392,%r2263,%r6416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r6422,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r7556,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6444,%r6438,%r6441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6447,%r7315,%r6444;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r5666,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6453,%r7558,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6456,%r7564,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r6453,%r6456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6462,%r7315,%r6459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6465,%r5673,%r6462;
}
	// end inline asm
	selp.b32 	%r7514, %r5673, %r6465, %p15;
	// begin inline asm
	{sub.f16x2 %r6468,%r7562,%r7563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6471,%r7406,%r6468;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;
	bra.uni 	$L__BB0_799;

$L__BB0_800:
	// begin inline asm
	{neg.f16x2 %r7914,%r5677;
}
	// end inline asm
	bra.uni 	$L__BB0_801;

$L__BB0_799:
	// begin inline asm
	{mul.f16x2 %r7914,%r7407,%r6468;
}
	// end inline asm

$L__BB0_801:
	mov.u32 	%r6484, 31;
	mov.u32 	%r6486, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6482,%r7914,%r6484,%r2263,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6487,%r6471,%r6482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6490,%r1282,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6493,%r6490,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6496,%r7315,%r6493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7506,%r5677,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6502,%r7564,%r7565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6505,%r7406,%r6502;
}
	// end inline asm
	mov.u32 	%r7915, %r5684;
	@%p15 bra 	$L__BB0_803;

	// begin inline asm
	{mul.f16x2 %r7915,%r7407,%r6502;
}
	// end inline asm

$L__BB0_803:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6514,%r7915,%r6484,%r2263,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r6505,%r6514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r7555,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6525,%r6519,%r6522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6528,%r7315,%r6525;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7510,%r5684,%r6528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6534,%r7739,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6537,%r7742,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6540,%r6534,%r6537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6543,%r7315,%r6540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6546,%r5691,%r6543;
}
	// end inline asm
	selp.b32 	%r7508, %r5691, %r6546, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7563;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6551,%r7563,%r437,%r2263,%r6486;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6551;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6557, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r6557,%r7562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6561,%r7410,%r6558;
}
	// end inline asm
	@%p15 bra 	$L__BB0_805;
	bra.uni 	$L__BB0_804;

$L__BB0_805:
	// begin inline asm
	{neg.f16x2 %r7916,%r5680;
}
	// end inline asm
	bra.uni 	$L__BB0_806;

$L__BB0_804:
	// begin inline asm
	{mul.f16x2 %r7916,%r7411,%r6558;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6576, 31;
	mov.u32 	%r6600, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6574,%r7916,%r6576,%r2263,%r6600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6579,%r6561,%r6574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6582,%r1283,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6585,%r6582,%r6579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6588,%r7315,%r6585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r5680,%r6588;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7565;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6596,%r7565,%r437,%r2263,%r6600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6596;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6602, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6603,%r6602,%r7564;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6606,%r7410,%r6603;
}
	// end inline asm
	mov.u32 	%r7917, %r5687;
	@%p15 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7917,%r7411,%r6603;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6617,%r7917,%r6576,%r2263,%r6600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6622,%r6606,%r6617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6625,%r7554,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r6622,%r6625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r7315,%r6628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r5687,%r6631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6637,%r7737,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6640,%r7741,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6643,%r6637,%r6640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6646,%r7315,%r6643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6649,%r5694,%r6646;
}
	// end inline asm
	selp.b32 	%r7502, %r5694, %r6649, %p15;
	// begin inline asm
	{sub.f16x2 %r6652,%r7741,%r7742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6655,%r7406,%r6652;
}
	// end inline asm
	mov.u32 	%r7918, %r5698;
	@%p15 bra 	$L__BB0_810;

	// begin inline asm
	{mul.f16x2 %r7918,%r7407,%r6652;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6666, 31;
	mov.u32 	%r6690, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6664,%r7918,%r6666,%r2263,%r6690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6669,%r6655,%r6664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6672,%r7736,%r1282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6675,%r6669,%r6672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6678,%r7315,%r6675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7499,%r5698,%r6678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7742;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6686,%r7742,%r437,%r2263,%r6690;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6686;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6692, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6693,%r6692,%r7741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6696,%r7410,%r6693;
}
	// end inline asm
	mov.u32 	%r7919, %r5701;
	@%p15 bra 	$L__BB0_812;

	// begin inline asm
	{mul.f16x2 %r7919,%r7411,%r6693;
}
	// end inline asm

$L__BB0_812:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6707,%r7919,%r6666,%r2263,%r6690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6712,%r6696,%r6707;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6715,%r7735,%r1283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6718,%r6712,%r6715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6721,%r7315,%r6718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7498,%r5701,%r6721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6727,%r7752,%r7754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6730,%r7406,%r6727;
}
	// end inline asm
	@%p15 bra 	$L__BB0_814;
	bra.uni 	$L__BB0_813;

$L__BB0_814:
	// begin inline asm
	{neg.f16x2 %r7920,%r5705;
}
	// end inline asm
	bra.uni 	$L__BB0_815;

$L__BB0_813:
	// begin inline asm
	{mul.f16x2 %r7920,%r7407,%r6727;
}
	// end inline asm

$L__BB0_815:
	mov.u32 	%r6743, 31;
	mov.u32 	%r6767, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6741,%r7920,%r6743,%r2263,%r6767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6746,%r6730,%r6741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6749,%r7557,%r7753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6752,%r6749,%r6746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6755,%r7315,%r6752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r5705,%r6755;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7754;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6763,%r7754,%r437,%r2263,%r6767;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6763;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6769, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6770,%r6769,%r7752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6773,%r7410,%r6770;
}
	// end inline asm
	@%p15 bra 	$L__BB0_817;
	bra.uni 	$L__BB0_816;

$L__BB0_817:
	// begin inline asm
	{neg.f16x2 %r7921,%r5708;
}
	// end inline asm
	bra.uni 	$L__BB0_818;

$L__BB0_816:
	// begin inline asm
	{mul.f16x2 %r7921,%r7411,%r6770;
}
	// end inline asm

$L__BB0_818:
	mov.u32 	%r6788, 31;
	mov.u32 	%r6790, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6786,%r7921,%r6788,%r2263,%r6790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6791,%r6773,%r6786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6794,%r7556,%r7751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6797,%r6794,%r6791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6800,%r7315,%r6797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7494,%r5708,%r6800;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6806,%r7558,%r7559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6809,%r7406,%r6806;
}
	// end inline asm
	@%p15 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7922,%r5712;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7922,%r7407,%r6806;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6822, 31;
	mov.u32 	%r6824, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6820,%r7922,%r6822,%r2263,%r6824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6825,%r6809,%r6820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6828,%r7555,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6831,%r6828,%r6825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6834,%r7315,%r6831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r5712,%r6834;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6840,%r7749,%r7750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6843,%r7406,%r6840;
}
	// end inline asm
	mov.u32 	%r7923, %r5719;
	@%p15 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7923,%r7407,%r6840;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6852,%r7923,%r6822,%r2263,%r6824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6857,%r6843,%r6852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6860,%r7747,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6863,%r6857,%r6860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6866,%r7315,%r6863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r5719,%r6866;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6872,%r7734,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6875,%r7740,%r7750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6878,%r6872,%r6875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6881,%r7315,%r6878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6884,%r5726,%r6881;
}
	// end inline asm
	selp.b32 	%r7489, %r5726, %r6884, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7559;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6889,%r7559,%r437,%r2263,%r6824;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6889;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6895, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6896,%r6895,%r7558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6899,%r7410,%r6896;
}
	// end inline asm
	@%p15 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7924,%r5715;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7924,%r7411,%r6896;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6914, 31;
	mov.u32 	%r6938, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6912,%r7924,%r6914,%r2263,%r6938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6917,%r6899,%r6912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6920,%r7554,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6923,%r6920,%r6917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6926,%r7315,%r6923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7486,%r5715,%r6926;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7750;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6934,%r7750,%r437,%r2263,%r6938;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6934;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6940, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6941,%r6940,%r7749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6944,%r7410,%r6941;
}
	// end inline asm
	mov.u32 	%r7925, %r5722;
	@%p15 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7925,%r7411,%r6941;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6955,%r7925,%r6914,%r2263,%r6938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6960,%r6944,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6963,%r7745,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6966,%r6960,%r6963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6969,%r7315,%r6966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7490,%r5722,%r6969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6975,%r7733,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6978,%r7738,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6981,%r6975,%r6978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6984,%r7315,%r6981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6987,%r5729,%r6984;
}
	// end inline asm
	selp.b32 	%r7484, %r5729, %r6987, %p15;
	// begin inline asm
	{sub.f16x2 %r6990,%r7737,%r7739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6993,%r7406,%r6990;
}
	// end inline asm
	@%p15 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7926,%r5733;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7926,%r7407,%r6990;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r7006, 31;
	mov.u32 	%r7008, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7004,%r7926,%r7006,%r2263,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7009,%r6993,%r7004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7012,%r7736,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7015,%r7012,%r7009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7018,%r7315,%r7015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7479,%r5733,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7024,%r7738,%r7740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7027,%r7406,%r7024;
}
	// end inline asm
	mov.u32 	%r7927, %r5740;
	@%p15 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7927,%r7407,%r7024;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7036,%r7927,%r7006,%r2263,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7041,%r7027,%r7036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7044,%r7732,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7047,%r7041,%r7044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7050,%r7315,%r7047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7481,%r5740,%r7050;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7739;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7058,%r7739,%r437,%r2263,%r7008;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7058;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7064, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7065,%r7064,%r7737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7068,%r7410,%r7065;
}
	// end inline asm
	@%p15 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7928,%r5736;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7928,%r7411,%r7065;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r7083, 31;
	mov.u32 	%r7107, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7081,%r7928,%r7083,%r2263,%r7107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7086,%r7068,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7089,%r7735,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7092,%r7089,%r7086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7095,%r7315,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7478,%r5736,%r7095;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7740;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7103,%r7740,%r437,%r2263,%r7107;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7103;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7109, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7110,%r7109,%r7738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7113,%r7410,%r7110;
}
	// end inline asm
	mov.u32 	%r7929, %r5743;
	@%p15 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7929,%r7411,%r7110;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7124,%r7929,%r7083,%r2263,%r7107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r7113,%r7124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7132,%r7731,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7135,%r7129,%r7132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7138,%r7315,%r7135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7480,%r5743,%r7138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7144,%r7733,%r7734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7147,%r7406,%r7144;
}
	// end inline asm
	@%p15 bra 	$L__BB0_840;
	bra.uni 	$L__BB0_839;

$L__BB0_840:
	// begin inline asm
	{neg.f16x2 %r7930,%r5747;
}
	// end inline asm
	bra.uni 	$L__BB0_841;

$L__BB0_839:
	// begin inline asm
	{mul.f16x2 %r7930,%r7407,%r7144;
}
	// end inline asm

$L__BB0_841:
	mov.u32 	%r7160, 31;
	mov.u32 	%r7184, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7158,%r7930,%r7160,%r2263,%r7184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r7147,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7166,%r7732,%r7747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7169,%r7166,%r7163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7172,%r7315,%r7169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r5747,%r7172;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7734;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7180,%r7734,%r437,%r2263,%r7184;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7180;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7186, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7187,%r7186,%r7733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7190,%r7410,%r7187;
}
	// end inline asm
	@%p15 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r7931,%r5750;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r7931,%r7411,%r7187;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r7205, 31;
	mov.u32 	%r7207, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7203,%r7931,%r7205,%r2263,%r7207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r7190,%r7203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7211,%r7731,%r7745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7214,%r7211,%r7208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7217,%r7315,%r7214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r5750,%r7217;
}
	// end inline asm
	bar.sync 	0;
	@%p435 bra 	$L__BB0_847;

	setp.ne.s32 	%p498, %r36, %r2162;
	shl.b32 	%r7226, %r36, 8;
	shl.b32 	%r7230, %r1729, 8;
	or.b32  	%r7231, %r7230, 128;
	mad.lo.s32 	%r7232, %r7231, %r35, %r2165;
	add.s32 	%r7233, %r7232, %r7226;
	shl.b32 	%r7234, %r7233, 2;
	mov.u32 	%r7235, _ZN6kernel5shmemE;
	add.s32 	%r7236, %r7235, %r7234;
	shl.b32 	%r7237, %r40, 4;
	add.s32 	%r1721, %r7236, %r7237;
	st.shared.v4.u32 	[%r1721], {%r7533, %r7532, %r7528, %r7527};
	st.shared.v4.u32 	[%r1721+512], {%r7549, %r7542, %r7552, %r7551};
	@%p498 bra 	$L__BB0_847;

	st.shared.v4.u32 	[%r1721+1024], {%r7547, %r7546, %r7545, %r7540};

$L__BB0_847:
	setp.eq.s32 	%p496, %r36, %r2162;
	@%p496 bra 	$L__BB0_849;

	mul.lo.s32 	%r7241, %r2560, 384;
	mad.lo.s32 	%r7242, %r69, %r36, %r7241;
	mad.lo.s32 	%r7245, %r2160, %r2162, %r7242;
	mad.lo.s32 	%r7248, %r2158, %r2157, %r7245;
	shl.b32 	%r7249, %r7248, 2;
	mov.u32 	%r7250, _ZN6kernel5shmemE;
	add.s32 	%r7251, %r7250, %r7249;
	shl.b32 	%r7252, %r40, 4;
	add.s32 	%r7253, %r7251, %r7252;
	st.shared.v4.u32 	[%r7253], {%r7547, %r7546, %r7545, %r7540};
	st.shared.v4.u32 	[%r7253+512], {%r7538, %r7537, %r7506, %r7505};
	st.shared.v4.u32 	[%r7253+1024], {%r7536, %r7534, %r7499, %r7498};

$L__BB0_849:
	setp.ne.s32 	%p497, %r35, %r2157;
	ld.param.u64 	%rd541, [%rd1+80];
	cvta.to.global.u64 	%rd42, %rd541;
	@%p497 bra 	$L__BB0_851;

	mad.lo.s32 	%r7255, %r657, %r1731, %r38;
	mad.lo.s32 	%r7256, %r7255, 768, 384;
	mul.lo.s32 	%r7257, %r7256, %r1729;
	mad.lo.s32 	%r7258, %r36, 384, %r7257;
	add.s32 	%r7259, %r7258, -128;
	mul.wide.s32 	%rd542, %r7259, 4;
	add.s64 	%rd543, %rd42, %rd542;
	add.s64 	%rd545, %rd543, %rd277;
	st.global.v4.u32 	[%rd545+512], {%r7533, %r7532, %r7528, %r7527};
	st.global.v4.u32 	[%rd545+1024], {%r7549, %r7542, %r7552, %r7551};
	st.global.v4.u32 	[%rd545+1536], {%r7547, %r7546, %r7545, %r7540};

$L__BB0_851:
	setp.ne.s32 	%p499, %r36, %r2162;
	@%p499 bra 	$L__BB0_854;

	mad.lo.s32 	%r7261, %r658, %r1730, %r37;
	mad.lo.s32 	%r7267, %r2560, 384, %r69;
	mad.lo.s32 	%r7268, %r7261, %r1791, %r7267;
	mad.lo.s32 	%r7271, %r1793, %r68, %r7268;
	mul.wide.s32 	%rd546, %r7271, 4;
	add.s64 	%rd547, %rd42, %rd546;
	add.s64 	%rd43, %rd547, %rd277;
	st.global.v4.u32 	[%rd43], {%r7547, %r7546, %r7545, %r7540};
	st.global.v4.u32 	[%rd43+512], {%r7538, %r7537, %r7506, %r7505};
	st.global.v4.u32 	[%rd43+1024], {%r7536, %r7534, %r7499, %r7498};
	@%p228 bra 	$L__BB0_854;

	st.global.v4.u32 	[%rd43+1536], {%r7710, %r7709, %r7712, %r7711};

$L__BB0_854:
	rem.s32 	%r7272, %r7580, %r1732;
	setp.eq.s32 	%p490, %r7272, 0;
	@%p490 bra 	$L__BB0_856;

	bar.sync 	0;
	bra.uni 	$L__BB0_863;

$L__BB0_856:
	@%p162 bra 	$L__BB0_858;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_858:
	bar.sync 	0;
	@%p163 bra 	$L__BB0_862;

	membar.gl;
	setp.eq.s32 	%p493, %r431, %r432;
	mov.u32 	%r7287, -2147483647;
	sub.s32 	%r7288, %r7287, %r430;
	selp.b32 	%r7276, %r7288, 1, %p493;
	// begin inline asm
	atom.add.release.gpu.u32 %r7275,[%rd27],%r7276;
	// end inline asm

$L__BB0_860:
	ld.volatile.u32 	%r7289, [%rd27];
	xor.b32  	%r7290, %r7289, %r7275;
	setp.gt.s32 	%p494, %r7290, -1;
	@%p494 bra 	$L__BB0_860;

	// begin inline asm
	ld.acquire.gpu.u32 %r7291,[%rd27];
	// end inline asm

$L__BB0_862:
	bar.sync 	0;

$L__BB0_863:
	setp.lt.s32 	%p495, %r1464, %r43;
	mov.u32 	%r7713, %r7871;
	mov.u32 	%r7714, %r7872;
	mov.u32 	%r7701, %r7857;
	mov.u32 	%r7702, %r7858;
	mov.u32 	%r7703, %r7859;
	mov.u32 	%r7704, %r7860;
	mov.u32 	%r7715, %r7873;
	mov.u32 	%r7716, %r7874;
	mov.u32 	%r7717, %r7875;
	mov.u32 	%r7718, %r7876;
	mov.u32 	%r7719, %r7877;
	mov.u32 	%r7720, %r7878;
	mov.u32 	%r7705, %r7863;
	mov.u32 	%r7706, %r7864;
	mov.u32 	%r7707, %r7865;
	mov.u32 	%r7708, %r7866;
	mov.u32 	%r7721, %r7879;
	mov.u32 	%r7722, %r7880;
	mov.u32 	%r7723, %r7881;
	mov.u32 	%r7724, %r7882;
	mov.u32 	%r7500, %r502;
	mov.u32 	%r7501, %r7779;
	mov.u32 	%r7504, %r503;
	mov.u32 	%r7507, %r7781;
	mov.u32 	%r7512, %r508;
	mov.u32 	%r7516, %r511;
	mov.u32 	%r7524, %r7786;
	mov.u32 	%r7529, %r7788;
	mov.u32 	%r7535, %r529;
	mov.u32 	%r7539, %r537;
	mov.u32 	%r7541, %r539;
	mov.u32 	%r7544, %r541;
	mov.u32 	%r7548, %r545;
	mov.u32 	%r7553, %r549;
	mov.u32 	%r7580, %r1464;
	@%p495 bra 	$L__BB0_302;

$L__BB0_864:
	ret;

}

