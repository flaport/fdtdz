//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_70
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<556>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<482>;
	.reg .b32 	%r<8004>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<590>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1746, %r1747}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1748, %r1749}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1750, %r1751}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1752, %r1753}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1754, %r1755}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1756, 32;
	sub.s32 	%r45, %r1756, %r1737;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1757, %r1743, -1;
	mad.lo.s32 	%r1758, %r1757, %r1742, %r1741;
	add.s32 	%r1759, %r1736, %r1735;
	add.s32 	%r1760, %r1759, %r1758;
	add.s32 	%r1761, %r1760, 1;
	mul.lo.s32 	%r1762, %r1730, %r1732;
	shl.b32 	%r47, %r1762, 1;
	shl.b32 	%r1763, %r1762, 2;
	div.s32 	%r1764, %r1761, %r1763;
	add.s32 	%r1765, %r1764, 1;
	mul.lo.s32 	%r1766, %r1765, %r1736;
	mul.lo.s32 	%r1767, %r1731, %r1733;
	shl.b32 	%r48, %r1767, 1;
	div.s32 	%r1768, %r1766, %r48;
	add.s32 	%r1769, %r1768, 1;
	mul.lo.s32 	%r49, %r1769, %r1735;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r7389, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1772, %r1732, %r44, %r43;
	mad.lo.s32 	%r1773, %r1772, %r1731, %r42;
	mul.lo.s32 	%r53, %r1773, %r1730;
	add.s32 	%r1774, %r53, %r41;
	shl.b32 	%r54, %r1774, 5;
	add.s32 	%r7394, %r54, %r46;
	mul.lo.s32 	%r1775, %r1767, %r1762;
	shl.b32 	%r58, %r1775, 5;
	mov.u32 	%r1776, 8;
	sub.s32 	%r1777, %r1776, %r1744;
	add.s32 	%r1778, %r1777, %r1745;
	sub.s32 	%r1779, %r1776, %r1746;
	add.s32 	%r1780, %r1779, %r1747;
	sub.s32 	%r59, %r1749, %r1748;
	mul.lo.s32 	%r1781, %r1743, %r59;
	mul.lo.s32 	%r1782, %r1781, %r1780;
	mul.lo.s32 	%r1783, %r1782, %r1778;
	mul.lo.s32 	%r60, %r1783, 3;
	setp.ge.s32 	%p29, %r7394, %r60;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1784, %r1747, 8;
	sub.s32 	%r1785, %r1784, %r1746;
	mul.lo.s32 	%r1786, %r1743, %r1785;
	add.s32 	%r1787, %r1745, 8;
	sub.s32 	%r1788, %r1787, %r1744;
	mul.lo.s32 	%r1789, %r1786, %r1788;
	mul.lo.s32 	%r1790, %r1789, %r59;
	not.b32 	%r1791, %r46;
	mad.lo.s32 	%r1792, %r1790, 3, %r1791;
	sub.s32 	%r1793, %r1792, %r54;
	mul.lo.s32 	%r1794, %r1767, %r1730;
	mul.lo.s32 	%r1795, %r1794, %r1732;
	shl.b32 	%r61, %r1795, 5;
	div.u32 	%r62, %r1793, %r61;
	add.s32 	%r1796, %r62, 1;
	and.b32  	%r7391, %r1796, 3;
	setp.eq.s32 	%p30, %r7391, 0;
	mov.u32 	%r7392, %r7394;
	@%p30 bra 	$L__BB0_7;

	shl.b32 	%r1797, %r53, 5;
	add.s32 	%r1798, %r46, %r1797;
	shl.b32 	%r1799, %r41, 5;
	add.s32 	%r7392, %r1798, %r1799;
	mul.wide.s32 	%rd46, %r7394, 4;
	add.s64 	%rd587, %rd2, %rd46;
	mul.wide.s32 	%rd4, %r61, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1800, 0;
	st.global.u32 	[%rd587], %r1800;
	add.s32 	%r7392, %r7392, %r61;
	add.s64 	%rd587, %rd587, %rd4;
	add.s32 	%r7391, %r7391, -1;
	setp.ne.s32 	%p31, %r7391, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r62, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd49, %r58, 4;

$L__BB0_9:
	mul.wide.s32 	%rd47, %r7392, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1801, 0;
	st.global.u32 	[%rd48], %r1801;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.u32 	[%rd50], %r1801;
	add.s32 	%r1802, %r7392, %r58;
	add.s32 	%r1803, %r1802, %r58;
	add.s64 	%rd51, %rd50, %rd49;
	st.global.u32 	[%rd51], %r1801;
	add.s32 	%r1804, %r1803, %r58;
	add.s64 	%rd52, %rd51, %rd49;
	st.global.u32 	[%rd52], %r1801;
	add.s32 	%r7392, %r1804, %r58;
	setp.lt.s32 	%p33, %r7392, %r60;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd53, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd53;
	sub.s32 	%r1805, %r1736, %r47;
	div.s32 	%r1806, %r1805, %r48;
	mul.lo.s32 	%r1807, %r1806, %r1735;
	sub.s32 	%r72, %r1807, %r47;
	sub.s32 	%r1808, %r1735, %r48;
	mul.lo.s32 	%r1809, %r1808, %r1732;
	mul.lo.s32 	%r73, %r1730, 384;
	add.s32 	%r1810, %r73, %r73;
	add.s32 	%r1811, %r1810, 128;
	mul.lo.s32 	%r1813, %r1767, 768;
	mul.lo.s32 	%r1814, %r1809, %r1811;
	mad.lo.s32 	%r74, %r1813, %r72, %r1814;
	bra.uni 	$L__BB0_11;

$L__BB0_895:
	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7359, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd575, %r7394, 4;
	add.s64 	%rd576, %rd7, %rd575;
	st.global.u32 	[%rd576], %r7359;
	add.s32 	%r7394, %r7394, %r58;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7394, %r74;
	@%p34 bra 	$L__BB0_895;

	ld.param.u64 	%rd54, [%rd1+144];
	cvta.to.global.u64 	%rd9, %rd54;
	ld.param.u64 	%rd55, [%rd1+112];
	cvta.to.global.u64 	%rd10, %rd55;
	mad.lo.s32 	%r7430, %r1730, %r43, %r41;
	mul.lo.s32 	%r82, %r1731, %r44;
	add.s32 	%r83, %r82, %r42;
	setp.ge.s32 	%p35, %r7430, %r1735;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1815, 31;
	sub.s32 	%r1816, %r1815, %r46;
	selp.b32 	%r1817, %r46, %r1816, %p36;
	shl.b32 	%r1818, %r1817, 2;
	mov.u32 	%r1819, 2;
	sub.s32 	%r84, %r1818, %r1738;
	shl.b32 	%r1820, %r1737, 2;
	mov.u32 	%r1821, 128;
	sub.s32 	%r85, %r1821, %r1820;
	sub.s32 	%r1822, %r1819, %r1738;
	add.s32 	%r86, %r1822, %r1818;
	sub.s32 	%r87, %r1745, %r1744;
	sub.s32 	%r88, %r1747, %r1746;
	add.s32 	%r89, %r1745, -1;
	add.s32 	%r90, %r1747, -1;
	add.s32 	%r91, %r1749, -1;
	mul.lo.s32 	%r1823, %r1736, %r1735;
	shl.b32 	%r92, %r1823, 6;
	add.s32 	%r93, %r1735, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r94, %r84, 1;
	add.s32 	%r95, %r86, 1;
	shl.b32 	%r96, %r46, 1;
	or.b32  	%r97, %r96, 1;
	shr.u32 	%r1824, %r97, 31;
	add.s32 	%r1825, %r97, %r1824;
	shr.s32 	%r99, %r1825, 1;
	and.b32  	%r1826, %r1825, -2;
	sub.s32 	%r1827, %r97, %r1826;
	add.s32 	%r98, %r1827, %r92;
	rem.s32 	%r1883, %r94, %r85;
	add.s32 	%r1884, %r1883, %r85;
	rem.s32 	%r1885, %r1884, %r85;
	rem.s32 	%r1886, %r95, %r85;
	add.s32 	%r1887, %r1886, %r85;
	rem.s32 	%r1888, %r1887, %r85;
	mov.u32 	%r7395, %r7430;

$L__BB0_14:
	setp.ge.s32 	%p37, %r83, %r1736;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7395, %r1750;
	setp.lt.s32 	%p39, %r7395, %r1751;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7395, %r1745;
	setp.ge.s32 	%p41, %r7395, %r1744;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1828, %r7395, %r89, %p40;
	setp.lt.s32 	%p42, %r7395, %r1744;
	selp.b32 	%r1829, %r1744, %r1828, %p42;
	sub.s32 	%r1830, %r1829, %r1744;
	add.s32 	%r101, %r93, %r7395;
	rem.s32 	%r1831, %r84, %r85;
	add.s32 	%r1832, %r1831, %r85;
	rem.s32 	%r102, %r1832, %r85;
	rem.s32 	%r1833, %r86, %r85;
	add.s32 	%r1834, %r1833, %r85;
	rem.s32 	%r103, %r1834, %r85;
	setp.lt.s32 	%p43, %r102, %r1749;
	sub.s32 	%r104, %r102, %r1748;
	setp.lt.s32 	%p44, %r102, %r1748;
	selp.b32 	%r1835, %r102, %r91, %p43;
	selp.b32 	%r1836, %r1748, %r1835, %p44;
	sub.s32 	%r105, %r1836, %r1748;
	setp.lt.s32 	%p45, %r103, %r1749;
	sub.s32 	%r106, %r103, %r1748;
	setp.lt.s32 	%p46, %r103, %r1748;
	selp.b32 	%r1837, %r103, %r91, %p45;
	selp.b32 	%r1838, %r1748, %r1837, %p46;
	sub.s32 	%r107, %r1838, %r1748;
	sub.s32 	%r1839, %r7395, %r1744;
	mul.lo.s32 	%r108, %r1839, %r88;
	mul.lo.s32 	%r109, %r1830, %r88;
	add.s32 	%r1840, %r1839, %r87;
	mul.lo.s32 	%r110, %r1840, %r88;
	add.s32 	%r1841, %r1830, %r87;
	mul.lo.s32 	%r111, %r1841, %r88;
	add.s32 	%r1842, %r1840, %r87;
	mul.lo.s32 	%r112, %r1842, %r88;
	add.s32 	%r1843, %r1841, %r87;
	mul.lo.s32 	%r113, %r1843, %r88;
	mov.u32 	%r7396, %r83;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7396, %r1752;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7396, %r1753;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7396, %r1746;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7396, %r1747;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r115, %r7396, %r1746;
	selp.b32 	%r1844, %r7396, %r90, %p52;
	setp.lt.s32 	%p53, %r7396, %r1746;
	selp.b32 	%r1845, %r1746, %r1844, %p53;
	sub.s32 	%r116, %r1845, %r1746;
	mul.lo.s32 	%r117, %r7396, %r1735;
	add.s32 	%r118, %r117, %r7395;
	shl.b32 	%r119, %r118, 6;
	setp.ge.s32 	%p54, %r102, %r1754;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r102, %r1755;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r102, %r1748;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r103, %r1748;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f470, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1848, %r115, %r108;
	mad.lo.s32 	%r1849, %r1848, %r59, %r104;
	mul.wide.s32 	%rd58, %r1849, 4;
	add.s64 	%rd59, %rd9, %rd58;
	ld.global.f32 	%f470, [%rd59];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1846, %r116, %r109;
	mad.lo.s32 	%r1847, %r1846, %r59, %r105;
	mul.wide.s32 	%rd56, %r1847, 4;
	add.s64 	%rd57, %rd9, %rd56;
	ld.global.f32 	%f470, [%rd57];

$L__BB0_20:
	setp.lt.s32 	%p67, %r103, %r1755;
	setp.ge.s32 	%p68, %r103, %r1754;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f471, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1852, %r115, %r108;
	mad.lo.s32 	%r1853, %r1852, %r59, %r106;
	mul.wide.s32 	%rd62, %r1853, 4;
	add.s64 	%rd63, %rd9, %rd62;
	ld.global.f32 	%f471, [%rd63];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1850, %r116, %r109;
	mad.lo.s32 	%r1851, %r1850, %r59, %r107;
	mul.wide.s32 	%rd60, %r1851, 4;
	add.s64 	%rd61, %rd9, %rd60;
	ld.global.f32 	%f471, [%rd61];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f470;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r1854, {low,high};}

	// end inline asm
	shl.b32 	%r120, %r118, 5;
	add.s32 	%r1855, %r120, %r46;
	shl.b32 	%r1856, %r1855, 2;
	add.s32 	%r1857, %r92, %r1856;
	mul.wide.s32 	%rd64, %r1857, 4;
	add.s64 	%rd65, %rd10, %rd64;
	st.global.u32 	[%rd65], %r1854;
	mov.f32 	%f472, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1860, %r115, %r110;
	mad.lo.s32 	%r1861, %r1860, %r59, %r104;
	mul.wide.s32 	%rd68, %r1861, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f472, [%rd69];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1858, %r116, %r111;
	mad.lo.s32 	%r1859, %r1858, %r59, %r105;
	mul.wide.s32 	%rd66, %r1859, 4;
	add.s64 	%rd67, %rd9, %rd66;
	ld.global.f32 	%f472, [%rd67];

$L__BB0_28:
	mov.f32 	%f473, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1864, %r115, %r110;
	mad.lo.s32 	%r1865, %r1864, %r59, %r106;
	mul.wide.s32 	%rd72, %r1865, 4;
	add.s64 	%rd73, %rd9, %rd72;
	ld.global.f32 	%f473, [%rd73];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1862, %r116, %r111;
	mad.lo.s32 	%r1863, %r1862, %r59, %r107;
	mul.wide.s32 	%rd70, %r1863, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f473, [%rd71];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f472;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r1866, {low,high};}

	// end inline asm
	add.s32 	%r1867, %r96, %r119;
	mul.wide.s32 	%rd74, %r1867, 4;
	add.s64 	%rd75, %rd10, %rd74;
	st.global.u32 	[%rd75], %r1866;
	mov.f32 	%f474, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1870, %r115, %r112;
	mad.lo.s32 	%r1871, %r1870, %r59, %r104;
	mul.wide.s32 	%rd78, %r1871, 4;
	add.s64 	%rd79, %rd9, %rd78;
	ld.global.f32 	%f474, [%rd79];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1868, %r116, %r113;
	mad.lo.s32 	%r1869, %r1868, %r59, %r105;
	mul.wide.s32 	%rd76, %r1869, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f474, [%rd77];

$L__BB0_36:
	mov.f32 	%f475, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1874, %r115, %r112;
	mad.lo.s32 	%r1875, %r1874, %r59, %r106;
	mul.wide.s32 	%rd82, %r1875, 4;
	add.s64 	%rd83, %rd9, %rd82;
	ld.global.f32 	%f475, [%rd83];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1872, %r116, %r113;
	mad.lo.s32 	%r1873, %r1872, %r59, %r107;
	mul.wide.s32 	%rd80, %r1873, 4;
	add.s64 	%rd81, %rd9, %rd80;
	ld.global.f32 	%f475, [%rd81];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f474;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r1876, {low,high};}

	// end inline asm
	rem.s32 	%r1877, %r101, %r1735;
	add.s32 	%r1878, %r1877, %r117;
	shl.b32 	%r121, %r1878, 5;
	add.s32 	%r1879, %r121, %r46;
	shl.b32 	%r1880, %r1879, 2;
	add.s32 	%r1881, %r92, %r1880;
	add.s32 	%r1882, %r1881, 2;
	mul.wide.s32 	%rd84, %r1882, 4;
	add.s64 	%rd85, %rd10, %rd84;
	st.global.u32 	[%rd85], %r1876;
	setp.ge.s32 	%p76, %r1885, %r1754;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1885, %r1755;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1885, %r1748;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1885, %r1749;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1888, %r1754;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1888, %r1755;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r122, %r1885, %r1748;
	setp.lt.s32 	%p86, %r1885, %r1748;
	selp.b32 	%r1889, %r1885, %r91, %p82;
	selp.b32 	%r1890, %r1748, %r1889, %p86;
	sub.s32 	%r123, %r1890, %r1748;
	setp.ge.s32 	%p87, %r1888, %r1748;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1888, %r1749;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r124, %r1888, %r1748;
	setp.lt.s32 	%p90, %r1888, %r1748;
	selp.b32 	%r1891, %r1888, %r91, %p89;
	selp.b32 	%r1892, %r1748, %r1891, %p90;
	sub.s32 	%r125, %r1892, %r1748;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f476, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1895, %r115, %r108;
	mad.lo.s32 	%r1896, %r1895, %r59, %r122;
	mul.wide.s32 	%rd88, %r1896, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f476, [%rd89];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1893, %r116, %r109;
	mad.lo.s32 	%r1894, %r1893, %r59, %r123;
	mul.wide.s32 	%rd86, %r1894, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f476, [%rd87];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f477, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1899, %r115, %r108;
	mad.lo.s32 	%r1900, %r1899, %r59, %r124;
	mul.wide.s32 	%rd92, %r1900, 4;
	add.s64 	%rd93, %rd9, %rd92;
	ld.global.f32 	%f477, [%rd93];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1897, %r116, %r109;
	mad.lo.s32 	%r1898, %r1897, %r59, %r125;
	mul.wide.s32 	%rd90, %r1898, 4;
	add.s64 	%rd91, %rd9, %rd90;
	ld.global.f32 	%f477, [%rd91];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f476;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r1901, {low,high};}

	// end inline asm
	add.s32 	%r1902, %r120, %r99;
	shl.b32 	%r1903, %r1902, 2;
	add.s32 	%r1904, %r98, %r1903;
	mul.wide.s32 	%rd94, %r1904, 4;
	add.s64 	%rd95, %rd10, %rd94;
	st.global.u32 	[%rd95], %r1901;
	mov.f32 	%f478, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1907, %r115, %r110;
	mad.lo.s32 	%r1908, %r1907, %r59, %r122;
	mul.wide.s32 	%rd98, %r1908, 4;
	add.s64 	%rd99, %rd9, %rd98;
	ld.global.f32 	%f478, [%rd99];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1905, %r116, %r111;
	mad.lo.s32 	%r1906, %r1905, %r59, %r123;
	mul.wide.s32 	%rd96, %r1906, 4;
	add.s64 	%rd97, %rd9, %rd96;
	ld.global.f32 	%f478, [%rd97];

$L__BB0_52:
	mov.f32 	%f479, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1911, %r115, %r110;
	mad.lo.s32 	%r1912, %r1911, %r59, %r124;
	mul.wide.s32 	%rd102, %r1912, 4;
	add.s64 	%rd103, %rd9, %rd102;
	ld.global.f32 	%f479, [%rd103];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1909, %r116, %r111;
	mad.lo.s32 	%r1910, %r1909, %r59, %r125;
	mul.wide.s32 	%rd100, %r1910, 4;
	add.s64 	%rd101, %rd9, %rd100;
	ld.global.f32 	%f479, [%rd101];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f478;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r1913, {low,high};}

	// end inline asm
	add.s32 	%r1914, %r97, %r119;
	mul.wide.s32 	%rd104, %r1914, 4;
	add.s64 	%rd105, %rd10, %rd104;
	st.global.u32 	[%rd105], %r1913;
	mov.f32 	%f480, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1917, %r115, %r112;
	mad.lo.s32 	%r1918, %r1917, %r59, %r122;
	mul.wide.s32 	%rd108, %r1918, 4;
	add.s64 	%rd109, %rd9, %rd108;
	ld.global.f32 	%f480, [%rd109];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1915, %r116, %r113;
	mad.lo.s32 	%r1916, %r1915, %r59, %r123;
	mul.wide.s32 	%rd106, %r1916, 4;
	add.s64 	%rd107, %rd9, %rd106;
	ld.global.f32 	%f480, [%rd107];

$L__BB0_60:
	mov.f32 	%f481, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1921, %r115, %r112;
	mad.lo.s32 	%r1922, %r1921, %r59, %r124;
	mul.wide.s32 	%rd112, %r1922, 4;
	add.s64 	%rd113, %rd9, %rd112;
	ld.global.f32 	%f481, [%rd113];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1919, %r116, %r113;
	mad.lo.s32 	%r1920, %r1919, %r59, %r125;
	mul.wide.s32 	%rd110, %r1920, 4;
	add.s64 	%rd111, %rd9, %rd110;
	ld.global.f32 	%f481, [%rd111];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f480;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r1923, {low,high};}

	// end inline asm
	add.s32 	%r1924, %r121, %r99;
	shl.b32 	%r1925, %r1924, 2;
	add.s32 	%r1926, %r98, %r1925;
	add.s32 	%r1927, %r1926, 2;
	mul.wide.s32 	%rd114, %r1927, 4;
	add.s64 	%rd115, %rd10, %rd114;
	st.global.u32 	[%rd115], %r1923;
	add.s32 	%r7396, %r7396, %r1767;
	setp.lt.s32 	%p99, %r7396, %r1736;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7395, %r7395, %r1762;
	setp.lt.s32 	%p100, %r7395, %r1735;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd116, [%rd1+152];
	cvta.to.global.u64 	%rd11, %rd116;
	ld.param.u64 	%rd117, [%rd1+120];
	cvta.to.global.u64 	%rd12, %rd117;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r128, %r83, 1;
	mov.u64 	%rd118, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7397, %r7430;

$L__BB0_68:
	setp.ge.s32 	%p102, %r128, %r1736;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7398, %r128;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1929, %r7398, 31;
	add.s32 	%r1930, %r7398, %r1929;
	shr.s32 	%r1931, %r1930, 1;
	mad.lo.s32 	%r1932, %r1931, %r1735, %r7397;
	shl.b32 	%r132, %r1932, 5;
	add.s32 	%r133, %r7398, -2;
	mul.lo.s32 	%r134, %r133, %r1735;
	add.s32 	%r1933, %r1736, %r133;
	mul.lo.s32 	%r135, %r1933, %r1735;
	add.s32 	%r1934, %r1933, %r1736;
	mul.lo.s32 	%r136, %r1934, %r1735;
	add.s32 	%r137, %r134, %r1735;
	add.s32 	%r138, %r7398, -1;
	add.s32 	%r1935, %r1736, %r138;
	mul.lo.s32 	%r139, %r1935, %r1735;
	add.s32 	%r1936, %r1935, %r1736;
	mul.lo.s32 	%r140, %r1936, %r1735;
	add.s32 	%r1937, %r1736, %r7398;
	mul.lo.s32 	%r141, %r1937, %r1735;
	add.s32 	%r1938, %r1937, %r1736;
	mul.lo.s32 	%r142, %r1938, %r1735;
	mul.lo.s32 	%r143, %r7398, %r1735;
	add.s32 	%r144, %r143, %r1735;
	add.s32 	%r145, %r7398, 1;
	add.s32 	%r1939, %r1736, %r145;
	mul.lo.s32 	%r146, %r1939, %r1735;
	add.s32 	%r1940, %r1939, %r1736;
	mul.lo.s32 	%r147, %r1940, %r1735;
	add.s32 	%r148, %r144, %r1735;
	add.s32 	%r149, %r7398, 2;
	add.s32 	%r1941, %r1736, %r149;
	mul.lo.s32 	%r150, %r1941, %r1735;
	add.s32 	%r1942, %r1941, %r1736;
	mul.lo.s32 	%r151, %r1942, %r1735;
	mov.u32 	%r7401, 0;
	mov.u64 	%rd588, %rd118;

$L__BB0_72:
	ld.global.nc.u32 	%r1943, [%rd588];
	cvt.rn.f64.s32 	%fd1, %r1943;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r153, %r1943, %r7397;
	setp.lt.s32 	%p104, %r153, %r1735;
	or.b32  	%r1944, %r133, %r153;
	setp.gt.s32 	%p105, %r1944, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r133, %r1736;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1947, %r134, %r153;
	mul.wide.s32 	%rd119, %r1947, 4;
	add.s64 	%rd120, %rd11, %rd119;
	ld.global.f32 	%f93, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7400, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7400, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1948, %r7401, %r132;
	mul.wide.s32 	%rd121, %r1948, 4;
	add.s64 	%rd122, %rd12, %rd121;
	st.global.u32 	[%rd122], %r7400;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1951, %r135, %r153;
	mul.wide.s32 	%rd123, %r1951, 4;
	add.s64 	%rd124, %rd11, %rd123;
	ld.global.f32 	%f98, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7402, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7402, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1952, %r7401, %r132;
	mul.wide.s32 	%rd125, %r1952, 4;
	add.s64 	%rd126, %rd12, %rd125;
	st.global.u32 	[%rd126], %r7402;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1955, %r136, %r153;
	mul.wide.s32 	%rd127, %r1955, 4;
	add.s64 	%rd128, %rd11, %rd127;
	ld.global.f32 	%f102, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7404, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7404, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1956, %r7401, %r132;
	mul.wide.s32 	%rd129, %r1956, 4;
	add.s64 	%rd130, %rd12, %rd129;
	st.global.u32 	[%rd130], %r7404;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_87:
	or.b32  	%r1957, %r138, %r153;
	setp.gt.s32 	%p111, %r1957, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7398, %r1736;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1960, %r137, %r153;
	mul.wide.s32 	%rd131, %r1960, 4;
	add.s64 	%rd132, %rd11, %rd131;
	ld.global.f32 	%f105, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7406, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7406, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1961, %r7401, %r132;
	mul.wide.s32 	%rd133, %r1961, 4;
	add.s64 	%rd134, %rd12, %rd133;
	st.global.u32 	[%rd134], %r7406;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1964, %r139, %r153;
	mul.wide.s32 	%rd135, %r1964, 4;
	add.s64 	%rd136, %rd11, %rd135;
	ld.global.f32 	%f108, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7408, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7408, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1965, %r7401, %r132;
	mul.wide.s32 	%rd137, %r1965, 4;
	add.s64 	%rd138, %rd12, %rd137;
	st.global.u32 	[%rd138], %r7408;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1968, %r140, %r153;
	mul.wide.s32 	%rd139, %r1968, 4;
	add.s64 	%rd140, %rd11, %rd139;
	ld.global.f32 	%f111, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7410, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1969, %r7401, %r132;
	mul.wide.s32 	%rd141, %r1969, 4;
	add.s64 	%rd142, %rd12, %rd141;
	st.global.u32 	[%rd142], %r7410;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_102:
	or.b32  	%r1970, %r7398, %r153;
	setp.gt.s32 	%p118, %r1970, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7398, %r1736;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1973, %r143, %r153;
	mul.wide.s32 	%rd143, %r1973, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f114, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7412, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7412, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1974, %r7401, %r132;
	mul.wide.s32 	%rd145, %r1974, 4;
	add.s64 	%rd146, %rd12, %rd145;
	st.global.u32 	[%rd146], %r7412;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1977, %r141, %r153;
	mul.wide.s32 	%rd147, %r1977, 4;
	add.s64 	%rd148, %rd11, %rd147;
	ld.global.f32 	%f118, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7414, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7414, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1978, %r7401, %r132;
	mul.wide.s32 	%rd149, %r1978, 4;
	add.s64 	%rd150, %rd12, %rd149;
	st.global.u32 	[%rd150], %r7414;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1981, %r142, %r153;
	mul.wide.s32 	%rd151, %r1981, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f121, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r7416, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7416, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1982, %r7401, %r132;
	mul.wide.s32 	%rd153, %r1982, 4;
	add.s64 	%rd154, %rd12, %rd153;
	st.global.u32 	[%rd154], %r7416;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_117:
	or.b32  	%r1983, %r145, %r153;
	setp.gt.s32 	%p125, %r1983, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r145, %r1736;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1986, %r144, %r153;
	mul.wide.s32 	%rd155, %r1986, 4;
	add.s64 	%rd156, %rd11, %rd155;
	ld.global.f32 	%f124, [%rd156];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r7418, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r7418, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1987, %r7401, %r132;
	mul.wide.s32 	%rd157, %r1987, 4;
	add.s64 	%rd158, %rd12, %rd157;
	st.global.u32 	[%rd158], %r7418;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1990, %r146, %r153;
	mul.wide.s32 	%rd159, %r1990, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f127, [%rd160];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r7420, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7420, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1991, %r7401, %r132;
	mul.wide.s32 	%rd161, %r1991, 4;
	add.s64 	%rd162, %rd12, %rd161;
	st.global.u32 	[%rd162], %r7420;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1994, %r147, %r153;
	mul.wide.s32 	%rd163, %r1994, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f130, [%rd164];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r7422, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r7422, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1995, %r7401, %r132;
	mul.wide.s32 	%rd165, %r1995, 4;
	add.s64 	%rd166, %rd12, %rd165;
	st.global.u32 	[%rd166], %r7422;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_132:
	or.b32  	%r1996, %r149, %r153;
	setp.gt.s32 	%p132, %r1996, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r149, %r1736;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1999, %r148, %r153;
	mul.wide.s32 	%rd167, %r1999, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f133, [%rd168];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7424, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7424, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2000, %r7401, %r132;
	mul.wide.s32 	%rd169, %r2000, 4;
	add.s64 	%rd170, %rd12, %rd169;
	st.global.u32 	[%rd170], %r7424;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2003, %r150, %r153;
	mul.wide.s32 	%rd171, %r2003, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f136, [%rd172];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r7426, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7426, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2004, %r7401, %r132;
	mul.wide.s32 	%rd173, %r2004, 4;
	add.s64 	%rd174, %rd12, %rd173;
	st.global.u32 	[%rd174], %r7426;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2007, %r151, %r153;
	mul.wide.s32 	%rd175, %r2007, 4;
	add.s64 	%rd176, %rd11, %rd175;
	ld.global.f32 	%f139, [%rd176];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r7428, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7428, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2008, %r7401, %r132;
	mul.wide.s32 	%rd177, %r2008, 4;
	add.s64 	%rd178, %rd12, %rd177;
	st.global.u32 	[%rd178], %r7428;
	add.s32 	%r7401, %r7401, 1;

$L__BB0_147:
	add.s64 	%rd588, %rd588, 4;
	mov.u64 	%rd179, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd180, %rd179, 24;
	setp.ne.s64 	%p139, %rd588, %rd180;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7398, %r7398, %r48;
	setp.lt.s32 	%p140, %r7398, %r1736;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7397, %r7397, %r1762;
	setp.lt.s32 	%p141, %r7397, %r1735;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1739, 1;
	ld.param.u64 	%rd181, [%rd1+160];
	cvta.to.global.u64 	%rd15, %rd181;
	ld.param.u64 	%rd182, [%rd1+128];
	cvta.to.global.u64 	%rd16, %rd182;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r257, %r83, 1;
	shr.u32 	%r2056, %r1740, 31;
	add.s32 	%r2057, %r1740, %r2056;
	shr.u32 	%r2058, %r2057, 1;
	and.b32  	%r258, %r2058, 1;
	mov.u64 	%rd201, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd283, %rd201, 24;

$L__BB0_170:
	setp.ge.s32 	%p152, %r257, %r1736;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7436, %r257;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2060, %r7436, 31;
	add.s32 	%r2061, %r7436, %r2060;
	shr.s32 	%r2062, %r2061, 1;
	mad.lo.s32 	%r2063, %r2062, %r1735, %r7430;
	shl.b32 	%r262, %r2063, 5;
	add.s32 	%r263, %r7436, -2;
	mul.lo.s32 	%r264, %r263, %r1735;
	add.s32 	%r2064, %r1736, %r263;
	mul.lo.s32 	%r265, %r2064, %r1735;
	add.s32 	%r266, %r264, %r1735;
	add.s32 	%r267, %r7436, -1;
	add.s32 	%r2065, %r1736, %r267;
	mul.lo.s32 	%r268, %r2065, %r1735;
	add.s32 	%r2066, %r1736, %r7436;
	mul.lo.s32 	%r269, %r2066, %r1735;
	mul.lo.s32 	%r270, %r7436, %r1735;
	add.s32 	%r271, %r270, %r1735;
	add.s32 	%r272, %r7436, 1;
	add.s32 	%r2067, %r1736, %r272;
	mul.lo.s32 	%r273, %r2067, %r1735;
	add.s32 	%r274, %r271, %r1735;
	add.s32 	%r275, %r7436, 2;
	add.s32 	%r2068, %r1736, %r275;
	mul.lo.s32 	%r276, %r2068, %r1735;
	mov.u32 	%r7440, 0;
	mov.u64 	%rd589, %rd201;

$L__BB0_174:
	ld.global.nc.u32 	%r2069, [%rd589];
	cvt.rn.f64.s32 	%fd2, %r2069;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r278, %r2069, %r7430;
	setp.lt.s32 	%p154, %r278, %r1735;
	or.b32  	%r2070, %r263, %r278;
	setp.gt.s32 	%p155, %r2070, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r263, %r1736;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r258, 0;
	add.s32 	%r2072, %r264, %r278;
	shl.b32 	%r2073, %r2072, 1;
	mul.wide.s32 	%rd202, %r2073, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f47, [%rd203];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r7438, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r7438, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r7438, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r283, %r7440, %r262;
	mul.wide.s32 	%rd204, %r283, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7438;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r258, 0;
	add.s32 	%r2077, %r265, %r278;
	shl.b32 	%r2078, %r2077, 1;
	mul.wide.s32 	%rd206, %r2078, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f48, [%rd207];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r7439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r7439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7439, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2081, %r283, 1;
	mul.wide.s32 	%rd208, %r2081, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7439;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r258, 0;
	add.s32 	%r2083, %r264, %r278;
	shl.b32 	%r2084, %r2083, 1;
	or.b32  	%r2085, %r2084, 1;
	mul.wide.s32 	%rd210, %r2085, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f51, [%rd211];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r7441, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r7441, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r7441, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r294, %r7440, %r262;
	mul.wide.s32 	%rd212, %r294, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7441;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r258, 0;
	add.s32 	%r2089, %r265, %r278;
	shl.b32 	%r2090, %r2089, 1;
	or.b32  	%r2091, %r2090, 1;
	mul.wide.s32 	%rd214, %r2091, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f52, [%rd215];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r7442, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r7442, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7442, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2094, %r294, 1;
	mul.wide.s32 	%rd216, %r2094, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7442;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_198:
	or.b32  	%r2095, %r267, %r278;
	setp.gt.s32 	%p164, %r2095, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7436, %r1736;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r258, 0;
	add.s32 	%r2097, %r266, %r278;
	shl.b32 	%r2098, %r2097, 1;
	mul.wide.s32 	%rd218, %r2098, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f54, [%rd219];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r7444, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r7444, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r305, %r7440, %r262;
	mul.wide.s32 	%rd220, %r305, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7444;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r258, 0;
	add.s32 	%r2102, %r268, %r278;
	shl.b32 	%r2103, %r2102, 1;
	mul.wide.s32 	%rd222, %r2103, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f55, [%rd223];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7445, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2106, %r305, 1;
	mul.wide.s32 	%rd224, %r2106, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7445;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r258, 0;
	add.s32 	%r2108, %r266, %r278;
	shl.b32 	%r2109, %r2108, 1;
	or.b32  	%r2110, %r2109, 1;
	mul.wide.s32 	%rd226, %r2110, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f57, [%rd227];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7447, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7447, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r7447, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r316, %r7440, %r262;
	mul.wide.s32 	%rd228, %r316, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7447;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r258, 0;
	add.s32 	%r2114, %r268, %r278;
	shl.b32 	%r2115, %r2114, 1;
	or.b32  	%r2116, %r2115, 1;
	mul.wide.s32 	%rd230, %r2116, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f58, [%rd231];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2119, %r316, 1;
	mul.wide.s32 	%rd232, %r2119, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7448;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_222:
	or.b32  	%r2120, %r7436, %r278;
	setp.gt.s32 	%p174, %r2120, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7436, %r1736;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r258, 0;
	add.s32 	%r2122, %r270, %r278;
	shl.b32 	%r2123, %r2122, 1;
	mul.wide.s32 	%rd234, %r2123, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f60, [%rd235];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7450, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7450, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r327, %r7440, %r262;
	mul.wide.s32 	%rd236, %r327, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7450;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r258, 0;
	add.s32 	%r2127, %r269, %r278;
	shl.b32 	%r2128, %r2127, 1;
	mul.wide.s32 	%rd238, %r2128, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f61, [%rd239];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r7451, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2131, %r327, 1;
	mul.wide.s32 	%rd240, %r2131, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7451;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r258, 0;
	add.s32 	%r2133, %r270, %r278;
	shl.b32 	%r2134, %r2133, 1;
	or.b32  	%r2135, %r2134, 1;
	mul.wide.s32 	%rd242, %r2135, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f62, [%rd243];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7453, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7453, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7453, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r338, %r7440, %r262;
	mul.wide.s32 	%rd244, %r338, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7453;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r258, 0;
	add.s32 	%r2139, %r269, %r278;
	shl.b32 	%r2140, %r2139, 1;
	or.b32  	%r2141, %r2140, 1;
	mul.wide.s32 	%rd246, %r2141, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f63, [%rd247];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2144, %r338, 1;
	mul.wide.s32 	%rd248, %r2144, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7454;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_246:
	or.b32  	%r2145, %r272, %r278;
	setp.gt.s32 	%p184, %r2145, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r272, %r1736;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r258, 0;
	add.s32 	%r2147, %r271, %r278;
	shl.b32 	%r2148, %r2147, 1;
	mul.wide.s32 	%rd250, %r2148, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f64, [%rd251];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r7456, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r7456, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r349, %r7440, %r262;
	mul.wide.s32 	%rd252, %r349, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7456;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r258, 0;
	add.s32 	%r2152, %r273, %r278;
	shl.b32 	%r2153, %r2152, 1;
	mul.wide.s32 	%rd254, %r2153, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f65, [%rd255];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7457, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2156, %r349, 1;
	mul.wide.s32 	%rd256, %r2156, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7457;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r258, 0;
	add.s32 	%r2158, %r271, %r278;
	shl.b32 	%r2159, %r2158, 1;
	or.b32  	%r2160, %r2159, 1;
	mul.wide.s32 	%rd258, %r2160, 4;
	add.s64 	%rd259, %rd15, %rd258;
	ld.global.f32 	%f66, [%rd259];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r7459, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r7459, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7459, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r360, %r7440, %r262;
	mul.wide.s32 	%rd260, %r360, 4;
	add.s64 	%rd261, %rd16, %rd260;
	st.global.u32 	[%rd261], %r7459;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r258, 0;
	add.s32 	%r2164, %r273, %r278;
	shl.b32 	%r2165, %r2164, 1;
	or.b32  	%r2166, %r2165, 1;
	mul.wide.s32 	%rd262, %r2166, 4;
	add.s64 	%rd263, %rd15, %rd262;
	ld.global.f32 	%f67, [%rd263];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2169, %r360, 1;
	mul.wide.s32 	%rd264, %r2169, 4;
	add.s64 	%rd265, %rd16, %rd264;
	st.global.u32 	[%rd265], %r7460;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_270:
	or.b32  	%r2170, %r275, %r278;
	setp.gt.s32 	%p194, %r2170, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r275, %r1736;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r258, 0;
	add.s32 	%r2172, %r274, %r278;
	shl.b32 	%r2173, %r2172, 1;
	mul.wide.s32 	%rd266, %r2173, 4;
	add.s64 	%rd267, %rd15, %rd266;
	ld.global.f32 	%f68, [%rd267];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r7462, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r7462, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r371, %r7440, %r262;
	mul.wide.s32 	%rd268, %r371, 4;
	add.s64 	%rd269, %rd16, %rd268;
	st.global.u32 	[%rd269], %r7462;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r258, 0;
	add.s32 	%r2177, %r276, %r278;
	shl.b32 	%r2178, %r2177, 1;
	mul.wide.s32 	%rd270, %r2178, 4;
	add.s64 	%rd271, %rd15, %rd270;
	ld.global.f32 	%f69, [%rd271];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7463, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2181, %r371, 1;
	mul.wide.s32 	%rd272, %r2181, 4;
	add.s64 	%rd273, %rd16, %rd272;
	st.global.u32 	[%rd273], %r7463;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r258, 0;
	add.s32 	%r2183, %r274, %r278;
	shl.b32 	%r2184, %r2183, 1;
	or.b32  	%r2185, %r2184, 1;
	mul.wide.s32 	%rd274, %r2185, 4;
	add.s64 	%rd275, %rd15, %rd274;
	ld.global.f32 	%f70, [%rd275];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r7465, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r7465, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7465, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r382, %r7440, %r262;
	mul.wide.s32 	%rd276, %r382, 4;
	add.s64 	%rd277, %rd16, %rd276;
	st.global.u32 	[%rd277], %r7465;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r258, 0;
	add.s32 	%r2189, %r276, %r278;
	shl.b32 	%r2190, %r2189, 1;
	or.b32  	%r2191, %r2190, 1;
	mul.wide.s32 	%rd278, %r2191, 4;
	add.s64 	%rd279, %rd15, %rd278;
	ld.global.f32 	%f71, [%rd279];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r7466, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r7466, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7466, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2194, %r382, 1;
	mul.wide.s32 	%rd280, %r2194, 4;
	add.s64 	%rd281, %rd16, %rd280;
	st.global.u32 	[%rd281], %r7466;
	add.s32 	%r7440, %r7440, 2;

$L__BB0_294:
	add.s64 	%rd589, %rd589, 4;
	setp.ne.s64 	%p204, %rd589, %rd283;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7436, %r7436, %r48;
	setp.lt.s32 	%p205, %r7436, %r1736;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7430, %r7430, %r1762;
	setp.lt.s32 	%p206, %r7430, %r1735;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r231, %r82;
	mov.u32 	%r2009, 31;
	sub.s32 	%r2010, %r2009, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2011, %r46, %r2010, %p144;
	shl.b32 	%r2012, %r2011, 2;
	mov.u32 	%r2013, 2;
	sub.s32 	%r232, %r2012, %r1738;
	shl.b32 	%r2014, %r1737, 2;
	mov.u32 	%r2015, 128;
	sub.s32 	%r233, %r2015, %r2014;
	sub.s32 	%r2016, %r2013, %r1738;
	add.s32 	%r234, %r2016, %r2012;
	add.s32 	%r235, %r1735, -1;
	add.s32 	%r236, %r232, 1;
	add.s32 	%r237, %r234, 1;
	rem.s32 	%r2041, %r236, %r233;
	add.s32 	%r2042, %r2041, %r233;
	rem.s32 	%r248, %r2042, %r233;
	rem.s32 	%r2043, %r237, %r233;
	add.s32 	%r2044, %r2043, %r233;
	rem.s32 	%r249, %r2044, %r233;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r231;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r239, %r7430, 1;
	rem.s32 	%r2017, %r232, %r233;
	add.s32 	%r2018, %r2017, %r233;
	rem.s32 	%r240, %r2018, %r233;
	rem.s32 	%r2019, %r234, %r233;
	add.s32 	%r2020, %r2019, %r233;
	rem.s32 	%r241, %r2020, %r233;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2023, %r239, %r233;
	add.s32 	%r2024, %r2023, %r240;
	mul.wide.s32 	%rd183, %r2024, 4;
	add.s64 	%rd184, %rd15, %rd183;
	ld.global.f32 	%f142, [%rd184];
	add.s32 	%r2025, %r2023, %r241;
	mul.wide.s32 	%rd185, %r2025, 4;
	add.s64 	%rd186, %rd15, %rd185;
	ld.global.f32 	%f143, [%rd186];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r7431, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7431, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2026, %r7430, 5;
	add.s32 	%r2027, %r2026, %r46;
	shl.b32 	%r2028, %r2027, 2;
	mul.wide.s32 	%rd187, %r2028, 4;
	add.s64 	%rd17, %rd16, %rd187;
	st.global.u32 	[%rd17], %r7431;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2031, %r239, 1;
	mul.lo.s32 	%r2032, %r2031, %r233;
	add.s32 	%r2033, %r2032, %r240;
	mul.wide.s32 	%rd188, %r2033, 4;
	add.s64 	%rd189, %rd15, %rd188;
	ld.global.f32 	%f146, [%rd189];
	add.s32 	%r2034, %r2032, %r241;
	mul.wide.s32 	%rd190, %r2034, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f147, [%rd191];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7432, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7432, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2035, %r235, %r7430;
	rem.s32 	%r2036, %r2035, %r1735;
	shl.b32 	%r2037, %r2036, 5;
	add.s32 	%r2038, %r2037, %r46;
	shl.b32 	%r2039, %r2038, 2;
	or.b32  	%r2040, %r2039, 2;
	mul.wide.s32 	%rd192, %r2040, 4;
	add.s64 	%rd18, %rd16, %rd192;
	st.global.u32 	[%rd18], %r7432;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2047, %r239, %r233;
	add.s32 	%r2048, %r2047, %r248;
	mul.wide.s32 	%rd193, %r2048, 4;
	add.s64 	%rd194, %rd15, %rd193;
	ld.global.f32 	%f150, [%rd194];
	add.s32 	%r2049, %r2047, %r249;
	mul.wide.s32 	%rd195, %r2049, 4;
	add.s64 	%rd196, %rd15, %rd195;
	ld.global.f32 	%f151, [%rd196];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7433, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7433, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd17+4], %r7433;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2052, %r239, 1;
	mul.lo.s32 	%r2053, %r2052, %r233;
	add.s32 	%r2054, %r2053, %r248;
	mul.wide.s32 	%rd197, %r2054, 4;
	add.s64 	%rd198, %rd15, %rd197;
	ld.global.f32 	%f154, [%rd198];
	add.s32 	%r2055, %r2053, %r249;
	mul.wide.s32 	%rd199, %r2055, 4;
	add.s64 	%rd200, %rd15, %rd199;
	ld.global.f32 	%f155, [%rd200];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7434, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7434, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd18+4], %r7434;

$L__BB0_167:
	add.s32 	%r7430, %r7430, %r1762;
	setp.lt.s32 	%p150, %r7430, %r1735;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2196, %r1730, -1;
	mad.lo.s32 	%r2197, %r1731, 576, 128;
	mul.lo.s32 	%r2198, %r2197, %r2196;
	add.s32 	%r2199, %r73, -64;
	add.s32 	%r2200, %r2199, %r73;
	add.s32 	%r2201, %r1731, -1;
	mad.lo.s32 	%r2202, %r2200, %r2201, %r2198;
	mul.lo.s32 	%r2203, %r2196, %r1731;
	mul.lo.s32 	%r2204, %r2203, 320;
	mad.lo.s32 	%r2205, %r2199, %r2201, %r2204;
	add.s32 	%r391, %r2205, %r2202;
	setp.lt.s32 	%p207, %r391, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7649, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7470, 0;
	mov.u32 	%r7468, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7468], %r7649;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2208, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7468+4], %r2208;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2209, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7468+8], %r2209;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2210, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7468+12], %r2210;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r7649, {low,high};}

	// end inline asm
	add.s32 	%r7468, %r7468, 16;
	add.s32 	%r7470, %r7470, 4;
	setp.lt.s32 	%p208, %r7470, %r391;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7650, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r2213, {low,high};}

	// end inline asm
	ld.param.u64 	%rd284, [%rd1+176];
	cvta.to.global.u64 	%rd21, %rd284;
	mov.u32 	%r2214, 31;
	sub.s32 	%r2215, %r2214, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2216, %r46, %r2215, %p209;
	shl.b32 	%r2217, %r2216, 2;
	sub.s32 	%r402, %r2217, %r1738;
	shl.b32 	%r2218, %r1737, 2;
	mov.u32 	%r2219, 128;
	sub.s32 	%r403, %r2219, %r2218;
	rem.s32 	%r2220, %r402, %r403;
	add.s32 	%r2221, %r2220, %r403;
	rem.s32 	%r404, %r2221, %r403;
	add.s32 	%r2222, %r402, 2;
	rem.s32 	%r2223, %r2222, %r403;
	add.s32 	%r2224, %r2223, %r403;
	rem.s32 	%r405, %r2224, %r403;
	mul.lo.s32 	%r2225, %r404, 6;
	mul.lo.s32 	%r2226, %r405, 6;
	mul.wide.s32 	%rd285, %r2225, 4;
	add.s64 	%rd22, %rd21, %rd285;
	mul.wide.s32 	%rd286, %r2226, 4;
	add.s64 	%rd23, %rd21, %rd286;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd22];
	ld.global.f32 	%f299, [%rd22+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd23+8];
	ld.global.f32 	%f301, [%rd23];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd22+4];
	ld.global.f32 	%f307, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r7473, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd22];
	ld.global.f32 	%f305, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7473, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd22+20];
	ld.global.f32 	%f311, [%rd22+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd23+20];
	ld.global.f32 	%f313, [%rd23+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7474, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd22+16];
	ld.global.f32 	%f319, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd22+12];
	ld.global.f32 	%f317, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7475, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2235, %r402, 1;
	rem.s32 	%r2236, %r2235, %r403;
	add.s32 	%r2237, %r2236, %r403;
	rem.s32 	%r418, %r2237, %r403;
	add.s32 	%r2238, %r402, 3;
	rem.s32 	%r2239, %r2238, %r403;
	add.s32 	%r2240, %r2239, %r403;
	rem.s32 	%r419, %r2240, %r403;
	mul.lo.s32 	%r2241, %r418, 6;
	mul.lo.s32 	%r2242, %r419, 6;
	mul.wide.s32 	%rd287, %r2241, 4;
	add.s64 	%rd24, %rd21, %rd287;
	mul.wide.s32 	%rd288, %r2242, 4;
	add.s64 	%rd25, %rd21, %rd288;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd24];
	ld.global.f32 	%f323, [%rd24+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd25+8];
	ld.global.f32 	%f325, [%rd25];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7476, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd24+4];
	ld.global.f32 	%f331, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd24];
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd24+20];
	ld.global.f32 	%f335, [%rd24+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd25+20];
	ld.global.f32 	%f337, [%rd25+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd24+16];
	ld.global.f32 	%f343, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd24+12];
	ld.global.f32 	%f341, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2251, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd289, %r2251;
	// begin inline asm
	mov.u32 %r2252, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd290, %r2252;
	bfi.b64 	%rd26, %rd290, %rd289, 32, 32;
	setp.ne.s64 	%p218, %rd26, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd27, %rd26, 4;
	mov.u32 	%r2253, %nctaid.y;
	mov.u32 	%r2254, %nctaid.x;
	mul.lo.s32 	%r2255, %r2254, %r2253;
	mov.u32 	%r2256, %nctaid.z;
	mul.lo.s32 	%r432, %r2255, %r2256;
	neg.s32 	%r2257, %r42;
	add.s32 	%r2258, %r46, %r41;
	setp.ne.s32 	%p219, %r2258, %r2257;
	mov.u32 	%r2259, %ctaid.x;
	add.s32 	%r433, %r2259, %r43;
	neg.s32 	%r434, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r433, %r434;
	mov.u32 	%r2262, -2147483647;
	sub.s32 	%r2263, %r2262, %r432;
	selp.b32 	%r2261, %r2263, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2260,[%rd27],%r2261;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2264, [%rd27];
	xor.b32  	%r2265, %r2264, %r2260;
	setp.gt.s32 	%p221, %r2265, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2266,[%rd27];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_894;

	shr.s32 	%r2280, %r1740, 31;
	shr.u32 	%r2281, %r2280, 30;
	add.s32 	%r2282, %r1740, %r2281;
	shr.s32 	%r436, %r2282, 2;
	add.s32 	%r2283, %r46, 30;
	mul.hi.s32 	%r2284, %r2283, -2078209981;
	add.s32 	%r2285, %r2284, %r2283;
	shr.u32 	%r2286, %r2285, 31;
	shr.s32 	%r2287, %r2285, 4;
	add.s32 	%r2288, %r2287, %r2286;
	mul.lo.s32 	%r2289, %r2288, 31;
	sub.s32 	%r2290, %r2283, %r2289;
	add.s32 	%r2291, %r46, 32;
	mul.hi.s32 	%r2292, %r2291, -2078209981;
	add.s32 	%r2293, %r2292, %r2291;
	shr.u32 	%r2294, %r2293, 31;
	shr.s32 	%r2295, %r2293, 4;
	add.s32 	%r2296, %r2295, %r2294;
	mul.lo.s32 	%r2297, %r2296, 31;
	sub.s32 	%r2298, %r2291, %r2297;
	shr.u32 	%r2299, %r1740, 31;
	add.s32 	%r2300, %r1740, %r2299;
	and.b32  	%r2301, %r2300, -2;
	sub.s32 	%r437, %r1740, %r2301;
	setp.lt.s32 	%p223, %r46, 31;
	selp.b32 	%r438, %r2290, %r46, %p223;
	setp.lt.s32 	%p224, %r404, %r1749;
	setp.ge.s32 	%p225, %r404, %r1748;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r418, %r1749;
	setp.ge.s32 	%p227, %r418, %r1748;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r405, %r1749;
	setp.ge.s32 	%p229, %r405, %r1748;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r419, %r1749;
	setp.ge.s32 	%p231, %r419, %r1748;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r439, %r2298, %r46, %p223;
	mov.u32 	%r2279, 0;
	// begin inline asm
	{mov.u32 %r2302, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2628, %r2302, 8;
	add.s32 	%r2629, %r2628, -8192;
	or.b32  	%r2306, %r2629, 31;
	mul.wide.s32 	%rd301, %r46, 16;
	mul.wide.s32 	%rd303, %r46, 8;
	mov.u32 	%r7480, %r2279;
	mov.u32 	%r7481, %r2279;
	mov.u32 	%r7482, %r2279;
	mov.u32 	%r7483, %r2279;
	mov.u32 	%r7484, %r2279;
	mov.u32 	%r7485, %r2279;
	mov.u32 	%r7486, %r2279;
	mov.u32 	%r7487, %r2279;
	mov.u32 	%r7488, %r2279;
	mov.u32 	%r7489, %r2279;
	mov.u32 	%r7490, %r2279;
	mov.u32 	%r7491, %r2279;
	mov.u32 	%r7779, %r2213;
	mov.u32 	%r7780, %r2213;
	mov.u32 	%r7777, %r2213;
	mov.u32 	%r7778, %r2213;
	mov.u32 	%r7799, %r2213;
	mov.u32 	%r7800, %r2213;
	mov.u32 	%r7813, %r2213;
	mov.u32 	%r7801, %r2213;
	mov.u32 	%r7815, %r2213;
	mov.u32 	%r7802, %r2213;
	mov.u32 	%r7803, %r2213;
	mov.u32 	%r7804, %r2213;
	mov.u32 	%r7805, %r2213;
	mov.u32 	%r7806, %r2213;
	mov.u32 	%r7807, %r2213;
	mov.u32 	%r7808, %r2213;
	mov.u32 	%r7817, %r2213;
	mov.u32 	%r7818, %r2213;
	mov.u32 	%r7819, %r2213;
	mov.u32 	%r7820, %r2213;
	mov.u32 	%r7821, %r2213;
	mov.u32 	%r7822, %r2213;
	mov.u32 	%r7809, %r2213;
	mov.u32 	%r7810, %r2213;
	mov.u32 	%r7823, %r2213;
	mov.u32 	%r7824, %r2213;
	mov.u32 	%r7811, %r2213;
	mov.u32 	%r7812, %r2213;
	mov.u32 	%r7781, %r2213;
	mov.u32 	%r7782, %r2213;
	mov.u32 	%r7769, %r2213;
	mov.u32 	%r7770, %r2213;
	mov.u32 	%r7771, %r2213;
	mov.u32 	%r7772, %r2213;
	mov.u32 	%r7783, %r2213;
	mov.u32 	%r7784, %r2213;
	mov.u32 	%r7785, %r2213;
	mov.u32 	%r7786, %r2213;
	mov.u32 	%r7787, %r2213;
	mov.u32 	%r7788, %r2213;
	mov.u32 	%r7773, %r2213;
	mov.u32 	%r7774, %r2213;
	mov.u32 	%r7775, %r2213;
	mov.u32 	%r7776, %r2213;
	mov.u32 	%r7789, %r2213;
	mov.u32 	%r7790, %r2213;
	mov.u32 	%r7791, %r2213;
	mov.u32 	%r7792, %r2213;
	mov.u32 	%r7540, %r2213;
	mov.u32 	%r7541, %r2213;
	mov.u32 	%r7839, %r2213;
	mov.u32 	%r7840, %r2213;
	mov.u32 	%r7546, %r2213;
	mov.u32 	%r7547, %r2213;
	mov.u32 	%r7548, %r2213;
	mov.u32 	%r7549, %r2213;
	mov.u32 	%r7841, %r2213;
	mov.u32 	%r7842, %r2213;
	mov.u32 	%r7552, %r2213;
	mov.u32 	%r7843, %r2213;
	mov.u32 	%r7554, %r2213;
	mov.u32 	%r7555, %r2213;
	mov.u32 	%r7844, %r2213;
	mov.u32 	%r7557, %r2213;
	mov.u32 	%r7558, %r2213;
	mov.u32 	%r7559, %r2213;
	mov.u32 	%r7793, %r2213;
	mov.u32 	%r7794, %r2213;
	mov.u32 	%r7562, %r2213;
	mov.u32 	%r7563, %r2213;
	mov.u32 	%r7566, %r2213;
	mov.u32 	%r7567, %r2213;
	mov.u32 	%r7568, %r2213;
	mov.u32 	%r7569, %r2213;
	mov.u32 	%r7570, %r2213;
	mov.u32 	%r7848, %r2213;
	mov.u32 	%r7572, %r2213;
	mov.u32 	%r7573, %r2213;
	mov.u32 	%r7574, %r2213;
	mov.u32 	%r7575, %r2213;
	mov.u32 	%r7576, %r2213;
	mov.u32 	%r7577, %r2213;
	mov.u32 	%r7578, %r2213;
	mov.u32 	%r7850, %r2213;
	mov.u32 	%r7580, %r2213;
	mov.u32 	%r7581, %r2213;
	mov.u32 	%r7582, %r2213;
	mov.u32 	%r7851, %r2213;
	mov.u32 	%r7584, %r2213;
	mov.u32 	%r7585, %r2213;
	mov.u32 	%r7586, %r2213;
	mov.u32 	%r7587, %r2213;
	mov.u32 	%r7588, %r2213;
	mov.u32 	%r7589, %r2213;
	mov.u32 	%r7590, %r2213;
	mov.u32 	%r7852, %r2213;
	mov.u32 	%r7592, %r2213;
	mov.u32 	%r7795, %r2213;
	mov.u32 	%r7594, %r2213;
	mov.u32 	%r7595, %r2213;
	mov.u32 	%r7596, %r2213;
	mov.u32 	%r7597, %r2213;
	mov.u32 	%r7796, %r2213;
	mov.u32 	%r7599, %r2213;
	mov.u32 	%r7600, %r2213;
	mov.u32 	%r7601, %r2213;
	mov.u32 	%r7602, %r2213;
	mov.u32 	%r7603, %r2213;
	mov.u32 	%r7604, %r2213;
	mov.u32 	%r7605, %r2213;
	mov.u32 	%r7606, %r2213;
	mov.u32 	%r7607, %r2213;
	mov.u32 	%r7608, %r2213;
	mov.u32 	%r7609, %r2213;
	mov.u32 	%r7610, %r2213;
	mov.u32 	%r7611, %r2213;
	mov.u32 	%r7612, %r2213;
	mov.u32 	%r7613, %r2213;
	mov.u32 	%r7614, %r2213;
	mov.u32 	%r7615, %r2213;
	mov.u32 	%r7616, %r2213;
	mov.u32 	%r7617, %r2213;
	mov.u32 	%r7618, %r2213;
	mov.u32 	%r7619, %r2213;
	mov.u32 	%r7620, %r2213;
	mov.u32 	%r7621, %r2213;
	mov.u32 	%r7622, %r2213;
	mov.u32 	%r7623, %r2213;
	mov.u32 	%r7624, %r2213;
	mov.u32 	%r7625, %r2213;
	mov.u32 	%r7626, %r2213;
	mov.u32 	%r7627, %r2213;
	mov.u32 	%r7628, %r2213;
	mov.u32 	%r7629, %r2213;
	mov.u32 	%r7630, %r2213;
	mov.u32 	%r7631, %r2213;
	mov.u32 	%r7632, %r2213;
	mov.u32 	%r7633, %r2213;
	mov.u32 	%r7634, %r2213;
	mov.u32 	%r7635, %r2213;
	mov.u32 	%r7636, %r2213;
	mov.u32 	%r7637, %r2213;
	mov.u32 	%r7638, %r2213;
	mov.u32 	%r7639, %r2213;
	mov.u32 	%r7640, %r2213;
	mov.u32 	%r7641, %r2213;
	mov.u32 	%r7642, %r2213;
	mov.u32 	%r7643, %r2213;
	mov.u32 	%r7644, %r2213;
	mov.u32 	%r7645, %r2213;
	mov.u32 	%r7646, %r2213;
	mov.u32 	%r7647, %r2213;
	mov.u32 	%r7648, %r2279;

$L__BB0_332:
	mov.u32 	%r551, %r7852;
	mov.u32 	%r547, %r7587;
	mov.u32 	%r543, %r7851;
	mov.u32 	%r541, %r7581;
	mov.u32 	%r539, %r7850;
	mov.u32 	%r531, %r7848;
	mov.u32 	%r7587, %r7844;
	mov.u32 	%r513, %r7843;
	mov.u32 	%r7581, %r7842;
	mov.u32 	%r510, %r7841;
	mov.u32 	%r505, %r7840;
	mov.u32 	%r504, %r7839;
	sub.s32 	%r7370, %r1735, %r48;
	mov.u32 	%r2317, 1;
	not.b32 	%r2591, %r43;
	mov.u32 	%r2583, -1;
	add.s32 	%r2592, %r1732, %r2591;
	mul.lo.s32 	%r2593, %r2592, %r1734;
	add.s32 	%r2594, %r7648, %r2593;
	not.b32 	%r2596, %r44;
	add.s32 	%r2597, %r1733, %r2596;
	mul.lo.s32 	%r2598, %r2597, %r1734;
	add.s32 	%r2599, %r7648, %r2598;
	add.s32 	%r2600, %r2593, %r2598;
	add.s32 	%r2601, %r2600, %r1735;
	not.b32 	%r2602, %r41;
	add.s32 	%r2603, %r1730, %r2602;
	mad.lo.s32 	%r2604, %r2592, %r1730, %r2603;
	not.b32 	%r2605, %r42;
	add.s32 	%r2606, %r1731, %r2605;
	mad.lo.s32 	%r2607, %r2597, %r1731, %r2606;
	add.s32 	%r2608, %r2604, %r2607;
	shl.b32 	%r2609, %r2608, 1;
	add.s32 	%r2610, %r2601, %r2609;
	add.s32 	%r2611, %r7648, %r2610;
	add.s32 	%r2612, %r7648, %r2600;
	div.s32 	%r2613, %r2611, %r1735;
	neg.s32 	%r2614, %r1735;
	sub.s32 	%r2617, %r48, %r1735;
	sub.s32 	%r2618, %r2604, %r2607;
	shl.b32 	%r2619, %r2618, 1;
	add.s32 	%r2620, %r2619, %r1736;
	mad.lo.s32 	%r2621, %r2613, %r48, %r2620;
	mad.lo.s32 	%r2622, %r2613, %r2617, %r2612;
	div.s32 	%r2623, %r2621, %r1736;
	mul.lo.s32 	%r2624, %r2623, %r1736;
	sub.s32 	%r2627, %r1763, %r1736;
	mov.u32 	%r2401, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2303,%r7650,%r2279,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2309, %r7473, %r2303, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2309,%r7647;
}
	// end inline asm
	selp.b32 	%r2312, %r7477, %r2303, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2312,%r7646;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2315,%r7650,%r2317,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2321, %r7473, %r2315, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2321,%r7645;
}
	// end inline asm
	selp.b32 	%r2324, %r7477, %r2315, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2324,%r7644;
}
	// end inline asm
	mov.u32 	%r2329, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2327,%r7650,%r2329,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2333, %r7473, %r2327, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2333,%r7643;
}
	// end inline asm
	selp.b32 	%r2336, %r7477, %r2327, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2336,%r7642;
}
	// end inline asm
	mov.u32 	%r2341, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2339,%r7650,%r2341,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2345, %r7473, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2345,%r7824;
}
	// end inline asm
	selp.b32 	%r2348, %r7477, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2348,%r7823;
}
	// end inline asm
	mov.u32 	%r2353, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2351,%r7650,%r2353,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2357, %r7473, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2357,%r7641;
}
	// end inline asm
	selp.b32 	%r2360, %r7477, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2360,%r7640;
}
	// end inline asm
	mov.u32 	%r2365, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2363,%r7650,%r2365,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2369, %r7473, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2369,%r7639;
}
	// end inline asm
	selp.b32 	%r2372, %r7477, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7721,%r2372,%r7638;
}
	// end inline asm
	mov.u32 	%r2377, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2375,%r7650,%r2377,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2381, %r7473, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2381,%r7637;
}
	// end inline asm
	selp.b32 	%r2384, %r7477, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7720,%r2384,%r7636;
}
	// end inline asm
	mov.u32 	%r2389, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2387,%r7650,%r2389,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2393, %r7473, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7722,%r2393,%r7635;
}
	// end inline asm
	selp.b32 	%r2396, %r7477, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7719,%r2396,%r7634;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2399,%r7650,%r2401,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2405, %r7473, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7718,%r2405,%r7633;
}
	// end inline asm
	selp.b32 	%r2408, %r7477, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7715,%r2408,%r7632;
}
	// end inline asm
	mov.u32 	%r2413, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2411,%r7650,%r2413,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2417, %r7473, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7717,%r2417,%r7631;
}
	// end inline asm
	selp.b32 	%r2420, %r7477, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7714,%r2420,%r7630;
}
	// end inline asm
	mov.u32 	%r2425, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2423,%r7650,%r2425,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2429, %r7473, %r2423, %p28;
	// begin inline asm
	{mul.f16x2 %r7716,%r2429,%r7629;
}
	// end inline asm
	selp.b32 	%r2432, %r7477, %r2423, %p28;
	// begin inline asm
	{mul.f16x2 %r7713,%r2432,%r7628;
}
	// end inline asm
	mov.u32 	%r2437, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2435,%r7650,%r2437,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2441, %r7473, %r2435, %p28;
	// begin inline asm
	{mul.f16x2 %r7712,%r2441,%r7810;
}
	// end inline asm
	selp.b32 	%r2444, %r7477, %r2435, %p28;
	// begin inline asm
	{mul.f16x2 %r7711,%r2444,%r7809;
}
	// end inline asm
	mov.u32 	%r2449, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2447,%r7650,%r2449,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2453, %r7473, %r2447, %p28;
	// begin inline asm
	{mul.f16x2 %r7710,%r2453,%r7822;
}
	// end inline asm
	selp.b32 	%r2456, %r7477, %r2447, %p28;
	// begin inline asm
	{mul.f16x2 %r7708,%r2456,%r7820;
}
	// end inline asm
	mov.u32 	%r2461, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2459,%r7650,%r2461,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2465, %r7473, %r2459, %p28;
	// begin inline asm
	{mul.f16x2 %r7709,%r2465,%r7821;
}
	// end inline asm
	selp.b32 	%r2468, %r7477, %r2459, %p28;
	// begin inline asm
	{mul.f16x2 %r7707,%r2468,%r7819;
}
	// end inline asm
	mov.u32 	%r2473, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2471,%r7650,%r2473,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2477, %r7473, %r2471, %p28;
	// begin inline asm
	{mul.f16x2 %r7706,%r2477,%r7818;
}
	// end inline asm
	selp.b32 	%r2480, %r7477, %r2471, %p28;
	// begin inline asm
	{mul.f16x2 %r7703,%r2480,%r7817;
}
	// end inline asm
	mov.u32 	%r2485, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2483,%r7650,%r2485,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2489, %r7473, %r2483, %p28;
	// begin inline asm
	{mul.f16x2 %r7705,%r2489,%r7627;
}
	// end inline asm
	selp.b32 	%r2492, %r7477, %r2483, %p28;
	// begin inline asm
	{mul.f16x2 %r7702,%r2492,%r7626;
}
	// end inline asm
	mov.u32 	%r2497, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2495,%r7650,%r2497,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2501, %r7473, %r2495, %p28;
	// begin inline asm
	{mul.f16x2 %r7704,%r2501,%r7625;
}
	// end inline asm
	selp.b32 	%r2504, %r7477, %r2495, %p28;
	// begin inline asm
	{mul.f16x2 %r7701,%r2504,%r7624;
}
	// end inline asm
	mov.u32 	%r2509, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2507,%r7650,%r2509,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2513, %r7473, %r2507, %p28;
	// begin inline asm
	{mul.f16x2 %r7700,%r2513,%r7808;
}
	// end inline asm
	selp.b32 	%r2516, %r7477, %r2507, %p28;
	// begin inline asm
	{mul.f16x2 %r7697,%r2516,%r7806;
}
	// end inline asm
	mov.u32 	%r2521, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2519,%r7650,%r2521,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2525, %r7473, %r2519, %p28;
	// begin inline asm
	{mul.f16x2 %r7699,%r2525,%r7807;
}
	// end inline asm
	selp.b32 	%r2528, %r7477, %r2519, %p28;
	// begin inline asm
	{mul.f16x2 %r7696,%r2528,%r7805;
}
	// end inline asm
	mov.u32 	%r2533, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2531,%r7650,%r2533,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2537, %r7473, %r2531, %p28;
	// begin inline asm
	{mul.f16x2 %r7698,%r2537,%r7623;
}
	// end inline asm
	selp.b32 	%r2540, %r7477, %r2531, %p28;
	// begin inline asm
	{mul.f16x2 %r7695,%r2540,%r7622;
}
	// end inline asm
	mov.u32 	%r2545, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2543,%r7650,%r2545,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2549, %r7473, %r2543, %p28;
	// begin inline asm
	{mul.f16x2 %r7694,%r2549,%r7804;
}
	// end inline asm
	selp.b32 	%r2552, %r7477, %r2543, %p28;
	// begin inline asm
	{mul.f16x2 %r7693,%r2552,%r7803;
}
	// end inline asm
	mov.u32 	%r2557, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2555,%r7650,%r2557,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2561, %r7473, %r2555, %p28;
	// begin inline asm
	{mul.f16x2 %r7692,%r2561,%r7802;
}
	// end inline asm
	selp.b32 	%r2564, %r7477, %r2555, %p28;
	// begin inline asm
	{mul.f16x2 %r7690,%r2564,%r7801;
}
	// end inline asm
	mov.u32 	%r2569, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2567,%r7650,%r2569,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2573, %r7473, %r2567, %p28;
	// begin inline asm
	{mul.f16x2 %r7691,%r2573,%r7815;
}
	// end inline asm
	selp.b32 	%r2576, %r7477, %r2567, %p28;
	// begin inline asm
	{mul.f16x2 %r7689,%r2576,%r7813;
}
	// end inline asm
	mov.u32 	%r2581, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2579,%r7650,%r2581,%r2306,%r2583;
}
	// end inline asm
	selp.b32 	%r2585, %r7473, %r2579, %p28;
	// begin inline asm
	{mul.f16x2 %r7688,%r2585,%r7800;
}
	// end inline asm
	selp.b32 	%r2588, %r7477, %r2579, %p28;
	// begin inline asm
	{mul.f16x2 %r7687,%r2588,%r7799;
}
	// end inline asm
	rem.s32 	%r659, %r2594, %r72;
	rem.s32 	%r660, %r2599, %r7370;
	mad.lo.s32 	%r661, %r2613, %r2614, %r2611;
	sub.s32 	%r662, %r2621, %r2624;
	mad.lo.s32 	%r663, %r2623, %r2627, %r2622;
	ld.param.u64 	%rd294, [%rd1+168];
	cvta.to.global.u64 	%rd295, %rd294;
	shl.b32 	%r2677, %r663, 1;
	mul.wide.s32 	%rd296, %r2677, 4;
	add.s64 	%rd28, %rd295, %rd296;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2880, %r1758, 1;
	setp.lt.s32 	%p239, %r663, %r2880;
	setp.eq.s32 	%p240, %r436, %r46;
	setp.gt.s32 	%p241, %r663, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7653, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7654, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2680, %r1758, 1;
	setp.lt.s32 	%p234, %r663, %r2680;
	setp.gt.s32 	%p235, %r663, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7651, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7652, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7653, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7654, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2888, 0;
	mov.u32 	%r2899, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2886,%r7649,%r2888,%r2306,%r2899;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2891,%r7653,%r2886;
}
	// end inline asm
	mov.u32 	%r2897, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2895,%r7649,%r2897,%r2306,%r2899;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2900,%r7654,%r2895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7656,%r2891,%r2900;
}
	// end inline asm
	setp.eq.s32 	%p244, %r437, 0;
	mov.u32 	%r7655, %r7656;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7655, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r7655;
}
	// end inline asm
	setp.eq.s32 	%p245, %r437, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7656, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7656;
}
	// end inline asm
	mov.u32 	%r2921, 2;
	mov.u32 	%r2932, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2919,%r7649,%r2921,%r2306,%r2932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2924,%r7653,%r2919;
}
	// end inline asm
	mov.u32 	%r2930, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2928,%r7649,%r2930,%r2306,%r2932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2933,%r7654,%r2928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r2924,%r2933;
}
	// end inline asm
	mov.u32 	%r7657, %r7658;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7657, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r7657;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7658, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7658;
}
	// end inline asm
	mov.u32 	%r2954, 4;
	mov.u32 	%r2965, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2952,%r7649,%r2954,%r2306,%r2965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2957,%r7653,%r2952;
}
	// end inline asm
	mov.u32 	%r2963, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2961,%r7649,%r2963,%r2306,%r2965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2966,%r7654,%r2961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r2957,%r2966;
}
	// end inline asm
	mov.u32 	%r7659, %r7660;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7659, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7659;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7660, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r7660;
}
	// end inline asm
	mov.u32 	%r2987, 6;
	mov.u32 	%r2998, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2985,%r7649,%r2987,%r2306,%r2998;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2990,%r7653,%r2985;
}
	// end inline asm
	mov.u32 	%r2996, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2994,%r7649,%r2996,%r2306,%r2998;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2999,%r7654,%r2994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r2990,%r2999;
}
	// end inline asm
	mov.u32 	%r7661, %r7662;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7661, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r7661;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7662, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7662;
}
	// end inline asm
	mov.u32 	%r3020, 8;
	mov.u32 	%r3031, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3018,%r7649,%r3020,%r2306,%r3031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3023,%r7653,%r3018;
}
	// end inline asm
	mov.u32 	%r3029, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3027,%r7649,%r3029,%r2306,%r3031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3032,%r7654,%r3027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r3023,%r3032;
}
	// end inline asm
	mov.u32 	%r7663, %r7664;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7663, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r7663;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7664, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r7664;
}
	// end inline asm
	mov.u32 	%r3053, 10;
	mov.u32 	%r3064, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3051,%r7649,%r3053,%r2306,%r3064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3056,%r7653,%r3051;
}
	// end inline asm
	mov.u32 	%r3062, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3060,%r7649,%r3062,%r2306,%r3064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3065,%r7654,%r3060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r3056,%r3065;
}
	// end inline asm
	mov.u32 	%r7665, %r7666;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7665, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r7665;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7666, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r7666;
}
	// end inline asm
	mov.u32 	%r3086, 12;
	mov.u32 	%r3097, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3084,%r7649,%r3086,%r2306,%r3097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3089,%r7653,%r3084;
}
	// end inline asm
	mov.u32 	%r3095, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3093,%r7649,%r3095,%r2306,%r3097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3098,%r7654,%r3093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r3089,%r3098;
}
	// end inline asm
	mov.u32 	%r7667, %r7668;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7667, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r7667;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7668, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r7668;
}
	// end inline asm
	mov.u32 	%r3119, 14;
	mov.u32 	%r3130, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3117,%r7649,%r3119,%r2306,%r3130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3122,%r7653,%r3117;
}
	// end inline asm
	mov.u32 	%r3128, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3126,%r7649,%r3128,%r2306,%r3130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3131,%r7654,%r3126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7670,%r3122,%r3131;
}
	// end inline asm
	mov.u32 	%r7669, %r7670;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7669, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r7669;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7670, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7715,%r7715,%r7670;
}
	// end inline asm
	mov.u32 	%r3152, 16;
	mov.u32 	%r3163, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3150,%r7649,%r3152,%r2306,%r3163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3155,%r7653,%r3150;
}
	// end inline asm
	mov.u32 	%r3161, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3159,%r7649,%r3161,%r2306,%r3163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3164,%r7654,%r3159;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7672,%r3155,%r3164;
}
	// end inline asm
	mov.u32 	%r7671, %r7672;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7671, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r7671;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7672, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7714,%r7714,%r7672;
}
	// end inline asm
	mov.u32 	%r3185, 18;
	mov.u32 	%r3196, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3183,%r7649,%r3185,%r2306,%r3196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3188,%r7653,%r3183;
}
	// end inline asm
	mov.u32 	%r3194, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3192,%r7649,%r3194,%r2306,%r3196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3197,%r7654,%r3192;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7674,%r3188,%r3197;
}
	// end inline asm
	mov.u32 	%r7673, %r7674;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7673, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r7673;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7674, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7711,%r7711,%r7674;
}
	// end inline asm
	mov.u32 	%r3218, 20;
	mov.u32 	%r3229, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3216,%r7649,%r3218,%r2306,%r3229;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3221,%r7653,%r3216;
}
	// end inline asm
	mov.u32 	%r3227, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3225,%r7649,%r3227,%r2306,%r3229;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3230,%r7654,%r3225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7676,%r3221,%r3230;
}
	// end inline asm
	mov.u32 	%r7675, %r7676;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7675, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7710,%r7710,%r7675;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7676, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7708,%r7708,%r7676;
}
	// end inline asm
	mov.u32 	%r3251, 22;
	mov.u32 	%r3262, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3249,%r7649,%r3251,%r2306,%r3262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3254,%r7653,%r3249;
}
	// end inline asm
	mov.u32 	%r3260, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3258,%r7649,%r3260,%r2306,%r3262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3263,%r7654,%r3258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7678,%r3254,%r3263;
}
	// end inline asm
	mov.u32 	%r7677, %r7678;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7677, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r7677;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7678, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r7678;
}
	// end inline asm
	mov.u32 	%r3284, 24;
	mov.u32 	%r3295, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3282,%r7649,%r3284,%r2306,%r3295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3287,%r7653,%r3282;
}
	// end inline asm
	mov.u32 	%r3293, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3291,%r7649,%r3293,%r2306,%r3295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3296,%r7654,%r3291;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7680,%r3287,%r3296;
}
	// end inline asm
	mov.u32 	%r7679, %r7680;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7679, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7705,%r7705,%r7679;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7680, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7702,%r7702,%r7680;
}
	// end inline asm
	mov.u32 	%r3317, 26;
	mov.u32 	%r3328, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3315,%r7649,%r3317,%r2306,%r3328;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3320,%r7653,%r3315;
}
	// end inline asm
	mov.u32 	%r3326, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3324,%r7649,%r3326,%r2306,%r3328;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3329,%r7654,%r3324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7682,%r3320,%r3329;
}
	// end inline asm
	mov.u32 	%r7681, %r7682;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7681, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7700,%r7700,%r7681;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7682, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7697,%r7697,%r7682;
}
	// end inline asm
	mov.u32 	%r3350, 28;
	mov.u32 	%r3361, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3348,%r7649,%r3350,%r2306,%r3361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3353,%r7653,%r3348;
}
	// end inline asm
	mov.u32 	%r3359, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3357,%r7649,%r3359,%r2306,%r3361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3362,%r7654,%r3357;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7684,%r3353,%r3362;
}
	// end inline asm
	mov.u32 	%r7683, %r7684;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7683, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7699,%r7699,%r7683;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7684, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7696,%r7696,%r7684;
}
	// end inline asm
	mov.u32 	%r3392, 31;
	mov.u32 	%r3383, 30;
	mov.u32 	%r3394, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3381,%r7649,%r3383,%r2306,%r3394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3386,%r7653,%r3381;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3390,%r7649,%r3392,%r2306,%r3394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3395,%r7654,%r3390;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7686,%r3386,%r3395;
}
	// end inline asm
	mov.u32 	%r7685, %r7686;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7685, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7692,%r7692,%r7685;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7686, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7690,%r7690,%r7686;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7651, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7652, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r662, %r1740;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2782,%r7651,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2788,%r7651,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r2788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2794,%r7651,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r2794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2800,%r7651,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r7704,%r2800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2806,%r7651,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r2806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2812,%r7651,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7691,%r7691,%r2812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2818,%r7652,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2824,%r7652,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r2824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2830,%r7651,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2836,%r7651,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r2836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2842,%r7651,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r2842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2848,%r7651,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7701,%r7701,%r2848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2854,%r7651,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r2854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2860,%r7651,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7689,%r7689,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2866,%r7652,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r2866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2872,%r7652,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7707,%r7707,%r2872;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2685, %r1740, -2;
	setp.ne.s32 	%p238, %r662, %r2685;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2686,%r7651,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r2686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2692,%r7651,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7694,%r7694,%r2692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2698,%r7652,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2698;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2704,%r7652,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r7716,%r2704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2710,%r7652,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r2710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2716,%r7652,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r7698,%r2716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2722,%r7652,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r7700,%r2722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2728,%r7652,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7688,%r7688,%r2728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2734,%r7651,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7711,%r7711,%r2734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2740,%r7651,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7693,%r7693,%r2740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2746,%r7652,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r2746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2752,%r7652,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r2752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2758,%r7652,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7715,%r7715,%r2758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2764,%r7652,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7695,%r7695,%r2764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2770,%r7652,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7697,%r7697,%r2770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2776,%r7652,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7687,%r7687,%r2776;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7839, %r2213;
	mov.u32 	%r7840, %r2213;
	mov.u32 	%r7845, %r2213;
	mov.u32 	%r7846, %r2213;
	mov.u32 	%r7847, %r2213;
	mov.u32 	%r7848, %r2213;
	mov.u32 	%r7849, %r2213;
	mov.u32 	%r7850, %r2213;
	mov.u32 	%r7857, %r2213;
	mov.u32 	%r7858, %r2213;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3413, %r1731, 320;
	add.s32 	%r3414, %r41, -1;
	mul.lo.s32 	%r3415, %r42, 320;
	mad.lo.s32 	%r3416, %r3413, %r3414, %r3415;
	add.s32 	%r3419, %r1810, -64;
	mad.lo.s32 	%r3424, %r3419, %r2201, %r2198;
	add.s32 	%r3425, %r3416, %r3424;
	shl.b32 	%r3426, %r3425, 2;
	mov.u32 	%r3427, _ZN6kernel5shmemE;
	add.s32 	%r3428, %r3427, %r3426;
	shl.b32 	%r3429, %r46, 4;
	add.s32 	%r3430, %r3428, %r3429;
	ld.shared.v4.u32 	{%r7850, %r7848, %r7840, %r7839}, [%r3430];
	shl.b32 	%r3435, %r46, 3;
	add.s32 	%r3436, %r3428, %r3435;
	ld.shared.v2.u32 	{%r7849, %r7847}, [%r3436+512];
	ld.shared.v4.u32 	{%r7858, %r7857, %r7846, %r7845}, [%r3430+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7841, %r2213;
	mov.u32 	%r7842, %r2213;
	mov.u32 	%r7843, %r2213;
	mov.u32 	%r7844, %r2213;
	mov.u32 	%r7851, %r2213;
	mov.u32 	%r7852, %r2213;
	mov.u32 	%r7853, %r2213;
	mov.u32 	%r7854, %r2213;
	mov.u32 	%r7855, %r2213;
	mov.u32 	%r7856, %r2213;
	mov.u32 	%r7859, %r2213;
	mov.u32 	%r7860, %r2213;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3448, %r2603, 384, %r2204;
	add.s32 	%r3451, %r42, -1;
	mad.lo.s32 	%r3452, %r2199, %r3451, %r3448;
	add.s32 	%r3458, %r3452, %r2202;
	shl.b32 	%r3459, %r3458, 2;
	mov.u32 	%r3460, _ZN6kernel5shmemE;
	add.s32 	%r3461, %r3460, %r3459;
	shl.b32 	%r3462, %r46, 4;
	add.s32 	%r3463, %r3461, %r3462;
	ld.shared.v4.u32 	{%r7860, %r7859, %r7855, %r7853}, [%r3463];
	shl.b32 	%r3468, %r46, 3;
	add.s32 	%r3469, %r3461, %r3468;
	ld.shared.v2.u32 	{%r7856, %r7854}, [%r3469+512];
	ld.shared.v4.u32 	{%r7852, %r7851, %r7843, %r7841}, [%r3463+768];
	mov.u32 	%r7842, %r2213;
	mov.u32 	%r7844, %r2213;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7360, %r3469, 512;
	ld.shared.v2.u32 	{%r7844, %r7842}, [%r7360+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2201;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3479, %r1730, %r41;
	mul.lo.s32 	%r3481, %r73, %r42;
	mad.lo.s32 	%r3482, %r3479, 384, %r3481;
	mad.lo.s32 	%r3485, %r2199, %r2201, %r3482;
	mad.lo.s32 	%r3488, %r2197, %r2196, %r3485;
	shl.b32 	%r3489, %r3488, 2;
	mov.u32 	%r3490, _ZN6kernel5shmemE;
	add.s32 	%r3491, %r3490, %r3489;
	shl.b32 	%r3492, %r46, 4;
	add.s32 	%r3493, %r3491, %r3492;
	ld.shared.v4.u32 	{%r7778, %r7777, %r7780, %r7779}, [%r3493];

$L__BB0_416:
	shl.b32 	%r3498, %r42, 8;
	shl.b32 	%r3502, %r1731, 8;
	or.b32  	%r3503, %r3502, 128;
	add.s32 	%r3504, %r41, -1;
	mad.lo.s32 	%r3505, %r3503, %r3504, %r2204;
	add.s32 	%r3506, %r3505, %r3498;
	shl.b32 	%r3507, %r3506, 2;
	mov.u32 	%r3508, _ZN6kernel5shmemE;
	add.s32 	%r3509, %r3508, %r3507;
	setp.ne.s32 	%p281, %r42, %r2201;
	shl.b32 	%r3511, %r46, 4;
	add.s32 	%r925, %r3509, %r3511;
	ld.shared.v4.u32 	{%r7771, %r7769, %r7772, %r7770}, [%r925];
	ld.shared.v4.u32 	{%r7776, %r7775, %r7774, %r7773}, [%r925+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7778, %r7777, %r7780, %r7779}, [%r925+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3525, %r73, %r42;
	sub.s32 	%r3526, %r3525, %r73;
	mad.lo.s32 	%r3529, %r2603, 384, %r3526;
	mad.lo.s32 	%r3532, %r2199, %r2201, %r3529;
	mad.lo.s32 	%r3535, %r2197, %r2196, %r3532;
	shl.b32 	%r3536, %r3535, 2;
	mov.u32 	%r3537, _ZN6kernel5shmemE;
	add.s32 	%r3538, %r3537, %r3536;
	shl.b32 	%r3539, %r46, 4;
	add.s32 	%r954, %r3538, %r3539;
	ld.shared.v4.u32 	{%r7794, %r7793, %r7796, %r7795}, [%r954];
	ld.shared.v4.u32 	{%r7792, %r7790, %r7788, %r7787}, [%r954+512];
	ld.shared.v4.u32 	{%r7791, %r7789, %r7786, %r7784}, [%r954+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7782, %r7781, %r7785, %r7783}, [%r954+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd578, [%rd1+104];
	cvta.to.global.u64 	%rd577, %rd578;
	mad.lo.s32 	%r3557, %r659, %r1733, %r44;
	mul.lo.s32 	%r3558, %r1731, %r3557;
	mul.lo.s32 	%r3559, %r3558, 768;
	mad.lo.s32 	%r3560, %r42, 384, %r3559;
	add.s32 	%r3561, %r3560, -64;
	mul.wide.s32 	%rd299, %r3561, 4;
	add.s64 	%rd300, %rd577, %rd299;
	add.s64 	%rd302, %rd300, %rd301;
	ld.global.v4.u32 	{%r7808, %r7806, %r7800, %r7799}, [%rd302+256];
	ld.global.v4.u32 	{%r7810, %r7809, %r7804, %r7803}, [%rd302+1024];
	add.s64 	%rd30, %rd300, %rd303;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7802, %r7801}, [%rd30];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2201;
	ld.global.v2.u32 	{%r7807, %r7805}, [%rd30+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7812, %r7811}, [%rd30+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd580, [%rd1+104];
	cvta.to.global.u64 	%rd579, %rd580;
	mad.lo.s32 	%r3578, %r660, %r1732, %r43;
	mul.lo.s32 	%r3582, %r3578, %r1811;
	mad.lo.s32 	%r3585, %r2603, 384, %r3582;
	add.s32 	%r3586, %r3585, -64;
	mad.lo.s32 	%r3589, %r1813, %r72, %r3586;
	mul.wide.s32 	%rd304, %r3589, 4;
	add.s64 	%rd305, %rd579, %rd304;
	add.s64 	%rd307, %rd305, %rd301;
	ld.global.v4.u32 	{%r7824, %r7823, %r7821, %r7819}, [%rd307+256];
	ld.global.v4.u32 	{%r7818, %r7817, %r7815, %r7813}, [%rd307+1024];
	add.s64 	%rd309, %rd305, %rd303;
	ld.global.v2.u32 	{%r7822, %r7820}, [%rd309+768];
	ld.global.v2.u32 	{%r7802, %r7801}, [%rd309+1536];

$L__BB0_428:
	add.s32 	%r3602, %r1735, -1;
	setp.ge.s32 	%p288, %r661, %r3602;
	setp.lt.s32 	%p289, %r661, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r662, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3603, %r1736, -2;
	setp.ge.s32 	%p293, %r662, %r3603;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd582, [%rd1+112];
	cvta.to.global.u64 	%rd581, %rd582;
	mad.lo.s32 	%r1049, %r662, %r1735, %r661;
	shl.b32 	%r3604, %r1049, 6;
	mul.wide.s32 	%rd312, %r3604, 4;
	add.s64 	%rd32, %rd581, %rd312;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd314, %rd32, %rd303;
	ld.global.v2.u32 	{%r7844, %r7842}, [%rd314+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3607, %r1735, 5;
	cvt.s64.s32 	%rd315, %r3607;
	cvt.s64.s32 	%rd316, %r46;
	add.s64 	%rd317, %rd315, %rd316;
	shl.b64 	%rd318, %rd317, 3;
	add.s64 	%rd319, %rd32, %rd318;
	ld.global.v2.u32 	{%r7849, %r7847}, [%rd319];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3610, %r1735, 5;
	neg.s32 	%r3611, %r3610;
	cvt.s64.s32 	%rd320, %r3611;
	cvt.s64.s32 	%rd321, %r46;
	add.s64 	%rd322, %rd320, %rd321;
	shl.b64 	%rd323, %rd322, 3;
	add.s64 	%rd324, %rd32, %rd323;
	ld.global.v2.u32 	{%r7856, %r7854}, [%rd324];

$L__BB0_435:
	mad.lo.s32 	%r7371, %r662, %r1735, %r661;
	ld.param.u64 	%rd584, [%rd1+112];
	cvta.to.global.u64 	%rd583, %rd584;
	shl.b32 	%r3614, %r1736, 6;
	shl.b32 	%r3615, %r7371, 7;
	mad.lo.s32 	%r3616, %r3614, %r1735, %r3615;
	mul.wide.s32 	%rd325, %r3616, 4;
	add.s64 	%rd33, %rd583, %rd325;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3617, %r1735, 5;
	cvt.s64.s32 	%rd326, %r3617;
	cvt.s64.s32 	%rd327, %r46;
	add.s64 	%rd328, %rd326, %rd327;
	shl.b64 	%rd329, %rd328, 4;
	add.s64 	%rd330, %rd33, %rd329;
	ld.global.v4.u32 	{%r7850, %r7848, %r7840, %r7839}, [%rd330];
	shl.b32 	%r3622, %r1735, 6;
	add.s32 	%r3623, %r3622, -32;
	cvt.s64.s32 	%rd331, %r3623;
	add.s64 	%rd332, %rd331, %rd327;
	shl.b64 	%rd333, %rd332, 4;
	add.s64 	%rd334, %rd33, %rd333;
	ld.global.v4.u32 	{%r7858, %r7857, %r7846, %r7845}, [%rd334];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3628, %r1735, 5;
	xor.b32  	%r3629, %r3628, -32;
	cvt.s64.s32 	%rd335, %r3629;
	cvt.s64.s32 	%rd336, %r46;
	add.s64 	%rd337, %rd335, %rd336;
	shl.b64 	%rd338, %rd337, 4;
	add.s64 	%rd339, %rd33, %rd338;
	ld.global.v4.u32 	{%r7860, %r7859, %r7855, %r7853}, [%rd339];
	add.s64 	%rd341, %rd33, %rd301;
	ld.global.v4.u32 	{%r7852, %r7851, %r7843, %r7841}, [%rd341];

$L__BB0_439:
	mov.u32 	%r3643, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3639,%r7619,%r438,%r2306,%r3643;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3639;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7619;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3646, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3647,%r7620,%r3646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3650,%r7472,%r3647;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7861,%r7734;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7861,%r7473,%r3647;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3663, 31;
	mov.u32 	%r3686, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3661,%r7861,%r3663,%r2306,%r3686;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3666,%r3650,%r3661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3669,%r7618,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r3669,%r3666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3675,%r7621,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3678,%r7734,%r3675;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3682,%r7614,%r438,%r2306,%r3686;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3682;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7614;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3689, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3690,%r7615,%r3689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3693,%r7472,%r3690;
}
	// end inline asm
	mov.u32 	%r7862, %r7733;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7862,%r7473,%r3690;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3704,%r7862,%r3663,%r2306,%r3686;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3709,%r3693,%r3704;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3712,%r7618,%r7613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3715,%r3709,%r3712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3718,%r7616,%r3715;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3721,%r7733,%r3718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3724,%r7619,%r7620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3727,%r7476,%r3724;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7863,%r7732;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7863,%r7477,%r3724;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3740, 31;
	mov.u32 	%r3742, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3738,%r7863,%r3740,%r2306,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3743,%r3727,%r3738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3746,%r7611,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3749,%r3746,%r3743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3752,%r7612,%r3749;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3755,%r7732,%r3752;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3758,%r7614,%r7615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3761,%r7476,%r3758;
}
	// end inline asm
	mov.u32 	%r7864, %r7731;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7864,%r7477,%r3758;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3770,%r7864,%r3740,%r2306,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3775,%r3761,%r3770;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3778,%r7611,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3781,%r3775,%r3778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3784,%r7609,%r3781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3787,%r7731,%r3784;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3791,%r7605,%r438,%r2306,%r3742;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3791;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7605;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3798, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3799,%r7606,%r3798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3802,%r7472,%r3799;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7865,%r7730;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7865,%r7473,%r3799;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3817, 31;
	mov.u32 	%r3819, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3815,%r7865,%r3817,%r2306,%r3819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3820,%r3802,%r3815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3823,%r7604,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3826,%r3823,%r3820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3829,%r7607,%r3826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3832,%r7730,%r3829;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r7605,%r7606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r7476,%r3835;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7866,%r7729;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7866,%r7477,%r3835;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3851, 31;
	mov.u32 	%r3874, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3849,%r7866,%r3851,%r2306,%r3874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3854,%r3838,%r3849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3857,%r7602,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3860,%r3857,%r3854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3863,%r7603,%r3860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3866,%r7729,%r3863;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3870,%r7600,%r438,%r2306,%r3874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3870;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7600;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3877, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3878,%r7601,%r3877;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3881,%r7472,%r3878;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7867,%r7728;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7867,%r7473,%r3878;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3896, 31;
	mov.u32 	%r3919, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3894,%r7867,%r3896,%r2306,%r3919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3899,%r3881,%r3894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3902,%r7599,%r7796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3905,%r3902,%r3899;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3908,%r7860,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3911,%r7728,%r3908;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3915,%r7595,%r438,%r2306,%r3919;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3915;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7595;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3922, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3923,%r7596,%r3922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3926,%r7472,%r3923;
}
	// end inline asm
	mov.u32 	%r7868, %r7727;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7868,%r7473,%r3923;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3937,%r7868,%r3896,%r2306,%r3919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3942,%r3926,%r3937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3945,%r7599,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3948,%r3942,%r3945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3951,%r7597,%r3948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3954,%r7727,%r3951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3957,%r7600,%r7601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3960,%r7476,%r3957;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7869,%r7726;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7869,%r7477,%r3957;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r3973, 31;
	mov.u32 	%r3975, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3971,%r7869,%r3973,%r2306,%r3975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3976,%r3960,%r3971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3979,%r7594,%r7795;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r3979,%r3976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3985,%r7859,%r3982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3988,%r7726,%r3985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3991,%r7595,%r7596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3994,%r7476,%r3991;
}
	// end inline asm
	mov.u32 	%r7870, %r7725;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7870,%r7477,%r3991;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4003,%r7870,%r3973,%r2306,%r3975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4008,%r3994,%r4003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4011,%r7594,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4014,%r4008,%r4011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4017,%r7592,%r4014;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4020,%r7725,%r4017;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4024,%r7589,%r438,%r2306,%r3975;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4024;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7589;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4031, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r7590,%r4031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4035,%r7472,%r4032;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7871,%r7724;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7871,%r7473,%r4032;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4050, 31;
	mov.u32 	%r4073, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4048,%r7871,%r4050,%r2306,%r4073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4053,%r4035,%r4048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4056,%r7588,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r4056,%r4053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4062,%r551,%r4059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7724,%r4062;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4069,%r7585,%r438,%r2306,%r4073;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4069;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7585;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4076, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r7586,%r4076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4080,%r7472,%r4077;
}
	// end inline asm
	mov.u32 	%r7872, %r7723;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7872,%r7473,%r4077;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4091,%r7872,%r4050,%r2306,%r4073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4096,%r4080,%r4091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4099,%r7588,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4102,%r4096,%r4099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4105,%r547,%r4102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7723,%r4105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4111,%r7590,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4114,%r7586,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r4111,%r4114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4120,%r7584,%r4117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4123,%r7722,%r4120;
}
	// end inline asm
	selp.b32 	%r1175, %r7722, %r4123, %p28;
	// begin inline asm
	{sub.f16x2 %r4126,%r7589,%r7590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4129,%r7476,%r4126;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7873,%r7721;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7873,%r7477,%r4126;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4142, 31;
	mov.u32 	%r4144, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4140,%r7873,%r4142,%r2306,%r4144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4145,%r4129,%r4140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r7582,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4151,%r4148,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4154,%r543,%r4151;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r7721,%r4154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4160,%r7585,%r7586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4163,%r7476,%r4160;
}
	// end inline asm
	mov.u32 	%r7874, %r7720;
	@%p28 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7874,%r7477,%r4160;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4172,%r7874,%r4142,%r2306,%r4144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4177,%r4163,%r4172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4180,%r7582,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4183,%r4177,%r4180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4186,%r541,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7720,%r4186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4192,%r7589,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4195,%r7585,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4198,%r4192,%r4195;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4201,%r7580,%r4198;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4204,%r7719,%r4201;
}
	// end inline asm
	selp.b32 	%r1187, %r7719, %r4204, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4208,%r7577,%r438,%r2306,%r4144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4208;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7577;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4215, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r7578,%r4215;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4219,%r7472,%r4216;
}
	// end inline asm
	@%p28 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7875,%r7718;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7875,%r7473,%r4216;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4234, 31;
	mov.u32 	%r4257, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4232,%r7875,%r4234,%r2306,%r4257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r4219,%r4232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4240,%r7576,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4243,%r4240,%r4237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4246,%r539,%r4243;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7718,%r4246;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4253,%r7573,%r438,%r2306,%r4257;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4253;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7573;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4260, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4261,%r7574,%r4260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4264,%r7472,%r4261;
}
	// end inline asm
	mov.u32 	%r7876, %r7717;
	@%p28 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7876,%r7473,%r4261;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4275,%r7876,%r4234,%r2306,%r4257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4280,%r4264,%r4275;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4283,%r7576,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4286,%r4280,%r4283;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4289,%r7575,%r4286;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4292,%r7717,%r4289;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4295,%r7578,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4298,%r7574,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4301,%r4295,%r4298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4304,%r7572,%r4301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4307,%r7716,%r4304;
}
	// end inline asm
	selp.b32 	%r1199, %r7716, %r4307, %p28;
	// begin inline asm
	{sub.f16x2 %r4310,%r7577,%r7578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4313,%r7476,%r4310;
}
	// end inline asm
	@%p28 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7877,%r7715;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7877,%r7477,%r4310;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4326, 31;
	mov.u32 	%r4328, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4324,%r7877,%r4326,%r2306,%r4328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4329,%r4313,%r4324;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r7570,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4335,%r4332,%r4329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4338,%r531,%r4335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7715,%r4338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4344,%r7573,%r7574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4347,%r7476,%r4344;
}
	// end inline asm
	mov.u32 	%r7878, %r7714;
	@%p28 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7878,%r7477,%r4344;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4356,%r7878,%r4326,%r2306,%r4328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4361,%r4347,%r4356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4364,%r7570,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4367,%r4361,%r4364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4370,%r7569,%r4367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4373,%r7714,%r4370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4376,%r7577,%r7605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4379,%r7573,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4382,%r4376,%r4379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4385,%r7568,%r4382;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4388,%r7713,%r4385;
}
	// end inline asm
	selp.b32 	%r1211, %r7713, %r4388, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4392,%r7566,%r438,%r2306,%r4328;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4392;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7566;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4399, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4400,%r7567,%r4399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4403,%r7472,%r4400;
}
	// end inline asm
	@%p28 bra 	$L__BB0_487;
	bra.uni 	$L__BB0_486;

$L__BB0_487:
	// begin inline asm
	{neg.f16x2 %r7879,%r7712;
}
	// end inline asm
	bra.uni 	$L__BB0_488;

$L__BB0_486:
	// begin inline asm
	{mul.f16x2 %r7879,%r7473,%r4400;
}
	// end inline asm

$L__BB0_488:
	mov.u32 	%r4418, 31;
	mov.u32 	%r4420, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4416,%r7879,%r4418,%r2306,%r4420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4421,%r4403,%r4416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4424,%r7780,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4427,%r4424,%r4421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4430,%r7858,%r4427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4433,%r7712,%r4430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4436,%r7566,%r7567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4439,%r7476,%r4436;
}
	// end inline asm
	@%p28 bra 	$L__BB0_490;
	bra.uni 	$L__BB0_489;

$L__BB0_490:
	// begin inline asm
	{neg.f16x2 %r7880,%r7711;
}
	// end inline asm
	bra.uni 	$L__BB0_491;

$L__BB0_489:
	// begin inline asm
	{mul.f16x2 %r7880,%r7477,%r4436;
}
	// end inline asm

$L__BB0_491:
	mov.u32 	%r4452, 31;
	mov.u32 	%r4475, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4450,%r7880,%r4452,%r2306,%r4475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4455,%r4439,%r4450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4458,%r7779,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4461,%r4458,%r4455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4464,%r7857,%r4461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4467,%r7711,%r4464;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4471,%r7562,%r438,%r2306,%r4475;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4471;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7562;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4478, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4479,%r7563,%r4478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4482,%r7472,%r4479;
}
	// end inline asm
	mov.u32 	%r7881, %r7710;
	@%p28 bra 	$L__BB0_493;

	// begin inline asm
	{mul.f16x2 %r7881,%r7473,%r4479;
}
	// end inline asm

$L__BB0_493:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4493,%r7881,%r4452,%r2306,%r4475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4498,%r4482,%r4493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4501,%r7791,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4504,%r4498,%r4501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4507,%r7856,%r4504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7710,%r4507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4513,%r7792,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r7563,%r7794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4519,%r4513,%r4516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4522,%r7855,%r4519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4525,%r7709,%r4522;
}
	// end inline asm
	selp.b32 	%r1229, %r7709, %r4525, %p28;
	// begin inline asm
	{sub.f16x2 %r4528,%r7562,%r7563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4531,%r7476,%r4528;
}
	// end inline asm
	mov.u32 	%r7882, %r7708;
	@%p28 bra 	$L__BB0_495;

	// begin inline asm
	{mul.f16x2 %r7882,%r7477,%r4528;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4542, 31;
	mov.u32 	%r4580, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4540,%r7882,%r4542,%r2306,%r4580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4545,%r4531,%r4540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4548,%r7789,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4551,%r4545,%r4548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4554,%r7854,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7708,%r4554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4560,%r7790,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4563,%r7562,%r7793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4566,%r4560,%r4563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4569,%r7853,%r4566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4572,%r7707,%r4569;
}
	// end inline asm
	selp.b32 	%r1235, %r7707, %r4572, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4576,%r7558,%r438,%r2306,%r4580;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4576;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7558;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4583, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r7559,%r4583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4587,%r7472,%r4584;
}
	// end inline asm
	@%p28 bra 	$L__BB0_497;
	bra.uni 	$L__BB0_496;

$L__BB0_497:
	// begin inline asm
	{neg.f16x2 %r7883,%r7706;
}
	// end inline asm
	bra.uni 	$L__BB0_498;

$L__BB0_496:
	// begin inline asm
	{mul.f16x2 %r7883,%r7473,%r4584;
}
	// end inline asm

$L__BB0_498:
	mov.u32 	%r4602, 31;
	mov.u32 	%r4625, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4600,%r7883,%r4602,%r2306,%r4625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4605,%r4587,%r4600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4608,%r7557,%r7791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4611,%r4608,%r4605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4614,%r7852,%r4611;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7706,%r4614;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4621,%r7554,%r438,%r2306,%r4625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4621;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7554;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4628, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r7555,%r4628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4632,%r7472,%r4629;
}
	// end inline asm
	mov.u32 	%r7884, %r7705;
	@%p28 bra 	$L__BB0_500;

	// begin inline asm
	{mul.f16x2 %r7884,%r7473,%r4629;
}
	// end inline asm

$L__BB0_500:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4643,%r7884,%r4602,%r2306,%r4625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4648,%r4632,%r4643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4651,%r7557,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4654,%r4648,%r4651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4657,%r7587,%r4654;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7705,%r4657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4663,%r7559,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4666,%r7555,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4669,%r4663,%r4666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4672,%r513,%r4669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4675,%r7704,%r4672;
}
	// end inline asm
	selp.b32 	%r7635, %r7704, %r4675, %p28;
	// begin inline asm
	{sub.f16x2 %r4678,%r7558,%r7559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4681,%r7476,%r4678;
}
	// end inline asm
	@%p28 bra 	$L__BB0_502;
	bra.uni 	$L__BB0_501;

$L__BB0_502:
	// begin inline asm
	{neg.f16x2 %r7885,%r7703;
}
	// end inline asm
	bra.uni 	$L__BB0_503;

$L__BB0_501:
	// begin inline asm
	{mul.f16x2 %r7885,%r7477,%r4678;
}
	// end inline asm

$L__BB0_503:
	mov.u32 	%r4694, 31;
	mov.u32 	%r4696, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4692,%r7885,%r4694,%r2306,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4697,%r4681,%r4692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4700,%r7552,%r7789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4703,%r4700,%r4697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4706,%r7851,%r4703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7703,%r4706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4712,%r7554,%r7555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4715,%r7476,%r4712;
}
	// end inline asm
	mov.u32 	%r7886, %r7702;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7886,%r7477,%r4712;
}
	// end inline asm

$L__BB0_505:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4724,%r7886,%r4694,%r2306,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4729,%r4715,%r4724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4732,%r7552,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4735,%r4729,%r4732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4738,%r7581,%r4735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7702,%r4738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4744,%r7558,%r7589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4747,%r7554,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4750,%r4744,%r4747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4753,%r510,%r4750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4756,%r7701,%r4753;
}
	// end inline asm
	selp.b32 	%r7634, %r7701, %r4756, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4760,%r7548,%r438,%r2306,%r4696;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4760;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7548;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4767, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r7549,%r4767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4771,%r7472,%r4768;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;
	bra.uni 	$L__BB0_506;

$L__BB0_507:
	// begin inline asm
	{neg.f16x2 %r7887,%r7700;
}
	// end inline asm
	bra.uni 	$L__BB0_508;

$L__BB0_506:
	// begin inline asm
	{mul.f16x2 %r7887,%r7473,%r4768;
}
	// end inline asm

$L__BB0_508:
	mov.u32 	%r4786, 31;
	mov.u32 	%r4809, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4784,%r7887,%r4786,%r2306,%r4809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4789,%r4771,%r4784;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4792,%r7776,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4795,%r4792,%r4789;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4798,%r7850,%r4795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7700,%r4798;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4805,%r7546,%r438,%r2306,%r4809;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4805;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7546;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4812, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4813,%r7547,%r4812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4816,%r7472,%r4813;
}
	// end inline asm
	mov.u32 	%r7888, %r7699;
	@%p28 bra 	$L__BB0_510;

	// begin inline asm
	{mul.f16x2 %r7888,%r7473,%r4813;
}
	// end inline asm

$L__BB0_510:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4827,%r7888,%r4786,%r2306,%r4809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4832,%r4816,%r4827;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4835,%r7776,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4838,%r4832,%r4835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4841,%r7849,%r4838;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7699,%r4841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4847,%r7549,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4850,%r7547,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4853,%r4847,%r4850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4856,%r505,%r4853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4859,%r7698,%r4856;
}
	// end inline asm
	selp.b32 	%r7629, %r7698, %r4859, %p28;
	// begin inline asm
	{sub.f16x2 %r4862,%r7548,%r7549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4865,%r7476,%r4862;
}
	// end inline asm
	@%p28 bra 	$L__BB0_512;
	bra.uni 	$L__BB0_511;

$L__BB0_512:
	// begin inline asm
	{neg.f16x2 %r7889,%r7697;
}
	// end inline asm
	bra.uni 	$L__BB0_513;

$L__BB0_511:
	// begin inline asm
	{mul.f16x2 %r7889,%r7477,%r4862;
}
	// end inline asm

$L__BB0_513:
	mov.u32 	%r4878, 31;
	mov.u32 	%r4880, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4876,%r7889,%r4878,%r2306,%r4880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4881,%r4865,%r4876;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4884,%r7775,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4887,%r4884,%r4881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4890,%r7848,%r4887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7697,%r4890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4896,%r7546,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4899,%r7476,%r4896;
}
	// end inline asm
	mov.u32 	%r7890, %r7696;
	@%p28 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7890,%r7477,%r4896;
}
	// end inline asm

$L__BB0_515:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4908,%r7890,%r4878,%r2306,%r4880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4913,%r4899,%r4908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4916,%r7775,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4919,%r4913,%r4916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4922,%r7847,%r4919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7696,%r4922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4928,%r7548,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4931,%r7546,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4934,%r4928,%r4931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4937,%r504,%r4934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4940,%r7695,%r4937;
}
	// end inline asm
	selp.b32 	%r7628, %r7695, %r4940, %p28;
	// begin inline asm
	{sub.f16x2 %r4943,%r7774,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4946,%r7778,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4949,%r4943,%r4946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4952,%r7846,%r4949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4955,%r7694,%r4952;
}
	// end inline asm
	selp.b32 	%r1284, %r7694, %r4955, %p28;
	// begin inline asm
	{sub.f16x2 %r4958,%r7773,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4961,%r7777,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4964,%r4958,%r4961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4967,%r7845,%r4964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4970,%r7693,%r4967;
}
	// end inline asm
	selp.b32 	%r1285, %r7693, %r4970, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4974,%r7540,%r438,%r2306,%r4880;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4974;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7540;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4981, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4982,%r7541,%r4981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4985,%r7472,%r4982;
}
	// end inline asm
	mov.u32 	%r7891, %r7692;
	@%p28 bra 	$L__BB0_517;

	// begin inline asm
	{mul.f16x2 %r7891,%r7473,%r4982;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4998, 31;
	mov.u32 	%r5000, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4996,%r7891,%r4998,%r2306,%r5000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5001,%r4985,%r4996;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5004,%r7785,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5007,%r5001,%r5004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5010,%r7844,%r5007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r7692,%r5010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5016,%r7786,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5019,%r7541,%r7788;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5022,%r5016,%r5019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5025,%r7843,%r5022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5028,%r7691,%r5025;
}
	// end inline asm
	selp.b32 	%r7625, %r7691, %r5028, %p28;
	// begin inline asm
	{sub.f16x2 %r5031,%r7540,%r7541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5034,%r7476,%r5031;
}
	// end inline asm
	mov.u32 	%r7892, %r7690;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7892,%r7477,%r5031;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5043,%r7892,%r4998,%r2306,%r5000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5048,%r5034,%r5043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5051,%r7783,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5054,%r5048,%r5051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5057,%r7842,%r5054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7626,%r7690,%r5057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5063,%r7784,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5066,%r7540,%r7787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5069,%r5063,%r5066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5072,%r7841,%r5069;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5075,%r7689,%r5072;
}
	// end inline asm
	selp.b32 	%r7624, %r7689, %r5075, %p28;
	// begin inline asm
	{sub.f16x2 %r5078,%r7771,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5081,%r7772,%r7541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5084,%r5078,%r5081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5087,%r7840,%r5084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5090,%r7688,%r5087;
}
	// end inline asm
	selp.b32 	%r7623, %r7688, %r5090, %p28;
	// begin inline asm
	{sub.f16x2 %r5093,%r7769,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5096,%r7770,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5099,%r5093,%r5096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5102,%r7839,%r5099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5105,%r7687,%r5102;
}
	// end inline asm
	selp.b32 	%r7622, %r7687, %r5105, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd342, [%rd1+184];
	cvta.to.global.u64 	%rd35, %rd342;
	add.s32 	%r5110, %r1744, -2;
	setp.lt.s32 	%p335, %r661, %r5110;
	add.s32 	%r5111, %r1745, 3;
	setp.ge.s32 	%p336, %r661, %r5111;
	or.pred  	%p337, %p335, %p336;
	add.s32 	%r5112, %r1746, -2;
	setp.lt.s32 	%p338, %r662, %r5112;
	or.pred  	%p339, %p337, %p338;
	add.s32 	%r5113, %r1747, 2;
	setp.ge.s32 	%p340, %r662, %r5113;
	or.pred  	%p341, %p340, %p339;
	setp.lt.s32 	%p342, %r663, %r1741;
	or.pred  	%p343, %p342, %p341;
	mad.lo.s32 	%r5114, %r1743, %r1742, %r1741;
	setp.ge.s32 	%p344, %r663, %r5114;
	or.pred  	%p345, %p343, %p344;
	@%p345 bra 	$L__BB0_761;

	sub.s32 	%r1300, %r663, %r1741;
	rem.s32 	%r5115, %r1300, %r1742;
	setp.ne.s32 	%p346, %r5115, 0;
	@%p346 bra 	$L__BB0_761;

	div.s32 	%r5116, %r1300, %r1742;
	mov.u32 	%r5117, 8;
	sub.s32 	%r5118, %r5117, %r1744;
	add.s32 	%r5119, %r5118, %r1745;
	mul.lo.s32 	%r5120, %r5116, %r5119;
	mov.u32 	%r5121, 4;
	sub.s32 	%r5122, %r5121, %r1744;
	add.s32 	%r1301, %r5122, %r661;
	sub.s32 	%r5123, %r5121, %r1746;
	add.s32 	%r1302, %r5123, %r662;
	mul.lo.s32 	%r1303, %r5120, 3;
	add.s32 	%r5124, %r1301, %r1303;
	add.s32 	%r5125, %r5124, -2;
	sub.s32 	%r5126, %r5117, %r1746;
	add.s32 	%r5127, %r5126, %r1747;
	mul.lo.s32 	%r1304, %r5125, %r5127;
	add.s32 	%r5128, %r1302, %r1304;
	mul.lo.s32 	%r5129, %r5128, %r59;
	sub.s32 	%r1305, %r5129, %r1748;
	@%p28 bra 	$L__BB0_526;

	not.pred 	%p348, %p24;
	@%p348 bra 	$L__BB0_524;

	add.s32 	%r5130, %r1305, %r404;
	mul.wide.s32 	%rd343, %r5130, 4;
	add.s64 	%rd344, %rd35, %rd343;
	mov.u32 	%r5131, 1109917696;
	st.global.u32 	[%rd344], %r5131;

$L__BB0_524:
	not.pred 	%p349, %p26;
	@%p349 bra 	$L__BB0_526;

	add.s32 	%r5132, %r1305, %r405;
	mul.wide.s32 	%rd345, %r5132, 4;
	add.s64 	%rd346, %rd35, %rd345;
	mov.u32 	%r5133, 1109917696;
	st.global.u32 	[%rd346], %r5133;

$L__BB0_526:
	@%p28 bra 	$L__BB0_531;

	not.pred 	%p351, %p25;
	@%p351 bra 	$L__BB0_529;

	add.s32 	%r5134, %r1305, %r418;
	mul.wide.s32 	%rd347, %r5134, 4;
	add.s64 	%rd348, %rd35, %rd347;
	mov.u32 	%r5135, 1109917696;
	st.global.u32 	[%rd348], %r5135;

$L__BB0_529:
	not.pred 	%p352, %p27;
	@%p352 bra 	$L__BB0_531;

	add.s32 	%r5136, %r1305, %r419;
	mul.wide.s32 	%rd349, %r5136, 4;
	add.s64 	%rd350, %rd35, %rd349;
	mov.u32 	%r5137, 1109917696;
	st.global.u32 	[%rd350], %r5137;

$L__BB0_531:
	mov.u32 	%r5138, 8;
	sub.s32 	%r5139, %r5138, %r1744;
	add.s32 	%r5140, %r5139, %r1745;
	add.s32 	%r1306, %r1303, %r5140;
	add.s32 	%r5141, %r1301, %r1306;
	add.s32 	%r5142, %r5141, -2;
	sub.s32 	%r5143, %r5138, %r1746;
	add.s32 	%r5144, %r5143, %r1747;
	mad.lo.s32 	%r5145, %r5142, %r5144, %r1302;
	mul.lo.s32 	%r5146, %r5145, %r59;
	sub.s32 	%r1307, %r5146, %r1748;
	@%p28 bra 	$L__BB0_536;

	not.pred 	%p354, %p24;
	@%p354 bra 	$L__BB0_534;

	add.s32 	%r5147, %r1307, %r404;
	mul.wide.s32 	%rd351, %r5147, 4;
	add.s64 	%rd352, %rd35, %rd351;
	mov.u32 	%r5148, 1109917696;
	st.global.u32 	[%rd352], %r5148;

$L__BB0_534:
	not.pred 	%p355, %p26;
	@%p355 bra 	$L__BB0_536;

	add.s32 	%r5149, %r1307, %r405;
	mul.wide.s32 	%rd353, %r5149, 4;
	add.s64 	%rd354, %rd35, %rd353;
	mov.u32 	%r5150, 1109917696;
	st.global.u32 	[%rd354], %r5150;

$L__BB0_536:
	@%p28 bra 	$L__BB0_541;

	not.pred 	%p357, %p25;
	@%p357 bra 	$L__BB0_539;

	add.s32 	%r5151, %r1307, %r418;
	mul.wide.s32 	%rd355, %r5151, 4;
	add.s64 	%rd356, %rd35, %rd355;
	mov.u32 	%r5152, 1109917696;
	st.global.u32 	[%rd356], %r5152;

$L__BB0_539:
	not.pred 	%p358, %p27;
	@%p358 bra 	$L__BB0_541;

	add.s32 	%r5153, %r1307, %r419;
	mul.wide.s32 	%rd357, %r5153, 4;
	add.s64 	%rd358, %rd35, %rd357;
	mov.u32 	%r5154, 1109917696;
	st.global.u32 	[%rd358], %r5154;

$L__BB0_541:
	add.s32 	%r1308, %r1302, 1;
	add.s32 	%r5155, %r1308, %r1304;
	mul.lo.s32 	%r5156, %r5155, %r59;
	sub.s32 	%r1309, %r5156, %r1748;
	@%p28 bra 	$L__BB0_546;

	not.pred 	%p360, %p24;
	@%p360 bra 	$L__BB0_544;

	add.s32 	%r5157, %r1309, %r404;
	mul.wide.s32 	%rd359, %r5157, 4;
	add.s64 	%rd360, %rd35, %rd359;
	mov.u32 	%r5158, 1109917696;
	st.global.u32 	[%rd360], %r5158;

$L__BB0_544:
	not.pred 	%p361, %p26;
	@%p361 bra 	$L__BB0_546;

	add.s32 	%r5159, %r1309, %r405;
	mul.wide.s32 	%rd361, %r5159, 4;
	add.s64 	%rd362, %rd35, %rd361;
	mov.u32 	%r5160, 1109917696;
	st.global.u32 	[%rd362], %r5160;

$L__BB0_546:
	@%p28 bra 	$L__BB0_551;

	not.pred 	%p363, %p25;
	@%p363 bra 	$L__BB0_549;

	add.s32 	%r5161, %r1309, %r418;
	mul.wide.s32 	%rd363, %r5161, 4;
	add.s64 	%rd364, %rd35, %rd363;
	mov.u32 	%r5162, 1109917696;
	st.global.u32 	[%rd364], %r5162;

$L__BB0_549:
	not.pred 	%p364, %p27;
	@%p364 bra 	$L__BB0_551;

	add.s32 	%r5163, %r1309, %r419;
	mul.wide.s32 	%rd365, %r5163, 4;
	add.s64 	%rd366, %rd35, %rd365;
	mov.u32 	%r5164, 1109917696;
	st.global.u32 	[%rd366], %r5164;

$L__BB0_551:
	add.s32 	%r1310, %r1301, -1;
	add.s32 	%r5165, %r1310, %r1303;
	mov.u32 	%r5166, 8;
	sub.s32 	%r5167, %r5166, %r1746;
	add.s32 	%r5168, %r5167, %r1747;
	mul.lo.s32 	%r1311, %r5165, %r5168;
	add.s32 	%r1312, %r1302, -1;
	add.s32 	%r5169, %r1312, %r1311;
	mul.lo.s32 	%r5170, %r5169, %r59;
	sub.s32 	%r1313, %r5170, %r1748;
	@%p28 bra 	$L__BB0_556;

	not.pred 	%p366, %p24;
	@%p366 bra 	$L__BB0_554;

	add.s32 	%r5171, %r1313, %r404;
	mul.wide.s32 	%rd367, %r5171, 4;
	add.s64 	%rd368, %rd35, %rd367;
	mov.u32 	%r5172, 1109917696;
	st.global.u32 	[%rd368], %r5172;

$L__BB0_554:
	not.pred 	%p367, %p26;
	@%p367 bra 	$L__BB0_556;

	add.s32 	%r5173, %r1313, %r405;
	mul.wide.s32 	%rd369, %r5173, 4;
	add.s64 	%rd370, %rd35, %rd369;
	mov.u32 	%r5174, 1109917696;
	st.global.u32 	[%rd370], %r5174;

$L__BB0_556:
	@%p28 bra 	$L__BB0_561;

	not.pred 	%p369, %p25;
	@%p369 bra 	$L__BB0_559;

	add.s32 	%r5175, %r1313, %r418;
	mul.wide.s32 	%rd371, %r5175, 4;
	add.s64 	%rd372, %rd35, %rd371;
	mov.u32 	%r5176, 1109917696;
	st.global.u32 	[%rd372], %r5176;

$L__BB0_559:
	not.pred 	%p370, %p27;
	@%p370 bra 	$L__BB0_561;

	add.s32 	%r5177, %r1313, %r419;
	mul.wide.s32 	%rd373, %r5177, 4;
	add.s64 	%rd374, %rd35, %rd373;
	mov.u32 	%r5178, 1109917696;
	st.global.u32 	[%rd374], %r5178;

$L__BB0_561:
	mov.u32 	%r5179, 8;
	sub.s32 	%r5180, %r5179, %r1746;
	add.s32 	%r5181, %r5180, %r1747;
	add.s32 	%r5182, %r1310, %r1306;
	mul.lo.s32 	%r1314, %r5182, %r5181;
	add.s32 	%r5183, %r1312, %r1314;
	mul.lo.s32 	%r5184, %r5183, %r59;
	sub.s32 	%r1315, %r5184, %r1748;
	@%p28 bra 	$L__BB0_566;

	not.pred 	%p372, %p24;
	@%p372 bra 	$L__BB0_564;

	add.s32 	%r5185, %r1315, %r404;
	mul.wide.s32 	%rd375, %r5185, 4;
	add.s64 	%rd376, %rd35, %rd375;
	mov.u32 	%r5186, 1109917696;
	st.global.u32 	[%rd376], %r5186;

$L__BB0_564:
	not.pred 	%p373, %p26;
	@%p373 bra 	$L__BB0_566;

	add.s32 	%r5187, %r1315, %r405;
	mul.wide.s32 	%rd377, %r5187, 4;
	add.s64 	%rd378, %rd35, %rd377;
	mov.u32 	%r5188, 1109917696;
	st.global.u32 	[%rd378], %r5188;

$L__BB0_566:
	@%p28 bra 	$L__BB0_571;

	not.pred 	%p375, %p25;
	@%p375 bra 	$L__BB0_569;

	add.s32 	%r5189, %r1315, %r418;
	mul.wide.s32 	%rd379, %r5189, 4;
	add.s64 	%rd380, %rd35, %rd379;
	mov.u32 	%r5190, 1109917696;
	st.global.u32 	[%rd380], %r5190;

$L__BB0_569:
	not.pred 	%p376, %p27;
	@%p376 bra 	$L__BB0_571;

	add.s32 	%r5191, %r1315, %r419;
	mul.wide.s32 	%rd381, %r5191, 4;
	add.s64 	%rd382, %rd35, %rd381;
	mov.u32 	%r5192, 1109917696;
	st.global.u32 	[%rd382], %r5192;

$L__BB0_571:
	add.s32 	%r5193, %r1302, %r1311;
	mul.lo.s32 	%r5194, %r5193, %r59;
	sub.s32 	%r1316, %r5194, %r1748;
	@%p28 bra 	$L__BB0_576;

	not.pred 	%p378, %p24;
	@%p378 bra 	$L__BB0_574;

	add.s32 	%r5195, %r1316, %r404;
	mul.wide.s32 	%rd383, %r5195, 4;
	add.s64 	%rd384, %rd35, %rd383;
	mov.u32 	%r5196, 1109917696;
	st.global.u32 	[%rd384], %r5196;

$L__BB0_574:
	not.pred 	%p379, %p26;
	@%p379 bra 	$L__BB0_576;

	add.s32 	%r5197, %r1316, %r405;
	mul.wide.s32 	%rd385, %r5197, 4;
	add.s64 	%rd386, %rd35, %rd385;
	mov.u32 	%r5198, 1109917696;
	st.global.u32 	[%rd386], %r5198;

$L__BB0_576:
	@%p28 bra 	$L__BB0_581;

	not.pred 	%p381, %p25;
	@%p381 bra 	$L__BB0_579;

	add.s32 	%r5199, %r1316, %r418;
	mul.wide.s32 	%rd387, %r5199, 4;
	add.s64 	%rd388, %rd35, %rd387;
	mov.u32 	%r5200, 1109917696;
	st.global.u32 	[%rd388], %r5200;

$L__BB0_579:
	not.pred 	%p382, %p27;
	@%p382 bra 	$L__BB0_581;

	add.s32 	%r5201, %r1316, %r419;
	mul.wide.s32 	%rd389, %r5201, 4;
	add.s64 	%rd390, %rd35, %rd389;
	mov.u32 	%r5202, 1109917696;
	st.global.u32 	[%rd390], %r5202;

$L__BB0_581:
	add.s32 	%r5203, %r1302, %r1314;
	mul.lo.s32 	%r5204, %r5203, %r59;
	sub.s32 	%r1317, %r5204, %r1748;
	@%p28 bra 	$L__BB0_586;

	not.pred 	%p384, %p24;
	@%p384 bra 	$L__BB0_584;

	add.s32 	%r5205, %r1317, %r404;
	mul.wide.s32 	%rd391, %r5205, 4;
	add.s64 	%rd392, %rd35, %rd391;
	mov.u32 	%r5206, 1109917696;
	st.global.u32 	[%rd392], %r5206;

$L__BB0_584:
	not.pred 	%p385, %p26;
	@%p385 bra 	$L__BB0_586;

	add.s32 	%r5207, %r1317, %r405;
	mul.wide.s32 	%rd393, %r5207, 4;
	add.s64 	%rd394, %rd35, %rd393;
	mov.u32 	%r5208, 1109917696;
	st.global.u32 	[%rd394], %r5208;

$L__BB0_586:
	@%p28 bra 	$L__BB0_591;

	not.pred 	%p387, %p25;
	@%p387 bra 	$L__BB0_589;

	add.s32 	%r5209, %r1317, %r418;
	mul.wide.s32 	%rd395, %r5209, 4;
	add.s64 	%rd396, %rd35, %rd395;
	mov.u32 	%r5210, 1109917696;
	st.global.u32 	[%rd396], %r5210;

$L__BB0_589:
	not.pred 	%p388, %p27;
	@%p388 bra 	$L__BB0_591;

	add.s32 	%r5211, %r1317, %r419;
	mul.wide.s32 	%rd397, %r5211, 4;
	add.s64 	%rd398, %rd35, %rd397;
	mov.u32 	%r5212, 1109917696;
	st.global.u32 	[%rd398], %r5212;

$L__BB0_591:
	mov.u32 	%r5213, 8;
	sub.s32 	%r5214, %r5213, %r1744;
	add.s32 	%r5215, %r5214, %r1745;
	add.s32 	%r1318, %r1306, %r5215;
	add.s32 	%r5216, %r1310, %r1318;
	sub.s32 	%r5217, %r5213, %r1746;
	add.s32 	%r5218, %r5217, %r1747;
	mul.lo.s32 	%r1319, %r5216, %r5218;
	add.s32 	%r5219, %r1302, %r1319;
	mul.lo.s32 	%r5220, %r5219, %r59;
	sub.s32 	%r1320, %r5220, %r1748;
	@%p28 bra 	$L__BB0_596;

	not.pred 	%p390, %p24;
	@%p390 bra 	$L__BB0_594;

	add.s32 	%r5221, %r1320, %r404;
	mul.wide.s32 	%rd399, %r5221, 4;
	add.s64 	%rd400, %rd35, %rd399;
	mov.u32 	%r5222, 1109917696;
	st.global.u32 	[%rd400], %r5222;

$L__BB0_594:
	not.pred 	%p391, %p26;
	@%p391 bra 	$L__BB0_596;

	add.s32 	%r5223, %r1320, %r405;
	mul.wide.s32 	%rd401, %r5223, 4;
	add.s64 	%rd402, %rd35, %rd401;
	mov.u32 	%r5224, 1109917696;
	st.global.u32 	[%rd402], %r5224;

$L__BB0_596:
	@%p28 bra 	$L__BB0_601;

	not.pred 	%p393, %p25;
	@%p393 bra 	$L__BB0_599;

	add.s32 	%r5225, %r1320, %r418;
	mul.wide.s32 	%rd403, %r5225, 4;
	add.s64 	%rd404, %rd35, %rd403;
	mov.u32 	%r5226, 1109917696;
	st.global.u32 	[%rd404], %r5226;

$L__BB0_599:
	not.pred 	%p394, %p27;
	@%p394 bra 	$L__BB0_601;

	add.s32 	%r5227, %r1320, %r419;
	mul.wide.s32 	%rd405, %r5227, 4;
	add.s64 	%rd406, %rd35, %rd405;
	mov.u32 	%r5228, 1109917696;
	st.global.u32 	[%rd406], %r5228;

$L__BB0_601:
	add.s32 	%r7372, %r1302, 1;
	add.s32 	%r5229, %r7372, %r1311;
	mul.lo.s32 	%r5230, %r5229, %r59;
	sub.s32 	%r1321, %r5230, %r1748;
	@%p28 bra 	$L__BB0_606;

	not.pred 	%p396, %p24;
	@%p396 bra 	$L__BB0_604;

	add.s32 	%r5231, %r1321, %r404;
	mul.wide.s32 	%rd407, %r5231, 4;
	add.s64 	%rd408, %rd35, %rd407;
	mov.u32 	%r5232, 1109917696;
	st.global.u32 	[%rd408], %r5232;

$L__BB0_604:
	not.pred 	%p397, %p26;
	@%p397 bra 	$L__BB0_606;

	add.s32 	%r5233, %r1321, %r405;
	mul.wide.s32 	%rd409, %r5233, 4;
	add.s64 	%rd410, %rd35, %rd409;
	mov.u32 	%r5234, 1109917696;
	st.global.u32 	[%rd410], %r5234;

$L__BB0_606:
	@%p28 bra 	$L__BB0_611;

	not.pred 	%p399, %p25;
	@%p399 bra 	$L__BB0_609;

	add.s32 	%r5235, %r1321, %r418;
	mul.wide.s32 	%rd411, %r5235, 4;
	add.s64 	%rd412, %rd35, %rd411;
	mov.u32 	%r5236, 1109917696;
	st.global.u32 	[%rd412], %r5236;

$L__BB0_609:
	not.pred 	%p400, %p27;
	@%p400 bra 	$L__BB0_611;

	add.s32 	%r5237, %r1321, %r419;
	mul.wide.s32 	%rd413, %r5237, 4;
	add.s64 	%rd414, %rd35, %rd413;
	mov.u32 	%r5238, 1109917696;
	st.global.u32 	[%rd414], %r5238;

$L__BB0_611:
	add.s32 	%r7373, %r1302, 1;
	add.s32 	%r5239, %r7373, %r1314;
	mul.lo.s32 	%r5240, %r5239, %r59;
	sub.s32 	%r1322, %r5240, %r1748;
	@%p28 bra 	$L__BB0_616;

	not.pred 	%p402, %p24;
	@%p402 bra 	$L__BB0_614;

	add.s32 	%r5241, %r1322, %r404;
	mul.wide.s32 	%rd415, %r5241, 4;
	add.s64 	%rd416, %rd35, %rd415;
	mov.u32 	%r5242, 1109917696;
	st.global.u32 	[%rd416], %r5242;

$L__BB0_614:
	not.pred 	%p403, %p26;
	@%p403 bra 	$L__BB0_616;

	add.s32 	%r5243, %r1322, %r405;
	mul.wide.s32 	%rd417, %r5243, 4;
	add.s64 	%rd418, %rd35, %rd417;
	mov.u32 	%r5244, 1109917696;
	st.global.u32 	[%rd418], %r5244;

$L__BB0_616:
	@%p28 bra 	$L__BB0_621;

	not.pred 	%p405, %p25;
	@%p405 bra 	$L__BB0_619;

	add.s32 	%r5245, %r1322, %r418;
	mul.wide.s32 	%rd419, %r5245, 4;
	add.s64 	%rd420, %rd35, %rd419;
	mov.u32 	%r5246, 1109917696;
	st.global.u32 	[%rd420], %r5246;

$L__BB0_619:
	not.pred 	%p406, %p27;
	@%p406 bra 	$L__BB0_621;

	add.s32 	%r5247, %r1322, %r419;
	mul.wide.s32 	%rd421, %r5247, 4;
	add.s64 	%rd422, %rd35, %rd421;
	mov.u32 	%r5248, 1109917696;
	st.global.u32 	[%rd422], %r5248;

$L__BB0_621:
	add.s32 	%r7374, %r1302, 1;
	add.s32 	%r5249, %r7374, %r1319;
	mul.lo.s32 	%r5250, %r5249, %r59;
	sub.s32 	%r1323, %r5250, %r1748;
	@%p28 bra 	$L__BB0_626;

	not.pred 	%p408, %p24;
	@%p408 bra 	$L__BB0_624;

	add.s32 	%r5251, %r1323, %r404;
	mul.wide.s32 	%rd423, %r5251, 4;
	add.s64 	%rd424, %rd35, %rd423;
	mov.u32 	%r5252, 1109917696;
	st.global.u32 	[%rd424], %r5252;

$L__BB0_624:
	not.pred 	%p409, %p26;
	@%p409 bra 	$L__BB0_626;

	add.s32 	%r5253, %r1323, %r405;
	mul.wide.s32 	%rd425, %r5253, 4;
	add.s64 	%rd426, %rd35, %rd425;
	mov.u32 	%r5254, 1109917696;
	st.global.u32 	[%rd426], %r5254;

$L__BB0_626:
	@%p28 bra 	$L__BB0_631;

	not.pred 	%p411, %p25;
	@%p411 bra 	$L__BB0_629;

	add.s32 	%r5255, %r1323, %r418;
	mul.wide.s32 	%rd427, %r5255, 4;
	add.s64 	%rd428, %rd35, %rd427;
	mov.u32 	%r5256, 1109917696;
	st.global.u32 	[%rd428], %r5256;

$L__BB0_629:
	not.pred 	%p412, %p27;
	@%p412 bra 	$L__BB0_631;

	add.s32 	%r5257, %r1323, %r419;
	mul.wide.s32 	%rd429, %r5257, 4;
	add.s64 	%rd430, %rd35, %rd429;
	mov.u32 	%r5258, 1109917696;
	st.global.u32 	[%rd430], %r5258;

$L__BB0_631:
	add.s32 	%r1324, %r1302, 2;
	add.s32 	%r5259, %r1324, %r1311;
	mul.lo.s32 	%r5260, %r5259, %r59;
	sub.s32 	%r1325, %r5260, %r1748;
	@%p28 bra 	$L__BB0_636;

	not.pred 	%p414, %p24;
	@%p414 bra 	$L__BB0_634;

	add.s32 	%r5261, %r1325, %r404;
	mul.wide.s32 	%rd431, %r5261, 4;
	add.s64 	%rd432, %rd35, %rd431;
	mov.u32 	%r5262, 1109917696;
	st.global.u32 	[%rd432], %r5262;

$L__BB0_634:
	not.pred 	%p415, %p26;
	@%p415 bra 	$L__BB0_636;

	add.s32 	%r5263, %r1325, %r405;
	mul.wide.s32 	%rd433, %r5263, 4;
	add.s64 	%rd434, %rd35, %rd433;
	mov.u32 	%r5264, 1109917696;
	st.global.u32 	[%rd434], %r5264;

$L__BB0_636:
	@%p28 bra 	$L__BB0_641;

	not.pred 	%p417, %p25;
	@%p417 bra 	$L__BB0_639;

	add.s32 	%r5265, %r1325, %r418;
	mul.wide.s32 	%rd435, %r5265, 4;
	add.s64 	%rd436, %rd35, %rd435;
	mov.u32 	%r5266, 1109917696;
	st.global.u32 	[%rd436], %r5266;

$L__BB0_639:
	not.pred 	%p418, %p27;
	@%p418 bra 	$L__BB0_641;

	add.s32 	%r5267, %r1325, %r419;
	mul.wide.s32 	%rd437, %r5267, 4;
	add.s64 	%rd438, %rd35, %rd437;
	mov.u32 	%r5268, 1109917696;
	st.global.u32 	[%rd438], %r5268;

$L__BB0_641:
	add.s32 	%r7375, %r1302, -1;
	mov.u32 	%r5269, 8;
	sub.s32 	%r5270, %r5269, %r1746;
	add.s32 	%r5271, %r5270, %r1747;
	mul.lo.s32 	%r1326, %r5141, %r5271;
	add.s32 	%r5273, %r7375, %r1326;
	mul.lo.s32 	%r5274, %r5273, %r59;
	sub.s32 	%r1327, %r5274, %r1748;
	@%p28 bra 	$L__BB0_646;

	not.pred 	%p420, %p24;
	@%p420 bra 	$L__BB0_644;

	add.s32 	%r5275, %r1327, %r404;
	mul.wide.s32 	%rd439, %r5275, 4;
	add.s64 	%rd440, %rd35, %rd439;
	mov.u32 	%r5276, 1109917696;
	st.global.u32 	[%rd440], %r5276;

$L__BB0_644:
	not.pred 	%p421, %p26;
	@%p421 bra 	$L__BB0_646;

	add.s32 	%r5277, %r1327, %r405;
	mul.wide.s32 	%rd441, %r5277, 4;
	add.s64 	%rd442, %rd35, %rd441;
	mov.u32 	%r5278, 1109917696;
	st.global.u32 	[%rd442], %r5278;

$L__BB0_646:
	@%p28 bra 	$L__BB0_651;

	not.pred 	%p423, %p25;
	@%p423 bra 	$L__BB0_649;

	add.s32 	%r5279, %r1327, %r418;
	mul.wide.s32 	%rd443, %r5279, 4;
	add.s64 	%rd444, %rd35, %rd443;
	mov.u32 	%r5280, 1109917696;
	st.global.u32 	[%rd444], %r5280;

$L__BB0_649:
	not.pred 	%p424, %p27;
	@%p424 bra 	$L__BB0_651;

	add.s32 	%r5281, %r1327, %r419;
	mul.wide.s32 	%rd445, %r5281, 4;
	add.s64 	%rd446, %rd35, %rd445;
	mov.u32 	%r5282, 1109917696;
	st.global.u32 	[%rd446], %r5282;

$L__BB0_651:
	mov.u32 	%r7380, 8;
	sub.s32 	%r7379, %r7380, %r1744;
	add.s32 	%r7378, %r7379, %r1745;
	add.s32 	%r7377, %r1306, %r7378;
	add.s32 	%r7376, %r1302, -1;
	mov.u32 	%r5283, 8;
	sub.s32 	%r5284, %r5283, %r1746;
	add.s32 	%r5285, %r5284, %r1747;
	add.s32 	%r5286, %r1301, %r7377;
	mul.lo.s32 	%r1328, %r5286, %r5285;
	add.s32 	%r5287, %r7376, %r1328;
	mul.lo.s32 	%r5288, %r5287, %r59;
	sub.s32 	%r1329, %r5288, %r1748;
	@%p28 bra 	$L__BB0_656;

	not.pred 	%p426, %p24;
	@%p426 bra 	$L__BB0_654;

	add.s32 	%r5289, %r1329, %r404;
	mul.wide.s32 	%rd447, %r5289, 4;
	add.s64 	%rd448, %rd35, %rd447;
	mov.u32 	%r5290, 1109917696;
	st.global.u32 	[%rd448], %r5290;

$L__BB0_654:
	not.pred 	%p427, %p26;
	@%p427 bra 	$L__BB0_656;

	add.s32 	%r5291, %r1329, %r405;
	mul.wide.s32 	%rd449, %r5291, 4;
	add.s64 	%rd450, %rd35, %rd449;
	mov.u32 	%r5292, 1109917696;
	st.global.u32 	[%rd450], %r5292;

$L__BB0_656:
	@%p28 bra 	$L__BB0_661;

	not.pred 	%p429, %p25;
	@%p429 bra 	$L__BB0_659;

	add.s32 	%r5293, %r1329, %r418;
	mul.wide.s32 	%rd451, %r5293, 4;
	add.s64 	%rd452, %rd35, %rd451;
	mov.u32 	%r5294, 1109917696;
	st.global.u32 	[%rd452], %r5294;

$L__BB0_659:
	not.pred 	%p430, %p27;
	@%p430 bra 	$L__BB0_661;

	add.s32 	%r5295, %r1329, %r419;
	mul.wide.s32 	%rd453, %r5295, 4;
	add.s64 	%rd454, %rd35, %rd453;
	mov.u32 	%r5296, 1109917696;
	st.global.u32 	[%rd454], %r5296;

$L__BB0_661:
	mov.u32 	%r5297, 8;
	sub.s32 	%r5298, %r5297, %r1746;
	add.s32 	%r5299, %r5298, %r1747;
	mul.lo.s32 	%r1330, %r5124, %r5299;
	add.s32 	%r5301, %r1302, %r1330;
	mul.lo.s32 	%r5302, %r5301, %r59;
	sub.s32 	%r1331, %r5302, %r1748;
	@%p28 bra 	$L__BB0_666;

	not.pred 	%p432, %p24;
	@%p432 bra 	$L__BB0_664;

	add.s32 	%r5303, %r1331, %r404;
	mul.wide.s32 	%rd455, %r5303, 4;
	add.s64 	%rd456, %rd35, %rd455;
	mov.u32 	%r5304, 1109917696;
	st.global.u32 	[%rd456], %r5304;

$L__BB0_664:
	not.pred 	%p433, %p26;
	@%p433 bra 	$L__BB0_666;

	add.s32 	%r5305, %r1331, %r405;
	mul.wide.s32 	%rd457, %r5305, 4;
	add.s64 	%rd458, %rd35, %rd457;
	mov.u32 	%r5306, 1109917696;
	st.global.u32 	[%rd458], %r5306;

$L__BB0_666:
	@%p28 bra 	$L__BB0_671;

	not.pred 	%p435, %p25;
	@%p435 bra 	$L__BB0_669;

	add.s32 	%r5307, %r1331, %r418;
	mul.wide.s32 	%rd459, %r5307, 4;
	add.s64 	%rd460, %rd35, %rd459;
	mov.u32 	%r5308, 1109917696;
	st.global.u32 	[%rd460], %r5308;

$L__BB0_669:
	not.pred 	%p436, %p27;
	@%p436 bra 	$L__BB0_671;

	add.s32 	%r5309, %r1331, %r419;
	mul.wide.s32 	%rd461, %r5309, 4;
	add.s64 	%rd462, %rd35, %rd461;
	mov.u32 	%r5310, 1109917696;
	st.global.u32 	[%rd462], %r5310;

$L__BB0_671:
	add.s32 	%r5311, %r1302, %r1326;
	mul.lo.s32 	%r5312, %r5311, %r59;
	sub.s32 	%r1332, %r5312, %r1748;
	@%p28 bra 	$L__BB0_676;

	not.pred 	%p438, %p24;
	@%p438 bra 	$L__BB0_674;

	add.s32 	%r5313, %r1332, %r404;
	mul.wide.s32 	%rd463, %r5313, 4;
	add.s64 	%rd464, %rd35, %rd463;
	mov.u32 	%r5314, 1109917696;
	st.global.u32 	[%rd464], %r5314;

$L__BB0_674:
	not.pred 	%p439, %p26;
	@%p439 bra 	$L__BB0_676;

	add.s32 	%r5315, %r1332, %r405;
	mul.wide.s32 	%rd465, %r5315, 4;
	add.s64 	%rd466, %rd35, %rd465;
	mov.u32 	%r5316, 1109917696;
	st.global.u32 	[%rd466], %r5316;

$L__BB0_676:
	@%p28 bra 	$L__BB0_681;

	not.pred 	%p441, %p25;
	@%p441 bra 	$L__BB0_679;

	add.s32 	%r5317, %r1332, %r418;
	mul.wide.s32 	%rd467, %r5317, 4;
	add.s64 	%rd468, %rd35, %rd467;
	mov.u32 	%r5318, 1109917696;
	st.global.u32 	[%rd468], %r5318;

$L__BB0_679:
	not.pred 	%p442, %p27;
	@%p442 bra 	$L__BB0_681;

	add.s32 	%r5319, %r1332, %r419;
	mul.wide.s32 	%rd469, %r5319, 4;
	add.s64 	%rd470, %rd35, %rd469;
	mov.u32 	%r5320, 1109917696;
	st.global.u32 	[%rd470], %r5320;

$L__BB0_681:
	add.s32 	%r5321, %r1302, %r1328;
	mul.lo.s32 	%r5322, %r5321, %r59;
	sub.s32 	%r1333, %r5322, %r1748;
	@%p28 bra 	$L__BB0_686;

	not.pred 	%p444, %p24;
	@%p444 bra 	$L__BB0_684;

	add.s32 	%r5323, %r1333, %r404;
	mul.wide.s32 	%rd471, %r5323, 4;
	add.s64 	%rd472, %rd35, %rd471;
	mov.u32 	%r5324, 1109917696;
	st.global.u32 	[%rd472], %r5324;

$L__BB0_684:
	not.pred 	%p445, %p26;
	@%p445 bra 	$L__BB0_686;

	add.s32 	%r5325, %r1333, %r405;
	mul.wide.s32 	%rd473, %r5325, 4;
	add.s64 	%rd474, %rd35, %rd473;
	mov.u32 	%r5326, 1109917696;
	st.global.u32 	[%rd474], %r5326;

$L__BB0_686:
	@%p28 bra 	$L__BB0_691;

	not.pred 	%p447, %p25;
	@%p447 bra 	$L__BB0_689;

	add.s32 	%r5327, %r1333, %r418;
	mul.wide.s32 	%rd475, %r5327, 4;
	add.s64 	%rd476, %rd35, %rd475;
	mov.u32 	%r5328, 1109917696;
	st.global.u32 	[%rd476], %r5328;

$L__BB0_689:
	not.pred 	%p448, %p27;
	@%p448 bra 	$L__BB0_691;

	add.s32 	%r5329, %r1333, %r419;
	mul.wide.s32 	%rd477, %r5329, 4;
	add.s64 	%rd478, %rd35, %rd477;
	mov.u32 	%r5330, 1109917696;
	st.global.u32 	[%rd478], %r5330;

$L__BB0_691:
	add.s32 	%r7381, %r1302, 1;
	add.s32 	%r5331, %r7381, %r1330;
	mul.lo.s32 	%r5332, %r5331, %r59;
	sub.s32 	%r1334, %r5332, %r1748;
	@%p28 bra 	$L__BB0_696;

	not.pred 	%p450, %p24;
	@%p450 bra 	$L__BB0_694;

	add.s32 	%r5333, %r1334, %r404;
	mul.wide.s32 	%rd479, %r5333, 4;
	add.s64 	%rd480, %rd35, %rd479;
	mov.u32 	%r5334, 1109917696;
	st.global.u32 	[%rd480], %r5334;

$L__BB0_694:
	not.pred 	%p451, %p26;
	@%p451 bra 	$L__BB0_696;

	add.s32 	%r5335, %r1334, %r405;
	mul.wide.s32 	%rd481, %r5335, 4;
	add.s64 	%rd482, %rd35, %rd481;
	mov.u32 	%r5336, 1109917696;
	st.global.u32 	[%rd482], %r5336;

$L__BB0_696:
	@%p28 bra 	$L__BB0_701;

	not.pred 	%p453, %p25;
	@%p453 bra 	$L__BB0_699;

	add.s32 	%r5337, %r1334, %r418;
	mul.wide.s32 	%rd483, %r5337, 4;
	add.s64 	%rd484, %rd35, %rd483;
	mov.u32 	%r5338, 1109917696;
	st.global.u32 	[%rd484], %r5338;

$L__BB0_699:
	not.pred 	%p454, %p27;
	@%p454 bra 	$L__BB0_701;

	add.s32 	%r5339, %r1334, %r419;
	mul.wide.s32 	%rd485, %r5339, 4;
	add.s64 	%rd486, %rd35, %rd485;
	mov.u32 	%r5340, 1109917696;
	st.global.u32 	[%rd486], %r5340;

$L__BB0_701:
	add.s32 	%r7382, %r1302, 1;
	add.s32 	%r5341, %r7382, %r1326;
	mul.lo.s32 	%r5342, %r5341, %r59;
	sub.s32 	%r1335, %r5342, %r1748;
	@%p28 bra 	$L__BB0_706;

	not.pred 	%p456, %p24;
	@%p456 bra 	$L__BB0_704;

	add.s32 	%r5343, %r1335, %r404;
	mul.wide.s32 	%rd487, %r5343, 4;
	add.s64 	%rd488, %rd35, %rd487;
	mov.u32 	%r5344, 1109917696;
	st.global.u32 	[%rd488], %r5344;

$L__BB0_704:
	not.pred 	%p457, %p26;
	@%p457 bra 	$L__BB0_706;

	add.s32 	%r5345, %r1335, %r405;
	mul.wide.s32 	%rd489, %r5345, 4;
	add.s64 	%rd490, %rd35, %rd489;
	mov.u32 	%r5346, 1109917696;
	st.global.u32 	[%rd490], %r5346;

$L__BB0_706:
	@%p28 bra 	$L__BB0_711;

	not.pred 	%p459, %p25;
	@%p459 bra 	$L__BB0_709;

	add.s32 	%r5347, %r1335, %r418;
	mul.wide.s32 	%rd491, %r5347, 4;
	add.s64 	%rd492, %rd35, %rd491;
	mov.u32 	%r5348, 1109917696;
	st.global.u32 	[%rd492], %r5348;

$L__BB0_709:
	not.pred 	%p460, %p27;
	@%p460 bra 	$L__BB0_711;

	add.s32 	%r5349, %r1335, %r419;
	mul.wide.s32 	%rd493, %r5349, 4;
	add.s64 	%rd494, %rd35, %rd493;
	mov.u32 	%r5350, 1109917696;
	st.global.u32 	[%rd494], %r5350;

$L__BB0_711:
	add.s32 	%r7383, %r1302, 1;
	add.s32 	%r5351, %r7383, %r1328;
	mul.lo.s32 	%r5352, %r5351, %r59;
	sub.s32 	%r1336, %r5352, %r1748;
	@%p28 bra 	$L__BB0_716;

	not.pred 	%p462, %p24;
	@%p462 bra 	$L__BB0_714;

	add.s32 	%r5353, %r1336, %r404;
	mul.wide.s32 	%rd495, %r5353, 4;
	add.s64 	%rd496, %rd35, %rd495;
	mov.u32 	%r5354, 1109917696;
	st.global.u32 	[%rd496], %r5354;

$L__BB0_714:
	not.pred 	%p463, %p26;
	@%p463 bra 	$L__BB0_716;

	add.s32 	%r5355, %r1336, %r405;
	mul.wide.s32 	%rd497, %r5355, 4;
	add.s64 	%rd498, %rd35, %rd497;
	mov.u32 	%r5356, 1109917696;
	st.global.u32 	[%rd498], %r5356;

$L__BB0_716:
	@%p28 bra 	$L__BB0_721;

	not.pred 	%p465, %p25;
	@%p465 bra 	$L__BB0_719;

	add.s32 	%r5357, %r1336, %r418;
	mul.wide.s32 	%rd499, %r5357, 4;
	add.s64 	%rd500, %rd35, %rd499;
	mov.u32 	%r5358, 1109917696;
	st.global.u32 	[%rd500], %r5358;

$L__BB0_719:
	not.pred 	%p466, %p27;
	@%p466 bra 	$L__BB0_721;

	add.s32 	%r5359, %r1336, %r419;
	mul.wide.s32 	%rd501, %r5359, 4;
	add.s64 	%rd502, %rd35, %rd501;
	mov.u32 	%r5360, 1109917696;
	st.global.u32 	[%rd502], %r5360;

$L__BB0_721:
	add.s32 	%r5361, %r1324, %r1328;
	mul.lo.s32 	%r5362, %r5361, %r59;
	sub.s32 	%r1337, %r5362, %r1748;
	@%p28 bra 	$L__BB0_726;

	not.pred 	%p468, %p24;
	@%p468 bra 	$L__BB0_724;

	add.s32 	%r5363, %r1337, %r404;
	mul.wide.s32 	%rd503, %r5363, 4;
	add.s64 	%rd504, %rd35, %rd503;
	mov.u32 	%r5364, 1109917696;
	st.global.u32 	[%rd504], %r5364;

$L__BB0_724:
	not.pred 	%p469, %p26;
	@%p469 bra 	$L__BB0_726;

	add.s32 	%r5365, %r1337, %r405;
	mul.wide.s32 	%rd505, %r5365, 4;
	add.s64 	%rd506, %rd35, %rd505;
	mov.u32 	%r5366, 1109917696;
	st.global.u32 	[%rd506], %r5366;

$L__BB0_726:
	@%p28 bra 	$L__BB0_731;

	not.pred 	%p471, %p25;
	@%p471 bra 	$L__BB0_729;

	add.s32 	%r5367, %r1337, %r418;
	mul.wide.s32 	%rd507, %r5367, 4;
	add.s64 	%rd508, %rd35, %rd507;
	mov.u32 	%r5368, 1109917696;
	st.global.u32 	[%rd508], %r5368;

$L__BB0_729:
	not.pred 	%p472, %p27;
	@%p472 bra 	$L__BB0_731;

	add.s32 	%r5369, %r1337, %r419;
	mul.wide.s32 	%rd509, %r5369, 4;
	add.s64 	%rd510, %rd35, %rd509;
	mov.u32 	%r5370, 1109917696;
	st.global.u32 	[%rd510], %r5370;

$L__BB0_731:
	add.s32 	%r1338, %r1301, 1;
	add.s32 	%r5371, %r1338, %r1306;
	mov.u32 	%r5372, 8;
	sub.s32 	%r5373, %r5372, %r1746;
	add.s32 	%r5374, %r5373, %r1747;
	mad.lo.s32 	%r5375, %r5371, %r5374, %r1302;
	mul.lo.s32 	%r5376, %r5375, %r59;
	sub.s32 	%r1339, %r5376, %r1748;
	@%p28 bra 	$L__BB0_736;

	not.pred 	%p474, %p24;
	@%p474 bra 	$L__BB0_734;

	add.s32 	%r5377, %r1339, %r404;
	mul.wide.s32 	%rd511, %r5377, 4;
	add.s64 	%rd512, %rd35, %rd511;
	mov.u32 	%r5378, 1109917696;
	st.global.u32 	[%rd512], %r5378;

$L__BB0_734:
	not.pred 	%p475, %p26;
	@%p475 bra 	$L__BB0_736;

	add.s32 	%r5379, %r1339, %r405;
	mul.wide.s32 	%rd513, %r5379, 4;
	add.s64 	%rd514, %rd35, %rd513;
	mov.u32 	%r5380, 1109917696;
	st.global.u32 	[%rd514], %r5380;

$L__BB0_736:
	@%p28 bra 	$L__BB0_741;

	not.pred 	%p477, %p25;
	@%p477 bra 	$L__BB0_739;

	add.s32 	%r5381, %r1339, %r418;
	mul.wide.s32 	%rd515, %r5381, 4;
	add.s64 	%rd516, %rd35, %rd515;
	mov.u32 	%r5382, 1109917696;
	st.global.u32 	[%rd516], %r5382;

$L__BB0_739:
	not.pred 	%p478, %p27;
	@%p478 bra 	$L__BB0_741;

	add.s32 	%r5383, %r1339, %r419;
	mul.wide.s32 	%rd517, %r5383, 4;
	add.s64 	%rd518, %rd35, %rd517;
	mov.u32 	%r5384, 1109917696;
	st.global.u32 	[%rd518], %r5384;

$L__BB0_741:
	mov.u32 	%r7387, 8;
	sub.s32 	%r7386, %r7387, %r1744;
	add.s32 	%r7385, %r7386, %r1745;
	add.s32 	%r7384, %r1306, %r7385;
	mov.u32 	%r5385, 8;
	sub.s32 	%r5386, %r5385, %r1746;
	add.s32 	%r5387, %r5386, %r1747;
	add.s32 	%r5388, %r1338, %r7384;
	mul.lo.s32 	%r1340, %r5388, %r5387;
	add.s32 	%r5389, %r1302, %r1340;
	mul.lo.s32 	%r5390, %r5389, %r59;
	sub.s32 	%r1341, %r5390, %r1748;
	@%p28 bra 	$L__BB0_746;

	not.pred 	%p480, %p24;
	@%p480 bra 	$L__BB0_744;

	add.s32 	%r5391, %r1341, %r404;
	mul.wide.s32 	%rd519, %r5391, 4;
	add.s64 	%rd520, %rd35, %rd519;
	mov.u32 	%r5392, 1109917696;
	st.global.u32 	[%rd520], %r5392;

$L__BB0_744:
	not.pred 	%p481, %p26;
	@%p481 bra 	$L__BB0_746;

	add.s32 	%r5393, %r1341, %r405;
	mul.wide.s32 	%rd521, %r5393, 4;
	add.s64 	%rd522, %rd35, %rd521;
	mov.u32 	%r5394, 1109917696;
	st.global.u32 	[%rd522], %r5394;

$L__BB0_746:
	@%p28 bra 	$L__BB0_751;

	not.pred 	%p483, %p25;
	@%p483 bra 	$L__BB0_749;

	add.s32 	%r5395, %r1341, %r418;
	mul.wide.s32 	%rd523, %r5395, 4;
	add.s64 	%rd524, %rd35, %rd523;
	mov.u32 	%r5396, 1109917696;
	st.global.u32 	[%rd524], %r5396;

$L__BB0_749:
	not.pred 	%p484, %p27;
	@%p484 bra 	$L__BB0_751;

	add.s32 	%r5397, %r1341, %r419;
	mul.wide.s32 	%rd525, %r5397, 4;
	add.s64 	%rd526, %rd35, %rd525;
	mov.u32 	%r5398, 1109917696;
	st.global.u32 	[%rd526], %r5398;

$L__BB0_751:
	add.s32 	%r7388, %r1302, 1;
	add.s32 	%r5399, %r7388, %r1340;
	mul.lo.s32 	%r5400, %r5399, %r59;
	sub.s32 	%r1342, %r5400, %r1748;
	@%p28 bra 	$L__BB0_756;

	not.pred 	%p486, %p24;
	@%p486 bra 	$L__BB0_754;

	add.s32 	%r5401, %r1342, %r404;
	mul.wide.s32 	%rd527, %r5401, 4;
	add.s64 	%rd528, %rd35, %rd527;
	mov.u32 	%r5402, 1109917696;
	st.global.u32 	[%rd528], %r5402;

$L__BB0_754:
	not.pred 	%p487, %p26;
	@%p487 bra 	$L__BB0_756;

	add.s32 	%r5403, %r1342, %r405;
	mul.wide.s32 	%rd529, %r5403, 4;
	add.s64 	%rd530, %rd35, %rd529;
	mov.u32 	%r5404, 1109917696;
	st.global.u32 	[%rd530], %r5404;

$L__BB0_756:
	@%p28 bra 	$L__BB0_761;

	not.pred 	%p489, %p25;
	@%p489 bra 	$L__BB0_759;

	add.s32 	%r5405, %r1342, %r418;
	mul.wide.s32 	%rd531, %r5405, 4;
	add.s64 	%rd532, %rd35, %rd531;
	mov.u32 	%r5406, 1109917696;
	st.global.u32 	[%rd532], %r5406;

$L__BB0_759:
	not.pred 	%p490, %p27;
	@%p490 bra 	$L__BB0_761;

	add.s32 	%r5407, %r1342, %r419;
	mul.wide.s32 	%rd533, %r5407, 4;
	add.s64 	%rd534, %rd35, %rd533;
	mov.u32 	%r5408, 1109917696;
	st.global.u32 	[%rd534], %r5408;

$L__BB0_761:
	setp.eq.s32 	%p491, %r41, %r2196;
	@%p491 bra 	$L__BB0_763;

	mad.lo.s32 	%r5409, %r1731, %r41, %r42;
	mov.u32 	%r5410, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5411, %r5409, 1280, %r5410;
	add.s32 	%r5412, %r5411, -256;
	shl.b32 	%r5413, %r46, 4;
	add.s32 	%r5414, %r5412, %r5413;
	st.shared.v4.u32 	[%r5414+256], {%r3911, %r3988, %r1229, %r1235};
	st.shared.v4.u32 	[%r5414+1024], {%r3678, %r3755, %r1175, %r1187};
	shl.b32 	%r5415, %r46, 3;
	add.s32 	%r5416, %r5412, %r5415;
	st.shared.v2.u32 	[%r5416+768], {%r3954, %r4020};

$L__BB0_763:
	setp.eq.s32 	%p492, %r42, %r2201;
	@%p492 bra 	$L__BB0_767;

	mad.lo.s32 	%r5420, %r1730, 384, -64;
	mul.lo.s32 	%r5421, %r5420, %r42;
	mad.lo.s32 	%r5423, %r2197, %r2196, %r5421;
	mad.lo.s32 	%r5424, %r2603, 384, %r5423;
	shl.b32 	%r5425, %r5424, 2;
	mov.u32 	%r5426, _ZN6kernel5shmemE;
	add.s32 	%r5427, %r5426, %r5425;
	add.s32 	%r5428, %r5427, -256;
	shl.b32 	%r5429, %r46, 4;
	add.s32 	%r5430, %r5428, %r5429;
	st.shared.v4.u32 	[%r5430+256], {%r3832, %r3866, %r1199, %r1211};
	st.shared.v4.u32 	[%r5430+1024], {%r4433, %r4467, %r1284, %r1285};
	shl.b32 	%r5431, %r46, 3;
	add.s32 	%r1346, %r5428, %r5431;
	@%p491 bra 	$L__BB0_766;

	st.shared.v2.u32 	[%r1346], {%r3721, %r3787};

$L__BB0_766:
	st.shared.v2.u32 	[%r1346+768], {%r4292, %r4373};

$L__BB0_767:
	setp.ne.s32 	%p494, %r41, %r2196;
	ld.param.u64 	%rd535, [%rd1+104];
	cvta.to.global.u64 	%rd36, %rd535;
	@%p494 bra 	$L__BB0_769;

	mad.lo.s32 	%r5433, %r659, %r1733, %r44;
	mul.lo.s32 	%r5434, %r1731, %r5433;
	mul.lo.s32 	%r5435, %r5434, 768;
	mad.lo.s32 	%r5436, %r42, 384, %r5435;
	add.s32 	%r5437, %r5436, -64;
	mul.wide.s32 	%rd536, %r5437, 4;
	add.s64 	%rd537, %rd36, %rd536;
	add.s64 	%rd539, %rd537, %rd301;
	st.global.v4.u32 	[%rd539+256], {%r3911, %r3988, %r1229, %r1235};
	st.global.v4.u32 	[%rd539+1024], {%r3678, %r3755, %r1175, %r1187};
	add.s64 	%rd541, %rd537, %rd303;
	st.global.v2.u32 	[%rd541+768], {%r3954, %r4020};
	st.global.v2.u32 	[%rd541+1536], {%r3721, %r3787};

$L__BB0_769:
	setp.ne.s32 	%p495, %r42, %r2201;
	@%p495 bra 	$L__BB0_774;

	ld.param.u64 	%rd586, [%rd1+104];
	cvta.to.global.u64 	%rd585, %rd586;
	mad.lo.s32 	%r5440, %r660, %r1732, %r43;
	mul.lo.s32 	%r5444, %r5440, %r1811;
	mad.lo.s32 	%r5447, %r2603, 384, %r5444;
	add.s32 	%r5448, %r5447, -64;
	mad.lo.s32 	%r5451, %r1813, %r72, %r5448;
	mul.wide.s32 	%rd542, %r5451, 4;
	add.s64 	%rd543, %rd585, %rd542;
	add.s64 	%rd545, %rd543, %rd301;
	st.global.v4.u32 	[%rd545+256], {%r3832, %r3866, %r1199, %r1211};
	st.global.v4.u32 	[%rd545+1024], {%r4433, %r4467, %r1284, %r1285};
	add.s64 	%rd37, %rd543, %rd303;
	@%p491 bra 	$L__BB0_772;

	st.global.v2.u32 	[%rd37], {%r3721, %r3787};

$L__BB0_772:
	st.global.v2.u32 	[%rd37+768], {%r4292, %r4373};
	@%p284 bra 	$L__BB0_774;

	st.global.v2.u32 	[%rd37+1536], {%r7812, %r7811};

$L__BB0_774:
	setp.ge.s32 	%p498, %r41, %r2196;
	@%p498 bra 	$L__BB0_776;

	mul.lo.s32 	%r5452, %r1731, 320;
	mul.lo.s32 	%r5453, %r42, 320;
	mad.lo.s32 	%r5454, %r5452, %r41, %r5453;
	add.s32 	%r5458, %r1810, -64;
	mad.lo.s32 	%r5462, %r5458, %r2201, %r2198;
	add.s32 	%r5463, %r5454, %r5462;
	shl.b32 	%r5464, %r5463, 2;
	mov.u32 	%r5465, _ZN6kernel5shmemE;
	add.s32 	%r5466, %r5465, %r5464;
	shl.b32 	%r5467, %r46, 4;
	add.s32 	%r5468, %r5466, %r5467;
	st.shared.v4.u32 	[%r5468], {%r7860, %r7859, %r7855, %r7853};
	shl.b32 	%r5469, %r46, 3;
	add.s32 	%r5470, %r5466, %r5469;
	st.shared.v2.u32 	[%r5470+512], {%r7597, %r7592};
	st.shared.v4.u32 	[%r5468+768], {%r7621, %r7612, %r7584, %r7580};

$L__BB0_776:
	setp.ge.s32 	%p499, %r42, %r2201;
	@%p499 bra 	$L__BB0_780;

	mad.lo.s32 	%r5476, %r2603, 384, %r2204;
	mad.lo.s32 	%r5479, %r2199, %r42, %r5476;
	add.s32 	%r5485, %r5479, %r2202;
	shl.b32 	%r5486, %r5485, 2;
	mov.u32 	%r5487, _ZN6kernel5shmemE;
	add.s32 	%r5488, %r5487, %r5486;
	shl.b32 	%r5489, %r46, 3;
	add.s32 	%r5490, %r5488, %r5489;
	@%p498 bra 	$L__BB0_779;

	add.s32 	%r7361, %r5490, -256;
	st.shared.v2.u32 	[%r7361], {%r7616, %r7609};

$L__BB0_779:
	shl.b32 	%r5509, %r46, 4;
	add.s32 	%r5510, %r5488, %r5509;
	st.shared.v4.u32 	[%r5510], {%r7607, %r7603, %r7572, %r7568};
	add.s32 	%r7362, %r5490, -256;
	st.shared.v2.u32 	[%r7362+768], {%r7575, %r7569};
	st.shared.v4.u32 	[%r5510+768], {%r7858, %r7857, %r7846, %r7845};

$L__BB0_780:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_782;

	mul.lo.s32 	%r5511, %r1731, 320;
	add.s32 	%r5512, %r41, -1;
	mul.lo.s32 	%r5513, %r42, 320;
	mad.lo.s32 	%r5514, %r5511, %r5512, %r5513;
	shl.b32 	%r5515, %r5514, 2;
	mov.u32 	%r5516, _ZN6kernel5shmemE;
	add.s32 	%r5517, %r5516, %r5515;
	add.s32 	%r5518, %r5517, -256;
	shl.b32 	%r5519, %r46, 4;
	add.s32 	%r5520, %r5518, %r5519;
	ld.shared.v4.u32 	{%r7808, %r7806, %r7800, %r7799}, [%r5520+256];
	ld.shared.v4.u32 	{%r7810, %r7809, %r7804, %r7803}, [%r5520+1024];
	shl.b32 	%r5529, %r46, 3;
	add.s32 	%r5530, %r5518, %r5529;
	ld.shared.v2.u32 	{%r7807, %r7805}, [%r5530+768];

$L__BB0_782:
	@%p282 bra 	$L__BB0_785;

	mad.lo.s32 	%r5535, %r1730, 384, -64;
	add.s32 	%r5536, %r42, -1;
	mul.lo.s32 	%r5537, %r5535, %r5536;
	mad.lo.s32 	%r5540, %r2197, %r2196, %r5537;
	mad.lo.s32 	%r5541, %r2603, 384, %r5540;
	shl.b32 	%r5542, %r5541, 2;
	mov.u32 	%r5543, _ZN6kernel5shmemE;
	add.s32 	%r5544, %r5543, %r5542;
	add.s32 	%r5545, %r5544, -256;
	shl.b32 	%r5546, %r46, 4;
	add.s32 	%r5547, %r5545, %r5546;
	ld.shared.v4.u32 	{%r7824, %r7823, %r7821, %r7819}, [%r5547+256];
	ld.shared.v4.u32 	{%r7818, %r7817, %r7815, %r7813}, [%r5547+1024];
	shl.b32 	%r5556, %r46, 3;
	add.s32 	%r5557, %r5545, %r5556;
	ld.shared.v2.u32 	{%r7822, %r7820}, [%r5557+768];
	@%p279 bra 	$L__BB0_785;

	add.s32 	%r7363, %r5557, 768;
	ld.shared.v2.u32 	{%r7802, %r7801}, [%r7363+768];

$L__BB0_785:
	ld.param.u64 	%rd547, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd547;
	mov.u32 	%r7939, %r7781;
	mov.u32 	%r7940, %r7782;
	mov.u32 	%r7925, %r7769;
	mov.u32 	%r7926, %r7770;
	mov.u32 	%r7927, %r7771;
	mov.u32 	%r7928, %r7772;
	mov.u32 	%r7941, %r7783;
	mov.u32 	%r7943, %r7785;
	mov.u32 	%r7931, %r7773;
	mov.u32 	%r7932, %r7774;
	mov.u32 	%r7933, %r7775;
	mov.u32 	%r7934, %r7776;
	@%p284 bra 	$L__BB0_789;

	mad.lo.s32 	%r5563, %r659, %r1733, %r44;
	mad.lo.s32 	%r5564, %r5563, 768, 384;
	mul.lo.s32 	%r5565, %r5564, %r1731;
	mad.lo.s32 	%r5566, %r42, 384, %r5565;
	add.s32 	%r5567, %r5566, -128;
	mul.wide.s32 	%rd548, %r5567, 4;
	add.s64 	%rd549, %rd38, %rd548;
	add.s64 	%rd551, %rd549, %rd301;
	add.s64 	%rd39, %rd551, 512;
	mov.u32 	%r7939, %r7781;
	mov.u32 	%r7940, %r7782;
	mov.u32 	%r7941, %r7783;
	mov.u32 	%r7943, %r7785;
	@%p282 bra 	$L__BB0_788;

	ld.global.v4.u32 	{%r7940, %r7939, %r7943, %r7941}, [%rd39+-512];

$L__BB0_788:
	ld.global.v4.u32 	{%r7927, %r7925, %r7928, %r7926}, [%rd39];
	ld.global.v4.u32 	{%r7934, %r7933, %r7932, %r7931}, [%rd39+512];
	ld.global.v4.u32 	{%r7778, %r7777, %r7780, %r7779}, [%rd39+1024];

$L__BB0_789:
	mov.u32 	%r7942, %r7784;
	mov.u32 	%r7944, %r7786;
	mov.u32 	%r7945, %r7787;
	mov.u32 	%r7946, %r7788;
	mov.u32 	%r7947, %r7789;
	mov.u32 	%r7948, %r7790;
	mov.u32 	%r7949, %r7791;
	mov.u32 	%r7950, %r7792;
	@%p287 bra 	$L__BB0_791;

	mad.lo.s32 	%r5585, %r660, %r1732, %r43;
	mad.lo.s32 	%r5591, %r2603, 384, %r73;
	mad.lo.s32 	%r5592, %r5585, %r1811, %r5591;
	mad.lo.s32 	%r5595, %r1813, %r72, %r5592;
	mul.wide.s32 	%rd552, %r5595, 4;
	add.s64 	%rd553, %rd38, %rd552;
	add.s64 	%rd555, %rd553, %rd301;
	ld.global.v4.u32 	{%r7794, %r7793, %r7796, %r7795}, [%rd555];
	ld.global.v4.u32 	{%r7950, %r7948, %r7946, %r7945}, [%rd555+512];
	ld.global.v4.u32 	{%r7949, %r7947, %r7944, %r7942}, [%rd555+1024];
	ld.global.v4.u32 	{%r7940, %r7939, %r7943, %r7941}, [%rd555+1536];

$L__BB0_791:
	neg.s32 	%r7369, %r1735;
	not.b32 	%r7368, %r44;
	add.s32 	%r7367, %r1733, %r7368;
	mul.lo.s32 	%r7366, %r7367, %r1734;
	not.b32 	%r7365, %r43;
	add.s32 	%r7364, %r1732, %r7365;
	mad.lo.s32 	%r5619, %r7364, %r1734, %r7366;
	add.s32 	%r5620, %r5619, %r1735;
	add.s32 	%r5629, %r5620, %r2609;
	add.s32 	%r1466, %r7648, 1;
	add.s32 	%r5630, %r1466, %r5629;
	div.s32 	%r5631, %r5630, %r1735;
	mad.lo.s32 	%r1467, %r5631, %r7369, %r5630;
	mad.lo.s32 	%r5638, %r5631, %r48, %r2620;
	ld.param.u64 	%rd556, [%rd1+120];
	cvta.to.global.u64 	%rd557, %rd556;
	rem.s32 	%r5639, %r5638, %r1736;
	shr.u32 	%r5640, %r5639, 31;
	add.s32 	%r5641, %r5639, %r5640;
	shr.s32 	%r5642, %r5641, 1;
	mad.lo.s32 	%r5643, %r5642, %r1735, %r1467;
	shl.b32 	%r5644, %r5643, 5;
	add.s32 	%r5645, %r5644, %r46;
	cvt.s64.s32 	%rd40, %r5645;
	mul.wide.s32 	%rd558, %r5645, 4;
	add.s64 	%rd559, %rd557, %rd558;
	ld.global.u32 	%r7650, [%rd559];
	ld.param.u64 	%rd560, [%rd1+128];
	cvta.to.global.u64 	%rd41, %rd560;
	@%p142 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	shl.b64 	%rd563, %rd40, 2;
	add.s64 	%rd564, %rd41, %rd563;
	ld.global.u32 	%r7649, [%rd564];
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	shl.b32 	%r5646, %r1467, 5;
	add.s32 	%r5647, %r5646, %r46;
	mul.wide.s32 	%rd561, %r5647, 16;
	add.s64 	%rd562, %rd41, %rd561;
	ld.global.v4.u32 	{%r5648, %r5649, %r5650, %r5651}, [%rd562];
	mov.u32 	%r7480, %r7484;
	mov.u32 	%r7481, %r7485;
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r7487;
	mov.u32 	%r7484, %r7488;
	mov.u32 	%r7485, %r7489;
	mov.u32 	%r7486, %r7490;
	mov.u32 	%r7487, %r7491;
	mov.u32 	%r7488, %r5651;
	mov.u32 	%r7489, %r5650;
	mov.u32 	%r7490, %r5649;
	mov.u32 	%r7491, %r5648;

$L__BB0_794:
	mov.f32 	%f467, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5652, {low,high};}

	// end inline asm
	selp.b32 	%r5654, %r7475, %r5652, %p28;
	// begin inline asm
	{mul.f16x2 %r5653,%r5654,%r7618;
}
	// end inline asm
	selp.b32 	%r5657, %r7479, %r5652, %p28;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7611;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5659, {low,high};}

	// end inline asm
	selp.b32 	%r5661, %r7475, %r5659, %p28;
	// begin inline asm
	{mul.f16x2 %r5660,%r5661,%r7599;
}
	// end inline asm
	selp.b32 	%r5664, %r7479, %r5659, %p28;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7594;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5666, {low,high};}

	// end inline asm
	selp.b32 	%r5668, %r7475, %r5666, %p28;
	// begin inline asm
	{mul.f16x2 %r5667,%r5668,%r7586;
}
	// end inline asm
	selp.b32 	%r5671, %r7479, %r5666, %p28;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7585;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5673, {low,high};}

	// end inline asm
	selp.b32 	%r5675, %r7475, %r5673, %p28;
	// begin inline asm
	{mul.f16x2 %r5674,%r5675,%r7590;
}
	// end inline asm
	selp.b32 	%r5678, %r7479, %r5673, %p28;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7589;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5680, {low,high};}

	// end inline asm
	selp.b32 	%r5682, %r7475, %r5680, %p28;
	// begin inline asm
	{mul.f16x2 %r5681,%r5682,%r7588;
}
	// end inline asm
	selp.b32 	%r5685, %r7479, %r5680, %p28;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7582;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5687, {low,high};}

	// end inline asm
	selp.b32 	%r5689, %r7475, %r5687, %p28;
	// begin inline asm
	{mul.f16x2 %r5688,%r5689,%r7578;
}
	// end inline asm
	selp.b32 	%r5692, %r7479, %r5687, %p28;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7577;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5694, {low,high};}

	// end inline asm
	selp.b32 	%r5696, %r7475, %r5694, %p28;
	// begin inline asm
	{mul.f16x2 %r5695,%r5696,%r7576;
}
	// end inline asm
	selp.b32 	%r5699, %r7479, %r5694, %p28;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7570;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5701, {low,high};}

	// end inline asm
	selp.b32 	%r5703, %r7475, %r5701, %p28;
	// begin inline asm
	{mul.f16x2 %r5702,%r5703,%r7563;
}
	// end inline asm
	selp.b32 	%r5706, %r7479, %r5701, %p28;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7562;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5708, {low,high};}

	// end inline asm
	selp.b32 	%r5710, %r7475, %r5708, %p28;
	// begin inline asm
	{mul.f16x2 %r5709,%r5710,%r7792;
}
	// end inline asm
	selp.b32 	%r5713, %r7479, %r5708, %p28;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7790;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5715, {low,high};}

	// end inline asm
	selp.b32 	%r5717, %r7475, %r5715, %p28;
	// begin inline asm
	{mul.f16x2 %r5716,%r5717,%r7791;
}
	// end inline asm
	selp.b32 	%r5720, %r7479, %r5715, %p28;
	// begin inline asm
	{mul.f16x2 %r5719,%r5720,%r7789;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5722, {low,high};}

	// end inline asm
	selp.b32 	%r5724, %r7475, %r5722, %p28;
	// begin inline asm
	{mul.f16x2 %r5723,%r5724,%r7555;
}
	// end inline asm
	selp.b32 	%r5727, %r7479, %r5722, %p28;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7554;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5729, {low,high};}

	// end inline asm
	selp.b32 	%r5731, %r7475, %r5729, %p28;
	// begin inline asm
	{mul.f16x2 %r5730,%r5731,%r7559;
}
	// end inline asm
	selp.b32 	%r5734, %r7479, %r5729, %p28;
	// begin inline asm
	{mul.f16x2 %r5733,%r5734,%r7558;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5736, {low,high};}

	// end inline asm
	selp.b32 	%r5738, %r7475, %r5736, %p28;
	// begin inline asm
	{mul.f16x2 %r5737,%r5738,%r7557;
}
	// end inline asm
	selp.b32 	%r5741, %r7479, %r5736, %p28;
	// begin inline asm
	{mul.f16x2 %r5740,%r5741,%r7552;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5743, {low,high};}

	// end inline asm
	selp.b32 	%r5745, %r7475, %r5743, %p28;
	// begin inline asm
	{mul.f16x2 %r5744,%r5745,%r7547;
}
	// end inline asm
	selp.b32 	%r5748, %r7479, %r5743, %p28;
	// begin inline asm
	{mul.f16x2 %r5747,%r5748,%r7546;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5750, {low,high};}

	// end inline asm
	selp.b32 	%r5752, %r7475, %r5750, %p28;
	// begin inline asm
	{mul.f16x2 %r5751,%r5752,%r7549;
}
	// end inline asm
	selp.b32 	%r5755, %r7479, %r5750, %p28;
	// begin inline asm
	{mul.f16x2 %r5754,%r5755,%r7548;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5757, {low,high};}

	// end inline asm
	selp.b32 	%r5759, %r7475, %r5757, %p28;
	// begin inline asm
	{mul.f16x2 %r5758,%r5759,%r7776;
}
	// end inline asm
	selp.b32 	%r5762, %r7479, %r5757, %p28;
	// begin inline asm
	{mul.f16x2 %r5761,%r5762,%r7775;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5764, {low,high};}

	// end inline asm
	selp.b32 	%r5766, %r7475, %r5764, %p28;
	// begin inline asm
	{mul.f16x2 %r5765,%r5766,%r7774;
}
	// end inline asm
	selp.b32 	%r5769, %r7479, %r5764, %p28;
	// begin inline asm
	{mul.f16x2 %r5768,%r5769,%r7773;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5771, {low,high};}

	// end inline asm
	selp.b32 	%r5773, %r7475, %r5771, %p28;
	// begin inline asm
	{mul.f16x2 %r5772,%r5773,%r7788;
}
	// end inline asm
	selp.b32 	%r5776, %r7479, %r5771, %p28;
	// begin inline asm
	{mul.f16x2 %r5775,%r5776,%r7787;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5778, {low,high};}

	// end inline asm
	selp.b32 	%r5780, %r7475, %r5778, %p28;
	// begin inline asm
	{mul.f16x2 %r5779,%r5780,%r7541;
}
	// end inline asm
	selp.b32 	%r5783, %r7479, %r5778, %p28;
	// begin inline asm
	{mul.f16x2 %r5782,%r5783,%r7540;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5785, {low,high};}

	// end inline asm
	selp.b32 	%r5787, %r7475, %r5785, %p28;
	// begin inline asm
	{mul.f16x2 %r5786,%r5787,%r7786;
}
	// end inline asm
	selp.b32 	%r5790, %r7479, %r5785, %p28;
	// begin inline asm
	{mul.f16x2 %r5789,%r5790,%r7784;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5792, {low,high};}

	// end inline asm
	selp.b32 	%r5794, %r7475, %r5792, %p28;
	// begin inline asm
	{mul.f16x2 %r5793,%r5794,%r7785;
}
	// end inline asm
	selp.b32 	%r5797, %r7479, %r5792, %p28;
	// begin inline asm
	{mul.f16x2 %r5796,%r5797,%r7783;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5799, {low,high};}

	// end inline asm
	selp.b32 	%r5801, %r7475, %r5799, %p28;
	// begin inline asm
	{mul.f16x2 %r5800,%r5801,%r7772;
}
	// end inline asm
	selp.b32 	%r5804, %r7479, %r5799, %p28;
	// begin inline asm
	{mul.f16x2 %r5803,%r5804,%r7770;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5806, {low,high};}

	// end inline asm
	selp.b32 	%r5808, %r7475, %r5806, %p28;
	// begin inline asm
	{mul.f16x2 %r5807,%r5808,%r7771;
}
	// end inline asm
	selp.b32 	%r5811, %r7479, %r5806, %p28;
	// begin inline asm
	{mul.f16x2 %r5810,%r5811,%r7769;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5813, {low,high};}

	// end inline asm
	selp.b32 	%r5815, %r7475, %r5813, %p28;
	// begin inline asm
	{mul.f16x2 %r5814,%r5815,%r7782;
}
	// end inline asm
	selp.b32 	%r5818, %r7479, %r5813, %p28;
	// begin inline asm
	{mul.f16x2 %r5817,%r5818,%r7781;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5820,%r7645,%r3721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5823,%r3832,%r3678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5826,%r5820,%r5823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5829,%r7389,%r5826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5832,%r5653,%r5829;
}
	// end inline asm
	selp.b32 	%r7613, %r5653, %r5832, %p28;
	// begin inline asm
	{sub.f16x2 %r5835,%r7644,%r3787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5838,%r3866,%r3755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5841,%r5835,%r5838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5844,%r7389,%r5841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5847,%r5656,%r5844;
}
	// end inline asm
	selp.b32 	%r7608, %r5656, %r5847, %p28;
	// begin inline asm
	{sub.f16x2 %r5850,%r7641,%r3954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5853,%r7647,%r3911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5856,%r5850,%r5853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5859,%r7389,%r5856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5862,%r5660,%r5859;
}
	// end inline asm
	selp.b32 	%r7617, %r5660, %r5862, %p28;
	// begin inline asm
	{sub.f16x2 %r5865,%r7640,%r4020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5868,%r7646,%r3988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r5865,%r5868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5874,%r7389,%r5871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5877,%r5663,%r5874;
}
	// end inline asm
	selp.b32 	%r7610, %r5663, %r5877, %p28;
	// begin inline asm
	{sub.f16x2 %r5880,%r7644,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5883,%r7474,%r5880;
}
	// end inline asm
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7968,%r5667;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7968,%r7475,%r5880;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r5894, 31;
	mov.u32 	%r5896, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5892,%r7968,%r5894,%r2306,%r5896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5897,%r5883,%r5892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5900,%r1199,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5903,%r5900,%r5897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5906,%r7389,%r5903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7615,%r5667,%r5906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5912,%r7646,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5915,%r7474,%r5912;
}
	// end inline asm
	mov.u32 	%r7969, %r5674;
	@%p28 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7969,%r7475,%r5912;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5924,%r7969,%r5894,%r2306,%r5896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5929,%r5915,%r5924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5932,%r7635,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5935,%r5929,%r5932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5938,%r7389,%r5935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r5674,%r5938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5944,%r7637,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r7643,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5944,%r5947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r7389,%r5950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5956,%r5681,%r5953;
}
	// end inline asm
	selp.b32 	%r7618, %r5681, %r5956, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5961,%r7645,%r439,%r2306,%r5896;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5961;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5967, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r5967,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5971,%r7478,%r5968;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7970,%r5670;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7970,%r7479,%r5968;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r5986, 31;
	mov.u32 	%r6010, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5984,%r7970,%r5986,%r2306,%r6010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5989,%r5971,%r5984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5992,%r1211,%r1187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5995,%r5992,%r5989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5998,%r7389,%r5995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r5670,%r5998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6006,%r7647,%r439,%r2306,%r6010;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6006;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6012, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6013,%r6012,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6016,%r7478,%r6013;
}
	// end inline asm
	mov.u32 	%r7971, %r5677;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7971,%r7479,%r6013;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6027,%r7971,%r5986,%r2306,%r6010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6032,%r6016,%r6027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r7634,%r1187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6038,%r6032,%r6035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6041,%r7389,%r6038;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7619,%r5677,%r6041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6047,%r7636,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6050,%r7642,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6053,%r6047,%r6050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6056,%r7389,%r6053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6059,%r5684,%r6056;
}
	// end inline asm
	selp.b32 	%r7611, %r5684, %r6059, %p28;
	// begin inline asm
	{sub.f16x2 %r6062,%r7642,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6065,%r7474,%r6062;
}
	// end inline asm
	mov.u32 	%r7972, %r5688;
	@%p28 bra 	$L__BB0_806;

	// begin inline asm
	{mul.f16x2 %r7972,%r7475,%r6062;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6076, 31;
	mov.u32 	%r6115, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6074,%r7972,%r6076,%r2306,%r6115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6079,%r6065,%r6074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6082,%r7629,%r1199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6085,%r6079,%r6082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6088,%r7389,%r6085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r5688,%r6088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6094,%r7631,%r4292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6097,%r4433,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6100,%r6094,%r6097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6103,%r7389,%r6100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6106,%r5695,%r6103;
}
	// end inline asm
	selp.b32 	%r7604, %r5695, %r6106, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6111,%r7643,%r439,%r2306,%r6115;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6111;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6117, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6118,%r6117,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6121,%r7478,%r6118;
}
	// end inline asm
	mov.u32 	%r7973, %r5691;
	@%p28 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7973,%r7479,%r6118;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6132,%r7973,%r6076,%r2306,%r6115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6137,%r6121,%r6132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6140,%r7628,%r1211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6143,%r6137,%r6140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6146,%r7389,%r6143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7605,%r5691,%r6146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6152,%r7630,%r4373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6155,%r4467,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r6152,%r6155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6161,%r7389,%r6158;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6164,%r5698,%r6161;
}
	// end inline asm
	selp.b32 	%r7602, %r5698, %r6164, %p28;
	// begin inline asm
	{sub.f16x2 %r6167,%r7640,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6170,%r7474,%r6167;
}
	// end inline asm
	@%p28 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7974,%r5702;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7974,%r7475,%r6167;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6183, 31;
	mov.u32 	%r6185, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6181,%r7974,%r6183,%r2306,%r6185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6186,%r6170,%r6181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6189,%r7635,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6192,%r6189,%r6186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6195,%r7389,%r6192;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r5702,%r6195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6201,%r7823,%r7824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6204,%r7474,%r6201;
}
	// end inline asm
	mov.u32 	%r7975, %r5709;
	@%p28 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7975,%r7475,%r6201;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6213,%r7975,%r6183,%r2306,%r6185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6218,%r6204,%r6213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6221,%r7821,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6224,%r6218,%r6221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6227,%r7389,%r6224;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r5709,%r6227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6233,%r7822,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r7639,%r7824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r6233,%r6236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6242,%r7389,%r6239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6245,%r5716,%r6242;
}
	// end inline asm
	selp.b32 	%r7599, %r5716, %r6245, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6250,%r7641,%r439,%r2306,%r6185;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6250;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6256, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r6256,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6260,%r7478,%r6257;
}
	// end inline asm
	@%p28 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7976,%r5705;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7976,%r7479,%r6257;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6275, 31;
	mov.u32 	%r6299, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6273,%r7976,%r6275,%r2306,%r6299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6278,%r6260,%r6273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6281,%r7634,%r1235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6284,%r6281,%r6278;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6287,%r7389,%r6284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r5705,%r6287;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7824;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6295,%r7824,%r439,%r2306,%r6299;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6295;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6301, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6302,%r6301,%r7823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6305,%r7478,%r6302;
}
	// end inline asm
	mov.u32 	%r7977, %r5712;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7977,%r7479,%r6302;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6316,%r7977,%r6275,%r2306,%r6299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6321,%r6305,%r6316;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r7819,%r1235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6327,%r6321,%r6324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6330,%r7389,%r6327;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r5712,%r6330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6336,%r7820,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6339,%r7638,%r7823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r6336,%r6339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6345,%r7389,%r6342;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6348,%r5719,%r6345;
}
	// end inline asm
	selp.b32 	%r7594, %r5719, %r6348, %p28;
	// begin inline asm
	{sub.f16x2 %r6351,%r7636,%r7637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6354,%r7474,%r6351;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7978,%r5723;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7978,%r7475,%r6351;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6367, 31;
	mov.u32 	%r6369, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6365,%r7978,%r6367,%r2306,%r6369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6370,%r6354,%r6365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6373,%r7629,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6376,%r6373,%r6370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6379,%r7389,%r6376;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7586,%r5723,%r6379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6385,%r7638,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6388,%r7474,%r6385;
}
	// end inline asm
	mov.u32 	%r7979, %r5730;
	@%p28 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7979,%r7475,%r6385;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6397,%r7979,%r6367,%r2306,%r6369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6402,%r6388,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r7625,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r6402,%r6405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6411,%r7389,%r6408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7590,%r5730,%r6411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6417,%r7627,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6420,%r7633,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r6417,%r6420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6426,%r7389,%r6423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6429,%r5737,%r6426;
}
	// end inline asm
	selp.b32 	%r7588, %r5737, %r6429, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7637;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6434,%r7637,%r439,%r2306,%r6369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6434;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6440, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r6440,%r7636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6444,%r7478,%r6441;
}
	// end inline asm
	@%p28 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7980,%r5726;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7980,%r7479,%r6441;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6459, 31;
	mov.u32 	%r6483, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6457,%r7980,%r6459,%r2306,%r6483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6462,%r6444,%r6457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6465,%r7628,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6468,%r6465,%r6462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6471,%r7389,%r6468;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7585,%r5726,%r6471;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7639;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6479,%r7639,%r439,%r2306,%r6483;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6479;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6485, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6486,%r6485,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6489,%r7478,%r6486;
}
	// end inline asm
	mov.u32 	%r7981, %r5733;
	@%p28 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7981,%r7479,%r6486;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6500,%r7981,%r6459,%r2306,%r6483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6505,%r6489,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r7624,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6511,%r6505,%r6508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6514,%r7389,%r6511;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7589,%r5733,%r6514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6520,%r7626,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6523,%r7632,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r6520,%r6523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6529,%r7389,%r6526;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6532,%r5740,%r6529;
}
	// end inline asm
	selp.b32 	%r7582, %r5740, %r6532, %p28;
	// begin inline asm
	{sub.f16x2 %r6535,%r7630,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6538,%r7474,%r6535;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7982,%r5744;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7982,%r7475,%r6535;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6551, 31;
	mov.u32 	%r6553, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6549,%r7982,%r6551,%r2306,%r6553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6554,%r6538,%r6549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6557,%r1284,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6560,%r6557,%r6554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6563,%r7389,%r6560;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r5744,%r6563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6569,%r7632,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6572,%r7474,%r6569;
}
	// end inline asm
	mov.u32 	%r7983, %r5751;
	@%p28 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7983,%r7475,%r6569;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6581,%r7983,%r6551,%r2306,%r6553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6586,%r6572,%r6581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6589,%r7623,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6592,%r6586,%r6589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6595,%r7389,%r6592;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r5751,%r6595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6601,%r7807,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6604,%r7810,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r6601,%r6604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6610,%r7389,%r6607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6613,%r5758,%r6610;
}
	// end inline asm
	selp.b32 	%r7576, %r5758, %r6613, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7631;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6618,%r7631,%r439,%r2306,%r6553;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6618;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6624, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6625,%r6624,%r7630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6628,%r7478,%r6625;
}
	// end inline asm
	@%p28 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7984,%r5747;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7984,%r7479,%r6625;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r6643, 31;
	mov.u32 	%r6667, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6641,%r7984,%r6643,%r2306,%r6667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6646,%r6628,%r6641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6649,%r1285,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6652,%r6649,%r6646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6655,%r7389,%r6652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r5747,%r6655;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6663,%r7633,%r439,%r2306,%r6667;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6663;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6669, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6670,%r6669,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6673,%r7478,%r6670;
}
	// end inline asm
	mov.u32 	%r7985, %r5754;
	@%p28 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7985,%r7479,%r6670;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6684,%r7985,%r6643,%r2306,%r6667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6689,%r6673,%r6684;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6692,%r7622,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6695,%r6689,%r6692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6698,%r7389,%r6695;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r5754,%r6698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6704,%r7805,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r7809,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6710,%r6704,%r6707;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6713,%r7389,%r6710;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6716,%r5761,%r6713;
}
	// end inline asm
	selp.b32 	%r7570, %r5761, %r6716, %p28;
	// begin inline asm
	{sub.f16x2 %r6719,%r7809,%r7810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6722,%r7474,%r6719;
}
	// end inline asm
	mov.u32 	%r7986, %r5765;
	@%p28 bra 	$L__BB0_840;

	// begin inline asm
	{mul.f16x2 %r7986,%r7475,%r6719;
}
	// end inline asm

$L__BB0_840:
	mov.u32 	%r6733, 31;
	mov.u32 	%r6757, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6731,%r7986,%r6733,%r2306,%r6757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6736,%r6722,%r6731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6739,%r7804,%r1284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r6736,%r6739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6745,%r7389,%r6742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r5765,%r6745;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7810;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6753,%r7810,%r439,%r2306,%r6757;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6753;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6759, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6760,%r6759,%r7809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6763,%r7478,%r6760;
}
	// end inline asm
	mov.u32 	%r7987, %r5768;
	@%p28 bra 	$L__BB0_842;

	// begin inline asm
	{mul.f16x2 %r7987,%r7479,%r6760;
}
	// end inline asm

$L__BB0_842:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6774,%r7987,%r6733,%r2306,%r6757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6779,%r6763,%r6774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6782,%r7803,%r1285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6785,%r6779,%r6782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6788,%r7389,%r6785;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r5768,%r6788;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6794,%r7820,%r7822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6797,%r7474,%r6794;
}
	// end inline asm
	@%p28 bra 	$L__BB0_844;
	bra.uni 	$L__BB0_843;

$L__BB0_844:
	// begin inline asm
	{neg.f16x2 %r7988,%r5772;
}
	// end inline asm
	bra.uni 	$L__BB0_845;

$L__BB0_843:
	// begin inline asm
	{mul.f16x2 %r7988,%r7475,%r6794;
}
	// end inline asm

$L__BB0_845:
	mov.u32 	%r6810, 31;
	mov.u32 	%r6834, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6808,%r7988,%r6810,%r2306,%r6834;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6813,%r6797,%r6808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6816,%r7625,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6819,%r6816,%r6813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6822,%r7389,%r6819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r5772,%r6822;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7822;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6830,%r7822,%r439,%r2306,%r6834;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6830;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6836, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6837,%r6836,%r7820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6840,%r7478,%r6837;
}
	// end inline asm
	@%p28 bra 	$L__BB0_847;
	bra.uni 	$L__BB0_846;

$L__BB0_847:
	// begin inline asm
	{neg.f16x2 %r7989,%r5775;
}
	// end inline asm
	bra.uni 	$L__BB0_848;

$L__BB0_846:
	// begin inline asm
	{mul.f16x2 %r7989,%r7479,%r6837;
}
	// end inline asm

$L__BB0_848:
	mov.u32 	%r6855, 31;
	mov.u32 	%r6857, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6853,%r7989,%r6855,%r2306,%r6857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6858,%r6840,%r6853;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6861,%r7624,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6864,%r6861,%r6858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6867,%r7389,%r6864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r5775,%r6867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6873,%r7626,%r7627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6876,%r7474,%r6873;
}
	// end inline asm
	@%p28 bra 	$L__BB0_850;
	bra.uni 	$L__BB0_849;

$L__BB0_850:
	// begin inline asm
	{neg.f16x2 %r7990,%r5779;
}
	// end inline asm
	bra.uni 	$L__BB0_851;

$L__BB0_849:
	// begin inline asm
	{mul.f16x2 %r7990,%r7475,%r6873;
}
	// end inline asm

$L__BB0_851:
	mov.u32 	%r6889, 31;
	mov.u32 	%r6891, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6887,%r7990,%r6889,%r2306,%r6891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6892,%r6876,%r6887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6895,%r7623,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6898,%r6895,%r6892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6901,%r7389,%r6898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r5779,%r6901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6907,%r7817,%r7818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6910,%r7474,%r6907;
}
	// end inline asm
	mov.u32 	%r7991, %r5786;
	@%p28 bra 	$L__BB0_853;

	// begin inline asm
	{mul.f16x2 %r7991,%r7475,%r6907;
}
	// end inline asm

$L__BB0_853:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6919,%r7991,%r6889,%r2306,%r6891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6924,%r6910,%r6919;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6927,%r7815,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6930,%r6924,%r6927;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6933,%r7389,%r6930;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r5786,%r6933;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6939,%r7802,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6942,%r7808,%r7818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r6939,%r6942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6948,%r7389,%r6945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6951,%r5793,%r6948;
}
	// end inline asm
	selp.b32 	%r7557, %r5793, %r6951, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7627;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6956,%r7627,%r439,%r2306,%r6891;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6956;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6962, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6963,%r6962,%r7626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6966,%r7478,%r6963;
}
	// end inline asm
	@%p28 bra 	$L__BB0_855;
	bra.uni 	$L__BB0_854;

$L__BB0_855:
	// begin inline asm
	{neg.f16x2 %r7992,%r5782;
}
	// end inline asm
	bra.uni 	$L__BB0_856;

$L__BB0_854:
	// begin inline asm
	{mul.f16x2 %r7992,%r7479,%r6963;
}
	// end inline asm

$L__BB0_856:
	mov.u32 	%r6981, 31;
	mov.u32 	%r7005, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6979,%r7992,%r6981,%r2306,%r7005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6984,%r6966,%r6979;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6987,%r7622,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6990,%r6987,%r6984;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6993,%r7389,%r6990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r5782,%r6993;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7818;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7001,%r7818,%r439,%r2306,%r7005;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7001;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7007, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7008,%r7007,%r7817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7011,%r7478,%r7008;
}
	// end inline asm
	mov.u32 	%r7993, %r5789;
	@%p28 bra 	$L__BB0_858;

	// begin inline asm
	{mul.f16x2 %r7993,%r7479,%r7008;
}
	// end inline asm

$L__BB0_858:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7022,%r7993,%r6981,%r2306,%r7005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7027,%r7011,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7030,%r7813,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7033,%r7027,%r7030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7036,%r7389,%r7033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r5789,%r7036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7042,%r7801,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7045,%r7806,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7048,%r7042,%r7045;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7051,%r7389,%r7048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7054,%r5796,%r7051;
}
	// end inline asm
	selp.b32 	%r7552, %r5796, %r7054, %p28;
	// begin inline asm
	{sub.f16x2 %r7057,%r7805,%r7807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7060,%r7474,%r7057;
}
	// end inline asm
	@%p28 bra 	$L__BB0_860;
	bra.uni 	$L__BB0_859;

$L__BB0_860:
	// begin inline asm
	{neg.f16x2 %r7994,%r5800;
}
	// end inline asm
	bra.uni 	$L__BB0_861;

$L__BB0_859:
	// begin inline asm
	{mul.f16x2 %r7994,%r7475,%r7057;
}
	// end inline asm

$L__BB0_861:
	mov.u32 	%r7073, 31;
	mov.u32 	%r7075, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7071,%r7994,%r7073,%r2306,%r7075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7076,%r7060,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7079,%r7804,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7082,%r7079,%r7076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7085,%r7389,%r7082;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r5800,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7091,%r7806,%r7808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7094,%r7474,%r7091;
}
	// end inline asm
	mov.u32 	%r7995, %r5807;
	@%p28 bra 	$L__BB0_863;

	// begin inline asm
	{mul.f16x2 %r7995,%r7475,%r7091;
}
	// end inline asm

$L__BB0_863:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7103,%r7995,%r7073,%r2306,%r7075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7094,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7111,%r7800,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7108,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7117,%r7389,%r7114;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r5807,%r7117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7807;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7125,%r7807,%r439,%r2306,%r7075;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7125;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7131, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7132,%r7131,%r7805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7135,%r7478,%r7132;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r7996,%r5803;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r7996,%r7479,%r7132;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r7150, 31;
	mov.u32 	%r7174, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7148,%r7996,%r7150,%r2306,%r7174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7153,%r7135,%r7148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7156,%r7803,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7159,%r7156,%r7153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7162,%r7389,%r7159;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r5803,%r7162;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7808;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7170,%r7808,%r439,%r2306,%r7174;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7170;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7176, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7177,%r7176,%r7806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7180,%r7478,%r7177;
}
	// end inline asm
	mov.u32 	%r7997, %r5810;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r7997,%r7479,%r7177;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7191,%r7997,%r7150,%r2306,%r7174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7196,%r7180,%r7191;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7199,%r7799,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7202,%r7196,%r7199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7205,%r7389,%r7202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r5810,%r7205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7211,%r7801,%r7802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7214,%r7474,%r7211;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;
	bra.uni 	$L__BB0_869;

$L__BB0_870:
	// begin inline asm
	{neg.f16x2 %r7998,%r5814;
}
	// end inline asm
	bra.uni 	$L__BB0_871;

$L__BB0_869:
	// begin inline asm
	{mul.f16x2 %r7998,%r7475,%r7211;
}
	// end inline asm

$L__BB0_871:
	mov.u32 	%r7227, 31;
	mov.u32 	%r7251, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7225,%r7998,%r7227,%r2306,%r7251;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7230,%r7214,%r7225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7233,%r7800,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7236,%r7233,%r7230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7239,%r7389,%r7236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r5814,%r7239;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7802;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7247,%r7802,%r439,%r2306,%r7251;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7247;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7253, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7254,%r7253,%r7801;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7257,%r7478,%r7254;
}
	// end inline asm
	@%p28 bra 	$L__BB0_873;
	bra.uni 	$L__BB0_872;

$L__BB0_873:
	// begin inline asm
	{neg.f16x2 %r7999,%r5817;
}
	// end inline asm
	bra.uni 	$L__BB0_874;

$L__BB0_872:
	// begin inline asm
	{mul.f16x2 %r7999,%r7479,%r7254;
}
	// end inline asm

$L__BB0_874:
	mov.u32 	%r7272, 31;
	mov.u32 	%r7274, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7270,%r7999,%r7272,%r2306,%r7274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7275,%r7257,%r7270;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7278,%r7799,%r7813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7281,%r7278,%r7275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7284,%r7389,%r7281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r5817,%r7284;
}
	// end inline asm
	bar.sync 	0;
	@%p491 bra 	$L__BB0_877;

	setp.ne.s32 	%p554, %r42, %r2201;
	shl.b32 	%r7293, %r42, 8;
	shl.b32 	%r7297, %r1731, 8;
	or.b32  	%r7298, %r7297, 128;
	mad.lo.s32 	%r7299, %r7298, %r41, %r2204;
	add.s32 	%r7300, %r7299, %r7293;
	shl.b32 	%r7301, %r7300, 2;
	mov.u32 	%r7302, _ZN6kernel5shmemE;
	add.s32 	%r7303, %r7302, %r7301;
	shl.b32 	%r7304, %r46, 4;
	add.s32 	%r1723, %r7303, %r7304;
	st.shared.v4.u32 	[%r1723], {%r7601, %r7600, %r7596, %r7595};
	st.shared.v4.u32 	[%r1723+512], {%r7617, %r7610, %r7620, %r7619};
	@%p554 bra 	$L__BB0_877;

	st.shared.v4.u32 	[%r1723+1024], {%r7615, %r7614, %r7613, %r7608};

$L__BB0_877:
	setp.eq.s32 	%p552, %r42, %r2201;
	@%p552 bra 	$L__BB0_879;

	mul.lo.s32 	%r7308, %r2603, 384;
	mad.lo.s32 	%r7309, %r73, %r42, %r7308;
	mad.lo.s32 	%r7312, %r2199, %r2201, %r7309;
	mad.lo.s32 	%r7315, %r2197, %r2196, %r7312;
	shl.b32 	%r7316, %r7315, 2;
	mov.u32 	%r7317, _ZN6kernel5shmemE;
	add.s32 	%r7318, %r7317, %r7316;
	shl.b32 	%r7319, %r46, 4;
	add.s32 	%r7320, %r7318, %r7319;
	st.shared.v4.u32 	[%r7320], {%r7615, %r7614, %r7613, %r7608};
	st.shared.v4.u32 	[%r7320+512], {%r7606, %r7605, %r7574, %r7573};
	st.shared.v4.u32 	[%r7320+1024], {%r7604, %r7602, %r7567, %r7566};

$L__BB0_879:
	setp.ne.s32 	%p553, %r41, %r2196;
	ld.param.u64 	%rd565, [%rd1+104];
	cvta.to.global.u64 	%rd42, %rd565;
	@%p553 bra 	$L__BB0_881;

	mad.lo.s32 	%r7322, %r659, %r1733, %r44;
	mad.lo.s32 	%r7323, %r7322, 768, 384;
	mul.lo.s32 	%r7324, %r7323, %r1731;
	mad.lo.s32 	%r7325, %r42, 384, %r7324;
	add.s32 	%r7326, %r7325, -128;
	mul.wide.s32 	%rd566, %r7326, 4;
	add.s64 	%rd567, %rd42, %rd566;
	add.s64 	%rd569, %rd567, %rd301;
	st.global.v4.u32 	[%rd569+512], {%r7601, %r7600, %r7596, %r7595};
	st.global.v4.u32 	[%rd569+1024], {%r7617, %r7610, %r7620, %r7619};
	st.global.v4.u32 	[%rd569+1536], {%r7615, %r7614, %r7613, %r7608};

$L__BB0_881:
	setp.ne.s32 	%p555, %r42, %r2201;
	@%p555 bra 	$L__BB0_884;

	mad.lo.s32 	%r7328, %r660, %r1732, %r43;
	mad.lo.s32 	%r7334, %r2603, 384, %r73;
	mad.lo.s32 	%r7335, %r7328, %r1811, %r7334;
	mad.lo.s32 	%r7338, %r1813, %r72, %r7335;
	mul.wide.s32 	%rd570, %r7338, 4;
	add.s64 	%rd571, %rd42, %rd570;
	add.s64 	%rd43, %rd571, %rd301;
	st.global.v4.u32 	[%rd43], {%r7615, %r7614, %r7613, %r7608};
	st.global.v4.u32 	[%rd43+512], {%r7606, %r7605, %r7574, %r7573};
	st.global.v4.u32 	[%rd43+1024], {%r7604, %r7602, %r7567, %r7566};
	@%p284 bra 	$L__BB0_884;

	st.global.v4.u32 	[%rd43+1536], {%r7778, %r7777, %r7780, %r7779};

$L__BB0_884:
	rem.s32 	%r7339, %r7648, %r1734;
	setp.eq.s32 	%p546, %r7339, 0;
	@%p546 bra 	$L__BB0_886;

	bar.sync 	0;
	bra.uni 	$L__BB0_893;

$L__BB0_886:
	@%p218 bra 	$L__BB0_888;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_888:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_892;

	membar.gl;
	setp.eq.s32 	%p549, %r433, %r434;
	mov.u32 	%r7354, -2147483647;
	sub.s32 	%r7355, %r7354, %r432;
	selp.b32 	%r7343, %r7355, 1, %p549;
	// begin inline asm
	atom.add.release.gpu.u32 %r7342,[%rd27],%r7343;
	// end inline asm

$L__BB0_890:
	ld.volatile.u32 	%r7356, [%rd27];
	xor.b32  	%r7357, %r7356, %r7342;
	setp.gt.s32 	%p550, %r7357, -1;
	@%p550 bra 	$L__BB0_890;

	// begin inline asm
	ld.acquire.gpu.u32 %r7358,[%rd27];
	// end inline asm

$L__BB0_892:
	bar.sync 	0;

$L__BB0_893:
	setp.lt.s32 	%p551, %r1466, %r49;
	mov.u32 	%r7781, %r7939;
	mov.u32 	%r7782, %r7940;
	mov.u32 	%r7769, %r7925;
	mov.u32 	%r7770, %r7926;
	mov.u32 	%r7771, %r7927;
	mov.u32 	%r7772, %r7928;
	mov.u32 	%r7783, %r7941;
	mov.u32 	%r7784, %r7942;
	mov.u32 	%r7785, %r7943;
	mov.u32 	%r7786, %r7944;
	mov.u32 	%r7787, %r7945;
	mov.u32 	%r7788, %r7946;
	mov.u32 	%r7773, %r7931;
	mov.u32 	%r7774, %r7932;
	mov.u32 	%r7775, %r7933;
	mov.u32 	%r7776, %r7934;
	mov.u32 	%r7789, %r7947;
	mov.u32 	%r7790, %r7948;
	mov.u32 	%r7791, %r7949;
	mov.u32 	%r7792, %r7950;
	mov.u32 	%r7568, %r504;
	mov.u32 	%r7569, %r7847;
	mov.u32 	%r7572, %r505;
	mov.u32 	%r7575, %r7849;
	mov.u32 	%r7580, %r510;
	mov.u32 	%r7584, %r513;
	mov.u32 	%r7592, %r7854;
	mov.u32 	%r7597, %r7856;
	mov.u32 	%r7603, %r531;
	mov.u32 	%r7607, %r539;
	mov.u32 	%r7609, %r541;
	mov.u32 	%r7612, %r543;
	mov.u32 	%r7616, %r547;
	mov.u32 	%r7621, %r551;
	mov.u32 	%r7648, %r1466;
	@%p551 bra 	$L__BB0_332;

$L__BB0_894:
	ret;

}

