//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7888>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1729, %r1730}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1731, %r1732}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1733, %r1734}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1735, %r1736}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1737, %r1738}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1739, %r1740}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1741, %r1742}, [_ZN6kernel16SimulationKernelI7__half2fLi4ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1743, 32;
	sub.s32 	%r27, %r1743, %r1736;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1744, %r1742, -1;
	mad.lo.s32 	%r1745, %r1744, %r1741, %r1740;
	add.s32 	%r1746, %r1735, %r1734;
	add.s32 	%r1747, %r1746, %r1745;
	add.s32 	%r1748, %r1747, 1;
	mul.lo.s32 	%r1749, %r1729, %r1731;
	shl.b32 	%r29, %r1749, 1;
	shl.b32 	%r1750, %r1749, 2;
	div.s32 	%r1751, %r1748, %r1750;
	add.s32 	%r1752, %r1751, 1;
	mul.lo.s32 	%r1753, %r1752, %r1735;
	mul.lo.s32 	%r1754, %r1730, %r1732;
	shl.b32 	%r30, %r1754, 1;
	div.s32 	%r1755, %r1753, %r30;
	add.s32 	%r1756, %r1755, 1;
	mul.lo.s32 	%r31, %r1756, %r1734;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7255, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7255, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1759, %r1731, %r26, %r25;
	mad.lo.s32 	%r1760, %r1759, %r1730, %r24;
	mad.lo.s32 	%r1761, %r1760, %r1729, %r23;
	shl.b32 	%r35, %r1761, 5;
	add.s32 	%r7260, %r35, %r28;
	mul.lo.s32 	%r1762, %r1754, %r1749;
	shl.b32 	%r39, %r1762, 5;
	shl.b32 	%r1763, %r1736, 2;
	mov.u32 	%r1764, 128;
	sub.s32 	%r40, %r1764, %r1763;
	mul.lo.s32 	%r1765, %r1735, %r1734;
	mul.lo.s32 	%r1766, %r1765, %r1742;
	mul.lo.s32 	%r1767, %r1766, %r40;
	mul.lo.s32 	%r41, %r1767, 3;
	setp.ge.s32 	%p13, %r7260, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1768, %r28;
	add.s32 	%r1769, %r41, %r1768;
	sub.s32 	%r1770, %r1769, %r35;
	mul.lo.s32 	%r1771, %r1754, %r1729;
	mul.lo.s32 	%r1772, %r1771, %r1731;
	shl.b32 	%r1773, %r1772, 5;
	div.u32 	%r42, %r1770, %r1773;
	add.s32 	%r1774, %r42, 1;
	and.b32  	%r7257, %r1774, 3;
	setp.eq.s32 	%p14, %r7257, 0;
	mov.u32 	%r7258, %r7260;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7258, %r7260;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7258, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1775, 0;
	st.global.u32 	[%rd44], %r1775;
	add.s32 	%r7258, %r7258, %r39;
	add.s32 	%r7257, %r7257, -1;
	setp.ne.s32 	%p15, %r7257, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7258, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1776, 0;
	st.global.u32 	[%rd46], %r1776;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1776;
	add.s32 	%r1777, %r7258, %r39;
	add.s32 	%r1778, %r1777, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1776;
	add.s32 	%r1779, %r1778, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1776;
	add.s32 	%r7258, %r1779, %r39;
	setp.lt.s32 	%p17, %r7258, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1780, %r1735, %r29;
	div.s32 	%r1781, %r1780, %r30;
	mul.lo.s32 	%r1782, %r1781, %r1734;
	sub.s32 	%r51, %r1782, %r29;
	sub.s32 	%r1783, %r1734, %r30;
	mul.lo.s32 	%r1784, %r1783, %r1731;
	mul.lo.s32 	%r52, %r1729, 384;
	add.s32 	%r1785, %r52, %r52;
	add.s32 	%r1786, %r1785, 128;
	mul.lo.s32 	%r1788, %r1754, 768;
	mul.lo.s32 	%r1789, %r1784, %r1786;
	mad.lo.s32 	%r53, %r1788, %r51, %r1789;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7241, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7260, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7241;
	add.s32 	%r7260, %r7260, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7260, %r53;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7302, %r1729, %r25, %r23;
	mul.lo.s32 	%r57, %r1730, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7302, %r1734;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1790, 31;
	sub.s32 	%r1791, %r1790, %r28;
	selp.b32 	%r1792, %r28, %r1791, %p20;
	shl.b32 	%r1793, %r1792, 2;
	mov.u32 	%r1794, 2;
	sub.s32 	%r59, %r1793, %r1737;
	sub.s32 	%r1795, %r1794, %r1737;
	add.s32 	%r60, %r1795, %r1793;
	shl.b32 	%r61, %r1765, 6;
	add.s32 	%r62, %r1734, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1797, %r66, 31;
	add.s32 	%r1798, %r66, %r1797;
	shr.s32 	%r68, %r1798, 1;
	and.b32  	%r1799, %r1798, -2;
	sub.s32 	%r1800, %r66, %r1799;
	add.s32 	%r67, %r1800, %r61;
	rem.s32 	%r1835, %r63, %r40;
	add.s32 	%r1836, %r1835, %r40;
	rem.s32 	%r91, %r1836, %r40;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	mov.u32 	%r7261, %r7302;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1735;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7261;
	rem.s32 	%r1801, %r59, %r40;
	add.s32 	%r1802, %r1801, %r40;
	rem.s32 	%r71, %r1802, %r40;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	mul.lo.s32 	%r73, %r7261, %r1735;
	add.s32 	%r1805, %r1734, %r7261;
	mul.lo.s32 	%r74, %r1805, %r1735;
	add.s32 	%r1806, %r1805, %r1734;
	mul.lo.s32 	%r75, %r1806, %r1735;
	mov.u32 	%r7262, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7262, %r1734;
	add.s32 	%r78, %r77, %r7261;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1809, %r73, %r7262;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r71;
	mul.wide.s32 	%rd54, %r1811, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1812, %r1810, %r72;
	mul.wide.s32 	%rd56, %r1812, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1813, %r83, %r28;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r61, %r1814;
	mul.wide.s32 	%rd58, %r1815, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7263;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1818, %r74, %r7262;
	mul.lo.s32 	%r1819, %r1818, %r40;
	add.s32 	%r1820, %r1819, %r71;
	mul.wide.s32 	%rd60, %r1820, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1821, %r1819, %r72;
	mul.wide.s32 	%rd62, %r1821, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1822, %r65, %r79;
	mul.wide.s32 	%rd64, %r1822, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7264;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1825, %r75, %r7262;
	mul.lo.s32 	%r1826, %r1825, %r40;
	add.s32 	%r1827, %r1826, %r71;
	mul.wide.s32 	%rd66, %r1827, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1828, %r1826, %r72;
	mul.wide.s32 	%rd68, %r1828, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1829, %r70, %r1734;
	add.s32 	%r1830, %r1829, %r77;
	shl.b32 	%r90, %r1830, 5;
	add.s32 	%r1831, %r90, %r28;
	shl.b32 	%r1832, %r1831, 2;
	add.s32 	%r1833, %r61, %r1832;
	add.s32 	%r1834, %r1833, 2;
	mul.wide.s32 	%rd70, %r1834, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7265;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1841, %r73, %r7262;
	mul.lo.s32 	%r1842, %r1841, %r40;
	add.s32 	%r1843, %r1842, %r91;
	mul.wide.s32 	%rd72, %r1843, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1844, %r1842, %r92;
	mul.wide.s32 	%rd74, %r1844, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1845, %r83, %r68;
	shl.b32 	%r1846, %r1845, 2;
	add.s32 	%r1847, %r67, %r1846;
	mul.wide.s32 	%rd76, %r1847, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7266;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1850, %r74, %r7262;
	mul.lo.s32 	%r1851, %r1850, %r40;
	add.s32 	%r1852, %r1851, %r91;
	mul.wide.s32 	%rd78, %r1852, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1853, %r1851, %r92;
	mul.wide.s32 	%rd80, %r1853, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1854, %r66, %r79;
	mul.wide.s32 	%rd82, %r1854, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7267;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1857, %r75, %r7262;
	mul.lo.s32 	%r1858, %r1857, %r40;
	add.s32 	%r1859, %r1858, %r91;
	mul.wide.s32 	%rd84, %r1859, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1860, %r1858, %r92;
	mul.wide.s32 	%rd86, %r1860, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1861, %r90, %r68;
	shl.b32 	%r1862, %r1861, 2;
	add.s32 	%r1863, %r67, %r1862;
	add.s32 	%r1864, %r1863, 2;
	mul.wide.s32 	%rd88, %r1864, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7268;
	add.s32 	%r7262, %r7262, %r1754;
	setp.lt.s32 	%p28, %r7262, %r1735;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7261, %r7261, %r1749;
	setp.lt.s32 	%p29, %r7261, %r1734;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7269, %r7302;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1735;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7270, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1866, %r7270, 31;
	add.s32 	%r1867, %r7270, %r1866;
	shr.s32 	%r1868, %r1867, 1;
	mad.lo.s32 	%r1869, %r1868, %r1734, %r7269;
	shl.b32 	%r108, %r1869, 5;
	add.s32 	%r109, %r7270, -2;
	mul.lo.s32 	%r110, %r109, %r1734;
	add.s32 	%r1870, %r1735, %r109;
	mul.lo.s32 	%r111, %r1870, %r1734;
	add.s32 	%r1871, %r1870, %r1735;
	mul.lo.s32 	%r112, %r1871, %r1734;
	add.s32 	%r113, %r110, %r1734;
	add.s32 	%r114, %r7270, -1;
	add.s32 	%r1872, %r1735, %r114;
	mul.lo.s32 	%r115, %r1872, %r1734;
	add.s32 	%r1873, %r1872, %r1735;
	mul.lo.s32 	%r116, %r1873, %r1734;
	add.s32 	%r1874, %r1735, %r7270;
	mul.lo.s32 	%r117, %r1874, %r1734;
	add.s32 	%r1875, %r1874, %r1735;
	mul.lo.s32 	%r118, %r1875, %r1734;
	mul.lo.s32 	%r119, %r7270, %r1734;
	add.s32 	%r120, %r119, %r1734;
	add.s32 	%r121, %r7270, 1;
	add.s32 	%r1876, %r1735, %r121;
	mul.lo.s32 	%r122, %r1876, %r1734;
	add.s32 	%r1877, %r1876, %r1735;
	mul.lo.s32 	%r123, %r1877, %r1734;
	add.s32 	%r124, %r120, %r1734;
	add.s32 	%r125, %r7270, 2;
	add.s32 	%r1878, %r1735, %r125;
	mul.lo.s32 	%r126, %r1878, %r1734;
	add.s32 	%r1879, %r1878, %r1735;
	mul.lo.s32 	%r127, %r1879, %r1734;
	mov.u32 	%r7273, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1880, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1880;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1880, %r7269;
	setp.lt.s32 	%p33, %r129, %r1734;
	or.b32  	%r1881, %r109, %r129;
	setp.gt.s32 	%p34, %r1881, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1735;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1884, %r110, %r129;
	mul.wide.s32 	%rd93, %r1884, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7272, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1885, %r7273, %r108;
	mul.wide.s32 	%rd95, %r1885, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7272;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1888, %r111, %r129;
	mul.wide.s32 	%rd97, %r1888, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7274, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1889, %r7273, %r108;
	mul.wide.s32 	%rd99, %r1889, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7274;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1892, %r112, %r129;
	mul.wide.s32 	%rd101, %r1892, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7276, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1893, %r7273, %r108;
	mul.wide.s32 	%rd103, %r1893, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7276;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_57:
	or.b32  	%r1894, %r114, %r129;
	setp.gt.s32 	%p40, %r1894, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7270, %r1735;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1897, %r113, %r129;
	mul.wide.s32 	%rd105, %r1897, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7278, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1898, %r7273, %r108;
	mul.wide.s32 	%rd107, %r1898, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7278;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1901, %r115, %r129;
	mul.wide.s32 	%rd109, %r1901, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7280, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1902, %r7273, %r108;
	mul.wide.s32 	%rd111, %r1902, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7280;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1905, %r116, %r129;
	mul.wide.s32 	%rd113, %r1905, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7282, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1906, %r7273, %r108;
	mul.wide.s32 	%rd115, %r1906, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7282;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_72:
	or.b32  	%r1907, %r7270, %r129;
	setp.gt.s32 	%p47, %r1907, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7270, %r1735;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1910, %r119, %r129;
	mul.wide.s32 	%rd117, %r1910, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7284, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1911, %r7273, %r108;
	mul.wide.s32 	%rd119, %r1911, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7284;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1914, %r117, %r129;
	mul.wide.s32 	%rd121, %r1914, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7286, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1915, %r7273, %r108;
	mul.wide.s32 	%rd123, %r1915, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7286;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1918, %r118, %r129;
	mul.wide.s32 	%rd125, %r1918, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7288, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1919, %r7273, %r108;
	mul.wide.s32 	%rd127, %r1919, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7288;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_87:
	or.b32  	%r1920, %r121, %r129;
	setp.gt.s32 	%p54, %r1920, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1735;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1923, %r120, %r129;
	mul.wide.s32 	%rd129, %r1923, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7290, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1924, %r7273, %r108;
	mul.wide.s32 	%rd131, %r1924, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7290;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1927, %r122, %r129;
	mul.wide.s32 	%rd133, %r1927, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7292, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1928, %r7273, %r108;
	mul.wide.s32 	%rd135, %r1928, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7292;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1931, %r123, %r129;
	mul.wide.s32 	%rd137, %r1931, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7294, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1932, %r7273, %r108;
	mul.wide.s32 	%rd139, %r1932, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7294;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_102:
	or.b32  	%r1933, %r125, %r129;
	setp.gt.s32 	%p61, %r1933, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1735;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1936, %r124, %r129;
	mul.wide.s32 	%rd141, %r1936, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7296, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1937, %r7273, %r108;
	mul.wide.s32 	%rd143, %r1937, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7296;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1940, %r126, %r129;
	mul.wide.s32 	%rd145, %r1940, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7298, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1941, %r7273, %r108;
	mul.wide.s32 	%rd147, %r1941, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7298;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1944, %r127, %r129;
	mul.wide.s32 	%rd149, %r1944, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7300, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1945, %r7273, %r108;
	mul.wide.s32 	%rd151, %r1945, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7300;
	add.s32 	%r7273, %r7273, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7270, %r7270, %r30;
	setp.lt.s32 	%p69, %r7270, %r1735;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7269, %r7269, %r1749;
	setp.lt.s32 	%p70, %r7269, %r1734;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1738, 1;
	ld.param.u64 	%rd155, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1991, %r1739, 31;
	add.s32 	%r1992, %r1739, %r1991;
	bfe.u32 	%r233, %r1992, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1735;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7308, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1994, %r7308, 31;
	add.s32 	%r1995, %r7308, %r1994;
	shr.s32 	%r1996, %r1995, 1;
	mad.lo.s32 	%r1997, %r1996, %r1734, %r7302;
	shl.b32 	%r237, %r1997, 5;
	add.s32 	%r238, %r7308, -2;
	mul.lo.s32 	%r239, %r238, %r1734;
	add.s32 	%r1998, %r1735, %r238;
	mul.lo.s32 	%r240, %r1998, %r1734;
	add.s32 	%r241, %r239, %r1734;
	add.s32 	%r242, %r7308, -1;
	add.s32 	%r1999, %r1735, %r242;
	mul.lo.s32 	%r243, %r1999, %r1734;
	add.s32 	%r2000, %r1735, %r7308;
	mul.lo.s32 	%r244, %r2000, %r1734;
	mul.lo.s32 	%r245, %r7308, %r1734;
	add.s32 	%r246, %r245, %r1734;
	add.s32 	%r247, %r7308, 1;
	add.s32 	%r2001, %r1735, %r247;
	mul.lo.s32 	%r248, %r2001, %r1734;
	add.s32 	%r249, %r246, %r1734;
	add.s32 	%r250, %r7308, 2;
	add.s32 	%r2002, %r1735, %r250;
	mul.lo.s32 	%r251, %r2002, %r1734;
	mov.u32 	%r7312, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2003, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2003;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r2003, %r7302;
	setp.lt.s32 	%p83, %r253, %r1734;
	or.b32  	%r2004, %r238, %r253;
	setp.gt.s32 	%p84, %r2004, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1735;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r2006, %r239, %r253;
	shl.b32 	%r2007, %r2006, 1;
	mul.wide.s32 	%rd177, %r2007, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7310, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7312, %r237;
	mul.wide.s32 	%rd179, %r258, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7310;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r2011, %r240, %r253;
	shl.b32 	%r2012, %r2011, 1;
	mul.wide.s32 	%rd181, %r2012, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7311, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2015, %r258, 1;
	mul.wide.s32 	%rd183, %r2015, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7311;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r2017, %r239, %r253;
	shl.b32 	%r2018, %r2017, 1;
	or.b32  	%r2019, %r2018, 1;
	mul.wide.s32 	%rd185, %r2019, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7313, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7312, %r237;
	mul.wide.s32 	%rd187, %r269, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7313;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r2023, %r240, %r253;
	shl.b32 	%r2024, %r2023, 1;
	or.b32  	%r2025, %r2024, 1;
	mul.wide.s32 	%rd189, %r2025, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7314, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2028, %r269, 1;
	mul.wide.s32 	%rd191, %r2028, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7314;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_168:
	or.b32  	%r2029, %r242, %r253;
	setp.gt.s32 	%p93, %r2029, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7308, %r1735;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r2031, %r241, %r253;
	shl.b32 	%r2032, %r2031, 1;
	mul.wide.s32 	%rd193, %r2032, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7316, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7312, %r237;
	mul.wide.s32 	%rd195, %r280, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7316;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r2036, %r243, %r253;
	shl.b32 	%r2037, %r2036, 1;
	mul.wide.s32 	%rd197, %r2037, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7317, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2040, %r280, 1;
	mul.wide.s32 	%rd199, %r2040, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7317;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r2042, %r241, %r253;
	shl.b32 	%r2043, %r2042, 1;
	or.b32  	%r2044, %r2043, 1;
	mul.wide.s32 	%rd201, %r2044, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7319, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7312, %r237;
	mul.wide.s32 	%rd203, %r291, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7319;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2048, %r243, %r253;
	shl.b32 	%r2049, %r2048, 1;
	or.b32  	%r2050, %r2049, 1;
	mul.wide.s32 	%rd205, %r2050, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7320, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2053, %r291, 1;
	mul.wide.s32 	%rd207, %r2053, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7320;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_192:
	or.b32  	%r2054, %r7308, %r253;
	setp.gt.s32 	%p103, %r2054, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7308, %r1735;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2056, %r245, %r253;
	shl.b32 	%r2057, %r2056, 1;
	mul.wide.s32 	%rd209, %r2057, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7322, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7312, %r237;
	mul.wide.s32 	%rd211, %r302, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7322;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2061, %r244, %r253;
	shl.b32 	%r2062, %r2061, 1;
	mul.wide.s32 	%rd213, %r2062, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2065, %r302, 1;
	mul.wide.s32 	%rd215, %r2065, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7323;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2067, %r245, %r253;
	shl.b32 	%r2068, %r2067, 1;
	or.b32  	%r2069, %r2068, 1;
	mul.wide.s32 	%rd217, %r2069, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7312, %r237;
	mul.wide.s32 	%rd219, %r313, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7325;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2073, %r244, %r253;
	shl.b32 	%r2074, %r2073, 1;
	or.b32  	%r2075, %r2074, 1;
	mul.wide.s32 	%rd221, %r2075, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2078, %r313, 1;
	mul.wide.s32 	%rd223, %r2078, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7326;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_216:
	or.b32  	%r2079, %r247, %r253;
	setp.gt.s32 	%p113, %r2079, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1735;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2081, %r246, %r253;
	shl.b32 	%r2082, %r2081, 1;
	mul.wide.s32 	%rd225, %r2082, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7312, %r237;
	mul.wide.s32 	%rd227, %r324, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7328;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2086, %r248, %r253;
	shl.b32 	%r2087, %r2086, 1;
	mul.wide.s32 	%rd229, %r2087, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2090, %r324, 1;
	mul.wide.s32 	%rd231, %r2090, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7329;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2092, %r246, %r253;
	shl.b32 	%r2093, %r2092, 1;
	or.b32  	%r2094, %r2093, 1;
	mul.wide.s32 	%rd233, %r2094, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7331, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7312, %r237;
	mul.wide.s32 	%rd235, %r335, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7331;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2098, %r248, %r253;
	shl.b32 	%r2099, %r2098, 1;
	or.b32  	%r2100, %r2099, 1;
	mul.wide.s32 	%rd237, %r2100, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7332, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2103, %r335, 1;
	mul.wide.s32 	%rd239, %r2103, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7332;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_240:
	or.b32  	%r2104, %r250, %r253;
	setp.gt.s32 	%p123, %r2104, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1735;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2106, %r249, %r253;
	shl.b32 	%r2107, %r2106, 1;
	mul.wide.s32 	%rd241, %r2107, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7334, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7312, %r237;
	mul.wide.s32 	%rd243, %r346, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7334;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2111, %r251, %r253;
	shl.b32 	%r2112, %r2111, 1;
	mul.wide.s32 	%rd245, %r2112, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7335, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2115, %r346, 1;
	mul.wide.s32 	%rd247, %r2115, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7335;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2117, %r249, %r253;
	shl.b32 	%r2118, %r2117, 1;
	or.b32  	%r2119, %r2118, 1;
	mul.wide.s32 	%rd249, %r2119, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7337, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7337, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7337, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7312, %r237;
	mul.wide.s32 	%rd251, %r357, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7337;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2123, %r251, %r253;
	shl.b32 	%r2124, %r2123, 1;
	or.b32  	%r2125, %r2124, 1;
	mul.wide.s32 	%rd253, %r2125, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7338, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7338, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7338, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2128, %r357, 1;
	mul.wide.s32 	%rd255, %r2128, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7338;
	add.s32 	%r7312, %r7312, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7308, %r7308, %r30;
	setp.lt.s32 	%p134, %r7308, %r1735;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7302, %r7302, %r1749;
	setp.lt.s32 	%p135, %r7302, %r1734;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1946, 31;
	sub.s32 	%r1947, %r1946, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1948, %r28, %r1947, %p73;
	shl.b32 	%r1949, %r1948, 2;
	mov.u32 	%r1950, 2;
	sub.s32 	%r208, %r1949, %r1737;
	sub.s32 	%r1951, %r1950, %r1737;
	add.s32 	%r209, %r1951, %r1949;
	add.s32 	%r210, %r1734, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1976, %r211, %r40;
	add.s32 	%r1977, %r1976, %r40;
	rem.s32 	%r223, %r1977, %r40;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7302, 1;
	rem.s32 	%r1952, %r208, %r40;
	add.s32 	%r1953, %r1952, %r40;
	rem.s32 	%r215, %r1953, %r40;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1958, %r214, %r40;
	add.s32 	%r1959, %r1958, %r215;
	mul.wide.s32 	%rd157, %r1959, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1960, %r1958, %r216;
	mul.wide.s32 	%rd159, %r1960, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1961, %r7302, 5;
	add.s32 	%r1962, %r1961, %r28;
	shl.b32 	%r1963, %r1962, 2;
	mul.wide.s32 	%rd161, %r1963, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7303;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1966, %r214, 1;
	mul.lo.s32 	%r1967, %r1966, %r40;
	add.s32 	%r1968, %r1967, %r215;
	mul.wide.s32 	%rd162, %r1968, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1969, %r1967, %r216;
	mul.wide.s32 	%rd164, %r1969, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1970, %r210, %r7302;
	rem.s32 	%r1971, %r1970, %r1734;
	shl.b32 	%r1972, %r1971, 5;
	add.s32 	%r1973, %r1972, %r28;
	shl.b32 	%r1974, %r1973, 2;
	or.b32  	%r1975, %r1974, 2;
	mul.wide.s32 	%rd166, %r1975, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7304;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1982, %r214, %r40;
	add.s32 	%r1983, %r1982, %r223;
	mul.wide.s32 	%rd167, %r1983, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1984, %r1982, %r224;
	mul.wide.s32 	%rd169, %r1984, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7305, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7305;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1987, %r214, 1;
	mul.lo.s32 	%r1988, %r1987, %r40;
	add.s32 	%r1989, %r1988, %r223;
	mul.wide.s32 	%rd171, %r1989, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1990, %r1988, %r224;
	mul.wide.s32 	%rd173, %r1990, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7306;

$L__BB0_137:
	add.s32 	%r7302, %r7302, %r1749;
	setp.lt.s32 	%p79, %r7302, %r1734;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2130, %r1729, -1;
	mad.lo.s32 	%r2131, %r1730, 576, 128;
	mul.lo.s32 	%r2132, %r2131, %r2130;
	add.s32 	%r2133, %r52, -64;
	add.s32 	%r2134, %r2133, %r52;
	add.s32 	%r2135, %r1730, -1;
	mad.lo.s32 	%r2136, %r2134, %r2135, %r2132;
	mul.lo.s32 	%r2137, %r2130, %r1730;
	mul.lo.s32 	%r2138, %r2137, 320;
	mad.lo.s32 	%r2139, %r2133, %r2135, %r2138;
	add.s32 	%r366, %r2139, %r2136;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7342, 0;
	mov.u32 	%r7340, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7340], %r7517;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2142, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7340+4], %r2142;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2143, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7340+8], %r2143;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7340+12], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	add.s32 	%r7340, %r7340, 16;
	add.s32 	%r7342, %r7342, 4;
	setp.lt.s32 	%p137, %r7342, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7518, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2147, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2148, 31;
	sub.s32 	%r2149, %r2148, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2150, %r28, %r2149, %p138;
	shl.b32 	%r2151, %r2150, 2;
	sub.s32 	%r377, %r2151, %r1737;
	rem.s32 	%r2152, %r377, %r40;
	add.s32 	%r2153, %r2152, %r40;
	rem.s32 	%r378, %r2153, %r40;
	add.s32 	%r2154, %r377, 2;
	rem.s32 	%r2155, %r2154, %r40;
	add.s32 	%r2156, %r2155, %r40;
	rem.s32 	%r379, %r2156, %r40;
	mul.lo.s32 	%r2157, %r378, 6;
	mul.lo.s32 	%r2158, %r379, 6;
	mul.wide.s32 	%rd258, %r2157, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2158, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7345, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7346, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7346, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7347, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2167, %r377, 1;
	rem.s32 	%r2168, %r2167, %r40;
	add.s32 	%r2169, %r2168, %r40;
	rem.s32 	%r392, %r2169, %r40;
	add.s32 	%r2170, %r377, 3;
	rem.s32 	%r2171, %r2170, %r40;
	add.s32 	%r2172, %r2171, %r40;
	rem.s32 	%r393, %r2172, %r40;
	mul.lo.s32 	%r2173, %r392, 6;
	mul.lo.s32 	%r2174, %r393, 6;
	mul.wide.s32 	%rd260, %r2173, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2174, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7348, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7348, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7349, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7349, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7350, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7350, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7351, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7351, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2183, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2183;
	// begin inline asm
	mov.u32 %r2184, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2184;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2185, %nctaid.x;
	mov.u32 	%r2186, %nctaid.y;
	mul.lo.s32 	%r2187, %r2185, %r2186;
	mov.u32 	%r2188, %nctaid.z;
	mul.lo.s32 	%r406, %r2187, %r2188;
	neg.s32 	%r2189, %r24;
	add.s32 	%r2190, %r28, %r23;
	setp.ne.s32 	%p148, %r2190, %r2189;
	mov.u32 	%r2191, %ctaid.x;
	add.s32 	%r407, %r2191, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2192, -2147483647;
	sub.s32 	%r2193, %r2192, %r406;
	selp.b32 	%r2194, %r2193, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r409, [%rd264], %r2194;

$L__BB0_298:
	ld.volatile.u32 	%r2195, [%rd24+4];
	xor.b32  	%r2196, %r2195, %r409;
	setp.gt.s32 	%p150, %r2196, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	shr.s32 	%r2210, %r1739, 31;
	shr.u32 	%r2211, %r2210, 30;
	add.s32 	%r2212, %r1739, %r2211;
	shr.s32 	%r410, %r2212, 2;
	add.s32 	%r2213, %r28, 27;
	mul.hi.s32 	%r2214, %r2213, -1840700269;
	add.s32 	%r2215, %r2214, %r2213;
	shr.u32 	%r2216, %r2215, 31;
	shr.s32 	%r2217, %r2215, 4;
	add.s32 	%r2218, %r2217, %r2216;
	mul.lo.s32 	%r2219, %r2218, 28;
	sub.s32 	%r2220, %r2213, %r2219;
	add.s32 	%r2221, %r28, 29;
	mul.hi.s32 	%r2222, %r2221, -1840700269;
	add.s32 	%r2223, %r2222, %r2221;
	shr.u32 	%r2224, %r2223, 31;
	shr.s32 	%r2225, %r2223, 4;
	add.s32 	%r2226, %r2225, %r2224;
	mul.lo.s32 	%r2227, %r2226, 28;
	sub.s32 	%r2228, %r2221, %r2227;
	shr.u32 	%r2229, %r1739, 31;
	add.s32 	%r2230, %r1739, %r2229;
	and.b32  	%r2231, %r2230, -2;
	sub.s32 	%r411, %r1739, %r2231;
	setp.lt.s32 	%p152, %r28, 28;
	selp.b32 	%r412, %r2220, %r28, %p152;
	selp.b32 	%r413, %r2228, %r28, %p152;
	mov.u32 	%r2209, 0;
	// begin inline asm
	{mov.u32 %r2232, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2558, %r2232, 8;
	add.s32 	%r2559, %r2558, -8192;
	or.b32  	%r2236, %r2559, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7629, %r2147;
	mov.u32 	%r7659, %r2147;
	mov.u32 	%r7630, %r2147;
	mov.u32 	%r7660, %r2147;
	mov.u32 	%r7631, %r2147;
	mov.u32 	%r7357, %r2147;
	mov.u32 	%r7358, %r2147;
	mov.u32 	%r7672, %r2147;
	mov.u32 	%r7661, %r2147;
	mov.u32 	%r7662, %r2147;
	mov.u32 	%r7632, %r2147;
	mov.u32 	%r7633, %r2147;
	mov.u32 	%r7634, %r2147;
	mov.u32 	%r7365, %r2147;
	mov.u32 	%r7366, %r2147;
	mov.u32 	%r7671, %r2147;
	mov.u32 	%r7663, %r2147;
	mov.u32 	%r7664, %r2147;
	mov.u32 	%r7641, %r2147;
	mov.u32 	%r7371, %r2147;
	mov.u32 	%r7372, %r2147;
	mov.u32 	%r7373, %r2147;
	mov.u32 	%r7682, %r2147;
	mov.u32 	%r7668, %r2147;
	mov.u32 	%r7673, %r2147;
	mov.u32 	%r7642, %r2147;
	mov.u32 	%r7378, %r2147;
	mov.u32 	%r7379, %r2147;
	mov.u32 	%r7380, %r2147;
	mov.u32 	%r7676, %r2147;
	mov.u32 	%r7665, %r2147;
	mov.u32 	%r7674, %r2147;
	mov.u32 	%r7643, %r2147;
	mov.u32 	%r7644, %r2147;
	mov.u32 	%r7386, %r2147;
	mov.u32 	%r7677, %r2147;
	mov.u32 	%r7678, %r2147;
	mov.u32 	%r7389, %r2147;
	mov.u32 	%r7645, %r2147;
	mov.u32 	%r7646, %r2147;
	mov.u32 	%r7647, %r2147;
	mov.u32 	%r7393, %r2147;
	mov.u32 	%r7679, %r2147;
	mov.u32 	%r7680, %r2147;
	mov.u32 	%r7648, %r2147;
	mov.u32 	%r7649, %r2147;
	mov.u32 	%r7650, %r2147;
	mov.u32 	%r7635, %r2147;
	mov.u32 	%r7400, %r2147;
	mov.u32 	%r7666, %r2147;
	mov.u32 	%r7667, %r2147;
	mov.u32 	%r7636, %r2147;
	mov.u32 	%r7404, %r2147;
	mov.u32 	%r7669, %r2147;
	mov.u32 	%r7670, %r2147;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7408, %r2147;
	mov.u32 	%r7409, %r2147;
	mov.u32 	%r7410, %r2147;
	mov.u32 	%r7555, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7413, %r2147;
	mov.u32 	%r7414, %r2147;
	mov.u32 	%r7415, %r2147;
	mov.u32 	%r7556, %r2147;
	mov.u32 	%r7701, %r2147;
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7419, %r2147;
	mov.u32 	%r7420, %r2147;
	mov.u32 	%r7421, %r2147;
	mov.u32 	%r7557, %r2147;
	mov.u32 	%r7423, %r2147;
	mov.u32 	%r7703, %r2147;
	mov.u32 	%r7704, %r2147;
	mov.u32 	%r7426, %r2147;
	mov.u32 	%r7427, %r2147;
	mov.u32 	%r7428, %r2147;
	mov.u32 	%r7559, %r2147;
	mov.u32 	%r7430, %r2147;
	mov.u32 	%r7431, %r2147;
	mov.u32 	%r7432, %r2147;
	mov.u32 	%r7433, %r2147;
	mov.u32 	%r7683, %r2147;
	mov.u32 	%r7435, %r2147;
	mov.u32 	%r7436, %r2147;
	mov.u32 	%r7437, %r2147;
	mov.u32 	%r7438, %r2147;
	mov.u32 	%r7684, %r2147;
	mov.u32 	%r7651, %r2147;
	mov.u32 	%r7652, %r2147;
	mov.u32 	%r7653, %r2147;
	mov.u32 	%r7654, %r2147;
	mov.u32 	%r7444, %r2147;
	mov.u32 	%r7445, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7447, %r2147;
	mov.u32 	%r7448, %r2147;
	mov.u32 	%r7563, %r2147;
	mov.u32 	%r7450, %r2147;
	mov.u32 	%r7451, %r2147;
	mov.u32 	%r7452, %r2147;
	mov.u32 	%r7453, %r2147;
	mov.u32 	%r7710, %r2147;
	mov.u32 	%r7455, %r2147;
	mov.u32 	%r7456, %r2147;
	mov.u32 	%r7566, %r2147;
	mov.u32 	%r7458, %r2147;
	mov.u32 	%r7459, %r2147;
	mov.u32 	%r7460, %r2147;
	mov.u32 	%r7461, %r2147;
	mov.u32 	%r7711, %r2147;
	mov.u32 	%r7463, %r2147;
	mov.u32 	%r7464, %r2147;
	mov.u32 	%r7465, %r2147;
	mov.u32 	%r7569, %r2147;
	mov.u32 	%r7467, %r2147;
	mov.u32 	%r7468, %r2147;
	mov.u32 	%r7469, %r2147;
	mov.u32 	%r7470, %r2147;
	mov.u32 	%r7712, %r2147;
	mov.u32 	%r7472, %r2147;
	mov.u32 	%r7473, %r2147;
	mov.u32 	%r7474, %r2147;
	mov.u32 	%r7572, %r2147;
	mov.u32 	%r7476, %r2147;
	mov.u32 	%r7477, %r2147;
	mov.u32 	%r7478, %r2147;
	mov.u32 	%r7479, %r2147;
	mov.u32 	%r7480, %r2147;
	mov.u32 	%r7481, %r2147;
	mov.u32 	%r7482, %r2147;
	mov.u32 	%r7483, %r2147;
	mov.u32 	%r7484, %r2147;
	mov.u32 	%r7485, %r2147;
	mov.u32 	%r7486, %r2147;
	mov.u32 	%r7487, %r2147;
	mov.u32 	%r7488, %r2147;
	mov.u32 	%r7489, %r2147;
	mov.u32 	%r7490, %r2147;
	mov.u32 	%r7491, %r2147;
	mov.u32 	%r7492, %r2147;
	mov.u32 	%r7493, %r2147;
	mov.u32 	%r7494, %r2147;
	mov.u32 	%r7495, %r2147;
	mov.u32 	%r7496, %r2147;
	mov.u32 	%r7497, %r2147;
	mov.u32 	%r7498, %r2209;
	mov.u32 	%r7499, %r2209;
	mov.u32 	%r7500, %r2209;
	mov.u32 	%r7501, %r2209;
	mov.u32 	%r7502, %r2209;
	mov.u32 	%r7503, %r2209;
	mov.u32 	%r7504, %r2209;
	mov.u32 	%r7505, %r2209;
	mov.u32 	%r7506, %r2209;
	mov.u32 	%r7507, %r2209;
	mov.u32 	%r7508, %r2209;
	mov.u32 	%r7509, %r2209;
	mov.u32 	%r7637, %r2147;
	mov.u32 	%r7638, %r2147;
	mov.u32 	%r7639, %r2147;
	mov.u32 	%r7640, %r2147;
	mov.u32 	%r7655, %r2147;
	mov.u32 	%r7656, %r2147;
	mov.u32 	%r7516, %r2209;

$L__BB0_302:
	mov.u32 	%r551, %r7712;
	mov.u32 	%r550, %r7470;
	mov.u32 	%r542, %r7711;
	mov.u32 	%r541, %r7461;
	mov.u32 	%r534, %r7710;
	mov.u32 	%r526, %r7708;
	mov.u32 	%r7470, %r7704;
	mov.u32 	%r496, %r7703;
	mov.u32 	%r7461, %r7702;
	mov.u32 	%r488, %r7701;
	mov.u32 	%r481, %r7700;
	mov.u32 	%r474, %r7699;
	sub.s32 	%r7252, %r1734, %r30;
	mov.u32 	%r2247, 1;
	not.b32 	%r2521, %r25;
	mov.u32 	%r2513, -1;
	add.s32 	%r2522, %r1731, %r2521;
	mul.lo.s32 	%r2523, %r2522, %r1733;
	add.s32 	%r2524, %r7516, %r2523;
	not.b32 	%r2526, %r26;
	add.s32 	%r2527, %r1732, %r2526;
	mul.lo.s32 	%r2528, %r2527, %r1733;
	add.s32 	%r2529, %r7516, %r2528;
	add.s32 	%r2530, %r2523, %r2528;
	add.s32 	%r2531, %r2530, %r1734;
	not.b32 	%r2532, %r23;
	add.s32 	%r2533, %r1729, %r2532;
	mad.lo.s32 	%r2534, %r2522, %r1729, %r2533;
	not.b32 	%r2535, %r24;
	add.s32 	%r2536, %r1730, %r2535;
	mad.lo.s32 	%r2537, %r2527, %r1730, %r2536;
	add.s32 	%r2538, %r2534, %r2537;
	shl.b32 	%r2539, %r2538, 1;
	add.s32 	%r2540, %r2531, %r2539;
	add.s32 	%r2541, %r7516, %r2540;
	add.s32 	%r2542, %r7516, %r2530;
	div.s32 	%r2543, %r2541, %r1734;
	neg.s32 	%r2544, %r1734;
	sub.s32 	%r2547, %r30, %r1734;
	sub.s32 	%r2548, %r2534, %r2537;
	shl.b32 	%r2549, %r2548, 1;
	add.s32 	%r2550, %r2549, %r1735;
	mad.lo.s32 	%r2551, %r2543, %r30, %r2550;
	mad.lo.s32 	%r2552, %r2543, %r2547, %r2542;
	div.s32 	%r2553, %r2551, %r1735;
	mul.lo.s32 	%r2554, %r2553, %r1735;
	sub.s32 	%r2557, %r1750, %r1735;
	mov.u32 	%r2331, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2233,%r7518,%r2209,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2239, %r7345, %r2233, %p12;
	// begin inline asm
	{mul.f16x2 %r7602,%r2239,%r7497;
}
	// end inline asm
	selp.b32 	%r2242, %r7349, %r2233, %p12;
	// begin inline asm
	{mul.f16x2 %r7600,%r2242,%r7492;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2245,%r7518,%r2247,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2251, %r7345, %r2245, %p12;
	// begin inline asm
	{mul.f16x2 %r7601,%r2251,%r7496;
}
	// end inline asm
	selp.b32 	%r2254, %r7349, %r2245, %p12;
	// begin inline asm
	{mul.f16x2 %r7599,%r2254,%r7491;
}
	// end inline asm
	mov.u32 	%r2259, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2257,%r7518,%r2259,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2263, %r7345, %r2257, %p12;
	// begin inline asm
	{mul.f16x2 %r7598,%r2263,%r7487;
}
	// end inline asm
	selp.b32 	%r2266, %r7349, %r2257, %p12;
	// begin inline asm
	{mul.f16x2 %r7597,%r2266,%r7485;
}
	// end inline asm
	mov.u32 	%r2271, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2269,%r7518,%r2271,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2275, %r7345, %r2269, %p12;
	// begin inline asm
	{mul.f16x2 %r7596,%r2275,%r7684;
}
	// end inline asm
	selp.b32 	%r2278, %r7349, %r2269, %p12;
	// begin inline asm
	{mul.f16x2 %r7594,%r2278,%r7683;
}
	// end inline asm
	mov.u32 	%r2283, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2281,%r7518,%r2283,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2287, %r7345, %r2281, %p12;
	// begin inline asm
	{mul.f16x2 %r7595,%r2287,%r7483;
}
	// end inline asm
	selp.b32 	%r2290, %r7349, %r2281, %p12;
	// begin inline asm
	{mul.f16x2 %r7593,%r2290,%r7480;
}
	// end inline asm
	mov.u32 	%r2295, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2293,%r7518,%r2295,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2299, %r7345, %r2293, %p12;
	// begin inline asm
	{mul.f16x2 %r7592,%r2299,%r7477;
}
	// end inline asm
	selp.b32 	%r2302, %r7349, %r2293, %p12;
	// begin inline asm
	{mul.f16x2 %r7589,%r2302,%r7468;
}
	// end inline asm
	mov.u32 	%r2307, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2305,%r7518,%r2307,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2311, %r7345, %r2305, %p12;
	// begin inline asm
	{mul.f16x2 %r7591,%r2311,%r7476;
}
	// end inline asm
	selp.b32 	%r2314, %r7349, %r2305, %p12;
	// begin inline asm
	{mul.f16x2 %r7588,%r2314,%r7467;
}
	// end inline asm
	mov.u32 	%r2319, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2317,%r7518,%r2319,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2323, %r7345, %r2317, %p12;
	// begin inline asm
	{mul.f16x2 %r7590,%r2323,%r7572;
}
	// end inline asm
	selp.b32 	%r2326, %r7349, %r2317, %p12;
	// begin inline asm
	{mul.f16x2 %r7587,%r2326,%r7569;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2329,%r7518,%r2331,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2335, %r7345, %r2329, %p12;
	// begin inline asm
	{mul.f16x2 %r7586,%r2335,%r7459;
}
	// end inline asm
	selp.b32 	%r2338, %r7349, %r2329, %p12;
	// begin inline asm
	{mul.f16x2 %r7583,%r2338,%r7451;
}
	// end inline asm
	mov.u32 	%r2343, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2341,%r7518,%r2343,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2347, %r7345, %r2341, %p12;
	// begin inline asm
	{mul.f16x2 %r7585,%r2347,%r7458;
}
	// end inline asm
	selp.b32 	%r2350, %r7349, %r2341, %p12;
	// begin inline asm
	{mul.f16x2 %r7582,%r2350,%r7450;
}
	// end inline asm
	mov.u32 	%r2355, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2353,%r7518,%r2355,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2359, %r7345, %r2353, %p12;
	// begin inline asm
	{mul.f16x2 %r7584,%r2359,%r7566;
}
	// end inline asm
	selp.b32 	%r2362, %r7349, %r2353, %p12;
	// begin inline asm
	{mul.f16x2 %r7581,%r2362,%r7563;
}
	// end inline asm
	mov.u32 	%r2367, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2365,%r7518,%r2367,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2371, %r7345, %r2365, %p12;
	// begin inline asm
	{mul.f16x2 %r7580,%r2371,%r7670;
}
	// end inline asm
	selp.b32 	%r2374, %r7349, %r2365, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2374,%r7667;
}
	// end inline asm
	mov.u32 	%r2379, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2377,%r7518,%r2379,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2383, %r7345, %r2377, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2383,%r7680;
}
	// end inline asm
	selp.b32 	%r2386, %r7349, %r2377, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2386,%r7678;
}
	// end inline asm
	mov.u32 	%r2391, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2389,%r7518,%r2391,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2395, %r7345, %r2389, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2395,%r7679;
}
	// end inline asm
	selp.b32 	%r2398, %r7349, %r2389, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2398,%r7677;
}
	// end inline asm
	mov.u32 	%r2403, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2401,%r7518,%r2403,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2407, %r7345, %r2401, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2407,%r7674;
}
	// end inline asm
	selp.b32 	%r2410, %r7349, %r2401, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2410,%r7673;
}
	// end inline asm
	mov.u32 	%r2415, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2413,%r7518,%r2415,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2419, %r7345, %r2413, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2419,%r7430;
}
	// end inline asm
	selp.b32 	%r2422, %r7349, %r2413, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2422,%r7423;
}
	// end inline asm
	mov.u32 	%r2427, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2425,%r7518,%r2427,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2431, %r7345, %r2425, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2431,%r7559;
}
	// end inline asm
	selp.b32 	%r2434, %r7349, %r2425, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2434,%r7557;
}
	// end inline asm
	mov.u32 	%r2439, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2437,%r7518,%r2439,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2443, %r7345, %r2437, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2443,%r7664;
}
	// end inline asm
	selp.b32 	%r2446, %r7349, %r2437, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2446,%r7662;
}
	// end inline asm
	mov.u32 	%r2451, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2449,%r7518,%r2451,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2455, %r7345, %r2449, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2455,%r7663;
}
	// end inline asm
	selp.b32 	%r2458, %r7349, %r2449, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2458,%r7661;
}
	// end inline asm
	mov.u32 	%r2463, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2461,%r7518,%r2463,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2467, %r7345, %r2461, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2467,%r7556;
}
	// end inline asm
	selp.b32 	%r2470, %r7349, %r2461, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2470,%r7555;
}
	// end inline asm
	mov.u32 	%r2475, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2473,%r7518,%r2475,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2479, %r7345, %r2473, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2479,%r7659;
}
	// end inline asm
	selp.b32 	%r2482, %r7349, %r2473, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2482,%r7660;
}
	// end inline asm
	mov.u32 	%r2487, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2485,%r7518,%r2487,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2491, %r7345, %r2485, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2491,%r7665;
}
	// end inline asm
	selp.b32 	%r2494, %r7349, %r2485, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2494,%r7668;
}
	// end inline asm
	mov.u32 	%r2499, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2497,%r7518,%r2499,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2503, %r7345, %r2497, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2503,%r7676;
}
	// end inline asm
	selp.b32 	%r2506, %r7349, %r2497, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2506,%r7682;
}
	// end inline asm
	mov.u32 	%r2511, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2509,%r7518,%r2511,%r2236,%r2513;
}
	// end inline asm
	selp.b32 	%r2515, %r7345, %r2509, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2515,%r7671;
}
	// end inline asm
	selp.b32 	%r2518, %r7349, %r2509, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2518,%r7672;
}
	// end inline asm
	rem.s32 	%r651, %r2524, %r51;
	rem.s32 	%r652, %r2529, %r7252;
	mad.lo.s32 	%r653, %r2543, %r2544, %r2541;
	sub.s32 	%r654, %r2551, %r2554;
	mad.lo.s32 	%r655, %r2553, %r2557, %r2552;
	ld.param.u64 	%rd266, [%rd1+144];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2607, %r655, 1;
	mul.wide.s32 	%rd268, %r2607, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2810, %r1745, 1;
	setp.lt.s32 	%p160, %r655, %r2810;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r655, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7521, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7522, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2610, %r1745, 1;
	setp.lt.s32 	%p155, %r655, %r2610;
	setp.gt.s32 	%p156, %r655, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7519, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7520, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7521, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2818, 0;
	mov.u32 	%r2829, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2816,%r7517,%r2818,%r2236,%r2829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2821,%r7521,%r2816;
}
	// end inline asm
	mov.u32 	%r2827, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2825,%r7517,%r2827,%r2236,%r2829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2830,%r7522,%r2825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r2821,%r2830;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7523, %r7524;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7602,%r7602,%r7523;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7600,%r7600,%r7524;
}
	// end inline asm
	mov.u32 	%r2851, 2;
	mov.u32 	%r2862, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2849,%r7517,%r2851,%r2236,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2854,%r7521,%r2849;
}
	// end inline asm
	mov.u32 	%r2860, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2858,%r7517,%r2860,%r2236,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2863,%r7522,%r2858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r2854,%r2863;
}
	// end inline asm
	mov.u32 	%r7525, %r7526;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7601,%r7601,%r7525;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7599,%r7599,%r7526;
}
	// end inline asm
	mov.u32 	%r2884, 4;
	mov.u32 	%r2895, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2882,%r7517,%r2884,%r2236,%r2895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2887,%r7521,%r2882;
}
	// end inline asm
	mov.u32 	%r2893, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2891,%r7517,%r2893,%r2236,%r2895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2896,%r7522,%r2891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r2887,%r2896;
}
	// end inline asm
	mov.u32 	%r7527, %r7528;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r7527;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7597,%r7597,%r7528;
}
	// end inline asm
	mov.u32 	%r2917, 6;
	mov.u32 	%r2928, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2915,%r7517,%r2917,%r2236,%r2928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2920,%r7521,%r2915;
}
	// end inline asm
	mov.u32 	%r2926, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2924,%r7517,%r2926,%r2236,%r2928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2929,%r7522,%r2924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r2920,%r2929;
}
	// end inline asm
	mov.u32 	%r7529, %r7530;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r7529;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r7530;
}
	// end inline asm
	mov.u32 	%r2950, 8;
	mov.u32 	%r2961, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2948,%r7517,%r2950,%r2236,%r2961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2953,%r7521,%r2948;
}
	// end inline asm
	mov.u32 	%r2959, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2957,%r7517,%r2959,%r2236,%r2961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2962,%r7522,%r2957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r2953,%r2962;
}
	// end inline asm
	mov.u32 	%r7531, %r7532;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7595,%r7595,%r7531;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7532, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7593,%r7593,%r7532;
}
	// end inline asm
	mov.u32 	%r2983, 10;
	mov.u32 	%r2994, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2981,%r7517,%r2983,%r2236,%r2994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2986,%r7521,%r2981;
}
	// end inline asm
	mov.u32 	%r2992, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2990,%r7517,%r2992,%r2236,%r2994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2995,%r7522,%r2990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r2986,%r2995;
}
	// end inline asm
	mov.u32 	%r7533, %r7534;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7533, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r7533;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7534, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7589,%r7589,%r7534;
}
	// end inline asm
	mov.u32 	%r3016, 12;
	mov.u32 	%r3027, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3014,%r7517,%r3016,%r2236,%r3027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3019,%r7521,%r3014;
}
	// end inline asm
	mov.u32 	%r3025, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3023,%r7517,%r3025,%r2236,%r3027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r7522,%r3023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r3019,%r3028;
}
	// end inline asm
	mov.u32 	%r7535, %r7536;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7535, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7591,%r7591,%r7535;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7536, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7588,%r7588,%r7536;
}
	// end inline asm
	mov.u32 	%r3049, 14;
	mov.u32 	%r3060, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3047,%r7517,%r3049,%r2236,%r3060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3052,%r7521,%r3047;
}
	// end inline asm
	mov.u32 	%r3058, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3056,%r7517,%r3058,%r2236,%r3060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3061,%r7522,%r3056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r3052,%r3061;
}
	// end inline asm
	mov.u32 	%r7537, %r7538;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7537, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7586,%r7586,%r7537;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7538, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r7538;
}
	// end inline asm
	mov.u32 	%r3082, 16;
	mov.u32 	%r3093, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3080,%r7517,%r3082,%r2236,%r3093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3085,%r7521,%r3080;
}
	// end inline asm
	mov.u32 	%r3091, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3089,%r7517,%r3091,%r2236,%r3093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3094,%r7522,%r3089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r3085,%r3094;
}
	// end inline asm
	mov.u32 	%r7539, %r7540;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7539, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7585,%r7585,%r7539;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7540, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7582,%r7582,%r7540;
}
	// end inline asm
	mov.u32 	%r3115, 18;
	mov.u32 	%r3126, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3113,%r7517,%r3115,%r2236,%r3126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3118,%r7521,%r3113;
}
	// end inline asm
	mov.u32 	%r3124, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3122,%r7517,%r3124,%r2236,%r3126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3127,%r7522,%r3122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r3118,%r3127;
}
	// end inline asm
	mov.u32 	%r7541, %r7542;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7541, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r7541;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7542, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r7542;
}
	// end inline asm
	mov.u32 	%r3148, 20;
	mov.u32 	%r3159, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3146,%r7517,%r3148,%r2236,%r3159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3151,%r7521,%r3146;
}
	// end inline asm
	mov.u32 	%r3157, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3155,%r7517,%r3157,%r2236,%r3159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3160,%r7522,%r3155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r3151,%r3160;
}
	// end inline asm
	mov.u32 	%r7543, %r7544;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7543, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7543;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7544, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7544;
}
	// end inline asm
	mov.u32 	%r3181, 22;
	mov.u32 	%r3192, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3179,%r7517,%r3181,%r2236,%r3192;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3184,%r7521,%r3179;
}
	// end inline asm
	mov.u32 	%r3190, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3188,%r7517,%r3190,%r2236,%r3192;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3193,%r7522,%r3188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r3184,%r3193;
}
	// end inline asm
	mov.u32 	%r7545, %r7546;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7545, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7545;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7546, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r7546;
}
	// end inline asm
	mov.u32 	%r3214, 24;
	mov.u32 	%r3225, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3212,%r7517,%r3214,%r2236,%r3225;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3217,%r7521,%r3212;
}
	// end inline asm
	mov.u32 	%r3223, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3221,%r7517,%r3223,%r2236,%r3225;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3226,%r7522,%r3221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r3217,%r3226;
}
	// end inline asm
	mov.u32 	%r7547, %r7548;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7547, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r7547;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7548, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r7548;
}
	// end inline asm
	mov.u32 	%r3247, 26;
	mov.u32 	%r3258, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3245,%r7517,%r3247,%r2236,%r3258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3250,%r7521,%r3245;
}
	// end inline asm
	mov.u32 	%r3256, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3254,%r7517,%r3256,%r2236,%r3258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3259,%r7522,%r3254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r3250,%r3259;
}
	// end inline asm
	mov.u32 	%r7549, %r7550;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7549, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r7549;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7550, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r7550;
}
	// end inline asm
	mov.u32 	%r3280, 28;
	mov.u32 	%r3291, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3278,%r7517,%r3280,%r2236,%r3291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3283,%r7521,%r3278;
}
	// end inline asm
	mov.u32 	%r3289, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3287,%r7517,%r3289,%r2236,%r3291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3292,%r7522,%r3287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r3283,%r3292;
}
	// end inline asm
	mov.u32 	%r7551, %r7552;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7551, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r7551;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7552, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r7552;
}
	// end inline asm
	mov.u32 	%r3322, 31;
	mov.u32 	%r3313, 30;
	mov.u32 	%r3324, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3311,%r7517,%r3313,%r2236,%r3324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3316,%r7521,%r3311;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3320,%r7517,%r3322,%r2236,%r3324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3325,%r7522,%r3320;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r3316,%r3325;
}
	// end inline asm
	mov.u32 	%r7553, %r7554;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7553, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r7553;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7554, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r7554;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7519, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r654, %r1739;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2712,%r7519,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r7602,%r2712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r7519,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7590,%r7590,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7519,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7519,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7519,%r7509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7519,%r7507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7520,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r2748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7520,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7519,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r7600,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7519,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r7587,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7519,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7589,%r7589,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7519,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r2778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7519,%r7508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7519,%r7506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7520,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7520,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2802;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2615, %r1739, -2;
	setp.ne.s32 	%p159, %r654, %r2615;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2616,%r7519,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r2616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2622,%r7519,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r2622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2628,%r7520,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r2628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2634,%r7520,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7584,%r7584,%r2634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2640,%r7520,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7586,%r7586,%r2640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2646,%r7520,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r2646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2652,%r7520,%r7509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r2652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2658,%r7520,%r7507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r2658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2664,%r7519,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2670,%r7519,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r7520,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7597,%r7597,%r2676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2682,%r7520,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r2682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2688,%r7520,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2694,%r7520,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r2694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2700,%r7520,%r7508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2706,%r7520,%r7506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2706;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7705, %r2147;
	mov.u32 	%r7706, %r2147;
	mov.u32 	%r7707, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7709, %r2147;
	mov.u32 	%r7710, %r2147;
	mov.u32 	%r7717, %r2147;
	mov.u32 	%r7718, %r2147;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3343, %r1730, 320;
	add.s32 	%r3344, %r23, -1;
	mul.lo.s32 	%r3345, %r24, 320;
	mad.lo.s32 	%r3346, %r3343, %r3344, %r3345;
	add.s32 	%r3349, %r1785, -64;
	mad.lo.s32 	%r3354, %r3349, %r2135, %r2132;
	add.s32 	%r3355, %r3346, %r3354;
	shl.b32 	%r3356, %r3355, 2;
	mov.u32 	%r3357, _ZN6kernel5shmemE;
	add.s32 	%r3358, %r3357, %r3356;
	shl.b32 	%r3359, %r28, 4;
	add.s32 	%r3360, %r3358, %r3359;
	ld.shared.v4.u32 	{%r7710, %r7708, %r7700, %r7699}, [%r3360];
	shl.b32 	%r3365, %r28, 3;
	add.s32 	%r3366, %r3358, %r3365;
	ld.shared.v2.u32 	{%r7709, %r7707}, [%r3366+512];
	ld.shared.v4.u32 	{%r7718, %r7717, %r7706, %r7705}, [%r3360+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7701, %r2147;
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7703, %r2147;
	mov.u32 	%r7704, %r2147;
	mov.u32 	%r7711, %r2147;
	mov.u32 	%r7712, %r2147;
	mov.u32 	%r7713, %r2147;
	mov.u32 	%r7714, %r2147;
	mov.u32 	%r7715, %r2147;
	mov.u32 	%r7716, %r2147;
	mov.u32 	%r7719, %r2147;
	mov.u32 	%r7720, %r2147;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3378, %r2533, 384, %r2138;
	add.s32 	%r3381, %r24, -1;
	mad.lo.s32 	%r3382, %r2133, %r3381, %r3378;
	add.s32 	%r3388, %r3382, %r2136;
	shl.b32 	%r3389, %r3388, 2;
	mov.u32 	%r3390, _ZN6kernel5shmemE;
	add.s32 	%r3391, %r3390, %r3389;
	shl.b32 	%r3392, %r28, 4;
	add.s32 	%r3393, %r3391, %r3392;
	ld.shared.v4.u32 	{%r7720, %r7719, %r7715, %r7713}, [%r3393];
	shl.b32 	%r3398, %r28, 3;
	add.s32 	%r3399, %r3391, %r3398;
	ld.shared.v2.u32 	{%r7716, %r7714}, [%r3399+512];
	ld.shared.v4.u32 	{%r7712, %r7711, %r7703, %r7701}, [%r3393+768];
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7704, %r2147;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7242, %r3399, 512;
	ld.shared.v2.u32 	{%r7704, %r7702}, [%r7242+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2135;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3409, %r1729, %r23;
	mul.lo.s32 	%r3411, %r52, %r24;
	mad.lo.s32 	%r3412, %r3409, 384, %r3411;
	mad.lo.s32 	%r3415, %r2133, %r2135, %r3412;
	mad.lo.s32 	%r3418, %r2131, %r2130, %r3415;
	shl.b32 	%r3419, %r3418, 2;
	mov.u32 	%r3420, _ZN6kernel5shmemE;
	add.s32 	%r3421, %r3420, %r3419;
	shl.b32 	%r3422, %r28, 4;
	add.s32 	%r3423, %r3421, %r3422;
	ld.shared.v4.u32 	{%r7629, %r7632, %r7636, %r7635}, [%r3423];

$L__BB0_386:
	shl.b32 	%r3428, %r24, 8;
	shl.b32 	%r3432, %r1730, 8;
	or.b32  	%r3433, %r3432, 128;
	add.s32 	%r3434, %r23, -1;
	mad.lo.s32 	%r3435, %r3433, %r3434, %r2138;
	add.s32 	%r3436, %r3435, %r3428;
	shl.b32 	%r3437, %r3436, 2;
	mov.u32 	%r3438, _ZN6kernel5shmemE;
	add.s32 	%r3439, %r3438, %r3437;
	setp.ne.s32 	%p202, %r24, %r2135;
	shl.b32 	%r3441, %r28, 4;
	add.s32 	%r913, %r3439, %r3441;
	ld.shared.v4.u32 	{%r7638, %r7640, %r7637, %r7639}, [%r913];
	ld.shared.v4.u32 	{%r7634, %r7631, %r7630, %r7633}, [%r913+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7629, %r7632, %r7636, %r7635}, [%r913+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3455, %r52, %r24;
	sub.s32 	%r3456, %r3455, %r52;
	mad.lo.s32 	%r3459, %r2533, 384, %r3456;
	mad.lo.s32 	%r3462, %r2133, %r2135, %r3459;
	mad.lo.s32 	%r3465, %r2131, %r2130, %r3462;
	shl.b32 	%r3466, %r3465, 2;
	mov.u32 	%r3467, _ZN6kernel5shmemE;
	add.s32 	%r3468, %r3467, %r3466;
	shl.b32 	%r3469, %r28, 4;
	add.s32 	%r938, %r3468, %r3469;
	ld.shared.v4.u32 	{%r7649, %r7648, %r7653, %r7651}, [%r938];
	ld.shared.v4.u32 	{%r7647, %r7644, %r7641, %r7642}, [%r938+512];
	ld.shared.v4.u32 	{%r7646, %r7643, %r7645, %r7652}, [%r938+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7655, %r7656, %r7650, %r7654}, [%r938+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+80];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3487, %r651, %r1732, %r26;
	mul.lo.s32 	%r3488, %r1730, %r3487;
	mul.lo.s32 	%r3489, %r3488, 768;
	mad.lo.s32 	%r3490, %r24, 384, %r3489;
	add.s32 	%r3491, %r3490, -64;
	mul.wide.s32 	%rd271, %r3491, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7664, %r7662, %r7671, %r7672}, [%rd274+256];
	ld.global.v4.u32 	{%r7670, %r7667, %r7659, %r7660}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7665, %r7668}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2135;
	ld.global.v2.u32 	{%r7663, %r7661}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7669, %r7666}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+80];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3508, %r652, %r1731, %r25;
	mul.lo.s32 	%r3512, %r3508, %r1786;
	mad.lo.s32 	%r3515, %r2533, 384, %r3512;
	add.s32 	%r3516, %r3515, -64;
	mad.lo.s32 	%r3519, %r1788, %r51, %r3516;
	mul.wide.s32 	%rd276, %r3519, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7684, %r7683, %r7679, %r7677}, [%rd279+256];
	ld.global.v4.u32 	{%r7674, %r7673, %r7676, %r7682}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7680, %r7678}, [%rd281+768];
	ld.global.v2.u32 	{%r7665, %r7668}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3532, %r1734, -1;
	setp.lt.s32 	%p209, %r653, %r3532;
	setp.gt.s32 	%p210, %r653, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r654, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3533, %r1735, -2;
	setp.lt.s32 	%p214, %r654, %r3533;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+88];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1033, %r654, %r1734, %r653;
	shl.b32 	%r3534, %r1033, 6;
	mul.wide.s32 	%rd284, %r3534, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7704, %r7702}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3537, %r1734, 5;
	cvt.s64.s32 	%rd287, %r3537;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7709, %r7707}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3540, %r1734, 5;
	neg.s32 	%r3541, %r3540;
	cvt.s64.s32 	%rd292, %r3541;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7716, %r7714}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7253, %r654, %r1734, %r653;
	ld.param.u64 	%rd555, [%rd1+88];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3544, %r1735, 6;
	shl.b32 	%r3545, %r7253, 7;
	mad.lo.s32 	%r3546, %r3544, %r1734, %r3545;
	mul.wide.s32 	%rd297, %r3546, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3547, %r1734, 5;
	cvt.s64.s32 	%rd298, %r3547;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7710, %r7708, %r7700, %r7699}, [%rd302];
	shl.b32 	%r3552, %r1734, 6;
	add.s32 	%r3553, %r3552, -32;
	cvt.s64.s32 	%rd303, %r3553;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7718, %r7717, %r7706, %r7705}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3558, %r1734, 5;
	xor.b32  	%r3559, %r3558, -32;
	cvt.s64.s32 	%rd307, %r3559;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7720, %r7719, %r7715, %r7713}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7712, %r7711, %r7703, %r7701}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3573, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3569,%r7464,%r412,%r2236,%r3573;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3569;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3576, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3577,%r7473,%r3576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3580,%r7344,%r3577;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7721,%r7602;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7721,%r7345,%r3577;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3593, 31;
	mov.u32 	%r3616, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3591,%r7721,%r3593,%r2236,%r3616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3596,%r3580,%r3591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3599,%r7472,%r7482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3602,%r3599,%r3596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3605,%r7494,%r3602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3608,%r7602,%r3605;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3612,%r7465,%r412,%r2236,%r3616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3612;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7465;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3619, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3620,%r7474,%r3619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3623,%r7344,%r3620;
}
	// end inline asm
	mov.u32 	%r7722, %r7601;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7722,%r7345,%r3620;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3634,%r7722,%r3593,%r2236,%r3616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3639,%r3623,%r3634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3642,%r7472,%r7495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3645,%r3639,%r3642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3648,%r7493,%r3645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3651,%r7601,%r3648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3654,%r7464,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3657,%r7348,%r3654;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7723,%r7600;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7723,%r7349,%r3654;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3670, 31;
	mov.u32 	%r3672, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3668,%r7723,%r3670,%r2236,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3673,%r3657,%r3668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3676,%r7463,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3679,%r3676,%r3673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3682,%r7489,%r3679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3685,%r7600,%r3682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3688,%r7465,%r7474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3691,%r7348,%r3688;
}
	// end inline asm
	mov.u32 	%r7724, %r7599;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7724,%r7349,%r3688;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3700,%r7724,%r3670,%r2236,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3705,%r3691,%r3700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3708,%r7463,%r7490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3711,%r3705,%r3708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3714,%r7488,%r3711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3717,%r7599,%r3714;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3721,%r7448,%r412,%r2236,%r3672;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3721;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7448;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3728, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3729,%r7456,%r3728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3732,%r7344,%r3729;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7725,%r7598;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7725,%r7345,%r3729;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3747, 31;
	mov.u32 	%r3749, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3745,%r7725,%r3747,%r2236,%r3749;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3750,%r3732,%r3745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r7455,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3756,%r3753,%r3750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3759,%r7486,%r3756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3762,%r7598,%r3759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3765,%r7448,%r7456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3768,%r7348,%r3765;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7726,%r7597;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7726,%r7349,%r3765;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3781, 31;
	mov.u32 	%r3804, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3779,%r7726,%r3781,%r2236,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3784,%r3768,%r3779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r7447,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3790,%r3787,%r3784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3793,%r7484,%r3790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3796,%r7597,%r3793;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3800,%r7432,%r412,%r2236,%r3804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3800;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7432;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3807, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r7437,%r3807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r7344,%r3808;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7727,%r7596;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7727,%r7345,%r3808;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3826, 31;
	mov.u32 	%r3849, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3824,%r7727,%r3826,%r2236,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3829,%r3811,%r3824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3832,%r7436,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r3832,%r3829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r7720,%r3835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3841,%r7596,%r3838;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3845,%r7433,%r412,%r2236,%r3849;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3845;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7433;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3852, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r7438,%r3852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r7344,%r3853;
}
	// end inline asm
	mov.u32 	%r7728, %r7595;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7728,%r7345,%r3853;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3867,%r7728,%r3826,%r2236,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r3856,%r3867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r7436,%r7482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3878,%r3872,%r3875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3881,%r7481,%r3878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3884,%r7595,%r3881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3887,%r7432,%r7437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3890,%r7348,%r3887;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7729,%r7594;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7729,%r7349,%r3887;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3903, 31;
	mov.u32 	%r3905, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3901,%r7729,%r3903,%r2236,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3906,%r3890,%r3901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3909,%r7431,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3912,%r3909,%r3906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3915,%r7719,%r3912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3918,%r7594,%r3915;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r7433,%r7438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r7348,%r3921;
}
	// end inline asm
	mov.u32 	%r7730, %r7593;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7730,%r7349,%r3921;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3933,%r7730,%r3903,%r2236,%r3905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3938,%r3924,%r3933;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3941,%r7431,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3944,%r3938,%r3941;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3947,%r7478,%r3944;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3950,%r7593,%r3947;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3954,%r7420,%r412,%r2236,%r3905;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3954;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7420;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3961, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3962,%r7427,%r3961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3965,%r7344,%r3962;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7731,%r7592;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7731,%r7345,%r3962;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3980, 31;
	mov.u32 	%r4003, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3978,%r7731,%r3980,%r2236,%r4003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3983,%r3965,%r3978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3986,%r7426,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r3986,%r3983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3992,%r551,%r3989;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7497,%r7592,%r3992;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3999,%r7421,%r412,%r2236,%r4003;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3999;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7421;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4006, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r7428,%r4006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4010,%r7344,%r4007;
}
	// end inline asm
	mov.u32 	%r7732, %r7591;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7732,%r7345,%r4007;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4021,%r7732,%r3980,%r2236,%r4003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4026,%r4010,%r4021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4029,%r7426,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r4026,%r4029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4035,%r550,%r4032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7496,%r7591,%r4035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4041,%r7427,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4044,%r7428,%r7438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4047,%r4041,%r4044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4050,%r7469,%r4047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4053,%r7590,%r4050;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7590, %r4053;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4058,%r7420,%r7427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4061,%r7348,%r4058;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7734,%r7589;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7734,%r7349,%r4058;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4072, 31;
	mov.u32 	%r4074, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4070,%r7734,%r4072,%r2236,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4075,%r4061,%r4070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4078,%r7419,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4081,%r4078,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4084,%r542,%r4081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7492,%r7589,%r4084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4090,%r7421,%r7428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4093,%r7348,%r4090;
}
	// end inline asm
	mov.u32 	%r7735, %r7588;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7735,%r7349,%r4090;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4102,%r7735,%r4072,%r2236,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4107,%r4093,%r4102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4110,%r7419,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r4107,%r4110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4116,%r541,%r4113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r7588,%r4116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4122,%r7420,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4125,%r7421,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4128,%r4122,%r4125;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r7460,%r4128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4134,%r7587,%r4131;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7587, %r4134;

$L__BB0_449:
	mov.u32 	%r4144, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4140,%r7409,%r412,%r2236,%r4144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4140;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7409;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4147, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r7414,%r4147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4151,%r7344,%r4148;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7737,%r7586;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7737,%r7345,%r4148;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4164, 31;
	mov.u32 	%r4187, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4162,%r7737,%r4164,%r2236,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4167,%r4151,%r4162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4170,%r7413,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4173,%r4170,%r4167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4176,%r534,%r4173;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r7586,%r4176;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4183,%r7410,%r412,%r2236,%r4187;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4183;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7410;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4190, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r7415,%r4190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4194,%r7344,%r4191;
}
	// end inline asm
	mov.u32 	%r7738, %r7585;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7738,%r7345,%r4191;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4205,%r7738,%r4164,%r2236,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4210,%r4194,%r4205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4213,%r7413,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r4210,%r4213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4219,%r7453,%r4216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4222,%r7585,%r4219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4225,%r7414,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r7415,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r4225,%r4228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4234,%r7452,%r4231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r7584,%r4234;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7584, %r4237;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4242,%r7409,%r7414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4245,%r7348,%r4242;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7740,%r7583;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7740,%r7349,%r4242;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4256, 31;
	mov.u32 	%r4258, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4254,%r7740,%r4256,%r2236,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4259,%r4245,%r4254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r7408,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4265,%r4262,%r4259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4268,%r526,%r4265;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r7583,%r4268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4274,%r7410,%r7415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4277,%r7348,%r4274;
}
	// end inline asm
	mov.u32 	%r7741, %r7582;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7741,%r7349,%r4274;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4286,%r7741,%r4256,%r2236,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4291,%r4277,%r4286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4294,%r7408,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r4291,%r4294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4300,%r7445,%r4297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4303,%r7582,%r4300;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4306,%r7409,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4309,%r7410,%r7421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4312,%r4306,%r4309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4315,%r7444,%r4312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4318,%r7581,%r4315;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7581, %r4318;

$L__BB0_463:
	mov.u32 	%r4328, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4324,%r7400,%r412,%r2236,%r4328;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4324;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7400;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4331, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r7404,%r4331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4335,%r7344,%r4332;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7743,%r7580;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7743,%r7345,%r4332;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4348, 31;
	mov.u32 	%r4350, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4346,%r7743,%r4348,%r2236,%r4350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4351,%r4335,%r4346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4354,%r7636,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4357,%r4354,%r4351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4360,%r7718,%r4357;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4363,%r7580,%r4360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4366,%r7400,%r7404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4369,%r7348,%r4366;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7744,%r7579;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7744,%r7349,%r4366;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4382, 31;
	mov.u32 	%r4405, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4380,%r7744,%r4382,%r2236,%r4405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4385,%r4369,%r4380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r7635,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4391,%r4388,%r4385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4394,%r7717,%r4391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4397,%r7579,%r4394;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4401,%r7386,%r412,%r2236,%r4405;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4401;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7386;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4408, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4409,%r7393,%r4408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4412,%r7344,%r4409;
}
	// end inline asm
	mov.u32 	%r7745, %r7578;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7745,%r7345,%r4409;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4423,%r7745,%r4382,%r2236,%r4405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4428,%r4412,%r4423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4431,%r7646,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4434,%r4428,%r4431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4437,%r7716,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r7578,%r4437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4443,%r7647,%r7437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4446,%r7393,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4449,%r4443,%r4446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4452,%r7715,%r4449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4455,%r7577,%r4452;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7577, %r4455;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4460,%r7386,%r7393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4463,%r7348,%r4460;
}
	// end inline asm
	mov.u32 	%r7747, %r7576;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7747,%r7349,%r4460;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4472, 31;
	mov.u32 	%r4474, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4470,%r7747,%r4472,%r2236,%r4474;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4475,%r4463,%r4470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4478,%r7643,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4481,%r4475,%r4478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4484,%r7714,%r4481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7480,%r7576,%r4484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4490,%r7644,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4493,%r7386,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r4490,%r4493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4499,%r7713,%r4496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4502,%r7575,%r4499;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7575, %r4502;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4508,%r7372,%r412,%r2236,%r4474;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4508;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7372;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4515, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r7379,%r4515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4519,%r7344,%r4516;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7749,%r7574;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7749,%r7345,%r4516;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4532, 31;
	mov.u32 	%r4555, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4530,%r7749,%r4532,%r2236,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4535,%r4519,%r4530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4538,%r7378,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4541,%r4538,%r4535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4544,%r7712,%r4541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7477,%r7574,%r4544;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4551,%r7373,%r412,%r2236,%r4555;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4551;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7373;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4558, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r7380,%r4558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r7344,%r4559;
}
	// end inline asm
	mov.u32 	%r7750, %r7573;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7750,%r7345,%r4559;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4573,%r7750,%r4532,%r2236,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4578,%r4562,%r4573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4581,%r7378,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r4578,%r4581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4587,%r7470,%r4584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7476,%r7573,%r4587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4593,%r7379,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4596,%r7380,%r7393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r4593,%r4596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4602,%r496,%r4599;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4605,%r7572,%r4602;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7572, %r4605;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4610,%r7372,%r7379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4613,%r7348,%r4610;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7752,%r7571;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7752,%r7349,%r4610;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4624, 31;
	mov.u32 	%r4626, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4622,%r7752,%r4624,%r2236,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4627,%r4613,%r4622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r7371,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4633,%r4630,%r4627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4636,%r7711,%r4633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7571,%r4636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4642,%r7373,%r7380;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4645,%r7348,%r4642;
}
	// end inline asm
	mov.u32 	%r7753, %r7570;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7753,%r7349,%r4642;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4654,%r7753,%r4624,%r2236,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4659,%r4645,%r4654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4662,%r7371,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4665,%r4659,%r4662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4668,%r7461,%r4665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7467,%r7570,%r4668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4674,%r7372,%r7420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4677,%r7373,%r7386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4680,%r4674,%r4677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4683,%r488,%r4680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4686,%r7569,%r4683;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7569, %r4686;

$L__BB0_491:
	mov.u32 	%r4696, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4692,%r7357,%r412,%r2236,%r4696;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4692;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7357;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4699, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4700,%r7365,%r4699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4703,%r7344,%r4700;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7755,%r7568;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7755,%r7345,%r4700;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4716, 31;
	mov.u32 	%r4739, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4714,%r7755,%r4716,%r2236,%r4739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4719,%r4703,%r4714;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4722,%r7634,%r7378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4725,%r4722,%r4719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4728,%r7710,%r4725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7459,%r7568,%r4728;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4735,%r7358,%r412,%r2236,%r4739;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4735;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7358;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4742, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4743,%r7366,%r4742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4746,%r7344,%r4743;
}
	// end inline asm
	mov.u32 	%r7756, %r7567;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7756,%r7345,%r4743;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4757,%r7756,%r4716,%r2236,%r4739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4762,%r4746,%r4757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4765,%r7634,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r4762,%r4765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4771,%r7709,%r4768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7458,%r7567,%r4771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r7365,%r7414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4780,%r7366,%r7380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4783,%r4777,%r4780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4786,%r481,%r4783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4789,%r7566,%r4786;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7566, %r4789;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4794,%r7357,%r7365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4797,%r7348,%r4794;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7758,%r7565;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7758,%r7349,%r4794;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4808, 31;
	mov.u32 	%r4810, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4806,%r7758,%r4808,%r2236,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4811,%r4797,%r4806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4814,%r7631,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4817,%r4814,%r4811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4820,%r7708,%r4817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7451,%r7565,%r4820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4826,%r7358,%r7366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4829,%r7348,%r4826;
}
	// end inline asm
	mov.u32 	%r7759, %r7564;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7759,%r7349,%r4826;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4838,%r7759,%r4808,%r2236,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4843,%r4829,%r4838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4846,%r7631,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4849,%r4843,%r4846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4852,%r7707,%r4849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7450,%r7564,%r4852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4858,%r7357,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4861,%r7358,%r7373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4864,%r4858,%r4861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4867,%r474,%r4864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4870,%r7563,%r4867;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7563, %r4870;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4875,%r7630,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4878,%r7629,%r7366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4881,%r4875,%r4878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4884,%r7706,%r4881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4887,%r7562,%r4884;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7562, %r4887;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4890,%r7633,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4893,%r7632,%r7358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4896,%r4890,%r4893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4899,%r7705,%r4896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4902,%r7561,%r4899;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7561, %r4902;

$L__BB0_509:
	mov.u32 	%r4910, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4906,%r7435,%r412,%r2236,%r4910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4906;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7435;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4913, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4914,%r7389,%r4913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4917,%r7344,%r4914;
}
	// end inline asm
	mov.u32 	%r7763, %r7560;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7763,%r7345,%r4914;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4928, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4926,%r7763,%r4928,%r2236,%r4910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4931,%r4917,%r4926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4934,%r7650,%r7378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4937,%r4931,%r4934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4940,%r7704,%r4937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7430,%r7560,%r4940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4946,%r7645,%r7379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4949,%r7389,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r4946,%r4949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4955,%r7703,%r4952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4958,%r7559,%r4955;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7559, %r4958;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4963,%r7435,%r7389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4966,%r7348,%r4963;
}
	// end inline asm
	mov.u32 	%r7765, %r7558;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7765,%r7349,%r4963;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4975, 31;
	mov.u32 	%r4977, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4973,%r7765,%r4975,%r2236,%r4977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4978,%r4966,%r4973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4981,%r7654,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4984,%r4978,%r4981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4987,%r7702,%r4984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7423,%r7558,%r4987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4993,%r7652,%r7372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4996,%r7435,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4999,%r4993,%r4996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5002,%r7701,%r4999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5005,%r7557,%r5002;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7557, %r5005;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5010,%r7638,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5013,%r7637,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5016,%r5010,%r5013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5019,%r7700,%r5016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5022,%r7556,%r5019;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7556, %r5022;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5025,%r7640,%r7357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5028,%r7639,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5031,%r5025,%r5028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5034,%r7699,%r5031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5037,%r7555,%r5034;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7555, %r5037;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+160];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r655, %r1740;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5040, %r1742, %r1741, %r1740;
	setp.ge.s32 	%p274, %r655, %r5040;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1300, %r655, %r1740;
	rem.s32 	%r5041, %r1300, %r1741;
	setp.ne.s32 	%p276, %r5041, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5042, %r1300, %r1741;
	mul.lo.s32 	%r5043, %r5042, %r1734;
	mul.lo.s32 	%r1301, %r5043, 3;
	add.s32 	%r1302, %r653, -2;
	add.s32 	%r5044, %r1301, %r1302;
	mul.lo.s32 	%r1303, %r5044, %r1735;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5049, %r1303, %r654;
	mul.lo.s32 	%r5050, %r5049, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3608;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5051, %r378, %r5050;
	mul.wide.s32 	%rd315, %r5051, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3608;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5052, %r379, %r5050;
	mul.wide.s32 	%rd317, %r5052, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3685;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5053, %r392, %r5050;
	mul.wide.s32 	%rd319, %r5053, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3685;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5054, %r393, %r5050;
	mul.wide.s32 	%rd321, %r5054, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1304, %r1301, %r1734;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5059, %r1304, %r1302;
	mad.lo.s32 	%r5060, %r5059, %r1735, %r654;
	mul.lo.s32 	%r5061, %r5060, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3651;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5062, %r378, %r5061;
	mul.wide.s32 	%rd323, %r5062, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3651;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5063, %r379, %r5061;
	mul.wide.s32 	%rd325, %r5063, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5064, %r392, %r5061;
	mul.wide.s32 	%rd327, %r5064, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5065, %r393, %r5061;
	mul.wide.s32 	%rd329, %r5065, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1305, %r654, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5070, %r1303, %r1305;
	mul.lo.s32 	%r5071, %r5070, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3762;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5072, %r378, %r5071;
	mul.wide.s32 	%rd331, %r5072, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3762;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5073, %r379, %r5071;
	mul.wide.s32 	%rd333, %r5073, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5074, %r392, %r5071;
	mul.wide.s32 	%rd335, %r5074, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5075, %r393, %r5071;
	mul.wide.s32 	%rd337, %r5075, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1306, %r653, -1;
	add.s32 	%r5076, %r1301, %r1306;
	mul.lo.s32 	%r1307, %r5076, %r1735;
	add.s32 	%r1308, %r654, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5081, %r1307, %r1308;
	mul.lo.s32 	%r5082, %r5081, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3841;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5083, %r378, %r5082;
	mul.wide.s32 	%rd339, %r5083, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3841;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5084, %r379, %r5082;
	mul.wide.s32 	%rd341, %r5084, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3918;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5085, %r392, %r5082;
	mul.wide.s32 	%rd343, %r5085, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3918;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5086, %r393, %r5082;
	mul.wide.s32 	%rd345, %r5086, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5087, %r1304, %r1306;
	mul.lo.s32 	%r1309, %r5087, %r1735;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5092, %r1309, %r1308;
	mul.lo.s32 	%r5093, %r5092, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3884;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5094, %r378, %r5093;
	mul.wide.s32 	%rd347, %r5094, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3884;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5095, %r379, %r5093;
	mul.wide.s32 	%rd349, %r5095, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3950;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5096, %r392, %r5093;
	mul.wide.s32 	%rd351, %r5096, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3950;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5097, %r393, %r5093;
	mul.wide.s32 	%rd353, %r5097, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5102, %r1307, %r654;
	mul.lo.s32 	%r5103, %r5102, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7497;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5104, %r378, %r5103;
	mul.wide.s32 	%rd355, %r5104, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7497;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5105, %r379, %r5103;
	mul.wide.s32 	%rd357, %r5105, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7492;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5106, %r392, %r5103;
	mul.wide.s32 	%rd359, %r5106, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7492;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5107, %r393, %r5103;
	mul.wide.s32 	%rd361, %r5107, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5112, %r1309, %r654;
	mul.lo.s32 	%r5113, %r5112, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7496;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5114, %r378, %r5113;
	mul.wide.s32 	%rd363, %r5114, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7496;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5115, %r379, %r5113;
	mul.wide.s32 	%rd365, %r5115, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7491;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5116, %r392, %r5113;
	mul.wide.s32 	%rd367, %r5116, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7491;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5117, %r393, %r5113;
	mul.wide.s32 	%rd369, %r5117, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1310, %r1304, %r1734;
	add.s32 	%r5118, %r1310, %r1306;
	mul.lo.s32 	%r1311, %r5118, %r1735;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5123, %r1311, %r654;
	mul.lo.s32 	%r5124, %r5123, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7590;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5125, %r378, %r5124;
	mul.wide.s32 	%rd371, %r5125, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7590;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5126, %r379, %r5124;
	mul.wide.s32 	%rd373, %r5126, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7587;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5127, %r392, %r5124;
	mul.wide.s32 	%rd375, %r5127, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7587;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5128, %r393, %r5124;
	mul.wide.s32 	%rd377, %r5128, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5133, %r1307, %r1305;
	mul.lo.s32 	%r5134, %r5133, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7487;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5135, %r378, %r5134;
	mul.wide.s32 	%rd379, %r5135, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7487;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5136, %r379, %r5134;
	mul.wide.s32 	%rd381, %r5136, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7485;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5137, %r392, %r5134;
	mul.wide.s32 	%rd383, %r5137, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7485;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5138, %r393, %r5134;
	mul.wide.s32 	%rd385, %r5138, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5143, %r1309, %r1305;
	mul.lo.s32 	%r5144, %r5143, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4222;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5145, %r378, %r5144;
	mul.wide.s32 	%rd387, %r5145, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4222;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5146, %r379, %r5144;
	mul.wide.s32 	%rd389, %r5146, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4303;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5147, %r392, %r5144;
	mul.wide.s32 	%rd391, %r5147, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4303;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5148, %r393, %r5144;
	mul.wide.s32 	%rd393, %r5148, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5153, %r1311, %r1305;
	mul.lo.s32 	%r5154, %r5153, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7584;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5155, %r378, %r5154;
	mul.wide.s32 	%rd395, %r5155, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7584;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5156, %r379, %r5154;
	mul.wide.s32 	%rd397, %r5156, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7581;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5157, %r392, %r5154;
	mul.wide.s32 	%rd399, %r5157, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7581;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5158, %r393, %r5154;
	mul.wide.s32 	%rd401, %r5158, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1312, %r654, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5163, %r1307, %r1312;
	mul.lo.s32 	%r5164, %r5163, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4363;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5165, %r378, %r5164;
	mul.wide.s32 	%rd403, %r5165, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4363;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5166, %r379, %r5164;
	mul.wide.s32 	%rd405, %r5166, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4397;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5167, %r392, %r5164;
	mul.wide.s32 	%rd407, %r5167, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4397;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5168, %r393, %r5164;
	mul.wide.s32 	%rd409, %r5168, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5169, %r1304, %r653;
	mul.lo.s32 	%r1313, %r5169, %r1735;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5174, %r1313, %r1308;
	mul.lo.s32 	%r5175, %r5174, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5176, %r378, %r5175;
	mul.wide.s32 	%rd411, %r5176, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5177, %r379, %r5175;
	mul.wide.s32 	%rd413, %r5177, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7480;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5178, %r392, %r5175;
	mul.wide.s32 	%rd415, %r5178, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7480;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5179, %r393, %r5175;
	mul.wide.s32 	%rd417, %r5179, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5180, %r1310, %r653;
	mul.lo.s32 	%r1314, %r5180, %r1735;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5185, %r1314, %r1308;
	mul.lo.s32 	%r5186, %r5185, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5187, %r378, %r5186;
	mul.wide.s32 	%rd419, %r5187, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5188, %r379, %r5186;
	mul.wide.s32 	%rd421, %r5188, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5189, %r392, %r5186;
	mul.wide.s32 	%rd423, %r5189, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5190, %r393, %r5186;
	mul.wide.s32 	%rd425, %r5190, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5191, %r1301, %r653;
	mul.lo.s32 	%r1315, %r5191, %r1735;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5196, %r1315, %r654;
	mul.lo.s32 	%r5197, %r5196, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7477;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5198, %r378, %r5197;
	mul.wide.s32 	%rd427, %r5198, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7477;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5199, %r379, %r5197;
	mul.wide.s32 	%rd429, %r5199, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5200, %r392, %r5197;
	mul.wide.s32 	%rd431, %r5200, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5201, %r393, %r5197;
	mul.wide.s32 	%rd433, %r5201, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5206, %r1313, %r654;
	mul.lo.s32 	%r5207, %r5206, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5208, %r378, %r5207;
	mul.wide.s32 	%rd435, %r5208, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5209, %r379, %r5207;
	mul.wide.s32 	%rd437, %r5209, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5210, %r392, %r5207;
	mul.wide.s32 	%rd439, %r5210, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5211, %r393, %r5207;
	mul.wide.s32 	%rd441, %r5211, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5216, %r1314, %r654;
	mul.lo.s32 	%r5217, %r5216, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5218, %r378, %r5217;
	mul.wide.s32 	%rd443, %r5218, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5219, %r379, %r5217;
	mul.wide.s32 	%rd445, %r5219, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5220, %r392, %r5217;
	mul.wide.s32 	%rd447, %r5220, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5221, %r393, %r5217;
	mul.wide.s32 	%rd449, %r5221, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5226, %r1315, %r1305;
	mul.lo.s32 	%r5227, %r5226, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5228, %r378, %r5227;
	mul.wide.s32 	%rd451, %r5228, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5229, %r379, %r5227;
	mul.wide.s32 	%rd453, %r5229, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5230, %r392, %r5227;
	mul.wide.s32 	%rd455, %r5230, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5231, %r393, %r5227;
	mul.wide.s32 	%rd457, %r5231, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5236, %r1313, %r1305;
	mul.lo.s32 	%r5237, %r5236, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5238, %r378, %r5237;
	mul.wide.s32 	%rd459, %r5238, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5239, %r379, %r5237;
	mul.wide.s32 	%rd461, %r5239, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5240, %r392, %r5237;
	mul.wide.s32 	%rd463, %r5240, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5241, %r393, %r5237;
	mul.wide.s32 	%rd465, %r5241, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5246, %r1314, %r1305;
	mul.lo.s32 	%r5247, %r5246, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5248, %r378, %r5247;
	mul.wide.s32 	%rd467, %r5248, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5249, %r379, %r5247;
	mul.wide.s32 	%rd469, %r5249, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5250, %r392, %r5247;
	mul.wide.s32 	%rd471, %r5250, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5251, %r393, %r5247;
	mul.wide.s32 	%rd473, %r5251, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1316, %r1314, %r1312;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5256, %r1316, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5257, %r378, %r5256;
	mul.wide.s32 	%rd475, %r5257, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5258, %r379, %r5256;
	mul.wide.s32 	%rd477, %r5258, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5259, %r392, %r5256;
	mul.wide.s32 	%rd479, %r5259, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5260, %r393, %r5256;
	mul.wide.s32 	%rd481, %r5260, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1317, %r653, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5265, %r1304, %r1317;
	mad.lo.s32 	%r5266, %r5265, %r1735, %r654;
	mul.lo.s32 	%r5267, %r5266, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7430;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5268, %r378, %r5267;
	mul.wide.s32 	%rd483, %r5268, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7430;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5269, %r379, %r5267;
	mul.wide.s32 	%rd485, %r5269, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7423;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5270, %r392, %r5267;
	mul.wide.s32 	%rd487, %r5270, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7423;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5271, %r393, %r5267;
	mul.wide.s32 	%rd489, %r5271, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5272, %r1310, %r1317;
	mul.lo.s32 	%r1318, %r5272, %r1735;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5277, %r1318, %r654;
	mul.lo.s32 	%r5278, %r5277, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5279, %r378, %r5278;
	mul.wide.s32 	%rd491, %r5279, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5280, %r379, %r5278;
	mul.wide.s32 	%rd493, %r5280, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5281, %r392, %r5278;
	mul.wide.s32 	%rd495, %r5281, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5282, %r393, %r5278;
	mul.wide.s32 	%rd497, %r5282, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1319, %r1318, %r1305;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5287, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5288, %r378, %r5287;
	mul.wide.s32 	%rd499, %r5288, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7556;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5289, %r379, %r5287;
	mul.wide.s32 	%rd501, %r5289, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5290, %r392, %r5287;
	mul.wide.s32 	%rd503, %r5290, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5291, %r393, %r5287;
	mul.wide.s32 	%rd505, %r5291, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2130;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5292, %r1730, %r23, %r24;
	mov.u32 	%r5293, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5294, %r5292, 1280, %r5293;
	add.s32 	%r5295, %r5294, -256;
	shl.b32 	%r5296, %r28, 4;
	add.s32 	%r5297, %r5295, %r5296;
	st.shared.v4.u32 	[%r5297+256], {%r3841, %r3918, %r7577, %r7575};
	st.shared.v4.u32 	[%r5297+1024], {%r3608, %r3685, %r7590, %r7587};
	shl.b32 	%r5298, %r28, 3;
	add.s32 	%r5299, %r5295, %r5298;
	st.shared.v2.u32 	[%r5299+768], {%r3884, %r3950};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2135;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5303, %r1729, 384, -64;
	mul.lo.s32 	%r5304, %r5303, %r24;
	mad.lo.s32 	%r5306, %r2131, %r2130, %r5304;
	mad.lo.s32 	%r5307, %r2533, 384, %r5306;
	shl.b32 	%r5308, %r5307, 2;
	mov.u32 	%r5309, _ZN6kernel5shmemE;
	add.s32 	%r5310, %r5309, %r5308;
	add.s32 	%r5311, %r5310, -256;
	shl.b32 	%r5312, %r28, 4;
	add.s32 	%r5313, %r5311, %r5312;
	st.shared.v4.u32 	[%r5313+256], {%r3762, %r3796, %r7584, %r7581};
	st.shared.v4.u32 	[%r5313+1024], {%r4363, %r4397, %r7562, %r7561};
	shl.b32 	%r5314, %r28, 3;
	add.s32 	%r1323, %r5311, %r5314;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1323], {%r3651, %r3717};

$L__BB0_576:
	st.shared.v2.u32 	[%r1323+768], {%r4222, %r4303};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2130;
	ld.param.u64 	%rd507, [%rd1+80];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5316, %r651, %r1732, %r26;
	mul.lo.s32 	%r5317, %r1730, %r5316;
	mul.lo.s32 	%r5318, %r5317, 768;
	mad.lo.s32 	%r5319, %r24, 384, %r5318;
	add.s32 	%r5320, %r5319, -64;
	mul.wide.s32 	%rd508, %r5320, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3841, %r3918, %r7577, %r7575};
	st.global.v4.u32 	[%rd511+1024], {%r3608, %r3685, %r7590, %r7587};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3884, %r3950};
	st.global.v2.u32 	[%rd513+1536], {%r3651, %r3717};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2135;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+80];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5323, %r652, %r1731, %r25;
	mul.lo.s32 	%r5327, %r5323, %r1786;
	mad.lo.s32 	%r5330, %r2533, 384, %r5327;
	add.s32 	%r5331, %r5330, -64;
	mad.lo.s32 	%r5334, %r1788, %r51, %r5331;
	mul.wide.s32 	%rd514, %r5334, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3762, %r3796, %r7584, %r7581};
	st.global.v4.u32 	[%rd517+1024], {%r4363, %r4397, %r7562, %r7561};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3651, %r3717};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4222, %r4303};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7669, %r7666};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2130;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5335, %r1730, 320;
	mul.lo.s32 	%r5336, %r24, 320;
	mad.lo.s32 	%r5337, %r5335, %r23, %r5336;
	add.s32 	%r5341, %r1785, -64;
	mad.lo.s32 	%r5345, %r5341, %r2135, %r2132;
	add.s32 	%r5346, %r5337, %r5345;
	shl.b32 	%r5347, %r5346, 2;
	mov.u32 	%r5348, _ZN6kernel5shmemE;
	add.s32 	%r5349, %r5348, %r5347;
	shl.b32 	%r5350, %r28, 4;
	add.s32 	%r5351, %r5349, %r5350;
	st.shared.v4.u32 	[%r5351], {%r7720, %r7719, %r7715, %r7713};
	shl.b32 	%r5352, %r28, 3;
	add.s32 	%r5353, %r5349, %r5352;
	st.shared.v2.u32 	[%r5353+512], {%r7481, %r7478};
	st.shared.v4.u32 	[%r5351+768], {%r7494, %r7489, %r7469, %r7460};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2135;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5359, %r2533, 384, %r2138;
	mad.lo.s32 	%r5362, %r2133, %r24, %r5359;
	add.s32 	%r5368, %r5362, %r2136;
	shl.b32 	%r5369, %r5368, 2;
	mov.u32 	%r5370, _ZN6kernel5shmemE;
	add.s32 	%r5371, %r5370, %r5369;
	shl.b32 	%r5372, %r28, 3;
	add.s32 	%r5373, %r5371, %r5372;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7243, %r5373, -256;
	st.shared.v2.u32 	[%r7243], {%r7493, %r7488};

$L__BB0_589:
	shl.b32 	%r5392, %r28, 4;
	add.s32 	%r5393, %r5371, %r5392;
	st.shared.v4.u32 	[%r5393], {%r7486, %r7484, %r7452, %r7444};
	add.s32 	%r7244, %r5373, -256;
	st.shared.v2.u32 	[%r7244+768], {%r7453, %r7445};
	st.shared.v4.u32 	[%r5393+768], {%r7718, %r7717, %r7706, %r7705};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5394, %r1730, 320;
	add.s32 	%r5395, %r23, -1;
	mul.lo.s32 	%r5396, %r24, 320;
	mad.lo.s32 	%r5397, %r5394, %r5395, %r5396;
	shl.b32 	%r5398, %r5397, 2;
	mov.u32 	%r5399, _ZN6kernel5shmemE;
	add.s32 	%r5400, %r5399, %r5398;
	add.s32 	%r5401, %r5400, -256;
	shl.b32 	%r5402, %r28, 4;
	add.s32 	%r5403, %r5401, %r5402;
	ld.shared.v4.u32 	{%r7664, %r7662, %r7671, %r7672}, [%r5403+256];
	ld.shared.v4.u32 	{%r7670, %r7667, %r7659, %r7660}, [%r5403+1024];
	shl.b32 	%r5412, %r28, 3;
	add.s32 	%r5413, %r5401, %r5412;
	ld.shared.v2.u32 	{%r7663, %r7661}, [%r5413+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5418, %r1729, 384, -64;
	add.s32 	%r5419, %r24, -1;
	mul.lo.s32 	%r5420, %r5418, %r5419;
	mad.lo.s32 	%r5423, %r2131, %r2130, %r5420;
	mad.lo.s32 	%r5424, %r2533, 384, %r5423;
	shl.b32 	%r5425, %r5424, 2;
	mov.u32 	%r5426, _ZN6kernel5shmemE;
	add.s32 	%r5427, %r5426, %r5425;
	add.s32 	%r5428, %r5427, -256;
	shl.b32 	%r5429, %r28, 4;
	add.s32 	%r5430, %r5428, %r5429;
	ld.shared.v4.u32 	{%r7684, %r7683, %r7679, %r7677}, [%r5430+256];
	ld.shared.v4.u32 	{%r7674, %r7673, %r7676, %r7682}, [%r5430+1024];
	shl.b32 	%r5439, %r28, 3;
	add.s32 	%r5440, %r5428, %r5439;
	ld.shared.v2.u32 	{%r7680, %r7678}, [%r5440+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7245, %r5440, 768;
	ld.shared.v2.u32 	{%r7665, %r7668}, [%r7245+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+80];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7796, %r7630;
	mov.u32 	%r7797, %r7631;
	mov.u32 	%r7799, %r7633;
	mov.u32 	%r7800, %r7634;
	mov.u32 	%r7820, %r7650;
	mov.u32 	%r7824, %r7654;
	mov.u32 	%r7805, %r7637;
	mov.u32 	%r7806, %r7638;
	mov.u32 	%r7807, %r7639;
	mov.u32 	%r7808, %r7640;
	mov.u32 	%r7825, %r7655;
	mov.u32 	%r7826, %r7656;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5446, %r651, %r1732, %r26;
	mad.lo.s32 	%r5447, %r5446, 768, 384;
	mul.lo.s32 	%r5448, %r5447, %r1730;
	mad.lo.s32 	%r5449, %r24, 384, %r5448;
	add.s32 	%r5450, %r5449, -128;
	mul.wide.s32 	%rd520, %r5450, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7820, %r7650;
	mov.u32 	%r7824, %r7654;
	mov.u32 	%r7825, %r7655;
	mov.u32 	%r7826, %r7656;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7825, %r7826, %r7820, %r7824}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7806, %r7808, %r7805, %r7807}, [%rd36];
	ld.global.v4.u32 	{%r7800, %r7797, %r7796, %r7799}, [%rd36+512];
	ld.global.v4.u32 	{%r7629, %r7632, %r7636, %r7635}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7811, %r7641;
	mov.u32 	%r7812, %r7642;
	mov.u32 	%r7813, %r7643;
	mov.u32 	%r7814, %r7644;
	mov.u32 	%r7815, %r7645;
	mov.u32 	%r7816, %r7646;
	mov.u32 	%r7817, %r7647;
	mov.u32 	%r7822, %r7652;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5468, %r652, %r1731, %r25;
	mad.lo.s32 	%r5476, %r2533, 384, %r52;
	mad.lo.s32 	%r5477, %r1788, %r51, %r5476;
	mad.lo.s32 	%r5478, %r5468, %r1786, %r5477;
	mul.wide.s32 	%rd524, %r5478, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7649, %r7648, %r7653, %r7651}, [%rd527];
	ld.global.v4.u32 	{%r7817, %r7814, %r7811, %r7812}, [%rd527+512];
	ld.global.v4.u32 	{%r7816, %r7813, %r7815, %r7822}, [%rd527+1024];
	ld.global.v4.u32 	{%r7825, %r7826, %r7820, %r7824}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7251, %r1734;
	not.b32 	%r7250, %r26;
	add.s32 	%r7249, %r1732, %r7250;
	mul.lo.s32 	%r7248, %r7249, %r1733;
	not.b32 	%r7247, %r25;
	add.s32 	%r7246, %r1731, %r7247;
	mad.lo.s32 	%r5502, %r7246, %r1733, %r7248;
	add.s32 	%r5503, %r5502, %r1734;
	add.s32 	%r5512, %r5503, %r2539;
	add.s32 	%r1443, %r7516, 1;
	add.s32 	%r5513, %r1443, %r5512;
	div.s32 	%r5514, %r5513, %r1734;
	mad.lo.s32 	%r1444, %r5514, %r7251, %r5513;
	mad.lo.s32 	%r5521, %r5514, %r30, %r2550;
	ld.param.u64 	%rd528, [%rd1+96];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5522, %r5521, %r1735;
	shr.u32 	%r5523, %r5522, 31;
	add.s32 	%r5524, %r5522, %r5523;
	shr.s32 	%r5525, %r5524, 1;
	mad.lo.s32 	%r5526, %r5525, %r1734, %r1444;
	shl.b32 	%r5527, %r5526, 5;
	add.s32 	%r5528, %r5527, %r28;
	cvt.s64.s32 	%rd37, %r5528;
	mul.wide.s32 	%rd530, %r5528, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7518, [%rd531];
	ld.param.u64 	%rd532, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7517, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5529, %r1444, 5;
	add.s32 	%r5530, %r5529, %r28;
	mul.wide.s32 	%rd533, %r5530, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5531, %r5532, %r5533, %r5534}, [%rd534];
	mov.u32 	%r7498, %r7502;
	mov.u32 	%r7499, %r7503;
	mov.u32 	%r7500, %r7504;
	mov.u32 	%r7501, %r7505;
	mov.u32 	%r7502, %r7506;
	mov.u32 	%r7503, %r7507;
	mov.u32 	%r7504, %r7508;
	mov.u32 	%r7505, %r7509;
	mov.u32 	%r7506, %r5534;
	mov.u32 	%r7507, %r5533;
	mov.u32 	%r7508, %r5532;
	mov.u32 	%r7509, %r5531;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5535, {low,high};}

	// end inline asm
	selp.b32 	%r5537, %r7347, %r5535, %p12;
	// begin inline asm
	{mul.f16x2 %r7495,%r5537,%r7472;
}
	// end inline asm
	selp.b32 	%r5540, %r7351, %r5535, %p12;
	// begin inline asm
	{mul.f16x2 %r7490,%r5540,%r7463;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5542, {low,high};}

	// end inline asm
	selp.b32 	%r5544, %r7347, %r5542, %p12;
	// begin inline asm
	{mul.f16x2 %r7482,%r5544,%r7436;
}
	// end inline asm
	selp.b32 	%r5547, %r7351, %r5542, %p12;
	// begin inline asm
	{mul.f16x2 %r7479,%r5547,%r7431;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5549, {low,high};}

	// end inline asm
	selp.b32 	%r5551, %r7347, %r5549, %p12;
	// begin inline asm
	{mul.f16x2 %r5550,%r5551,%r7428;
}
	// end inline asm
	selp.b32 	%r5554, %r7351, %r5549, %p12;
	// begin inline asm
	{mul.f16x2 %r5553,%r5554,%r7421;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5556, {low,high};}

	// end inline asm
	selp.b32 	%r5558, %r7347, %r5556, %p12;
	// begin inline asm
	{mul.f16x2 %r5557,%r5558,%r7427;
}
	// end inline asm
	selp.b32 	%r5561, %r7351, %r5556, %p12;
	// begin inline asm
	{mul.f16x2 %r5560,%r5561,%r7420;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5563, {low,high};}

	// end inline asm
	selp.b32 	%r5565, %r7347, %r5563, %p12;
	// begin inline asm
	{mul.f16x2 %r7472,%r5565,%r7426;
}
	// end inline asm
	selp.b32 	%r5568, %r7351, %r5563, %p12;
	// begin inline asm
	{mul.f16x2 %r7463,%r5568,%r7419;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5570, {low,high};}

	// end inline asm
	selp.b32 	%r5572, %r7347, %r5570, %p12;
	// begin inline asm
	{mul.f16x2 %r5571,%r5572,%r7414;
}
	// end inline asm
	selp.b32 	%r5575, %r7351, %r5570, %p12;
	// begin inline asm
	{mul.f16x2 %r5574,%r5575,%r7409;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5577, {low,high};}

	// end inline asm
	selp.b32 	%r5579, %r7347, %r5577, %p12;
	// begin inline asm
	{mul.f16x2 %r7455,%r5579,%r7413;
}
	// end inline asm
	selp.b32 	%r5582, %r7351, %r5577, %p12;
	// begin inline asm
	{mul.f16x2 %r7447,%r5582,%r7408;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5584, {low,high};}

	// end inline asm
	selp.b32 	%r5586, %r7347, %r5584, %p12;
	// begin inline asm
	{mul.f16x2 %r5585,%r5586,%r7393;
}
	// end inline asm
	selp.b32 	%r5589, %r7351, %r5584, %p12;
	// begin inline asm
	{mul.f16x2 %r5588,%r5589,%r7386;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5591, {low,high};}

	// end inline asm
	selp.b32 	%r5593, %r7347, %r5591, %p12;
	// begin inline asm
	{mul.f16x2 %r5592,%r5593,%r7647;
}
	// end inline asm
	selp.b32 	%r5596, %r7351, %r5591, %p12;
	// begin inline asm
	{mul.f16x2 %r5595,%r5596,%r7644;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5598, {low,high};}

	// end inline asm
	selp.b32 	%r5600, %r7347, %r5598, %p12;
	// begin inline asm
	{mul.f16x2 %r7436,%r5600,%r7646;
}
	// end inline asm
	selp.b32 	%r5603, %r7351, %r5598, %p12;
	// begin inline asm
	{mul.f16x2 %r7431,%r5603,%r7643;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5605, {low,high};}

	// end inline asm
	selp.b32 	%r5607, %r7347, %r5605, %p12;
	// begin inline asm
	{mul.f16x2 %r5606,%r5607,%r7380;
}
	// end inline asm
	selp.b32 	%r5610, %r7351, %r5605, %p12;
	// begin inline asm
	{mul.f16x2 %r5609,%r5610,%r7373;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5612, {low,high};}

	// end inline asm
	selp.b32 	%r5614, %r7347, %r5612, %p12;
	// begin inline asm
	{mul.f16x2 %r5613,%r5614,%r7379;
}
	// end inline asm
	selp.b32 	%r5617, %r7351, %r5612, %p12;
	// begin inline asm
	{mul.f16x2 %r5616,%r5617,%r7372;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5619, {low,high};}

	// end inline asm
	selp.b32 	%r5621, %r7347, %r5619, %p12;
	// begin inline asm
	{mul.f16x2 %r7426,%r5621,%r7378;
}
	// end inline asm
	selp.b32 	%r5624, %r7351, %r5619, %p12;
	// begin inline asm
	{mul.f16x2 %r7419,%r5624,%r7371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5626, {low,high};}

	// end inline asm
	selp.b32 	%r5628, %r7347, %r5626, %p12;
	// begin inline asm
	{mul.f16x2 %r5627,%r5628,%r7366;
}
	// end inline asm
	selp.b32 	%r5631, %r7351, %r5626, %p12;
	// begin inline asm
	{mul.f16x2 %r5630,%r5631,%r7358;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5633, {low,high};}

	// end inline asm
	selp.b32 	%r5635, %r7347, %r5633, %p12;
	// begin inline asm
	{mul.f16x2 %r5634,%r5635,%r7365;
}
	// end inline asm
	selp.b32 	%r5638, %r7351, %r5633, %p12;
	// begin inline asm
	{mul.f16x2 %r5637,%r5638,%r7357;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5640, {low,high};}

	// end inline asm
	selp.b32 	%r5642, %r7347, %r5640, %p12;
	// begin inline asm
	{mul.f16x2 %r7413,%r5642,%r7634;
}
	// end inline asm
	selp.b32 	%r5645, %r7351, %r5640, %p12;
	// begin inline asm
	{mul.f16x2 %r7408,%r5645,%r7631;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5647, {low,high};}

	// end inline asm
	selp.b32 	%r5649, %r7347, %r5647, %p12;
	// begin inline asm
	{mul.f16x2 %r5648,%r5649,%r7630;
}
	// end inline asm
	selp.b32 	%r5652, %r7351, %r5647, %p12;
	// begin inline asm
	{mul.f16x2 %r5651,%r5652,%r7633;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5654, {low,high};}

	// end inline asm
	selp.b32 	%r5656, %r7347, %r5654, %p12;
	// begin inline asm
	{mul.f16x2 %r5655,%r5656,%r7641;
}
	// end inline asm
	selp.b32 	%r5659, %r7351, %r5654, %p12;
	// begin inline asm
	{mul.f16x2 %r5658,%r5659,%r7642;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5661, {low,high};}

	// end inline asm
	selp.b32 	%r5663, %r7347, %r5661, %p12;
	// begin inline asm
	{mul.f16x2 %r5662,%r5663,%r7389;
}
	// end inline asm
	selp.b32 	%r5666, %r7351, %r5661, %p12;
	// begin inline asm
	{mul.f16x2 %r5665,%r5666,%r7435;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5668, {low,high};}

	// end inline asm
	selp.b32 	%r5670, %r7347, %r5668, %p12;
	// begin inline asm
	{mul.f16x2 %r5669,%r5670,%r7645;
}
	// end inline asm
	selp.b32 	%r5673, %r7351, %r5668, %p12;
	// begin inline asm
	{mul.f16x2 %r5672,%r5673,%r7652;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5675, {low,high};}

	// end inline asm
	selp.b32 	%r5677, %r7347, %r5675, %p12;
	// begin inline asm
	{mul.f16x2 %r7378,%r5677,%r7650;
}
	// end inline asm
	selp.b32 	%r5680, %r7351, %r5675, %p12;
	// begin inline asm
	{mul.f16x2 %r7371,%r5680,%r7654;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5682, {low,high};}

	// end inline asm
	selp.b32 	%r5684, %r7347, %r5682, %p12;
	// begin inline asm
	{mul.f16x2 %r5683,%r5684,%r7637;
}
	// end inline asm
	selp.b32 	%r5687, %r7351, %r5682, %p12;
	// begin inline asm
	{mul.f16x2 %r5686,%r5687,%r7639;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5689, {low,high};}

	// end inline asm
	selp.b32 	%r5691, %r7347, %r5689, %p12;
	// begin inline asm
	{mul.f16x2 %r5690,%r5691,%r7638;
}
	// end inline asm
	selp.b32 	%r5694, %r7351, %r5689, %p12;
	// begin inline asm
	{mul.f16x2 %r5693,%r5694,%r7640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5696, {low,high};}

	// end inline asm
	selp.b32 	%r5698, %r7347, %r5696, %p12;
	// begin inline asm
	{mul.f16x2 %r5697,%r5698,%r7655;
}
	// end inline asm
	selp.b32 	%r5701, %r7351, %r5696, %p12;
	// begin inline asm
	{mul.f16x2 %r5700,%r5701,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5703,%r7496,%r3651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5706,%r3762,%r3608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5709,%r5703,%r5706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5712,%r7255,%r5709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5715,%r7495,%r5712;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7495, %r5715;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5718,%r7491,%r3717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5721,%r3796,%r3685;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5724,%r5718,%r5721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5727,%r7255,%r5724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5730,%r7490,%r5727;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7490, %r5730;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5733,%r7483,%r3884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5736,%r7497,%r3841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5739,%r5733,%r5736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5742,%r7255,%r5739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5745,%r7482,%r5742;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7482, %r5745;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5748,%r7480,%r3950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5751,%r7492,%r3918;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5754,%r5748,%r5751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5757,%r7255,%r5754;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5760,%r7479,%r5757;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7479, %r5760;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5763,%r7491,%r7496;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5766,%r7346,%r5763;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7844,%r5550;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7844,%r7347,%r5763;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5777, 31;
	mov.u32 	%r5779, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5775,%r7844,%r5777,%r2236,%r5779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5780,%r5766,%r5775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5783,%r7584,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r5783,%r5780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5789,%r7255,%r5786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7474,%r5550,%r5789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5795,%r7492,%r7497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5798,%r7346,%r5795;
}
	// end inline asm
	mov.u32 	%r7845, %r5557;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7845,%r7347,%r5795;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5807,%r7845,%r5777,%r2236,%r5779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5812,%r5798,%r5807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r7572,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r5812,%r5815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5821,%r7255,%r5818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r5557,%r5821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5827,%r7476,%r7496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5830,%r7487,%r7497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5833,%r5827,%r5830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5836,%r7255,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5839,%r7472,%r5836;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7472, %r5839;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7496;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5850, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5846,%r7496,%r413,%r2236,%r5850;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5846;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5852, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5853,%r5852,%r7491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5856,%r7350,%r5853;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7847,%r5553;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7847,%r7351,%r5853;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5869, 31;
	mov.u32 	%r5893, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5867,%r7847,%r5869,%r2236,%r5893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5872,%r5856,%r5867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5875,%r7581,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5878,%r5875,%r5872;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5881,%r7255,%r5878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r5553,%r5881;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7497;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5889,%r7497,%r413,%r2236,%r5893;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5889;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5895, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5896,%r5895,%r7492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5899,%r7350,%r5896;
}
	// end inline asm
	mov.u32 	%r7848, %r5560;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7848,%r7351,%r5896;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5910,%r7848,%r5869,%r2236,%r5893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5915,%r5899,%r5910;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r7569,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5921,%r5915,%r5918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5924,%r7255,%r5921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r5560,%r5924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5930,%r7467,%r7491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5933,%r7485,%r7492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5936,%r5930,%r5933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5939,%r7255,%r5936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5942,%r7463,%r5939;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7463, %r5942;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5947,%r7485,%r7487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5950,%r7346,%r5947;
}
	// end inline asm
	mov.u32 	%r7850, %r5571;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7850,%r7347,%r5947;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5959, 31;
	mov.u32 	%r5961, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5957,%r7850,%r5959,%r2236,%r5961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5962,%r5950,%r5957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r7566,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r5962,%r5965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5971,%r7255,%r5968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7456,%r5571,%r5971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r7458,%r4222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5980,%r4363,%r7487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r5977,%r5980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5986,%r7255,%r5983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5989,%r7455,%r5986;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7455, %r5989;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7487;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5996,%r7487,%r413,%r2236,%r5961;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5996;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6002, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6003,%r6002,%r7485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6006,%r7350,%r6003;
}
	// end inline asm
	mov.u32 	%r7852, %r5574;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7852,%r7351,%r6003;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6017, 31;
	mov.u32 	%r6019, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6015,%r7852,%r6017,%r2236,%r6019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6020,%r6006,%r6015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6023,%r7563,%r7581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6026,%r6020,%r6023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6029,%r7255,%r6026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7448,%r5574,%r6029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r7450,%r4303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6038,%r4397,%r7485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6041,%r6035,%r6038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6044,%r7255,%r6041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6047,%r7447,%r6044;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7447, %r6047;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6052,%r7480,%r7483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6055,%r7346,%r6052;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7854,%r5585;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7854,%r7347,%r6052;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6066, 31;
	mov.u32 	%r6068, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6064,%r7854,%r6066,%r2236,%r6068;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6069,%r6055,%r6064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6072,%r7572,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6075,%r6072,%r6069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6078,%r7255,%r6075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7438,%r5585,%r6078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6084,%r7683,%r7684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6087,%r7346,%r6084;
}
	// end inline asm
	mov.u32 	%r7855, %r5592;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7855,%r7347,%r6084;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6096,%r7855,%r6066,%r2236,%r6068;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6101,%r6087,%r6096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6104,%r7679,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6107,%r6101,%r6104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6110,%r7255,%r6107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7437,%r5592,%r6110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6116,%r7680,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6119,%r7477,%r7684;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6122,%r6116,%r6119;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6125,%r7255,%r6122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6128,%r7436,%r6125;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7436, %r6128;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7483;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6139, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6135,%r7483,%r413,%r2236,%r6139;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6135;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6141, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6142,%r6141,%r7480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6145,%r7350,%r6142;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7857,%r5588;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7857,%r7351,%r6142;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6158, 31;
	mov.u32 	%r6182, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6156,%r7857,%r6158,%r2236,%r6182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6161,%r6145,%r6156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6164,%r7569,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6167,%r6164,%r6161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6170,%r7255,%r6167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5588,%r6170;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7684;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6178,%r7684,%r413,%r2236,%r6182;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6178;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6184, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6185,%r6184,%r7683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6188,%r7350,%r6185;
}
	// end inline asm
	mov.u32 	%r7858, %r5595;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7858,%r7351,%r6185;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6199,%r7858,%r6158,%r2236,%r6182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6204,%r6188,%r6199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6207,%r7677,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6210,%r6204,%r6207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6213,%r7255,%r6210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7432,%r5595,%r6213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r7678,%r7480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6222,%r7468,%r7683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6225,%r6219,%r6222;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6228,%r7255,%r6225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6231,%r7431,%r6228;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7431, %r6231;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6236,%r7467,%r7476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6239,%r7346,%r6236;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7860,%r5606;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7860,%r7347,%r6236;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6250, 31;
	mov.u32 	%r6252, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6248,%r7860,%r6250,%r2236,%r6252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6253,%r6239,%r6248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6256,%r7566,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6259,%r6256,%r6253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6262,%r7255,%r6259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r5606,%r6262;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6268,%r7468,%r7477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6271,%r7346,%r6268;
}
	// end inline asm
	mov.u32 	%r7861, %r5613;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7861,%r7347,%r6268;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6280,%r7861,%r6250,%r2236,%r6252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6285,%r6271,%r6280;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6288,%r7559,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6291,%r6285,%r6288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6294,%r7255,%r6291;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7427,%r5613,%r6294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6300,%r7430,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r7459,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6306,%r6300,%r6303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6309,%r7255,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6312,%r7426,%r6309;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7426, %r6312;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7476;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6323, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6319,%r7476,%r413,%r2236,%r6323;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6319;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6325, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6326,%r6325,%r7467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6329,%r7350,%r6326;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7863,%r5609;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7863,%r7351,%r6326;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6342, 31;
	mov.u32 	%r6366, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6340,%r7863,%r6342,%r2236,%r6366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6345,%r6329,%r6340;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6348,%r7563,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6351,%r6348,%r6345;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6354,%r7255,%r6351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7421,%r5609,%r6354;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7477;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6362,%r7477,%r413,%r2236,%r6366;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6362;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6368, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6369,%r6368,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6372,%r7350,%r6369;
}
	// end inline asm
	mov.u32 	%r7864, %r5616;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7864,%r7351,%r6369;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6383,%r7864,%r6342,%r2236,%r6366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6388,%r6372,%r6383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6391,%r7557,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6394,%r6388,%r6391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6397,%r7255,%r6394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7420,%r5616,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6403,%r7423,%r7467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6406,%r7451,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6409,%r6403,%r6406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6412,%r7255,%r6409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6415,%r7419,%r6412;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7419, %r6415;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6420,%r7450,%r7458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6423,%r7346,%r6420;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7866,%r5627;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7866,%r7347,%r6420;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6434, 31;
	mov.u32 	%r6436, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6432,%r7866,%r6434,%r2236,%r6436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6437,%r6423,%r6432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6440,%r7562,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6443,%r6440,%r6437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6446,%r7255,%r6443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7415,%r5627,%r6446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6452,%r7451,%r7459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6455,%r7346,%r6452;
}
	// end inline asm
	mov.u32 	%r7867, %r5634;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7867,%r7347,%r6452;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6464,%r7867,%r6434,%r2236,%r6436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6469,%r6455,%r6464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6472,%r7556,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6475,%r6469,%r6472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6478,%r7255,%r6475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7414,%r5634,%r6478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6484,%r7663,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r7670,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6490,%r6484,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6493,%r7255,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6496,%r7413,%r6493;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7413, %r6496;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7458;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6507, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6503,%r7458,%r413,%r2236,%r6507;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6503;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6509, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6510,%r6509,%r7450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6513,%r7350,%r6510;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7869,%r5630;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7869,%r7351,%r6510;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6526, 31;
	mov.u32 	%r6550, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6524,%r7869,%r6526,%r2236,%r6550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6529,%r6513,%r6524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6532,%r7561,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6535,%r6532,%r6529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6538,%r7255,%r6535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7410,%r5630,%r6538;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7459;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6546,%r7459,%r413,%r2236,%r6550;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6546;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6552, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6553,%r6552,%r7451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6556,%r7350,%r6553;
}
	// end inline asm
	mov.u32 	%r7870, %r5637;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7870,%r7351,%r6553;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6567,%r7870,%r6526,%r2236,%r6550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6572,%r6556,%r6567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6575,%r7555,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6578,%r6572,%r6575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6581,%r7255,%r6578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7409,%r5637,%r6581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6587,%r7661,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6590,%r7667,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6593,%r6587,%r6590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6596,%r7255,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6599,%r7408,%r6596;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7408, %r6599;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6604,%r7667,%r7670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6607,%r7346,%r6604;
}
	// end inline asm
	mov.u32 	%r7872, %r5648;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7872,%r7347,%r6604;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6616, 31;
	mov.u32 	%r6640, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6614,%r7872,%r6616,%r2236,%r6640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6619,%r6607,%r6614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6622,%r7659,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6625,%r6619,%r6622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6628,%r7255,%r6625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7404,%r5648,%r6628;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7670;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6636,%r7670,%r413,%r2236,%r6640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6636;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6642, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6643,%r6642,%r7667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6646,%r7350,%r6643;
}
	// end inline asm
	mov.u32 	%r7873, %r5651;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7873,%r7351,%r6643;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6657,%r7873,%r6616,%r2236,%r6640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6662,%r6646,%r6657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6665,%r7660,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6668,%r6662,%r6665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6671,%r7255,%r6668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r5651,%r6671;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6677,%r7678,%r7680;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6680,%r7346,%r6677;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7874,%r5655;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7874,%r7347,%r6677;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6693, 31;
	mov.u32 	%r6717, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6691,%r7874,%r6693,%r2236,%r6717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6696,%r6680,%r6691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6699,%r7559,%r7679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6702,%r6699,%r6696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6705,%r7255,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7393,%r5655,%r6705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7680;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6713,%r7680,%r413,%r2236,%r6717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6713;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6719, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6720,%r6719,%r7678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6723,%r7350,%r6720;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7875,%r5658;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7875,%r7351,%r6720;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6738, 31;
	mov.u32 	%r6740, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6736,%r7875,%r6738,%r2236,%r6740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6741,%r6723,%r6736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6744,%r7557,%r7677;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6747,%r6744,%r6741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6750,%r7255,%r6747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7386,%r5658,%r6750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6756,%r7423,%r7430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6759,%r7346,%r6756;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7876,%r5662;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7876,%r7347,%r6756;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6772, 31;
	mov.u32 	%r6774, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6770,%r7876,%r6772,%r2236,%r6774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6775,%r6759,%r6770;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6778,%r7556,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6781,%r6778,%r6775;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6784,%r7255,%r6781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7380,%r5662,%r6784;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6790,%r7673,%r7674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6793,%r7346,%r6790;
}
	// end inline asm
	mov.u32 	%r7877, %r5669;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7877,%r7347,%r6790;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6802,%r7877,%r6772,%r2236,%r6774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6807,%r6793,%r6802;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6810,%r7676,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6813,%r6807,%r6810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6816,%r7255,%r6813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7379,%r5669,%r6816;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6822,%r7665,%r7430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6825,%r7664,%r7674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6828,%r6822,%r6825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6831,%r7255,%r6828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6834,%r7378,%r6831;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7378, %r6834;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7430;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6845, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6841,%r7430,%r413,%r2236,%r6845;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6841;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6847, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6848,%r6847,%r7423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6851,%r7350,%r6848;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7879,%r5665;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7879,%r7351,%r6848;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6864, 31;
	mov.u32 	%r6888, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6862,%r7879,%r6864,%r2236,%r6888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6867,%r6851,%r6862;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6870,%r7555,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6873,%r6870,%r6867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6876,%r7255,%r6873;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7373,%r5665,%r6876;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7674;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6884,%r7674,%r413,%r2236,%r6888;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6884;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6890, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6891,%r6890,%r7673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6894,%r7350,%r6891;
}
	// end inline asm
	mov.u32 	%r7880, %r5672;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7880,%r7351,%r6891;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6905,%r7880,%r6864,%r2236,%r6888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6910,%r6894,%r6905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6913,%r7682,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6916,%r6910,%r6913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6919,%r7255,%r6916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7372,%r5672,%r6919;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6925,%r7668,%r7423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6928,%r7662,%r7673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6931,%r6925,%r6928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6934,%r7255,%r6931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6937,%r7371,%r6934;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7371, %r6937;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6942,%r7661,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6945,%r7346,%r6942;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7882,%r5683;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7882,%r7347,%r6942;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6956, 31;
	mov.u32 	%r6958, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6954,%r7882,%r6956,%r2236,%r6958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6959,%r6945,%r6954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6962,%r7659,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6965,%r6962,%r6959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6968,%r7255,%r6965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7366,%r5683,%r6968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6974,%r7662,%r7664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6977,%r7346,%r6974;
}
	// end inline asm
	mov.u32 	%r7883, %r5690;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7883,%r7347,%r6974;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6986,%r7883,%r6956,%r2236,%r6958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6991,%r6977,%r6986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6994,%r7671,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6997,%r6991,%r6994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7000,%r7255,%r6997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7365,%r5690,%r7000;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7663;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7008,%r7663,%r413,%r2236,%r6958;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7008;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7014, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7015,%r7014,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7018,%r7350,%r7015;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7884,%r5686;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7884,%r7351,%r7015;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7033, 31;
	mov.u32 	%r7057, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7031,%r7884,%r7033,%r2236,%r7057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7036,%r7018,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7039,%r7660,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7042,%r7039,%r7036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7045,%r7255,%r7042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7358,%r5686,%r7045;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7664;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7053,%r7664,%r413,%r2236,%r7057;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7053;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7059, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7060,%r7059,%r7662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7063,%r7350,%r7060;
}
	// end inline asm
	mov.u32 	%r7885, %r5693;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7885,%r7351,%r7060;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7074,%r7885,%r7033,%r2236,%r7057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7079,%r7063,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7082,%r7672,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7085,%r7079,%r7082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7088,%r7255,%r7085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7357,%r5693,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7094,%r7668,%r7665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7097,%r7346,%r7094;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7886,%r5697;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7886,%r7347,%r7094;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7110, 31;
	mov.u32 	%r7134, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7108,%r7886,%r7110,%r2236,%r7134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7113,%r7097,%r7108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7116,%r7671,%r7676;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7119,%r7116,%r7113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7122,%r7255,%r7119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7389,%r5697,%r7122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7665;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7130,%r7665,%r413,%r2236,%r7134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7130;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7136, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7137,%r7136,%r7668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7140,%r7350,%r7137;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7887,%r5700;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7887,%r7351,%r7137;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7155, 31;
	mov.u32 	%r7157, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7153,%r7887,%r7155,%r2236,%r7157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r7140,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7161,%r7672,%r7682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7164,%r7161,%r7158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7167,%r7255,%r7164;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7435,%r5700,%r7167;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2135;
	shl.b32 	%r7176, %r24, 8;
	shl.b32 	%r7180, %r1730, 8;
	or.b32  	%r7181, %r7180, 128;
	mad.lo.s32 	%r7182, %r7181, %r23, %r2138;
	add.s32 	%r7183, %r7182, %r7176;
	shl.b32 	%r7184, %r7183, 2;
	mov.u32 	%r7185, _ZN6kernel5shmemE;
	add.s32 	%r7186, %r7185, %r7184;
	shl.b32 	%r7187, %r28, 4;
	add.s32 	%r1726, %r7186, %r7187;
	st.shared.v4.u32 	[%r1726], {%r7437, %r7432, %r7438, %r7433};
	st.shared.v4.u32 	[%r1726+512], {%r7482, %r7479, %r7473, %r7464};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1726+1024], {%r7474, %r7465, %r7495, %r7490};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2135;
	@%p378 bra 	$L__BB0_721;

	mul.lo.s32 	%r7191, %r2533, 384;
	mad.lo.s32 	%r7192, %r52, %r24, %r7191;
	mad.lo.s32 	%r7195, %r2133, %r2135, %r7192;
	mad.lo.s32 	%r7198, %r2131, %r2130, %r7195;
	shl.b32 	%r7199, %r7198, 2;
	mov.u32 	%r7200, _ZN6kernel5shmemE;
	add.s32 	%r7201, %r7200, %r7199;
	shl.b32 	%r7202, %r28, 4;
	add.s32 	%r7203, %r7201, %r7202;
	st.shared.v4.u32 	[%r7203], {%r7474, %r7465, %r7495, %r7490};
	st.shared.v4.u32 	[%r7203+512], {%r7456, %r7448, %r7415, %r7410};
	st.shared.v4.u32 	[%r7203+1024], {%r7455, %r7447, %r7404, %r7400};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2130;
	ld.param.u64 	%rd537, [%rd1+80];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7205, %r651, %r1732, %r26;
	mul.lo.s32 	%r7206, %r7205, %r1730;
	mul.lo.s32 	%r7207, %r7206, 768;
	add.s32 	%r7208, %r1730, %r24;
	mad.lo.s32 	%r7209, %r7208, 384, %r7207;
	add.s32 	%r7210, %r7209, -128;
	mul.wide.s32 	%rd538, %r7210, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7437, %r7432, %r7438, %r7433};
	st.global.v4.u32 	[%rd541+1024], {%r7482, %r7479, %r7473, %r7464};
	st.global.v4.u32 	[%rd541+1536], {%r7474, %r7465, %r7495, %r7490};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2135;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7212, %r652, %r1731, %r25;
	mad.lo.s32 	%r7220, %r2533, 384, %r52;
	mad.lo.s32 	%r7221, %r1788, %r51, %r7220;
	mad.lo.s32 	%r7222, %r7212, %r1786, %r7221;
	mul.wide.s32 	%rd542, %r7222, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7474, %r7465, %r7495, %r7490};
	st.global.v4.u32 	[%rd40+512], {%r7456, %r7448, %r7415, %r7410};
	st.global.v4.u32 	[%rd40+1024], {%r7455, %r7447, %r7404, %r7400};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7629, %r7632, %r7636, %r7635};

$L__BB0_726:
	rem.s32 	%r7223, %r7516, %r1733;
	setp.eq.s32 	%p372, %r7223, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r407, %r408;
	mov.u32 	%r7236, -2147483647;
	sub.s32 	%r7237, %r7236, %r406;
	selp.b32 	%r7238, %r7237, 1, %p375;
	atom.add.u32 	%r1727, [%rd545], %r7238;

$L__BB0_732:
	ld.volatile.u32 	%r7239, [%rd24+4];
	xor.b32  	%r7240, %r7239, %r1727;
	setp.gt.s32 	%p376, %r7240, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7516, %r7516, 1;
	setp.lt.s32 	%p377, %r7516, %r31;
	mov.u32 	%r7630, %r7796;
	mov.u32 	%r7631, %r7797;
	mov.u32 	%r7633, %r7799;
	mov.u32 	%r7634, %r7800;
	mov.u32 	%r7641, %r7811;
	mov.u32 	%r7642, %r7812;
	mov.u32 	%r7643, %r7813;
	mov.u32 	%r7644, %r7814;
	mov.u32 	%r7645, %r7815;
	mov.u32 	%r7646, %r7816;
	mov.u32 	%r7647, %r7817;
	mov.u32 	%r7650, %r7820;
	mov.u32 	%r7652, %r7822;
	mov.u32 	%r7654, %r7824;
	mov.u32 	%r7444, %r474;
	mov.u32 	%r7445, %r7707;
	mov.u32 	%r7452, %r481;
	mov.u32 	%r7453, %r7709;
	mov.u32 	%r7460, %r488;
	mov.u32 	%r7469, %r496;
	mov.u32 	%r7478, %r7714;
	mov.u32 	%r7481, %r7716;
	mov.u32 	%r7484, %r526;
	mov.u32 	%r7486, %r534;
	mov.u32 	%r7488, %r541;
	mov.u32 	%r7489, %r542;
	mov.u32 	%r7493, %r550;
	mov.u32 	%r7494, %r551;
	mov.u32 	%r7637, %r7805;
	mov.u32 	%r7638, %r7806;
	mov.u32 	%r7639, %r7807;
	mov.u32 	%r7640, %r7808;
	mov.u32 	%r7655, %r7825;
	mov.u32 	%r7656, %r7826;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}

