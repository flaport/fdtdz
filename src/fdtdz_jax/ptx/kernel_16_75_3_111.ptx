//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<500>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7940>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<566>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1728, %r1729}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1746, %r1747}, [_ZN6kernel16SimulationKernelI7__half2fLi3ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1748, 32;
	sub.s32 	%r39, %r1748, %r1735;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p15, %r39, %r40;
	add.s32 	%r1749, %r1741, -1;
	mad.lo.s32 	%r1750, %r1749, %r1740, %r1739;
	add.s32 	%r1751, %r1734, %r1733;
	add.s32 	%r1752, %r1751, %r1750;
	add.s32 	%r1753, %r1752, 1;
	mul.lo.s32 	%r1754, %r1728, %r1730;
	shl.b32 	%r41, %r1754, 1;
	shl.b32 	%r1755, %r1754, 2;
	div.s32 	%r1756, %r1753, %r1755;
	add.s32 	%r1757, %r1756, 1;
	mul.lo.s32 	%r1758, %r1757, %r1734;
	mul.lo.s32 	%r1759, %r1729, %r1731;
	shl.b32 	%r42, %r1759, 1;
	div.s32 	%r1760, %r1758, %r42;
	add.s32 	%r1761, %r1760, 1;
	mul.lo.s32 	%r43, %r1761, %r1733;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7319, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1764, %r1730, %r38, %r37;
	mad.lo.s32 	%r1765, %r1764, %r1729, %r36;
	mul.lo.s32 	%r47, %r1765, %r1728;
	add.s32 	%r1766, %r47, %r35;
	shl.b32 	%r48, %r1766, 5;
	add.s32 	%r7324, %r48, %r40;
	mul.lo.s32 	%r1767, %r1759, %r1754;
	shl.b32 	%r52, %r1767, 5;
	sub.s32 	%r53, %r1743, %r1742;
	mul.lo.s32 	%r1768, %r1741, %r53;
	sub.s32 	%r54, %r1745, %r1744;
	mul.lo.s32 	%r1769, %r1768, %r54;
	sub.s32 	%r55, %r1747, %r1746;
	mul.lo.s32 	%r1770, %r1769, %r55;
	mul.lo.s32 	%r56, %r1770, 3;
	setp.ge.s32 	%p16, %r7324, %r56;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1771, %r40;
	add.s32 	%r1772, %r56, %r1771;
	sub.s32 	%r1773, %r1772, %r48;
	mul.lo.s32 	%r1774, %r1759, %r1728;
	mul.lo.s32 	%r1775, %r1774, %r1730;
	shl.b32 	%r57, %r1775, 5;
	div.u32 	%r58, %r1773, %r57;
	add.s32 	%r1776, %r58, 1;
	and.b32  	%r7321, %r1776, 3;
	setp.eq.s32 	%p17, %r7321, 0;
	mov.u32 	%r7322, %r7324;
	@%p17 bra 	$L__BB0_7;

	shl.b32 	%r1777, %r47, 5;
	add.s32 	%r1778, %r40, %r1777;
	shl.b32 	%r1779, %r35, 5;
	add.s32 	%r7322, %r1778, %r1779;
	mul.wide.s32 	%rd46, %r7324, 4;
	add.s64 	%rd563, %rd2, %rd46;
	mul.wide.s32 	%rd4, %r57, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1780, 0;
	st.global.u32 	[%rd563], %r1780;
	add.s32 	%r7322, %r7322, %r57;
	add.s64 	%rd563, %rd563, %rd4;
	add.s32 	%r7321, %r7321, -1;
	setp.ne.s32 	%p18, %r7321, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r58, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd49, %r52, 4;

$L__BB0_9:
	mul.wide.s32 	%rd47, %r7322, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1781, 0;
	st.global.u32 	[%rd48], %r1781;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.u32 	[%rd50], %r1781;
	add.s32 	%r1782, %r7322, %r52;
	add.s32 	%r1783, %r1782, %r52;
	add.s64 	%rd51, %rd50, %rd49;
	st.global.u32 	[%rd51], %r1781;
	add.s32 	%r1784, %r1783, %r52;
	add.s64 	%rd52, %rd51, %rd49;
	st.global.u32 	[%rd52], %r1781;
	add.s32 	%r7322, %r1784, %r52;
	setp.lt.s32 	%p20, %r7322, %r56;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd53, [%rd1+80];
	cvta.to.global.u64 	%rd7, %rd53;
	sub.s32 	%r1785, %r1734, %r41;
	div.s32 	%r1786, %r1785, %r42;
	mul.lo.s32 	%r1787, %r1786, %r1733;
	sub.s32 	%r68, %r1787, %r41;
	sub.s32 	%r1788, %r1733, %r42;
	mul.lo.s32 	%r1789, %r1788, %r1730;
	mul.lo.s32 	%r69, %r1728, 384;
	add.s32 	%r1790, %r69, %r69;
	add.s32 	%r1791, %r1790, 128;
	mul.lo.s32 	%r1793, %r1759, 768;
	mul.lo.s32 	%r1794, %r1789, %r1791;
	mad.lo.s32 	%r70, %r1793, %r68, %r1794;
	bra.uni 	$L__BB0_11;

$L__BB0_865:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd551, %r7324, 4;
	add.s64 	%rd552, %rd7, %rd551;
	st.global.u32 	[%rd552], %r7296;
	add.s32 	%r7324, %r7324, %r52;

$L__BB0_11:
	setp.lt.s32 	%p21, %r7324, %r70;
	@%p21 bra 	$L__BB0_865;

	ld.param.u64 	%rd54, [%rd1+120];
	cvta.to.global.u64 	%rd9, %rd54;
	ld.param.u64 	%rd55, [%rd1+88];
	cvta.to.global.u64 	%rd10, %rd55;
	mad.lo.s32 	%r7366, %r1728, %r37, %r35;
	mul.lo.s32 	%r74, %r1729, %r38;
	add.s32 	%r75, %r74, %r36;
	setp.ge.s32 	%p22, %r7366, %r1733;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r39, %r40;
	mov.u32 	%r1795, 31;
	sub.s32 	%r1796, %r1795, %r40;
	selp.b32 	%r1797, %r40, %r1796, %p23;
	shl.b32 	%r1798, %r1797, 2;
	mov.u32 	%r1799, 2;
	sub.s32 	%r76, %r1798, %r1736;
	shl.b32 	%r1800, %r1735, 2;
	mov.u32 	%r1801, 128;
	sub.s32 	%r77, %r1801, %r1800;
	add.s32 	%r78, %r1743, -1;
	add.s32 	%r79, %r1745, -1;
	add.s32 	%r80, %r1747, -1;
	sub.s32 	%r1802, %r1799, %r1736;
	add.s32 	%r81, %r1802, %r1798;
	mul.lo.s32 	%r1803, %r1734, %r1733;
	shl.b32 	%r82, %r1803, 6;
	add.s32 	%r83, %r1733, -1;
	add.s32 	%r84, %r76, 1;
	add.s32 	%r85, %r81, 1;
	shl.b32 	%r86, %r40, 1;
	or.b32  	%r87, %r86, 1;
	shr.u32 	%r1804, %r87, 31;
	add.s32 	%r1805, %r87, %r1804;
	shr.s32 	%r89, %r1805, 1;
	and.b32  	%r1806, %r1805, -2;
	sub.s32 	%r1807, %r87, %r1806;
	add.s32 	%r88, %r1807, %r82;
	rem.s32 	%r1853, %r84, %r77;
	add.s32 	%r1854, %r1853, %r77;
	rem.s32 	%r1855, %r1854, %r77;
	rem.s32 	%r1858, %r85, %r77;
	add.s32 	%r1859, %r1858, %r77;
	rem.s32 	%r1860, %r1859, %r77;
	mov.u32 	%r7325, %r7366;

$L__BB0_14:
	setp.ge.s32 	%p24, %r75, %r1734;
	@%p24 bra 	$L__BB0_35;

	setp.gt.s32 	%p25, %r1742, %r7325;
	setp.gt.s32 	%p26, %r1743, %r7325;
	selp.b32 	%r1808, %r7325, %r78, %p26;
	selp.b32 	%r1809, %r1742, %r1808, %p25;
	sub.s32 	%r1810, %r1809, %r1742;
	add.s32 	%r91, %r83, %r7325;
	rem.s32 	%r1811, %r76, %r77;
	add.s32 	%r1812, %r1811, %r77;
	rem.s32 	%r1813, %r1812, %r77;
	setp.gt.s32 	%p27, %r1746, %r1813;
	setp.gt.s32 	%p28, %r1747, %r1813;
	selp.b32 	%r1814, %r1813, %r80, %p28;
	selp.b32 	%r1815, %r1746, %r1814, %p27;
	rem.s32 	%r1816, %r81, %r77;
	add.s32 	%r1817, %r1816, %r77;
	rem.s32 	%r1818, %r1817, %r77;
	setp.gt.s32 	%p29, %r1746, %r1818;
	setp.gt.s32 	%p30, %r1747, %r1818;
	selp.b32 	%r1819, %r1818, %r80, %p30;
	selp.b32 	%r1820, %r1746, %r1819, %p29;
	sub.s32 	%r92, %r1815, %r1746;
	sub.s32 	%r93, %r1820, %r1746;
	mul.lo.s32 	%r94, %r1810, %r54;
	add.s32 	%r1821, %r1810, %r53;
	mul.lo.s32 	%r95, %r1821, %r54;
	add.s32 	%r1822, %r1821, %r53;
	mul.lo.s32 	%r96, %r1822, %r54;
	mov.u32 	%r7326, %r75;

$L__BB0_16:
	setp.gt.s32 	%p31, %r1745, %r7326;
	selp.b32 	%r1823, %r7326, %r79, %p31;
	setp.gt.s32 	%p32, %r1744, %r7326;
	selp.b32 	%r1824, %r1744, %r1823, %p32;
	sub.s32 	%r98, %r1824, %r1744;
	mul.lo.s32 	%r99, %r7326, %r1733;
	add.s32 	%r100, %r99, %r7325;
	shl.b32 	%r101, %r100, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1827, %r98, %r94;
	mul.lo.s32 	%r1828, %r1827, %r55;
	add.s32 	%r1829, %r92, %r1828;
	mul.wide.s32 	%rd56, %r1829, 4;
	add.s64 	%rd57, %rd9, %rd56;
	ld.global.f32 	%f41, [%rd57];
	add.s32 	%r1830, %r93, %r1828;
	mul.wide.s32 	%rd58, %r1830, 4;
	add.s64 	%rd59, %rd9, %rd58;
	ld.global.f32 	%f42, [%rd59];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r105, %r100, 5;
	add.s32 	%r1831, %r105, %r40;
	shl.b32 	%r1832, %r1831, 2;
	add.s32 	%r1833, %r82, %r1832;
	mul.wide.s32 	%rd60, %r1833, 4;
	add.s64 	%rd61, %rd10, %rd60;
	st.global.u32 	[%rd61], %r7327;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1836, %r98, %r95;
	mul.lo.s32 	%r1837, %r1836, %r55;
	add.s32 	%r1838, %r92, %r1837;
	mul.wide.s32 	%rd62, %r1838, 4;
	add.s64 	%rd63, %rd9, %rd62;
	ld.global.f32 	%f45, [%rd63];
	add.s32 	%r1839, %r93, %r1837;
	mul.wide.s32 	%rd64, %r1839, 4;
	add.s64 	%rd65, %rd9, %rd64;
	ld.global.f32 	%f46, [%rd65];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1840, %r86, %r101;
	mul.wide.s32 	%rd66, %r1840, 4;
	add.s64 	%rd67, %rd10, %rd66;
	st.global.u32 	[%rd67], %r7328;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1843, %r98, %r96;
	mul.lo.s32 	%r1844, %r1843, %r55;
	add.s32 	%r1845, %r92, %r1844;
	mul.wide.s32 	%rd68, %r1845, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f49, [%rd69];
	add.s32 	%r1846, %r93, %r1844;
	mul.wide.s32 	%rd70, %r1846, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f50, [%rd71];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1847, %r91, %r1733;
	add.s32 	%r1848, %r1847, %r99;
	shl.b32 	%r112, %r1848, 5;
	add.s32 	%r1849, %r112, %r40;
	shl.b32 	%r1850, %r1849, 2;
	add.s32 	%r1851, %r82, %r1850;
	add.s32 	%r1852, %r1851, 2;
	mul.wide.s32 	%rd72, %r1852, 4;
	add.s64 	%rd73, %rd10, %rd72;
	st.global.u32 	[%rd73], %r7329;
	setp.gt.s32 	%p36, %r1746, %r1855;
	setp.gt.s32 	%p37, %r1747, %r1855;
	selp.b32 	%r1856, %r1855, %r80, %p37;
	selp.b32 	%r1857, %r1746, %r1856, %p36;
	setp.gt.s32 	%p38, %r1746, %r1860;
	setp.gt.s32 	%p39, %r1747, %r1860;
	selp.b32 	%r1861, %r1860, %r80, %p39;
	selp.b32 	%r1862, %r1746, %r1861, %p38;
	sub.s32 	%r113, %r1857, %r1746;
	sub.s32 	%r114, %r1862, %r1746;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1865, %r98, %r94;
	mul.lo.s32 	%r1866, %r1865, %r55;
	add.s32 	%r1867, %r113, %r1866;
	mul.wide.s32 	%rd74, %r1867, 4;
	add.s64 	%rd75, %rd9, %rd74;
	ld.global.f32 	%f53, [%rd75];
	add.s32 	%r1868, %r114, %r1866;
	mul.wide.s32 	%rd76, %r1868, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f54, [%rd77];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7330, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1869, %r105, %r89;
	shl.b32 	%r1870, %r1869, 2;
	add.s32 	%r1871, %r88, %r1870;
	mul.wide.s32 	%rd78, %r1871, 4;
	add.s64 	%rd79, %rd10, %rd78;
	st.global.u32 	[%rd79], %r7330;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1874, %r98, %r95;
	mul.lo.s32 	%r1875, %r1874, %r55;
	add.s32 	%r1876, %r113, %r1875;
	mul.wide.s32 	%rd80, %r1876, 4;
	add.s64 	%rd81, %rd9, %rd80;
	ld.global.f32 	%f57, [%rd81];
	add.s32 	%r1877, %r114, %r1875;
	mul.wide.s32 	%rd82, %r1877, 4;
	add.s64 	%rd83, %rd9, %rd82;
	ld.global.f32 	%f58, [%rd83];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7331, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1878, %r87, %r101;
	mul.wide.s32 	%rd84, %r1878, 4;
	add.s64 	%rd85, %rd10, %rd84;
	st.global.u32 	[%rd85], %r7331;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1881, %r98, %r96;
	mul.lo.s32 	%r1882, %r1881, %r55;
	add.s32 	%r1883, %r113, %r1882;
	mul.wide.s32 	%rd86, %r1883, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f61, [%rd87];
	add.s32 	%r1884, %r114, %r1882;
	mul.wide.s32 	%rd88, %r1884, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f62, [%rd89];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7332, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1885, %r112, %r89;
	shl.b32 	%r1886, %r1885, 2;
	add.s32 	%r1887, %r88, %r1886;
	add.s32 	%r1888, %r1887, 2;
	mul.wide.s32 	%rd90, %r1888, 4;
	add.s64 	%rd91, %rd10, %rd90;
	st.global.u32 	[%rd91], %r7332;
	add.s32 	%r7326, %r7326, %r1759;
	setp.lt.s32 	%p43, %r7326, %r1734;
	@%p43 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7325, %r7325, %r1754;
	setp.lt.s32 	%p44, %r7325, %r1733;
	@%p44 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd92, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd92;
	ld.param.u64 	%rd93, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd93;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r126, %r75, 1;
	mov.u64 	%rd94, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7333, %r7366;

$L__BB0_38:
	setp.ge.s32 	%p46, %r126, %r1734;
	@%p46 bra 	$L__BB0_119;

	mov.u32 	%r7334, %r126;

$L__BB0_40:
	setp.ne.s32 	%p47, %r40, 0;
	@%p47 bra 	$L__BB0_118;

	shr.u32 	%r1890, %r7334, 31;
	add.s32 	%r1891, %r7334, %r1890;
	shr.s32 	%r1892, %r1891, 1;
	mad.lo.s32 	%r1893, %r1892, %r1733, %r7333;
	shl.b32 	%r130, %r1893, 5;
	add.s32 	%r131, %r7334, -2;
	mul.lo.s32 	%r132, %r131, %r1733;
	add.s32 	%r1894, %r1734, %r131;
	mul.lo.s32 	%r133, %r1894, %r1733;
	add.s32 	%r1895, %r1894, %r1734;
	mul.lo.s32 	%r134, %r1895, %r1733;
	add.s32 	%r135, %r132, %r1733;
	add.s32 	%r136, %r7334, -1;
	add.s32 	%r1896, %r1734, %r136;
	mul.lo.s32 	%r137, %r1896, %r1733;
	add.s32 	%r1897, %r1896, %r1734;
	mul.lo.s32 	%r138, %r1897, %r1733;
	add.s32 	%r1898, %r1734, %r7334;
	mul.lo.s32 	%r139, %r1898, %r1733;
	add.s32 	%r1899, %r1898, %r1734;
	mul.lo.s32 	%r140, %r1899, %r1733;
	mul.lo.s32 	%r141, %r7334, %r1733;
	add.s32 	%r142, %r141, %r1733;
	add.s32 	%r143, %r7334, 1;
	add.s32 	%r1900, %r1734, %r143;
	mul.lo.s32 	%r144, %r1900, %r1733;
	add.s32 	%r1901, %r1900, %r1734;
	mul.lo.s32 	%r145, %r1901, %r1733;
	add.s32 	%r146, %r142, %r1733;
	add.s32 	%r147, %r7334, 2;
	add.s32 	%r1902, %r1734, %r147;
	mul.lo.s32 	%r148, %r1902, %r1733;
	add.s32 	%r1903, %r1902, %r1734;
	mul.lo.s32 	%r149, %r1903, %r1733;
	mov.u32 	%r7337, 0;
	mov.u64 	%rd564, %rd94;

$L__BB0_42:
	ld.global.nc.u32 	%r1904, [%rd564];
	cvt.rn.f64.s32 	%fd1, %r1904;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r151, %r1904, %r7333;
	setp.lt.s32 	%p48, %r151, %r1733;
	or.b32  	%r1905, %r131, %r151;
	setp.gt.s32 	%p49, %r1905, -1;
	and.pred  	%p50, %p48, %p49;
	setp.lt.s32 	%p51, %r131, %r1734;
	and.pred  	%p1, %p51, %p50;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p52, %f65, 0f40000000;
	@%p52 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1908, %r132, %r151;
	mul.wide.s32 	%rd95, %r1908, 4;
	add.s64 	%rd96, %rd11, %rd95;
	ld.global.f32 	%f68, [%rd96];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7336, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7336, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1909, %r7337, %r130;
	mul.wide.s32 	%rd97, %r1909, 4;
	add.s64 	%rd98, %rd12, %rd97;
	st.global.u32 	[%rd98], %r7336;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p53, %f3, 0f40000000;
	@%p53 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1912, %r133, %r151;
	mul.wide.s32 	%rd99, %r1912, 4;
	add.s64 	%rd100, %rd11, %rd99;
	ld.global.f32 	%f73, [%rd100];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7338, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7338, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1913, %r7337, %r130;
	mul.wide.s32 	%rd101, %r1913, 4;
	add.s64 	%rd102, %rd12, %rd101;
	st.global.u32 	[%rd102], %r7338;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p54, %f74, 0f40000000;
	@%p54 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1916, %r134, %r151;
	mul.wide.s32 	%rd103, %r1916, 4;
	add.s64 	%rd104, %rd11, %rd103;
	ld.global.f32 	%f77, [%rd104];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7340, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7340, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1917, %r7337, %r130;
	mul.wide.s32 	%rd105, %r1917, 4;
	add.s64 	%rd106, %rd12, %rd105;
	st.global.u32 	[%rd106], %r7340;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_57:
	or.b32  	%r1918, %r136, %r151;
	setp.gt.s32 	%p55, %r1918, -1;
	and.pred  	%p57, %p48, %p55;
	setp.le.s32 	%p58, %r7334, %r1734;
	and.pred  	%p2, %p58, %p57;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p59, %f4, 0f40000000;
	@%p59 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1921, %r135, %r151;
	mul.wide.s32 	%rd107, %r1921, 4;
	add.s64 	%rd108, %rd11, %rd107;
	ld.global.f32 	%f80, [%rd108];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7342, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1922, %r7337, %r130;
	mul.wide.s32 	%rd109, %r1922, 4;
	add.s64 	%rd110, %rd12, %rd109;
	st.global.u32 	[%rd110], %r7342;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p60, %f5, 0f40000000;
	@%p60 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1925, %r137, %r151;
	mul.wide.s32 	%rd111, %r1925, 4;
	add.s64 	%rd112, %rd11, %rd111;
	ld.global.f32 	%f83, [%rd112];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7344, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1926, %r7337, %r130;
	mul.wide.s32 	%rd113, %r1926, 4;
	add.s64 	%rd114, %rd12, %rd113;
	st.global.u32 	[%rd114], %r7344;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p61, %f6, 0f40000000;
	@%p61 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1929, %r138, %r151;
	mul.wide.s32 	%rd115, %r1929, 4;
	add.s64 	%rd116, %rd11, %rd115;
	ld.global.f32 	%f86, [%rd116];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7346, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7346, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1930, %r7337, %r130;
	mul.wide.s32 	%rd117, %r1930, 4;
	add.s64 	%rd118, %rd12, %rd117;
	st.global.u32 	[%rd118], %r7346;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_72:
	or.b32  	%r1931, %r7334, %r151;
	setp.gt.s32 	%p62, %r1931, -1;
	and.pred  	%p64, %p48, %p62;
	setp.lt.s32 	%p65, %r7334, %r1734;
	and.pred  	%p3, %p65, %p64;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p66, %f7, 0f40000000;
	@%p66 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1934, %r141, %r151;
	mul.wide.s32 	%rd119, %r1934, 4;
	add.s64 	%rd120, %rd11, %rd119;
	ld.global.f32 	%f89, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7348, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7348, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1935, %r7337, %r130;
	mul.wide.s32 	%rd121, %r1935, 4;
	add.s64 	%rd122, %rd12, %rd121;
	st.global.u32 	[%rd122], %r7348;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p67, %f90, 0f40000000;
	@%p67 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1938, %r139, %r151;
	mul.wide.s32 	%rd123, %r1938, 4;
	add.s64 	%rd124, %rd11, %rd123;
	ld.global.f32 	%f93, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7350, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7350, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1939, %r7337, %r130;
	mul.wide.s32 	%rd125, %r1939, 4;
	add.s64 	%rd126, %rd12, %rd125;
	st.global.u32 	[%rd126], %r7350;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p68, %f8, 0f40000000;
	@%p68 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1942, %r140, %r151;
	mul.wide.s32 	%rd127, %r1942, 4;
	add.s64 	%rd128, %rd11, %rd127;
	ld.global.f32 	%f96, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7352, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7352, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1943, %r7337, %r130;
	mul.wide.s32 	%rd129, %r1943, 4;
	add.s64 	%rd130, %rd12, %rd129;
	st.global.u32 	[%rd130], %r7352;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_87:
	or.b32  	%r1944, %r143, %r151;
	setp.gt.s32 	%p69, %r1944, -1;
	and.pred  	%p71, %p48, %p69;
	setp.lt.s32 	%p72, %r143, %r1734;
	and.pred  	%p4, %p72, %p71;
	@%p66 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1947, %r142, %r151;
	mul.wide.s32 	%rd131, %r1947, 4;
	add.s64 	%rd132, %rd11, %rd131;
	ld.global.f32 	%f99, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7354, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7354, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1948, %r7337, %r130;
	mul.wide.s32 	%rd133, %r1948, 4;
	add.s64 	%rd134, %rd12, %rd133;
	st.global.u32 	[%rd134], %r7354;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_92:
	@%p60 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1951, %r144, %r151;
	mul.wide.s32 	%rd135, %r1951, 4;
	add.s64 	%rd136, %rd11, %rd135;
	ld.global.f32 	%f102, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7356, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7356, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1952, %r7337, %r130;
	mul.wide.s32 	%rd137, %r1952, 4;
	add.s64 	%rd138, %rd12, %rd137;
	st.global.u32 	[%rd138], %r7356;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_97:
	@%p68 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1955, %r145, %r151;
	mul.wide.s32 	%rd139, %r1955, 4;
	add.s64 	%rd140, %rd11, %rd139;
	ld.global.f32 	%f105, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7358, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7358, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1956, %r7337, %r130;
	mul.wide.s32 	%rd141, %r1956, 4;
	add.s64 	%rd142, %rd12, %rd141;
	st.global.u32 	[%rd142], %r7358;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_102:
	or.b32  	%r1957, %r147, %r151;
	setp.gt.s32 	%p76, %r1957, -1;
	and.pred  	%p78, %p48, %p76;
	setp.lt.s32 	%p79, %r147, %r1734;
	and.pred  	%p5, %p79, %p78;
	@%p59 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1960, %r146, %r151;
	mul.wide.s32 	%rd143, %r1960, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f108, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7360, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7360, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1961, %r7337, %r130;
	mul.wide.s32 	%rd145, %r1961, 4;
	add.s64 	%rd146, %rd12, %rd145;
	st.global.u32 	[%rd146], %r7360;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_107:
	@%p53 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1964, %r148, %r151;
	mul.wide.s32 	%rd147, %r1964, 4;
	add.s64 	%rd148, %rd11, %rd147;
	ld.global.f32 	%f111, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7362, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7362, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1965, %r7337, %r130;
	mul.wide.s32 	%rd149, %r1965, 4;
	add.s64 	%rd150, %rd12, %rd149;
	st.global.u32 	[%rd150], %r7362;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_112:
	@%p61 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1968, %r149, %r151;
	mul.wide.s32 	%rd151, %r1968, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f114, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7364, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7364, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1969, %r7337, %r130;
	mul.wide.s32 	%rd153, %r1969, 4;
	add.s64 	%rd154, %rd12, %rd153;
	st.global.u32 	[%rd154], %r7364;
	add.s32 	%r7337, %r7337, 1;

$L__BB0_117:
	add.s64 	%rd564, %rd564, 4;
	mov.u64 	%rd155, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd156, %rd155, 24;
	setp.ne.s64 	%p83, %rd564, %rd156;
	@%p83 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7334, %r7334, %r42;
	setp.lt.s32 	%p84, %r7334, %r1734;
	@%p84 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7333, %r7333, %r1754;
	setp.lt.s32 	%p85, %r7333, %r1733;
	@%p85 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p86, %r1737, 1;
	ld.param.u64 	%rd157, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd157;
	ld.param.u64 	%rd158, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd158;
	@%p86 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r255, %r75, 1;
	shr.u32 	%r2017, %r1738, 31;
	add.s32 	%r2018, %r1738, %r2017;
	shr.u32 	%r2019, %r2018, 1;
	and.b32  	%r256, %r2019, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd259, %rd177, 24;

$L__BB0_140:
	setp.ge.s32 	%p96, %r255, %r1734;
	@%p96 bra 	$L__BB0_266;

	mov.u32 	%r7372, %r255;

$L__BB0_142:
	setp.ne.s32 	%p97, %r40, 0;
	@%p97 bra 	$L__BB0_265;

	shr.u32 	%r2021, %r7372, 31;
	add.s32 	%r2022, %r7372, %r2021;
	shr.s32 	%r2023, %r2022, 1;
	mad.lo.s32 	%r2024, %r2023, %r1733, %r7366;
	shl.b32 	%r260, %r2024, 5;
	add.s32 	%r261, %r7372, -2;
	mul.lo.s32 	%r262, %r261, %r1733;
	add.s32 	%r2025, %r1734, %r261;
	mul.lo.s32 	%r263, %r2025, %r1733;
	add.s32 	%r264, %r262, %r1733;
	add.s32 	%r265, %r7372, -1;
	add.s32 	%r2026, %r1734, %r265;
	mul.lo.s32 	%r266, %r2026, %r1733;
	add.s32 	%r2027, %r1734, %r7372;
	mul.lo.s32 	%r267, %r2027, %r1733;
	mul.lo.s32 	%r268, %r7372, %r1733;
	add.s32 	%r269, %r268, %r1733;
	add.s32 	%r270, %r7372, 1;
	add.s32 	%r2028, %r1734, %r270;
	mul.lo.s32 	%r271, %r2028, %r1733;
	add.s32 	%r272, %r269, %r1733;
	add.s32 	%r273, %r7372, 2;
	add.s32 	%r2029, %r1734, %r273;
	mul.lo.s32 	%r274, %r2029, %r1733;
	mov.u32 	%r7376, 0;
	mov.u64 	%rd565, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r2030, [%rd565];
	cvt.rn.f64.s32 	%fd2, %r2030;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r276, %r2030, %r7366;
	setp.lt.s32 	%p98, %r276, %r1733;
	or.b32  	%r2031, %r261, %r276;
	setp.gt.s32 	%p99, %r2031, -1;
	and.pred  	%p100, %p98, %p99;
	setp.lt.s32 	%p101, %r261, %r1734;
	and.pred  	%p6, %p101, %p100;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p102, %f133, 0f40000000;
	@%p102 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p103, %r256, 0;
	add.s32 	%r2033, %r262, %r276;
	shl.b32 	%r2034, %r2033, 1;
	mul.wide.s32 	%rd178, %r2034, 4;
	add.s64 	%rd179, %rd15, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p103 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7374, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7374, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r281, %r7376, %r260;
	mul.wide.s32 	%rd180, %r281, 4;
	add.s64 	%rd181, %rd16, %rd180;
	st.global.u32 	[%rd181], %r7374;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p104, %r256, 0;
	add.s32 	%r2038, %r263, %r276;
	shl.b32 	%r2039, %r2038, 1;
	mul.wide.s32 	%rd182, %r2039, 4;
	add.s64 	%rd183, %rd15, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p104 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7375, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7375, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7375, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2042, %r281, 1;
	mul.wide.s32 	%rd184, %r2042, 4;
	add.s64 	%rd185, %rd16, %rd184;
	st.global.u32 	[%rd185], %r7375;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p105, %f13, 0f40000000;
	@%p105 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p106, %r256, 0;
	add.s32 	%r2044, %r262, %r276;
	shl.b32 	%r2045, %r2044, 1;
	or.b32  	%r2046, %r2045, 1;
	mul.wide.s32 	%rd186, %r2046, 4;
	add.s64 	%rd187, %rd15, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p106 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7377, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7377, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r292, %r7376, %r260;
	mul.wide.s32 	%rd188, %r292, 4;
	add.s64 	%rd189, %rd16, %rd188;
	st.global.u32 	[%rd189], %r7377;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p107, %r256, 0;
	add.s32 	%r2050, %r263, %r276;
	shl.b32 	%r2051, %r2050, 1;
	or.b32  	%r2052, %r2051, 1;
	mul.wide.s32 	%rd190, %r2052, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p107 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7378, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7378, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7378, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2055, %r292, 1;
	mul.wide.s32 	%rd192, %r2055, 4;
	add.s64 	%rd193, %rd16, %rd192;
	st.global.u32 	[%rd193], %r7378;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_168:
	or.b32  	%r2056, %r265, %r276;
	setp.gt.s32 	%p108, %r2056, -1;
	and.pred  	%p110, %p98, %p108;
	setp.le.s32 	%p111, %r7372, %r1734;
	and.pred  	%p7, %p111, %p110;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p112, %f16, 0f40000000;
	@%p112 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p113, %r256, 0;
	add.s32 	%r2058, %r264, %r276;
	shl.b32 	%r2059, %r2058, 1;
	mul.wide.s32 	%rd194, %r2059, 4;
	add.s64 	%rd195, %rd15, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p113 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7380, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7380, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7380, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r303, %r7376, %r260;
	mul.wide.s32 	%rd196, %r303, 4;
	add.s64 	%rd197, %rd16, %rd196;
	st.global.u32 	[%rd197], %r7380;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p114, %r256, 0;
	add.s32 	%r2063, %r266, %r276;
	shl.b32 	%r2064, %r2063, 1;
	mul.wide.s32 	%rd198, %r2064, 4;
	add.s64 	%rd199, %rd15, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p114 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7381, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7381, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7381, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2067, %r303, 1;
	mul.wide.s32 	%rd200, %r2067, 4;
	add.s64 	%rd201, %rd16, %rd200;
	st.global.u32 	[%rd201], %r7381;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p115, %f19, 0f40000000;
	@%p115 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p116, %r256, 0;
	add.s32 	%r2069, %r264, %r276;
	shl.b32 	%r2070, %r2069, 1;
	or.b32  	%r2071, %r2070, 1;
	mul.wide.s32 	%rd202, %r2071, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p116 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7383, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r314, %r7376, %r260;
	mul.wide.s32 	%rd204, %r314, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7383;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p117, %r256, 0;
	add.s32 	%r2075, %r266, %r276;
	shl.b32 	%r2076, %r2075, 1;
	or.b32  	%r2077, %r2076, 1;
	mul.wide.s32 	%rd206, %r2077, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p117 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7384, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7384, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7384, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2080, %r314, 1;
	mul.wide.s32 	%rd208, %r2080, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7384;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_192:
	or.b32  	%r2081, %r7372, %r276;
	setp.gt.s32 	%p118, %r2081, -1;
	and.pred  	%p120, %p98, %p118;
	setp.lt.s32 	%p121, %r7372, %r1734;
	and.pred  	%p8, %p121, %p120;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p122, %f22, 0f40000000;
	@%p122 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p123, %r256, 0;
	add.s32 	%r2083, %r268, %r276;
	shl.b32 	%r2084, %r2083, 1;
	mul.wide.s32 	%rd210, %r2084, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p123 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7386, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r325, %r7376, %r260;
	mul.wide.s32 	%rd212, %r325, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7386;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p124, %r256, 0;
	add.s32 	%r2088, %r267, %r276;
	shl.b32 	%r2089, %r2088, 1;
	mul.wide.s32 	%rd214, %r2089, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p124 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7387, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7387, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7387, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2092, %r325, 1;
	mul.wide.s32 	%rd216, %r2092, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7387;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p125, %f196, 0f40000000;
	@%p125 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p126, %r256, 0;
	add.s32 	%r2094, %r268, %r276;
	shl.b32 	%r2095, %r2094, 1;
	or.b32  	%r2096, %r2095, 1;
	mul.wide.s32 	%rd218, %r2096, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p126 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7389, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r336, %r7376, %r260;
	mul.wide.s32 	%rd220, %r336, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7389;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p127, %r256, 0;
	add.s32 	%r2100, %r267, %r276;
	shl.b32 	%r2101, %r2100, 1;
	or.b32  	%r2102, %r2101, 1;
	mul.wide.s32 	%rd222, %r2102, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p127 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7390, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7390, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7390, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2105, %r336, 1;
	mul.wide.s32 	%rd224, %r2105, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7390;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_216:
	or.b32  	%r2106, %r270, %r276;
	setp.gt.s32 	%p128, %r2106, -1;
	and.pred  	%p130, %p98, %p128;
	setp.lt.s32 	%p131, %r270, %r1734;
	and.pred  	%p9, %p131, %p130;
	@%p122 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p133, %r256, 0;
	add.s32 	%r2108, %r269, %r276;
	shl.b32 	%r2109, %r2108, 1;
	mul.wide.s32 	%rd226, %r2109, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p133 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7392, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r347, %r7376, %r260;
	mul.wide.s32 	%rd228, %r347, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7392;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p134, %r256, 0;
	add.s32 	%r2113, %r271, %r276;
	shl.b32 	%r2114, %r2113, 1;
	mul.wide.s32 	%rd230, %r2114, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p134 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7393, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2117, %r347, 1;
	mul.wide.s32 	%rd232, %r2117, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7393;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_228:
	@%p115 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p136, %r256, 0;
	add.s32 	%r2119, %r269, %r276;
	shl.b32 	%r2120, %r2119, 1;
	or.b32  	%r2121, %r2120, 1;
	mul.wide.s32 	%rd234, %r2121, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p136 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7395, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r358, %r7376, %r260;
	mul.wide.s32 	%rd236, %r358, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7395;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p137, %r256, 0;
	add.s32 	%r2125, %r271, %r276;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd238, %r2127, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p137 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7396, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2130, %r358, 1;
	mul.wide.s32 	%rd240, %r2130, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7396;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_240:
	or.b32  	%r2131, %r273, %r276;
	setp.gt.s32 	%p138, %r2131, -1;
	and.pred  	%p140, %p98, %p138;
	setp.lt.s32 	%p141, %r273, %r1734;
	and.pred  	%p10, %p141, %p140;
	@%p112 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p143, %r256, 0;
	add.s32 	%r2133, %r272, %r276;
	shl.b32 	%r2134, %r2133, 1;
	mul.wide.s32 	%rd242, %r2134, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p143 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7398, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r369, %r7376, %r260;
	mul.wide.s32 	%rd244, %r369, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7398;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p144, %r256, 0;
	add.s32 	%r2138, %r274, %r276;
	shl.b32 	%r2139, %r2138, 1;
	mul.wide.s32 	%rd246, %r2139, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p144 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7399, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2142, %r369, 1;
	mul.wide.s32 	%rd248, %r2142, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7399;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_252:
	@%p105 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p146, %r256, 0;
	add.s32 	%r2144, %r272, %r276;
	shl.b32 	%r2145, %r2144, 1;
	or.b32  	%r2146, %r2145, 1;
	mul.wide.s32 	%rd250, %r2146, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p146 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7401, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r380, %r7376, %r260;
	mul.wide.s32 	%rd252, %r380, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7401;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p147, %r256, 0;
	add.s32 	%r2150, %r274, %r276;
	shl.b32 	%r2151, %r2150, 1;
	or.b32  	%r2152, %r2151, 1;
	mul.wide.s32 	%rd254, %r2152, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p147 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7402, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2155, %r380, 1;
	mul.wide.s32 	%rd256, %r2155, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7402;
	add.s32 	%r7376, %r7376, 2;

$L__BB0_264:
	add.s64 	%rd565, %rd565, 4;
	setp.ne.s64 	%p148, %rd565, %rd259;
	@%p148 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7372, %r7372, %r42;
	setp.lt.s32 	%p149, %r7372, %r1734;
	@%p149 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7366, %r7366, %r1754;
	setp.lt.s32 	%p150, %r7366, %r1733;
	@%p150 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r229, %r74;
	mov.u32 	%r1970, 31;
	sub.s32 	%r1971, %r1970, %r40;
	setp.gt.s32 	%p88, %r39, %r40;
	selp.b32 	%r1972, %r40, %r1971, %p88;
	shl.b32 	%r1973, %r1972, 2;
	mov.u32 	%r1974, 2;
	sub.s32 	%r230, %r1973, %r1736;
	shl.b32 	%r1975, %r1735, 2;
	mov.u32 	%r1976, 128;
	sub.s32 	%r231, %r1976, %r1975;
	sub.s32 	%r1977, %r1974, %r1736;
	add.s32 	%r232, %r1977, %r1973;
	add.s32 	%r233, %r1733, -1;
	add.s32 	%r234, %r230, 1;
	add.s32 	%r235, %r232, 1;
	rem.s32 	%r2002, %r234, %r231;
	add.s32 	%r2003, %r2002, %r231;
	rem.s32 	%r246, %r2003, %r231;
	rem.s32 	%r2004, %r235, %r231;
	add.s32 	%r2005, %r2004, %r231;
	rem.s32 	%r247, %r2005, %r231;

$L__BB0_123:
	setp.ne.s32 	%p89, %r36, %r229;
	@%p89 bra 	$L__BB0_137;

	shl.b32 	%r237, %r7366, 1;
	rem.s32 	%r1978, %r230, %r231;
	add.s32 	%r1979, %r1978, %r231;
	rem.s32 	%r238, %r1979, %r231;
	rem.s32 	%r1980, %r232, %r231;
	add.s32 	%r1981, %r1980, %r231;
	rem.s32 	%r239, %r1981, %r231;
	@%p88 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1984, %r237, %r231;
	add.s32 	%r1985, %r1984, %r238;
	mul.wide.s32 	%rd159, %r1985, 4;
	add.s64 	%rd160, %rd15, %rd159;
	ld.global.f32 	%f117, [%rd160];
	add.s32 	%r1986, %r1984, %r239;
	mul.wide.s32 	%rd161, %r1986, 4;
	add.s64 	%rd162, %rd15, %rd161;
	ld.global.f32 	%f118, [%rd162];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7367, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7367, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1987, %r7366, 5;
	add.s32 	%r1988, %r1987, %r40;
	shl.b32 	%r1989, %r1988, 2;
	mul.wide.s32 	%rd163, %r1989, 4;
	add.s64 	%rd17, %rd16, %rd163;
	st.global.u32 	[%rd17], %r7367;
	@%p88 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1992, %r237, 1;
	mul.lo.s32 	%r1993, %r1992, %r231;
	add.s32 	%r1994, %r1993, %r238;
	mul.wide.s32 	%rd164, %r1994, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f121, [%rd165];
	add.s32 	%r1995, %r1993, %r239;
	mul.wide.s32 	%rd166, %r1995, 4;
	add.s64 	%rd167, %rd15, %rd166;
	ld.global.f32 	%f122, [%rd167];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7368, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7368, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1996, %r233, %r7366;
	rem.s32 	%r1997, %r1996, %r1733;
	shl.b32 	%r1998, %r1997, 5;
	add.s32 	%r1999, %r1998, %r40;
	shl.b32 	%r2000, %r1999, 2;
	or.b32  	%r2001, %r2000, 2;
	mul.wide.s32 	%rd168, %r2001, 4;
	add.s64 	%rd18, %rd16, %rd168;
	st.global.u32 	[%rd18], %r7368;
	@%p88 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r2008, %r237, %r231;
	add.s32 	%r2009, %r2008, %r246;
	mul.wide.s32 	%rd169, %r2009, 4;
	add.s64 	%rd170, %rd15, %rd169;
	ld.global.f32 	%f125, [%rd170];
	add.s32 	%r2010, %r2008, %r247;
	mul.wide.s32 	%rd171, %r2010, 4;
	add.s64 	%rd172, %rd15, %rd171;
	ld.global.f32 	%f126, [%rd172];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7369, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7369, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd17+4], %r7369;
	@%p88 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2013, %r237, 1;
	mul.lo.s32 	%r2014, %r2013, %r231;
	add.s32 	%r2015, %r2014, %r246;
	mul.wide.s32 	%rd173, %r2015, 4;
	add.s64 	%rd174, %rd15, %rd173;
	ld.global.f32 	%f129, [%rd174];
	add.s32 	%r2016, %r2014, %r247;
	mul.wide.s32 	%rd175, %r2016, 4;
	add.s64 	%rd176, %rd15, %rd175;
	ld.global.f32 	%f130, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7370, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd18+4], %r7370;

$L__BB0_137:
	add.s32 	%r7366, %r7366, %r1754;
	setp.lt.s32 	%p94, %r7366, %r1733;
	@%p94 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2157, %r1728, -1;
	mad.lo.s32 	%r2158, %r1729, 576, 128;
	mul.lo.s32 	%r2159, %r2158, %r2157;
	add.s32 	%r2160, %r69, -64;
	add.s32 	%r2161, %r2160, %r69;
	add.s32 	%r2162, %r1729, -1;
	mad.lo.s32 	%r2163, %r2161, %r2162, %r2159;
	mul.lo.s32 	%r2164, %r2157, %r1729;
	mul.lo.s32 	%r2165, %r2164, 320;
	mad.lo.s32 	%r2166, %r2160, %r2162, %r2165;
	add.s32 	%r389, %r2166, %r2163;
	setp.lt.s32 	%p151, %r389, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7585, {low,high};}

	// end inline asm
	@%p151 bra 	$L__BB0_270;

	mov.u32 	%r7406, 0;
	mov.u32 	%r7404, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7404], %r7585;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2169, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7404+4], %r2169;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2170, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7404+8], %r2170;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2171, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7404+12], %r2171;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7585, {low,high};}

	// end inline asm
	add.s32 	%r7404, %r7404, 16;
	add.s32 	%r7406, %r7406, 4;
	setp.lt.s32 	%p152, %r7406, %r389;
	@%p152 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7586, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2174, {low,high};}

	// end inline asm
	ld.param.u64 	%rd260, [%rd1+152];
	cvta.to.global.u64 	%rd21, %rd260;
	mov.u32 	%r2175, 31;
	sub.s32 	%r2176, %r2175, %r40;
	setp.gt.s32 	%p153, %r39, %r40;
	selp.b32 	%r2177, %r40, %r2176, %p153;
	shl.b32 	%r2178, %r2177, 2;
	sub.s32 	%r400, %r2178, %r1736;
	shl.b32 	%r2179, %r1735, 2;
	mov.u32 	%r2180, 128;
	sub.s32 	%r401, %r2180, %r2179;
	rem.s32 	%r2181, %r400, %r401;
	add.s32 	%r2182, %r2181, %r401;
	rem.s32 	%r402, %r2182, %r401;
	add.s32 	%r2183, %r400, 2;
	rem.s32 	%r2184, %r2183, %r401;
	add.s32 	%r2185, %r2184, %r401;
	rem.s32 	%r403, %r2185, %r401;
	mul.lo.s32 	%r2186, %r402, 6;
	mul.lo.s32 	%r2187, %r403, 6;
	mul.wide.s32 	%rd261, %r2186, 4;
	add.s64 	%rd22, %rd21, %rd261;
	mul.wide.s32 	%rd262, %r2187, 4;
	add.s64 	%rd23, %rd21, %rd262;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd22];
	ld.global.f32 	%f274, [%rd22+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd23+8];
	ld.global.f32 	%f276, [%rd23];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7408, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd22+4];
	ld.global.f32 	%f282, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd22];
	ld.global.f32 	%f280, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7409, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd22+20];
	ld.global.f32 	%f286, [%rd22+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd23+20];
	ld.global.f32 	%f288, [%rd23+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd22+16];
	ld.global.f32 	%f294, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd22+12];
	ld.global.f32 	%f292, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7411, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2196, %r400, 1;
	rem.s32 	%r2197, %r2196, %r401;
	add.s32 	%r2198, %r2197, %r401;
	rem.s32 	%r416, %r2198, %r401;
	add.s32 	%r2199, %r400, 3;
	rem.s32 	%r2200, %r2199, %r401;
	add.s32 	%r2201, %r2200, %r401;
	rem.s32 	%r417, %r2201, %r401;
	mul.lo.s32 	%r2202, %r416, 6;
	mul.lo.s32 	%r2203, %r417, 6;
	mul.wide.s32 	%rd263, %r2202, 4;
	add.s64 	%rd24, %rd21, %rd263;
	mul.wide.s32 	%rd264, %r2203, 4;
	add.s64 	%rd25, %rd21, %rd264;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7412, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd24];
	ld.global.f32 	%f298, [%rd24+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd25+8];
	ld.global.f32 	%f300, [%rd25];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7412, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd24+4];
	ld.global.f32 	%f306, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd24];
	ld.global.f32 	%f304, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7413, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd24+20];
	ld.global.f32 	%f310, [%rd24+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd25+20];
	ld.global.f32 	%f312, [%rd25+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7414, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd24+16];
	ld.global.f32 	%f318, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7415, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd24+12];
	ld.global.f32 	%f316, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7415, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2212, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd265, %r2212;
	// begin inline asm
	mov.u32 %r2213, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd266, %r2213;
	bfi.b64 	%rd26, %rd266, %rd265, 32, 32;
	setp.ne.s64 	%p162, %rd26, 0;
	@%p162 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd27, %rd26, 4;
	mov.u32 	%r2214, %nctaid.y;
	mov.u32 	%r2215, %nctaid.x;
	mul.lo.s32 	%r2216, %r2215, %r2214;
	mov.u32 	%r2217, %nctaid.z;
	mul.lo.s32 	%r430, %r2216, %r2217;
	neg.s32 	%r2218, %r36;
	add.s32 	%r2219, %r40, %r35;
	setp.ne.s32 	%p163, %r2219, %r2218;
	mov.u32 	%r2220, %ctaid.x;
	add.s32 	%r431, %r2220, %r37;
	neg.s32 	%r432, %r38;
	bar.sync 	0;
	@%p163 bra 	$L__BB0_300;

	setp.eq.s32 	%p164, %r431, %r432;
	mov.u32 	%r2223, -2147483647;
	sub.s32 	%r2224, %r2223, %r430;
	selp.b32 	%r2222, %r2224, 1, %p164;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2221,[%rd27],%r2222;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2225, [%rd27];
	xor.b32  	%r2226, %r2225, %r2221;
	setp.gt.s32 	%p165, %r2226, -1;
	@%p165 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2227,[%rd27];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p166, %r43, 1;
	@%p166 bra 	$L__BB0_864;

	shr.s32 	%r2241, %r1738, 31;
	shr.u32 	%r2242, %r2241, 30;
	add.s32 	%r2243, %r1738, %r2242;
	shr.s32 	%r434, %r2243, 2;
	add.s32 	%r2244, %r40, 28;
	mul.hi.s32 	%r2245, %r2244, -1925330167;
	add.s32 	%r2246, %r2245, %r2244;
	shr.u32 	%r2247, %r2246, 31;
	shr.s32 	%r2248, %r2246, 4;
	add.s32 	%r2249, %r2248, %r2247;
	mul.lo.s32 	%r2250, %r2249, 29;
	sub.s32 	%r2251, %r2244, %r2250;
	add.s32 	%r2252, %r40, 30;
	mul.hi.s32 	%r2253, %r2252, -1925330167;
	add.s32 	%r2254, %r2253, %r2252;
	shr.u32 	%r2255, %r2254, 31;
	shr.s32 	%r2256, %r2254, 4;
	add.s32 	%r2257, %r2256, %r2255;
	mul.lo.s32 	%r2258, %r2257, 29;
	sub.s32 	%r2259, %r2252, %r2258;
	shr.u32 	%r2260, %r1738, 31;
	add.s32 	%r2261, %r1738, %r2260;
	and.b32  	%r2262, %r2261, -2;
	sub.s32 	%r435, %r1738, %r2262;
	setp.lt.s32 	%p167, %r40, 29;
	selp.b32 	%r436, %r2251, %r40, %p167;
	setp.lt.s32 	%p168, %r402, %r1747;
	setp.ge.s32 	%p169, %r402, %r1746;
	and.pred  	%p11, %p168, %p169;
	setp.lt.s32 	%p170, %r416, %r1747;
	setp.ge.s32 	%p171, %r416, %r1746;
	and.pred  	%p12, %p170, %p171;
	setp.lt.s32 	%p172, %r403, %r1747;
	setp.ge.s32 	%p173, %r403, %r1746;
	and.pred  	%p13, %p172, %p173;
	setp.lt.s32 	%p174, %r417, %r1747;
	setp.ge.s32 	%p175, %r417, %r1746;
	and.pred  	%p14, %p174, %p175;
	selp.b32 	%r437, %r2259, %r40, %p167;
	mov.u32 	%r2240, 0;
	// begin inline asm
	{mov.u32 %r2263, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2589, %r2263, 8;
	add.s32 	%r2590, %r2589, -8192;
	or.b32  	%r2267, %r2590, 31;
	mul.wide.s32 	%rd277, %r40, 16;
	mul.wide.s32 	%rd279, %r40, 8;
	mov.u32 	%r7416, %r2240;
	mov.u32 	%r7417, %r2240;
	mov.u32 	%r7418, %r2240;
	mov.u32 	%r7419, %r2240;
	mov.u32 	%r7420, %r2240;
	mov.u32 	%r7421, %r2240;
	mov.u32 	%r7422, %r2240;
	mov.u32 	%r7423, %r2240;
	mov.u32 	%r7424, %r2240;
	mov.u32 	%r7425, %r2240;
	mov.u32 	%r7426, %r2240;
	mov.u32 	%r7427, %r2240;
	mov.u32 	%r7715, %r2174;
	mov.u32 	%r7716, %r2174;
	mov.u32 	%r7713, %r2174;
	mov.u32 	%r7714, %r2174;
	mov.u32 	%r7735, %r2174;
	mov.u32 	%r7736, %r2174;
	mov.u32 	%r7749, %r2174;
	mov.u32 	%r7737, %r2174;
	mov.u32 	%r7751, %r2174;
	mov.u32 	%r7738, %r2174;
	mov.u32 	%r7739, %r2174;
	mov.u32 	%r7740, %r2174;
	mov.u32 	%r7741, %r2174;
	mov.u32 	%r7742, %r2174;
	mov.u32 	%r7743, %r2174;
	mov.u32 	%r7744, %r2174;
	mov.u32 	%r7753, %r2174;
	mov.u32 	%r7754, %r2174;
	mov.u32 	%r7755, %r2174;
	mov.u32 	%r7756, %r2174;
	mov.u32 	%r7757, %r2174;
	mov.u32 	%r7758, %r2174;
	mov.u32 	%r7745, %r2174;
	mov.u32 	%r7746, %r2174;
	mov.u32 	%r7759, %r2174;
	mov.u32 	%r7760, %r2174;
	mov.u32 	%r7747, %r2174;
	mov.u32 	%r7748, %r2174;
	mov.u32 	%r7717, %r2174;
	mov.u32 	%r7718, %r2174;
	mov.u32 	%r7705, %r2174;
	mov.u32 	%r7706, %r2174;
	mov.u32 	%r7707, %r2174;
	mov.u32 	%r7708, %r2174;
	mov.u32 	%r7719, %r2174;
	mov.u32 	%r7720, %r2174;
	mov.u32 	%r7721, %r2174;
	mov.u32 	%r7722, %r2174;
	mov.u32 	%r7723, %r2174;
	mov.u32 	%r7724, %r2174;
	mov.u32 	%r7709, %r2174;
	mov.u32 	%r7710, %r2174;
	mov.u32 	%r7711, %r2174;
	mov.u32 	%r7712, %r2174;
	mov.u32 	%r7725, %r2174;
	mov.u32 	%r7726, %r2174;
	mov.u32 	%r7727, %r2174;
	mov.u32 	%r7728, %r2174;
	mov.u32 	%r7476, %r2174;
	mov.u32 	%r7477, %r2174;
	mov.u32 	%r7775, %r2174;
	mov.u32 	%r7776, %r2174;
	mov.u32 	%r7482, %r2174;
	mov.u32 	%r7483, %r2174;
	mov.u32 	%r7484, %r2174;
	mov.u32 	%r7485, %r2174;
	mov.u32 	%r7777, %r2174;
	mov.u32 	%r7778, %r2174;
	mov.u32 	%r7488, %r2174;
	mov.u32 	%r7779, %r2174;
	mov.u32 	%r7490, %r2174;
	mov.u32 	%r7491, %r2174;
	mov.u32 	%r7780, %r2174;
	mov.u32 	%r7493, %r2174;
	mov.u32 	%r7494, %r2174;
	mov.u32 	%r7495, %r2174;
	mov.u32 	%r7729, %r2174;
	mov.u32 	%r7730, %r2174;
	mov.u32 	%r7498, %r2174;
	mov.u32 	%r7499, %r2174;
	mov.u32 	%r7502, %r2174;
	mov.u32 	%r7503, %r2174;
	mov.u32 	%r7504, %r2174;
	mov.u32 	%r7505, %r2174;
	mov.u32 	%r7506, %r2174;
	mov.u32 	%r7784, %r2174;
	mov.u32 	%r7508, %r2174;
	mov.u32 	%r7509, %r2174;
	mov.u32 	%r7510, %r2174;
	mov.u32 	%r7511, %r2174;
	mov.u32 	%r7512, %r2174;
	mov.u32 	%r7513, %r2174;
	mov.u32 	%r7514, %r2174;
	mov.u32 	%r7786, %r2174;
	mov.u32 	%r7516, %r2174;
	mov.u32 	%r7517, %r2174;
	mov.u32 	%r7518, %r2174;
	mov.u32 	%r7787, %r2174;
	mov.u32 	%r7520, %r2174;
	mov.u32 	%r7521, %r2174;
	mov.u32 	%r7522, %r2174;
	mov.u32 	%r7523, %r2174;
	mov.u32 	%r7524, %r2174;
	mov.u32 	%r7525, %r2174;
	mov.u32 	%r7526, %r2174;
	mov.u32 	%r7788, %r2174;
	mov.u32 	%r7528, %r2174;
	mov.u32 	%r7731, %r2174;
	mov.u32 	%r7530, %r2174;
	mov.u32 	%r7531, %r2174;
	mov.u32 	%r7532, %r2174;
	mov.u32 	%r7533, %r2174;
	mov.u32 	%r7732, %r2174;
	mov.u32 	%r7535, %r2174;
	mov.u32 	%r7536, %r2174;
	mov.u32 	%r7537, %r2174;
	mov.u32 	%r7538, %r2174;
	mov.u32 	%r7539, %r2174;
	mov.u32 	%r7540, %r2174;
	mov.u32 	%r7541, %r2174;
	mov.u32 	%r7542, %r2174;
	mov.u32 	%r7543, %r2174;
	mov.u32 	%r7544, %r2174;
	mov.u32 	%r7545, %r2174;
	mov.u32 	%r7546, %r2174;
	mov.u32 	%r7547, %r2174;
	mov.u32 	%r7548, %r2174;
	mov.u32 	%r7549, %r2174;
	mov.u32 	%r7550, %r2174;
	mov.u32 	%r7551, %r2174;
	mov.u32 	%r7552, %r2174;
	mov.u32 	%r7553, %r2174;
	mov.u32 	%r7554, %r2174;
	mov.u32 	%r7555, %r2174;
	mov.u32 	%r7556, %r2174;
	mov.u32 	%r7557, %r2174;
	mov.u32 	%r7558, %r2174;
	mov.u32 	%r7559, %r2174;
	mov.u32 	%r7560, %r2174;
	mov.u32 	%r7561, %r2174;
	mov.u32 	%r7562, %r2174;
	mov.u32 	%r7563, %r2174;
	mov.u32 	%r7564, %r2174;
	mov.u32 	%r7565, %r2174;
	mov.u32 	%r7566, %r2174;
	mov.u32 	%r7567, %r2174;
	mov.u32 	%r7568, %r2174;
	mov.u32 	%r7569, %r2174;
	mov.u32 	%r7570, %r2174;
	mov.u32 	%r7571, %r2174;
	mov.u32 	%r7572, %r2174;
	mov.u32 	%r7573, %r2174;
	mov.u32 	%r7574, %r2174;
	mov.u32 	%r7575, %r2174;
	mov.u32 	%r7576, %r2174;
	mov.u32 	%r7577, %r2174;
	mov.u32 	%r7578, %r2174;
	mov.u32 	%r7579, %r2174;
	mov.u32 	%r7580, %r2174;
	mov.u32 	%r7581, %r2174;
	mov.u32 	%r7582, %r2174;
	mov.u32 	%r7583, %r2174;
	mov.u32 	%r7584, %r2240;

$L__BB0_302:
	mov.u32 	%r549, %r7788;
	mov.u32 	%r545, %r7523;
	mov.u32 	%r541, %r7787;
	mov.u32 	%r539, %r7517;
	mov.u32 	%r537, %r7786;
	mov.u32 	%r529, %r7784;
	mov.u32 	%r7523, %r7780;
	mov.u32 	%r511, %r7779;
	mov.u32 	%r7517, %r7778;
	mov.u32 	%r508, %r7777;
	mov.u32 	%r503, %r7776;
	mov.u32 	%r502, %r7775;
	sub.s32 	%r7307, %r1733, %r42;
	mov.u32 	%r2278, 1;
	not.b32 	%r2552, %r37;
	mov.u32 	%r2544, -1;
	add.s32 	%r2553, %r1730, %r2552;
	mul.lo.s32 	%r2554, %r2553, %r1732;
	add.s32 	%r2555, %r7584, %r2554;
	not.b32 	%r2557, %r38;
	add.s32 	%r2558, %r1731, %r2557;
	mul.lo.s32 	%r2559, %r2558, %r1732;
	add.s32 	%r2560, %r7584, %r2559;
	add.s32 	%r2561, %r2554, %r2559;
	add.s32 	%r2562, %r2561, %r1733;
	not.b32 	%r2563, %r35;
	add.s32 	%r2564, %r1728, %r2563;
	mad.lo.s32 	%r2565, %r2553, %r1728, %r2564;
	not.b32 	%r2566, %r36;
	add.s32 	%r2567, %r1729, %r2566;
	mad.lo.s32 	%r2568, %r2558, %r1729, %r2567;
	add.s32 	%r2569, %r2565, %r2568;
	shl.b32 	%r2570, %r2569, 1;
	add.s32 	%r2571, %r2562, %r2570;
	add.s32 	%r2572, %r7584, %r2571;
	add.s32 	%r2573, %r7584, %r2561;
	div.s32 	%r2574, %r2572, %r1733;
	neg.s32 	%r2575, %r1733;
	sub.s32 	%r2578, %r42, %r1733;
	sub.s32 	%r2579, %r2565, %r2568;
	shl.b32 	%r2580, %r2579, 1;
	add.s32 	%r2581, %r2580, %r1734;
	mad.lo.s32 	%r2582, %r2574, %r42, %r2581;
	mad.lo.s32 	%r2583, %r2574, %r2578, %r2573;
	div.s32 	%r2584, %r2582, %r1734;
	mul.lo.s32 	%r2585, %r2584, %r1734;
	sub.s32 	%r2588, %r1755, %r1734;
	mov.u32 	%r2362, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2264,%r7586,%r2240,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2270, %r7409, %r2264, %p15;
	// begin inline asm
	{mul.f16x2 %r7670,%r2270,%r7583;
}
	// end inline asm
	selp.b32 	%r2273, %r7413, %r2264, %p15;
	// begin inline asm
	{mul.f16x2 %r7668,%r2273,%r7582;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2276,%r7586,%r2278,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2282, %r7409, %r2276, %p15;
	// begin inline asm
	{mul.f16x2 %r7669,%r2282,%r7581;
}
	// end inline asm
	selp.b32 	%r2285, %r7413, %r2276, %p15;
	// begin inline asm
	{mul.f16x2 %r7667,%r2285,%r7580;
}
	// end inline asm
	mov.u32 	%r2290, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2288,%r7586,%r2290,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2294, %r7409, %r2288, %p15;
	// begin inline asm
	{mul.f16x2 %r7666,%r2294,%r7579;
}
	// end inline asm
	selp.b32 	%r2297, %r7413, %r2288, %p15;
	// begin inline asm
	{mul.f16x2 %r7665,%r2297,%r7578;
}
	// end inline asm
	mov.u32 	%r2302, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2300,%r7586,%r2302,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2306, %r7409, %r2300, %p15;
	// begin inline asm
	{mul.f16x2 %r7664,%r2306,%r7760;
}
	// end inline asm
	selp.b32 	%r2309, %r7413, %r2300, %p15;
	// begin inline asm
	{mul.f16x2 %r7662,%r2309,%r7759;
}
	// end inline asm
	mov.u32 	%r2314, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2312,%r7586,%r2314,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2318, %r7409, %r2312, %p15;
	// begin inline asm
	{mul.f16x2 %r7663,%r2318,%r7577;
}
	// end inline asm
	selp.b32 	%r2321, %r7413, %r2312, %p15;
	// begin inline asm
	{mul.f16x2 %r7661,%r2321,%r7576;
}
	// end inline asm
	mov.u32 	%r2326, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2324,%r7586,%r2326,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2330, %r7409, %r2324, %p15;
	// begin inline asm
	{mul.f16x2 %r7660,%r2330,%r7575;
}
	// end inline asm
	selp.b32 	%r2333, %r7413, %r2324, %p15;
	// begin inline asm
	{mul.f16x2 %r7657,%r2333,%r7574;
}
	// end inline asm
	mov.u32 	%r2338, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2336,%r7586,%r2338,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2342, %r7409, %r2336, %p15;
	// begin inline asm
	{mul.f16x2 %r7659,%r2342,%r7573;
}
	// end inline asm
	selp.b32 	%r2345, %r7413, %r2336, %p15;
	// begin inline asm
	{mul.f16x2 %r7656,%r2345,%r7572;
}
	// end inline asm
	mov.u32 	%r2350, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2348,%r7586,%r2350,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2354, %r7409, %r2348, %p15;
	// begin inline asm
	{mul.f16x2 %r7658,%r2354,%r7571;
}
	// end inline asm
	selp.b32 	%r2357, %r7413, %r2348, %p15;
	// begin inline asm
	{mul.f16x2 %r7655,%r2357,%r7570;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2360,%r7586,%r2362,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2366, %r7409, %r2360, %p15;
	// begin inline asm
	{mul.f16x2 %r7654,%r2366,%r7569;
}
	// end inline asm
	selp.b32 	%r2369, %r7413, %r2360, %p15;
	// begin inline asm
	{mul.f16x2 %r7651,%r2369,%r7568;
}
	// end inline asm
	mov.u32 	%r2374, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2372,%r7586,%r2374,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2378, %r7409, %r2372, %p15;
	// begin inline asm
	{mul.f16x2 %r7653,%r2378,%r7567;
}
	// end inline asm
	selp.b32 	%r2381, %r7413, %r2372, %p15;
	// begin inline asm
	{mul.f16x2 %r7650,%r2381,%r7566;
}
	// end inline asm
	mov.u32 	%r2386, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2384,%r7586,%r2386,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2390, %r7409, %r2384, %p15;
	// begin inline asm
	{mul.f16x2 %r7652,%r2390,%r7565;
}
	// end inline asm
	selp.b32 	%r2393, %r7413, %r2384, %p15;
	// begin inline asm
	{mul.f16x2 %r7649,%r2393,%r7564;
}
	// end inline asm
	mov.u32 	%r2398, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2396,%r7586,%r2398,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2402, %r7409, %r2396, %p15;
	// begin inline asm
	{mul.f16x2 %r7648,%r2402,%r7746;
}
	// end inline asm
	selp.b32 	%r2405, %r7413, %r2396, %p15;
	// begin inline asm
	{mul.f16x2 %r7647,%r2405,%r7745;
}
	// end inline asm
	mov.u32 	%r2410, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2408,%r7586,%r2410,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2414, %r7409, %r2408, %p15;
	// begin inline asm
	{mul.f16x2 %r7646,%r2414,%r7758;
}
	// end inline asm
	selp.b32 	%r2417, %r7413, %r2408, %p15;
	// begin inline asm
	{mul.f16x2 %r7644,%r2417,%r7756;
}
	// end inline asm
	mov.u32 	%r2422, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2420,%r7586,%r2422,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2426, %r7409, %r2420, %p15;
	// begin inline asm
	{mul.f16x2 %r7645,%r2426,%r7757;
}
	// end inline asm
	selp.b32 	%r2429, %r7413, %r2420, %p15;
	// begin inline asm
	{mul.f16x2 %r7643,%r2429,%r7755;
}
	// end inline asm
	mov.u32 	%r2434, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2432,%r7586,%r2434,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2438, %r7409, %r2432, %p15;
	// begin inline asm
	{mul.f16x2 %r7642,%r2438,%r7754;
}
	// end inline asm
	selp.b32 	%r2441, %r7413, %r2432, %p15;
	// begin inline asm
	{mul.f16x2 %r7639,%r2441,%r7753;
}
	// end inline asm
	mov.u32 	%r2446, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2444,%r7586,%r2446,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2450, %r7409, %r2444, %p15;
	// begin inline asm
	{mul.f16x2 %r7641,%r2450,%r7563;
}
	// end inline asm
	selp.b32 	%r2453, %r7413, %r2444, %p15;
	// begin inline asm
	{mul.f16x2 %r7638,%r2453,%r7562;
}
	// end inline asm
	mov.u32 	%r2458, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2456,%r7586,%r2458,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2462, %r7409, %r2456, %p15;
	// begin inline asm
	{mul.f16x2 %r7640,%r2462,%r7561;
}
	// end inline asm
	selp.b32 	%r2465, %r7413, %r2456, %p15;
	// begin inline asm
	{mul.f16x2 %r7637,%r2465,%r7560;
}
	// end inline asm
	mov.u32 	%r2470, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2468,%r7586,%r2470,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2474, %r7409, %r2468, %p15;
	// begin inline asm
	{mul.f16x2 %r7636,%r2474,%r7744;
}
	// end inline asm
	selp.b32 	%r2477, %r7413, %r2468, %p15;
	// begin inline asm
	{mul.f16x2 %r7633,%r2477,%r7742;
}
	// end inline asm
	mov.u32 	%r2482, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2480,%r7586,%r2482,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2486, %r7409, %r2480, %p15;
	// begin inline asm
	{mul.f16x2 %r7635,%r2486,%r7743;
}
	// end inline asm
	selp.b32 	%r2489, %r7413, %r2480, %p15;
	// begin inline asm
	{mul.f16x2 %r7632,%r2489,%r7741;
}
	// end inline asm
	mov.u32 	%r2494, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2492,%r7586,%r2494,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2498, %r7409, %r2492, %p15;
	// begin inline asm
	{mul.f16x2 %r7634,%r2498,%r7559;
}
	// end inline asm
	selp.b32 	%r2501, %r7413, %r2492, %p15;
	// begin inline asm
	{mul.f16x2 %r7631,%r2501,%r7558;
}
	// end inline asm
	mov.u32 	%r2506, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2504,%r7586,%r2506,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2510, %r7409, %r2504, %p15;
	// begin inline asm
	{mul.f16x2 %r7630,%r2510,%r7740;
}
	// end inline asm
	selp.b32 	%r2513, %r7413, %r2504, %p15;
	// begin inline asm
	{mul.f16x2 %r7629,%r2513,%r7739;
}
	// end inline asm
	mov.u32 	%r2518, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2516,%r7586,%r2518,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2522, %r7409, %r2516, %p15;
	// begin inline asm
	{mul.f16x2 %r7628,%r2522,%r7738;
}
	// end inline asm
	selp.b32 	%r2525, %r7413, %r2516, %p15;
	// begin inline asm
	{mul.f16x2 %r7626,%r2525,%r7737;
}
	// end inline asm
	mov.u32 	%r2530, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2528,%r7586,%r2530,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2534, %r7409, %r2528, %p15;
	// begin inline asm
	{mul.f16x2 %r7627,%r2534,%r7751;
}
	// end inline asm
	selp.b32 	%r2537, %r7413, %r2528, %p15;
	// begin inline asm
	{mul.f16x2 %r7625,%r2537,%r7749;
}
	// end inline asm
	mov.u32 	%r2542, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2540,%r7586,%r2542,%r2267,%r2544;
}
	// end inline asm
	selp.b32 	%r2546, %r7409, %r2540, %p15;
	// begin inline asm
	{mul.f16x2 %r7624,%r2546,%r7736;
}
	// end inline asm
	selp.b32 	%r2549, %r7413, %r2540, %p15;
	// begin inline asm
	{mul.f16x2 %r7623,%r2549,%r7735;
}
	// end inline asm
	rem.s32 	%r657, %r2555, %r68;
	rem.s32 	%r658, %r2560, %r7307;
	mad.lo.s32 	%r659, %r2574, %r2575, %r2572;
	sub.s32 	%r660, %r2582, %r2585;
	mad.lo.s32 	%r661, %r2584, %r2588, %r2583;
	ld.param.u64 	%rd270, [%rd1+144];
	cvta.to.global.u64 	%rd271, %rd270;
	shl.b32 	%r2638, %r661, 1;
	mul.wide.s32 	%rd272, %r2638, 4;
	add.s64 	%rd28, %rd271, %rd272;
	@%p86 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2841, %r1750, 1;
	setp.lt.s32 	%p183, %r661, %r2841;
	setp.eq.s32 	%p184, %r434, %r40;
	setp.gt.s32 	%p185, %r661, -1;
	and.pred  	%p186, %p184, %p185;
	and.pred  	%p187, %p183, %p186;
	@%p187 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7589, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7590, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2641, %r1750, 1;
	setp.lt.s32 	%p178, %r661, %r2641;
	setp.gt.s32 	%p179, %r661, -1;
	and.pred  	%p180, %p179, %p178;
	@%p180 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7587, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7588, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7589, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7590, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2849, 0;
	mov.u32 	%r2860, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2847,%r7585,%r2849,%r2267,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2852,%r7589,%r2847;
}
	// end inline asm
	mov.u32 	%r2858, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2856,%r7585,%r2858,%r2267,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2861,%r7590,%r2856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r2852,%r2861;
}
	// end inline asm
	setp.eq.s32 	%p188, %r435, 0;
	mov.u32 	%r7591, %r7592;
	@%p188 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7591, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7670,%r7670,%r7591;
}
	// end inline asm
	setp.eq.s32 	%p189, %r435, 1;
	@%p189 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7592, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7668,%r7668,%r7592;
}
	// end inline asm
	mov.u32 	%r2882, 2;
	mov.u32 	%r2893, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2880,%r7585,%r2882,%r2267,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2885,%r7589,%r2880;
}
	// end inline asm
	mov.u32 	%r2891, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2889,%r7585,%r2891,%r2267,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2894,%r7590,%r2889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r2885,%r2894;
}
	// end inline asm
	mov.u32 	%r7593, %r7594;
	@%p188 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7593, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7669,%r7669,%r7593;
}
	// end inline asm
	@%p189 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7594, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7667,%r7667,%r7594;
}
	// end inline asm
	mov.u32 	%r2915, 4;
	mov.u32 	%r2926, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2913,%r7585,%r2915,%r2267,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2918,%r7589,%r2913;
}
	// end inline asm
	mov.u32 	%r2924, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7585,%r2924,%r2267,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7590,%r2922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r2918,%r2927;
}
	// end inline asm
	mov.u32 	%r7595, %r7596;
	@%p188 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7595, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7666,%r7666,%r7595;
}
	// end inline asm
	@%p189 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7596, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7665,%r7665,%r7596;
}
	// end inline asm
	mov.u32 	%r2948, 6;
	mov.u32 	%r2959, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2946,%r7585,%r2948,%r2267,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r7589,%r2946;
}
	// end inline asm
	mov.u32 	%r2957, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7585,%r2957,%r2267,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7590,%r2955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r2951,%r2960;
}
	// end inline asm
	mov.u32 	%r7597, %r7598;
	@%p188 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7597, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r7597;
}
	// end inline asm
	@%p189 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7598, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7662,%r7662,%r7598;
}
	// end inline asm
	mov.u32 	%r2981, 8;
	mov.u32 	%r2992, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2979,%r7585,%r2981,%r2267,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2984,%r7589,%r2979;
}
	// end inline asm
	mov.u32 	%r2990, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7585,%r2990,%r2267,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7590,%r2988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r2984,%r2993;
}
	// end inline asm
	mov.u32 	%r7599, %r7600;
	@%p188 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7599, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7663,%r7663,%r7599;
}
	// end inline asm
	@%p189 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7600, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7661,%r7661,%r7600;
}
	// end inline asm
	mov.u32 	%r3014, 10;
	mov.u32 	%r3025, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3012,%r7585,%r3014,%r2267,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3017,%r7589,%r3012;
}
	// end inline asm
	mov.u32 	%r3023, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7585,%r3023,%r2267,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7590,%r3021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r3017,%r3026;
}
	// end inline asm
	mov.u32 	%r7601, %r7602;
	@%p188 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7601, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7660,%r7660,%r7601;
}
	// end inline asm
	@%p189 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7602, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7657,%r7657,%r7602;
}
	// end inline asm
	mov.u32 	%r3047, 12;
	mov.u32 	%r3058, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3045,%r7585,%r3047,%r2267,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3050,%r7589,%r3045;
}
	// end inline asm
	mov.u32 	%r3056, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7585,%r3056,%r2267,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7590,%r3054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r3050,%r3059;
}
	// end inline asm
	mov.u32 	%r7603, %r7604;
	@%p188 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7603, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7659,%r7659,%r7603;
}
	// end inline asm
	@%p189 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7604, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7656,%r7656,%r7604;
}
	// end inline asm
	mov.u32 	%r3080, 14;
	mov.u32 	%r3091, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3078,%r7585,%r3080,%r2267,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3083,%r7589,%r3078;
}
	// end inline asm
	mov.u32 	%r3089, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7585,%r3089,%r2267,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7590,%r3087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r3083,%r3092;
}
	// end inline asm
	mov.u32 	%r7605, %r7606;
	@%p188 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7605, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7654,%r7654,%r7605;
}
	// end inline asm
	@%p189 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7606, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7651,%r7651,%r7606;
}
	// end inline asm
	mov.u32 	%r3113, 16;
	mov.u32 	%r3124, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3111,%r7585,%r3113,%r2267,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3116,%r7589,%r3111;
}
	// end inline asm
	mov.u32 	%r3122, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7585,%r3122,%r2267,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7590,%r3120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7608,%r3116,%r3125;
}
	// end inline asm
	mov.u32 	%r7607, %r7608;
	@%p188 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7607, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7653,%r7653,%r7607;
}
	// end inline asm
	@%p189 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7608, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7650,%r7650,%r7608;
}
	// end inline asm
	mov.u32 	%r3146, 18;
	mov.u32 	%r3157, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3144,%r7585,%r3146,%r2267,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3149,%r7589,%r3144;
}
	// end inline asm
	mov.u32 	%r3155, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7585,%r3155,%r2267,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7590,%r3153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7610,%r3149,%r3158;
}
	// end inline asm
	mov.u32 	%r7609, %r7610;
	@%p188 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7609, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7648,%r7648,%r7609;
}
	// end inline asm
	@%p189 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7610, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7647,%r7647,%r7610;
}
	// end inline asm
	mov.u32 	%r3179, 20;
	mov.u32 	%r3190, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3177,%r7585,%r3179,%r2267,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3182,%r7589,%r3177;
}
	// end inline asm
	mov.u32 	%r3188, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7585,%r3188,%r2267,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7590,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r3182,%r3191;
}
	// end inline asm
	mov.u32 	%r7611, %r7612;
	@%p188 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7611, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7646,%r7646,%r7611;
}
	// end inline asm
	@%p189 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7612, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7644,%r7644,%r7612;
}
	// end inline asm
	mov.u32 	%r3212, 22;
	mov.u32 	%r3223, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3210,%r7585,%r3212,%r2267,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3215,%r7589,%r3210;
}
	// end inline asm
	mov.u32 	%r3221, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7585,%r3221,%r2267,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7590,%r3219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r3215,%r3224;
}
	// end inline asm
	mov.u32 	%r7613, %r7614;
	@%p188 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7613, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7642,%r7642,%r7613;
}
	// end inline asm
	@%p189 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7614, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r7614;
}
	// end inline asm
	mov.u32 	%r3245, 24;
	mov.u32 	%r3256, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3243,%r7585,%r3245,%r2267,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3248,%r7589,%r3243;
}
	// end inline asm
	mov.u32 	%r3254, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3252,%r7585,%r3254,%r2267,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7590,%r3252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7616,%r3248,%r3257;
}
	// end inline asm
	mov.u32 	%r7615, %r7616;
	@%p188 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7615, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7641,%r7641,%r7615;
}
	// end inline asm
	@%p189 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7616, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7638,%r7638,%r7616;
}
	// end inline asm
	mov.u32 	%r3278, 26;
	mov.u32 	%r3289, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3276,%r7585,%r3278,%r2267,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3281,%r7589,%r3276;
}
	// end inline asm
	mov.u32 	%r3287, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3285,%r7585,%r3287,%r2267,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3290,%r7590,%r3285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7618,%r3281,%r3290;
}
	// end inline asm
	mov.u32 	%r7617, %r7618;
	@%p188 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7617, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7636,%r7636,%r7617;
}
	// end inline asm
	@%p189 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7618, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7633,%r7633,%r7618;
}
	// end inline asm
	mov.u32 	%r3311, 28;
	mov.u32 	%r3322, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3309,%r7585,%r3311,%r2267,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3314,%r7589,%r3309;
}
	// end inline asm
	mov.u32 	%r3320, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3318,%r7585,%r3320,%r2267,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3323,%r7590,%r3318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r3314,%r3323;
}
	// end inline asm
	mov.u32 	%r7619, %r7620;
	@%p188 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7619, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r7619;
}
	// end inline asm
	@%p189 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7620, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r7620;
}
	// end inline asm
	mov.u32 	%r3353, 31;
	mov.u32 	%r3344, 30;
	mov.u32 	%r3355, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3342,%r7585,%r3344,%r2267,%r3355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3347,%r7589,%r3342;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3351,%r7585,%r3353,%r2267,%r3355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3356,%r7590,%r3351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r3347,%r3356;
}
	// end inline asm
	mov.u32 	%r7621, %r7622;
	@%p188 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7621, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7628,%r7628,%r7621;
}
	// end inline asm
	@%p189 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7622, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7626,%r7626,%r7622;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7587, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7588, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p181, %r660, %r1738;
	@%p181 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2743,%r7587,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7670,%r7670,%r2743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2749,%r7587,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r7658,%r2749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r7587,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r7660,%r2755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2761,%r7587,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r2761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2767,%r7587,%r7427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7642,%r2767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2773,%r7587,%r7425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r7627,%r2773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2779,%r7588,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r2779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2785,%r7588,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7645,%r2785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2791,%r7587,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r7668,%r2791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2797,%r7587,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7655,%r7655,%r2797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2803,%r7587,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7657,%r7657,%r2803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2809,%r7587,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7637,%r2809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2815,%r7587,%r7426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r2815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2821,%r7587,%r7424;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r7625,%r2821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2827,%r7588,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r7662,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2833,%r7588,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r2833;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2646, %r1738, -2;
	setp.ne.s32 	%p182, %r660, %r2646;
	@%p182 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2647,%r7587,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7648,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2653,%r7587,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7630,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2659,%r7588,%r7419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r7666,%r2659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2665,%r7588,%r7417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7652,%r7652,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2671,%r7588,%r7423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7654,%r7654,%r2671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2677,%r7588,%r7421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7634,%r7634,%r2677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2683,%r7588,%r7427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7636,%r2683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r7588,%r7425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7624,%r7624,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2695,%r7587,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7647,%r2695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2701,%r7587,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r7629,%r2701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2707,%r7588,%r7418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7665,%r7665,%r2707;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2713,%r7588,%r7416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7649,%r2713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2719,%r7588,%r7422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7651,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2725,%r7588,%r7420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7631,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r7588,%r7426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7633,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2737,%r7588,%r7424;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r7623,%r2737;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p220, %r35, 1;
	mov.u32 	%r7775, %r2174;
	mov.u32 	%r7776, %r2174;
	mov.u32 	%r7781, %r2174;
	mov.u32 	%r7782, %r2174;
	mov.u32 	%r7783, %r2174;
	mov.u32 	%r7784, %r2174;
	mov.u32 	%r7785, %r2174;
	mov.u32 	%r7786, %r2174;
	mov.u32 	%r7793, %r2174;
	mov.u32 	%r7794, %r2174;
	@%p220 bra 	$L__BB0_380;

	mul.lo.s32 	%r3374, %r1729, 320;
	add.s32 	%r3375, %r35, -1;
	mul.lo.s32 	%r3376, %r36, 320;
	mad.lo.s32 	%r3377, %r3374, %r3375, %r3376;
	add.s32 	%r3380, %r1790, -64;
	mad.lo.s32 	%r3385, %r3380, %r2162, %r2159;
	add.s32 	%r3386, %r3377, %r3385;
	shl.b32 	%r3387, %r3386, 2;
	mov.u32 	%r3388, _ZN6kernel5shmemE;
	add.s32 	%r3389, %r3388, %r3387;
	shl.b32 	%r3390, %r40, 4;
	add.s32 	%r3391, %r3389, %r3390;
	ld.shared.v4.u32 	{%r7786, %r7784, %r7776, %r7775}, [%r3391];
	shl.b32 	%r3396, %r40, 3;
	add.s32 	%r3397, %r3389, %r3396;
	ld.shared.v2.u32 	{%r7785, %r7783}, [%r3397+512];
	ld.shared.v4.u32 	{%r7794, %r7793, %r7782, %r7781}, [%r3391+768];

$L__BB0_380:
	setp.lt.s32 	%p221, %r36, 1;
	mov.u32 	%r7777, %r2174;
	mov.u32 	%r7778, %r2174;
	mov.u32 	%r7779, %r2174;
	mov.u32 	%r7780, %r2174;
	mov.u32 	%r7787, %r2174;
	mov.u32 	%r7788, %r2174;
	mov.u32 	%r7789, %r2174;
	mov.u32 	%r7790, %r2174;
	mov.u32 	%r7791, %r2174;
	mov.u32 	%r7792, %r2174;
	mov.u32 	%r7795, %r2174;
	mov.u32 	%r7796, %r2174;
	@%p221 bra 	$L__BB0_383;

	mad.lo.s32 	%r3409, %r2564, 384, %r2165;
	add.s32 	%r3412, %r36, -1;
	mad.lo.s32 	%r3413, %r2160, %r3412, %r3409;
	add.s32 	%r3419, %r3413, %r2163;
	shl.b32 	%r3420, %r3419, 2;
	mov.u32 	%r3421, _ZN6kernel5shmemE;
	add.s32 	%r3422, %r3421, %r3420;
	shl.b32 	%r3423, %r40, 4;
	add.s32 	%r3424, %r3422, %r3423;
	ld.shared.v4.u32 	{%r7796, %r7795, %r7791, %r7789}, [%r3424];
	shl.b32 	%r3429, %r40, 3;
	add.s32 	%r3430, %r3422, %r3429;
	ld.shared.v2.u32 	{%r7792, %r7790}, [%r3430+512];
	ld.shared.v4.u32 	{%r7788, %r7787, %r7779, %r7777}, [%r3424+768];
	mov.u32 	%r7778, %r2174;
	mov.u32 	%r7780, %r2174;
	@%p220 bra 	$L__BB0_383;

	add.s32 	%r7297, %r3430, 512;
	ld.shared.v2.u32 	{%r7780, %r7778}, [%r7297+768];

$L__BB0_383:
	setp.eq.s32 	%p223, %r35, 0;
	@%p223 bra 	$L__BB0_388;

	setp.eq.s32 	%p224, %r36, %r2162;
	@%p224 bra 	$L__BB0_386;

	sub.s32 	%r3440, %r1728, %r35;
	mul.lo.s32 	%r3442, %r69, %r36;
	mad.lo.s32 	%r3443, %r3440, 384, %r3442;
	mad.lo.s32 	%r3446, %r2160, %r2162, %r3443;
	mad.lo.s32 	%r3449, %r2158, %r2157, %r3446;
	shl.b32 	%r3450, %r3449, 2;
	mov.u32 	%r3451, _ZN6kernel5shmemE;
	add.s32 	%r3452, %r3451, %r3450;
	shl.b32 	%r3453, %r40, 4;
	add.s32 	%r3454, %r3452, %r3453;
	ld.shared.v4.u32 	{%r7714, %r7713, %r7716, %r7715}, [%r3454];

$L__BB0_386:
	shl.b32 	%r3459, %r36, 8;
	shl.b32 	%r3463, %r1729, 8;
	or.b32  	%r3464, %r3463, 128;
	add.s32 	%r3465, %r35, -1;
	mad.lo.s32 	%r3466, %r3464, %r3465, %r2165;
	add.s32 	%r3467, %r3466, %r3459;
	shl.b32 	%r3468, %r3467, 2;
	mov.u32 	%r3469, _ZN6kernel5shmemE;
	add.s32 	%r3470, %r3469, %r3468;
	setp.ne.s32 	%p225, %r36, %r2162;
	shl.b32 	%r3472, %r40, 4;
	add.s32 	%r923, %r3470, %r3472;
	ld.shared.v4.u32 	{%r7707, %r7705, %r7708, %r7706}, [%r923];
	ld.shared.v4.u32 	{%r7712, %r7711, %r7710, %r7709}, [%r923+512];
	@%p225 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7714, %r7713, %r7716, %r7715}, [%r923+1024];

$L__BB0_388:
	setp.eq.s32 	%p226, %r36, 0;
	@%p226 bra 	$L__BB0_391;

	mul.lo.s32 	%r3486, %r69, %r36;
	sub.s32 	%r3487, %r3486, %r69;
	mad.lo.s32 	%r3490, %r2564, 384, %r3487;
	mad.lo.s32 	%r3493, %r2160, %r2162, %r3490;
	mad.lo.s32 	%r3496, %r2158, %r2157, %r3493;
	shl.b32 	%r3497, %r3496, 2;
	mov.u32 	%r3498, _ZN6kernel5shmemE;
	add.s32 	%r3499, %r3498, %r3497;
	shl.b32 	%r3500, %r40, 4;
	add.s32 	%r952, %r3499, %r3500;
	ld.shared.v4.u32 	{%r7730, %r7729, %r7732, %r7731}, [%r952];
	ld.shared.v4.u32 	{%r7728, %r7726, %r7724, %r7723}, [%r952+512];
	ld.shared.v4.u32 	{%r7727, %r7725, %r7722, %r7720}, [%r952+1024];
	@%p223 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7718, %r7717, %r7721, %r7719}, [%r952+1536];

$L__BB0_391:
	setp.ne.s32 	%p228, %r35, 0;
	@%p228 bra 	$L__BB0_396;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3518, %r657, %r1731, %r38;
	mul.lo.s32 	%r3519, %r1729, %r3518;
	mul.lo.s32 	%r3520, %r3519, 768;
	mad.lo.s32 	%r3521, %r36, 384, %r3520;
	add.s32 	%r3522, %r3521, -64;
	mul.wide.s32 	%rd275, %r3522, 4;
	add.s64 	%rd276, %rd553, %rd275;
	add.s64 	%rd278, %rd276, %rd277;
	ld.global.v4.u32 	{%r7744, %r7742, %r7736, %r7735}, [%rd278+256];
	ld.global.v4.u32 	{%r7746, %r7745, %r7740, %r7739}, [%rd278+1024];
	add.s64 	%rd30, %rd276, %rd279;
	@%p226 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7738, %r7737}, [%rd30];

$L__BB0_394:
	setp.ne.s32 	%p230, %r36, %r2162;
	ld.global.v2.u32 	{%r7743, %r7741}, [%rd30+768];
	@%p230 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7748, %r7747}, [%rd30+1536];

$L__BB0_396:
	setp.ne.s32 	%p231, %r36, 0;
	@%p231 bra 	$L__BB0_398;

	ld.param.u64 	%rd556, [%rd1+80];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r3539, %r658, %r1730, %r37;
	mul.lo.s32 	%r3543, %r3539, %r1791;
	mad.lo.s32 	%r3546, %r2564, 384, %r3543;
	add.s32 	%r3547, %r3546, -64;
	mad.lo.s32 	%r3550, %r1793, %r68, %r3547;
	mul.wide.s32 	%rd280, %r3550, 4;
	add.s64 	%rd281, %rd555, %rd280;
	add.s64 	%rd283, %rd281, %rd277;
	ld.global.v4.u32 	{%r7760, %r7759, %r7757, %r7755}, [%rd283+256];
	ld.global.v4.u32 	{%r7754, %r7753, %r7751, %r7749}, [%rd283+1024];
	add.s64 	%rd285, %rd281, %rd279;
	ld.global.v2.u32 	{%r7758, %r7756}, [%rd285+768];
	ld.global.v2.u32 	{%r7738, %r7737}, [%rd285+1536];

$L__BB0_398:
	add.s32 	%r3563, %r1733, -1;
	setp.ge.s32 	%p232, %r659, %r3563;
	setp.lt.s32 	%p233, %r659, 2;
	or.pred  	%p234, %p233, %p232;
	setp.lt.s32 	%p235, %r660, 2;
	or.pred  	%p236, %p234, %p235;
	add.s32 	%r3564, %r1734, -2;
	setp.ge.s32 	%p237, %r660, %r3564;
	or.pred  	%p238, %p237, %p236;
	@%p238 bra 	$L__BB0_409;

	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	mad.lo.s32 	%r1047, %r660, %r1733, %r659;
	shl.b32 	%r3565, %r1047, 6;
	mul.wide.s32 	%rd288, %r3565, 4;
	add.s64 	%rd32, %rd557, %rd288;
	and.pred  	%p241, %p228, %p231;
	@%p241 bra 	$L__BB0_401;

	add.s64 	%rd290, %rd32, %rd279;
	ld.global.v2.u32 	{%r7780, %r7778}, [%rd290+256];

$L__BB0_401:
	@%p228 bra 	$L__BB0_403;

	shl.b32 	%r3568, %r1733, 5;
	cvt.s64.s32 	%rd291, %r3568;
	cvt.s64.s32 	%rd292, %r40;
	add.s64 	%rd293, %rd291, %rd292;
	shl.b64 	%rd294, %rd293, 3;
	add.s64 	%rd295, %rd32, %rd294;
	ld.global.v2.u32 	{%r7785, %r7783}, [%rd295];

$L__BB0_403:
	@%p231 bra 	$L__BB0_405;

	shl.b32 	%r3571, %r1733, 5;
	neg.s32 	%r3572, %r3571;
	cvt.s64.s32 	%rd296, %r3572;
	cvt.s64.s32 	%rd297, %r40;
	add.s64 	%rd298, %rd296, %rd297;
	shl.b64 	%rd299, %rd298, 3;
	add.s64 	%rd300, %rd32, %rd299;
	ld.global.v2.u32 	{%r7792, %r7790}, [%rd300];

$L__BB0_405:
	mad.lo.s32 	%r7308, %r660, %r1733, %r659;
	ld.param.u64 	%rd560, [%rd1+88];
	cvta.to.global.u64 	%rd559, %rd560;
	shl.b32 	%r3575, %r1734, 6;
	shl.b32 	%r3576, %r7308, 7;
	mad.lo.s32 	%r3577, %r3575, %r1733, %r3576;
	mul.wide.s32 	%rd301, %r3577, 4;
	add.s64 	%rd33, %rd559, %rd301;
	@%p228 bra 	$L__BB0_407;

	shl.b32 	%r3578, %r1733, 5;
	cvt.s64.s32 	%rd302, %r3578;
	cvt.s64.s32 	%rd303, %r40;
	add.s64 	%rd304, %rd302, %rd303;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd33, %rd305;
	ld.global.v4.u32 	{%r7786, %r7784, %r7776, %r7775}, [%rd306];
	shl.b32 	%r3583, %r1733, 6;
	add.s32 	%r3584, %r3583, -32;
	cvt.s64.s32 	%rd307, %r3584;
	add.s64 	%rd308, %rd307, %rd303;
	shl.b64 	%rd309, %rd308, 4;
	add.s64 	%rd310, %rd33, %rd309;
	ld.global.v4.u32 	{%r7794, %r7793, %r7782, %r7781}, [%rd310];

$L__BB0_407:
	@%p231 bra 	$L__BB0_409;

	shl.b32 	%r3589, %r1733, 5;
	xor.b32  	%r3590, %r3589, -32;
	cvt.s64.s32 	%rd311, %r3590;
	cvt.s64.s32 	%rd312, %r40;
	add.s64 	%rd313, %rd311, %rd312;
	shl.b64 	%rd314, %rd313, 4;
	add.s64 	%rd315, %rd33, %rd314;
	ld.global.v4.u32 	{%r7796, %r7795, %r7791, %r7789}, [%rd315];
	add.s64 	%rd317, %rd33, %rd277;
	ld.global.v4.u32 	{%r7788, %r7787, %r7779, %r7777}, [%rd317];

$L__BB0_409:
	mov.u32 	%r3604, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3600,%r7555,%r436,%r2267,%r3604;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3600;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7555;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3607, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3608,%r7556,%r3607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3611,%r7408,%r3608;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7797,%r7670;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7797,%r7409,%r3608;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3624, 31;
	mov.u32 	%r3647, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3622,%r7797,%r3624,%r2267,%r3647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3627,%r3611,%r3622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3630,%r7554,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3633,%r3630,%r3627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3636,%r7557,%r3633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3639,%r7670,%r3636;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3643,%r7550,%r436,%r2267,%r3647;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3643;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7550;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3650, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3651,%r7551,%r3650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3654,%r7408,%r3651;
}
	// end inline asm
	mov.u32 	%r7798, %r7669;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7798,%r7409,%r3651;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3665,%r7798,%r3624,%r2267,%r3647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3670,%r3654,%r3665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3673,%r7554,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3676,%r3670,%r3673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3679,%r7552,%r3676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3682,%r7669,%r3679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3685,%r7555,%r7556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3688,%r7412,%r3685;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7799,%r7668;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7799,%r7413,%r3685;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3701, 31;
	mov.u32 	%r3703, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3699,%r7799,%r3701,%r2267,%r3703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3704,%r3688,%r3699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r7547,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3710,%r3707,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3713,%r7548,%r3710;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3716,%r7668,%r3713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3719,%r7550,%r7551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3722,%r7412,%r3719;
}
	// end inline asm
	mov.u32 	%r7800, %r7667;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7800,%r7413,%r3719;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3731,%r7800,%r3701,%r2267,%r3703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3736,%r3722,%r3731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3739,%r7547,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r3736,%r3739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3745,%r7545,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3748,%r7667,%r3745;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3752,%r7541,%r436,%r2267,%r3703;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3752;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7541;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3759, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3760,%r7542,%r3759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3763,%r7408,%r3760;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7801,%r7666;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7801,%r7409,%r3760;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3778, 31;
	mov.u32 	%r3780, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3776,%r7801,%r3778,%r2267,%r3780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3781,%r3763,%r3776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3784,%r7540,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r3784,%r3781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3790,%r7543,%r3787;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3793,%r7666,%r3790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3796,%r7541,%r7542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3799,%r7412,%r3796;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7802,%r7665;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7802,%r7413,%r3796;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3812, 31;
	mov.u32 	%r3835, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3810,%r7802,%r3812,%r2267,%r3835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3815,%r3799,%r3810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3818,%r7538,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3821,%r3818,%r3815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3824,%r7539,%r3821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3827,%r7665,%r3824;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3831,%r7536,%r436,%r2267,%r3835;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3831;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7536;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3838, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3839,%r7537,%r3838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3842,%r7408,%r3839;
}
	// end inline asm
	@%p15 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7803,%r7664;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7803,%r7409,%r3839;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3857, 31;
	mov.u32 	%r3880, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3855,%r7803,%r3857,%r2267,%r3880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3860,%r3842,%r3855;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3863,%r7535,%r7732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3866,%r3863,%r3860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3869,%r7796,%r3866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r7664,%r3869;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3876,%r7531,%r436,%r2267,%r3880;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3876;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7531;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3883, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3884,%r7532,%r3883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3887,%r7408,%r3884;
}
	// end inline asm
	mov.u32 	%r7804, %r7663;
	@%p15 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7804,%r7409,%r3884;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3898,%r7804,%r3857,%r2267,%r3880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3903,%r3887,%r3898;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3906,%r7535,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3909,%r3903,%r3906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3912,%r7533,%r3909;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3915,%r7663,%r3912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3918,%r7536,%r7537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3921,%r7412,%r3918;
}
	// end inline asm
	@%p15 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7805,%r7662;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7805,%r7413,%r3918;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3934, 31;
	mov.u32 	%r3936, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3932,%r7805,%r3934,%r2267,%r3936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3937,%r3921,%r3932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3940,%r7530,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3943,%r3940,%r3937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3946,%r7795,%r3943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3949,%r7662,%r3946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3952,%r7531,%r7532;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3955,%r7412,%r3952;
}
	// end inline asm
	mov.u32 	%r7806, %r7661;
	@%p15 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7806,%r7413,%r3952;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3964,%r7806,%r3934,%r2267,%r3936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3969,%r3955,%r3964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3972,%r7530,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3975,%r3969,%r3972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3978,%r7528,%r3975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3981,%r7661,%r3978;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3985,%r7525,%r436,%r2267,%r3936;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3985;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7525;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3992, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3993,%r7526,%r3992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3996,%r7408,%r3993;
}
	// end inline asm
	@%p15 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7807,%r7660;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7807,%r7409,%r3993;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r4011, 31;
	mov.u32 	%r4034, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4009,%r7807,%r4011,%r2267,%r4034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4014,%r3996,%r4009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4017,%r7524,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4020,%r4017,%r4014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4023,%r549,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r7660,%r4023;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4030,%r7521,%r436,%r2267,%r4034;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4030;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7521;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4037, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4038,%r7522,%r4037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4041,%r7408,%r4038;
}
	// end inline asm
	mov.u32 	%r7808, %r7659;
	@%p15 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7808,%r7409,%r4038;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4052,%r7808,%r4011,%r2267,%r4034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4057,%r4041,%r4052;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4060,%r7524,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4063,%r4057,%r4060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4066,%r545,%r4063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r7659,%r4066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4072,%r7526,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4075,%r7522,%r7532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4078,%r4072,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4081,%r7520,%r4078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4084,%r7658,%r4081;
}
	// end inline asm
	selp.b32 	%r1173, %r7658, %r4084, %p15;
	// begin inline asm
	{sub.f16x2 %r4087,%r7525,%r7526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4090,%r7412,%r4087;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7809,%r7657;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7809,%r7413,%r4087;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4103, 31;
	mov.u32 	%r4105, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4101,%r7809,%r4103,%r2267,%r4105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4106,%r4090,%r4101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4109,%r7518,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4112,%r4109,%r4106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4115,%r541,%r4112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7582,%r7657,%r4115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7521,%r7522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4124,%r7412,%r4121;
}
	// end inline asm
	mov.u32 	%r7810, %r7656;
	@%p15 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7810,%r7413,%r4121;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4133,%r7810,%r4103,%r2267,%r4105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4138,%r4124,%r4133;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4141,%r7518,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r4138,%r4141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r539,%r4144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r7656,%r4147;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4153,%r7525,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4156,%r7521,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4159,%r4153,%r4156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4162,%r7516,%r4159;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4165,%r7655,%r4162;
}
	// end inline asm
	selp.b32 	%r1185, %r7655, %r4165, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4169,%r7513,%r436,%r2267,%r4105;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4169;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7513;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4176, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4177,%r7514,%r4176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4180,%r7408,%r4177;
}
	// end inline asm
	@%p15 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7811,%r7654;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7811,%r7409,%r4177;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4195, 31;
	mov.u32 	%r4218, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4193,%r7811,%r4195,%r2267,%r4218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4198,%r4180,%r4193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4201,%r7512,%r7524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4204,%r4201,%r4198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4207,%r537,%r4204;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7654,%r4207;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4214,%r7509,%r436,%r2267,%r4218;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4214;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7509;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4221, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4222,%r7510,%r4221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4225,%r7408,%r4222;
}
	// end inline asm
	mov.u32 	%r7812, %r7653;
	@%p15 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7812,%r7409,%r4222;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4236,%r7812,%r4195,%r2267,%r4218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4241,%r4225,%r4236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4244,%r7512,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4247,%r4241,%r4244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4250,%r7511,%r4247;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4253,%r7653,%r4250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4256,%r7514,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4259,%r7510,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r4256,%r4259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4265,%r7508,%r4262;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4268,%r7652,%r4265;
}
	// end inline asm
	selp.b32 	%r1197, %r7652, %r4268, %p15;
	// begin inline asm
	{sub.f16x2 %r4271,%r7513,%r7514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4274,%r7412,%r4271;
}
	// end inline asm
	@%p15 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7813,%r7651;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7813,%r7413,%r4271;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4287, 31;
	mov.u32 	%r4289, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4285,%r7813,%r4287,%r2267,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4290,%r4274,%r4285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r7506,%r7518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4296,%r4293,%r4290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4299,%r529,%r4296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r7651,%r4299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7509,%r7510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4308,%r7412,%r4305;
}
	// end inline asm
	mov.u32 	%r7814, %r7650;
	@%p15 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7814,%r7413,%r4305;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4317,%r7814,%r4287,%r2267,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4322,%r4308,%r4317;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4325,%r7506,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r4322,%r4325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4331,%r7505,%r4328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4334,%r7650,%r4331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4337,%r7513,%r7541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4340,%r7509,%r7521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4343,%r4337,%r4340;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4346,%r7504,%r4343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4349,%r7649,%r4346;
}
	// end inline asm
	selp.b32 	%r1209, %r7649, %r4349, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4353,%r7502,%r436,%r2267,%r4289;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4353;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7502;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4360, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4361,%r7503,%r4360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4364,%r7408,%r4361;
}
	// end inline asm
	@%p15 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7815,%r7648;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7815,%r7409,%r4361;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4379, 31;
	mov.u32 	%r4381, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4377,%r7815,%r4379,%r2267,%r4381;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4382,%r4364,%r4377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4385,%r7716,%r7512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r4385,%r4382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4391,%r7794,%r4388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4394,%r7648,%r4391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4397,%r7502,%r7503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4400,%r7412,%r4397;
}
	// end inline asm
	@%p15 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7816,%r7647;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7816,%r7413,%r4397;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4413, 31;
	mov.u32 	%r4436, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4411,%r7816,%r4413,%r2267,%r4436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4416,%r4400,%r4411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4419,%r7715,%r7506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4422,%r4419,%r4416;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4425,%r7793,%r4422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4428,%r7647,%r4425;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4432,%r7498,%r436,%r2267,%r4436;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4432;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7498;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4439, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4440,%r7499,%r4439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4443,%r7408,%r4440;
}
	// end inline asm
	mov.u32 	%r7817, %r7646;
	@%p15 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7817,%r7409,%r4440;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4454,%r7817,%r4413,%r2267,%r4436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4459,%r4443,%r4454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4462,%r7727,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4465,%r4459,%r4462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4468,%r7792,%r4465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7646,%r4468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4474,%r7728,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4477,%r7499,%r7730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4480,%r4474,%r4477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4483,%r7791,%r4480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4486,%r7645,%r4483;
}
	// end inline asm
	selp.b32 	%r1227, %r7645, %r4486, %p15;
	// begin inline asm
	{sub.f16x2 %r4489,%r7498,%r7499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4492,%r7412,%r4489;
}
	// end inline asm
	mov.u32 	%r7818, %r7644;
	@%p15 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7818,%r7413,%r4489;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4503, 31;
	mov.u32 	%r4541, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4501,%r7818,%r4503,%r2267,%r4541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4506,%r4492,%r4501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4509,%r7725,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r4506,%r4509;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4515,%r7790,%r4512;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r7644,%r4515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4521,%r7726,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4524,%r7498,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4527,%r4521,%r4524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4530,%r7789,%r4527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4533,%r7643,%r4530;
}
	// end inline asm
	selp.b32 	%r1233, %r7643, %r4533, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4537,%r7494,%r436,%r2267,%r4541;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4537;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7494;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4544, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4545,%r7495,%r4544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4548,%r7408,%r4545;
}
	// end inline asm
	@%p15 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7819,%r7642;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7819,%r7409,%r4545;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4563, 31;
	mov.u32 	%r4586, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4561,%r7819,%r4563,%r2267,%r4586;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4566,%r4548,%r4561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4569,%r7493,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4572,%r4569,%r4566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4575,%r7788,%r4572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7642,%r4575;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4582,%r7490,%r436,%r2267,%r4586;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4582;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7490;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4589, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4590,%r7491,%r4589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4593,%r7408,%r4590;
}
	// end inline asm
	mov.u32 	%r7820, %r7641;
	@%p15 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7820,%r7409,%r4590;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4604,%r7820,%r4563,%r2267,%r4586;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4609,%r4593,%r4604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4612,%r7493,%r7524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4615,%r4609,%r4612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4618,%r7523,%r4615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7641,%r4618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4624,%r7495,%r7526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4627,%r7491,%r7499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r4624,%r4627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4633,%r511,%r4630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4636,%r7640,%r4633;
}
	// end inline asm
	selp.b32 	%r7571, %r7640, %r4636, %p15;
	// begin inline asm
	{sub.f16x2 %r4639,%r7494,%r7495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4642,%r7412,%r4639;
}
	// end inline asm
	@%p15 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7821,%r7639;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7821,%r7413,%r4639;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4655, 31;
	mov.u32 	%r4657, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4653,%r7821,%r4655,%r2267,%r4657;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4658,%r4642,%r4653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4661,%r7488,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4664,%r4661,%r4658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4667,%r7787,%r4664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r7639,%r4667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4673,%r7490,%r7491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4676,%r7412,%r4673;
}
	// end inline asm
	mov.u32 	%r7822, %r7638;
	@%p15 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7822,%r7413,%r4673;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4685,%r7822,%r4655,%r2267,%r4657;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4690,%r4676,%r4685;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4693,%r7488,%r7518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r4690,%r4693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4699,%r7517,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r7638,%r4699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4705,%r7494,%r7525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4708,%r7490,%r7498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4711,%r4705,%r4708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4714,%r508,%r4711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4717,%r7637,%r4714;
}
	// end inline asm
	selp.b32 	%r7570, %r7637, %r4717, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4721,%r7484,%r436,%r2267,%r4657;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4721;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7484;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4728, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4729,%r7485,%r4728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4732,%r7408,%r4729;
}
	// end inline asm
	@%p15 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7823,%r7636;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7823,%r7409,%r4729;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4747, 31;
	mov.u32 	%r4770, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4745,%r7823,%r4747,%r2267,%r4770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4750,%r4732,%r4745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4753,%r7712,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4756,%r4753,%r4750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4759,%r7786,%r4756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7636,%r4759;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4766,%r7482,%r436,%r2267,%r4770;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4766;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7482;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4773, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4774,%r7483,%r4773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4777,%r7408,%r4774;
}
	// end inline asm
	mov.u32 	%r7824, %r7635;
	@%p15 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7824,%r7409,%r4774;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4788,%r7824,%r4747,%r2267,%r4770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4793,%r4777,%r4788;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4796,%r7712,%r7512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4799,%r4793,%r4796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4802,%r7785,%r4799;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7635,%r4802;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4808,%r7485,%r7514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4811,%r7483,%r7491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4814,%r4808,%r4811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4817,%r503,%r4814;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4820,%r7634,%r4817;
}
	// end inline asm
	selp.b32 	%r7565, %r7634, %r4820, %p15;
	// begin inline asm
	{sub.f16x2 %r4823,%r7484,%r7485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4826,%r7412,%r4823;
}
	// end inline asm
	@%p15 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7825,%r7633;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7825,%r7413,%r4823;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4839, 31;
	mov.u32 	%r4841, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4837,%r7825,%r4839,%r2267,%r4841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4842,%r4826,%r4837;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r7711,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4848,%r4845,%r4842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4851,%r7784,%r4848;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7633,%r4851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r7482,%r7483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4860,%r7412,%r4857;
}
	// end inline asm
	mov.u32 	%r7826, %r7632;
	@%p15 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7826,%r7413,%r4857;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4869,%r7826,%r4839,%r2267,%r4841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4874,%r4860,%r4869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4877,%r7711,%r7506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4880,%r4874,%r4877;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4883,%r7783,%r4880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7632,%r4883;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r7484,%r7513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r7482,%r7490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4895,%r4889,%r4892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4898,%r502,%r4895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4901,%r7631,%r4898;
}
	// end inline asm
	selp.b32 	%r7564, %r7631, %r4901, %p15;
	// begin inline asm
	{sub.f16x2 %r4904,%r7710,%r7503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4907,%r7714,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4910,%r4904,%r4907;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4913,%r7782,%r4910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4916,%r7630,%r4913;
}
	// end inline asm
	selp.b32 	%r1282, %r7630, %r4916, %p15;
	// begin inline asm
	{sub.f16x2 %r4919,%r7709,%r7502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4922,%r7713,%r7482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4925,%r4919,%r4922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4928,%r7781,%r4925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4931,%r7629,%r4928;
}
	// end inline asm
	selp.b32 	%r1283, %r7629, %r4931, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4935,%r7476,%r436,%r2267,%r4841;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4935;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7476;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4942, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4943,%r7477,%r4942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4946,%r7408,%r4943;
}
	// end inline asm
	mov.u32 	%r7827, %r7628;
	@%p15 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7827,%r7409,%r4943;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4959, 31;
	mov.u32 	%r4961, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4957,%r7827,%r4959,%r2267,%r4961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4962,%r4946,%r4957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4965,%r7721,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4968,%r4962,%r4965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4971,%r7780,%r4968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7628,%r4971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4977,%r7722,%r7495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4980,%r7477,%r7724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4983,%r4977,%r4980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4986,%r7779,%r4983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4989,%r7627,%r4986;
}
	// end inline asm
	selp.b32 	%r7561, %r7627, %r4989, %p15;
	// begin inline asm
	{sub.f16x2 %r4992,%r7476,%r7477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4995,%r7412,%r4992;
}
	// end inline asm
	mov.u32 	%r7828, %r7626;
	@%p15 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7828,%r7413,%r4992;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5004,%r7828,%r4959,%r2267,%r4961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5009,%r4995,%r5004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5012,%r7719,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5015,%r5009,%r5012;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5018,%r7778,%r5015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7626,%r5018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5024,%r7720,%r7494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5027,%r7476,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5030,%r5024,%r5027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5033,%r7777,%r5030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5036,%r7625,%r5033;
}
	// end inline asm
	selp.b32 	%r7560, %r7625, %r5036, %p15;
	// begin inline asm
	{sub.f16x2 %r5039,%r7707,%r7485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5042,%r7708,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5045,%r5039,%r5042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5048,%r7776,%r5045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5051,%r7624,%r5048;
}
	// end inline asm
	selp.b32 	%r7559, %r7624, %r5051, %p15;
	// begin inline asm
	{sub.f16x2 %r5054,%r7705,%r7484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5057,%r7706,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5060,%r5054,%r5057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5063,%r7775,%r5060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5066,%r7623,%r5063;
}
	// end inline asm
	selp.b32 	%r7558, %r7623, %r5066, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd318, [%rd1+160];
	cvta.to.global.u64 	%rd35, %rd318;
	add.s32 	%r5071, %r1742, 2;
	setp.lt.s32 	%p279, %r659, %r5071;
	add.s32 	%r5072, %r1743, -1;
	setp.ge.s32 	%p280, %r659, %r5072;
	or.pred  	%p281, %p280, %p279;
	add.s32 	%r5073, %r1744, 2;
	setp.lt.s32 	%p282, %r660, %r5073;
	or.pred  	%p283, %p281, %p282;
	add.s32 	%r5074, %r1745, -2;
	setp.ge.s32 	%p284, %r660, %r5074;
	or.pred  	%p285, %p284, %p283;
	setp.lt.s32 	%p286, %r661, %r1739;
	or.pred  	%p287, %p286, %p285;
	mad.lo.s32 	%r5075, %r1741, %r1740, %r1739;
	setp.ge.s32 	%p288, %r661, %r5075;
	or.pred  	%p289, %p287, %p288;
	@%p289 bra 	$L__BB0_731;

	sub.s32 	%r1298, %r661, %r1739;
	rem.s32 	%r5076, %r1298, %r1740;
	setp.ne.s32 	%p290, %r5076, 0;
	@%p290 bra 	$L__BB0_731;

	div.s32 	%r5077, %r1298, %r1740;
	mul.lo.s32 	%r5079, %r5077, %r53;
	sub.s32 	%r1299, %r659, %r1742;
	sub.s32 	%r1300, %r660, %r1744;
	mul.lo.s32 	%r1301, %r5079, 3;
	add.s32 	%r5080, %r1299, %r1301;
	add.s32 	%r5081, %r5080, -2;
	mul.lo.s32 	%r1302, %r5081, %r54;
	add.s32 	%r5083, %r1300, %r1302;
	mul.lo.s32 	%r5084, %r5083, %r55;
	sub.s32 	%r1303, %r5084, %r1746;
	@%p15 bra 	$L__BB0_496;

	not.pred 	%p292, %p11;
	@%p292 bra 	$L__BB0_494;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3639;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5086, %r1303, %r402;
	mul.wide.s32 	%rd319, %r5086, 4;
	add.s64 	%rd320, %rd35, %rd319;
	st.global.f32 	[%rd320], %f395;

$L__BB0_494:
	not.pred 	%p293, %p13;
	@%p293 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3639;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5088, %r1303, %r403;
	mul.wide.s32 	%rd321, %r5088, 4;
	add.s64 	%rd322, %rd35, %rd321;
	st.global.f32 	[%rd322], %f396;

$L__BB0_496:
	@%p15 bra 	$L__BB0_501;

	not.pred 	%p295, %p12;
	@%p295 bra 	$L__BB0_499;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3716;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5090, %r1303, %r416;
	mul.wide.s32 	%rd323, %r5090, 4;
	add.s64 	%rd324, %rd35, %rd323;
	st.global.f32 	[%rd324], %f397;

$L__BB0_499:
	not.pred 	%p296, %p14;
	@%p296 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3716;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5092, %r1303, %r417;
	mul.wide.s32 	%rd325, %r5092, 4;
	add.s64 	%rd326, %rd35, %rd325;
	st.global.f32 	[%rd326], %f398;

$L__BB0_501:
	sub.s32 	%r7316, %r659, %r1742;
	add.s32 	%r1304, %r1301, %r53;
	add.s32 	%r5094, %r7316, %r1304;
	add.s32 	%r5095, %r5094, -2;
	mad.lo.s32 	%r5097, %r5095, %r54, %r1300;
	mul.lo.s32 	%r5098, %r5097, %r55;
	sub.s32 	%r1305, %r5098, %r1746;
	@%p15 bra 	$L__BB0_506;

	not.pred 	%p298, %p11;
	@%p298 bra 	$L__BB0_504;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3682;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5100, %r1305, %r402;
	mul.wide.s32 	%rd327, %r5100, 4;
	add.s64 	%rd328, %rd35, %rd327;
	st.global.f32 	[%rd328], %f399;

$L__BB0_504:
	not.pred 	%p299, %p13;
	@%p299 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3682;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5102, %r1305, %r403;
	mul.wide.s32 	%rd329, %r5102, 4;
	add.s64 	%rd330, %rd35, %rd329;
	st.global.f32 	[%rd330], %f400;

$L__BB0_506:
	@%p15 bra 	$L__BB0_511;

	not.pred 	%p301, %p12;
	@%p301 bra 	$L__BB0_509;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3748;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5104, %r1305, %r416;
	mul.wide.s32 	%rd331, %r5104, 4;
	add.s64 	%rd332, %rd35, %rd331;
	st.global.f32 	[%rd332], %f401;

$L__BB0_509:
	not.pred 	%p302, %p14;
	@%p302 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3748;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5106, %r1305, %r417;
	mul.wide.s32 	%rd333, %r5106, 4;
	add.s64 	%rd334, %rd35, %rd333;
	st.global.f32 	[%rd334], %f402;

$L__BB0_511:
	add.s32 	%r1306, %r1300, 1;
	add.s32 	%r5107, %r1306, %r1302;
	mul.lo.s32 	%r5108, %r5107, %r55;
	sub.s32 	%r1307, %r5108, %r1746;
	@%p15 bra 	$L__BB0_516;

	not.pred 	%p304, %p11;
	@%p304 bra 	$L__BB0_514;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3793;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5110, %r1307, %r402;
	mul.wide.s32 	%rd335, %r5110, 4;
	add.s64 	%rd336, %rd35, %rd335;
	st.global.f32 	[%rd336], %f403;

$L__BB0_514:
	not.pred 	%p305, %p13;
	@%p305 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3793;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5112, %r1307, %r403;
	mul.wide.s32 	%rd337, %r5112, 4;
	add.s64 	%rd338, %rd35, %rd337;
	st.global.f32 	[%rd338], %f404;

$L__BB0_516:
	@%p15 bra 	$L__BB0_521;

	not.pred 	%p307, %p12;
	@%p307 bra 	$L__BB0_519;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3827;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5114, %r1307, %r416;
	mul.wide.s32 	%rd339, %r5114, 4;
	add.s64 	%rd340, %rd35, %rd339;
	st.global.f32 	[%rd340], %f405;

$L__BB0_519:
	not.pred 	%p308, %p14;
	@%p308 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3827;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5116, %r1307, %r417;
	mul.wide.s32 	%rd341, %r5116, 4;
	add.s64 	%rd342, %rd35, %rd341;
	st.global.f32 	[%rd342], %f406;

$L__BB0_521:
	not.b32 	%r5117, %r1742;
	add.s32 	%r1308, %r659, %r5117;
	not.b32 	%r5118, %r1744;
	add.s32 	%r1309, %r660, %r5118;
	add.s32 	%r5119, %r1308, %r1301;
	mul.lo.s32 	%r1310, %r5119, %r54;
	add.s32 	%r5121, %r1309, %r1310;
	mul.lo.s32 	%r5122, %r5121, %r55;
	sub.s32 	%r1311, %r5122, %r1746;
	@%p15 bra 	$L__BB0_526;

	not.pred 	%p310, %p11;
	@%p310 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3872;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5124, %r1311, %r402;
	mul.wide.s32 	%rd343, %r5124, 4;
	add.s64 	%rd344, %rd35, %rd343;
	st.global.f32 	[%rd344], %f407;

$L__BB0_524:
	not.pred 	%p311, %p13;
	@%p311 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3872;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5126, %r1311, %r403;
	mul.wide.s32 	%rd345, %r5126, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f408;

$L__BB0_526:
	@%p15 bra 	$L__BB0_531;

	not.pred 	%p313, %p12;
	@%p313 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3949;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5128, %r1311, %r416;
	mul.wide.s32 	%rd347, %r5128, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f409;

$L__BB0_529:
	not.pred 	%p314, %p14;
	@%p314 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3949;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5130, %r1311, %r417;
	mul.wide.s32 	%rd349, %r5130, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f410;

$L__BB0_531:
	add.s32 	%r5132, %r1308, %r1304;
	mul.lo.s32 	%r1312, %r5132, %r54;
	add.s32 	%r5133, %r1309, %r1312;
	mul.lo.s32 	%r5134, %r5133, %r55;
	sub.s32 	%r1313, %r5134, %r1746;
	@%p15 bra 	$L__BB0_536;

	not.pred 	%p316, %p11;
	@%p316 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3915;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5136, %r1313, %r402;
	mul.wide.s32 	%rd351, %r5136, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f411;

$L__BB0_534:
	not.pred 	%p317, %p13;
	@%p317 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3915;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5138, %r1313, %r403;
	mul.wide.s32 	%rd353, %r5138, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f412;

$L__BB0_536:
	@%p15 bra 	$L__BB0_541;

	not.pred 	%p319, %p12;
	@%p319 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3981;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5140, %r1313, %r416;
	mul.wide.s32 	%rd355, %r5140, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f413;

$L__BB0_539:
	not.pred 	%p320, %p14;
	@%p320 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3981;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5142, %r1313, %r417;
	mul.wide.s32 	%rd357, %r5142, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f414;

$L__BB0_541:
	add.s32 	%r5143, %r1300, %r1310;
	mul.lo.s32 	%r5144, %r5143, %r55;
	sub.s32 	%r1314, %r5144, %r1746;
	@%p15 bra 	$L__BB0_546;

	not.pred 	%p322, %p11;
	@%p322 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7583;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5146, %r1314, %r402;
	mul.wide.s32 	%rd359, %r5146, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f415;

$L__BB0_544:
	not.pred 	%p323, %p13;
	@%p323 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7583;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5148, %r1314, %r403;
	mul.wide.s32 	%rd361, %r5148, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f416;

$L__BB0_546:
	@%p15 bra 	$L__BB0_551;

	not.pred 	%p325, %p12;
	@%p325 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7582;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5150, %r1314, %r416;
	mul.wide.s32 	%rd363, %r5150, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f417;

$L__BB0_549:
	not.pred 	%p326, %p14;
	@%p326 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7582;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5152, %r1314, %r417;
	mul.wide.s32 	%rd365, %r5152, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f418;

$L__BB0_551:
	add.s32 	%r5153, %r1300, %r1312;
	mul.lo.s32 	%r5154, %r5153, %r55;
	sub.s32 	%r1315, %r5154, %r1746;
	@%p15 bra 	$L__BB0_556;

	not.pred 	%p328, %p11;
	@%p328 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7581;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5156, %r1315, %r402;
	mul.wide.s32 	%rd367, %r5156, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f419;

$L__BB0_554:
	not.pred 	%p329, %p13;
	@%p329 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7581;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5158, %r1315, %r403;
	mul.wide.s32 	%rd369, %r5158, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f420;

$L__BB0_556:
	@%p15 bra 	$L__BB0_561;

	not.pred 	%p331, %p12;
	@%p331 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7580;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5160, %r1315, %r416;
	mul.wide.s32 	%rd371, %r5160, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f421;

$L__BB0_559:
	not.pred 	%p332, %p14;
	@%p332 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7580;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5162, %r1315, %r417;
	mul.wide.s32 	%rd373, %r5162, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f422;

$L__BB0_561:
	add.s32 	%r1316, %r1304, %r53;
	add.s32 	%r5164, %r1308, %r1316;
	mul.lo.s32 	%r1317, %r5164, %r54;
	add.s32 	%r5166, %r1300, %r1317;
	mul.lo.s32 	%r5167, %r5166, %r55;
	sub.s32 	%r1318, %r5167, %r1746;
	@%p15 bra 	$L__BB0_566;

	not.pred 	%p334, %p11;
	@%p334 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5169, %r1318, %r402;
	mul.wide.s32 	%rd375, %r5169, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f423;

$L__BB0_564:
	not.pred 	%p335, %p13;
	@%p335 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5171, %r1318, %r403;
	mul.wide.s32 	%rd377, %r5171, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f424;

$L__BB0_566:
	@%p15 bra 	$L__BB0_571;

	not.pred 	%p337, %p12;
	@%p337 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5173, %r1318, %r416;
	mul.wide.s32 	%rd379, %r5173, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f425;

$L__BB0_569:
	not.pred 	%p338, %p14;
	@%p338 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5175, %r1318, %r417;
	mul.wide.s32 	%rd381, %r5175, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f426;

$L__BB0_571:
	add.s32 	%r7309, %r1300, 1;
	add.s32 	%r5176, %r7309, %r1310;
	mul.lo.s32 	%r5177, %r5176, %r55;
	sub.s32 	%r1319, %r5177, %r1746;
	@%p15 bra 	$L__BB0_576;

	not.pred 	%p340, %p11;
	@%p340 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5179, %r1319, %r402;
	mul.wide.s32 	%rd383, %r5179, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f427;

$L__BB0_574:
	not.pred 	%p341, %p13;
	@%p341 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5181, %r1319, %r403;
	mul.wide.s32 	%rd385, %r5181, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f428;

$L__BB0_576:
	@%p15 bra 	$L__BB0_581;

	not.pred 	%p343, %p12;
	@%p343 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7578;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5183, %r1319, %r416;
	mul.wide.s32 	%rd387, %r5183, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f429;

$L__BB0_579:
	not.pred 	%p344, %p14;
	@%p344 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7578;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5185, %r1319, %r417;
	mul.wide.s32 	%rd389, %r5185, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f430;

$L__BB0_581:
	add.s32 	%r7310, %r1300, 1;
	add.s32 	%r5186, %r7310, %r1312;
	mul.lo.s32 	%r5187, %r5186, %r55;
	sub.s32 	%r1320, %r5187, %r1746;
	@%p15 bra 	$L__BB0_586;

	not.pred 	%p346, %p11;
	@%p346 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4253;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5189, %r1320, %r402;
	mul.wide.s32 	%rd391, %r5189, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f431;

$L__BB0_584:
	not.pred 	%p347, %p13;
	@%p347 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4253;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5191, %r1320, %r403;
	mul.wide.s32 	%rd393, %r5191, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f432;

$L__BB0_586:
	@%p15 bra 	$L__BB0_591;

	not.pred 	%p349, %p12;
	@%p349 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4334;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5193, %r1320, %r416;
	mul.wide.s32 	%rd395, %r5193, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f433;

$L__BB0_589:
	not.pred 	%p350, %p14;
	@%p350 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4334;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5195, %r1320, %r417;
	mul.wide.s32 	%rd397, %r5195, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f434;

$L__BB0_591:
	add.s32 	%r7311, %r1300, 1;
	add.s32 	%r5196, %r7311, %r1317;
	mul.lo.s32 	%r5197, %r5196, %r55;
	sub.s32 	%r1321, %r5197, %r1746;
	@%p15 bra 	$L__BB0_596;

	not.pred 	%p352, %p11;
	@%p352 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1197;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5199, %r1321, %r402;
	mul.wide.s32 	%rd399, %r5199, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f435;

$L__BB0_594:
	not.pred 	%p353, %p13;
	@%p353 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1197;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5201, %r1321, %r403;
	mul.wide.s32 	%rd401, %r5201, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f436;

$L__BB0_596:
	@%p15 bra 	$L__BB0_601;

	not.pred 	%p355, %p12;
	@%p355 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5203, %r1321, %r416;
	mul.wide.s32 	%rd403, %r5203, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f437;

$L__BB0_599:
	not.pred 	%p356, %p14;
	@%p356 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5205, %r1321, %r417;
	mul.wide.s32 	%rd405, %r5205, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f438;

$L__BB0_601:
	add.s32 	%r1322, %r1300, 2;
	add.s32 	%r5206, %r1322, %r1310;
	mul.lo.s32 	%r5207, %r5206, %r55;
	sub.s32 	%r1323, %r5207, %r1746;
	@%p15 bra 	$L__BB0_606;

	not.pred 	%p358, %p11;
	@%p358 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4394;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5209, %r1323, %r402;
	mul.wide.s32 	%rd407, %r5209, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f439;

$L__BB0_604:
	not.pred 	%p359, %p13;
	@%p359 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4394;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5211, %r1323, %r403;
	mul.wide.s32 	%rd409, %r5211, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f440;

$L__BB0_606:
	@%p15 bra 	$L__BB0_611;

	not.pred 	%p361, %p12;
	@%p361 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4428;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5213, %r1323, %r416;
	mul.wide.s32 	%rd411, %r5213, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f441;

$L__BB0_609:
	not.pred 	%p362, %p14;
	@%p362 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4428;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5215, %r1323, %r417;
	mul.wide.s32 	%rd413, %r5215, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f442;

$L__BB0_611:
	mul.lo.s32 	%r1324, %r5094, %r54;
	add.s32 	%r5218, %r1309, %r1324;
	mul.lo.s32 	%r5219, %r5218, %r55;
	sub.s32 	%r1325, %r5219, %r1746;
	@%p15 bra 	$L__BB0_616;

	not.pred 	%p364, %p11;
	@%p364 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5221, %r1325, %r402;
	mul.wide.s32 	%rd415, %r5221, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f443;

$L__BB0_614:
	not.pred 	%p365, %p13;
	@%p365 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5223, %r1325, %r403;
	mul.wide.s32 	%rd417, %r5223, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f444;

$L__BB0_616:
	@%p15 bra 	$L__BB0_621;

	not.pred 	%p367, %p12;
	@%p367 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7576;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5225, %r1325, %r416;
	mul.wide.s32 	%rd419, %r5225, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f445;

$L__BB0_619:
	not.pred 	%p368, %p14;
	@%p368 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7576;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5227, %r1325, %r417;
	mul.wide.s32 	%rd421, %r5227, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f446;

$L__BB0_621:
	sub.s32 	%r7317, %r659, %r1742;
	add.s32 	%r5229, %r7317, %r1316;
	mul.lo.s32 	%r1326, %r5229, %r54;
	add.s32 	%r5230, %r1309, %r1326;
	mul.lo.s32 	%r5231, %r5230, %r55;
	sub.s32 	%r1327, %r5231, %r1746;
	@%p15 bra 	$L__BB0_626;

	not.pred 	%p370, %p11;
	@%p370 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1227;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5233, %r1327, %r402;
	mul.wide.s32 	%rd423, %r5233, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f447;

$L__BB0_624:
	not.pred 	%p371, %p13;
	@%p371 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1227;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5235, %r1327, %r403;
	mul.wide.s32 	%rd425, %r5235, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f448;

$L__BB0_626:
	@%p15 bra 	$L__BB0_631;

	not.pred 	%p373, %p12;
	@%p373 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1233;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5237, %r1327, %r416;
	mul.wide.s32 	%rd427, %r5237, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f449;

$L__BB0_629:
	not.pred 	%p374, %p14;
	@%p374 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1233;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5239, %r1327, %r417;
	mul.wide.s32 	%rd429, %r5239, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f450;

$L__BB0_631:
	mul.lo.s32 	%r1328, %r5080, %r54;
	add.s32 	%r5242, %r1300, %r1328;
	mul.lo.s32 	%r5243, %r5242, %r55;
	sub.s32 	%r1329, %r5243, %r1746;
	@%p15 bra 	$L__BB0_636;

	not.pred 	%p376, %p11;
	@%p376 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5245, %r1329, %r402;
	mul.wide.s32 	%rd431, %r5245, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f451;

$L__BB0_634:
	not.pred 	%p377, %p13;
	@%p377 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5247, %r1329, %r403;
	mul.wide.s32 	%rd433, %r5247, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f452;

$L__BB0_636:
	@%p15 bra 	$L__BB0_641;

	not.pred 	%p379, %p12;
	@%p379 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7574;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5249, %r1329, %r416;
	mul.wide.s32 	%rd435, %r5249, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f453;

$L__BB0_639:
	not.pred 	%p380, %p14;
	@%p380 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7574;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5251, %r1329, %r417;
	mul.wide.s32 	%rd437, %r5251, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f454;

$L__BB0_641:
	add.s32 	%r5252, %r1300, %r1324;
	mul.lo.s32 	%r5253, %r5252, %r55;
	sub.s32 	%r1330, %r5253, %r1746;
	@%p15 bra 	$L__BB0_646;

	not.pred 	%p382, %p11;
	@%p382 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5255, %r1330, %r402;
	mul.wide.s32 	%rd439, %r5255, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f455;

$L__BB0_644:
	not.pred 	%p383, %p13;
	@%p383 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5257, %r1330, %r403;
	mul.wide.s32 	%rd441, %r5257, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f456;

$L__BB0_646:
	@%p15 bra 	$L__BB0_651;

	not.pred 	%p385, %p12;
	@%p385 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5259, %r1330, %r416;
	mul.wide.s32 	%rd443, %r5259, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f457;

$L__BB0_649:
	not.pred 	%p386, %p14;
	@%p386 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5261, %r1330, %r417;
	mul.wide.s32 	%rd445, %r5261, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f458;

$L__BB0_651:
	add.s32 	%r5262, %r1300, %r1326;
	mul.lo.s32 	%r5263, %r5262, %r55;
	sub.s32 	%r1331, %r5263, %r1746;
	@%p15 bra 	$L__BB0_656;

	not.pred 	%p388, %p11;
	@%p388 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5265, %r1331, %r402;
	mul.wide.s32 	%rd447, %r5265, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f459;

$L__BB0_654:
	not.pred 	%p389, %p13;
	@%p389 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5267, %r1331, %r403;
	mul.wide.s32 	%rd449, %r5267, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f460;

$L__BB0_656:
	@%p15 bra 	$L__BB0_661;

	not.pred 	%p391, %p12;
	@%p391 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5269, %r1331, %r416;
	mul.wide.s32 	%rd451, %r5269, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f461;

$L__BB0_659:
	not.pred 	%p392, %p14;
	@%p392 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5271, %r1331, %r417;
	mul.wide.s32 	%rd453, %r5271, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f462;

$L__BB0_661:
	add.s32 	%r7312, %r1300, 1;
	add.s32 	%r5272, %r7312, %r1328;
	mul.lo.s32 	%r5273, %r5272, %r55;
	sub.s32 	%r1332, %r5273, %r1746;
	@%p15 bra 	$L__BB0_666;

	not.pred 	%p394, %p11;
	@%p394 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5275, %r1332, %r402;
	mul.wide.s32 	%rd455, %r5275, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f463;

$L__BB0_664:
	not.pred 	%p395, %p13;
	@%p395 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7569;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5277, %r1332, %r403;
	mul.wide.s32 	%rd457, %r5277, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f464;

$L__BB0_666:
	@%p15 bra 	$L__BB0_671;

	not.pred 	%p397, %p12;
	@%p397 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5279, %r1332, %r416;
	mul.wide.s32 	%rd459, %r5279, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f465;

$L__BB0_669:
	not.pred 	%p398, %p14;
	@%p398 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5281, %r1332, %r417;
	mul.wide.s32 	%rd461, %r5281, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f466;

$L__BB0_671:
	add.s32 	%r7313, %r1300, 1;
	add.s32 	%r5282, %r7313, %r1324;
	mul.lo.s32 	%r5283, %r5282, %r55;
	sub.s32 	%r1333, %r5283, %r1746;
	@%p15 bra 	$L__BB0_676;

	not.pred 	%p400, %p11;
	@%p400 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5285, %r1333, %r402;
	mul.wide.s32 	%rd463, %r5285, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f467;

$L__BB0_674:
	not.pred 	%p401, %p13;
	@%p401 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5287, %r1333, %r403;
	mul.wide.s32 	%rd465, %r5287, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f468;

$L__BB0_676:
	@%p15 bra 	$L__BB0_681;

	not.pred 	%p403, %p12;
	@%p403 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5289, %r1333, %r416;
	mul.wide.s32 	%rd467, %r5289, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f469;

$L__BB0_679:
	not.pred 	%p404, %p14;
	@%p404 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5291, %r1333, %r417;
	mul.wide.s32 	%rd469, %r5291, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f470;

$L__BB0_681:
	add.s32 	%r7314, %r1300, 1;
	add.s32 	%r5292, %r7314, %r1326;
	mul.lo.s32 	%r5293, %r5292, %r55;
	sub.s32 	%r1334, %r5293, %r1746;
	@%p15 bra 	$L__BB0_686;

	not.pred 	%p406, %p11;
	@%p406 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5295, %r1334, %r402;
	mul.wide.s32 	%rd471, %r5295, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f471;

$L__BB0_684:
	not.pred 	%p407, %p13;
	@%p407 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5297, %r1334, %r403;
	mul.wide.s32 	%rd473, %r5297, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f472;

$L__BB0_686:
	@%p15 bra 	$L__BB0_691;

	not.pred 	%p409, %p12;
	@%p409 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5299, %r1334, %r416;
	mul.wide.s32 	%rd475, %r5299, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f473;

$L__BB0_689:
	not.pred 	%p410, %p14;
	@%p410 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5301, %r1334, %r417;
	mul.wide.s32 	%rd477, %r5301, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f474;

$L__BB0_691:
	add.s32 	%r5302, %r1322, %r1326;
	mul.lo.s32 	%r5303, %r5302, %r55;
	sub.s32 	%r1335, %r5303, %r1746;
	@%p15 bra 	$L__BB0_696;

	not.pred 	%p412, %p11;
	@%p412 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1282;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5305, %r1335, %r402;
	mul.wide.s32 	%rd479, %r5305, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f475;

$L__BB0_694:
	not.pred 	%p413, %p13;
	@%p413 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1282;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5307, %r1335, %r403;
	mul.wide.s32 	%rd481, %r5307, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f476;

$L__BB0_696:
	@%p15 bra 	$L__BB0_701;

	not.pred 	%p415, %p12;
	@%p415 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1283;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5309, %r1335, %r416;
	mul.wide.s32 	%rd483, %r5309, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f477;

$L__BB0_699:
	not.pred 	%p416, %p14;
	@%p416 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1283;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5311, %r1335, %r417;
	mul.wide.s32 	%rd485, %r5311, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f478;

$L__BB0_701:
	sub.s32 	%r7318, %r659, %r1742;
	add.s32 	%r1336, %r7318, 1;
	add.s32 	%r5312, %r1336, %r1304;
	mad.lo.s32 	%r5314, %r5312, %r54, %r1300;
	mul.lo.s32 	%r5315, %r5314, %r55;
	sub.s32 	%r1337, %r5315, %r1746;
	@%p15 bra 	$L__BB0_706;

	not.pred 	%p418, %p11;
	@%p418 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5317, %r1337, %r402;
	mul.wide.s32 	%rd487, %r5317, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f479;

$L__BB0_704:
	not.pred 	%p419, %p13;
	@%p419 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7563;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5319, %r1337, %r403;
	mul.wide.s32 	%rd489, %r5319, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f480;

$L__BB0_706:
	@%p15 bra 	$L__BB0_711;

	not.pred 	%p421, %p12;
	@%p421 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5321, %r1337, %r416;
	mul.wide.s32 	%rd491, %r5321, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f481;

$L__BB0_709:
	not.pred 	%p422, %p14;
	@%p422 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5323, %r1337, %r417;
	mul.wide.s32 	%rd493, %r5323, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f482;

$L__BB0_711:
	add.s32 	%r5325, %r1336, %r1316;
	mul.lo.s32 	%r1338, %r5325, %r54;
	add.s32 	%r5326, %r1300, %r1338;
	mul.lo.s32 	%r5327, %r5326, %r55;
	sub.s32 	%r1339, %r5327, %r1746;
	@%p15 bra 	$L__BB0_716;

	not.pred 	%p424, %p11;
	@%p424 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5329, %r1339, %r402;
	mul.wide.s32 	%rd495, %r5329, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f483;

$L__BB0_714:
	not.pred 	%p425, %p13;
	@%p425 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5331, %r1339, %r403;
	mul.wide.s32 	%rd497, %r5331, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f484;

$L__BB0_716:
	@%p15 bra 	$L__BB0_721;

	not.pred 	%p427, %p12;
	@%p427 bra 	$L__BB0_719;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5333, %r1339, %r416;
	mul.wide.s32 	%rd499, %r5333, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f485;

$L__BB0_719:
	not.pred 	%p428, %p14;
	@%p428 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5335, %r1339, %r417;
	mul.wide.s32 	%rd501, %r5335, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f486;

$L__BB0_721:
	add.s32 	%r7315, %r1300, 1;
	add.s32 	%r5336, %r7315, %r1338;
	mul.lo.s32 	%r5337, %r5336, %r55;
	sub.s32 	%r1340, %r5337, %r1746;
	@%p15 bra 	$L__BB0_726;

	not.pred 	%p430, %p11;
	@%p430 bra 	$L__BB0_724;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5339, %r1340, %r402;
	mul.wide.s32 	%rd503, %r5339, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f487;

$L__BB0_724:
	not.pred 	%p431, %p13;
	@%p431 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5341, %r1340, %r403;
	mul.wide.s32 	%rd505, %r5341, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f488;

$L__BB0_726:
	@%p15 bra 	$L__BB0_731;

	not.pred 	%p433, %p12;
	@%p433 bra 	$L__BB0_729;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5343, %r1340, %r416;
	mul.wide.s32 	%rd507, %r5343, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f489;

$L__BB0_729:
	not.pred 	%p434, %p14;
	@%p434 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5345, %r1340, %r417;
	mul.wide.s32 	%rd509, %r5345, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f490;

$L__BB0_731:
	setp.eq.s32 	%p435, %r35, %r2157;
	@%p435 bra 	$L__BB0_733;

	mad.lo.s32 	%r5346, %r1729, %r35, %r36;
	mov.u32 	%r5347, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5348, %r5346, 1280, %r5347;
	add.s32 	%r5349, %r5348, -256;
	shl.b32 	%r5350, %r40, 4;
	add.s32 	%r5351, %r5349, %r5350;
	st.shared.v4.u32 	[%r5351+256], {%r3872, %r3949, %r1227, %r1233};
	st.shared.v4.u32 	[%r5351+1024], {%r3639, %r3716, %r1173, %r1185};
	shl.b32 	%r5352, %r40, 3;
	add.s32 	%r5353, %r5349, %r5352;
	st.shared.v2.u32 	[%r5353+768], {%r3915, %r3981};

$L__BB0_733:
	setp.eq.s32 	%p436, %r36, %r2162;
	@%p436 bra 	$L__BB0_737;

	mad.lo.s32 	%r5357, %r1728, 384, -64;
	mul.lo.s32 	%r5358, %r5357, %r36;
	mad.lo.s32 	%r5360, %r2158, %r2157, %r5358;
	mad.lo.s32 	%r5361, %r2564, 384, %r5360;
	shl.b32 	%r5362, %r5361, 2;
	mov.u32 	%r5363, _ZN6kernel5shmemE;
	add.s32 	%r5364, %r5363, %r5362;
	add.s32 	%r5365, %r5364, -256;
	shl.b32 	%r5366, %r40, 4;
	add.s32 	%r5367, %r5365, %r5366;
	st.shared.v4.u32 	[%r5367+256], {%r3793, %r3827, %r1197, %r1209};
	st.shared.v4.u32 	[%r5367+1024], {%r4394, %r4428, %r1282, %r1283};
	shl.b32 	%r5368, %r40, 3;
	add.s32 	%r1344, %r5365, %r5368;
	@%p435 bra 	$L__BB0_736;

	st.shared.v2.u32 	[%r1344], {%r3682, %r3748};

$L__BB0_736:
	st.shared.v2.u32 	[%r1344+768], {%r4253, %r4334};

$L__BB0_737:
	setp.ne.s32 	%p438, %r35, %r2157;
	ld.param.u64 	%rd511, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd511;
	@%p438 bra 	$L__BB0_739;

	mad.lo.s32 	%r5370, %r657, %r1731, %r38;
	mul.lo.s32 	%r5371, %r1729, %r5370;
	mul.lo.s32 	%r5372, %r5371, 768;
	mad.lo.s32 	%r5373, %r36, 384, %r5372;
	add.s32 	%r5374, %r5373, -64;
	mul.wide.s32 	%rd512, %r5374, 4;
	add.s64 	%rd513, %rd36, %rd512;
	add.s64 	%rd515, %rd513, %rd277;
	st.global.v4.u32 	[%rd515+256], {%r3872, %r3949, %r1227, %r1233};
	st.global.v4.u32 	[%rd515+1024], {%r3639, %r3716, %r1173, %r1185};
	add.s64 	%rd517, %rd513, %rd279;
	st.global.v2.u32 	[%rd517+768], {%r3915, %r3981};
	st.global.v2.u32 	[%rd517+1536], {%r3682, %r3748};

$L__BB0_739:
	setp.ne.s32 	%p439, %r36, %r2162;
	@%p439 bra 	$L__BB0_744;

	ld.param.u64 	%rd562, [%rd1+80];
	cvta.to.global.u64 	%rd561, %rd562;
	mad.lo.s32 	%r5377, %r658, %r1730, %r37;
	mul.lo.s32 	%r5381, %r5377, %r1791;
	mad.lo.s32 	%r5384, %r2564, 384, %r5381;
	add.s32 	%r5385, %r5384, -64;
	mad.lo.s32 	%r5388, %r1793, %r68, %r5385;
	mul.wide.s32 	%rd518, %r5388, 4;
	add.s64 	%rd519, %rd561, %rd518;
	add.s64 	%rd521, %rd519, %rd277;
	st.global.v4.u32 	[%rd521+256], {%r3793, %r3827, %r1197, %r1209};
	st.global.v4.u32 	[%rd521+1024], {%r4394, %r4428, %r1282, %r1283};
	add.s64 	%rd37, %rd519, %rd279;
	@%p435 bra 	$L__BB0_742;

	st.global.v2.u32 	[%rd37], {%r3682, %r3748};

$L__BB0_742:
	st.global.v2.u32 	[%rd37+768], {%r4253, %r4334};
	@%p228 bra 	$L__BB0_744;

	st.global.v2.u32 	[%rd37+1536], {%r7748, %r7747};

$L__BB0_744:
	setp.ge.s32 	%p442, %r35, %r2157;
	@%p442 bra 	$L__BB0_746;

	mul.lo.s32 	%r5389, %r1729, 320;
	mul.lo.s32 	%r5390, %r36, 320;
	mad.lo.s32 	%r5391, %r5389, %r35, %r5390;
	add.s32 	%r5395, %r1790, -64;
	mad.lo.s32 	%r5399, %r5395, %r2162, %r2159;
	add.s32 	%r5400, %r5391, %r5399;
	shl.b32 	%r5401, %r5400, 2;
	mov.u32 	%r5402, _ZN6kernel5shmemE;
	add.s32 	%r5403, %r5402, %r5401;
	shl.b32 	%r5404, %r40, 4;
	add.s32 	%r5405, %r5403, %r5404;
	st.shared.v4.u32 	[%r5405], {%r7796, %r7795, %r7791, %r7789};
	shl.b32 	%r5406, %r40, 3;
	add.s32 	%r5407, %r5403, %r5406;
	st.shared.v2.u32 	[%r5407+512], {%r7533, %r7528};
	st.shared.v4.u32 	[%r5405+768], {%r7557, %r7548, %r7520, %r7516};

$L__BB0_746:
	setp.ge.s32 	%p443, %r36, %r2162;
	@%p443 bra 	$L__BB0_750;

	mad.lo.s32 	%r5413, %r2564, 384, %r2165;
	mad.lo.s32 	%r5416, %r2160, %r36, %r5413;
	add.s32 	%r5422, %r5416, %r2163;
	shl.b32 	%r5423, %r5422, 2;
	mov.u32 	%r5424, _ZN6kernel5shmemE;
	add.s32 	%r5425, %r5424, %r5423;
	shl.b32 	%r5426, %r40, 3;
	add.s32 	%r5427, %r5425, %r5426;
	@%p442 bra 	$L__BB0_749;

	add.s32 	%r7298, %r5427, -256;
	st.shared.v2.u32 	[%r7298], {%r7552, %r7545};

$L__BB0_749:
	shl.b32 	%r5446, %r40, 4;
	add.s32 	%r5447, %r5425, %r5446;
	st.shared.v4.u32 	[%r5447], {%r7543, %r7539, %r7508, %r7504};
	add.s32 	%r7299, %r5427, -256;
	st.shared.v2.u32 	[%r7299+768], {%r7511, %r7505};
	st.shared.v4.u32 	[%r5447+768], {%r7794, %r7793, %r7782, %r7781};

$L__BB0_750:
	bar.sync 	0;
	@%p223 bra 	$L__BB0_752;

	mul.lo.s32 	%r5448, %r1729, 320;
	add.s32 	%r5449, %r35, -1;
	mul.lo.s32 	%r5450, %r36, 320;
	mad.lo.s32 	%r5451, %r5448, %r5449, %r5450;
	shl.b32 	%r5452, %r5451, 2;
	mov.u32 	%r5453, _ZN6kernel5shmemE;
	add.s32 	%r5454, %r5453, %r5452;
	add.s32 	%r5455, %r5454, -256;
	shl.b32 	%r5456, %r40, 4;
	add.s32 	%r5457, %r5455, %r5456;
	ld.shared.v4.u32 	{%r7744, %r7742, %r7736, %r7735}, [%r5457+256];
	ld.shared.v4.u32 	{%r7746, %r7745, %r7740, %r7739}, [%r5457+1024];
	shl.b32 	%r5466, %r40, 3;
	add.s32 	%r5467, %r5455, %r5466;
	ld.shared.v2.u32 	{%r7743, %r7741}, [%r5467+768];

$L__BB0_752:
	@%p226 bra 	$L__BB0_755;

	mad.lo.s32 	%r5472, %r1728, 384, -64;
	add.s32 	%r5473, %r36, -1;
	mul.lo.s32 	%r5474, %r5472, %r5473;
	mad.lo.s32 	%r5477, %r2158, %r2157, %r5474;
	mad.lo.s32 	%r5478, %r2564, 384, %r5477;
	shl.b32 	%r5479, %r5478, 2;
	mov.u32 	%r5480, _ZN6kernel5shmemE;
	add.s32 	%r5481, %r5480, %r5479;
	add.s32 	%r5482, %r5481, -256;
	shl.b32 	%r5483, %r40, 4;
	add.s32 	%r5484, %r5482, %r5483;
	ld.shared.v4.u32 	{%r7760, %r7759, %r7757, %r7755}, [%r5484+256];
	ld.shared.v4.u32 	{%r7754, %r7753, %r7751, %r7749}, [%r5484+1024];
	shl.b32 	%r5493, %r40, 3;
	add.s32 	%r5494, %r5482, %r5493;
	ld.shared.v2.u32 	{%r7758, %r7756}, [%r5494+768];
	@%p223 bra 	$L__BB0_755;

	add.s32 	%r7300, %r5494, 768;
	ld.shared.v2.u32 	{%r7738, %r7737}, [%r7300+768];

$L__BB0_755:
	ld.param.u64 	%rd523, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd523;
	mov.u32 	%r7875, %r7717;
	mov.u32 	%r7876, %r7718;
	mov.u32 	%r7861, %r7705;
	mov.u32 	%r7862, %r7706;
	mov.u32 	%r7863, %r7707;
	mov.u32 	%r7864, %r7708;
	mov.u32 	%r7877, %r7719;
	mov.u32 	%r7879, %r7721;
	mov.u32 	%r7867, %r7709;
	mov.u32 	%r7868, %r7710;
	mov.u32 	%r7869, %r7711;
	mov.u32 	%r7870, %r7712;
	@%p228 bra 	$L__BB0_759;

	mad.lo.s32 	%r5500, %r657, %r1731, %r38;
	mad.lo.s32 	%r5501, %r5500, 768, 384;
	mul.lo.s32 	%r5502, %r5501, %r1729;
	mad.lo.s32 	%r5503, %r36, 384, %r5502;
	add.s32 	%r5504, %r5503, -128;
	mul.wide.s32 	%rd524, %r5504, 4;
	add.s64 	%rd525, %rd38, %rd524;
	add.s64 	%rd527, %rd525, %rd277;
	add.s64 	%rd39, %rd527, 512;
	mov.u32 	%r7875, %r7717;
	mov.u32 	%r7876, %r7718;
	mov.u32 	%r7877, %r7719;
	mov.u32 	%r7879, %r7721;
	@%p226 bra 	$L__BB0_758;

	ld.global.v4.u32 	{%r7876, %r7875, %r7879, %r7877}, [%rd39+-512];

$L__BB0_758:
	ld.global.v4.u32 	{%r7863, %r7861, %r7864, %r7862}, [%rd39];
	ld.global.v4.u32 	{%r7870, %r7869, %r7868, %r7867}, [%rd39+512];
	ld.global.v4.u32 	{%r7714, %r7713, %r7716, %r7715}, [%rd39+1024];

$L__BB0_759:
	mov.u32 	%r7878, %r7720;
	mov.u32 	%r7880, %r7722;
	mov.u32 	%r7881, %r7723;
	mov.u32 	%r7882, %r7724;
	mov.u32 	%r7883, %r7725;
	mov.u32 	%r7884, %r7726;
	mov.u32 	%r7885, %r7727;
	mov.u32 	%r7886, %r7728;
	@%p231 bra 	$L__BB0_761;

	mad.lo.s32 	%r5522, %r658, %r1730, %r37;
	mad.lo.s32 	%r5528, %r2564, 384, %r69;
	mad.lo.s32 	%r5529, %r5522, %r1791, %r5528;
	mad.lo.s32 	%r5532, %r1793, %r68, %r5529;
	mul.wide.s32 	%rd528, %r5532, 4;
	add.s64 	%rd529, %rd38, %rd528;
	add.s64 	%rd531, %rd529, %rd277;
	ld.global.v4.u32 	{%r7730, %r7729, %r7732, %r7731}, [%rd531];
	ld.global.v4.u32 	{%r7886, %r7884, %r7882, %r7881}, [%rd531+512];
	ld.global.v4.u32 	{%r7885, %r7883, %r7880, %r7878}, [%rd531+1024];
	ld.global.v4.u32 	{%r7876, %r7875, %r7879, %r7877}, [%rd531+1536];

$L__BB0_761:
	neg.s32 	%r7306, %r1733;
	not.b32 	%r7305, %r38;
	add.s32 	%r7304, %r1731, %r7305;
	mul.lo.s32 	%r7303, %r7304, %r1732;
	not.b32 	%r7302, %r37;
	add.s32 	%r7301, %r1730, %r7302;
	mad.lo.s32 	%r5556, %r7301, %r1732, %r7303;
	add.s32 	%r5557, %r5556, %r1733;
	add.s32 	%r5566, %r5557, %r2570;
	add.s32 	%r1464, %r7584, 1;
	add.s32 	%r5567, %r1464, %r5566;
	div.s32 	%r5568, %r5567, %r1733;
	mad.lo.s32 	%r1465, %r5568, %r7306, %r5567;
	mad.lo.s32 	%r5575, %r5568, %r42, %r2581;
	ld.param.u64 	%rd532, [%rd1+96];
	cvta.to.global.u64 	%rd533, %rd532;
	rem.s32 	%r5576, %r5575, %r1734;
	shr.u32 	%r5577, %r5576, 31;
	add.s32 	%r5578, %r5576, %r5577;
	shr.s32 	%r5579, %r5578, 1;
	mad.lo.s32 	%r5580, %r5579, %r1733, %r1465;
	shl.b32 	%r5581, %r5580, 5;
	add.s32 	%r5582, %r5581, %r40;
	cvt.s64.s32 	%rd40, %r5582;
	mul.wide.s32 	%rd534, %r5582, 4;
	add.s64 	%rd535, %rd533, %rd534;
	ld.global.u32 	%r7586, [%rd535];
	ld.param.u64 	%rd536, [%rd1+104];
	cvta.to.global.u64 	%rd41, %rd536;
	@%p86 bra 	$L__BB0_763;
	bra.uni 	$L__BB0_762;

$L__BB0_763:
	shl.b64 	%rd539, %rd40, 2;
	add.s64 	%rd540, %rd41, %rd539;
	ld.global.u32 	%r7585, [%rd540];
	bra.uni 	$L__BB0_764;

$L__BB0_762:
	shl.b32 	%r5583, %r1465, 5;
	add.s32 	%r5584, %r5583, %r40;
	mul.wide.s32 	%rd537, %r5584, 16;
	add.s64 	%rd538, %rd41, %rd537;
	ld.global.v4.u32 	{%r5585, %r5586, %r5587, %r5588}, [%rd538];
	mov.u32 	%r7416, %r7420;
	mov.u32 	%r7417, %r7421;
	mov.u32 	%r7418, %r7422;
	mov.u32 	%r7419, %r7423;
	mov.u32 	%r7420, %r7424;
	mov.u32 	%r7421, %r7425;
	mov.u32 	%r7422, %r7426;
	mov.u32 	%r7423, %r7427;
	mov.u32 	%r7424, %r5588;
	mov.u32 	%r7425, %r5587;
	mov.u32 	%r7426, %r5586;
	mov.u32 	%r7427, %r5585;

$L__BB0_764:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5589, {low,high};}

	// end inline asm
	selp.b32 	%r5591, %r7411, %r5589, %p15;
	// begin inline asm
	{mul.f16x2 %r5590,%r5591,%r7554;
}
	// end inline asm
	selp.b32 	%r5594, %r7415, %r5589, %p15;
	// begin inline asm
	{mul.f16x2 %r5593,%r5594,%r7547;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5596, {low,high};}

	// end inline asm
	selp.b32 	%r5598, %r7411, %r5596, %p15;
	// begin inline asm
	{mul.f16x2 %r5597,%r5598,%r7535;
}
	// end inline asm
	selp.b32 	%r5601, %r7415, %r5596, %p15;
	// begin inline asm
	{mul.f16x2 %r5600,%r5601,%r7530;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5603, {low,high};}

	// end inline asm
	selp.b32 	%r5605, %r7411, %r5603, %p15;
	// begin inline asm
	{mul.f16x2 %r5604,%r5605,%r7522;
}
	// end inline asm
	selp.b32 	%r5608, %r7415, %r5603, %p15;
	// begin inline asm
	{mul.f16x2 %r5607,%r5608,%r7521;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5610, {low,high};}

	// end inline asm
	selp.b32 	%r5612, %r7411, %r5610, %p15;
	// begin inline asm
	{mul.f16x2 %r5611,%r5612,%r7526;
}
	// end inline asm
	selp.b32 	%r5615, %r7415, %r5610, %p15;
	// begin inline asm
	{mul.f16x2 %r5614,%r5615,%r7525;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5617, {low,high};}

	// end inline asm
	selp.b32 	%r5619, %r7411, %r5617, %p15;
	// begin inline asm
	{mul.f16x2 %r5618,%r5619,%r7524;
}
	// end inline asm
	selp.b32 	%r5622, %r7415, %r5617, %p15;
	// begin inline asm
	{mul.f16x2 %r5621,%r5622,%r7518;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5624, {low,high};}

	// end inline asm
	selp.b32 	%r5626, %r7411, %r5624, %p15;
	// begin inline asm
	{mul.f16x2 %r5625,%r5626,%r7514;
}
	// end inline asm
	selp.b32 	%r5629, %r7415, %r5624, %p15;
	// begin inline asm
	{mul.f16x2 %r5628,%r5629,%r7513;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5631, {low,high};}

	// end inline asm
	selp.b32 	%r5633, %r7411, %r5631, %p15;
	// begin inline asm
	{mul.f16x2 %r5632,%r5633,%r7512;
}
	// end inline asm
	selp.b32 	%r5636, %r7415, %r5631, %p15;
	// begin inline asm
	{mul.f16x2 %r5635,%r5636,%r7506;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5638, {low,high};}

	// end inline asm
	selp.b32 	%r5640, %r7411, %r5638, %p15;
	// begin inline asm
	{mul.f16x2 %r5639,%r5640,%r7499;
}
	// end inline asm
	selp.b32 	%r5643, %r7415, %r5638, %p15;
	// begin inline asm
	{mul.f16x2 %r5642,%r5643,%r7498;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5645, {low,high};}

	// end inline asm
	selp.b32 	%r5647, %r7411, %r5645, %p15;
	// begin inline asm
	{mul.f16x2 %r5646,%r5647,%r7728;
}
	// end inline asm
	selp.b32 	%r5650, %r7415, %r5645, %p15;
	// begin inline asm
	{mul.f16x2 %r5649,%r5650,%r7726;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5652, {low,high};}

	// end inline asm
	selp.b32 	%r5654, %r7411, %r5652, %p15;
	// begin inline asm
	{mul.f16x2 %r5653,%r5654,%r7727;
}
	// end inline asm
	selp.b32 	%r5657, %r7415, %r5652, %p15;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7725;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5659, {low,high};}

	// end inline asm
	selp.b32 	%r5661, %r7411, %r5659, %p15;
	// begin inline asm
	{mul.f16x2 %r5660,%r5661,%r7491;
}
	// end inline asm
	selp.b32 	%r5664, %r7415, %r5659, %p15;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7490;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5666, {low,high};}

	// end inline asm
	selp.b32 	%r5668, %r7411, %r5666, %p15;
	// begin inline asm
	{mul.f16x2 %r5667,%r5668,%r7495;
}
	// end inline asm
	selp.b32 	%r5671, %r7415, %r5666, %p15;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7494;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5673, {low,high};}

	// end inline asm
	selp.b32 	%r5675, %r7411, %r5673, %p15;
	// begin inline asm
	{mul.f16x2 %r5674,%r5675,%r7493;
}
	// end inline asm
	selp.b32 	%r5678, %r7415, %r5673, %p15;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7488;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5680, {low,high};}

	// end inline asm
	selp.b32 	%r5682, %r7411, %r5680, %p15;
	// begin inline asm
	{mul.f16x2 %r5681,%r5682,%r7483;
}
	// end inline asm
	selp.b32 	%r5685, %r7415, %r5680, %p15;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7482;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5687, {low,high};}

	// end inline asm
	selp.b32 	%r5689, %r7411, %r5687, %p15;
	// begin inline asm
	{mul.f16x2 %r5688,%r5689,%r7485;
}
	// end inline asm
	selp.b32 	%r5692, %r7415, %r5687, %p15;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7484;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5694, {low,high};}

	// end inline asm
	selp.b32 	%r5696, %r7411, %r5694, %p15;
	// begin inline asm
	{mul.f16x2 %r5695,%r5696,%r7712;
}
	// end inline asm
	selp.b32 	%r5699, %r7415, %r5694, %p15;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7711;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5701, {low,high};}

	// end inline asm
	selp.b32 	%r5703, %r7411, %r5701, %p15;
	// begin inline asm
	{mul.f16x2 %r5702,%r5703,%r7710;
}
	// end inline asm
	selp.b32 	%r5706, %r7415, %r5701, %p15;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7709;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5708, {low,high};}

	// end inline asm
	selp.b32 	%r5710, %r7411, %r5708, %p15;
	// begin inline asm
	{mul.f16x2 %r5709,%r5710,%r7724;
}
	// end inline asm
	selp.b32 	%r5713, %r7415, %r5708, %p15;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7723;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5715, {low,high};}

	// end inline asm
	selp.b32 	%r5717, %r7411, %r5715, %p15;
	// begin inline asm
	{mul.f16x2 %r5716,%r5717,%r7477;
}
	// end inline asm
	selp.b32 	%r5720, %r7415, %r5715, %p15;
	// begin inline asm
	{mul.f16x2 %r5719,%r5720,%r7476;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5722, {low,high};}

	// end inline asm
	selp.b32 	%r5724, %r7411, %r5722, %p15;
	// begin inline asm
	{mul.f16x2 %r5723,%r5724,%r7722;
}
	// end inline asm
	selp.b32 	%r5727, %r7415, %r5722, %p15;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7720;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5729, {low,high};}

	// end inline asm
	selp.b32 	%r5731, %r7411, %r5729, %p15;
	// begin inline asm
	{mul.f16x2 %r5730,%r5731,%r7721;
}
	// end inline asm
	selp.b32 	%r5734, %r7415, %r5729, %p15;
	// begin inline asm
	{mul.f16x2 %r5733,%r5734,%r7719;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5736, {low,high};}

	// end inline asm
	selp.b32 	%r5738, %r7411, %r5736, %p15;
	// begin inline asm
	{mul.f16x2 %r5737,%r5738,%r7708;
}
	// end inline asm
	selp.b32 	%r5741, %r7415, %r5736, %p15;
	// begin inline asm
	{mul.f16x2 %r5740,%r5741,%r7706;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5743, {low,high};}

	// end inline asm
	selp.b32 	%r5745, %r7411, %r5743, %p15;
	// begin inline asm
	{mul.f16x2 %r5744,%r5745,%r7707;
}
	// end inline asm
	selp.b32 	%r5748, %r7415, %r5743, %p15;
	// begin inline asm
	{mul.f16x2 %r5747,%r5748,%r7705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5750, {low,high};}

	// end inline asm
	selp.b32 	%r5752, %r7411, %r5750, %p15;
	// begin inline asm
	{mul.f16x2 %r5751,%r5752,%r7718;
}
	// end inline asm
	selp.b32 	%r5755, %r7415, %r5750, %p15;
	// begin inline asm
	{mul.f16x2 %r5754,%r5755,%r7717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5757,%r7581,%r3682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5760,%r3793,%r3639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5763,%r5757,%r5760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5766,%r7319,%r5763;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5769,%r5590,%r5766;
}
	// end inline asm
	selp.b32 	%r7549, %r5590, %r5769, %p15;
	// begin inline asm
	{sub.f16x2 %r5772,%r7580,%r3748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5775,%r3827,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5778,%r5772,%r5775;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5781,%r7319,%r5778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5784,%r5593,%r5781;
}
	// end inline asm
	selp.b32 	%r7544, %r5593, %r5784, %p15;
	// begin inline asm
	{sub.f16x2 %r5787,%r7577,%r3915;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5790,%r7583,%r3872;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r5787,%r5790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r7319,%r5793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5799,%r5597,%r5796;
}
	// end inline asm
	selp.b32 	%r7553, %r5597, %r5799, %p15;
	// begin inline asm
	{sub.f16x2 %r5802,%r7576,%r3981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5805,%r7582,%r3949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5808,%r5802,%r5805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5811,%r7319,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5814,%r5600,%r5811;
}
	// end inline asm
	selp.b32 	%r7546, %r5600, %r5814, %p15;
	// begin inline asm
	{sub.f16x2 %r5817,%r7580,%r7581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5820,%r7410,%r5817;
}
	// end inline asm
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r7904,%r5604;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r7904,%r7411,%r5817;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5831, 31;
	mov.u32 	%r5833, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5829,%r7904,%r5831,%r2267,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5834,%r5820,%r5829;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5837,%r1197,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5840,%r5837,%r5834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5843,%r7319,%r5840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r5604,%r5843;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5849,%r7582,%r7583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5852,%r7410,%r5849;
}
	// end inline asm
	mov.u32 	%r7905, %r5611;
	@%p15 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r7905,%r7411,%r5849;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5861,%r7905,%r5831,%r2267,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5866,%r5852,%r5861;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5869,%r7571,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5872,%r5866,%r5869;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5875,%r7319,%r5872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r5611,%r5875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r7573,%r7581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r7579,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5887,%r5881,%r5884;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5890,%r7319,%r5887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5893,%r5618,%r5890;
}
	// end inline asm
	selp.b32 	%r7554, %r5618, %r5893, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7581;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5898,%r7581,%r437,%r2267,%r5833;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5898;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5904, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5905,%r5904,%r7580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5908,%r7414,%r5905;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r7906,%r5607;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r7906,%r7415,%r5905;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5923, 31;
	mov.u32 	%r5947, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5921,%r7906,%r5923,%r2267,%r5947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5926,%r5908,%r5921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5929,%r1209,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5932,%r5929,%r5926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5935,%r7319,%r5932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r5607,%r5935;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7583;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5943,%r7583,%r437,%r2267,%r5947;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5943;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5949, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5949,%r7582;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r7414,%r5950;
}
	// end inline asm
	mov.u32 	%r7907, %r5614;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r7907,%r7415,%r5950;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5964,%r7907,%r5923,%r2267,%r5947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5969,%r5953,%r5964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5972,%r7570,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5975,%r5969,%r5972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5978,%r7319,%r5975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r5614,%r5978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5984,%r7572,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5987,%r7578,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r5984,%r5987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5993,%r7319,%r5990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5996,%r5621,%r5993;
}
	// end inline asm
	selp.b32 	%r7547, %r5621, %r5996, %p15;
	// begin inline asm
	{sub.f16x2 %r5999,%r7578,%r7579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6002,%r7410,%r5999;
}
	// end inline asm
	mov.u32 	%r7908, %r5625;
	@%p15 bra 	$L__BB0_776;

	// begin inline asm
	{mul.f16x2 %r7908,%r7411,%r5999;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r6013, 31;
	mov.u32 	%r6052, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6011,%r7908,%r6013,%r2267,%r6052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6016,%r6002,%r6011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6019,%r7565,%r1197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6022,%r6016,%r6019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6025,%r7319,%r6022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r5625,%r6025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r7567,%r4253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6034,%r4394,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6037,%r6031,%r6034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6040,%r7319,%r6037;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6043,%r5632,%r6040;
}
	// end inline asm
	selp.b32 	%r7540, %r5632, %r6043, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7579;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6048,%r7579,%r437,%r2267,%r6052;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6048;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6054, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r6054,%r7578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6058,%r7414,%r6055;
}
	// end inline asm
	mov.u32 	%r7909, %r5628;
	@%p15 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7909,%r7415,%r6055;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6069,%r7909,%r6013,%r2267,%r6052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6074,%r6058,%r6069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6077,%r7564,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6080,%r6074,%r6077;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6083,%r7319,%r6080;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r5628,%r6083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6089,%r7566,%r4334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r4428,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6095,%r6089,%r6092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6098,%r7319,%r6095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6101,%r5635,%r6098;
}
	// end inline asm
	selp.b32 	%r7538, %r5635, %r6101, %p15;
	// begin inline asm
	{sub.f16x2 %r6104,%r7576,%r7577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6107,%r7410,%r6104;
}
	// end inline asm
	@%p15 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7910,%r5639;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7910,%r7411,%r6104;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r6120, 31;
	mov.u32 	%r6122, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6118,%r7910,%r6120,%r2267,%r6122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6123,%r6107,%r6118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6126,%r7571,%r1227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6129,%r6126,%r6123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6132,%r7319,%r6129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r5639,%r6132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r7759,%r7760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r7410,%r6138;
}
	// end inline asm
	mov.u32 	%r7911, %r5646;
	@%p15 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7911,%r7411,%r6138;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6150,%r7911,%r6120,%r2267,%r6122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6155,%r6141,%r6150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r7757,%r1227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r6155,%r6158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r7319,%r6161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r5646,%r6164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6170,%r7758,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6173,%r7575,%r7760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6176,%r6170,%r6173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6179,%r7319,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6182,%r5653,%r6179;
}
	// end inline asm
	selp.b32 	%r7535, %r5653, %r6182, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7577;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6187,%r7577,%r437,%r2267,%r6122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6187;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6193, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6194,%r6193,%r7576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6197,%r7414,%r6194;
}
	// end inline asm
	@%p15 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7912,%r5642;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7912,%r7415,%r6194;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6212, 31;
	mov.u32 	%r6236, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6210,%r7912,%r6212,%r2267,%r6236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6215,%r6197,%r6210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6218,%r7570,%r1233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6221,%r6218,%r6215;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6224,%r7319,%r6221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r5642,%r6224;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7760;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6232,%r7760,%r437,%r2267,%r6236;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6232;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6238, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r6238,%r7759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6242,%r7414,%r6239;
}
	// end inline asm
	mov.u32 	%r7913, %r5649;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7913,%r7415,%r6239;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6253,%r7913,%r6212,%r2267,%r6236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6258,%r6242,%r6253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6261,%r7755,%r1233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6264,%r6258,%r6261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6267,%r7319,%r6264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r5649,%r6267;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6273,%r7756,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6276,%r7574,%r7759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6273,%r6276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r7319,%r6279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6285,%r5656,%r6282;
}
	// end inline asm
	selp.b32 	%r7530, %r5656, %r6285, %p15;
	// begin inline asm
	{sub.f16x2 %r6288,%r7572,%r7573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6291,%r7410,%r6288;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7914,%r5660;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7914,%r7411,%r6288;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6304, 31;
	mov.u32 	%r6306, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6302,%r7914,%r6304,%r2267,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6307,%r6291,%r6302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6310,%r7565,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6313,%r6310,%r6307;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6316,%r7319,%r6313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r5660,%r6316;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r7574,%r7575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6325,%r7410,%r6322;
}
	// end inline asm
	mov.u32 	%r7915, %r5667;
	@%p15 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7915,%r7411,%r6322;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6334,%r7915,%r6304,%r2267,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6339,%r6325,%r6334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r7561,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6345,%r6339,%r6342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6348,%r7319,%r6345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r5667,%r6348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6354,%r7563,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6357,%r7569,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6360,%r6354,%r6357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6363,%r7319,%r6360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6366,%r5674,%r6363;
}
	// end inline asm
	selp.b32 	%r7524, %r5674, %r6366, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7573;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6371,%r7573,%r437,%r2267,%r6306;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6371;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6377, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6378,%r6377,%r7572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6381,%r7414,%r6378;
}
	// end inline asm
	@%p15 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7916,%r5663;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7916,%r7415,%r6378;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6396, 31;
	mov.u32 	%r6420, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6394,%r7916,%r6396,%r2267,%r6420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6399,%r6381,%r6394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6402,%r7564,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r6402,%r6399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6408,%r7319,%r6405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r5663,%r6408;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7575;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6416,%r7575,%r437,%r2267,%r6420;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6416;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6422, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r6422,%r7574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6426,%r7414,%r6423;
}
	// end inline asm
	mov.u32 	%r7917, %r5670;
	@%p15 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7917,%r7415,%r6423;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6437,%r7917,%r6396,%r2267,%r6420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6442,%r6426,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6445,%r7560,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6448,%r6442,%r6445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6451,%r7319,%r6448;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r5670,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6457,%r7562,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6460,%r7568,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6463,%r6457,%r6460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6466,%r7319,%r6463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6469,%r5677,%r6466;
}
	// end inline asm
	selp.b32 	%r7518, %r5677, %r6469, %p15;
	// begin inline asm
	{sub.f16x2 %r6472,%r7566,%r7567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6475,%r7410,%r6472;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;
	bra.uni 	$L__BB0_799;

$L__BB0_800:
	// begin inline asm
	{neg.f16x2 %r7918,%r5681;
}
	// end inline asm
	bra.uni 	$L__BB0_801;

$L__BB0_799:
	// begin inline asm
	{mul.f16x2 %r7918,%r7411,%r6472;
}
	// end inline asm

$L__BB0_801:
	mov.u32 	%r6488, 31;
	mov.u32 	%r6490, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6486,%r7918,%r6488,%r2267,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6491,%r6475,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6494,%r1282,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6497,%r6494,%r6491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6500,%r7319,%r6497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7510,%r5681,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r7568,%r7569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6509,%r7410,%r6506;
}
	// end inline asm
	mov.u32 	%r7919, %r5688;
	@%p15 bra 	$L__BB0_803;

	// begin inline asm
	{mul.f16x2 %r7919,%r7411,%r6506;
}
	// end inline asm

$L__BB0_803:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6518,%r7919,%r6488,%r2267,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6523,%r6509,%r6518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r7559,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6529,%r6523,%r6526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6532,%r7319,%r6529;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7514,%r5688,%r6532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6538,%r7743,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6541,%r7746,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6544,%r6538,%r6541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6547,%r7319,%r6544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r5695,%r6547;
}
	// end inline asm
	selp.b32 	%r7512, %r5695, %r6550, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7567;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6555,%r7567,%r437,%r2267,%r6490;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6555;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6561, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6562,%r6561,%r7566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6565,%r7414,%r6562;
}
	// end inline asm
	@%p15 bra 	$L__BB0_805;
	bra.uni 	$L__BB0_804;

$L__BB0_805:
	// begin inline asm
	{neg.f16x2 %r7920,%r5684;
}
	// end inline asm
	bra.uni 	$L__BB0_806;

$L__BB0_804:
	// begin inline asm
	{mul.f16x2 %r7920,%r7415,%r6562;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6580, 31;
	mov.u32 	%r6604, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6578,%r7920,%r6580,%r2267,%r6604;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6583,%r6565,%r6578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6586,%r1283,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6589,%r6586,%r6583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6592,%r7319,%r6589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r5684,%r6592;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7569;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6600,%r7569,%r437,%r2267,%r6604;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6600;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6606, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r6606,%r7568;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6610,%r7414,%r6607;
}
	// end inline asm
	mov.u32 	%r7921, %r5691;
	@%p15 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7921,%r7415,%r6607;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6621,%r7921,%r6580,%r2267,%r6604;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6626,%r6610,%r6621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6629,%r7558,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6632,%r6626,%r6629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6635,%r7319,%r6632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r5691,%r6635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6641,%r7741,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6644,%r7745,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6647,%r6641,%r6644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6650,%r7319,%r6647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6653,%r5698,%r6650;
}
	// end inline asm
	selp.b32 	%r7506, %r5698, %r6653, %p15;
	// begin inline asm
	{sub.f16x2 %r6656,%r7745,%r7746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6659,%r7410,%r6656;
}
	// end inline asm
	mov.u32 	%r7922, %r5702;
	@%p15 bra 	$L__BB0_810;

	// begin inline asm
	{mul.f16x2 %r7922,%r7411,%r6656;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6670, 31;
	mov.u32 	%r6694, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6668,%r7922,%r6670,%r2267,%r6694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6673,%r6659,%r6668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6676,%r7740,%r1282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6679,%r6673,%r6676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6682,%r7319,%r6679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r5702,%r6682;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7746;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6690,%r7746,%r437,%r2267,%r6694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6690;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6696, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6697,%r6696,%r7745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6700,%r7414,%r6697;
}
	// end inline asm
	mov.u32 	%r7923, %r5705;
	@%p15 bra 	$L__BB0_812;

	// begin inline asm
	{mul.f16x2 %r7923,%r7415,%r6697;
}
	// end inline asm

$L__BB0_812:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6711,%r7923,%r6670,%r2267,%r6694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6716,%r6700,%r6711;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6719,%r7739,%r1283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6722,%r6716,%r6719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6725,%r7319,%r6722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7502,%r5705,%r6725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6731,%r7756,%r7758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6734,%r7410,%r6731;
}
	// end inline asm
	@%p15 bra 	$L__BB0_814;
	bra.uni 	$L__BB0_813;

$L__BB0_814:
	// begin inline asm
	{neg.f16x2 %r7924,%r5709;
}
	// end inline asm
	bra.uni 	$L__BB0_815;

$L__BB0_813:
	// begin inline asm
	{mul.f16x2 %r7924,%r7411,%r6731;
}
	// end inline asm

$L__BB0_815:
	mov.u32 	%r6747, 31;
	mov.u32 	%r6771, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6745,%r7924,%r6747,%r2267,%r6771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6750,%r6734,%r6745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6753,%r7561,%r7757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6756,%r6753,%r6750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6759,%r7319,%r6756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7499,%r5709,%r6759;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7758;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6767,%r7758,%r437,%r2267,%r6771;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6767;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6773, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6774,%r6773,%r7756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6777,%r7414,%r6774;
}
	// end inline asm
	@%p15 bra 	$L__BB0_817;
	bra.uni 	$L__BB0_816;

$L__BB0_817:
	// begin inline asm
	{neg.f16x2 %r7925,%r5712;
}
	// end inline asm
	bra.uni 	$L__BB0_818;

$L__BB0_816:
	// begin inline asm
	{mul.f16x2 %r7925,%r7415,%r6774;
}
	// end inline asm

$L__BB0_818:
	mov.u32 	%r6792, 31;
	mov.u32 	%r6794, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6790,%r7925,%r6792,%r2267,%r6794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6795,%r6777,%r6790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6798,%r7560,%r7755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6801,%r6798,%r6795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6804,%r7319,%r6801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7498,%r5712,%r6804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6810,%r7562,%r7563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6813,%r7410,%r6810;
}
	// end inline asm
	@%p15 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7926,%r5716;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7926,%r7411,%r6810;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6826, 31;
	mov.u32 	%r6828, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6824,%r7926,%r6826,%r2267,%r6828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6829,%r6813,%r6824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6832,%r7559,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6835,%r6832,%r6829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6838,%r7319,%r6835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r5716,%r6838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6844,%r7753,%r7754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6847,%r7410,%r6844;
}
	// end inline asm
	mov.u32 	%r7927, %r5723;
	@%p15 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7927,%r7411,%r6844;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6856,%r7927,%r6826,%r2267,%r6828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6861,%r6847,%r6856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6864,%r7751,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6867,%r6861,%r6864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6870,%r7319,%r6867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r5723,%r6870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6876,%r7738,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6879,%r7744,%r7754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6882,%r6876,%r6879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6885,%r7319,%r6882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6888,%r5730,%r6885;
}
	// end inline asm
	selp.b32 	%r7493, %r5730, %r6888, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7563;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6893,%r7563,%r437,%r2267,%r6828;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6893;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6899, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6900,%r6899,%r7562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6903,%r7414,%r6900;
}
	// end inline asm
	@%p15 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7928,%r5719;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7928,%r7415,%r6900;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6918, 31;
	mov.u32 	%r6942, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6916,%r7928,%r6918,%r2267,%r6942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6921,%r6903,%r6916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6924,%r7558,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6927,%r6924,%r6921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6930,%r7319,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7490,%r5719,%r6930;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7754;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6938,%r7754,%r437,%r2267,%r6942;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6938;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6944, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r6944,%r7753;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6948,%r7414,%r6945;
}
	// end inline asm
	mov.u32 	%r7929, %r5726;
	@%p15 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7929,%r7415,%r6945;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6959,%r7929,%r6918,%r2267,%r6942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6964,%r6948,%r6959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6967,%r7749,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6970,%r6964,%r6967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6973,%r7319,%r6970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7494,%r5726,%r6973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6979,%r7737,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6982,%r7742,%r7753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6985,%r6979,%r6982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6988,%r7319,%r6985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6991,%r5733,%r6988;
}
	// end inline asm
	selp.b32 	%r7488, %r5733, %r6991, %p15;
	// begin inline asm
	{sub.f16x2 %r6994,%r7741,%r7743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6997,%r7410,%r6994;
}
	// end inline asm
	@%p15 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7930,%r5737;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7930,%r7411,%r6994;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r7010, 31;
	mov.u32 	%r7012, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7008,%r7930,%r7010,%r2267,%r7012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7013,%r6997,%r7008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7016,%r7740,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7019,%r7016,%r7013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7022,%r7319,%r7019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r5737,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7028,%r7742,%r7744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7031,%r7410,%r7028;
}
	// end inline asm
	mov.u32 	%r7931, %r5744;
	@%p15 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7931,%r7411,%r7028;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7040,%r7931,%r7010,%r2267,%r7012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7045,%r7031,%r7040;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7048,%r7736,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7051,%r7045,%r7048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7054,%r7319,%r7051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r5744,%r7054;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7743;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7062,%r7743,%r437,%r2267,%r7012;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7062;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7068, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7069,%r7068,%r7741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7072,%r7414,%r7069;
}
	// end inline asm
	@%p15 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7932,%r5740;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7932,%r7415,%r7069;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r7087, 31;
	mov.u32 	%r7111, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7085,%r7932,%r7087,%r2267,%r7111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7090,%r7072,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7093,%r7739,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7096,%r7093,%r7090;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7099,%r7319,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7482,%r5740,%r7099;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7744;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7107,%r7744,%r437,%r2267,%r7111;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7107;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7113, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7113,%r7742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7117,%r7414,%r7114;
}
	// end inline asm
	mov.u32 	%r7933, %r5747;
	@%p15 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7933,%r7415,%r7114;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7128,%r7933,%r7087,%r2267,%r7111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7133,%r7117,%r7128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7136,%r7735,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7139,%r7133,%r7136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7142,%r7319,%r7139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7484,%r5747,%r7142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7148,%r7737,%r7738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7151,%r7410,%r7148;
}
	// end inline asm
	@%p15 bra 	$L__BB0_840;
	bra.uni 	$L__BB0_839;

$L__BB0_840:
	// begin inline asm
	{neg.f16x2 %r7934,%r5751;
}
	// end inline asm
	bra.uni 	$L__BB0_841;

$L__BB0_839:
	// begin inline asm
	{mul.f16x2 %r7934,%r7411,%r7148;
}
	// end inline asm

$L__BB0_841:
	mov.u32 	%r7164, 31;
	mov.u32 	%r7188, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7162,%r7934,%r7164,%r2267,%r7188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r7151,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7170,%r7736,%r7751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7173,%r7170,%r7167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7176,%r7319,%r7173;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7477,%r5751,%r7176;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7738;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7184,%r7738,%r437,%r2267,%r7188;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7184;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7190, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7191,%r7190,%r7737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7194,%r7414,%r7191;
}
	// end inline asm
	@%p15 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r7935,%r5754;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r7935,%r7415,%r7191;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r7209, 31;
	mov.u32 	%r7211, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7207,%r7935,%r7209,%r2267,%r7211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7212,%r7194,%r7207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7215,%r7735,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7218,%r7215,%r7212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7221,%r7319,%r7218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7476,%r5754,%r7221;
}
	// end inline asm
	bar.sync 	0;
	@%p435 bra 	$L__BB0_847;

	setp.ne.s32 	%p498, %r36, %r2162;
	shl.b32 	%r7230, %r36, 8;
	shl.b32 	%r7234, %r1729, 8;
	or.b32  	%r7235, %r7234, 128;
	mad.lo.s32 	%r7236, %r7235, %r35, %r2165;
	add.s32 	%r7237, %r7236, %r7230;
	shl.b32 	%r7238, %r7237, 2;
	mov.u32 	%r7239, _ZN6kernel5shmemE;
	add.s32 	%r7240, %r7239, %r7238;
	shl.b32 	%r7241, %r40, 4;
	add.s32 	%r1721, %r7240, %r7241;
	st.shared.v4.u32 	[%r1721], {%r7537, %r7536, %r7532, %r7531};
	st.shared.v4.u32 	[%r1721+512], {%r7553, %r7546, %r7556, %r7555};
	@%p498 bra 	$L__BB0_847;

	st.shared.v4.u32 	[%r1721+1024], {%r7551, %r7550, %r7549, %r7544};

$L__BB0_847:
	setp.eq.s32 	%p496, %r36, %r2162;
	@%p496 bra 	$L__BB0_849;

	mul.lo.s32 	%r7245, %r2564, 384;
	mad.lo.s32 	%r7246, %r69, %r36, %r7245;
	mad.lo.s32 	%r7249, %r2160, %r2162, %r7246;
	mad.lo.s32 	%r7252, %r2158, %r2157, %r7249;
	shl.b32 	%r7253, %r7252, 2;
	mov.u32 	%r7254, _ZN6kernel5shmemE;
	add.s32 	%r7255, %r7254, %r7253;
	shl.b32 	%r7256, %r40, 4;
	add.s32 	%r7257, %r7255, %r7256;
	st.shared.v4.u32 	[%r7257], {%r7551, %r7550, %r7549, %r7544};
	st.shared.v4.u32 	[%r7257+512], {%r7542, %r7541, %r7510, %r7509};
	st.shared.v4.u32 	[%r7257+1024], {%r7540, %r7538, %r7503, %r7502};

$L__BB0_849:
	setp.ne.s32 	%p497, %r35, %r2157;
	ld.param.u64 	%rd541, [%rd1+80];
	cvta.to.global.u64 	%rd42, %rd541;
	@%p497 bra 	$L__BB0_851;

	mad.lo.s32 	%r7259, %r657, %r1731, %r38;
	mad.lo.s32 	%r7260, %r7259, 768, 384;
	mul.lo.s32 	%r7261, %r7260, %r1729;
	mad.lo.s32 	%r7262, %r36, 384, %r7261;
	add.s32 	%r7263, %r7262, -128;
	mul.wide.s32 	%rd542, %r7263, 4;
	add.s64 	%rd543, %rd42, %rd542;
	add.s64 	%rd545, %rd543, %rd277;
	st.global.v4.u32 	[%rd545+512], {%r7537, %r7536, %r7532, %r7531};
	st.global.v4.u32 	[%rd545+1024], {%r7553, %r7546, %r7556, %r7555};
	st.global.v4.u32 	[%rd545+1536], {%r7551, %r7550, %r7549, %r7544};

$L__BB0_851:
	setp.ne.s32 	%p499, %r36, %r2162;
	@%p499 bra 	$L__BB0_854;

	mad.lo.s32 	%r7265, %r658, %r1730, %r37;
	mad.lo.s32 	%r7271, %r2564, 384, %r69;
	mad.lo.s32 	%r7272, %r7265, %r1791, %r7271;
	mad.lo.s32 	%r7275, %r1793, %r68, %r7272;
	mul.wide.s32 	%rd546, %r7275, 4;
	add.s64 	%rd547, %rd42, %rd546;
	add.s64 	%rd43, %rd547, %rd277;
	st.global.v4.u32 	[%rd43], {%r7551, %r7550, %r7549, %r7544};
	st.global.v4.u32 	[%rd43+512], {%r7542, %r7541, %r7510, %r7509};
	st.global.v4.u32 	[%rd43+1024], {%r7540, %r7538, %r7503, %r7502};
	@%p228 bra 	$L__BB0_854;

	st.global.v4.u32 	[%rd43+1536], {%r7714, %r7713, %r7716, %r7715};

$L__BB0_854:
	rem.s32 	%r7276, %r7584, %r1732;
	setp.eq.s32 	%p490, %r7276, 0;
	@%p490 bra 	$L__BB0_856;

	bar.sync 	0;
	bra.uni 	$L__BB0_863;

$L__BB0_856:
	@%p162 bra 	$L__BB0_858;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_858:
	bar.sync 	0;
	@%p163 bra 	$L__BB0_862;

	membar.gl;
	setp.eq.s32 	%p493, %r431, %r432;
	mov.u32 	%r7291, -2147483647;
	sub.s32 	%r7292, %r7291, %r430;
	selp.b32 	%r7280, %r7292, 1, %p493;
	// begin inline asm
	atom.add.release.gpu.u32 %r7279,[%rd27],%r7280;
	// end inline asm

$L__BB0_860:
	ld.volatile.u32 	%r7293, [%rd27];
	xor.b32  	%r7294, %r7293, %r7279;
	setp.gt.s32 	%p494, %r7294, -1;
	@%p494 bra 	$L__BB0_860;

	// begin inline asm
	ld.acquire.gpu.u32 %r7295,[%rd27];
	// end inline asm

$L__BB0_862:
	bar.sync 	0;

$L__BB0_863:
	setp.lt.s32 	%p495, %r1464, %r43;
	mov.u32 	%r7717, %r7875;
	mov.u32 	%r7718, %r7876;
	mov.u32 	%r7705, %r7861;
	mov.u32 	%r7706, %r7862;
	mov.u32 	%r7707, %r7863;
	mov.u32 	%r7708, %r7864;
	mov.u32 	%r7719, %r7877;
	mov.u32 	%r7720, %r7878;
	mov.u32 	%r7721, %r7879;
	mov.u32 	%r7722, %r7880;
	mov.u32 	%r7723, %r7881;
	mov.u32 	%r7724, %r7882;
	mov.u32 	%r7709, %r7867;
	mov.u32 	%r7710, %r7868;
	mov.u32 	%r7711, %r7869;
	mov.u32 	%r7712, %r7870;
	mov.u32 	%r7725, %r7883;
	mov.u32 	%r7726, %r7884;
	mov.u32 	%r7727, %r7885;
	mov.u32 	%r7728, %r7886;
	mov.u32 	%r7504, %r502;
	mov.u32 	%r7505, %r7783;
	mov.u32 	%r7508, %r503;
	mov.u32 	%r7511, %r7785;
	mov.u32 	%r7516, %r508;
	mov.u32 	%r7520, %r511;
	mov.u32 	%r7528, %r7790;
	mov.u32 	%r7533, %r7792;
	mov.u32 	%r7539, %r529;
	mov.u32 	%r7543, %r537;
	mov.u32 	%r7545, %r539;
	mov.u32 	%r7548, %r541;
	mov.u32 	%r7552, %r545;
	mov.u32 	%r7557, %r549;
	mov.u32 	%r7584, %r1464;
	@%p495 bra 	$L__BB0_302;

$L__BB0_864:
	ret;

}

