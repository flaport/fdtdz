//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<587>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<482>;
	.reg .b32 	%r<8052>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<585>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1775, %r1776}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1777, %r1778}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1779, %r1780}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1781, %r1782}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1783, %r1784}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1785, %r1786}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1787, %r1788}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1789, %r1790}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1791, %r1792}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1793, %r1794}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1795, %r1796}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1797, %r1798}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1799, %r1800}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1801, 32;
	sub.s32 	%r45, %r1801, %r1782;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1802, %r1788, -1;
	mad.lo.s32 	%r1803, %r1802, %r1787, %r1786;
	add.s32 	%r1804, %r1781, %r1780;
	add.s32 	%r1805, %r1804, %r1803;
	add.s32 	%r1806, %r1805, 1;
	mul.lo.s32 	%r1807, %r1775, %r1777;
	shl.b32 	%r47, %r1807, 1;
	shl.b32 	%r1808, %r1807, 2;
	div.s32 	%r1809, %r1806, %r1808;
	add.s32 	%r1810, %r1809, 1;
	mul.lo.s32 	%r1811, %r1810, %r1781;
	mul.lo.s32 	%r1812, %r1776, %r1778;
	shl.b32 	%r48, %r1812, 1;
	div.s32 	%r1813, %r1811, %r48;
	add.s32 	%r1814, %r1813, 1;
	mul.lo.s32 	%r49, %r1814, %r1780;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7425, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r7425, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1817, %r1777, %r44, %r43;
	mad.lo.s32 	%r1818, %r1817, %r1776, %r42;
	mad.lo.s32 	%r1819, %r1818, %r1775, %r41;
	shl.b32 	%r53, %r1819, 5;
	add.s32 	%r7430, %r53, %r46;
	mul.lo.s32 	%r1820, %r1812, %r1807;
	shl.b32 	%r57, %r1820, 5;
	mov.u32 	%r1821, 8;
	sub.s32 	%r1822, %r1821, %r1789;
	add.s32 	%r1823, %r1822, %r1790;
	sub.s32 	%r1824, %r1821, %r1791;
	add.s32 	%r1825, %r1824, %r1792;
	sub.s32 	%r58, %r1794, %r1793;
	mul.lo.s32 	%r1826, %r1788, %r58;
	mul.lo.s32 	%r1827, %r1826, %r1825;
	mul.lo.s32 	%r1828, %r1827, %r1823;
	mul.lo.s32 	%r59, %r1828, 3;
	setp.ge.s32 	%p29, %r7430, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1829, %r1792, 8;
	sub.s32 	%r1830, %r1829, %r1791;
	mul.lo.s32 	%r1831, %r1788, %r1830;
	add.s32 	%r1832, %r1790, 8;
	sub.s32 	%r1833, %r1832, %r1789;
	mul.lo.s32 	%r1834, %r1831, %r1833;
	mul.lo.s32 	%r1835, %r1834, %r58;
	not.b32 	%r1836, %r46;
	mad.lo.s32 	%r1837, %r1835, 3, %r1836;
	sub.s32 	%r1838, %r1837, %r53;
	mul.lo.s32 	%r1839, %r1812, %r1775;
	mul.lo.s32 	%r1840, %r1839, %r1777;
	shl.b32 	%r1841, %r1840, 5;
	div.u32 	%r60, %r1838, %r1841;
	add.s32 	%r1842, %r60, 1;
	and.b32  	%r7427, %r1842, 3;
	setp.eq.s32 	%p30, %r7427, 0;
	mov.u32 	%r7428, %r7430;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r7428, %r7430;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7428, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1843, 0;
	st.global.u32 	[%rd44], %r1843;
	add.s32 	%r7428, %r7428, %r57;
	add.s32 	%r7427, %r7427, -1;
	setp.ne.s32 	%p31, %r7427, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7428, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1844, 0;
	st.global.u32 	[%rd46], %r1844;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1844;
	add.s32 	%r1845, %r7428, %r57;
	add.s32 	%r1846, %r1845, %r57;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1844;
	add.s32 	%r1847, %r1846, %r57;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1844;
	add.s32 	%r7428, %r1847, %r57;
	setp.lt.s32 	%p33, %r7428, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1848, %r1781, %r47;
	div.s32 	%r1849, %r1848, %r48;
	mul.lo.s32 	%r1850, %r1849, %r1780;
	sub.s32 	%r69, %r1850, %r47;
	sub.s32 	%r1851, %r1780, %r48;
	mul.lo.s32 	%r1852, %r1851, %r1777;
	mul.lo.s32 	%r70, %r1775, 384;
	add.s32 	%r1853, %r70, %r70;
	add.s32 	%r1854, %r1853, 128;
	mul.lo.s32 	%r1856, %r1812, 768;
	mul.lo.s32 	%r1857, %r1852, %r1854;
	mad.lo.s32 	%r71, %r1856, %r69, %r1857;
	bra.uni 	$L__BB0_11;

$L__BB0_959:
	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7394, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd570, %r7430, 4;
	add.s64 	%rd571, %rd3, %rd570;
	st.global.u32 	[%rd571], %r7394;
	add.s32 	%r7430, %r7430, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7430, %r71;
	@%p34 bra 	$L__BB0_959;

	ld.param.u64 	%rd52, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7466, %r1775, %r43, %r41;
	mul.lo.s32 	%r79, %r1776, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7466, %r1780;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1858, 31;
	sub.s32 	%r1859, %r1858, %r46;
	selp.b32 	%r1860, %r46, %r1859, %p36;
	shl.b32 	%r1861, %r1860, 2;
	mov.u32 	%r1862, 2;
	sub.s32 	%r81, %r1861, %r1783;
	shl.b32 	%r1863, %r1782, 2;
	mov.u32 	%r1864, 128;
	sub.s32 	%r82, %r1864, %r1863;
	sub.s32 	%r1865, %r1862, %r1783;
	add.s32 	%r83, %r1865, %r1861;
	sub.s32 	%r84, %r1790, %r1789;
	sub.s32 	%r85, %r1792, %r1791;
	add.s32 	%r86, %r1790, -1;
	add.s32 	%r87, %r1792, -1;
	add.s32 	%r88, %r1794, -1;
	mul.lo.s32 	%r1866, %r1781, %r1780;
	shl.b32 	%r89, %r1866, 6;
	add.s32 	%r90, %r1780, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1867, %r94, 31;
	add.s32 	%r1868, %r94, %r1867;
	shr.s32 	%r96, %r1868, 1;
	and.b32  	%r1869, %r1868, -2;
	sub.s32 	%r1870, %r94, %r1869;
	add.s32 	%r95, %r1870, %r89;
	rem.s32 	%r1926, %r91, %r82;
	add.s32 	%r1927, %r1926, %r82;
	rem.s32 	%r1928, %r1927, %r82;
	rem.s32 	%r1929, %r92, %r82;
	add.s32 	%r1930, %r1929, %r82;
	rem.s32 	%r1931, %r1930, %r82;
	mov.u32 	%r7431, %r7466;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1781;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7431, %r1795;
	setp.lt.s32 	%p39, %r7431, %r1796;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7431, %r1790;
	setp.ge.s32 	%p41, %r7431, %r1789;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1871, %r7431, %r86, %p40;
	setp.lt.s32 	%p42, %r7431, %r1789;
	selp.b32 	%r1872, %r1789, %r1871, %p42;
	sub.s32 	%r1873, %r1872, %r1789;
	add.s32 	%r98, %r90, %r7431;
	rem.s32 	%r1874, %r81, %r82;
	add.s32 	%r1875, %r1874, %r82;
	rem.s32 	%r99, %r1875, %r82;
	rem.s32 	%r1876, %r83, %r82;
	add.s32 	%r1877, %r1876, %r82;
	rem.s32 	%r100, %r1877, %r82;
	setp.lt.s32 	%p43, %r99, %r1794;
	sub.s32 	%r101, %r99, %r1793;
	setp.lt.s32 	%p44, %r99, %r1793;
	selp.b32 	%r1878, %r99, %r88, %p43;
	selp.b32 	%r1879, %r1793, %r1878, %p44;
	sub.s32 	%r102, %r1879, %r1793;
	setp.lt.s32 	%p45, %r100, %r1794;
	sub.s32 	%r103, %r100, %r1793;
	setp.lt.s32 	%p46, %r100, %r1793;
	selp.b32 	%r1880, %r100, %r88, %p45;
	selp.b32 	%r1881, %r1793, %r1880, %p46;
	sub.s32 	%r104, %r1881, %r1793;
	sub.s32 	%r1882, %r7431, %r1789;
	mul.lo.s32 	%r105, %r1882, %r85;
	mul.lo.s32 	%r106, %r1873, %r85;
	add.s32 	%r1883, %r1882, %r84;
	mul.lo.s32 	%r107, %r1883, %r85;
	add.s32 	%r1884, %r1873, %r84;
	mul.lo.s32 	%r108, %r1884, %r85;
	add.s32 	%r1885, %r1883, %r84;
	mul.lo.s32 	%r109, %r1885, %r85;
	add.s32 	%r1886, %r1884, %r84;
	mul.lo.s32 	%r110, %r1886, %r85;
	mov.u32 	%r7432, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7432, %r1797;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7432, %r1798;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7432, %r1791;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7432, %r1792;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7432, %r1791;
	selp.b32 	%r1887, %r7432, %r87, %p52;
	setp.lt.s32 	%p53, %r7432, %r1791;
	selp.b32 	%r1888, %r1791, %r1887, %p53;
	sub.s32 	%r113, %r1888, %r1791;
	mul.lo.s32 	%r114, %r7432, %r1780;
	add.s32 	%r115, %r114, %r7431;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1799;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1800;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1793;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1793;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f470, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1891, %r112, %r105;
	mad.lo.s32 	%r1892, %r1891, %r58, %r101;
	mul.wide.s32 	%rd56, %r1892, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f470, [%rd57];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1889, %r113, %r106;
	mad.lo.s32 	%r1890, %r1889, %r58, %r102;
	mul.wide.s32 	%rd54, %r1890, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f470, [%rd55];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1800;
	setp.ge.s32 	%p68, %r100, %r1799;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f471, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1895, %r112, %r105;
	mad.lo.s32 	%r1896, %r1895, %r58, %r103;
	mul.wide.s32 	%rd60, %r1896, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f471, [%rd61];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1893, %r113, %r106;
	mad.lo.s32 	%r1894, %r1893, %r58, %r104;
	mul.wide.s32 	%rd58, %r1894, 4;
	add.s64 	%rd59, %rd5, %rd58;
	ld.global.f32 	%f471, [%rd59];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f470;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r1897, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1898, %r117, %r46;
	shl.b32 	%r1899, %r1898, 2;
	add.s32 	%r1900, %r89, %r1899;
	mul.wide.s32 	%rd62, %r1900, 4;
	add.s64 	%rd63, %rd6, %rd62;
	st.global.u32 	[%rd63], %r1897;
	mov.f32 	%f472, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1903, %r112, %r107;
	mad.lo.s32 	%r1904, %r1903, %r58, %r101;
	mul.wide.s32 	%rd66, %r1904, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f472, [%rd67];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1901, %r113, %r108;
	mad.lo.s32 	%r1902, %r1901, %r58, %r102;
	mul.wide.s32 	%rd64, %r1902, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f472, [%rd65];

$L__BB0_28:
	mov.f32 	%f473, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1907, %r112, %r107;
	mad.lo.s32 	%r1908, %r1907, %r58, %r103;
	mul.wide.s32 	%rd70, %r1908, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f473, [%rd71];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1905, %r113, %r108;
	mad.lo.s32 	%r1906, %r1905, %r58, %r104;
	mul.wide.s32 	%rd68, %r1906, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f473, [%rd69];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f472;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r1909, {low,high};}

	// end inline asm
	add.s32 	%r1910, %r93, %r116;
	mul.wide.s32 	%rd72, %r1910, 4;
	add.s64 	%rd73, %rd6, %rd72;
	st.global.u32 	[%rd73], %r1909;
	mov.f32 	%f474, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1913, %r112, %r109;
	mad.lo.s32 	%r1914, %r1913, %r58, %r101;
	mul.wide.s32 	%rd76, %r1914, 4;
	add.s64 	%rd77, %rd5, %rd76;
	ld.global.f32 	%f474, [%rd77];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1911, %r113, %r110;
	mad.lo.s32 	%r1912, %r1911, %r58, %r102;
	mul.wide.s32 	%rd74, %r1912, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f474, [%rd75];

$L__BB0_36:
	mov.f32 	%f475, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1917, %r112, %r109;
	mad.lo.s32 	%r1918, %r1917, %r58, %r103;
	mul.wide.s32 	%rd80, %r1918, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f475, [%rd81];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1915, %r113, %r110;
	mad.lo.s32 	%r1916, %r1915, %r58, %r104;
	mul.wide.s32 	%rd78, %r1916, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f475, [%rd79];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f474;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r1919, {low,high};}

	// end inline asm
	rem.s32 	%r1920, %r98, %r1780;
	add.s32 	%r1921, %r1920, %r114;
	shl.b32 	%r118, %r1921, 5;
	add.s32 	%r1922, %r118, %r46;
	shl.b32 	%r1923, %r1922, 2;
	add.s32 	%r1924, %r89, %r1923;
	add.s32 	%r1925, %r1924, 2;
	mul.wide.s32 	%rd82, %r1925, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r1919;
	setp.ge.s32 	%p76, %r1928, %r1799;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1928, %r1800;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1928, %r1793;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1928, %r1794;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1931, %r1799;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1931, %r1800;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r119, %r1928, %r1793;
	setp.lt.s32 	%p86, %r1928, %r1793;
	selp.b32 	%r1932, %r1928, %r88, %p82;
	selp.b32 	%r1933, %r1793, %r1932, %p86;
	sub.s32 	%r120, %r1933, %r1793;
	setp.ge.s32 	%p87, %r1931, %r1793;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1931, %r1794;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r121, %r1931, %r1793;
	setp.lt.s32 	%p90, %r1931, %r1793;
	selp.b32 	%r1934, %r1931, %r88, %p89;
	selp.b32 	%r1935, %r1793, %r1934, %p90;
	sub.s32 	%r122, %r1935, %r1793;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f476, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1938, %r112, %r105;
	mad.lo.s32 	%r1939, %r1938, %r58, %r119;
	mul.wide.s32 	%rd86, %r1939, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f476, [%rd87];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1936, %r113, %r106;
	mad.lo.s32 	%r1937, %r1936, %r58, %r120;
	mul.wide.s32 	%rd84, %r1937, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f476, [%rd85];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f477, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1942, %r112, %r105;
	mad.lo.s32 	%r1943, %r1942, %r58, %r121;
	mul.wide.s32 	%rd90, %r1943, 4;
	add.s64 	%rd91, %rd5, %rd90;
	ld.global.f32 	%f477, [%rd91];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1940, %r113, %r106;
	mad.lo.s32 	%r1941, %r1940, %r58, %r122;
	mul.wide.s32 	%rd88, %r1941, 4;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.f32 	%f477, [%rd89];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f476;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r1944, {low,high};}

	// end inline asm
	add.s32 	%r1945, %r117, %r96;
	shl.b32 	%r1946, %r1945, 2;
	add.s32 	%r1947, %r95, %r1946;
	mul.wide.s32 	%rd92, %r1947, 4;
	add.s64 	%rd93, %rd6, %rd92;
	st.global.u32 	[%rd93], %r1944;
	mov.f32 	%f478, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1950, %r112, %r107;
	mad.lo.s32 	%r1951, %r1950, %r58, %r119;
	mul.wide.s32 	%rd96, %r1951, 4;
	add.s64 	%rd97, %rd5, %rd96;
	ld.global.f32 	%f478, [%rd97];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1948, %r113, %r108;
	mad.lo.s32 	%r1949, %r1948, %r58, %r120;
	mul.wide.s32 	%rd94, %r1949, 4;
	add.s64 	%rd95, %rd5, %rd94;
	ld.global.f32 	%f478, [%rd95];

$L__BB0_52:
	mov.f32 	%f479, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1954, %r112, %r107;
	mad.lo.s32 	%r1955, %r1954, %r58, %r121;
	mul.wide.s32 	%rd100, %r1955, 4;
	add.s64 	%rd101, %rd5, %rd100;
	ld.global.f32 	%f479, [%rd101];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1952, %r113, %r108;
	mad.lo.s32 	%r1953, %r1952, %r58, %r122;
	mul.wide.s32 	%rd98, %r1953, 4;
	add.s64 	%rd99, %rd5, %rd98;
	ld.global.f32 	%f479, [%rd99];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f478;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r1956, {low,high};}

	// end inline asm
	add.s32 	%r1957, %r94, %r116;
	mul.wide.s32 	%rd102, %r1957, 4;
	add.s64 	%rd103, %rd6, %rd102;
	st.global.u32 	[%rd103], %r1956;
	mov.f32 	%f480, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1960, %r112, %r109;
	mad.lo.s32 	%r1961, %r1960, %r58, %r119;
	mul.wide.s32 	%rd106, %r1961, 4;
	add.s64 	%rd107, %rd5, %rd106;
	ld.global.f32 	%f480, [%rd107];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1958, %r113, %r110;
	mad.lo.s32 	%r1959, %r1958, %r58, %r120;
	mul.wide.s32 	%rd104, %r1959, 4;
	add.s64 	%rd105, %rd5, %rd104;
	ld.global.f32 	%f480, [%rd105];

$L__BB0_60:
	mov.f32 	%f481, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1964, %r112, %r109;
	mad.lo.s32 	%r1965, %r1964, %r58, %r121;
	mul.wide.s32 	%rd110, %r1965, 4;
	add.s64 	%rd111, %rd5, %rd110;
	ld.global.f32 	%f481, [%rd111];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1962, %r113, %r110;
	mad.lo.s32 	%r1963, %r1962, %r58, %r122;
	mul.wide.s32 	%rd108, %r1963, 4;
	add.s64 	%rd109, %rd5, %rd108;
	ld.global.f32 	%f481, [%rd109];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f480;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r1966, {low,high};}

	// end inline asm
	add.s32 	%r1967, %r118, %r96;
	shl.b32 	%r1968, %r1967, 2;
	add.s32 	%r1969, %r95, %r1968;
	add.s32 	%r1970, %r1969, 2;
	mul.wide.s32 	%rd112, %r1970, 4;
	add.s64 	%rd113, %rd6, %rd112;
	st.global.u32 	[%rd113], %r1966;
	add.s32 	%r7432, %r7432, %r1812;
	setp.lt.s32 	%p99, %r7432, %r1781;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7431, %r7431, %r1807;
	setp.lt.s32 	%p100, %r7431, %r1780;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd114, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd114;
	ld.param.u64 	%rd115, [%rd1+120];
	cvta.to.global.u64 	%rd8, %rd115;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r125, %r80, 1;
	mov.u64 	%rd116, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7433, %r7466;

$L__BB0_68:
	setp.ge.s32 	%p102, %r125, %r1781;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7434, %r125;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1972, %r7434, 31;
	add.s32 	%r1973, %r7434, %r1972;
	shr.s32 	%r1974, %r1973, 1;
	mad.lo.s32 	%r1975, %r1974, %r1780, %r7433;
	shl.b32 	%r129, %r1975, 5;
	add.s32 	%r130, %r7434, -2;
	mul.lo.s32 	%r131, %r130, %r1780;
	add.s32 	%r1976, %r1781, %r130;
	mul.lo.s32 	%r132, %r1976, %r1780;
	add.s32 	%r1977, %r1976, %r1781;
	mul.lo.s32 	%r133, %r1977, %r1780;
	add.s32 	%r134, %r131, %r1780;
	add.s32 	%r135, %r7434, -1;
	add.s32 	%r1978, %r1781, %r135;
	mul.lo.s32 	%r136, %r1978, %r1780;
	add.s32 	%r1979, %r1978, %r1781;
	mul.lo.s32 	%r137, %r1979, %r1780;
	add.s32 	%r1980, %r1781, %r7434;
	mul.lo.s32 	%r138, %r1980, %r1780;
	add.s32 	%r1981, %r1980, %r1781;
	mul.lo.s32 	%r139, %r1981, %r1780;
	mul.lo.s32 	%r140, %r7434, %r1780;
	add.s32 	%r141, %r140, %r1780;
	add.s32 	%r142, %r7434, 1;
	add.s32 	%r1982, %r1781, %r142;
	mul.lo.s32 	%r143, %r1982, %r1780;
	add.s32 	%r1983, %r1982, %r1781;
	mul.lo.s32 	%r144, %r1983, %r1780;
	add.s32 	%r145, %r141, %r1780;
	add.s32 	%r146, %r7434, 2;
	add.s32 	%r1984, %r1781, %r146;
	mul.lo.s32 	%r147, %r1984, %r1780;
	add.s32 	%r1985, %r1984, %r1781;
	mul.lo.s32 	%r148, %r1985, %r1780;
	mov.u32 	%r7437, 0;
	mov.u64 	%rd582, %rd116;

$L__BB0_72:
	ld.global.nc.u32 	%r1986, [%rd582];
	cvt.rn.f64.s32 	%fd1, %r1986;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r150, %r1986, %r7433;
	setp.lt.s32 	%p104, %r150, %r1780;
	or.b32  	%r1987, %r130, %r150;
	setp.gt.s32 	%p105, %r1987, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r130, %r1781;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1990, %r131, %r150;
	mul.wide.s32 	%rd117, %r1990, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f93, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7436, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7436, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1991, %r7437, %r129;
	mul.wide.s32 	%rd119, %r1991, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7436;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1994, %r132, %r150;
	mul.wide.s32 	%rd121, %r1994, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f98, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7438, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7438, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1995, %r7437, %r129;
	mul.wide.s32 	%rd123, %r1995, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7438;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1998, %r133, %r150;
	mul.wide.s32 	%rd125, %r1998, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f102, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7440, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7440, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1999, %r7437, %r129;
	mul.wide.s32 	%rd127, %r1999, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7440;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_87:
	or.b32  	%r2000, %r135, %r150;
	setp.gt.s32 	%p111, %r2000, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7434, %r1781;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r2003, %r134, %r150;
	mul.wide.s32 	%rd129, %r2003, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f105, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7442, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7442, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r2004, %r7437, %r129;
	mul.wide.s32 	%rd131, %r2004, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7442;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r2007, %r136, %r150;
	mul.wide.s32 	%rd133, %r2007, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f108, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7444, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r2008, %r7437, %r129;
	mul.wide.s32 	%rd135, %r2008, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7444;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r2011, %r137, %r150;
	mul.wide.s32 	%rd137, %r2011, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f111, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7446, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7446, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r2012, %r7437, %r129;
	mul.wide.s32 	%rd139, %r2012, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7446;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_102:
	or.b32  	%r2013, %r7434, %r150;
	setp.gt.s32 	%p118, %r2013, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7434, %r1781;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r2016, %r140, %r150;
	mul.wide.s32 	%rd141, %r2016, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f114, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7448, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r2017, %r7437, %r129;
	mul.wide.s32 	%rd143, %r2017, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7448;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r2020, %r138, %r150;
	mul.wide.s32 	%rd145, %r2020, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f118, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7450, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r2021, %r7437, %r129;
	mul.wide.s32 	%rd147, %r2021, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7450;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r2024, %r139, %r150;
	mul.wide.s32 	%rd149, %r2024, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f121, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r7452, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7452, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r2025, %r7437, %r129;
	mul.wide.s32 	%rd151, %r2025, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7452;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_117:
	or.b32  	%r2026, %r142, %r150;
	setp.gt.s32 	%p125, %r2026, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r142, %r1781;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r2029, %r141, %r150;
	mul.wide.s32 	%rd153, %r2029, 4;
	add.s64 	%rd154, %rd7, %rd153;
	ld.global.f32 	%f124, [%rd154];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r7454, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r2030, %r7437, %r129;
	mul.wide.s32 	%rd155, %r2030, 4;
	add.s64 	%rd156, %rd8, %rd155;
	st.global.u32 	[%rd156], %r7454;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r2033, %r143, %r150;
	mul.wide.s32 	%rd157, %r2033, 4;
	add.s64 	%rd158, %rd7, %rd157;
	ld.global.f32 	%f127, [%rd158];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r7456, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r2034, %r7437, %r129;
	mul.wide.s32 	%rd159, %r2034, 4;
	add.s64 	%rd160, %rd8, %rd159;
	st.global.u32 	[%rd160], %r7456;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r2037, %r144, %r150;
	mul.wide.s32 	%rd161, %r2037, 4;
	add.s64 	%rd162, %rd7, %rd161;
	ld.global.f32 	%f130, [%rd162];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r7458, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r7458, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r2038, %r7437, %r129;
	mul.wide.s32 	%rd163, %r2038, 4;
	add.s64 	%rd164, %rd8, %rd163;
	st.global.u32 	[%rd164], %r7458;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_132:
	or.b32  	%r2039, %r146, %r150;
	setp.gt.s32 	%p132, %r2039, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r146, %r1781;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2042, %r145, %r150;
	mul.wide.s32 	%rd165, %r2042, 4;
	add.s64 	%rd166, %rd7, %rd165;
	ld.global.f32 	%f133, [%rd166];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7460, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2043, %r7437, %r129;
	mul.wide.s32 	%rd167, %r2043, 4;
	add.s64 	%rd168, %rd8, %rd167;
	st.global.u32 	[%rd168], %r7460;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2046, %r147, %r150;
	mul.wide.s32 	%rd169, %r2046, 4;
	add.s64 	%rd170, %rd7, %rd169;
	ld.global.f32 	%f136, [%rd170];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r7462, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2047, %r7437, %r129;
	mul.wide.s32 	%rd171, %r2047, 4;
	add.s64 	%rd172, %rd8, %rd171;
	st.global.u32 	[%rd172], %r7462;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2050, %r148, %r150;
	mul.wide.s32 	%rd173, %r2050, 4;
	add.s64 	%rd174, %rd7, %rd173;
	ld.global.f32 	%f139, [%rd174];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r7464, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7464, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2051, %r7437, %r129;
	mul.wide.s32 	%rd175, %r2051, 4;
	add.s64 	%rd176, %rd8, %rd175;
	st.global.u32 	[%rd176], %r7464;
	add.s32 	%r7437, %r7437, 1;

$L__BB0_147:
	add.s64 	%rd582, %rd582, 4;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd178, %rd177, 24;
	setp.ne.s64 	%p139, %rd582, %rd178;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7434, %r7434, %r48;
	setp.lt.s32 	%p140, %r7434, %r1781;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7433, %r7433, %r1807;
	setp.lt.s32 	%p141, %r7433, %r1780;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1784, 1;
	ld.param.u64 	%rd179, [%rd1+160];
	cvta.to.global.u64 	%rd11, %rd179;
	ld.param.u64 	%rd180, [%rd1+128];
	cvta.to.global.u64 	%rd12, %rd180;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r254, %r80, 1;
	shr.u32 	%r2099, %r1785, 31;
	add.s32 	%r2100, %r1785, %r2099;
	bfe.u32 	%r255, %r2100, 1, 1;
	mov.u64 	%rd200, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r254, %r1781;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7472, %r254;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2102, %r7472, 31;
	add.s32 	%r2103, %r7472, %r2102;
	shr.s32 	%r2104, %r2103, 1;
	mad.lo.s32 	%r2105, %r2104, %r1780, %r7466;
	shl.b32 	%r259, %r2105, 5;
	add.s32 	%r260, %r7472, -2;
	mul.lo.s32 	%r261, %r260, %r1780;
	add.s32 	%r2106, %r1781, %r260;
	mul.lo.s32 	%r262, %r2106, %r1780;
	add.s32 	%r263, %r261, %r1780;
	add.s32 	%r264, %r7472, -1;
	add.s32 	%r2107, %r1781, %r264;
	mul.lo.s32 	%r265, %r2107, %r1780;
	add.s32 	%r2108, %r1781, %r7472;
	mul.lo.s32 	%r266, %r2108, %r1780;
	mul.lo.s32 	%r267, %r7472, %r1780;
	add.s32 	%r268, %r267, %r1780;
	add.s32 	%r269, %r7472, 1;
	add.s32 	%r2109, %r1781, %r269;
	mul.lo.s32 	%r270, %r2109, %r1780;
	add.s32 	%r271, %r268, %r1780;
	add.s32 	%r272, %r7472, 2;
	add.s32 	%r2110, %r1781, %r272;
	mul.lo.s32 	%r273, %r2110, %r1780;
	mov.u32 	%r7476, 0;
	mov.u64 	%rd583, 24;
	mov.u64 	%rd584, %rd200;

$L__BB0_174:
	ld.global.nc.u32 	%r2111, [%rd584];
	cvt.rn.f64.s32 	%fd2, %r2111;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r275, %r2111, %r7466;
	setp.lt.s32 	%p154, %r275, %r1780;
	or.b32  	%r2112, %r260, %r275;
	setp.gt.s32 	%p155, %r2112, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r260, %r1781;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r255, 0;
	add.s32 	%r2114, %r261, %r275;
	shl.b32 	%r2115, %r2114, 1;
	mul.wide.s32 	%rd201, %r2115, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f47, [%rd202];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r7474, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r280, %r7476, %r259;
	mul.wide.s32 	%rd203, %r280, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7474;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r255, 0;
	add.s32 	%r2119, %r262, %r275;
	shl.b32 	%r2120, %r2119, 1;
	mul.wide.s32 	%rd205, %r2120, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f48, [%rd206];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7475, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2123, %r280, 1;
	mul.wide.s32 	%rd207, %r2123, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7475;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r255, 0;
	add.s32 	%r2125, %r261, %r275;
	shl.b32 	%r2126, %r2125, 1;
	or.b32  	%r2127, %r2126, 1;
	mul.wide.s32 	%rd209, %r2127, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f51, [%rd210];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r291, %r7476, %r259;
	mul.wide.s32 	%rd211, %r291, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7477;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r255, 0;
	add.s32 	%r2131, %r262, %r275;
	shl.b32 	%r2132, %r2131, 1;
	or.b32  	%r2133, %r2132, 1;
	mul.wide.s32 	%rd213, %r2133, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f52, [%rd214];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2136, %r291, 1;
	mul.wide.s32 	%rd215, %r2136, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7478;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_198:
	or.b32  	%r2137, %r264, %r275;
	setp.gt.s32 	%p164, %r2137, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7472, %r1781;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r255, 0;
	add.s32 	%r2139, %r263, %r275;
	shl.b32 	%r2140, %r2139, 1;
	mul.wide.s32 	%rd217, %r2140, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f54, [%rd218];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7480, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r302, %r7476, %r259;
	mul.wide.s32 	%rd219, %r302, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7480;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r255, 0;
	add.s32 	%r2144, %r265, %r275;
	shl.b32 	%r2145, %r2144, 1;
	mul.wide.s32 	%rd221, %r2145, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f55, [%rd222];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7481, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r7481, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2148, %r302, 1;
	mul.wide.s32 	%rd223, %r2148, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7481;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r255, 0;
	add.s32 	%r2150, %r263, %r275;
	shl.b32 	%r2151, %r2150, 1;
	or.b32  	%r2152, %r2151, 1;
	mul.wide.s32 	%rd225, %r2152, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f57, [%rd226];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r313, %r7476, %r259;
	mul.wide.s32 	%rd227, %r313, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7483;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r255, 0;
	add.s32 	%r2156, %r265, %r275;
	shl.b32 	%r2157, %r2156, 1;
	or.b32  	%r2158, %r2157, 1;
	mul.wide.s32 	%rd229, %r2158, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f58, [%rd230];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7484, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7484, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2161, %r313, 1;
	mul.wide.s32 	%rd231, %r2161, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7484;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_222:
	or.b32  	%r2162, %r7472, %r275;
	setp.gt.s32 	%p174, %r2162, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7472, %r1781;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r255, 0;
	add.s32 	%r2164, %r267, %r275;
	shl.b32 	%r2165, %r2164, 1;
	mul.wide.s32 	%rd233, %r2165, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f60, [%rd234];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r324, %r7476, %r259;
	mul.wide.s32 	%rd235, %r324, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7486;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r255, 0;
	add.s32 	%r2169, %r266, %r275;
	shl.b32 	%r2170, %r2169, 1;
	mul.wide.s32 	%rd237, %r2170, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f61, [%rd238];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7487, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7487, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r7487, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2173, %r324, 1;
	mul.wide.s32 	%rd239, %r2173, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7487;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r255, 0;
	add.s32 	%r2175, %r267, %r275;
	shl.b32 	%r2176, %r2175, 1;
	or.b32  	%r2177, %r2176, 1;
	mul.wide.s32 	%rd241, %r2177, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f62, [%rd242];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r335, %r7476, %r259;
	mul.wide.s32 	%rd243, %r335, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7489;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r255, 0;
	add.s32 	%r2181, %r266, %r275;
	shl.b32 	%r2182, %r2181, 1;
	or.b32  	%r2183, %r2182, 1;
	mul.wide.s32 	%rd245, %r2183, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f63, [%rd246];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r7490, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7490, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7490, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2186, %r335, 1;
	mul.wide.s32 	%rd247, %r2186, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7490;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_246:
	or.b32  	%r2187, %r269, %r275;
	setp.gt.s32 	%p184, %r2187, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r269, %r1781;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r255, 0;
	add.s32 	%r2189, %r268, %r275;
	shl.b32 	%r2190, %r2189, 1;
	mul.wide.s32 	%rd249, %r2190, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f64, [%rd250];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r346, %r7476, %r259;
	mul.wide.s32 	%rd251, %r346, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7492;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r255, 0;
	add.s32 	%r2194, %r270, %r275;
	shl.b32 	%r2195, %r2194, 1;
	mul.wide.s32 	%rd253, %r2195, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f65, [%rd254];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r7493, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r7493, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7493, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2198, %r346, 1;
	mul.wide.s32 	%rd255, %r2198, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7493;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r255, 0;
	add.s32 	%r2200, %r268, %r275;
	shl.b32 	%r2201, %r2200, 1;
	or.b32  	%r2202, %r2201, 1;
	mul.wide.s32 	%rd257, %r2202, 4;
	add.s64 	%rd258, %rd11, %rd257;
	ld.global.f32 	%f66, [%rd258];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r357, %r7476, %r259;
	mul.wide.s32 	%rd259, %r357, 4;
	add.s64 	%rd260, %rd12, %rd259;
	st.global.u32 	[%rd260], %r7495;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r255, 0;
	add.s32 	%r2206, %r270, %r275;
	shl.b32 	%r2207, %r2206, 1;
	or.b32  	%r2208, %r2207, 1;
	mul.wide.s32 	%rd261, %r2208, 4;
	add.s64 	%rd262, %rd11, %rd261;
	ld.global.f32 	%f67, [%rd262];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7496, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2211, %r357, 1;
	mul.wide.s32 	%rd263, %r2211, 4;
	add.s64 	%rd264, %rd12, %rd263;
	st.global.u32 	[%rd264], %r7496;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_270:
	or.b32  	%r2212, %r272, %r275;
	setp.gt.s32 	%p194, %r2212, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r272, %r1781;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r255, 0;
	add.s32 	%r2214, %r271, %r275;
	shl.b32 	%r2215, %r2214, 1;
	mul.wide.s32 	%rd265, %r2215, 4;
	add.s64 	%rd266, %rd11, %rd265;
	ld.global.f32 	%f68, [%rd266];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r368, %r7476, %r259;
	mul.wide.s32 	%rd267, %r368, 4;
	add.s64 	%rd268, %rd12, %rd267;
	st.global.u32 	[%rd268], %r7498;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r255, 0;
	add.s32 	%r2219, %r273, %r275;
	shl.b32 	%r2220, %r2219, 1;
	mul.wide.s32 	%rd269, %r2220, 4;
	add.s64 	%rd270, %rd11, %rd269;
	ld.global.f32 	%f69, [%rd270];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r7499, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r7499, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2223, %r368, 1;
	mul.wide.s32 	%rd271, %r2223, 4;
	add.s64 	%rd272, %rd12, %rd271;
	st.global.u32 	[%rd272], %r7499;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r255, 0;
	add.s32 	%r2225, %r271, %r275;
	shl.b32 	%r2226, %r2225, 1;
	or.b32  	%r2227, %r2226, 1;
	mul.wide.s32 	%rd273, %r2227, 4;
	add.s64 	%rd274, %rd11, %rd273;
	ld.global.f32 	%f70, [%rd274];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r379, %r7476, %r259;
	mul.wide.s32 	%rd275, %r379, 4;
	add.s64 	%rd276, %rd12, %rd275;
	st.global.u32 	[%rd276], %r7501;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r255, 0;
	add.s32 	%r2231, %r273, %r275;
	shl.b32 	%r2232, %r2231, 1;
	or.b32  	%r2233, %r2232, 1;
	mul.wide.s32 	%rd277, %r2233, 4;
	add.s64 	%rd278, %rd11, %rd277;
	ld.global.f32 	%f71, [%rd278];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r7502, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r7502, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2236, %r379, 1;
	mul.wide.s32 	%rd279, %r2236, 4;
	add.s64 	%rd280, %rd12, %rd279;
	st.global.u32 	[%rd280], %r7502;
	add.s32 	%r7476, %r7476, 2;

$L__BB0_294:
	add.s64 	%rd584, %rd584, 4;
	add.s64 	%rd583, %rd583, -4;
	setp.ne.s64 	%p204, %rd583, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7472, %r7472, %r48;
	setp.lt.s32 	%p205, %r7472, %r1781;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7466, %r7466, %r1807;
	setp.lt.s32 	%p206, %r7466, %r1780;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r228, %r79;
	mov.u32 	%r2052, 31;
	sub.s32 	%r2053, %r2052, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2054, %r46, %r2053, %p144;
	shl.b32 	%r2055, %r2054, 2;
	mov.u32 	%r2056, 2;
	sub.s32 	%r229, %r2055, %r1783;
	shl.b32 	%r2057, %r1782, 2;
	mov.u32 	%r2058, 128;
	sub.s32 	%r230, %r2058, %r2057;
	sub.s32 	%r2059, %r2056, %r1783;
	add.s32 	%r231, %r2059, %r2055;
	add.s32 	%r232, %r1780, -1;
	add.s32 	%r233, %r229, 1;
	add.s32 	%r234, %r231, 1;
	rem.s32 	%r2084, %r233, %r230;
	add.s32 	%r2085, %r2084, %r230;
	rem.s32 	%r245, %r2085, %r230;
	rem.s32 	%r2086, %r234, %r230;
	add.s32 	%r2087, %r2086, %r230;
	rem.s32 	%r246, %r2087, %r230;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r228;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r236, %r7466, 1;
	rem.s32 	%r2060, %r229, %r230;
	add.s32 	%r2061, %r2060, %r230;
	rem.s32 	%r237, %r2061, %r230;
	rem.s32 	%r2062, %r231, %r230;
	add.s32 	%r2063, %r2062, %r230;
	rem.s32 	%r238, %r2063, %r230;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2066, %r236, %r230;
	add.s32 	%r2067, %r2066, %r237;
	mul.wide.s32 	%rd181, %r2067, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f142, [%rd182];
	add.s32 	%r2068, %r2066, %r238;
	mul.wide.s32 	%rd183, %r2068, 4;
	add.s64 	%rd184, %rd11, %rd183;
	ld.global.f32 	%f143, [%rd184];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r7467, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7467, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2069, %r7466, 5;
	add.s32 	%r2070, %r2069, %r46;
	shl.b32 	%r2071, %r2070, 2;
	mul.wide.s32 	%rd185, %r2071, 4;
	add.s64 	%rd13, %rd12, %rd185;
	st.global.u32 	[%rd13], %r7467;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2074, %r236, 1;
	mul.lo.s32 	%r2075, %r2074, %r230;
	add.s32 	%r2076, %r2075, %r237;
	mul.wide.s32 	%rd186, %r2076, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f146, [%rd187];
	add.s32 	%r2077, %r2075, %r238;
	mul.wide.s32 	%rd188, %r2077, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f147, [%rd189];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7468, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7468, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2078, %r232, %r7466;
	rem.s32 	%r2079, %r2078, %r1780;
	shl.b32 	%r2080, %r2079, 5;
	add.s32 	%r2081, %r2080, %r46;
	shl.b32 	%r2082, %r2081, 2;
	or.b32  	%r2083, %r2082, 2;
	mul.wide.s32 	%rd190, %r2083, 4;
	add.s64 	%rd14, %rd12, %rd190;
	st.global.u32 	[%rd14], %r7468;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2090, %r236, %r230;
	add.s32 	%r2091, %r2090, %r245;
	mul.wide.s32 	%rd191, %r2091, 4;
	add.s64 	%rd192, %rd11, %rd191;
	ld.global.f32 	%f150, [%rd192];
	add.s32 	%r2092, %r2090, %r246;
	mul.wide.s32 	%rd193, %r2092, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f151, [%rd194];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7469, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7469, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd13+4], %r7469;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2095, %r236, 1;
	mul.lo.s32 	%r2096, %r2095, %r230;
	add.s32 	%r2097, %r2096, %r245;
	mul.wide.s32 	%rd195, %r2097, 4;
	add.s64 	%rd196, %rd11, %rd195;
	ld.global.f32 	%f154, [%rd196];
	add.s32 	%r2098, %r2096, %r246;
	mul.wide.s32 	%rd197, %r2098, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f155, [%rd198];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7470, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7470, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd14+4], %r7470;

$L__BB0_167:
	add.s32 	%r7466, %r7466, %r1807;
	setp.lt.s32 	%p150, %r7466, %r1780;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2238, %r1775, -1;
	mad.lo.s32 	%r2239, %r1776, 576, 128;
	mul.lo.s32 	%r2240, %r2239, %r2238;
	add.s32 	%r2241, %r70, -64;
	add.s32 	%r2242, %r2241, %r70;
	add.s32 	%r2243, %r1776, -1;
	mad.lo.s32 	%r2244, %r2242, %r2243, %r2240;
	mul.lo.s32 	%r2245, %r2238, %r1776;
	mul.lo.s32 	%r2246, %r2245, 320;
	mad.lo.s32 	%r2247, %r2241, %r2243, %r2246;
	add.s32 	%r388, %r2247, %r2244;
	setp.lt.s32 	%p207, %r388, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7681, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7506, 0;
	mov.u32 	%r7504, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7504], %r7681;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2250, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7504+4], %r2250;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2251, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7504+8], %r2251;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2252, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7504+12], %r2252;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r7681, {low,high};}

	// end inline asm
	add.s32 	%r7504, %r7504, 16;
	add.s32 	%r7506, %r7506, 4;
	setp.lt.s32 	%p208, %r7506, %r388;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7682, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r2255, {low,high};}

	// end inline asm
	ld.param.u64 	%rd281, [%rd1+176];
	cvta.to.global.u64 	%rd19, %rd281;
	mov.u32 	%r2256, 31;
	sub.s32 	%r2257, %r2256, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2258, %r46, %r2257, %p209;
	shl.b32 	%r2259, %r2258, 2;
	sub.s32 	%r399, %r2259, %r1783;
	shl.b32 	%r2260, %r1782, 2;
	mov.u32 	%r2261, 128;
	sub.s32 	%r400, %r2261, %r2260;
	rem.s32 	%r2262, %r399, %r400;
	add.s32 	%r2263, %r2262, %r400;
	rem.s32 	%r401, %r2263, %r400;
	add.s32 	%r2264, %r399, 2;
	rem.s32 	%r2265, %r2264, %r400;
	add.s32 	%r2266, %r2265, %r400;
	rem.s32 	%r402, %r2266, %r400;
	mul.lo.s32 	%r2267, %r401, 6;
	mul.lo.s32 	%r2268, %r402, 6;
	mul.wide.s32 	%rd282, %r2267, 4;
	add.s64 	%rd20, %rd19, %rd282;
	mul.wide.s32 	%rd283, %r2268, 4;
	add.s64 	%rd21, %rd19, %rd283;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7508, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd20];
	ld.global.f32 	%f299, [%rd20+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd21+8];
	ld.global.f32 	%f301, [%rd21];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd20+4];
	ld.global.f32 	%f307, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r7509, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd20];
	ld.global.f32 	%f305, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7510, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd20+20];
	ld.global.f32 	%f311, [%rd20+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd21+20];
	ld.global.f32 	%f313, [%rd21+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd20+16];
	ld.global.f32 	%f319, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r7511, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd20+12];
	ld.global.f32 	%f317, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2277, %r399, 1;
	rem.s32 	%r2278, %r2277, %r400;
	add.s32 	%r2279, %r2278, %r400;
	rem.s32 	%r415, %r2279, %r400;
	add.s32 	%r2280, %r399, 3;
	rem.s32 	%r2281, %r2280, %r400;
	add.s32 	%r2282, %r2281, %r400;
	rem.s32 	%r416, %r2282, %r400;
	mul.lo.s32 	%r2283, %r415, 6;
	mul.lo.s32 	%r2284, %r416, 6;
	mul.wide.s32 	%rd284, %r2283, 4;
	add.s64 	%rd22, %rd19, %rd284;
	mul.wide.s32 	%rd285, %r2284, 4;
	add.s64 	%rd23, %rd19, %rd285;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7512, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd22];
	ld.global.f32 	%f323, [%rd22+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd23+8];
	ld.global.f32 	%f325, [%rd23];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd22+4];
	ld.global.f32 	%f331, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r7513, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd22];
	ld.global.f32 	%f329, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7514, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd22+20];
	ld.global.f32 	%f335, [%rd22+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd23+20];
	ld.global.f32 	%f337, [%rd23+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd22+16];
	ld.global.f32 	%f343, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd22+12];
	ld.global.f32 	%f341, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2293, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd286, %r2293;
	// begin inline asm
	mov.u32 %r2294, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd287, %r2294;
	bfi.b64 	%rd24, %rd287, %rd286, 32, 32;
	setp.ne.s64 	%p218, %rd24, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	mov.u32 	%r2295, %nctaid.x;
	mov.u32 	%r2296, %nctaid.y;
	mul.lo.s32 	%r2297, %r2295, %r2296;
	mov.u32 	%r2298, %nctaid.z;
	mul.lo.s32 	%r429, %r2297, %r2298;
	neg.s32 	%r2299, %r42;
	add.s32 	%r2300, %r46, %r41;
	setp.ne.s32 	%p219, %r2300, %r2299;
	mov.u32 	%r2301, %ctaid.x;
	add.s32 	%r430, %r2301, %r43;
	neg.s32 	%r431, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r430, %r431;
	mov.u32 	%r2302, -2147483647;
	sub.s32 	%r2303, %r2302, %r429;
	selp.b32 	%r2304, %r2303, 1, %p220;
	membar.gl;
	add.s64 	%rd288, %rd24, 4;
	atom.add.u32 	%r432, [%rd288], %r2304;

$L__BB0_328:
	ld.volatile.u32 	%r2305, [%rd24+4];
	xor.b32  	%r2306, %r2305, %r432;
	setp.gt.s32 	%p221, %r2306, -1;
	@%p221 bra 	$L__BB0_328;

	membar.gl;

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_958;

	shr.s32 	%r2320, %r1785, 31;
	shr.u32 	%r2321, %r2320, 30;
	add.s32 	%r2322, %r1785, %r2321;
	shr.s32 	%r433, %r2322, 2;
	add.s32 	%r2323, %r46, 31;
	shr.s32 	%r2324, %r2323, 31;
	shr.u32 	%r2325, %r2324, 27;
	add.s32 	%r2326, %r2323, %r2325;
	and.b32  	%r2327, %r2326, -32;
	sub.s32 	%r2328, %r2323, %r2327;
	add.s32 	%r2329, %r46, 33;
	shr.s32 	%r2330, %r2329, 31;
	shr.u32 	%r2331, %r2330, 27;
	add.s32 	%r2332, %r2329, %r2331;
	and.b32  	%r2333, %r2332, -32;
	sub.s32 	%r2334, %r2329, %r2333;
	shr.u32 	%r2335, %r1785, 31;
	add.s32 	%r2336, %r1785, %r2335;
	and.b32  	%r2337, %r2336, -2;
	sub.s32 	%r434, %r1785, %r2337;
	setp.lt.s32 	%p223, %r46, 32;
	selp.b32 	%r435, %r2328, %r46, %p223;
	setp.lt.s32 	%p224, %r401, %r1794;
	setp.ge.s32 	%p225, %r401, %r1793;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r415, %r1794;
	setp.ge.s32 	%p227, %r415, %r1793;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r402, %r1794;
	setp.ge.s32 	%p229, %r402, %r1793;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r416, %r1794;
	setp.ge.s32 	%p231, %r416, %r1793;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r436, %r2334, %r46, %p223;
	mov.u32 	%r2319, 0;
	// begin inline asm
	{mov.u32 %r2338, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2664, %r2338, 8;
	add.s32 	%r2665, %r2664, -8192;
	or.b32  	%r2342, %r2665, 31;
	mul.wide.s32 	%rd297, %r46, 16;
	mul.wide.s32 	%rd299, %r46, 8;
	mov.u32 	%r7793, %r2255;
	mov.u32 	%r7823, %r2255;
	mov.u32 	%r7794, %r2255;
	mov.u32 	%r7824, %r2255;
	mov.u32 	%r7795, %r2255;
	mov.u32 	%r7521, %r2255;
	mov.u32 	%r7522, %r2255;
	mov.u32 	%r7836, %r2255;
	mov.u32 	%r7825, %r2255;
	mov.u32 	%r7826, %r2255;
	mov.u32 	%r7796, %r2255;
	mov.u32 	%r7797, %r2255;
	mov.u32 	%r7798, %r2255;
	mov.u32 	%r7529, %r2255;
	mov.u32 	%r7530, %r2255;
	mov.u32 	%r7835, %r2255;
	mov.u32 	%r7827, %r2255;
	mov.u32 	%r7828, %r2255;
	mov.u32 	%r7805, %r2255;
	mov.u32 	%r7535, %r2255;
	mov.u32 	%r7536, %r2255;
	mov.u32 	%r7537, %r2255;
	mov.u32 	%r7846, %r2255;
	mov.u32 	%r7832, %r2255;
	mov.u32 	%r7837, %r2255;
	mov.u32 	%r7806, %r2255;
	mov.u32 	%r7542, %r2255;
	mov.u32 	%r7543, %r2255;
	mov.u32 	%r7544, %r2255;
	mov.u32 	%r7840, %r2255;
	mov.u32 	%r7829, %r2255;
	mov.u32 	%r7838, %r2255;
	mov.u32 	%r7807, %r2255;
	mov.u32 	%r7808, %r2255;
	mov.u32 	%r7550, %r2255;
	mov.u32 	%r7841, %r2255;
	mov.u32 	%r7842, %r2255;
	mov.u32 	%r7553, %r2255;
	mov.u32 	%r7809, %r2255;
	mov.u32 	%r7810, %r2255;
	mov.u32 	%r7811, %r2255;
	mov.u32 	%r7557, %r2255;
	mov.u32 	%r7843, %r2255;
	mov.u32 	%r7844, %r2255;
	mov.u32 	%r7812, %r2255;
	mov.u32 	%r7813, %r2255;
	mov.u32 	%r7814, %r2255;
	mov.u32 	%r7799, %r2255;
	mov.u32 	%r7564, %r2255;
	mov.u32 	%r7830, %r2255;
	mov.u32 	%r7831, %r2255;
	mov.u32 	%r7800, %r2255;
	mov.u32 	%r7568, %r2255;
	mov.u32 	%r7833, %r2255;
	mov.u32 	%r7834, %r2255;
	mov.u32 	%r7863, %r2255;
	mov.u32 	%r7572, %r2255;
	mov.u32 	%r7573, %r2255;
	mov.u32 	%r7574, %r2255;
	mov.u32 	%r7719, %r2255;
	mov.u32 	%r7864, %r2255;
	mov.u32 	%r7577, %r2255;
	mov.u32 	%r7578, %r2255;
	mov.u32 	%r7579, %r2255;
	mov.u32 	%r7720, %r2255;
	mov.u32 	%r7865, %r2255;
	mov.u32 	%r7866, %r2255;
	mov.u32 	%r7583, %r2255;
	mov.u32 	%r7584, %r2255;
	mov.u32 	%r7585, %r2255;
	mov.u32 	%r7721, %r2255;
	mov.u32 	%r7587, %r2255;
	mov.u32 	%r7867, %r2255;
	mov.u32 	%r7868, %r2255;
	mov.u32 	%r7590, %r2255;
	mov.u32 	%r7591, %r2255;
	mov.u32 	%r7592, %r2255;
	mov.u32 	%r7723, %r2255;
	mov.u32 	%r7594, %r2255;
	mov.u32 	%r7595, %r2255;
	mov.u32 	%r7596, %r2255;
	mov.u32 	%r7597, %r2255;
	mov.u32 	%r7847, %r2255;
	mov.u32 	%r7599, %r2255;
	mov.u32 	%r7600, %r2255;
	mov.u32 	%r7601, %r2255;
	mov.u32 	%r7602, %r2255;
	mov.u32 	%r7848, %r2255;
	mov.u32 	%r7815, %r2255;
	mov.u32 	%r7816, %r2255;
	mov.u32 	%r7817, %r2255;
	mov.u32 	%r7818, %r2255;
	mov.u32 	%r7608, %r2255;
	mov.u32 	%r7609, %r2255;
	mov.u32 	%r7872, %r2255;
	mov.u32 	%r7611, %r2255;
	mov.u32 	%r7612, %r2255;
	mov.u32 	%r7727, %r2255;
	mov.u32 	%r7614, %r2255;
	mov.u32 	%r7615, %r2255;
	mov.u32 	%r7616, %r2255;
	mov.u32 	%r7617, %r2255;
	mov.u32 	%r7874, %r2255;
	mov.u32 	%r7619, %r2255;
	mov.u32 	%r7620, %r2255;
	mov.u32 	%r7730, %r2255;
	mov.u32 	%r7622, %r2255;
	mov.u32 	%r7623, %r2255;
	mov.u32 	%r7624, %r2255;
	mov.u32 	%r7625, %r2255;
	mov.u32 	%r7875, %r2255;
	mov.u32 	%r7627, %r2255;
	mov.u32 	%r7628, %r2255;
	mov.u32 	%r7629, %r2255;
	mov.u32 	%r7733, %r2255;
	mov.u32 	%r7631, %r2255;
	mov.u32 	%r7632, %r2255;
	mov.u32 	%r7633, %r2255;
	mov.u32 	%r7634, %r2255;
	mov.u32 	%r7876, %r2255;
	mov.u32 	%r7636, %r2255;
	mov.u32 	%r7637, %r2255;
	mov.u32 	%r7638, %r2255;
	mov.u32 	%r7736, %r2255;
	mov.u32 	%r7640, %r2255;
	mov.u32 	%r7641, %r2255;
	mov.u32 	%r7642, %r2255;
	mov.u32 	%r7643, %r2255;
	mov.u32 	%r7644, %r2255;
	mov.u32 	%r7645, %r2255;
	mov.u32 	%r7646, %r2255;
	mov.u32 	%r7647, %r2255;
	mov.u32 	%r7648, %r2255;
	mov.u32 	%r7649, %r2255;
	mov.u32 	%r7650, %r2255;
	mov.u32 	%r7651, %r2255;
	mov.u32 	%r7652, %r2255;
	mov.u32 	%r7653, %r2255;
	mov.u32 	%r7654, %r2255;
	mov.u32 	%r7655, %r2255;
	mov.u32 	%r7656, %r2255;
	mov.u32 	%r7657, %r2255;
	mov.u32 	%r7658, %r2255;
	mov.u32 	%r7659, %r2255;
	mov.u32 	%r7660, %r2255;
	mov.u32 	%r7661, %r2255;
	mov.u32 	%r7662, %r2319;
	mov.u32 	%r7663, %r2319;
	mov.u32 	%r7664, %r2319;
	mov.u32 	%r7665, %r2319;
	mov.u32 	%r7666, %r2319;
	mov.u32 	%r7667, %r2319;
	mov.u32 	%r7668, %r2319;
	mov.u32 	%r7669, %r2319;
	mov.u32 	%r7670, %r2319;
	mov.u32 	%r7671, %r2319;
	mov.u32 	%r7672, %r2319;
	mov.u32 	%r7673, %r2319;
	mov.u32 	%r7801, %r2255;
	mov.u32 	%r7802, %r2255;
	mov.u32 	%r7803, %r2255;
	mov.u32 	%r7804, %r2255;
	mov.u32 	%r7819, %r2255;
	mov.u32 	%r7820, %r2255;
	mov.u32 	%r7680, %r2319;

$L__BB0_332:
	mov.u32 	%r574, %r7876;
	mov.u32 	%r573, %r7634;
	mov.u32 	%r565, %r7875;
	mov.u32 	%r564, %r7625;
	mov.u32 	%r557, %r7874;
	mov.u32 	%r549, %r7872;
	mov.u32 	%r7634, %r7868;
	mov.u32 	%r519, %r7867;
	mov.u32 	%r7625, %r7866;
	mov.u32 	%r511, %r7865;
	mov.u32 	%r504, %r7864;
	mov.u32 	%r497, %r7863;
	sub.s32 	%r7405, %r1780, %r48;
	mov.u32 	%r2353, 1;
	not.b32 	%r2627, %r43;
	mov.u32 	%r2619, -1;
	add.s32 	%r2628, %r1777, %r2627;
	mul.lo.s32 	%r2629, %r2628, %r1779;
	add.s32 	%r2630, %r7680, %r2629;
	not.b32 	%r2632, %r44;
	add.s32 	%r2633, %r1778, %r2632;
	mul.lo.s32 	%r2634, %r2633, %r1779;
	add.s32 	%r2635, %r7680, %r2634;
	add.s32 	%r2636, %r2629, %r2634;
	add.s32 	%r2637, %r2636, %r1780;
	not.b32 	%r2638, %r41;
	add.s32 	%r2639, %r1775, %r2638;
	mad.lo.s32 	%r2640, %r2628, %r1775, %r2639;
	not.b32 	%r2641, %r42;
	add.s32 	%r2642, %r1776, %r2641;
	mad.lo.s32 	%r2643, %r2633, %r1776, %r2642;
	add.s32 	%r2644, %r2640, %r2643;
	shl.b32 	%r2645, %r2644, 1;
	add.s32 	%r2646, %r2637, %r2645;
	add.s32 	%r2647, %r7680, %r2646;
	add.s32 	%r2648, %r7680, %r2636;
	div.s32 	%r2649, %r2647, %r1780;
	neg.s32 	%r2650, %r1780;
	sub.s32 	%r2653, %r48, %r1780;
	sub.s32 	%r2654, %r2640, %r2643;
	shl.b32 	%r2655, %r2654, 1;
	add.s32 	%r2656, %r2655, %r1781;
	mad.lo.s32 	%r2657, %r2649, %r48, %r2656;
	mad.lo.s32 	%r2658, %r2649, %r2653, %r2648;
	div.s32 	%r2659, %r2657, %r1781;
	mul.lo.s32 	%r2660, %r2659, %r1781;
	sub.s32 	%r2663, %r1808, %r1781;
	mov.u32 	%r2437, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2339,%r7682,%r2319,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2345, %r7509, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7766,%r2345,%r7661;
}
	// end inline asm
	selp.b32 	%r2348, %r7513, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7764,%r2348,%r7656;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2351,%r7682,%r2353,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2357, %r7509, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7765,%r2357,%r7660;
}
	// end inline asm
	selp.b32 	%r2360, %r7513, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7763,%r2360,%r7655;
}
	// end inline asm
	mov.u32 	%r2365, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2363,%r7682,%r2365,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2369, %r7509, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7762,%r2369,%r7651;
}
	// end inline asm
	selp.b32 	%r2372, %r7513, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7761,%r2372,%r7649;
}
	// end inline asm
	mov.u32 	%r2377, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2375,%r7682,%r2377,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2381, %r7509, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7760,%r2381,%r7848;
}
	// end inline asm
	selp.b32 	%r2384, %r7513, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7758,%r2384,%r7847;
}
	// end inline asm
	mov.u32 	%r2389, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2387,%r7682,%r2389,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2393, %r7509, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7759,%r2393,%r7647;
}
	// end inline asm
	selp.b32 	%r2396, %r7513, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7757,%r2396,%r7644;
}
	// end inline asm
	mov.u32 	%r2401, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2399,%r7682,%r2401,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2405, %r7509, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7756,%r2405,%r7641;
}
	// end inline asm
	selp.b32 	%r2408, %r7513, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7753,%r2408,%r7632;
}
	// end inline asm
	mov.u32 	%r2413, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2411,%r7682,%r2413,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2417, %r7509, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7755,%r2417,%r7640;
}
	// end inline asm
	selp.b32 	%r2420, %r7513, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7752,%r2420,%r7631;
}
	// end inline asm
	mov.u32 	%r2425, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2423,%r7682,%r2425,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2429, %r7509, %r2423, %p28;
	// begin inline asm
	{mul.f16x2 %r7754,%r2429,%r7736;
}
	// end inline asm
	selp.b32 	%r2432, %r7513, %r2423, %p28;
	// begin inline asm
	{mul.f16x2 %r7751,%r2432,%r7733;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2435,%r7682,%r2437,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2441, %r7509, %r2435, %p28;
	// begin inline asm
	{mul.f16x2 %r7750,%r2441,%r7623;
}
	// end inline asm
	selp.b32 	%r2444, %r7513, %r2435, %p28;
	// begin inline asm
	{mul.f16x2 %r7747,%r2444,%r7615;
}
	// end inline asm
	mov.u32 	%r2449, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2447,%r7682,%r2449,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2453, %r7509, %r2447, %p28;
	// begin inline asm
	{mul.f16x2 %r7749,%r2453,%r7622;
}
	// end inline asm
	selp.b32 	%r2456, %r7513, %r2447, %p28;
	// begin inline asm
	{mul.f16x2 %r7746,%r2456,%r7614;
}
	// end inline asm
	mov.u32 	%r2461, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2459,%r7682,%r2461,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2465, %r7509, %r2459, %p28;
	// begin inline asm
	{mul.f16x2 %r7748,%r2465,%r7730;
}
	// end inline asm
	selp.b32 	%r2468, %r7513, %r2459, %p28;
	// begin inline asm
	{mul.f16x2 %r7745,%r2468,%r7727;
}
	// end inline asm
	mov.u32 	%r2473, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2471,%r7682,%r2473,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2477, %r7509, %r2471, %p28;
	// begin inline asm
	{mul.f16x2 %r7744,%r2477,%r7834;
}
	// end inline asm
	selp.b32 	%r2480, %r7513, %r2471, %p28;
	// begin inline asm
	{mul.f16x2 %r7743,%r2480,%r7831;
}
	// end inline asm
	mov.u32 	%r2485, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2483,%r7682,%r2485,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2489, %r7509, %r2483, %p28;
	// begin inline asm
	{mul.f16x2 %r7742,%r2489,%r7844;
}
	// end inline asm
	selp.b32 	%r2492, %r7513, %r2483, %p28;
	// begin inline asm
	{mul.f16x2 %r7740,%r2492,%r7842;
}
	// end inline asm
	mov.u32 	%r2497, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2495,%r7682,%r2497,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2501, %r7509, %r2495, %p28;
	// begin inline asm
	{mul.f16x2 %r7741,%r2501,%r7843;
}
	// end inline asm
	selp.b32 	%r2504, %r7513, %r2495, %p28;
	// begin inline asm
	{mul.f16x2 %r7739,%r2504,%r7841;
}
	// end inline asm
	mov.u32 	%r2509, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2507,%r7682,%r2509,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2513, %r7509, %r2507, %p28;
	// begin inline asm
	{mul.f16x2 %r7738,%r2513,%r7838;
}
	// end inline asm
	selp.b32 	%r2516, %r7513, %r2507, %p28;
	// begin inline asm
	{mul.f16x2 %r7735,%r2516,%r7837;
}
	// end inline asm
	mov.u32 	%r2521, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2519,%r7682,%r2521,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2525, %r7509, %r2519, %p28;
	// begin inline asm
	{mul.f16x2 %r7737,%r2525,%r7594;
}
	// end inline asm
	selp.b32 	%r2528, %r7513, %r2519, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2528,%r7587;
}
	// end inline asm
	mov.u32 	%r2533, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2531,%r7682,%r2533,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2537, %r7509, %r2531, %p28;
	// begin inline asm
	{mul.f16x2 %r7736,%r2537,%r7723;
}
	// end inline asm
	selp.b32 	%r2540, %r7513, %r2531, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2540,%r7721;
}
	// end inline asm
	mov.u32 	%r2545, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2543,%r7682,%r2545,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2549, %r7509, %r2543, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2549,%r7828;
}
	// end inline asm
	selp.b32 	%r2552, %r7513, %r2543, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2552,%r7826;
}
	// end inline asm
	mov.u32 	%r2557, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2555,%r7682,%r2557,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2561, %r7509, %r2555, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2561,%r7827;
}
	// end inline asm
	selp.b32 	%r2564, %r7513, %r2555, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2564,%r7825;
}
	// end inline asm
	mov.u32 	%r2569, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2567,%r7682,%r2569,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2573, %r7509, %r2567, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2573,%r7720;
}
	// end inline asm
	selp.b32 	%r2576, %r7513, %r2567, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2576,%r7719;
}
	// end inline asm
	mov.u32 	%r2581, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2579,%r7682,%r2581,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2585, %r7509, %r2579, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2585,%r7823;
}
	// end inline asm
	selp.b32 	%r2588, %r7513, %r2579, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2588,%r7824;
}
	// end inline asm
	mov.u32 	%r2593, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2591,%r7682,%r2593,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2597, %r7509, %r2591, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2597,%r7829;
}
	// end inline asm
	selp.b32 	%r2600, %r7513, %r2591, %p28;
	// begin inline asm
	{mul.f16x2 %r7722,%r2600,%r7832;
}
	// end inline asm
	mov.u32 	%r2605, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2603,%r7682,%r2605,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2609, %r7509, %r2603, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2609,%r7840;
}
	// end inline asm
	selp.b32 	%r2612, %r7513, %r2603, %p28;
	// begin inline asm
	{mul.f16x2 %r7721,%r2612,%r7846;
}
	// end inline asm
	mov.u32 	%r2617, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2615,%r7682,%r2617,%r2342,%r2619;
}
	// end inline asm
	selp.b32 	%r2621, %r7509, %r2615, %p28;
	// begin inline asm
	{mul.f16x2 %r7720,%r2621,%r7835;
}
	// end inline asm
	selp.b32 	%r2624, %r7513, %r2615, %p28;
	// begin inline asm
	{mul.f16x2 %r7719,%r2624,%r7836;
}
	// end inline asm
	rem.s32 	%r674, %r2630, %r69;
	rem.s32 	%r675, %r2635, %r7405;
	mad.lo.s32 	%r676, %r2649, %r2650, %r2647;
	sub.s32 	%r677, %r2657, %r2660;
	mad.lo.s32 	%r678, %r2659, %r2663, %r2658;
	ld.param.u64 	%rd290, [%rd1+168];
	cvta.to.global.u64 	%rd291, %rd290;
	shl.b32 	%r2713, %r678, 1;
	mul.wide.s32 	%rd292, %r2713, 4;
	add.s64 	%rd25, %rd291, %rd292;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2916, %r1803, 1;
	setp.lt.s32 	%p239, %r678, %r2916;
	setp.eq.s32 	%p240, %r433, %r46;
	setp.gt.s32 	%p241, %r678, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7685, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7686, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2716, %r1803, 1;
	setp.lt.s32 	%p234, %r678, %r2716;
	setp.gt.s32 	%p235, %r678, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7683, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7684, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7685, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7686, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2924, 0;
	mov.u32 	%r2935, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7681,%r2924,%r2342,%r2935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7685,%r2922;
}
	// end inline asm
	mov.u32 	%r2933, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2931,%r7681,%r2933,%r2342,%r2935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2936,%r7686,%r2931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7688,%r2927,%r2936;
}
	// end inline asm
	setp.eq.s32 	%p244, %r434, 0;
	mov.u32 	%r7687, %r7688;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7687, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r7687;
}
	// end inline asm
	setp.eq.s32 	%p245, %r434, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7688, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r7688;
}
	// end inline asm
	mov.u32 	%r2957, 2;
	mov.u32 	%r2968, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7681,%r2957,%r2342,%r2968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7685,%r2955;
}
	// end inline asm
	mov.u32 	%r2966, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2964,%r7681,%r2966,%r2342,%r2968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2969,%r7686,%r2964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7690,%r2960,%r2969;
}
	// end inline asm
	mov.u32 	%r7689, %r7690;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7689, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7765,%r7765,%r7689;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7690, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7763,%r7763,%r7690;
}
	// end inline asm
	mov.u32 	%r2990, 4;
	mov.u32 	%r3001, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7681,%r2990,%r2342,%r3001;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7685,%r2988;
}
	// end inline asm
	mov.u32 	%r2999, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2997,%r7681,%r2999,%r2342,%r3001;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3002,%r7686,%r2997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7692,%r2993,%r3002;
}
	// end inline asm
	mov.u32 	%r7691, %r7692;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7691, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r7691;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7692, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r7692;
}
	// end inline asm
	mov.u32 	%r3023, 6;
	mov.u32 	%r3034, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7681,%r3023,%r2342,%r3034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7685,%r3021;
}
	// end inline asm
	mov.u32 	%r3032, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r3030,%r7681,%r3032,%r2342,%r3034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3035,%r7686,%r3030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7694,%r3026,%r3035;
}
	// end inline asm
	mov.u32 	%r7693, %r7694;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7693, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r7693;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7694, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r7694;
}
	// end inline asm
	mov.u32 	%r3056, 8;
	mov.u32 	%r3067, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7681,%r3056,%r2342,%r3067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7685,%r3054;
}
	// end inline asm
	mov.u32 	%r3065, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3063,%r7681,%r3065,%r2342,%r3067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3068,%r7686,%r3063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r3059,%r3068;
}
	// end inline asm
	mov.u32 	%r7695, %r7696;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7695, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7759,%r7759,%r7695;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7696, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7757,%r7757,%r7696;
}
	// end inline asm
	mov.u32 	%r3089, 10;
	mov.u32 	%r3100, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7681,%r3089,%r2342,%r3100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7685,%r3087;
}
	// end inline asm
	mov.u32 	%r3098, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3096,%r7681,%r3098,%r2342,%r3100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3101,%r7686,%r3096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r3092,%r3101;
}
	// end inline asm
	mov.u32 	%r7697, %r7698;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7697, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7756,%r7756,%r7697;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7698, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7753,%r7753,%r7698;
}
	// end inline asm
	mov.u32 	%r3122, 12;
	mov.u32 	%r3133, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7681,%r3122,%r2342,%r3133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7685,%r3120;
}
	// end inline asm
	mov.u32 	%r3131, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3129,%r7681,%r3131,%r2342,%r3133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3134,%r7686,%r3129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r3125,%r3134;
}
	// end inline asm
	mov.u32 	%r7699, %r7700;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7699, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r7699;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7700, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r7700;
}
	// end inline asm
	mov.u32 	%r3155, 14;
	mov.u32 	%r3166, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7681,%r3155,%r2342,%r3166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7685,%r3153;
}
	// end inline asm
	mov.u32 	%r3164, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3162,%r7681,%r3164,%r2342,%r3166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3167,%r7686,%r3162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r3158,%r3167;
}
	// end inline asm
	mov.u32 	%r7701, %r7702;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7701, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7750,%r7750,%r7701;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7702, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r7702;
}
	// end inline asm
	mov.u32 	%r3188, 16;
	mov.u32 	%r3199, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7681,%r3188,%r2342,%r3199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7685,%r3186;
}
	// end inline asm
	mov.u32 	%r3197, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3195,%r7681,%r3197,%r2342,%r3199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3200,%r7686,%r3195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r3191,%r3200;
}
	// end inline asm
	mov.u32 	%r7703, %r7704;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7703, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7749,%r7749,%r7703;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7704, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r7704;
}
	// end inline asm
	mov.u32 	%r3221, 18;
	mov.u32 	%r3232, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7681,%r3221,%r2342,%r3232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7685,%r3219;
}
	// end inline asm
	mov.u32 	%r3230, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3228,%r7681,%r3230,%r2342,%r3232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3233,%r7686,%r3228;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r3224,%r3233;
}
	// end inline asm
	mov.u32 	%r7705, %r7706;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7705, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7744,%r7744,%r7705;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7706, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r7706;
}
	// end inline asm
	mov.u32 	%r3254, 20;
	mov.u32 	%r3265, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3252,%r7681,%r3254,%r2342,%r3265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7685,%r3252;
}
	// end inline asm
	mov.u32 	%r3263, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3261,%r7681,%r3263,%r2342,%r3265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3266,%r7686,%r3261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7708,%r3257,%r3266;
}
	// end inline asm
	mov.u32 	%r7707, %r7708;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7707, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7742,%r7742,%r7707;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7708, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r7708;
}
	// end inline asm
	mov.u32 	%r3287, 22;
	mov.u32 	%r3298, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3285,%r7681,%r3287,%r2342,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3290,%r7685,%r3285;
}
	// end inline asm
	mov.u32 	%r3296, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3294,%r7681,%r3296,%r2342,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3299,%r7686,%r3294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r3290,%r3299;
}
	// end inline asm
	mov.u32 	%r7709, %r7710;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7709, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r7709;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7710, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r7710;
}
	// end inline asm
	mov.u32 	%r3320, 24;
	mov.u32 	%r3331, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3318,%r7681,%r3320,%r2342,%r3331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3323,%r7685,%r3318;
}
	// end inline asm
	mov.u32 	%r3329, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3327,%r7681,%r3329,%r2342,%r3331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3332,%r7686,%r3327;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r3323,%r3332;
}
	// end inline asm
	mov.u32 	%r7711, %r7712;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7711, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r7711;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7712, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r7712;
}
	// end inline asm
	mov.u32 	%r3353, 26;
	mov.u32 	%r3364, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3351,%r7681,%r3353,%r2342,%r3364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3356,%r7685,%r3351;
}
	// end inline asm
	mov.u32 	%r3362, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3360,%r7681,%r3362,%r2342,%r3364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3365,%r7686,%r3360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r3356,%r3365;
}
	// end inline asm
	mov.u32 	%r7713, %r7714;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7713, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7713;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7714, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r7714;
}
	// end inline asm
	mov.u32 	%r3386, 28;
	mov.u32 	%r3397, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3384,%r7681,%r3386,%r2342,%r3397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3389,%r7685,%r3384;
}
	// end inline asm
	mov.u32 	%r3395, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3393,%r7681,%r3395,%r2342,%r3397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3398,%r7686,%r3393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r3389,%r3398;
}
	// end inline asm
	mov.u32 	%r7715, %r7716;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7715, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7715;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7716, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r7716;
}
	// end inline asm
	mov.u32 	%r3428, 31;
	mov.u32 	%r3419, 30;
	mov.u32 	%r3430, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3417,%r7681,%r3419,%r2342,%r3430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3422,%r7685,%r3417;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3426,%r7681,%r3428,%r2342,%r3430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3431,%r7686,%r3426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r3422,%r3431;
}
	// end inline asm
	mov.u32 	%r7717, %r7718;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7717, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r7717;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7718, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r7718;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7683, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7684, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r677, %r1785;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2818,%r7683,%r7665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r2818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2824,%r7683,%r7663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7754,%r7754,%r2824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2830,%r7683,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7756,%r7756,%r2830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2836,%r7683,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r2836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2842,%r7683,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r2842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2848,%r7683,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r2848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2854,%r7684,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r2854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2860,%r7684,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7741,%r7741,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2866,%r7683,%r7664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r2866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2872,%r7683,%r7662;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r2872;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2878,%r7683,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7753,%r7753,%r2878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2884,%r7683,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r2884;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2890,%r7683,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r2890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2896,%r7683,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r2896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2902,%r7684,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r2902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2908,%r7684,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r2908;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2721, %r1785, -2;
	setp.ne.s32 	%p238, %r677, %r2721;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2722,%r7683,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7744,%r7744,%r2722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2728,%r7683,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r2728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2734,%r7684,%r7665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r2734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2740,%r7684,%r7663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7748,%r7748,%r2740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2746,%r7684,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7750,%r7750,%r2746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2752,%r7684,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2758,%r7684,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2764,%r7684,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r2764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2770,%r7683,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r2770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2776,%r7683,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r2776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2782,%r7684,%r7664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r2782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2788,%r7684,%r7662;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7745,%r7745,%r2788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2794,%r7684,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r2794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2800,%r7684,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2806,%r7684,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r2806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2812,%r7684,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r2812;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7863, %r2255;
	mov.u32 	%r7864, %r2255;
	mov.u32 	%r7869, %r2255;
	mov.u32 	%r7870, %r2255;
	mov.u32 	%r7871, %r2255;
	mov.u32 	%r7872, %r2255;
	mov.u32 	%r7873, %r2255;
	mov.u32 	%r7874, %r2255;
	mov.u32 	%r7881, %r2255;
	mov.u32 	%r7882, %r2255;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3449, %r1776, 320;
	add.s32 	%r3450, %r41, -1;
	mul.lo.s32 	%r3451, %r42, 320;
	mad.lo.s32 	%r3452, %r3449, %r3450, %r3451;
	add.s32 	%r3455, %r1853, -64;
	mad.lo.s32 	%r3460, %r3455, %r2243, %r2240;
	add.s32 	%r3461, %r3452, %r3460;
	shl.b32 	%r3462, %r3461, 2;
	mov.u32 	%r3463, _ZN6kernel5shmemE;
	add.s32 	%r3464, %r3463, %r3462;
	shl.b32 	%r3465, %r46, 4;
	add.s32 	%r3466, %r3464, %r3465;
	ld.shared.v4.u32 	{%r7874, %r7872, %r7864, %r7863}, [%r3466];
	shl.b32 	%r3471, %r46, 3;
	add.s32 	%r3472, %r3464, %r3471;
	ld.shared.v2.u32 	{%r7873, %r7871}, [%r3472+512];
	ld.shared.v4.u32 	{%r7882, %r7881, %r7870, %r7869}, [%r3466+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7865, %r2255;
	mov.u32 	%r7866, %r2255;
	mov.u32 	%r7867, %r2255;
	mov.u32 	%r7868, %r2255;
	mov.u32 	%r7875, %r2255;
	mov.u32 	%r7876, %r2255;
	mov.u32 	%r7877, %r2255;
	mov.u32 	%r7878, %r2255;
	mov.u32 	%r7879, %r2255;
	mov.u32 	%r7880, %r2255;
	mov.u32 	%r7883, %r2255;
	mov.u32 	%r7884, %r2255;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3484, %r2639, 384, %r2246;
	add.s32 	%r3487, %r42, -1;
	mad.lo.s32 	%r3488, %r2241, %r3487, %r3484;
	add.s32 	%r3494, %r3488, %r2244;
	shl.b32 	%r3495, %r3494, 2;
	mov.u32 	%r3496, _ZN6kernel5shmemE;
	add.s32 	%r3497, %r3496, %r3495;
	shl.b32 	%r3498, %r46, 4;
	add.s32 	%r3499, %r3497, %r3498;
	ld.shared.v4.u32 	{%r7884, %r7883, %r7879, %r7877}, [%r3499];
	shl.b32 	%r3504, %r46, 3;
	add.s32 	%r3505, %r3497, %r3504;
	ld.shared.v2.u32 	{%r7880, %r7878}, [%r3505+512];
	ld.shared.v4.u32 	{%r7876, %r7875, %r7867, %r7865}, [%r3499+768];
	mov.u32 	%r7866, %r2255;
	mov.u32 	%r7868, %r2255;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7395, %r3505, 512;
	ld.shared.v2.u32 	{%r7868, %r7866}, [%r7395+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2243;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3515, %r1775, %r41;
	mul.lo.s32 	%r3517, %r70, %r42;
	mad.lo.s32 	%r3518, %r3515, 384, %r3517;
	mad.lo.s32 	%r3521, %r2241, %r2243, %r3518;
	mad.lo.s32 	%r3524, %r2239, %r2238, %r3521;
	shl.b32 	%r3525, %r3524, 2;
	mov.u32 	%r3526, _ZN6kernel5shmemE;
	add.s32 	%r3527, %r3526, %r3525;
	shl.b32 	%r3528, %r46, 4;
	add.s32 	%r3529, %r3527, %r3528;
	ld.shared.v4.u32 	{%r7793, %r7796, %r7800, %r7799}, [%r3529];

$L__BB0_416:
	shl.b32 	%r3534, %r42, 8;
	shl.b32 	%r3538, %r1776, 8;
	or.b32  	%r3539, %r3538, 128;
	add.s32 	%r3540, %r41, -1;
	mad.lo.s32 	%r3541, %r3539, %r3540, %r2246;
	add.s32 	%r3542, %r3541, %r3534;
	shl.b32 	%r3543, %r3542, 2;
	mov.u32 	%r3544, _ZN6kernel5shmemE;
	add.s32 	%r3545, %r3544, %r3543;
	setp.ne.s32 	%p281, %r42, %r2243;
	shl.b32 	%r3547, %r46, 4;
	add.s32 	%r936, %r3545, %r3547;
	ld.shared.v4.u32 	{%r7802, %r7804, %r7801, %r7803}, [%r936];
	ld.shared.v4.u32 	{%r7798, %r7795, %r7794, %r7797}, [%r936+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7793, %r7796, %r7800, %r7799}, [%r936+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3561, %r70, %r42;
	sub.s32 	%r3562, %r3561, %r70;
	mad.lo.s32 	%r3565, %r2639, 384, %r3562;
	mad.lo.s32 	%r3568, %r2241, %r2243, %r3565;
	mad.lo.s32 	%r3571, %r2239, %r2238, %r3568;
	shl.b32 	%r3572, %r3571, 2;
	mov.u32 	%r3573, _ZN6kernel5shmemE;
	add.s32 	%r3574, %r3573, %r3572;
	shl.b32 	%r3575, %r46, 4;
	add.s32 	%r961, %r3574, %r3575;
	ld.shared.v4.u32 	{%r7813, %r7812, %r7817, %r7815}, [%r961];
	ld.shared.v4.u32 	{%r7811, %r7808, %r7805, %r7806}, [%r961+512];
	ld.shared.v4.u32 	{%r7810, %r7807, %r7809, %r7816}, [%r961+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7819, %r7820, %r7814, %r7818}, [%r961+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd573, [%rd1+104];
	cvta.to.global.u64 	%rd572, %rd573;
	mad.lo.s32 	%r3593, %r674, %r1778, %r44;
	mul.lo.s32 	%r3594, %r1776, %r3593;
	mul.lo.s32 	%r3595, %r3594, 768;
	mad.lo.s32 	%r3596, %r42, 384, %r3595;
	add.s32 	%r3597, %r3596, -64;
	mul.wide.s32 	%rd295, %r3597, 4;
	add.s64 	%rd296, %rd572, %rd295;
	add.s64 	%rd298, %rd296, %rd297;
	ld.global.v4.u32 	{%r7828, %r7826, %r7835, %r7836}, [%rd298+256];
	ld.global.v4.u32 	{%r7834, %r7831, %r7823, %r7824}, [%rd298+1024];
	add.s64 	%rd27, %rd296, %rd299;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7829, %r7832}, [%rd27];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2243;
	ld.global.v2.u32 	{%r7827, %r7825}, [%rd27+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7833, %r7830}, [%rd27+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd575, [%rd1+104];
	cvta.to.global.u64 	%rd574, %rd575;
	mad.lo.s32 	%r3614, %r675, %r1777, %r43;
	mul.lo.s32 	%r3618, %r3614, %r1854;
	mad.lo.s32 	%r3621, %r2639, 384, %r3618;
	add.s32 	%r3622, %r3621, -64;
	mad.lo.s32 	%r3625, %r1856, %r69, %r3622;
	mul.wide.s32 	%rd300, %r3625, 4;
	add.s64 	%rd301, %rd574, %rd300;
	add.s64 	%rd303, %rd301, %rd297;
	ld.global.v4.u32 	{%r7848, %r7847, %r7843, %r7841}, [%rd303+256];
	ld.global.v4.u32 	{%r7838, %r7837, %r7840, %r7846}, [%rd303+1024];
	add.s64 	%rd305, %rd301, %rd299;
	ld.global.v2.u32 	{%r7844, %r7842}, [%rd305+768];
	ld.global.v2.u32 	{%r7829, %r7832}, [%rd305+1536];

$L__BB0_428:
	add.s32 	%r3638, %r1780, -1;
	setp.ge.s32 	%p288, %r676, %r3638;
	setp.lt.s32 	%p289, %r676, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r677, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3639, %r1781, -2;
	setp.ge.s32 	%p293, %r677, %r3639;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd577, [%rd1+112];
	cvta.to.global.u64 	%rd576, %rd577;
	mad.lo.s32 	%r1056, %r677, %r1780, %r676;
	shl.b32 	%r3640, %r1056, 6;
	mul.wide.s32 	%rd308, %r3640, 4;
	add.s64 	%rd29, %rd576, %rd308;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd310, %rd29, %rd299;
	ld.global.v2.u32 	{%r7868, %r7866}, [%rd310+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3643, %r1780, 5;
	cvt.s64.s32 	%rd311, %r3643;
	cvt.s64.s32 	%rd312, %r46;
	add.s64 	%rd313, %rd311, %rd312;
	shl.b64 	%rd314, %rd313, 3;
	add.s64 	%rd315, %rd29, %rd314;
	ld.global.v2.u32 	{%r7873, %r7871}, [%rd315];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3646, %r1780, 5;
	neg.s32 	%r3647, %r3646;
	cvt.s64.s32 	%rd316, %r3647;
	cvt.s64.s32 	%rd317, %r46;
	add.s64 	%rd318, %rd316, %rd317;
	shl.b64 	%rd319, %rd318, 3;
	add.s64 	%rd320, %rd29, %rd319;
	ld.global.v2.u32 	{%r7880, %r7878}, [%rd320];

$L__BB0_435:
	mad.lo.s32 	%r7406, %r677, %r1780, %r676;
	ld.param.u64 	%rd579, [%rd1+112];
	cvta.to.global.u64 	%rd578, %rd579;
	shl.b32 	%r3650, %r1781, 6;
	shl.b32 	%r3651, %r7406, 7;
	mad.lo.s32 	%r3652, %r3650, %r1780, %r3651;
	mul.wide.s32 	%rd321, %r3652, 4;
	add.s64 	%rd30, %rd578, %rd321;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3653, %r1780, 5;
	cvt.s64.s32 	%rd322, %r3653;
	cvt.s64.s32 	%rd323, %r46;
	add.s64 	%rd324, %rd322, %rd323;
	shl.b64 	%rd325, %rd324, 4;
	add.s64 	%rd326, %rd30, %rd325;
	ld.global.v4.u32 	{%r7874, %r7872, %r7864, %r7863}, [%rd326];
	shl.b32 	%r3658, %r1780, 6;
	add.s32 	%r3659, %r3658, -32;
	cvt.s64.s32 	%rd327, %r3659;
	add.s64 	%rd328, %rd327, %rd323;
	shl.b64 	%rd329, %rd328, 4;
	add.s64 	%rd330, %rd30, %rd329;
	ld.global.v4.u32 	{%r7882, %r7881, %r7870, %r7869}, [%rd330];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3664, %r1780, 5;
	xor.b32  	%r3665, %r3664, -32;
	cvt.s64.s32 	%rd331, %r3665;
	cvt.s64.s32 	%rd332, %r46;
	add.s64 	%rd333, %rd331, %rd332;
	shl.b64 	%rd334, %rd333, 4;
	add.s64 	%rd335, %rd30, %rd334;
	ld.global.v4.u32 	{%r7884, %r7883, %r7879, %r7877}, [%rd335];
	add.s64 	%rd337, %rd30, %rd297;
	ld.global.v4.u32 	{%r7876, %r7875, %r7867, %r7865}, [%rd337];

$L__BB0_439:
	mov.u32 	%r3679, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3675,%r7628,%r435,%r2342,%r3679;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3675;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7628;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3682, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3683,%r7637,%r3682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3686,%r7508,%r3683;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7885,%r7766;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7885,%r7509,%r3683;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3699, 31;
	mov.u32 	%r3722, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3697,%r7885,%r3699,%r2342,%r3722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3702,%r3686,%r3697;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3705,%r7636,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3708,%r3705,%r3702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3711,%r7658,%r3708;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3714,%r7766,%r3711;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3718,%r7629,%r435,%r2342,%r3722;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3718;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7629;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3725, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3726,%r7638,%r3725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3729,%r7508,%r3726;
}
	// end inline asm
	mov.u32 	%r7886, %r7765;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7886,%r7509,%r3726;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3740,%r7886,%r3699,%r2342,%r3722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3745,%r3729,%r3740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3748,%r7636,%r7659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r3745,%r3748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r7657,%r3751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3757,%r7765,%r3754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3760,%r7628,%r7637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3763,%r7512,%r3760;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7887,%r7764;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7887,%r7513,%r3760;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3776, 31;
	mov.u32 	%r3778, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3774,%r7887,%r3776,%r2342,%r3778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3779,%r3763,%r3774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3782,%r7627,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r3782,%r3779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3788,%r7653,%r3785;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3791,%r7764,%r3788;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3794,%r7629,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3797,%r7512,%r3794;
}
	// end inline asm
	mov.u32 	%r7888, %r7763;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7888,%r7513,%r3794;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3806,%r7888,%r3776,%r2342,%r3778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3811,%r3797,%r3806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3814,%r7627,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3817,%r3811,%r3814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3820,%r7652,%r3817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3823,%r7763,%r3820;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3827,%r7612,%r435,%r2342,%r3778;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3827;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7612;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3834, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r7620,%r3834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r7508,%r3835;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7889,%r7762;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7889,%r7509,%r3835;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3853, 31;
	mov.u32 	%r3855, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3851,%r7889,%r3853,%r2342,%r3855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3856,%r3838,%r3851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3859,%r7619,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r3859,%r3856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3865,%r7650,%r3862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r7762,%r3865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3871,%r7612,%r7620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3874,%r7512,%r3871;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7890,%r7761;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7890,%r7513,%r3871;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3887, 31;
	mov.u32 	%r3910, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3885,%r7890,%r3887,%r2342,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3890,%r3874,%r3885;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3893,%r7611,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3896,%r3893,%r3890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3899,%r7648,%r3896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3902,%r7761,%r3899;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3906,%r7596,%r435,%r2342,%r3910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3906;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7596;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3913, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r7601,%r3913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3917,%r7508,%r3914;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7891,%r7760;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7891,%r7509,%r3914;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3932, 31;
	mov.u32 	%r3955, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3930,%r7891,%r3932,%r2342,%r3955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3935,%r3917,%r3930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3938,%r7600,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3941,%r3938,%r3935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3944,%r7884,%r3941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3947,%r7760,%r3944;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3951,%r7597,%r435,%r2342,%r3955;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3951;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7597;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3958, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3959,%r7602,%r3958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3962,%r7508,%r3959;
}
	// end inline asm
	mov.u32 	%r7892, %r7759;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7892,%r7509,%r3959;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3973,%r7892,%r3932,%r2342,%r3955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3978,%r3962,%r3973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3981,%r7600,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r3978,%r3981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3987,%r7645,%r3984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3990,%r7759,%r3987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3993,%r7596,%r7601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3996,%r7512,%r3993;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7893,%r7758;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7893,%r7513,%r3993;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r4009, 31;
	mov.u32 	%r4011, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4007,%r7893,%r4009,%r2342,%r4011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4012,%r3996,%r4007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4015,%r7595,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4018,%r4015,%r4012;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4021,%r7883,%r4018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4024,%r7758,%r4021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r7597,%r7602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4030,%r7512,%r4027;
}
	// end inline asm
	mov.u32 	%r7894, %r7757;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7894,%r7513,%r4027;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4039,%r7894,%r4009,%r2342,%r4011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4044,%r4030,%r4039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4047,%r7595,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4050,%r4044,%r4047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4053,%r7642,%r4050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4056,%r7757,%r4053;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4060,%r7584,%r435,%r2342,%r4011;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4060;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7584;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4067, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4068,%r7591,%r4067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4071,%r7508,%r4068;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7895,%r7756;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7895,%r7509,%r4068;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4086, 31;
	mov.u32 	%r4109, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4084,%r7895,%r4086,%r2342,%r4109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4089,%r4071,%r4084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4092,%r7590,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4095,%r4092,%r4089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4098,%r574,%r4095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7661,%r7756,%r4098;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4105,%r7585,%r435,%r2342,%r4109;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4105;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7585;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4112, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r7592,%r4112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4116,%r7508,%r4113;
}
	// end inline asm
	mov.u32 	%r7896, %r7755;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7896,%r7509,%r4113;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4127,%r7896,%r4086,%r2342,%r4109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4132,%r4116,%r4127;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4135,%r7590,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4138,%r4132,%r4135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4141,%r573,%r4138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r7755,%r4141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4147,%r7591,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4150,%r7592,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4153,%r4147,%r4150;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4156,%r7633,%r4153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4159,%r7754,%r4156;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;

	mov.u32 	%r7754, %r4159;

$L__BB0_472:
	// begin inline asm
	{sub.f16x2 %r4164,%r7584,%r7591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4167,%r7512,%r4164;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7898,%r7753;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7898,%r7513,%r4164;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4178, 31;
	mov.u32 	%r4180, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4176,%r7898,%r4178,%r2342,%r4180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4181,%r4167,%r4176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4184,%r7583,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4187,%r4184,%r4181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4190,%r565,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7656,%r7753,%r4190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4196,%r7585,%r7592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4199,%r7512,%r4196;
}
	// end inline asm
	mov.u32 	%r7899, %r7752;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7899,%r7513,%r4196;
}
	// end inline asm

$L__BB0_477:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4208,%r7899,%r4178,%r2342,%r4180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4213,%r4199,%r4208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r7583,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r4213,%r4216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4222,%r564,%r4219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7655,%r7752,%r4222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r7584,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r7585,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4234,%r4228,%r4231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4237,%r7624,%r4234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4240,%r7751,%r4237;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;

	mov.u32 	%r7751, %r4240;

$L__BB0_479:
	mov.u32 	%r4250, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4246,%r7573,%r435,%r2342,%r4250;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4246;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7573;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4253, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4254,%r7578,%r4253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4257,%r7508,%r4254;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r7901,%r7750;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r7901,%r7509,%r4254;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4270, 31;
	mov.u32 	%r4293, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4268,%r7901,%r4270,%r2342,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4273,%r4257,%r4268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4276,%r7577,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4279,%r4276,%r4273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4282,%r557,%r4279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7750,%r4282;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4289,%r7574,%r435,%r2342,%r4293;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4289;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7574;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4296, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r7579,%r4296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4300,%r7508,%r4297;
}
	// end inline asm
	mov.u32 	%r7902, %r7749;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r7902,%r7509,%r4297;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4311,%r7902,%r4270,%r2342,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4316,%r4300,%r4311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4319,%r7577,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r4316,%r4319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4325,%r7617,%r4322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4328,%r7749,%r4325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4331,%r7578,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4334,%r7579,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4337,%r4331,%r4334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4340,%r7616,%r4337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4343,%r7748,%r4340;
}
	// end inline asm
	@%p28 bra 	$L__BB0_486;

	mov.u32 	%r7748, %r4343;

$L__BB0_486:
	// begin inline asm
	{sub.f16x2 %r4348,%r7573,%r7578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4351,%r7512,%r4348;
}
	// end inline asm
	@%p28 bra 	$L__BB0_488;
	bra.uni 	$L__BB0_487;

$L__BB0_488:
	// begin inline asm
	{neg.f16x2 %r7904,%r7747;
}
	// end inline asm
	bra.uni 	$L__BB0_489;

$L__BB0_487:
	// begin inline asm
	{mul.f16x2 %r7904,%r7513,%r4348;
}
	// end inline asm

$L__BB0_489:
	mov.u32 	%r4362, 31;
	mov.u32 	%r4364, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4360,%r7904,%r4362,%r2342,%r4364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4365,%r4351,%r4360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4368,%r7572,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4371,%r4368,%r4365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4374,%r549,%r4371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7747,%r4374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4380,%r7574,%r7579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4383,%r7512,%r4380;
}
	// end inline asm
	mov.u32 	%r7905, %r7746;
	@%p28 bra 	$L__BB0_491;

	// begin inline asm
	{mul.f16x2 %r7905,%r7513,%r4380;
}
	// end inline asm

$L__BB0_491:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4392,%r7905,%r4362,%r2342,%r4364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4397,%r4383,%r4392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4400,%r7572,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4403,%r4397,%r4400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4406,%r7609,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4409,%r7746,%r4406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4412,%r7573,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4415,%r7574,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4418,%r4412,%r4415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4421,%r7608,%r4418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4424,%r7745,%r4421;
}
	// end inline asm
	@%p28 bra 	$L__BB0_493;

	mov.u32 	%r7745, %r4424;

$L__BB0_493:
	mov.u32 	%r4434, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4430,%r7564,%r435,%r2342,%r4434;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4430;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7564;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4437, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4438,%r7568,%r4437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4441,%r7508,%r4438;
}
	// end inline asm
	@%p28 bra 	$L__BB0_495;
	bra.uni 	$L__BB0_494;

$L__BB0_495:
	// begin inline asm
	{neg.f16x2 %r7907,%r7744;
}
	// end inline asm
	bra.uni 	$L__BB0_496;

$L__BB0_494:
	// begin inline asm
	{mul.f16x2 %r7907,%r7509,%r4438;
}
	// end inline asm

$L__BB0_496:
	mov.u32 	%r4454, 31;
	mov.u32 	%r4456, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4452,%r7907,%r4454,%r2342,%r4456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4457,%r4441,%r4452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4460,%r7800,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r4460,%r4457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4466,%r7882,%r4463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4469,%r7744,%r4466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4472,%r7564,%r7568;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4475,%r7512,%r4472;
}
	// end inline asm
	@%p28 bra 	$L__BB0_498;
	bra.uni 	$L__BB0_497;

$L__BB0_498:
	// begin inline asm
	{neg.f16x2 %r7908,%r7743;
}
	// end inline asm
	bra.uni 	$L__BB0_499;

$L__BB0_497:
	// begin inline asm
	{mul.f16x2 %r7908,%r7513,%r4472;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4488, 31;
	mov.u32 	%r4511, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4486,%r7908,%r4488,%r2342,%r4511;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4491,%r4475,%r4486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4494,%r7799,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4497,%r4494,%r4491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4500,%r7881,%r4497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4503,%r7743,%r4500;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4507,%r7550,%r435,%r2342,%r4511;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4507;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7550;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4514, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4515,%r7557,%r4514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4518,%r7508,%r4515;
}
	// end inline asm
	mov.u32 	%r7909, %r7742;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7909,%r7509,%r4515;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4529,%r7909,%r4488,%r2342,%r4511;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4534,%r4518,%r4529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4537,%r7810,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4540,%r4534,%r4537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4543,%r7880,%r4540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7742,%r4543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r7811,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4552,%r7557,%r7813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4555,%r4549,%r4552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r7879,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4561,%r7741,%r4558;
}
	// end inline asm
	@%p28 bra 	$L__BB0_503;

	mov.u32 	%r7741, %r4561;

$L__BB0_503:
	// begin inline asm
	{sub.f16x2 %r4566,%r7550,%r7557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4569,%r7512,%r4566;
}
	// end inline asm
	mov.u32 	%r7911, %r7740;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7911,%r7513,%r4566;
}
	// end inline asm

$L__BB0_505:
	mov.u32 	%r4578, 31;
	mov.u32 	%r4580, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4576,%r7911,%r4578,%r2342,%r4580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4581,%r4569,%r4576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r7807,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4587,%r4581,%r4584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4590,%r7878,%r4587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7740,%r4590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4596,%r7808,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r7550,%r7812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4602,%r4596,%r4599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4605,%r7877,%r4602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4608,%r7739,%r4605;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;

	mov.u32 	%r7739, %r4608;

$L__BB0_507:
	// begin inline asm
	{shfl.sync.idx.b32 %r4614,%r7536,%r435,%r2342,%r4580;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4614;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7536;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4621, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4622,%r7543,%r4621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4625,%r7508,%r4622;
}
	// end inline asm
	@%p28 bra 	$L__BB0_509;
	bra.uni 	$L__BB0_508;

$L__BB0_509:
	// begin inline asm
	{neg.f16x2 %r7913,%r7738;
}
	// end inline asm
	bra.uni 	$L__BB0_510;

$L__BB0_508:
	// begin inline asm
	{mul.f16x2 %r7913,%r7509,%r4622;
}
	// end inline asm

$L__BB0_510:
	mov.u32 	%r4638, 31;
	mov.u32 	%r4661, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4636,%r7913,%r4638,%r2342,%r4661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4641,%r4625,%r4636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4644,%r7542,%r7810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4647,%r4644,%r4641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4650,%r7876,%r4647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7738,%r4650;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4657,%r7537,%r435,%r2342,%r4661;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4657;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7537;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4664, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4665,%r7544,%r4664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4668,%r7508,%r4665;
}
	// end inline asm
	mov.u32 	%r7914, %r7737;
	@%p28 bra 	$L__BB0_512;

	// begin inline asm
	{mul.f16x2 %r7914,%r7509,%r4665;
}
	// end inline asm

$L__BB0_512:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4679,%r7914,%r4638,%r2342,%r4661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4684,%r4668,%r4679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4687,%r7542,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4690,%r4684,%r4687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4693,%r7634,%r4690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7737,%r4693;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4699,%r7543,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4702,%r7544,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4705,%r4699,%r4702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4708,%r519,%r4705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4711,%r7736,%r4708;
}
	// end inline asm
	@%p28 bra 	$L__BB0_514;

	mov.u32 	%r7736, %r4711;

$L__BB0_514:
	// begin inline asm
	{sub.f16x2 %r4716,%r7536,%r7543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4719,%r7512,%r4716;
}
	// end inline asm
	@%p28 bra 	$L__BB0_516;
	bra.uni 	$L__BB0_515;

$L__BB0_516:
	// begin inline asm
	{neg.f16x2 %r7916,%r7735;
}
	// end inline asm
	bra.uni 	$L__BB0_517;

$L__BB0_515:
	// begin inline asm
	{mul.f16x2 %r7916,%r7513,%r4716;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4730, 31;
	mov.u32 	%r4732, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4728,%r7916,%r4730,%r2342,%r4732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4733,%r4719,%r4728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4736,%r7535,%r7807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4739,%r4736,%r4733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4742,%r7875,%r4739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7735,%r4742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4748,%r7537,%r7544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4751,%r7512,%r4748;
}
	// end inline asm
	mov.u32 	%r7917, %r7734;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7917,%r7513,%r4748;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4760,%r7917,%r4730,%r2342,%r4732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4765,%r4751,%r4760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r7535,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4771,%r4765,%r4768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4774,%r7625,%r4771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7734,%r4774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4780,%r7536,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4783,%r7537,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4786,%r4780,%r4783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4789,%r511,%r4786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4792,%r7733,%r4789;
}
	// end inline asm
	@%p28 bra 	$L__BB0_521;

	mov.u32 	%r7733, %r4792;

$L__BB0_521:
	mov.u32 	%r4802, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4798,%r7521,%r435,%r2342,%r4802;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4798;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7521;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4805, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4806,%r7529,%r4805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4809,%r7508,%r4806;
}
	// end inline asm
	@%p28 bra 	$L__BB0_523;
	bra.uni 	$L__BB0_522;

$L__BB0_523:
	// begin inline asm
	{neg.f16x2 %r7919,%r7732;
}
	// end inline asm
	bra.uni 	$L__BB0_524;

$L__BB0_522:
	// begin inline asm
	{mul.f16x2 %r7919,%r7509,%r4806;
}
	// end inline asm

$L__BB0_524:
	mov.u32 	%r4822, 31;
	mov.u32 	%r4845, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4820,%r7919,%r4822,%r2342,%r4845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4825,%r4809,%r4820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4828,%r7798,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4831,%r4828,%r4825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4834,%r7874,%r4831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r7732,%r4834;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4841,%r7522,%r435,%r2342,%r4845;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4841;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7522;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4848, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4849,%r7530,%r4848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4852,%r7508,%r4849;
}
	// end inline asm
	mov.u32 	%r7920, %r7731;
	@%p28 bra 	$L__BB0_526;

	// begin inline asm
	{mul.f16x2 %r7920,%r7509,%r4849;
}
	// end inline asm

$L__BB0_526:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4863,%r7920,%r4822,%r2342,%r4845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4868,%r4852,%r4863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4871,%r7798,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4874,%r4868,%r4871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4877,%r7873,%r4874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r7731,%r4877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4883,%r7529,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4886,%r7530,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r4883,%r4886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4892,%r504,%r4889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4895,%r7730,%r4892;
}
	// end inline asm
	@%p28 bra 	$L__BB0_528;

	mov.u32 	%r7730, %r4895;

$L__BB0_528:
	// begin inline asm
	{sub.f16x2 %r4900,%r7521,%r7529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4903,%r7512,%r4900;
}
	// end inline asm
	@%p28 bra 	$L__BB0_530;
	bra.uni 	$L__BB0_529;

$L__BB0_530:
	// begin inline asm
	{neg.f16x2 %r7922,%r7729;
}
	// end inline asm
	bra.uni 	$L__BB0_531;

$L__BB0_529:
	// begin inline asm
	{mul.f16x2 %r7922,%r7513,%r4900;
}
	// end inline asm

$L__BB0_531:
	mov.u32 	%r4914, 31;
	mov.u32 	%r4916, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4912,%r7922,%r4914,%r2342,%r4916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4917,%r4903,%r4912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4920,%r7795,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4923,%r4920,%r4917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4926,%r7872,%r4923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7615,%r7729,%r4926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r7522,%r7530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4935,%r7512,%r4932;
}
	// end inline asm
	mov.u32 	%r7923, %r7728;
	@%p28 bra 	$L__BB0_533;

	// begin inline asm
	{mul.f16x2 %r7923,%r7513,%r4932;
}
	// end inline asm

$L__BB0_533:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4944,%r7923,%r4914,%r2342,%r4916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4949,%r4935,%r4944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r7795,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4955,%r4949,%r4952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4958,%r7871,%r4955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7614,%r7728,%r4958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4964,%r7521,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4967,%r7522,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4970,%r4964,%r4967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4973,%r497,%r4970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4976,%r7727,%r4973;
}
	// end inline asm
	@%p28 bra 	$L__BB0_535;

	mov.u32 	%r7727, %r4976;

$L__BB0_535:
	// begin inline asm
	{sub.f16x2 %r4981,%r7794,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4984,%r7793,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4987,%r4981,%r4984;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4990,%r7870,%r4987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4993,%r7726,%r4990;
}
	// end inline asm
	@%p28 bra 	$L__BB0_537;

	mov.u32 	%r7726, %r4993;

$L__BB0_537:
	// begin inline asm
	{sub.f16x2 %r4996,%r7797,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4999,%r7796,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5002,%r4996,%r4999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5005,%r7869,%r5002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5008,%r7725,%r5005;
}
	// end inline asm
	@%p28 bra 	$L__BB0_539;

	mov.u32 	%r7725, %r5008;

$L__BB0_539:
	mov.u32 	%r5016, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5012,%r7599,%r435,%r2342,%r5016;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5012;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7599;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5019, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r7553,%r5019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5023,%r7508,%r5020;
}
	// end inline asm
	mov.u32 	%r7927, %r7724;
	@%p28 bra 	$L__BB0_541;

	// begin inline asm
	{mul.f16x2 %r7927,%r7509,%r5020;
}
	// end inline asm

$L__BB0_541:
	mov.u32 	%r5034, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5032,%r7927,%r5034,%r2342,%r5016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5037,%r5023,%r5032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5040,%r7814,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5043,%r5037,%r5040;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5046,%r7868,%r5043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r7724,%r5046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5052,%r7809,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5055,%r7553,%r7805;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5058,%r5052,%r5055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5061,%r7867,%r5058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5064,%r7723,%r5061;
}
	// end inline asm
	@%p28 bra 	$L__BB0_543;

	mov.u32 	%r7723, %r5064;

$L__BB0_543:
	// begin inline asm
	{sub.f16x2 %r5069,%r7599,%r7553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5072,%r7512,%r5069;
}
	// end inline asm
	mov.u32 	%r7929, %r7722;
	@%p28 bra 	$L__BB0_545;

	// begin inline asm
	{mul.f16x2 %r7929,%r7513,%r5069;
}
	// end inline asm

$L__BB0_545:
	mov.u32 	%r5081, 31;
	mov.u32 	%r5083, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5079,%r7929,%r5081,%r2342,%r5083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5084,%r5072,%r5079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5087,%r7818,%r7535;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5090,%r5084,%r5087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5093,%r7866,%r5090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r7722,%r5093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5099,%r7816,%r7536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5102,%r7599,%r7806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5105,%r5099,%r5102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5108,%r7865,%r5105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5111,%r7721,%r5108;
}
	// end inline asm
	@%p28 bra 	$L__BB0_547;

	mov.u32 	%r7721, %r5111;

$L__BB0_547:
	// begin inline asm
	{sub.f16x2 %r5116,%r7802,%r7529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5119,%r7801,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5122,%r5116,%r5119;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5125,%r7864,%r5122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5128,%r7720,%r5125;
}
	// end inline asm
	@%p28 bra 	$L__BB0_549;

	mov.u32 	%r7720, %r5128;

$L__BB0_549:
	// begin inline asm
	{sub.f16x2 %r5131,%r7804,%r7521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5134,%r7803,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5137,%r5131,%r5134;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5140,%r7863,%r5137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5143,%r7719,%r5140;
}
	// end inline asm
	@%p28 bra 	$L__BB0_551;

	mov.u32 	%r7719, %r5143;

$L__BB0_551:
	bar.sync 	0;
	ld.param.u64 	%rd338, [%rd1+184];
	cvta.to.global.u64 	%rd32, %rd338;
	add.s32 	%r5146, %r1789, -2;
	setp.lt.s32 	%p350, %r676, %r5146;
	add.s32 	%r5147, %r1790, 3;
	setp.ge.s32 	%p351, %r676, %r5147;
	or.pred  	%p352, %p350, %p351;
	add.s32 	%r5148, %r1791, -2;
	setp.lt.s32 	%p353, %r677, %r5148;
	or.pred  	%p354, %p352, %p353;
	add.s32 	%r5149, %r1792, 2;
	setp.ge.s32 	%p355, %r677, %r5149;
	or.pred  	%p356, %p355, %p354;
	setp.lt.s32 	%p357, %r678, %r1786;
	or.pred  	%p358, %p357, %p356;
	mad.lo.s32 	%r5150, %r1788, %r1787, %r1786;
	setp.ge.s32 	%p359, %r678, %r5150;
	or.pred  	%p360, %p358, %p359;
	@%p360 bra 	$L__BB0_793;

	sub.s32 	%r1323, %r678, %r1786;
	rem.s32 	%r5151, %r1323, %r1787;
	setp.ne.s32 	%p361, %r5151, 0;
	@%p361 bra 	$L__BB0_793;

	div.s32 	%r5152, %r1323, %r1787;
	mov.u32 	%r5153, 8;
	sub.s32 	%r5154, %r5153, %r1789;
	add.s32 	%r5155, %r5154, %r1790;
	mul.lo.s32 	%r5156, %r5152, %r5155;
	mov.u32 	%r5157, 4;
	sub.s32 	%r5158, %r5157, %r1789;
	add.s32 	%r1324, %r5158, %r676;
	sub.s32 	%r5159, %r5157, %r1791;
	add.s32 	%r1325, %r5159, %r677;
	mul.lo.s32 	%r1326, %r5156, 3;
	add.s32 	%r5160, %r1324, %r1326;
	add.s32 	%r5161, %r5160, -2;
	sub.s32 	%r5162, %r5153, %r1791;
	add.s32 	%r5163, %r5162, %r1792;
	mul.lo.s32 	%r1327, %r5161, %r5163;
	add.s32 	%r5164, %r1325, %r1327;
	mul.lo.s32 	%r5165, %r5164, %r58;
	sub.s32 	%r1328, %r5165, %r1793;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p363, %p24;
	@%p363 bra 	$L__BB0_556;

	add.s32 	%r5166, %r1328, %r401;
	mul.wide.s32 	%rd339, %r5166, 4;
	add.s64 	%rd340, %rd32, %rd339;
	mov.u32 	%r5167, 1109917696;
	st.global.u32 	[%rd340], %r5167;

$L__BB0_556:
	not.pred 	%p364, %p26;
	@%p364 bra 	$L__BB0_558;

	add.s32 	%r5168, %r1328, %r402;
	mul.wide.s32 	%rd341, %r5168, 4;
	add.s64 	%rd342, %rd32, %rd341;
	mov.u32 	%r5169, 1109917696;
	st.global.u32 	[%rd342], %r5169;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p366, %p25;
	@%p366 bra 	$L__BB0_561;

	add.s32 	%r5170, %r1328, %r415;
	mul.wide.s32 	%rd343, %r5170, 4;
	add.s64 	%rd344, %rd32, %rd343;
	mov.u32 	%r5171, 1109917696;
	st.global.u32 	[%rd344], %r5171;

$L__BB0_561:
	not.pred 	%p367, %p27;
	@%p367 bra 	$L__BB0_563;

	add.s32 	%r5172, %r1328, %r416;
	mul.wide.s32 	%rd345, %r5172, 4;
	add.s64 	%rd346, %rd32, %rd345;
	mov.u32 	%r5173, 1109917696;
	st.global.u32 	[%rd346], %r5173;

$L__BB0_563:
	mov.u32 	%r5174, 8;
	sub.s32 	%r5175, %r5174, %r1789;
	add.s32 	%r5176, %r5175, %r1790;
	add.s32 	%r1329, %r1326, %r5176;
	add.s32 	%r5177, %r1324, %r1329;
	add.s32 	%r5178, %r5177, -2;
	sub.s32 	%r5179, %r5174, %r1791;
	add.s32 	%r5180, %r5179, %r1792;
	mad.lo.s32 	%r5181, %r5178, %r5180, %r1325;
	mul.lo.s32 	%r5182, %r5181, %r58;
	sub.s32 	%r1330, %r5182, %r1793;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p369, %p24;
	@%p369 bra 	$L__BB0_566;

	add.s32 	%r5183, %r1330, %r401;
	mul.wide.s32 	%rd347, %r5183, 4;
	add.s64 	%rd348, %rd32, %rd347;
	mov.u32 	%r5184, 1109917696;
	st.global.u32 	[%rd348], %r5184;

$L__BB0_566:
	not.pred 	%p370, %p26;
	@%p370 bra 	$L__BB0_568;

	add.s32 	%r5185, %r1330, %r402;
	mul.wide.s32 	%rd349, %r5185, 4;
	add.s64 	%rd350, %rd32, %rd349;
	mov.u32 	%r5186, 1109917696;
	st.global.u32 	[%rd350], %r5186;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p372, %p25;
	@%p372 bra 	$L__BB0_571;

	add.s32 	%r5187, %r1330, %r415;
	mul.wide.s32 	%rd351, %r5187, 4;
	add.s64 	%rd352, %rd32, %rd351;
	mov.u32 	%r5188, 1109917696;
	st.global.u32 	[%rd352], %r5188;

$L__BB0_571:
	not.pred 	%p373, %p27;
	@%p373 bra 	$L__BB0_573;

	add.s32 	%r5189, %r1330, %r416;
	mul.wide.s32 	%rd353, %r5189, 4;
	add.s64 	%rd354, %rd32, %rd353;
	mov.u32 	%r5190, 1109917696;
	st.global.u32 	[%rd354], %r5190;

$L__BB0_573:
	add.s32 	%r1331, %r1325, 1;
	add.s32 	%r5191, %r1331, %r1327;
	mul.lo.s32 	%r5192, %r5191, %r58;
	sub.s32 	%r1332, %r5192, %r1793;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p375, %p24;
	@%p375 bra 	$L__BB0_576;

	add.s32 	%r5193, %r1332, %r401;
	mul.wide.s32 	%rd355, %r5193, 4;
	add.s64 	%rd356, %rd32, %rd355;
	mov.u32 	%r5194, 1109917696;
	st.global.u32 	[%rd356], %r5194;

$L__BB0_576:
	not.pred 	%p376, %p26;
	@%p376 bra 	$L__BB0_578;

	add.s32 	%r5195, %r1332, %r402;
	mul.wide.s32 	%rd357, %r5195, 4;
	add.s64 	%rd358, %rd32, %rd357;
	mov.u32 	%r5196, 1109917696;
	st.global.u32 	[%rd358], %r5196;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p378, %p25;
	@%p378 bra 	$L__BB0_581;

	add.s32 	%r5197, %r1332, %r415;
	mul.wide.s32 	%rd359, %r5197, 4;
	add.s64 	%rd360, %rd32, %rd359;
	mov.u32 	%r5198, 1109917696;
	st.global.u32 	[%rd360], %r5198;

$L__BB0_581:
	not.pred 	%p379, %p27;
	@%p379 bra 	$L__BB0_583;

	add.s32 	%r5199, %r1332, %r416;
	mul.wide.s32 	%rd361, %r5199, 4;
	add.s64 	%rd362, %rd32, %rd361;
	mov.u32 	%r5200, 1109917696;
	st.global.u32 	[%rd362], %r5200;

$L__BB0_583:
	add.s32 	%r1333, %r1324, -1;
	add.s32 	%r5201, %r1333, %r1326;
	mov.u32 	%r5202, 8;
	sub.s32 	%r5203, %r5202, %r1791;
	add.s32 	%r5204, %r5203, %r1792;
	mul.lo.s32 	%r1334, %r5201, %r5204;
	add.s32 	%r1335, %r1325, -1;
	add.s32 	%r5205, %r1335, %r1334;
	mul.lo.s32 	%r5206, %r5205, %r58;
	sub.s32 	%r1336, %r5206, %r1793;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p381, %p24;
	@%p381 bra 	$L__BB0_586;

	add.s32 	%r5207, %r1336, %r401;
	mul.wide.s32 	%rd363, %r5207, 4;
	add.s64 	%rd364, %rd32, %rd363;
	mov.u32 	%r5208, 1109917696;
	st.global.u32 	[%rd364], %r5208;

$L__BB0_586:
	not.pred 	%p382, %p26;
	@%p382 bra 	$L__BB0_588;

	add.s32 	%r5209, %r1336, %r402;
	mul.wide.s32 	%rd365, %r5209, 4;
	add.s64 	%rd366, %rd32, %rd365;
	mov.u32 	%r5210, 1109917696;
	st.global.u32 	[%rd366], %r5210;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p384, %p25;
	@%p384 bra 	$L__BB0_591;

	add.s32 	%r5211, %r1336, %r415;
	mul.wide.s32 	%rd367, %r5211, 4;
	add.s64 	%rd368, %rd32, %rd367;
	mov.u32 	%r5212, 1109917696;
	st.global.u32 	[%rd368], %r5212;

$L__BB0_591:
	not.pred 	%p385, %p27;
	@%p385 bra 	$L__BB0_593;

	add.s32 	%r5213, %r1336, %r416;
	mul.wide.s32 	%rd369, %r5213, 4;
	add.s64 	%rd370, %rd32, %rd369;
	mov.u32 	%r5214, 1109917696;
	st.global.u32 	[%rd370], %r5214;

$L__BB0_593:
	mov.u32 	%r5215, 8;
	sub.s32 	%r5216, %r5215, %r1791;
	add.s32 	%r5217, %r5216, %r1792;
	add.s32 	%r5218, %r1333, %r1329;
	mul.lo.s32 	%r1337, %r5218, %r5217;
	add.s32 	%r5219, %r1335, %r1337;
	mul.lo.s32 	%r5220, %r5219, %r58;
	sub.s32 	%r1338, %r5220, %r1793;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p387, %p24;
	@%p387 bra 	$L__BB0_596;

	add.s32 	%r5221, %r1338, %r401;
	mul.wide.s32 	%rd371, %r5221, 4;
	add.s64 	%rd372, %rd32, %rd371;
	mov.u32 	%r5222, 1109917696;
	st.global.u32 	[%rd372], %r5222;

$L__BB0_596:
	not.pred 	%p388, %p26;
	@%p388 bra 	$L__BB0_598;

	add.s32 	%r5223, %r1338, %r402;
	mul.wide.s32 	%rd373, %r5223, 4;
	add.s64 	%rd374, %rd32, %rd373;
	mov.u32 	%r5224, 1109917696;
	st.global.u32 	[%rd374], %r5224;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p390, %p25;
	@%p390 bra 	$L__BB0_601;

	add.s32 	%r5225, %r1338, %r415;
	mul.wide.s32 	%rd375, %r5225, 4;
	add.s64 	%rd376, %rd32, %rd375;
	mov.u32 	%r5226, 1109917696;
	st.global.u32 	[%rd376], %r5226;

$L__BB0_601:
	not.pred 	%p391, %p27;
	@%p391 bra 	$L__BB0_603;

	add.s32 	%r5227, %r1338, %r416;
	mul.wide.s32 	%rd377, %r5227, 4;
	add.s64 	%rd378, %rd32, %rd377;
	mov.u32 	%r5228, 1109917696;
	st.global.u32 	[%rd378], %r5228;

$L__BB0_603:
	add.s32 	%r5229, %r1325, %r1334;
	mul.lo.s32 	%r5230, %r5229, %r58;
	sub.s32 	%r1339, %r5230, %r1793;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p393, %p24;
	@%p393 bra 	$L__BB0_606;

	add.s32 	%r5231, %r1339, %r401;
	mul.wide.s32 	%rd379, %r5231, 4;
	add.s64 	%rd380, %rd32, %rd379;
	mov.u32 	%r5232, 1109917696;
	st.global.u32 	[%rd380], %r5232;

$L__BB0_606:
	not.pred 	%p394, %p26;
	@%p394 bra 	$L__BB0_608;

	add.s32 	%r5233, %r1339, %r402;
	mul.wide.s32 	%rd381, %r5233, 4;
	add.s64 	%rd382, %rd32, %rd381;
	mov.u32 	%r5234, 1109917696;
	st.global.u32 	[%rd382], %r5234;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p396, %p25;
	@%p396 bra 	$L__BB0_611;

	add.s32 	%r5235, %r1339, %r415;
	mul.wide.s32 	%rd383, %r5235, 4;
	add.s64 	%rd384, %rd32, %rd383;
	mov.u32 	%r5236, 1109917696;
	st.global.u32 	[%rd384], %r5236;

$L__BB0_611:
	not.pred 	%p397, %p27;
	@%p397 bra 	$L__BB0_613;

	add.s32 	%r5237, %r1339, %r416;
	mul.wide.s32 	%rd385, %r5237, 4;
	add.s64 	%rd386, %rd32, %rd385;
	mov.u32 	%r5238, 1109917696;
	st.global.u32 	[%rd386], %r5238;

$L__BB0_613:
	add.s32 	%r5239, %r1325, %r1337;
	mul.lo.s32 	%r5240, %r5239, %r58;
	sub.s32 	%r1340, %r5240, %r1793;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p399, %p24;
	@%p399 bra 	$L__BB0_616;

	add.s32 	%r5241, %r1340, %r401;
	mul.wide.s32 	%rd387, %r5241, 4;
	add.s64 	%rd388, %rd32, %rd387;
	mov.u32 	%r5242, 1109917696;
	st.global.u32 	[%rd388], %r5242;

$L__BB0_616:
	not.pred 	%p400, %p26;
	@%p400 bra 	$L__BB0_618;

	add.s32 	%r5243, %r1340, %r402;
	mul.wide.s32 	%rd389, %r5243, 4;
	add.s64 	%rd390, %rd32, %rd389;
	mov.u32 	%r5244, 1109917696;
	st.global.u32 	[%rd390], %r5244;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p402, %p25;
	@%p402 bra 	$L__BB0_621;

	add.s32 	%r5245, %r1340, %r415;
	mul.wide.s32 	%rd391, %r5245, 4;
	add.s64 	%rd392, %rd32, %rd391;
	mov.u32 	%r5246, 1109917696;
	st.global.u32 	[%rd392], %r5246;

$L__BB0_621:
	not.pred 	%p403, %p27;
	@%p403 bra 	$L__BB0_623;

	add.s32 	%r5247, %r1340, %r416;
	mul.wide.s32 	%rd393, %r5247, 4;
	add.s64 	%rd394, %rd32, %rd393;
	mov.u32 	%r5248, 1109917696;
	st.global.u32 	[%rd394], %r5248;

$L__BB0_623:
	mov.u32 	%r5249, 8;
	sub.s32 	%r5250, %r5249, %r1789;
	add.s32 	%r5251, %r5250, %r1790;
	add.s32 	%r1341, %r1329, %r5251;
	add.s32 	%r5252, %r1333, %r1341;
	sub.s32 	%r5253, %r5249, %r1791;
	add.s32 	%r5254, %r5253, %r1792;
	mul.lo.s32 	%r1342, %r5252, %r5254;
	add.s32 	%r5255, %r1325, %r1342;
	mul.lo.s32 	%r5256, %r5255, %r58;
	sub.s32 	%r1343, %r5256, %r1793;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p405, %p24;
	@%p405 bra 	$L__BB0_626;

	add.s32 	%r5257, %r1343, %r401;
	mul.wide.s32 	%rd395, %r5257, 4;
	add.s64 	%rd396, %rd32, %rd395;
	mov.u32 	%r5258, 1109917696;
	st.global.u32 	[%rd396], %r5258;

$L__BB0_626:
	not.pred 	%p406, %p26;
	@%p406 bra 	$L__BB0_628;

	add.s32 	%r5259, %r1343, %r402;
	mul.wide.s32 	%rd397, %r5259, 4;
	add.s64 	%rd398, %rd32, %rd397;
	mov.u32 	%r5260, 1109917696;
	st.global.u32 	[%rd398], %r5260;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p408, %p25;
	@%p408 bra 	$L__BB0_631;

	add.s32 	%r5261, %r1343, %r415;
	mul.wide.s32 	%rd399, %r5261, 4;
	add.s64 	%rd400, %rd32, %rd399;
	mov.u32 	%r5262, 1109917696;
	st.global.u32 	[%rd400], %r5262;

$L__BB0_631:
	not.pred 	%p409, %p27;
	@%p409 bra 	$L__BB0_633;

	add.s32 	%r5263, %r1343, %r416;
	mul.wide.s32 	%rd401, %r5263, 4;
	add.s64 	%rd402, %rd32, %rd401;
	mov.u32 	%r5264, 1109917696;
	st.global.u32 	[%rd402], %r5264;

$L__BB0_633:
	add.s32 	%r7407, %r1325, 1;
	add.s32 	%r5265, %r7407, %r1334;
	mul.lo.s32 	%r5266, %r5265, %r58;
	sub.s32 	%r1344, %r5266, %r1793;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p411, %p24;
	@%p411 bra 	$L__BB0_636;

	add.s32 	%r5267, %r1344, %r401;
	mul.wide.s32 	%rd403, %r5267, 4;
	add.s64 	%rd404, %rd32, %rd403;
	mov.u32 	%r5268, 1109917696;
	st.global.u32 	[%rd404], %r5268;

$L__BB0_636:
	not.pred 	%p412, %p26;
	@%p412 bra 	$L__BB0_638;

	add.s32 	%r5269, %r1344, %r402;
	mul.wide.s32 	%rd405, %r5269, 4;
	add.s64 	%rd406, %rd32, %rd405;
	mov.u32 	%r5270, 1109917696;
	st.global.u32 	[%rd406], %r5270;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p414, %p25;
	@%p414 bra 	$L__BB0_641;

	add.s32 	%r5271, %r1344, %r415;
	mul.wide.s32 	%rd407, %r5271, 4;
	add.s64 	%rd408, %rd32, %rd407;
	mov.u32 	%r5272, 1109917696;
	st.global.u32 	[%rd408], %r5272;

$L__BB0_641:
	not.pred 	%p415, %p27;
	@%p415 bra 	$L__BB0_643;

	add.s32 	%r5273, %r1344, %r416;
	mul.wide.s32 	%rd409, %r5273, 4;
	add.s64 	%rd410, %rd32, %rd409;
	mov.u32 	%r5274, 1109917696;
	st.global.u32 	[%rd410], %r5274;

$L__BB0_643:
	add.s32 	%r7408, %r1325, 1;
	add.s32 	%r5275, %r7408, %r1337;
	mul.lo.s32 	%r5276, %r5275, %r58;
	sub.s32 	%r1345, %r5276, %r1793;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p417, %p24;
	@%p417 bra 	$L__BB0_646;

	add.s32 	%r5277, %r1345, %r401;
	mul.wide.s32 	%rd411, %r5277, 4;
	add.s64 	%rd412, %rd32, %rd411;
	mov.u32 	%r5278, 1109917696;
	st.global.u32 	[%rd412], %r5278;

$L__BB0_646:
	not.pred 	%p418, %p26;
	@%p418 bra 	$L__BB0_648;

	add.s32 	%r5279, %r1345, %r402;
	mul.wide.s32 	%rd413, %r5279, 4;
	add.s64 	%rd414, %rd32, %rd413;
	mov.u32 	%r5280, 1109917696;
	st.global.u32 	[%rd414], %r5280;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p420, %p25;
	@%p420 bra 	$L__BB0_651;

	add.s32 	%r5281, %r1345, %r415;
	mul.wide.s32 	%rd415, %r5281, 4;
	add.s64 	%rd416, %rd32, %rd415;
	mov.u32 	%r5282, 1109917696;
	st.global.u32 	[%rd416], %r5282;

$L__BB0_651:
	not.pred 	%p421, %p27;
	@%p421 bra 	$L__BB0_653;

	add.s32 	%r5283, %r1345, %r416;
	mul.wide.s32 	%rd417, %r5283, 4;
	add.s64 	%rd418, %rd32, %rd417;
	mov.u32 	%r5284, 1109917696;
	st.global.u32 	[%rd418], %r5284;

$L__BB0_653:
	add.s32 	%r7409, %r1325, 1;
	add.s32 	%r5285, %r7409, %r1342;
	mul.lo.s32 	%r5286, %r5285, %r58;
	sub.s32 	%r1346, %r5286, %r1793;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p423, %p24;
	@%p423 bra 	$L__BB0_656;

	add.s32 	%r5287, %r1346, %r401;
	mul.wide.s32 	%rd419, %r5287, 4;
	add.s64 	%rd420, %rd32, %rd419;
	mov.u32 	%r5288, 1109917696;
	st.global.u32 	[%rd420], %r5288;

$L__BB0_656:
	not.pred 	%p424, %p26;
	@%p424 bra 	$L__BB0_658;

	add.s32 	%r5289, %r1346, %r402;
	mul.wide.s32 	%rd421, %r5289, 4;
	add.s64 	%rd422, %rd32, %rd421;
	mov.u32 	%r5290, 1109917696;
	st.global.u32 	[%rd422], %r5290;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p426, %p25;
	@%p426 bra 	$L__BB0_661;

	add.s32 	%r5291, %r1346, %r415;
	mul.wide.s32 	%rd423, %r5291, 4;
	add.s64 	%rd424, %rd32, %rd423;
	mov.u32 	%r5292, 1109917696;
	st.global.u32 	[%rd424], %r5292;

$L__BB0_661:
	not.pred 	%p427, %p27;
	@%p427 bra 	$L__BB0_663;

	add.s32 	%r5293, %r1346, %r416;
	mul.wide.s32 	%rd425, %r5293, 4;
	add.s64 	%rd426, %rd32, %rd425;
	mov.u32 	%r5294, 1109917696;
	st.global.u32 	[%rd426], %r5294;

$L__BB0_663:
	add.s32 	%r1347, %r1325, 2;
	add.s32 	%r5295, %r1347, %r1334;
	mul.lo.s32 	%r5296, %r5295, %r58;
	sub.s32 	%r1348, %r5296, %r1793;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p429, %p24;
	@%p429 bra 	$L__BB0_666;

	add.s32 	%r5297, %r1348, %r401;
	mul.wide.s32 	%rd427, %r5297, 4;
	add.s64 	%rd428, %rd32, %rd427;
	mov.u32 	%r5298, 1109917696;
	st.global.u32 	[%rd428], %r5298;

$L__BB0_666:
	not.pred 	%p430, %p26;
	@%p430 bra 	$L__BB0_668;

	add.s32 	%r5299, %r1348, %r402;
	mul.wide.s32 	%rd429, %r5299, 4;
	add.s64 	%rd430, %rd32, %rd429;
	mov.u32 	%r5300, 1109917696;
	st.global.u32 	[%rd430], %r5300;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p432, %p25;
	@%p432 bra 	$L__BB0_671;

	add.s32 	%r5301, %r1348, %r415;
	mul.wide.s32 	%rd431, %r5301, 4;
	add.s64 	%rd432, %rd32, %rd431;
	mov.u32 	%r5302, 1109917696;
	st.global.u32 	[%rd432], %r5302;

$L__BB0_671:
	not.pred 	%p433, %p27;
	@%p433 bra 	$L__BB0_673;

	add.s32 	%r5303, %r1348, %r416;
	mul.wide.s32 	%rd433, %r5303, 4;
	add.s64 	%rd434, %rd32, %rd433;
	mov.u32 	%r5304, 1109917696;
	st.global.u32 	[%rd434], %r5304;

$L__BB0_673:
	add.s32 	%r7410, %r1325, -1;
	mov.u32 	%r5305, 8;
	sub.s32 	%r5306, %r5305, %r1791;
	add.s32 	%r5307, %r5306, %r1792;
	mul.lo.s32 	%r1349, %r5177, %r5307;
	add.s32 	%r5309, %r7410, %r1349;
	mul.lo.s32 	%r5310, %r5309, %r58;
	sub.s32 	%r1350, %r5310, %r1793;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p435, %p24;
	@%p435 bra 	$L__BB0_676;

	add.s32 	%r5311, %r1350, %r401;
	mul.wide.s32 	%rd435, %r5311, 4;
	add.s64 	%rd436, %rd32, %rd435;
	mov.u32 	%r5312, 1109917696;
	st.global.u32 	[%rd436], %r5312;

$L__BB0_676:
	not.pred 	%p436, %p26;
	@%p436 bra 	$L__BB0_678;

	add.s32 	%r5313, %r1350, %r402;
	mul.wide.s32 	%rd437, %r5313, 4;
	add.s64 	%rd438, %rd32, %rd437;
	mov.u32 	%r5314, 1109917696;
	st.global.u32 	[%rd438], %r5314;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p438, %p25;
	@%p438 bra 	$L__BB0_681;

	add.s32 	%r5315, %r1350, %r415;
	mul.wide.s32 	%rd439, %r5315, 4;
	add.s64 	%rd440, %rd32, %rd439;
	mov.u32 	%r5316, 1109917696;
	st.global.u32 	[%rd440], %r5316;

$L__BB0_681:
	not.pred 	%p439, %p27;
	@%p439 bra 	$L__BB0_683;

	add.s32 	%r5317, %r1350, %r416;
	mul.wide.s32 	%rd441, %r5317, 4;
	add.s64 	%rd442, %rd32, %rd441;
	mov.u32 	%r5318, 1109917696;
	st.global.u32 	[%rd442], %r5318;

$L__BB0_683:
	mov.u32 	%r7415, 8;
	sub.s32 	%r7414, %r7415, %r1789;
	add.s32 	%r7413, %r7414, %r1790;
	add.s32 	%r7412, %r1329, %r7413;
	add.s32 	%r7411, %r1325, -1;
	mov.u32 	%r5319, 8;
	sub.s32 	%r5320, %r5319, %r1791;
	add.s32 	%r5321, %r5320, %r1792;
	add.s32 	%r5322, %r1324, %r7412;
	mul.lo.s32 	%r1351, %r5322, %r5321;
	add.s32 	%r5323, %r7411, %r1351;
	mul.lo.s32 	%r5324, %r5323, %r58;
	sub.s32 	%r1352, %r5324, %r1793;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p441, %p24;
	@%p441 bra 	$L__BB0_686;

	add.s32 	%r5325, %r1352, %r401;
	mul.wide.s32 	%rd443, %r5325, 4;
	add.s64 	%rd444, %rd32, %rd443;
	mov.u32 	%r5326, 1109917696;
	st.global.u32 	[%rd444], %r5326;

$L__BB0_686:
	not.pred 	%p442, %p26;
	@%p442 bra 	$L__BB0_688;

	add.s32 	%r5327, %r1352, %r402;
	mul.wide.s32 	%rd445, %r5327, 4;
	add.s64 	%rd446, %rd32, %rd445;
	mov.u32 	%r5328, 1109917696;
	st.global.u32 	[%rd446], %r5328;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p444, %p25;
	@%p444 bra 	$L__BB0_691;

	add.s32 	%r5329, %r1352, %r415;
	mul.wide.s32 	%rd447, %r5329, 4;
	add.s64 	%rd448, %rd32, %rd447;
	mov.u32 	%r5330, 1109917696;
	st.global.u32 	[%rd448], %r5330;

$L__BB0_691:
	not.pred 	%p445, %p27;
	@%p445 bra 	$L__BB0_693;

	add.s32 	%r5331, %r1352, %r416;
	mul.wide.s32 	%rd449, %r5331, 4;
	add.s64 	%rd450, %rd32, %rd449;
	mov.u32 	%r5332, 1109917696;
	st.global.u32 	[%rd450], %r5332;

$L__BB0_693:
	mov.u32 	%r5333, 8;
	sub.s32 	%r5334, %r5333, %r1791;
	add.s32 	%r5335, %r5334, %r1792;
	mul.lo.s32 	%r1353, %r5160, %r5335;
	add.s32 	%r5337, %r1325, %r1353;
	mul.lo.s32 	%r5338, %r5337, %r58;
	sub.s32 	%r1354, %r5338, %r1793;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p447, %p24;
	@%p447 bra 	$L__BB0_696;

	add.s32 	%r5339, %r1354, %r401;
	mul.wide.s32 	%rd451, %r5339, 4;
	add.s64 	%rd452, %rd32, %rd451;
	mov.u32 	%r5340, 1109917696;
	st.global.u32 	[%rd452], %r5340;

$L__BB0_696:
	not.pred 	%p448, %p26;
	@%p448 bra 	$L__BB0_698;

	add.s32 	%r5341, %r1354, %r402;
	mul.wide.s32 	%rd453, %r5341, 4;
	add.s64 	%rd454, %rd32, %rd453;
	mov.u32 	%r5342, 1109917696;
	st.global.u32 	[%rd454], %r5342;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p450, %p25;
	@%p450 bra 	$L__BB0_701;

	add.s32 	%r5343, %r1354, %r415;
	mul.wide.s32 	%rd455, %r5343, 4;
	add.s64 	%rd456, %rd32, %rd455;
	mov.u32 	%r5344, 1109917696;
	st.global.u32 	[%rd456], %r5344;

$L__BB0_701:
	not.pred 	%p451, %p27;
	@%p451 bra 	$L__BB0_703;

	add.s32 	%r5345, %r1354, %r416;
	mul.wide.s32 	%rd457, %r5345, 4;
	add.s64 	%rd458, %rd32, %rd457;
	mov.u32 	%r5346, 1109917696;
	st.global.u32 	[%rd458], %r5346;

$L__BB0_703:
	add.s32 	%r5347, %r1325, %r1349;
	mul.lo.s32 	%r5348, %r5347, %r58;
	sub.s32 	%r1355, %r5348, %r1793;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p453, %p24;
	@%p453 bra 	$L__BB0_706;

	add.s32 	%r5349, %r1355, %r401;
	mul.wide.s32 	%rd459, %r5349, 4;
	add.s64 	%rd460, %rd32, %rd459;
	mov.u32 	%r5350, 1109917696;
	st.global.u32 	[%rd460], %r5350;

$L__BB0_706:
	not.pred 	%p454, %p26;
	@%p454 bra 	$L__BB0_708;

	add.s32 	%r5351, %r1355, %r402;
	mul.wide.s32 	%rd461, %r5351, 4;
	add.s64 	%rd462, %rd32, %rd461;
	mov.u32 	%r5352, 1109917696;
	st.global.u32 	[%rd462], %r5352;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p456, %p25;
	@%p456 bra 	$L__BB0_711;

	add.s32 	%r5353, %r1355, %r415;
	mul.wide.s32 	%rd463, %r5353, 4;
	add.s64 	%rd464, %rd32, %rd463;
	mov.u32 	%r5354, 1109917696;
	st.global.u32 	[%rd464], %r5354;

$L__BB0_711:
	not.pred 	%p457, %p27;
	@%p457 bra 	$L__BB0_713;

	add.s32 	%r5355, %r1355, %r416;
	mul.wide.s32 	%rd465, %r5355, 4;
	add.s64 	%rd466, %rd32, %rd465;
	mov.u32 	%r5356, 1109917696;
	st.global.u32 	[%rd466], %r5356;

$L__BB0_713:
	add.s32 	%r5357, %r1325, %r1351;
	mul.lo.s32 	%r5358, %r5357, %r58;
	sub.s32 	%r1356, %r5358, %r1793;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p459, %p24;
	@%p459 bra 	$L__BB0_716;

	add.s32 	%r5359, %r1356, %r401;
	mul.wide.s32 	%rd467, %r5359, 4;
	add.s64 	%rd468, %rd32, %rd467;
	mov.u32 	%r5360, 1109917696;
	st.global.u32 	[%rd468], %r5360;

$L__BB0_716:
	not.pred 	%p460, %p26;
	@%p460 bra 	$L__BB0_718;

	add.s32 	%r5361, %r1356, %r402;
	mul.wide.s32 	%rd469, %r5361, 4;
	add.s64 	%rd470, %rd32, %rd469;
	mov.u32 	%r5362, 1109917696;
	st.global.u32 	[%rd470], %r5362;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p462, %p25;
	@%p462 bra 	$L__BB0_721;

	add.s32 	%r5363, %r1356, %r415;
	mul.wide.s32 	%rd471, %r5363, 4;
	add.s64 	%rd472, %rd32, %rd471;
	mov.u32 	%r5364, 1109917696;
	st.global.u32 	[%rd472], %r5364;

$L__BB0_721:
	not.pred 	%p463, %p27;
	@%p463 bra 	$L__BB0_723;

	add.s32 	%r5365, %r1356, %r416;
	mul.wide.s32 	%rd473, %r5365, 4;
	add.s64 	%rd474, %rd32, %rd473;
	mov.u32 	%r5366, 1109917696;
	st.global.u32 	[%rd474], %r5366;

$L__BB0_723:
	add.s32 	%r7416, %r1325, 1;
	add.s32 	%r5367, %r7416, %r1353;
	mul.lo.s32 	%r5368, %r5367, %r58;
	sub.s32 	%r1357, %r5368, %r1793;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p465, %p24;
	@%p465 bra 	$L__BB0_726;

	add.s32 	%r5369, %r1357, %r401;
	mul.wide.s32 	%rd475, %r5369, 4;
	add.s64 	%rd476, %rd32, %rd475;
	mov.u32 	%r5370, 1109917696;
	st.global.u32 	[%rd476], %r5370;

$L__BB0_726:
	not.pred 	%p466, %p26;
	@%p466 bra 	$L__BB0_728;

	add.s32 	%r5371, %r1357, %r402;
	mul.wide.s32 	%rd477, %r5371, 4;
	add.s64 	%rd478, %rd32, %rd477;
	mov.u32 	%r5372, 1109917696;
	st.global.u32 	[%rd478], %r5372;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p468, %p25;
	@%p468 bra 	$L__BB0_731;

	add.s32 	%r5373, %r1357, %r415;
	mul.wide.s32 	%rd479, %r5373, 4;
	add.s64 	%rd480, %rd32, %rd479;
	mov.u32 	%r5374, 1109917696;
	st.global.u32 	[%rd480], %r5374;

$L__BB0_731:
	not.pred 	%p469, %p27;
	@%p469 bra 	$L__BB0_733;

	add.s32 	%r5375, %r1357, %r416;
	mul.wide.s32 	%rd481, %r5375, 4;
	add.s64 	%rd482, %rd32, %rd481;
	mov.u32 	%r5376, 1109917696;
	st.global.u32 	[%rd482], %r5376;

$L__BB0_733:
	add.s32 	%r7417, %r1325, 1;
	add.s32 	%r5377, %r7417, %r1349;
	mul.lo.s32 	%r5378, %r5377, %r58;
	sub.s32 	%r1358, %r5378, %r1793;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p471, %p24;
	@%p471 bra 	$L__BB0_736;

	add.s32 	%r5379, %r1358, %r401;
	mul.wide.s32 	%rd483, %r5379, 4;
	add.s64 	%rd484, %rd32, %rd483;
	mov.u32 	%r5380, 1109917696;
	st.global.u32 	[%rd484], %r5380;

$L__BB0_736:
	not.pred 	%p472, %p26;
	@%p472 bra 	$L__BB0_738;

	add.s32 	%r5381, %r1358, %r402;
	mul.wide.s32 	%rd485, %r5381, 4;
	add.s64 	%rd486, %rd32, %rd485;
	mov.u32 	%r5382, 1109917696;
	st.global.u32 	[%rd486], %r5382;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p474, %p25;
	@%p474 bra 	$L__BB0_741;

	add.s32 	%r5383, %r1358, %r415;
	mul.wide.s32 	%rd487, %r5383, 4;
	add.s64 	%rd488, %rd32, %rd487;
	mov.u32 	%r5384, 1109917696;
	st.global.u32 	[%rd488], %r5384;

$L__BB0_741:
	not.pred 	%p475, %p27;
	@%p475 bra 	$L__BB0_743;

	add.s32 	%r5385, %r1358, %r416;
	mul.wide.s32 	%rd489, %r5385, 4;
	add.s64 	%rd490, %rd32, %rd489;
	mov.u32 	%r5386, 1109917696;
	st.global.u32 	[%rd490], %r5386;

$L__BB0_743:
	add.s32 	%r7418, %r1325, 1;
	add.s32 	%r5387, %r7418, %r1351;
	mul.lo.s32 	%r5388, %r5387, %r58;
	sub.s32 	%r1359, %r5388, %r1793;
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p477, %p24;
	@%p477 bra 	$L__BB0_746;

	add.s32 	%r5389, %r1359, %r401;
	mul.wide.s32 	%rd491, %r5389, 4;
	add.s64 	%rd492, %rd32, %rd491;
	mov.u32 	%r5390, 1109917696;
	st.global.u32 	[%rd492], %r5390;

$L__BB0_746:
	not.pred 	%p478, %p26;
	@%p478 bra 	$L__BB0_748;

	add.s32 	%r5391, %r1359, %r402;
	mul.wide.s32 	%rd493, %r5391, 4;
	add.s64 	%rd494, %rd32, %rd493;
	mov.u32 	%r5392, 1109917696;
	st.global.u32 	[%rd494], %r5392;

$L__BB0_748:
	@%p28 bra 	$L__BB0_753;

	not.pred 	%p480, %p25;
	@%p480 bra 	$L__BB0_751;

	add.s32 	%r5393, %r1359, %r415;
	mul.wide.s32 	%rd495, %r5393, 4;
	add.s64 	%rd496, %rd32, %rd495;
	mov.u32 	%r5394, 1109917696;
	st.global.u32 	[%rd496], %r5394;

$L__BB0_751:
	not.pred 	%p481, %p27;
	@%p481 bra 	$L__BB0_753;

	add.s32 	%r5395, %r1359, %r416;
	mul.wide.s32 	%rd497, %r5395, 4;
	add.s64 	%rd498, %rd32, %rd497;
	mov.u32 	%r5396, 1109917696;
	st.global.u32 	[%rd498], %r5396;

$L__BB0_753:
	add.s32 	%r5397, %r1347, %r1351;
	mul.lo.s32 	%r5398, %r5397, %r58;
	sub.s32 	%r1360, %r5398, %r1793;
	@%p28 bra 	$L__BB0_758;

	not.pred 	%p483, %p24;
	@%p483 bra 	$L__BB0_756;

	add.s32 	%r5399, %r1360, %r401;
	mul.wide.s32 	%rd499, %r5399, 4;
	add.s64 	%rd500, %rd32, %rd499;
	mov.u32 	%r5400, 1109917696;
	st.global.u32 	[%rd500], %r5400;

$L__BB0_756:
	not.pred 	%p484, %p26;
	@%p484 bra 	$L__BB0_758;

	add.s32 	%r5401, %r1360, %r402;
	mul.wide.s32 	%rd501, %r5401, 4;
	add.s64 	%rd502, %rd32, %rd501;
	mov.u32 	%r5402, 1109917696;
	st.global.u32 	[%rd502], %r5402;

$L__BB0_758:
	@%p28 bra 	$L__BB0_763;

	not.pred 	%p486, %p25;
	@%p486 bra 	$L__BB0_761;

	add.s32 	%r5403, %r1360, %r415;
	mul.wide.s32 	%rd503, %r5403, 4;
	add.s64 	%rd504, %rd32, %rd503;
	mov.u32 	%r5404, 1109917696;
	st.global.u32 	[%rd504], %r5404;

$L__BB0_761:
	not.pred 	%p487, %p27;
	@%p487 bra 	$L__BB0_763;

	add.s32 	%r5405, %r1360, %r416;
	mul.wide.s32 	%rd505, %r5405, 4;
	add.s64 	%rd506, %rd32, %rd505;
	mov.u32 	%r5406, 1109917696;
	st.global.u32 	[%rd506], %r5406;

$L__BB0_763:
	add.s32 	%r1361, %r1324, 1;
	add.s32 	%r5407, %r1361, %r1329;
	mov.u32 	%r5408, 8;
	sub.s32 	%r5409, %r5408, %r1791;
	add.s32 	%r5410, %r5409, %r1792;
	mad.lo.s32 	%r5411, %r5407, %r5410, %r1325;
	mul.lo.s32 	%r5412, %r5411, %r58;
	sub.s32 	%r1362, %r5412, %r1793;
	@%p28 bra 	$L__BB0_768;

	not.pred 	%p489, %p24;
	@%p489 bra 	$L__BB0_766;

	add.s32 	%r5413, %r1362, %r401;
	mul.wide.s32 	%rd507, %r5413, 4;
	add.s64 	%rd508, %rd32, %rd507;
	mov.u32 	%r5414, 1109917696;
	st.global.u32 	[%rd508], %r5414;

$L__BB0_766:
	not.pred 	%p490, %p26;
	@%p490 bra 	$L__BB0_768;

	add.s32 	%r5415, %r1362, %r402;
	mul.wide.s32 	%rd509, %r5415, 4;
	add.s64 	%rd510, %rd32, %rd509;
	mov.u32 	%r5416, 1109917696;
	st.global.u32 	[%rd510], %r5416;

$L__BB0_768:
	@%p28 bra 	$L__BB0_773;

	not.pred 	%p492, %p25;
	@%p492 bra 	$L__BB0_771;

	add.s32 	%r5417, %r1362, %r415;
	mul.wide.s32 	%rd511, %r5417, 4;
	add.s64 	%rd512, %rd32, %rd511;
	mov.u32 	%r5418, 1109917696;
	st.global.u32 	[%rd512], %r5418;

$L__BB0_771:
	not.pred 	%p493, %p27;
	@%p493 bra 	$L__BB0_773;

	add.s32 	%r5419, %r1362, %r416;
	mul.wide.s32 	%rd513, %r5419, 4;
	add.s64 	%rd514, %rd32, %rd513;
	mov.u32 	%r5420, 1109917696;
	st.global.u32 	[%rd514], %r5420;

$L__BB0_773:
	mov.u32 	%r7422, 8;
	sub.s32 	%r7421, %r7422, %r1789;
	add.s32 	%r7420, %r7421, %r1790;
	add.s32 	%r7419, %r1329, %r7420;
	mov.u32 	%r5421, 8;
	sub.s32 	%r5422, %r5421, %r1791;
	add.s32 	%r5423, %r5422, %r1792;
	add.s32 	%r5424, %r1361, %r7419;
	mul.lo.s32 	%r1363, %r5424, %r5423;
	add.s32 	%r5425, %r1325, %r1363;
	mul.lo.s32 	%r5426, %r5425, %r58;
	sub.s32 	%r1364, %r5426, %r1793;
	@%p28 bra 	$L__BB0_778;

	not.pred 	%p495, %p24;
	@%p495 bra 	$L__BB0_776;

	add.s32 	%r5427, %r1364, %r401;
	mul.wide.s32 	%rd515, %r5427, 4;
	add.s64 	%rd516, %rd32, %rd515;
	mov.u32 	%r5428, 1109917696;
	st.global.u32 	[%rd516], %r5428;

$L__BB0_776:
	not.pred 	%p496, %p26;
	@%p496 bra 	$L__BB0_778;

	add.s32 	%r5429, %r1364, %r402;
	mul.wide.s32 	%rd517, %r5429, 4;
	add.s64 	%rd518, %rd32, %rd517;
	mov.u32 	%r5430, 1109917696;
	st.global.u32 	[%rd518], %r5430;

$L__BB0_778:
	@%p28 bra 	$L__BB0_783;

	not.pred 	%p498, %p25;
	@%p498 bra 	$L__BB0_781;

	add.s32 	%r5431, %r1364, %r415;
	mul.wide.s32 	%rd519, %r5431, 4;
	add.s64 	%rd520, %rd32, %rd519;
	mov.u32 	%r5432, 1109917696;
	st.global.u32 	[%rd520], %r5432;

$L__BB0_781:
	not.pred 	%p499, %p27;
	@%p499 bra 	$L__BB0_783;

	add.s32 	%r5433, %r1364, %r416;
	mul.wide.s32 	%rd521, %r5433, 4;
	add.s64 	%rd522, %rd32, %rd521;
	mov.u32 	%r5434, 1109917696;
	st.global.u32 	[%rd522], %r5434;

$L__BB0_783:
	add.s32 	%r7423, %r1325, 1;
	add.s32 	%r5435, %r7423, %r1363;
	mul.lo.s32 	%r5436, %r5435, %r58;
	sub.s32 	%r1365, %r5436, %r1793;
	@%p28 bra 	$L__BB0_788;

	not.pred 	%p501, %p24;
	@%p501 bra 	$L__BB0_786;

	add.s32 	%r5437, %r1365, %r401;
	mul.wide.s32 	%rd523, %r5437, 4;
	add.s64 	%rd524, %rd32, %rd523;
	mov.u32 	%r5438, 1109917696;
	st.global.u32 	[%rd524], %r5438;

$L__BB0_786:
	not.pred 	%p502, %p26;
	@%p502 bra 	$L__BB0_788;

	add.s32 	%r5439, %r1365, %r402;
	mul.wide.s32 	%rd525, %r5439, 4;
	add.s64 	%rd526, %rd32, %rd525;
	mov.u32 	%r5440, 1109917696;
	st.global.u32 	[%rd526], %r5440;

$L__BB0_788:
	@%p28 bra 	$L__BB0_793;

	not.pred 	%p504, %p25;
	@%p504 bra 	$L__BB0_791;

	add.s32 	%r5441, %r1365, %r415;
	mul.wide.s32 	%rd527, %r5441, 4;
	add.s64 	%rd528, %rd32, %rd527;
	mov.u32 	%r5442, 1109917696;
	st.global.u32 	[%rd528], %r5442;

$L__BB0_791:
	not.pred 	%p505, %p27;
	@%p505 bra 	$L__BB0_793;

	add.s32 	%r5443, %r1365, %r416;
	mul.wide.s32 	%rd529, %r5443, 4;
	add.s64 	%rd530, %rd32, %rd529;
	mov.u32 	%r5444, 1109917696;
	st.global.u32 	[%rd530], %r5444;

$L__BB0_793:
	setp.eq.s32 	%p506, %r41, %r2238;
	@%p506 bra 	$L__BB0_795;

	mad.lo.s32 	%r5445, %r1776, %r41, %r42;
	mov.u32 	%r5446, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5447, %r5445, 1280, %r5446;
	add.s32 	%r5448, %r5447, -256;
	shl.b32 	%r5449, %r46, 4;
	add.s32 	%r5450, %r5448, %r5449;
	st.shared.v4.u32 	[%r5450+256], {%r3947, %r4024, %r7741, %r7739};
	st.shared.v4.u32 	[%r5450+1024], {%r3714, %r3791, %r7754, %r7751};
	shl.b32 	%r5451, %r46, 3;
	add.s32 	%r5452, %r5448, %r5451;
	st.shared.v2.u32 	[%r5452+768], {%r3990, %r4056};

$L__BB0_795:
	setp.eq.s32 	%p507, %r42, %r2243;
	@%p507 bra 	$L__BB0_799;

	mad.lo.s32 	%r5456, %r1775, 384, -64;
	mul.lo.s32 	%r5457, %r5456, %r42;
	mad.lo.s32 	%r5459, %r2239, %r2238, %r5457;
	mad.lo.s32 	%r5460, %r2639, 384, %r5459;
	shl.b32 	%r5461, %r5460, 2;
	mov.u32 	%r5462, _ZN6kernel5shmemE;
	add.s32 	%r5463, %r5462, %r5461;
	add.s32 	%r5464, %r5463, -256;
	shl.b32 	%r5465, %r46, 4;
	add.s32 	%r5466, %r5464, %r5465;
	st.shared.v4.u32 	[%r5466+256], {%r3868, %r3902, %r7748, %r7745};
	st.shared.v4.u32 	[%r5466+1024], {%r4469, %r4503, %r7726, %r7725};
	shl.b32 	%r5467, %r46, 3;
	add.s32 	%r1369, %r5464, %r5467;
	@%p506 bra 	$L__BB0_798;

	st.shared.v2.u32 	[%r1369], {%r3757, %r3823};

$L__BB0_798:
	st.shared.v2.u32 	[%r1369+768], {%r4328, %r4409};

$L__BB0_799:
	setp.ne.s32 	%p509, %r41, %r2238;
	ld.param.u64 	%rd531, [%rd1+104];
	cvta.to.global.u64 	%rd33, %rd531;
	@%p509 bra 	$L__BB0_801;

	mad.lo.s32 	%r5469, %r674, %r1778, %r44;
	mul.lo.s32 	%r5470, %r1776, %r5469;
	mul.lo.s32 	%r5471, %r5470, 768;
	mad.lo.s32 	%r5472, %r42, 384, %r5471;
	add.s32 	%r5473, %r5472, -64;
	mul.wide.s32 	%rd532, %r5473, 4;
	add.s64 	%rd533, %rd33, %rd532;
	add.s64 	%rd535, %rd533, %rd297;
	st.global.v4.u32 	[%rd535+256], {%r3947, %r4024, %r7741, %r7739};
	st.global.v4.u32 	[%rd535+1024], {%r3714, %r3791, %r7754, %r7751};
	add.s64 	%rd537, %rd533, %rd299;
	st.global.v2.u32 	[%rd537+768], {%r3990, %r4056};
	st.global.v2.u32 	[%rd537+1536], {%r3757, %r3823};

$L__BB0_801:
	setp.ne.s32 	%p510, %r42, %r2243;
	@%p510 bra 	$L__BB0_806;

	ld.param.u64 	%rd581, [%rd1+104];
	cvta.to.global.u64 	%rd580, %rd581;
	mad.lo.s32 	%r5476, %r675, %r1777, %r43;
	mul.lo.s32 	%r5480, %r5476, %r1854;
	mad.lo.s32 	%r5483, %r2639, 384, %r5480;
	add.s32 	%r5484, %r5483, -64;
	mad.lo.s32 	%r5487, %r1856, %r69, %r5484;
	mul.wide.s32 	%rd538, %r5487, 4;
	add.s64 	%rd539, %rd580, %rd538;
	add.s64 	%rd541, %rd539, %rd297;
	st.global.v4.u32 	[%rd541+256], {%r3868, %r3902, %r7748, %r7745};
	st.global.v4.u32 	[%rd541+1024], {%r4469, %r4503, %r7726, %r7725};
	add.s64 	%rd34, %rd539, %rd299;
	@%p506 bra 	$L__BB0_804;

	st.global.v2.u32 	[%rd34], {%r3757, %r3823};

$L__BB0_804:
	st.global.v2.u32 	[%rd34+768], {%r4328, %r4409};
	@%p284 bra 	$L__BB0_806;

	st.global.v2.u32 	[%rd34+1536], {%r7833, %r7830};

$L__BB0_806:
	setp.ge.s32 	%p513, %r41, %r2238;
	@%p513 bra 	$L__BB0_808;

	mul.lo.s32 	%r5488, %r1776, 320;
	mul.lo.s32 	%r5489, %r42, 320;
	mad.lo.s32 	%r5490, %r5488, %r41, %r5489;
	add.s32 	%r5494, %r1853, -64;
	mad.lo.s32 	%r5498, %r5494, %r2243, %r2240;
	add.s32 	%r5499, %r5490, %r5498;
	shl.b32 	%r5500, %r5499, 2;
	mov.u32 	%r5501, _ZN6kernel5shmemE;
	add.s32 	%r5502, %r5501, %r5500;
	shl.b32 	%r5503, %r46, 4;
	add.s32 	%r5504, %r5502, %r5503;
	st.shared.v4.u32 	[%r5504], {%r7884, %r7883, %r7879, %r7877};
	shl.b32 	%r5505, %r46, 3;
	add.s32 	%r5506, %r5502, %r5505;
	st.shared.v2.u32 	[%r5506+512], {%r7645, %r7642};
	st.shared.v4.u32 	[%r5504+768], {%r7658, %r7653, %r7633, %r7624};

$L__BB0_808:
	setp.ge.s32 	%p514, %r42, %r2243;
	@%p514 bra 	$L__BB0_812;

	mad.lo.s32 	%r5512, %r2639, 384, %r2246;
	mad.lo.s32 	%r5515, %r2241, %r42, %r5512;
	add.s32 	%r5521, %r5515, %r2244;
	shl.b32 	%r5522, %r5521, 2;
	mov.u32 	%r5523, _ZN6kernel5shmemE;
	add.s32 	%r5524, %r5523, %r5522;
	shl.b32 	%r5525, %r46, 3;
	add.s32 	%r5526, %r5524, %r5525;
	@%p513 bra 	$L__BB0_811;

	add.s32 	%r7396, %r5526, -256;
	st.shared.v2.u32 	[%r7396], {%r7657, %r7652};

$L__BB0_811:
	shl.b32 	%r5545, %r46, 4;
	add.s32 	%r5546, %r5524, %r5545;
	st.shared.v4.u32 	[%r5546], {%r7650, %r7648, %r7616, %r7608};
	add.s32 	%r7397, %r5526, -256;
	st.shared.v2.u32 	[%r7397+768], {%r7617, %r7609};
	st.shared.v4.u32 	[%r5546+768], {%r7882, %r7881, %r7870, %r7869};

$L__BB0_812:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_814;

	mul.lo.s32 	%r5547, %r1776, 320;
	add.s32 	%r5548, %r41, -1;
	mul.lo.s32 	%r5549, %r42, 320;
	mad.lo.s32 	%r5550, %r5547, %r5548, %r5549;
	shl.b32 	%r5551, %r5550, 2;
	mov.u32 	%r5552, _ZN6kernel5shmemE;
	add.s32 	%r5553, %r5552, %r5551;
	add.s32 	%r5554, %r5553, -256;
	shl.b32 	%r5555, %r46, 4;
	add.s32 	%r5556, %r5554, %r5555;
	ld.shared.v4.u32 	{%r7828, %r7826, %r7835, %r7836}, [%r5556+256];
	ld.shared.v4.u32 	{%r7834, %r7831, %r7823, %r7824}, [%r5556+1024];
	shl.b32 	%r5565, %r46, 3;
	add.s32 	%r5566, %r5554, %r5565;
	ld.shared.v2.u32 	{%r7827, %r7825}, [%r5566+768];

$L__BB0_814:
	@%p282 bra 	$L__BB0_817;

	mad.lo.s32 	%r5571, %r1775, 384, -64;
	add.s32 	%r5572, %r42, -1;
	mul.lo.s32 	%r5573, %r5571, %r5572;
	mad.lo.s32 	%r5576, %r2239, %r2238, %r5573;
	mad.lo.s32 	%r5577, %r2639, 384, %r5576;
	shl.b32 	%r5578, %r5577, 2;
	mov.u32 	%r5579, _ZN6kernel5shmemE;
	add.s32 	%r5580, %r5579, %r5578;
	add.s32 	%r5581, %r5580, -256;
	shl.b32 	%r5582, %r46, 4;
	add.s32 	%r5583, %r5581, %r5582;
	ld.shared.v4.u32 	{%r7848, %r7847, %r7843, %r7841}, [%r5583+256];
	ld.shared.v4.u32 	{%r7838, %r7837, %r7840, %r7846}, [%r5583+1024];
	shl.b32 	%r5592, %r46, 3;
	add.s32 	%r5593, %r5581, %r5592;
	ld.shared.v2.u32 	{%r7844, %r7842}, [%r5593+768];
	@%p279 bra 	$L__BB0_817;

	add.s32 	%r7398, %r5593, 768;
	ld.shared.v2.u32 	{%r7829, %r7832}, [%r7398+768];

$L__BB0_817:
	ld.param.u64 	%rd543, [%rd1+104];
	cvta.to.global.u64 	%rd35, %rd543;
	mov.u32 	%r7960, %r7794;
	mov.u32 	%r7961, %r7795;
	mov.u32 	%r7963, %r7797;
	mov.u32 	%r7964, %r7798;
	mov.u32 	%r7984, %r7814;
	mov.u32 	%r7988, %r7818;
	mov.u32 	%r7969, %r7801;
	mov.u32 	%r7970, %r7802;
	mov.u32 	%r7971, %r7803;
	mov.u32 	%r7972, %r7804;
	mov.u32 	%r7989, %r7819;
	mov.u32 	%r7990, %r7820;
	@%p284 bra 	$L__BB0_821;

	mad.lo.s32 	%r5599, %r674, %r1778, %r44;
	mad.lo.s32 	%r5600, %r5599, 768, 384;
	mul.lo.s32 	%r5601, %r5600, %r1776;
	mad.lo.s32 	%r5602, %r42, 384, %r5601;
	add.s32 	%r5603, %r5602, -128;
	mul.wide.s32 	%rd544, %r5603, 4;
	add.s64 	%rd545, %rd35, %rd544;
	add.s64 	%rd547, %rd545, %rd297;
	add.s64 	%rd36, %rd547, 512;
	mov.u32 	%r7984, %r7814;
	mov.u32 	%r7988, %r7818;
	mov.u32 	%r7989, %r7819;
	mov.u32 	%r7990, %r7820;
	@%p282 bra 	$L__BB0_820;

	ld.global.v4.u32 	{%r7989, %r7990, %r7984, %r7988}, [%rd36+-512];

$L__BB0_820:
	ld.global.v4.u32 	{%r7970, %r7972, %r7969, %r7971}, [%rd36];
	ld.global.v4.u32 	{%r7964, %r7961, %r7960, %r7963}, [%rd36+512];
	ld.global.v4.u32 	{%r7793, %r7796, %r7800, %r7799}, [%rd36+1024];

$L__BB0_821:
	mov.u32 	%r7975, %r7805;
	mov.u32 	%r7976, %r7806;
	mov.u32 	%r7977, %r7807;
	mov.u32 	%r7978, %r7808;
	mov.u32 	%r7979, %r7809;
	mov.u32 	%r7980, %r7810;
	mov.u32 	%r7981, %r7811;
	mov.u32 	%r7986, %r7816;
	@%p287 bra 	$L__BB0_823;

	mad.lo.s32 	%r5621, %r675, %r1777, %r43;
	mad.lo.s32 	%r5629, %r2639, 384, %r70;
	mad.lo.s32 	%r5630, %r1856, %r69, %r5629;
	mad.lo.s32 	%r5631, %r5621, %r1854, %r5630;
	mul.wide.s32 	%rd548, %r5631, 4;
	add.s64 	%rd549, %rd35, %rd548;
	add.s64 	%rd551, %rd549, %rd297;
	ld.global.v4.u32 	{%r7813, %r7812, %r7817, %r7815}, [%rd551];
	ld.global.v4.u32 	{%r7981, %r7978, %r7975, %r7976}, [%rd551+512];
	ld.global.v4.u32 	{%r7980, %r7977, %r7979, %r7986}, [%rd551+1024];
	ld.global.v4.u32 	{%r7989, %r7990, %r7984, %r7988}, [%rd551+1536];

$L__BB0_823:
	neg.s32 	%r7404, %r1780;
	not.b32 	%r7403, %r44;
	add.s32 	%r7402, %r1778, %r7403;
	mul.lo.s32 	%r7401, %r7402, %r1779;
	not.b32 	%r7400, %r43;
	add.s32 	%r7399, %r1777, %r7400;
	mad.lo.s32 	%r5655, %r7399, %r1779, %r7401;
	add.s32 	%r5656, %r5655, %r1780;
	add.s32 	%r5665, %r5656, %r2645;
	add.s32 	%r1489, %r7680, 1;
	add.s32 	%r5666, %r1489, %r5665;
	div.s32 	%r5667, %r5666, %r1780;
	mad.lo.s32 	%r1490, %r5667, %r7404, %r5666;
	mad.lo.s32 	%r5674, %r5667, %r48, %r2656;
	ld.param.u64 	%rd552, [%rd1+120];
	cvta.to.global.u64 	%rd553, %rd552;
	rem.s32 	%r5675, %r5674, %r1781;
	shr.u32 	%r5676, %r5675, 31;
	add.s32 	%r5677, %r5675, %r5676;
	shr.s32 	%r5678, %r5677, 1;
	mad.lo.s32 	%r5679, %r5678, %r1780, %r1490;
	shl.b32 	%r5680, %r5679, 5;
	add.s32 	%r5681, %r5680, %r46;
	cvt.s64.s32 	%rd37, %r5681;
	mul.wide.s32 	%rd554, %r5681, 4;
	add.s64 	%rd555, %rd553, %rd554;
	ld.global.u32 	%r7682, [%rd555];
	ld.param.u64 	%rd556, [%rd1+128];
	cvta.to.global.u64 	%rd38, %rd556;
	@%p142 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	shl.b64 	%rd559, %rd37, 2;
	add.s64 	%rd560, %rd38, %rd559;
	ld.global.u32 	%r7681, [%rd560];
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	shl.b32 	%r5682, %r1490, 5;
	add.s32 	%r5683, %r5682, %r46;
	mul.wide.s32 	%rd557, %r5683, 16;
	add.s64 	%rd558, %rd38, %rd557;
	ld.global.v4.u32 	{%r5684, %r5685, %r5686, %r5687}, [%rd558];
	mov.u32 	%r7662, %r7666;
	mov.u32 	%r7663, %r7667;
	mov.u32 	%r7664, %r7668;
	mov.u32 	%r7665, %r7669;
	mov.u32 	%r7666, %r7670;
	mov.u32 	%r7667, %r7671;
	mov.u32 	%r7668, %r7672;
	mov.u32 	%r7669, %r7673;
	mov.u32 	%r7670, %r5687;
	mov.u32 	%r7671, %r5686;
	mov.u32 	%r7672, %r5685;
	mov.u32 	%r7673, %r5684;

$L__BB0_826:
	mov.f32 	%f467, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5688, {low,high};}

	// end inline asm
	selp.b32 	%r5690, %r7511, %r5688, %p28;
	// begin inline asm
	{mul.f16x2 %r7659,%r5690,%r7636;
}
	// end inline asm
	selp.b32 	%r5693, %r7515, %r5688, %p28;
	// begin inline asm
	{mul.f16x2 %r7654,%r5693,%r7627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5695, {low,high};}

	// end inline asm
	selp.b32 	%r5697, %r7511, %r5695, %p28;
	// begin inline asm
	{mul.f16x2 %r7646,%r5697,%r7600;
}
	// end inline asm
	selp.b32 	%r5700, %r7515, %r5695, %p28;
	// begin inline asm
	{mul.f16x2 %r7643,%r5700,%r7595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5702, {low,high};}

	// end inline asm
	selp.b32 	%r5704, %r7511, %r5702, %p28;
	// begin inline asm
	{mul.f16x2 %r5703,%r5704,%r7592;
}
	// end inline asm
	selp.b32 	%r5707, %r7515, %r5702, %p28;
	// begin inline asm
	{mul.f16x2 %r5706,%r5707,%r7585;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5709, {low,high};}

	// end inline asm
	selp.b32 	%r5711, %r7511, %r5709, %p28;
	// begin inline asm
	{mul.f16x2 %r5710,%r5711,%r7591;
}
	// end inline asm
	selp.b32 	%r5714, %r7515, %r5709, %p28;
	// begin inline asm
	{mul.f16x2 %r5713,%r5714,%r7584;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5716, {low,high};}

	// end inline asm
	selp.b32 	%r5718, %r7511, %r5716, %p28;
	// begin inline asm
	{mul.f16x2 %r7636,%r5718,%r7590;
}
	// end inline asm
	selp.b32 	%r5721, %r7515, %r5716, %p28;
	// begin inline asm
	{mul.f16x2 %r7627,%r5721,%r7583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5723, {low,high};}

	// end inline asm
	selp.b32 	%r5725, %r7511, %r5723, %p28;
	// begin inline asm
	{mul.f16x2 %r5724,%r5725,%r7578;
}
	// end inline asm
	selp.b32 	%r5728, %r7515, %r5723, %p28;
	// begin inline asm
	{mul.f16x2 %r5727,%r5728,%r7573;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5730, {low,high};}

	// end inline asm
	selp.b32 	%r5732, %r7511, %r5730, %p28;
	// begin inline asm
	{mul.f16x2 %r7619,%r5732,%r7577;
}
	// end inline asm
	selp.b32 	%r5735, %r7515, %r5730, %p28;
	// begin inline asm
	{mul.f16x2 %r7611,%r5735,%r7572;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5737, {low,high};}

	// end inline asm
	selp.b32 	%r5739, %r7511, %r5737, %p28;
	// begin inline asm
	{mul.f16x2 %r5738,%r5739,%r7557;
}
	// end inline asm
	selp.b32 	%r5742, %r7515, %r5737, %p28;
	// begin inline asm
	{mul.f16x2 %r5741,%r5742,%r7550;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5744, {low,high};}

	// end inline asm
	selp.b32 	%r5746, %r7511, %r5744, %p28;
	// begin inline asm
	{mul.f16x2 %r5745,%r5746,%r7811;
}
	// end inline asm
	selp.b32 	%r5749, %r7515, %r5744, %p28;
	// begin inline asm
	{mul.f16x2 %r5748,%r5749,%r7808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5751, {low,high};}

	// end inline asm
	selp.b32 	%r5753, %r7511, %r5751, %p28;
	// begin inline asm
	{mul.f16x2 %r7600,%r5753,%r7810;
}
	// end inline asm
	selp.b32 	%r5756, %r7515, %r5751, %p28;
	// begin inline asm
	{mul.f16x2 %r7595,%r5756,%r7807;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5758, {low,high};}

	// end inline asm
	selp.b32 	%r5760, %r7511, %r5758, %p28;
	// begin inline asm
	{mul.f16x2 %r5759,%r5760,%r7544;
}
	// end inline asm
	selp.b32 	%r5763, %r7515, %r5758, %p28;
	// begin inline asm
	{mul.f16x2 %r5762,%r5763,%r7537;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5765, {low,high};}

	// end inline asm
	selp.b32 	%r5767, %r7511, %r5765, %p28;
	// begin inline asm
	{mul.f16x2 %r5766,%r5767,%r7543;
}
	// end inline asm
	selp.b32 	%r5770, %r7515, %r5765, %p28;
	// begin inline asm
	{mul.f16x2 %r5769,%r5770,%r7536;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5772, {low,high};}

	// end inline asm
	selp.b32 	%r5774, %r7511, %r5772, %p28;
	// begin inline asm
	{mul.f16x2 %r7590,%r5774,%r7542;
}
	// end inline asm
	selp.b32 	%r5777, %r7515, %r5772, %p28;
	// begin inline asm
	{mul.f16x2 %r7583,%r5777,%r7535;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5779, {low,high};}

	// end inline asm
	selp.b32 	%r5781, %r7511, %r5779, %p28;
	// begin inline asm
	{mul.f16x2 %r5780,%r5781,%r7530;
}
	// end inline asm
	selp.b32 	%r5784, %r7515, %r5779, %p28;
	// begin inline asm
	{mul.f16x2 %r5783,%r5784,%r7522;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5786, {low,high};}

	// end inline asm
	selp.b32 	%r5788, %r7511, %r5786, %p28;
	// begin inline asm
	{mul.f16x2 %r5787,%r5788,%r7529;
}
	// end inline asm
	selp.b32 	%r5791, %r7515, %r5786, %p28;
	// begin inline asm
	{mul.f16x2 %r5790,%r5791,%r7521;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5793, {low,high};}

	// end inline asm
	selp.b32 	%r5795, %r7511, %r5793, %p28;
	// begin inline asm
	{mul.f16x2 %r7577,%r5795,%r7798;
}
	// end inline asm
	selp.b32 	%r5798, %r7515, %r5793, %p28;
	// begin inline asm
	{mul.f16x2 %r7572,%r5798,%r7795;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5800, {low,high};}

	// end inline asm
	selp.b32 	%r5802, %r7511, %r5800, %p28;
	// begin inline asm
	{mul.f16x2 %r5801,%r5802,%r7794;
}
	// end inline asm
	selp.b32 	%r5805, %r7515, %r5800, %p28;
	// begin inline asm
	{mul.f16x2 %r5804,%r5805,%r7797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5807, {low,high};}

	// end inline asm
	selp.b32 	%r5809, %r7511, %r5807, %p28;
	// begin inline asm
	{mul.f16x2 %r5808,%r5809,%r7805;
}
	// end inline asm
	selp.b32 	%r5812, %r7515, %r5807, %p28;
	// begin inline asm
	{mul.f16x2 %r5811,%r5812,%r7806;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5814, {low,high};}

	// end inline asm
	selp.b32 	%r5816, %r7511, %r5814, %p28;
	// begin inline asm
	{mul.f16x2 %r5815,%r5816,%r7553;
}
	// end inline asm
	selp.b32 	%r5819, %r7515, %r5814, %p28;
	// begin inline asm
	{mul.f16x2 %r5818,%r5819,%r7599;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5821, {low,high};}

	// end inline asm
	selp.b32 	%r5823, %r7511, %r5821, %p28;
	// begin inline asm
	{mul.f16x2 %r5822,%r5823,%r7809;
}
	// end inline asm
	selp.b32 	%r5826, %r7515, %r5821, %p28;
	// begin inline asm
	{mul.f16x2 %r5825,%r5826,%r7816;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5828, {low,high};}

	// end inline asm
	selp.b32 	%r5830, %r7511, %r5828, %p28;
	// begin inline asm
	{mul.f16x2 %r7542,%r5830,%r7814;
}
	// end inline asm
	selp.b32 	%r5833, %r7515, %r5828, %p28;
	// begin inline asm
	{mul.f16x2 %r7535,%r5833,%r7818;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5835, {low,high};}

	// end inline asm
	selp.b32 	%r5837, %r7511, %r5835, %p28;
	// begin inline asm
	{mul.f16x2 %r5836,%r5837,%r7801;
}
	// end inline asm
	selp.b32 	%r5840, %r7515, %r5835, %p28;
	// begin inline asm
	{mul.f16x2 %r5839,%r5840,%r7803;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5842, {low,high};}

	// end inline asm
	selp.b32 	%r5844, %r7511, %r5842, %p28;
	// begin inline asm
	{mul.f16x2 %r5843,%r5844,%r7802;
}
	// end inline asm
	selp.b32 	%r5847, %r7515, %r5842, %p28;
	// begin inline asm
	{mul.f16x2 %r5846,%r5847,%r7804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r5849, {low,high};}

	// end inline asm
	selp.b32 	%r5851, %r7511, %r5849, %p28;
	// begin inline asm
	{mul.f16x2 %r5850,%r5851,%r7819;
}
	// end inline asm
	selp.b32 	%r5854, %r7515, %r5849, %p28;
	// begin inline asm
	{mul.f16x2 %r5853,%r5854,%r7820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5856,%r7660,%r3757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r3868,%r3714;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5856,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r7425,%r5862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r7659,%r5865;
}
	// end inline asm
	@%p28 bra 	$L__BB0_828;

	mov.u32 	%r7659, %r5868;

$L__BB0_828:
	// begin inline asm
	{sub.f16x2 %r5871,%r7655,%r3823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r3902,%r3791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5877,%r5871,%r5874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5880,%r7425,%r5877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5883,%r7654,%r5880;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;

	mov.u32 	%r7654, %r5883;

$L__BB0_830:
	// begin inline asm
	{sub.f16x2 %r5886,%r7647,%r3990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5889,%r7661,%r3947;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5892,%r5886,%r5889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5895,%r7425,%r5892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5898,%r7646,%r5895;
}
	// end inline asm
	@%p28 bra 	$L__BB0_832;

	mov.u32 	%r7646, %r5898;

$L__BB0_832:
	// begin inline asm
	{sub.f16x2 %r5901,%r7644,%r4056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5904,%r7656,%r4024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r5901,%r5904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5910,%r7425,%r5907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5913,%r7643,%r5910;
}
	// end inline asm
	@%p28 bra 	$L__BB0_834;

	mov.u32 	%r7643, %r5913;

$L__BB0_834:
	// begin inline asm
	{sub.f16x2 %r5916,%r7655,%r7660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5919,%r7510,%r5916;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r8008,%r5703;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r8008,%r7511,%r5916;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r5930, 31;
	mov.u32 	%r5932, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5928,%r8008,%r5930,%r2342,%r5932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5933,%r5919,%r5928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5936,%r7748,%r7754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5939,%r5936,%r5933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5942,%r7425,%r5939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r5703,%r5942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5948,%r7656,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5951,%r7510,%r5948;
}
	// end inline asm
	mov.u32 	%r8009, %r5710;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r8009,%r7511,%r5948;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5960,%r8009,%r5930,%r2342,%r5932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5965,%r5951,%r5960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r7736,%r7754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5971,%r5965,%r5968;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5974,%r7425,%r5971;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r5710,%r5974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5980,%r7640,%r7660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r7651,%r7661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r5980,%r5983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5989,%r7425,%r5986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5992,%r7636,%r5989;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;

	mov.u32 	%r7636, %r5992;

$L__BB0_841:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7660;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r6003, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5999,%r7660,%r436,%r2342,%r6003;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5999;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6005, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6006,%r6005,%r7655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6009,%r7514,%r6006;
}
	// end inline asm
	@%p28 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r8011,%r5706;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r8011,%r7515,%r6006;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r6022, 31;
	mov.u32 	%r6046, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6020,%r8011,%r6022,%r2342,%r6046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6025,%r6009,%r6020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r7745,%r7751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r6028,%r6025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6034,%r7425,%r6031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r5706,%r6034;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7661;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6042,%r7661,%r436,%r2342,%r6046;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6042;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6048, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6049,%r6048,%r7656;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6052,%r7514,%r6049;
}
	// end inline asm
	mov.u32 	%r8012, %r5713;
	@%p28 bra 	$L__BB0_846;

	// begin inline asm
	{mul.f16x2 %r8012,%r7515,%r6049;
}
	// end inline asm

$L__BB0_846:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6063,%r8012,%r6022,%r2342,%r6046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6068,%r6052,%r6063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r7733,%r7751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6074,%r6068,%r6071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6077,%r7425,%r6074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7628,%r5713,%r6077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6083,%r7631,%r7655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6086,%r7649,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6089,%r6083,%r6086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6092,%r7425,%r6089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6095,%r7627,%r6092;
}
	// end inline asm
	@%p28 bra 	$L__BB0_848;

	mov.u32 	%r7627, %r6095;

$L__BB0_848:
	// begin inline asm
	{sub.f16x2 %r6100,%r7649,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6103,%r7510,%r6100;
}
	// end inline asm
	mov.u32 	%r8014, %r5724;
	@%p28 bra 	$L__BB0_850;

	// begin inline asm
	{mul.f16x2 %r8014,%r7511,%r6100;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r6112, 31;
	mov.u32 	%r6114, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6110,%r8014,%r6112,%r2342,%r6114;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6115,%r6103,%r6110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6118,%r7730,%r7748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6121,%r6115,%r6118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6124,%r7425,%r6121;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r5724,%r6124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6130,%r7622,%r4328;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6133,%r4469,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r6130,%r6133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6139,%r7425,%r6136;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6142,%r7619,%r6139;
}
	// end inline asm
	@%p28 bra 	$L__BB0_852;

	mov.u32 	%r7619, %r6142;

$L__BB0_852:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6149,%r7651,%r436,%r2342,%r6114;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6149;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6155, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6156,%r6155,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6159,%r7514,%r6156;
}
	// end inline asm
	mov.u32 	%r8016, %r5727;
	@%p28 bra 	$L__BB0_854;

	// begin inline asm
	{mul.f16x2 %r8016,%r7515,%r6156;
}
	// end inline asm

$L__BB0_854:
	mov.u32 	%r6170, 31;
	mov.u32 	%r6172, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6168,%r8016,%r6170,%r2342,%r6172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6173,%r6159,%r6168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6176,%r7727,%r7745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6179,%r6173,%r6176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6182,%r7425,%r6179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r5727,%r6182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6188,%r7614,%r4409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6191,%r4503,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6194,%r6188,%r6191;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6197,%r7425,%r6194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6200,%r7611,%r6197;
}
	// end inline asm
	@%p28 bra 	$L__BB0_856;

	mov.u32 	%r7611, %r6200;

$L__BB0_856:
	// begin inline asm
	{sub.f16x2 %r6205,%r7644,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6208,%r7510,%r6205;
}
	// end inline asm
	@%p28 bra 	$L__BB0_858;
	bra.uni 	$L__BB0_857;

$L__BB0_858:
	// begin inline asm
	{neg.f16x2 %r8018,%r5738;
}
	// end inline asm
	bra.uni 	$L__BB0_859;

$L__BB0_857:
	// begin inline asm
	{mul.f16x2 %r8018,%r7511,%r6205;
}
	// end inline asm

$L__BB0_859:
	mov.u32 	%r6219, 31;
	mov.u32 	%r6221, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6217,%r8018,%r6219,%r2342,%r6221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6222,%r6208,%r6217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6225,%r7736,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6228,%r6225,%r6222;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6231,%r7425,%r6228;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r5738,%r6231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6237,%r7847,%r7848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6240,%r7510,%r6237;
}
	// end inline asm
	mov.u32 	%r8019, %r5745;
	@%p28 bra 	$L__BB0_861;

	// begin inline asm
	{mul.f16x2 %r8019,%r7511,%r6237;
}
	// end inline asm

$L__BB0_861:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6249,%r8019,%r6219,%r2342,%r6221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6254,%r6240,%r6249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r7843,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6260,%r6254,%r6257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6263,%r7425,%r6260;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r5745,%r6263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6269,%r7844,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6272,%r7641,%r7848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r6269,%r6272;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6278,%r7425,%r6275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6281,%r7600,%r6278;
}
	// end inline asm
	@%p28 bra 	$L__BB0_863;

	mov.u32 	%r7600, %r6281;

$L__BB0_863:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6292, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6288,%r7647,%r436,%r2342,%r6292;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6288;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6294, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6295,%r6294,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6298,%r7514,%r6295;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r8021,%r5741;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r8021,%r7515,%r6295;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r6311, 31;
	mov.u32 	%r6335, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6309,%r8021,%r6311,%r2342,%r6335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6314,%r6298,%r6309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6317,%r7733,%r7739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r6317,%r6314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6323,%r7425,%r6320;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7597,%r5741,%r6323;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7848;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6331,%r7848,%r436,%r2342,%r6335;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6331;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6337, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6338,%r6337,%r7847;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6341,%r7514,%r6338;
}
	// end inline asm
	mov.u32 	%r8022, %r5748;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r8022,%r7515,%r6338;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6352,%r8022,%r6311,%r2342,%r6335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6357,%r6341,%r6352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6360,%r7841,%r7739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6363,%r6357,%r6360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6366,%r7425,%r6363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r5748,%r6366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6372,%r7842,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6375,%r7632,%r7847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6378,%r6372,%r6375;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6381,%r7425,%r6378;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6384,%r7595,%r6381;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;

	mov.u32 	%r7595, %r6384;

$L__BB0_870:
	// begin inline asm
	{sub.f16x2 %r6389,%r7631,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6392,%r7510,%r6389;
}
	// end inline asm
	@%p28 bra 	$L__BB0_872;
	bra.uni 	$L__BB0_871;

$L__BB0_872:
	// begin inline asm
	{neg.f16x2 %r8024,%r5759;
}
	// end inline asm
	bra.uni 	$L__BB0_873;

$L__BB0_871:
	// begin inline asm
	{mul.f16x2 %r8024,%r7511,%r6389;
}
	// end inline asm

$L__BB0_873:
	mov.u32 	%r6403, 31;
	mov.u32 	%r6405, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6401,%r8024,%r6403,%r2342,%r6405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6406,%r6392,%r6401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6409,%r7730,%r7736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6412,%r6409,%r6406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6415,%r7425,%r6412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r5759,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6421,%r7632,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6424,%r7510,%r6421;
}
	// end inline asm
	mov.u32 	%r8025, %r5766;
	@%p28 bra 	$L__BB0_875;

	// begin inline asm
	{mul.f16x2 %r8025,%r7511,%r6421;
}
	// end inline asm

$L__BB0_875:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6433,%r8025,%r6403,%r2342,%r6405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r6424,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r7723,%r7736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6444,%r6438,%r6441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6447,%r7425,%r6444;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7591,%r5766,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6453,%r7594,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6456,%r7623,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r6453,%r6456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6462,%r7425,%r6459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6465,%r7590,%r6462;
}
	// end inline asm
	@%p28 bra 	$L__BB0_877;

	mov.u32 	%r7590, %r6465;

$L__BB0_877:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7640;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6476, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6472,%r7640,%r436,%r2342,%r6476;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6472;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6478, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6479,%r6478,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6482,%r7514,%r6479;
}
	// end inline asm
	@%p28 bra 	$L__BB0_879;
	bra.uni 	$L__BB0_878;

$L__BB0_879:
	// begin inline asm
	{neg.f16x2 %r8027,%r5762;
}
	// end inline asm
	bra.uni 	$L__BB0_880;

$L__BB0_878:
	// begin inline asm
	{mul.f16x2 %r8027,%r7515,%r6479;
}
	// end inline asm

$L__BB0_880:
	mov.u32 	%r6495, 31;
	mov.u32 	%r6519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6493,%r8027,%r6495,%r2342,%r6519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6482,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6501,%r7727,%r7733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6504,%r6501,%r6498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6507,%r7425,%r6504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7585,%r5762,%r6507;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6515,%r7641,%r436,%r2342,%r6519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6515;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6521, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r6521,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6525,%r7514,%r6522;
}
	// end inline asm
	mov.u32 	%r8028, %r5769;
	@%p28 bra 	$L__BB0_882;

	// begin inline asm
	{mul.f16x2 %r8028,%r7515,%r6522;
}
	// end inline asm

$L__BB0_882:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6536,%r8028,%r6495,%r2342,%r6519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6541,%r6525,%r6536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6544,%r7721,%r7733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6547,%r6541,%r6544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6550,%r7425,%r6547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7584,%r5769,%r6550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6556,%r7587,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6559,%r7615,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6562,%r6556,%r6559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6565,%r7425,%r6562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6568,%r7583,%r6565;
}
	// end inline asm
	@%p28 bra 	$L__BB0_884;

	mov.u32 	%r7583, %r6568;

$L__BB0_884:
	// begin inline asm
	{sub.f16x2 %r6573,%r7614,%r7622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6576,%r7510,%r6573;
}
	// end inline asm
	@%p28 bra 	$L__BB0_886;
	bra.uni 	$L__BB0_885;

$L__BB0_886:
	// begin inline asm
	{neg.f16x2 %r8030,%r5780;
}
	// end inline asm
	bra.uni 	$L__BB0_887;

$L__BB0_885:
	// begin inline asm
	{mul.f16x2 %r8030,%r7511,%r6573;
}
	// end inline asm

$L__BB0_887:
	mov.u32 	%r6587, 31;
	mov.u32 	%r6589, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6585,%r8030,%r6587,%r2342,%r6589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6590,%r6576,%r6585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6593,%r7726,%r7730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6596,%r6593,%r6590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6599,%r7425,%r6596;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r5780,%r6599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6605,%r7615,%r7623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6608,%r7510,%r6605;
}
	// end inline asm
	mov.u32 	%r8031, %r5787;
	@%p28 bra 	$L__BB0_889;

	// begin inline asm
	{mul.f16x2 %r8031,%r7511,%r6605;
}
	// end inline asm

$L__BB0_889:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6617,%r8031,%r6587,%r2342,%r6589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6622,%r6608,%r6617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6625,%r7720,%r7730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r6622,%r6625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r7425,%r6628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r5787,%r6631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6637,%r7827,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6640,%r7834,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6643,%r6637,%r6640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6646,%r7425,%r6643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6649,%r7577,%r6646;
}
	// end inline asm
	@%p28 bra 	$L__BB0_891;

	mov.u32 	%r7577, %r6649;

$L__BB0_891:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7622;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6660, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6656,%r7622,%r436,%r2342,%r6660;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6656;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6662, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6663,%r6662,%r7614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6666,%r7514,%r6663;
}
	// end inline asm
	@%p28 bra 	$L__BB0_893;
	bra.uni 	$L__BB0_892;

$L__BB0_893:
	// begin inline asm
	{neg.f16x2 %r8033,%r5783;
}
	// end inline asm
	bra.uni 	$L__BB0_894;

$L__BB0_892:
	// begin inline asm
	{mul.f16x2 %r8033,%r7515,%r6663;
}
	// end inline asm

$L__BB0_894:
	mov.u32 	%r6679, 31;
	mov.u32 	%r6703, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6677,%r8033,%r6679,%r2342,%r6703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6682,%r6666,%r6677;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6685,%r7725,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6688,%r6685,%r6682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6691,%r7425,%r6688;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7574,%r5783,%r6691;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7623;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6699,%r7623,%r436,%r2342,%r6703;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6699;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6705, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6706,%r6705,%r7615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6709,%r7514,%r6706;
}
	// end inline asm
	mov.u32 	%r8034, %r5790;
	@%p28 bra 	$L__BB0_896;

	// begin inline asm
	{mul.f16x2 %r8034,%r7515,%r6706;
}
	// end inline asm

$L__BB0_896:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6720,%r8034,%r6679,%r2342,%r6703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6725,%r6709,%r6720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6728,%r7719,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6731,%r6725,%r6728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6734,%r7425,%r6731;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r5790,%r6734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6740,%r7825,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6743,%r7831,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6746,%r6740,%r6743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6749,%r7425,%r6746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6752,%r7572,%r6749;
}
	// end inline asm
	@%p28 bra 	$L__BB0_898;

	mov.u32 	%r7572, %r6752;

$L__BB0_898:
	// begin inline asm
	{sub.f16x2 %r6757,%r7831,%r7834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6760,%r7510,%r6757;
}
	// end inline asm
	mov.u32 	%r8036, %r5801;
	@%p28 bra 	$L__BB0_900;

	// begin inline asm
	{mul.f16x2 %r8036,%r7511,%r6757;
}
	// end inline asm

$L__BB0_900:
	mov.u32 	%r6769, 31;
	mov.u32 	%r6793, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6767,%r8036,%r6769,%r2342,%r6793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6772,%r6760,%r6767;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6775,%r7823,%r7726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6778,%r6772,%r6775;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6781,%r7425,%r6778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r5801,%r6781;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7834;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6789,%r7834,%r436,%r2342,%r6793;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6789;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6795, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6796,%r6795,%r7831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6799,%r7514,%r6796;
}
	// end inline asm
	mov.u32 	%r8037, %r5804;
	@%p28 bra 	$L__BB0_902;

	// begin inline asm
	{mul.f16x2 %r8037,%r7515,%r6796;
}
	// end inline asm

$L__BB0_902:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6810,%r8037,%r6769,%r2342,%r6793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6815,%r6799,%r6810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6818,%r7824,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6821,%r6815,%r6818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6824,%r7425,%r6821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r5804,%r6824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6830,%r7842,%r7844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6833,%r7510,%r6830;
}
	// end inline asm
	@%p28 bra 	$L__BB0_904;
	bra.uni 	$L__BB0_903;

$L__BB0_904:
	// begin inline asm
	{neg.f16x2 %r8038,%r5808;
}
	// end inline asm
	bra.uni 	$L__BB0_905;

$L__BB0_903:
	// begin inline asm
	{mul.f16x2 %r8038,%r7511,%r6830;
}
	// end inline asm

$L__BB0_905:
	mov.u32 	%r6846, 31;
	mov.u32 	%r6870, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6844,%r8038,%r6846,%r2342,%r6870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6849,%r6833,%r6844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6852,%r7723,%r7843;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6855,%r6852,%r6849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6858,%r7425,%r6855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r5808,%r6858;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7844;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6866,%r7844,%r436,%r2342,%r6870;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6866;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6872, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6873,%r6872,%r7842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6876,%r7514,%r6873;
}
	// end inline asm
	@%p28 bra 	$L__BB0_907;
	bra.uni 	$L__BB0_906;

$L__BB0_907:
	// begin inline asm
	{neg.f16x2 %r8039,%r5811;
}
	// end inline asm
	bra.uni 	$L__BB0_908;

$L__BB0_906:
	// begin inline asm
	{mul.f16x2 %r8039,%r7515,%r6873;
}
	// end inline asm

$L__BB0_908:
	mov.u32 	%r6891, 31;
	mov.u32 	%r6893, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6889,%r8039,%r6891,%r2342,%r6893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6894,%r6876,%r6889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6897,%r7721,%r7841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6900,%r6897,%r6894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6903,%r7425,%r6900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r5811,%r6903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6909,%r7587,%r7594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6912,%r7510,%r6909;
}
	// end inline asm
	@%p28 bra 	$L__BB0_910;
	bra.uni 	$L__BB0_909;

$L__BB0_910:
	// begin inline asm
	{neg.f16x2 %r8040,%r5815;
}
	// end inline asm
	bra.uni 	$L__BB0_911;

$L__BB0_909:
	// begin inline asm
	{mul.f16x2 %r8040,%r7511,%r6909;
}
	// end inline asm

$L__BB0_911:
	mov.u32 	%r6925, 31;
	mov.u32 	%r6927, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6923,%r8040,%r6925,%r2342,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6928,%r6912,%r6923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6931,%r7720,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6934,%r6931,%r6928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6937,%r7425,%r6934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r5815,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6943,%r7837,%r7838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6946,%r7510,%r6943;
}
	// end inline asm
	mov.u32 	%r8041, %r5822;
	@%p28 bra 	$L__BB0_913;

	// begin inline asm
	{mul.f16x2 %r8041,%r7511,%r6943;
}
	// end inline asm

$L__BB0_913:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6955,%r8041,%r6925,%r2342,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6960,%r6946,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6963,%r7840,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6966,%r6960,%r6963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6969,%r7425,%r6966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r5822,%r6969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6975,%r7829,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6978,%r7828,%r7838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6981,%r6975,%r6978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6984,%r7425,%r6981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6987,%r7542,%r6984;
}
	// end inline asm
	@%p28 bra 	$L__BB0_915;

	mov.u32 	%r7542, %r6987;

$L__BB0_915:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7594;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6998, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6994,%r7594,%r436,%r2342,%r6998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6994;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7000, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7001,%r7000,%r7587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7004,%r7514,%r7001;
}
	// end inline asm
	@%p28 bra 	$L__BB0_917;
	bra.uni 	$L__BB0_916;

$L__BB0_917:
	// begin inline asm
	{neg.f16x2 %r8043,%r5818;
}
	// end inline asm
	bra.uni 	$L__BB0_918;

$L__BB0_916:
	// begin inline asm
	{mul.f16x2 %r8043,%r7515,%r7001;
}
	// end inline asm

$L__BB0_918:
	mov.u32 	%r7017, 31;
	mov.u32 	%r7041, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7015,%r8043,%r7017,%r2342,%r7041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7020,%r7004,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7023,%r7719,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7026,%r7023,%r7020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7029,%r7425,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r5818,%r7029;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7838;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7037,%r7838,%r436,%r2342,%r7041;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7037;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7043, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7044,%r7043,%r7837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7047,%r7514,%r7044;
}
	// end inline asm
	mov.u32 	%r8044, %r5825;
	@%p28 bra 	$L__BB0_920;

	// begin inline asm
	{mul.f16x2 %r8044,%r7515,%r7044;
}
	// end inline asm

$L__BB0_920:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7058,%r8044,%r7017,%r2342,%r7041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7063,%r7047,%r7058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7066,%r7846,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7069,%r7063,%r7066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7072,%r7425,%r7069;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r5825,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7078,%r7832,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7081,%r7826,%r7837;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7084,%r7078,%r7081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7087,%r7425,%r7084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7090,%r7535,%r7087;
}
	// end inline asm
	@%p28 bra 	$L__BB0_922;

	mov.u32 	%r7535, %r7090;

$L__BB0_922:
	// begin inline asm
	{sub.f16x2 %r7095,%r7825,%r7827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7098,%r7510,%r7095;
}
	// end inline asm
	@%p28 bra 	$L__BB0_924;
	bra.uni 	$L__BB0_923;

$L__BB0_924:
	// begin inline asm
	{neg.f16x2 %r8046,%r5836;
}
	// end inline asm
	bra.uni 	$L__BB0_925;

$L__BB0_923:
	// begin inline asm
	{mul.f16x2 %r8046,%r7511,%r7095;
}
	// end inline asm

$L__BB0_925:
	mov.u32 	%r7109, 31;
	mov.u32 	%r7111, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7107,%r8046,%r7109,%r2342,%r7111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7112,%r7098,%r7107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7115,%r7823,%r7720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7118,%r7115,%r7112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7121,%r7425,%r7118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r5836,%r7121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7127,%r7826,%r7828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7130,%r7510,%r7127;
}
	// end inline asm
	mov.u32 	%r8047, %r5843;
	@%p28 bra 	$L__BB0_927;

	// begin inline asm
	{mul.f16x2 %r8047,%r7511,%r7127;
}
	// end inline asm

$L__BB0_927:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7139,%r8047,%r7109,%r2342,%r7111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7144,%r7130,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7147,%r7835,%r7720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7150,%r7144,%r7147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7153,%r7425,%r7150;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r5843,%r7153;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7827;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7161,%r7827,%r436,%r2342,%r7111;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7161;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7167, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7168,%r7167,%r7825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7171,%r7514,%r7168;
}
	// end inline asm
	@%p28 bra 	$L__BB0_929;
	bra.uni 	$L__BB0_928;

$L__BB0_929:
	// begin inline asm
	{neg.f16x2 %r8048,%r5839;
}
	// end inline asm
	bra.uni 	$L__BB0_930;

$L__BB0_928:
	// begin inline asm
	{mul.f16x2 %r8048,%r7515,%r7168;
}
	// end inline asm

$L__BB0_930:
	mov.u32 	%r7186, 31;
	mov.u32 	%r7210, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7184,%r8048,%r7186,%r2342,%r7210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r7171,%r7184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7192,%r7824,%r7719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7195,%r7192,%r7189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7198,%r7425,%r7195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r5839,%r7198;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7828;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7206,%r7828,%r436,%r2342,%r7210;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7206;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7212, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7213,%r7212,%r7826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7216,%r7514,%r7213;
}
	// end inline asm
	mov.u32 	%r8049, %r5846;
	@%p28 bra 	$L__BB0_932;

	// begin inline asm
	{mul.f16x2 %r8049,%r7515,%r7213;
}
	// end inline asm

$L__BB0_932:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7227,%r8049,%r7186,%r2342,%r7210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7232,%r7216,%r7227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7235,%r7836,%r7719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7238,%r7232,%r7235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7241,%r7425,%r7238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r5846,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7247,%r7832,%r7829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7250,%r7510,%r7247;
}
	// end inline asm
	@%p28 bra 	$L__BB0_934;
	bra.uni 	$L__BB0_933;

$L__BB0_934:
	// begin inline asm
	{neg.f16x2 %r8050,%r5850;
}
	// end inline asm
	bra.uni 	$L__BB0_935;

$L__BB0_933:
	// begin inline asm
	{mul.f16x2 %r8050,%r7511,%r7247;
}
	// end inline asm

$L__BB0_935:
	mov.u32 	%r7263, 31;
	mov.u32 	%r7287, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7261,%r8050,%r7263,%r2342,%r7287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7266,%r7250,%r7261;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7269,%r7835,%r7840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7272,%r7269,%r7266;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7275,%r7425,%r7272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r5850,%r7275;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7829;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7283,%r7829,%r436,%r2342,%r7287;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7283;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7289, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7290,%r7289,%r7832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7293,%r7514,%r7290;
}
	// end inline asm
	@%p28 bra 	$L__BB0_937;
	bra.uni 	$L__BB0_936;

$L__BB0_937:
	// begin inline asm
	{neg.f16x2 %r8051,%r5853;
}
	// end inline asm
	bra.uni 	$L__BB0_938;

$L__BB0_936:
	// begin inline asm
	{mul.f16x2 %r8051,%r7515,%r7290;
}
	// end inline asm

$L__BB0_938:
	mov.u32 	%r7308, 31;
	mov.u32 	%r7310, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7306,%r8051,%r7308,%r2342,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7311,%r7293,%r7306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7314,%r7836,%r7846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7317,%r7314,%r7311;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7320,%r7425,%r7317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r5853,%r7320;
}
	// end inline asm
	bar.sync 	0;
	@%p506 bra 	$L__BB0_941;

	setp.ne.s32 	%p585, %r42, %r2243;
	shl.b32 	%r7329, %r42, 8;
	shl.b32 	%r7333, %r1776, 8;
	or.b32  	%r7334, %r7333, 128;
	mad.lo.s32 	%r7335, %r7334, %r41, %r2246;
	add.s32 	%r7336, %r7335, %r7329;
	shl.b32 	%r7337, %r7336, 2;
	mov.u32 	%r7338, _ZN6kernel5shmemE;
	add.s32 	%r7339, %r7338, %r7337;
	shl.b32 	%r7340, %r46, 4;
	add.s32 	%r1772, %r7339, %r7340;
	st.shared.v4.u32 	[%r1772], {%r7601, %r7596, %r7602, %r7597};
	st.shared.v4.u32 	[%r1772+512], {%r7646, %r7643, %r7637, %r7628};
	@%p585 bra 	$L__BB0_941;

	st.shared.v4.u32 	[%r1772+1024], {%r7638, %r7629, %r7659, %r7654};

$L__BB0_941:
	setp.eq.s32 	%p583, %r42, %r2243;
	@%p583 bra 	$L__BB0_943;

	mul.lo.s32 	%r7344, %r2639, 384;
	mad.lo.s32 	%r7345, %r70, %r42, %r7344;
	mad.lo.s32 	%r7348, %r2241, %r2243, %r7345;
	mad.lo.s32 	%r7351, %r2239, %r2238, %r7348;
	shl.b32 	%r7352, %r7351, 2;
	mov.u32 	%r7353, _ZN6kernel5shmemE;
	add.s32 	%r7354, %r7353, %r7352;
	shl.b32 	%r7355, %r46, 4;
	add.s32 	%r7356, %r7354, %r7355;
	st.shared.v4.u32 	[%r7356], {%r7638, %r7629, %r7659, %r7654};
	st.shared.v4.u32 	[%r7356+512], {%r7620, %r7612, %r7579, %r7574};
	st.shared.v4.u32 	[%r7356+1024], {%r7619, %r7611, %r7568, %r7564};

$L__BB0_943:
	setp.ne.s32 	%p584, %r41, %r2238;
	ld.param.u64 	%rd561, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd561;
	@%p584 bra 	$L__BB0_945;

	mad.lo.s32 	%r7358, %r674, %r1778, %r44;
	mul.lo.s32 	%r7359, %r7358, %r1776;
	mul.lo.s32 	%r7360, %r7359, 768;
	add.s32 	%r7361, %r1776, %r42;
	mad.lo.s32 	%r7362, %r7361, 384, %r7360;
	add.s32 	%r7363, %r7362, -128;
	mul.wide.s32 	%rd562, %r7363, 4;
	add.s64 	%rd563, %rd39, %rd562;
	add.s64 	%rd565, %rd563, %rd297;
	st.global.v4.u32 	[%rd565+512], {%r7601, %r7596, %r7602, %r7597};
	st.global.v4.u32 	[%rd565+1024], {%r7646, %r7643, %r7637, %r7628};
	st.global.v4.u32 	[%rd565+1536], {%r7638, %r7629, %r7659, %r7654};

$L__BB0_945:
	setp.ne.s32 	%p586, %r42, %r2243;
	@%p586 bra 	$L__BB0_948;

	mad.lo.s32 	%r7365, %r675, %r1777, %r43;
	mad.lo.s32 	%r7373, %r2639, 384, %r70;
	mad.lo.s32 	%r7374, %r1856, %r69, %r7373;
	mad.lo.s32 	%r7375, %r7365, %r1854, %r7374;
	mul.wide.s32 	%rd566, %r7375, 4;
	add.s64 	%rd567, %rd39, %rd566;
	add.s64 	%rd40, %rd567, %rd297;
	st.global.v4.u32 	[%rd40], {%r7638, %r7629, %r7659, %r7654};
	st.global.v4.u32 	[%rd40+512], {%r7620, %r7612, %r7579, %r7574};
	st.global.v4.u32 	[%rd40+1024], {%r7619, %r7611, %r7568, %r7564};
	@%p284 bra 	$L__BB0_948;

	st.global.v4.u32 	[%rd40+1536], {%r7793, %r7796, %r7800, %r7799};

$L__BB0_948:
	rem.s32 	%r7376, %r7680, %r1779;
	setp.eq.s32 	%p577, %r7376, 0;
	@%p577 bra 	$L__BB0_950;

	bar.sync 	0;
	bra.uni 	$L__BB0_957;

$L__BB0_950:
	@%p218 bra 	$L__BB0_952;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_952:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_956;

	membar.gl;
	add.s64 	%rd569, %rd24, 4;
	setp.eq.s32 	%p580, %r430, %r431;
	mov.u32 	%r7389, -2147483647;
	sub.s32 	%r7390, %r7389, %r429;
	selp.b32 	%r7391, %r7390, 1, %p580;
	atom.add.u32 	%r1773, [%rd569], %r7391;

$L__BB0_954:
	ld.volatile.u32 	%r7392, [%rd24+4];
	xor.b32  	%r7393, %r7392, %r1773;
	setp.gt.s32 	%p581, %r7393, -1;
	@%p581 bra 	$L__BB0_954;

	membar.gl;

$L__BB0_956:
	bar.sync 	0;

$L__BB0_957:
	add.s32 	%r7680, %r7680, 1;
	setp.lt.s32 	%p582, %r7680, %r49;
	mov.u32 	%r7794, %r7960;
	mov.u32 	%r7795, %r7961;
	mov.u32 	%r7797, %r7963;
	mov.u32 	%r7798, %r7964;
	mov.u32 	%r7805, %r7975;
	mov.u32 	%r7806, %r7976;
	mov.u32 	%r7807, %r7977;
	mov.u32 	%r7808, %r7978;
	mov.u32 	%r7809, %r7979;
	mov.u32 	%r7810, %r7980;
	mov.u32 	%r7811, %r7981;
	mov.u32 	%r7814, %r7984;
	mov.u32 	%r7816, %r7986;
	mov.u32 	%r7818, %r7988;
	mov.u32 	%r7608, %r497;
	mov.u32 	%r7609, %r7871;
	mov.u32 	%r7616, %r504;
	mov.u32 	%r7617, %r7873;
	mov.u32 	%r7624, %r511;
	mov.u32 	%r7633, %r519;
	mov.u32 	%r7642, %r7878;
	mov.u32 	%r7645, %r7880;
	mov.u32 	%r7648, %r549;
	mov.u32 	%r7650, %r557;
	mov.u32 	%r7652, %r564;
	mov.u32 	%r7653, %r565;
	mov.u32 	%r7657, %r573;
	mov.u32 	%r7658, %r574;
	mov.u32 	%r7801, %r7969;
	mov.u32 	%r7802, %r7970;
	mov.u32 	%r7803, %r7971;
	mov.u32 	%r7804, %r7972;
	mov.u32 	%r7819, %r7989;
	mov.u32 	%r7820, %r7990;
	@%p582 bra 	$L__BB0_332;

$L__BB0_958:
	ret;

}

