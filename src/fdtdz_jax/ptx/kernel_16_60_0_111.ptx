//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7884>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1729, %r1730}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1731, %r1732}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1733, %r1734}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1735, %r1736}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1737, %r1738}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1739, %r1740}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1741, %r1742}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1743, 32;
	sub.s32 	%r27, %r1743, %r1736;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1744, %r1742, -1;
	mad.lo.s32 	%r1745, %r1744, %r1741, %r1740;
	add.s32 	%r1746, %r1735, %r1734;
	add.s32 	%r1747, %r1746, %r1745;
	add.s32 	%r1748, %r1747, 1;
	mul.lo.s32 	%r1749, %r1729, %r1731;
	shl.b32 	%r29, %r1749, 1;
	shl.b32 	%r1750, %r1749, 2;
	div.s32 	%r1751, %r1748, %r1750;
	add.s32 	%r1752, %r1751, 1;
	mul.lo.s32 	%r1753, %r1752, %r1735;
	mul.lo.s32 	%r1754, %r1730, %r1732;
	shl.b32 	%r30, %r1754, 1;
	div.s32 	%r1755, %r1753, %r30;
	add.s32 	%r1756, %r1755, 1;
	mul.lo.s32 	%r31, %r1756, %r1734;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7251, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7251, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1759, %r1731, %r26, %r25;
	mad.lo.s32 	%r1760, %r1759, %r1730, %r24;
	mad.lo.s32 	%r1761, %r1760, %r1729, %r23;
	shl.b32 	%r35, %r1761, 5;
	add.s32 	%r7256, %r35, %r28;
	mul.lo.s32 	%r1762, %r1754, %r1749;
	shl.b32 	%r39, %r1762, 5;
	shl.b32 	%r1763, %r1736, 2;
	mov.u32 	%r1764, 128;
	sub.s32 	%r40, %r1764, %r1763;
	mul.lo.s32 	%r1765, %r1735, %r1734;
	mul.lo.s32 	%r1766, %r1765, %r1742;
	mul.lo.s32 	%r1767, %r1766, %r40;
	mul.lo.s32 	%r41, %r1767, 3;
	setp.ge.s32 	%p13, %r7256, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1768, %r28;
	add.s32 	%r1769, %r41, %r1768;
	sub.s32 	%r1770, %r1769, %r35;
	mul.lo.s32 	%r1771, %r1754, %r1729;
	mul.lo.s32 	%r1772, %r1771, %r1731;
	shl.b32 	%r1773, %r1772, 5;
	div.u32 	%r42, %r1770, %r1773;
	add.s32 	%r1774, %r42, 1;
	and.b32  	%r7253, %r1774, 3;
	setp.eq.s32 	%p14, %r7253, 0;
	mov.u32 	%r7254, %r7256;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7254, %r7256;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7254, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1775, 0;
	st.global.u32 	[%rd44], %r1775;
	add.s32 	%r7254, %r7254, %r39;
	add.s32 	%r7253, %r7253, -1;
	setp.ne.s32 	%p15, %r7253, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7254, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1776, 0;
	st.global.u32 	[%rd46], %r1776;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1776;
	add.s32 	%r1777, %r7254, %r39;
	add.s32 	%r1778, %r1777, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1776;
	add.s32 	%r1779, %r1778, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1776;
	add.s32 	%r7254, %r1779, %r39;
	setp.lt.s32 	%p17, %r7254, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1780, %r1735, %r29;
	div.s32 	%r1781, %r1780, %r30;
	mul.lo.s32 	%r1782, %r1781, %r1734;
	sub.s32 	%r51, %r1782, %r29;
	sub.s32 	%r1783, %r1734, %r30;
	mul.lo.s32 	%r1784, %r1783, %r1731;
	mul.lo.s32 	%r52, %r1729, 384;
	add.s32 	%r1785, %r52, %r52;
	add.s32 	%r1786, %r1785, 128;
	mul.lo.s32 	%r1788, %r1754, 768;
	mul.lo.s32 	%r1789, %r1784, %r1786;
	mad.lo.s32 	%r53, %r1788, %r51, %r1789;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7237, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7256, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7237;
	add.s32 	%r7256, %r7256, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7256, %r53;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7298, %r1729, %r25, %r23;
	mul.lo.s32 	%r57, %r1730, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7298, %r1734;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1790, 31;
	sub.s32 	%r1791, %r1790, %r28;
	selp.b32 	%r1792, %r28, %r1791, %p20;
	shl.b32 	%r1793, %r1792, 2;
	mov.u32 	%r1794, 2;
	sub.s32 	%r59, %r1793, %r1737;
	sub.s32 	%r1795, %r1794, %r1737;
	add.s32 	%r60, %r1795, %r1793;
	shl.b32 	%r61, %r1765, 6;
	add.s32 	%r62, %r1734, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1797, %r66, 31;
	add.s32 	%r1798, %r66, %r1797;
	shr.s32 	%r68, %r1798, 1;
	and.b32  	%r1799, %r1798, -2;
	sub.s32 	%r1800, %r66, %r1799;
	add.s32 	%r67, %r1800, %r61;
	rem.s32 	%r1835, %r63, %r40;
	add.s32 	%r1836, %r1835, %r40;
	rem.s32 	%r91, %r1836, %r40;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	mov.u32 	%r7257, %r7298;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1735;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7257;
	rem.s32 	%r1801, %r59, %r40;
	add.s32 	%r1802, %r1801, %r40;
	rem.s32 	%r71, %r1802, %r40;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	mul.lo.s32 	%r73, %r7257, %r1735;
	add.s32 	%r1805, %r1734, %r7257;
	mul.lo.s32 	%r74, %r1805, %r1735;
	add.s32 	%r1806, %r1805, %r1734;
	mul.lo.s32 	%r75, %r1806, %r1735;
	mov.u32 	%r7258, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7258, %r1734;
	add.s32 	%r78, %r77, %r7257;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1809, %r73, %r7258;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r71;
	mul.wide.s32 	%rd54, %r1811, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1812, %r1810, %r72;
	mul.wide.s32 	%rd56, %r1812, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7259, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1813, %r83, %r28;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r61, %r1814;
	mul.wide.s32 	%rd58, %r1815, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7259;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1818, %r74, %r7258;
	mul.lo.s32 	%r1819, %r1818, %r40;
	add.s32 	%r1820, %r1819, %r71;
	mul.wide.s32 	%rd60, %r1820, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1821, %r1819, %r72;
	mul.wide.s32 	%rd62, %r1821, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7260, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7260, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1822, %r65, %r79;
	mul.wide.s32 	%rd64, %r1822, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7260;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1825, %r75, %r7258;
	mul.lo.s32 	%r1826, %r1825, %r40;
	add.s32 	%r1827, %r1826, %r71;
	mul.wide.s32 	%rd66, %r1827, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1828, %r1826, %r72;
	mul.wide.s32 	%rd68, %r1828, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1829, %r70, %r1734;
	add.s32 	%r1830, %r1829, %r77;
	shl.b32 	%r90, %r1830, 5;
	add.s32 	%r1831, %r90, %r28;
	shl.b32 	%r1832, %r1831, 2;
	add.s32 	%r1833, %r61, %r1832;
	add.s32 	%r1834, %r1833, 2;
	mul.wide.s32 	%rd70, %r1834, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7261;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1841, %r73, %r7258;
	mul.lo.s32 	%r1842, %r1841, %r40;
	add.s32 	%r1843, %r1842, %r91;
	mul.wide.s32 	%rd72, %r1843, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1844, %r1842, %r92;
	mul.wide.s32 	%rd74, %r1844, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7262, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1845, %r83, %r68;
	shl.b32 	%r1846, %r1845, 2;
	add.s32 	%r1847, %r67, %r1846;
	mul.wide.s32 	%rd76, %r1847, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7262;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1850, %r74, %r7258;
	mul.lo.s32 	%r1851, %r1850, %r40;
	add.s32 	%r1852, %r1851, %r91;
	mul.wide.s32 	%rd78, %r1852, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1853, %r1851, %r92;
	mul.wide.s32 	%rd80, %r1853, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1854, %r66, %r79;
	mul.wide.s32 	%rd82, %r1854, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7263;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1857, %r75, %r7258;
	mul.lo.s32 	%r1858, %r1857, %r40;
	add.s32 	%r1859, %r1858, %r91;
	mul.wide.s32 	%rd84, %r1859, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1860, %r1858, %r92;
	mul.wide.s32 	%rd86, %r1860, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1861, %r90, %r68;
	shl.b32 	%r1862, %r1861, 2;
	add.s32 	%r1863, %r67, %r1862;
	add.s32 	%r1864, %r1863, 2;
	mul.wide.s32 	%rd88, %r1864, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7264;
	add.s32 	%r7258, %r7258, %r1754;
	setp.lt.s32 	%p28, %r7258, %r1735;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7257, %r7257, %r1749;
	setp.lt.s32 	%p29, %r7257, %r1734;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7265, %r7298;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1735;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7266, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1866, %r7266, 31;
	add.s32 	%r1867, %r7266, %r1866;
	shr.s32 	%r1868, %r1867, 1;
	mad.lo.s32 	%r1869, %r1868, %r1734, %r7265;
	shl.b32 	%r108, %r1869, 5;
	add.s32 	%r109, %r7266, -2;
	mul.lo.s32 	%r110, %r109, %r1734;
	add.s32 	%r1870, %r1735, %r109;
	mul.lo.s32 	%r111, %r1870, %r1734;
	add.s32 	%r1871, %r1870, %r1735;
	mul.lo.s32 	%r112, %r1871, %r1734;
	add.s32 	%r113, %r110, %r1734;
	add.s32 	%r114, %r7266, -1;
	add.s32 	%r1872, %r1735, %r114;
	mul.lo.s32 	%r115, %r1872, %r1734;
	add.s32 	%r1873, %r1872, %r1735;
	mul.lo.s32 	%r116, %r1873, %r1734;
	add.s32 	%r1874, %r1735, %r7266;
	mul.lo.s32 	%r117, %r1874, %r1734;
	add.s32 	%r1875, %r1874, %r1735;
	mul.lo.s32 	%r118, %r1875, %r1734;
	mul.lo.s32 	%r119, %r7266, %r1734;
	add.s32 	%r120, %r119, %r1734;
	add.s32 	%r121, %r7266, 1;
	add.s32 	%r1876, %r1735, %r121;
	mul.lo.s32 	%r122, %r1876, %r1734;
	add.s32 	%r1877, %r1876, %r1735;
	mul.lo.s32 	%r123, %r1877, %r1734;
	add.s32 	%r124, %r120, %r1734;
	add.s32 	%r125, %r7266, 2;
	add.s32 	%r1878, %r1735, %r125;
	mul.lo.s32 	%r126, %r1878, %r1734;
	add.s32 	%r1879, %r1878, %r1735;
	mul.lo.s32 	%r127, %r1879, %r1734;
	mov.u32 	%r7269, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1880, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1880;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1880, %r7265;
	setp.lt.s32 	%p33, %r129, %r1734;
	or.b32  	%r1881, %r109, %r129;
	setp.gt.s32 	%p34, %r1881, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1735;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1884, %r110, %r129;
	mul.wide.s32 	%rd93, %r1884, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7268, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1885, %r7269, %r108;
	mul.wide.s32 	%rd95, %r1885, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7268;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1888, %r111, %r129;
	mul.wide.s32 	%rd97, %r1888, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7270, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1889, %r7269, %r108;
	mul.wide.s32 	%rd99, %r1889, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7270;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1892, %r112, %r129;
	mul.wide.s32 	%rd101, %r1892, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7272, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1893, %r7269, %r108;
	mul.wide.s32 	%rd103, %r1893, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7272;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_57:
	or.b32  	%r1894, %r114, %r129;
	setp.gt.s32 	%p40, %r1894, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7266, %r1735;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1897, %r113, %r129;
	mul.wide.s32 	%rd105, %r1897, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7274, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1898, %r7269, %r108;
	mul.wide.s32 	%rd107, %r1898, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7274;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1901, %r115, %r129;
	mul.wide.s32 	%rd109, %r1901, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7276, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1902, %r7269, %r108;
	mul.wide.s32 	%rd111, %r1902, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7276;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1905, %r116, %r129;
	mul.wide.s32 	%rd113, %r1905, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7278, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1906, %r7269, %r108;
	mul.wide.s32 	%rd115, %r1906, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7278;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_72:
	or.b32  	%r1907, %r7266, %r129;
	setp.gt.s32 	%p47, %r1907, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7266, %r1735;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1910, %r119, %r129;
	mul.wide.s32 	%rd117, %r1910, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7280, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1911, %r7269, %r108;
	mul.wide.s32 	%rd119, %r1911, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7280;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1914, %r117, %r129;
	mul.wide.s32 	%rd121, %r1914, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7282, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1915, %r7269, %r108;
	mul.wide.s32 	%rd123, %r1915, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7282;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1918, %r118, %r129;
	mul.wide.s32 	%rd125, %r1918, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7284, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1919, %r7269, %r108;
	mul.wide.s32 	%rd127, %r1919, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7284;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_87:
	or.b32  	%r1920, %r121, %r129;
	setp.gt.s32 	%p54, %r1920, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1735;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1923, %r120, %r129;
	mul.wide.s32 	%rd129, %r1923, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7286, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1924, %r7269, %r108;
	mul.wide.s32 	%rd131, %r1924, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7286;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1927, %r122, %r129;
	mul.wide.s32 	%rd133, %r1927, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7288, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1928, %r7269, %r108;
	mul.wide.s32 	%rd135, %r1928, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7288;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1931, %r123, %r129;
	mul.wide.s32 	%rd137, %r1931, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7290, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1932, %r7269, %r108;
	mul.wide.s32 	%rd139, %r1932, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7290;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_102:
	or.b32  	%r1933, %r125, %r129;
	setp.gt.s32 	%p61, %r1933, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1735;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1936, %r124, %r129;
	mul.wide.s32 	%rd141, %r1936, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7292, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1937, %r7269, %r108;
	mul.wide.s32 	%rd143, %r1937, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7292;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1940, %r126, %r129;
	mul.wide.s32 	%rd145, %r1940, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7294, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1941, %r7269, %r108;
	mul.wide.s32 	%rd147, %r1941, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7294;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1944, %r127, %r129;
	mul.wide.s32 	%rd149, %r1944, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7296, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1945, %r7269, %r108;
	mul.wide.s32 	%rd151, %r1945, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7296;
	add.s32 	%r7269, %r7269, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7266, %r7266, %r30;
	setp.lt.s32 	%p69, %r7266, %r1735;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7265, %r7265, %r1749;
	setp.lt.s32 	%p70, %r7265, %r1734;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1738, 1;
	ld.param.u64 	%rd155, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1991, %r1739, 31;
	add.s32 	%r1992, %r1739, %r1991;
	bfe.u32 	%r233, %r1992, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1735;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7304, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1994, %r7304, 31;
	add.s32 	%r1995, %r7304, %r1994;
	shr.s32 	%r1996, %r1995, 1;
	mad.lo.s32 	%r1997, %r1996, %r1734, %r7298;
	shl.b32 	%r237, %r1997, 5;
	add.s32 	%r238, %r7304, -2;
	mul.lo.s32 	%r239, %r238, %r1734;
	add.s32 	%r1998, %r1735, %r238;
	mul.lo.s32 	%r240, %r1998, %r1734;
	add.s32 	%r241, %r239, %r1734;
	add.s32 	%r242, %r7304, -1;
	add.s32 	%r1999, %r1735, %r242;
	mul.lo.s32 	%r243, %r1999, %r1734;
	add.s32 	%r2000, %r1735, %r7304;
	mul.lo.s32 	%r244, %r2000, %r1734;
	mul.lo.s32 	%r245, %r7304, %r1734;
	add.s32 	%r246, %r245, %r1734;
	add.s32 	%r247, %r7304, 1;
	add.s32 	%r2001, %r1735, %r247;
	mul.lo.s32 	%r248, %r2001, %r1734;
	add.s32 	%r249, %r246, %r1734;
	add.s32 	%r250, %r7304, 2;
	add.s32 	%r2002, %r1735, %r250;
	mul.lo.s32 	%r251, %r2002, %r1734;
	mov.u32 	%r7308, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2003, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2003;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r2003, %r7298;
	setp.lt.s32 	%p83, %r253, %r1734;
	or.b32  	%r2004, %r238, %r253;
	setp.gt.s32 	%p84, %r2004, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1735;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r2006, %r239, %r253;
	shl.b32 	%r2007, %r2006, 1;
	mul.wide.s32 	%rd177, %r2007, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7308, %r237;
	mul.wide.s32 	%rd179, %r258, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7306;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r2011, %r240, %r253;
	shl.b32 	%r2012, %r2011, 1;
	mul.wide.s32 	%rd181, %r2012, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7307, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2015, %r258, 1;
	mul.wide.s32 	%rd183, %r2015, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7307;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r2017, %r239, %r253;
	shl.b32 	%r2018, %r2017, 1;
	or.b32  	%r2019, %r2018, 1;
	mul.wide.s32 	%rd185, %r2019, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7309, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7308, %r237;
	mul.wide.s32 	%rd187, %r269, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7309;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r2023, %r240, %r253;
	shl.b32 	%r2024, %r2023, 1;
	or.b32  	%r2025, %r2024, 1;
	mul.wide.s32 	%rd189, %r2025, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7310, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2028, %r269, 1;
	mul.wide.s32 	%rd191, %r2028, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7310;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_168:
	or.b32  	%r2029, %r242, %r253;
	setp.gt.s32 	%p93, %r2029, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7304, %r1735;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r2031, %r241, %r253;
	shl.b32 	%r2032, %r2031, 1;
	mul.wide.s32 	%rd193, %r2032, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7312, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7308, %r237;
	mul.wide.s32 	%rd195, %r280, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7312;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r2036, %r243, %r253;
	shl.b32 	%r2037, %r2036, 1;
	mul.wide.s32 	%rd197, %r2037, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7313, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2040, %r280, 1;
	mul.wide.s32 	%rd199, %r2040, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7313;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r2042, %r241, %r253;
	shl.b32 	%r2043, %r2042, 1;
	or.b32  	%r2044, %r2043, 1;
	mul.wide.s32 	%rd201, %r2044, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7315, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7308, %r237;
	mul.wide.s32 	%rd203, %r291, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7315;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2048, %r243, %r253;
	shl.b32 	%r2049, %r2048, 1;
	or.b32  	%r2050, %r2049, 1;
	mul.wide.s32 	%rd205, %r2050, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7316, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2053, %r291, 1;
	mul.wide.s32 	%rd207, %r2053, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7316;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_192:
	or.b32  	%r2054, %r7304, %r253;
	setp.gt.s32 	%p103, %r2054, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7304, %r1735;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2056, %r245, %r253;
	shl.b32 	%r2057, %r2056, 1;
	mul.wide.s32 	%rd209, %r2057, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7318, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7308, %r237;
	mul.wide.s32 	%rd211, %r302, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7318;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2061, %r244, %r253;
	shl.b32 	%r2062, %r2061, 1;
	mul.wide.s32 	%rd213, %r2062, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7319, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2065, %r302, 1;
	mul.wide.s32 	%rd215, %r2065, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7319;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2067, %r245, %r253;
	shl.b32 	%r2068, %r2067, 1;
	or.b32  	%r2069, %r2068, 1;
	mul.wide.s32 	%rd217, %r2069, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7321, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7321, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7321, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7308, %r237;
	mul.wide.s32 	%rd219, %r313, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7321;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2073, %r244, %r253;
	shl.b32 	%r2074, %r2073, 1;
	or.b32  	%r2075, %r2074, 1;
	mul.wide.s32 	%rd221, %r2075, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7322, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2078, %r313, 1;
	mul.wide.s32 	%rd223, %r2078, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7322;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_216:
	or.b32  	%r2079, %r247, %r253;
	setp.gt.s32 	%p113, %r2079, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1735;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2081, %r246, %r253;
	shl.b32 	%r2082, %r2081, 1;
	mul.wide.s32 	%rd225, %r2082, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7324, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7308, %r237;
	mul.wide.s32 	%rd227, %r324, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7324;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2086, %r248, %r253;
	shl.b32 	%r2087, %r2086, 1;
	mul.wide.s32 	%rd229, %r2087, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7325, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2090, %r324, 1;
	mul.wide.s32 	%rd231, %r2090, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7325;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2092, %r246, %r253;
	shl.b32 	%r2093, %r2092, 1;
	or.b32  	%r2094, %r2093, 1;
	mul.wide.s32 	%rd233, %r2094, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7308, %r237;
	mul.wide.s32 	%rd235, %r335, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7327;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2098, %r248, %r253;
	shl.b32 	%r2099, %r2098, 1;
	or.b32  	%r2100, %r2099, 1;
	mul.wide.s32 	%rd237, %r2100, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7328, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2103, %r335, 1;
	mul.wide.s32 	%rd239, %r2103, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7328;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_240:
	or.b32  	%r2104, %r250, %r253;
	setp.gt.s32 	%p123, %r2104, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1735;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2106, %r249, %r253;
	shl.b32 	%r2107, %r2106, 1;
	mul.wide.s32 	%rd241, %r2107, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7330, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7308, %r237;
	mul.wide.s32 	%rd243, %r346, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7330;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2111, %r251, %r253;
	shl.b32 	%r2112, %r2111, 1;
	mul.wide.s32 	%rd245, %r2112, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7331, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2115, %r346, 1;
	mul.wide.s32 	%rd247, %r2115, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7331;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2117, %r249, %r253;
	shl.b32 	%r2118, %r2117, 1;
	or.b32  	%r2119, %r2118, 1;
	mul.wide.s32 	%rd249, %r2119, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7333, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7308, %r237;
	mul.wide.s32 	%rd251, %r357, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7333;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2123, %r251, %r253;
	shl.b32 	%r2124, %r2123, 1;
	or.b32  	%r2125, %r2124, 1;
	mul.wide.s32 	%rd253, %r2125, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7334, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2128, %r357, 1;
	mul.wide.s32 	%rd255, %r2128, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7334;
	add.s32 	%r7308, %r7308, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7304, %r7304, %r30;
	setp.lt.s32 	%p134, %r7304, %r1735;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7298, %r7298, %r1749;
	setp.lt.s32 	%p135, %r7298, %r1734;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1946, 31;
	sub.s32 	%r1947, %r1946, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1948, %r28, %r1947, %p73;
	shl.b32 	%r1949, %r1948, 2;
	mov.u32 	%r1950, 2;
	sub.s32 	%r208, %r1949, %r1737;
	sub.s32 	%r1951, %r1950, %r1737;
	add.s32 	%r209, %r1951, %r1949;
	add.s32 	%r210, %r1734, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1976, %r211, %r40;
	add.s32 	%r1977, %r1976, %r40;
	rem.s32 	%r223, %r1977, %r40;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7298, 1;
	rem.s32 	%r1952, %r208, %r40;
	add.s32 	%r1953, %r1952, %r40;
	rem.s32 	%r215, %r1953, %r40;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1958, %r214, %r40;
	add.s32 	%r1959, %r1958, %r215;
	mul.wide.s32 	%rd157, %r1959, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1960, %r1958, %r216;
	mul.wide.s32 	%rd159, %r1960, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1961, %r7298, 5;
	add.s32 	%r1962, %r1961, %r28;
	shl.b32 	%r1963, %r1962, 2;
	mul.wide.s32 	%rd161, %r1963, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7299;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1966, %r214, 1;
	mul.lo.s32 	%r1967, %r1966, %r40;
	add.s32 	%r1968, %r1967, %r215;
	mul.wide.s32 	%rd162, %r1968, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1969, %r1967, %r216;
	mul.wide.s32 	%rd164, %r1969, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1970, %r210, %r7298;
	rem.s32 	%r1971, %r1970, %r1734;
	shl.b32 	%r1972, %r1971, 5;
	add.s32 	%r1973, %r1972, %r28;
	shl.b32 	%r1974, %r1973, 2;
	or.b32  	%r1975, %r1974, 2;
	mul.wide.s32 	%rd166, %r1975, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7300;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1982, %r214, %r40;
	add.s32 	%r1983, %r1982, %r223;
	mul.wide.s32 	%rd167, %r1983, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1984, %r1982, %r224;
	mul.wide.s32 	%rd169, %r1984, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7301;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1987, %r214, 1;
	mul.lo.s32 	%r1988, %r1987, %r40;
	add.s32 	%r1989, %r1988, %r223;
	mul.wide.s32 	%rd171, %r1989, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1990, %r1988, %r224;
	mul.wide.s32 	%rd173, %r1990, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7302;

$L__BB0_137:
	add.s32 	%r7298, %r7298, %r1749;
	setp.lt.s32 	%p79, %r7298, %r1734;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2130, %r1729, -1;
	mad.lo.s32 	%r2131, %r1730, 576, 128;
	mul.lo.s32 	%r2132, %r2131, %r2130;
	add.s32 	%r2133, %r52, -64;
	add.s32 	%r2134, %r2133, %r52;
	add.s32 	%r2135, %r1730, -1;
	mad.lo.s32 	%r2136, %r2134, %r2135, %r2132;
	mul.lo.s32 	%r2137, %r2130, %r1730;
	mul.lo.s32 	%r2138, %r2137, 320;
	mad.lo.s32 	%r2139, %r2133, %r2135, %r2138;
	add.s32 	%r366, %r2139, %r2136;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7513, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7338, 0;
	mov.u32 	%r7336, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7336], %r7513;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2142, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7336+4], %r2142;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2143, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7336+8], %r2143;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7336+12], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7513, {low,high};}

	// end inline asm
	add.s32 	%r7336, %r7336, 16;
	add.s32 	%r7338, %r7338, 4;
	setp.lt.s32 	%p137, %r7338, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7514, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2147, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2148, 31;
	sub.s32 	%r2149, %r2148, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2150, %r28, %r2149, %p138;
	shl.b32 	%r2151, %r2150, 2;
	sub.s32 	%r377, %r2151, %r1737;
	rem.s32 	%r2152, %r377, %r40;
	add.s32 	%r2153, %r2152, %r40;
	rem.s32 	%r378, %r2153, %r40;
	add.s32 	%r2154, %r377, 2;
	rem.s32 	%r2155, %r2154, %r40;
	add.s32 	%r2156, %r2155, %r40;
	rem.s32 	%r379, %r2156, %r40;
	mul.lo.s32 	%r2157, %r378, 6;
	mul.lo.s32 	%r2158, %r379, 6;
	mul.wide.s32 	%rd258, %r2157, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2158, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7340, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7340, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7341, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7341, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7343, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7343, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2167, %r377, 1;
	rem.s32 	%r2168, %r2167, %r40;
	add.s32 	%r2169, %r2168, %r40;
	rem.s32 	%r392, %r2169, %r40;
	add.s32 	%r2170, %r377, 3;
	rem.s32 	%r2171, %r2170, %r40;
	add.s32 	%r2172, %r2171, %r40;
	rem.s32 	%r393, %r2172, %r40;
	mul.lo.s32 	%r2173, %r392, 6;
	mul.lo.s32 	%r2174, %r393, 6;
	mul.wide.s32 	%rd260, %r2173, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2174, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7345, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7346, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7346, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7347, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2183, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2183;
	// begin inline asm
	mov.u32 %r2184, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2184;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2185, %nctaid.x;
	mov.u32 	%r2186, %nctaid.y;
	mul.lo.s32 	%r2187, %r2185, %r2186;
	mov.u32 	%r2188, %nctaid.z;
	mul.lo.s32 	%r406, %r2187, %r2188;
	neg.s32 	%r2189, %r24;
	add.s32 	%r2190, %r28, %r23;
	setp.ne.s32 	%p148, %r2190, %r2189;
	mov.u32 	%r2191, %ctaid.x;
	add.s32 	%r407, %r2191, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2192, -2147483647;
	sub.s32 	%r2193, %r2192, %r406;
	selp.b32 	%r2194, %r2193, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r409, [%rd264], %r2194;

$L__BB0_298:
	ld.volatile.u32 	%r2195, [%rd24+4];
	xor.b32  	%r2196, %r2195, %r409;
	setp.gt.s32 	%p150, %r2196, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	shr.s32 	%r2210, %r1739, 31;
	shr.u32 	%r2211, %r2210, 30;
	add.s32 	%r2212, %r1739, %r2211;
	shr.s32 	%r410, %r2212, 2;
	add.s32 	%r2213, %r28, 31;
	shr.s32 	%r2214, %r2213, 31;
	shr.u32 	%r2215, %r2214, 27;
	add.s32 	%r2216, %r2213, %r2215;
	and.b32  	%r2217, %r2216, -32;
	sub.s32 	%r2218, %r2213, %r2217;
	add.s32 	%r2219, %r28, 33;
	shr.s32 	%r2220, %r2219, 31;
	shr.u32 	%r2221, %r2220, 27;
	add.s32 	%r2222, %r2219, %r2221;
	and.b32  	%r2223, %r2222, -32;
	sub.s32 	%r2224, %r2219, %r2223;
	shr.u32 	%r2225, %r1739, 31;
	add.s32 	%r2226, %r1739, %r2225;
	and.b32  	%r2227, %r2226, -2;
	sub.s32 	%r411, %r1739, %r2227;
	setp.lt.s32 	%p152, %r28, 32;
	selp.b32 	%r412, %r2218, %r28, %p152;
	selp.b32 	%r413, %r2224, %r28, %p152;
	mov.u32 	%r2209, 0;
	// begin inline asm
	{mov.u32 %r2228, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2554, %r2228, 8;
	add.s32 	%r2555, %r2554, -8192;
	or.b32  	%r2232, %r2555, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7625, %r2147;
	mov.u32 	%r7655, %r2147;
	mov.u32 	%r7626, %r2147;
	mov.u32 	%r7656, %r2147;
	mov.u32 	%r7627, %r2147;
	mov.u32 	%r7353, %r2147;
	mov.u32 	%r7354, %r2147;
	mov.u32 	%r7668, %r2147;
	mov.u32 	%r7657, %r2147;
	mov.u32 	%r7658, %r2147;
	mov.u32 	%r7628, %r2147;
	mov.u32 	%r7629, %r2147;
	mov.u32 	%r7630, %r2147;
	mov.u32 	%r7361, %r2147;
	mov.u32 	%r7362, %r2147;
	mov.u32 	%r7667, %r2147;
	mov.u32 	%r7659, %r2147;
	mov.u32 	%r7660, %r2147;
	mov.u32 	%r7637, %r2147;
	mov.u32 	%r7367, %r2147;
	mov.u32 	%r7368, %r2147;
	mov.u32 	%r7369, %r2147;
	mov.u32 	%r7678, %r2147;
	mov.u32 	%r7664, %r2147;
	mov.u32 	%r7669, %r2147;
	mov.u32 	%r7638, %r2147;
	mov.u32 	%r7374, %r2147;
	mov.u32 	%r7375, %r2147;
	mov.u32 	%r7376, %r2147;
	mov.u32 	%r7672, %r2147;
	mov.u32 	%r7661, %r2147;
	mov.u32 	%r7670, %r2147;
	mov.u32 	%r7639, %r2147;
	mov.u32 	%r7640, %r2147;
	mov.u32 	%r7382, %r2147;
	mov.u32 	%r7673, %r2147;
	mov.u32 	%r7674, %r2147;
	mov.u32 	%r7385, %r2147;
	mov.u32 	%r7641, %r2147;
	mov.u32 	%r7642, %r2147;
	mov.u32 	%r7643, %r2147;
	mov.u32 	%r7389, %r2147;
	mov.u32 	%r7675, %r2147;
	mov.u32 	%r7676, %r2147;
	mov.u32 	%r7644, %r2147;
	mov.u32 	%r7645, %r2147;
	mov.u32 	%r7646, %r2147;
	mov.u32 	%r7631, %r2147;
	mov.u32 	%r7396, %r2147;
	mov.u32 	%r7662, %r2147;
	mov.u32 	%r7663, %r2147;
	mov.u32 	%r7632, %r2147;
	mov.u32 	%r7400, %r2147;
	mov.u32 	%r7665, %r2147;
	mov.u32 	%r7666, %r2147;
	mov.u32 	%r7695, %r2147;
	mov.u32 	%r7404, %r2147;
	mov.u32 	%r7405, %r2147;
	mov.u32 	%r7406, %r2147;
	mov.u32 	%r7551, %r2147;
	mov.u32 	%r7696, %r2147;
	mov.u32 	%r7409, %r2147;
	mov.u32 	%r7410, %r2147;
	mov.u32 	%r7411, %r2147;
	mov.u32 	%r7552, %r2147;
	mov.u32 	%r7697, %r2147;
	mov.u32 	%r7698, %r2147;
	mov.u32 	%r7415, %r2147;
	mov.u32 	%r7416, %r2147;
	mov.u32 	%r7417, %r2147;
	mov.u32 	%r7553, %r2147;
	mov.u32 	%r7419, %r2147;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7422, %r2147;
	mov.u32 	%r7423, %r2147;
	mov.u32 	%r7424, %r2147;
	mov.u32 	%r7555, %r2147;
	mov.u32 	%r7426, %r2147;
	mov.u32 	%r7427, %r2147;
	mov.u32 	%r7428, %r2147;
	mov.u32 	%r7429, %r2147;
	mov.u32 	%r7679, %r2147;
	mov.u32 	%r7431, %r2147;
	mov.u32 	%r7432, %r2147;
	mov.u32 	%r7433, %r2147;
	mov.u32 	%r7434, %r2147;
	mov.u32 	%r7680, %r2147;
	mov.u32 	%r7647, %r2147;
	mov.u32 	%r7648, %r2147;
	mov.u32 	%r7649, %r2147;
	mov.u32 	%r7650, %r2147;
	mov.u32 	%r7440, %r2147;
	mov.u32 	%r7441, %r2147;
	mov.u32 	%r7704, %r2147;
	mov.u32 	%r7443, %r2147;
	mov.u32 	%r7444, %r2147;
	mov.u32 	%r7559, %r2147;
	mov.u32 	%r7446, %r2147;
	mov.u32 	%r7447, %r2147;
	mov.u32 	%r7448, %r2147;
	mov.u32 	%r7449, %r2147;
	mov.u32 	%r7706, %r2147;
	mov.u32 	%r7451, %r2147;
	mov.u32 	%r7452, %r2147;
	mov.u32 	%r7562, %r2147;
	mov.u32 	%r7454, %r2147;
	mov.u32 	%r7455, %r2147;
	mov.u32 	%r7456, %r2147;
	mov.u32 	%r7457, %r2147;
	mov.u32 	%r7707, %r2147;
	mov.u32 	%r7459, %r2147;
	mov.u32 	%r7460, %r2147;
	mov.u32 	%r7461, %r2147;
	mov.u32 	%r7565, %r2147;
	mov.u32 	%r7463, %r2147;
	mov.u32 	%r7464, %r2147;
	mov.u32 	%r7465, %r2147;
	mov.u32 	%r7466, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7468, %r2147;
	mov.u32 	%r7469, %r2147;
	mov.u32 	%r7470, %r2147;
	mov.u32 	%r7568, %r2147;
	mov.u32 	%r7472, %r2147;
	mov.u32 	%r7473, %r2147;
	mov.u32 	%r7474, %r2147;
	mov.u32 	%r7475, %r2147;
	mov.u32 	%r7476, %r2147;
	mov.u32 	%r7477, %r2147;
	mov.u32 	%r7478, %r2147;
	mov.u32 	%r7479, %r2147;
	mov.u32 	%r7480, %r2147;
	mov.u32 	%r7481, %r2147;
	mov.u32 	%r7482, %r2147;
	mov.u32 	%r7483, %r2147;
	mov.u32 	%r7484, %r2147;
	mov.u32 	%r7485, %r2147;
	mov.u32 	%r7486, %r2147;
	mov.u32 	%r7487, %r2147;
	mov.u32 	%r7488, %r2147;
	mov.u32 	%r7489, %r2147;
	mov.u32 	%r7490, %r2147;
	mov.u32 	%r7491, %r2147;
	mov.u32 	%r7492, %r2147;
	mov.u32 	%r7493, %r2147;
	mov.u32 	%r7494, %r2209;
	mov.u32 	%r7495, %r2209;
	mov.u32 	%r7496, %r2209;
	mov.u32 	%r7497, %r2209;
	mov.u32 	%r7498, %r2209;
	mov.u32 	%r7499, %r2209;
	mov.u32 	%r7500, %r2209;
	mov.u32 	%r7501, %r2209;
	mov.u32 	%r7502, %r2209;
	mov.u32 	%r7503, %r2209;
	mov.u32 	%r7504, %r2209;
	mov.u32 	%r7505, %r2209;
	mov.u32 	%r7633, %r2147;
	mov.u32 	%r7634, %r2147;
	mov.u32 	%r7635, %r2147;
	mov.u32 	%r7636, %r2147;
	mov.u32 	%r7651, %r2147;
	mov.u32 	%r7652, %r2147;
	mov.u32 	%r7512, %r2209;

$L__BB0_302:
	mov.u32 	%r551, %r7708;
	mov.u32 	%r550, %r7466;
	mov.u32 	%r542, %r7707;
	mov.u32 	%r541, %r7457;
	mov.u32 	%r534, %r7706;
	mov.u32 	%r526, %r7704;
	mov.u32 	%r7466, %r7700;
	mov.u32 	%r496, %r7699;
	mov.u32 	%r7457, %r7698;
	mov.u32 	%r488, %r7697;
	mov.u32 	%r481, %r7696;
	mov.u32 	%r474, %r7695;
	sub.s32 	%r7248, %r1734, %r30;
	mov.u32 	%r2243, 1;
	not.b32 	%r2517, %r25;
	mov.u32 	%r2509, -1;
	add.s32 	%r2518, %r1731, %r2517;
	mul.lo.s32 	%r2519, %r2518, %r1733;
	add.s32 	%r2520, %r7512, %r2519;
	not.b32 	%r2522, %r26;
	add.s32 	%r2523, %r1732, %r2522;
	mul.lo.s32 	%r2524, %r2523, %r1733;
	add.s32 	%r2525, %r7512, %r2524;
	add.s32 	%r2526, %r2519, %r2524;
	add.s32 	%r2527, %r2526, %r1734;
	not.b32 	%r2528, %r23;
	add.s32 	%r2529, %r1729, %r2528;
	mad.lo.s32 	%r2530, %r2518, %r1729, %r2529;
	not.b32 	%r2531, %r24;
	add.s32 	%r2532, %r1730, %r2531;
	mad.lo.s32 	%r2533, %r2523, %r1730, %r2532;
	add.s32 	%r2534, %r2530, %r2533;
	shl.b32 	%r2535, %r2534, 1;
	add.s32 	%r2536, %r2527, %r2535;
	add.s32 	%r2537, %r7512, %r2536;
	add.s32 	%r2538, %r7512, %r2526;
	div.s32 	%r2539, %r2537, %r1734;
	neg.s32 	%r2540, %r1734;
	sub.s32 	%r2543, %r30, %r1734;
	sub.s32 	%r2544, %r2530, %r2533;
	shl.b32 	%r2545, %r2544, 1;
	add.s32 	%r2546, %r2545, %r1735;
	mad.lo.s32 	%r2547, %r2539, %r30, %r2546;
	mad.lo.s32 	%r2548, %r2539, %r2543, %r2538;
	div.s32 	%r2549, %r2547, %r1735;
	mul.lo.s32 	%r2550, %r2549, %r1735;
	sub.s32 	%r2553, %r1750, %r1735;
	mov.u32 	%r2327, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2229,%r7514,%r2209,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2235, %r7341, %r2229, %p12;
	// begin inline asm
	{mul.f16x2 %r7598,%r2235,%r7493;
}
	// end inline asm
	selp.b32 	%r2238, %r7345, %r2229, %p12;
	// begin inline asm
	{mul.f16x2 %r7596,%r2238,%r7488;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2241,%r7514,%r2243,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2247, %r7341, %r2241, %p12;
	// begin inline asm
	{mul.f16x2 %r7597,%r2247,%r7492;
}
	// end inline asm
	selp.b32 	%r2250, %r7345, %r2241, %p12;
	// begin inline asm
	{mul.f16x2 %r7595,%r2250,%r7487;
}
	// end inline asm
	mov.u32 	%r2255, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2253,%r7514,%r2255,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2259, %r7341, %r2253, %p12;
	// begin inline asm
	{mul.f16x2 %r7594,%r2259,%r7483;
}
	// end inline asm
	selp.b32 	%r2262, %r7345, %r2253, %p12;
	// begin inline asm
	{mul.f16x2 %r7593,%r2262,%r7481;
}
	// end inline asm
	mov.u32 	%r2267, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2265,%r7514,%r2267,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2271, %r7341, %r2265, %p12;
	// begin inline asm
	{mul.f16x2 %r7592,%r2271,%r7680;
}
	// end inline asm
	selp.b32 	%r2274, %r7345, %r2265, %p12;
	// begin inline asm
	{mul.f16x2 %r7590,%r2274,%r7679;
}
	// end inline asm
	mov.u32 	%r2279, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2277,%r7514,%r2279,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2283, %r7341, %r2277, %p12;
	// begin inline asm
	{mul.f16x2 %r7591,%r2283,%r7479;
}
	// end inline asm
	selp.b32 	%r2286, %r7345, %r2277, %p12;
	// begin inline asm
	{mul.f16x2 %r7589,%r2286,%r7476;
}
	// end inline asm
	mov.u32 	%r2291, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2289,%r7514,%r2291,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2295, %r7341, %r2289, %p12;
	// begin inline asm
	{mul.f16x2 %r7588,%r2295,%r7473;
}
	// end inline asm
	selp.b32 	%r2298, %r7345, %r2289, %p12;
	// begin inline asm
	{mul.f16x2 %r7585,%r2298,%r7464;
}
	// end inline asm
	mov.u32 	%r2303, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2301,%r7514,%r2303,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2307, %r7341, %r2301, %p12;
	// begin inline asm
	{mul.f16x2 %r7587,%r2307,%r7472;
}
	// end inline asm
	selp.b32 	%r2310, %r7345, %r2301, %p12;
	// begin inline asm
	{mul.f16x2 %r7584,%r2310,%r7463;
}
	// end inline asm
	mov.u32 	%r2315, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2313,%r7514,%r2315,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2319, %r7341, %r2313, %p12;
	// begin inline asm
	{mul.f16x2 %r7586,%r2319,%r7568;
}
	// end inline asm
	selp.b32 	%r2322, %r7345, %r2313, %p12;
	// begin inline asm
	{mul.f16x2 %r7583,%r2322,%r7565;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2325,%r7514,%r2327,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2331, %r7341, %r2325, %p12;
	// begin inline asm
	{mul.f16x2 %r7582,%r2331,%r7455;
}
	// end inline asm
	selp.b32 	%r2334, %r7345, %r2325, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2334,%r7447;
}
	// end inline asm
	mov.u32 	%r2339, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2337,%r7514,%r2339,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2343, %r7341, %r2337, %p12;
	// begin inline asm
	{mul.f16x2 %r7581,%r2343,%r7454;
}
	// end inline asm
	selp.b32 	%r2346, %r7345, %r2337, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2346,%r7446;
}
	// end inline asm
	mov.u32 	%r2351, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2349,%r7514,%r2351,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2355, %r7341, %r2349, %p12;
	// begin inline asm
	{mul.f16x2 %r7580,%r2355,%r7562;
}
	// end inline asm
	selp.b32 	%r2358, %r7345, %r2349, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2358,%r7559;
}
	// end inline asm
	mov.u32 	%r2363, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2361,%r7514,%r2363,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2367, %r7341, %r2361, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2367,%r7666;
}
	// end inline asm
	selp.b32 	%r2370, %r7345, %r2361, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2370,%r7663;
}
	// end inline asm
	mov.u32 	%r2375, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2373,%r7514,%r2375,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2379, %r7341, %r2373, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2379,%r7676;
}
	// end inline asm
	selp.b32 	%r2382, %r7345, %r2373, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2382,%r7674;
}
	// end inline asm
	mov.u32 	%r2387, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2385,%r7514,%r2387,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2391, %r7341, %r2385, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2391,%r7675;
}
	// end inline asm
	selp.b32 	%r2394, %r7345, %r2385, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2394,%r7673;
}
	// end inline asm
	mov.u32 	%r2399, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2397,%r7514,%r2399,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2403, %r7341, %r2397, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2403,%r7670;
}
	// end inline asm
	selp.b32 	%r2406, %r7345, %r2397, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2406,%r7669;
}
	// end inline asm
	mov.u32 	%r2411, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2409,%r7514,%r2411,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2415, %r7341, %r2409, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2415,%r7426;
}
	// end inline asm
	selp.b32 	%r2418, %r7345, %r2409, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2418,%r7419;
}
	// end inline asm
	mov.u32 	%r2423, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2421,%r7514,%r2423,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2427, %r7341, %r2421, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2427,%r7555;
}
	// end inline asm
	selp.b32 	%r2430, %r7345, %r2421, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2430,%r7553;
}
	// end inline asm
	mov.u32 	%r2435, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2433,%r7514,%r2435,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2439, %r7341, %r2433, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2439,%r7660;
}
	// end inline asm
	selp.b32 	%r2442, %r7345, %r2433, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2442,%r7658;
}
	// end inline asm
	mov.u32 	%r2447, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2445,%r7514,%r2447,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2451, %r7341, %r2445, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2451,%r7659;
}
	// end inline asm
	selp.b32 	%r2454, %r7345, %r2445, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2454,%r7657;
}
	// end inline asm
	mov.u32 	%r2459, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2457,%r7514,%r2459,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2463, %r7341, %r2457, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2463,%r7552;
}
	// end inline asm
	selp.b32 	%r2466, %r7345, %r2457, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2466,%r7551;
}
	// end inline asm
	mov.u32 	%r2471, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2469,%r7514,%r2471,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2475, %r7341, %r2469, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2475,%r7655;
}
	// end inline asm
	selp.b32 	%r2478, %r7345, %r2469, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2478,%r7656;
}
	// end inline asm
	mov.u32 	%r2483, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2481,%r7514,%r2483,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2487, %r7341, %r2481, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2487,%r7661;
}
	// end inline asm
	selp.b32 	%r2490, %r7345, %r2481, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2490,%r7664;
}
	// end inline asm
	mov.u32 	%r2495, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2493,%r7514,%r2495,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2499, %r7341, %r2493, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2499,%r7672;
}
	// end inline asm
	selp.b32 	%r2502, %r7345, %r2493, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2502,%r7678;
}
	// end inline asm
	mov.u32 	%r2507, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2505,%r7514,%r2507,%r2232,%r2509;
}
	// end inline asm
	selp.b32 	%r2511, %r7341, %r2505, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2511,%r7667;
}
	// end inline asm
	selp.b32 	%r2514, %r7345, %r2505, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2514,%r7668;
}
	// end inline asm
	rem.s32 	%r651, %r2520, %r51;
	rem.s32 	%r652, %r2525, %r7248;
	mad.lo.s32 	%r653, %r2539, %r2540, %r2537;
	sub.s32 	%r654, %r2547, %r2550;
	mad.lo.s32 	%r655, %r2549, %r2553, %r2548;
	ld.param.u64 	%rd266, [%rd1+144];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2603, %r655, 1;
	mul.wide.s32 	%rd268, %r2603, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2806, %r1745, 1;
	setp.lt.s32 	%p160, %r655, %r2806;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r655, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7517, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7518, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2606, %r1745, 1;
	setp.lt.s32 	%p155, %r655, %r2606;
	setp.gt.s32 	%p156, %r655, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7515, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7516, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2814, 0;
	mov.u32 	%r2825, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2812,%r7513,%r2814,%r2232,%r2825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2817,%r7517,%r2812;
}
	// end inline asm
	mov.u32 	%r2823, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2821,%r7513,%r2823,%r2232,%r2825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2826,%r7518,%r2821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7520,%r2817,%r2826;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7519, %r7520;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r7519;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r7520;
}
	// end inline asm
	mov.u32 	%r2847, 2;
	mov.u32 	%r2858, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2845,%r7513,%r2847,%r2232,%r2858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r7517,%r2845;
}
	// end inline asm
	mov.u32 	%r2856, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2854,%r7513,%r2856,%r2232,%r2858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2859,%r7518,%r2854;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r2850,%r2859;
}
	// end inline asm
	mov.u32 	%r7521, %r7522;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7597,%r7597,%r7521;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7595,%r7595,%r7522;
}
	// end inline asm
	mov.u32 	%r2880, 4;
	mov.u32 	%r2891, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2878,%r7513,%r2880,%r2232,%r2891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2883,%r7517,%r2878;
}
	// end inline asm
	mov.u32 	%r2889, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2887,%r7513,%r2889,%r2232,%r2891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2892,%r7518,%r2887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r2883,%r2892;
}
	// end inline asm
	mov.u32 	%r7523, %r7524;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r7523;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7593,%r7593,%r7524;
}
	// end inline asm
	mov.u32 	%r2913, 6;
	mov.u32 	%r2924, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2911,%r7513,%r2913,%r2232,%r2924;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2916,%r7517,%r2911;
}
	// end inline asm
	mov.u32 	%r2922, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2920,%r7513,%r2922,%r2232,%r2924;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2925,%r7518,%r2920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r2916,%r2925;
}
	// end inline asm
	mov.u32 	%r7525, %r7526;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r7525;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7590,%r7590,%r7526;
}
	// end inline asm
	mov.u32 	%r2946, 8;
	mov.u32 	%r2957, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2944,%r7513,%r2946,%r2232,%r2957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2949,%r7517,%r2944;
}
	// end inline asm
	mov.u32 	%r2955, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2953,%r7513,%r2955,%r2232,%r2957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2958,%r7518,%r2953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r2949,%r2958;
}
	// end inline asm
	mov.u32 	%r7527, %r7528;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7591,%r7591,%r7527;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7589,%r7589,%r7528;
}
	// end inline asm
	mov.u32 	%r2979, 10;
	mov.u32 	%r2990, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2977,%r7513,%r2979,%r2232,%r2990;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2982,%r7517,%r2977;
}
	// end inline asm
	mov.u32 	%r2988, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2986,%r7513,%r2988,%r2232,%r2990;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2991,%r7518,%r2986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r2982,%r2991;
}
	// end inline asm
	mov.u32 	%r7529, %r7530;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7588,%r7588,%r7529;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7585,%r7585,%r7530;
}
	// end inline asm
	mov.u32 	%r3012, 12;
	mov.u32 	%r3023, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3010,%r7513,%r3012,%r2232,%r3023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3015,%r7517,%r3010;
}
	// end inline asm
	mov.u32 	%r3021, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3019,%r7513,%r3021,%r2232,%r3023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3024,%r7518,%r3019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r3015,%r3024;
}
	// end inline asm
	mov.u32 	%r7531, %r7532;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7587,%r7587,%r7531;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7532, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7584,%r7584,%r7532;
}
	// end inline asm
	mov.u32 	%r3045, 14;
	mov.u32 	%r3056, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3043,%r7513,%r3045,%r2232,%r3056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3048,%r7517,%r3043;
}
	// end inline asm
	mov.u32 	%r3054, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3052,%r7513,%r3054,%r2232,%r3056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3057,%r7518,%r3052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r3048,%r3057;
}
	// end inline asm
	mov.u32 	%r7533, %r7534;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7533, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7582,%r7582,%r7533;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7534, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r7534;
}
	// end inline asm
	mov.u32 	%r3078, 16;
	mov.u32 	%r3089, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3076,%r7513,%r3078,%r2232,%r3089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3081,%r7517,%r3076;
}
	// end inline asm
	mov.u32 	%r3087, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3085,%r7513,%r3087,%r2232,%r3089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3090,%r7518,%r3085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r3081,%r3090;
}
	// end inline asm
	mov.u32 	%r7535, %r7536;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7535, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r7535;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7536, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7536;
}
	// end inline asm
	mov.u32 	%r3111, 18;
	mov.u32 	%r3122, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3109,%r7513,%r3111,%r2232,%r3122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3114,%r7517,%r3109;
}
	// end inline asm
	mov.u32 	%r3120, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3118,%r7513,%r3120,%r2232,%r3122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3123,%r7518,%r3118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r3114,%r3123;
}
	// end inline asm
	mov.u32 	%r7537, %r7538;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7537, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7537;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7538, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r7538;
}
	// end inline asm
	mov.u32 	%r3144, 20;
	mov.u32 	%r3155, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3142,%r7513,%r3144,%r2232,%r3155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3147,%r7517,%r3142;
}
	// end inline asm
	mov.u32 	%r3153, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3151,%r7513,%r3153,%r2232,%r3155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3156,%r7518,%r3151;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r3147,%r3156;
}
	// end inline asm
	mov.u32 	%r7539, %r7540;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7539, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7539;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7540, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r7540;
}
	// end inline asm
	mov.u32 	%r3177, 22;
	mov.u32 	%r3188, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3175,%r7513,%r3177,%r2232,%r3188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3180,%r7517,%r3175;
}
	// end inline asm
	mov.u32 	%r3186, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3184,%r7513,%r3186,%r2232,%r3188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3189,%r7518,%r3184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r3180,%r3189;
}
	// end inline asm
	mov.u32 	%r7541, %r7542;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7541, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r7541;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7542, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r7542;
}
	// end inline asm
	mov.u32 	%r3210, 24;
	mov.u32 	%r3221, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3208,%r7513,%r3210,%r2232,%r3221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3213,%r7517,%r3208;
}
	// end inline asm
	mov.u32 	%r3219, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3217,%r7513,%r3219,%r2232,%r3221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3222,%r7518,%r3217;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r3213,%r3222;
}
	// end inline asm
	mov.u32 	%r7543, %r7544;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7543, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r7543;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7544, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r7544;
}
	// end inline asm
	mov.u32 	%r3243, 26;
	mov.u32 	%r3254, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3241,%r7513,%r3243,%r2232,%r3254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3246,%r7517,%r3241;
}
	// end inline asm
	mov.u32 	%r3252, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3250,%r7513,%r3252,%r2232,%r3254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3255,%r7518,%r3250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r3246,%r3255;
}
	// end inline asm
	mov.u32 	%r7545, %r7546;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7545, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r7545;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7546, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r7546;
}
	// end inline asm
	mov.u32 	%r3276, 28;
	mov.u32 	%r3287, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3274,%r7513,%r3276,%r2232,%r3287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3279,%r7517,%r3274;
}
	// end inline asm
	mov.u32 	%r3285, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3283,%r7513,%r3285,%r2232,%r3287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3288,%r7518,%r3283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r3279,%r3288;
}
	// end inline asm
	mov.u32 	%r7547, %r7548;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7547, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r7547;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7548, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r7548;
}
	// end inline asm
	mov.u32 	%r3318, 31;
	mov.u32 	%r3309, 30;
	mov.u32 	%r3320, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3307,%r7513,%r3309,%r2232,%r3320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3312,%r7517,%r3307;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3316,%r7513,%r3318,%r2232,%r3320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3321,%r7518,%r3316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r3312,%r3321;
}
	// end inline asm
	mov.u32 	%r7549, %r7550;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7549, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7549;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7550, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r7550;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r654, %r1739;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2708,%r7515,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r2708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2714,%r7515,%r7495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7586,%r7586,%r2714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2720,%r7515,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r7588,%r2720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2726,%r7515,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r2726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2732,%r7515,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r2732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2738,%r7515,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2744,%r7516,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r2744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2750,%r7516,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2756,%r7515,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r2756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2762,%r7515,%r7494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r2762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2768,%r7515,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7585,%r7585,%r2768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2774,%r7515,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r2774;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2780,%r7515,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r2780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2786,%r7515,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2792,%r7516,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7590,%r7590,%r2792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2798,%r7516,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r2798;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2611, %r1739, -2;
	setp.ne.s32 	%p159, %r654, %r2611;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2612,%r7515,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r2612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2618,%r7515,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r2618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2624,%r7516,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r2624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2630,%r7516,%r7495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r2630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2636,%r7516,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7582,%r7582,%r2636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2642,%r7516,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r2642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2648,%r7516,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r2648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2654,%r7516,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r2654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2660,%r7515,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2666,%r7515,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2672,%r7516,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7593,%r7593,%r2672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2678,%r7516,%r7494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2684,%r7516,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2690,%r7516,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2696,%r7516,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2702,%r7516,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2702;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7695, %r2147;
	mov.u32 	%r7696, %r2147;
	mov.u32 	%r7701, %r2147;
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7703, %r2147;
	mov.u32 	%r7704, %r2147;
	mov.u32 	%r7705, %r2147;
	mov.u32 	%r7706, %r2147;
	mov.u32 	%r7713, %r2147;
	mov.u32 	%r7714, %r2147;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3339, %r1730, 320;
	add.s32 	%r3340, %r23, -1;
	mul.lo.s32 	%r3341, %r24, 320;
	mad.lo.s32 	%r3342, %r3339, %r3340, %r3341;
	add.s32 	%r3345, %r1785, -64;
	mad.lo.s32 	%r3350, %r3345, %r2135, %r2132;
	add.s32 	%r3351, %r3342, %r3350;
	shl.b32 	%r3352, %r3351, 2;
	mov.u32 	%r3353, _ZN6kernel5shmemE;
	add.s32 	%r3354, %r3353, %r3352;
	shl.b32 	%r3355, %r28, 4;
	add.s32 	%r3356, %r3354, %r3355;
	ld.shared.v4.u32 	{%r7706, %r7704, %r7696, %r7695}, [%r3356];
	shl.b32 	%r3361, %r28, 3;
	add.s32 	%r3362, %r3354, %r3361;
	ld.shared.v2.u32 	{%r7705, %r7703}, [%r3362+512];
	ld.shared.v4.u32 	{%r7714, %r7713, %r7702, %r7701}, [%r3356+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7697, %r2147;
	mov.u32 	%r7698, %r2147;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7707, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7709, %r2147;
	mov.u32 	%r7710, %r2147;
	mov.u32 	%r7711, %r2147;
	mov.u32 	%r7712, %r2147;
	mov.u32 	%r7715, %r2147;
	mov.u32 	%r7716, %r2147;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3374, %r2529, 384, %r2138;
	add.s32 	%r3377, %r24, -1;
	mad.lo.s32 	%r3378, %r2133, %r3377, %r3374;
	add.s32 	%r3384, %r3378, %r2136;
	shl.b32 	%r3385, %r3384, 2;
	mov.u32 	%r3386, _ZN6kernel5shmemE;
	add.s32 	%r3387, %r3386, %r3385;
	shl.b32 	%r3388, %r28, 4;
	add.s32 	%r3389, %r3387, %r3388;
	ld.shared.v4.u32 	{%r7716, %r7715, %r7711, %r7709}, [%r3389];
	shl.b32 	%r3394, %r28, 3;
	add.s32 	%r3395, %r3387, %r3394;
	ld.shared.v2.u32 	{%r7712, %r7710}, [%r3395+512];
	ld.shared.v4.u32 	{%r7708, %r7707, %r7699, %r7697}, [%r3389+768];
	mov.u32 	%r7698, %r2147;
	mov.u32 	%r7700, %r2147;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7238, %r3395, 512;
	ld.shared.v2.u32 	{%r7700, %r7698}, [%r7238+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2135;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3405, %r1729, %r23;
	mul.lo.s32 	%r3407, %r52, %r24;
	mad.lo.s32 	%r3408, %r3405, 384, %r3407;
	mad.lo.s32 	%r3411, %r2133, %r2135, %r3408;
	mad.lo.s32 	%r3414, %r2131, %r2130, %r3411;
	shl.b32 	%r3415, %r3414, 2;
	mov.u32 	%r3416, _ZN6kernel5shmemE;
	add.s32 	%r3417, %r3416, %r3415;
	shl.b32 	%r3418, %r28, 4;
	add.s32 	%r3419, %r3417, %r3418;
	ld.shared.v4.u32 	{%r7625, %r7628, %r7632, %r7631}, [%r3419];

$L__BB0_386:
	shl.b32 	%r3424, %r24, 8;
	shl.b32 	%r3428, %r1730, 8;
	or.b32  	%r3429, %r3428, 128;
	add.s32 	%r3430, %r23, -1;
	mad.lo.s32 	%r3431, %r3429, %r3430, %r2138;
	add.s32 	%r3432, %r3431, %r3424;
	shl.b32 	%r3433, %r3432, 2;
	mov.u32 	%r3434, _ZN6kernel5shmemE;
	add.s32 	%r3435, %r3434, %r3433;
	setp.ne.s32 	%p202, %r24, %r2135;
	shl.b32 	%r3437, %r28, 4;
	add.s32 	%r913, %r3435, %r3437;
	ld.shared.v4.u32 	{%r7634, %r7636, %r7633, %r7635}, [%r913];
	ld.shared.v4.u32 	{%r7630, %r7627, %r7626, %r7629}, [%r913+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7625, %r7628, %r7632, %r7631}, [%r913+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3451, %r52, %r24;
	sub.s32 	%r3452, %r3451, %r52;
	mad.lo.s32 	%r3455, %r2529, 384, %r3452;
	mad.lo.s32 	%r3458, %r2133, %r2135, %r3455;
	mad.lo.s32 	%r3461, %r2131, %r2130, %r3458;
	shl.b32 	%r3462, %r3461, 2;
	mov.u32 	%r3463, _ZN6kernel5shmemE;
	add.s32 	%r3464, %r3463, %r3462;
	shl.b32 	%r3465, %r28, 4;
	add.s32 	%r938, %r3464, %r3465;
	ld.shared.v4.u32 	{%r7645, %r7644, %r7649, %r7647}, [%r938];
	ld.shared.v4.u32 	{%r7643, %r7640, %r7637, %r7638}, [%r938+512];
	ld.shared.v4.u32 	{%r7642, %r7639, %r7641, %r7648}, [%r938+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7651, %r7652, %r7646, %r7650}, [%r938+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+80];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3483, %r651, %r1732, %r26;
	mul.lo.s32 	%r3484, %r1730, %r3483;
	mul.lo.s32 	%r3485, %r3484, 768;
	mad.lo.s32 	%r3486, %r24, 384, %r3485;
	add.s32 	%r3487, %r3486, -64;
	mul.wide.s32 	%rd271, %r3487, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7660, %r7658, %r7667, %r7668}, [%rd274+256];
	ld.global.v4.u32 	{%r7666, %r7663, %r7655, %r7656}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7661, %r7664}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2135;
	ld.global.v2.u32 	{%r7659, %r7657}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7665, %r7662}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+80];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3504, %r652, %r1731, %r25;
	mul.lo.s32 	%r3508, %r3504, %r1786;
	mad.lo.s32 	%r3511, %r2529, 384, %r3508;
	add.s32 	%r3512, %r3511, -64;
	mad.lo.s32 	%r3515, %r1788, %r51, %r3512;
	mul.wide.s32 	%rd276, %r3515, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7680, %r7679, %r7675, %r7673}, [%rd279+256];
	ld.global.v4.u32 	{%r7670, %r7669, %r7672, %r7678}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7676, %r7674}, [%rd281+768];
	ld.global.v2.u32 	{%r7661, %r7664}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3528, %r1734, -1;
	setp.lt.s32 	%p209, %r653, %r3528;
	setp.gt.s32 	%p210, %r653, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r654, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3529, %r1735, -2;
	setp.lt.s32 	%p214, %r654, %r3529;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+88];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1033, %r654, %r1734, %r653;
	shl.b32 	%r3530, %r1033, 6;
	mul.wide.s32 	%rd284, %r3530, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7700, %r7698}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3533, %r1734, 5;
	cvt.s64.s32 	%rd287, %r3533;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7705, %r7703}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3536, %r1734, 5;
	neg.s32 	%r3537, %r3536;
	cvt.s64.s32 	%rd292, %r3537;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7712, %r7710}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7249, %r654, %r1734, %r653;
	ld.param.u64 	%rd555, [%rd1+88];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3540, %r1735, 6;
	shl.b32 	%r3541, %r7249, 7;
	mad.lo.s32 	%r3542, %r3540, %r1734, %r3541;
	mul.wide.s32 	%rd297, %r3542, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3543, %r1734, 5;
	cvt.s64.s32 	%rd298, %r3543;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7706, %r7704, %r7696, %r7695}, [%rd302];
	shl.b32 	%r3548, %r1734, 6;
	add.s32 	%r3549, %r3548, -32;
	cvt.s64.s32 	%rd303, %r3549;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7714, %r7713, %r7702, %r7701}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3554, %r1734, 5;
	xor.b32  	%r3555, %r3554, -32;
	cvt.s64.s32 	%rd307, %r3555;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7716, %r7715, %r7711, %r7709}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7708, %r7707, %r7699, %r7697}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3569, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3565,%r7460,%r412,%r2232,%r3569;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3565;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7460;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3572, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r7469,%r3572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r7340,%r3573;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7717,%r7598;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7717,%r7341,%r3573;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3589, 31;
	mov.u32 	%r3612, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3587,%r7717,%r3589,%r2232,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3592,%r3576,%r3587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3595,%r7468,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r3595,%r3592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3601,%r7490,%r3598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3604,%r7598,%r3601;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3608,%r7461,%r412,%r2232,%r3612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3608;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7461;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3615, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3616,%r7470,%r3615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3619,%r7340,%r3616;
}
	// end inline asm
	mov.u32 	%r7718, %r7597;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7718,%r7341,%r3616;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3630,%r7718,%r3589,%r2232,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3635,%r3619,%r3630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3638,%r7468,%r7491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r3635,%r3638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3644,%r7489,%r3641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3647,%r7597,%r3644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3650,%r7460,%r7469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3653,%r7344,%r3650;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7719,%r7596;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7719,%r7345,%r3650;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3666, 31;
	mov.u32 	%r3668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3664,%r7719,%r3666,%r2232,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3669,%r3653,%r3664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r7459,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3675,%r3672,%r3669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3678,%r7485,%r3675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3681,%r7596,%r3678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7461,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r7344,%r3684;
}
	// end inline asm
	mov.u32 	%r7720, %r7595;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7720,%r7345,%r3684;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3696,%r7720,%r3666,%r2232,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3701,%r3687,%r3696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3704,%r7459,%r7486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r3701,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3710,%r7484,%r3707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3713,%r7595,%r3710;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3717,%r7444,%r412,%r2232,%r3668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3717;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7444;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3724, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3725,%r7452,%r3724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3728,%r7340,%r3725;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7721,%r7594;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7721,%r7341,%r3725;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3743, 31;
	mov.u32 	%r3745, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3741,%r7721,%r3743,%r2232,%r3745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3746,%r3728,%r3741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3749,%r7451,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r3749,%r3746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3755,%r7482,%r3752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3758,%r7594,%r3755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3761,%r7444,%r7452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3764,%r7344,%r3761;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7722,%r7593;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7722,%r7345,%r3761;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3777, 31;
	mov.u32 	%r3800, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3775,%r7722,%r3777,%r2232,%r3800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3780,%r3764,%r3775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r7443,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3786,%r3783,%r3780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3789,%r7480,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r7593,%r3789;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3796,%r7428,%r412,%r2232,%r3800;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3796;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7428;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3803, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r7433,%r3803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3807,%r7340,%r3804;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7723,%r7592;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7723,%r7341,%r3804;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3822, 31;
	mov.u32 	%r3845, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3820,%r7723,%r3822,%r2232,%r3845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3825,%r3807,%r3820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r7432,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3831,%r3828,%r3825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3834,%r7716,%r3831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r7592,%r3834;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3841,%r7429,%r412,%r2232,%r3845;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3841;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7429;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3848, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3849,%r7434,%r3848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3852,%r7340,%r3849;
}
	// end inline asm
	mov.u32 	%r7724, %r7591;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7724,%r7341,%r3849;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3863,%r7724,%r3822,%r2232,%r3845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r3852,%r3863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3871,%r7432,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3874,%r3868,%r3871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3877,%r7477,%r3874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3880,%r7591,%r3877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3883,%r7428,%r7433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3886,%r7344,%r3883;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7725,%r7590;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7725,%r7345,%r3883;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3899, 31;
	mov.u32 	%r3901, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3897,%r7725,%r3899,%r2232,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3902,%r3886,%r3897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3905,%r7427,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3908,%r3905,%r3902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3911,%r7715,%r3908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3914,%r7590,%r3911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r7429,%r7434;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3920,%r7344,%r3917;
}
	// end inline asm
	mov.u32 	%r7726, %r7589;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7726,%r7345,%r3917;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3929,%r7726,%r3899,%r2232,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3934,%r3920,%r3929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3937,%r7427,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3940,%r3934,%r3937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3943,%r7474,%r3940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3946,%r7589,%r3943;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3950,%r7416,%r412,%r2232,%r3901;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3950;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7416;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3957, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3958,%r7423,%r3957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3961,%r7340,%r3958;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7727,%r7588;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7727,%r7341,%r3958;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3976, 31;
	mov.u32 	%r3999, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3974,%r7727,%r3976,%r2232,%r3999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3979,%r3961,%r3974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r7422,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3985,%r3982,%r3979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3988,%r551,%r3985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7493,%r7588,%r3988;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3995,%r7417,%r412,%r2232,%r3999;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3995;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7417;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4002, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4003,%r7424,%r4002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4006,%r7340,%r4003;
}
	// end inline asm
	mov.u32 	%r7728, %r7587;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7728,%r7341,%r4003;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4017,%r7728,%r3976,%r2232,%r3999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4022,%r4006,%r4017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4025,%r7422,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r4022,%r4025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4031,%r550,%r4028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7492,%r7587,%r4031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r7423,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r7424,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4043,%r4037,%r4040;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4046,%r7465,%r4043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4049,%r7586,%r4046;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7586, %r4049;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4054,%r7416,%r7423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4057,%r7344,%r4054;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7730,%r7585;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7730,%r7345,%r4054;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4068, 31;
	mov.u32 	%r4070, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4066,%r7730,%r4068,%r2232,%r4070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4071,%r4057,%r4066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r7415,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r4074,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4080,%r542,%r4077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7488,%r7585,%r4080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r7417,%r7424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r7344,%r4086;
}
	// end inline asm
	mov.u32 	%r7731, %r7584;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7731,%r7345,%r4086;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4098,%r7731,%r4068,%r2232,%r4070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4103,%r4089,%r4098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4106,%r7415,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4109,%r4103,%r4106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4112,%r541,%r4109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r7584,%r4112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4118,%r7416,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7417,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4124,%r4118,%r4121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4127,%r7456,%r4124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4130,%r7583,%r4127;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7583, %r4130;

$L__BB0_449:
	mov.u32 	%r4140, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4136,%r7405,%r412,%r2232,%r4140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4136;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7405;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4143, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r7410,%r4143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r7340,%r4144;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7733,%r7582;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7733,%r7341,%r4144;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4160, 31;
	mov.u32 	%r4183, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4158,%r7733,%r4160,%r2232,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4163,%r4147,%r4158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r7409,%r7422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r4166,%r4163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4172,%r534,%r4169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r7582,%r4172;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4179,%r7406,%r412,%r2232,%r4183;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4179;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7406;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4186, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4187,%r7411,%r4186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4190,%r7340,%r4187;
}
	// end inline asm
	mov.u32 	%r7734, %r7581;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7734,%r7341,%r4187;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4201,%r7734,%r4160,%r2232,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4206,%r4190,%r4201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r7409,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r4206,%r4209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4215,%r7449,%r4212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4218,%r7581,%r4215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4221,%r7410,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4224,%r7411,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r4221,%r4224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4230,%r7448,%r4227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4233,%r7580,%r4230;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7580, %r4233;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4238,%r7405,%r7410;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4241,%r7344,%r4238;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7736,%r7579;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7736,%r7345,%r4238;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4252, 31;
	mov.u32 	%r4254, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4250,%r7736,%r4252,%r2232,%r4254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4255,%r4241,%r4250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r7404,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4261,%r4258,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4264,%r526,%r4261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7481,%r7579,%r4264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4270,%r7406,%r7411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4273,%r7344,%r4270;
}
	// end inline asm
	mov.u32 	%r7737, %r7578;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7737,%r7345,%r4270;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4282,%r7737,%r4252,%r2232,%r4254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4287,%r4273,%r4282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4290,%r7404,%r7443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r4287,%r4290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4296,%r7441,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4299,%r7578,%r4296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4302,%r7405,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7406,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4308,%r4302,%r4305;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4311,%r7440,%r4308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4314,%r7577,%r4311;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7577, %r4314;

$L__BB0_463:
	mov.u32 	%r4324, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4320,%r7396,%r412,%r2232,%r4324;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4320;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7396;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4327, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r7400,%r4327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4331,%r7340,%r4328;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7739,%r7576;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7739,%r7341,%r4328;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4344, 31;
	mov.u32 	%r4346, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4342,%r7739,%r4344,%r2232,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4347,%r4331,%r4342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r7632,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4353,%r4350,%r4347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4356,%r7714,%r4353;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4359,%r7576,%r4356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r7396,%r7400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r7344,%r4362;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7740,%r7575;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7740,%r7345,%r4362;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4378, 31;
	mov.u32 	%r4401, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4376,%r7740,%r4378,%r2232,%r4401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4381,%r4365,%r4376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r7631,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4387,%r4384,%r4381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4390,%r7713,%r4387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4393,%r7575,%r4390;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4397,%r7382,%r412,%r2232,%r4401;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4397;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7382;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4404, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4405,%r7389,%r4404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4408,%r7340,%r4405;
}
	// end inline asm
	mov.u32 	%r7741, %r7574;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7741,%r7341,%r4405;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4419,%r7741,%r4378,%r2232,%r4401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4424,%r4408,%r4419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4427,%r7642,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4430,%r4424,%r4427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4433,%r7712,%r4430;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7479,%r7574,%r4433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4439,%r7643,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4442,%r7389,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4445,%r4439,%r4442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4448,%r7711,%r4445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4451,%r7573,%r4448;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7573, %r4451;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4456,%r7382,%r7389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4459,%r7344,%r4456;
}
	// end inline asm
	mov.u32 	%r7743, %r7572;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7743,%r7345,%r4456;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4468, 31;
	mov.u32 	%r4470, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4466,%r7743,%r4468,%r2232,%r4470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4471,%r4459,%r4466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4474,%r7639,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4477,%r4471,%r4474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4480,%r7710,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7476,%r7572,%r4480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4486,%r7640,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4489,%r7382,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4492,%r4486,%r4489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4495,%r7709,%r4492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4498,%r7571,%r4495;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7571, %r4498;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4504,%r7368,%r412,%r2232,%r4470;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4504;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7368;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4511, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r7375,%r4511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4515,%r7340,%r4512;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7745,%r7570;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7745,%r7341,%r4512;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4528, 31;
	mov.u32 	%r4551, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4526,%r7745,%r4528,%r2232,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4531,%r4515,%r4526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r7374,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4537,%r4534,%r4531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4540,%r7708,%r4537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r7570,%r4540;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4547,%r7369,%r412,%r2232,%r4551;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4547;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7369;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4554, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4555,%r7376,%r4554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r7340,%r4555;
}
	// end inline asm
	mov.u32 	%r7746, %r7569;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7746,%r7341,%r4555;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4569,%r7746,%r4528,%r2232,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4574,%r4558,%r4569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4577,%r7374,%r7422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r4574,%r4577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4583,%r7466,%r4580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r7569,%r4583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r7375,%r7423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r7376,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4595,%r4589,%r4592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4598,%r496,%r4595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4601,%r7568,%r4598;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7568, %r4601;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4606,%r7368,%r7375;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4609,%r7344,%r4606;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7748,%r7567;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7748,%r7345,%r4606;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4620, 31;
	mov.u32 	%r4622, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4618,%r7748,%r4620,%r2232,%r4622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4623,%r4609,%r4618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r7367,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r4626,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4632,%r7707,%r4629;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7567,%r4632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r7369,%r7376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4641,%r7344,%r4638;
}
	// end inline asm
	mov.u32 	%r7749, %r7566;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7749,%r7345,%r4638;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4650,%r7749,%r4620,%r2232,%r4622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4655,%r4641,%r4650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4658,%r7367,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4661,%r4655,%r4658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4664,%r7457,%r4661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7463,%r7566,%r4664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4670,%r7368,%r7416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4673,%r7369,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4676,%r4670,%r4673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4679,%r488,%r4676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4682,%r7565,%r4679;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7565, %r4682;

$L__BB0_491:
	mov.u32 	%r4692, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4688,%r7353,%r412,%r2232,%r4692;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4688;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7353;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4695, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r7361,%r4695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4699,%r7340,%r4696;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7751,%r7564;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7751,%r7341,%r4696;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4712, 31;
	mov.u32 	%r4735, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4710,%r7751,%r4712,%r2232,%r4735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4715,%r4699,%r4710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r7630,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4721,%r4718,%r4715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4724,%r7706,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r7564,%r4724;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4731,%r7354,%r412,%r2232,%r4735;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4731;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7354;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4738, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4739,%r7362,%r4738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4742,%r7340,%r4739;
}
	// end inline asm
	mov.u32 	%r7752, %r7563;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7752,%r7341,%r4739;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4753,%r7752,%r4712,%r2232,%r4735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4758,%r4742,%r4753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4761,%r7630,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4764,%r4758,%r4761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4767,%r7705,%r4764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r7563,%r4767;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4773,%r7361,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4776,%r7362,%r7376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4779,%r4773,%r4776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4782,%r481,%r4779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4785,%r7562,%r4782;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7562, %r4785;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4790,%r7353,%r7361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4793,%r7344,%r4790;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7754,%r7561;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7754,%r7345,%r4790;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4804, 31;
	mov.u32 	%r4806, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4802,%r7754,%r4804,%r2232,%r4806;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4807,%r4793,%r4802;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r7627,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4813,%r4810,%r4807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4816,%r7704,%r4813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7447,%r7561,%r4816;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4822,%r7354,%r7362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4825,%r7344,%r4822;
}
	// end inline asm
	mov.u32 	%r7755, %r7560;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7755,%r7345,%r4822;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4834,%r7755,%r4804,%r2232,%r4806;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4839,%r4825,%r4834;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4842,%r7627,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r4839,%r4842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4848,%r7703,%r4845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7446,%r7560,%r4848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4854,%r7353,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r7354,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4860,%r4854,%r4857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4863,%r474,%r4860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4866,%r7559,%r4863;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7559, %r4866;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4871,%r7626,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4874,%r7625,%r7362;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4877,%r4871,%r4874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4880,%r7702,%r4877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4883,%r7558,%r4880;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7558, %r4883;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4886,%r7629,%r7396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r7628,%r7354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r4886,%r4889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4895,%r7701,%r4892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4898,%r7557,%r4895;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7557, %r4898;

$L__BB0_509:
	mov.u32 	%r4906, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4902,%r7431,%r412,%r2232,%r4906;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4902;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7431;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4909, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4910,%r7385,%r4909;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4913,%r7340,%r4910;
}
	// end inline asm
	mov.u32 	%r7759, %r7556;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7759,%r7341,%r4910;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4924, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4922,%r7759,%r4924,%r2232,%r4906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4927,%r4913,%r4922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4930,%r7646,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4933,%r4927,%r4930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4936,%r7700,%r4933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7426,%r7556,%r4936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4942,%r7641,%r7375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4945,%r7385,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4948,%r4942,%r4945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4951,%r7699,%r4948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4954,%r7555,%r4951;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7555, %r4954;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4959,%r7431,%r7385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4962,%r7344,%r4959;
}
	// end inline asm
	mov.u32 	%r7761, %r7554;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7761,%r7345,%r4959;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4971, 31;
	mov.u32 	%r4973, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4969,%r7761,%r4971,%r2232,%r4973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4974,%r4962,%r4969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4977,%r7650,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4980,%r4974,%r4977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4983,%r7698,%r4980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7419,%r7554,%r4983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4989,%r7648,%r7368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4992,%r7431,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4995,%r4989,%r4992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4998,%r7697,%r4995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5001,%r7553,%r4998;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7553, %r5001;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5006,%r7634,%r7361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5009,%r7633,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5012,%r5006,%r5009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5015,%r7696,%r5012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5018,%r7552,%r5015;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7552, %r5018;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5021,%r7636,%r7353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5024,%r7635,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5027,%r5021,%r5024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5030,%r7695,%r5027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5033,%r7551,%r5030;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7551, %r5033;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+160];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r655, %r1740;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5036, %r1742, %r1741, %r1740;
	setp.ge.s32 	%p274, %r655, %r5036;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1300, %r655, %r1740;
	rem.s32 	%r5037, %r1300, %r1741;
	setp.ne.s32 	%p276, %r5037, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5038, %r1300, %r1741;
	mul.lo.s32 	%r5039, %r5038, %r1734;
	mul.lo.s32 	%r1301, %r5039, 3;
	add.s32 	%r1302, %r653, -2;
	add.s32 	%r5040, %r1301, %r1302;
	mul.lo.s32 	%r1303, %r5040, %r1735;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5045, %r1303, %r654;
	mul.lo.s32 	%r5046, %r5045, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5047, %r378, %r5046;
	mul.wide.s32 	%rd315, %r5047, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5048, %r379, %r5046;
	mul.wide.s32 	%rd317, %r5048, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5049, %r392, %r5046;
	mul.wide.s32 	%rd319, %r5049, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5050, %r393, %r5046;
	mul.wide.s32 	%rd321, %r5050, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1304, %r1301, %r1734;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5055, %r1304, %r1302;
	mad.lo.s32 	%r5056, %r5055, %r1735, %r654;
	mul.lo.s32 	%r5057, %r5056, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5058, %r378, %r5057;
	mul.wide.s32 	%rd323, %r5058, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5059, %r379, %r5057;
	mul.wide.s32 	%rd325, %r5059, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5060, %r392, %r5057;
	mul.wide.s32 	%rd327, %r5060, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5061, %r393, %r5057;
	mul.wide.s32 	%rd329, %r5061, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1305, %r654, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5066, %r1303, %r1305;
	mul.lo.s32 	%r5067, %r5066, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3758;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5068, %r378, %r5067;
	mul.wide.s32 	%rd331, %r5068, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3758;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5069, %r379, %r5067;
	mul.wide.s32 	%rd333, %r5069, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5070, %r392, %r5067;
	mul.wide.s32 	%rd335, %r5070, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5071, %r393, %r5067;
	mul.wide.s32 	%rd337, %r5071, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1306, %r653, -1;
	add.s32 	%r5072, %r1301, %r1306;
	mul.lo.s32 	%r1307, %r5072, %r1735;
	add.s32 	%r1308, %r654, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5077, %r1307, %r1308;
	mul.lo.s32 	%r5078, %r5077, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5079, %r378, %r5078;
	mul.wide.s32 	%rd339, %r5079, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5080, %r379, %r5078;
	mul.wide.s32 	%rd341, %r5080, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3914;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5081, %r392, %r5078;
	mul.wide.s32 	%rd343, %r5081, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3914;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5082, %r393, %r5078;
	mul.wide.s32 	%rd345, %r5082, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5083, %r1304, %r1306;
	mul.lo.s32 	%r1309, %r5083, %r1735;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5088, %r1309, %r1308;
	mul.lo.s32 	%r5089, %r5088, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3880;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5090, %r378, %r5089;
	mul.wide.s32 	%rd347, %r5090, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3880;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5091, %r379, %r5089;
	mul.wide.s32 	%rd349, %r5091, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3946;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5092, %r392, %r5089;
	mul.wide.s32 	%rd351, %r5092, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3946;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5093, %r393, %r5089;
	mul.wide.s32 	%rd353, %r5093, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5098, %r1307, %r654;
	mul.lo.s32 	%r5099, %r5098, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7493;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5100, %r378, %r5099;
	mul.wide.s32 	%rd355, %r5100, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7493;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5101, %r379, %r5099;
	mul.wide.s32 	%rd357, %r5101, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7488;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5102, %r392, %r5099;
	mul.wide.s32 	%rd359, %r5102, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7488;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5103, %r393, %r5099;
	mul.wide.s32 	%rd361, %r5103, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5108, %r1309, %r654;
	mul.lo.s32 	%r5109, %r5108, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7492;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5110, %r378, %r5109;
	mul.wide.s32 	%rd363, %r5110, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7492;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5111, %r379, %r5109;
	mul.wide.s32 	%rd365, %r5111, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7487;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5112, %r392, %r5109;
	mul.wide.s32 	%rd367, %r5112, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7487;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5113, %r393, %r5109;
	mul.wide.s32 	%rd369, %r5113, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1310, %r1304, %r1734;
	add.s32 	%r5114, %r1310, %r1306;
	mul.lo.s32 	%r1311, %r5114, %r1735;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5119, %r1311, %r654;
	mul.lo.s32 	%r5120, %r5119, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7586;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5121, %r378, %r5120;
	mul.wide.s32 	%rd371, %r5121, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7586;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5122, %r379, %r5120;
	mul.wide.s32 	%rd373, %r5122, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7583;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5123, %r392, %r5120;
	mul.wide.s32 	%rd375, %r5123, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7583;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5124, %r393, %r5120;
	mul.wide.s32 	%rd377, %r5124, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5129, %r1307, %r1305;
	mul.lo.s32 	%r5130, %r5129, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5131, %r378, %r5130;
	mul.wide.s32 	%rd379, %r5131, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5132, %r379, %r5130;
	mul.wide.s32 	%rd381, %r5132, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7481;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5133, %r392, %r5130;
	mul.wide.s32 	%rd383, %r5133, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7481;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5134, %r393, %r5130;
	mul.wide.s32 	%rd385, %r5134, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5139, %r1309, %r1305;
	mul.lo.s32 	%r5140, %r5139, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4218;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5141, %r378, %r5140;
	mul.wide.s32 	%rd387, %r5141, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4218;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5142, %r379, %r5140;
	mul.wide.s32 	%rd389, %r5142, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4299;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5143, %r392, %r5140;
	mul.wide.s32 	%rd391, %r5143, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4299;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5144, %r393, %r5140;
	mul.wide.s32 	%rd393, %r5144, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5149, %r1311, %r1305;
	mul.lo.s32 	%r5150, %r5149, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7580;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5151, %r378, %r5150;
	mul.wide.s32 	%rd395, %r5151, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7580;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5152, %r379, %r5150;
	mul.wide.s32 	%rd397, %r5152, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5153, %r392, %r5150;
	mul.wide.s32 	%rd399, %r5153, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7577;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5154, %r393, %r5150;
	mul.wide.s32 	%rd401, %r5154, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1312, %r654, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5159, %r1307, %r1312;
	mul.lo.s32 	%r5160, %r5159, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4359;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5161, %r378, %r5160;
	mul.wide.s32 	%rd403, %r5161, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4359;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5162, %r379, %r5160;
	mul.wide.s32 	%rd405, %r5162, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4393;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5163, %r392, %r5160;
	mul.wide.s32 	%rd407, %r5163, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4393;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5164, %r393, %r5160;
	mul.wide.s32 	%rd409, %r5164, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5165, %r1304, %r653;
	mul.lo.s32 	%r1313, %r5165, %r1735;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5170, %r1313, %r1308;
	mul.lo.s32 	%r5171, %r5170, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7479;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5172, %r378, %r5171;
	mul.wide.s32 	%rd411, %r5172, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7479;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5173, %r379, %r5171;
	mul.wide.s32 	%rd413, %r5173, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5174, %r392, %r5171;
	mul.wide.s32 	%rd415, %r5174, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7476;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5175, %r393, %r5171;
	mul.wide.s32 	%rd417, %r5175, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5176, %r1310, %r653;
	mul.lo.s32 	%r1314, %r5176, %r1735;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5181, %r1314, %r1308;
	mul.lo.s32 	%r5182, %r5181, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5183, %r378, %r5182;
	mul.wide.s32 	%rd419, %r5183, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5184, %r379, %r5182;
	mul.wide.s32 	%rd421, %r5184, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5185, %r392, %r5182;
	mul.wide.s32 	%rd423, %r5185, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5186, %r393, %r5182;
	mul.wide.s32 	%rd425, %r5186, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5187, %r1301, %r653;
	mul.lo.s32 	%r1315, %r5187, %r1735;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5192, %r1315, %r654;
	mul.lo.s32 	%r5193, %r5192, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5194, %r378, %r5193;
	mul.wide.s32 	%rd427, %r5194, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5195, %r379, %r5193;
	mul.wide.s32 	%rd429, %r5195, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5196, %r392, %r5193;
	mul.wide.s32 	%rd431, %r5196, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5197, %r393, %r5193;
	mul.wide.s32 	%rd433, %r5197, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5202, %r1313, %r654;
	mul.lo.s32 	%r5203, %r5202, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5204, %r378, %r5203;
	mul.wide.s32 	%rd435, %r5204, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5205, %r379, %r5203;
	mul.wide.s32 	%rd437, %r5205, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5206, %r392, %r5203;
	mul.wide.s32 	%rd439, %r5206, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5207, %r393, %r5203;
	mul.wide.s32 	%rd441, %r5207, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5212, %r1314, %r654;
	mul.lo.s32 	%r5213, %r5212, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5214, %r378, %r5213;
	mul.wide.s32 	%rd443, %r5214, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7568;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5215, %r379, %r5213;
	mul.wide.s32 	%rd445, %r5215, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5216, %r392, %r5213;
	mul.wide.s32 	%rd447, %r5216, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7565;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5217, %r393, %r5213;
	mul.wide.s32 	%rd449, %r5217, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5222, %r1315, %r1305;
	mul.lo.s32 	%r5223, %r5222, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5224, %r378, %r5223;
	mul.wide.s32 	%rd451, %r5224, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5225, %r379, %r5223;
	mul.wide.s32 	%rd453, %r5225, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5226, %r392, %r5223;
	mul.wide.s32 	%rd455, %r5226, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5227, %r393, %r5223;
	mul.wide.s32 	%rd457, %r5227, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5232, %r1313, %r1305;
	mul.lo.s32 	%r5233, %r5232, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5234, %r378, %r5233;
	mul.wide.s32 	%rd459, %r5234, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5235, %r379, %r5233;
	mul.wide.s32 	%rd461, %r5235, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5236, %r392, %r5233;
	mul.wide.s32 	%rd463, %r5236, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5237, %r393, %r5233;
	mul.wide.s32 	%rd465, %r5237, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5242, %r1314, %r1305;
	mul.lo.s32 	%r5243, %r5242, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5244, %r378, %r5243;
	mul.wide.s32 	%rd467, %r5244, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5245, %r379, %r5243;
	mul.wide.s32 	%rd469, %r5245, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5246, %r392, %r5243;
	mul.wide.s32 	%rd471, %r5246, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5247, %r393, %r5243;
	mul.wide.s32 	%rd473, %r5247, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1316, %r1314, %r1312;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5252, %r1316, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5253, %r378, %r5252;
	mul.wide.s32 	%rd475, %r5253, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5254, %r379, %r5252;
	mul.wide.s32 	%rd477, %r5254, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5255, %r392, %r5252;
	mul.wide.s32 	%rd479, %r5255, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5256, %r393, %r5252;
	mul.wide.s32 	%rd481, %r5256, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1317, %r653, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5261, %r1304, %r1317;
	mad.lo.s32 	%r5262, %r5261, %r1735, %r654;
	mul.lo.s32 	%r5263, %r5262, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7426;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5264, %r378, %r5263;
	mul.wide.s32 	%rd483, %r5264, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7426;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5265, %r379, %r5263;
	mul.wide.s32 	%rd485, %r5265, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7419;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5266, %r392, %r5263;
	mul.wide.s32 	%rd487, %r5266, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7419;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5267, %r393, %r5263;
	mul.wide.s32 	%rd489, %r5267, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5268, %r1310, %r1317;
	mul.lo.s32 	%r1318, %r5268, %r1735;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5273, %r1318, %r654;
	mul.lo.s32 	%r5274, %r5273, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5275, %r378, %r5274;
	mul.wide.s32 	%rd491, %r5275, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5276, %r379, %r5274;
	mul.wide.s32 	%rd493, %r5276, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5277, %r392, %r5274;
	mul.wide.s32 	%rd495, %r5277, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5278, %r393, %r5274;
	mul.wide.s32 	%rd497, %r5278, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1319, %r1318, %r1305;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5283, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5284, %r378, %r5283;
	mul.wide.s32 	%rd499, %r5284, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5285, %r379, %r5283;
	mul.wide.s32 	%rd501, %r5285, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5286, %r392, %r5283;
	mul.wide.s32 	%rd503, %r5286, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5287, %r393, %r5283;
	mul.wide.s32 	%rd505, %r5287, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2130;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5288, %r1730, %r23, %r24;
	mov.u32 	%r5289, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5290, %r5288, 1280, %r5289;
	add.s32 	%r5291, %r5290, -256;
	shl.b32 	%r5292, %r28, 4;
	add.s32 	%r5293, %r5291, %r5292;
	st.shared.v4.u32 	[%r5293+256], {%r3837, %r3914, %r7573, %r7571};
	st.shared.v4.u32 	[%r5293+1024], {%r3604, %r3681, %r7586, %r7583};
	shl.b32 	%r5294, %r28, 3;
	add.s32 	%r5295, %r5291, %r5294;
	st.shared.v2.u32 	[%r5295+768], {%r3880, %r3946};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2135;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5299, %r1729, 384, -64;
	mul.lo.s32 	%r5300, %r5299, %r24;
	mad.lo.s32 	%r5302, %r2131, %r2130, %r5300;
	mad.lo.s32 	%r5303, %r2529, 384, %r5302;
	shl.b32 	%r5304, %r5303, 2;
	mov.u32 	%r5305, _ZN6kernel5shmemE;
	add.s32 	%r5306, %r5305, %r5304;
	add.s32 	%r5307, %r5306, -256;
	shl.b32 	%r5308, %r28, 4;
	add.s32 	%r5309, %r5307, %r5308;
	st.shared.v4.u32 	[%r5309+256], {%r3758, %r3792, %r7580, %r7577};
	st.shared.v4.u32 	[%r5309+1024], {%r4359, %r4393, %r7558, %r7557};
	shl.b32 	%r5310, %r28, 3;
	add.s32 	%r1323, %r5307, %r5310;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1323], {%r3647, %r3713};

$L__BB0_576:
	st.shared.v2.u32 	[%r1323+768], {%r4218, %r4299};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2130;
	ld.param.u64 	%rd507, [%rd1+80];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5312, %r651, %r1732, %r26;
	mul.lo.s32 	%r5313, %r1730, %r5312;
	mul.lo.s32 	%r5314, %r5313, 768;
	mad.lo.s32 	%r5315, %r24, 384, %r5314;
	add.s32 	%r5316, %r5315, -64;
	mul.wide.s32 	%rd508, %r5316, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3837, %r3914, %r7573, %r7571};
	st.global.v4.u32 	[%rd511+1024], {%r3604, %r3681, %r7586, %r7583};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3880, %r3946};
	st.global.v2.u32 	[%rd513+1536], {%r3647, %r3713};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2135;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+80];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5319, %r652, %r1731, %r25;
	mul.lo.s32 	%r5323, %r5319, %r1786;
	mad.lo.s32 	%r5326, %r2529, 384, %r5323;
	add.s32 	%r5327, %r5326, -64;
	mad.lo.s32 	%r5330, %r1788, %r51, %r5327;
	mul.wide.s32 	%rd514, %r5330, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3758, %r3792, %r7580, %r7577};
	st.global.v4.u32 	[%rd517+1024], {%r4359, %r4393, %r7558, %r7557};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3647, %r3713};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4218, %r4299};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7665, %r7662};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2130;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5331, %r1730, 320;
	mul.lo.s32 	%r5332, %r24, 320;
	mad.lo.s32 	%r5333, %r5331, %r23, %r5332;
	add.s32 	%r5337, %r1785, -64;
	mad.lo.s32 	%r5341, %r5337, %r2135, %r2132;
	add.s32 	%r5342, %r5333, %r5341;
	shl.b32 	%r5343, %r5342, 2;
	mov.u32 	%r5344, _ZN6kernel5shmemE;
	add.s32 	%r5345, %r5344, %r5343;
	shl.b32 	%r5346, %r28, 4;
	add.s32 	%r5347, %r5345, %r5346;
	st.shared.v4.u32 	[%r5347], {%r7716, %r7715, %r7711, %r7709};
	shl.b32 	%r5348, %r28, 3;
	add.s32 	%r5349, %r5345, %r5348;
	st.shared.v2.u32 	[%r5349+512], {%r7477, %r7474};
	st.shared.v4.u32 	[%r5347+768], {%r7490, %r7485, %r7465, %r7456};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2135;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5355, %r2529, 384, %r2138;
	mad.lo.s32 	%r5358, %r2133, %r24, %r5355;
	add.s32 	%r5364, %r5358, %r2136;
	shl.b32 	%r5365, %r5364, 2;
	mov.u32 	%r5366, _ZN6kernel5shmemE;
	add.s32 	%r5367, %r5366, %r5365;
	shl.b32 	%r5368, %r28, 3;
	add.s32 	%r5369, %r5367, %r5368;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7239, %r5369, -256;
	st.shared.v2.u32 	[%r7239], {%r7489, %r7484};

$L__BB0_589:
	shl.b32 	%r5388, %r28, 4;
	add.s32 	%r5389, %r5367, %r5388;
	st.shared.v4.u32 	[%r5389], {%r7482, %r7480, %r7448, %r7440};
	add.s32 	%r7240, %r5369, -256;
	st.shared.v2.u32 	[%r7240+768], {%r7449, %r7441};
	st.shared.v4.u32 	[%r5389+768], {%r7714, %r7713, %r7702, %r7701};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5390, %r1730, 320;
	add.s32 	%r5391, %r23, -1;
	mul.lo.s32 	%r5392, %r24, 320;
	mad.lo.s32 	%r5393, %r5390, %r5391, %r5392;
	shl.b32 	%r5394, %r5393, 2;
	mov.u32 	%r5395, _ZN6kernel5shmemE;
	add.s32 	%r5396, %r5395, %r5394;
	add.s32 	%r5397, %r5396, -256;
	shl.b32 	%r5398, %r28, 4;
	add.s32 	%r5399, %r5397, %r5398;
	ld.shared.v4.u32 	{%r7660, %r7658, %r7667, %r7668}, [%r5399+256];
	ld.shared.v4.u32 	{%r7666, %r7663, %r7655, %r7656}, [%r5399+1024];
	shl.b32 	%r5408, %r28, 3;
	add.s32 	%r5409, %r5397, %r5408;
	ld.shared.v2.u32 	{%r7659, %r7657}, [%r5409+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5414, %r1729, 384, -64;
	add.s32 	%r5415, %r24, -1;
	mul.lo.s32 	%r5416, %r5414, %r5415;
	mad.lo.s32 	%r5419, %r2131, %r2130, %r5416;
	mad.lo.s32 	%r5420, %r2529, 384, %r5419;
	shl.b32 	%r5421, %r5420, 2;
	mov.u32 	%r5422, _ZN6kernel5shmemE;
	add.s32 	%r5423, %r5422, %r5421;
	add.s32 	%r5424, %r5423, -256;
	shl.b32 	%r5425, %r28, 4;
	add.s32 	%r5426, %r5424, %r5425;
	ld.shared.v4.u32 	{%r7680, %r7679, %r7675, %r7673}, [%r5426+256];
	ld.shared.v4.u32 	{%r7670, %r7669, %r7672, %r7678}, [%r5426+1024];
	shl.b32 	%r5435, %r28, 3;
	add.s32 	%r5436, %r5424, %r5435;
	ld.shared.v2.u32 	{%r7676, %r7674}, [%r5436+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7241, %r5436, 768;
	ld.shared.v2.u32 	{%r7661, %r7664}, [%r7241+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+80];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7792, %r7626;
	mov.u32 	%r7793, %r7627;
	mov.u32 	%r7795, %r7629;
	mov.u32 	%r7796, %r7630;
	mov.u32 	%r7816, %r7646;
	mov.u32 	%r7820, %r7650;
	mov.u32 	%r7801, %r7633;
	mov.u32 	%r7802, %r7634;
	mov.u32 	%r7803, %r7635;
	mov.u32 	%r7804, %r7636;
	mov.u32 	%r7821, %r7651;
	mov.u32 	%r7822, %r7652;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5442, %r651, %r1732, %r26;
	mad.lo.s32 	%r5443, %r5442, 768, 384;
	mul.lo.s32 	%r5444, %r5443, %r1730;
	mad.lo.s32 	%r5445, %r24, 384, %r5444;
	add.s32 	%r5446, %r5445, -128;
	mul.wide.s32 	%rd520, %r5446, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7816, %r7646;
	mov.u32 	%r7820, %r7650;
	mov.u32 	%r7821, %r7651;
	mov.u32 	%r7822, %r7652;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7821, %r7822, %r7816, %r7820}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7802, %r7804, %r7801, %r7803}, [%rd36];
	ld.global.v4.u32 	{%r7796, %r7793, %r7792, %r7795}, [%rd36+512];
	ld.global.v4.u32 	{%r7625, %r7628, %r7632, %r7631}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7807, %r7637;
	mov.u32 	%r7808, %r7638;
	mov.u32 	%r7809, %r7639;
	mov.u32 	%r7810, %r7640;
	mov.u32 	%r7811, %r7641;
	mov.u32 	%r7812, %r7642;
	mov.u32 	%r7813, %r7643;
	mov.u32 	%r7818, %r7648;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5464, %r652, %r1731, %r25;
	mad.lo.s32 	%r5472, %r2529, 384, %r52;
	mad.lo.s32 	%r5473, %r1788, %r51, %r5472;
	mad.lo.s32 	%r5474, %r5464, %r1786, %r5473;
	mul.wide.s32 	%rd524, %r5474, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7645, %r7644, %r7649, %r7647}, [%rd527];
	ld.global.v4.u32 	{%r7813, %r7810, %r7807, %r7808}, [%rd527+512];
	ld.global.v4.u32 	{%r7812, %r7809, %r7811, %r7818}, [%rd527+1024];
	ld.global.v4.u32 	{%r7821, %r7822, %r7816, %r7820}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7247, %r1734;
	not.b32 	%r7246, %r26;
	add.s32 	%r7245, %r1732, %r7246;
	mul.lo.s32 	%r7244, %r7245, %r1733;
	not.b32 	%r7243, %r25;
	add.s32 	%r7242, %r1731, %r7243;
	mad.lo.s32 	%r5498, %r7242, %r1733, %r7244;
	add.s32 	%r5499, %r5498, %r1734;
	add.s32 	%r5508, %r5499, %r2535;
	add.s32 	%r1443, %r7512, 1;
	add.s32 	%r5509, %r1443, %r5508;
	div.s32 	%r5510, %r5509, %r1734;
	mad.lo.s32 	%r1444, %r5510, %r7247, %r5509;
	mad.lo.s32 	%r5517, %r5510, %r30, %r2546;
	ld.param.u64 	%rd528, [%rd1+96];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5518, %r5517, %r1735;
	shr.u32 	%r5519, %r5518, 31;
	add.s32 	%r5520, %r5518, %r5519;
	shr.s32 	%r5521, %r5520, 1;
	mad.lo.s32 	%r5522, %r5521, %r1734, %r1444;
	shl.b32 	%r5523, %r5522, 5;
	add.s32 	%r5524, %r5523, %r28;
	cvt.s64.s32 	%rd37, %r5524;
	mul.wide.s32 	%rd530, %r5524, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7514, [%rd531];
	ld.param.u64 	%rd532, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7513, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5525, %r1444, 5;
	add.s32 	%r5526, %r5525, %r28;
	mul.wide.s32 	%rd533, %r5526, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5527, %r5528, %r5529, %r5530}, [%rd534];
	mov.u32 	%r7494, %r7498;
	mov.u32 	%r7495, %r7499;
	mov.u32 	%r7496, %r7500;
	mov.u32 	%r7497, %r7501;
	mov.u32 	%r7498, %r7502;
	mov.u32 	%r7499, %r7503;
	mov.u32 	%r7500, %r7504;
	mov.u32 	%r7501, %r7505;
	mov.u32 	%r7502, %r5530;
	mov.u32 	%r7503, %r5529;
	mov.u32 	%r7504, %r5528;
	mov.u32 	%r7505, %r5527;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5531, {low,high};}

	// end inline asm
	selp.b32 	%r5533, %r7343, %r5531, %p12;
	// begin inline asm
	{mul.f16x2 %r7491,%r5533,%r7468;
}
	// end inline asm
	selp.b32 	%r5536, %r7347, %r5531, %p12;
	// begin inline asm
	{mul.f16x2 %r7486,%r5536,%r7459;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5538, {low,high};}

	// end inline asm
	selp.b32 	%r5540, %r7343, %r5538, %p12;
	// begin inline asm
	{mul.f16x2 %r7478,%r5540,%r7432;
}
	// end inline asm
	selp.b32 	%r5543, %r7347, %r5538, %p12;
	// begin inline asm
	{mul.f16x2 %r7475,%r5543,%r7427;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5545, {low,high};}

	// end inline asm
	selp.b32 	%r5547, %r7343, %r5545, %p12;
	// begin inline asm
	{mul.f16x2 %r5546,%r5547,%r7424;
}
	// end inline asm
	selp.b32 	%r5550, %r7347, %r5545, %p12;
	// begin inline asm
	{mul.f16x2 %r5549,%r5550,%r7417;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5552, {low,high};}

	// end inline asm
	selp.b32 	%r5554, %r7343, %r5552, %p12;
	// begin inline asm
	{mul.f16x2 %r5553,%r5554,%r7423;
}
	// end inline asm
	selp.b32 	%r5557, %r7347, %r5552, %p12;
	// begin inline asm
	{mul.f16x2 %r5556,%r5557,%r7416;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5559, {low,high};}

	// end inline asm
	selp.b32 	%r5561, %r7343, %r5559, %p12;
	// begin inline asm
	{mul.f16x2 %r7468,%r5561,%r7422;
}
	// end inline asm
	selp.b32 	%r5564, %r7347, %r5559, %p12;
	// begin inline asm
	{mul.f16x2 %r7459,%r5564,%r7415;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5566, {low,high};}

	// end inline asm
	selp.b32 	%r5568, %r7343, %r5566, %p12;
	// begin inline asm
	{mul.f16x2 %r5567,%r5568,%r7410;
}
	// end inline asm
	selp.b32 	%r5571, %r7347, %r5566, %p12;
	// begin inline asm
	{mul.f16x2 %r5570,%r5571,%r7405;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5573, {low,high};}

	// end inline asm
	selp.b32 	%r5575, %r7343, %r5573, %p12;
	// begin inline asm
	{mul.f16x2 %r7451,%r5575,%r7409;
}
	// end inline asm
	selp.b32 	%r5578, %r7347, %r5573, %p12;
	// begin inline asm
	{mul.f16x2 %r7443,%r5578,%r7404;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5580, {low,high};}

	// end inline asm
	selp.b32 	%r5582, %r7343, %r5580, %p12;
	// begin inline asm
	{mul.f16x2 %r5581,%r5582,%r7389;
}
	// end inline asm
	selp.b32 	%r5585, %r7347, %r5580, %p12;
	// begin inline asm
	{mul.f16x2 %r5584,%r5585,%r7382;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5587, {low,high};}

	// end inline asm
	selp.b32 	%r5589, %r7343, %r5587, %p12;
	// begin inline asm
	{mul.f16x2 %r5588,%r5589,%r7643;
}
	// end inline asm
	selp.b32 	%r5592, %r7347, %r5587, %p12;
	// begin inline asm
	{mul.f16x2 %r5591,%r5592,%r7640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5594, {low,high};}

	// end inline asm
	selp.b32 	%r5596, %r7343, %r5594, %p12;
	// begin inline asm
	{mul.f16x2 %r7432,%r5596,%r7642;
}
	// end inline asm
	selp.b32 	%r5599, %r7347, %r5594, %p12;
	// begin inline asm
	{mul.f16x2 %r7427,%r5599,%r7639;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5601, {low,high};}

	// end inline asm
	selp.b32 	%r5603, %r7343, %r5601, %p12;
	// begin inline asm
	{mul.f16x2 %r5602,%r5603,%r7376;
}
	// end inline asm
	selp.b32 	%r5606, %r7347, %r5601, %p12;
	// begin inline asm
	{mul.f16x2 %r5605,%r5606,%r7369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5608, {low,high};}

	// end inline asm
	selp.b32 	%r5610, %r7343, %r5608, %p12;
	// begin inline asm
	{mul.f16x2 %r5609,%r5610,%r7375;
}
	// end inline asm
	selp.b32 	%r5613, %r7347, %r5608, %p12;
	// begin inline asm
	{mul.f16x2 %r5612,%r5613,%r7368;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5615, {low,high};}

	// end inline asm
	selp.b32 	%r5617, %r7343, %r5615, %p12;
	// begin inline asm
	{mul.f16x2 %r7422,%r5617,%r7374;
}
	// end inline asm
	selp.b32 	%r5620, %r7347, %r5615, %p12;
	// begin inline asm
	{mul.f16x2 %r7415,%r5620,%r7367;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5622, {low,high};}

	// end inline asm
	selp.b32 	%r5624, %r7343, %r5622, %p12;
	// begin inline asm
	{mul.f16x2 %r5623,%r5624,%r7362;
}
	// end inline asm
	selp.b32 	%r5627, %r7347, %r5622, %p12;
	// begin inline asm
	{mul.f16x2 %r5626,%r5627,%r7354;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5629, {low,high};}

	// end inline asm
	selp.b32 	%r5631, %r7343, %r5629, %p12;
	// begin inline asm
	{mul.f16x2 %r5630,%r5631,%r7361;
}
	// end inline asm
	selp.b32 	%r5634, %r7347, %r5629, %p12;
	// begin inline asm
	{mul.f16x2 %r5633,%r5634,%r7353;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5636, {low,high};}

	// end inline asm
	selp.b32 	%r5638, %r7343, %r5636, %p12;
	// begin inline asm
	{mul.f16x2 %r7409,%r5638,%r7630;
}
	// end inline asm
	selp.b32 	%r5641, %r7347, %r5636, %p12;
	// begin inline asm
	{mul.f16x2 %r7404,%r5641,%r7627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5643, {low,high};}

	// end inline asm
	selp.b32 	%r5645, %r7343, %r5643, %p12;
	// begin inline asm
	{mul.f16x2 %r5644,%r5645,%r7626;
}
	// end inline asm
	selp.b32 	%r5648, %r7347, %r5643, %p12;
	// begin inline asm
	{mul.f16x2 %r5647,%r5648,%r7629;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5650, {low,high};}

	// end inline asm
	selp.b32 	%r5652, %r7343, %r5650, %p12;
	// begin inline asm
	{mul.f16x2 %r5651,%r5652,%r7637;
}
	// end inline asm
	selp.b32 	%r5655, %r7347, %r5650, %p12;
	// begin inline asm
	{mul.f16x2 %r5654,%r5655,%r7638;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5657, {low,high};}

	// end inline asm
	selp.b32 	%r5659, %r7343, %r5657, %p12;
	// begin inline asm
	{mul.f16x2 %r5658,%r5659,%r7385;
}
	// end inline asm
	selp.b32 	%r5662, %r7347, %r5657, %p12;
	// begin inline asm
	{mul.f16x2 %r5661,%r5662,%r7431;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5664, {low,high};}

	// end inline asm
	selp.b32 	%r5666, %r7343, %r5664, %p12;
	// begin inline asm
	{mul.f16x2 %r5665,%r5666,%r7641;
}
	// end inline asm
	selp.b32 	%r5669, %r7347, %r5664, %p12;
	// begin inline asm
	{mul.f16x2 %r5668,%r5669,%r7648;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5671, {low,high};}

	// end inline asm
	selp.b32 	%r5673, %r7343, %r5671, %p12;
	// begin inline asm
	{mul.f16x2 %r7374,%r5673,%r7646;
}
	// end inline asm
	selp.b32 	%r5676, %r7347, %r5671, %p12;
	// begin inline asm
	{mul.f16x2 %r7367,%r5676,%r7650;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5678, {low,high};}

	// end inline asm
	selp.b32 	%r5680, %r7343, %r5678, %p12;
	// begin inline asm
	{mul.f16x2 %r5679,%r5680,%r7633;
}
	// end inline asm
	selp.b32 	%r5683, %r7347, %r5678, %p12;
	// begin inline asm
	{mul.f16x2 %r5682,%r5683,%r7635;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5685, {low,high};}

	// end inline asm
	selp.b32 	%r5687, %r7343, %r5685, %p12;
	// begin inline asm
	{mul.f16x2 %r5686,%r5687,%r7634;
}
	// end inline asm
	selp.b32 	%r5690, %r7347, %r5685, %p12;
	// begin inline asm
	{mul.f16x2 %r5689,%r5690,%r7636;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5692, {low,high};}

	// end inline asm
	selp.b32 	%r5694, %r7343, %r5692, %p12;
	// begin inline asm
	{mul.f16x2 %r5693,%r5694,%r7651;
}
	// end inline asm
	selp.b32 	%r5697, %r7347, %r5692, %p12;
	// begin inline asm
	{mul.f16x2 %r5696,%r5697,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5699,%r7492,%r3647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5702,%r3758,%r3604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5705,%r5699,%r5702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5708,%r7251,%r5705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5711,%r7491,%r5708;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7491, %r5711;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5714,%r7487,%r3713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5717,%r3792,%r3681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5720,%r5714,%r5717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5723,%r7251,%r5720;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5726,%r7486,%r5723;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7486, %r5726;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5729,%r7479,%r3880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5732,%r7493,%r3837;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5735,%r5729,%r5732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5738,%r7251,%r5735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5741,%r7478,%r5738;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7478, %r5741;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5744,%r7476,%r3946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5747,%r7488,%r3914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5750,%r5744,%r5747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5753,%r7251,%r5750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5756,%r7475,%r5753;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7475, %r5756;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5759,%r7487,%r7492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5762,%r7342,%r5759;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7840,%r5546;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7840,%r7343,%r5759;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5773, 31;
	mov.u32 	%r5775, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5771,%r7840,%r5773,%r2232,%r5775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5776,%r5762,%r5771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5779,%r7580,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5782,%r5779,%r5776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5785,%r7251,%r5782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r5546,%r5785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5791,%r7488,%r7493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5794,%r7342,%r5791;
}
	// end inline asm
	mov.u32 	%r7841, %r5553;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7841,%r7343,%r5791;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5803,%r7841,%r5773,%r2232,%r5775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5808,%r5794,%r5803;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5811,%r7568,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5814,%r5808,%r5811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5817,%r7251,%r5814;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r5553,%r5817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5823,%r7472,%r7492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5826,%r7483,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5829,%r5823,%r5826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5832,%r7251,%r5829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5835,%r7468,%r5832;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7468, %r5835;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7492;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5846, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5842,%r7492,%r413,%r2232,%r5846;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5842;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5848, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5849,%r5848,%r7487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5852,%r7346,%r5849;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7843,%r5549;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7843,%r7347,%r5849;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5865, 31;
	mov.u32 	%r5889, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5863,%r7843,%r5865,%r2232,%r5889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r5852,%r5863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r7577,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r5871,%r5868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5877,%r7251,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7461,%r5549,%r5877;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7493;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5885,%r7493,%r413,%r2232,%r5889;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5885;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5891, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5892,%r5891,%r7488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5895,%r7346,%r5892;
}
	// end inline asm
	mov.u32 	%r7844, %r5556;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7844,%r7347,%r5892;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5906,%r7844,%r5865,%r2232,%r5889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5911,%r5895,%r5906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5914,%r7565,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5917,%r5911,%r5914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5920,%r7251,%r5917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7460,%r5556,%r5920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5926,%r7463,%r7487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5929,%r7481,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5932,%r5926,%r5929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5935,%r7251,%r5932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5938,%r7459,%r5935;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7459, %r5938;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5943,%r7481,%r7483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5946,%r7342,%r5943;
}
	// end inline asm
	mov.u32 	%r7846, %r5567;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7846,%r7343,%r5943;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5955, 31;
	mov.u32 	%r5957, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5953,%r7846,%r5955,%r2232,%r5957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5958,%r5946,%r5953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5961,%r7562,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5964,%r5958,%r5961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5967,%r7251,%r5964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7452,%r5567,%r5967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5973,%r7454,%r4218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5976,%r4359,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5979,%r5973,%r5976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5982,%r7251,%r5979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5985,%r7451,%r5982;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7451, %r5985;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7483;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5992,%r7483,%r413,%r2232,%r5957;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5992;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5998, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5999,%r5998,%r7481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6002,%r7346,%r5999;
}
	// end inline asm
	mov.u32 	%r7848, %r5570;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7848,%r7347,%r5999;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6013, 31;
	mov.u32 	%r6015, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6011,%r7848,%r6013,%r2232,%r6015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6016,%r6002,%r6011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6019,%r7559,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6022,%r6016,%r6019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6025,%r7251,%r6022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7444,%r5570,%r6025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r7446,%r4299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6034,%r4393,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6037,%r6031,%r6034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6040,%r7251,%r6037;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6043,%r7443,%r6040;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7443, %r6043;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6048,%r7476,%r7479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6051,%r7342,%r6048;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7850,%r5581;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7850,%r7343,%r6048;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6062, 31;
	mov.u32 	%r6064, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6060,%r7850,%r6062,%r2232,%r6064;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6065,%r6051,%r6060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r7568,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r6068,%r6065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6074,%r7251,%r6071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7434,%r5581,%r6074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6080,%r7679,%r7680;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6083,%r7342,%r6080;
}
	// end inline asm
	mov.u32 	%r7851, %r5588;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7851,%r7343,%r6080;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6092,%r7851,%r6062,%r2232,%r6064;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6097,%r6083,%r6092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6100,%r7675,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6103,%r6097,%r6100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6106,%r7251,%r6103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5588,%r6106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6112,%r7676,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6115,%r7473,%r7680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6118,%r6112,%r6115;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6121,%r7251,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6124,%r7432,%r6121;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7432, %r6124;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7479;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6135, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6131,%r7479,%r413,%r2232,%r6135;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6131;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6137, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r6137,%r7476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r7346,%r6138;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7853,%r5584;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7853,%r7347,%r6138;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6154, 31;
	mov.u32 	%r6178, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6152,%r7853,%r6154,%r2232,%r6178;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6157,%r6141,%r6152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6160,%r7565,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6163,%r6160,%r6157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6166,%r7251,%r6163;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7429,%r5584,%r6166;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7680;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6174,%r7680,%r413,%r2232,%r6178;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6174;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6180, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6181,%r6180,%r7679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6184,%r7346,%r6181;
}
	// end inline asm
	mov.u32 	%r7854, %r5591;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7854,%r7347,%r6181;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6195,%r7854,%r6154,%r2232,%r6178;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6200,%r6184,%r6195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6203,%r7673,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6206,%r6200,%r6203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6209,%r7251,%r6206;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r5591,%r6209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6215,%r7674,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6218,%r7464,%r7679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6221,%r6215,%r6218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6224,%r7251,%r6221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6227,%r7427,%r6224;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7427, %r6227;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6232,%r7463,%r7472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6235,%r7342,%r6232;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7856,%r5602;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7856,%r7343,%r6232;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6246, 31;
	mov.u32 	%r6248, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6244,%r7856,%r6246,%r2232,%r6248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6249,%r6235,%r6244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6252,%r7562,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6255,%r6252,%r6249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6258,%r7251,%r6255;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7424,%r5602,%r6258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6264,%r7464,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6267,%r7342,%r6264;
}
	// end inline asm
	mov.u32 	%r7857, %r5609;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7857,%r7343,%r6264;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6276,%r7857,%r6246,%r2232,%r6248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6281,%r6267,%r6276;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6284,%r7555,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6287,%r6281,%r6284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6290,%r7251,%r6287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7423,%r5609,%r6290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6296,%r7426,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6299,%r7455,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6302,%r6296,%r6299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6305,%r7251,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6308,%r7422,%r6305;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7422, %r6308;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7472;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6319, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6315,%r7472,%r413,%r2232,%r6319;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6315;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6321, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r6321,%r7463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6325,%r7346,%r6322;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7859,%r5605;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7859,%r7347,%r6322;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6338, 31;
	mov.u32 	%r6362, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6336,%r7859,%r6338,%r2232,%r6362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6341,%r6325,%r6336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6344,%r7559,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6347,%r6344,%r6341;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6350,%r7251,%r6347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7417,%r5605,%r6350;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7473;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6358,%r7473,%r413,%r2232,%r6362;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6358;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6364, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6365,%r6364,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6368,%r7346,%r6365;
}
	// end inline asm
	mov.u32 	%r7860, %r5612;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7860,%r7347,%r6365;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6379,%r7860,%r6338,%r2232,%r6362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6384,%r6368,%r6379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6387,%r7553,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6390,%r6384,%r6387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6393,%r7251,%r6390;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7416,%r5612,%r6393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6399,%r7419,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6402,%r7447,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r6399,%r6402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6408,%r7251,%r6405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6411,%r7415,%r6408;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7415, %r6411;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6416,%r7446,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6419,%r7342,%r6416;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7862,%r5623;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7862,%r7343,%r6416;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6430, 31;
	mov.u32 	%r6432, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6428,%r7862,%r6430,%r2232,%r6432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6433,%r6419,%r6428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6436,%r7558,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r6436,%r6433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6442,%r7251,%r6439;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7411,%r5623,%r6442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6448,%r7447,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6451,%r7342,%r6448;
}
	// end inline asm
	mov.u32 	%r7863, %r5630;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7863,%r7343,%r6448;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6460,%r7863,%r6430,%r2232,%r6432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6465,%r6451,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6468,%r7552,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6471,%r6465,%r6468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6474,%r7251,%r6471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7410,%r5630,%r6474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6480,%r7659,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6483,%r7666,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6486,%r6480,%r6483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6489,%r7251,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6492,%r7409,%r6489;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7409, %r6492;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7454;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6503, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6499,%r7454,%r413,%r2232,%r6503;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6499;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6505, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r6505,%r7446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6509,%r7346,%r6506;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7865,%r5626;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7865,%r7347,%r6506;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6522, 31;
	mov.u32 	%r6546, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6520,%r7865,%r6522,%r2232,%r6546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r6509,%r6520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6528,%r7557,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6531,%r6528,%r6525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6534,%r7251,%r6531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7406,%r5626,%r6534;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7455;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6542,%r7455,%r413,%r2232,%r6546;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6542;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6548, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6549,%r6548,%r7447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6552,%r7346,%r6549;
}
	// end inline asm
	mov.u32 	%r7866, %r5633;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7866,%r7347,%r6549;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6563,%r7866,%r6522,%r2232,%r6546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6568,%r6552,%r6563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6571,%r7551,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6574,%r6568,%r6571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6577,%r7251,%r6574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7405,%r5633,%r6577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6583,%r7657,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6586,%r7663,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6589,%r6583,%r6586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6592,%r7251,%r6589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6595,%r7404,%r6592;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7404, %r6595;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6600,%r7663,%r7666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6603,%r7342,%r6600;
}
	// end inline asm
	mov.u32 	%r7868, %r5644;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7868,%r7343,%r6600;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6612, 31;
	mov.u32 	%r6636, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6610,%r7868,%r6612,%r2232,%r6636;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6615,%r6603,%r6610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6618,%r7655,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6621,%r6615,%r6618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6624,%r7251,%r6621;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r5644,%r6624;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7666;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6632,%r7666,%r413,%r2232,%r6636;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6632;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6638, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6639,%r6638,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6642,%r7346,%r6639;
}
	// end inline asm
	mov.u32 	%r7869, %r5647;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7869,%r7347,%r6639;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6653,%r7869,%r6612,%r2232,%r6636;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6658,%r6642,%r6653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6661,%r7656,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6664,%r6658,%r6661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6667,%r7251,%r6664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7396,%r5647,%r6667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6673,%r7674,%r7676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6676,%r7342,%r6673;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7870,%r5651;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7870,%r7343,%r6673;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6689, 31;
	mov.u32 	%r6713, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6687,%r7870,%r6689,%r2232,%r6713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6692,%r6676,%r6687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6695,%r7555,%r7675;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6698,%r6695,%r6692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6701,%r7251,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7389,%r5651,%r6701;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7676;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6709,%r7676,%r413,%r2232,%r6713;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6709;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6715, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6716,%r6715,%r7674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6719,%r7346,%r6716;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7871,%r5654;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7871,%r7347,%r6716;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6734, 31;
	mov.u32 	%r6736, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6732,%r7871,%r6734,%r2232,%r6736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6737,%r6719,%r6732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6740,%r7553,%r7673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6743,%r6740,%r6737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6746,%r7251,%r6743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7382,%r5654,%r6746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6752,%r7419,%r7426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6755,%r7342,%r6752;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7872,%r5658;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7872,%r7343,%r6752;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6768, 31;
	mov.u32 	%r6770, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6766,%r7872,%r6768,%r2232,%r6770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6771,%r6755,%r6766;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6774,%r7552,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6777,%r6774,%r6771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6780,%r7251,%r6777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7376,%r5658,%r6780;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6786,%r7669,%r7670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6789,%r7342,%r6786;
}
	// end inline asm
	mov.u32 	%r7873, %r5665;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7873,%r7343,%r6786;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6798,%r7873,%r6768,%r2232,%r6770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6803,%r6789,%r6798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6806,%r7672,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6809,%r6803,%r6806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6812,%r7251,%r6809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7375,%r5665,%r6812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6818,%r7661,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6821,%r7660,%r7670;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6824,%r6818,%r6821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6827,%r7251,%r6824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6830,%r7374,%r6827;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7374, %r6830;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7426;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6841, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6837,%r7426,%r413,%r2232,%r6841;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6837;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6843, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6844,%r6843,%r7419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6847,%r7346,%r6844;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7875,%r5661;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7875,%r7347,%r6844;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6860, 31;
	mov.u32 	%r6884, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6858,%r7875,%r6860,%r2232,%r6884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6863,%r6847,%r6858;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6866,%r7551,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6869,%r6866,%r6863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6872,%r7251,%r6869;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7369,%r5661,%r6872;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7670;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6880,%r7670,%r413,%r2232,%r6884;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6880;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6886, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6887,%r6886,%r7669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6890,%r7346,%r6887;
}
	// end inline asm
	mov.u32 	%r7876, %r5668;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7876,%r7347,%r6887;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6901,%r7876,%r6860,%r2232,%r6884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6906,%r6890,%r6901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6909,%r7678,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6912,%r6906,%r6909;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6915,%r7251,%r6912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7368,%r5668,%r6915;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6921,%r7664,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6924,%r7658,%r7669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6927,%r6921,%r6924;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6930,%r7251,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6933,%r7367,%r6930;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7367, %r6933;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6938,%r7657,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6941,%r7342,%r6938;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7878,%r5679;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7878,%r7343,%r6938;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6952, 31;
	mov.u32 	%r6954, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6950,%r7878,%r6952,%r2232,%r6954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6955,%r6941,%r6950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6958,%r7655,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6961,%r6958,%r6955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6964,%r7251,%r6961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7362,%r5679,%r6964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6970,%r7658,%r7660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6973,%r7342,%r6970;
}
	// end inline asm
	mov.u32 	%r7879, %r5686;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7879,%r7343,%r6970;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6982,%r7879,%r6952,%r2232,%r6954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6987,%r6973,%r6982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6990,%r7667,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6993,%r6987,%r6990;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6996,%r7251,%r6993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7361,%r5686,%r6996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7659;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7004,%r7659,%r413,%r2232,%r6954;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7004;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7010, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7011,%r7010,%r7657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7014,%r7346,%r7011;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7880,%r5682;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7880,%r7347,%r7011;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7029, 31;
	mov.u32 	%r7053, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7027,%r7880,%r7029,%r2232,%r7053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7032,%r7014,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7035,%r7656,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7038,%r7035,%r7032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7041,%r7251,%r7038;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7354,%r5682,%r7041;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7660;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7049,%r7660,%r413,%r2232,%r7053;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7049;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7055, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7056,%r7055,%r7658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7059,%r7346,%r7056;
}
	// end inline asm
	mov.u32 	%r7881, %r5689;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7881,%r7347,%r7056;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7070,%r7881,%r7029,%r2232,%r7053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7075,%r7059,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7078,%r7668,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7081,%r7075,%r7078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7084,%r7251,%r7081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7353,%r5689,%r7084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7090,%r7664,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7093,%r7342,%r7090;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7882,%r5693;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7882,%r7343,%r7090;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7106, 31;
	mov.u32 	%r7130, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7104,%r7882,%r7106,%r2232,%r7130;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7093,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7112,%r7667,%r7672;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7115,%r7112,%r7109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7118,%r7251,%r7115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7385,%r5693,%r7118;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7661;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7126,%r7661,%r413,%r2232,%r7130;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7126;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7132, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7133,%r7132,%r7664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7136,%r7346,%r7133;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7883,%r5696;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7883,%r7347,%r7133;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7151, 31;
	mov.u32 	%r7153, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7149,%r7883,%r7151,%r2232,%r7153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r7136,%r7149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7157,%r7668,%r7678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7160,%r7157,%r7154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7163,%r7251,%r7160;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7431,%r5696,%r7163;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2135;
	shl.b32 	%r7172, %r24, 8;
	shl.b32 	%r7176, %r1730, 8;
	or.b32  	%r7177, %r7176, 128;
	mad.lo.s32 	%r7178, %r7177, %r23, %r2138;
	add.s32 	%r7179, %r7178, %r7172;
	shl.b32 	%r7180, %r7179, 2;
	mov.u32 	%r7181, _ZN6kernel5shmemE;
	add.s32 	%r7182, %r7181, %r7180;
	shl.b32 	%r7183, %r28, 4;
	add.s32 	%r1726, %r7182, %r7183;
	st.shared.v4.u32 	[%r1726], {%r7433, %r7428, %r7434, %r7429};
	st.shared.v4.u32 	[%r1726+512], {%r7478, %r7475, %r7469, %r7460};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1726+1024], {%r7470, %r7461, %r7491, %r7486};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2135;
	@%p378 bra 	$L__BB0_721;

	mul.lo.s32 	%r7187, %r2529, 384;
	mad.lo.s32 	%r7188, %r52, %r24, %r7187;
	mad.lo.s32 	%r7191, %r2133, %r2135, %r7188;
	mad.lo.s32 	%r7194, %r2131, %r2130, %r7191;
	shl.b32 	%r7195, %r7194, 2;
	mov.u32 	%r7196, _ZN6kernel5shmemE;
	add.s32 	%r7197, %r7196, %r7195;
	shl.b32 	%r7198, %r28, 4;
	add.s32 	%r7199, %r7197, %r7198;
	st.shared.v4.u32 	[%r7199], {%r7470, %r7461, %r7491, %r7486};
	st.shared.v4.u32 	[%r7199+512], {%r7452, %r7444, %r7411, %r7406};
	st.shared.v4.u32 	[%r7199+1024], {%r7451, %r7443, %r7400, %r7396};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2130;
	ld.param.u64 	%rd537, [%rd1+80];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7201, %r651, %r1732, %r26;
	mul.lo.s32 	%r7202, %r7201, %r1730;
	mul.lo.s32 	%r7203, %r7202, 768;
	add.s32 	%r7204, %r1730, %r24;
	mad.lo.s32 	%r7205, %r7204, 384, %r7203;
	add.s32 	%r7206, %r7205, -128;
	mul.wide.s32 	%rd538, %r7206, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7433, %r7428, %r7434, %r7429};
	st.global.v4.u32 	[%rd541+1024], {%r7478, %r7475, %r7469, %r7460};
	st.global.v4.u32 	[%rd541+1536], {%r7470, %r7461, %r7491, %r7486};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2135;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7208, %r652, %r1731, %r25;
	mad.lo.s32 	%r7216, %r2529, 384, %r52;
	mad.lo.s32 	%r7217, %r1788, %r51, %r7216;
	mad.lo.s32 	%r7218, %r7208, %r1786, %r7217;
	mul.wide.s32 	%rd542, %r7218, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7470, %r7461, %r7491, %r7486};
	st.global.v4.u32 	[%rd40+512], {%r7452, %r7444, %r7411, %r7406};
	st.global.v4.u32 	[%rd40+1024], {%r7451, %r7443, %r7400, %r7396};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7625, %r7628, %r7632, %r7631};

$L__BB0_726:
	rem.s32 	%r7219, %r7512, %r1733;
	setp.eq.s32 	%p372, %r7219, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r407, %r408;
	mov.u32 	%r7232, -2147483647;
	sub.s32 	%r7233, %r7232, %r406;
	selp.b32 	%r7234, %r7233, 1, %p375;
	atom.add.u32 	%r1727, [%rd545], %r7234;

$L__BB0_732:
	ld.volatile.u32 	%r7235, [%rd24+4];
	xor.b32  	%r7236, %r7235, %r1727;
	setp.gt.s32 	%p376, %r7236, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7512, %r7512, 1;
	setp.lt.s32 	%p377, %r7512, %r31;
	mov.u32 	%r7626, %r7792;
	mov.u32 	%r7627, %r7793;
	mov.u32 	%r7629, %r7795;
	mov.u32 	%r7630, %r7796;
	mov.u32 	%r7637, %r7807;
	mov.u32 	%r7638, %r7808;
	mov.u32 	%r7639, %r7809;
	mov.u32 	%r7640, %r7810;
	mov.u32 	%r7641, %r7811;
	mov.u32 	%r7642, %r7812;
	mov.u32 	%r7643, %r7813;
	mov.u32 	%r7646, %r7816;
	mov.u32 	%r7648, %r7818;
	mov.u32 	%r7650, %r7820;
	mov.u32 	%r7440, %r474;
	mov.u32 	%r7441, %r7703;
	mov.u32 	%r7448, %r481;
	mov.u32 	%r7449, %r7705;
	mov.u32 	%r7456, %r488;
	mov.u32 	%r7465, %r496;
	mov.u32 	%r7474, %r7710;
	mov.u32 	%r7477, %r7712;
	mov.u32 	%r7480, %r526;
	mov.u32 	%r7482, %r534;
	mov.u32 	%r7484, %r541;
	mov.u32 	%r7485, %r542;
	mov.u32 	%r7489, %r550;
	mov.u32 	%r7490, %r551;
	mov.u32 	%r7633, %r7801;
	mov.u32 	%r7634, %r7802;
	mov.u32 	%r7635, %r7803;
	mov.u32 	%r7636, %r7804;
	mov.u32 	%r7651, %r7821;
	mov.u32 	%r7652, %r7822;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}

