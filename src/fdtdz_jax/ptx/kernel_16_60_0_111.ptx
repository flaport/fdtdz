//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<587>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<8056>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<591>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1776, %r1777}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1778, %r1779}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1780, %r1781}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1782, %r1783}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1784, %r1785}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1786, %r1787}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1788, %r1789}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1790, %r1791}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1792, %r1793}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1794, %r1795}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1796, %r1797}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1798, %r1799}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1800, %r1801}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1802, 32;
	sub.s32 	%r45, %r1802, %r1783;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1803, %r1789, -1;
	mad.lo.s32 	%r1804, %r1803, %r1788, %r1787;
	add.s32 	%r1805, %r1782, %r1781;
	add.s32 	%r1806, %r1805, %r1804;
	add.s32 	%r1807, %r1806, 1;
	mul.lo.s32 	%r1808, %r1776, %r1778;
	shl.b32 	%r47, %r1808, 1;
	shl.b32 	%r1809, %r1808, 2;
	div.s32 	%r1810, %r1807, %r1809;
	add.s32 	%r1811, %r1810, 1;
	mul.lo.s32 	%r1812, %r1811, %r1782;
	mul.lo.s32 	%r1813, %r1777, %r1779;
	shl.b32 	%r48, %r1813, 1;
	div.s32 	%r1814, %r1812, %r48;
	add.s32 	%r1815, %r1814, 1;
	mul.lo.s32 	%r49, %r1815, %r1781;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f83;
  cvt.rn.f16.f32 high, %f83;
  mov.b32 %r7429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7429, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1818, %r1778, %r44, %r43;
	mad.lo.s32 	%r1819, %r1818, %r1777, %r42;
	mad.lo.s32 	%r1820, %r1819, %r1776, %r41;
	shl.b32 	%r53, %r1820, 5;
	add.s32 	%r7434, %r53, %r46;
	mul.lo.s32 	%r1821, %r1813, %r1808;
	shl.b32 	%r57, %r1821, 5;
	mov.u32 	%r1822, 8;
	sub.s32 	%r1823, %r1822, %r1790;
	add.s32 	%r1824, %r1823, %r1791;
	sub.s32 	%r1825, %r1822, %r1792;
	add.s32 	%r1826, %r1825, %r1793;
	sub.s32 	%r58, %r1795, %r1794;
	mul.lo.s32 	%r1827, %r1789, %r58;
	mul.lo.s32 	%r1828, %r1827, %r1826;
	mul.lo.s32 	%r1829, %r1828, %r1824;
	mul.lo.s32 	%r59, %r1829, 3;
	setp.ge.s32 	%p29, %r7434, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1830, %r1793, 8;
	sub.s32 	%r1831, %r1830, %r1792;
	mul.lo.s32 	%r1832, %r1789, %r1831;
	add.s32 	%r1833, %r1791, 8;
	sub.s32 	%r1834, %r1833, %r1790;
	mul.lo.s32 	%r1835, %r1832, %r1834;
	mul.lo.s32 	%r1836, %r1835, %r58;
	not.b32 	%r1837, %r46;
	mad.lo.s32 	%r1838, %r1836, 3, %r1837;
	sub.s32 	%r1839, %r1838, %r53;
	mul.lo.s32 	%r1840, %r1813, %r1776;
	mul.lo.s32 	%r1841, %r1840, %r1778;
	shl.b32 	%r1842, %r1841, 5;
	div.u32 	%r60, %r1839, %r1842;
	add.s32 	%r1843, %r60, 1;
	and.b32  	%r7431, %r1843, 3;
	setp.eq.s32 	%p30, %r7431, 0;
	mov.u32 	%r7432, %r7434;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r7432, %r7434;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd46, %r7432, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1844, 0;
	st.global.u32 	[%rd47], %r1844;
	add.s32 	%r7432, %r7432, %r57;
	add.s32 	%r7431, %r7431, -1;
	setp.ne.s32 	%p31, %r7431, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd50, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd48, %r7432, 4;
	add.s64 	%rd49, %rd2, %rd48;
	mov.u32 	%r1845, 0;
	st.global.u32 	[%rd49], %r1845;
	add.s64 	%rd51, %rd49, %rd50;
	st.global.u32 	[%rd51], %r1845;
	add.s32 	%r1846, %r7432, %r57;
	add.s32 	%r1847, %r1846, %r57;
	add.s64 	%rd52, %rd51, %rd50;
	st.global.u32 	[%rd52], %r1845;
	add.s32 	%r1848, %r1847, %r57;
	add.s64 	%rd53, %rd52, %rd50;
	st.global.u32 	[%rd53], %r1845;
	add.s32 	%r7432, %r1848, %r57;
	setp.lt.s32 	%p33, %r7432, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd54, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd54;
	sub.s32 	%r1849, %r1782, %r47;
	div.s32 	%r1850, %r1849, %r48;
	mul.lo.s32 	%r1851, %r1850, %r1781;
	sub.s32 	%r69, %r1851, %r47;
	sub.s32 	%r1852, %r1781, %r48;
	mul.lo.s32 	%r1853, %r1852, %r1778;
	mul.lo.s32 	%r70, %r1776, 384;
	add.s32 	%r1854, %r70, %r70;
	add.s32 	%r1855, %r1854, 128;
	mul.lo.s32 	%r1857, %r1813, 768;
	mul.lo.s32 	%r1858, %r1853, %r1855;
	mad.lo.s32 	%r71, %r1857, %r69, %r1858;
	bra.uni 	$L__BB0_11;

$L__BB0_959:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f641;
  cvt.rn.f16.f32 high, %f641;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd576, %r7434, 4;
	add.s64 	%rd577, %rd3, %rd576;
	st.global.u32 	[%rd577], %r7398;
	add.s32 	%r7434, %r7434, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7434, %r71;
	@%p34 bra 	$L__BB0_959;

	ld.param.u64 	%rd55, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd55;
	ld.param.u64 	%rd56, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd56;
	ld.param.u64 	%rd57, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd57;
	mad.lo.s32 	%r7470, %r1776, %r43, %r41;
	mul.lo.s32 	%r79, %r1777, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7470, %r1781;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1859, 31;
	sub.s32 	%r1860, %r1859, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1861, %r46, %r1860, %p36;
	shl.b32 	%r1862, %r1861, 2;
	mov.u32 	%r1863, 2;
	sub.s32 	%r81, %r1862, %r1784;
	shl.b32 	%r1864, %r1783, 2;
	mov.u32 	%r1865, 128;
	sub.s32 	%r82, %r1865, %r1864;
	sub.s32 	%r1866, %r1863, %r1784;
	add.s32 	%r83, %r1866, %r1862;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r84, %r1791, %r1790;
	sub.s32 	%r85, %r1793, %r1792;
	add.s32 	%r86, %r1791, -1;
	add.s32 	%r87, %r1793, -1;
	add.s32 	%r88, %r1795, -1;
	mul.lo.s32 	%r1867, %r1782, %r1781;
	shl.b32 	%r89, %r1867, 6;
	add.s32 	%r90, %r1781, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1868, %r94, 31;
	add.s32 	%r1869, %r94, %r1868;
	shr.s32 	%r96, %r1869, 1;
	and.b32  	%r1870, %r1869, -2;
	sub.s32 	%r1871, %r94, %r1870;
	add.s32 	%r95, %r1871, %r89;
	rem.s32 	%r1930, %r91, %r82;
	add.s32 	%r1931, %r1930, %r82;
	rem.s32 	%r1932, %r1931, %r82;
	rem.s32 	%r1933, %r92, %r82;
	add.s32 	%r1934, %r1933, %r82;
	rem.s32 	%r1935, %r1934, %r82;
	mov.u32 	%r7435, %r7470;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1782;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7435, %r1796;
	setp.lt.s32 	%p39, %r7435, %r1797;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7435, %r1791;
	setp.ge.s32 	%p41, %r7435, %r1790;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1872, %r7435, %r86, %p40;
	setp.lt.s32 	%p42, %r7435, %r1790;
	selp.b32 	%r1873, %r1790, %r1872, %p42;
	sub.s32 	%r1874, %r1873, %r1790;
	add.s32 	%r98, %r90, %r7435;
	rem.s32 	%r1875, %r81, %r82;
	add.s32 	%r1876, %r1875, %r82;
	rem.s32 	%r99, %r1876, %r82;
	rem.s32 	%r1877, %r83, %r82;
	add.s32 	%r1878, %r1877, %r82;
	rem.s32 	%r100, %r1878, %r82;
	setp.lt.s32 	%p43, %r99, %r1795;
	sub.s32 	%r101, %r99, %r1794;
	setp.lt.s32 	%p44, %r99, %r1794;
	selp.b32 	%r1879, %r99, %r88, %p43;
	selp.b32 	%r1880, %r1794, %r1879, %p44;
	sub.s32 	%r102, %r1880, %r1794;
	setp.lt.s32 	%p45, %r100, %r1795;
	sub.s32 	%r103, %r100, %r1794;
	setp.lt.s32 	%p46, %r100, %r1794;
	selp.b32 	%r1881, %r100, %r88, %p45;
	selp.b32 	%r1882, %r1794, %r1881, %p46;
	sub.s32 	%r104, %r1882, %r1794;
	sub.s32 	%r1883, %r7435, %r1790;
	mul.lo.s32 	%r105, %r1883, %r85;
	mul.lo.s32 	%r106, %r1874, %r85;
	add.s32 	%r1884, %r1883, %r84;
	mul.lo.s32 	%r107, %r1884, %r85;
	add.s32 	%r1885, %r1874, %r84;
	mul.lo.s32 	%r108, %r1885, %r85;
	add.s32 	%r1886, %r1884, %r84;
	mul.lo.s32 	%r109, %r1886, %r85;
	add.s32 	%r1887, %r1885, %r84;
	mul.lo.s32 	%r110, %r1887, %r85;
	mov.u32 	%r7436, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7436, %r1798;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7436, %r1799;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7436, %r1792;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7436, %r1793;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7436, %r1792;
	selp.b32 	%r1888, %r7436, %r87, %p52;
	setp.lt.s32 	%p53, %r7436, %r1792;
	selp.b32 	%r1889, %r1792, %r1888, %p53;
	sub.s32 	%r113, %r1889, %r1792;
	mul.lo.s32 	%r114, %r7436, %r1781;
	add.s32 	%r115, %r114, %r7435;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1800;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1801;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1794;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1794;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd58, %r115, 4;
	add.s64 	%rd8, %rd7, %rd58;
	ld.global.f32 	%f85, [%rd8];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1892, %r112, %r105;
	mad.lo.s32 	%r1893, %r1892, %r58, %r101;
	mul.wide.s32 	%rd61, %r1893, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f642, [%rd62];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1890, %r113, %r106;
	mad.lo.s32 	%r1891, %r1890, %r58, %r102;
	mul.wide.s32 	%rd59, %r1891, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f642, [%rd60];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1801;
	setp.ge.s32 	%p68, %r100, %r1800;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1896, %r112, %r105;
	mad.lo.s32 	%r1897, %r1896, %r58, %r103;
	mul.wide.s32 	%rd65, %r1897, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f643, [%rd66];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1894, %r113, %r106;
	mad.lo.s32 	%r1895, %r1894, %r58, %r104;
	mul.wide.s32 	%rd63, %r1895, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f643, [%rd64];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f86;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1898, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1899, %r117, %r46;
	shl.b32 	%r1900, %r1899, 2;
	add.s32 	%r1901, %r89, %r1900;
	mul.wide.s32 	%rd67, %r1901, 4;
	add.s64 	%rd68, %rd6, %rd67;
	st.global.u32 	[%rd68], %r1898;
	add.s32 	%r118, %r1782, %r7436;
	mad.lo.s32 	%r1902, %r118, %r1781, %r7435;
	mul.wide.s32 	%rd69, %r1902, 4;
	add.s64 	%rd9, %rd7, %rd69;
	ld.global.f32 	%f88, [%rd9];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1905, %r112, %r107;
	mad.lo.s32 	%r1906, %r1905, %r58, %r101;
	mul.wide.s32 	%rd72, %r1906, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f644, [%rd73];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1903, %r113, %r108;
	mad.lo.s32 	%r1904, %r1903, %r58, %r102;
	mul.wide.s32 	%rd70, %r1904, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f644, [%rd71];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1909, %r112, %r107;
	mad.lo.s32 	%r1910, %r1909, %r58, %r103;
	mul.wide.s32 	%rd76, %r1910, 4;
	add.s64 	%rd77, %rd5, %rd76;
	ld.global.f32 	%f645, [%rd77];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1907, %r113, %r108;
	mad.lo.s32 	%r1908, %r1907, %r58, %r104;
	mul.wide.s32 	%rd74, %r1908, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f645, [%rd75];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f89;
  cvt.rn.f16.f32 high, %f90;
  mov.b32 %r1911, {low,high};}

	// end inline asm
	add.s32 	%r1912, %r93, %r116;
	mul.wide.s32 	%rd78, %r1912, 4;
	add.s64 	%rd79, %rd6, %rd78;
	st.global.u32 	[%rd79], %r1911;
	add.s32 	%r1913, %r118, %r1782;
	mad.lo.s32 	%r1914, %r1913, %r1781, %r7435;
	mul.wide.s32 	%rd80, %r1914, 4;
	add.s64 	%rd10, %rd7, %rd80;
	ld.global.f32 	%f91, [%rd10];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1917, %r112, %r109;
	mad.lo.s32 	%r1918, %r1917, %r58, %r101;
	mul.wide.s32 	%rd83, %r1918, 4;
	add.s64 	%rd84, %rd5, %rd83;
	ld.global.f32 	%f646, [%rd84];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1915, %r113, %r110;
	mad.lo.s32 	%r1916, %r1915, %r58, %r102;
	mul.wide.s32 	%rd81, %r1916, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f646, [%rd82];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1921, %r112, %r109;
	mad.lo.s32 	%r1922, %r1921, %r58, %r103;
	mul.wide.s32 	%rd87, %r1922, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f647, [%rd88];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1919, %r113, %r110;
	mad.lo.s32 	%r1920, %r1919, %r58, %r104;
	mul.wide.s32 	%rd85, %r1920, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f647, [%rd86];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f93;
  mov.b32 %r1923, {low,high};}

	// end inline asm
	rem.s32 	%r1924, %r98, %r1781;
	add.s32 	%r1925, %r1924, %r114;
	shl.b32 	%r119, %r1925, 5;
	add.s32 	%r1926, %r119, %r46;
	shl.b32 	%r1927, %r1926, 2;
	add.s32 	%r1928, %r89, %r1927;
	add.s32 	%r1929, %r1928, 2;
	mul.wide.s32 	%rd89, %r1929, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r1923;
	setp.ge.s32 	%p76, %r1932, %r1800;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1932, %r1801;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1932, %r1794;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1932, %r1795;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1935, %r1800;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1935, %r1801;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r120, %r1932, %r1794;
	setp.lt.s32 	%p86, %r1932, %r1794;
	selp.b32 	%r1936, %r1932, %r88, %p82;
	selp.b32 	%r1937, %r1794, %r1936, %p86;
	sub.s32 	%r121, %r1937, %r1794;
	setp.ge.s32 	%p87, %r1935, %r1794;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1935, %r1795;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r122, %r1935, %r1794;
	setp.lt.s32 	%p90, %r1935, %r1794;
	selp.b32 	%r1938, %r1935, %r88, %p89;
	selp.b32 	%r1939, %r1794, %r1938, %p90;
	sub.s32 	%r123, %r1939, %r1794;
	ld.global.f32 	%f94, [%rd8];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1942, %r112, %r105;
	mad.lo.s32 	%r1943, %r1942, %r58, %r120;
	mul.wide.s32 	%rd93, %r1943, 4;
	add.s64 	%rd94, %rd5, %rd93;
	ld.global.f32 	%f648, [%rd94];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1940, %r113, %r106;
	mad.lo.s32 	%r1941, %r1940, %r58, %r121;
	mul.wide.s32 	%rd91, %r1941, 4;
	add.s64 	%rd92, %rd5, %rd91;
	ld.global.f32 	%f648, [%rd92];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1946, %r112, %r105;
	mad.lo.s32 	%r1947, %r1946, %r58, %r122;
	mul.wide.s32 	%rd97, %r1947, 4;
	add.s64 	%rd98, %rd5, %rd97;
	ld.global.f32 	%f649, [%rd98];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1944, %r113, %r106;
	mad.lo.s32 	%r1945, %r1944, %r58, %r123;
	mul.wide.s32 	%rd95, %r1945, 4;
	add.s64 	%rd96, %rd5, %rd95;
	ld.global.f32 	%f649, [%rd96];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f96;
  mov.b32 %r1948, {low,high};}

	// end inline asm
	add.s32 	%r1949, %r117, %r96;
	shl.b32 	%r1950, %r1949, 2;
	add.s32 	%r1951, %r95, %r1950;
	mul.wide.s32 	%rd99, %r1951, 4;
	add.s64 	%rd100, %rd6, %rd99;
	st.global.u32 	[%rd100], %r1948;
	ld.global.f32 	%f97, [%rd9];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1954, %r112, %r107;
	mad.lo.s32 	%r1955, %r1954, %r58, %r120;
	mul.wide.s32 	%rd103, %r1955, 4;
	add.s64 	%rd104, %rd5, %rd103;
	ld.global.f32 	%f650, [%rd104];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1952, %r113, %r108;
	mad.lo.s32 	%r1953, %r1952, %r58, %r121;
	mul.wide.s32 	%rd101, %r1953, 4;
	add.s64 	%rd102, %rd5, %rd101;
	ld.global.f32 	%f650, [%rd102];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1958, %r112, %r107;
	mad.lo.s32 	%r1959, %r1958, %r58, %r122;
	mul.wide.s32 	%rd107, %r1959, 4;
	add.s64 	%rd108, %rd5, %rd107;
	ld.global.f32 	%f651, [%rd108];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1956, %r113, %r108;
	mad.lo.s32 	%r1957, %r1956, %r58, %r123;
	mul.wide.s32 	%rd105, %r1957, 4;
	add.s64 	%rd106, %rd5, %rd105;
	ld.global.f32 	%f651, [%rd106];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f99;
  mov.b32 %r1960, {low,high};}

	// end inline asm
	add.s32 	%r1961, %r94, %r116;
	mul.wide.s32 	%rd109, %r1961, 4;
	add.s64 	%rd110, %rd6, %rd109;
	st.global.u32 	[%rd110], %r1960;
	ld.global.f32 	%f100, [%rd10];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1964, %r112, %r109;
	mad.lo.s32 	%r1965, %r1964, %r58, %r120;
	mul.wide.s32 	%rd113, %r1965, 4;
	add.s64 	%rd114, %rd5, %rd113;
	ld.global.f32 	%f652, [%rd114];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1962, %r113, %r110;
	mad.lo.s32 	%r1963, %r1962, %r58, %r121;
	mul.wide.s32 	%rd111, %r1963, 4;
	add.s64 	%rd112, %rd5, %rd111;
	ld.global.f32 	%f652, [%rd112];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1968, %r112, %r109;
	mad.lo.s32 	%r1969, %r1968, %r58, %r122;
	mul.wide.s32 	%rd117, %r1969, 4;
	add.s64 	%rd118, %rd5, %rd117;
	ld.global.f32 	%f653, [%rd118];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1966, %r113, %r110;
	mad.lo.s32 	%r1967, %r1966, %r58, %r123;
	mul.wide.s32 	%rd115, %r1967, 4;
	add.s64 	%rd116, %rd5, %rd115;
	ld.global.f32 	%f653, [%rd116];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f102;
  mov.b32 %r1970, {low,high};}

	// end inline asm
	add.s32 	%r1971, %r119, %r96;
	shl.b32 	%r1972, %r1971, 2;
	add.s32 	%r1973, %r95, %r1972;
	add.s32 	%r1974, %r1973, 2;
	mul.wide.s32 	%rd119, %r1974, 4;
	add.s64 	%rd120, %rd6, %rd119;
	st.global.u32 	[%rd120], %r1970;
	add.s32 	%r7436, %r7436, %r1813;
	setp.lt.s32 	%p99, %r7436, %r1782;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7435, %r7435, %r1808;
	setp.lt.s32 	%p100, %r7435, %r1781;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd121, [%rd1+120];
	cvta.to.global.u64 	%rd11, %rd121;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r126, %r80, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd122, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd184, %rd122, 24;
	mov.u32 	%r7437, %r7470;

$L__BB0_68:
	setp.ge.s32 	%p102, %r126, %r1782;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7438, %r126;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1976, %r7438, 31;
	add.s32 	%r1977, %r7438, %r1976;
	shr.s32 	%r1978, %r1977, 1;
	mad.lo.s32 	%r1979, %r1978, %r1781, %r7437;
	shl.b32 	%r130, %r1979, 5;
	add.s32 	%r131, %r7438, -2;
	mul.lo.s32 	%r132, %r131, %r1781;
	add.s32 	%r1980, %r1782, %r131;
	mul.lo.s32 	%r133, %r1980, %r1781;
	add.s32 	%r1981, %r1980, %r1782;
	mul.lo.s32 	%r134, %r1981, %r1781;
	add.s32 	%r135, %r132, %r1781;
	add.s32 	%r136, %r7438, -1;
	add.s32 	%r1982, %r1782, %r136;
	mul.lo.s32 	%r137, %r1982, %r1781;
	add.s32 	%r1983, %r1982, %r1782;
	mul.lo.s32 	%r138, %r1983, %r1781;
	add.s32 	%r1984, %r1782, %r7438;
	mul.lo.s32 	%r139, %r1984, %r1781;
	add.s32 	%r1985, %r1984, %r1782;
	mul.lo.s32 	%r140, %r1985, %r1781;
	mul.lo.s32 	%r141, %r7438, %r1781;
	add.s32 	%r142, %r141, %r1781;
	add.s32 	%r143, %r7438, 1;
	add.s32 	%r1986, %r1782, %r143;
	mul.lo.s32 	%r144, %r1986, %r1781;
	add.s32 	%r1987, %r1986, %r1782;
	mul.lo.s32 	%r145, %r1987, %r1781;
	add.s32 	%r146, %r142, %r1781;
	add.s32 	%r147, %r7438, 2;
	add.s32 	%r1988, %r1782, %r147;
	mul.lo.s32 	%r148, %r1988, %r1781;
	add.s32 	%r1989, %r1988, %r1782;
	mul.lo.s32 	%r149, %r1989, %r1781;
	mov.u32 	%r7441, 0;
	mov.u64 	%rd588, %rd122;

$L__BB0_72:
	ld.global.nc.u32 	%r1990, [%rd588];
	cvt.rn.f64.s32 	%fd1, %r1990;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r151, %r1990, %r7437;
	setp.lt.s32 	%p104, %r151, %r1781;
	or.b32  	%r1991, %r131, %r151;
	setp.gt.s32 	%p105, %r1991, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r131, %r1782;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1994, %r132, %r151;
	mul.wide.s32 	%rd123, %r1994, 4;
	add.s64 	%rd124, %rd7, %rd123;
	ld.global.f32 	%f110, [%rd124];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r7440, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f108;
  cvt.rn.f16.f32 high, %f108;
  mov.b32 %r7440, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1995, %r7441, %r130;
	mul.wide.s32 	%rd125, %r1995, 4;
	add.s64 	%rd126, %rd11, %rd125;
	st.global.u32 	[%rd126], %r7440;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1998, %r133, %r151;
	mul.wide.s32 	%rd127, %r1998, 4;
	add.s64 	%rd128, %rd7, %rd127;
	ld.global.f32 	%f119, [%rd128];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7442, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7442, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1999, %r7441, %r130;
	mul.wide.s32 	%rd129, %r1999, 4;
	add.s64 	%rd130, %rd11, %rd129;
	st.global.u32 	[%rd130], %r7442;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r2002, %r134, %r151;
	mul.wide.s32 	%rd131, %r2002, 4;
	add.s64 	%rd132, %rd7, %rd131;
	ld.global.f32 	%f127, [%rd132];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7444, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r2003, %r7441, %r130;
	mul.wide.s32 	%rd133, %r2003, 4;
	add.s64 	%rd134, %rd11, %rd133;
	st.global.u32 	[%rd134], %r7444;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_87:
	or.b32  	%r2004, %r136, %r151;
	setp.gt.s32 	%p111, %r2004, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7438, %r1782;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r2007, %r135, %r151;
	mul.wide.s32 	%rd135, %r2007, 4;
	add.s64 	%rd136, %rd7, %rd135;
	ld.global.f32 	%f134, [%rd136];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7446, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7446, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r2008, %r7441, %r130;
	mul.wide.s32 	%rd137, %r2008, 4;
	add.s64 	%rd138, %rd11, %rd137;
	st.global.u32 	[%rd138], %r7446;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r2011, %r137, %r151;
	mul.wide.s32 	%rd139, %r2011, 4;
	add.s64 	%rd140, %rd7, %rd139;
	ld.global.f32 	%f141, [%rd140];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r7448, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f139;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r2012, %r7441, %r130;
	mul.wide.s32 	%rd141, %r2012, 4;
	add.s64 	%rd142, %rd11, %rd141;
	st.global.u32 	[%rd142], %r7448;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r2015, %r138, %r151;
	mul.wide.s32 	%rd143, %r2015, 4;
	add.s64 	%rd144, %rd7, %rd143;
	ld.global.f32 	%f148, [%rd144];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r7450, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f146;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r2016, %r7441, %r130;
	mul.wide.s32 	%rd145, %r2016, 4;
	add.s64 	%rd146, %rd11, %rd145;
	st.global.u32 	[%rd146], %r7450;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_102:
	or.b32  	%r2017, %r7438, %r151;
	setp.gt.s32 	%p118, %r2017, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7438, %r1782;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r2020, %r141, %r151;
	mul.wide.s32 	%rd147, %r2020, 4;
	add.s64 	%rd148, %rd7, %rd147;
	ld.global.f32 	%f155, [%rd148];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r7452, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7452, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r2021, %r7441, %r130;
	mul.wide.s32 	%rd149, %r2021, 4;
	add.s64 	%rd150, %rd11, %rd149;
	st.global.u32 	[%rd150], %r7452;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r2024, %r139, %r151;
	mul.wide.s32 	%rd151, %r2024, 4;
	add.s64 	%rd152, %rd7, %rd151;
	ld.global.f32 	%f163, [%rd152];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r7454, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r2025, %r7441, %r130;
	mul.wide.s32 	%rd153, %r2025, 4;
	add.s64 	%rd154, %rd11, %rd153;
	st.global.u32 	[%rd154], %r7454;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r2028, %r140, %r151;
	mul.wide.s32 	%rd155, %r2028, 4;
	add.s64 	%rd156, %rd7, %rd155;
	ld.global.f32 	%f170, [%rd156];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r7456, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f168;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r2029, %r7441, %r130;
	mul.wide.s32 	%rd157, %r2029, 4;
	add.s64 	%rd158, %rd11, %rd157;
	st.global.u32 	[%rd158], %r7456;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_117:
	or.b32  	%r2030, %r143, %r151;
	setp.gt.s32 	%p125, %r2030, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r143, %r1782;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r2033, %r142, %r151;
	mul.wide.s32 	%rd159, %r2033, 4;
	add.s64 	%rd160, %rd7, %rd159;
	ld.global.f32 	%f177, [%rd160];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r7458, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f175;
  mov.b32 %r7458, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r2034, %r7441, %r130;
	mul.wide.s32 	%rd161, %r2034, 4;
	add.s64 	%rd162, %rd11, %rd161;
	st.global.u32 	[%rd162], %r7458;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r2037, %r144, %r151;
	mul.wide.s32 	%rd163, %r2037, 4;
	add.s64 	%rd164, %rd7, %rd163;
	ld.global.f32 	%f184, [%rd164];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r7460, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f182;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r2038, %r7441, %r130;
	mul.wide.s32 	%rd165, %r2038, 4;
	add.s64 	%rd166, %rd11, %rd165;
	st.global.u32 	[%rd166], %r7460;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r2041, %r145, %r151;
	mul.wide.s32 	%rd167, %r2041, 4;
	add.s64 	%rd168, %rd7, %rd167;
	ld.global.f32 	%f191, [%rd168];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r7462, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f189;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r2042, %r7441, %r130;
	mul.wide.s32 	%rd169, %r2042, 4;
	add.s64 	%rd170, %rd11, %rd169;
	st.global.u32 	[%rd170], %r7462;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_132:
	or.b32  	%r2043, %r147, %r151;
	setp.gt.s32 	%p132, %r2043, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r147, %r1782;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2046, %r146, %r151;
	mul.wide.s32 	%rd171, %r2046, 4;
	add.s64 	%rd172, %rd7, %rd171;
	ld.global.f32 	%f198, [%rd172];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r7464, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f196;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7464, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2047, %r7441, %r130;
	mul.wide.s32 	%rd173, %r2047, 4;
	add.s64 	%rd174, %rd11, %rd173;
	st.global.u32 	[%rd174], %r7464;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2050, %r148, %r151;
	mul.wide.s32 	%rd175, %r2050, 4;
	add.s64 	%rd176, %rd7, %rd175;
	ld.global.f32 	%f205, [%rd176];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r7466, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r7466, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2051, %r7441, %r130;
	mul.wide.s32 	%rd177, %r2051, 4;
	add.s64 	%rd178, %rd11, %rd177;
	st.global.u32 	[%rd178], %r7466;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2054, %r149, %r151;
	mul.wide.s32 	%rd179, %r2054, 4;
	add.s64 	%rd180, %rd7, %rd179;
	ld.global.f32 	%f212, [%rd180];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r7468, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7468, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2055, %r7441, %r130;
	mul.wide.s32 	%rd181, %r2055, 4;
	add.s64 	%rd182, %rd11, %rd181;
	st.global.u32 	[%rd182], %r7468;
	add.s32 	%r7441, %r7441, 1;

$L__BB0_147:
	add.s64 	%rd588, %rd588, 4;
	setp.ne.s64 	%p139, %rd588, %rd184;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7438, %r7438, %r48;
	setp.lt.s32 	%p140, %r7438, %r1782;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7437, %r7437, %r1808;
	setp.lt.s32 	%p141, %r7437, %r1781;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1785, 1;
	ld.param.u64 	%rd185, [%rd1+160];
	cvta.to.global.u64 	%rd14, %rd185;
	ld.param.u64 	%rd186, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd186;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r255, %r80, 1;
	shr.u32 	%r2103, %r1786, 31;
	add.s32 	%r2104, %r1786, %r2103;
	bfe.u32 	%r256, %r2104, 1, 1;
	mov.u64 	%rd206, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r255, %r1782;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7476, %r255;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2106, %r7476, 31;
	add.s32 	%r2107, %r7476, %r2106;
	shr.s32 	%r2108, %r2107, 1;
	mad.lo.s32 	%r2109, %r2108, %r1781, %r7470;
	shl.b32 	%r260, %r2109, 5;
	add.s32 	%r261, %r7476, -2;
	mul.lo.s32 	%r262, %r261, %r1781;
	add.s32 	%r2110, %r1782, %r261;
	mul.lo.s32 	%r263, %r2110, %r1781;
	add.s32 	%r264, %r262, %r1781;
	add.s32 	%r265, %r7476, -1;
	add.s32 	%r2111, %r1782, %r265;
	mul.lo.s32 	%r266, %r2111, %r1781;
	add.s32 	%r2112, %r1782, %r7476;
	mul.lo.s32 	%r267, %r2112, %r1781;
	mul.lo.s32 	%r268, %r7476, %r1781;
	add.s32 	%r269, %r268, %r1781;
	add.s32 	%r270, %r7476, 1;
	add.s32 	%r2113, %r1782, %r270;
	mul.lo.s32 	%r271, %r2113, %r1781;
	add.s32 	%r272, %r269, %r1781;
	add.s32 	%r273, %r7476, 2;
	add.s32 	%r2114, %r1782, %r273;
	mul.lo.s32 	%r274, %r2114, %r1781;
	mov.u32 	%r7480, 0;
	mov.u64 	%rd589, 24;
	mov.u64 	%rd590, %rd206;

$L__BB0_174:
	ld.global.nc.u32 	%r2115, [%rd590];
	cvt.rn.f64.s32 	%fd2, %r2115;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r276, %r2115, %r7470;
	setp.lt.s32 	%p154, %r276, %r1781;
	or.b32  	%r2116, %r261, %r276;
	setp.gt.s32 	%p155, %r2116, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r261, %r1782;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r256, 0;
	add.s32 	%r2118, %r262, %r276;
	shl.b32 	%r2119, %r2118, 1;
	mul.wide.s32 	%rd207, %r2119, 4;
	add.s64 	%rd208, %rd14, %rd207;
	ld.global.f32 	%f55, [%rd208];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f236;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f237;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r281, %r7480, %r260;
	mul.wide.s32 	%rd209, %r281, 4;
	add.s64 	%rd210, %rd15, %rd209;
	st.global.u32 	[%rd210], %r7478;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r256, 0;
	add.s32 	%r2123, %r263, %r276;
	shl.b32 	%r2124, %r2123, 1;
	mul.wide.s32 	%rd211, %r2124, 4;
	add.s64 	%rd212, %rd14, %rd211;
	ld.global.f32 	%f56, [%rd212];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f242;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f243;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2127, %r281, 1;
	mul.wide.s32 	%rd213, %r2127, 4;
	add.s64 	%rd214, %rd15, %rd213;
	st.global.u32 	[%rd214], %r7479;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r256, 0;
	add.s32 	%r2129, %r262, %r276;
	shl.b32 	%r2130, %r2129, 1;
	or.b32  	%r2131, %r2130, 1;
	mul.wide.s32 	%rd215, %r2131, 4;
	add.s64 	%rd216, %rd14, %rd215;
	ld.global.f32 	%f59, [%rd216];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f254;
  mov.b32 %r7481, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f250;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7481, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r292, %r7480, %r260;
	mul.wide.s32 	%rd217, %r292, 4;
	add.s64 	%rd218, %rd15, %rd217;
	st.global.u32 	[%rd218], %r7481;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r256, 0;
	add.s32 	%r2135, %r263, %r276;
	shl.b32 	%r2136, %r2135, 1;
	or.b32  	%r2137, %r2136, 1;
	mul.wide.s32 	%rd219, %r2137, 4;
	add.s64 	%rd220, %rd14, %rd219;
	ld.global.f32 	%f60, [%rd220];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f260;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f256;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2140, %r292, 1;
	mul.wide.s32 	%rd221, %r2140, 4;
	add.s64 	%rd222, %rd15, %rd221;
	st.global.u32 	[%rd222], %r7482;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_198:
	or.b32  	%r2141, %r265, %r276;
	setp.gt.s32 	%p164, %r2141, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7476, %r1782;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r256, 0;
	add.s32 	%r2143, %r264, %r276;
	shl.b32 	%r2144, %r2143, 1;
	mul.wide.s32 	%rd223, %r2144, 4;
	add.s64 	%rd224, %rd14, %rd223;
	ld.global.f32 	%f62, [%rd224];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7484, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f262;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r7484, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f263;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r303, %r7480, %r260;
	mul.wide.s32 	%rd225, %r303, 4;
	add.s64 	%rd226, %rd15, %rd225;
	st.global.u32 	[%rd226], %r7484;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r256, 0;
	add.s32 	%r2148, %r266, %r276;
	shl.b32 	%r2149, %r2148, 1;
	mul.wide.s32 	%rd227, %r2149, 4;
	add.s64 	%rd228, %rd14, %rd227;
	ld.global.f32 	%f63, [%rd228];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f268;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f269;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2152, %r303, 1;
	mul.wide.s32 	%rd229, %r2152, 4;
	add.s64 	%rd230, %rd15, %rd229;
	st.global.u32 	[%rd230], %r7485;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r256, 0;
	add.s32 	%r2154, %r264, %r276;
	shl.b32 	%r2155, %r2154, 1;
	or.b32  	%r2156, %r2155, 1;
	mul.wide.s32 	%rd231, %r2156, 4;
	add.s64 	%rd232, %rd14, %rd231;
	ld.global.f32 	%f65, [%rd232];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7487, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f274;
  cvt.rn.f16.f32 high, %f274;
  mov.b32 %r7487, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f275;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7487, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r314, %r7480, %r260;
	mul.wide.s32 	%rd233, %r314, 4;
	add.s64 	%rd234, %rd15, %rd233;
	st.global.u32 	[%rd234], %r7487;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r256, 0;
	add.s32 	%r2160, %r266, %r276;
	shl.b32 	%r2161, %r2160, 1;
	or.b32  	%r2162, %r2161, 1;
	mul.wide.s32 	%rd235, %r2162, 4;
	add.s64 	%rd236, %rd14, %rd235;
	ld.global.f32 	%f66, [%rd236];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f280;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2165, %r314, 1;
	mul.wide.s32 	%rd237, %r2165, 4;
	add.s64 	%rd238, %rd15, %rd237;
	st.global.u32 	[%rd238], %r7488;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_222:
	or.b32  	%r2166, %r7476, %r276;
	setp.gt.s32 	%p174, %r2166, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7476, %r1782;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r256, 0;
	add.s32 	%r2168, %r268, %r276;
	shl.b32 	%r2169, %r2168, 1;
	mul.wide.s32 	%rd239, %r2169, 4;
	add.s64 	%rd240, %rd14, %rd239;
	ld.global.f32 	%f68, [%rd240];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7490, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f286;
  cvt.rn.f16.f32 high, %f286;
  mov.b32 %r7490, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f287;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7490, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r325, %r7480, %r260;
	mul.wide.s32 	%rd241, %r325, 4;
	add.s64 	%rd242, %rd15, %rd241;
	st.global.u32 	[%rd242], %r7490;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r256, 0;
	add.s32 	%r2173, %r267, %r276;
	shl.b32 	%r2174, %r2173, 1;
	mul.wide.s32 	%rd243, %r2174, 4;
	add.s64 	%rd244, %rd14, %rd243;
	ld.global.f32 	%f69, [%rd244];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f292;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2177, %r325, 1;
	mul.wide.s32 	%rd245, %r2177, 4;
	add.s64 	%rd246, %rd15, %rd245;
	st.global.u32 	[%rd246], %r7491;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r256, 0;
	add.s32 	%r2179, %r268, %r276;
	shl.b32 	%r2180, %r2179, 1;
	or.b32  	%r2181, %r2180, 1;
	mul.wide.s32 	%rd247, %r2181, 4;
	add.s64 	%rd248, %rd14, %rd247;
	ld.global.f32 	%f70, [%rd248];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7493, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f299;
  cvt.rn.f16.f32 high, %f299;
  mov.b32 %r7493, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f300;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7493, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r336, %r7480, %r260;
	mul.wide.s32 	%rd249, %r336, 4;
	add.s64 	%rd250, %rd15, %rd249;
	st.global.u32 	[%rd250], %r7493;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r256, 0;
	add.s32 	%r2185, %r267, %r276;
	shl.b32 	%r2186, %r2185, 1;
	or.b32  	%r2187, %r2186, 1;
	mul.wide.s32 	%rd251, %r2187, 4;
	add.s64 	%rd252, %rd14, %rd251;
	ld.global.f32 	%f71, [%rd252];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2190, %r336, 1;
	mul.wide.s32 	%rd253, %r2190, 4;
	add.s64 	%rd254, %rd15, %rd253;
	st.global.u32 	[%rd254], %r7494;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_246:
	or.b32  	%r2191, %r270, %r276;
	setp.gt.s32 	%p184, %r2191, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r270, %r1782;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r256, 0;
	add.s32 	%r2193, %r269, %r276;
	shl.b32 	%r2194, %r2193, 1;
	mul.wide.s32 	%rd255, %r2194, 4;
	add.s64 	%rd256, %rd14, %rd255;
	ld.global.f32 	%f72, [%rd256];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f311;
  cvt.rn.f16.f32 high, %f311;
  mov.b32 %r7496, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f312;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7496, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r347, %r7480, %r260;
	mul.wide.s32 	%rd257, %r347, 4;
	add.s64 	%rd258, %rd15, %rd257;
	st.global.u32 	[%rd258], %r7496;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r256, 0;
	add.s32 	%r2198, %r271, %r276;
	shl.b32 	%r2199, %r2198, 1;
	mul.wide.s32 	%rd259, %r2199, 4;
	add.s64 	%rd260, %rd14, %rd259;
	ld.global.f32 	%f73, [%rd260];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f73;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f73;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2202, %r347, 1;
	mul.wide.s32 	%rd261, %r2202, 4;
	add.s64 	%rd262, %rd15, %rd261;
	st.global.u32 	[%rd262], %r7497;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r256, 0;
	add.s32 	%r2204, %r269, %r276;
	shl.b32 	%r2205, %r2204, 1;
	or.b32  	%r2206, %r2205, 1;
	mul.wide.s32 	%rd263, %r2206, 4;
	add.s64 	%rd264, %rd14, %rd263;
	ld.global.f32 	%f74, [%rd264];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7499, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f323;
  cvt.rn.f16.f32 high, %f323;
  mov.b32 %r7499, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f324;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r358, %r7480, %r260;
	mul.wide.s32 	%rd265, %r358, 4;
	add.s64 	%rd266, %rd15, %rd265;
	st.global.u32 	[%rd266], %r7499;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r256, 0;
	add.s32 	%r2210, %r271, %r276;
	shl.b32 	%r2211, %r2210, 1;
	or.b32  	%r2212, %r2211, 1;
	mul.wide.s32 	%rd267, %r2212, 4;
	add.s64 	%rd268, %rd14, %rd267;
	ld.global.f32 	%f75, [%rd268];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2215, %r358, 1;
	mul.wide.s32 	%rd269, %r2215, 4;
	add.s64 	%rd270, %rd15, %rd269;
	st.global.u32 	[%rd270], %r7500;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_270:
	or.b32  	%r2216, %r273, %r276;
	setp.gt.s32 	%p194, %r2216, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r273, %r1782;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r256, 0;
	add.s32 	%r2218, %r272, %r276;
	shl.b32 	%r2219, %r2218, 1;
	mul.wide.s32 	%rd271, %r2219, 4;
	add.s64 	%rd272, %rd14, %rd271;
	ld.global.f32 	%f76, [%rd272];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7502, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f335;
  cvt.rn.f16.f32 high, %f335;
  mov.b32 %r7502, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r369, %r7480, %r260;
	mul.wide.s32 	%rd273, %r369, 4;
	add.s64 	%rd274, %rd15, %rd273;
	st.global.u32 	[%rd274], %r7502;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r256, 0;
	add.s32 	%r2223, %r274, %r276;
	shl.b32 	%r2224, %r2223, 1;
	mul.wide.s32 	%rd275, %r2224, 4;
	add.s64 	%rd276, %rd14, %rd275;
	ld.global.f32 	%f77, [%rd276];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f77;
  cvt.rn.f16.f32 high, %f345;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f341;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f77;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2227, %r369, 1;
	mul.wide.s32 	%rd277, %r2227, 4;
	add.s64 	%rd278, %rd15, %rd277;
	st.global.u32 	[%rd278], %r7503;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r256, 0;
	add.s32 	%r2229, %r272, %r276;
	shl.b32 	%r2230, %r2229, 1;
	or.b32  	%r2231, %r2230, 1;
	mul.wide.s32 	%rd279, %r2231, 4;
	add.s64 	%rd280, %rd14, %rd279;
	ld.global.f32 	%f78, [%rd280];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f351;
  mov.b32 %r7505, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7505, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r380, %r7480, %r260;
	mul.wide.s32 	%rd281, %r380, 4;
	add.s64 	%rd282, %rd15, %rd281;
	st.global.u32 	[%rd282], %r7505;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r256, 0;
	add.s32 	%r2235, %r274, %r276;
	shl.b32 	%r2236, %r2235, 1;
	or.b32  	%r2237, %r2236, 1;
	mul.wide.s32 	%rd283, %r2237, 4;
	add.s64 	%rd284, %rd14, %rd283;
	ld.global.f32 	%f79, [%rd284];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7506, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7506, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2240, %r380, 1;
	mul.wide.s32 	%rd285, %r2240, 4;
	add.s64 	%rd286, %rd15, %rd285;
	st.global.u32 	[%rd286], %r7506;
	add.s32 	%r7480, %r7480, 2;

$L__BB0_294:
	add.s64 	%rd590, %rd590, 4;
	add.s64 	%rd589, %rd589, -4;
	setp.ne.s64 	%p204, %rd589, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7476, %r7476, %r48;
	setp.lt.s32 	%p205, %r7476, %r1782;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7470, %r7470, %r1808;
	setp.lt.s32 	%p206, %r7470, %r1781;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r229, %r79;
	mov.u32 	%r2056, 31;
	sub.s32 	%r2057, %r2056, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2058, %r46, %r2057, %p144;
	shl.b32 	%r2059, %r2058, 2;
	mov.u32 	%r2060, 2;
	sub.s32 	%r230, %r2059, %r1784;
	shl.b32 	%r2061, %r1783, 2;
	mov.u32 	%r2062, 128;
	sub.s32 	%r231, %r2062, %r2061;
	sub.s32 	%r2063, %r2060, %r1784;
	add.s32 	%r232, %r2063, %r2059;
	add.s32 	%r233, %r1781, -1;
	add.s32 	%r234, %r230, 1;
	add.s32 	%r235, %r232, 1;
	rem.s32 	%r2088, %r234, %r231;
	add.s32 	%r2089, %r2088, %r231;
	rem.s32 	%r246, %r2089, %r231;
	rem.s32 	%r2090, %r235, %r231;
	add.s32 	%r2091, %r2090, %r231;
	rem.s32 	%r247, %r2091, %r231;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r229;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r237, %r7470, 1;
	rem.s32 	%r2064, %r230, %r231;
	add.s32 	%r2065, %r2064, %r231;
	rem.s32 	%r238, %r2065, %r231;
	rem.s32 	%r2066, %r232, %r231;
	add.s32 	%r2067, %r2066, %r231;
	rem.s32 	%r239, %r2067, %r231;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2070, %r237, %r231;
	add.s32 	%r2071, %r2070, %r238;
	mul.wide.s32 	%rd187, %r2071, 4;
	add.s64 	%rd188, %rd14, %rd187;
	ld.global.f32 	%f218, [%rd188];
	add.s32 	%r2072, %r2070, %r239;
	mul.wide.s32 	%rd189, %r2072, 4;
	add.s64 	%rd190, %rd14, %rd189;
	ld.global.f32 	%f219, [%rd190];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f218;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r7471, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f217;
  mov.b32 %r7471, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2073, %r7470, 5;
	add.s32 	%r2074, %r2073, %r46;
	shl.b32 	%r2075, %r2074, 2;
	mul.wide.s32 	%rd191, %r2075, 4;
	add.s64 	%rd16, %rd15, %rd191;
	st.global.u32 	[%rd16], %r7471;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2078, %r237, 1;
	mul.lo.s32 	%r2079, %r2078, %r231;
	add.s32 	%r2080, %r2079, %r238;
	mul.wide.s32 	%rd192, %r2080, 4;
	add.s64 	%rd193, %rd14, %rd192;
	ld.global.f32 	%f222, [%rd193];
	add.s32 	%r2081, %r2079, %r239;
	mul.wide.s32 	%rd194, %r2081, 4;
	add.s64 	%rd195, %rd14, %rd194;
	ld.global.f32 	%f223, [%rd195];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2082, %r233, %r7470;
	rem.s32 	%r2083, %r2082, %r1781;
	shl.b32 	%r2084, %r2083, 5;
	add.s32 	%r2085, %r2084, %r46;
	shl.b32 	%r2086, %r2085, 2;
	or.b32  	%r2087, %r2086, 2;
	mul.wide.s32 	%rd196, %r2087, 4;
	add.s64 	%rd17, %rd15, %rd196;
	st.global.u32 	[%rd17], %r7472;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2094, %r237, %r231;
	add.s32 	%r2095, %r2094, %r246;
	mul.wide.s32 	%rd197, %r2095, 4;
	add.s64 	%rd198, %rd14, %rd197;
	ld.global.f32 	%f226, [%rd198];
	add.s32 	%r2096, %r2094, %r247;
	mul.wide.s32 	%rd199, %r2096, 4;
	add.s64 	%rd200, %rd14, %rd199;
	ld.global.f32 	%f227, [%rd200];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f226;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7473, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f225;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r7473, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd16+4], %r7473;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2099, %r237, 1;
	mul.lo.s32 	%r2100, %r2099, %r231;
	add.s32 	%r2101, %r2100, %r246;
	mul.wide.s32 	%rd201, %r2101, 4;
	add.s64 	%rd202, %rd14, %rd201;
	ld.global.f32 	%f230, [%rd202];
	add.s32 	%r2102, %r2100, %r247;
	mul.wide.s32 	%rd203, %r2102, 4;
	add.s64 	%rd204, %rd14, %rd203;
	ld.global.f32 	%f231, [%rd204];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7474, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd17+4], %r7474;

$L__BB0_167:
	add.s32 	%r7470, %r7470, %r1808;
	setp.lt.s32 	%p150, %r7470, %r1781;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2242, %r1776, -1;
	mad.lo.s32 	%r2243, %r1777, 576, 128;
	mul.lo.s32 	%r2244, %r2243, %r2242;
	add.s32 	%r2245, %r70, -64;
	add.s32 	%r2246, %r2245, %r70;
	add.s32 	%r2247, %r1777, -1;
	mad.lo.s32 	%r2248, %r2246, %r2247, %r2244;
	mul.lo.s32 	%r2249, %r2242, %r1777;
	mul.lo.s32 	%r2250, %r2249, 320;
	mad.lo.s32 	%r2251, %r2245, %r2247, %r2250;
	add.s32 	%r389, %r2251, %r2248;
	setp.lt.s32 	%p207, %r389, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7685, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7510, 0;
	mov.u32 	%r7508, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7508], %r7685;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2254, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7508+4], %r2254;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2255, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7508+8], %r2255;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2256, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7508+12], %r2256;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7685, {low,high};}

	// end inline asm
	add.s32 	%r7508, %r7508, 16;
	add.s32 	%r7510, %r7510, 4;
	setp.lt.s32 	%p208, %r7510, %r389;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7686, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r2259, {low,high};}

	// end inline asm
	ld.param.u64 	%rd287, [%rd1+176];
	cvta.to.global.u64 	%rd22, %rd287;
	mov.u32 	%r2260, 31;
	sub.s32 	%r2261, %r2260, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2262, %r46, %r2261, %p209;
	shl.b32 	%r2263, %r2262, 2;
	sub.s32 	%r400, %r2263, %r1784;
	shl.b32 	%r2264, %r1783, 2;
	mov.u32 	%r2265, 128;
	sub.s32 	%r401, %r2265, %r2264;
	rem.s32 	%r2266, %r400, %r401;
	add.s32 	%r2267, %r2266, %r401;
	rem.s32 	%r402, %r2267, %r401;
	add.s32 	%r2268, %r400, 2;
	rem.s32 	%r2269, %r2268, %r401;
	add.s32 	%r2270, %r2269, %r401;
	rem.s32 	%r403, %r2270, %r401;
	mul.lo.s32 	%r2271, %r402, 6;
	mul.lo.s32 	%r2272, %r403, 6;
	mul.wide.s32 	%rd288, %r2271, 4;
	add.s64 	%rd23, %rd22, %rd288;
	mul.wide.s32 	%rd289, %r2272, 4;
	add.s64 	%rd24, %rd22, %rd289;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7512, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd23];
	ld.global.f32 	%f375, [%rd23+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd24+8];
	ld.global.f32 	%f377, [%rd24];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd23+4];
	ld.global.f32 	%f383, [%rd24+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7513, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd23];
	ld.global.f32 	%f381, [%rd24];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7514, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd23+20];
	ld.global.f32 	%f387, [%rd23+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd24+20];
	ld.global.f32 	%f389, [%rd24+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7514, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd23+16];
	ld.global.f32 	%f395, [%rd24+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd23+12];
	ld.global.f32 	%f393, [%rd24+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7515, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2281, %r400, 1;
	rem.s32 	%r2282, %r2281, %r401;
	add.s32 	%r2283, %r2282, %r401;
	rem.s32 	%r416, %r2283, %r401;
	add.s32 	%r2284, %r400, 3;
	rem.s32 	%r2285, %r2284, %r401;
	add.s32 	%r2286, %r2285, %r401;
	rem.s32 	%r417, %r2286, %r401;
	mul.lo.s32 	%r2287, %r416, 6;
	mul.lo.s32 	%r2288, %r417, 6;
	mul.wide.s32 	%rd290, %r2287, 4;
	add.s64 	%rd25, %rd22, %rd290;
	mul.wide.s32 	%rd291, %r2288, 4;
	add.s64 	%rd26, %rd22, %rd291;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7516, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd25];
	ld.global.f32 	%f399, [%rd25+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd26+8];
	ld.global.f32 	%f401, [%rd26];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd25+4];
	ld.global.f32 	%f407, [%rd26+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd25];
	ld.global.f32 	%f405, [%rd26];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7518, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd25+20];
	ld.global.f32 	%f411, [%rd25+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd26+20];
	ld.global.f32 	%f413, [%rd26+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f408;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd25+16];
	ld.global.f32 	%f419, [%rd26+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f418;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7519, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd25+12];
	ld.global.f32 	%f417, [%rd26+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f416;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2297, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd292, %r2297;
	// begin inline asm
	mov.u32 %r2298, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd293, %r2298;
	bfi.b64 	%rd27, %rd293, %rd292, 32, 32;
	setp.ne.s64 	%p218, %rd27, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	mov.u32 	%r2299, %nctaid.x;
	mov.u32 	%r2300, %nctaid.y;
	mul.lo.s32 	%r2301, %r2299, %r2300;
	mov.u32 	%r2302, %nctaid.z;
	mul.lo.s32 	%r430, %r2301, %r2302;
	neg.s32 	%r2303, %r42;
	add.s32 	%r2304, %r46, %r41;
	setp.ne.s32 	%p219, %r2304, %r2303;
	mov.u32 	%r2305, %ctaid.x;
	add.s32 	%r431, %r2305, %r43;
	neg.s32 	%r432, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r431, %r432;
	mov.u32 	%r2306, -2147483647;
	sub.s32 	%r2307, %r2306, %r430;
	selp.b32 	%r2308, %r2307, 1, %p220;
	membar.gl;
	add.s64 	%rd294, %rd27, 4;
	atom.add.u32 	%r433, [%rd294], %r2308;

$L__BB0_328:
	ld.volatile.u32 	%r2309, [%rd27+4];
	xor.b32  	%r2310, %r2309, %r433;
	setp.gt.s32 	%p221, %r2310, -1;
	@%p221 bra 	$L__BB0_328;

	membar.gl;

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_958;

	shr.s32 	%r2324, %r1786, 31;
	shr.u32 	%r2325, %r2324, 30;
	add.s32 	%r2326, %r1786, %r2325;
	shr.s32 	%r434, %r2326, 2;
	add.s32 	%r2327, %r46, 31;
	shr.s32 	%r2328, %r2327, 31;
	shr.u32 	%r2329, %r2328, 27;
	add.s32 	%r2330, %r2327, %r2329;
	and.b32  	%r2331, %r2330, -32;
	sub.s32 	%r2332, %r2327, %r2331;
	add.s32 	%r2333, %r46, 33;
	shr.s32 	%r2334, %r2333, 31;
	shr.u32 	%r2335, %r2334, 27;
	add.s32 	%r2336, %r2333, %r2335;
	and.b32  	%r2337, %r2336, -32;
	sub.s32 	%r2338, %r2333, %r2337;
	shr.u32 	%r2339, %r1786, 31;
	add.s32 	%r2340, %r1786, %r2339;
	and.b32  	%r2341, %r2340, -2;
	sub.s32 	%r435, %r1786, %r2341;
	setp.lt.s32 	%p223, %r46, 32;
	selp.b32 	%r436, %r2332, %r46, %p223;
	setp.lt.s32 	%p224, %r402, %r1795;
	setp.ge.s32 	%p225, %r402, %r1794;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r416, %r1795;
	setp.ge.s32 	%p227, %r416, %r1794;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r403, %r1795;
	setp.ge.s32 	%p229, %r403, %r1794;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r417, %r1795;
	setp.ge.s32 	%p231, %r417, %r1794;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r437, %r2338, %r46, %p223;
	mov.u32 	%r2323, 0;
	// begin inline asm
	{mov.u32 %r2342, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2668, %r2342, 8;
	add.s32 	%r2669, %r2668, -8192;
	or.b32  	%r2346, %r2669, 31;
	mul.wide.s32 	%rd303, %r46, 16;
	mul.wide.s32 	%rd305, %r46, 8;
	mov.u32 	%r7797, %r2259;
	mov.u32 	%r7827, %r2259;
	mov.u32 	%r7798, %r2259;
	mov.u32 	%r7828, %r2259;
	mov.u32 	%r7799, %r2259;
	mov.u32 	%r7525, %r2259;
	mov.u32 	%r7526, %r2259;
	mov.u32 	%r7840, %r2259;
	mov.u32 	%r7829, %r2259;
	mov.u32 	%r7830, %r2259;
	mov.u32 	%r7800, %r2259;
	mov.u32 	%r7801, %r2259;
	mov.u32 	%r7802, %r2259;
	mov.u32 	%r7533, %r2259;
	mov.u32 	%r7534, %r2259;
	mov.u32 	%r7839, %r2259;
	mov.u32 	%r7831, %r2259;
	mov.u32 	%r7832, %r2259;
	mov.u32 	%r7809, %r2259;
	mov.u32 	%r7539, %r2259;
	mov.u32 	%r7540, %r2259;
	mov.u32 	%r7541, %r2259;
	mov.u32 	%r7850, %r2259;
	mov.u32 	%r7836, %r2259;
	mov.u32 	%r7841, %r2259;
	mov.u32 	%r7810, %r2259;
	mov.u32 	%r7546, %r2259;
	mov.u32 	%r7547, %r2259;
	mov.u32 	%r7548, %r2259;
	mov.u32 	%r7844, %r2259;
	mov.u32 	%r7833, %r2259;
	mov.u32 	%r7842, %r2259;
	mov.u32 	%r7811, %r2259;
	mov.u32 	%r7812, %r2259;
	mov.u32 	%r7554, %r2259;
	mov.u32 	%r7845, %r2259;
	mov.u32 	%r7846, %r2259;
	mov.u32 	%r7557, %r2259;
	mov.u32 	%r7813, %r2259;
	mov.u32 	%r7814, %r2259;
	mov.u32 	%r7815, %r2259;
	mov.u32 	%r7561, %r2259;
	mov.u32 	%r7847, %r2259;
	mov.u32 	%r7848, %r2259;
	mov.u32 	%r7816, %r2259;
	mov.u32 	%r7817, %r2259;
	mov.u32 	%r7818, %r2259;
	mov.u32 	%r7803, %r2259;
	mov.u32 	%r7568, %r2259;
	mov.u32 	%r7834, %r2259;
	mov.u32 	%r7835, %r2259;
	mov.u32 	%r7804, %r2259;
	mov.u32 	%r7572, %r2259;
	mov.u32 	%r7837, %r2259;
	mov.u32 	%r7838, %r2259;
	mov.u32 	%r7867, %r2259;
	mov.u32 	%r7576, %r2259;
	mov.u32 	%r7577, %r2259;
	mov.u32 	%r7578, %r2259;
	mov.u32 	%r7723, %r2259;
	mov.u32 	%r7868, %r2259;
	mov.u32 	%r7581, %r2259;
	mov.u32 	%r7582, %r2259;
	mov.u32 	%r7583, %r2259;
	mov.u32 	%r7724, %r2259;
	mov.u32 	%r7869, %r2259;
	mov.u32 	%r7870, %r2259;
	mov.u32 	%r7587, %r2259;
	mov.u32 	%r7588, %r2259;
	mov.u32 	%r7589, %r2259;
	mov.u32 	%r7725, %r2259;
	mov.u32 	%r7591, %r2259;
	mov.u32 	%r7871, %r2259;
	mov.u32 	%r7872, %r2259;
	mov.u32 	%r7594, %r2259;
	mov.u32 	%r7595, %r2259;
	mov.u32 	%r7596, %r2259;
	mov.u32 	%r7727, %r2259;
	mov.u32 	%r7598, %r2259;
	mov.u32 	%r7599, %r2259;
	mov.u32 	%r7600, %r2259;
	mov.u32 	%r7601, %r2259;
	mov.u32 	%r7851, %r2259;
	mov.u32 	%r7603, %r2259;
	mov.u32 	%r7604, %r2259;
	mov.u32 	%r7605, %r2259;
	mov.u32 	%r7606, %r2259;
	mov.u32 	%r7852, %r2259;
	mov.u32 	%r7819, %r2259;
	mov.u32 	%r7820, %r2259;
	mov.u32 	%r7821, %r2259;
	mov.u32 	%r7822, %r2259;
	mov.u32 	%r7612, %r2259;
	mov.u32 	%r7613, %r2259;
	mov.u32 	%r7876, %r2259;
	mov.u32 	%r7615, %r2259;
	mov.u32 	%r7616, %r2259;
	mov.u32 	%r7731, %r2259;
	mov.u32 	%r7618, %r2259;
	mov.u32 	%r7619, %r2259;
	mov.u32 	%r7620, %r2259;
	mov.u32 	%r7621, %r2259;
	mov.u32 	%r7878, %r2259;
	mov.u32 	%r7623, %r2259;
	mov.u32 	%r7624, %r2259;
	mov.u32 	%r7734, %r2259;
	mov.u32 	%r7626, %r2259;
	mov.u32 	%r7627, %r2259;
	mov.u32 	%r7628, %r2259;
	mov.u32 	%r7629, %r2259;
	mov.u32 	%r7879, %r2259;
	mov.u32 	%r7631, %r2259;
	mov.u32 	%r7632, %r2259;
	mov.u32 	%r7633, %r2259;
	mov.u32 	%r7737, %r2259;
	mov.u32 	%r7635, %r2259;
	mov.u32 	%r7636, %r2259;
	mov.u32 	%r7637, %r2259;
	mov.u32 	%r7638, %r2259;
	mov.u32 	%r7880, %r2259;
	mov.u32 	%r7640, %r2259;
	mov.u32 	%r7641, %r2259;
	mov.u32 	%r7642, %r2259;
	mov.u32 	%r7740, %r2259;
	mov.u32 	%r7644, %r2259;
	mov.u32 	%r7645, %r2259;
	mov.u32 	%r7646, %r2259;
	mov.u32 	%r7647, %r2259;
	mov.u32 	%r7648, %r2259;
	mov.u32 	%r7649, %r2259;
	mov.u32 	%r7650, %r2259;
	mov.u32 	%r7651, %r2259;
	mov.u32 	%r7652, %r2259;
	mov.u32 	%r7653, %r2259;
	mov.u32 	%r7654, %r2259;
	mov.u32 	%r7655, %r2259;
	mov.u32 	%r7656, %r2259;
	mov.u32 	%r7657, %r2259;
	mov.u32 	%r7658, %r2259;
	mov.u32 	%r7659, %r2259;
	mov.u32 	%r7660, %r2259;
	mov.u32 	%r7661, %r2259;
	mov.u32 	%r7662, %r2259;
	mov.u32 	%r7663, %r2259;
	mov.u32 	%r7664, %r2259;
	mov.u32 	%r7665, %r2259;
	mov.u32 	%r7666, %r2323;
	mov.u32 	%r7667, %r2323;
	mov.u32 	%r7668, %r2323;
	mov.u32 	%r7669, %r2323;
	mov.u32 	%r7670, %r2323;
	mov.u32 	%r7671, %r2323;
	mov.u32 	%r7672, %r2323;
	mov.u32 	%r7673, %r2323;
	mov.u32 	%r7674, %r2323;
	mov.u32 	%r7675, %r2323;
	mov.u32 	%r7676, %r2323;
	mov.u32 	%r7677, %r2323;
	mov.u32 	%r7805, %r2259;
	mov.u32 	%r7806, %r2259;
	mov.u32 	%r7807, %r2259;
	mov.u32 	%r7808, %r2259;
	mov.u32 	%r7823, %r2259;
	mov.u32 	%r7824, %r2259;
	mov.u32 	%r7684, %r2323;

$L__BB0_332:
	mov.u32 	%r575, %r7880;
	mov.u32 	%r574, %r7638;
	mov.u32 	%r566, %r7879;
	mov.u32 	%r565, %r7629;
	mov.u32 	%r558, %r7878;
	mov.u32 	%r550, %r7876;
	mov.u32 	%r7638, %r7872;
	mov.u32 	%r520, %r7871;
	mov.u32 	%r7629, %r7870;
	mov.u32 	%r512, %r7869;
	mov.u32 	%r505, %r7868;
	mov.u32 	%r498, %r7867;
	sub.s32 	%r7409, %r1781, %r48;
	mov.u32 	%r2357, 1;
	not.b32 	%r2631, %r43;
	mov.u32 	%r2623, -1;
	add.s32 	%r2632, %r1778, %r2631;
	mul.lo.s32 	%r2633, %r2632, %r1780;
	add.s32 	%r2634, %r7684, %r2633;
	not.b32 	%r2636, %r44;
	add.s32 	%r2637, %r1779, %r2636;
	mul.lo.s32 	%r2638, %r2637, %r1780;
	add.s32 	%r2639, %r7684, %r2638;
	add.s32 	%r2640, %r2633, %r2638;
	add.s32 	%r2641, %r2640, %r1781;
	not.b32 	%r2642, %r41;
	add.s32 	%r2643, %r1776, %r2642;
	mad.lo.s32 	%r2644, %r2632, %r1776, %r2643;
	not.b32 	%r2645, %r42;
	add.s32 	%r2646, %r1777, %r2645;
	mad.lo.s32 	%r2647, %r2637, %r1777, %r2646;
	add.s32 	%r2648, %r2644, %r2647;
	shl.b32 	%r2649, %r2648, 1;
	add.s32 	%r2650, %r2641, %r2649;
	add.s32 	%r2651, %r7684, %r2650;
	add.s32 	%r2652, %r7684, %r2640;
	div.s32 	%r2653, %r2651, %r1781;
	neg.s32 	%r2654, %r1781;
	sub.s32 	%r2657, %r48, %r1781;
	sub.s32 	%r2658, %r2644, %r2647;
	shl.b32 	%r2659, %r2658, 1;
	add.s32 	%r2660, %r2659, %r1782;
	mad.lo.s32 	%r2661, %r2653, %r48, %r2660;
	mad.lo.s32 	%r2662, %r2653, %r2657, %r2652;
	div.s32 	%r2663, %r2661, %r1782;
	mul.lo.s32 	%r2664, %r2663, %r1782;
	sub.s32 	%r2667, %r1809, %r1782;
	mov.u32 	%r2441, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2343,%r7686,%r2323,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2349, %r7513, %r2343, %p28;
	// begin inline asm
	{mul.f16x2 %r7770,%r2349,%r7665;
}
	// end inline asm
	selp.b32 	%r2352, %r7517, %r2343, %p28;
	// begin inline asm
	{mul.f16x2 %r7768,%r2352,%r7660;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2355,%r7686,%r2357,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2361, %r7513, %r2355, %p28;
	// begin inline asm
	{mul.f16x2 %r7769,%r2361,%r7664;
}
	// end inline asm
	selp.b32 	%r2364, %r7517, %r2355, %p28;
	// begin inline asm
	{mul.f16x2 %r7767,%r2364,%r7659;
}
	// end inline asm
	mov.u32 	%r2369, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2367,%r7686,%r2369,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2373, %r7513, %r2367, %p28;
	// begin inline asm
	{mul.f16x2 %r7766,%r2373,%r7655;
}
	// end inline asm
	selp.b32 	%r2376, %r7517, %r2367, %p28;
	// begin inline asm
	{mul.f16x2 %r7765,%r2376,%r7653;
}
	// end inline asm
	mov.u32 	%r2381, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2379,%r7686,%r2381,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2385, %r7513, %r2379, %p28;
	// begin inline asm
	{mul.f16x2 %r7764,%r2385,%r7852;
}
	// end inline asm
	selp.b32 	%r2388, %r7517, %r2379, %p28;
	// begin inline asm
	{mul.f16x2 %r7762,%r2388,%r7851;
}
	// end inline asm
	mov.u32 	%r2393, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2391,%r7686,%r2393,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2397, %r7513, %r2391, %p28;
	// begin inline asm
	{mul.f16x2 %r7763,%r2397,%r7651;
}
	// end inline asm
	selp.b32 	%r2400, %r7517, %r2391, %p28;
	// begin inline asm
	{mul.f16x2 %r7761,%r2400,%r7648;
}
	// end inline asm
	mov.u32 	%r2405, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2403,%r7686,%r2405,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2409, %r7513, %r2403, %p28;
	// begin inline asm
	{mul.f16x2 %r7760,%r2409,%r7645;
}
	// end inline asm
	selp.b32 	%r2412, %r7517, %r2403, %p28;
	// begin inline asm
	{mul.f16x2 %r7757,%r2412,%r7636;
}
	// end inline asm
	mov.u32 	%r2417, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2415,%r7686,%r2417,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2421, %r7513, %r2415, %p28;
	// begin inline asm
	{mul.f16x2 %r7759,%r2421,%r7644;
}
	// end inline asm
	selp.b32 	%r2424, %r7517, %r2415, %p28;
	// begin inline asm
	{mul.f16x2 %r7756,%r2424,%r7635;
}
	// end inline asm
	mov.u32 	%r2429, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2427,%r7686,%r2429,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2433, %r7513, %r2427, %p28;
	// begin inline asm
	{mul.f16x2 %r7758,%r2433,%r7740;
}
	// end inline asm
	selp.b32 	%r2436, %r7517, %r2427, %p28;
	// begin inline asm
	{mul.f16x2 %r7755,%r2436,%r7737;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2439,%r7686,%r2441,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2445, %r7513, %r2439, %p28;
	// begin inline asm
	{mul.f16x2 %r7754,%r2445,%r7627;
}
	// end inline asm
	selp.b32 	%r2448, %r7517, %r2439, %p28;
	// begin inline asm
	{mul.f16x2 %r7751,%r2448,%r7619;
}
	// end inline asm
	mov.u32 	%r2453, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2451,%r7686,%r2453,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2457, %r7513, %r2451, %p28;
	// begin inline asm
	{mul.f16x2 %r7753,%r2457,%r7626;
}
	// end inline asm
	selp.b32 	%r2460, %r7517, %r2451, %p28;
	// begin inline asm
	{mul.f16x2 %r7750,%r2460,%r7618;
}
	// end inline asm
	mov.u32 	%r2465, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2463,%r7686,%r2465,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2469, %r7513, %r2463, %p28;
	// begin inline asm
	{mul.f16x2 %r7752,%r2469,%r7734;
}
	// end inline asm
	selp.b32 	%r2472, %r7517, %r2463, %p28;
	// begin inline asm
	{mul.f16x2 %r7749,%r2472,%r7731;
}
	// end inline asm
	mov.u32 	%r2477, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2475,%r7686,%r2477,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2481, %r7513, %r2475, %p28;
	// begin inline asm
	{mul.f16x2 %r7748,%r2481,%r7838;
}
	// end inline asm
	selp.b32 	%r2484, %r7517, %r2475, %p28;
	// begin inline asm
	{mul.f16x2 %r7747,%r2484,%r7835;
}
	// end inline asm
	mov.u32 	%r2489, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2487,%r7686,%r2489,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2493, %r7513, %r2487, %p28;
	// begin inline asm
	{mul.f16x2 %r7746,%r2493,%r7848;
}
	// end inline asm
	selp.b32 	%r2496, %r7517, %r2487, %p28;
	// begin inline asm
	{mul.f16x2 %r7744,%r2496,%r7846;
}
	// end inline asm
	mov.u32 	%r2501, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2499,%r7686,%r2501,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2505, %r7513, %r2499, %p28;
	// begin inline asm
	{mul.f16x2 %r7745,%r2505,%r7847;
}
	// end inline asm
	selp.b32 	%r2508, %r7517, %r2499, %p28;
	// begin inline asm
	{mul.f16x2 %r7743,%r2508,%r7845;
}
	// end inline asm
	mov.u32 	%r2513, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2511,%r7686,%r2513,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2517, %r7513, %r2511, %p28;
	// begin inline asm
	{mul.f16x2 %r7742,%r2517,%r7842;
}
	// end inline asm
	selp.b32 	%r2520, %r7517, %r2511, %p28;
	// begin inline asm
	{mul.f16x2 %r7739,%r2520,%r7841;
}
	// end inline asm
	mov.u32 	%r2525, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2523,%r7686,%r2525,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2529, %r7513, %r2523, %p28;
	// begin inline asm
	{mul.f16x2 %r7741,%r2529,%r7598;
}
	// end inline asm
	selp.b32 	%r2532, %r7517, %r2523, %p28;
	// begin inline asm
	{mul.f16x2 %r7738,%r2532,%r7591;
}
	// end inline asm
	mov.u32 	%r2537, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2535,%r7686,%r2537,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2541, %r7513, %r2535, %p28;
	// begin inline asm
	{mul.f16x2 %r7740,%r2541,%r7727;
}
	// end inline asm
	selp.b32 	%r2544, %r7517, %r2535, %p28;
	// begin inline asm
	{mul.f16x2 %r7737,%r2544,%r7725;
}
	// end inline asm
	mov.u32 	%r2549, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2547,%r7686,%r2549,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2553, %r7513, %r2547, %p28;
	// begin inline asm
	{mul.f16x2 %r7736,%r2553,%r7832;
}
	// end inline asm
	selp.b32 	%r2556, %r7517, %r2547, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2556,%r7830;
}
	// end inline asm
	mov.u32 	%r2561, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2559,%r7686,%r2561,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2565, %r7513, %r2559, %p28;
	// begin inline asm
	{mul.f16x2 %r7735,%r2565,%r7831;
}
	// end inline asm
	selp.b32 	%r2568, %r7517, %r2559, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2568,%r7829;
}
	// end inline asm
	mov.u32 	%r2573, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2571,%r7686,%r2573,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2577, %r7513, %r2571, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2577,%r7724;
}
	// end inline asm
	selp.b32 	%r2580, %r7517, %r2571, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2580,%r7723;
}
	// end inline asm
	mov.u32 	%r2585, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2583,%r7686,%r2585,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2589, %r7513, %r2583, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2589,%r7827;
}
	// end inline asm
	selp.b32 	%r2592, %r7517, %r2583, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2592,%r7828;
}
	// end inline asm
	mov.u32 	%r2597, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2595,%r7686,%r2597,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2601, %r7513, %r2595, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2601,%r7833;
}
	// end inline asm
	selp.b32 	%r2604, %r7517, %r2595, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2604,%r7836;
}
	// end inline asm
	mov.u32 	%r2609, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2607,%r7686,%r2609,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2613, %r7513, %r2607, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2613,%r7844;
}
	// end inline asm
	selp.b32 	%r2616, %r7517, %r2607, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2616,%r7850;
}
	// end inline asm
	mov.u32 	%r2621, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2619,%r7686,%r2621,%r2346,%r2623;
}
	// end inline asm
	selp.b32 	%r2625, %r7513, %r2619, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2625,%r7839;
}
	// end inline asm
	selp.b32 	%r2628, %r7517, %r2619, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2628,%r7840;
}
	// end inline asm
	rem.s32 	%r675, %r2634, %r69;
	rem.s32 	%r676, %r2639, %r7409;
	mad.lo.s32 	%r677, %r2653, %r2654, %r2651;
	sub.s32 	%r678, %r2661, %r2664;
	mad.lo.s32 	%r679, %r2663, %r2667, %r2662;
	ld.param.u64 	%rd296, [%rd1+168];
	cvta.to.global.u64 	%rd297, %rd296;
	shl.b32 	%r2717, %r679, 1;
	mul.wide.s32 	%rd298, %r2717, 4;
	add.s64 	%rd28, %rd297, %rd298;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2920, %r1804, 1;
	setp.lt.s32 	%p239, %r679, %r2920;
	setp.eq.s32 	%p240, %r434, %r46;
	setp.gt.s32 	%p241, %r679, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r7689, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r7690, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2720, %r1804, 1;
	setp.lt.s32 	%p234, %r679, %r2720;
	setp.gt.s32 	%p235, %r679, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r7687, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r7688, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7689, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7690, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2928, 0;
	mov.u32 	%r2939, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2926,%r7685,%r2928,%r2346,%r2939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2931,%r7689,%r2926;
}
	// end inline asm
	mov.u32 	%r2937, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2935,%r7685,%r2937,%r2346,%r2939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2940,%r7690,%r2935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7692,%r2931,%r2940;
}
	// end inline asm
	setp.eq.s32 	%p244, %r435, 0;
	mov.u32 	%r7691, %r7692;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f433;
  cvt.rn.f16.f32 high, %f433;
  mov.b32 %r7691, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7770,%r7770,%r7691;
}
	// end inline asm
	setp.eq.s32 	%p245, %r435, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f435;
  cvt.rn.f16.f32 high, %f435;
  mov.b32 %r7692, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r7692;
}
	// end inline asm
	mov.u32 	%r2961, 2;
	mov.u32 	%r2972, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2959,%r7685,%r2961,%r2346,%r2972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2964,%r7689,%r2959;
}
	// end inline asm
	mov.u32 	%r2970, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2968,%r7685,%r2970,%r2346,%r2972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2973,%r7690,%r2968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7694,%r2964,%r2973;
}
	// end inline asm
	mov.u32 	%r7693, %r7694;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f437;
  cvt.rn.f16.f32 high, %f437;
  mov.b32 %r7693, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7769,%r7769,%r7693;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f439;
  cvt.rn.f16.f32 high, %f439;
  mov.b32 %r7694, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7767,%r7767,%r7694;
}
	// end inline asm
	mov.u32 	%r2994, 4;
	mov.u32 	%r3005, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2992,%r7685,%r2994,%r2346,%r3005;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2997,%r7689,%r2992;
}
	// end inline asm
	mov.u32 	%r3003, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r3001,%r7685,%r3003,%r2346,%r3005;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3006,%r7690,%r3001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r2997,%r3006;
}
	// end inline asm
	mov.u32 	%r7695, %r7696;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f441;
  cvt.rn.f16.f32 high, %f441;
  mov.b32 %r7695, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r7695;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f443;
  cvt.rn.f16.f32 high, %f443;
  mov.b32 %r7696, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7765,%r7765,%r7696;
}
	// end inline asm
	mov.u32 	%r3027, 6;
	mov.u32 	%r3038, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3025,%r7685,%r3027,%r2346,%r3038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3030,%r7689,%r3025;
}
	// end inline asm
	mov.u32 	%r3036, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r3034,%r7685,%r3036,%r2346,%r3038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3039,%r7690,%r3034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r3030,%r3039;
}
	// end inline asm
	mov.u32 	%r7697, %r7698;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f445;
  cvt.rn.f16.f32 high, %f445;
  mov.b32 %r7697, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r7697;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f447;
  cvt.rn.f16.f32 high, %f447;
  mov.b32 %r7698, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r7698;
}
	// end inline asm
	mov.u32 	%r3060, 8;
	mov.u32 	%r3071, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3058,%r7685,%r3060,%r2346,%r3071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3063,%r7689,%r3058;
}
	// end inline asm
	mov.u32 	%r3069, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3067,%r7685,%r3069,%r2346,%r3071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3072,%r7690,%r3067;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r3063,%r3072;
}
	// end inline asm
	mov.u32 	%r7699, %r7700;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f449;
  cvt.rn.f16.f32 high, %f449;
  mov.b32 %r7699, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7763,%r7763,%r7699;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f451;
  cvt.rn.f16.f32 high, %f451;
  mov.b32 %r7700, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r7700;
}
	// end inline asm
	mov.u32 	%r3093, 10;
	mov.u32 	%r3104, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3091,%r7685,%r3093,%r2346,%r3104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3096,%r7689,%r3091;
}
	// end inline asm
	mov.u32 	%r3102, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3100,%r7685,%r3102,%r2346,%r3104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3105,%r7690,%r3100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r3096,%r3105;
}
	// end inline asm
	mov.u32 	%r7701, %r7702;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f453;
  cvt.rn.f16.f32 high, %f453;
  mov.b32 %r7701, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r7701;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f455;
  cvt.rn.f16.f32 high, %f455;
  mov.b32 %r7702, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7757,%r7757,%r7702;
}
	// end inline asm
	mov.u32 	%r3126, 12;
	mov.u32 	%r3137, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3124,%r7685,%r3126,%r2346,%r3137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3129,%r7689,%r3124;
}
	// end inline asm
	mov.u32 	%r3135, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3133,%r7685,%r3135,%r2346,%r3137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3138,%r7690,%r3133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r3129,%r3138;
}
	// end inline asm
	mov.u32 	%r7703, %r7704;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f457;
  cvt.rn.f16.f32 high, %f457;
  mov.b32 %r7703, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7759,%r7759,%r7703;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f459;
  cvt.rn.f16.f32 high, %f459;
  mov.b32 %r7704, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7756,%r7756,%r7704;
}
	// end inline asm
	mov.u32 	%r3159, 14;
	mov.u32 	%r3170, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3157,%r7685,%r3159,%r2346,%r3170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3162,%r7689,%r3157;
}
	// end inline asm
	mov.u32 	%r3168, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3166,%r7685,%r3168,%r2346,%r3170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3171,%r7690,%r3166;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r3162,%r3171;
}
	// end inline asm
	mov.u32 	%r7705, %r7706;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f461;
  cvt.rn.f16.f32 high, %f461;
  mov.b32 %r7705, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7754,%r7754,%r7705;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f463;
  cvt.rn.f16.f32 high, %f463;
  mov.b32 %r7706, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r7706;
}
	// end inline asm
	mov.u32 	%r3192, 16;
	mov.u32 	%r3203, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3190,%r7685,%r3192,%r2346,%r3203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3195,%r7689,%r3190;
}
	// end inline asm
	mov.u32 	%r3201, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3199,%r7685,%r3201,%r2346,%r3203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3204,%r7690,%r3199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7708,%r3195,%r3204;
}
	// end inline asm
	mov.u32 	%r7707, %r7708;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f465;
  cvt.rn.f16.f32 high, %f465;
  mov.b32 %r7707, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7753,%r7753,%r7707;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r7708, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7750,%r7750,%r7708;
}
	// end inline asm
	mov.u32 	%r3225, 18;
	mov.u32 	%r3236, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3223,%r7685,%r3225,%r2346,%r3236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3228,%r7689,%r3223;
}
	// end inline asm
	mov.u32 	%r3234, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3232,%r7685,%r3234,%r2346,%r3236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3237,%r7690,%r3232;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r3228,%r3237;
}
	// end inline asm
	mov.u32 	%r7709, %r7710;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7709, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7748,%r7748,%r7709;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f471;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r7710, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r7710;
}
	// end inline asm
	mov.u32 	%r3258, 20;
	mov.u32 	%r3269, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3256,%r7685,%r3258,%r2346,%r3269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3261,%r7689,%r3256;
}
	// end inline asm
	mov.u32 	%r3267, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3265,%r7685,%r3267,%r2346,%r3269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3270,%r7690,%r3265;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r3261,%r3270;
}
	// end inline asm
	mov.u32 	%r7711, %r7712;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f473;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r7711, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r7711;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f475;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r7712, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7744,%r7744,%r7712;
}
	// end inline asm
	mov.u32 	%r3291, 22;
	mov.u32 	%r3302, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3289,%r7685,%r3291,%r2346,%r3302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3294,%r7689,%r3289;
}
	// end inline asm
	mov.u32 	%r3300, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3298,%r7685,%r3300,%r2346,%r3302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3303,%r7690,%r3298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r3294,%r3303;
}
	// end inline asm
	mov.u32 	%r7713, %r7714;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f477;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r7713, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7742,%r7742,%r7713;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f479;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r7714, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r7714;
}
	// end inline asm
	mov.u32 	%r3324, 24;
	mov.u32 	%r3335, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3322,%r7685,%r3324,%r2346,%r3335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3327,%r7689,%r3322;
}
	// end inline asm
	mov.u32 	%r3333, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3331,%r7685,%r3333,%r2346,%r3335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3336,%r7690,%r3331;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r3327,%r3336;
}
	// end inline asm
	mov.u32 	%r7715, %r7716;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f481;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r7715, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7741,%r7741,%r7715;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f483;
  cvt.rn.f16.f32 high, %f483;
  mov.b32 %r7716, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r7716;
}
	// end inline asm
	mov.u32 	%r3357, 26;
	mov.u32 	%r3368, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3355,%r7685,%r3357,%r2346,%r3368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3360,%r7689,%r3355;
}
	// end inline asm
	mov.u32 	%r3366, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3364,%r7685,%r3366,%r2346,%r3368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3369,%r7690,%r3364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r3360,%r3369;
}
	// end inline asm
	mov.u32 	%r7717, %r7718;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f485;
  cvt.rn.f16.f32 high, %f485;
  mov.b32 %r7717, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r7717;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f487;
  cvt.rn.f16.f32 high, %f487;
  mov.b32 %r7718, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r7718;
}
	// end inline asm
	mov.u32 	%r3390, 28;
	mov.u32 	%r3401, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3388,%r7685,%r3390,%r2346,%r3401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3393,%r7689,%r3388;
}
	// end inline asm
	mov.u32 	%r3399, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3397,%r7685,%r3399,%r2346,%r3401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3402,%r7690,%r3397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r3393,%r3402;
}
	// end inline asm
	mov.u32 	%r7719, %r7720;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f489;
  cvt.rn.f16.f32 high, %f489;
  mov.b32 %r7719, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r7719;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f491;
  cvt.rn.f16.f32 high, %f491;
  mov.b32 %r7720, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7720;
}
	// end inline asm
	mov.u32 	%r3432, 31;
	mov.u32 	%r3423, 30;
	mov.u32 	%r3434, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3421,%r7685,%r3423,%r2346,%r3434;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3426,%r7689,%r3421;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3430,%r7685,%r3432,%r2346,%r3434;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3435,%r7690,%r3430;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r3426,%r3435;
}
	// end inline asm
	mov.u32 	%r7721, %r7722;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f493;
  cvt.rn.f16.f32 high, %f493;
  mov.b32 %r7721, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r7721;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f495;
  cvt.rn.f16.f32 high, %f495;
  mov.b32 %r7722, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7722;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7687, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7688, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r678, %r1786;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2822,%r7687,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7770,%r7770,%r2822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r7687,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r2828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2834,%r7687,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r2834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2840,%r7687,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r2840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2846,%r7687,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7742,%r7742,%r2846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2852,%r7687,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2858,%r7688,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r2858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2864,%r7688,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7745,%r7745,%r2864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2870,%r7687,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r2870;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2876,%r7687,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r2876;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2882,%r7687,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7757,%r7757,%r2882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2888,%r7687,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r2888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2894,%r7687,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r2894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2900,%r7687,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r2900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2906,%r7688,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r2906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2912,%r7688,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r2912;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2725, %r1786, -2;
	setp.ne.s32 	%p238, %r678, %r2725;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2726,%r7687,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7748,%r7748,%r2726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2732,%r7687,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2738,%r7688,%r7669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r2738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2744,%r7688,%r7667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r2744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2750,%r7688,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7754,%r7754,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2756,%r7688,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2762,%r7688,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r2762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2768,%r7688,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r2768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2774,%r7687,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r2774;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2780,%r7687,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r2780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2786,%r7688,%r7668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7765,%r7765,%r2786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2792,%r7688,%r7666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7749,%r7749,%r2792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2798,%r7688,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r2798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2804,%r7688,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r2804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2810,%r7688,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r2810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2816,%r7688,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r2816;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7867, %r2259;
	mov.u32 	%r7868, %r2259;
	mov.u32 	%r7873, %r2259;
	mov.u32 	%r7874, %r2259;
	mov.u32 	%r7875, %r2259;
	mov.u32 	%r7876, %r2259;
	mov.u32 	%r7877, %r2259;
	mov.u32 	%r7878, %r2259;
	mov.u32 	%r7885, %r2259;
	mov.u32 	%r7886, %r2259;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3453, %r1777, 320;
	add.s32 	%r3454, %r41, -1;
	mul.lo.s32 	%r3455, %r42, 320;
	mad.lo.s32 	%r3456, %r3453, %r3454, %r3455;
	add.s32 	%r3459, %r1854, -64;
	mad.lo.s32 	%r3464, %r3459, %r2247, %r2244;
	add.s32 	%r3465, %r3456, %r3464;
	shl.b32 	%r3466, %r3465, 2;
	mov.u32 	%r3467, _ZN6kernel5shmemE;
	add.s32 	%r3468, %r3467, %r3466;
	shl.b32 	%r3469, %r46, 4;
	add.s32 	%r3470, %r3468, %r3469;
	ld.shared.v4.u32 	{%r7878, %r7876, %r7868, %r7867}, [%r3470];
	shl.b32 	%r3475, %r46, 3;
	add.s32 	%r3476, %r3468, %r3475;
	ld.shared.v2.u32 	{%r7877, %r7875}, [%r3476+512];
	ld.shared.v4.u32 	{%r7886, %r7885, %r7874, %r7873}, [%r3470+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7869, %r2259;
	mov.u32 	%r7870, %r2259;
	mov.u32 	%r7871, %r2259;
	mov.u32 	%r7872, %r2259;
	mov.u32 	%r7879, %r2259;
	mov.u32 	%r7880, %r2259;
	mov.u32 	%r7881, %r2259;
	mov.u32 	%r7882, %r2259;
	mov.u32 	%r7883, %r2259;
	mov.u32 	%r7884, %r2259;
	mov.u32 	%r7887, %r2259;
	mov.u32 	%r7888, %r2259;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3488, %r2643, 384, %r2250;
	add.s32 	%r3491, %r42, -1;
	mad.lo.s32 	%r3492, %r2245, %r3491, %r3488;
	add.s32 	%r3498, %r3492, %r2248;
	shl.b32 	%r3499, %r3498, 2;
	mov.u32 	%r3500, _ZN6kernel5shmemE;
	add.s32 	%r3501, %r3500, %r3499;
	shl.b32 	%r3502, %r46, 4;
	add.s32 	%r3503, %r3501, %r3502;
	ld.shared.v4.u32 	{%r7888, %r7887, %r7883, %r7881}, [%r3503];
	shl.b32 	%r3508, %r46, 3;
	add.s32 	%r3509, %r3501, %r3508;
	ld.shared.v2.u32 	{%r7884, %r7882}, [%r3509+512];
	ld.shared.v4.u32 	{%r7880, %r7879, %r7871, %r7869}, [%r3503+768];
	mov.u32 	%r7870, %r2259;
	mov.u32 	%r7872, %r2259;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7399, %r3509, 512;
	ld.shared.v2.u32 	{%r7872, %r7870}, [%r7399+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2247;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3519, %r1776, %r41;
	mul.lo.s32 	%r3521, %r70, %r42;
	mad.lo.s32 	%r3522, %r3519, 384, %r3521;
	mad.lo.s32 	%r3525, %r2245, %r2247, %r3522;
	mad.lo.s32 	%r3528, %r2243, %r2242, %r3525;
	shl.b32 	%r3529, %r3528, 2;
	mov.u32 	%r3530, _ZN6kernel5shmemE;
	add.s32 	%r3531, %r3530, %r3529;
	shl.b32 	%r3532, %r46, 4;
	add.s32 	%r3533, %r3531, %r3532;
	ld.shared.v4.u32 	{%r7797, %r7800, %r7804, %r7803}, [%r3533];

$L__BB0_416:
	shl.b32 	%r3538, %r42, 8;
	shl.b32 	%r3542, %r1777, 8;
	or.b32  	%r3543, %r3542, 128;
	add.s32 	%r3544, %r41, -1;
	mad.lo.s32 	%r3545, %r3543, %r3544, %r2250;
	add.s32 	%r3546, %r3545, %r3538;
	shl.b32 	%r3547, %r3546, 2;
	mov.u32 	%r3548, _ZN6kernel5shmemE;
	add.s32 	%r3549, %r3548, %r3547;
	setp.ne.s32 	%p281, %r42, %r2247;
	shl.b32 	%r3551, %r46, 4;
	add.s32 	%r937, %r3549, %r3551;
	ld.shared.v4.u32 	{%r7806, %r7808, %r7805, %r7807}, [%r937];
	ld.shared.v4.u32 	{%r7802, %r7799, %r7798, %r7801}, [%r937+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7797, %r7800, %r7804, %r7803}, [%r937+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3565, %r70, %r42;
	sub.s32 	%r3566, %r3565, %r70;
	mad.lo.s32 	%r3569, %r2643, 384, %r3566;
	mad.lo.s32 	%r3572, %r2245, %r2247, %r3569;
	mad.lo.s32 	%r3575, %r2243, %r2242, %r3572;
	shl.b32 	%r3576, %r3575, 2;
	mov.u32 	%r3577, _ZN6kernel5shmemE;
	add.s32 	%r3578, %r3577, %r3576;
	shl.b32 	%r3579, %r46, 4;
	add.s32 	%r962, %r3578, %r3579;
	ld.shared.v4.u32 	{%r7817, %r7816, %r7821, %r7819}, [%r962];
	ld.shared.v4.u32 	{%r7815, %r7812, %r7809, %r7810}, [%r962+512];
	ld.shared.v4.u32 	{%r7814, %r7811, %r7813, %r7820}, [%r962+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7823, %r7824, %r7818, %r7822}, [%r962+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd579, [%rd1+104];
	cvta.to.global.u64 	%rd578, %rd579;
	mad.lo.s32 	%r3597, %r675, %r1779, %r44;
	mul.lo.s32 	%r3598, %r1777, %r3597;
	mul.lo.s32 	%r3599, %r3598, 768;
	mad.lo.s32 	%r3600, %r42, 384, %r3599;
	add.s32 	%r3601, %r3600, -64;
	mul.wide.s32 	%rd301, %r3601, 4;
	add.s64 	%rd302, %rd578, %rd301;
	add.s64 	%rd304, %rd302, %rd303;
	ld.global.v4.u32 	{%r7832, %r7830, %r7839, %r7840}, [%rd304+256];
	ld.global.v4.u32 	{%r7838, %r7835, %r7827, %r7828}, [%rd304+1024];
	add.s64 	%rd30, %rd302, %rd305;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7833, %r7836}, [%rd30];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2247;
	ld.global.v2.u32 	{%r7831, %r7829}, [%rd30+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7837, %r7834}, [%rd30+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd581, [%rd1+104];
	cvta.to.global.u64 	%rd580, %rd581;
	mad.lo.s32 	%r3618, %r676, %r1778, %r43;
	mul.lo.s32 	%r3622, %r3618, %r1855;
	mad.lo.s32 	%r3625, %r2643, 384, %r3622;
	add.s32 	%r3626, %r3625, -64;
	mad.lo.s32 	%r3629, %r1857, %r69, %r3626;
	mul.wide.s32 	%rd306, %r3629, 4;
	add.s64 	%rd307, %rd580, %rd306;
	add.s64 	%rd309, %rd307, %rd303;
	ld.global.v4.u32 	{%r7852, %r7851, %r7847, %r7845}, [%rd309+256];
	ld.global.v4.u32 	{%r7842, %r7841, %r7844, %r7850}, [%rd309+1024];
	add.s64 	%rd311, %rd307, %rd305;
	ld.global.v2.u32 	{%r7848, %r7846}, [%rd311+768];
	ld.global.v2.u32 	{%r7833, %r7836}, [%rd311+1536];

$L__BB0_428:
	add.s32 	%r3642, %r1781, -1;
	setp.ge.s32 	%p288, %r677, %r3642;
	setp.lt.s32 	%p289, %r677, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r678, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3643, %r1782, -2;
	setp.ge.s32 	%p293, %r678, %r3643;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd583, [%rd1+112];
	cvta.to.global.u64 	%rd582, %rd583;
	mad.lo.s32 	%r1057, %r678, %r1781, %r677;
	shl.b32 	%r3644, %r1057, 6;
	mul.wide.s32 	%rd314, %r3644, 4;
	add.s64 	%rd32, %rd582, %rd314;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd316, %rd32, %rd305;
	ld.global.v2.u32 	{%r7872, %r7870}, [%rd316+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3647, %r1781, 5;
	cvt.s64.s32 	%rd317, %r3647;
	cvt.s64.s32 	%rd318, %r46;
	add.s64 	%rd319, %rd317, %rd318;
	shl.b64 	%rd320, %rd319, 3;
	add.s64 	%rd321, %rd32, %rd320;
	ld.global.v2.u32 	{%r7877, %r7875}, [%rd321];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3650, %r1781, 5;
	neg.s32 	%r3651, %r3650;
	cvt.s64.s32 	%rd322, %r3651;
	cvt.s64.s32 	%rd323, %r46;
	add.s64 	%rd324, %rd322, %rd323;
	shl.b64 	%rd325, %rd324, 3;
	add.s64 	%rd326, %rd32, %rd325;
	ld.global.v2.u32 	{%r7884, %r7882}, [%rd326];

$L__BB0_435:
	mad.lo.s32 	%r7410, %r678, %r1781, %r677;
	ld.param.u64 	%rd585, [%rd1+112];
	cvta.to.global.u64 	%rd584, %rd585;
	shl.b32 	%r3654, %r1782, 6;
	shl.b32 	%r3655, %r7410, 7;
	mad.lo.s32 	%r3656, %r3654, %r1781, %r3655;
	mul.wide.s32 	%rd327, %r3656, 4;
	add.s64 	%rd33, %rd584, %rd327;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3657, %r1781, 5;
	cvt.s64.s32 	%rd328, %r3657;
	cvt.s64.s32 	%rd329, %r46;
	add.s64 	%rd330, %rd328, %rd329;
	shl.b64 	%rd331, %rd330, 4;
	add.s64 	%rd332, %rd33, %rd331;
	ld.global.v4.u32 	{%r7878, %r7876, %r7868, %r7867}, [%rd332];
	shl.b32 	%r3662, %r1781, 6;
	add.s32 	%r3663, %r3662, -32;
	cvt.s64.s32 	%rd333, %r3663;
	add.s64 	%rd334, %rd333, %rd329;
	shl.b64 	%rd335, %rd334, 4;
	add.s64 	%rd336, %rd33, %rd335;
	ld.global.v4.u32 	{%r7886, %r7885, %r7874, %r7873}, [%rd336];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3668, %r1781, 5;
	xor.b32  	%r3669, %r3668, -32;
	cvt.s64.s32 	%rd337, %r3669;
	cvt.s64.s32 	%rd338, %r46;
	add.s64 	%rd339, %rd337, %rd338;
	shl.b64 	%rd340, %rd339, 4;
	add.s64 	%rd341, %rd33, %rd340;
	ld.global.v4.u32 	{%r7888, %r7887, %r7883, %r7881}, [%rd341];
	add.s64 	%rd343, %rd33, %rd303;
	ld.global.v4.u32 	{%r7880, %r7879, %r7871, %r7869}, [%rd343];

$L__BB0_439:
	mov.u32 	%r3683, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3679,%r7632,%r436,%r2346,%r3683;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3679;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7632;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3686, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3687,%r7641,%r3686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3690,%r7512,%r3687;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7889,%r7770;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7889,%r7513,%r3687;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3703, 31;
	mov.u32 	%r3726, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3701,%r7889,%r3703,%r2346,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3706,%r3690,%r3701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3709,%r7640,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3712,%r3709,%r3706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3715,%r7662,%r3712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3718,%r7770,%r3715;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3722,%r7633,%r436,%r2346,%r3726;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3722;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3729, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3730,%r7642,%r3729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3733,%r7512,%r3730;
}
	// end inline asm
	mov.u32 	%r7890, %r7769;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7890,%r7513,%r3730;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3744,%r7890,%r3703,%r2346,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3749,%r3733,%r3744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r7640,%r7663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3755,%r3749,%r3752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3758,%r7661,%r3755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3761,%r7769,%r3758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3764,%r7632,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3767,%r7516,%r3764;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7891,%r7768;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7891,%r7517,%r3764;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3780, 31;
	mov.u32 	%r3782, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3778,%r7891,%r3780,%r2346,%r3782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3783,%r3767,%r3778;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3786,%r7631,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3789,%r3786,%r3783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3792,%r7657,%r3789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3795,%r7768,%r3792;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r7633,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r7516,%r3798;
}
	// end inline asm
	mov.u32 	%r7892, %r7767;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7892,%r7517,%r3798;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3810,%r7892,%r3780,%r2346,%r3782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3815,%r3801,%r3810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3818,%r7631,%r7658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3821,%r3815,%r3818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3824,%r7656,%r3821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3827,%r7767,%r3824;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3831,%r7616,%r436,%r2346,%r3782;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3831;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7616;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3838, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3839,%r7624,%r3838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3842,%r7512,%r3839;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7893,%r7766;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7893,%r7513,%r3839;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3857, 31;
	mov.u32 	%r3859, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3855,%r7893,%r3857,%r2346,%r3859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3860,%r3842,%r3855;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3863,%r7623,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3866,%r3863,%r3860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3869,%r7654,%r3866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r7766,%r3869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r7616,%r7624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3878,%r7516,%r3875;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7894,%r7765;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7894,%r7517,%r3875;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3891, 31;
	mov.u32 	%r3914, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3889,%r7894,%r3891,%r2346,%r3914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3894,%r3878,%r3889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3897,%r7615,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3900,%r3897,%r3894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3903,%r7652,%r3900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3906,%r7765,%r3903;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3910,%r7600,%r436,%r2346,%r3914;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3910;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7600;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3917, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3918,%r7605,%r3917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3921,%r7512,%r3918;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7895,%r7764;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7895,%r7513,%r3918;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3936, 31;
	mov.u32 	%r3959, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3934,%r7895,%r3936,%r2346,%r3959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3939,%r3921,%r3934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3942,%r7604,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3945,%r3942,%r3939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3948,%r7888,%r3945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3951,%r7764,%r3948;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3955,%r7601,%r436,%r2346,%r3959;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3955;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7601;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3962, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3963,%r7606,%r3962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3966,%r7512,%r3963;
}
	// end inline asm
	mov.u32 	%r7896, %r7763;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7896,%r7513,%r3963;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3977,%r7896,%r3936,%r2346,%r3959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3982,%r3966,%r3977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3985,%r7604,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3988,%r3982,%r3985;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3991,%r7649,%r3988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3994,%r7763,%r3991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3997,%r7600,%r7605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4000,%r7516,%r3997;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7897,%r7762;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7897,%r7517,%r3997;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r4013, 31;
	mov.u32 	%r4015, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4011,%r7897,%r4013,%r2346,%r4015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4016,%r4000,%r4011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4019,%r7599,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4022,%r4019,%r4016;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4025,%r7887,%r4022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4028,%r7762,%r4025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r7601,%r7606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r7516,%r4031;
}
	// end inline asm
	mov.u32 	%r7898, %r7761;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7898,%r7517,%r4031;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4043,%r7898,%r4013,%r2346,%r4015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4048,%r4034,%r4043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4051,%r7599,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4054,%r4048,%r4051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4057,%r7646,%r4054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4060,%r7761,%r4057;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4064,%r7588,%r436,%r2346,%r4015;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4064;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7588;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4071, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4072,%r7595,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4075,%r7512,%r4072;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7899,%r7760;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7899,%r7513,%r4072;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4090, 31;
	mov.u32 	%r4113, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4088,%r7899,%r4090,%r2346,%r4113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4093,%r4075,%r4088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4096,%r7594,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4099,%r4096,%r4093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4102,%r575,%r4099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7665,%r7760,%r4102;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4109,%r7589,%r436,%r2346,%r4113;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4109;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7589;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4116, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r7596,%r4116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4120,%r7512,%r4117;
}
	// end inline asm
	mov.u32 	%r7900, %r7759;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7900,%r7513,%r4117;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4131,%r7900,%r4090,%r2346,%r4113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4136,%r4120,%r4131;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4139,%r7594,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4142,%r4136,%r4139;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4145,%r574,%r4142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r7759,%r4145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4151,%r7595,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4154,%r7596,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4157,%r4151,%r4154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4160,%r7637,%r4157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4163,%r7758,%r4160;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;

	mov.u32 	%r7758, %r4163;

$L__BB0_472:
	// begin inline asm
	{sub.f16x2 %r4168,%r7588,%r7595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4171,%r7516,%r4168;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7902,%r7757;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7902,%r7517,%r4168;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4182, 31;
	mov.u32 	%r4184, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4180,%r7902,%r4182,%r2346,%r4184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4185,%r4171,%r4180;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4188,%r7587,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r4188,%r4185;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4194,%r566,%r4191;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r7757,%r4194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4200,%r7589,%r7596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4203,%r7516,%r4200;
}
	// end inline asm
	mov.u32 	%r7903, %r7756;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7903,%r7517,%r4200;
}
	// end inline asm

$L__BB0_477:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4212,%r7903,%r4182,%r2346,%r4184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4217,%r4203,%r4212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4220,%r7587,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4223,%r4217,%r4220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4226,%r565,%r4223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7659,%r7756,%r4226;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4232,%r7588,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4235,%r7589,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4238,%r4232,%r4235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4241,%r7628,%r4238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4244,%r7755,%r4241;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;

	mov.u32 	%r7755, %r4244;

$L__BB0_479:
	mov.u32 	%r4254, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4250,%r7577,%r436,%r2346,%r4254;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4250;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7577;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4257, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r7582,%r4257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4261,%r7512,%r4258;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r7905,%r7754;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r7905,%r7513,%r4258;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4274, 31;
	mov.u32 	%r4297, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4272,%r7905,%r4274,%r2346,%r4297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4277,%r4261,%r4272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4280,%r7581,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4283,%r4280,%r4277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4286,%r558,%r4283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7655,%r7754,%r4286;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4293,%r7578,%r436,%r2346,%r4297;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4293;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7578;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4300, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4301,%r7583,%r4300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4304,%r7512,%r4301;
}
	// end inline asm
	mov.u32 	%r7906, %r7753;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r7906,%r7513,%r4301;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4315,%r7906,%r4274,%r2346,%r4297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4320,%r4304,%r4315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4323,%r7581,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4326,%r4320,%r4323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4329,%r7621,%r4326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4332,%r7753,%r4329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4335,%r7582,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4338,%r7583,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4341,%r4335,%r4338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4344,%r7620,%r4341;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4347,%r7752,%r4344;
}
	// end inline asm
	@%p28 bra 	$L__BB0_486;

	mov.u32 	%r7752, %r4347;

$L__BB0_486:
	// begin inline asm
	{sub.f16x2 %r4352,%r7577,%r7582;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4355,%r7516,%r4352;
}
	// end inline asm
	@%p28 bra 	$L__BB0_488;
	bra.uni 	$L__BB0_487;

$L__BB0_488:
	// begin inline asm
	{neg.f16x2 %r7908,%r7751;
}
	// end inline asm
	bra.uni 	$L__BB0_489;

$L__BB0_487:
	// begin inline asm
	{mul.f16x2 %r7908,%r7517,%r4352;
}
	// end inline asm

$L__BB0_489:
	mov.u32 	%r4366, 31;
	mov.u32 	%r4368, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4364,%r7908,%r4366,%r2346,%r4368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4369,%r4355,%r4364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4372,%r7576,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4375,%r4372,%r4369;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4378,%r550,%r4375;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7653,%r7751,%r4378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r7578,%r7583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4387,%r7516,%r4384;
}
	// end inline asm
	mov.u32 	%r7909, %r7750;
	@%p28 bra 	$L__BB0_491;

	// begin inline asm
	{mul.f16x2 %r7909,%r7517,%r4384;
}
	// end inline asm

$L__BB0_491:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4396,%r7909,%r4366,%r2346,%r4368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4401,%r4387,%r4396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4404,%r7576,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4407,%r4401,%r4404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4410,%r7613,%r4407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4413,%r7750,%r4410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4416,%r7577,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4419,%r7578,%r7589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4422,%r4416,%r4419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4425,%r7612,%r4422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4428,%r7749,%r4425;
}
	// end inline asm
	@%p28 bra 	$L__BB0_493;

	mov.u32 	%r7749, %r4428;

$L__BB0_493:
	mov.u32 	%r4438, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4434,%r7568,%r436,%r2346,%r4438;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4434;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7568;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4441, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4442,%r7572,%r4441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4445,%r7512,%r4442;
}
	// end inline asm
	@%p28 bra 	$L__BB0_495;
	bra.uni 	$L__BB0_494;

$L__BB0_495:
	// begin inline asm
	{neg.f16x2 %r7911,%r7748;
}
	// end inline asm
	bra.uni 	$L__BB0_496;

$L__BB0_494:
	// begin inline asm
	{mul.f16x2 %r7911,%r7513,%r4442;
}
	// end inline asm

$L__BB0_496:
	mov.u32 	%r4458, 31;
	mov.u32 	%r4460, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4456,%r7911,%r4458,%r2346,%r4460;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4461,%r4445,%r4456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4464,%r7804,%r7581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4467,%r4464,%r4461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4470,%r7886,%r4467;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4473,%r7748,%r4470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4476,%r7568,%r7572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4479,%r7516,%r4476;
}
	// end inline asm
	@%p28 bra 	$L__BB0_498;
	bra.uni 	$L__BB0_497;

$L__BB0_498:
	// begin inline asm
	{neg.f16x2 %r7912,%r7747;
}
	// end inline asm
	bra.uni 	$L__BB0_499;

$L__BB0_497:
	// begin inline asm
	{mul.f16x2 %r7912,%r7517,%r4476;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4492, 31;
	mov.u32 	%r4515, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4490,%r7912,%r4492,%r2346,%r4515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4495,%r4479,%r4490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4498,%r7803,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4501,%r4498,%r4495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4504,%r7885,%r4501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4507,%r7747,%r4504;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4511,%r7554,%r436,%r2346,%r4515;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4511;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7554;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4518, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4519,%r7561,%r4518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4522,%r7512,%r4519;
}
	// end inline asm
	mov.u32 	%r7913, %r7746;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7913,%r7513,%r4519;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4533,%r7913,%r4492,%r2346,%r4515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4538,%r4522,%r4533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4541,%r7814,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4544,%r4538,%r4541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4547,%r7884,%r4544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7746,%r4547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4553,%r7815,%r7605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4556,%r7561,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r4553,%r4556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r7883,%r4559;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4565,%r7745,%r4562;
}
	// end inline asm
	@%p28 bra 	$L__BB0_503;

	mov.u32 	%r7745, %r4565;

$L__BB0_503:
	// begin inline asm
	{sub.f16x2 %r4570,%r7554,%r7561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4573,%r7516,%r4570;
}
	// end inline asm
	mov.u32 	%r7915, %r7744;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7915,%r7517,%r4570;
}
	// end inline asm

$L__BB0_505:
	mov.u32 	%r4582, 31;
	mov.u32 	%r4584, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4580,%r7915,%r4582,%r2346,%r4584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4585,%r4573,%r4580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4588,%r7811,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4591,%r4585,%r4588;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4594,%r7882,%r4591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7744,%r4594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4600,%r7812,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4603,%r7554,%r7816;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4606,%r4600,%r4603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4609,%r7881,%r4606;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4612,%r7743,%r4609;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;

	mov.u32 	%r7743, %r4612;

$L__BB0_507:
	// begin inline asm
	{shfl.sync.idx.b32 %r4618,%r7540,%r436,%r2346,%r4584;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4618;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7540;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4625, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r7547,%r4625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4629,%r7512,%r4626;
}
	// end inline asm
	@%p28 bra 	$L__BB0_509;
	bra.uni 	$L__BB0_508;

$L__BB0_509:
	// begin inline asm
	{neg.f16x2 %r7917,%r7742;
}
	// end inline asm
	bra.uni 	$L__BB0_510;

$L__BB0_508:
	// begin inline asm
	{mul.f16x2 %r7917,%r7513,%r4626;
}
	// end inline asm

$L__BB0_510:
	mov.u32 	%r4642, 31;
	mov.u32 	%r4665, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4640,%r7917,%r4642,%r2346,%r4665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4645,%r4629,%r4640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4648,%r7546,%r7814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4651,%r4648,%r4645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4654,%r7880,%r4651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7742,%r4654;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4661,%r7541,%r436,%r2346,%r4665;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4661;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7541;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4668, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4669,%r7548,%r4668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4672,%r7512,%r4669;
}
	// end inline asm
	mov.u32 	%r7918, %r7741;
	@%p28 bra 	$L__BB0_512;

	// begin inline asm
	{mul.f16x2 %r7918,%r7513,%r4669;
}
	// end inline asm

$L__BB0_512:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4683,%r7918,%r4642,%r2346,%r4665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4688,%r4672,%r4683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4691,%r7546,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4694,%r4688,%r4691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4697,%r7638,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7741,%r4697;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4703,%r7547,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4706,%r7548,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4709,%r4703,%r4706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4712,%r520,%r4709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4715,%r7740,%r4712;
}
	// end inline asm
	@%p28 bra 	$L__BB0_514;

	mov.u32 	%r7740, %r4715;

$L__BB0_514:
	// begin inline asm
	{sub.f16x2 %r4720,%r7540,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4723,%r7516,%r4720;
}
	// end inline asm
	@%p28 bra 	$L__BB0_516;
	bra.uni 	$L__BB0_515;

$L__BB0_516:
	// begin inline asm
	{neg.f16x2 %r7920,%r7739;
}
	// end inline asm
	bra.uni 	$L__BB0_517;

$L__BB0_515:
	// begin inline asm
	{mul.f16x2 %r7920,%r7517,%r4720;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4734, 31;
	mov.u32 	%r4736, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4732,%r7920,%r4734,%r2346,%r4736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4737,%r4723,%r4732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4740,%r7539,%r7811;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4743,%r4740,%r4737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4746,%r7879,%r4743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7739,%r4746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r7541,%r7548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r7516,%r4752;
}
	// end inline asm
	mov.u32 	%r7921, %r7738;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7921,%r7517,%r4752;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4764,%r7921,%r4734,%r2346,%r4736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4769,%r4755,%r4764;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4772,%r7539,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4775,%r4769,%r4772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4778,%r7629,%r4775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7635,%r7738,%r4778;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4784,%r7540,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4787,%r7541,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4790,%r4784,%r4787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4793,%r512,%r4790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4796,%r7737,%r4793;
}
	// end inline asm
	@%p28 bra 	$L__BB0_521;

	mov.u32 	%r7737, %r4796;

$L__BB0_521:
	mov.u32 	%r4806, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4802,%r7525,%r436,%r2346,%r4806;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4802;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7525;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4809, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r7533,%r4809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4813,%r7512,%r4810;
}
	// end inline asm
	@%p28 bra 	$L__BB0_523;
	bra.uni 	$L__BB0_522;

$L__BB0_523:
	// begin inline asm
	{neg.f16x2 %r7923,%r7736;
}
	// end inline asm
	bra.uni 	$L__BB0_524;

$L__BB0_522:
	// begin inline asm
	{mul.f16x2 %r7923,%r7513,%r4810;
}
	// end inline asm

$L__BB0_524:
	mov.u32 	%r4826, 31;
	mov.u32 	%r4849, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4824,%r7923,%r4826,%r2346,%r4849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4829,%r4813,%r4824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4832,%r7802,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4835,%r4832,%r4829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4838,%r7878,%r4835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r7736,%r4838;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4845,%r7526,%r436,%r2346,%r4849;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4845;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7526;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4852, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4853,%r7534,%r4852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4856,%r7512,%r4853;
}
	// end inline asm
	mov.u32 	%r7924, %r7735;
	@%p28 bra 	$L__BB0_526;

	// begin inline asm
	{mul.f16x2 %r7924,%r7513,%r4853;
}
	// end inline asm

$L__BB0_526:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4867,%r7924,%r4826,%r2346,%r4849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4872,%r4856,%r4867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4875,%r7802,%r7581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4878,%r4872,%r4875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4881,%r7877,%r4878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7626,%r7735,%r4881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4887,%r7533,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4890,%r7534,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4893,%r4887,%r4890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4896,%r505,%r4893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4899,%r7734,%r4896;
}
	// end inline asm
	@%p28 bra 	$L__BB0_528;

	mov.u32 	%r7734, %r4899;

$L__BB0_528:
	// begin inline asm
	{sub.f16x2 %r4904,%r7525,%r7533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4907,%r7516,%r4904;
}
	// end inline asm
	@%p28 bra 	$L__BB0_530;
	bra.uni 	$L__BB0_529;

$L__BB0_530:
	// begin inline asm
	{neg.f16x2 %r7926,%r7733;
}
	// end inline asm
	bra.uni 	$L__BB0_531;

$L__BB0_529:
	// begin inline asm
	{mul.f16x2 %r7926,%r7517,%r4904;
}
	// end inline asm

$L__BB0_531:
	mov.u32 	%r4918, 31;
	mov.u32 	%r4920, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4916,%r7926,%r4918,%r2346,%r4920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4921,%r4907,%r4916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4924,%r7799,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4927,%r4924,%r4921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4930,%r7876,%r4927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7619,%r7733,%r4930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4936,%r7526,%r7534;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4939,%r7516,%r4936;
}
	// end inline asm
	mov.u32 	%r7927, %r7732;
	@%p28 bra 	$L__BB0_533;

	// begin inline asm
	{mul.f16x2 %r7927,%r7517,%r4936;
}
	// end inline asm

$L__BB0_533:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4948,%r7927,%r4918,%r2346,%r4920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4953,%r4939,%r4948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4956,%r7799,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4959,%r4953,%r4956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4962,%r7875,%r4959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7618,%r7732,%r4962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4968,%r7525,%r7577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4971,%r7526,%r7541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4974,%r4968,%r4971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4977,%r498,%r4974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4980,%r7731,%r4977;
}
	// end inline asm
	@%p28 bra 	$L__BB0_535;

	mov.u32 	%r7731, %r4980;

$L__BB0_535:
	// begin inline asm
	{sub.f16x2 %r4985,%r7798,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4988,%r7797,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4991,%r4985,%r4988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4994,%r7874,%r4991;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4997,%r7730,%r4994;
}
	// end inline asm
	@%p28 bra 	$L__BB0_537;

	mov.u32 	%r7730, %r4997;

$L__BB0_537:
	// begin inline asm
	{sub.f16x2 %r5000,%r7801,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5003,%r7800,%r7526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5006,%r5000,%r5003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5009,%r7873,%r5006;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5012,%r7729,%r5009;
}
	// end inline asm
	@%p28 bra 	$L__BB0_539;

	mov.u32 	%r7729, %r5012;

$L__BB0_539:
	mov.u32 	%r5020, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5016,%r7603,%r436,%r2346,%r5020;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5016;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7603;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5023, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5024,%r7557,%r5023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5027,%r7512,%r5024;
}
	// end inline asm
	mov.u32 	%r7931, %r7728;
	@%p28 bra 	$L__BB0_541;

	// begin inline asm
	{mul.f16x2 %r7931,%r7513,%r5024;
}
	// end inline asm

$L__BB0_541:
	mov.u32 	%r5038, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5036,%r7931,%r5038,%r2346,%r5020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5041,%r5027,%r5036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5044,%r7818,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5047,%r5041,%r5044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5050,%r7872,%r5047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r7728,%r5050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5056,%r7813,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5059,%r7557,%r7809;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5062,%r5056,%r5059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5065,%r7871,%r5062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5068,%r7727,%r5065;
}
	// end inline asm
	@%p28 bra 	$L__BB0_543;

	mov.u32 	%r7727, %r5068;

$L__BB0_543:
	// begin inline asm
	{sub.f16x2 %r5073,%r7603,%r7557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5076,%r7516,%r5073;
}
	// end inline asm
	mov.u32 	%r7933, %r7726;
	@%p28 bra 	$L__BB0_545;

	// begin inline asm
	{mul.f16x2 %r7933,%r7517,%r5073;
}
	// end inline asm

$L__BB0_545:
	mov.u32 	%r5085, 31;
	mov.u32 	%r5087, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5083,%r7933,%r5085,%r2346,%r5087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5088,%r5076,%r5083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5091,%r7822,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5094,%r5088,%r5091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5097,%r7870,%r5094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7591,%r7726,%r5097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5103,%r7820,%r7540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5106,%r7603,%r7810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5109,%r5103,%r5106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5112,%r7869,%r5109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5115,%r7725,%r5112;
}
	// end inline asm
	@%p28 bra 	$L__BB0_547;

	mov.u32 	%r7725, %r5115;

$L__BB0_547:
	// begin inline asm
	{sub.f16x2 %r5120,%r7806,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5123,%r7805,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5126,%r5120,%r5123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5129,%r7868,%r5126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5132,%r7724,%r5129;
}
	// end inline asm
	@%p28 bra 	$L__BB0_549;

	mov.u32 	%r7724, %r5132;

$L__BB0_549:
	// begin inline asm
	{sub.f16x2 %r5135,%r7808,%r7525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5138,%r7807,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5141,%r5135,%r5138;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5144,%r7867,%r5141;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5147,%r7723,%r5144;
}
	// end inline asm
	@%p28 bra 	$L__BB0_551;

	mov.u32 	%r7723, %r5147;

$L__BB0_551:
	bar.sync 	0;
	ld.param.u64 	%rd344, [%rd1+184];
	cvta.to.global.u64 	%rd35, %rd344;
	add.s32 	%r5150, %r1790, -2;
	setp.lt.s32 	%p350, %r677, %r5150;
	add.s32 	%r5151, %r1791, 3;
	setp.ge.s32 	%p351, %r677, %r5151;
	or.pred  	%p352, %p350, %p351;
	add.s32 	%r5152, %r1792, -2;
	setp.lt.s32 	%p353, %r678, %r5152;
	or.pred  	%p354, %p352, %p353;
	add.s32 	%r5153, %r1793, 2;
	setp.ge.s32 	%p355, %r678, %r5153;
	or.pred  	%p356, %p355, %p354;
	setp.lt.s32 	%p357, %r679, %r1787;
	or.pred  	%p358, %p357, %p356;
	mad.lo.s32 	%r5154, %r1789, %r1788, %r1787;
	setp.ge.s32 	%p359, %r679, %r5154;
	or.pred  	%p360, %p358, %p359;
	@%p360 bra 	$L__BB0_793;

	sub.s32 	%r1324, %r679, %r1787;
	rem.s32 	%r5155, %r1324, %r1788;
	setp.ne.s32 	%p361, %r5155, 0;
	@%p361 bra 	$L__BB0_793;

	div.s32 	%r5156, %r1324, %r1788;
	mov.u32 	%r5157, 8;
	sub.s32 	%r5158, %r5157, %r1790;
	add.s32 	%r5159, %r5158, %r1791;
	mul.lo.s32 	%r5160, %r5156, %r5159;
	mov.u32 	%r5161, 4;
	sub.s32 	%r5162, %r5161, %r1790;
	add.s32 	%r1325, %r5162, %r677;
	sub.s32 	%r5163, %r5161, %r1792;
	add.s32 	%r1326, %r5163, %r678;
	mul.lo.s32 	%r1327, %r5160, 3;
	add.s32 	%r5164, %r1325, %r1327;
	add.s32 	%r5165, %r5164, -2;
	sub.s32 	%r5166, %r5157, %r1792;
	add.s32 	%r5167, %r5166, %r1793;
	mul.lo.s32 	%r1328, %r5165, %r5167;
	add.s32 	%r5168, %r1326, %r1328;
	mul.lo.s32 	%r5169, %r5168, %r58;
	sub.s32 	%r1329, %r5169, %r1794;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p363, %p24;
	@%p363 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3718;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5171, %r1329, %r402;
	mul.wide.s32 	%rd345, %r5171, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f496;

$L__BB0_556:
	not.pred 	%p364, %p26;
	@%p364 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3718;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5173, %r1329, %r403;
	mul.wide.s32 	%rd347, %r5173, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f497;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p366, %p25;
	@%p366 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3795;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5175, %r1329, %r416;
	mul.wide.s32 	%rd349, %r5175, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f498;

$L__BB0_561:
	not.pred 	%p367, %p27;
	@%p367 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3795;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5177, %r1329, %r417;
	mul.wide.s32 	%rd351, %r5177, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f499;

$L__BB0_563:
	mov.u32 	%r5178, 8;
	sub.s32 	%r5179, %r5178, %r1790;
	add.s32 	%r5180, %r5179, %r1791;
	add.s32 	%r1330, %r1327, %r5180;
	add.s32 	%r5181, %r1325, %r1330;
	add.s32 	%r5182, %r5181, -2;
	sub.s32 	%r5183, %r5178, %r1792;
	add.s32 	%r5184, %r5183, %r1793;
	mad.lo.s32 	%r5185, %r5182, %r5184, %r1326;
	mul.lo.s32 	%r5186, %r5185, %r58;
	sub.s32 	%r1331, %r5186, %r1794;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p369, %p24;
	@%p369 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3761;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5188, %r1331, %r402;
	mul.wide.s32 	%rd353, %r5188, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f500;

$L__BB0_566:
	not.pred 	%p370, %p26;
	@%p370 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3761;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5190, %r1331, %r403;
	mul.wide.s32 	%rd355, %r5190, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f501;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p372, %p25;
	@%p372 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3827;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5192, %r1331, %r416;
	mul.wide.s32 	%rd357, %r5192, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f502;

$L__BB0_571:
	not.pred 	%p373, %p27;
	@%p373 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3827;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5194, %r1331, %r417;
	mul.wide.s32 	%rd359, %r5194, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f503;

$L__BB0_573:
	add.s32 	%r1332, %r1326, 1;
	add.s32 	%r5195, %r1332, %r1328;
	mul.lo.s32 	%r5196, %r5195, %r58;
	sub.s32 	%r1333, %r5196, %r1794;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p375, %p24;
	@%p375 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3872;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5198, %r1333, %r402;
	mul.wide.s32 	%rd361, %r5198, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f504;

$L__BB0_576:
	not.pred 	%p376, %p26;
	@%p376 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3872;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5200, %r1333, %r403;
	mul.wide.s32 	%rd363, %r5200, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f505;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p378, %p25;
	@%p378 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3906;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5202, %r1333, %r416;
	mul.wide.s32 	%rd365, %r5202, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f506;

$L__BB0_581:
	not.pred 	%p379, %p27;
	@%p379 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3906;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5204, %r1333, %r417;
	mul.wide.s32 	%rd367, %r5204, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f507;

$L__BB0_583:
	add.s32 	%r1334, %r1325, -1;
	add.s32 	%r5205, %r1334, %r1327;
	mov.u32 	%r5206, 8;
	sub.s32 	%r5207, %r5206, %r1792;
	add.s32 	%r5208, %r5207, %r1793;
	mul.lo.s32 	%r1335, %r5205, %r5208;
	add.s32 	%r1336, %r1326, -1;
	add.s32 	%r5209, %r1336, %r1335;
	mul.lo.s32 	%r5210, %r5209, %r58;
	sub.s32 	%r1337, %r5210, %r1794;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p381, %p24;
	@%p381 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3951;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5212, %r1337, %r402;
	mul.wide.s32 	%rd369, %r5212, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f508;

$L__BB0_586:
	not.pred 	%p382, %p26;
	@%p382 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3951;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5214, %r1337, %r403;
	mul.wide.s32 	%rd371, %r5214, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f509;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p384, %p25;
	@%p384 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4028;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5216, %r1337, %r416;
	mul.wide.s32 	%rd373, %r5216, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f510;

$L__BB0_591:
	not.pred 	%p385, %p27;
	@%p385 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4028;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5218, %r1337, %r417;
	mul.wide.s32 	%rd375, %r5218, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f511;

$L__BB0_593:
	mov.u32 	%r5219, 8;
	sub.s32 	%r5220, %r5219, %r1792;
	add.s32 	%r5221, %r5220, %r1793;
	add.s32 	%r5222, %r1334, %r1330;
	mul.lo.s32 	%r1338, %r5222, %r5221;
	add.s32 	%r5223, %r1336, %r1338;
	mul.lo.s32 	%r5224, %r5223, %r58;
	sub.s32 	%r1339, %r5224, %r1794;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p387, %p24;
	@%p387 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3994;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5226, %r1339, %r402;
	mul.wide.s32 	%rd377, %r5226, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f512;

$L__BB0_596:
	not.pred 	%p388, %p26;
	@%p388 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3994;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5228, %r1339, %r403;
	mul.wide.s32 	%rd379, %r5228, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f513;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p390, %p25;
	@%p390 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4060;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5230, %r1339, %r416;
	mul.wide.s32 	%rd381, %r5230, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f514;

$L__BB0_601:
	not.pred 	%p391, %p27;
	@%p391 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4060;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5232, %r1339, %r417;
	mul.wide.s32 	%rd383, %r5232, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f515;

$L__BB0_603:
	add.s32 	%r5233, %r1326, %r1335;
	mul.lo.s32 	%r5234, %r5233, %r58;
	sub.s32 	%r1340, %r5234, %r1794;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p393, %p24;
	@%p393 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7665;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r5236, %r1340, %r402;
	mul.wide.s32 	%rd385, %r5236, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f516;

$L__BB0_606:
	not.pred 	%p394, %p26;
	@%p394 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7665;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r5238, %r1340, %r403;
	mul.wide.s32 	%rd387, %r5238, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f517;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p396, %p25;
	@%p396 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7660;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r5240, %r1340, %r416;
	mul.wide.s32 	%rd389, %r5240, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f518;

$L__BB0_611:
	not.pred 	%p397, %p27;
	@%p397 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7660;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r5242, %r1340, %r417;
	mul.wide.s32 	%rd391, %r5242, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f519;

$L__BB0_613:
	add.s32 	%r5243, %r1326, %r1338;
	mul.lo.s32 	%r5244, %r5243, %r58;
	sub.s32 	%r1341, %r5244, %r1794;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p399, %p24;
	@%p399 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7664;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r5246, %r1341, %r402;
	mul.wide.s32 	%rd393, %r5246, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f520;

$L__BB0_616:
	not.pred 	%p400, %p26;
	@%p400 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7664;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r5248, %r1341, %r403;
	mul.wide.s32 	%rd395, %r5248, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f521;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p402, %p25;
	@%p402 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r5250, %r1341, %r416;
	mul.wide.s32 	%rd397, %r5250, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f522;

$L__BB0_621:
	not.pred 	%p403, %p27;
	@%p403 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r5252, %r1341, %r417;
	mul.wide.s32 	%rd399, %r5252, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f523;

$L__BB0_623:
	mov.u32 	%r5253, 8;
	sub.s32 	%r5254, %r5253, %r1790;
	add.s32 	%r5255, %r5254, %r1791;
	add.s32 	%r1342, %r1330, %r5255;
	add.s32 	%r5256, %r1334, %r1342;
	sub.s32 	%r5257, %r5253, %r1792;
	add.s32 	%r5258, %r5257, %r1793;
	mul.lo.s32 	%r1343, %r5256, %r5258;
	add.s32 	%r5259, %r1326, %r1343;
	mul.lo.s32 	%r5260, %r5259, %r58;
	sub.s32 	%r1344, %r5260, %r1794;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p405, %p24;
	@%p405 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7758;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r5262, %r1344, %r402;
	mul.wide.s32 	%rd401, %r5262, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f524;

$L__BB0_626:
	not.pred 	%p406, %p26;
	@%p406 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7758;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r5264, %r1344, %r403;
	mul.wide.s32 	%rd403, %r5264, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f525;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p408, %p25;
	@%p408 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7755;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r5266, %r1344, %r416;
	mul.wide.s32 	%rd405, %r5266, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f526;

$L__BB0_631:
	not.pred 	%p409, %p27;
	@%p409 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7755;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r5268, %r1344, %r417;
	mul.wide.s32 	%rd407, %r5268, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f527;

$L__BB0_633:
	add.s32 	%r7411, %r1326, 1;
	add.s32 	%r5269, %r7411, %r1335;
	mul.lo.s32 	%r5270, %r5269, %r58;
	sub.s32 	%r1345, %r5270, %r1794;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p411, %p24;
	@%p411 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7655;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r5272, %r1345, %r402;
	mul.wide.s32 	%rd409, %r5272, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f528;

$L__BB0_636:
	not.pred 	%p412, %p26;
	@%p412 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7655;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r5274, %r1345, %r403;
	mul.wide.s32 	%rd411, %r5274, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f529;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p414, %p25;
	@%p414 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7653;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r5276, %r1345, %r416;
	mul.wide.s32 	%rd413, %r5276, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f530;

$L__BB0_641:
	not.pred 	%p415, %p27;
	@%p415 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7653;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r5278, %r1345, %r417;
	mul.wide.s32 	%rd415, %r5278, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f531;

$L__BB0_643:
	add.s32 	%r7412, %r1326, 1;
	add.s32 	%r5279, %r7412, %r1338;
	mul.lo.s32 	%r5280, %r5279, %r58;
	sub.s32 	%r1346, %r5280, %r1794;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p417, %p24;
	@%p417 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4332;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r5282, %r1346, %r402;
	mul.wide.s32 	%rd417, %r5282, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f532;

$L__BB0_646:
	not.pred 	%p418, %p26;
	@%p418 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4332;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r5284, %r1346, %r403;
	mul.wide.s32 	%rd419, %r5284, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f533;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p420, %p25;
	@%p420 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4413;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r5286, %r1346, %r416;
	mul.wide.s32 	%rd421, %r5286, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f534;

$L__BB0_651:
	not.pred 	%p421, %p27;
	@%p421 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4413;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r5288, %r1346, %r417;
	mul.wide.s32 	%rd423, %r5288, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f535;

$L__BB0_653:
	add.s32 	%r7413, %r1326, 1;
	add.s32 	%r5289, %r7413, %r1343;
	mul.lo.s32 	%r5290, %r5289, %r58;
	sub.s32 	%r1347, %r5290, %r1794;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p423, %p24;
	@%p423 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7752;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r5292, %r1347, %r402;
	mul.wide.s32 	%rd425, %r5292, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f536;

$L__BB0_656:
	not.pred 	%p424, %p26;
	@%p424 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7752;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r5294, %r1347, %r403;
	mul.wide.s32 	%rd427, %r5294, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f537;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p426, %p25;
	@%p426 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7749;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r5296, %r1347, %r416;
	mul.wide.s32 	%rd429, %r5296, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f538;

$L__BB0_661:
	not.pred 	%p427, %p27;
	@%p427 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7749;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r5298, %r1347, %r417;
	mul.wide.s32 	%rd431, %r5298, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f539;

$L__BB0_663:
	add.s32 	%r1348, %r1326, 2;
	add.s32 	%r5299, %r1348, %r1335;
	mul.lo.s32 	%r5300, %r5299, %r58;
	sub.s32 	%r1349, %r5300, %r1794;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p429, %p24;
	@%p429 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4473;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r5302, %r1349, %r402;
	mul.wide.s32 	%rd433, %r5302, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f540;

$L__BB0_666:
	not.pred 	%p430, %p26;
	@%p430 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4473;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r5304, %r1349, %r403;
	mul.wide.s32 	%rd435, %r5304, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f541;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p432, %p25;
	@%p432 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4507;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r5306, %r1349, %r416;
	mul.wide.s32 	%rd437, %r5306, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f542;

$L__BB0_671:
	not.pred 	%p433, %p27;
	@%p433 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4507;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r5308, %r1349, %r417;
	mul.wide.s32 	%rd439, %r5308, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f543;

$L__BB0_673:
	add.s32 	%r7414, %r1326, -1;
	mov.u32 	%r5309, 8;
	sub.s32 	%r5310, %r5309, %r1792;
	add.s32 	%r5311, %r5310, %r1793;
	mul.lo.s32 	%r1350, %r5181, %r5311;
	add.s32 	%r5313, %r7414, %r1350;
	mul.lo.s32 	%r5314, %r5313, %r58;
	sub.s32 	%r1351, %r5314, %r1794;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p435, %p24;
	@%p435 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7651;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r5316, %r1351, %r402;
	mul.wide.s32 	%rd441, %r5316, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f544;

$L__BB0_676:
	not.pred 	%p436, %p26;
	@%p436 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7651;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r5318, %r1351, %r403;
	mul.wide.s32 	%rd443, %r5318, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f545;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p438, %p25;
	@%p438 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r5320, %r1351, %r416;
	mul.wide.s32 	%rd445, %r5320, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f546;

$L__BB0_681:
	not.pred 	%p439, %p27;
	@%p439 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r5322, %r1351, %r417;
	mul.wide.s32 	%rd447, %r5322, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f547;

$L__BB0_683:
	mov.u32 	%r7419, 8;
	sub.s32 	%r7418, %r7419, %r1790;
	add.s32 	%r7417, %r7418, %r1791;
	add.s32 	%r7416, %r1330, %r7417;
	add.s32 	%r7415, %r1326, -1;
	mov.u32 	%r5323, 8;
	sub.s32 	%r5324, %r5323, %r1792;
	add.s32 	%r5325, %r5324, %r1793;
	add.s32 	%r5326, %r1325, %r7416;
	mul.lo.s32 	%r1352, %r5326, %r5325;
	add.s32 	%r5327, %r7415, %r1352;
	mul.lo.s32 	%r5328, %r5327, %r58;
	sub.s32 	%r1353, %r5328, %r1794;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p441, %p24;
	@%p441 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7745;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r5330, %r1353, %r402;
	mul.wide.s32 	%rd449, %r5330, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f548;

$L__BB0_686:
	not.pred 	%p442, %p26;
	@%p442 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7745;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r5332, %r1353, %r403;
	mul.wide.s32 	%rd451, %r5332, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f549;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p444, %p25;
	@%p444 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7743;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r5334, %r1353, %r416;
	mul.wide.s32 	%rd453, %r5334, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f550;

$L__BB0_691:
	not.pred 	%p445, %p27;
	@%p445 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7743;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r5336, %r1353, %r417;
	mul.wide.s32 	%rd455, %r5336, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f551;

$L__BB0_693:
	mov.u32 	%r5337, 8;
	sub.s32 	%r5338, %r5337, %r1792;
	add.s32 	%r5339, %r5338, %r1793;
	mul.lo.s32 	%r1354, %r5164, %r5339;
	add.s32 	%r5341, %r1326, %r1354;
	mul.lo.s32 	%r5342, %r5341, %r58;
	sub.s32 	%r1355, %r5342, %r1794;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p447, %p24;
	@%p447 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r5344, %r1355, %r402;
	mul.wide.s32 	%rd457, %r5344, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f552;

$L__BB0_696:
	not.pred 	%p448, %p26;
	@%p448 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r5346, %r1355, %r403;
	mul.wide.s32 	%rd459, %r5346, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f553;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p450, %p25;
	@%p450 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r5348, %r1355, %r416;
	mul.wide.s32 	%rd461, %r5348, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f554;

$L__BB0_701:
	not.pred 	%p451, %p27;
	@%p451 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r5350, %r1355, %r417;
	mul.wide.s32 	%rd463, %r5350, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f555;

$L__BB0_703:
	add.s32 	%r5351, %r1326, %r1350;
	mul.lo.s32 	%r5352, %r5351, %r58;
	sub.s32 	%r1356, %r5352, %r1794;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p453, %p24;
	@%p453 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r5354, %r1356, %r402;
	mul.wide.s32 	%rd465, %r5354, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f556;

$L__BB0_706:
	not.pred 	%p454, %p26;
	@%p454 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r5356, %r1356, %r403;
	mul.wide.s32 	%rd467, %r5356, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f557;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p456, %p25;
	@%p456 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r5358, %r1356, %r416;
	mul.wide.s32 	%rd469, %r5358, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f558;

$L__BB0_711:
	not.pred 	%p457, %p27;
	@%p457 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r5360, %r1356, %r417;
	mul.wide.s32 	%rd471, %r5360, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f559;

$L__BB0_713:
	add.s32 	%r5361, %r1326, %r1352;
	mul.lo.s32 	%r5362, %r5361, %r58;
	sub.s32 	%r1357, %r5362, %r1794;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p459, %p24;
	@%p459 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7740;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r5364, %r1357, %r402;
	mul.wide.s32 	%rd473, %r5364, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f560;

$L__BB0_716:
	not.pred 	%p460, %p26;
	@%p460 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7740;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r5366, %r1357, %r403;
	mul.wide.s32 	%rd475, %r5366, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f561;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p462, %p25;
	@%p462 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7737;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r5368, %r1357, %r416;
	mul.wide.s32 	%rd477, %r5368, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f562;

$L__BB0_721:
	not.pred 	%p463, %p27;
	@%p463 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7737;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r5370, %r1357, %r417;
	mul.wide.s32 	%rd479, %r5370, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f563;

$L__BB0_723:
	add.s32 	%r7420, %r1326, 1;
	add.s32 	%r5371, %r7420, %r1354;
	mul.lo.s32 	%r5372, %r5371, %r58;
	sub.s32 	%r1358, %r5372, %r1794;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p465, %p24;
	@%p465 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r5374, %r1358, %r402;
	mul.wide.s32 	%rd481, %r5374, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f564;

$L__BB0_726:
	not.pred 	%p466, %p26;
	@%p466 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r5376, %r1358, %r403;
	mul.wide.s32 	%rd483, %r5376, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f565;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p468, %p25;
	@%p468 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7619;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r5378, %r1358, %r416;
	mul.wide.s32 	%rd485, %r5378, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f566;

$L__BB0_731:
	not.pred 	%p469, %p27;
	@%p469 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7619;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r5380, %r1358, %r417;
	mul.wide.s32 	%rd487, %r5380, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f567;

$L__BB0_733:
	add.s32 	%r7421, %r1326, 1;
	add.s32 	%r5381, %r7421, %r1350;
	mul.lo.s32 	%r5382, %r5381, %r58;
	sub.s32 	%r1359, %r5382, %r1794;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p471, %p24;
	@%p471 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r5384, %r1359, %r402;
	mul.wide.s32 	%rd489, %r5384, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f568;

$L__BB0_736:
	not.pred 	%p472, %p26;
	@%p472 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r5386, %r1359, %r403;
	mul.wide.s32 	%rd491, %r5386, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f569;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p474, %p25;
	@%p474 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7618;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r5388, %r1359, %r416;
	mul.wide.s32 	%rd493, %r5388, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f570;

$L__BB0_741:
	not.pred 	%p475, %p27;
	@%p475 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7618;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r5390, %r1359, %r417;
	mul.wide.s32 	%rd495, %r5390, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f571;

$L__BB0_743:
	add.s32 	%r7422, %r1326, 1;
	add.s32 	%r5391, %r7422, %r1352;
	mul.lo.s32 	%r5392, %r5391, %r58;
	sub.s32 	%r1360, %r5392, %r1794;
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p477, %p24;
	@%p477 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7734;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r5394, %r1360, %r402;
	mul.wide.s32 	%rd497, %r5394, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f572;

$L__BB0_746:
	not.pred 	%p478, %p26;
	@%p478 bra 	$L__BB0_748;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7734;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r5396, %r1360, %r403;
	mul.wide.s32 	%rd499, %r5396, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f573;

$L__BB0_748:
	@%p28 bra 	$L__BB0_753;

	not.pred 	%p480, %p25;
	@%p480 bra 	$L__BB0_751;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7731;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r5398, %r1360, %r416;
	mul.wide.s32 	%rd501, %r5398, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f574;

$L__BB0_751:
	not.pred 	%p481, %p27;
	@%p481 bra 	$L__BB0_753;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7731;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r5400, %r1360, %r417;
	mul.wide.s32 	%rd503, %r5400, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f575;

$L__BB0_753:
	add.s32 	%r5401, %r1348, %r1352;
	mul.lo.s32 	%r5402, %r5401, %r58;
	sub.s32 	%r1361, %r5402, %r1794;
	@%p28 bra 	$L__BB0_758;

	not.pred 	%p483, %p24;
	@%p483 bra 	$L__BB0_756;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7730;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r5404, %r1361, %r402;
	mul.wide.s32 	%rd505, %r5404, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f576;

$L__BB0_756:
	not.pred 	%p484, %p26;
	@%p484 bra 	$L__BB0_758;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7730;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r5406, %r1361, %r403;
	mul.wide.s32 	%rd507, %r5406, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f577;

$L__BB0_758:
	@%p28 bra 	$L__BB0_763;

	not.pred 	%p486, %p25;
	@%p486 bra 	$L__BB0_761;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7729;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r5408, %r1361, %r416;
	mul.wide.s32 	%rd509, %r5408, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f578;

$L__BB0_761:
	not.pred 	%p487, %p27;
	@%p487 bra 	$L__BB0_763;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7729;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r5410, %r1361, %r417;
	mul.wide.s32 	%rd511, %r5410, 4;
	add.s64 	%rd512, %rd35, %rd511;
	st.global.f32 	[%rd512], %f579;

$L__BB0_763:
	add.s32 	%r1362, %r1325, 1;
	add.s32 	%r5411, %r1362, %r1330;
	mov.u32 	%r5412, 8;
	sub.s32 	%r5413, %r5412, %r1792;
	add.s32 	%r5414, %r5413, %r1793;
	mad.lo.s32 	%r5415, %r5411, %r5414, %r1326;
	mul.lo.s32 	%r5416, %r5415, %r58;
	sub.s32 	%r1363, %r5416, %r1794;
	@%p28 bra 	$L__BB0_768;

	not.pred 	%p489, %p24;
	@%p489 bra 	$L__BB0_766;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7598;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r5418, %r1363, %r402;
	mul.wide.s32 	%rd513, %r5418, 4;
	add.s64 	%rd514, %rd35, %rd513;
	st.global.f32 	[%rd514], %f580;

$L__BB0_766:
	not.pred 	%p490, %p26;
	@%p490 bra 	$L__BB0_768;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7598;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r5420, %r1363, %r403;
	mul.wide.s32 	%rd515, %r5420, 4;
	add.s64 	%rd516, %rd35, %rd515;
	st.global.f32 	[%rd516], %f581;

$L__BB0_768:
	@%p28 bra 	$L__BB0_773;

	not.pred 	%p492, %p25;
	@%p492 bra 	$L__BB0_771;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7591;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r5422, %r1363, %r416;
	mul.wide.s32 	%rd517, %r5422, 4;
	add.s64 	%rd518, %rd35, %rd517;
	st.global.f32 	[%rd518], %f582;

$L__BB0_771:
	not.pred 	%p493, %p27;
	@%p493 bra 	$L__BB0_773;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7591;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r5424, %r1363, %r417;
	mul.wide.s32 	%rd519, %r5424, 4;
	add.s64 	%rd520, %rd35, %rd519;
	st.global.f32 	[%rd520], %f583;

$L__BB0_773:
	mov.u32 	%r7426, 8;
	sub.s32 	%r7425, %r7426, %r1790;
	add.s32 	%r7424, %r7425, %r1791;
	add.s32 	%r7423, %r1330, %r7424;
	mov.u32 	%r5425, 8;
	sub.s32 	%r5426, %r5425, %r1792;
	add.s32 	%r5427, %r5426, %r1793;
	add.s32 	%r5428, %r1362, %r7423;
	mul.lo.s32 	%r1364, %r5428, %r5427;
	add.s32 	%r5429, %r1326, %r1364;
	mul.lo.s32 	%r5430, %r5429, %r58;
	sub.s32 	%r1365, %r5430, %r1794;
	@%p28 bra 	$L__BB0_778;

	not.pred 	%p495, %p24;
	@%p495 bra 	$L__BB0_776;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7727;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r5432, %r1365, %r402;
	mul.wide.s32 	%rd521, %r5432, 4;
	add.s64 	%rd522, %rd35, %rd521;
	st.global.f32 	[%rd522], %f584;

$L__BB0_776:
	not.pred 	%p496, %p26;
	@%p496 bra 	$L__BB0_778;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7727;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r5434, %r1365, %r403;
	mul.wide.s32 	%rd523, %r5434, 4;
	add.s64 	%rd524, %rd35, %rd523;
	st.global.f32 	[%rd524], %f585;

$L__BB0_778:
	@%p28 bra 	$L__BB0_783;

	not.pred 	%p498, %p25;
	@%p498 bra 	$L__BB0_781;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7725;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r5436, %r1365, %r416;
	mul.wide.s32 	%rd525, %r5436, 4;
	add.s64 	%rd526, %rd35, %rd525;
	st.global.f32 	[%rd526], %f586;

$L__BB0_781:
	not.pred 	%p499, %p27;
	@%p499 bra 	$L__BB0_783;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7725;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r5438, %r1365, %r417;
	mul.wide.s32 	%rd527, %r5438, 4;
	add.s64 	%rd528, %rd35, %rd527;
	st.global.f32 	[%rd528], %f587;

$L__BB0_783:
	add.s32 	%r7427, %r1326, 1;
	add.s32 	%r5439, %r7427, %r1364;
	mul.lo.s32 	%r5440, %r5439, %r58;
	sub.s32 	%r1366, %r5440, %r1794;
	@%p28 bra 	$L__BB0_788;

	not.pred 	%p501, %p24;
	@%p501 bra 	$L__BB0_786;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7724;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r5442, %r1366, %r402;
	mul.wide.s32 	%rd529, %r5442, 4;
	add.s64 	%rd530, %rd35, %rd529;
	st.global.f32 	[%rd530], %f588;

$L__BB0_786:
	not.pred 	%p502, %p26;
	@%p502 bra 	$L__BB0_788;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7724;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r5444, %r1366, %r403;
	mul.wide.s32 	%rd531, %r5444, 4;
	add.s64 	%rd532, %rd35, %rd531;
	st.global.f32 	[%rd532], %f589;

$L__BB0_788:
	@%p28 bra 	$L__BB0_793;

	not.pred 	%p504, %p25;
	@%p504 bra 	$L__BB0_791;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7723;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r5446, %r1366, %r416;
	mul.wide.s32 	%rd533, %r5446, 4;
	add.s64 	%rd534, %rd35, %rd533;
	st.global.f32 	[%rd534], %f590;

$L__BB0_791:
	not.pred 	%p505, %p27;
	@%p505 bra 	$L__BB0_793;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7723;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r5448, %r1366, %r417;
	mul.wide.s32 	%rd535, %r5448, 4;
	add.s64 	%rd536, %rd35, %rd535;
	st.global.f32 	[%rd536], %f591;

$L__BB0_793:
	setp.eq.s32 	%p506, %r41, %r2242;
	@%p506 bra 	$L__BB0_795;

	mad.lo.s32 	%r5449, %r1777, %r41, %r42;
	mov.u32 	%r5450, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5451, %r5449, 1280, %r5450;
	add.s32 	%r5452, %r5451, -256;
	shl.b32 	%r5453, %r46, 4;
	add.s32 	%r5454, %r5452, %r5453;
	st.shared.v4.u32 	[%r5454+256], {%r3951, %r4028, %r7745, %r7743};
	st.shared.v4.u32 	[%r5454+1024], {%r3718, %r3795, %r7758, %r7755};
	shl.b32 	%r5455, %r46, 3;
	add.s32 	%r5456, %r5452, %r5455;
	st.shared.v2.u32 	[%r5456+768], {%r3994, %r4060};

$L__BB0_795:
	setp.eq.s32 	%p507, %r42, %r2247;
	@%p507 bra 	$L__BB0_799;

	mad.lo.s32 	%r5460, %r1776, 384, -64;
	mul.lo.s32 	%r5461, %r5460, %r42;
	mad.lo.s32 	%r5463, %r2243, %r2242, %r5461;
	mad.lo.s32 	%r5464, %r2643, 384, %r5463;
	shl.b32 	%r5465, %r5464, 2;
	mov.u32 	%r5466, _ZN6kernel5shmemE;
	add.s32 	%r5467, %r5466, %r5465;
	add.s32 	%r5468, %r5467, -256;
	shl.b32 	%r5469, %r46, 4;
	add.s32 	%r5470, %r5468, %r5469;
	st.shared.v4.u32 	[%r5470+256], {%r3872, %r3906, %r7752, %r7749};
	st.shared.v4.u32 	[%r5470+1024], {%r4473, %r4507, %r7730, %r7729};
	shl.b32 	%r5471, %r46, 3;
	add.s32 	%r1370, %r5468, %r5471;
	@%p506 bra 	$L__BB0_798;

	st.shared.v2.u32 	[%r1370], {%r3761, %r3827};

$L__BB0_798:
	st.shared.v2.u32 	[%r1370+768], {%r4332, %r4413};

$L__BB0_799:
	setp.ne.s32 	%p509, %r41, %r2242;
	ld.param.u64 	%rd537, [%rd1+104];
	cvta.to.global.u64 	%rd36, %rd537;
	@%p509 bra 	$L__BB0_801;

	mad.lo.s32 	%r5473, %r675, %r1779, %r44;
	mul.lo.s32 	%r5474, %r1777, %r5473;
	mul.lo.s32 	%r5475, %r5474, 768;
	mad.lo.s32 	%r5476, %r42, 384, %r5475;
	add.s32 	%r5477, %r5476, -64;
	mul.wide.s32 	%rd538, %r5477, 4;
	add.s64 	%rd539, %rd36, %rd538;
	add.s64 	%rd541, %rd539, %rd303;
	st.global.v4.u32 	[%rd541+256], {%r3951, %r4028, %r7745, %r7743};
	st.global.v4.u32 	[%rd541+1024], {%r3718, %r3795, %r7758, %r7755};
	add.s64 	%rd543, %rd539, %rd305;
	st.global.v2.u32 	[%rd543+768], {%r3994, %r4060};
	st.global.v2.u32 	[%rd543+1536], {%r3761, %r3827};

$L__BB0_801:
	setp.ne.s32 	%p510, %r42, %r2247;
	@%p510 bra 	$L__BB0_806;

	ld.param.u64 	%rd587, [%rd1+104];
	cvta.to.global.u64 	%rd586, %rd587;
	mad.lo.s32 	%r5480, %r676, %r1778, %r43;
	mul.lo.s32 	%r5484, %r5480, %r1855;
	mad.lo.s32 	%r5487, %r2643, 384, %r5484;
	add.s32 	%r5488, %r5487, -64;
	mad.lo.s32 	%r5491, %r1857, %r69, %r5488;
	mul.wide.s32 	%rd544, %r5491, 4;
	add.s64 	%rd545, %rd586, %rd544;
	add.s64 	%rd547, %rd545, %rd303;
	st.global.v4.u32 	[%rd547+256], {%r3872, %r3906, %r7752, %r7749};
	st.global.v4.u32 	[%rd547+1024], {%r4473, %r4507, %r7730, %r7729};
	add.s64 	%rd37, %rd545, %rd305;
	@%p506 bra 	$L__BB0_804;

	st.global.v2.u32 	[%rd37], {%r3761, %r3827};

$L__BB0_804:
	st.global.v2.u32 	[%rd37+768], {%r4332, %r4413};
	@%p284 bra 	$L__BB0_806;

	st.global.v2.u32 	[%rd37+1536], {%r7837, %r7834};

$L__BB0_806:
	setp.ge.s32 	%p513, %r41, %r2242;
	@%p513 bra 	$L__BB0_808;

	mul.lo.s32 	%r5492, %r1777, 320;
	mul.lo.s32 	%r5493, %r42, 320;
	mad.lo.s32 	%r5494, %r5492, %r41, %r5493;
	add.s32 	%r5498, %r1854, -64;
	mad.lo.s32 	%r5502, %r5498, %r2247, %r2244;
	add.s32 	%r5503, %r5494, %r5502;
	shl.b32 	%r5504, %r5503, 2;
	mov.u32 	%r5505, _ZN6kernel5shmemE;
	add.s32 	%r5506, %r5505, %r5504;
	shl.b32 	%r5507, %r46, 4;
	add.s32 	%r5508, %r5506, %r5507;
	st.shared.v4.u32 	[%r5508], {%r7888, %r7887, %r7883, %r7881};
	shl.b32 	%r5509, %r46, 3;
	add.s32 	%r5510, %r5506, %r5509;
	st.shared.v2.u32 	[%r5510+512], {%r7649, %r7646};
	st.shared.v4.u32 	[%r5508+768], {%r7662, %r7657, %r7637, %r7628};

$L__BB0_808:
	setp.ge.s32 	%p514, %r42, %r2247;
	@%p514 bra 	$L__BB0_812;

	mad.lo.s32 	%r5516, %r2643, 384, %r2250;
	mad.lo.s32 	%r5519, %r2245, %r42, %r5516;
	add.s32 	%r5525, %r5519, %r2248;
	shl.b32 	%r5526, %r5525, 2;
	mov.u32 	%r5527, _ZN6kernel5shmemE;
	add.s32 	%r5528, %r5527, %r5526;
	shl.b32 	%r5529, %r46, 3;
	add.s32 	%r5530, %r5528, %r5529;
	@%p513 bra 	$L__BB0_811;

	add.s32 	%r7400, %r5530, -256;
	st.shared.v2.u32 	[%r7400], {%r7661, %r7656};

$L__BB0_811:
	shl.b32 	%r5549, %r46, 4;
	add.s32 	%r5550, %r5528, %r5549;
	st.shared.v4.u32 	[%r5550], {%r7654, %r7652, %r7620, %r7612};
	add.s32 	%r7401, %r5530, -256;
	st.shared.v2.u32 	[%r7401+768], {%r7621, %r7613};
	st.shared.v4.u32 	[%r5550+768], {%r7886, %r7885, %r7874, %r7873};

$L__BB0_812:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_814;

	mul.lo.s32 	%r5551, %r1777, 320;
	add.s32 	%r5552, %r41, -1;
	mul.lo.s32 	%r5553, %r42, 320;
	mad.lo.s32 	%r5554, %r5551, %r5552, %r5553;
	shl.b32 	%r5555, %r5554, 2;
	mov.u32 	%r5556, _ZN6kernel5shmemE;
	add.s32 	%r5557, %r5556, %r5555;
	add.s32 	%r5558, %r5557, -256;
	shl.b32 	%r5559, %r46, 4;
	add.s32 	%r5560, %r5558, %r5559;
	ld.shared.v4.u32 	{%r7832, %r7830, %r7839, %r7840}, [%r5560+256];
	ld.shared.v4.u32 	{%r7838, %r7835, %r7827, %r7828}, [%r5560+1024];
	shl.b32 	%r5569, %r46, 3;
	add.s32 	%r5570, %r5558, %r5569;
	ld.shared.v2.u32 	{%r7831, %r7829}, [%r5570+768];

$L__BB0_814:
	@%p282 bra 	$L__BB0_817;

	mad.lo.s32 	%r5575, %r1776, 384, -64;
	add.s32 	%r5576, %r42, -1;
	mul.lo.s32 	%r5577, %r5575, %r5576;
	mad.lo.s32 	%r5580, %r2243, %r2242, %r5577;
	mad.lo.s32 	%r5581, %r2643, 384, %r5580;
	shl.b32 	%r5582, %r5581, 2;
	mov.u32 	%r5583, _ZN6kernel5shmemE;
	add.s32 	%r5584, %r5583, %r5582;
	add.s32 	%r5585, %r5584, -256;
	shl.b32 	%r5586, %r46, 4;
	add.s32 	%r5587, %r5585, %r5586;
	ld.shared.v4.u32 	{%r7852, %r7851, %r7847, %r7845}, [%r5587+256];
	ld.shared.v4.u32 	{%r7842, %r7841, %r7844, %r7850}, [%r5587+1024];
	shl.b32 	%r5596, %r46, 3;
	add.s32 	%r5597, %r5585, %r5596;
	ld.shared.v2.u32 	{%r7848, %r7846}, [%r5597+768];
	@%p279 bra 	$L__BB0_817;

	add.s32 	%r7402, %r5597, 768;
	ld.shared.v2.u32 	{%r7833, %r7836}, [%r7402+768];

$L__BB0_817:
	ld.param.u64 	%rd549, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd549;
	mov.u32 	%r7964, %r7798;
	mov.u32 	%r7965, %r7799;
	mov.u32 	%r7967, %r7801;
	mov.u32 	%r7968, %r7802;
	mov.u32 	%r7988, %r7818;
	mov.u32 	%r7992, %r7822;
	mov.u32 	%r7973, %r7805;
	mov.u32 	%r7974, %r7806;
	mov.u32 	%r7975, %r7807;
	mov.u32 	%r7976, %r7808;
	mov.u32 	%r7993, %r7823;
	mov.u32 	%r7994, %r7824;
	@%p284 bra 	$L__BB0_821;

	mad.lo.s32 	%r5603, %r675, %r1779, %r44;
	mad.lo.s32 	%r5604, %r5603, 768, 384;
	mul.lo.s32 	%r5605, %r5604, %r1777;
	mad.lo.s32 	%r5606, %r42, 384, %r5605;
	add.s32 	%r5607, %r5606, -128;
	mul.wide.s32 	%rd550, %r5607, 4;
	add.s64 	%rd551, %rd38, %rd550;
	add.s64 	%rd553, %rd551, %rd303;
	add.s64 	%rd39, %rd553, 512;
	mov.u32 	%r7988, %r7818;
	mov.u32 	%r7992, %r7822;
	mov.u32 	%r7993, %r7823;
	mov.u32 	%r7994, %r7824;
	@%p282 bra 	$L__BB0_820;

	ld.global.v4.u32 	{%r7993, %r7994, %r7988, %r7992}, [%rd39+-512];

$L__BB0_820:
	ld.global.v4.u32 	{%r7974, %r7976, %r7973, %r7975}, [%rd39];
	ld.global.v4.u32 	{%r7968, %r7965, %r7964, %r7967}, [%rd39+512];
	ld.global.v4.u32 	{%r7797, %r7800, %r7804, %r7803}, [%rd39+1024];

$L__BB0_821:
	mov.u32 	%r7979, %r7809;
	mov.u32 	%r7980, %r7810;
	mov.u32 	%r7981, %r7811;
	mov.u32 	%r7982, %r7812;
	mov.u32 	%r7983, %r7813;
	mov.u32 	%r7984, %r7814;
	mov.u32 	%r7985, %r7815;
	mov.u32 	%r7990, %r7820;
	@%p287 bra 	$L__BB0_823;

	mad.lo.s32 	%r5625, %r676, %r1778, %r43;
	mad.lo.s32 	%r5633, %r2643, 384, %r70;
	mad.lo.s32 	%r5634, %r1857, %r69, %r5633;
	mad.lo.s32 	%r5635, %r5625, %r1855, %r5634;
	mul.wide.s32 	%rd554, %r5635, 4;
	add.s64 	%rd555, %rd38, %rd554;
	add.s64 	%rd557, %rd555, %rd303;
	ld.global.v4.u32 	{%r7817, %r7816, %r7821, %r7819}, [%rd557];
	ld.global.v4.u32 	{%r7985, %r7982, %r7979, %r7980}, [%rd557+512];
	ld.global.v4.u32 	{%r7984, %r7981, %r7983, %r7990}, [%rd557+1024];
	ld.global.v4.u32 	{%r7993, %r7994, %r7988, %r7992}, [%rd557+1536];

$L__BB0_823:
	neg.s32 	%r7408, %r1781;
	not.b32 	%r7407, %r44;
	add.s32 	%r7406, %r1779, %r7407;
	mul.lo.s32 	%r7405, %r7406, %r1780;
	not.b32 	%r7404, %r43;
	add.s32 	%r7403, %r1778, %r7404;
	mad.lo.s32 	%r5659, %r7403, %r1780, %r7405;
	add.s32 	%r5660, %r5659, %r1781;
	add.s32 	%r5669, %r5660, %r2649;
	add.s32 	%r1490, %r7684, 1;
	add.s32 	%r5670, %r1490, %r5669;
	div.s32 	%r5671, %r5670, %r1781;
	mad.lo.s32 	%r1491, %r5671, %r7408, %r5670;
	mad.lo.s32 	%r5678, %r5671, %r48, %r2660;
	ld.param.u64 	%rd558, [%rd1+120];
	cvta.to.global.u64 	%rd559, %rd558;
	rem.s32 	%r5679, %r5678, %r1782;
	shr.u32 	%r5680, %r5679, 31;
	add.s32 	%r5681, %r5679, %r5680;
	shr.s32 	%r5682, %r5681, 1;
	mad.lo.s32 	%r5683, %r5682, %r1781, %r1491;
	shl.b32 	%r5684, %r5683, 5;
	add.s32 	%r5685, %r5684, %r46;
	cvt.s64.s32 	%rd40, %r5685;
	mul.wide.s32 	%rd560, %r5685, 4;
	add.s64 	%rd561, %rd559, %rd560;
	ld.global.u32 	%r7686, [%rd561];
	ld.param.u64 	%rd562, [%rd1+128];
	cvta.to.global.u64 	%rd41, %rd562;
	@%p142 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	shl.b64 	%rd565, %rd40, 2;
	add.s64 	%rd566, %rd41, %rd565;
	ld.global.u32 	%r7685, [%rd566];
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	shl.b32 	%r5686, %r1491, 5;
	add.s32 	%r5687, %r5686, %r46;
	mul.wide.s32 	%rd563, %r5687, 16;
	add.s64 	%rd564, %rd41, %rd563;
	ld.global.v4.u32 	{%r5688, %r5689, %r5690, %r5691}, [%rd564];
	mov.u32 	%r7666, %r7670;
	mov.u32 	%r7667, %r7671;
	mov.u32 	%r7668, %r7672;
	mov.u32 	%r7669, %r7673;
	mov.u32 	%r7670, %r7674;
	mov.u32 	%r7671, %r7675;
	mov.u32 	%r7672, %r7676;
	mov.u32 	%r7673, %r7677;
	mov.u32 	%r7674, %r5691;
	mov.u32 	%r7675, %r5690;
	mov.u32 	%r7676, %r5689;
	mov.u32 	%r7677, %r5688;

$L__BB0_826:
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5692, {low,high};}

	// end inline asm
	selp.b32 	%r5694, %r7515, %r5692, %p28;
	// begin inline asm
	{mul.f16x2 %r7663,%r5694,%r7640;
}
	// end inline asm
	selp.b32 	%r5697, %r7519, %r5692, %p28;
	// begin inline asm
	{mul.f16x2 %r7658,%r5697,%r7631;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5699, {low,high};}

	// end inline asm
	selp.b32 	%r5701, %r7515, %r5699, %p28;
	// begin inline asm
	{mul.f16x2 %r7650,%r5701,%r7604;
}
	// end inline asm
	selp.b32 	%r5704, %r7519, %r5699, %p28;
	// begin inline asm
	{mul.f16x2 %r7647,%r5704,%r7599;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5706, {low,high};}

	// end inline asm
	selp.b32 	%r5708, %r7515, %r5706, %p28;
	// begin inline asm
	{mul.f16x2 %r5707,%r5708,%r7596;
}
	// end inline asm
	selp.b32 	%r5711, %r7519, %r5706, %p28;
	// begin inline asm
	{mul.f16x2 %r5710,%r5711,%r7589;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5713, {low,high};}

	// end inline asm
	selp.b32 	%r5715, %r7515, %r5713, %p28;
	// begin inline asm
	{mul.f16x2 %r5714,%r5715,%r7595;
}
	// end inline asm
	selp.b32 	%r5718, %r7519, %r5713, %p28;
	// begin inline asm
	{mul.f16x2 %r5717,%r5718,%r7588;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5720, {low,high};}

	// end inline asm
	selp.b32 	%r5722, %r7515, %r5720, %p28;
	// begin inline asm
	{mul.f16x2 %r7640,%r5722,%r7594;
}
	// end inline asm
	selp.b32 	%r5725, %r7519, %r5720, %p28;
	// begin inline asm
	{mul.f16x2 %r7631,%r5725,%r7587;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5727, {low,high};}

	// end inline asm
	selp.b32 	%r5729, %r7515, %r5727, %p28;
	// begin inline asm
	{mul.f16x2 %r5728,%r5729,%r7582;
}
	// end inline asm
	selp.b32 	%r5732, %r7519, %r5727, %p28;
	// begin inline asm
	{mul.f16x2 %r5731,%r5732,%r7577;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5734, {low,high};}

	// end inline asm
	selp.b32 	%r5736, %r7515, %r5734, %p28;
	// begin inline asm
	{mul.f16x2 %r7623,%r5736,%r7581;
}
	// end inline asm
	selp.b32 	%r5739, %r7519, %r5734, %p28;
	// begin inline asm
	{mul.f16x2 %r7615,%r5739,%r7576;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5741, {low,high};}

	// end inline asm
	selp.b32 	%r5743, %r7515, %r5741, %p28;
	// begin inline asm
	{mul.f16x2 %r5742,%r5743,%r7561;
}
	// end inline asm
	selp.b32 	%r5746, %r7519, %r5741, %p28;
	// begin inline asm
	{mul.f16x2 %r5745,%r5746,%r7554;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5748, {low,high};}

	// end inline asm
	selp.b32 	%r5750, %r7515, %r5748, %p28;
	// begin inline asm
	{mul.f16x2 %r5749,%r5750,%r7815;
}
	// end inline asm
	selp.b32 	%r5753, %r7519, %r5748, %p28;
	// begin inline asm
	{mul.f16x2 %r5752,%r5753,%r7812;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5755, {low,high};}

	// end inline asm
	selp.b32 	%r5757, %r7515, %r5755, %p28;
	// begin inline asm
	{mul.f16x2 %r7604,%r5757,%r7814;
}
	// end inline asm
	selp.b32 	%r5760, %r7519, %r5755, %p28;
	// begin inline asm
	{mul.f16x2 %r7599,%r5760,%r7811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5762, {low,high};}

	// end inline asm
	selp.b32 	%r5764, %r7515, %r5762, %p28;
	// begin inline asm
	{mul.f16x2 %r5763,%r5764,%r7548;
}
	// end inline asm
	selp.b32 	%r5767, %r7519, %r5762, %p28;
	// begin inline asm
	{mul.f16x2 %r5766,%r5767,%r7541;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5769, {low,high};}

	// end inline asm
	selp.b32 	%r5771, %r7515, %r5769, %p28;
	// begin inline asm
	{mul.f16x2 %r5770,%r5771,%r7547;
}
	// end inline asm
	selp.b32 	%r5774, %r7519, %r5769, %p28;
	// begin inline asm
	{mul.f16x2 %r5773,%r5774,%r7540;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5776, {low,high};}

	// end inline asm
	selp.b32 	%r5778, %r7515, %r5776, %p28;
	// begin inline asm
	{mul.f16x2 %r7594,%r5778,%r7546;
}
	// end inline asm
	selp.b32 	%r5781, %r7519, %r5776, %p28;
	// begin inline asm
	{mul.f16x2 %r7587,%r5781,%r7539;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5783, {low,high};}

	// end inline asm
	selp.b32 	%r5785, %r7515, %r5783, %p28;
	// begin inline asm
	{mul.f16x2 %r5784,%r5785,%r7534;
}
	// end inline asm
	selp.b32 	%r5788, %r7519, %r5783, %p28;
	// begin inline asm
	{mul.f16x2 %r5787,%r5788,%r7526;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5790, {low,high};}

	// end inline asm
	selp.b32 	%r5792, %r7515, %r5790, %p28;
	// begin inline asm
	{mul.f16x2 %r5791,%r5792,%r7533;
}
	// end inline asm
	selp.b32 	%r5795, %r7519, %r5790, %p28;
	// begin inline asm
	{mul.f16x2 %r5794,%r5795,%r7525;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5797, {low,high};}

	// end inline asm
	selp.b32 	%r5799, %r7515, %r5797, %p28;
	// begin inline asm
	{mul.f16x2 %r7581,%r5799,%r7802;
}
	// end inline asm
	selp.b32 	%r5802, %r7519, %r5797, %p28;
	// begin inline asm
	{mul.f16x2 %r7576,%r5802,%r7799;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5804, {low,high};}

	// end inline asm
	selp.b32 	%r5806, %r7515, %r5804, %p28;
	// begin inline asm
	{mul.f16x2 %r5805,%r5806,%r7798;
}
	// end inline asm
	selp.b32 	%r5809, %r7519, %r5804, %p28;
	// begin inline asm
	{mul.f16x2 %r5808,%r5809,%r7801;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5811, {low,high};}

	// end inline asm
	selp.b32 	%r5813, %r7515, %r5811, %p28;
	// begin inline asm
	{mul.f16x2 %r5812,%r5813,%r7809;
}
	// end inline asm
	selp.b32 	%r5816, %r7519, %r5811, %p28;
	// begin inline asm
	{mul.f16x2 %r5815,%r5816,%r7810;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5818, {low,high};}

	// end inline asm
	selp.b32 	%r5820, %r7515, %r5818, %p28;
	// begin inline asm
	{mul.f16x2 %r5819,%r5820,%r7557;
}
	// end inline asm
	selp.b32 	%r5823, %r7519, %r5818, %p28;
	// begin inline asm
	{mul.f16x2 %r5822,%r5823,%r7603;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5825, {low,high};}

	// end inline asm
	selp.b32 	%r5827, %r7515, %r5825, %p28;
	// begin inline asm
	{mul.f16x2 %r5826,%r5827,%r7813;
}
	// end inline asm
	selp.b32 	%r5830, %r7519, %r5825, %p28;
	// begin inline asm
	{mul.f16x2 %r5829,%r5830,%r7820;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5832, {low,high};}

	// end inline asm
	selp.b32 	%r5834, %r7515, %r5832, %p28;
	// begin inline asm
	{mul.f16x2 %r7546,%r5834,%r7818;
}
	// end inline asm
	selp.b32 	%r5837, %r7519, %r5832, %p28;
	// begin inline asm
	{mul.f16x2 %r7539,%r5837,%r7822;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5839, {low,high};}

	// end inline asm
	selp.b32 	%r5841, %r7515, %r5839, %p28;
	// begin inline asm
	{mul.f16x2 %r5840,%r5841,%r7805;
}
	// end inline asm
	selp.b32 	%r5844, %r7519, %r5839, %p28;
	// begin inline asm
	{mul.f16x2 %r5843,%r5844,%r7807;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5846, {low,high};}

	// end inline asm
	selp.b32 	%r5848, %r7515, %r5846, %p28;
	// begin inline asm
	{mul.f16x2 %r5847,%r5848,%r7806;
}
	// end inline asm
	selp.b32 	%r5851, %r7519, %r5846, %p28;
	// begin inline asm
	{mul.f16x2 %r5850,%r5851,%r7808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5853, {low,high};}

	// end inline asm
	selp.b32 	%r5855, %r7515, %r5853, %p28;
	// begin inline asm
	{mul.f16x2 %r5854,%r5855,%r7823;
}
	// end inline asm
	selp.b32 	%r5858, %r7519, %r5853, %p28;
	// begin inline asm
	{mul.f16x2 %r5857,%r5858,%r7824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5860,%r7664,%r3761;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5863,%r3872,%r3718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5866,%r5860,%r5863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5869,%r7429,%r5866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5872,%r7663,%r5869;
}
	// end inline asm
	@%p28 bra 	$L__BB0_828;

	mov.u32 	%r7663, %r5872;

$L__BB0_828:
	// begin inline asm
	{sub.f16x2 %r5875,%r7659,%r3827;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5878,%r3906,%r3795;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r5875,%r5878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5884,%r7429,%r5881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5887,%r7658,%r5884;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;

	mov.u32 	%r7658, %r5887;

$L__BB0_830:
	// begin inline asm
	{sub.f16x2 %r5890,%r7651,%r3994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5893,%r7665,%r3951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5896,%r5890,%r5893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5899,%r7429,%r5896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5902,%r7650,%r5899;
}
	// end inline asm
	@%p28 bra 	$L__BB0_832;

	mov.u32 	%r7650, %r5902;

$L__BB0_832:
	// begin inline asm
	{sub.f16x2 %r5905,%r7648,%r4060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5908,%r7660,%r4028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5911,%r5905,%r5908;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5914,%r7429,%r5911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5917,%r7647,%r5914;
}
	// end inline asm
	@%p28 bra 	$L__BB0_834;

	mov.u32 	%r7647, %r5917;

$L__BB0_834:
	// begin inline asm
	{sub.f16x2 %r5920,%r7659,%r7664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5923,%r7514,%r5920;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r8012,%r5707;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r8012,%r7515,%r5920;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r5934, 31;
	mov.u32 	%r5936, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5932,%r8012,%r5934,%r2346,%r5936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5937,%r5923,%r5932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5940,%r7752,%r7758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5943,%r5940,%r5937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5946,%r7429,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r5707,%r5946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r7660,%r7665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5955,%r7514,%r5952;
}
	// end inline asm
	mov.u32 	%r8013, %r5714;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r8013,%r7515,%r5952;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5964,%r8013,%r5934,%r2346,%r5936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5969,%r5955,%r5964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5972,%r7740,%r7758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5975,%r5969,%r5972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5978,%r7429,%r5975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r5714,%r5978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5984,%r7644,%r7664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5987,%r7655,%r7665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r5984,%r5987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5993,%r7429,%r5990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5996,%r7640,%r5993;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;

	mov.u32 	%r7640, %r5996;

$L__BB0_841:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7664;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r6007, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6003,%r7664,%r437,%r2346,%r6007;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6003;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6009, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6010,%r6009,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6013,%r7518,%r6010;
}
	// end inline asm
	@%p28 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r8015,%r5710;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r8015,%r7519,%r6010;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r6026, 31;
	mov.u32 	%r6050, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6024,%r8015,%r6026,%r2346,%r6050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6029,%r6013,%r6024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6032,%r7749,%r7755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r6032,%r6029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r7429,%r6035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r5710,%r6038;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7665;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6046,%r7665,%r437,%r2346,%r6050;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6046;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6052, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6053,%r6052,%r7660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6056,%r7518,%r6053;
}
	// end inline asm
	mov.u32 	%r8016, %r5717;
	@%p28 bra 	$L__BB0_846;

	// begin inline asm
	{mul.f16x2 %r8016,%r7519,%r6053;
}
	// end inline asm

$L__BB0_846:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6067,%r8016,%r6026,%r2346,%r6050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6072,%r6056,%r6067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6075,%r7737,%r7755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6078,%r6072,%r6075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6081,%r7429,%r6078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r5717,%r6081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6087,%r7635,%r7659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6090,%r7653,%r7660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6093,%r6087,%r6090;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6096,%r7429,%r6093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6099,%r7631,%r6096;
}
	// end inline asm
	@%p28 bra 	$L__BB0_848;

	mov.u32 	%r7631, %r6099;

$L__BB0_848:
	// begin inline asm
	{sub.f16x2 %r6104,%r7653,%r7655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6107,%r7514,%r6104;
}
	// end inline asm
	mov.u32 	%r8018, %r5728;
	@%p28 bra 	$L__BB0_850;

	// begin inline asm
	{mul.f16x2 %r8018,%r7515,%r6104;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r6116, 31;
	mov.u32 	%r6118, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6114,%r8018,%r6116,%r2346,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6119,%r6107,%r6114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6122,%r7734,%r7752;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6125,%r6119,%r6122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6128,%r7429,%r6125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7624,%r5728,%r6128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r7626,%r4332;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6137,%r4473,%r7655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6140,%r6134,%r6137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6143,%r7429,%r6140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6146,%r7623,%r6143;
}
	// end inline asm
	@%p28 bra 	$L__BB0_852;

	mov.u32 	%r7623, %r6146;

$L__BB0_852:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7655;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6153,%r7655,%r437,%r2346,%r6118;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6153;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6159, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6160,%r6159,%r7653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6163,%r7518,%r6160;
}
	// end inline asm
	mov.u32 	%r8020, %r5731;
	@%p28 bra 	$L__BB0_854;

	// begin inline asm
	{mul.f16x2 %r8020,%r7519,%r6160;
}
	// end inline asm

$L__BB0_854:
	mov.u32 	%r6174, 31;
	mov.u32 	%r6176, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6172,%r8020,%r6174,%r2346,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6177,%r6163,%r6172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6180,%r7731,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6183,%r6177,%r6180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6186,%r7429,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7616,%r5731,%r6186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6192,%r7618,%r4413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6195,%r4507,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6198,%r6192,%r6195;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6201,%r7429,%r6198;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6204,%r7615,%r6201;
}
	// end inline asm
	@%p28 bra 	$L__BB0_856;

	mov.u32 	%r7615, %r6204;

$L__BB0_856:
	// begin inline asm
	{sub.f16x2 %r6209,%r7648,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6212,%r7514,%r6209;
}
	// end inline asm
	@%p28 bra 	$L__BB0_858;
	bra.uni 	$L__BB0_857;

$L__BB0_858:
	// begin inline asm
	{neg.f16x2 %r8022,%r5742;
}
	// end inline asm
	bra.uni 	$L__BB0_859;

$L__BB0_857:
	// begin inline asm
	{mul.f16x2 %r8022,%r7515,%r6209;
}
	// end inline asm

$L__BB0_859:
	mov.u32 	%r6223, 31;
	mov.u32 	%r6225, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6221,%r8022,%r6223,%r2346,%r6225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6226,%r6212,%r6221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6229,%r7740,%r7745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6232,%r6229,%r6226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6235,%r7429,%r6232;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r5742,%r6235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6241,%r7851,%r7852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6244,%r7514,%r6241;
}
	// end inline asm
	mov.u32 	%r8023, %r5749;
	@%p28 bra 	$L__BB0_861;

	// begin inline asm
	{mul.f16x2 %r8023,%r7515,%r6241;
}
	// end inline asm

$L__BB0_861:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6253,%r8023,%r6223,%r2346,%r6225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6258,%r6244,%r6253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6261,%r7847,%r7745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6264,%r6258,%r6261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6267,%r7429,%r6264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7605,%r5749,%r6267;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6273,%r7848,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6276,%r7645,%r7852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6273,%r6276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r7429,%r6279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6285,%r7604,%r6282;
}
	// end inline asm
	@%p28 bra 	$L__BB0_863;

	mov.u32 	%r7604, %r6285;

$L__BB0_863:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6296, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6292,%r7651,%r437,%r2346,%r6296;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6292;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6298, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6299,%r6298,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6302,%r7518,%r6299;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r8025,%r5745;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r8025,%r7519,%r6299;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r6315, 31;
	mov.u32 	%r6339, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6313,%r8025,%r6315,%r2346,%r6339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6318,%r6302,%r6313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6321,%r7737,%r7743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r6321,%r6318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r7429,%r6324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r5745,%r6327;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7852;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6335,%r7852,%r437,%r2346,%r6339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6335;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6341, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r6341,%r7851;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6345,%r7518,%r6342;
}
	// end inline asm
	mov.u32 	%r8026, %r5752;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r8026,%r7519,%r6342;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6356,%r8026,%r6315,%r2346,%r6339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6361,%r6345,%r6356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6364,%r7845,%r7743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6367,%r6361,%r6364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6370,%r7429,%r6367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r5752,%r6370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6376,%r7846,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6379,%r7636,%r7851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6382,%r6376,%r6379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6385,%r7429,%r6382;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6388,%r7599,%r6385;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;

	mov.u32 	%r7599, %r6388;

$L__BB0_870:
	// begin inline asm
	{sub.f16x2 %r6393,%r7635,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6396,%r7514,%r6393;
}
	// end inline asm
	@%p28 bra 	$L__BB0_872;
	bra.uni 	$L__BB0_871;

$L__BB0_872:
	// begin inline asm
	{neg.f16x2 %r8028,%r5763;
}
	// end inline asm
	bra.uni 	$L__BB0_873;

$L__BB0_871:
	// begin inline asm
	{mul.f16x2 %r8028,%r7515,%r6393;
}
	// end inline asm

$L__BB0_873:
	mov.u32 	%r6407, 31;
	mov.u32 	%r6409, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6405,%r8028,%r6407,%r2346,%r6409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6410,%r6396,%r6405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6413,%r7734,%r7740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6416,%r6413,%r6410;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6419,%r7429,%r6416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r5763,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6425,%r7636,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6428,%r7514,%r6425;
}
	// end inline asm
	mov.u32 	%r8029, %r5770;
	@%p28 bra 	$L__BB0_875;

	// begin inline asm
	{mul.f16x2 %r8029,%r7515,%r6425;
}
	// end inline asm

$L__BB0_875:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6437,%r8029,%r6407,%r2346,%r6409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6442,%r6428,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6445,%r7727,%r7740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6448,%r6442,%r6445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6451,%r7429,%r6448;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r5770,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6457,%r7598,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6460,%r7627,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6463,%r6457,%r6460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6466,%r7429,%r6463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6469,%r7594,%r6466;
}
	// end inline asm
	@%p28 bra 	$L__BB0_877;

	mov.u32 	%r7594, %r6469;

$L__BB0_877:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7644;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6480, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6476,%r7644,%r437,%r2346,%r6480;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6476;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6482, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6483,%r6482,%r7635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6486,%r7518,%r6483;
}
	// end inline asm
	@%p28 bra 	$L__BB0_879;
	bra.uni 	$L__BB0_878;

$L__BB0_879:
	// begin inline asm
	{neg.f16x2 %r8031,%r5766;
}
	// end inline asm
	bra.uni 	$L__BB0_880;

$L__BB0_878:
	// begin inline asm
	{mul.f16x2 %r8031,%r7519,%r6483;
}
	// end inline asm

$L__BB0_880:
	mov.u32 	%r6499, 31;
	mov.u32 	%r6523, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6497,%r8031,%r6499,%r2346,%r6523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6486,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6505,%r7731,%r7737;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r6505,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6511,%r7429,%r6508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7589,%r5766,%r6511;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6519,%r7645,%r437,%r2346,%r6523;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6519;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6525, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r6525,%r7636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6529,%r7518,%r6526;
}
	// end inline asm
	mov.u32 	%r8032, %r5773;
	@%p28 bra 	$L__BB0_882;

	// begin inline asm
	{mul.f16x2 %r8032,%r7519,%r6526;
}
	// end inline asm

$L__BB0_882:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6540,%r8032,%r6499,%r2346,%r6523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6545,%r6529,%r6540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6548,%r7725,%r7737;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6551,%r6545,%r6548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6554,%r7429,%r6551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r5773,%r6554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6560,%r7591,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6563,%r7619,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6566,%r6560,%r6563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6569,%r7429,%r6566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6572,%r7587,%r6569;
}
	// end inline asm
	@%p28 bra 	$L__BB0_884;

	mov.u32 	%r7587, %r6572;

$L__BB0_884:
	// begin inline asm
	{sub.f16x2 %r6577,%r7618,%r7626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6580,%r7514,%r6577;
}
	// end inline asm
	@%p28 bra 	$L__BB0_886;
	bra.uni 	$L__BB0_885;

$L__BB0_886:
	// begin inline asm
	{neg.f16x2 %r8034,%r5784;
}
	// end inline asm
	bra.uni 	$L__BB0_887;

$L__BB0_885:
	// begin inline asm
	{mul.f16x2 %r8034,%r7515,%r6577;
}
	// end inline asm

$L__BB0_887:
	mov.u32 	%r6591, 31;
	mov.u32 	%r6593, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6589,%r8034,%r6591,%r2346,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6594,%r6580,%r6589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6597,%r7730,%r7734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6600,%r6597,%r6594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6603,%r7429,%r6600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r5784,%r6603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6609,%r7619,%r7627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6612,%r7514,%r6609;
}
	// end inline asm
	mov.u32 	%r8035, %r5791;
	@%p28 bra 	$L__BB0_889;

	// begin inline asm
	{mul.f16x2 %r8035,%r7515,%r6609;
}
	// end inline asm

$L__BB0_889:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6621,%r8035,%r6591,%r2346,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6626,%r6612,%r6621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6629,%r7724,%r7734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6632,%r6626,%r6629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6635,%r7429,%r6632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7582,%r5791,%r6635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6641,%r7831,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6644,%r7838,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6647,%r6641,%r6644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6650,%r7429,%r6647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6653,%r7581,%r6650;
}
	// end inline asm
	@%p28 bra 	$L__BB0_891;

	mov.u32 	%r7581, %r6653;

$L__BB0_891:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7626;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6664, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6660,%r7626,%r437,%r2346,%r6664;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6660;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6666, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6667,%r6666,%r7618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6670,%r7518,%r6667;
}
	// end inline asm
	@%p28 bra 	$L__BB0_893;
	bra.uni 	$L__BB0_892;

$L__BB0_893:
	// begin inline asm
	{neg.f16x2 %r8037,%r5787;
}
	// end inline asm
	bra.uni 	$L__BB0_894;

$L__BB0_892:
	// begin inline asm
	{mul.f16x2 %r8037,%r7519,%r6667;
}
	// end inline asm

$L__BB0_894:
	mov.u32 	%r6683, 31;
	mov.u32 	%r6707, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6681,%r8037,%r6683,%r2346,%r6707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6686,%r6670,%r6681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6689,%r7729,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6692,%r6689,%r6686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6695,%r7429,%r6692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r5787,%r6695;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7627;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6703,%r7627,%r437,%r2346,%r6707;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6703;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6709, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6710,%r6709,%r7619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6713,%r7518,%r6710;
}
	// end inline asm
	mov.u32 	%r8038, %r5794;
	@%p28 bra 	$L__BB0_896;

	// begin inline asm
	{mul.f16x2 %r8038,%r7519,%r6710;
}
	// end inline asm

$L__BB0_896:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6724,%r8038,%r6683,%r2346,%r6707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6729,%r6713,%r6724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6732,%r7723,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6735,%r6729,%r6732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6738,%r7429,%r6735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r5794,%r6738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6744,%r7829,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6747,%r7835,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6750,%r6744,%r6747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6753,%r7429,%r6750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6756,%r7576,%r6753;
}
	// end inline asm
	@%p28 bra 	$L__BB0_898;

	mov.u32 	%r7576, %r6756;

$L__BB0_898:
	// begin inline asm
	{sub.f16x2 %r6761,%r7835,%r7838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6764,%r7514,%r6761;
}
	// end inline asm
	mov.u32 	%r8040, %r5805;
	@%p28 bra 	$L__BB0_900;

	// begin inline asm
	{mul.f16x2 %r8040,%r7515,%r6761;
}
	// end inline asm

$L__BB0_900:
	mov.u32 	%r6773, 31;
	mov.u32 	%r6797, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6771,%r8040,%r6773,%r2346,%r6797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6776,%r6764,%r6771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6779,%r7827,%r7730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6782,%r6776,%r6779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6785,%r7429,%r6782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r5805,%r6785;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7838;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6793,%r7838,%r437,%r2346,%r6797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6793;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6799, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6800,%r6799,%r7835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6803,%r7518,%r6800;
}
	// end inline asm
	mov.u32 	%r8041, %r5808;
	@%p28 bra 	$L__BB0_902;

	// begin inline asm
	{mul.f16x2 %r8041,%r7519,%r6800;
}
	// end inline asm

$L__BB0_902:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6814,%r8041,%r6773,%r2346,%r6797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6819,%r6803,%r6814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6822,%r7828,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6825,%r6819,%r6822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6828,%r7429,%r6825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r5808,%r6828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6834,%r7846,%r7848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6837,%r7514,%r6834;
}
	// end inline asm
	@%p28 bra 	$L__BB0_904;
	bra.uni 	$L__BB0_903;

$L__BB0_904:
	// begin inline asm
	{neg.f16x2 %r8042,%r5812;
}
	// end inline asm
	bra.uni 	$L__BB0_905;

$L__BB0_903:
	// begin inline asm
	{mul.f16x2 %r8042,%r7515,%r6834;
}
	// end inline asm

$L__BB0_905:
	mov.u32 	%r6850, 31;
	mov.u32 	%r6874, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6848,%r8042,%r6850,%r2346,%r6874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6853,%r6837,%r6848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6856,%r7727,%r7847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6859,%r6856,%r6853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6862,%r7429,%r6859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r5812,%r6862;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7848;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6870,%r7848,%r437,%r2346,%r6874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6870;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6876, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6877,%r6876,%r7846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6880,%r7518,%r6877;
}
	// end inline asm
	@%p28 bra 	$L__BB0_907;
	bra.uni 	$L__BB0_906;

$L__BB0_907:
	// begin inline asm
	{neg.f16x2 %r8043,%r5815;
}
	// end inline asm
	bra.uni 	$L__BB0_908;

$L__BB0_906:
	// begin inline asm
	{mul.f16x2 %r8043,%r7519,%r6877;
}
	// end inline asm

$L__BB0_908:
	mov.u32 	%r6895, 31;
	mov.u32 	%r6897, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6893,%r8043,%r6895,%r2346,%r6897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6898,%r6880,%r6893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6901,%r7725,%r7845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6904,%r6901,%r6898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6907,%r7429,%r6904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r5815,%r6907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6913,%r7591,%r7598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6916,%r7514,%r6913;
}
	// end inline asm
	@%p28 bra 	$L__BB0_910;
	bra.uni 	$L__BB0_909;

$L__BB0_910:
	// begin inline asm
	{neg.f16x2 %r8044,%r5819;
}
	// end inline asm
	bra.uni 	$L__BB0_911;

$L__BB0_909:
	// begin inline asm
	{mul.f16x2 %r8044,%r7515,%r6913;
}
	// end inline asm

$L__BB0_911:
	mov.u32 	%r6929, 31;
	mov.u32 	%r6931, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6927,%r8044,%r6929,%r2346,%r6931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6932,%r6916,%r6927;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6935,%r7724,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6938,%r6935,%r6932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6941,%r7429,%r6938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r5819,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6947,%r7841,%r7842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6950,%r7514,%r6947;
}
	// end inline asm
	mov.u32 	%r8045, %r5826;
	@%p28 bra 	$L__BB0_913;

	// begin inline asm
	{mul.f16x2 %r8045,%r7515,%r6947;
}
	// end inline asm

$L__BB0_913:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6959,%r8045,%r6929,%r2346,%r6931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6964,%r6950,%r6959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6967,%r7844,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6970,%r6964,%r6967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6973,%r7429,%r6970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r5826,%r6973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6979,%r7833,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6982,%r7832,%r7842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6985,%r6979,%r6982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6988,%r7429,%r6985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6991,%r7546,%r6988;
}
	// end inline asm
	@%p28 bra 	$L__BB0_915;

	mov.u32 	%r7546, %r6991;

$L__BB0_915:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7598;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r7002, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6998,%r7598,%r437,%r2346,%r7002;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6998;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7004, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7005,%r7004,%r7591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7008,%r7518,%r7005;
}
	// end inline asm
	@%p28 bra 	$L__BB0_917;
	bra.uni 	$L__BB0_916;

$L__BB0_917:
	// begin inline asm
	{neg.f16x2 %r8047,%r5822;
}
	// end inline asm
	bra.uni 	$L__BB0_918;

$L__BB0_916:
	// begin inline asm
	{mul.f16x2 %r8047,%r7519,%r7005;
}
	// end inline asm

$L__BB0_918:
	mov.u32 	%r7021, 31;
	mov.u32 	%r7045, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7019,%r8047,%r7021,%r2346,%r7045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r7008,%r7019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7027,%r7723,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7030,%r7027,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7033,%r7429,%r7030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r5822,%r7033;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7842;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7041,%r7842,%r437,%r2346,%r7045;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7041;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7047, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7048,%r7047,%r7841;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7051,%r7518,%r7048;
}
	// end inline asm
	mov.u32 	%r8048, %r5829;
	@%p28 bra 	$L__BB0_920;

	// begin inline asm
	{mul.f16x2 %r8048,%r7519,%r7048;
}
	// end inline asm

$L__BB0_920:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7062,%r8048,%r7021,%r2346,%r7045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7067,%r7051,%r7062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7070,%r7850,%r7725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7073,%r7067,%r7070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7076,%r7429,%r7073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r5829,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7082,%r7836,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7085,%r7830,%r7841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7088,%r7082,%r7085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7091,%r7429,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7094,%r7539,%r7091;
}
	// end inline asm
	@%p28 bra 	$L__BB0_922;

	mov.u32 	%r7539, %r7094;

$L__BB0_922:
	// begin inline asm
	{sub.f16x2 %r7099,%r7829,%r7831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7102,%r7514,%r7099;
}
	// end inline asm
	@%p28 bra 	$L__BB0_924;
	bra.uni 	$L__BB0_923;

$L__BB0_924:
	// begin inline asm
	{neg.f16x2 %r8050,%r5840;
}
	// end inline asm
	bra.uni 	$L__BB0_925;

$L__BB0_923:
	// begin inline asm
	{mul.f16x2 %r8050,%r7515,%r7099;
}
	// end inline asm

$L__BB0_925:
	mov.u32 	%r7113, 31;
	mov.u32 	%r7115, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7111,%r8050,%r7113,%r2346,%r7115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7116,%r7102,%r7111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7119,%r7827,%r7724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7122,%r7119,%r7116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7125,%r7429,%r7122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r5840,%r7125;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7131,%r7830,%r7832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7134,%r7514,%r7131;
}
	// end inline asm
	mov.u32 	%r8051, %r5847;
	@%p28 bra 	$L__BB0_927;

	// begin inline asm
	{mul.f16x2 %r8051,%r7515,%r7131;
}
	// end inline asm

$L__BB0_927:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7143,%r8051,%r7113,%r2346,%r7115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r7134,%r7143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7151,%r7839,%r7724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7154,%r7148,%r7151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7157,%r7429,%r7154;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r5847,%r7157;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7831;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7165,%r7831,%r437,%r2346,%r7115;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7165;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7171, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7172,%r7171,%r7829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7175,%r7518,%r7172;
}
	// end inline asm
	@%p28 bra 	$L__BB0_929;
	bra.uni 	$L__BB0_928;

$L__BB0_929:
	// begin inline asm
	{neg.f16x2 %r8052,%r5843;
}
	// end inline asm
	bra.uni 	$L__BB0_930;

$L__BB0_928:
	// begin inline asm
	{mul.f16x2 %r8052,%r7519,%r7172;
}
	// end inline asm

$L__BB0_930:
	mov.u32 	%r7190, 31;
	mov.u32 	%r7214, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7188,%r8052,%r7190,%r2346,%r7214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r7175,%r7188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7196,%r7828,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7199,%r7196,%r7193;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7202,%r7429,%r7199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r5843,%r7202;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7832;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7210,%r7832,%r437,%r2346,%r7214;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7210;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7216, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7217,%r7216,%r7830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7220,%r7518,%r7217;
}
	// end inline asm
	mov.u32 	%r8053, %r5850;
	@%p28 bra 	$L__BB0_932;

	// begin inline asm
	{mul.f16x2 %r8053,%r7519,%r7217;
}
	// end inline asm

$L__BB0_932:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7231,%r8053,%r7190,%r2346,%r7214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7236,%r7220,%r7231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7239,%r7840,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7242,%r7236,%r7239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7245,%r7429,%r7242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r5850,%r7245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7251,%r7836,%r7833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7254,%r7514,%r7251;
}
	// end inline asm
	@%p28 bra 	$L__BB0_934;
	bra.uni 	$L__BB0_933;

$L__BB0_934:
	// begin inline asm
	{neg.f16x2 %r8054,%r5854;
}
	// end inline asm
	bra.uni 	$L__BB0_935;

$L__BB0_933:
	// begin inline asm
	{mul.f16x2 %r8054,%r7515,%r7251;
}
	// end inline asm

$L__BB0_935:
	mov.u32 	%r7267, 31;
	mov.u32 	%r7291, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7265,%r8054,%r7267,%r2346,%r7291;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7270,%r7254,%r7265;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7273,%r7839,%r7844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7276,%r7273,%r7270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7279,%r7429,%r7276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r5854,%r7279;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7833;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7287,%r7833,%r437,%r2346,%r7291;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7287;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7293, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7294,%r7293,%r7836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7297,%r7518,%r7294;
}
	// end inline asm
	@%p28 bra 	$L__BB0_937;
	bra.uni 	$L__BB0_936;

$L__BB0_937:
	// begin inline asm
	{neg.f16x2 %r8055,%r5857;
}
	// end inline asm
	bra.uni 	$L__BB0_938;

$L__BB0_936:
	// begin inline asm
	{mul.f16x2 %r8055,%r7519,%r7294;
}
	// end inline asm

$L__BB0_938:
	mov.u32 	%r7312, 31;
	mov.u32 	%r7314, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7310,%r8055,%r7312,%r2346,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7315,%r7297,%r7310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7318,%r7840,%r7850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7321,%r7318,%r7315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7324,%r7429,%r7321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7603,%r5857,%r7324;
}
	// end inline asm
	bar.sync 	0;
	@%p506 bra 	$L__BB0_941;

	setp.ne.s32 	%p585, %r42, %r2247;
	shl.b32 	%r7333, %r42, 8;
	shl.b32 	%r7337, %r1777, 8;
	or.b32  	%r7338, %r7337, 128;
	mad.lo.s32 	%r7339, %r7338, %r41, %r2250;
	add.s32 	%r7340, %r7339, %r7333;
	shl.b32 	%r7341, %r7340, 2;
	mov.u32 	%r7342, _ZN6kernel5shmemE;
	add.s32 	%r7343, %r7342, %r7341;
	shl.b32 	%r7344, %r46, 4;
	add.s32 	%r1773, %r7343, %r7344;
	st.shared.v4.u32 	[%r1773], {%r7605, %r7600, %r7606, %r7601};
	st.shared.v4.u32 	[%r1773+512], {%r7650, %r7647, %r7641, %r7632};
	@%p585 bra 	$L__BB0_941;

	st.shared.v4.u32 	[%r1773+1024], {%r7642, %r7633, %r7663, %r7658};

$L__BB0_941:
	setp.eq.s32 	%p583, %r42, %r2247;
	@%p583 bra 	$L__BB0_943;

	mul.lo.s32 	%r7348, %r2643, 384;
	mad.lo.s32 	%r7349, %r70, %r42, %r7348;
	mad.lo.s32 	%r7352, %r2245, %r2247, %r7349;
	mad.lo.s32 	%r7355, %r2243, %r2242, %r7352;
	shl.b32 	%r7356, %r7355, 2;
	mov.u32 	%r7357, _ZN6kernel5shmemE;
	add.s32 	%r7358, %r7357, %r7356;
	shl.b32 	%r7359, %r46, 4;
	add.s32 	%r7360, %r7358, %r7359;
	st.shared.v4.u32 	[%r7360], {%r7642, %r7633, %r7663, %r7658};
	st.shared.v4.u32 	[%r7360+512], {%r7624, %r7616, %r7583, %r7578};
	st.shared.v4.u32 	[%r7360+1024], {%r7623, %r7615, %r7572, %r7568};

$L__BB0_943:
	setp.ne.s32 	%p584, %r41, %r2242;
	ld.param.u64 	%rd567, [%rd1+104];
	cvta.to.global.u64 	%rd42, %rd567;
	@%p584 bra 	$L__BB0_945;

	mad.lo.s32 	%r7362, %r675, %r1779, %r44;
	mul.lo.s32 	%r7363, %r7362, %r1777;
	mul.lo.s32 	%r7364, %r7363, 768;
	add.s32 	%r7365, %r1777, %r42;
	mad.lo.s32 	%r7366, %r7365, 384, %r7364;
	add.s32 	%r7367, %r7366, -128;
	mul.wide.s32 	%rd568, %r7367, 4;
	add.s64 	%rd569, %rd42, %rd568;
	add.s64 	%rd571, %rd569, %rd303;
	st.global.v4.u32 	[%rd571+512], {%r7605, %r7600, %r7606, %r7601};
	st.global.v4.u32 	[%rd571+1024], {%r7650, %r7647, %r7641, %r7632};
	st.global.v4.u32 	[%rd571+1536], {%r7642, %r7633, %r7663, %r7658};

$L__BB0_945:
	setp.ne.s32 	%p586, %r42, %r2247;
	@%p586 bra 	$L__BB0_948;

	mad.lo.s32 	%r7369, %r676, %r1778, %r43;
	mad.lo.s32 	%r7377, %r2643, 384, %r70;
	mad.lo.s32 	%r7378, %r1857, %r69, %r7377;
	mad.lo.s32 	%r7379, %r7369, %r1855, %r7378;
	mul.wide.s32 	%rd572, %r7379, 4;
	add.s64 	%rd573, %rd42, %rd572;
	add.s64 	%rd43, %rd573, %rd303;
	st.global.v4.u32 	[%rd43], {%r7642, %r7633, %r7663, %r7658};
	st.global.v4.u32 	[%rd43+512], {%r7624, %r7616, %r7583, %r7578};
	st.global.v4.u32 	[%rd43+1024], {%r7623, %r7615, %r7572, %r7568};
	@%p284 bra 	$L__BB0_948;

	st.global.v4.u32 	[%rd43+1536], {%r7797, %r7800, %r7804, %r7803};

$L__BB0_948:
	rem.s32 	%r7380, %r7684, %r1780;
	setp.eq.s32 	%p577, %r7380, 0;
	@%p577 bra 	$L__BB0_950;

	bar.sync 	0;
	bra.uni 	$L__BB0_957;

$L__BB0_950:
	@%p218 bra 	$L__BB0_952;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_952:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_956;

	membar.gl;
	add.s64 	%rd575, %rd27, 4;
	setp.eq.s32 	%p580, %r431, %r432;
	mov.u32 	%r7393, -2147483647;
	sub.s32 	%r7394, %r7393, %r430;
	selp.b32 	%r7395, %r7394, 1, %p580;
	atom.add.u32 	%r1774, [%rd575], %r7395;

$L__BB0_954:
	ld.volatile.u32 	%r7396, [%rd27+4];
	xor.b32  	%r7397, %r7396, %r1774;
	setp.gt.s32 	%p581, %r7397, -1;
	@%p581 bra 	$L__BB0_954;

	membar.gl;

$L__BB0_956:
	bar.sync 	0;

$L__BB0_957:
	add.s32 	%r7684, %r7684, 1;
	setp.lt.s32 	%p582, %r7684, %r49;
	mov.u32 	%r7798, %r7964;
	mov.u32 	%r7799, %r7965;
	mov.u32 	%r7801, %r7967;
	mov.u32 	%r7802, %r7968;
	mov.u32 	%r7809, %r7979;
	mov.u32 	%r7810, %r7980;
	mov.u32 	%r7811, %r7981;
	mov.u32 	%r7812, %r7982;
	mov.u32 	%r7813, %r7983;
	mov.u32 	%r7814, %r7984;
	mov.u32 	%r7815, %r7985;
	mov.u32 	%r7818, %r7988;
	mov.u32 	%r7820, %r7990;
	mov.u32 	%r7822, %r7992;
	mov.u32 	%r7612, %r498;
	mov.u32 	%r7613, %r7875;
	mov.u32 	%r7620, %r505;
	mov.u32 	%r7621, %r7877;
	mov.u32 	%r7628, %r512;
	mov.u32 	%r7637, %r520;
	mov.u32 	%r7646, %r7882;
	mov.u32 	%r7649, %r7884;
	mov.u32 	%r7652, %r550;
	mov.u32 	%r7654, %r558;
	mov.u32 	%r7656, %r565;
	mov.u32 	%r7657, %r566;
	mov.u32 	%r7661, %r574;
	mov.u32 	%r7662, %r575;
	mov.u32 	%r7805, %r7973;
	mov.u32 	%r7806, %r7974;
	mov.u32 	%r7807, %r7975;
	mov.u32 	%r7808, %r7976;
	mov.u32 	%r7823, %r7993;
	mov.u32 	%r7824, %r7994;
	@%p582 bra 	$L__BB0_332;

$L__BB0_958:
	ret;

}

