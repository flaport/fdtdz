//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<519>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7963>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1763, %r1764}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1765, %r1766}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1767, %r1768}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1769, %r1770}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1771, %r1772}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1773, %r1774}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1775, %r1776}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1777, %r1778}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1779, %r1780}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1781, %r1782}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r31, %tid.y;
	mov.u32 	%r32, %tid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %ctaid.z;
	mov.u32 	%r1783, 32;
	sub.s32 	%r35, %r1783, %r1770;
	mov.u32 	%r36, %tid.x;
	setp.le.s32 	%p15, %r35, %r36;
	add.s32 	%r1784, %r1776, -1;
	mad.lo.s32 	%r1785, %r1784, %r1775, %r1774;
	add.s32 	%r1786, %r1769, %r1768;
	add.s32 	%r1787, %r1786, %r1785;
	add.s32 	%r1788, %r1787, 1;
	mul.lo.s32 	%r1789, %r1763, %r1765;
	shl.b32 	%r37, %r1789, 1;
	shl.b32 	%r1790, %r1789, 2;
	div.s32 	%r1791, %r1788, %r1790;
	add.s32 	%r1792, %r1791, 1;
	mul.lo.s32 	%r1793, %r1792, %r1769;
	mul.lo.s32 	%r1794, %r1764, %r1766;
	shl.b32 	%r38, %r1794, 1;
	div.s32 	%r1795, %r1793, %r38;
	add.s32 	%r1796, %r1795, 1;
	mul.lo.s32 	%r39, %r1796, %r1768;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7330, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1799, %r1765, %r34, %r33;
	mad.lo.s32 	%r1800, %r1799, %r1764, %r32;
	mad.lo.s32 	%r1801, %r1800, %r1763, %r31;
	shl.b32 	%r43, %r1801, 5;
	add.s32 	%r7335, %r43, %r36;
	mul.lo.s32 	%r1802, %r1794, %r1789;
	shl.b32 	%r47, %r1802, 5;
	sub.s32 	%r1803, %r1778, %r1777;
	mul.lo.s32 	%r1804, %r1776, %r1803;
	sub.s32 	%r1805, %r1780, %r1779;
	mul.lo.s32 	%r1806, %r1804, %r1805;
	sub.s32 	%r48, %r1782, %r1781;
	mul.lo.s32 	%r1807, %r1806, %r48;
	mul.lo.s32 	%r49, %r1807, 3;
	setp.ge.s32 	%p16, %r7335, %r49;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1808, %r36;
	add.s32 	%r1809, %r49, %r1808;
	sub.s32 	%r1810, %r1809, %r43;
	mul.lo.s32 	%r1811, %r1794, %r1763;
	mul.lo.s32 	%r1812, %r1811, %r1765;
	shl.b32 	%r1813, %r1812, 5;
	div.u32 	%r50, %r1810, %r1813;
	add.s32 	%r1814, %r50, 1;
	and.b32  	%r7332, %r1814, 3;
	setp.eq.s32 	%p17, %r7332, 0;
	mov.u32 	%r7333, %r7335;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r7333, %r7335;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7333, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1815, 0;
	st.global.u32 	[%rd44], %r1815;
	add.s32 	%r7333, %r7333, %r47;
	add.s32 	%r7332, %r7332, -1;
	setp.ne.s32 	%p18, %r7332, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r50, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r47, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7333, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1816, 0;
	st.global.u32 	[%rd46], %r1816;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1816;
	add.s32 	%r1817, %r7333, %r47;
	add.s32 	%r1818, %r1817, %r47;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1816;
	add.s32 	%r1819, %r1818, %r47;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1816;
	add.s32 	%r7333, %r1819, %r47;
	setp.lt.s32 	%p20, %r7333, %r49;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1820, %r1769, %r37;
	div.s32 	%r1821, %r1820, %r38;
	mul.lo.s32 	%r1822, %r1821, %r1768;
	sub.s32 	%r59, %r1822, %r37;
	sub.s32 	%r1823, %r1768, %r38;
	mul.lo.s32 	%r1824, %r1823, %r1765;
	mul.lo.s32 	%r60, %r1763, 384;
	add.s32 	%r1825, %r60, %r60;
	add.s32 	%r1826, %r1825, 128;
	mul.lo.s32 	%r1828, %r1794, 768;
	mul.lo.s32 	%r1829, %r1824, %r1826;
	mad.lo.s32 	%r61, %r1828, %r59, %r1829;
	bra.uni 	$L__BB0_11;

$L__BB0_929:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7335, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7306;
	add.s32 	%r7335, %r7335, %r47;

$L__BB0_11:
	setp.lt.s32 	%p21, %r7335, %r61;
	@%p21 bra 	$L__BB0_929;

	ld.param.u64 	%rd52, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7377, %r1763, %r33, %r31;
	mul.lo.s32 	%r65, %r1764, %r34;
	add.s32 	%r66, %r65, %r32;
	setp.ge.s32 	%p22, %r7377, %r1768;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r35, %r36;
	mov.u32 	%r1830, 31;
	sub.s32 	%r1831, %r1830, %r36;
	selp.b32 	%r1832, %r36, %r1831, %p23;
	shl.b32 	%r1833, %r1832, 2;
	mov.u32 	%r1834, 2;
	sub.s32 	%r67, %r1833, %r1771;
	shl.b32 	%r1835, %r1770, 2;
	mov.u32 	%r1836, 128;
	sub.s32 	%r68, %r1836, %r1835;
	sub.s32 	%r1837, %r1834, %r1771;
	add.s32 	%r69, %r1837, %r1833;
	mul.lo.s32 	%r1838, %r1769, %r1768;
	shl.b32 	%r70, %r1838, 6;
	add.s32 	%r71, %r1768, -1;
	add.s32 	%r72, %r67, 1;
	add.s32 	%r73, %r69, 1;
	shl.b32 	%r74, %r36, 1;
	or.b32  	%r75, %r74, 1;
	shr.u32 	%r1839, %r75, 31;
	add.s32 	%r1840, %r75, %r1839;
	shr.s32 	%r77, %r1840, 1;
	and.b32  	%r1841, %r1840, -2;
	sub.s32 	%r1842, %r75, %r1841;
	add.s32 	%r76, %r1842, %r70;
	rem.s32 	%r1877, %r72, %r68;
	add.s32 	%r1878, %r1877, %r68;
	rem.s32 	%r100, %r1878, %r68;
	rem.s32 	%r1879, %r73, %r68;
	add.s32 	%r1880, %r1879, %r68;
	rem.s32 	%r101, %r1880, %r68;
	mov.u32 	%r7336, %r7377;

$L__BB0_14:
	setp.ge.s32 	%p24, %r66, %r1769;
	@%p24 bra 	$L__BB0_35;

	add.s32 	%r79, %r71, %r7336;
	rem.s32 	%r1843, %r67, %r68;
	add.s32 	%r1844, %r1843, %r68;
	rem.s32 	%r80, %r1844, %r68;
	rem.s32 	%r1845, %r69, %r68;
	add.s32 	%r1846, %r1845, %r68;
	rem.s32 	%r81, %r1846, %r68;
	mul.lo.s32 	%r82, %r7336, %r1769;
	add.s32 	%r1847, %r1768, %r7336;
	mul.lo.s32 	%r83, %r1847, %r1769;
	add.s32 	%r1848, %r1847, %r1768;
	mul.lo.s32 	%r84, %r1848, %r1769;
	mov.u32 	%r7337, %r66;

$L__BB0_16:
	mul.lo.s32 	%r86, %r7337, %r1768;
	add.s32 	%r87, %r86, %r7336;
	shl.b32 	%r88, %r87, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1851, %r82, %r7337;
	mul.lo.s32 	%r1852, %r1851, %r68;
	add.s32 	%r1853, %r1852, %r80;
	mul.wide.s32 	%rd54, %r1853, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1854, %r1852, %r81;
	mul.wide.s32 	%rd56, %r1854, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7338, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7338, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r92, %r87, 5;
	add.s32 	%r1855, %r92, %r36;
	shl.b32 	%r1856, %r1855, 2;
	add.s32 	%r1857, %r70, %r1856;
	mul.wide.s32 	%rd58, %r1857, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7338;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1860, %r83, %r7337;
	mul.lo.s32 	%r1861, %r1860, %r68;
	add.s32 	%r1862, %r1861, %r80;
	mul.wide.s32 	%rd60, %r1862, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1863, %r1861, %r81;
	mul.wide.s32 	%rd62, %r1863, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7339, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7339, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1864, %r74, %r88;
	mul.wide.s32 	%rd64, %r1864, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7339;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1867, %r84, %r7337;
	mul.lo.s32 	%r1868, %r1867, %r68;
	add.s32 	%r1869, %r1868, %r80;
	mul.wide.s32 	%rd66, %r1869, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1870, %r1868, %r81;
	mul.wide.s32 	%rd68, %r1870, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7340, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7340, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1871, %r79, %r1768;
	add.s32 	%r1872, %r1871, %r86;
	shl.b32 	%r99, %r1872, 5;
	add.s32 	%r1873, %r99, %r36;
	shl.b32 	%r1874, %r1873, 2;
	add.s32 	%r1875, %r70, %r1874;
	add.s32 	%r1876, %r1875, 2;
	mul.wide.s32 	%rd70, %r1876, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7340;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1883, %r82, %r7337;
	mul.lo.s32 	%r1884, %r1883, %r68;
	add.s32 	%r1885, %r1884, %r100;
	mul.wide.s32 	%rd72, %r1885, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1886, %r1884, %r101;
	mul.wide.s32 	%rd74, %r1886, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7341, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7341, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1887, %r92, %r77;
	shl.b32 	%r1888, %r1887, 2;
	add.s32 	%r1889, %r76, %r1888;
	mul.wide.s32 	%rd76, %r1889, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7341;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1892, %r83, %r7337;
	mul.lo.s32 	%r1893, %r1892, %r68;
	add.s32 	%r1894, %r1893, %r100;
	mul.wide.s32 	%rd78, %r1894, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1895, %r1893, %r101;
	mul.wide.s32 	%rd80, %r1895, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1896, %r75, %r88;
	mul.wide.s32 	%rd82, %r1896, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7342;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1899, %r84, %r7337;
	mul.lo.s32 	%r1900, %r1899, %r68;
	add.s32 	%r1901, %r1900, %r100;
	mul.wide.s32 	%rd84, %r1901, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1902, %r1900, %r101;
	mul.wide.s32 	%rd86, %r1902, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7343, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7343, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1903, %r99, %r77;
	shl.b32 	%r1904, %r1903, 2;
	add.s32 	%r1905, %r76, %r1904;
	add.s32 	%r1906, %r1905, 2;
	mul.wide.s32 	%rd88, %r1906, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7343;
	add.s32 	%r7337, %r7337, %r1794;
	setp.lt.s32 	%p31, %r7337, %r1769;
	@%p31 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7336, %r7336, %r1789;
	setp.lt.s32 	%p32, %r7336, %r1768;
	@%p32 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r113, %r66, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7344, %r7377;

$L__BB0_38:
	setp.ge.s32 	%p34, %r113, %r1769;
	@%p34 bra 	$L__BB0_119;

	mov.u32 	%r7345, %r113;

$L__BB0_40:
	setp.ne.s32 	%p35, %r36, 0;
	@%p35 bra 	$L__BB0_118;

	shr.u32 	%r1908, %r7345, 31;
	add.s32 	%r1909, %r7345, %r1908;
	shr.s32 	%r1910, %r1909, 1;
	mad.lo.s32 	%r1911, %r1910, %r1768, %r7344;
	shl.b32 	%r117, %r1911, 5;
	add.s32 	%r118, %r7345, -2;
	mul.lo.s32 	%r119, %r118, %r1768;
	add.s32 	%r1912, %r1769, %r118;
	mul.lo.s32 	%r120, %r1912, %r1768;
	add.s32 	%r1913, %r1912, %r1769;
	mul.lo.s32 	%r121, %r1913, %r1768;
	add.s32 	%r122, %r119, %r1768;
	add.s32 	%r123, %r7345, -1;
	add.s32 	%r1914, %r1769, %r123;
	mul.lo.s32 	%r124, %r1914, %r1768;
	add.s32 	%r1915, %r1914, %r1769;
	mul.lo.s32 	%r125, %r1915, %r1768;
	add.s32 	%r1916, %r1769, %r7345;
	mul.lo.s32 	%r126, %r1916, %r1768;
	add.s32 	%r1917, %r1916, %r1769;
	mul.lo.s32 	%r127, %r1917, %r1768;
	mul.lo.s32 	%r128, %r7345, %r1768;
	add.s32 	%r129, %r128, %r1768;
	add.s32 	%r130, %r7345, 1;
	add.s32 	%r1918, %r1769, %r130;
	mul.lo.s32 	%r131, %r1918, %r1768;
	add.s32 	%r1919, %r1918, %r1769;
	mul.lo.s32 	%r132, %r1919, %r1768;
	add.s32 	%r133, %r129, %r1768;
	add.s32 	%r134, %r7345, 2;
	add.s32 	%r1920, %r1769, %r134;
	mul.lo.s32 	%r135, %r1920, %r1768;
	add.s32 	%r1921, %r1920, %r1769;
	mul.lo.s32 	%r136, %r1921, %r1768;
	mov.u32 	%r7348, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1922, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1922;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r138, %r1922, %r7344;
	setp.lt.s32 	%p36, %r138, %r1768;
	or.b32  	%r1923, %r118, %r138;
	setp.gt.s32 	%p37, %r1923, -1;
	and.pred  	%p38, %p36, %p37;
	setp.lt.s32 	%p39, %r118, %r1769;
	and.pred  	%p1, %p39, %p38;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p40, %f65, 0f40000000;
	@%p40 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1926, %r119, %r138;
	mul.wide.s32 	%rd93, %r1926, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7347, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7347, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1927, %r7348, %r117;
	mul.wide.s32 	%rd95, %r1927, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7347;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p41, %f3, 0f40000000;
	@%p41 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1930, %r120, %r138;
	mul.wide.s32 	%rd97, %r1930, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7349, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7349, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1931, %r7348, %r117;
	mul.wide.s32 	%rd99, %r1931, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7349;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p42, %f74, 0f40000000;
	@%p42 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1934, %r121, %r138;
	mul.wide.s32 	%rd101, %r1934, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7351, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7351, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1935, %r7348, %r117;
	mul.wide.s32 	%rd103, %r1935, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7351;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_57:
	or.b32  	%r1936, %r123, %r138;
	setp.gt.s32 	%p43, %r1936, -1;
	and.pred  	%p45, %p36, %p43;
	setp.le.s32 	%p46, %r7345, %r1769;
	and.pred  	%p2, %p46, %p45;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p47, %f4, 0f40000000;
	@%p47 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1939, %r122, %r138;
	mul.wide.s32 	%rd105, %r1939, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7353, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7353, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1940, %r7348, %r117;
	mul.wide.s32 	%rd107, %r1940, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7353;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p48, %f5, 0f40000000;
	@%p48 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1943, %r124, %r138;
	mul.wide.s32 	%rd109, %r1943, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7355, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7355, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1944, %r7348, %r117;
	mul.wide.s32 	%rd111, %r1944, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7355;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p49, %f6, 0f40000000;
	@%p49 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1947, %r125, %r138;
	mul.wide.s32 	%rd113, %r1947, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7357, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7357, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1948, %r7348, %r117;
	mul.wide.s32 	%rd115, %r1948, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7357;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_72:
	or.b32  	%r1949, %r7345, %r138;
	setp.gt.s32 	%p50, %r1949, -1;
	and.pred  	%p52, %p36, %p50;
	setp.lt.s32 	%p53, %r7345, %r1769;
	and.pred  	%p3, %p53, %p52;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p54, %f7, 0f40000000;
	@%p54 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1952, %r128, %r138;
	mul.wide.s32 	%rd117, %r1952, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7359, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7359, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1953, %r7348, %r117;
	mul.wide.s32 	%rd119, %r1953, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7359;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p55, %f90, 0f40000000;
	@%p55 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1956, %r126, %r138;
	mul.wide.s32 	%rd121, %r1956, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7361, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7361, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1957, %r7348, %r117;
	mul.wide.s32 	%rd123, %r1957, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7361;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p56, %f8, 0f40000000;
	@%p56 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1960, %r127, %r138;
	mul.wide.s32 	%rd125, %r1960, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7363, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7363, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1961, %r7348, %r117;
	mul.wide.s32 	%rd127, %r1961, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7363;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_87:
	or.b32  	%r1962, %r130, %r138;
	setp.gt.s32 	%p57, %r1962, -1;
	and.pred  	%p59, %p36, %p57;
	setp.lt.s32 	%p60, %r130, %r1769;
	and.pred  	%p4, %p60, %p59;
	@%p54 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1965, %r129, %r138;
	mul.wide.s32 	%rd129, %r1965, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7365, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7365, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1966, %r7348, %r117;
	mul.wide.s32 	%rd131, %r1966, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7365;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_92:
	@%p48 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1969, %r131, %r138;
	mul.wide.s32 	%rd133, %r1969, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7367, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7367, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1970, %r7348, %r117;
	mul.wide.s32 	%rd135, %r1970, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7367;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_97:
	@%p56 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1973, %r132, %r138;
	mul.wide.s32 	%rd137, %r1973, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7369, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7369, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1974, %r7348, %r117;
	mul.wide.s32 	%rd139, %r1974, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7369;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_102:
	or.b32  	%r1975, %r134, %r138;
	setp.gt.s32 	%p64, %r1975, -1;
	and.pred  	%p66, %p36, %p64;
	setp.lt.s32 	%p67, %r134, %r1769;
	and.pred  	%p5, %p67, %p66;
	@%p47 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1978, %r133, %r138;
	mul.wide.s32 	%rd141, %r1978, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7371, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7371, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1979, %r7348, %r117;
	mul.wide.s32 	%rd143, %r1979, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7371;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_107:
	@%p41 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1982, %r135, %r138;
	mul.wide.s32 	%rd145, %r1982, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7373, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7373, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1983, %r7348, %r117;
	mul.wide.s32 	%rd147, %r1983, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7373;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_112:
	@%p49 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1986, %r136, %r138;
	mul.wide.s32 	%rd149, %r1986, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7375, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7375, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1987, %r7348, %r117;
	mul.wide.s32 	%rd151, %r1987, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7375;
	add.s32 	%r7348, %r7348, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p71, %rd558, %rd154;
	@%p71 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7345, %r7345, %r38;
	setp.lt.s32 	%p72, %r7345, %r1769;
	@%p72 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7344, %r7344, %r1789;
	setp.lt.s32 	%p73, %r7344, %r1768;
	@%p73 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p74, %r1772, 1;
	ld.param.u64 	%rd155, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p74 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r242, %r66, 1;
	shr.u32 	%r2035, %r1773, 31;
	add.s32 	%r2036, %r1773, %r2035;
	bfe.u32 	%r243, %r2036, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p84, %r242, %r1769;
	@%p84 bra 	$L__BB0_266;

	mov.u32 	%r7383, %r242;

$L__BB0_142:
	setp.ne.s32 	%p85, %r36, 0;
	@%p85 bra 	$L__BB0_265;

	shr.u32 	%r2038, %r7383, 31;
	add.s32 	%r2039, %r7383, %r2038;
	shr.s32 	%r2040, %r2039, 1;
	mad.lo.s32 	%r2041, %r2040, %r1768, %r7377;
	shl.b32 	%r247, %r2041, 5;
	add.s32 	%r248, %r7383, -2;
	mul.lo.s32 	%r249, %r248, %r1768;
	add.s32 	%r2042, %r1769, %r248;
	mul.lo.s32 	%r250, %r2042, %r1768;
	add.s32 	%r251, %r249, %r1768;
	add.s32 	%r252, %r7383, -1;
	add.s32 	%r2043, %r1769, %r252;
	mul.lo.s32 	%r253, %r2043, %r1768;
	add.s32 	%r2044, %r1769, %r7383;
	mul.lo.s32 	%r254, %r2044, %r1768;
	mul.lo.s32 	%r255, %r7383, %r1768;
	add.s32 	%r256, %r255, %r1768;
	add.s32 	%r257, %r7383, 1;
	add.s32 	%r2045, %r1769, %r257;
	mul.lo.s32 	%r258, %r2045, %r1768;
	add.s32 	%r259, %r256, %r1768;
	add.s32 	%r260, %r7383, 2;
	add.s32 	%r2046, %r1769, %r260;
	mul.lo.s32 	%r261, %r2046, %r1768;
	mov.u32 	%r7387, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2047, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2047;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r263, %r2047, %r7377;
	setp.lt.s32 	%p86, %r263, %r1768;
	or.b32  	%r2048, %r248, %r263;
	setp.gt.s32 	%p87, %r2048, -1;
	and.pred  	%p88, %p86, %p87;
	setp.lt.s32 	%p89, %r248, %r1769;
	and.pred  	%p6, %p89, %p88;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p90, %f133, 0f40000000;
	@%p90 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p91, %r243, 0;
	add.s32 	%r2050, %r249, %r263;
	shl.b32 	%r2051, %r2050, 1;
	mul.wide.s32 	%rd177, %r2051, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p91 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7385, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r268, %r7387, %r247;
	mul.wide.s32 	%rd179, %r268, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7385;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p92, %r243, 0;
	add.s32 	%r2055, %r250, %r263;
	shl.b32 	%r2056, %r2055, 1;
	mul.wide.s32 	%rd181, %r2056, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p92 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7386, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2059, %r268, 1;
	mul.wide.s32 	%rd183, %r2059, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7386;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p93, %f13, 0f40000000;
	@%p93 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p94, %r243, 0;
	add.s32 	%r2061, %r249, %r263;
	shl.b32 	%r2062, %r2061, 1;
	or.b32  	%r2063, %r2062, 1;
	mul.wide.s32 	%rd185, %r2063, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p94 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7388, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r279, %r7387, %r247;
	mul.wide.s32 	%rd187, %r279, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7388;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p95, %r243, 0;
	add.s32 	%r2067, %r250, %r263;
	shl.b32 	%r2068, %r2067, 1;
	or.b32  	%r2069, %r2068, 1;
	mul.wide.s32 	%rd189, %r2069, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p95 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7389, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2072, %r279, 1;
	mul.wide.s32 	%rd191, %r2072, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7389;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_168:
	or.b32  	%r2073, %r252, %r263;
	setp.gt.s32 	%p96, %r2073, -1;
	and.pred  	%p98, %p86, %p96;
	setp.le.s32 	%p99, %r7383, %r1769;
	and.pred  	%p7, %p99, %p98;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p100, %f16, 0f40000000;
	@%p100 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p101, %r243, 0;
	add.s32 	%r2075, %r251, %r263;
	shl.b32 	%r2076, %r2075, 1;
	mul.wide.s32 	%rd193, %r2076, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p101 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7391, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7391, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7391, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r290, %r7387, %r247;
	mul.wide.s32 	%rd195, %r290, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7391;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p102, %r243, 0;
	add.s32 	%r2080, %r253, %r263;
	shl.b32 	%r2081, %r2080, 1;
	mul.wide.s32 	%rd197, %r2081, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p102 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7392, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2084, %r290, 1;
	mul.wide.s32 	%rd199, %r2084, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7392;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p103, %f19, 0f40000000;
	@%p103 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p104, %r243, 0;
	add.s32 	%r2086, %r251, %r263;
	shl.b32 	%r2087, %r2086, 1;
	or.b32  	%r2088, %r2087, 1;
	mul.wide.s32 	%rd201, %r2088, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p104 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7394, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r301, %r7387, %r247;
	mul.wide.s32 	%rd203, %r301, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7394;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p105, %r243, 0;
	add.s32 	%r2092, %r253, %r263;
	shl.b32 	%r2093, %r2092, 1;
	or.b32  	%r2094, %r2093, 1;
	mul.wide.s32 	%rd205, %r2094, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p105 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7395, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2097, %r301, 1;
	mul.wide.s32 	%rd207, %r2097, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7395;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_192:
	or.b32  	%r2098, %r7383, %r263;
	setp.gt.s32 	%p106, %r2098, -1;
	and.pred  	%p108, %p86, %p106;
	setp.lt.s32 	%p109, %r7383, %r1769;
	and.pred  	%p8, %p109, %p108;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p110, %f22, 0f40000000;
	@%p110 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p111, %r243, 0;
	add.s32 	%r2100, %r255, %r263;
	shl.b32 	%r2101, %r2100, 1;
	mul.wide.s32 	%rd209, %r2101, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p111 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7397, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r312, %r7387, %r247;
	mul.wide.s32 	%rd211, %r312, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7397;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p112, %r243, 0;
	add.s32 	%r2105, %r254, %r263;
	shl.b32 	%r2106, %r2105, 1;
	mul.wide.s32 	%rd213, %r2106, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p112 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7398, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2109, %r312, 1;
	mul.wide.s32 	%rd215, %r2109, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7398;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p113, %f196, 0f40000000;
	@%p113 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p114, %r243, 0;
	add.s32 	%r2111, %r255, %r263;
	shl.b32 	%r2112, %r2111, 1;
	or.b32  	%r2113, %r2112, 1;
	mul.wide.s32 	%rd217, %r2113, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p114 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7400, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7400, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7400, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r323, %r7387, %r247;
	mul.wide.s32 	%rd219, %r323, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7400;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p115, %r243, 0;
	add.s32 	%r2117, %r254, %r263;
	shl.b32 	%r2118, %r2117, 1;
	or.b32  	%r2119, %r2118, 1;
	mul.wide.s32 	%rd221, %r2119, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p115 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7401, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2122, %r323, 1;
	mul.wide.s32 	%rd223, %r2122, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7401;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_216:
	or.b32  	%r2123, %r257, %r263;
	setp.gt.s32 	%p116, %r2123, -1;
	and.pred  	%p118, %p86, %p116;
	setp.lt.s32 	%p119, %r257, %r1769;
	and.pred  	%p9, %p119, %p118;
	@%p110 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p121, %r243, 0;
	add.s32 	%r2125, %r256, %r263;
	shl.b32 	%r2126, %r2125, 1;
	mul.wide.s32 	%rd225, %r2126, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p121 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7403, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7403, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7403, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r334, %r7387, %r247;
	mul.wide.s32 	%rd227, %r334, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7403;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p122, %r243, 0;
	add.s32 	%r2130, %r258, %r263;
	shl.b32 	%r2131, %r2130, 1;
	mul.wide.s32 	%rd229, %r2131, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p122 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7404, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2134, %r334, 1;
	mul.wide.s32 	%rd231, %r2134, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7404;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_228:
	@%p103 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p124, %r243, 0;
	add.s32 	%r2136, %r256, %r263;
	shl.b32 	%r2137, %r2136, 1;
	or.b32  	%r2138, %r2137, 1;
	mul.wide.s32 	%rd233, %r2138, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p124 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7406, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7406, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7406, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r345, %r7387, %r247;
	mul.wide.s32 	%rd235, %r345, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7406;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p125, %r243, 0;
	add.s32 	%r2142, %r258, %r263;
	shl.b32 	%r2143, %r2142, 1;
	or.b32  	%r2144, %r2143, 1;
	mul.wide.s32 	%rd237, %r2144, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p125 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7407, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2147, %r345, 1;
	mul.wide.s32 	%rd239, %r2147, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7407;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_240:
	or.b32  	%r2148, %r260, %r263;
	setp.gt.s32 	%p126, %r2148, -1;
	and.pred  	%p128, %p86, %p126;
	setp.lt.s32 	%p129, %r260, %r1769;
	and.pred  	%p10, %p129, %p128;
	@%p100 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p131, %r243, 0;
	add.s32 	%r2150, %r259, %r263;
	shl.b32 	%r2151, %r2150, 1;
	mul.wide.s32 	%rd241, %r2151, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p131 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7409, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r356, %r7387, %r247;
	mul.wide.s32 	%rd243, %r356, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7409;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p132, %r243, 0;
	add.s32 	%r2155, %r261, %r263;
	shl.b32 	%r2156, %r2155, 1;
	mul.wide.s32 	%rd245, %r2156, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p132 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2159, %r356, 1;
	mul.wide.s32 	%rd247, %r2159, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7410;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_252:
	@%p93 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p134, %r243, 0;
	add.s32 	%r2161, %r259, %r263;
	shl.b32 	%r2162, %r2161, 1;
	or.b32  	%r2163, %r2162, 1;
	mul.wide.s32 	%rd249, %r2163, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p134 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7412, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7412, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7412, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r367, %r7387, %r247;
	mul.wide.s32 	%rd251, %r367, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7412;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p135, %r243, 0;
	add.s32 	%r2167, %r261, %r263;
	shl.b32 	%r2168, %r2167, 1;
	or.b32  	%r2169, %r2168, 1;
	mul.wide.s32 	%rd253, %r2169, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p135 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7413, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2172, %r367, 1;
	mul.wide.s32 	%rd255, %r2172, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7413;
	add.s32 	%r7387, %r7387, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p136, %rd559, 0;
	@%p136 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7383, %r7383, %r38;
	setp.lt.s32 	%p137, %r7383, %r1769;
	@%p137 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7377, %r7377, %r1789;
	setp.lt.s32 	%p138, %r7377, %r1768;
	@%p138 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r216, %r65;
	mov.u32 	%r1988, 31;
	sub.s32 	%r1989, %r1988, %r36;
	setp.gt.s32 	%p76, %r35, %r36;
	selp.b32 	%r1990, %r36, %r1989, %p76;
	shl.b32 	%r1991, %r1990, 2;
	mov.u32 	%r1992, 2;
	sub.s32 	%r217, %r1991, %r1771;
	shl.b32 	%r1993, %r1770, 2;
	mov.u32 	%r1994, 128;
	sub.s32 	%r218, %r1994, %r1993;
	sub.s32 	%r1995, %r1992, %r1771;
	add.s32 	%r219, %r1995, %r1991;
	add.s32 	%r220, %r1768, -1;
	add.s32 	%r221, %r217, 1;
	add.s32 	%r222, %r219, 1;
	rem.s32 	%r2020, %r221, %r218;
	add.s32 	%r2021, %r2020, %r218;
	rem.s32 	%r233, %r2021, %r218;
	rem.s32 	%r2022, %r222, %r218;
	add.s32 	%r2023, %r2022, %r218;
	rem.s32 	%r234, %r2023, %r218;

$L__BB0_123:
	setp.ne.s32 	%p77, %r32, %r216;
	@%p77 bra 	$L__BB0_137;

	shl.b32 	%r224, %r7377, 1;
	rem.s32 	%r1996, %r217, %r218;
	add.s32 	%r1997, %r1996, %r218;
	rem.s32 	%r225, %r1997, %r218;
	rem.s32 	%r1998, %r219, %r218;
	add.s32 	%r1999, %r1998, %r218;
	rem.s32 	%r226, %r1999, %r218;
	@%p76 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r2002, %r224, %r218;
	add.s32 	%r2003, %r2002, %r225;
	mul.wide.s32 	%rd157, %r2003, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r2004, %r2002, %r226;
	mul.wide.s32 	%rd159, %r2004, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7378, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7378, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r2005, %r7377, 5;
	add.s32 	%r2006, %r2005, %r36;
	shl.b32 	%r2007, %r2006, 2;
	mul.wide.s32 	%rd161, %r2007, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7378;
	@%p76 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r2010, %r224, 1;
	mul.lo.s32 	%r2011, %r2010, %r218;
	add.s32 	%r2012, %r2011, %r225;
	mul.wide.s32 	%rd162, %r2012, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r2013, %r2011, %r226;
	mul.wide.s32 	%rd164, %r2013, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7379, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7379, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r2014, %r220, %r7377;
	rem.s32 	%r2015, %r2014, %r1768;
	shl.b32 	%r2016, %r2015, 5;
	add.s32 	%r2017, %r2016, %r36;
	shl.b32 	%r2018, %r2017, 2;
	or.b32  	%r2019, %r2018, 2;
	mul.wide.s32 	%rd166, %r2019, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7379;
	@%p76 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r2026, %r224, %r218;
	add.s32 	%r2027, %r2026, %r233;
	mul.wide.s32 	%rd167, %r2027, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r2028, %r2026, %r234;
	mul.wide.s32 	%rd169, %r2028, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7380, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7380, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7380;
	@%p76 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2031, %r224, 1;
	mul.lo.s32 	%r2032, %r2031, %r218;
	add.s32 	%r2033, %r2032, %r233;
	mul.wide.s32 	%rd171, %r2033, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r2034, %r2032, %r234;
	mul.wide.s32 	%rd173, %r2034, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7381, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7381, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7381;

$L__BB0_137:
	add.s32 	%r7377, %r7377, %r1789;
	setp.lt.s32 	%p82, %r7377, %r1768;
	@%p82 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2174, %r1763, -1;
	mad.lo.s32 	%r2175, %r1764, 576, 128;
	mul.lo.s32 	%r2176, %r2175, %r2174;
	add.s32 	%r2177, %r60, -64;
	add.s32 	%r2178, %r2177, %r60;
	add.s32 	%r2179, %r1764, -1;
	mad.lo.s32 	%r2180, %r2178, %r2179, %r2176;
	mul.lo.s32 	%r2181, %r2174, %r1764;
	mul.lo.s32 	%r2182, %r2181, 320;
	mad.lo.s32 	%r2183, %r2177, %r2179, %r2182;
	add.s32 	%r376, %r2183, %r2180;
	setp.lt.s32 	%p139, %r376, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7592, {low,high};}

	// end inline asm
	@%p139 bra 	$L__BB0_270;

	mov.u32 	%r7417, 0;
	mov.u32 	%r7415, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7415], %r7592;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2186, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7415+4], %r2186;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2187, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7415+8], %r2187;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2188, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7415+12], %r2188;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7592, {low,high};}

	// end inline asm
	add.s32 	%r7415, %r7415, 16;
	add.s32 	%r7417, %r7417, 4;
	setp.lt.s32 	%p140, %r7417, %r376;
	@%p140 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7593, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2191, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2192, 31;
	sub.s32 	%r2193, %r2192, %r36;
	setp.gt.s32 	%p141, %r35, %r36;
	selp.b32 	%r2194, %r36, %r2193, %p141;
	shl.b32 	%r2195, %r2194, 2;
	sub.s32 	%r387, %r2195, %r1771;
	shl.b32 	%r2196, %r1770, 2;
	mov.u32 	%r2197, 128;
	sub.s32 	%r388, %r2197, %r2196;
	rem.s32 	%r2198, %r387, %r388;
	add.s32 	%r2199, %r2198, %r388;
	rem.s32 	%r389, %r2199, %r388;
	add.s32 	%r2200, %r387, 2;
	rem.s32 	%r2201, %r2200, %r388;
	add.s32 	%r2202, %r2201, %r388;
	rem.s32 	%r390, %r2202, %r388;
	mul.lo.s32 	%r2203, %r389, 6;
	mul.lo.s32 	%r2204, %r390, 6;
	mul.wide.s32 	%rd258, %r2203, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2204, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7419, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7419, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7420, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7420, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7421, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7421, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7422, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7422, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2213, %r387, 1;
	rem.s32 	%r2214, %r2213, %r388;
	add.s32 	%r2215, %r2214, %r388;
	rem.s32 	%r403, %r2215, %r388;
	add.s32 	%r2216, %r387, 3;
	rem.s32 	%r2217, %r2216, %r388;
	add.s32 	%r2218, %r2217, %r388;
	rem.s32 	%r404, %r2218, %r388;
	mul.lo.s32 	%r2219, %r403, 6;
	mul.lo.s32 	%r2220, %r404, 6;
	mul.wide.s32 	%rd260, %r2219, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2220, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7423, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7423, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7424, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7424, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7425, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7425, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7426, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7426, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2229, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2229;
	// begin inline asm
	mov.u32 %r2230, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2230;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p150, %rd24, 0;
	@%p150 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2231, %nctaid.x;
	mov.u32 	%r2232, %nctaid.y;
	mul.lo.s32 	%r2233, %r2231, %r2232;
	mov.u32 	%r2234, %nctaid.z;
	mul.lo.s32 	%r417, %r2233, %r2234;
	neg.s32 	%r2235, %r32;
	add.s32 	%r2236, %r36, %r31;
	setp.ne.s32 	%p151, %r2236, %r2235;
	mov.u32 	%r2237, %ctaid.x;
	add.s32 	%r418, %r2237, %r33;
	neg.s32 	%r419, %r34;
	bar.sync 	0;
	@%p151 bra 	$L__BB0_300;

	setp.eq.s32 	%p152, %r418, %r419;
	mov.u32 	%r2238, -2147483647;
	sub.s32 	%r2239, %r2238, %r417;
	selp.b32 	%r2240, %r2239, 1, %p152;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r420, [%rd264], %r2240;

$L__BB0_298:
	ld.volatile.u32 	%r2241, [%rd24+4];
	xor.b32  	%r2242, %r2241, %r420;
	setp.gt.s32 	%p153, %r2242, -1;
	@%p153 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p154, %r39, 1;
	@%p154 bra 	$L__BB0_928;

	shr.s32 	%r2256, %r1773, 31;
	shr.u32 	%r2257, %r2256, 30;
	add.s32 	%r2258, %r1773, %r2257;
	shr.s32 	%r421, %r2258, 2;
	add.s32 	%r2259, %r36, 31;
	shr.s32 	%r2260, %r2259, 31;
	shr.u32 	%r2261, %r2260, 27;
	add.s32 	%r2262, %r2259, %r2261;
	and.b32  	%r2263, %r2262, -32;
	sub.s32 	%r2264, %r2259, %r2263;
	add.s32 	%r2265, %r36, 33;
	shr.s32 	%r2266, %r2265, 31;
	shr.u32 	%r2267, %r2266, 27;
	add.s32 	%r2268, %r2265, %r2267;
	and.b32  	%r2269, %r2268, -32;
	sub.s32 	%r2270, %r2265, %r2269;
	shr.u32 	%r2271, %r1773, 31;
	add.s32 	%r2272, %r1773, %r2271;
	and.b32  	%r2273, %r2272, -2;
	sub.s32 	%r422, %r1773, %r2273;
	setp.lt.s32 	%p155, %r36, 32;
	selp.b32 	%r423, %r2264, %r36, %p155;
	setp.lt.s32 	%p156, %r389, %r1782;
	setp.ge.s32 	%p157, %r389, %r1781;
	and.pred  	%p11, %p156, %p157;
	setp.lt.s32 	%p158, %r403, %r1782;
	setp.ge.s32 	%p159, %r403, %r1781;
	and.pred  	%p12, %p158, %p159;
	setp.lt.s32 	%p160, %r390, %r1782;
	setp.ge.s32 	%p161, %r390, %r1781;
	and.pred  	%p13, %p160, %p161;
	setp.lt.s32 	%p162, %r404, %r1782;
	setp.ge.s32 	%p163, %r404, %r1781;
	and.pred  	%p14, %p162, %p163;
	selp.b32 	%r424, %r2270, %r36, %p155;
	mov.u32 	%r2255, 0;
	// begin inline asm
	{mov.u32 %r2274, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2600, %r2274, 8;
	add.s32 	%r2601, %r2600, -8192;
	or.b32  	%r2278, %r2601, 31;
	mul.wide.s32 	%rd273, %r36, 16;
	mul.wide.s32 	%rd275, %r36, 8;
	mov.u32 	%r7704, %r2191;
	mov.u32 	%r7734, %r2191;
	mov.u32 	%r7705, %r2191;
	mov.u32 	%r7735, %r2191;
	mov.u32 	%r7706, %r2191;
	mov.u32 	%r7432, %r2191;
	mov.u32 	%r7433, %r2191;
	mov.u32 	%r7747, %r2191;
	mov.u32 	%r7736, %r2191;
	mov.u32 	%r7737, %r2191;
	mov.u32 	%r7707, %r2191;
	mov.u32 	%r7708, %r2191;
	mov.u32 	%r7709, %r2191;
	mov.u32 	%r7440, %r2191;
	mov.u32 	%r7441, %r2191;
	mov.u32 	%r7746, %r2191;
	mov.u32 	%r7738, %r2191;
	mov.u32 	%r7739, %r2191;
	mov.u32 	%r7716, %r2191;
	mov.u32 	%r7446, %r2191;
	mov.u32 	%r7447, %r2191;
	mov.u32 	%r7448, %r2191;
	mov.u32 	%r7757, %r2191;
	mov.u32 	%r7743, %r2191;
	mov.u32 	%r7748, %r2191;
	mov.u32 	%r7717, %r2191;
	mov.u32 	%r7453, %r2191;
	mov.u32 	%r7454, %r2191;
	mov.u32 	%r7455, %r2191;
	mov.u32 	%r7751, %r2191;
	mov.u32 	%r7740, %r2191;
	mov.u32 	%r7749, %r2191;
	mov.u32 	%r7718, %r2191;
	mov.u32 	%r7719, %r2191;
	mov.u32 	%r7461, %r2191;
	mov.u32 	%r7752, %r2191;
	mov.u32 	%r7753, %r2191;
	mov.u32 	%r7464, %r2191;
	mov.u32 	%r7720, %r2191;
	mov.u32 	%r7721, %r2191;
	mov.u32 	%r7722, %r2191;
	mov.u32 	%r7468, %r2191;
	mov.u32 	%r7754, %r2191;
	mov.u32 	%r7755, %r2191;
	mov.u32 	%r7723, %r2191;
	mov.u32 	%r7724, %r2191;
	mov.u32 	%r7725, %r2191;
	mov.u32 	%r7710, %r2191;
	mov.u32 	%r7475, %r2191;
	mov.u32 	%r7741, %r2191;
	mov.u32 	%r7742, %r2191;
	mov.u32 	%r7711, %r2191;
	mov.u32 	%r7479, %r2191;
	mov.u32 	%r7744, %r2191;
	mov.u32 	%r7745, %r2191;
	mov.u32 	%r7774, %r2191;
	mov.u32 	%r7483, %r2191;
	mov.u32 	%r7484, %r2191;
	mov.u32 	%r7485, %r2191;
	mov.u32 	%r7630, %r2191;
	mov.u32 	%r7775, %r2191;
	mov.u32 	%r7488, %r2191;
	mov.u32 	%r7489, %r2191;
	mov.u32 	%r7490, %r2191;
	mov.u32 	%r7631, %r2191;
	mov.u32 	%r7776, %r2191;
	mov.u32 	%r7777, %r2191;
	mov.u32 	%r7494, %r2191;
	mov.u32 	%r7495, %r2191;
	mov.u32 	%r7496, %r2191;
	mov.u32 	%r7632, %r2191;
	mov.u32 	%r7498, %r2191;
	mov.u32 	%r7778, %r2191;
	mov.u32 	%r7779, %r2191;
	mov.u32 	%r7501, %r2191;
	mov.u32 	%r7502, %r2191;
	mov.u32 	%r7503, %r2191;
	mov.u32 	%r7634, %r2191;
	mov.u32 	%r7505, %r2191;
	mov.u32 	%r7506, %r2191;
	mov.u32 	%r7507, %r2191;
	mov.u32 	%r7508, %r2191;
	mov.u32 	%r7758, %r2191;
	mov.u32 	%r7510, %r2191;
	mov.u32 	%r7511, %r2191;
	mov.u32 	%r7512, %r2191;
	mov.u32 	%r7513, %r2191;
	mov.u32 	%r7759, %r2191;
	mov.u32 	%r7726, %r2191;
	mov.u32 	%r7727, %r2191;
	mov.u32 	%r7728, %r2191;
	mov.u32 	%r7729, %r2191;
	mov.u32 	%r7519, %r2191;
	mov.u32 	%r7520, %r2191;
	mov.u32 	%r7783, %r2191;
	mov.u32 	%r7522, %r2191;
	mov.u32 	%r7523, %r2191;
	mov.u32 	%r7638, %r2191;
	mov.u32 	%r7525, %r2191;
	mov.u32 	%r7526, %r2191;
	mov.u32 	%r7527, %r2191;
	mov.u32 	%r7528, %r2191;
	mov.u32 	%r7785, %r2191;
	mov.u32 	%r7530, %r2191;
	mov.u32 	%r7531, %r2191;
	mov.u32 	%r7641, %r2191;
	mov.u32 	%r7533, %r2191;
	mov.u32 	%r7534, %r2191;
	mov.u32 	%r7535, %r2191;
	mov.u32 	%r7536, %r2191;
	mov.u32 	%r7786, %r2191;
	mov.u32 	%r7538, %r2191;
	mov.u32 	%r7539, %r2191;
	mov.u32 	%r7540, %r2191;
	mov.u32 	%r7644, %r2191;
	mov.u32 	%r7542, %r2191;
	mov.u32 	%r7543, %r2191;
	mov.u32 	%r7544, %r2191;
	mov.u32 	%r7545, %r2191;
	mov.u32 	%r7787, %r2191;
	mov.u32 	%r7547, %r2191;
	mov.u32 	%r7548, %r2191;
	mov.u32 	%r7549, %r2191;
	mov.u32 	%r7647, %r2191;
	mov.u32 	%r7551, %r2191;
	mov.u32 	%r7552, %r2191;
	mov.u32 	%r7553, %r2191;
	mov.u32 	%r7554, %r2191;
	mov.u32 	%r7555, %r2191;
	mov.u32 	%r7556, %r2191;
	mov.u32 	%r7557, %r2191;
	mov.u32 	%r7558, %r2191;
	mov.u32 	%r7559, %r2191;
	mov.u32 	%r7560, %r2191;
	mov.u32 	%r7561, %r2191;
	mov.u32 	%r7562, %r2191;
	mov.u32 	%r7563, %r2191;
	mov.u32 	%r7564, %r2191;
	mov.u32 	%r7565, %r2191;
	mov.u32 	%r7566, %r2191;
	mov.u32 	%r7567, %r2191;
	mov.u32 	%r7568, %r2191;
	mov.u32 	%r7569, %r2191;
	mov.u32 	%r7570, %r2191;
	mov.u32 	%r7571, %r2191;
	mov.u32 	%r7572, %r2191;
	mov.u32 	%r7573, %r2255;
	mov.u32 	%r7574, %r2255;
	mov.u32 	%r7575, %r2255;
	mov.u32 	%r7576, %r2255;
	mov.u32 	%r7577, %r2255;
	mov.u32 	%r7578, %r2255;
	mov.u32 	%r7579, %r2255;
	mov.u32 	%r7580, %r2255;
	mov.u32 	%r7581, %r2255;
	mov.u32 	%r7582, %r2255;
	mov.u32 	%r7583, %r2255;
	mov.u32 	%r7584, %r2255;
	mov.u32 	%r7712, %r2191;
	mov.u32 	%r7713, %r2191;
	mov.u32 	%r7714, %r2191;
	mov.u32 	%r7715, %r2191;
	mov.u32 	%r7730, %r2191;
	mov.u32 	%r7731, %r2191;
	mov.u32 	%r7591, %r2255;

$L__BB0_302:
	mov.u32 	%r562, %r7787;
	mov.u32 	%r561, %r7545;
	mov.u32 	%r553, %r7786;
	mov.u32 	%r552, %r7536;
	mov.u32 	%r545, %r7785;
	mov.u32 	%r537, %r7783;
	mov.u32 	%r7545, %r7779;
	mov.u32 	%r507, %r7778;
	mov.u32 	%r7536, %r7777;
	mov.u32 	%r499, %r7776;
	mov.u32 	%r492, %r7775;
	mov.u32 	%r485, %r7774;
	sub.s32 	%r7317, %r1768, %r38;
	mov.u32 	%r2289, 1;
	not.b32 	%r2563, %r33;
	mov.u32 	%r2555, -1;
	add.s32 	%r2564, %r1765, %r2563;
	mul.lo.s32 	%r2565, %r2564, %r1767;
	add.s32 	%r2566, %r7591, %r2565;
	not.b32 	%r2568, %r34;
	add.s32 	%r2569, %r1766, %r2568;
	mul.lo.s32 	%r2570, %r2569, %r1767;
	add.s32 	%r2571, %r7591, %r2570;
	add.s32 	%r2572, %r2565, %r2570;
	add.s32 	%r2573, %r2572, %r1768;
	not.b32 	%r2574, %r31;
	add.s32 	%r2575, %r1763, %r2574;
	mad.lo.s32 	%r2576, %r2564, %r1763, %r2575;
	not.b32 	%r2577, %r32;
	add.s32 	%r2578, %r1764, %r2577;
	mad.lo.s32 	%r2579, %r2569, %r1764, %r2578;
	add.s32 	%r2580, %r2576, %r2579;
	shl.b32 	%r2581, %r2580, 1;
	add.s32 	%r2582, %r2573, %r2581;
	add.s32 	%r2583, %r7591, %r2582;
	add.s32 	%r2584, %r7591, %r2572;
	div.s32 	%r2585, %r2583, %r1768;
	neg.s32 	%r2586, %r1768;
	sub.s32 	%r2589, %r38, %r1768;
	sub.s32 	%r2590, %r2576, %r2579;
	shl.b32 	%r2591, %r2590, 1;
	add.s32 	%r2592, %r2591, %r1769;
	mad.lo.s32 	%r2593, %r2585, %r38, %r2592;
	mad.lo.s32 	%r2594, %r2585, %r2589, %r2584;
	div.s32 	%r2595, %r2593, %r1769;
	mul.lo.s32 	%r2596, %r2595, %r1769;
	sub.s32 	%r2599, %r1790, %r1769;
	mov.u32 	%r2373, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2275,%r7593,%r2255,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2281, %r7420, %r2275, %p15;
	// begin inline asm
	{mul.f16x2 %r7677,%r2281,%r7572;
}
	// end inline asm
	selp.b32 	%r2284, %r7424, %r2275, %p15;
	// begin inline asm
	{mul.f16x2 %r7675,%r2284,%r7567;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2287,%r7593,%r2289,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2293, %r7420, %r2287, %p15;
	// begin inline asm
	{mul.f16x2 %r7676,%r2293,%r7571;
}
	// end inline asm
	selp.b32 	%r2296, %r7424, %r2287, %p15;
	// begin inline asm
	{mul.f16x2 %r7674,%r2296,%r7566;
}
	// end inline asm
	mov.u32 	%r2301, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2299,%r7593,%r2301,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2305, %r7420, %r2299, %p15;
	// begin inline asm
	{mul.f16x2 %r7673,%r2305,%r7562;
}
	// end inline asm
	selp.b32 	%r2308, %r7424, %r2299, %p15;
	// begin inline asm
	{mul.f16x2 %r7672,%r2308,%r7560;
}
	// end inline asm
	mov.u32 	%r2313, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2311,%r7593,%r2313,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2317, %r7420, %r2311, %p15;
	// begin inline asm
	{mul.f16x2 %r7671,%r2317,%r7759;
}
	// end inline asm
	selp.b32 	%r2320, %r7424, %r2311, %p15;
	// begin inline asm
	{mul.f16x2 %r7669,%r2320,%r7758;
}
	// end inline asm
	mov.u32 	%r2325, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2323,%r7593,%r2325,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2329, %r7420, %r2323, %p15;
	// begin inline asm
	{mul.f16x2 %r7670,%r2329,%r7558;
}
	// end inline asm
	selp.b32 	%r2332, %r7424, %r2323, %p15;
	// begin inline asm
	{mul.f16x2 %r7668,%r2332,%r7555;
}
	// end inline asm
	mov.u32 	%r2337, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2335,%r7593,%r2337,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2341, %r7420, %r2335, %p15;
	// begin inline asm
	{mul.f16x2 %r7667,%r2341,%r7552;
}
	// end inline asm
	selp.b32 	%r2344, %r7424, %r2335, %p15;
	// begin inline asm
	{mul.f16x2 %r7664,%r2344,%r7543;
}
	// end inline asm
	mov.u32 	%r2349, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2347,%r7593,%r2349,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2353, %r7420, %r2347, %p15;
	// begin inline asm
	{mul.f16x2 %r7666,%r2353,%r7551;
}
	// end inline asm
	selp.b32 	%r2356, %r7424, %r2347, %p15;
	// begin inline asm
	{mul.f16x2 %r7663,%r2356,%r7542;
}
	// end inline asm
	mov.u32 	%r2361, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2359,%r7593,%r2361,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2365, %r7420, %r2359, %p15;
	// begin inline asm
	{mul.f16x2 %r7665,%r2365,%r7647;
}
	// end inline asm
	selp.b32 	%r2368, %r7424, %r2359, %p15;
	// begin inline asm
	{mul.f16x2 %r7662,%r2368,%r7644;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2371,%r7593,%r2373,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2377, %r7420, %r2371, %p15;
	// begin inline asm
	{mul.f16x2 %r7661,%r2377,%r7534;
}
	// end inline asm
	selp.b32 	%r2380, %r7424, %r2371, %p15;
	// begin inline asm
	{mul.f16x2 %r7658,%r2380,%r7526;
}
	// end inline asm
	mov.u32 	%r2385, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2383,%r7593,%r2385,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2389, %r7420, %r2383, %p15;
	// begin inline asm
	{mul.f16x2 %r7660,%r2389,%r7533;
}
	// end inline asm
	selp.b32 	%r2392, %r7424, %r2383, %p15;
	// begin inline asm
	{mul.f16x2 %r7657,%r2392,%r7525;
}
	// end inline asm
	mov.u32 	%r2397, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2395,%r7593,%r2397,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2401, %r7420, %r2395, %p15;
	// begin inline asm
	{mul.f16x2 %r7659,%r2401,%r7641;
}
	// end inline asm
	selp.b32 	%r2404, %r7424, %r2395, %p15;
	// begin inline asm
	{mul.f16x2 %r7656,%r2404,%r7638;
}
	// end inline asm
	mov.u32 	%r2409, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2407,%r7593,%r2409,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2413, %r7420, %r2407, %p15;
	// begin inline asm
	{mul.f16x2 %r7655,%r2413,%r7745;
}
	// end inline asm
	selp.b32 	%r2416, %r7424, %r2407, %p15;
	// begin inline asm
	{mul.f16x2 %r7654,%r2416,%r7742;
}
	// end inline asm
	mov.u32 	%r2421, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2419,%r7593,%r2421,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2425, %r7420, %r2419, %p15;
	// begin inline asm
	{mul.f16x2 %r7653,%r2425,%r7755;
}
	// end inline asm
	selp.b32 	%r2428, %r7424, %r2419, %p15;
	// begin inline asm
	{mul.f16x2 %r7651,%r2428,%r7753;
}
	// end inline asm
	mov.u32 	%r2433, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2431,%r7593,%r2433,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2437, %r7420, %r2431, %p15;
	// begin inline asm
	{mul.f16x2 %r7652,%r2437,%r7754;
}
	// end inline asm
	selp.b32 	%r2440, %r7424, %r2431, %p15;
	// begin inline asm
	{mul.f16x2 %r7650,%r2440,%r7752;
}
	// end inline asm
	mov.u32 	%r2445, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2443,%r7593,%r2445,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2449, %r7420, %r2443, %p15;
	// begin inline asm
	{mul.f16x2 %r7649,%r2449,%r7749;
}
	// end inline asm
	selp.b32 	%r2452, %r7424, %r2443, %p15;
	// begin inline asm
	{mul.f16x2 %r7646,%r2452,%r7748;
}
	// end inline asm
	mov.u32 	%r2457, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2455,%r7593,%r2457,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2461, %r7420, %r2455, %p15;
	// begin inline asm
	{mul.f16x2 %r7648,%r2461,%r7505;
}
	// end inline asm
	selp.b32 	%r2464, %r7424, %r2455, %p15;
	// begin inline asm
	{mul.f16x2 %r7645,%r2464,%r7498;
}
	// end inline asm
	mov.u32 	%r2469, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2467,%r7593,%r2469,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2473, %r7420, %r2467, %p15;
	// begin inline asm
	{mul.f16x2 %r7647,%r2473,%r7634;
}
	// end inline asm
	selp.b32 	%r2476, %r7424, %r2467, %p15;
	// begin inline asm
	{mul.f16x2 %r7644,%r2476,%r7632;
}
	// end inline asm
	mov.u32 	%r2481, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2479,%r7593,%r2481,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2485, %r7420, %r2479, %p15;
	// begin inline asm
	{mul.f16x2 %r7643,%r2485,%r7739;
}
	// end inline asm
	selp.b32 	%r2488, %r7424, %r2479, %p15;
	// begin inline asm
	{mul.f16x2 %r7640,%r2488,%r7737;
}
	// end inline asm
	mov.u32 	%r2493, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2491,%r7593,%r2493,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2497, %r7420, %r2491, %p15;
	// begin inline asm
	{mul.f16x2 %r7642,%r2497,%r7738;
}
	// end inline asm
	selp.b32 	%r2500, %r7424, %r2491, %p15;
	// begin inline asm
	{mul.f16x2 %r7639,%r2500,%r7736;
}
	// end inline asm
	mov.u32 	%r2505, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2503,%r7593,%r2505,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2509, %r7420, %r2503, %p15;
	// begin inline asm
	{mul.f16x2 %r7641,%r2509,%r7631;
}
	// end inline asm
	selp.b32 	%r2512, %r7424, %r2503, %p15;
	// begin inline asm
	{mul.f16x2 %r7638,%r2512,%r7630;
}
	// end inline asm
	mov.u32 	%r2517, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2515,%r7593,%r2517,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2521, %r7420, %r2515, %p15;
	// begin inline asm
	{mul.f16x2 %r7637,%r2521,%r7734;
}
	// end inline asm
	selp.b32 	%r2524, %r7424, %r2515, %p15;
	// begin inline asm
	{mul.f16x2 %r7636,%r2524,%r7735;
}
	// end inline asm
	mov.u32 	%r2529, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2527,%r7593,%r2529,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2533, %r7420, %r2527, %p15;
	// begin inline asm
	{mul.f16x2 %r7635,%r2533,%r7740;
}
	// end inline asm
	selp.b32 	%r2536, %r7424, %r2527, %p15;
	// begin inline asm
	{mul.f16x2 %r7633,%r2536,%r7743;
}
	// end inline asm
	mov.u32 	%r2541, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2539,%r7593,%r2541,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2545, %r7420, %r2539, %p15;
	// begin inline asm
	{mul.f16x2 %r7634,%r2545,%r7751;
}
	// end inline asm
	selp.b32 	%r2548, %r7424, %r2539, %p15;
	// begin inline asm
	{mul.f16x2 %r7632,%r2548,%r7757;
}
	// end inline asm
	mov.u32 	%r2553, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2551,%r7593,%r2553,%r2278,%r2555;
}
	// end inline asm
	selp.b32 	%r2557, %r7420, %r2551, %p15;
	// begin inline asm
	{mul.f16x2 %r7631,%r2557,%r7746;
}
	// end inline asm
	selp.b32 	%r2560, %r7424, %r2551, %p15;
	// begin inline asm
	{mul.f16x2 %r7630,%r2560,%r7747;
}
	// end inline asm
	rem.s32 	%r662, %r2566, %r59;
	rem.s32 	%r663, %r2571, %r7317;
	mad.lo.s32 	%r664, %r2585, %r2586, %r2583;
	sub.s32 	%r665, %r2593, %r2596;
	mad.lo.s32 	%r666, %r2595, %r2599, %r2594;
	ld.param.u64 	%rd266, [%rd1+144];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2649, %r666, 1;
	mul.wide.s32 	%rd268, %r2649, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p74 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2852, %r1785, 1;
	setp.lt.s32 	%p171, %r666, %r2852;
	setp.eq.s32 	%p172, %r421, %r36;
	setp.gt.s32 	%p173, %r666, -1;
	and.pred  	%p174, %p172, %p173;
	and.pred  	%p175, %p171, %p174;
	@%p175 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7596, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7597, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2652, %r1785, 1;
	setp.lt.s32 	%p166, %r666, %r2652;
	setp.gt.s32 	%p167, %r666, -1;
	and.pred  	%p168, %p167, %p166;
	@%p168 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7594, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7595, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7596, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7597, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2860, 0;
	mov.u32 	%r2871, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2858,%r7592,%r2860,%r2278,%r2871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2863,%r7596,%r2858;
}
	// end inline asm
	mov.u32 	%r2869, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2867,%r7592,%r2869,%r2278,%r2871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2872,%r7597,%r2867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r2863,%r2872;
}
	// end inline asm
	setp.eq.s32 	%p176, %r422, 0;
	mov.u32 	%r7598, %r7599;
	@%p176 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7598, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7677,%r7677,%r7598;
}
	// end inline asm
	setp.eq.s32 	%p177, %r422, 1;
	@%p177 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7599, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7675,%r7675,%r7599;
}
	// end inline asm
	mov.u32 	%r2893, 2;
	mov.u32 	%r2904, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2891,%r7592,%r2893,%r2278,%r2904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2896,%r7596,%r2891;
}
	// end inline asm
	mov.u32 	%r2902, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2900,%r7592,%r2902,%r2278,%r2904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2905,%r7597,%r2900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r2896,%r2905;
}
	// end inline asm
	mov.u32 	%r7600, %r7601;
	@%p176 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7600, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7676,%r7676,%r7600;
}
	// end inline asm
	@%p177 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7601, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7674,%r7674,%r7601;
}
	// end inline asm
	mov.u32 	%r2926, 4;
	mov.u32 	%r2937, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2924,%r7592,%r2926,%r2278,%r2937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2929,%r7596,%r2924;
}
	// end inline asm
	mov.u32 	%r2935, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2933,%r7592,%r2935,%r2278,%r2937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2938,%r7597,%r2933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7603,%r2929,%r2938;
}
	// end inline asm
	mov.u32 	%r7602, %r7603;
	@%p176 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7602, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7673,%r7673,%r7602;
}
	// end inline asm
	@%p177 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7603, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7672,%r7672,%r7603;
}
	// end inline asm
	mov.u32 	%r2959, 6;
	mov.u32 	%r2970, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2957,%r7592,%r2959,%r2278,%r2970;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2962,%r7596,%r2957;
}
	// end inline asm
	mov.u32 	%r2968, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2966,%r7592,%r2968,%r2278,%r2970;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2971,%r7597,%r2966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7605,%r2962,%r2971;
}
	// end inline asm
	mov.u32 	%r7604, %r7605;
	@%p176 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7604, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7671,%r7671,%r7604;
}
	// end inline asm
	@%p177 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7605, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7669,%r7669,%r7605;
}
	// end inline asm
	mov.u32 	%r2992, 8;
	mov.u32 	%r3003, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2990,%r7592,%r2992,%r2278,%r3003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2995,%r7596,%r2990;
}
	// end inline asm
	mov.u32 	%r3001, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2999,%r7592,%r3001,%r2278,%r3003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3004,%r7597,%r2999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7607,%r2995,%r3004;
}
	// end inline asm
	mov.u32 	%r7606, %r7607;
	@%p176 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7606, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7670,%r7670,%r7606;
}
	// end inline asm
	@%p177 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7607, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7668,%r7668,%r7607;
}
	// end inline asm
	mov.u32 	%r3025, 10;
	mov.u32 	%r3036, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3023,%r7592,%r3025,%r2278,%r3036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r7596,%r3023;
}
	// end inline asm
	mov.u32 	%r3034, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3032,%r7592,%r3034,%r2278,%r3036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3037,%r7597,%r3032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7609,%r3028,%r3037;
}
	// end inline asm
	mov.u32 	%r7608, %r7609;
	@%p176 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7608, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7667,%r7667,%r7608;
}
	// end inline asm
	@%p177 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7609, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r7609;
}
	// end inline asm
	mov.u32 	%r3058, 12;
	mov.u32 	%r3069, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3056,%r7592,%r3058,%r2278,%r3069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3061,%r7596,%r3056;
}
	// end inline asm
	mov.u32 	%r3067, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3065,%r7592,%r3067,%r2278,%r3069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3070,%r7597,%r3065;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7611,%r3061,%r3070;
}
	// end inline asm
	mov.u32 	%r7610, %r7611;
	@%p176 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7610, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7666,%r7666,%r7610;
}
	// end inline asm
	@%p177 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7611, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7663,%r7663,%r7611;
}
	// end inline asm
	mov.u32 	%r3091, 14;
	mov.u32 	%r3102, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3089,%r7592,%r3091,%r2278,%r3102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3094,%r7596,%r3089;
}
	// end inline asm
	mov.u32 	%r3100, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3098,%r7592,%r3100,%r2278,%r3102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3103,%r7597,%r3098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7613,%r3094,%r3103;
}
	// end inline asm
	mov.u32 	%r7612, %r7613;
	@%p176 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7612, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7661,%r7661,%r7612;
}
	// end inline asm
	@%p177 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7613, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7658,%r7658,%r7613;
}
	// end inline asm
	mov.u32 	%r3124, 16;
	mov.u32 	%r3135, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3122,%r7592,%r3124,%r2278,%r3135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3127,%r7596,%r3122;
}
	// end inline asm
	mov.u32 	%r3133, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3131,%r7592,%r3133,%r2278,%r3135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3136,%r7597,%r3131;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7615,%r3127,%r3136;
}
	// end inline asm
	mov.u32 	%r7614, %r7615;
	@%p176 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7614, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7660,%r7660,%r7614;
}
	// end inline asm
	@%p177 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7615, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7657,%r7657,%r7615;
}
	// end inline asm
	mov.u32 	%r3157, 18;
	mov.u32 	%r3168, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3155,%r7592,%r3157,%r2278,%r3168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3160,%r7596,%r3155;
}
	// end inline asm
	mov.u32 	%r3166, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3164,%r7592,%r3166,%r2278,%r3168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3169,%r7597,%r3164;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7617,%r3160,%r3169;
}
	// end inline asm
	mov.u32 	%r7616, %r7617;
	@%p176 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7616, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7655,%r7655,%r7616;
}
	// end inline asm
	@%p177 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7617, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7654,%r7654,%r7617;
}
	// end inline asm
	mov.u32 	%r3190, 20;
	mov.u32 	%r3201, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3188,%r7592,%r3190,%r2278,%r3201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3193,%r7596,%r3188;
}
	// end inline asm
	mov.u32 	%r3199, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3197,%r7592,%r3199,%r2278,%r3201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3202,%r7597,%r3197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7619,%r3193,%r3202;
}
	// end inline asm
	mov.u32 	%r7618, %r7619;
	@%p176 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7618, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7653,%r7653,%r7618;
}
	// end inline asm
	@%p177 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7619, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7651,%r7651,%r7619;
}
	// end inline asm
	mov.u32 	%r3223, 22;
	mov.u32 	%r3234, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3221,%r7592,%r3223,%r2278,%r3234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3226,%r7596,%r3221;
}
	// end inline asm
	mov.u32 	%r3232, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3230,%r7592,%r3232,%r2278,%r3234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3235,%r7597,%r3230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7621,%r3226,%r3235;
}
	// end inline asm
	mov.u32 	%r7620, %r7621;
	@%p176 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7620, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7649,%r7649,%r7620;
}
	// end inline asm
	@%p177 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7621, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7646,%r7646,%r7621;
}
	// end inline asm
	mov.u32 	%r3256, 24;
	mov.u32 	%r3267, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3254,%r7592,%r3256,%r2278,%r3267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3259,%r7596,%r3254;
}
	// end inline asm
	mov.u32 	%r3265, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3263,%r7592,%r3265,%r2278,%r3267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3268,%r7597,%r3263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r3259,%r3268;
}
	// end inline asm
	mov.u32 	%r7622, %r7623;
	@%p176 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7622, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7648,%r7648,%r7622;
}
	// end inline asm
	@%p177 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7623, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7645,%r7645,%r7623;
}
	// end inline asm
	mov.u32 	%r3289, 26;
	mov.u32 	%r3300, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3287,%r7592,%r3289,%r2278,%r3300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3292,%r7596,%r3287;
}
	// end inline asm
	mov.u32 	%r3298, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3296,%r7592,%r3298,%r2278,%r3300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3301,%r7597,%r3296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r3292,%r3301;
}
	// end inline asm
	mov.u32 	%r7624, %r7625;
	@%p176 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7624, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r7624;
}
	// end inline asm
	@%p177 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7625, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r7625;
}
	// end inline asm
	mov.u32 	%r3322, 28;
	mov.u32 	%r3333, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3320,%r7592,%r3322,%r2278,%r3333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3325,%r7596,%r3320;
}
	// end inline asm
	mov.u32 	%r3331, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3329,%r7592,%r3331,%r2278,%r3333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3334,%r7597,%r3329;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7627,%r3325,%r3334;
}
	// end inline asm
	mov.u32 	%r7626, %r7627;
	@%p176 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7626, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7642,%r7642,%r7626;
}
	// end inline asm
	@%p177 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7627, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7639,%r7639,%r7627;
}
	// end inline asm
	mov.u32 	%r3364, 31;
	mov.u32 	%r3355, 30;
	mov.u32 	%r3366, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3353,%r7592,%r3355,%r2278,%r3366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3358,%r7596,%r3353;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3362,%r7592,%r3364,%r2278,%r3366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3367,%r7597,%r3362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r3358,%r3367;
}
	// end inline asm
	mov.u32 	%r7628, %r7629;
	@%p176 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7628, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7635,%r7635,%r7628;
}
	// end inline asm
	@%p177 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7629, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7633,%r7633,%r7629;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7594, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7595, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p169, %r665, %r1773;
	@%p169 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2754,%r7594,%r7576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7677,%r7677,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7594,%r7574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7665,%r7665,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7594,%r7580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7667,%r7667,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7594,%r7578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7647,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7594,%r7584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7649,%r2778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7594,%r7582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7634,%r7634,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7595,%r7580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7671,%r7671,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7595,%r7578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7652,%r7652,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7594,%r7575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7675,%r7675,%r2802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7594,%r7573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r7662,%r2808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7594,%r7579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r7664,%r2814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2820,%r7594,%r7577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7644,%r2820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2826,%r7594,%r7583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r7646,%r2826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2832,%r7594,%r7581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7632,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2838,%r7595,%r7579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7669,%r7669,%r2838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2844,%r7595,%r7577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7650,%r7650,%r2844;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2657, %r1773, -2;
	setp.ne.s32 	%p170, %r665, %r2657;
	@%p170 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2658,%r7594,%r7580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7655,%r7655,%r2658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2664,%r7594,%r7578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7637,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2670,%r7595,%r7576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7673,%r7673,%r2670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r7595,%r7574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7659,%r7659,%r2676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2682,%r7595,%r7580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7661,%r7661,%r2682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2688,%r7595,%r7578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7641,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2694,%r7595,%r7584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7643,%r2694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2700,%r7595,%r7582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7631,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2706,%r7594,%r7579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7654,%r7654,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2712,%r7594,%r7577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7636,%r2712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r7595,%r7575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7672,%r7672,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7595,%r7573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7656,%r7656,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7595,%r7579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r7658,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7595,%r7577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7638,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7595,%r7583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7640,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7595,%r7581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7630,%r2748;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p208, %r31, 1;
	mov.u32 	%r7774, %r2191;
	mov.u32 	%r7775, %r2191;
	mov.u32 	%r7780, %r2191;
	mov.u32 	%r7781, %r2191;
	mov.u32 	%r7782, %r2191;
	mov.u32 	%r7783, %r2191;
	mov.u32 	%r7784, %r2191;
	mov.u32 	%r7785, %r2191;
	mov.u32 	%r7792, %r2191;
	mov.u32 	%r7793, %r2191;
	@%p208 bra 	$L__BB0_380;

	mul.lo.s32 	%r3385, %r1764, 320;
	add.s32 	%r3386, %r31, -1;
	mul.lo.s32 	%r3387, %r32, 320;
	mad.lo.s32 	%r3388, %r3385, %r3386, %r3387;
	add.s32 	%r3391, %r1825, -64;
	mad.lo.s32 	%r3396, %r3391, %r2179, %r2176;
	add.s32 	%r3397, %r3388, %r3396;
	shl.b32 	%r3398, %r3397, 2;
	mov.u32 	%r3399, _ZN6kernel5shmemE;
	add.s32 	%r3400, %r3399, %r3398;
	shl.b32 	%r3401, %r36, 4;
	add.s32 	%r3402, %r3400, %r3401;
	ld.shared.v4.u32 	{%r7785, %r7783, %r7775, %r7774}, [%r3402];
	shl.b32 	%r3407, %r36, 3;
	add.s32 	%r3408, %r3400, %r3407;
	ld.shared.v2.u32 	{%r7784, %r7782}, [%r3408+512];
	ld.shared.v4.u32 	{%r7793, %r7792, %r7781, %r7780}, [%r3402+768];

$L__BB0_380:
	setp.lt.s32 	%p209, %r32, 1;
	mov.u32 	%r7776, %r2191;
	mov.u32 	%r7777, %r2191;
	mov.u32 	%r7778, %r2191;
	mov.u32 	%r7779, %r2191;
	mov.u32 	%r7786, %r2191;
	mov.u32 	%r7787, %r2191;
	mov.u32 	%r7788, %r2191;
	mov.u32 	%r7789, %r2191;
	mov.u32 	%r7790, %r2191;
	mov.u32 	%r7791, %r2191;
	mov.u32 	%r7794, %r2191;
	mov.u32 	%r7795, %r2191;
	@%p209 bra 	$L__BB0_383;

	mad.lo.s32 	%r3420, %r2575, 384, %r2182;
	add.s32 	%r3423, %r32, -1;
	mad.lo.s32 	%r3424, %r2177, %r3423, %r3420;
	add.s32 	%r3430, %r3424, %r2180;
	shl.b32 	%r3431, %r3430, 2;
	mov.u32 	%r3432, _ZN6kernel5shmemE;
	add.s32 	%r3433, %r3432, %r3431;
	shl.b32 	%r3434, %r36, 4;
	add.s32 	%r3435, %r3433, %r3434;
	ld.shared.v4.u32 	{%r7795, %r7794, %r7790, %r7788}, [%r3435];
	shl.b32 	%r3440, %r36, 3;
	add.s32 	%r3441, %r3433, %r3440;
	ld.shared.v2.u32 	{%r7791, %r7789}, [%r3441+512];
	ld.shared.v4.u32 	{%r7787, %r7786, %r7778, %r7776}, [%r3435+768];
	mov.u32 	%r7777, %r2191;
	mov.u32 	%r7779, %r2191;
	@%p208 bra 	$L__BB0_383;

	add.s32 	%r7307, %r3441, 512;
	ld.shared.v2.u32 	{%r7779, %r7777}, [%r7307+768];

$L__BB0_383:
	setp.eq.s32 	%p211, %r31, 0;
	@%p211 bra 	$L__BB0_388;

	setp.eq.s32 	%p212, %r32, %r2179;
	@%p212 bra 	$L__BB0_386;

	sub.s32 	%r3451, %r1763, %r31;
	mul.lo.s32 	%r3453, %r60, %r32;
	mad.lo.s32 	%r3454, %r3451, 384, %r3453;
	mad.lo.s32 	%r3457, %r2177, %r2179, %r3454;
	mad.lo.s32 	%r3460, %r2175, %r2174, %r3457;
	shl.b32 	%r3461, %r3460, 2;
	mov.u32 	%r3462, _ZN6kernel5shmemE;
	add.s32 	%r3463, %r3462, %r3461;
	shl.b32 	%r3464, %r36, 4;
	add.s32 	%r3465, %r3463, %r3464;
	ld.shared.v4.u32 	{%r7704, %r7707, %r7711, %r7710}, [%r3465];

$L__BB0_386:
	shl.b32 	%r3470, %r32, 8;
	shl.b32 	%r3474, %r1764, 8;
	or.b32  	%r3475, %r3474, 128;
	add.s32 	%r3476, %r31, -1;
	mad.lo.s32 	%r3477, %r3475, %r3476, %r2182;
	add.s32 	%r3478, %r3477, %r3470;
	shl.b32 	%r3479, %r3478, 2;
	mov.u32 	%r3480, _ZN6kernel5shmemE;
	add.s32 	%r3481, %r3480, %r3479;
	setp.ne.s32 	%p213, %r32, %r2179;
	shl.b32 	%r3483, %r36, 4;
	add.s32 	%r924, %r3481, %r3483;
	ld.shared.v4.u32 	{%r7713, %r7715, %r7712, %r7714}, [%r924];
	ld.shared.v4.u32 	{%r7709, %r7706, %r7705, %r7708}, [%r924+512];
	@%p213 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7704, %r7707, %r7711, %r7710}, [%r924+1024];

$L__BB0_388:
	setp.eq.s32 	%p214, %r32, 0;
	@%p214 bra 	$L__BB0_391;

	mul.lo.s32 	%r3497, %r60, %r32;
	sub.s32 	%r3498, %r3497, %r60;
	mad.lo.s32 	%r3501, %r2575, 384, %r3498;
	mad.lo.s32 	%r3504, %r2177, %r2179, %r3501;
	mad.lo.s32 	%r3507, %r2175, %r2174, %r3504;
	shl.b32 	%r3508, %r3507, 2;
	mov.u32 	%r3509, _ZN6kernel5shmemE;
	add.s32 	%r3510, %r3509, %r3508;
	shl.b32 	%r3511, %r36, 4;
	add.s32 	%r949, %r3510, %r3511;
	ld.shared.v4.u32 	{%r7724, %r7723, %r7728, %r7726}, [%r949];
	ld.shared.v4.u32 	{%r7722, %r7719, %r7716, %r7717}, [%r949+512];
	ld.shared.v4.u32 	{%r7721, %r7718, %r7720, %r7727}, [%r949+1024];
	@%p211 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7730, %r7731, %r7725, %r7729}, [%r949+1536];

$L__BB0_391:
	setp.ne.s32 	%p216, %r31, 0;
	@%p216 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+80];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3529, %r662, %r1766, %r34;
	mul.lo.s32 	%r3530, %r1764, %r3529;
	mul.lo.s32 	%r3531, %r3530, 768;
	mad.lo.s32 	%r3532, %r32, 384, %r3531;
	add.s32 	%r3533, %r3532, -64;
	mul.wide.s32 	%rd271, %r3533, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7739, %r7737, %r7746, %r7747}, [%rd274+256];
	ld.global.v4.u32 	{%r7745, %r7742, %r7734, %r7735}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p214 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7740, %r7743}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p218, %r32, %r2179;
	ld.global.v2.u32 	{%r7738, %r7736}, [%rd27+768];
	@%p218 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7744, %r7741}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p219, %r32, 0;
	@%p219 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+80];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3550, %r663, %r1765, %r33;
	mul.lo.s32 	%r3554, %r3550, %r1826;
	mad.lo.s32 	%r3557, %r2575, 384, %r3554;
	add.s32 	%r3558, %r3557, -64;
	mad.lo.s32 	%r3561, %r1828, %r59, %r3558;
	mul.wide.s32 	%rd276, %r3561, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7759, %r7758, %r7754, %r7752}, [%rd279+256];
	ld.global.v4.u32 	{%r7749, %r7748, %r7751, %r7757}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7755, %r7753}, [%rd281+768];
	ld.global.v2.u32 	{%r7740, %r7743}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3574, %r1768, -1;
	setp.ge.s32 	%p220, %r664, %r3574;
	setp.lt.s32 	%p221, %r664, 2;
	or.pred  	%p222, %p221, %p220;
	setp.lt.s32 	%p223, %r665, 2;
	or.pred  	%p224, %p222, %p223;
	add.s32 	%r3575, %r1769, -2;
	setp.ge.s32 	%p225, %r665, %r3575;
	or.pred  	%p226, %p225, %p224;
	@%p226 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+88];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1044, %r665, %r1768, %r664;
	shl.b32 	%r3576, %r1044, 6;
	mul.wide.s32 	%rd284, %r3576, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p229, %p216, %p219;
	@%p229 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7779, %r7777}, [%rd286+256];

$L__BB0_401:
	@%p216 bra 	$L__BB0_403;

	shl.b32 	%r3579, %r1768, 5;
	cvt.s64.s32 	%rd287, %r3579;
	cvt.s64.s32 	%rd288, %r36;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7784, %r7782}, [%rd291];

$L__BB0_403:
	@%p219 bra 	$L__BB0_405;

	shl.b32 	%r3582, %r1768, 5;
	neg.s32 	%r3583, %r3582;
	cvt.s64.s32 	%rd292, %r3583;
	cvt.s64.s32 	%rd293, %r36;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7791, %r7789}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7318, %r665, %r1768, %r664;
	ld.param.u64 	%rd555, [%rd1+88];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3586, %r1769, 6;
	shl.b32 	%r3587, %r7318, 7;
	mad.lo.s32 	%r3588, %r3586, %r1768, %r3587;
	mul.wide.s32 	%rd297, %r3588, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p216 bra 	$L__BB0_407;

	shl.b32 	%r3589, %r1768, 5;
	cvt.s64.s32 	%rd298, %r3589;
	cvt.s64.s32 	%rd299, %r36;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7785, %r7783, %r7775, %r7774}, [%rd302];
	shl.b32 	%r3594, %r1768, 6;
	add.s32 	%r3595, %r3594, -32;
	cvt.s64.s32 	%rd303, %r3595;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7793, %r7792, %r7781, %r7780}, [%rd306];

$L__BB0_407:
	@%p219 bra 	$L__BB0_409;

	shl.b32 	%r3600, %r1768, 5;
	xor.b32  	%r3601, %r3600, -32;
	cvt.s64.s32 	%rd307, %r3601;
	cvt.s64.s32 	%rd308, %r36;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7795, %r7794, %r7790, %r7788}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7787, %r7786, %r7778, %r7776}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3615, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3611,%r7539,%r423,%r2278,%r3615;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3611;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7539;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3618, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3619,%r7548,%r3618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3622,%r7419,%r3619;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7796,%r7677;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7796,%r7420,%r3619;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3635, 31;
	mov.u32 	%r3658, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3633,%r7796,%r3635,%r2278,%r3658;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3638,%r3622,%r3633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r7547,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3644,%r3641,%r3638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3647,%r7569,%r3644;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3650,%r7677,%r3647;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3654,%r7540,%r423,%r2278,%r3658;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3654;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7540;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3661, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3662,%r7549,%r3661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3665,%r7419,%r3662;
}
	// end inline asm
	mov.u32 	%r7797, %r7676;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7797,%r7420,%r3662;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3676,%r7797,%r3635,%r2278,%r3658;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3681,%r3665,%r3676;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7547,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3687,%r3681,%r3684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3690,%r7568,%r3687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3693,%r7676,%r3690;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3696,%r7539,%r7548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3699,%r7423,%r3696;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7798,%r7675;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7798,%r7424,%r3696;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3712, 31;
	mov.u32 	%r3714, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3710,%r7798,%r3712,%r2278,%r3714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3715,%r3699,%r3710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3718,%r7538,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3721,%r3718,%r3715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3724,%r7564,%r3721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3727,%r7675,%r3724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3730,%r7540,%r7549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3733,%r7423,%r3730;
}
	// end inline asm
	mov.u32 	%r7799, %r7674;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7799,%r7424,%r3730;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3742,%r7799,%r3712,%r2278,%r3714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3747,%r3733,%r3742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3750,%r7538,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r3747,%r3750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3756,%r7563,%r3753;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3759,%r7674,%r3756;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3763,%r7523,%r423,%r2278,%r3714;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3763;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7523;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3770, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3771,%r7531,%r3770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3774,%r7419,%r3771;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7800,%r7673;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7800,%r7420,%r3771;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3789, 31;
	mov.u32 	%r3791, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3787,%r7800,%r3789,%r2278,%r3791;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r3774,%r3787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3795,%r7530,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r3795,%r3792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r7561,%r3798;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3804,%r7673,%r3801;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3807,%r7523,%r7531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3810,%r7423,%r3807;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7801,%r7672;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7801,%r7424,%r3807;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3823, 31;
	mov.u32 	%r3846, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3821,%r7801,%r3823,%r2278,%r3846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3826,%r3810,%r3821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3829,%r7522,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3832,%r3829,%r3826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3835,%r7559,%r3832;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3838,%r7672,%r3835;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3842,%r7507,%r423,%r2278,%r3846;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3842;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7507;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3849, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3850,%r7512,%r3849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3853,%r7419,%r3850;
}
	// end inline asm
	@%p15 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7802,%r7671;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7802,%r7420,%r3850;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3868, 31;
	mov.u32 	%r3891, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3866,%r7802,%r3868,%r2278,%r3891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3871,%r3853,%r3866;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3874,%r7511,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3877,%r3874,%r3871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3880,%r7795,%r3877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3883,%r7671,%r3880;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3887,%r7508,%r423,%r2278,%r3891;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3887;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7508;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3894, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3895,%r7513,%r3894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3898,%r7419,%r3895;
}
	// end inline asm
	mov.u32 	%r7803, %r7670;
	@%p15 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7803,%r7420,%r3895;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3909,%r7803,%r3868,%r2278,%r3891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3914,%r3898,%r3909;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r7511,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3920,%r3914,%r3917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3923,%r7556,%r3920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3926,%r7670,%r3923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3929,%r7507,%r7512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3932,%r7423,%r3929;
}
	// end inline asm
	@%p15 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7804,%r7669;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7804,%r7424,%r3929;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3945, 31;
	mov.u32 	%r3947, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3943,%r7804,%r3945,%r2278,%r3947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3948,%r3932,%r3943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3951,%r7506,%r7726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3954,%r3951,%r3948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3957,%r7794,%r3954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3960,%r7669,%r3957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3963,%r7508,%r7513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3966,%r7423,%r3963;
}
	// end inline asm
	mov.u32 	%r7805, %r7668;
	@%p15 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7805,%r7424,%r3963;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3975,%r7805,%r3945,%r2278,%r3947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3980,%r3966,%r3975;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3983,%r7506,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3986,%r3980,%r3983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3989,%r7553,%r3986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3992,%r7668,%r3989;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3996,%r7495,%r423,%r2278,%r3947;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3996;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7495;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4003, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4004,%r7502,%r4003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4007,%r7419,%r4004;
}
	// end inline asm
	@%p15 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7806,%r7667;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7806,%r7420,%r4004;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r4022, 31;
	mov.u32 	%r4045, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4020,%r7806,%r4022,%r2278,%r4045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4025,%r4007,%r4020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r7501,%r7511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r4028,%r4025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r562,%r4031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r7667,%r4034;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4041,%r7496,%r423,%r2278,%r4045;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4041;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7496;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4048, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4049,%r7503,%r4048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4052,%r7419,%r4049;
}
	// end inline asm
	mov.u32 	%r7807, %r7666;
	@%p15 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7807,%r7420,%r4049;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4063,%r7807,%r4022,%r2278,%r4045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4068,%r4052,%r4063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4071,%r7501,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r4068,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4077,%r561,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r7666,%r4077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r7502,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r7503,%r7513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4089,%r4083,%r4086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4092,%r7544,%r4089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4095,%r7665,%r4092;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;

	mov.u32 	%r7665, %r4095;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4100,%r7495,%r7502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4103,%r7423,%r4100;
}
	// end inline asm
	@%p15 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7809,%r7664;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7809,%r7424,%r4100;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4114, 31;
	mov.u32 	%r4116, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4112,%r7809,%r4114,%r2278,%r4116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4117,%r4103,%r4112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r7494,%r7506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4123,%r4120,%r4117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4126,%r553,%r4123;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7664,%r4126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4132,%r7496,%r7503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4135,%r7423,%r4132;
}
	// end inline asm
	mov.u32 	%r7810, %r7663;
	@%p15 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7810,%r7424,%r4132;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4144,%r7810,%r4114,%r2278,%r4116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4149,%r4135,%r4144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4152,%r7494,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4155,%r4149,%r4152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4158,%r552,%r4155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7663,%r4158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4164,%r7495,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4167,%r7496,%r7508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4170,%r4164,%r4167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4173,%r7535,%r4170;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4176,%r7662,%r4173;
}
	// end inline asm
	@%p15 bra 	$L__BB0_449;

	mov.u32 	%r7662, %r4176;

$L__BB0_449:
	mov.u32 	%r4186, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4182,%r7484,%r423,%r2278,%r4186;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4182;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7484;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4189, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4190,%r7489,%r4189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4193,%r7419,%r4190;
}
	// end inline asm
	@%p15 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7812,%r7661;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7812,%r7420,%r4190;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4206, 31;
	mov.u32 	%r4229, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4204,%r7812,%r4206,%r2278,%r4229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4209,%r4193,%r4204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r7488,%r7501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4215,%r4212,%r4209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4218,%r545,%r4215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7562,%r7661,%r4218;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4225,%r7485,%r423,%r2278,%r4229;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4225;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7485;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4232, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4233,%r7490,%r4232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4236,%r7419,%r4233;
}
	// end inline asm
	mov.u32 	%r7813, %r7660;
	@%p15 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7813,%r7420,%r4233;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4247,%r7813,%r4206,%r2278,%r4229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4252,%r4236,%r4247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4255,%r7488,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r4252,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4261,%r7528,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4264,%r7660,%r4261;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4267,%r7489,%r7531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4270,%r7490,%r7503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4273,%r4267,%r4270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4276,%r7527,%r4273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4279,%r7659,%r4276;
}
	// end inline asm
	@%p15 bra 	$L__BB0_456;

	mov.u32 	%r7659, %r4279;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4284,%r7484,%r7489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4287,%r7423,%r4284;
}
	// end inline asm
	@%p15 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7815,%r7658;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7815,%r7424,%r4284;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4298, 31;
	mov.u32 	%r4300, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4296,%r7815,%r4298,%r2278,%r4300;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4301,%r4287,%r4296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r7483,%r7494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r4304,%r4301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4310,%r537,%r4307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r7658,%r4310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4316,%r7485,%r7490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4319,%r7423,%r4316;
}
	// end inline asm
	mov.u32 	%r7816, %r7657;
	@%p15 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7816,%r7424,%r4316;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4328,%r7816,%r4298,%r2278,%r4300;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4333,%r4319,%r4328;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4336,%r7483,%r7522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4339,%r4333,%r4336;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4342,%r7520,%r4339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4345,%r7657,%r4342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4348,%r7484,%r7523;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4351,%r7485,%r7496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4354,%r4348,%r4351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4357,%r7519,%r4354;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4360,%r7656,%r4357;
}
	// end inline asm
	@%p15 bra 	$L__BB0_463;

	mov.u32 	%r7656, %r4360;

$L__BB0_463:
	mov.u32 	%r4370, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4366,%r7475,%r423,%r2278,%r4370;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4366;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7475;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4373, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4374,%r7479,%r4373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4377,%r7419,%r4374;
}
	// end inline asm
	@%p15 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7818,%r7655;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7818,%r7420,%r4374;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4390, 31;
	mov.u32 	%r4392, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4388,%r7818,%r4390,%r2278,%r4392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4393,%r4377,%r4388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r7711,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4399,%r4396,%r4393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4402,%r7793,%r4399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4405,%r7655,%r4402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4408,%r7475,%r7479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4411,%r7423,%r4408;
}
	// end inline asm
	@%p15 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7819,%r7654;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7819,%r7424,%r4408;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4424, 31;
	mov.u32 	%r4447, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4422,%r7819,%r4424,%r2278,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4427,%r4411,%r4422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4430,%r7710,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4433,%r4430,%r4427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4436,%r7792,%r4433;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4439,%r7654,%r4436;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4443,%r7461,%r423,%r2278,%r4447;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4443;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7461;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4450, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4451,%r7468,%r4450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4454,%r7419,%r4451;
}
	// end inline asm
	mov.u32 	%r7820, %r7653;
	@%p15 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7820,%r7420,%r4451;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4465,%r7820,%r4424,%r2278,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4470,%r4454,%r4465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4473,%r7721,%r7511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4476,%r4470,%r4473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4479,%r7791,%r4476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r7653,%r4479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4485,%r7722,%r7512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r7468,%r7724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r4485,%r4488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4494,%r7790,%r4491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4497,%r7652,%r4494;
}
	// end inline asm
	@%p15 bra 	$L__BB0_473;

	mov.u32 	%r7652, %r4497;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4502,%r7461,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4505,%r7423,%r4502;
}
	// end inline asm
	mov.u32 	%r7822, %r7651;
	@%p15 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7822,%r7424,%r4502;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4514, 31;
	mov.u32 	%r4516, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4512,%r7822,%r4514,%r2278,%r4516;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4517,%r4505,%r4512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4520,%r7718,%r7506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4523,%r4517,%r4520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4526,%r7789,%r4523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7651,%r4526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4532,%r7719,%r7507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4535,%r7461,%r7723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4538,%r4532,%r4535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4541,%r7788,%r4538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4544,%r7650,%r4541;
}
	// end inline asm
	@%p15 bra 	$L__BB0_477;

	mov.u32 	%r7650, %r4544;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4550,%r7447,%r423,%r2278,%r4516;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4550;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7447;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4557, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4558,%r7454,%r4557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4561,%r7419,%r4558;
}
	// end inline asm
	@%p15 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7824,%r7649;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7824,%r7420,%r4558;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4574, 31;
	mov.u32 	%r4597, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4572,%r7824,%r4574,%r2278,%r4597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4577,%r4561,%r4572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r7453,%r7721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4583,%r4580,%r4577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4586,%r7787,%r4583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7649,%r4586;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4593,%r7448,%r423,%r2278,%r4597;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4593;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7448;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4600, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4601,%r7455,%r4600;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4604,%r7419,%r4601;
}
	// end inline asm
	mov.u32 	%r7825, %r7648;
	@%p15 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7825,%r7420,%r4601;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4615,%r7825,%r4574,%r2278,%r4597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4620,%r4604,%r4615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4623,%r7453,%r7501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r4620,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4629,%r7545,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7648,%r4629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r7454,%r7502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r7455,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4641,%r4635,%r4638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4644,%r507,%r4641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4647,%r7647,%r4644;
}
	// end inline asm
	@%p15 bra 	$L__BB0_484;

	mov.u32 	%r7647, %r4647;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4652,%r7447,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4655,%r7423,%r4652;
}
	// end inline asm
	@%p15 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7827,%r7646;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7827,%r7424,%r4652;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4666, 31;
	mov.u32 	%r4668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4664,%r7827,%r4666,%r2278,%r4668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4669,%r4655,%r4664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4672,%r7446,%r7718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r4672,%r4669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4678,%r7786,%r4675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7646,%r4678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4684,%r7448,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4687,%r7423,%r4684;
}
	// end inline asm
	mov.u32 	%r7828, %r7645;
	@%p15 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7828,%r7424,%r4684;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4696,%r7828,%r4666,%r2278,%r4668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4701,%r4687,%r4696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4704,%r7446,%r7494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4707,%r4701,%r4704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4710,%r7536,%r4707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7645,%r4710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4716,%r7447,%r7495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4719,%r7448,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4722,%r4716,%r4719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4725,%r499,%r4722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4728,%r7644,%r4725;
}
	// end inline asm
	@%p15 bra 	$L__BB0_491;

	mov.u32 	%r7644, %r4728;

$L__BB0_491:
	mov.u32 	%r4738, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4734,%r7432,%r423,%r2278,%r4738;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4734;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7432;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4741, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4742,%r7440,%r4741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4745,%r7419,%r4742;
}
	// end inline asm
	@%p15 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7830,%r7643;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7830,%r7420,%r4742;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4758, 31;
	mov.u32 	%r4781, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4756,%r7830,%r4758,%r2278,%r4781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4761,%r4745,%r4756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4764,%r7709,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4767,%r4764,%r4761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4770,%r7785,%r4767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7643,%r4770;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4777,%r7433,%r423,%r2278,%r4781;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4777;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7433;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4784, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4785,%r7441,%r4784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4788,%r7419,%r4785;
}
	// end inline asm
	mov.u32 	%r7831, %r7642;
	@%p15 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7831,%r7420,%r4785;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4799,%r7831,%r4758,%r2278,%r4781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4804,%r4788,%r4799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4807,%r7709,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r4804,%r4807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4813,%r7784,%r4810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r7642,%r4813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4819,%r7440,%r7489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4822,%r7441,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4825,%r4819,%r4822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4828,%r492,%r4825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4831,%r7641,%r4828;
}
	// end inline asm
	@%p15 bra 	$L__BB0_498;

	mov.u32 	%r7641, %r4831;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4836,%r7432,%r7440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4839,%r7423,%r4836;
}
	// end inline asm
	@%p15 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7833,%r7640;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7833,%r7424,%r4836;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4850, 31;
	mov.u32 	%r4852, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4848,%r7833,%r4850,%r2278,%r4852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4853,%r4839,%r4848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4856,%r7706,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4859,%r4856,%r4853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4862,%r7783,%r4859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r7640,%r4862;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4868,%r7433,%r7441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4871,%r7423,%r4868;
}
	// end inline asm
	mov.u32 	%r7834, %r7639;
	@%p15 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7834,%r7424,%r4868;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4880,%r7834,%r4850,%r2278,%r4852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4885,%r4871,%r4880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4888,%r7706,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r4885,%r4888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4894,%r7782,%r4891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r7639,%r4894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4900,%r7432,%r7484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4903,%r7433,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4906,%r4900,%r4903;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4909,%r485,%r4906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4912,%r7638,%r4909;
}
	// end inline asm
	@%p15 bra 	$L__BB0_505;

	mov.u32 	%r7638, %r4912;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4917,%r7705,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4920,%r7704,%r7441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4923,%r4917,%r4920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4926,%r7781,%r4923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4929,%r7637,%r4926;
}
	// end inline asm
	@%p15 bra 	$L__BB0_507;

	mov.u32 	%r7637, %r4929;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4932,%r7708,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4935,%r7707,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4938,%r4932,%r4935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4941,%r7780,%r4938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4944,%r7636,%r4941;
}
	// end inline asm
	@%p15 bra 	$L__BB0_509;

	mov.u32 	%r7636, %r4944;

$L__BB0_509:
	mov.u32 	%r4952, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4948,%r7510,%r423,%r2278,%r4952;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4948;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7510;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4955, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4956,%r7464,%r4955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4959,%r7419,%r4956;
}
	// end inline asm
	mov.u32 	%r7838, %r7635;
	@%p15 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7838,%r7420,%r4956;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4970, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4968,%r7838,%r4970,%r2278,%r4952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4973,%r4959,%r4968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4976,%r7725,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r4973,%r4976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4982,%r7779,%r4979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r7635,%r4982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4988,%r7720,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4991,%r7464,%r7716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4994,%r4988,%r4991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4997,%r7778,%r4994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5000,%r7634,%r4997;
}
	// end inline asm
	@%p15 bra 	$L__BB0_513;

	mov.u32 	%r7634, %r5000;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r5005,%r7510,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5008,%r7423,%r5005;
}
	// end inline asm
	mov.u32 	%r7840, %r7633;
	@%p15 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7840,%r7424,%r5005;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r5017, 31;
	mov.u32 	%r5019, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5015,%r7840,%r5017,%r2278,%r5019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5020,%r5008,%r5015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5023,%r7729,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5026,%r5020,%r5023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5029,%r7777,%r5026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7498,%r7633,%r5029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5035,%r7727,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5038,%r7510,%r7717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5041,%r5035,%r5038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5044,%r7776,%r5041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5047,%r7632,%r5044;
}
	// end inline asm
	@%p15 bra 	$L__BB0_517;

	mov.u32 	%r7632, %r5047;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5052,%r7713,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5055,%r7712,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5058,%r5052,%r5055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5061,%r7775,%r5058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5064,%r7631,%r5061;
}
	// end inline asm
	@%p15 bra 	$L__BB0_519;

	mov.u32 	%r7631, %r5064;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5067,%r7715,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5070,%r7714,%r7510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5073,%r5067,%r5070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5076,%r7774,%r5073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5079,%r7630,%r5076;
}
	// end inline asm
	@%p15 bra 	$L__BB0_521;

	mov.u32 	%r7630, %r5079;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+160];
	cvta.to.global.u64 	%rd32, %rd314;
	add.s32 	%r5082, %r1777, 2;
	setp.lt.s32 	%p282, %r664, %r5082;
	add.s32 	%r5083, %r1778, -1;
	setp.ge.s32 	%p283, %r664, %r5083;
	or.pred  	%p284, %p283, %p282;
	add.s32 	%r5084, %r1779, 2;
	setp.lt.s32 	%p285, %r665, %r5084;
	or.pred  	%p286, %p284, %p285;
	add.s32 	%r5085, %r1780, -2;
	setp.ge.s32 	%p287, %r665, %r5085;
	or.pred  	%p288, %p287, %p286;
	setp.lt.s32 	%p289, %r666, %r1774;
	or.pred  	%p290, %p289, %p288;
	mad.lo.s32 	%r5086, %r1776, %r1775, %r1774;
	setp.ge.s32 	%p291, %r666, %r5086;
	or.pred  	%p292, %p290, %p291;
	@%p292 bra 	$L__BB0_763;

	sub.s32 	%r1311, %r666, %r1774;
	rem.s32 	%r5087, %r1311, %r1775;
	setp.ne.s32 	%p293, %r5087, 0;
	@%p293 bra 	$L__BB0_763;

	div.s32 	%r5088, %r1311, %r1775;
	mul.lo.s32 	%r5090, %r5088, %r1803;
	sub.s32 	%r1312, %r664, %r1777;
	sub.s32 	%r1313, %r665, %r1779;
	mul.lo.s32 	%r1314, %r5090, 3;
	add.s32 	%r5091, %r1312, %r1314;
	add.s32 	%r5092, %r5091, -2;
	mul.lo.s32 	%r1315, %r5092, %r1805;
	add.s32 	%r5094, %r1313, %r1315;
	mul.lo.s32 	%r5095, %r5094, %r48;
	sub.s32 	%r1316, %r5095, %r1781;
	@%p15 bra 	$L__BB0_528;

	not.pred 	%p295, %p11;
	@%p295 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3650;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5097, %r1316, %r389;
	mul.wide.s32 	%rd315, %r5097, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;

$L__BB0_526:
	not.pred 	%p296, %p13;
	@%p296 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3650;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5099, %r1316, %r390;
	mul.wide.s32 	%rd317, %r5099, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;

$L__BB0_528:
	@%p15 bra 	$L__BB0_533;

	not.pred 	%p298, %p12;
	@%p298 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3727;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5101, %r1316, %r403;
	mul.wide.s32 	%rd319, %r5101, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;

$L__BB0_531:
	not.pred 	%p299, %p14;
	@%p299 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3727;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5103, %r1316, %r404;
	mul.wide.s32 	%rd321, %r5103, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_533:
	sub.s32 	%r7327, %r664, %r1777;
	add.s32 	%r1317, %r1314, %r1803;
	add.s32 	%r5105, %r7327, %r1317;
	add.s32 	%r5106, %r5105, -2;
	mad.lo.s32 	%r5108, %r5106, %r1805, %r1313;
	mul.lo.s32 	%r5109, %r5108, %r48;
	sub.s32 	%r1318, %r5109, %r1781;
	@%p15 bra 	$L__BB0_538;

	not.pred 	%p301, %p11;
	@%p301 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3693;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5111, %r1318, %r389;
	mul.wide.s32 	%rd323, %r5111, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;

$L__BB0_536:
	not.pred 	%p302, %p13;
	@%p302 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3693;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5113, %r1318, %r390;
	mul.wide.s32 	%rd325, %r5113, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;

$L__BB0_538:
	@%p15 bra 	$L__BB0_543;

	not.pred 	%p304, %p12;
	@%p304 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3759;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5115, %r1318, %r403;
	mul.wide.s32 	%rd327, %r5115, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;

$L__BB0_541:
	not.pred 	%p305, %p14;
	@%p305 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3759;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5117, %r1318, %r404;
	mul.wide.s32 	%rd329, %r5117, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_543:
	add.s32 	%r1319, %r1313, 1;
	add.s32 	%r5118, %r1319, %r1315;
	mul.lo.s32 	%r5119, %r5118, %r48;
	sub.s32 	%r1320, %r5119, %r1781;
	@%p15 bra 	$L__BB0_548;

	not.pred 	%p307, %p11;
	@%p307 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3804;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5121, %r1320, %r389;
	mul.wide.s32 	%rd331, %r5121, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;

$L__BB0_546:
	not.pred 	%p308, %p13;
	@%p308 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3804;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5123, %r1320, %r390;
	mul.wide.s32 	%rd333, %r5123, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;

$L__BB0_548:
	@%p15 bra 	$L__BB0_553;

	not.pred 	%p310, %p12;
	@%p310 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3838;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5125, %r1320, %r403;
	mul.wide.s32 	%rd335, %r5125, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;

$L__BB0_551:
	not.pred 	%p311, %p14;
	@%p311 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3838;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5127, %r1320, %r404;
	mul.wide.s32 	%rd337, %r5127, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_553:
	not.b32 	%r5128, %r1777;
	add.s32 	%r1321, %r664, %r5128;
	not.b32 	%r5129, %r1779;
	add.s32 	%r1322, %r665, %r5129;
	add.s32 	%r5130, %r1321, %r1314;
	mul.lo.s32 	%r1323, %r5130, %r1805;
	add.s32 	%r5132, %r1322, %r1323;
	mul.lo.s32 	%r5133, %r5132, %r48;
	sub.s32 	%r1324, %r5133, %r1781;
	@%p15 bra 	$L__BB0_558;

	not.pred 	%p313, %p11;
	@%p313 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3883;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5135, %r1324, %r389;
	mul.wide.s32 	%rd339, %r5135, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;

$L__BB0_556:
	not.pred 	%p314, %p13;
	@%p314 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3883;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5137, %r1324, %r390;
	mul.wide.s32 	%rd341, %r5137, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;

$L__BB0_558:
	@%p15 bra 	$L__BB0_563;

	not.pred 	%p316, %p12;
	@%p316 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3960;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5139, %r1324, %r403;
	mul.wide.s32 	%rd343, %r5139, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;

$L__BB0_561:
	not.pred 	%p317, %p14;
	@%p317 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3960;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5141, %r1324, %r404;
	mul.wide.s32 	%rd345, %r5141, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_563:
	add.s32 	%r5143, %r1321, %r1317;
	mul.lo.s32 	%r1325, %r5143, %r1805;
	add.s32 	%r5144, %r1322, %r1325;
	mul.lo.s32 	%r5145, %r5144, %r48;
	sub.s32 	%r1326, %r5145, %r1781;
	@%p15 bra 	$L__BB0_568;

	not.pred 	%p319, %p11;
	@%p319 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3926;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5147, %r1326, %r389;
	mul.wide.s32 	%rd347, %r5147, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;

$L__BB0_566:
	not.pred 	%p320, %p13;
	@%p320 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3926;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5149, %r1326, %r390;
	mul.wide.s32 	%rd349, %r5149, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;

$L__BB0_568:
	@%p15 bra 	$L__BB0_573;

	not.pred 	%p322, %p12;
	@%p322 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3992;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5151, %r1326, %r403;
	mul.wide.s32 	%rd351, %r5151, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;

$L__BB0_571:
	not.pred 	%p323, %p14;
	@%p323 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3992;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5153, %r1326, %r404;
	mul.wide.s32 	%rd353, %r5153, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_573:
	add.s32 	%r5154, %r1313, %r1323;
	mul.lo.s32 	%r5155, %r5154, %r48;
	sub.s32 	%r1327, %r5155, %r1781;
	@%p15 bra 	$L__BB0_578;

	not.pred 	%p325, %p11;
	@%p325 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5157, %r1327, %r389;
	mul.wide.s32 	%rd355, %r5157, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;

$L__BB0_576:
	not.pred 	%p326, %p13;
	@%p326 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7572;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5159, %r1327, %r390;
	mul.wide.s32 	%rd357, %r5159, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;

$L__BB0_578:
	@%p15 bra 	$L__BB0_583;

	not.pred 	%p328, %p12;
	@%p328 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5161, %r1327, %r403;
	mul.wide.s32 	%rd359, %r5161, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;

$L__BB0_581:
	not.pred 	%p329, %p14;
	@%p329 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5163, %r1327, %r404;
	mul.wide.s32 	%rd361, %r5163, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_583:
	add.s32 	%r5164, %r1313, %r1325;
	mul.lo.s32 	%r5165, %r5164, %r48;
	sub.s32 	%r1328, %r5165, %r1781;
	@%p15 bra 	$L__BB0_588;

	not.pred 	%p331, %p11;
	@%p331 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5167, %r1328, %r389;
	mul.wide.s32 	%rd363, %r5167, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;

$L__BB0_586:
	not.pred 	%p332, %p13;
	@%p332 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7571;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5169, %r1328, %r390;
	mul.wide.s32 	%rd365, %r5169, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;

$L__BB0_588:
	@%p15 bra 	$L__BB0_593;

	not.pred 	%p334, %p12;
	@%p334 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5171, %r1328, %r403;
	mul.wide.s32 	%rd367, %r5171, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;

$L__BB0_591:
	not.pred 	%p335, %p14;
	@%p335 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7566;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5173, %r1328, %r404;
	mul.wide.s32 	%rd369, %r5173, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_593:
	add.s32 	%r1329, %r1317, %r1803;
	add.s32 	%r5175, %r1321, %r1329;
	mul.lo.s32 	%r1330, %r5175, %r1805;
	add.s32 	%r5177, %r1313, %r1330;
	mul.lo.s32 	%r5178, %r5177, %r48;
	sub.s32 	%r1331, %r5178, %r1781;
	@%p15 bra 	$L__BB0_598;

	not.pred 	%p337, %p11;
	@%p337 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7665;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5180, %r1331, %r389;
	mul.wide.s32 	%rd371, %r5180, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;

$L__BB0_596:
	not.pred 	%p338, %p13;
	@%p338 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7665;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5182, %r1331, %r390;
	mul.wide.s32 	%rd373, %r5182, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;

$L__BB0_598:
	@%p15 bra 	$L__BB0_603;

	not.pred 	%p340, %p12;
	@%p340 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7662;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5184, %r1331, %r403;
	mul.wide.s32 	%rd375, %r5184, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;

$L__BB0_601:
	not.pred 	%p341, %p14;
	@%p341 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7662;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5186, %r1331, %r404;
	mul.wide.s32 	%rd377, %r5186, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_603:
	add.s32 	%r7319, %r1313, 1;
	add.s32 	%r5187, %r7319, %r1323;
	mul.lo.s32 	%r5188, %r5187, %r48;
	sub.s32 	%r1332, %r5188, %r1781;
	@%p15 bra 	$L__BB0_608;

	not.pred 	%p343, %p11;
	@%p343 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5190, %r1332, %r389;
	mul.wide.s32 	%rd379, %r5190, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;

$L__BB0_606:
	not.pred 	%p344, %p13;
	@%p344 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7562;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5192, %r1332, %r390;
	mul.wide.s32 	%rd381, %r5192, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;

$L__BB0_608:
	@%p15 bra 	$L__BB0_613;

	not.pred 	%p346, %p12;
	@%p346 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5194, %r1332, %r403;
	mul.wide.s32 	%rd383, %r5194, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;

$L__BB0_611:
	not.pred 	%p347, %p14;
	@%p347 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5196, %r1332, %r404;
	mul.wide.s32 	%rd385, %r5196, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_613:
	add.s32 	%r7320, %r1313, 1;
	add.s32 	%r5197, %r7320, %r1325;
	mul.lo.s32 	%r5198, %r5197, %r48;
	sub.s32 	%r1333, %r5198, %r1781;
	@%p15 bra 	$L__BB0_618;

	not.pred 	%p349, %p11;
	@%p349 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4264;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5200, %r1333, %r389;
	mul.wide.s32 	%rd387, %r5200, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;

$L__BB0_616:
	not.pred 	%p350, %p13;
	@%p350 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4264;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5202, %r1333, %r390;
	mul.wide.s32 	%rd389, %r5202, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;

$L__BB0_618:
	@%p15 bra 	$L__BB0_623;

	not.pred 	%p352, %p12;
	@%p352 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4345;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5204, %r1333, %r403;
	mul.wide.s32 	%rd391, %r5204, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;

$L__BB0_621:
	not.pred 	%p353, %p14;
	@%p353 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4345;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5206, %r1333, %r404;
	mul.wide.s32 	%rd393, %r5206, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_623:
	add.s32 	%r7321, %r1313, 1;
	add.s32 	%r5207, %r7321, %r1330;
	mul.lo.s32 	%r5208, %r5207, %r48;
	sub.s32 	%r1334, %r5208, %r1781;
	@%p15 bra 	$L__BB0_628;

	not.pred 	%p355, %p11;
	@%p355 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5210, %r1334, %r389;
	mul.wide.s32 	%rd395, %r5210, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;

$L__BB0_626:
	not.pred 	%p356, %p13;
	@%p356 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5212, %r1334, %r390;
	mul.wide.s32 	%rd397, %r5212, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;

$L__BB0_628:
	@%p15 bra 	$L__BB0_633;

	not.pred 	%p358, %p12;
	@%p358 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7656;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5214, %r1334, %r403;
	mul.wide.s32 	%rd399, %r5214, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;

$L__BB0_631:
	not.pred 	%p359, %p14;
	@%p359 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7656;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5216, %r1334, %r404;
	mul.wide.s32 	%rd401, %r5216, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_633:
	add.s32 	%r1335, %r1313, 2;
	add.s32 	%r5217, %r1335, %r1323;
	mul.lo.s32 	%r5218, %r5217, %r48;
	sub.s32 	%r1336, %r5218, %r1781;
	@%p15 bra 	$L__BB0_638;

	not.pred 	%p361, %p11;
	@%p361 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4405;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5220, %r1336, %r389;
	mul.wide.s32 	%rd403, %r5220, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;

$L__BB0_636:
	not.pred 	%p362, %p13;
	@%p362 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4405;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5222, %r1336, %r390;
	mul.wide.s32 	%rd405, %r5222, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;

$L__BB0_638:
	@%p15 bra 	$L__BB0_643;

	not.pred 	%p364, %p12;
	@%p364 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4439;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5224, %r1336, %r403;
	mul.wide.s32 	%rd407, %r5224, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;

$L__BB0_641:
	not.pred 	%p365, %p14;
	@%p365 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4439;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5226, %r1336, %r404;
	mul.wide.s32 	%rd409, %r5226, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_643:
	mul.lo.s32 	%r1337, %r5105, %r1805;
	add.s32 	%r5229, %r1322, %r1337;
	mul.lo.s32 	%r5230, %r5229, %r48;
	sub.s32 	%r1338, %r5230, %r1781;
	@%p15 bra 	$L__BB0_648;

	not.pred 	%p367, %p11;
	@%p367 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5232, %r1338, %r389;
	mul.wide.s32 	%rd411, %r5232, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;

$L__BB0_646:
	not.pred 	%p368, %p13;
	@%p368 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7558;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5234, %r1338, %r390;
	mul.wide.s32 	%rd413, %r5234, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;

$L__BB0_648:
	@%p15 bra 	$L__BB0_653;

	not.pred 	%p370, %p12;
	@%p370 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5236, %r1338, %r403;
	mul.wide.s32 	%rd415, %r5236, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;

$L__BB0_651:
	not.pred 	%p371, %p14;
	@%p371 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5238, %r1338, %r404;
	mul.wide.s32 	%rd417, %r5238, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_653:
	sub.s32 	%r7328, %r664, %r1777;
	add.s32 	%r5240, %r7328, %r1329;
	mul.lo.s32 	%r1339, %r5240, %r1805;
	add.s32 	%r5241, %r1322, %r1339;
	mul.lo.s32 	%r5242, %r5241, %r48;
	sub.s32 	%r1340, %r5242, %r1781;
	@%p15 bra 	$L__BB0_658;

	not.pred 	%p373, %p11;
	@%p373 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5244, %r1340, %r389;
	mul.wide.s32 	%rd419, %r5244, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;

$L__BB0_656:
	not.pred 	%p374, %p13;
	@%p374 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5246, %r1340, %r390;
	mul.wide.s32 	%rd421, %r5246, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;

$L__BB0_658:
	@%p15 bra 	$L__BB0_663;

	not.pred 	%p376, %p12;
	@%p376 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7650;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5248, %r1340, %r403;
	mul.wide.s32 	%rd423, %r5248, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;

$L__BB0_661:
	not.pred 	%p377, %p14;
	@%p377 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7650;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5250, %r1340, %r404;
	mul.wide.s32 	%rd425, %r5250, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_663:
	mul.lo.s32 	%r1341, %r5091, %r1805;
	add.s32 	%r5253, %r1313, %r1341;
	mul.lo.s32 	%r5254, %r5253, %r48;
	sub.s32 	%r1342, %r5254, %r1781;
	@%p15 bra 	$L__BB0_668;

	not.pred 	%p379, %p11;
	@%p379 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5256, %r1342, %r389;
	mul.wide.s32 	%rd427, %r5256, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;

$L__BB0_666:
	not.pred 	%p380, %p13;
	@%p380 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7552;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5258, %r1342, %r390;
	mul.wide.s32 	%rd429, %r5258, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;

$L__BB0_668:
	@%p15 bra 	$L__BB0_673;

	not.pred 	%p382, %p12;
	@%p382 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5260, %r1342, %r403;
	mul.wide.s32 	%rd431, %r5260, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;

$L__BB0_671:
	not.pred 	%p383, %p14;
	@%p383 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7543;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5262, %r1342, %r404;
	mul.wide.s32 	%rd433, %r5262, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_673:
	add.s32 	%r5263, %r1313, %r1337;
	mul.lo.s32 	%r5264, %r5263, %r48;
	sub.s32 	%r1343, %r5264, %r1781;
	@%p15 bra 	$L__BB0_678;

	not.pred 	%p385, %p11;
	@%p385 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5266, %r1343, %r389;
	mul.wide.s32 	%rd435, %r5266, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;

$L__BB0_676:
	not.pred 	%p386, %p13;
	@%p386 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7551;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5268, %r1343, %r390;
	mul.wide.s32 	%rd437, %r5268, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;

$L__BB0_678:
	@%p15 bra 	$L__BB0_683;

	not.pred 	%p388, %p12;
	@%p388 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5270, %r1343, %r403;
	mul.wide.s32 	%rd439, %r5270, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;

$L__BB0_681:
	not.pred 	%p389, %p14;
	@%p389 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7542;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5272, %r1343, %r404;
	mul.wide.s32 	%rd441, %r5272, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_683:
	add.s32 	%r5273, %r1313, %r1339;
	mul.lo.s32 	%r5274, %r5273, %r48;
	sub.s32 	%r1344, %r5274, %r1781;
	@%p15 bra 	$L__BB0_688;

	not.pred 	%p391, %p11;
	@%p391 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5276, %r1344, %r389;
	mul.wide.s32 	%rd443, %r5276, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;

$L__BB0_686:
	not.pred 	%p392, %p13;
	@%p392 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5278, %r1344, %r390;
	mul.wide.s32 	%rd445, %r5278, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;

$L__BB0_688:
	@%p15 bra 	$L__BB0_693;

	not.pred 	%p394, %p12;
	@%p394 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5280, %r1344, %r403;
	mul.wide.s32 	%rd447, %r5280, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;

$L__BB0_691:
	not.pred 	%p395, %p14;
	@%p395 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5282, %r1344, %r404;
	mul.wide.s32 	%rd449, %r5282, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_693:
	add.s32 	%r7322, %r1313, 1;
	add.s32 	%r5283, %r7322, %r1341;
	mul.lo.s32 	%r5284, %r5283, %r48;
	sub.s32 	%r1345, %r5284, %r1781;
	@%p15 bra 	$L__BB0_698;

	not.pred 	%p397, %p11;
	@%p397 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5286, %r1345, %r389;
	mul.wide.s32 	%rd451, %r5286, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;

$L__BB0_696:
	not.pred 	%p398, %p13;
	@%p398 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7534;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5288, %r1345, %r390;
	mul.wide.s32 	%rd453, %r5288, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;

$L__BB0_698:
	@%p15 bra 	$L__BB0_703;

	not.pred 	%p400, %p12;
	@%p400 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7526;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5290, %r1345, %r403;
	mul.wide.s32 	%rd455, %r5290, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;

$L__BB0_701:
	not.pred 	%p401, %p14;
	@%p401 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7526;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5292, %r1345, %r404;
	mul.wide.s32 	%rd457, %r5292, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_703:
	add.s32 	%r7323, %r1313, 1;
	add.s32 	%r5293, %r7323, %r1337;
	mul.lo.s32 	%r5294, %r5293, %r48;
	sub.s32 	%r1346, %r5294, %r1781;
	@%p15 bra 	$L__BB0_708;

	not.pred 	%p403, %p11;
	@%p403 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5296, %r1346, %r389;
	mul.wide.s32 	%rd459, %r5296, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;

$L__BB0_706:
	not.pred 	%p404, %p13;
	@%p404 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7533;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5298, %r1346, %r390;
	mul.wide.s32 	%rd461, %r5298, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;

$L__BB0_708:
	@%p15 bra 	$L__BB0_713;

	not.pred 	%p406, %p12;
	@%p406 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7525;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5300, %r1346, %r403;
	mul.wide.s32 	%rd463, %r5300, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;

$L__BB0_711:
	not.pred 	%p407, %p14;
	@%p407 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7525;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5302, %r1346, %r404;
	mul.wide.s32 	%rd465, %r5302, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_713:
	add.s32 	%r7324, %r1313, 1;
	add.s32 	%r5303, %r7324, %r1339;
	mul.lo.s32 	%r5304, %r5303, %r48;
	sub.s32 	%r1347, %r5304, %r1781;
	@%p15 bra 	$L__BB0_718;

	not.pred 	%p409, %p11;
	@%p409 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5306, %r1347, %r389;
	mul.wide.s32 	%rd467, %r5306, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;

$L__BB0_716:
	not.pred 	%p410, %p13;
	@%p410 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5308, %r1347, %r390;
	mul.wide.s32 	%rd469, %r5308, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;

$L__BB0_718:
	@%p15 bra 	$L__BB0_723;

	not.pred 	%p412, %p12;
	@%p412 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5310, %r1347, %r403;
	mul.wide.s32 	%rd471, %r5310, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;

$L__BB0_721:
	not.pred 	%p413, %p14;
	@%p413 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5312, %r1347, %r404;
	mul.wide.s32 	%rd473, %r5312, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_723:
	add.s32 	%r5313, %r1335, %r1339;
	mul.lo.s32 	%r5314, %r5313, %r48;
	sub.s32 	%r1348, %r5314, %r1781;
	@%p15 bra 	$L__BB0_728;

	not.pred 	%p415, %p11;
	@%p415 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5316, %r1348, %r389;
	mul.wide.s32 	%rd475, %r5316, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;

$L__BB0_726:
	not.pred 	%p416, %p13;
	@%p416 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5318, %r1348, %r390;
	mul.wide.s32 	%rd477, %r5318, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;

$L__BB0_728:
	@%p15 bra 	$L__BB0_733;

	not.pred 	%p418, %p12;
	@%p418 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5320, %r1348, %r403;
	mul.wide.s32 	%rd479, %r5320, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;

$L__BB0_731:
	not.pred 	%p419, %p14;
	@%p419 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5322, %r1348, %r404;
	mul.wide.s32 	%rd481, %r5322, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_733:
	sub.s32 	%r7329, %r664, %r1777;
	add.s32 	%r1349, %r7329, 1;
	add.s32 	%r5323, %r1349, %r1317;
	mad.lo.s32 	%r5325, %r5323, %r1805, %r1313;
	mul.lo.s32 	%r5326, %r5325, %r48;
	sub.s32 	%r1350, %r5326, %r1781;
	@%p15 bra 	$L__BB0_738;

	not.pred 	%p421, %p11;
	@%p421 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7505;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5328, %r1350, %r389;
	mul.wide.s32 	%rd483, %r5328, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;

$L__BB0_736:
	not.pred 	%p422, %p13;
	@%p422 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7505;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5330, %r1350, %r390;
	mul.wide.s32 	%rd485, %r5330, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;

$L__BB0_738:
	@%p15 bra 	$L__BB0_743;

	not.pred 	%p424, %p12;
	@%p424 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7498;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5332, %r1350, %r403;
	mul.wide.s32 	%rd487, %r5332, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;

$L__BB0_741:
	not.pred 	%p425, %p14;
	@%p425 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7498;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5334, %r1350, %r404;
	mul.wide.s32 	%rd489, %r5334, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_743:
	add.s32 	%r5336, %r1349, %r1329;
	mul.lo.s32 	%r1351, %r5336, %r1805;
	add.s32 	%r5337, %r1313, %r1351;
	mul.lo.s32 	%r5338, %r5337, %r48;
	sub.s32 	%r1352, %r5338, %r1781;
	@%p15 bra 	$L__BB0_748;

	not.pred 	%p427, %p11;
	@%p427 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5340, %r1352, %r389;
	mul.wide.s32 	%rd491, %r5340, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;

$L__BB0_746:
	not.pred 	%p428, %p13;
	@%p428 bra 	$L__BB0_748;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5342, %r1352, %r390;
	mul.wide.s32 	%rd493, %r5342, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;

$L__BB0_748:
	@%p15 bra 	$L__BB0_753;

	not.pred 	%p430, %p12;
	@%p430 bra 	$L__BB0_751;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5344, %r1352, %r403;
	mul.wide.s32 	%rd495, %r5344, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;

$L__BB0_751:
	not.pred 	%p431, %p14;
	@%p431 bra 	$L__BB0_753;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5346, %r1352, %r404;
	mul.wide.s32 	%rd497, %r5346, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_753:
	add.s32 	%r7325, %r1313, 1;
	add.s32 	%r5347, %r7325, %r1351;
	mul.lo.s32 	%r5348, %r5347, %r48;
	sub.s32 	%r1353, %r5348, %r1781;
	@%p15 bra 	$L__BB0_758;

	not.pred 	%p433, %p11;
	@%p433 bra 	$L__BB0_756;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5350, %r1353, %r389;
	mul.wide.s32 	%rd499, %r5350, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;

$L__BB0_756:
	not.pred 	%p434, %p13;
	@%p434 bra 	$L__BB0_758;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5352, %r1353, %r390;
	mul.wide.s32 	%rd501, %r5352, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;

$L__BB0_758:
	@%p15 bra 	$L__BB0_763;

	not.pred 	%p436, %p12;
	@%p436 bra 	$L__BB0_761;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5354, %r1353, %r403;
	mul.wide.s32 	%rd503, %r5354, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;

$L__BB0_761:
	not.pred 	%p437, %p14;
	@%p437 bra 	$L__BB0_763;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5356, %r1353, %r404;
	mul.wide.s32 	%rd505, %r5356, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_763:
	setp.eq.s32 	%p438, %r31, %r2174;
	@%p438 bra 	$L__BB0_765;

	mad.lo.s32 	%r5357, %r1764, %r31, %r32;
	mov.u32 	%r5358, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5359, %r5357, 1280, %r5358;
	add.s32 	%r5360, %r5359, -256;
	shl.b32 	%r5361, %r36, 4;
	add.s32 	%r5362, %r5360, %r5361;
	st.shared.v4.u32 	[%r5362+256], {%r3883, %r3960, %r7652, %r7650};
	st.shared.v4.u32 	[%r5362+1024], {%r3650, %r3727, %r7665, %r7662};
	shl.b32 	%r5363, %r36, 3;
	add.s32 	%r5364, %r5360, %r5363;
	st.shared.v2.u32 	[%r5364+768], {%r3926, %r3992};

$L__BB0_765:
	setp.eq.s32 	%p439, %r32, %r2179;
	@%p439 bra 	$L__BB0_769;

	mad.lo.s32 	%r5368, %r1763, 384, -64;
	mul.lo.s32 	%r5369, %r5368, %r32;
	mad.lo.s32 	%r5371, %r2175, %r2174, %r5369;
	mad.lo.s32 	%r5372, %r2575, 384, %r5371;
	shl.b32 	%r5373, %r5372, 2;
	mov.u32 	%r5374, _ZN6kernel5shmemE;
	add.s32 	%r5375, %r5374, %r5373;
	add.s32 	%r5376, %r5375, -256;
	shl.b32 	%r5377, %r36, 4;
	add.s32 	%r5378, %r5376, %r5377;
	st.shared.v4.u32 	[%r5378+256], {%r3804, %r3838, %r7659, %r7656};
	st.shared.v4.u32 	[%r5378+1024], {%r4405, %r4439, %r7637, %r7636};
	shl.b32 	%r5379, %r36, 3;
	add.s32 	%r1357, %r5376, %r5379;
	@%p438 bra 	$L__BB0_768;

	st.shared.v2.u32 	[%r1357], {%r3693, %r3759};

$L__BB0_768:
	st.shared.v2.u32 	[%r1357+768], {%r4264, %r4345};

$L__BB0_769:
	setp.ne.s32 	%p441, %r31, %r2174;
	ld.param.u64 	%rd507, [%rd1+80];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p441 bra 	$L__BB0_771;

	mad.lo.s32 	%r5381, %r662, %r1766, %r34;
	mul.lo.s32 	%r5382, %r1764, %r5381;
	mul.lo.s32 	%r5383, %r5382, 768;
	mad.lo.s32 	%r5384, %r32, 384, %r5383;
	add.s32 	%r5385, %r5384, -64;
	mul.wide.s32 	%rd508, %r5385, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3883, %r3960, %r7652, %r7650};
	st.global.v4.u32 	[%rd511+1024], {%r3650, %r3727, %r7665, %r7662};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3926, %r3992};
	st.global.v2.u32 	[%rd513+1536], {%r3693, %r3759};

$L__BB0_771:
	setp.ne.s32 	%p442, %r32, %r2179;
	@%p442 bra 	$L__BB0_776;

	ld.param.u64 	%rd557, [%rd1+80];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5388, %r663, %r1765, %r33;
	mul.lo.s32 	%r5392, %r5388, %r1826;
	mad.lo.s32 	%r5395, %r2575, 384, %r5392;
	add.s32 	%r5396, %r5395, -64;
	mad.lo.s32 	%r5399, %r1828, %r59, %r5396;
	mul.wide.s32 	%rd514, %r5399, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3804, %r3838, %r7659, %r7656};
	st.global.v4.u32 	[%rd517+1024], {%r4405, %r4439, %r7637, %r7636};
	add.s64 	%rd34, %rd515, %rd275;
	@%p438 bra 	$L__BB0_774;

	st.global.v2.u32 	[%rd34], {%r3693, %r3759};

$L__BB0_774:
	st.global.v2.u32 	[%rd34+768], {%r4264, %r4345};
	@%p216 bra 	$L__BB0_776;

	st.global.v2.u32 	[%rd34+1536], {%r7744, %r7741};

$L__BB0_776:
	setp.ge.s32 	%p445, %r31, %r2174;
	@%p445 bra 	$L__BB0_778;

	mul.lo.s32 	%r5400, %r1764, 320;
	mul.lo.s32 	%r5401, %r32, 320;
	mad.lo.s32 	%r5402, %r5400, %r31, %r5401;
	add.s32 	%r5406, %r1825, -64;
	mad.lo.s32 	%r5410, %r5406, %r2179, %r2176;
	add.s32 	%r5411, %r5402, %r5410;
	shl.b32 	%r5412, %r5411, 2;
	mov.u32 	%r5413, _ZN6kernel5shmemE;
	add.s32 	%r5414, %r5413, %r5412;
	shl.b32 	%r5415, %r36, 4;
	add.s32 	%r5416, %r5414, %r5415;
	st.shared.v4.u32 	[%r5416], {%r7795, %r7794, %r7790, %r7788};
	shl.b32 	%r5417, %r36, 3;
	add.s32 	%r5418, %r5414, %r5417;
	st.shared.v2.u32 	[%r5418+512], {%r7556, %r7553};
	st.shared.v4.u32 	[%r5416+768], {%r7569, %r7564, %r7544, %r7535};

$L__BB0_778:
	setp.ge.s32 	%p446, %r32, %r2179;
	@%p446 bra 	$L__BB0_782;

	mad.lo.s32 	%r5424, %r2575, 384, %r2182;
	mad.lo.s32 	%r5427, %r2177, %r32, %r5424;
	add.s32 	%r5433, %r5427, %r2180;
	shl.b32 	%r5434, %r5433, 2;
	mov.u32 	%r5435, _ZN6kernel5shmemE;
	add.s32 	%r5436, %r5435, %r5434;
	shl.b32 	%r5437, %r36, 3;
	add.s32 	%r5438, %r5436, %r5437;
	@%p445 bra 	$L__BB0_781;

	add.s32 	%r7308, %r5438, -256;
	st.shared.v2.u32 	[%r7308], {%r7568, %r7563};

$L__BB0_781:
	shl.b32 	%r5457, %r36, 4;
	add.s32 	%r5458, %r5436, %r5457;
	st.shared.v4.u32 	[%r5458], {%r7561, %r7559, %r7527, %r7519};
	add.s32 	%r7309, %r5438, -256;
	st.shared.v2.u32 	[%r7309+768], {%r7528, %r7520};
	st.shared.v4.u32 	[%r5458+768], {%r7793, %r7792, %r7781, %r7780};

$L__BB0_782:
	bar.sync 	0;
	@%p211 bra 	$L__BB0_784;

	mul.lo.s32 	%r5459, %r1764, 320;
	add.s32 	%r5460, %r31, -1;
	mul.lo.s32 	%r5461, %r32, 320;
	mad.lo.s32 	%r5462, %r5459, %r5460, %r5461;
	shl.b32 	%r5463, %r5462, 2;
	mov.u32 	%r5464, _ZN6kernel5shmemE;
	add.s32 	%r5465, %r5464, %r5463;
	add.s32 	%r5466, %r5465, -256;
	shl.b32 	%r5467, %r36, 4;
	add.s32 	%r5468, %r5466, %r5467;
	ld.shared.v4.u32 	{%r7739, %r7737, %r7746, %r7747}, [%r5468+256];
	ld.shared.v4.u32 	{%r7745, %r7742, %r7734, %r7735}, [%r5468+1024];
	shl.b32 	%r5477, %r36, 3;
	add.s32 	%r5478, %r5466, %r5477;
	ld.shared.v2.u32 	{%r7738, %r7736}, [%r5478+768];

$L__BB0_784:
	@%p214 bra 	$L__BB0_787;

	mad.lo.s32 	%r5483, %r1763, 384, -64;
	add.s32 	%r5484, %r32, -1;
	mul.lo.s32 	%r5485, %r5483, %r5484;
	mad.lo.s32 	%r5488, %r2175, %r2174, %r5485;
	mad.lo.s32 	%r5489, %r2575, 384, %r5488;
	shl.b32 	%r5490, %r5489, 2;
	mov.u32 	%r5491, _ZN6kernel5shmemE;
	add.s32 	%r5492, %r5491, %r5490;
	add.s32 	%r5493, %r5492, -256;
	shl.b32 	%r5494, %r36, 4;
	add.s32 	%r5495, %r5493, %r5494;
	ld.shared.v4.u32 	{%r7759, %r7758, %r7754, %r7752}, [%r5495+256];
	ld.shared.v4.u32 	{%r7749, %r7748, %r7751, %r7757}, [%r5495+1024];
	shl.b32 	%r5504, %r36, 3;
	add.s32 	%r5505, %r5493, %r5504;
	ld.shared.v2.u32 	{%r7755, %r7753}, [%r5505+768];
	@%p211 bra 	$L__BB0_787;

	add.s32 	%r7310, %r5505, 768;
	ld.shared.v2.u32 	{%r7740, %r7743}, [%r7310+768];

$L__BB0_787:
	ld.param.u64 	%rd519, [%rd1+80];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7871, %r7705;
	mov.u32 	%r7872, %r7706;
	mov.u32 	%r7874, %r7708;
	mov.u32 	%r7875, %r7709;
	mov.u32 	%r7895, %r7725;
	mov.u32 	%r7899, %r7729;
	mov.u32 	%r7880, %r7712;
	mov.u32 	%r7881, %r7713;
	mov.u32 	%r7882, %r7714;
	mov.u32 	%r7883, %r7715;
	mov.u32 	%r7900, %r7730;
	mov.u32 	%r7901, %r7731;
	@%p216 bra 	$L__BB0_791;

	mad.lo.s32 	%r5511, %r662, %r1766, %r34;
	mad.lo.s32 	%r5512, %r5511, 768, 384;
	mul.lo.s32 	%r5513, %r5512, %r1764;
	mad.lo.s32 	%r5514, %r32, 384, %r5513;
	add.s32 	%r5515, %r5514, -128;
	mul.wide.s32 	%rd520, %r5515, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7895, %r7725;
	mov.u32 	%r7899, %r7729;
	mov.u32 	%r7900, %r7730;
	mov.u32 	%r7901, %r7731;
	@%p214 bra 	$L__BB0_790;

	ld.global.v4.u32 	{%r7900, %r7901, %r7895, %r7899}, [%rd36+-512];

$L__BB0_790:
	ld.global.v4.u32 	{%r7881, %r7883, %r7880, %r7882}, [%rd36];
	ld.global.v4.u32 	{%r7875, %r7872, %r7871, %r7874}, [%rd36+512];
	ld.global.v4.u32 	{%r7704, %r7707, %r7711, %r7710}, [%rd36+1024];

$L__BB0_791:
	mov.u32 	%r7886, %r7716;
	mov.u32 	%r7887, %r7717;
	mov.u32 	%r7888, %r7718;
	mov.u32 	%r7889, %r7719;
	mov.u32 	%r7890, %r7720;
	mov.u32 	%r7891, %r7721;
	mov.u32 	%r7892, %r7722;
	mov.u32 	%r7897, %r7727;
	@%p219 bra 	$L__BB0_793;

	mad.lo.s32 	%r5533, %r663, %r1765, %r33;
	mad.lo.s32 	%r5541, %r2575, 384, %r60;
	mad.lo.s32 	%r5542, %r1828, %r59, %r5541;
	mad.lo.s32 	%r5543, %r5533, %r1826, %r5542;
	mul.wide.s32 	%rd524, %r5543, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7724, %r7723, %r7728, %r7726}, [%rd527];
	ld.global.v4.u32 	{%r7892, %r7889, %r7886, %r7887}, [%rd527+512];
	ld.global.v4.u32 	{%r7891, %r7888, %r7890, %r7897}, [%rd527+1024];
	ld.global.v4.u32 	{%r7900, %r7901, %r7895, %r7899}, [%rd527+1536];

$L__BB0_793:
	neg.s32 	%r7316, %r1768;
	not.b32 	%r7315, %r34;
	add.s32 	%r7314, %r1766, %r7315;
	mul.lo.s32 	%r7313, %r7314, %r1767;
	not.b32 	%r7312, %r33;
	add.s32 	%r7311, %r1765, %r7312;
	mad.lo.s32 	%r5567, %r7311, %r1767, %r7313;
	add.s32 	%r5568, %r5567, %r1768;
	add.s32 	%r5577, %r5568, %r2581;
	add.s32 	%r1477, %r7591, 1;
	add.s32 	%r5578, %r1477, %r5577;
	div.s32 	%r5579, %r5578, %r1768;
	mad.lo.s32 	%r1478, %r5579, %r7316, %r5578;
	mad.lo.s32 	%r5586, %r5579, %r38, %r2592;
	ld.param.u64 	%rd528, [%rd1+96];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5587, %r5586, %r1769;
	shr.u32 	%r5588, %r5587, 31;
	add.s32 	%r5589, %r5587, %r5588;
	shr.s32 	%r5590, %r5589, 1;
	mad.lo.s32 	%r5591, %r5590, %r1768, %r1478;
	shl.b32 	%r5592, %r5591, 5;
	add.s32 	%r5593, %r5592, %r36;
	cvt.s64.s32 	%rd37, %r5593;
	mul.wide.s32 	%rd530, %r5593, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7593, [%rd531];
	ld.param.u64 	%rd532, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p74 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7592, [%rd536];
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	shl.b32 	%r5594, %r1478, 5;
	add.s32 	%r5595, %r5594, %r36;
	mul.wide.s32 	%rd533, %r5595, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5596, %r5597, %r5598, %r5599}, [%rd534];
	mov.u32 	%r7573, %r7577;
	mov.u32 	%r7574, %r7578;
	mov.u32 	%r7575, %r7579;
	mov.u32 	%r7576, %r7580;
	mov.u32 	%r7577, %r7581;
	mov.u32 	%r7578, %r7582;
	mov.u32 	%r7579, %r7583;
	mov.u32 	%r7580, %r7584;
	mov.u32 	%r7581, %r5599;
	mov.u32 	%r7582, %r5598;
	mov.u32 	%r7583, %r5597;
	mov.u32 	%r7584, %r5596;

$L__BB0_796:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5600, {low,high};}

	// end inline asm
	selp.b32 	%r5602, %r7422, %r5600, %p15;
	// begin inline asm
	{mul.f16x2 %r7570,%r5602,%r7547;
}
	// end inline asm
	selp.b32 	%r5605, %r7426, %r5600, %p15;
	// begin inline asm
	{mul.f16x2 %r7565,%r5605,%r7538;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5607, {low,high};}

	// end inline asm
	selp.b32 	%r5609, %r7422, %r5607, %p15;
	// begin inline asm
	{mul.f16x2 %r7557,%r5609,%r7511;
}
	// end inline asm
	selp.b32 	%r5612, %r7426, %r5607, %p15;
	// begin inline asm
	{mul.f16x2 %r7554,%r5612,%r7506;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5614, {low,high};}

	// end inline asm
	selp.b32 	%r5616, %r7422, %r5614, %p15;
	// begin inline asm
	{mul.f16x2 %r5615,%r5616,%r7503;
}
	// end inline asm
	selp.b32 	%r5619, %r7426, %r5614, %p15;
	// begin inline asm
	{mul.f16x2 %r5618,%r5619,%r7496;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5621, {low,high};}

	// end inline asm
	selp.b32 	%r5623, %r7422, %r5621, %p15;
	// begin inline asm
	{mul.f16x2 %r5622,%r5623,%r7502;
}
	// end inline asm
	selp.b32 	%r5626, %r7426, %r5621, %p15;
	// begin inline asm
	{mul.f16x2 %r5625,%r5626,%r7495;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5628, {low,high};}

	// end inline asm
	selp.b32 	%r5630, %r7422, %r5628, %p15;
	// begin inline asm
	{mul.f16x2 %r7547,%r5630,%r7501;
}
	// end inline asm
	selp.b32 	%r5633, %r7426, %r5628, %p15;
	// begin inline asm
	{mul.f16x2 %r7538,%r5633,%r7494;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5635, {low,high};}

	// end inline asm
	selp.b32 	%r5637, %r7422, %r5635, %p15;
	// begin inline asm
	{mul.f16x2 %r5636,%r5637,%r7489;
}
	// end inline asm
	selp.b32 	%r5640, %r7426, %r5635, %p15;
	// begin inline asm
	{mul.f16x2 %r5639,%r5640,%r7484;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5642, {low,high};}

	// end inline asm
	selp.b32 	%r5644, %r7422, %r5642, %p15;
	// begin inline asm
	{mul.f16x2 %r7530,%r5644,%r7488;
}
	// end inline asm
	selp.b32 	%r5647, %r7426, %r5642, %p15;
	// begin inline asm
	{mul.f16x2 %r7522,%r5647,%r7483;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5649, {low,high};}

	// end inline asm
	selp.b32 	%r5651, %r7422, %r5649, %p15;
	// begin inline asm
	{mul.f16x2 %r5650,%r5651,%r7468;
}
	// end inline asm
	selp.b32 	%r5654, %r7426, %r5649, %p15;
	// begin inline asm
	{mul.f16x2 %r5653,%r5654,%r7461;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5656, {low,high};}

	// end inline asm
	selp.b32 	%r5658, %r7422, %r5656, %p15;
	// begin inline asm
	{mul.f16x2 %r5657,%r5658,%r7722;
}
	// end inline asm
	selp.b32 	%r5661, %r7426, %r5656, %p15;
	// begin inline asm
	{mul.f16x2 %r5660,%r5661,%r7719;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5663, {low,high};}

	// end inline asm
	selp.b32 	%r5665, %r7422, %r5663, %p15;
	// begin inline asm
	{mul.f16x2 %r7511,%r5665,%r7721;
}
	// end inline asm
	selp.b32 	%r5668, %r7426, %r5663, %p15;
	// begin inline asm
	{mul.f16x2 %r7506,%r5668,%r7718;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5670, {low,high};}

	// end inline asm
	selp.b32 	%r5672, %r7422, %r5670, %p15;
	// begin inline asm
	{mul.f16x2 %r5671,%r5672,%r7455;
}
	// end inline asm
	selp.b32 	%r5675, %r7426, %r5670, %p15;
	// begin inline asm
	{mul.f16x2 %r5674,%r5675,%r7448;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5677, {low,high};}

	// end inline asm
	selp.b32 	%r5679, %r7422, %r5677, %p15;
	// begin inline asm
	{mul.f16x2 %r5678,%r5679,%r7454;
}
	// end inline asm
	selp.b32 	%r5682, %r7426, %r5677, %p15;
	// begin inline asm
	{mul.f16x2 %r5681,%r5682,%r7447;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5684, {low,high};}

	// end inline asm
	selp.b32 	%r5686, %r7422, %r5684, %p15;
	// begin inline asm
	{mul.f16x2 %r7501,%r5686,%r7453;
}
	// end inline asm
	selp.b32 	%r5689, %r7426, %r5684, %p15;
	// begin inline asm
	{mul.f16x2 %r7494,%r5689,%r7446;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5691, {low,high};}

	// end inline asm
	selp.b32 	%r5693, %r7422, %r5691, %p15;
	// begin inline asm
	{mul.f16x2 %r5692,%r5693,%r7441;
}
	// end inline asm
	selp.b32 	%r5696, %r7426, %r5691, %p15;
	// begin inline asm
	{mul.f16x2 %r5695,%r5696,%r7433;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5698, {low,high};}

	// end inline asm
	selp.b32 	%r5700, %r7422, %r5698, %p15;
	// begin inline asm
	{mul.f16x2 %r5699,%r5700,%r7440;
}
	// end inline asm
	selp.b32 	%r5703, %r7426, %r5698, %p15;
	// begin inline asm
	{mul.f16x2 %r5702,%r5703,%r7432;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5705, {low,high};}

	// end inline asm
	selp.b32 	%r5707, %r7422, %r5705, %p15;
	// begin inline asm
	{mul.f16x2 %r7488,%r5707,%r7709;
}
	// end inline asm
	selp.b32 	%r5710, %r7426, %r5705, %p15;
	// begin inline asm
	{mul.f16x2 %r7483,%r5710,%r7706;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5712, {low,high};}

	// end inline asm
	selp.b32 	%r5714, %r7422, %r5712, %p15;
	// begin inline asm
	{mul.f16x2 %r5713,%r5714,%r7705;
}
	// end inline asm
	selp.b32 	%r5717, %r7426, %r5712, %p15;
	// begin inline asm
	{mul.f16x2 %r5716,%r5717,%r7708;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5719, {low,high};}

	// end inline asm
	selp.b32 	%r5721, %r7422, %r5719, %p15;
	// begin inline asm
	{mul.f16x2 %r5720,%r5721,%r7716;
}
	// end inline asm
	selp.b32 	%r5724, %r7426, %r5719, %p15;
	// begin inline asm
	{mul.f16x2 %r5723,%r5724,%r7717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5726, {low,high};}

	// end inline asm
	selp.b32 	%r5728, %r7422, %r5726, %p15;
	// begin inline asm
	{mul.f16x2 %r5727,%r5728,%r7464;
}
	// end inline asm
	selp.b32 	%r5731, %r7426, %r5726, %p15;
	// begin inline asm
	{mul.f16x2 %r5730,%r5731,%r7510;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5733, {low,high};}

	// end inline asm
	selp.b32 	%r5735, %r7422, %r5733, %p15;
	// begin inline asm
	{mul.f16x2 %r5734,%r5735,%r7720;
}
	// end inline asm
	selp.b32 	%r5738, %r7426, %r5733, %p15;
	// begin inline asm
	{mul.f16x2 %r5737,%r5738,%r7727;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5740, {low,high};}

	// end inline asm
	selp.b32 	%r5742, %r7422, %r5740, %p15;
	// begin inline asm
	{mul.f16x2 %r7453,%r5742,%r7725;
}
	// end inline asm
	selp.b32 	%r5745, %r7426, %r5740, %p15;
	// begin inline asm
	{mul.f16x2 %r7446,%r5745,%r7729;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5747, {low,high};}

	// end inline asm
	selp.b32 	%r5749, %r7422, %r5747, %p15;
	// begin inline asm
	{mul.f16x2 %r5748,%r5749,%r7712;
}
	// end inline asm
	selp.b32 	%r5752, %r7426, %r5747, %p15;
	// begin inline asm
	{mul.f16x2 %r5751,%r5752,%r7714;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5754, {low,high};}

	// end inline asm
	selp.b32 	%r5756, %r7422, %r5754, %p15;
	// begin inline asm
	{mul.f16x2 %r5755,%r5756,%r7713;
}
	// end inline asm
	selp.b32 	%r5759, %r7426, %r5754, %p15;
	// begin inline asm
	{mul.f16x2 %r5758,%r5759,%r7715;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5761, {low,high};}

	// end inline asm
	selp.b32 	%r5763, %r7422, %r5761, %p15;
	// begin inline asm
	{mul.f16x2 %r5762,%r5763,%r7730;
}
	// end inline asm
	selp.b32 	%r5766, %r7426, %r5761, %p15;
	// begin inline asm
	{mul.f16x2 %r5765,%r5766,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r7571,%r3693;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r3804,%r3650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5774,%r5768,%r5771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5777,%r7330,%r5774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5780,%r7570,%r5777;
}
	// end inline asm
	@%p15 bra 	$L__BB0_798;

	mov.u32 	%r7570, %r5780;

$L__BB0_798:
	// begin inline asm
	{sub.f16x2 %r5783,%r7566,%r3759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r3838,%r3727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5789,%r5783,%r5786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5792,%r7330,%r5789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5795,%r7565,%r5792;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;

	mov.u32 	%r7565, %r5795;

$L__BB0_800:
	// begin inline asm
	{sub.f16x2 %r5798,%r7558,%r3926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5801,%r7572,%r3883;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5804,%r5798,%r5801;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5807,%r7330,%r5804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5810,%r7557,%r5807;
}
	// end inline asm
	@%p15 bra 	$L__BB0_802;

	mov.u32 	%r7557, %r5810;

$L__BB0_802:
	// begin inline asm
	{sub.f16x2 %r5813,%r7555,%r3992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5816,%r7567,%r3960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5819,%r5813,%r5816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5822,%r7330,%r5819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5825,%r7554,%r5822;
}
	// end inline asm
	@%p15 bra 	$L__BB0_804;

	mov.u32 	%r7554, %r5825;

$L__BB0_804:
	// begin inline asm
	{sub.f16x2 %r5828,%r7566,%r7571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5831,%r7421,%r5828;
}
	// end inline asm
	@%p15 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r7919,%r5615;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	// begin inline asm
	{mul.f16x2 %r7919,%r7422,%r5828;
}
	// end inline asm

$L__BB0_807:
	mov.u32 	%r5842, 31;
	mov.u32 	%r5844, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5840,%r7919,%r5842,%r2278,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5845,%r5831,%r5840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5848,%r7659,%r7665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r5848,%r5845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r7330,%r5851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r5615,%r5854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5860,%r7567,%r7572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5863,%r7421,%r5860;
}
	// end inline asm
	mov.u32 	%r7920, %r5622;
	@%p15 bra 	$L__BB0_809;

	// begin inline asm
	{mul.f16x2 %r7920,%r7422,%r5860;
}
	// end inline asm

$L__BB0_809:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5872,%r7920,%r5842,%r2278,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5877,%r5863,%r5872;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5880,%r7647,%r7665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r5877,%r5880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5886,%r7330,%r5883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r5622,%r5886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5892,%r7551,%r7571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5895,%r7562,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5898,%r5892,%r5895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5901,%r7330,%r5898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5904,%r7547,%r5901;
}
	// end inline asm
	@%p15 bra 	$L__BB0_811;

	mov.u32 	%r7547, %r5904;

$L__BB0_811:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7571;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5915, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5911,%r7571,%r424,%r2278,%r5915;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5911;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5917, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r5917,%r7566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5921,%r7425,%r5918;
}
	// end inline asm
	@%p15 bra 	$L__BB0_813;
	bra.uni 	$L__BB0_812;

$L__BB0_813:
	// begin inline asm
	{neg.f16x2 %r7922,%r5618;
}
	// end inline asm
	bra.uni 	$L__BB0_814;

$L__BB0_812:
	// begin inline asm
	{mul.f16x2 %r7922,%r7426,%r5918;
}
	// end inline asm

$L__BB0_814:
	mov.u32 	%r5934, 31;
	mov.u32 	%r5958, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5932,%r7922,%r5934,%r2278,%r5958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5937,%r5921,%r5932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5940,%r7656,%r7662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5943,%r5940,%r5937;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5946,%r7330,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r5618,%r5946;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7572;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5954,%r7572,%r424,%r2278,%r5958;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5954;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5960, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5961,%r5960,%r7567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5964,%r7425,%r5961;
}
	// end inline asm
	mov.u32 	%r7923, %r5625;
	@%p15 bra 	$L__BB0_816;

	// begin inline asm
	{mul.f16x2 %r7923,%r7426,%r5961;
}
	// end inline asm

$L__BB0_816:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5975,%r7923,%r5934,%r2278,%r5958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5980,%r5964,%r5975;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r7644,%r7662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r5980,%r5983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5989,%r7330,%r5986;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r5625,%r5989;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5995,%r7542,%r7566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5998,%r7560,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6001,%r5995,%r5998;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6004,%r7330,%r6001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6007,%r7538,%r6004;
}
	// end inline asm
	@%p15 bra 	$L__BB0_818;

	mov.u32 	%r7538, %r6007;

$L__BB0_818:
	// begin inline asm
	{sub.f16x2 %r6012,%r7560,%r7562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6015,%r7421,%r6012;
}
	// end inline asm
	mov.u32 	%r7925, %r5636;
	@%p15 bra 	$L__BB0_820;

	// begin inline asm
	{mul.f16x2 %r7925,%r7422,%r6012;
}
	// end inline asm

$L__BB0_820:
	mov.u32 	%r6024, 31;
	mov.u32 	%r6026, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6022,%r7925,%r6024,%r2278,%r6026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6027,%r6015,%r6022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r7641,%r7659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r6027,%r6030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6036,%r7330,%r6033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r5636,%r6036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6042,%r7533,%r4264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6045,%r4405,%r7562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6048,%r6042,%r6045;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6051,%r7330,%r6048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6054,%r7530,%r6051;
}
	// end inline asm
	@%p15 bra 	$L__BB0_822;

	mov.u32 	%r7530, %r6054;

$L__BB0_822:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7562;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6061,%r7562,%r424,%r2278,%r6026;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6061;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6067, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r6067,%r7560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6071,%r7425,%r6068;
}
	// end inline asm
	mov.u32 	%r7927, %r5639;
	@%p15 bra 	$L__BB0_824;

	// begin inline asm
	{mul.f16x2 %r7927,%r7426,%r6068;
}
	// end inline asm

$L__BB0_824:
	mov.u32 	%r6082, 31;
	mov.u32 	%r6084, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6080,%r7927,%r6082,%r2278,%r6084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6085,%r6071,%r6080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r7638,%r7656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6085,%r6088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r7330,%r6091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r5639,%r6094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6100,%r7525,%r4345;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6103,%r4439,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6106,%r6100,%r6103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6109,%r7330,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6112,%r7522,%r6109;
}
	// end inline asm
	@%p15 bra 	$L__BB0_826;

	mov.u32 	%r7522, %r6112;

$L__BB0_826:
	// begin inline asm
	{sub.f16x2 %r6117,%r7555,%r7558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6120,%r7421,%r6117;
}
	// end inline asm
	@%p15 bra 	$L__BB0_828;
	bra.uni 	$L__BB0_827;

$L__BB0_828:
	// begin inline asm
	{neg.f16x2 %r7929,%r5650;
}
	// end inline asm
	bra.uni 	$L__BB0_829;

$L__BB0_827:
	// begin inline asm
	{mul.f16x2 %r7929,%r7422,%r6117;
}
	// end inline asm

$L__BB0_829:
	mov.u32 	%r6131, 31;
	mov.u32 	%r6133, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6129,%r7929,%r6131,%r2278,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6134,%r6120,%r6129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6137,%r7647,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6140,%r6137,%r6134;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6143,%r7330,%r6140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r5650,%r6143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6149,%r7758,%r7759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6152,%r7421,%r6149;
}
	// end inline asm
	mov.u32 	%r7930, %r5657;
	@%p15 bra 	$L__BB0_831;

	// begin inline asm
	{mul.f16x2 %r7930,%r7422,%r6149;
}
	// end inline asm

$L__BB0_831:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6161,%r7930,%r6131,%r2278,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6166,%r6152,%r6161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6169,%r7754,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6172,%r6166,%r6169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6175,%r7330,%r6172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7512,%r5657,%r6175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6181,%r7755,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r7552,%r7759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r6181,%r6184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r7330,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6193,%r7511,%r6190;
}
	// end inline asm
	@%p15 bra 	$L__BB0_833;

	mov.u32 	%r7511, %r6193;

$L__BB0_833:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7558;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6204, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6200,%r7558,%r424,%r2278,%r6204;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6200;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6206, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6207,%r6206,%r7555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6210,%r7425,%r6207;
}
	// end inline asm
	@%p15 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7932,%r5653;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7932,%r7426,%r6207;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r6223, 31;
	mov.u32 	%r6247, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6221,%r7932,%r6223,%r2278,%r6247;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6226,%r6210,%r6221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6229,%r7644,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6232,%r6229,%r6226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6235,%r7330,%r6232;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7508,%r5653,%r6235;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7759;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6243,%r7759,%r424,%r2278,%r6247;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6243;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6249, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6250,%r6249,%r7758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6253,%r7425,%r6250;
}
	// end inline asm
	mov.u32 	%r7933, %r5660;
	@%p15 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7933,%r7426,%r6250;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6264,%r7933,%r6223,%r2278,%r6247;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6269,%r6253,%r6264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6272,%r7752,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r6269,%r6272;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6278,%r7330,%r6275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r5660,%r6278;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6284,%r7753,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6287,%r7543,%r7758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6290,%r6284,%r6287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6293,%r7330,%r6290;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6296,%r7506,%r6293;
}
	// end inline asm
	@%p15 bra 	$L__BB0_840;

	mov.u32 	%r7506, %r6296;

$L__BB0_840:
	// begin inline asm
	{sub.f16x2 %r6301,%r7542,%r7551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6304,%r7421,%r6301;
}
	// end inline asm
	@%p15 bra 	$L__BB0_842;
	bra.uni 	$L__BB0_841;

$L__BB0_842:
	// begin inline asm
	{neg.f16x2 %r7935,%r5671;
}
	// end inline asm
	bra.uni 	$L__BB0_843;

$L__BB0_841:
	// begin inline asm
	{mul.f16x2 %r7935,%r7422,%r6301;
}
	// end inline asm

$L__BB0_843:
	mov.u32 	%r6315, 31;
	mov.u32 	%r6317, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6313,%r7935,%r6315,%r2278,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6318,%r6304,%r6313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6321,%r7641,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r6321,%r6318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r7330,%r6324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r5671,%r6327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6333,%r7543,%r7552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6336,%r7421,%r6333;
}
	// end inline asm
	mov.u32 	%r7936, %r5678;
	@%p15 bra 	$L__BB0_845;

	// begin inline asm
	{mul.f16x2 %r7936,%r7422,%r6333;
}
	// end inline asm

$L__BB0_845:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6345,%r7936,%r6315,%r2278,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6350,%r6336,%r6345;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6353,%r7634,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6356,%r6350,%r6353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6359,%r7330,%r6356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7502,%r5678,%r6359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6365,%r7505,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6368,%r7534,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6371,%r6365,%r6368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6374,%r7330,%r6371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6377,%r7501,%r6374;
}
	// end inline asm
	@%p15 bra 	$L__BB0_847;

	mov.u32 	%r7501, %r6377;

$L__BB0_847:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7551;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6388, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6384,%r7551,%r424,%r2278,%r6388;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6384;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6390, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6391,%r6390,%r7542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6394,%r7425,%r6391;
}
	// end inline asm
	@%p15 bra 	$L__BB0_849;
	bra.uni 	$L__BB0_848;

$L__BB0_849:
	// begin inline asm
	{neg.f16x2 %r7938,%r5674;
}
	// end inline asm
	bra.uni 	$L__BB0_850;

$L__BB0_848:
	// begin inline asm
	{mul.f16x2 %r7938,%r7426,%r6391;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r6407, 31;
	mov.u32 	%r6431, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6405,%r7938,%r6407,%r2278,%r6431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6410,%r6394,%r6405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6413,%r7638,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6416,%r6413,%r6410;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6419,%r7330,%r6416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7496,%r5674,%r6419;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7552;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6427,%r7552,%r424,%r2278,%r6431;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6427;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6433, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6434,%r6433,%r7543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6437,%r7425,%r6434;
}
	// end inline asm
	mov.u32 	%r7939, %r5681;
	@%p15 bra 	$L__BB0_852;

	// begin inline asm
	{mul.f16x2 %r7939,%r7426,%r6434;
}
	// end inline asm

$L__BB0_852:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6448,%r7939,%r6407,%r2278,%r6431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6453,%r6437,%r6448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6456,%r7632,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r6453,%r6456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6462,%r7330,%r6459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r5681,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6468,%r7498,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6471,%r7526,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6474,%r6468,%r6471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6477,%r7330,%r6474;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6480,%r7494,%r6477;
}
	// end inline asm
	@%p15 bra 	$L__BB0_854;

	mov.u32 	%r7494, %r6480;

$L__BB0_854:
	// begin inline asm
	{sub.f16x2 %r6485,%r7525,%r7533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6488,%r7421,%r6485;
}
	// end inline asm
	@%p15 bra 	$L__BB0_856;
	bra.uni 	$L__BB0_855;

$L__BB0_856:
	// begin inline asm
	{neg.f16x2 %r7941,%r5692;
}
	// end inline asm
	bra.uni 	$L__BB0_857;

$L__BB0_855:
	// begin inline asm
	{mul.f16x2 %r7941,%r7422,%r6485;
}
	// end inline asm

$L__BB0_857:
	mov.u32 	%r6499, 31;
	mov.u32 	%r6501, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6497,%r7941,%r6499,%r2278,%r6501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6488,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6505,%r7637,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r6505,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6511,%r7330,%r6508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7490,%r5692,%r6511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6517,%r7526,%r7534;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6520,%r7421,%r6517;
}
	// end inline asm
	mov.u32 	%r7942, %r5699;
	@%p15 bra 	$L__BB0_859;

	// begin inline asm
	{mul.f16x2 %r7942,%r7422,%r6517;
}
	// end inline asm

$L__BB0_859:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6529,%r7942,%r6499,%r2278,%r6501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6534,%r6520,%r6529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6537,%r7631,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6540,%r6534,%r6537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6543,%r7330,%r6540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r5699,%r6543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6549,%r7738,%r7533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6552,%r7745,%r7534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6555,%r6549,%r6552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6558,%r7330,%r6555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6561,%r7488,%r6558;
}
	// end inline asm
	@%p15 bra 	$L__BB0_861;

	mov.u32 	%r7488, %r6561;

$L__BB0_861:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7533;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6572, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6568,%r7533,%r424,%r2278,%r6572;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6568;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6574, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6575,%r6574,%r7525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6578,%r7425,%r6575;
}
	// end inline asm
	@%p15 bra 	$L__BB0_863;
	bra.uni 	$L__BB0_862;

$L__BB0_863:
	// begin inline asm
	{neg.f16x2 %r7944,%r5695;
}
	// end inline asm
	bra.uni 	$L__BB0_864;

$L__BB0_862:
	// begin inline asm
	{mul.f16x2 %r7944,%r7426,%r6575;
}
	// end inline asm

$L__BB0_864:
	mov.u32 	%r6591, 31;
	mov.u32 	%r6615, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6589,%r7944,%r6591,%r2278,%r6615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6594,%r6578,%r6589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6597,%r7636,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6600,%r6597,%r6594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6603,%r7330,%r6600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r5695,%r6603;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7534;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6611,%r7534,%r424,%r2278,%r6615;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6611;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6617, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6618,%r6617,%r7526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6621,%r7425,%r6618;
}
	// end inline asm
	mov.u32 	%r7945, %r5702;
	@%p15 bra 	$L__BB0_866;

	// begin inline asm
	{mul.f16x2 %r7945,%r7426,%r6618;
}
	// end inline asm

$L__BB0_866:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6632,%r7945,%r6591,%r2278,%r6615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6637,%r6621,%r6632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6640,%r7630,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6643,%r6637,%r6640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6646,%r7330,%r6643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7484,%r5702,%r6646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6652,%r7736,%r7525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6655,%r7742,%r7526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6658,%r6652,%r6655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6661,%r7330,%r6658;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6664,%r7483,%r6661;
}
	// end inline asm
	@%p15 bra 	$L__BB0_868;

	mov.u32 	%r7483, %r6664;

$L__BB0_868:
	// begin inline asm
	{sub.f16x2 %r6669,%r7742,%r7745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6672,%r7421,%r6669;
}
	// end inline asm
	mov.u32 	%r7947, %r5713;
	@%p15 bra 	$L__BB0_870;

	// begin inline asm
	{mul.f16x2 %r7947,%r7422,%r6669;
}
	// end inline asm

$L__BB0_870:
	mov.u32 	%r6681, 31;
	mov.u32 	%r6705, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6679,%r7947,%r6681,%r2278,%r6705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6684,%r6672,%r6679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6687,%r7734,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6690,%r6684,%r6687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6693,%r7330,%r6690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7479,%r5713,%r6693;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7745;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6701,%r7745,%r424,%r2278,%r6705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6701;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6707, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6708,%r6707,%r7742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6711,%r7425,%r6708;
}
	// end inline asm
	mov.u32 	%r7948, %r5716;
	@%p15 bra 	$L__BB0_872;

	// begin inline asm
	{mul.f16x2 %r7948,%r7426,%r6708;
}
	// end inline asm

$L__BB0_872:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6722,%r7948,%r6681,%r2278,%r6705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6727,%r6711,%r6722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6730,%r7735,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6733,%r6727,%r6730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6736,%r7330,%r6733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7475,%r5716,%r6736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r7753,%r7755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6745,%r7421,%r6742;
}
	// end inline asm
	@%p15 bra 	$L__BB0_874;
	bra.uni 	$L__BB0_873;

$L__BB0_874:
	// begin inline asm
	{neg.f16x2 %r7949,%r5720;
}
	// end inline asm
	bra.uni 	$L__BB0_875;

$L__BB0_873:
	// begin inline asm
	{mul.f16x2 %r7949,%r7422,%r6742;
}
	// end inline asm

$L__BB0_875:
	mov.u32 	%r6758, 31;
	mov.u32 	%r6782, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6756,%r7949,%r6758,%r2278,%r6782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6761,%r6745,%r6756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6764,%r7634,%r7754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6767,%r6764,%r6761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6770,%r7330,%r6767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r5720,%r6770;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7755;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6778,%r7755,%r424,%r2278,%r6782;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6778;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6784, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6785,%r6784,%r7753;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6788,%r7425,%r6785;
}
	// end inline asm
	@%p15 bra 	$L__BB0_877;
	bra.uni 	$L__BB0_876;

$L__BB0_877:
	// begin inline asm
	{neg.f16x2 %r7950,%r5723;
}
	// end inline asm
	bra.uni 	$L__BB0_878;

$L__BB0_876:
	// begin inline asm
	{mul.f16x2 %r7950,%r7426,%r6785;
}
	// end inline asm

$L__BB0_878:
	mov.u32 	%r6803, 31;
	mov.u32 	%r6805, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6801,%r7950,%r6803,%r2278,%r6805;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6806,%r6788,%r6801;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6809,%r7632,%r7752;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6812,%r6809,%r6806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6815,%r7330,%r6812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7461,%r5723,%r6815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6821,%r7498,%r7505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6824,%r7421,%r6821;
}
	// end inline asm
	@%p15 bra 	$L__BB0_880;
	bra.uni 	$L__BB0_879;

$L__BB0_880:
	// begin inline asm
	{neg.f16x2 %r7951,%r5727;
}
	// end inline asm
	bra.uni 	$L__BB0_881;

$L__BB0_879:
	// begin inline asm
	{mul.f16x2 %r7951,%r7422,%r6821;
}
	// end inline asm

$L__BB0_881:
	mov.u32 	%r6837, 31;
	mov.u32 	%r6839, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6835,%r7951,%r6837,%r2278,%r6839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6840,%r6824,%r6835;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6843,%r7631,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6846,%r6843,%r6840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6849,%r7330,%r6846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r5727,%r6849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6855,%r7748,%r7749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6858,%r7421,%r6855;
}
	// end inline asm
	mov.u32 	%r7952, %r5734;
	@%p15 bra 	$L__BB0_883;

	// begin inline asm
	{mul.f16x2 %r7952,%r7422,%r6855;
}
	// end inline asm

$L__BB0_883:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6867,%r7952,%r6837,%r2278,%r6839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6872,%r6858,%r6867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6875,%r7751,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6878,%r6872,%r6875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6881,%r7330,%r6878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r5734,%r6881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6887,%r7740,%r7505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6890,%r7739,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6893,%r6887,%r6890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6896,%r7330,%r6893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6899,%r7453,%r6896;
}
	// end inline asm
	@%p15 bra 	$L__BB0_885;

	mov.u32 	%r7453, %r6899;

$L__BB0_885:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7505;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6910, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6906,%r7505,%r424,%r2278,%r6910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6906;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6912, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6913,%r6912,%r7498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6916,%r7425,%r6913;
}
	// end inline asm
	@%p15 bra 	$L__BB0_887;
	bra.uni 	$L__BB0_886;

$L__BB0_887:
	// begin inline asm
	{neg.f16x2 %r7954,%r5730;
}
	// end inline asm
	bra.uni 	$L__BB0_888;

$L__BB0_886:
	// begin inline asm
	{mul.f16x2 %r7954,%r7426,%r6913;
}
	// end inline asm

$L__BB0_888:
	mov.u32 	%r6929, 31;
	mov.u32 	%r6953, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6927,%r7954,%r6929,%r2278,%r6953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6932,%r6916,%r6927;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6935,%r7630,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6938,%r6935,%r6932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6941,%r7330,%r6938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7448,%r5730,%r6941;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7749;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6949,%r7749,%r424,%r2278,%r6953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6949;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6955, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6956,%r6955,%r7748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6959,%r7425,%r6956;
}
	// end inline asm
	mov.u32 	%r7955, %r5737;
	@%p15 bra 	$L__BB0_890;

	// begin inline asm
	{mul.f16x2 %r7955,%r7426,%r6956;
}
	// end inline asm

$L__BB0_890:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6970,%r7955,%r6929,%r2278,%r6953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6975,%r6959,%r6970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6978,%r7757,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6981,%r6975,%r6978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6984,%r7330,%r6981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7447,%r5737,%r6984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6990,%r7743,%r7498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6993,%r7737,%r7748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6996,%r6990,%r6993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6999,%r7330,%r6996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7002,%r7446,%r6999;
}
	// end inline asm
	@%p15 bra 	$L__BB0_892;

	mov.u32 	%r7446, %r7002;

$L__BB0_892:
	// begin inline asm
	{sub.f16x2 %r7007,%r7736,%r7738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7010,%r7421,%r7007;
}
	// end inline asm
	@%p15 bra 	$L__BB0_894;
	bra.uni 	$L__BB0_893;

$L__BB0_894:
	// begin inline asm
	{neg.f16x2 %r7957,%r5748;
}
	// end inline asm
	bra.uni 	$L__BB0_895;

$L__BB0_893:
	// begin inline asm
	{mul.f16x2 %r7957,%r7422,%r7007;
}
	// end inline asm

$L__BB0_895:
	mov.u32 	%r7021, 31;
	mov.u32 	%r7023, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7019,%r7957,%r7021,%r2278,%r7023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r7010,%r7019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7027,%r7734,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7030,%r7027,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7033,%r7330,%r7030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7441,%r5748,%r7033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7039,%r7737,%r7739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7042,%r7421,%r7039;
}
	// end inline asm
	mov.u32 	%r7958, %r5755;
	@%p15 bra 	$L__BB0_897;

	// begin inline asm
	{mul.f16x2 %r7958,%r7422,%r7039;
}
	// end inline asm

$L__BB0_897:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7051,%r7958,%r7021,%r2278,%r7023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7056,%r7042,%r7051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7059,%r7746,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7062,%r7056,%r7059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7065,%r7330,%r7062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7440,%r5755,%r7065;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7738;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7073,%r7738,%r424,%r2278,%r7023;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7073;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7079, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7080,%r7079,%r7736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7083,%r7425,%r7080;
}
	// end inline asm
	@%p15 bra 	$L__BB0_899;
	bra.uni 	$L__BB0_898;

$L__BB0_899:
	// begin inline asm
	{neg.f16x2 %r7959,%r5751;
}
	// end inline asm
	bra.uni 	$L__BB0_900;

$L__BB0_898:
	// begin inline asm
	{mul.f16x2 %r7959,%r7426,%r7080;
}
	// end inline asm

$L__BB0_900:
	mov.u32 	%r7098, 31;
	mov.u32 	%r7122, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7096,%r7959,%r7098,%r2278,%r7122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7101,%r7083,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7104,%r7735,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7107,%r7104,%r7101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7110,%r7330,%r7107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5751,%r7110;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7739;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7118,%r7739,%r424,%r2278,%r7122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7118;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7124, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7125,%r7124,%r7737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7128,%r7425,%r7125;
}
	// end inline asm
	mov.u32 	%r7960, %r5758;
	@%p15 bra 	$L__BB0_902;

	// begin inline asm
	{mul.f16x2 %r7960,%r7426,%r7125;
}
	// end inline asm

$L__BB0_902:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7139,%r7960,%r7098,%r2278,%r7122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7144,%r7128,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7147,%r7747,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7150,%r7144,%r7147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7153,%r7330,%r7150;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7432,%r5758,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7159,%r7743,%r7740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7162,%r7421,%r7159;
}
	// end inline asm
	@%p15 bra 	$L__BB0_904;
	bra.uni 	$L__BB0_903;

$L__BB0_904:
	// begin inline asm
	{neg.f16x2 %r7961,%r5762;
}
	// end inline asm
	bra.uni 	$L__BB0_905;

$L__BB0_903:
	// begin inline asm
	{mul.f16x2 %r7961,%r7422,%r7159;
}
	// end inline asm

$L__BB0_905:
	mov.u32 	%r7175, 31;
	mov.u32 	%r7199, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7173,%r7961,%r7175,%r2278,%r7199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r7162,%r7173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7181,%r7746,%r7751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7184,%r7181,%r7178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7187,%r7330,%r7184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r5762,%r7187;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7740;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7195,%r7740,%r424,%r2278,%r7199;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7195;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7201, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7202,%r7201,%r7743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7205,%r7425,%r7202;
}
	// end inline asm
	@%p15 bra 	$L__BB0_907;
	bra.uni 	$L__BB0_906;

$L__BB0_907:
	// begin inline asm
	{neg.f16x2 %r7962,%r5765;
}
	// end inline asm
	bra.uni 	$L__BB0_908;

$L__BB0_906:
	// begin inline asm
	{mul.f16x2 %r7962,%r7426,%r7202;
}
	// end inline asm

$L__BB0_908:
	mov.u32 	%r7220, 31;
	mov.u32 	%r7222, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7218,%r7962,%r7220,%r2278,%r7222;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7223,%r7205,%r7218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7226,%r7747,%r7757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7229,%r7226,%r7223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7232,%r7330,%r7229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7510,%r5765,%r7232;
}
	// end inline asm
	bar.sync 	0;
	@%p438 bra 	$L__BB0_911;

	setp.ne.s32 	%p517, %r32, %r2179;
	shl.b32 	%r7241, %r32, 8;
	shl.b32 	%r7245, %r1764, 8;
	or.b32  	%r7246, %r7245, 128;
	mad.lo.s32 	%r7247, %r7246, %r31, %r2182;
	add.s32 	%r7248, %r7247, %r7241;
	shl.b32 	%r7249, %r7248, 2;
	mov.u32 	%r7250, _ZN6kernel5shmemE;
	add.s32 	%r7251, %r7250, %r7249;
	shl.b32 	%r7252, %r36, 4;
	add.s32 	%r1760, %r7251, %r7252;
	st.shared.v4.u32 	[%r1760], {%r7512, %r7507, %r7513, %r7508};
	st.shared.v4.u32 	[%r1760+512], {%r7557, %r7554, %r7548, %r7539};
	@%p517 bra 	$L__BB0_911;

	st.shared.v4.u32 	[%r1760+1024], {%r7549, %r7540, %r7570, %r7565};

$L__BB0_911:
	setp.eq.s32 	%p515, %r32, %r2179;
	@%p515 bra 	$L__BB0_913;

	mul.lo.s32 	%r7256, %r2575, 384;
	mad.lo.s32 	%r7257, %r60, %r32, %r7256;
	mad.lo.s32 	%r7260, %r2177, %r2179, %r7257;
	mad.lo.s32 	%r7263, %r2175, %r2174, %r7260;
	shl.b32 	%r7264, %r7263, 2;
	mov.u32 	%r7265, _ZN6kernel5shmemE;
	add.s32 	%r7266, %r7265, %r7264;
	shl.b32 	%r7267, %r36, 4;
	add.s32 	%r7268, %r7266, %r7267;
	st.shared.v4.u32 	[%r7268], {%r7549, %r7540, %r7570, %r7565};
	st.shared.v4.u32 	[%r7268+512], {%r7531, %r7523, %r7490, %r7485};
	st.shared.v4.u32 	[%r7268+1024], {%r7530, %r7522, %r7479, %r7475};

$L__BB0_913:
	setp.ne.s32 	%p516, %r31, %r2174;
	ld.param.u64 	%rd537, [%rd1+80];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p516 bra 	$L__BB0_915;

	mad.lo.s32 	%r7270, %r662, %r1766, %r34;
	mul.lo.s32 	%r7271, %r7270, %r1764;
	mul.lo.s32 	%r7272, %r7271, 768;
	add.s32 	%r7273, %r1764, %r32;
	mad.lo.s32 	%r7274, %r7273, 384, %r7272;
	add.s32 	%r7275, %r7274, -128;
	mul.wide.s32 	%rd538, %r7275, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7512, %r7507, %r7513, %r7508};
	st.global.v4.u32 	[%rd541+1024], {%r7557, %r7554, %r7548, %r7539};
	st.global.v4.u32 	[%rd541+1536], {%r7549, %r7540, %r7570, %r7565};

$L__BB0_915:
	setp.ne.s32 	%p518, %r32, %r2179;
	@%p518 bra 	$L__BB0_918;

	mad.lo.s32 	%r7277, %r663, %r1765, %r33;
	mad.lo.s32 	%r7285, %r2575, 384, %r60;
	mad.lo.s32 	%r7286, %r1828, %r59, %r7285;
	mad.lo.s32 	%r7287, %r7277, %r1826, %r7286;
	mul.wide.s32 	%rd542, %r7287, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7549, %r7540, %r7570, %r7565};
	st.global.v4.u32 	[%rd40+512], {%r7531, %r7523, %r7490, %r7485};
	st.global.v4.u32 	[%rd40+1024], {%r7530, %r7522, %r7479, %r7475};
	@%p216 bra 	$L__BB0_918;

	st.global.v4.u32 	[%rd40+1536], {%r7704, %r7707, %r7711, %r7710};

$L__BB0_918:
	rem.s32 	%r7288, %r7591, %r1767;
	setp.eq.s32 	%p509, %r7288, 0;
	@%p509 bra 	$L__BB0_920;

	bar.sync 	0;
	bra.uni 	$L__BB0_927;

$L__BB0_920:
	@%p150 bra 	$L__BB0_922;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_922:
	bar.sync 	0;
	@%p151 bra 	$L__BB0_926;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p512, %r418, %r419;
	mov.u32 	%r7301, -2147483647;
	sub.s32 	%r7302, %r7301, %r417;
	selp.b32 	%r7303, %r7302, 1, %p512;
	atom.add.u32 	%r1761, [%rd545], %r7303;

$L__BB0_924:
	ld.volatile.u32 	%r7304, [%rd24+4];
	xor.b32  	%r7305, %r7304, %r1761;
	setp.gt.s32 	%p513, %r7305, -1;
	@%p513 bra 	$L__BB0_924;

	membar.gl;

$L__BB0_926:
	bar.sync 	0;

$L__BB0_927:
	add.s32 	%r7591, %r7591, 1;
	setp.lt.s32 	%p514, %r7591, %r39;
	mov.u32 	%r7705, %r7871;
	mov.u32 	%r7706, %r7872;
	mov.u32 	%r7708, %r7874;
	mov.u32 	%r7709, %r7875;
	mov.u32 	%r7716, %r7886;
	mov.u32 	%r7717, %r7887;
	mov.u32 	%r7718, %r7888;
	mov.u32 	%r7719, %r7889;
	mov.u32 	%r7720, %r7890;
	mov.u32 	%r7721, %r7891;
	mov.u32 	%r7722, %r7892;
	mov.u32 	%r7725, %r7895;
	mov.u32 	%r7727, %r7897;
	mov.u32 	%r7729, %r7899;
	mov.u32 	%r7519, %r485;
	mov.u32 	%r7520, %r7782;
	mov.u32 	%r7527, %r492;
	mov.u32 	%r7528, %r7784;
	mov.u32 	%r7535, %r499;
	mov.u32 	%r7544, %r507;
	mov.u32 	%r7553, %r7789;
	mov.u32 	%r7556, %r7791;
	mov.u32 	%r7559, %r537;
	mov.u32 	%r7561, %r545;
	mov.u32 	%r7563, %r552;
	mov.u32 	%r7564, %r553;
	mov.u32 	%r7568, %r561;
	mov.u32 	%r7569, %r562;
	mov.u32 	%r7712, %r7880;
	mov.u32 	%r7713, %r7881;
	mov.u32 	%r7714, %r7882;
	mov.u32 	%r7715, %r7883;
	mov.u32 	%r7730, %r7900;
	mov.u32 	%r7731, %r7901;
	@%p514 bra 	$L__BB0_302;

$L__BB0_928:
	ret;

}

