//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<503>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<6658>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<488>;


	mov.b64 	%rd31, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd31;
	ld.param.v2.u32 	{%r1240, %r1241}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1242, %r1243}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1244, %r1245}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1246, %r1247}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1248, %r1249}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1250, %r1251}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1252, %r1253}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1254, %r1255}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1256, %r1257}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1258, %r1259}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1260, %r1261}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1262, %r1263}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1264, %r1265}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1266, 32;
	sub.s32 	%r45, %r1266, %r1247;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1267, %r1253, -1;
	mad.lo.s32 	%r1268, %r1267, %r1252, %r1251;
	add.s32 	%r1269, %r1246, %r1245;
	add.s32 	%r1270, %r1269, %r1268;
	add.s32 	%r1271, %r1270, 1;
	mul.lo.s32 	%r1272, %r1240, %r1242;
	shl.b32 	%r47, %r1272, 1;
	shl.b32 	%r1273, %r1272, 2;
	div.s32 	%r1274, %r1271, %r1273;
	add.s32 	%r1275, %r1274, 1;
	mul.lo.s32 	%r1276, %r1275, %r1246;
	mul.lo.s32 	%r1277, %r1241, %r1243;
	shl.b32 	%r48, %r1277, 1;
	div.s32 	%r1278, %r1276, %r48;
	add.s32 	%r1279, %r1278, 1;
	mul.lo.s32 	%r49, %r1279, %r1245;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f83;
  cvt.rn.f16.f32 high, %f83;
  mov.b32 %r6344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6344, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd32, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd32;
	mad.lo.s32 	%r1282, %r1242, %r44, %r43;
	mad.lo.s32 	%r1283, %r1282, %r1241, %r42;
	mad.lo.s32 	%r1284, %r1283, %r1240, %r41;
	shl.b32 	%r53, %r1284, 5;
	add.s32 	%r6349, %r53, %r46;
	mul.lo.s32 	%r1285, %r1277, %r1272;
	shl.b32 	%r57, %r1285, 5;
	mov.u32 	%r1286, 8;
	sub.s32 	%r1287, %r1286, %r1254;
	add.s32 	%r1288, %r1287, %r1255;
	sub.s32 	%r1289, %r1286, %r1256;
	add.s32 	%r1290, %r1289, %r1257;
	sub.s32 	%r58, %r1259, %r1258;
	mul.lo.s32 	%r1291, %r1253, %r58;
	mul.lo.s32 	%r1292, %r1291, %r1290;
	mul.lo.s32 	%r1293, %r1292, %r1288;
	mul.lo.s32 	%r59, %r1293, 3;
	setp.ge.s32 	%p29, %r6349, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1294, %r1257, 8;
	sub.s32 	%r1295, %r1294, %r1256;
	mul.lo.s32 	%r1296, %r1253, %r1295;
	add.s32 	%r1297, %r1255, 8;
	sub.s32 	%r1298, %r1297, %r1254;
	mul.lo.s32 	%r1299, %r1296, %r1298;
	mul.lo.s32 	%r1300, %r1299, %r58;
	not.b32 	%r1301, %r46;
	mad.lo.s32 	%r1302, %r1300, 3, %r1301;
	sub.s32 	%r1303, %r1302, %r53;
	mul.lo.s32 	%r1304, %r1277, %r1240;
	mul.lo.s32 	%r1305, %r1304, %r1242;
	shl.b32 	%r1306, %r1305, 5;
	div.u32 	%r60, %r1303, %r1306;
	add.s32 	%r1307, %r60, 1;
	and.b32  	%r6346, %r1307, 3;
	setp.eq.s32 	%p30, %r6346, 0;
	mov.u32 	%r6347, %r6349;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r6347, %r6349;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd33, %r6347, 4;
	add.s64 	%rd34, %rd2, %rd33;
	mov.u32 	%r1308, 0;
	st.global.u32 	[%rd34], %r1308;
	add.s32 	%r6347, %r6347, %r57;
	add.s32 	%r6346, %r6346, -1;
	setp.ne.s32 	%p31, %r6346, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd37, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd35, %r6347, 4;
	add.s64 	%rd36, %rd2, %rd35;
	mov.u32 	%r1309, 0;
	st.global.u32 	[%rd36], %r1309;
	add.s64 	%rd38, %rd36, %rd37;
	st.global.u32 	[%rd38], %r1309;
	add.s32 	%r1310, %r6347, %r57;
	add.s32 	%r1311, %r1310, %r57;
	add.s64 	%rd39, %rd38, %rd37;
	st.global.u32 	[%rd39], %r1309;
	add.s32 	%r1312, %r1311, %r57;
	add.s64 	%rd40, %rd39, %rd37;
	st.global.u32 	[%rd40], %r1309;
	add.s32 	%r6347, %r1312, %r57;
	setp.lt.s32 	%p33, %r6347, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd41, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd41;
	sub.s32 	%r1313, %r1246, %r47;
	div.s32 	%r1314, %r1313, %r48;
	mul.lo.s32 	%r1315, %r1314, %r1245;
	sub.s32 	%r1316, %r1315, %r47;
	sub.s32 	%r1317, %r1245, %r48;
	mul.lo.s32 	%r1318, %r1317, %r1242;
	mul.lo.s32 	%r1319, %r1240, 384;
	add.s32 	%r1320, %r1319, %r1319;
	add.s32 	%r1321, %r1320, 128;
	mul.lo.s32 	%r1323, %r1277, 768;
	mul.lo.s32 	%r1324, %r1318, %r1321;
	mad.lo.s32 	%r69, %r1323, %r1316, %r1324;
	bra.uni 	$L__BB0_11;

$L__BB0_821:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f641;
  cvt.rn.f16.f32 high, %f641;
  mov.b32 %r6338, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd483, %r6349, 4;
	add.s64 	%rd484, %rd3, %rd483;
	st.global.u32 	[%rd484], %r6338;
	add.s32 	%r6349, %r6349, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r6349, %r69;
	@%p34 bra 	$L__BB0_821;

	ld.param.u64 	%rd42, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd42;
	ld.param.u64 	%rd43, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd43;
	ld.param.u64 	%rd44, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd44;
	mad.lo.s32 	%r6385, %r1240, %r43, %r41;
	mul.lo.s32 	%r77, %r1241, %r44;
	add.s32 	%r78, %r77, %r42;
	setp.ge.s32 	%p35, %r6385, %r1245;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1325, 31;
	sub.s32 	%r1326, %r1325, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1327, %r46, %r1326, %p36;
	shl.b32 	%r1328, %r1327, 2;
	mov.u32 	%r1329, 2;
	sub.s32 	%r79, %r1328, %r1248;
	shl.b32 	%r1330, %r1247, 2;
	mov.u32 	%r1331, 128;
	sub.s32 	%r80, %r1331, %r1330;
	sub.s32 	%r1332, %r1329, %r1248;
	add.s32 	%r81, %r1332, %r1328;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r82, %r1255, %r1254;
	sub.s32 	%r83, %r1257, %r1256;
	add.s32 	%r84, %r1255, -1;
	add.s32 	%r85, %r1257, -1;
	add.s32 	%r86, %r1259, -1;
	mul.lo.s32 	%r1333, %r1246, %r1245;
	shl.b32 	%r87, %r1333, 6;
	add.s32 	%r88, %r1245, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r89, %r79, 1;
	add.s32 	%r90, %r81, 1;
	shl.b32 	%r91, %r46, 1;
	or.b32  	%r92, %r91, 1;
	shr.u32 	%r1334, %r92, 31;
	add.s32 	%r1335, %r92, %r1334;
	shr.s32 	%r94, %r1335, 1;
	and.b32  	%r1336, %r1335, -2;
	sub.s32 	%r1337, %r92, %r1336;
	add.s32 	%r93, %r1337, %r87;
	rem.s32 	%r1396, %r89, %r80;
	add.s32 	%r1397, %r1396, %r80;
	rem.s32 	%r1398, %r1397, %r80;
	rem.s32 	%r1399, %r90, %r80;
	add.s32 	%r1400, %r1399, %r80;
	rem.s32 	%r1401, %r1400, %r80;
	mov.u32 	%r6350, %r6385;

$L__BB0_14:
	setp.ge.s32 	%p37, %r78, %r1246;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r6350, %r1260;
	setp.lt.s32 	%p39, %r6350, %r1261;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r6350, %r1255;
	setp.ge.s32 	%p41, %r6350, %r1254;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1338, %r6350, %r84, %p40;
	setp.lt.s32 	%p42, %r6350, %r1254;
	selp.b32 	%r1339, %r1254, %r1338, %p42;
	sub.s32 	%r1340, %r1339, %r1254;
	add.s32 	%r96, %r88, %r6350;
	rem.s32 	%r1341, %r79, %r80;
	add.s32 	%r1342, %r1341, %r80;
	rem.s32 	%r97, %r1342, %r80;
	rem.s32 	%r1343, %r81, %r80;
	add.s32 	%r1344, %r1343, %r80;
	rem.s32 	%r98, %r1344, %r80;
	setp.lt.s32 	%p43, %r97, %r1259;
	sub.s32 	%r99, %r97, %r1258;
	setp.lt.s32 	%p44, %r97, %r1258;
	selp.b32 	%r1345, %r97, %r86, %p43;
	selp.b32 	%r1346, %r1258, %r1345, %p44;
	sub.s32 	%r100, %r1346, %r1258;
	setp.lt.s32 	%p45, %r98, %r1259;
	sub.s32 	%r101, %r98, %r1258;
	setp.lt.s32 	%p46, %r98, %r1258;
	selp.b32 	%r1347, %r98, %r86, %p45;
	selp.b32 	%r1348, %r1258, %r1347, %p46;
	sub.s32 	%r102, %r1348, %r1258;
	sub.s32 	%r1349, %r6350, %r1254;
	mul.lo.s32 	%r103, %r1349, %r83;
	mul.lo.s32 	%r104, %r1340, %r83;
	add.s32 	%r1350, %r1349, %r82;
	mul.lo.s32 	%r105, %r1350, %r83;
	add.s32 	%r1351, %r1340, %r82;
	mul.lo.s32 	%r106, %r1351, %r83;
	add.s32 	%r1352, %r1350, %r82;
	mul.lo.s32 	%r107, %r1352, %r83;
	add.s32 	%r1353, %r1351, %r82;
	mul.lo.s32 	%r108, %r1353, %r83;
	mov.u32 	%r6351, %r78;

$L__BB0_16:
	setp.ge.s32 	%p47, %r6351, %r1262;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r6351, %r1263;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r6351, %r1256;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r6351, %r1257;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r110, %r6351, %r1256;
	selp.b32 	%r1354, %r6351, %r85, %p52;
	setp.lt.s32 	%p53, %r6351, %r1256;
	selp.b32 	%r1355, %r1256, %r1354, %p53;
	sub.s32 	%r111, %r1355, %r1256;
	mul.lo.s32 	%r112, %r6351, %r1245;
	add.s32 	%r113, %r112, %r6350;
	shl.b32 	%r114, %r113, 6;
	setp.ge.s32 	%p54, %r97, %r1264;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r97, %r1265;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r97, %r1258;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r98, %r1258;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd45, %r113, 4;
	add.s64 	%rd8, %rd7, %rd45;
	ld.global.f32 	%f85, [%rd8];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1358, %r110, %r103;
	mad.lo.s32 	%r1359, %r1358, %r58, %r99;
	mul.wide.s32 	%rd48, %r1359, 4;
	add.s64 	%rd49, %rd5, %rd48;
	ld.global.f32 	%f642, [%rd49];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1356, %r111, %r104;
	mad.lo.s32 	%r1357, %r1356, %r58, %r100;
	mul.wide.s32 	%rd46, %r1357, 4;
	add.s64 	%rd47, %rd5, %rd46;
	ld.global.f32 	%f642, [%rd47];

$L__BB0_20:
	setp.lt.s32 	%p67, %r98, %r1265;
	setp.ge.s32 	%p68, %r98, %r1264;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1362, %r110, %r103;
	mad.lo.s32 	%r1363, %r1362, %r58, %r101;
	mul.wide.s32 	%rd52, %r1363, 4;
	add.s64 	%rd53, %rd5, %rd52;
	ld.global.f32 	%f643, [%rd53];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1360, %r111, %r104;
	mad.lo.s32 	%r1361, %r1360, %r58, %r102;
	mul.wide.s32 	%rd50, %r1361, 4;
	add.s64 	%rd51, %rd5, %rd50;
	ld.global.f32 	%f643, [%rd51];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f86;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1364, {low,high};}

	// end inline asm
	shl.b32 	%r115, %r113, 5;
	add.s32 	%r1365, %r115, %r46;
	shl.b32 	%r1366, %r1365, 2;
	add.s32 	%r1367, %r87, %r1366;
	mul.wide.s32 	%rd54, %r1367, 4;
	add.s64 	%rd55, %rd6, %rd54;
	st.global.u32 	[%rd55], %r1364;
	add.s32 	%r116, %r1246, %r6351;
	mad.lo.s32 	%r1368, %r116, %r1245, %r6350;
	mul.wide.s32 	%rd56, %r1368, 4;
	add.s64 	%rd9, %rd7, %rd56;
	ld.global.f32 	%f88, [%rd9];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1371, %r110, %r105;
	mad.lo.s32 	%r1372, %r1371, %r58, %r99;
	mul.wide.s32 	%rd59, %r1372, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f644, [%rd60];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1369, %r111, %r106;
	mad.lo.s32 	%r1370, %r1369, %r58, %r100;
	mul.wide.s32 	%rd57, %r1370, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f644, [%rd58];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1375, %r110, %r105;
	mad.lo.s32 	%r1376, %r1375, %r58, %r101;
	mul.wide.s32 	%rd63, %r1376, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f645, [%rd64];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1373, %r111, %r106;
	mad.lo.s32 	%r1374, %r1373, %r58, %r102;
	mul.wide.s32 	%rd61, %r1374, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f645, [%rd62];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f89;
  cvt.rn.f16.f32 high, %f90;
  mov.b32 %r1377, {low,high};}

	// end inline asm
	add.s32 	%r1378, %r91, %r114;
	mul.wide.s32 	%rd65, %r1378, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r1377;
	add.s32 	%r1379, %r116, %r1246;
	mad.lo.s32 	%r1380, %r1379, %r1245, %r6350;
	mul.wide.s32 	%rd67, %r1380, 4;
	add.s64 	%rd10, %rd7, %rd67;
	ld.global.f32 	%f91, [%rd10];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1383, %r110, %r107;
	mad.lo.s32 	%r1384, %r1383, %r58, %r99;
	mul.wide.s32 	%rd70, %r1384, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f646, [%rd71];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1381, %r111, %r108;
	mad.lo.s32 	%r1382, %r1381, %r58, %r100;
	mul.wide.s32 	%rd68, %r1382, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f646, [%rd69];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1387, %r110, %r107;
	mad.lo.s32 	%r1388, %r1387, %r58, %r101;
	mul.wide.s32 	%rd74, %r1388, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f647, [%rd75];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1385, %r111, %r108;
	mad.lo.s32 	%r1386, %r1385, %r58, %r102;
	mul.wide.s32 	%rd72, %r1386, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f647, [%rd73];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f93;
  mov.b32 %r1389, {low,high};}

	// end inline asm
	rem.s32 	%r1390, %r96, %r1245;
	add.s32 	%r1391, %r1390, %r112;
	shl.b32 	%r117, %r1391, 5;
	add.s32 	%r1392, %r117, %r46;
	shl.b32 	%r1393, %r1392, 2;
	add.s32 	%r1394, %r87, %r1393;
	add.s32 	%r1395, %r1394, 2;
	mul.wide.s32 	%rd76, %r1395, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r1389;
	setp.ge.s32 	%p76, %r1398, %r1264;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1398, %r1265;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1398, %r1258;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1398, %r1259;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1401, %r1264;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1401, %r1265;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r118, %r1398, %r1258;
	setp.lt.s32 	%p86, %r1398, %r1258;
	selp.b32 	%r1402, %r1398, %r86, %p82;
	selp.b32 	%r1403, %r1258, %r1402, %p86;
	sub.s32 	%r119, %r1403, %r1258;
	setp.ge.s32 	%p87, %r1401, %r1258;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1401, %r1259;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r120, %r1401, %r1258;
	setp.lt.s32 	%p90, %r1401, %r1258;
	selp.b32 	%r1404, %r1401, %r86, %p89;
	selp.b32 	%r1405, %r1258, %r1404, %p90;
	sub.s32 	%r121, %r1405, %r1258;
	ld.global.f32 	%f94, [%rd8];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1408, %r110, %r103;
	mad.lo.s32 	%r1409, %r1408, %r58, %r118;
	mul.wide.s32 	%rd80, %r1409, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f648, [%rd81];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1406, %r111, %r104;
	mad.lo.s32 	%r1407, %r1406, %r58, %r119;
	mul.wide.s32 	%rd78, %r1407, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f648, [%rd79];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1412, %r110, %r103;
	mad.lo.s32 	%r1413, %r1412, %r58, %r120;
	mul.wide.s32 	%rd84, %r1413, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f649, [%rd85];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1410, %r111, %r104;
	mad.lo.s32 	%r1411, %r1410, %r58, %r121;
	mul.wide.s32 	%rd82, %r1411, 4;
	add.s64 	%rd83, %rd5, %rd82;
	ld.global.f32 	%f649, [%rd83];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f96;
  mov.b32 %r1414, {low,high};}

	// end inline asm
	add.s32 	%r1415, %r115, %r94;
	shl.b32 	%r1416, %r1415, 2;
	add.s32 	%r1417, %r93, %r1416;
	mul.wide.s32 	%rd86, %r1417, 4;
	add.s64 	%rd87, %rd6, %rd86;
	st.global.u32 	[%rd87], %r1414;
	ld.global.f32 	%f97, [%rd9];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1420, %r110, %r105;
	mad.lo.s32 	%r1421, %r1420, %r58, %r118;
	mul.wide.s32 	%rd90, %r1421, 4;
	add.s64 	%rd91, %rd5, %rd90;
	ld.global.f32 	%f650, [%rd91];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1418, %r111, %r106;
	mad.lo.s32 	%r1419, %r1418, %r58, %r119;
	mul.wide.s32 	%rd88, %r1419, 4;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.f32 	%f650, [%rd89];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1424, %r110, %r105;
	mad.lo.s32 	%r1425, %r1424, %r58, %r120;
	mul.wide.s32 	%rd94, %r1425, 4;
	add.s64 	%rd95, %rd5, %rd94;
	ld.global.f32 	%f651, [%rd95];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1422, %r111, %r106;
	mad.lo.s32 	%r1423, %r1422, %r58, %r121;
	mul.wide.s32 	%rd92, %r1423, 4;
	add.s64 	%rd93, %rd5, %rd92;
	ld.global.f32 	%f651, [%rd93];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f99;
  mov.b32 %r1426, {low,high};}

	// end inline asm
	add.s32 	%r1427, %r92, %r114;
	mul.wide.s32 	%rd96, %r1427, 4;
	add.s64 	%rd97, %rd6, %rd96;
	st.global.u32 	[%rd97], %r1426;
	ld.global.f32 	%f100, [%rd10];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1430, %r110, %r107;
	mad.lo.s32 	%r1431, %r1430, %r58, %r118;
	mul.wide.s32 	%rd100, %r1431, 4;
	add.s64 	%rd101, %rd5, %rd100;
	ld.global.f32 	%f652, [%rd101];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1428, %r111, %r108;
	mad.lo.s32 	%r1429, %r1428, %r58, %r119;
	mul.wide.s32 	%rd98, %r1429, 4;
	add.s64 	%rd99, %rd5, %rd98;
	ld.global.f32 	%f652, [%rd99];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1434, %r110, %r107;
	mad.lo.s32 	%r1435, %r1434, %r58, %r120;
	mul.wide.s32 	%rd104, %r1435, 4;
	add.s64 	%rd105, %rd5, %rd104;
	ld.global.f32 	%f653, [%rd105];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1432, %r111, %r108;
	mad.lo.s32 	%r1433, %r1432, %r58, %r121;
	mul.wide.s32 	%rd102, %r1433, 4;
	add.s64 	%rd103, %rd5, %rd102;
	ld.global.f32 	%f653, [%rd103];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f102;
  mov.b32 %r1436, {low,high};}

	// end inline asm
	add.s32 	%r1437, %r117, %r94;
	shl.b32 	%r1438, %r1437, 2;
	add.s32 	%r1439, %r93, %r1438;
	add.s32 	%r1440, %r1439, 2;
	mul.wide.s32 	%rd106, %r1440, 4;
	add.s64 	%rd107, %rd6, %rd106;
	st.global.u32 	[%rd107], %r1436;
	add.s32 	%r6351, %r6351, %r1277;
	setp.lt.s32 	%p99, %r6351, %r1246;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r6350, %r6350, %r1272;
	setp.lt.s32 	%p100, %r6350, %r1245;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd108, [%rd1+120];
	cvta.to.global.u64 	%rd11, %rd108;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r124, %r78, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd109, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd171, %rd109, 24;
	mov.u32 	%r6352, %r6385;

$L__BB0_68:
	setp.ge.s32 	%p102, %r124, %r1246;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r6353, %r124;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1442, %r6353, 31;
	add.s32 	%r1443, %r6353, %r1442;
	shr.s32 	%r1444, %r1443, 1;
	mad.lo.s32 	%r1445, %r1444, %r1245, %r6352;
	shl.b32 	%r128, %r1445, 5;
	add.s32 	%r129, %r6353, -2;
	mul.lo.s32 	%r130, %r129, %r1245;
	add.s32 	%r1446, %r1246, %r129;
	mul.lo.s32 	%r131, %r1446, %r1245;
	add.s32 	%r1447, %r1446, %r1246;
	mul.lo.s32 	%r132, %r1447, %r1245;
	add.s32 	%r133, %r130, %r1245;
	add.s32 	%r134, %r6353, -1;
	add.s32 	%r1448, %r1246, %r134;
	mul.lo.s32 	%r135, %r1448, %r1245;
	add.s32 	%r1449, %r1448, %r1246;
	mul.lo.s32 	%r136, %r1449, %r1245;
	add.s32 	%r1450, %r1246, %r6353;
	mul.lo.s32 	%r137, %r1450, %r1245;
	add.s32 	%r1451, %r1450, %r1246;
	mul.lo.s32 	%r138, %r1451, %r1245;
	mul.lo.s32 	%r139, %r6353, %r1245;
	add.s32 	%r140, %r139, %r1245;
	add.s32 	%r141, %r6353, 1;
	add.s32 	%r1452, %r1246, %r141;
	mul.lo.s32 	%r142, %r1452, %r1245;
	add.s32 	%r1453, %r1452, %r1246;
	mul.lo.s32 	%r143, %r1453, %r1245;
	add.s32 	%r144, %r140, %r1245;
	add.s32 	%r145, %r6353, 2;
	add.s32 	%r1454, %r1246, %r145;
	mul.lo.s32 	%r146, %r1454, %r1245;
	add.s32 	%r1455, %r1454, %r1246;
	mul.lo.s32 	%r147, %r1455, %r1245;
	mov.u32 	%r6356, 0;
	mov.u64 	%rd485, %rd109;

$L__BB0_72:
	ld.global.nc.u32 	%r1456, [%rd485];
	cvt.rn.f64.s32 	%fd1, %r1456;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r149, %r1456, %r6352;
	setp.lt.s32 	%p104, %r149, %r1245;
	or.b32  	%r1457, %r129, %r149;
	setp.gt.s32 	%p105, %r1457, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r129, %r1246;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1460, %r130, %r149;
	mul.wide.s32 	%rd110, %r1460, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f110, [%rd111];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r6355, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f108;
  cvt.rn.f16.f32 high, %f108;
  mov.b32 %r6355, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1461, %r6356, %r128;
	mul.wide.s32 	%rd112, %r1461, 4;
	add.s64 	%rd113, %rd11, %rd112;
	st.global.u32 	[%rd113], %r6355;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1464, %r131, %r149;
	mul.wide.s32 	%rd114, %r1464, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f119, [%rd115];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r6357, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r6357, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1465, %r6356, %r128;
	mul.wide.s32 	%rd116, %r1465, 4;
	add.s64 	%rd117, %rd11, %rd116;
	st.global.u32 	[%rd117], %r6357;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1468, %r132, %r149;
	mul.wide.s32 	%rd118, %r1468, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f127, [%rd119];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r6359, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r6359, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1469, %r6356, %r128;
	mul.wide.s32 	%rd120, %r1469, 4;
	add.s64 	%rd121, %rd11, %rd120;
	st.global.u32 	[%rd121], %r6359;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_87:
	or.b32  	%r1470, %r134, %r149;
	setp.gt.s32 	%p111, %r1470, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r6353, %r1246;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1473, %r133, %r149;
	mul.wide.s32 	%rd122, %r1473, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f134, [%rd123];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r6361, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6361, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1474, %r6356, %r128;
	mul.wide.s32 	%rd124, %r1474, 4;
	add.s64 	%rd125, %rd11, %rd124;
	st.global.u32 	[%rd125], %r6361;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1477, %r135, %r149;
	mul.wide.s32 	%rd126, %r1477, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f141, [%rd127];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r6363, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f139;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6363, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1478, %r6356, %r128;
	mul.wide.s32 	%rd128, %r1478, 4;
	add.s64 	%rd129, %rd11, %rd128;
	st.global.u32 	[%rd129], %r6363;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1481, %r136, %r149;
	mul.wide.s32 	%rd130, %r1481, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f148, [%rd131];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r6365, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f146;
  mov.b32 %r6365, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1482, %r6356, %r128;
	mul.wide.s32 	%rd132, %r1482, 4;
	add.s64 	%rd133, %rd11, %rd132;
	st.global.u32 	[%rd133], %r6365;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_102:
	or.b32  	%r1483, %r6353, %r149;
	setp.gt.s32 	%p118, %r1483, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r6353, %r1246;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1486, %r139, %r149;
	mul.wide.s32 	%rd134, %r1486, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f155, [%rd135];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r6367, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6367, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1487, %r6356, %r128;
	mul.wide.s32 	%rd136, %r1487, 4;
	add.s64 	%rd137, %rd11, %rd136;
	st.global.u32 	[%rd137], %r6367;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1490, %r137, %r149;
	mul.wide.s32 	%rd138, %r1490, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f163, [%rd139];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r6369, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6369, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1491, %r6356, %r128;
	mul.wide.s32 	%rd140, %r1491, 4;
	add.s64 	%rd141, %rd11, %rd140;
	st.global.u32 	[%rd141], %r6369;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1494, %r138, %r149;
	mul.wide.s32 	%rd142, %r1494, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f170, [%rd143];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r6371, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f168;
  mov.b32 %r6371, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1495, %r6356, %r128;
	mul.wide.s32 	%rd144, %r1495, 4;
	add.s64 	%rd145, %rd11, %rd144;
	st.global.u32 	[%rd145], %r6371;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_117:
	or.b32  	%r1496, %r141, %r149;
	setp.gt.s32 	%p125, %r1496, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r141, %r1246;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1499, %r140, %r149;
	mul.wide.s32 	%rd146, %r1499, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f177, [%rd147];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r6373, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f175;
  mov.b32 %r6373, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1500, %r6356, %r128;
	mul.wide.s32 	%rd148, %r1500, 4;
	add.s64 	%rd149, %rd11, %rd148;
	st.global.u32 	[%rd149], %r6373;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1503, %r142, %r149;
	mul.wide.s32 	%rd150, %r1503, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f184, [%rd151];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r6375, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f182;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r6375, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1504, %r6356, %r128;
	mul.wide.s32 	%rd152, %r1504, 4;
	add.s64 	%rd153, %rd11, %rd152;
	st.global.u32 	[%rd153], %r6375;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1507, %r143, %r149;
	mul.wide.s32 	%rd154, %r1507, 4;
	add.s64 	%rd155, %rd7, %rd154;
	ld.global.f32 	%f191, [%rd155];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r6377, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f189;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6377, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1508, %r6356, %r128;
	mul.wide.s32 	%rd156, %r1508, 4;
	add.s64 	%rd157, %rd11, %rd156;
	st.global.u32 	[%rd157], %r6377;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_132:
	or.b32  	%r1509, %r145, %r149;
	setp.gt.s32 	%p132, %r1509, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r145, %r1246;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1512, %r144, %r149;
	mul.wide.s32 	%rd158, %r1512, 4;
	add.s64 	%rd159, %rd7, %rd158;
	ld.global.f32 	%f198, [%rd159];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r6379, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f196;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r6379, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1513, %r6356, %r128;
	mul.wide.s32 	%rd160, %r1513, 4;
	add.s64 	%rd161, %rd11, %rd160;
	st.global.u32 	[%rd161], %r6379;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1516, %r146, %r149;
	mul.wide.s32 	%rd162, %r1516, 4;
	add.s64 	%rd163, %rd7, %rd162;
	ld.global.f32 	%f205, [%rd163];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r6381, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r6381, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1517, %r6356, %r128;
	mul.wide.s32 	%rd164, %r1517, 4;
	add.s64 	%rd165, %rd11, %rd164;
	st.global.u32 	[%rd165], %r6381;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1520, %r147, %r149;
	mul.wide.s32 	%rd166, %r1520, 4;
	add.s64 	%rd167, %rd7, %rd166;
	ld.global.f32 	%f212, [%rd167];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r6383, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6383, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1521, %r6356, %r128;
	mul.wide.s32 	%rd168, %r1521, 4;
	add.s64 	%rd169, %rd11, %rd168;
	st.global.u32 	[%rd169], %r6383;
	add.s32 	%r6356, %r6356, 1;

$L__BB0_147:
	add.s64 	%rd485, %rd485, 4;
	setp.ne.s64 	%p139, %rd485, %rd171;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r6353, %r6353, %r48;
	setp.lt.s32 	%p140, %r6353, %r1246;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r6352, %r6352, %r1272;
	setp.lt.s32 	%p141, %r6352, %r1245;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1249, 1;
	ld.param.u64 	%rd172, [%rd1+160];
	cvta.to.global.u64 	%rd14, %rd172;
	ld.param.u64 	%rd173, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd173;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r253, %r78, 1;
	shr.u32 	%r1569, %r1250, 31;
	add.s32 	%r1570, %r1250, %r1569;
	shr.u32 	%r1571, %r1570, 1;
	and.b32  	%r254, %r1571, 1;
	mov.u64 	%rd193, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r253, %r1246;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r6391, %r253;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1573, %r6391, 31;
	add.s32 	%r1574, %r6391, %r1573;
	shr.s32 	%r1575, %r1574, 1;
	mad.lo.s32 	%r1576, %r1575, %r1245, %r6385;
	shl.b32 	%r258, %r1576, 5;
	add.s32 	%r259, %r6391, -2;
	mul.lo.s32 	%r260, %r259, %r1245;
	add.s32 	%r1577, %r1246, %r259;
	mul.lo.s32 	%r261, %r1577, %r1245;
	add.s32 	%r262, %r260, %r1245;
	add.s32 	%r263, %r6391, -1;
	add.s32 	%r1578, %r1246, %r263;
	mul.lo.s32 	%r264, %r1578, %r1245;
	add.s32 	%r1579, %r1246, %r6391;
	mul.lo.s32 	%r265, %r1579, %r1245;
	mul.lo.s32 	%r266, %r6391, %r1245;
	add.s32 	%r267, %r266, %r1245;
	add.s32 	%r268, %r6391, 1;
	add.s32 	%r1580, %r1246, %r268;
	mul.lo.s32 	%r269, %r1580, %r1245;
	add.s32 	%r270, %r267, %r1245;
	add.s32 	%r271, %r6391, 2;
	add.s32 	%r1581, %r1246, %r271;
	mul.lo.s32 	%r272, %r1581, %r1245;
	mov.u32 	%r6395, 0;
	mov.u64 	%rd486, 24;
	mov.u64 	%rd487, %rd193;

$L__BB0_174:
	ld.global.nc.u32 	%r1582, [%rd487];
	cvt.rn.f64.s32 	%fd2, %r1582;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r274, %r1582, %r6385;
	setp.lt.s32 	%p154, %r274, %r1245;
	or.b32  	%r1583, %r259, %r274;
	setp.gt.s32 	%p155, %r1583, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r259, %r1246;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r254, 0;
	add.s32 	%r1585, %r260, %r274;
	shl.b32 	%r1586, %r1585, 1;
	mul.wide.s32 	%rd194, %r1586, 4;
	add.s64 	%rd195, %rd14, %rd194;
	ld.global.f32 	%f55, [%rd195];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f236;
  mov.b32 %r6393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f237;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r6393, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r279, %r6395, %r258;
	mul.wide.s32 	%rd196, %r279, 4;
	add.s64 	%rd197, %rd15, %rd196;
	st.global.u32 	[%rd197], %r6393;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r254, 0;
	add.s32 	%r1590, %r261, %r274;
	shl.b32 	%r1591, %r1590, 1;
	mul.wide.s32 	%rd198, %r1591, 4;
	add.s64 	%rd199, %rd14, %rd198;
	ld.global.f32 	%f56, [%rd199];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f242;
  mov.b32 %r6394, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f243;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6394, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1594, %r279, 1;
	mul.wide.s32 	%rd200, %r1594, 4;
	add.s64 	%rd201, %rd15, %rd200;
	st.global.u32 	[%rd201], %r6394;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r254, 0;
	add.s32 	%r1596, %r260, %r274;
	shl.b32 	%r1597, %r1596, 1;
	or.b32  	%r1598, %r1597, 1;
	mul.wide.s32 	%rd202, %r1598, 4;
	add.s64 	%rd203, %rd14, %rd202;
	ld.global.f32 	%f59, [%rd203];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f254;
  mov.b32 %r6396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f250;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r6396, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r290, %r6395, %r258;
	mul.wide.s32 	%rd204, %r290, 4;
	add.s64 	%rd205, %rd15, %rd204;
	st.global.u32 	[%rd205], %r6396;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r254, 0;
	add.s32 	%r1602, %r261, %r274;
	shl.b32 	%r1603, %r1602, 1;
	or.b32  	%r1604, %r1603, 1;
	mul.wide.s32 	%rd206, %r1604, 4;
	add.s64 	%rd207, %rd14, %rd206;
	ld.global.f32 	%f60, [%rd207];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f260;
  mov.b32 %r6397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f256;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6397, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1607, %r290, 1;
	mul.wide.s32 	%rd208, %r1607, 4;
	add.s64 	%rd209, %rd15, %rd208;
	st.global.u32 	[%rd209], %r6397;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_198:
	or.b32  	%r1608, %r263, %r274;
	setp.gt.s32 	%p164, %r1608, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r6391, %r1246;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r254, 0;
	add.s32 	%r1610, %r262, %r274;
	shl.b32 	%r1611, %r1610, 1;
	mul.wide.s32 	%rd210, %r1611, 4;
	add.s64 	%rd211, %rd14, %rd210;
	ld.global.f32 	%f62, [%rd211];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f262;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r6399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f263;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6399, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r301, %r6395, %r258;
	mul.wide.s32 	%rd212, %r301, 4;
	add.s64 	%rd213, %rd15, %rd212;
	st.global.u32 	[%rd213], %r6399;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r254, 0;
	add.s32 	%r1615, %r264, %r274;
	shl.b32 	%r1616, %r1615, 1;
	mul.wide.s32 	%rd214, %r1616, 4;
	add.s64 	%rd215, %rd14, %rd214;
	ld.global.f32 	%f63, [%rd215];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6400, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f268;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r6400, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f269;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r6400, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1619, %r301, 1;
	mul.wide.s32 	%rd216, %r1619, 4;
	add.s64 	%rd217, %rd15, %rd216;
	st.global.u32 	[%rd217], %r6400;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r254, 0;
	add.s32 	%r1621, %r262, %r274;
	shl.b32 	%r1622, %r1621, 1;
	or.b32  	%r1623, %r1622, 1;
	mul.wide.s32 	%rd218, %r1623, 4;
	add.s64 	%rd219, %rd14, %rd218;
	ld.global.f32 	%f65, [%rd219];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f274;
  cvt.rn.f16.f32 high, %f274;
  mov.b32 %r6402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f275;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r6402, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r312, %r6395, %r258;
	mul.wide.s32 	%rd220, %r312, 4;
	add.s64 	%rd221, %rd15, %rd220;
	st.global.u32 	[%rd221], %r6402;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r254, 0;
	add.s32 	%r1627, %r264, %r274;
	shl.b32 	%r1628, %r1627, 1;
	or.b32  	%r1629, %r1628, 1;
	mul.wide.s32 	%rd222, %r1629, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.global.f32 	%f66, [%rd223];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6403, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f280;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6403, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r6403, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1632, %r312, 1;
	mul.wide.s32 	%rd224, %r1632, 4;
	add.s64 	%rd225, %rd15, %rd224;
	st.global.u32 	[%rd225], %r6403;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_222:
	or.b32  	%r1633, %r6391, %r274;
	setp.gt.s32 	%p174, %r1633, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r6391, %r1246;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r254, 0;
	add.s32 	%r1635, %r266, %r274;
	shl.b32 	%r1636, %r1635, 1;
	mul.wide.s32 	%rd226, %r1636, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.global.f32 	%f68, [%rd227];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f286;
  cvt.rn.f16.f32 high, %f286;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f287;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r6405, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r323, %r6395, %r258;
	mul.wide.s32 	%rd228, %r323, 4;
	add.s64 	%rd229, %rd15, %rd228;
	st.global.u32 	[%rd229], %r6405;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r254, 0;
	add.s32 	%r1640, %r265, %r274;
	shl.b32 	%r1641, %r1640, 1;
	mul.wide.s32 	%rd230, %r1641, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.global.f32 	%f69, [%rd231];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6406, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f292;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6406, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r6406, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1644, %r323, 1;
	mul.wide.s32 	%rd232, %r1644, 4;
	add.s64 	%rd233, %rd15, %rd232;
	st.global.u32 	[%rd233], %r6406;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r254, 0;
	add.s32 	%r1646, %r266, %r274;
	shl.b32 	%r1647, %r1646, 1;
	or.b32  	%r1648, %r1647, 1;
	mul.wide.s32 	%rd234, %r1648, 4;
	add.s64 	%rd235, %rd14, %rd234;
	ld.global.f32 	%f70, [%rd235];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f299;
  cvt.rn.f16.f32 high, %f299;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f300;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6408, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r334, %r6395, %r258;
	mul.wide.s32 	%rd236, %r334, 4;
	add.s64 	%rd237, %rd15, %rd236;
	st.global.u32 	[%rd237], %r6408;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r254, 0;
	add.s32 	%r1652, %r265, %r274;
	shl.b32 	%r1653, %r1652, 1;
	or.b32  	%r1654, %r1653, 1;
	mul.wide.s32 	%rd238, %r1654, 4;
	add.s64 	%rd239, %rd14, %rd238;
	ld.global.f32 	%f71, [%rd239];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r6409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r6409, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r6409, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1657, %r334, 1;
	mul.wide.s32 	%rd240, %r1657, 4;
	add.s64 	%rd241, %rd15, %rd240;
	st.global.u32 	[%rd241], %r6409;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_246:
	or.b32  	%r1658, %r268, %r274;
	setp.gt.s32 	%p184, %r1658, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r268, %r1246;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r254, 0;
	add.s32 	%r1660, %r267, %r274;
	shl.b32 	%r1661, %r1660, 1;
	mul.wide.s32 	%rd242, %r1661, 4;
	add.s64 	%rd243, %rd14, %rd242;
	ld.global.f32 	%f72, [%rd243];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f311;
  cvt.rn.f16.f32 high, %f311;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f312;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6411, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r345, %r6395, %r258;
	mul.wide.s32 	%rd244, %r345, 4;
	add.s64 	%rd245, %rd15, %rd244;
	st.global.u32 	[%rd245], %r6411;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r254, 0;
	add.s32 	%r1665, %r269, %r274;
	shl.b32 	%r1666, %r1665, 1;
	mul.wide.s32 	%rd246, %r1666, 4;
	add.s64 	%rd247, %rd14, %rd246;
	ld.global.f32 	%f73, [%rd247];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f73;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r6412, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r6412, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f73;
  mov.b32 %r6412, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1669, %r345, 1;
	mul.wide.s32 	%rd248, %r1669, 4;
	add.s64 	%rd249, %rd15, %rd248;
	st.global.u32 	[%rd249], %r6412;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r254, 0;
	add.s32 	%r1671, %r267, %r274;
	shl.b32 	%r1672, %r1671, 1;
	or.b32  	%r1673, %r1672, 1;
	mul.wide.s32 	%rd250, %r1673, 4;
	add.s64 	%rd251, %rd14, %rd250;
	ld.global.f32 	%f74, [%rd251];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f323;
  cvt.rn.f16.f32 high, %f323;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f324;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r6414, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r356, %r6395, %r258;
	mul.wide.s32 	%rd252, %r356, 4;
	add.s64 	%rd253, %rd15, %rd252;
	st.global.u32 	[%rd253], %r6414;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r254, 0;
	add.s32 	%r1677, %r269, %r274;
	shl.b32 	%r1678, %r1677, 1;
	or.b32  	%r1679, %r1678, 1;
	mul.wide.s32 	%rd254, %r1679, 4;
	add.s64 	%rd255, %rd14, %rd254;
	ld.global.f32 	%f75, [%rd255];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r6415, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r6415, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r6415, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r1682, %r356, 1;
	mul.wide.s32 	%rd256, %r1682, 4;
	add.s64 	%rd257, %rd15, %rd256;
	st.global.u32 	[%rd257], %r6415;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_270:
	or.b32  	%r1683, %r271, %r274;
	setp.gt.s32 	%p194, %r1683, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r271, %r1246;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r254, 0;
	add.s32 	%r1685, %r270, %r274;
	shl.b32 	%r1686, %r1685, 1;
	mul.wide.s32 	%rd258, %r1686, 4;
	add.s64 	%rd259, %rd14, %rd258;
	ld.global.f32 	%f76, [%rd259];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f335;
  cvt.rn.f16.f32 high, %f335;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6417, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r367, %r6395, %r258;
	mul.wide.s32 	%rd260, %r367, 4;
	add.s64 	%rd261, %rd15, %rd260;
	st.global.u32 	[%rd261], %r6417;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r254, 0;
	add.s32 	%r1690, %r272, %r274;
	shl.b32 	%r1691, %r1690, 1;
	mul.wide.s32 	%rd262, %r1691, 4;
	add.s64 	%rd263, %rd14, %rd262;
	ld.global.f32 	%f77, [%rd263];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f77;
  cvt.rn.f16.f32 high, %f345;
  mov.b32 %r6418, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f341;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r6418, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f77;
  mov.b32 %r6418, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r1694, %r367, 1;
	mul.wide.s32 	%rd264, %r1694, 4;
	add.s64 	%rd265, %rd15, %rd264;
	st.global.u32 	[%rd265], %r6418;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r254, 0;
	add.s32 	%r1696, %r270, %r274;
	shl.b32 	%r1697, %r1696, 1;
	or.b32  	%r1698, %r1697, 1;
	mul.wide.s32 	%rd266, %r1698, 4;
	add.s64 	%rd267, %rd14, %rd266;
	ld.global.f32 	%f78, [%rd267];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f351;
  mov.b32 %r6420, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r6420, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r6420, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r378, %r6395, %r258;
	mul.wide.s32 	%rd268, %r378, 4;
	add.s64 	%rd269, %rd15, %rd268;
	st.global.u32 	[%rd269], %r6420;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r254, 0;
	add.s32 	%r1702, %r272, %r274;
	shl.b32 	%r1703, %r1702, 1;
	or.b32  	%r1704, %r1703, 1;
	mul.wide.s32 	%rd270, %r1704, 4;
	add.s64 	%rd271, %rd14, %rd270;
	ld.global.f32 	%f79, [%rd271];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r6421, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r6421, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6421, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r1707, %r378, 1;
	mul.wide.s32 	%rd272, %r1707, 4;
	add.s64 	%rd273, %rd15, %rd272;
	st.global.u32 	[%rd273], %r6421;
	add.s32 	%r6395, %r6395, 2;

$L__BB0_294:
	add.s64 	%rd487, %rd487, 4;
	add.s64 	%rd486, %rd486, -4;
	setp.ne.s64 	%p204, %rd486, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r6391, %r6391, %r48;
	setp.lt.s32 	%p205, %r6391, %r1246;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r6385, %r6385, %r1272;
	setp.lt.s32 	%p206, %r6385, %r1245;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r227, %r77;
	mov.u32 	%r1522, 31;
	sub.s32 	%r1523, %r1522, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1524, %r46, %r1523, %p144;
	shl.b32 	%r1525, %r1524, 2;
	mov.u32 	%r1526, 2;
	sub.s32 	%r228, %r1525, %r1248;
	shl.b32 	%r1527, %r1247, 2;
	mov.u32 	%r1528, 128;
	sub.s32 	%r229, %r1528, %r1527;
	sub.s32 	%r1529, %r1526, %r1248;
	add.s32 	%r230, %r1529, %r1525;
	add.s32 	%r231, %r1245, -1;
	add.s32 	%r232, %r228, 1;
	add.s32 	%r233, %r230, 1;
	rem.s32 	%r1554, %r232, %r229;
	add.s32 	%r1555, %r1554, %r229;
	rem.s32 	%r244, %r1555, %r229;
	rem.s32 	%r1556, %r233, %r229;
	add.s32 	%r1557, %r1556, %r229;
	rem.s32 	%r245, %r1557, %r229;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r227;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r235, %r6385, 1;
	rem.s32 	%r1530, %r228, %r229;
	add.s32 	%r1531, %r1530, %r229;
	rem.s32 	%r236, %r1531, %r229;
	rem.s32 	%r1532, %r230, %r229;
	add.s32 	%r1533, %r1532, %r229;
	rem.s32 	%r237, %r1533, %r229;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1536, %r235, %r229;
	add.s32 	%r1537, %r1536, %r236;
	mul.wide.s32 	%rd174, %r1537, 4;
	add.s64 	%rd175, %rd14, %rd174;
	ld.global.f32 	%f218, [%rd175];
	add.s32 	%r1538, %r1536, %r237;
	mul.wide.s32 	%rd176, %r1538, 4;
	add.s64 	%rd177, %rd14, %rd176;
	ld.global.f32 	%f219, [%rd177];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f218;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r6386, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f217;
  mov.b32 %r6386, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1539, %r6385, 5;
	add.s32 	%r1540, %r1539, %r46;
	shl.b32 	%r1541, %r1540, 2;
	mul.wide.s32 	%rd178, %r1541, 4;
	add.s64 	%rd16, %rd15, %rd178;
	st.global.u32 	[%rd16], %r6386;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1544, %r235, 1;
	mul.lo.s32 	%r1545, %r1544, %r229;
	add.s32 	%r1546, %r1545, %r236;
	mul.wide.s32 	%rd179, %r1546, 4;
	add.s64 	%rd180, %rd14, %rd179;
	ld.global.f32 	%f222, [%rd180];
	add.s32 	%r1547, %r1545, %r237;
	mul.wide.s32 	%rd181, %r1547, 4;
	add.s64 	%rd182, %rd14, %rd181;
	ld.global.f32 	%f223, [%rd182];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r6387, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r6387, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1548, %r231, %r6385;
	rem.s32 	%r1549, %r1548, %r1245;
	shl.b32 	%r1550, %r1549, 5;
	add.s32 	%r1551, %r1550, %r46;
	shl.b32 	%r1552, %r1551, 2;
	or.b32  	%r1553, %r1552, 2;
	mul.wide.s32 	%rd183, %r1553, 4;
	add.s64 	%rd17, %rd15, %rd183;
	st.global.u32 	[%rd17], %r6387;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1560, %r235, %r229;
	add.s32 	%r1561, %r1560, %r244;
	mul.wide.s32 	%rd184, %r1561, 4;
	add.s64 	%rd185, %rd14, %rd184;
	ld.global.f32 	%f226, [%rd185];
	add.s32 	%r1562, %r1560, %r245;
	mul.wide.s32 	%rd186, %r1562, 4;
	add.s64 	%rd187, %rd14, %rd186;
	ld.global.f32 	%f227, [%rd187];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f226;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r6388, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f225;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r6388, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd16+4], %r6388;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1565, %r235, 1;
	mul.lo.s32 	%r1566, %r1565, %r229;
	add.s32 	%r1567, %r1566, %r244;
	mul.wide.s32 	%rd188, %r1567, 4;
	add.s64 	%rd189, %rd14, %rd188;
	ld.global.f32 	%f230, [%rd189];
	add.s32 	%r1568, %r1566, %r245;
	mul.wide.s32 	%rd190, %r1568, 4;
	add.s64 	%rd191, %rd14, %rd190;
	ld.global.f32 	%f231, [%rd191];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r6389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r6389, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd17+4], %r6389;

$L__BB0_167:
	add.s32 	%r6385, %r6385, %r1272;
	setp.lt.s32 	%p150, %r6385, %r1245;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r1709, %r1240, -1;
	mad.lo.s32 	%r1710, %r1240, 1152, -128;
	add.s32 	%r1711, %r1241, -1;
	mad.lo.s32 	%r1712, %r1241, 896, 128;
	mul.lo.s32 	%r1713, %r1712, %r1709;
	mad.lo.s32 	%r387, %r1710, %r1711, %r1713;
	setp.lt.s32 	%p207, %r387, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r6425, 0;
	mov.u32 	%r6423, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r6423], %r6426;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1716, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6423+4], %r1716;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1717, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6423+8], %r1717;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1718, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6423+12], %r1718;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	add.s32 	%r6423, %r6423, 16;
	add.s32 	%r6425, %r6425, 4;
	setp.lt.s32 	%p208, %r6425, %r387;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r1720, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r1721, {low,high};}

	// end inline asm
	ld.param.u64 	%rd274, [%rd1+176];
	cvta.to.global.u64 	%rd22, %rd274;
	mov.u32 	%r1722, 31;
	sub.s32 	%r1723, %r1722, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r1724, %r46, %r1723, %p209;
	shl.b32 	%r1725, %r1724, 2;
	sub.s32 	%r398, %r1725, %r1248;
	shl.b32 	%r1726, %r1247, 2;
	mov.u32 	%r1727, 128;
	sub.s32 	%r399, %r1727, %r1726;
	rem.s32 	%r1728, %r398, %r399;
	add.s32 	%r1729, %r1728, %r399;
	rem.s32 	%r400, %r1729, %r399;
	add.s32 	%r1730, %r398, 2;
	rem.s32 	%r1731, %r1730, %r399;
	add.s32 	%r1732, %r1731, %r399;
	rem.s32 	%r401, %r1732, %r399;
	mul.lo.s32 	%r1733, %r400, 6;
	mul.lo.s32 	%r1734, %r401, 6;
	mul.wide.s32 	%rd275, %r1733, 4;
	add.s64 	%rd23, %rd22, %rd275;
	mul.wide.s32 	%rd276, %r1734, 4;
	add.s64 	%rd24, %rd22, %rd276;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r6427, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd23];
	ld.global.f32 	%f375, [%rd23+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd24+8];
	ld.global.f32 	%f377, [%rd24];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r6427, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd23+4];
	ld.global.f32 	%f383, [%rd24+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r6428, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd23];
	ld.global.f32 	%f381, [%rd24];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r6428, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r6429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd23+20];
	ld.global.f32 	%f387, [%rd23+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd24+20];
	ld.global.f32 	%f389, [%rd24+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r6429, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd23+16];
	ld.global.f32 	%f395, [%rd24+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r6430, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd23+12];
	ld.global.f32 	%f393, [%rd24+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r6430, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r1743, %r398, 1;
	rem.s32 	%r1744, %r1743, %r399;
	add.s32 	%r1745, %r1744, %r399;
	rem.s32 	%r414, %r1745, %r399;
	add.s32 	%r1746, %r398, 3;
	rem.s32 	%r1747, %r1746, %r399;
	add.s32 	%r1748, %r1747, %r399;
	rem.s32 	%r415, %r1748, %r399;
	mul.lo.s32 	%r1749, %r414, 6;
	mul.lo.s32 	%r1750, %r415, 6;
	mul.wide.s32 	%rd277, %r1749, 4;
	add.s64 	%rd25, %rd22, %rd277;
	mul.wide.s32 	%rd278, %r1750, 4;
	add.s64 	%rd26, %rd22, %rd278;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r6431, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd25];
	ld.global.f32 	%f399, [%rd25+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd26+8];
	ld.global.f32 	%f401, [%rd26];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r6431, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd25+4];
	ld.global.f32 	%f407, [%rd26+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r6432, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd25];
	ld.global.f32 	%f405, [%rd26];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r6432, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r6433, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd25+20];
	ld.global.f32 	%f411, [%rd25+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd26+20];
	ld.global.f32 	%f413, [%rd26+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f408;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r6433, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd25+16];
	ld.global.f32 	%f419, [%rd26+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f418;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r6434, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd25+12];
	ld.global.f32 	%f417, [%rd26+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f416;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r6434, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r1759, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd279, %r1759;
	// begin inline asm
	mov.u32 %r1760, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd280, %r1760;
	bfi.b64 	%rd27, %rd280, %rd279, 32, 32;
	setp.ne.s64 	%p218, %rd27, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd28, %rd27, 4;
	mov.u32 	%r1761, %nctaid.y;
	mov.u32 	%r1762, %nctaid.x;
	mul.lo.s32 	%r1763, %r1762, %r1761;
	mov.u32 	%r1764, %nctaid.z;
	mul.lo.s32 	%r428, %r1763, %r1764;
	neg.s32 	%r1765, %r42;
	add.s32 	%r1766, %r46, %r41;
	setp.ne.s32 	%p219, %r1766, %r1765;
	mov.u32 	%r1767, %ctaid.x;
	add.s32 	%r429, %r1767, %r43;
	neg.s32 	%r430, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r429, %r430;
	mov.u32 	%r1770, -2147483647;
	sub.s32 	%r1771, %r1770, %r428;
	selp.b32 	%r1769, %r1771, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1768,[%rd28],%r1769;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r1772, [%rd28];
	xor.b32  	%r1773, %r1772, %r1768;
	setp.gt.s32 	%p221, %r1773, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r1774,[%rd28];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_820;

	shr.s32 	%r1776, %r1250, 31;
	shr.u32 	%r1777, %r1776, 30;
	add.s32 	%r1778, %r1250, %r1777;
	shr.s32 	%r432, %r1778, 2;
	add.s32 	%r1779, %r46, 24;
	mul.hi.s32 	%r1780, %r1779, 1374389535;
	shr.u32 	%r1781, %r1780, 31;
	shr.s32 	%r1782, %r1780, 3;
	add.s32 	%r1783, %r1782, %r1781;
	mul.lo.s32 	%r1784, %r1783, 25;
	sub.s32 	%r1785, %r1779, %r1784;
	add.s32 	%r1786, %r46, 26;
	mul.hi.s32 	%r1787, %r1786, 1374389535;
	shr.u32 	%r1788, %r1787, 31;
	shr.s32 	%r1789, %r1787, 3;
	add.s32 	%r1790, %r1789, %r1788;
	mul.lo.s32 	%r1791, %r1790, 25;
	sub.s32 	%r1792, %r1786, %r1791;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r433, %r1785, %r46, %p223;
	shr.u32 	%r1793, %r1250, 31;
	add.s32 	%r1794, %r1250, %r1793;
	and.b32  	%r1795, %r1794, -2;
	sub.s32 	%r434, %r1250, %r1795;
	setp.lt.s32 	%p224, %r400, %r1259;
	setp.ge.s32 	%p225, %r400, %r1258;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r414, %r1259;
	setp.ge.s32 	%p227, %r414, %r1258;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r401, %r1259;
	setp.ge.s32 	%p229, %r401, %r1258;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r415, %r1259;
	setp.ge.s32 	%p231, %r415, %r1258;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r435, %r1792, %r46, %p223;
	mov.u32 	%r1775, 0;
	// begin inline asm
	{mov.u32 %r1796, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2121, %r1796, 8;
	add.s32 	%r2122, %r2121, -8192;
	or.b32  	%r1800, %r2122, 31;
	// begin inline asm
	{sub.f16x2 %r5225,%r1721,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5228,%r6429,%r5225;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1721;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6243,%r6430,%r5225;
}
	// end inline asm
	mov.u32 	%r6435, %r1721;
	mov.u32 	%r6436, %r1721;
	mov.u32 	%r6437, %r1721;
	mov.u32 	%r6438, %r1721;
	mov.u32 	%r6439, %r1721;
	mov.u32 	%r6440, %r1721;
	mov.u32 	%r6441, %r1721;
	mov.u32 	%r6442, %r1721;
	mov.u32 	%r6443, %r1721;
	mov.u32 	%r6444, %r1721;
	mov.u32 	%r6445, %r1721;
	mov.u32 	%r6446, %r1721;
	mov.u32 	%r6447, %r1721;
	mov.u32 	%r6448, %r1721;
	mov.u32 	%r6449, %r1721;
	mov.u32 	%r6450, %r1721;
	mov.u32 	%r6451, %r1721;
	mov.u32 	%r6452, %r1721;
	mov.u32 	%r6453, %r1721;
	mov.u32 	%r6454, %r1721;
	mov.u32 	%r6455, %r1721;
	mov.u32 	%r6456, %r1721;
	mov.u32 	%r6457, %r1721;
	mov.u32 	%r6458, %r1721;
	mov.u32 	%r6459, %r1721;
	mov.u32 	%r6460, %r1721;
	mov.u32 	%r6461, %r1721;
	mov.u32 	%r6462, %r1721;
	mov.u32 	%r6463, %r1721;
	mov.u32 	%r6464, %r1721;
	mov.u32 	%r6465, %r1721;
	mov.u32 	%r6466, %r1721;
	mov.u32 	%r6467, %r1721;
	mov.u32 	%r6468, %r1721;
	mov.u32 	%r6469, %r1721;
	mov.u32 	%r6470, %r1721;
	mov.u32 	%r6471, %r1721;
	mov.u32 	%r6472, %r1721;
	mov.u32 	%r6473, %r1721;
	mov.u32 	%r6474, %r1721;
	mov.u32 	%r6475, %r1721;
	mov.u32 	%r6476, %r1721;
	mov.u32 	%r6477, %r1721;
	mov.u32 	%r6478, %r1721;
	mov.u32 	%r6479, %r1721;
	mov.u32 	%r6480, %r1721;
	mov.u32 	%r6481, %r1721;
	mov.u32 	%r6482, %r1721;
	mov.u32 	%r6483, %r1721;
	mov.u32 	%r6484, %r1721;
	mov.u32 	%r6485, %r1721;
	mov.u32 	%r6486, %r1721;
	mov.u32 	%r6487, %r1721;
	mov.u32 	%r6488, %r1721;
	mov.u32 	%r6489, %r1721;
	mov.u32 	%r6490, %r1721;
	mov.u32 	%r6491, %r1721;
	mov.u32 	%r6492, %r1721;
	mov.u32 	%r6493, %r1721;
	mov.u32 	%r6494, %r1721;
	mov.u32 	%r6495, %r1721;
	mov.u32 	%r6496, %r1721;
	mov.u32 	%r6497, %r1721;
	mov.u32 	%r6498, %r1721;
	mov.u32 	%r6499, %r1721;
	mov.u32 	%r6500, %r1721;
	mov.u32 	%r6501, %r1721;
	mov.u32 	%r6502, %r1721;
	mov.u32 	%r6503, %r1721;
	mov.u32 	%r6504, %r1721;
	mov.u32 	%r6505, %r1721;
	mov.u32 	%r6506, %r1721;
	mov.u32 	%r6507, %r1721;
	mov.u32 	%r6508, %r1721;
	mov.u32 	%r6509, %r1775;

$L__BB0_332:
	mov.u32 	%r6342, %tid.y;
	mov.u32 	%r6341, %tid.z;
	mov.u32 	%r6340, %ctaid.y;
	mov.u32 	%r6339, %ctaid.z;
	mov.u32 	%r1811, 1;
	not.b32 	%r2085, %r6339;
	mov.u32 	%r2077, -1;
	add.s32 	%r2086, %r1243, %r2085;
	not.b32 	%r2088, %r6340;
	add.s32 	%r2089, %r1242, %r2088;
	add.s32 	%r2090, %r2089, %r2086;
	mul.lo.s32 	%r2091, %r2090, %r1244;
	add.s32 	%r2092, %r2091, %r1245;
	not.b32 	%r2094, %r6342;
	add.s32 	%r2095, %r1240, %r2094;
	mad.lo.s32 	%r2096, %r2089, %r1240, %r2095;
	not.b32 	%r2098, %r6341;
	add.s32 	%r2099, %r1241, %r2098;
	mad.lo.s32 	%r2100, %r2086, %r1241, %r2099;
	add.s32 	%r2101, %r2096, %r2100;
	shl.b32 	%r2102, %r2101, 1;
	add.s32 	%r2103, %r2092, %r2102;
	add.s32 	%r2104, %r2103, %r6509;
	add.s32 	%r2105, %r6509, %r2091;
	div.s32 	%r2106, %r2104, %r1245;
	mul.lo.s32 	%r2107, %r2106, %r1245;
	sub.s32 	%r2110, %r48, %r1245;
	sub.s32 	%r2111, %r2096, %r2100;
	shl.b32 	%r2112, %r2111, 1;
	add.s32 	%r2113, %r2112, %r1246;
	mad.lo.s32 	%r2114, %r2106, %r48, %r2113;
	mad.lo.s32 	%r2115, %r2106, %r2110, %r2105;
	div.s32 	%r2116, %r2114, %r1246;
	mul.lo.s32 	%r2117, %r2116, %r1246;
	sub.s32 	%r2120, %r1273, %r1246;
	mov.u32 	%r1895, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1797,%r1720,%r1775,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1803, %r6428, %r1797, %p28;
	// begin inline asm
	{mul.f16x2 %r6593,%r1803,%r6508;
}
	// end inline asm
	selp.b32 	%r1806, %r6432, %r1797, %p28;
	// begin inline asm
	{mul.f16x2 %r6591,%r1806,%r6507;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1809,%r1720,%r1811,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1815, %r6428, %r1809, %p28;
	// begin inline asm
	{mul.f16x2 %r6592,%r1815,%r6506;
}
	// end inline asm
	selp.b32 	%r1818, %r6432, %r1809, %p28;
	// begin inline asm
	{mul.f16x2 %r6590,%r1818,%r6505;
}
	// end inline asm
	mov.u32 	%r1823, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1821,%r1720,%r1823,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1827, %r6428, %r1821, %p28;
	// begin inline asm
	{mul.f16x2 %r6589,%r1827,%r6504;
}
	// end inline asm
	selp.b32 	%r1830, %r6432, %r1821, %p28;
	// begin inline asm
	{mul.f16x2 %r6588,%r1830,%r6503;
}
	// end inline asm
	mov.u32 	%r1835, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1833,%r1720,%r1835,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1839, %r6428, %r1833, %p28;
	// begin inline asm
	{mul.f16x2 %r6587,%r1839,%r1721;
}
	// end inline asm
	selp.b32 	%r1842, %r6432, %r1833, %p28;
	// begin inline asm
	{mul.f16x2 %r6585,%r1842,%r1721;
}
	// end inline asm
	mov.u32 	%r1847, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1845,%r1720,%r1847,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1851, %r6428, %r1845, %p28;
	// begin inline asm
	{mul.f16x2 %r6586,%r1851,%r6502;
}
	// end inline asm
	selp.b32 	%r1854, %r6432, %r1845, %p28;
	// begin inline asm
	{mul.f16x2 %r6584,%r1854,%r6501;
}
	// end inline asm
	mov.u32 	%r1859, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1857,%r1720,%r1859,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1863, %r6428, %r1857, %p28;
	// begin inline asm
	{mul.f16x2 %r6583,%r1863,%r6500;
}
	// end inline asm
	selp.b32 	%r1866, %r6432, %r1857, %p28;
	// begin inline asm
	{mul.f16x2 %r6580,%r1866,%r6499;
}
	// end inline asm
	mov.u32 	%r1871, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1869,%r1720,%r1871,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1875, %r6428, %r1869, %p28;
	// begin inline asm
	{mul.f16x2 %r6582,%r1875,%r6498;
}
	// end inline asm
	selp.b32 	%r1878, %r6432, %r1869, %p28;
	// begin inline asm
	{mul.f16x2 %r6579,%r1878,%r6497;
}
	// end inline asm
	mov.u32 	%r1883, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1881,%r1720,%r1883,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1887, %r6428, %r1881, %p28;
	// begin inline asm
	{mul.f16x2 %r6581,%r1887,%r6496;
}
	// end inline asm
	selp.b32 	%r1890, %r6432, %r1881, %p28;
	// begin inline asm
	{mul.f16x2 %r6578,%r1890,%r6495;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1893,%r1720,%r1895,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1899, %r6428, %r1893, %p28;
	// begin inline asm
	{mul.f16x2 %r6577,%r1899,%r6494;
}
	// end inline asm
	selp.b32 	%r1902, %r6432, %r1893, %p28;
	// begin inline asm
	{mul.f16x2 %r6574,%r1902,%r6493;
}
	// end inline asm
	mov.u32 	%r1907, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1905,%r1720,%r1907,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1911, %r6428, %r1905, %p28;
	// begin inline asm
	{mul.f16x2 %r6576,%r1911,%r6492;
}
	// end inline asm
	selp.b32 	%r1914, %r6432, %r1905, %p28;
	// begin inline asm
	{mul.f16x2 %r6573,%r1914,%r6491;
}
	// end inline asm
	mov.u32 	%r1919, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1917,%r1720,%r1919,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1923, %r6428, %r1917, %p28;
	// begin inline asm
	{mul.f16x2 %r6575,%r1923,%r6490;
}
	// end inline asm
	selp.b32 	%r1926, %r6432, %r1917, %p28;
	// begin inline asm
	{mul.f16x2 %r6572,%r1926,%r6489;
}
	// end inline asm
	mov.u32 	%r1931, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1929,%r1720,%r1931,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1935, %r6428, %r1929, %p28;
	// begin inline asm
	{mul.f16x2 %r6571,%r1935,%r1721;
}
	// end inline asm
	selp.b32 	%r1938, %r6432, %r1929, %p28;
	// begin inline asm
	{mul.f16x2 %r6570,%r1938,%r1721;
}
	// end inline asm
	mov.u32 	%r1943, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1941,%r1720,%r1943,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1947, %r6428, %r1941, %p28;
	// begin inline asm
	{mul.f16x2 %r6569,%r1947,%r1721;
}
	// end inline asm
	selp.b32 	%r1950, %r6432, %r1941, %p28;
	// begin inline asm
	{mul.f16x2 %r6567,%r1950,%r1721;
}
	// end inline asm
	mov.u32 	%r1955, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1953,%r1720,%r1955,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1959, %r6428, %r1953, %p28;
	// begin inline asm
	{mul.f16x2 %r6568,%r1959,%r1721;
}
	// end inline asm
	selp.b32 	%r1962, %r6432, %r1953, %p28;
	// begin inline asm
	{mul.f16x2 %r6566,%r1962,%r1721;
}
	// end inline asm
	mov.u32 	%r1967, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1965,%r1720,%r1967,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1971, %r6428, %r1965, %p28;
	// begin inline asm
	{mul.f16x2 %r6565,%r1971,%r1721;
}
	// end inline asm
	selp.b32 	%r1974, %r6432, %r1965, %p28;
	// begin inline asm
	{mul.f16x2 %r6562,%r1974,%r1721;
}
	// end inline asm
	mov.u32 	%r1979, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r1977,%r1720,%r1979,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1983, %r6428, %r1977, %p28;
	// begin inline asm
	{mul.f16x2 %r6564,%r1983,%r6488;
}
	// end inline asm
	selp.b32 	%r1986, %r6432, %r1977, %p28;
	// begin inline asm
	{mul.f16x2 %r6561,%r1986,%r6487;
}
	// end inline asm
	mov.u32 	%r1991, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r1989,%r1720,%r1991,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r1995, %r6428, %r1989, %p28;
	// begin inline asm
	{mul.f16x2 %r6563,%r1995,%r6486;
}
	// end inline asm
	selp.b32 	%r1998, %r6432, %r1989, %p28;
	// begin inline asm
	{mul.f16x2 %r6560,%r1998,%r6485;
}
	// end inline asm
	mov.u32 	%r2003, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2001,%r1720,%r2003,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2007, %r6428, %r2001, %p28;
	// begin inline asm
	{mul.f16x2 %r6559,%r2007,%r1721;
}
	// end inline asm
	selp.b32 	%r2010, %r6432, %r2001, %p28;
	// begin inline asm
	{mul.f16x2 %r6556,%r2010,%r1721;
}
	// end inline asm
	mov.u32 	%r2015, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2013,%r1720,%r2015,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2019, %r6428, %r2013, %p28;
	// begin inline asm
	{mul.f16x2 %r6558,%r2019,%r1721;
}
	// end inline asm
	selp.b32 	%r2022, %r6432, %r2013, %p28;
	// begin inline asm
	{mul.f16x2 %r6555,%r2022,%r1721;
}
	// end inline asm
	mov.u32 	%r2027, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2025,%r1720,%r2027,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2031, %r6428, %r2025, %p28;
	// begin inline asm
	{mul.f16x2 %r6557,%r2031,%r6484;
}
	// end inline asm
	selp.b32 	%r2034, %r6432, %r2025, %p28;
	// begin inline asm
	{mul.f16x2 %r6554,%r2034,%r6483;
}
	// end inline asm
	mov.u32 	%r2039, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2037,%r1720,%r2039,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2043, %r6428, %r2037, %p28;
	// begin inline asm
	{mul.f16x2 %r6553,%r2043,%r1721;
}
	// end inline asm
	selp.b32 	%r2046, %r6432, %r2037, %p28;
	// begin inline asm
	{mul.f16x2 %r6552,%r2046,%r1721;
}
	// end inline asm
	mov.u32 	%r2051, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2049,%r1720,%r2051,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2055, %r6428, %r2049, %p28;
	// begin inline asm
	{mul.f16x2 %r6551,%r2055,%r1721;
}
	// end inline asm
	selp.b32 	%r2058, %r6432, %r2049, %p28;
	// begin inline asm
	{mul.f16x2 %r6549,%r2058,%r1721;
}
	// end inline asm
	mov.u32 	%r2063, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2061,%r1720,%r2063,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2067, %r6428, %r2061, %p28;
	// begin inline asm
	{mul.f16x2 %r6550,%r2067,%r1721;
}
	// end inline asm
	selp.b32 	%r2070, %r6432, %r2061, %p28;
	// begin inline asm
	{mul.f16x2 %r6548,%r2070,%r1721;
}
	// end inline asm
	mov.u32 	%r2075, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2073,%r1720,%r2075,%r1800,%r2077;
}
	// end inline asm
	selp.b32 	%r2079, %r6428, %r2073, %p28;
	// begin inline asm
	{mul.f16x2 %r6547,%r2079,%r1721;
}
	// end inline asm
	selp.b32 	%r2082, %r6432, %r2073, %p28;
	// begin inline asm
	{mul.f16x2 %r6546,%r2082,%r1721;
}
	// end inline asm
	sub.s32 	%r559, %r2104, %r2107;
	sub.s32 	%r560, %r2114, %r2117;
	mad.lo.s32 	%r561, %r2116, %r2120, %r2115;
	ld.param.u64 	%rd284, [%rd1+168];
	cvta.to.global.u64 	%rd285, %rd284;
	shl.b32 	%r2169, %r561, 1;
	mul.wide.s32 	%rd286, %r2169, 4;
	add.s64 	%rd29, %rd285, %rd286;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	mov.u32 	%r6343, %tid.x;
	add.s32 	%r2372, %r1268, 1;
	setp.lt.s32 	%p239, %r561, %r2372;
	setp.eq.s32 	%p240, %r432, %r6343;
	setp.gt.s32 	%p241, %r561, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r6512, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r6513, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2172, %r1268, 1;
	setp.lt.s32 	%p234, %r561, %r2172;
	setp.gt.s32 	%p235, %r561, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r6510, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r6511, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r6512, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r6513, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2380, 0;
	mov.u32 	%r2391, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2378,%r6426,%r2380,%r1800,%r2391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2383,%r6512,%r2378;
}
	// end inline asm
	mov.u32 	%r2389, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2387,%r6426,%r2389,%r1800,%r2391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2392,%r6513,%r2387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6515,%r2383,%r2392;
}
	// end inline asm
	setp.eq.s32 	%p244, %r434, 0;
	mov.u32 	%r6514, %r6515;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f433;
  cvt.rn.f16.f32 high, %f433;
  mov.b32 %r6514, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6593,%r6593,%r6514;
}
	// end inline asm
	setp.eq.s32 	%p245, %r434, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f435;
  cvt.rn.f16.f32 high, %f435;
  mov.b32 %r6515, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6591,%r6591,%r6515;
}
	// end inline asm
	mov.u32 	%r2413, 2;
	mov.u32 	%r2424, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2411,%r6426,%r2413,%r1800,%r2424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2416,%r6512,%r2411;
}
	// end inline asm
	mov.u32 	%r2422, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2420,%r6426,%r2422,%r1800,%r2424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2425,%r6513,%r2420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6517,%r2416,%r2425;
}
	// end inline asm
	mov.u32 	%r6516, %r6517;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f437;
  cvt.rn.f16.f32 high, %f437;
  mov.b32 %r6516, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6592,%r6592,%r6516;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f439;
  cvt.rn.f16.f32 high, %f439;
  mov.b32 %r6517, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6590,%r6590,%r6517;
}
	// end inline asm
	mov.u32 	%r2446, 4;
	mov.u32 	%r2457, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2444,%r6426,%r2446,%r1800,%r2457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2449,%r6512,%r2444;
}
	// end inline asm
	mov.u32 	%r2455, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2453,%r6426,%r2455,%r1800,%r2457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2458,%r6513,%r2453;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r2449,%r2458;
}
	// end inline asm
	mov.u32 	%r6518, %r6519;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f441;
  cvt.rn.f16.f32 high, %f441;
  mov.b32 %r6518, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6589,%r6589,%r6518;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f443;
  cvt.rn.f16.f32 high, %f443;
  mov.b32 %r6519, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6588,%r6588,%r6519;
}
	// end inline asm
	mov.u32 	%r2479, 6;
	mov.u32 	%r2490, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2477,%r6426,%r2479,%r1800,%r2490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2482,%r6512,%r2477;
}
	// end inline asm
	mov.u32 	%r2488, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2486,%r6426,%r2488,%r1800,%r2490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2491,%r6513,%r2486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6521,%r2482,%r2491;
}
	// end inline asm
	mov.u32 	%r6520, %r6521;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f445;
  cvt.rn.f16.f32 high, %f445;
  mov.b32 %r6520, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6587,%r6587,%r6520;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f447;
  cvt.rn.f16.f32 high, %f447;
  mov.b32 %r6521, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r6521;
}
	// end inline asm
	mov.u32 	%r2512, 8;
	mov.u32 	%r2523, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2510,%r6426,%r2512,%r1800,%r2523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2515,%r6512,%r2510;
}
	// end inline asm
	mov.u32 	%r2521, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2519,%r6426,%r2521,%r1800,%r2523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2524,%r6513,%r2519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6523,%r2515,%r2524;
}
	// end inline asm
	mov.u32 	%r6522, %r6523;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f449;
  cvt.rn.f16.f32 high, %f449;
  mov.b32 %r6522, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6586,%r6586,%r6522;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f451;
  cvt.rn.f16.f32 high, %f451;
  mov.b32 %r6523, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6584,%r6584,%r6523;
}
	// end inline asm
	mov.u32 	%r2545, 10;
	mov.u32 	%r2556, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2543,%r6426,%r2545,%r1800,%r2556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2548,%r6512,%r2543;
}
	// end inline asm
	mov.u32 	%r2554, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2552,%r6426,%r2554,%r1800,%r2556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2557,%r6513,%r2552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r2548,%r2557;
}
	// end inline asm
	mov.u32 	%r6524, %r6525;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f453;
  cvt.rn.f16.f32 high, %f453;
  mov.b32 %r6524, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6583,%r6583,%r6524;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f455;
  cvt.rn.f16.f32 high, %f455;
  mov.b32 %r6525, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6580,%r6580,%r6525;
}
	// end inline asm
	mov.u32 	%r2578, 12;
	mov.u32 	%r2589, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2576,%r6426,%r2578,%r1800,%r2589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2581,%r6512,%r2576;
}
	// end inline asm
	mov.u32 	%r2587, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2585,%r6426,%r2587,%r1800,%r2589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2590,%r6513,%r2585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6527,%r2581,%r2590;
}
	// end inline asm
	mov.u32 	%r6526, %r6527;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f457;
  cvt.rn.f16.f32 high, %f457;
  mov.b32 %r6526, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6582,%r6582,%r6526;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f459;
  cvt.rn.f16.f32 high, %f459;
  mov.b32 %r6527, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6579,%r6579,%r6527;
}
	// end inline asm
	mov.u32 	%r2611, 14;
	mov.u32 	%r2622, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2609,%r6426,%r2611,%r1800,%r2622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2614,%r6512,%r2609;
}
	// end inline asm
	mov.u32 	%r2620, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2618,%r6426,%r2620,%r1800,%r2622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2623,%r6513,%r2618;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6529,%r2614,%r2623;
}
	// end inline asm
	mov.u32 	%r6528, %r6529;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f461;
  cvt.rn.f16.f32 high, %f461;
  mov.b32 %r6528, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6577,%r6577,%r6528;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f463;
  cvt.rn.f16.f32 high, %f463;
  mov.b32 %r6529, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6574,%r6574,%r6529;
}
	// end inline asm
	mov.u32 	%r2644, 16;
	mov.u32 	%r2655, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2642,%r6426,%r2644,%r1800,%r2655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2647,%r6512,%r2642;
}
	// end inline asm
	mov.u32 	%r2653, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2651,%r6426,%r2653,%r1800,%r2655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2656,%r6513,%r2651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6531,%r2647,%r2656;
}
	// end inline asm
	mov.u32 	%r6530, %r6531;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f465;
  cvt.rn.f16.f32 high, %f465;
  mov.b32 %r6530, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6576,%r6576,%r6530;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r6531, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r6573,%r6573,%r6531;
}
	// end inline asm
	mov.u32 	%r2677, 18;
	mov.u32 	%r2688, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2675,%r6426,%r2677,%r1800,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2680,%r6512,%r2675;
}
	// end inline asm
	mov.u32 	%r2686, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2684,%r6426,%r2686,%r1800,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r6513,%r2684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6533,%r2680,%r2689;
}
	// end inline asm
	mov.u32 	%r6532, %r6533;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r6532, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r6571,%r6571,%r6532;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f471;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r6533, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r6533;
}
	// end inline asm
	mov.u32 	%r2710, 20;
	mov.u32 	%r2721, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2708,%r6426,%r2710,%r1800,%r2721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2713,%r6512,%r2708;
}
	// end inline asm
	mov.u32 	%r2719, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2717,%r6426,%r2719,%r1800,%r2721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2722,%r6513,%r2717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6535,%r2713,%r2722;
}
	// end inline asm
	mov.u32 	%r6534, %r6535;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f473;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r6534, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r6569,%r6569,%r6534;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f475;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r6535, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r6567,%r6567,%r6535;
}
	// end inline asm
	mov.u32 	%r2743, 22;
	mov.u32 	%r2754, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2741,%r6426,%r2743,%r1800,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2746,%r6512,%r2741;
}
	// end inline asm
	mov.u32 	%r2752, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2750,%r6426,%r2752,%r1800,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r6513,%r2750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6537,%r2746,%r2755;
}
	// end inline asm
	mov.u32 	%r6536, %r6537;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f477;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r6536, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r6565,%r6565,%r6536;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f479;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r6537, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r6562,%r6562,%r6537;
}
	// end inline asm
	mov.u32 	%r2776, 24;
	mov.u32 	%r2787, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2774,%r6426,%r2776,%r1800,%r2787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2779,%r6512,%r2774;
}
	// end inline asm
	mov.u32 	%r2785, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2783,%r6426,%r2785,%r1800,%r2787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2788,%r6513,%r2783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6539,%r2779,%r2788;
}
	// end inline asm
	mov.u32 	%r6538, %r6539;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f481;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r6538, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r6564,%r6564,%r6538;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f483;
  cvt.rn.f16.f32 high, %f483;
  mov.b32 %r6539, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r6561,%r6561,%r6539;
}
	// end inline asm
	mov.u32 	%r2809, 26;
	mov.u32 	%r2820, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2807,%r6426,%r2809,%r1800,%r2820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2812,%r6512,%r2807;
}
	// end inline asm
	mov.u32 	%r2818, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2816,%r6426,%r2818,%r1800,%r2820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2821,%r6513,%r2816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6541,%r2812,%r2821;
}
	// end inline asm
	mov.u32 	%r6540, %r6541;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f485;
  cvt.rn.f16.f32 high, %f485;
  mov.b32 %r6540, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r6559,%r6559,%r6540;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f487;
  cvt.rn.f16.f32 high, %f487;
  mov.b32 %r6541, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r6556,%r6556,%r6541;
}
	// end inline asm
	mov.u32 	%r2842, 28;
	mov.u32 	%r2853, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2840,%r6426,%r2842,%r1800,%r2853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2845,%r6512,%r2840;
}
	// end inline asm
	mov.u32 	%r2851, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2849,%r6426,%r2851,%r1800,%r2853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2854,%r6513,%r2849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6543,%r2845,%r2854;
}
	// end inline asm
	mov.u32 	%r6542, %r6543;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f489;
  cvt.rn.f16.f32 high, %f489;
  mov.b32 %r6542, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r6558,%r6558,%r6542;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f491;
  cvt.rn.f16.f32 high, %f491;
  mov.b32 %r6543, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r6555,%r6555,%r6543;
}
	// end inline asm
	mov.u32 	%r2884, 31;
	mov.u32 	%r2875, 30;
	mov.u32 	%r2886, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2873,%r6426,%r2875,%r1800,%r2886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2878,%r6512,%r2873;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2882,%r6426,%r2884,%r1800,%r2886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2887,%r6513,%r2882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6545,%r2878,%r2887;
}
	// end inline asm
	mov.u32 	%r6544, %r6545;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f493;
  cvt.rn.f16.f32 high, %f493;
  mov.b32 %r6544, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r6551,%r6551,%r6544;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f495;
  cvt.rn.f16.f32 high, %f495;
  mov.b32 %r6545, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r6549,%r6549,%r6545;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r6510, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r6511, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r560, %r1250;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	mov.u32 	%r2366, 0;
	// begin inline asm
	{mul.f16x2 %r2274,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6593,%r6593,%r2274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2280,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6581,%r6581,%r2280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2286,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6583,%r6583,%r2286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2292,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6563,%r6563,%r2292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2298,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6565,%r6565,%r2298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2304,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r6550,%r2304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2310,%r6511,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6587,%r6587,%r2310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2316,%r6511,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6568,%r6568,%r2316;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2322,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6591,%r6591,%r2322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2328,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6578,%r6578,%r2328;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2334,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6580,%r6580,%r2334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2340,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6560,%r6560,%r2340;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2346,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6562,%r6562,%r2346;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2352,%r6510,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6548,%r6548,%r2352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2358,%r6511,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r2358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2364,%r6511,%r2366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6566,%r6566,%r2364;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2177, %r1250, -2;
	setp.ne.s32 	%p238, %r560, %r2177;
	@%p238 bra 	$L__BB0_408;

	mov.u32 	%r2270, 0;
	// begin inline asm
	{mul.f16x2 %r2178,%r6510,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6571,%r6571,%r2178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2184,%r6510,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6553,%r6553,%r2184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2190,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6589,%r6589,%r2190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2196,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6575,%r6575,%r2196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2202,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6577,%r6577,%r2202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2208,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6557,%r6557,%r2208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2214,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6559,%r6559,%r2214;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2220,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6547,%r6547,%r2220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2226,%r6510,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r2226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2232,%r6510,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r6552,%r2232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2238,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6588,%r6588,%r2238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2244,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6572,%r6572,%r2244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2250,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r6574,%r2250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2256,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6554,%r6554,%r2256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2262,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6556,%r6556,%r2262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2268,%r6511,%r2270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6546,%r6546,%r2268;
}
	// end inline asm

$L__BB0_408:
	mov.u32 	%r2910, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2906,%r6481,%r433,%r1800,%r2910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2906;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6481;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2913, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2914,%r6482,%r2913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2917,%r6427,%r2914;
}
	// end inline asm
	@%p28 bra 	$L__BB0_410;
	bra.uni 	$L__BB0_409;

$L__BB0_410:
	// begin inline asm
	{neg.f16x2 %r6594,%r6593;
}
	// end inline asm
	bra.uni 	$L__BB0_411;

$L__BB0_409:
	// begin inline asm
	{mul.f16x2 %r6594,%r6428,%r2914;
}
	// end inline asm

$L__BB0_411:
	mov.u32 	%r2930, 31;
	mov.u32 	%r2953, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2928,%r6594,%r2930,%r1800,%r2953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2933,%r2917,%r2928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2936,%r6480,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2939,%r2936,%r2933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2942,%r1721,%r2939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2945,%r6593,%r2942;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2949,%r6477,%r433,%r1800,%r2953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2949;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6477;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2956, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2957,%r6478,%r2956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r6427,%r2957;
}
	// end inline asm
	mov.u32 	%r6595, %r6592;
	@%p28 bra 	$L__BB0_413;

	// begin inline asm
	{mul.f16x2 %r6595,%r6428,%r2957;
}
	// end inline asm

$L__BB0_413:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2971,%r6595,%r2930,%r1800,%r2953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2976,%r2960,%r2971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2979,%r6480,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2982,%r2976,%r2979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2985,%r1721,%r2982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2988,%r6592,%r2985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2991,%r6481,%r6482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2994,%r6431,%r2991;
}
	// end inline asm
	@%p28 bra 	$L__BB0_415;
	bra.uni 	$L__BB0_414;

$L__BB0_415:
	// begin inline asm
	{neg.f16x2 %r6596,%r6591;
}
	// end inline asm
	bra.uni 	$L__BB0_416;

$L__BB0_414:
	// begin inline asm
	{mul.f16x2 %r6596,%r6432,%r2991;
}
	// end inline asm

$L__BB0_416:
	mov.u32 	%r3007, 31;
	mov.u32 	%r3009, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3005,%r6596,%r3007,%r1800,%r3009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3010,%r2994,%r3005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3013,%r6475,%r6474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3016,%r3013,%r3010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3019,%r1721,%r3016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3022,%r6591,%r3019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3025,%r6477,%r6478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r6431,%r3025;
}
	// end inline asm
	mov.u32 	%r6597, %r6590;
	@%p28 bra 	$L__BB0_418;

	// begin inline asm
	{mul.f16x2 %r6597,%r6432,%r3025;
}
	// end inline asm

$L__BB0_418:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3037,%r6597,%r3007,%r1800,%r3009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3042,%r3028,%r3037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3045,%r6475,%r6473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3048,%r3042,%r3045;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3051,%r1721,%r3048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3054,%r6590,%r3051;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3058,%r6471,%r433,%r1800,%r3009;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3058;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6471;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3065, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3066,%r6472,%r3065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3069,%r6427,%r3066;
}
	// end inline asm
	@%p28 bra 	$L__BB0_420;
	bra.uni 	$L__BB0_419;

$L__BB0_420:
	// begin inline asm
	{neg.f16x2 %r6598,%r6589;
}
	// end inline asm
	bra.uni 	$L__BB0_421;

$L__BB0_419:
	// begin inline asm
	{mul.f16x2 %r6598,%r6428,%r3066;
}
	// end inline asm

$L__BB0_421:
	mov.u32 	%r3084, 31;
	mov.u32 	%r3086, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3082,%r6598,%r3084,%r1800,%r3086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3087,%r3069,%r3082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3090,%r6470,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3093,%r3090,%r3087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3096,%r1721,%r3093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3099,%r6589,%r3096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3102,%r6471,%r6472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3105,%r6431,%r3102;
}
	// end inline asm
	@%p28 bra 	$L__BB0_423;
	bra.uni 	$L__BB0_422;

$L__BB0_423:
	// begin inline asm
	{neg.f16x2 %r6599,%r6588;
}
	// end inline asm
	bra.uni 	$L__BB0_424;

$L__BB0_422:
	// begin inline asm
	{mul.f16x2 %r6599,%r6432,%r3102;
}
	// end inline asm

$L__BB0_424:
	mov.u32 	%r3118, 31;
	mov.u32 	%r3141, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3116,%r6599,%r3118,%r1800,%r3141;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3121,%r3105,%r3116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3124,%r6469,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3127,%r3124,%r3121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3130,%r1721,%r3127;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3133,%r6588,%r3130;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3137,%r6467,%r433,%r1800,%r3141;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3137;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6467;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3144, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3145,%r6468,%r3144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3148,%r6427,%r3145;
}
	// end inline asm
	@%p28 bra 	$L__BB0_426;
	bra.uni 	$L__BB0_425;

$L__BB0_426:
	// begin inline asm
	{neg.f16x2 %r6600,%r6587;
}
	// end inline asm
	bra.uni 	$L__BB0_427;

$L__BB0_425:
	// begin inline asm
	{mul.f16x2 %r6600,%r6428,%r3145;
}
	// end inline asm

$L__BB0_427:
	mov.u32 	%r3163, 31;
	mov.u32 	%r3186, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3161,%r6600,%r3163,%r1800,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3166,%r3148,%r3161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3169,%r6466,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3172,%r3169,%r3166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3175,%r1721,%r3172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3178,%r6587,%r3175;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3182,%r6464,%r433,%r1800,%r3186;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3182;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6464;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3189, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3190,%r6465,%r3189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3193,%r6427,%r3190;
}
	// end inline asm
	mov.u32 	%r6601, %r6586;
	@%p28 bra 	$L__BB0_429;

	// begin inline asm
	{mul.f16x2 %r6601,%r6428,%r3190;
}
	// end inline asm

$L__BB0_429:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3204,%r6601,%r3163,%r1800,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3209,%r3193,%r3204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3212,%r6466,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3215,%r3209,%r3212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3218,%r1721,%r3215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3221,%r6586,%r3218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3224,%r6467,%r6468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3227,%r6431,%r3224;
}
	// end inline asm
	@%p28 bra 	$L__BB0_431;
	bra.uni 	$L__BB0_430;

$L__BB0_431:
	// begin inline asm
	{neg.f16x2 %r6602,%r6585;
}
	// end inline asm
	bra.uni 	$L__BB0_432;

$L__BB0_430:
	// begin inline asm
	{mul.f16x2 %r6602,%r6432,%r3224;
}
	// end inline asm

$L__BB0_432:
	mov.u32 	%r3240, 31;
	mov.u32 	%r3242, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3238,%r6602,%r3240,%r1800,%r3242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3243,%r3227,%r3238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3246,%r6463,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3249,%r3246,%r3243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3252,%r1721,%r3249;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3255,%r6585,%r3252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3258,%r6464,%r6465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3261,%r6431,%r3258;
}
	// end inline asm
	mov.u32 	%r6603, %r6584;
	@%p28 bra 	$L__BB0_434;

	// begin inline asm
	{mul.f16x2 %r6603,%r6432,%r3258;
}
	// end inline asm

$L__BB0_434:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3270,%r6603,%r3240,%r1800,%r3242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3275,%r3261,%r3270;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3278,%r6463,%r6474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3281,%r3275,%r3278;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3284,%r1721,%r3281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3287,%r6584,%r3284;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3291,%r6461,%r433,%r1800,%r3242;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3291;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6461;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3298, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3299,%r6462,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3302,%r6427,%r3299;
}
	// end inline asm
	@%p28 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r6604,%r6583;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r6604,%r6428,%r3299;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3317, 31;
	mov.u32 	%r3340, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3315,%r6604,%r3317,%r1800,%r3340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3320,%r3302,%r3315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3323,%r6460,%r6466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3326,%r3323,%r3320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3329,%r1721,%r3326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6508,%r6583,%r3329;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3336,%r6458,%r433,%r1800,%r3340;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3336;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6458;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3343, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3344,%r6459,%r3343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3347,%r6427,%r3344;
}
	// end inline asm
	mov.u32 	%r6605, %r6582;
	@%p28 bra 	$L__BB0_439;

	// begin inline asm
	{mul.f16x2 %r6605,%r6428,%r3344;
}
	// end inline asm

$L__BB0_439:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3358,%r6605,%r3317,%r1800,%r3340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3363,%r3347,%r3358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3366,%r6460,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3369,%r3363,%r3366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3372,%r1721,%r3369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6506,%r6582,%r3372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3378,%r6462,%r6482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3381,%r6459,%r6465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3384,%r3378,%r3381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3387,%r1721,%r3384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3390,%r6581,%r3387;
}
	// end inline asm
	selp.b32 	%r833, %r6581, %r3390, %p28;
	// begin inline asm
	{sub.f16x2 %r3393,%r6461,%r6462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3396,%r6431,%r3393;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r6606,%r6580;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r6606,%r6432,%r3393;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3409, 31;
	mov.u32 	%r3411, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3407,%r6606,%r3409,%r1800,%r3411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3412,%r3396,%r3407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3415,%r6457,%r6463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3418,%r3415,%r3412;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3421,%r1721,%r3418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6507,%r6580,%r3421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3427,%r6458,%r6459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3430,%r6431,%r3427;
}
	// end inline asm
	mov.u32 	%r6607, %r6579;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r6607,%r6432,%r3427;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3439,%r6607,%r3409,%r1800,%r3411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3444,%r3430,%r3439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3447,%r6457,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3450,%r3444,%r3447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3453,%r1721,%r3450;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6505,%r6579,%r3453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3459,%r6461,%r6481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3462,%r6458,%r6464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3465,%r3459,%r3462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3468,%r1721,%r3465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3471,%r6578,%r3468;
}
	// end inline asm
	selp.b32 	%r845, %r6578, %r3471, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3475,%r6455,%r433,%r1800,%r3411;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3475;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6455;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3482, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3483,%r6456,%r3482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3486,%r6427,%r3483;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r6608,%r6577;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r6608,%r6428,%r3483;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3501, 31;
	mov.u32 	%r3524, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3499,%r6608,%r3501,%r1800,%r3524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3504,%r3486,%r3499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3507,%r6454,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3510,%r3507,%r3504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3513,%r1721,%r3510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6504,%r6577,%r3513;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3520,%r6452,%r433,%r1800,%r3524;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3520;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6452;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3527, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3528,%r6453,%r3527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3531,%r6427,%r3528;
}
	// end inline asm
	mov.u32 	%r6609, %r6576;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r6609,%r6428,%r3528;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3542,%r6609,%r3501,%r1800,%r3524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3547,%r3531,%r3542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3550,%r6454,%r6470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r3547,%r3550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3556,%r1721,%r3553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3559,%r6576,%r3556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3562,%r6456,%r6472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3565,%r6453,%r6459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3568,%r3562,%r3565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3571,%r1721,%r3568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3574,%r6575,%r3571;
}
	// end inline asm
	selp.b32 	%r857, %r6575, %r3574, %p28;
	// begin inline asm
	{sub.f16x2 %r3577,%r6455,%r6456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3580,%r6431,%r3577;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r6610,%r6574;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r6610,%r6432,%r3577;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3593, 31;
	mov.u32 	%r3595, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3591,%r6610,%r3593,%r1800,%r3595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3596,%r3580,%r3591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3599,%r6451,%r6457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3602,%r3599,%r3596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3605,%r1721,%r3602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6574,%r3605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3611,%r6452,%r6453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3614,%r6431,%r3611;
}
	// end inline asm
	mov.u32 	%r6611, %r6573;
	@%p28 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r6611,%r6432,%r3611;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3623,%r6611,%r3593,%r1800,%r3595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3628,%r3614,%r3623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3631,%r6451,%r6469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3634,%r3628,%r3631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3637,%r1721,%r3634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3640,%r6573,%r3637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3643,%r6455,%r6471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3646,%r6452,%r6458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3649,%r3643,%r3646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3652,%r1721,%r3649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3655,%r6572,%r3652;
}
	// end inline asm
	selp.b32 	%r869, %r6572, %r3655, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3659,%r6449,%r433,%r1800,%r3595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3659;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6449;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3666, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3667,%r6450,%r3666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3670,%r6427,%r3667;
}
	// end inline asm
	@%p28 bra 	$L__BB0_456;
	bra.uni 	$L__BB0_455;

$L__BB0_456:
	// begin inline asm
	{neg.f16x2 %r6612,%r6571;
}
	// end inline asm
	bra.uni 	$L__BB0_457;

$L__BB0_455:
	// begin inline asm
	{mul.f16x2 %r6612,%r6428,%r3667;
}
	// end inline asm

$L__BB0_457:
	mov.u32 	%r3685, 31;
	mov.u32 	%r3687, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3683,%r6612,%r3685,%r1800,%r3687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3688,%r3670,%r3683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3691,%r1721,%r6454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3694,%r3691,%r3688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3697,%r1721,%r3694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3700,%r6571,%r3697;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r6449,%r6450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3706,%r6431,%r3703;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r6613,%r6570;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r6613,%r6432,%r3703;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3719, 31;
	mov.u32 	%r3742, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3717,%r6613,%r3719,%r1800,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3722,%r3706,%r3717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3725,%r1721,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3728,%r3725,%r3722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3731,%r1721,%r3728;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3734,%r6570,%r3731;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3738,%r6447,%r433,%r1800,%r3742;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3738;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6447;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3745, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3746,%r6448,%r3745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3749,%r6427,%r3746;
}
	// end inline asm
	mov.u32 	%r6614, %r6569;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r6614,%r6428,%r3746;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3760,%r6614,%r3719,%r1800,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3765,%r3749,%r3760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3768,%r1721,%r6466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3771,%r3765,%r3768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3774,%r1721,%r3771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6569,%r3774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r1721,%r6468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r6448,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3786,%r3780,%r3783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3789,%r1721,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r6568,%r3789;
}
	// end inline asm
	selp.b32 	%r887, %r6568, %r3792, %p28;
	// begin inline asm
	{sub.f16x2 %r3795,%r6447,%r6448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3798,%r6431,%r3795;
}
	// end inline asm
	mov.u32 	%r6615, %r6567;
	@%p28 bra 	$L__BB0_464;

	// begin inline asm
	{mul.f16x2 %r6615,%r6432,%r3795;
}
	// end inline asm

$L__BB0_464:
	mov.u32 	%r3809, 31;
	mov.u32 	%r3847, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3807,%r6615,%r3809,%r1800,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3812,%r3798,%r3807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3815,%r1721,%r6463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3818,%r3812,%r3815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3821,%r1721,%r3818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6501,%r6567,%r3821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3827,%r1721,%r6467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3830,%r6447,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r3827,%r3830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3836,%r1721,%r3833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3839,%r6566,%r3836;
}
	// end inline asm
	selp.b32 	%r893, %r6566, %r3839, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3843,%r6445,%r433,%r1800,%r3847;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3843;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6445;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3850, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3851,%r6446,%r3850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3854,%r6427,%r3851;
}
	// end inline asm
	@%p28 bra 	$L__BB0_466;
	bra.uni 	$L__BB0_465;

$L__BB0_466:
	// begin inline asm
	{neg.f16x2 %r6616,%r6565;
}
	// end inline asm
	bra.uni 	$L__BB0_467;

$L__BB0_465:
	// begin inline asm
	{mul.f16x2 %r6616,%r6428,%r3851;
}
	// end inline asm

$L__BB0_467:
	mov.u32 	%r3869, 31;
	mov.u32 	%r3892, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3867,%r6616,%r3869,%r1800,%r3892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r3854,%r3867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r6444,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3878,%r3875,%r3872;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3881,%r1721,%r3878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6500,%r6565,%r3881;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3888,%r6442,%r433,%r1800,%r3892;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3888;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6442;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3895, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3896,%r6443,%r3895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3899,%r6427,%r3896;
}
	// end inline asm
	mov.u32 	%r6617, %r6564;
	@%p28 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r6617,%r6428,%r3896;
}
	// end inline asm

$L__BB0_469:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3910,%r6617,%r3869,%r1800,%r3892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3915,%r3899,%r3910;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3918,%r6444,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r3915,%r3918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r1721,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6564,%r3924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3930,%r6446,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3933,%r6443,%r6448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r3930,%r3933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3939,%r1721,%r3936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3942,%r6563,%r3939;
}
	// end inline asm
	selp.b32 	%r6496, %r6563, %r3942, %p28;
	// begin inline asm
	{sub.f16x2 %r3945,%r6445,%r6446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3948,%r6431,%r3945;
}
	// end inline asm
	@%p28 bra 	$L__BB0_471;
	bra.uni 	$L__BB0_470;

$L__BB0_471:
	// begin inline asm
	{neg.f16x2 %r6618,%r6562;
}
	// end inline asm
	bra.uni 	$L__BB0_472;

$L__BB0_470:
	// begin inline asm
	{mul.f16x2 %r6618,%r6432,%r3945;
}
	// end inline asm

$L__BB0_472:
	mov.u32 	%r3961, 31;
	mov.u32 	%r3963, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3959,%r6618,%r3961,%r1800,%r3963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3964,%r3948,%r3959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3967,%r6441,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3970,%r3967,%r3964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3973,%r1721,%r3970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6499,%r6562,%r3973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3979,%r6442,%r6443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3982,%r6431,%r3979;
}
	// end inline asm
	mov.u32 	%r6619, %r6561;
	@%p28 bra 	$L__BB0_474;

	// begin inline asm
	{mul.f16x2 %r6619,%r6432,%r3979;
}
	// end inline asm

$L__BB0_474:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3991,%r6619,%r3961,%r1800,%r3963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3996,%r3982,%r3991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3999,%r6441,%r6457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4002,%r3996,%r3999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4005,%r1721,%r4002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6497,%r6561,%r4005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4011,%r6445,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4014,%r6442,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4017,%r4011,%r4014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4020,%r1721,%r4017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4023,%r6560,%r4020;
}
	// end inline asm
	selp.b32 	%r6495, %r6560, %r4023, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4027,%r6439,%r433,%r1800,%r3963;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4027;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6439;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4034, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4035,%r6440,%r4034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4038,%r6427,%r4035;
}
	// end inline asm
	@%p28 bra 	$L__BB0_476;
	bra.uni 	$L__BB0_475;

$L__BB0_476:
	// begin inline asm
	{neg.f16x2 %r6620,%r6559;
}
	// end inline asm
	bra.uni 	$L__BB0_477;

$L__BB0_475:
	// begin inline asm
	{mul.f16x2 %r6620,%r6428,%r4035;
}
	// end inline asm

$L__BB0_477:
	mov.u32 	%r4053, 31;
	mov.u32 	%r4076, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4051,%r6620,%r4053,%r1800,%r4076;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4056,%r4038,%r4051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r1721,%r6444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4062,%r4059,%r4056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4065,%r1721,%r4062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6494,%r6559,%r4065;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4072,%r6437,%r433,%r1800,%r4076;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4072;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6437;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4079, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4080,%r6438,%r4079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4083,%r6427,%r4080;
}
	// end inline asm
	mov.u32 	%r6621, %r6558;
	@%p28 bra 	$L__BB0_479;

	// begin inline asm
	{mul.f16x2 %r6621,%r6428,%r4080;
}
	// end inline asm

$L__BB0_479:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4094,%r6621,%r4053,%r1800,%r4076;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4099,%r4083,%r4094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4102,%r1721,%r6454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4105,%r4099,%r4102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4108,%r1721,%r4105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6492,%r6558,%r4108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4114,%r6440,%r6456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r6438,%r6443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r4114,%r4117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4123,%r1721,%r4120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4126,%r6557,%r4123;
}
	// end inline asm
	selp.b32 	%r6490, %r6557, %r4126, %p28;
	// begin inline asm
	{sub.f16x2 %r4129,%r6439,%r6440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4132,%r6431,%r4129;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r6622,%r6556;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r6622,%r6432,%r4129;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4145, 31;
	mov.u32 	%r4147, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4143,%r6622,%r4145,%r1800,%r4147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4148,%r4132,%r4143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4151,%r1721,%r6441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4154,%r4151,%r4148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4157,%r1721,%r4154;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6556,%r4157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4163,%r6437,%r6438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4166,%r6431,%r4163;
}
	// end inline asm
	mov.u32 	%r6623, %r6555;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r6623,%r6432,%r4163;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4175,%r6623,%r4145,%r1800,%r4147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4180,%r4166,%r4175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4183,%r1721,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4186,%r4180,%r4183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4189,%r1721,%r4186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6491,%r6555,%r4189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4195,%r6439,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4198,%r6437,%r6442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4201,%r4195,%r4198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4204,%r1721,%r4201;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4207,%r6554,%r4204;
}
	// end inline asm
	selp.b32 	%r6489, %r6554, %r4207, %p28;
	// begin inline asm
	{sub.f16x2 %r4210,%r1721,%r6450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4213,%r1721,%r6438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r4210,%r4213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4219,%r1721,%r4216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4222,%r6553,%r4219;
}
	// end inline asm
	selp.b32 	%r942, %r6553, %r4222, %p28;
	// begin inline asm
	{sub.f16x2 %r4225,%r1721,%r6449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r1721,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r4225,%r4228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4234,%r1721,%r4231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r6552,%r4234;
}
	// end inline asm
	selp.b32 	%r943, %r6552, %r4237, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4241,%r6435,%r433,%r1800,%r4147;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4241;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6435;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4248, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4249,%r6436,%r4248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4252,%r6427,%r4249;
}
	// end inline asm
	mov.u32 	%r6624, %r6551;
	@%p28 bra 	$L__BB0_486;

	// begin inline asm
	{mul.f16x2 %r6624,%r6428,%r4249;
}
	// end inline asm

$L__BB0_486:
	mov.u32 	%r4265, 31;
	mov.u32 	%r4267, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4263,%r6624,%r4265,%r1800,%r4267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4268,%r4252,%r4263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4271,%r1721,%r6444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4274,%r4268,%r4271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4277,%r1721,%r4274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6488,%r6551,%r4277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4283,%r1721,%r6446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4286,%r6436,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4289,%r4283,%r4286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4292,%r1721,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4295,%r6550,%r4292;
}
	// end inline asm
	selp.b32 	%r6486, %r6550, %r4295, %p28;
	// begin inline asm
	{sub.f16x2 %r4298,%r6435,%r6436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4301,%r6431,%r4298;
}
	// end inline asm
	mov.u32 	%r6625, %r6549;
	@%p28 bra 	$L__BB0_488;

	// begin inline asm
	{mul.f16x2 %r6625,%r6432,%r4298;
}
	// end inline asm

$L__BB0_488:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4310,%r6625,%r4265,%r1800,%r4267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4315,%r4301,%r4310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4318,%r1721,%r6441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4321,%r4315,%r4318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4324,%r1721,%r4321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6487,%r6549,%r4324;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r1721,%r6445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4333,%r6435,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4336,%r4330,%r4333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4339,%r1721,%r4336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4342,%r6548,%r4339;
}
	// end inline asm
	selp.b32 	%r6485, %r6548, %r4342, %p28;
	// begin inline asm
	{sub.f16x2 %r4345,%r1721,%r6440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4348,%r1721,%r6436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4351,%r4345,%r4348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4354,%r1721,%r4351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4357,%r6547,%r4354;
}
	// end inline asm
	selp.b32 	%r6484, %r6547, %r4357, %p28;
	// begin inline asm
	{sub.f16x2 %r4360,%r1721,%r6439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4363,%r1721,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4366,%r4360,%r4363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4369,%r1721,%r4366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4372,%r6546,%r4369;
}
	// end inline asm
	selp.b32 	%r6483, %r6546, %r4372, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd288, [%rd1+184];
	cvta.to.global.u64 	%rd30, %rd288;
	add.s32 	%r4377, %r1254, -2;
	setp.lt.s32 	%p309, %r559, %r4377;
	add.s32 	%r4378, %r1255, 3;
	setp.ge.s32 	%p310, %r559, %r4378;
	or.pred  	%p311, %p309, %p310;
	add.s32 	%r4379, %r1256, -2;
	setp.lt.s32 	%p312, %r560, %r4379;
	or.pred  	%p313, %p311, %p312;
	add.s32 	%r4380, %r1257, 2;
	setp.ge.s32 	%p314, %r560, %r4380;
	or.pred  	%p315, %p314, %p313;
	setp.lt.s32 	%p316, %r561, %r1251;
	or.pred  	%p317, %p316, %p315;
	mad.lo.s32 	%r4381, %r1253, %r1252, %r1251;
	setp.ge.s32 	%p318, %r561, %r4381;
	or.pred  	%p319, %p317, %p318;
	@%p319 bra 	$L__BB0_730;

	sub.s32 	%r958, %r561, %r1251;
	rem.s32 	%r4382, %r958, %r1252;
	setp.ne.s32 	%p320, %r4382, 0;
	@%p320 bra 	$L__BB0_730;

	div.s32 	%r4383, %r958, %r1252;
	mov.u32 	%r4384, 8;
	sub.s32 	%r4385, %r4384, %r1254;
	add.s32 	%r4386, %r4385, %r1255;
	mul.lo.s32 	%r4387, %r4383, %r4386;
	mov.u32 	%r4388, 4;
	sub.s32 	%r4389, %r4388, %r1254;
	add.s32 	%r959, %r4389, %r559;
	sub.s32 	%r4390, %r4388, %r1256;
	add.s32 	%r960, %r4390, %r560;
	mul.lo.s32 	%r961, %r4387, 3;
	add.s32 	%r4391, %r959, %r961;
	add.s32 	%r4392, %r4391, -2;
	sub.s32 	%r4393, %r4384, %r1256;
	add.s32 	%r4394, %r4393, %r1257;
	mul.lo.s32 	%r962, %r4392, %r4394;
	add.s32 	%r4395, %r960, %r962;
	mul.lo.s32 	%r4396, %r4395, %r58;
	sub.s32 	%r963, %r4396, %r1258;
	@%p28 bra 	$L__BB0_495;

	not.pred 	%p322, %p24;
	@%p322 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2945;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r4398, %r963, %r400;
	mul.wide.s32 	%rd289, %r4398, 4;
	add.s64 	%rd290, %rd30, %rd289;
	st.global.f32 	[%rd290], %f496;

$L__BB0_493:
	not.pred 	%p323, %p26;
	@%p323 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2945;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r4400, %r963, %r401;
	mul.wide.s32 	%rd291, %r4400, 4;
	add.s64 	%rd292, %rd30, %rd291;
	st.global.f32 	[%rd292], %f497;

$L__BB0_495:
	@%p28 bra 	$L__BB0_500;

	not.pred 	%p325, %p25;
	@%p325 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3022;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r4402, %r963, %r414;
	mul.wide.s32 	%rd293, %r4402, 4;
	add.s64 	%rd294, %rd30, %rd293;
	st.global.f32 	[%rd294], %f498;

$L__BB0_498:
	not.pred 	%p326, %p27;
	@%p326 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3022;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r4404, %r963, %r415;
	mul.wide.s32 	%rd295, %r4404, 4;
	add.s64 	%rd296, %rd30, %rd295;
	st.global.f32 	[%rd296], %f499;

$L__BB0_500:
	mov.u32 	%r4405, 8;
	sub.s32 	%r4406, %r4405, %r1254;
	add.s32 	%r4407, %r4406, %r1255;
	add.s32 	%r964, %r961, %r4407;
	add.s32 	%r4408, %r959, %r964;
	add.s32 	%r4409, %r4408, -2;
	sub.s32 	%r4410, %r4405, %r1256;
	add.s32 	%r4411, %r4410, %r1257;
	mad.lo.s32 	%r4412, %r4409, %r4411, %r960;
	mul.lo.s32 	%r4413, %r4412, %r58;
	sub.s32 	%r965, %r4413, %r1258;
	@%p28 bra 	$L__BB0_505;

	not.pred 	%p328, %p24;
	@%p328 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2988;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r4415, %r965, %r400;
	mul.wide.s32 	%rd297, %r4415, 4;
	add.s64 	%rd298, %rd30, %rd297;
	st.global.f32 	[%rd298], %f500;

$L__BB0_503:
	not.pred 	%p329, %p26;
	@%p329 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2988;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r4417, %r965, %r401;
	mul.wide.s32 	%rd299, %r4417, 4;
	add.s64 	%rd300, %rd30, %rd299;
	st.global.f32 	[%rd300], %f501;

$L__BB0_505:
	@%p28 bra 	$L__BB0_510;

	not.pred 	%p331, %p25;
	@%p331 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3054;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r4419, %r965, %r414;
	mul.wide.s32 	%rd301, %r4419, 4;
	add.s64 	%rd302, %rd30, %rd301;
	st.global.f32 	[%rd302], %f502;

$L__BB0_508:
	not.pred 	%p332, %p27;
	@%p332 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3054;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r4421, %r965, %r415;
	mul.wide.s32 	%rd303, %r4421, 4;
	add.s64 	%rd304, %rd30, %rd303;
	st.global.f32 	[%rd304], %f503;

$L__BB0_510:
	add.s32 	%r966, %r960, 1;
	add.s32 	%r4422, %r966, %r962;
	mul.lo.s32 	%r4423, %r4422, %r58;
	sub.s32 	%r967, %r4423, %r1258;
	@%p28 bra 	$L__BB0_515;

	not.pred 	%p334, %p24;
	@%p334 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3099;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r4425, %r967, %r400;
	mul.wide.s32 	%rd305, %r4425, 4;
	add.s64 	%rd306, %rd30, %rd305;
	st.global.f32 	[%rd306], %f504;

$L__BB0_513:
	not.pred 	%p335, %p26;
	@%p335 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3099;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r4427, %r967, %r401;
	mul.wide.s32 	%rd307, %r4427, 4;
	add.s64 	%rd308, %rd30, %rd307;
	st.global.f32 	[%rd308], %f505;

$L__BB0_515:
	@%p28 bra 	$L__BB0_520;

	not.pred 	%p337, %p25;
	@%p337 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3133;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r4429, %r967, %r414;
	mul.wide.s32 	%rd309, %r4429, 4;
	add.s64 	%rd310, %rd30, %rd309;
	st.global.f32 	[%rd310], %f506;

$L__BB0_518:
	not.pred 	%p338, %p27;
	@%p338 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3133;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r4431, %r967, %r415;
	mul.wide.s32 	%rd311, %r4431, 4;
	add.s64 	%rd312, %rd30, %rd311;
	st.global.f32 	[%rd312], %f507;

$L__BB0_520:
	add.s32 	%r968, %r959, -1;
	add.s32 	%r4432, %r968, %r961;
	mov.u32 	%r4433, 8;
	sub.s32 	%r4434, %r4433, %r1256;
	add.s32 	%r4435, %r4434, %r1257;
	mul.lo.s32 	%r969, %r4432, %r4435;
	add.s32 	%r970, %r960, -1;
	add.s32 	%r4436, %r970, %r969;
	mul.lo.s32 	%r4437, %r4436, %r58;
	sub.s32 	%r971, %r4437, %r1258;
	@%p28 bra 	$L__BB0_525;

	not.pred 	%p340, %p24;
	@%p340 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3178;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r4439, %r971, %r400;
	mul.wide.s32 	%rd313, %r4439, 4;
	add.s64 	%rd314, %rd30, %rd313;
	st.global.f32 	[%rd314], %f508;

$L__BB0_523:
	not.pred 	%p341, %p26;
	@%p341 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3178;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r4441, %r971, %r401;
	mul.wide.s32 	%rd315, %r4441, 4;
	add.s64 	%rd316, %rd30, %rd315;
	st.global.f32 	[%rd316], %f509;

$L__BB0_525:
	@%p28 bra 	$L__BB0_530;

	not.pred 	%p343, %p25;
	@%p343 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3255;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r4443, %r971, %r414;
	mul.wide.s32 	%rd317, %r4443, 4;
	add.s64 	%rd318, %rd30, %rd317;
	st.global.f32 	[%rd318], %f510;

$L__BB0_528:
	not.pred 	%p344, %p27;
	@%p344 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3255;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r4445, %r971, %r415;
	mul.wide.s32 	%rd319, %r4445, 4;
	add.s64 	%rd320, %rd30, %rd319;
	st.global.f32 	[%rd320], %f511;

$L__BB0_530:
	mov.u32 	%r4446, 8;
	sub.s32 	%r4447, %r4446, %r1256;
	add.s32 	%r4448, %r4447, %r1257;
	add.s32 	%r4449, %r968, %r964;
	mul.lo.s32 	%r972, %r4449, %r4448;
	add.s32 	%r4450, %r970, %r972;
	mul.lo.s32 	%r4451, %r4450, %r58;
	sub.s32 	%r973, %r4451, %r1258;
	@%p28 bra 	$L__BB0_535;

	not.pred 	%p346, %p24;
	@%p346 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3221;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r4453, %r973, %r400;
	mul.wide.s32 	%rd321, %r4453, 4;
	add.s64 	%rd322, %rd30, %rd321;
	st.global.f32 	[%rd322], %f512;

$L__BB0_533:
	not.pred 	%p347, %p26;
	@%p347 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3221;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r4455, %r973, %r401;
	mul.wide.s32 	%rd323, %r4455, 4;
	add.s64 	%rd324, %rd30, %rd323;
	st.global.f32 	[%rd324], %f513;

$L__BB0_535:
	@%p28 bra 	$L__BB0_540;

	not.pred 	%p349, %p25;
	@%p349 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3287;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r4457, %r973, %r414;
	mul.wide.s32 	%rd325, %r4457, 4;
	add.s64 	%rd326, %rd30, %rd325;
	st.global.f32 	[%rd326], %f514;

$L__BB0_538:
	not.pred 	%p350, %p27;
	@%p350 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3287;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r4459, %r973, %r415;
	mul.wide.s32 	%rd327, %r4459, 4;
	add.s64 	%rd328, %rd30, %rd327;
	st.global.f32 	[%rd328], %f515;

$L__BB0_540:
	add.s32 	%r4460, %r960, %r969;
	mul.lo.s32 	%r4461, %r4460, %r58;
	sub.s32 	%r974, %r4461, %r1258;
	@%p28 bra 	$L__BB0_545;

	not.pred 	%p352, %p24;
	@%p352 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6508;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r4463, %r974, %r400;
	mul.wide.s32 	%rd329, %r4463, 4;
	add.s64 	%rd330, %rd30, %rd329;
	st.global.f32 	[%rd330], %f516;

$L__BB0_543:
	not.pred 	%p353, %p26;
	@%p353 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6508;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r4465, %r974, %r401;
	mul.wide.s32 	%rd331, %r4465, 4;
	add.s64 	%rd332, %rd30, %rd331;
	st.global.f32 	[%rd332], %f517;

$L__BB0_545:
	@%p28 bra 	$L__BB0_550;

	not.pred 	%p355, %p25;
	@%p355 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6507;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r4467, %r974, %r414;
	mul.wide.s32 	%rd333, %r4467, 4;
	add.s64 	%rd334, %rd30, %rd333;
	st.global.f32 	[%rd334], %f518;

$L__BB0_548:
	not.pred 	%p356, %p27;
	@%p356 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6507;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r4469, %r974, %r415;
	mul.wide.s32 	%rd335, %r4469, 4;
	add.s64 	%rd336, %rd30, %rd335;
	st.global.f32 	[%rd336], %f519;

$L__BB0_550:
	add.s32 	%r4470, %r960, %r972;
	mul.lo.s32 	%r4471, %r4470, %r58;
	sub.s32 	%r975, %r4471, %r1258;
	@%p28 bra 	$L__BB0_555;

	not.pred 	%p358, %p24;
	@%p358 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6506;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r4473, %r975, %r400;
	mul.wide.s32 	%rd337, %r4473, 4;
	add.s64 	%rd338, %rd30, %rd337;
	st.global.f32 	[%rd338], %f520;

$L__BB0_553:
	not.pred 	%p359, %p26;
	@%p359 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6506;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r4475, %r975, %r401;
	mul.wide.s32 	%rd339, %r4475, 4;
	add.s64 	%rd340, %rd30, %rd339;
	st.global.f32 	[%rd340], %f521;

$L__BB0_555:
	@%p28 bra 	$L__BB0_560;

	not.pred 	%p361, %p25;
	@%p361 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6505;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r4477, %r975, %r414;
	mul.wide.s32 	%rd341, %r4477, 4;
	add.s64 	%rd342, %rd30, %rd341;
	st.global.f32 	[%rd342], %f522;

$L__BB0_558:
	not.pred 	%p362, %p27;
	@%p362 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6505;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r4479, %r975, %r415;
	mul.wide.s32 	%rd343, %r4479, 4;
	add.s64 	%rd344, %rd30, %rd343;
	st.global.f32 	[%rd344], %f523;

$L__BB0_560:
	mov.u32 	%r4480, 8;
	sub.s32 	%r4481, %r4480, %r1254;
	add.s32 	%r4482, %r4481, %r1255;
	add.s32 	%r976, %r964, %r4482;
	add.s32 	%r4483, %r968, %r976;
	sub.s32 	%r4484, %r4480, %r1256;
	add.s32 	%r4485, %r4484, %r1257;
	mul.lo.s32 	%r977, %r4483, %r4485;
	add.s32 	%r4486, %r960, %r977;
	mul.lo.s32 	%r4487, %r4486, %r58;
	sub.s32 	%r978, %r4487, %r1258;
	@%p28 bra 	$L__BB0_565;

	not.pred 	%p364, %p24;
	@%p364 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r833;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r4489, %r978, %r400;
	mul.wide.s32 	%rd345, %r4489, 4;
	add.s64 	%rd346, %rd30, %rd345;
	st.global.f32 	[%rd346], %f524;

$L__BB0_563:
	not.pred 	%p365, %p26;
	@%p365 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r833;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r4491, %r978, %r401;
	mul.wide.s32 	%rd347, %r4491, 4;
	add.s64 	%rd348, %rd30, %rd347;
	st.global.f32 	[%rd348], %f525;

$L__BB0_565:
	@%p28 bra 	$L__BB0_570;

	not.pred 	%p367, %p25;
	@%p367 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r845;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r4493, %r978, %r414;
	mul.wide.s32 	%rd349, %r4493, 4;
	add.s64 	%rd350, %rd30, %rd349;
	st.global.f32 	[%rd350], %f526;

$L__BB0_568:
	not.pred 	%p368, %p27;
	@%p368 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r845;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r4495, %r978, %r415;
	mul.wide.s32 	%rd351, %r4495, 4;
	add.s64 	%rd352, %rd30, %rd351;
	st.global.f32 	[%rd352], %f527;

$L__BB0_570:
	add.s32 	%r4496, %r966, %r969;
	mul.lo.s32 	%r4497, %r4496, %r58;
	sub.s32 	%r979, %r4497, %r1258;
	@%p28 bra 	$L__BB0_575;

	not.pred 	%p370, %p24;
	@%p370 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r4499, %r979, %r400;
	mul.wide.s32 	%rd353, %r4499, 4;
	add.s64 	%rd354, %rd30, %rd353;
	st.global.f32 	[%rd354], %f528;

$L__BB0_573:
	not.pred 	%p371, %p26;
	@%p371 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r4501, %r979, %r401;
	mul.wide.s32 	%rd355, %r4501, 4;
	add.s64 	%rd356, %rd30, %rd355;
	st.global.f32 	[%rd356], %f529;

$L__BB0_575:
	@%p28 bra 	$L__BB0_580;

	not.pred 	%p373, %p25;
	@%p373 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r4503, %r979, %r414;
	mul.wide.s32 	%rd357, %r4503, 4;
	add.s64 	%rd358, %rd30, %rd357;
	st.global.f32 	[%rd358], %f530;

$L__BB0_578:
	not.pred 	%p374, %p27;
	@%p374 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r4505, %r979, %r415;
	mul.wide.s32 	%rd359, %r4505, 4;
	add.s64 	%rd360, %rd30, %rd359;
	st.global.f32 	[%rd360], %f531;

$L__BB0_580:
	add.s32 	%r4506, %r966, %r972;
	mul.lo.s32 	%r4507, %r4506, %r58;
	sub.s32 	%r980, %r4507, %r1258;
	@%p28 bra 	$L__BB0_585;

	not.pred 	%p376, %p24;
	@%p376 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r4509, %r980, %r400;
	mul.wide.s32 	%rd361, %r4509, 4;
	add.s64 	%rd362, %rd30, %rd361;
	st.global.f32 	[%rd362], %f532;

$L__BB0_583:
	not.pred 	%p377, %p26;
	@%p377 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r4511, %r980, %r401;
	mul.wide.s32 	%rd363, %r4511, 4;
	add.s64 	%rd364, %rd30, %rd363;
	st.global.f32 	[%rd364], %f533;

$L__BB0_585:
	@%p28 bra 	$L__BB0_590;

	not.pred 	%p379, %p25;
	@%p379 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3640;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r4513, %r980, %r414;
	mul.wide.s32 	%rd365, %r4513, 4;
	add.s64 	%rd366, %rd30, %rd365;
	st.global.f32 	[%rd366], %f534;

$L__BB0_588:
	not.pred 	%p380, %p27;
	@%p380 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3640;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r4515, %r980, %r415;
	mul.wide.s32 	%rd367, %r4515, 4;
	add.s64 	%rd368, %rd30, %rd367;
	st.global.f32 	[%rd368], %f535;

$L__BB0_590:
	add.s32 	%r4516, %r966, %r977;
	mul.lo.s32 	%r4517, %r4516, %r58;
	sub.s32 	%r981, %r4517, %r1258;
	@%p28 bra 	$L__BB0_595;

	not.pred 	%p382, %p24;
	@%p382 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r857;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r4519, %r981, %r400;
	mul.wide.s32 	%rd369, %r4519, 4;
	add.s64 	%rd370, %rd30, %rd369;
	st.global.f32 	[%rd370], %f536;

$L__BB0_593:
	not.pred 	%p383, %p26;
	@%p383 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r857;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r4521, %r981, %r401;
	mul.wide.s32 	%rd371, %r4521, 4;
	add.s64 	%rd372, %rd30, %rd371;
	st.global.f32 	[%rd372], %f537;

$L__BB0_595:
	@%p28 bra 	$L__BB0_600;

	not.pred 	%p385, %p25;
	@%p385 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r869;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r4523, %r981, %r414;
	mul.wide.s32 	%rd373, %r4523, 4;
	add.s64 	%rd374, %rd30, %rd373;
	st.global.f32 	[%rd374], %f538;

$L__BB0_598:
	not.pred 	%p386, %p27;
	@%p386 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r869;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r4525, %r981, %r415;
	mul.wide.s32 	%rd375, %r4525, 4;
	add.s64 	%rd376, %rd30, %rd375;
	st.global.f32 	[%rd376], %f539;

$L__BB0_600:
	add.s32 	%r982, %r960, 2;
	add.s32 	%r4526, %r982, %r969;
	mul.lo.s32 	%r4527, %r4526, %r58;
	sub.s32 	%r983, %r4527, %r1258;
	@%p28 bra 	$L__BB0_605;

	not.pred 	%p388, %p24;
	@%p388 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3700;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r4529, %r983, %r400;
	mul.wide.s32 	%rd377, %r4529, 4;
	add.s64 	%rd378, %rd30, %rd377;
	st.global.f32 	[%rd378], %f540;

$L__BB0_603:
	not.pred 	%p389, %p26;
	@%p389 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3700;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r4531, %r983, %r401;
	mul.wide.s32 	%rd379, %r4531, 4;
	add.s64 	%rd380, %rd30, %rd379;
	st.global.f32 	[%rd380], %f541;

$L__BB0_605:
	@%p28 bra 	$L__BB0_610;

	not.pred 	%p391, %p25;
	@%p391 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3734;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r4533, %r983, %r414;
	mul.wide.s32 	%rd381, %r4533, 4;
	add.s64 	%rd382, %rd30, %rd381;
	st.global.f32 	[%rd382], %f542;

$L__BB0_608:
	not.pred 	%p392, %p27;
	@%p392 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3734;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r4535, %r983, %r415;
	mul.wide.s32 	%rd383, %r4535, 4;
	add.s64 	%rd384, %rd30, %rd383;
	st.global.f32 	[%rd384], %f543;

$L__BB0_610:
	mov.u32 	%r4536, 8;
	sub.s32 	%r4537, %r4536, %r1256;
	add.s32 	%r4538, %r4537, %r1257;
	mul.lo.s32 	%r984, %r4408, %r4538;
	add.s32 	%r4540, %r970, %r984;
	mul.lo.s32 	%r4541, %r4540, %r58;
	sub.s32 	%r985, %r4541, %r1258;
	@%p28 bra 	$L__BB0_615;

	not.pred 	%p394, %p24;
	@%p394 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r4543, %r985, %r400;
	mul.wide.s32 	%rd385, %r4543, 4;
	add.s64 	%rd386, %rd30, %rd385;
	st.global.f32 	[%rd386], %f544;

$L__BB0_613:
	not.pred 	%p395, %p26;
	@%p395 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r4545, %r985, %r401;
	mul.wide.s32 	%rd387, %r4545, 4;
	add.s64 	%rd388, %rd30, %rd387;
	st.global.f32 	[%rd388], %f545;

$L__BB0_615:
	@%p28 bra 	$L__BB0_620;

	not.pred 	%p397, %p25;
	@%p397 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r4547, %r985, %r414;
	mul.wide.s32 	%rd389, %r4547, 4;
	add.s64 	%rd390, %rd30, %rd389;
	st.global.f32 	[%rd390], %f546;

$L__BB0_618:
	not.pred 	%p398, %p27;
	@%p398 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r4549, %r985, %r415;
	mul.wide.s32 	%rd391, %r4549, 4;
	add.s64 	%rd392, %rd30, %rd391;
	st.global.f32 	[%rd392], %f547;

$L__BB0_620:
	mov.u32 	%r4550, 8;
	sub.s32 	%r4551, %r4550, %r1256;
	add.s32 	%r4552, %r4551, %r1257;
	add.s32 	%r4553, %r959, %r976;
	mul.lo.s32 	%r986, %r4553, %r4552;
	add.s32 	%r4554, %r970, %r986;
	mul.lo.s32 	%r4555, %r4554, %r58;
	sub.s32 	%r987, %r4555, %r1258;
	@%p28 bra 	$L__BB0_625;

	not.pred 	%p400, %p24;
	@%p400 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r887;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r4557, %r987, %r400;
	mul.wide.s32 	%rd393, %r4557, 4;
	add.s64 	%rd394, %rd30, %rd393;
	st.global.f32 	[%rd394], %f548;

$L__BB0_623:
	not.pred 	%p401, %p26;
	@%p401 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r887;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r4559, %r987, %r401;
	mul.wide.s32 	%rd395, %r4559, 4;
	add.s64 	%rd396, %rd30, %rd395;
	st.global.f32 	[%rd396], %f549;

$L__BB0_625:
	@%p28 bra 	$L__BB0_630;

	not.pred 	%p403, %p25;
	@%p403 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r893;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r4561, %r987, %r414;
	mul.wide.s32 	%rd397, %r4561, 4;
	add.s64 	%rd398, %rd30, %rd397;
	st.global.f32 	[%rd398], %f550;

$L__BB0_628:
	not.pred 	%p404, %p27;
	@%p404 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r893;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r4563, %r987, %r415;
	mul.wide.s32 	%rd399, %r4563, 4;
	add.s64 	%rd400, %rd30, %rd399;
	st.global.f32 	[%rd400], %f551;

$L__BB0_630:
	mov.u32 	%r4564, 8;
	sub.s32 	%r4565, %r4564, %r1256;
	add.s32 	%r4566, %r4565, %r1257;
	mul.lo.s32 	%r988, %r4391, %r4566;
	add.s32 	%r4568, %r960, %r988;
	mul.lo.s32 	%r4569, %r4568, %r58;
	sub.s32 	%r989, %r4569, %r1258;
	@%p28 bra 	$L__BB0_635;

	not.pred 	%p406, %p24;
	@%p406 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r4571, %r989, %r400;
	mul.wide.s32 	%rd401, %r4571, 4;
	add.s64 	%rd402, %rd30, %rd401;
	st.global.f32 	[%rd402], %f552;

$L__BB0_633:
	not.pred 	%p407, %p26;
	@%p407 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r4573, %r989, %r401;
	mul.wide.s32 	%rd403, %r4573, 4;
	add.s64 	%rd404, %rd30, %rd403;
	st.global.f32 	[%rd404], %f553;

$L__BB0_635:
	@%p28 bra 	$L__BB0_640;

	not.pred 	%p409, %p25;
	@%p409 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r4575, %r989, %r414;
	mul.wide.s32 	%rd405, %r4575, 4;
	add.s64 	%rd406, %rd30, %rd405;
	st.global.f32 	[%rd406], %f554;

$L__BB0_638:
	not.pred 	%p410, %p27;
	@%p410 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r4577, %r989, %r415;
	mul.wide.s32 	%rd407, %r4577, 4;
	add.s64 	%rd408, %rd30, %rd407;
	st.global.f32 	[%rd408], %f555;

$L__BB0_640:
	add.s32 	%r4578, %r960, %r984;
	mul.lo.s32 	%r4579, %r4578, %r58;
	sub.s32 	%r990, %r4579, %r1258;
	@%p28 bra 	$L__BB0_645;

	not.pred 	%p412, %p24;
	@%p412 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r4581, %r990, %r400;
	mul.wide.s32 	%rd409, %r4581, 4;
	add.s64 	%rd410, %rd30, %rd409;
	st.global.f32 	[%rd410], %f556;

$L__BB0_643:
	not.pred 	%p413, %p26;
	@%p413 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r4583, %r990, %r401;
	mul.wide.s32 	%rd411, %r4583, 4;
	add.s64 	%rd412, %rd30, %rd411;
	st.global.f32 	[%rd412], %f557;

$L__BB0_645:
	@%p28 bra 	$L__BB0_650;

	not.pred 	%p415, %p25;
	@%p415 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r4585, %r990, %r414;
	mul.wide.s32 	%rd413, %r4585, 4;
	add.s64 	%rd414, %rd30, %rd413;
	st.global.f32 	[%rd414], %f558;

$L__BB0_648:
	not.pred 	%p416, %p27;
	@%p416 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r4587, %r990, %r415;
	mul.wide.s32 	%rd415, %r4587, 4;
	add.s64 	%rd416, %rd30, %rd415;
	st.global.f32 	[%rd416], %f559;

$L__BB0_650:
	add.s32 	%r4588, %r960, %r986;
	mul.lo.s32 	%r4589, %r4588, %r58;
	sub.s32 	%r991, %r4589, %r1258;
	@%p28 bra 	$L__BB0_655;

	not.pred 	%p418, %p24;
	@%p418 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r4591, %r991, %r400;
	mul.wide.s32 	%rd417, %r4591, 4;
	add.s64 	%rd418, %rd30, %rd417;
	st.global.f32 	[%rd418], %f560;

$L__BB0_653:
	not.pred 	%p419, %p26;
	@%p419 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r4593, %r991, %r401;
	mul.wide.s32 	%rd419, %r4593, 4;
	add.s64 	%rd420, %rd30, %rd419;
	st.global.f32 	[%rd420], %f561;

$L__BB0_655:
	@%p28 bra 	$L__BB0_660;

	not.pred 	%p421, %p25;
	@%p421 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r4595, %r991, %r414;
	mul.wide.s32 	%rd421, %r4595, 4;
	add.s64 	%rd422, %rd30, %rd421;
	st.global.f32 	[%rd422], %f562;

$L__BB0_658:
	not.pred 	%p422, %p27;
	@%p422 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r4597, %r991, %r415;
	mul.wide.s32 	%rd423, %r4597, 4;
	add.s64 	%rd424, %rd30, %rd423;
	st.global.f32 	[%rd424], %f563;

$L__BB0_660:
	add.s32 	%r4598, %r966, %r988;
	mul.lo.s32 	%r4599, %r4598, %r58;
	sub.s32 	%r992, %r4599, %r1258;
	@%p28 bra 	$L__BB0_665;

	not.pred 	%p424, %p24;
	@%p424 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r4601, %r992, %r400;
	mul.wide.s32 	%rd425, %r4601, 4;
	add.s64 	%rd426, %rd30, %rd425;
	st.global.f32 	[%rd426], %f564;

$L__BB0_663:
	not.pred 	%p425, %p26;
	@%p425 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r4603, %r992, %r401;
	mul.wide.s32 	%rd427, %r4603, 4;
	add.s64 	%rd428, %rd30, %rd427;
	st.global.f32 	[%rd428], %f565;

$L__BB0_665:
	@%p28 bra 	$L__BB0_670;

	not.pred 	%p427, %p25;
	@%p427 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6493;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r4605, %r992, %r414;
	mul.wide.s32 	%rd429, %r4605, 4;
	add.s64 	%rd430, %rd30, %rd429;
	st.global.f32 	[%rd430], %f566;

$L__BB0_668:
	not.pred 	%p428, %p27;
	@%p428 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6493;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r4607, %r992, %r415;
	mul.wide.s32 	%rd431, %r4607, 4;
	add.s64 	%rd432, %rd30, %rd431;
	st.global.f32 	[%rd432], %f567;

$L__BB0_670:
	add.s32 	%r4608, %r966, %r984;
	mul.lo.s32 	%r4609, %r4608, %r58;
	sub.s32 	%r993, %r4609, %r1258;
	@%p28 bra 	$L__BB0_675;

	not.pred 	%p430, %p24;
	@%p430 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6492;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r4611, %r993, %r400;
	mul.wide.s32 	%rd433, %r4611, 4;
	add.s64 	%rd434, %rd30, %rd433;
	st.global.f32 	[%rd434], %f568;

$L__BB0_673:
	not.pred 	%p431, %p26;
	@%p431 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6492;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r4613, %r993, %r401;
	mul.wide.s32 	%rd435, %r4613, 4;
	add.s64 	%rd436, %rd30, %rd435;
	st.global.f32 	[%rd436], %f569;

$L__BB0_675:
	@%p28 bra 	$L__BB0_680;

	not.pred 	%p433, %p25;
	@%p433 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6491;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r4615, %r993, %r414;
	mul.wide.s32 	%rd437, %r4615, 4;
	add.s64 	%rd438, %rd30, %rd437;
	st.global.f32 	[%rd438], %f570;

$L__BB0_678:
	not.pred 	%p434, %p27;
	@%p434 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6491;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r4617, %r993, %r415;
	mul.wide.s32 	%rd439, %r4617, 4;
	add.s64 	%rd440, %rd30, %rd439;
	st.global.f32 	[%rd440], %f571;

$L__BB0_680:
	add.s32 	%r4618, %r966, %r986;
	mul.lo.s32 	%r4619, %r4618, %r58;
	sub.s32 	%r994, %r4619, %r1258;
	@%p28 bra 	$L__BB0_685;

	not.pred 	%p436, %p24;
	@%p436 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6490;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r4621, %r994, %r400;
	mul.wide.s32 	%rd441, %r4621, 4;
	add.s64 	%rd442, %rd30, %rd441;
	st.global.f32 	[%rd442], %f572;

$L__BB0_683:
	not.pred 	%p437, %p26;
	@%p437 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6490;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r4623, %r994, %r401;
	mul.wide.s32 	%rd443, %r4623, 4;
	add.s64 	%rd444, %rd30, %rd443;
	st.global.f32 	[%rd444], %f573;

$L__BB0_685:
	@%p28 bra 	$L__BB0_690;

	not.pred 	%p439, %p25;
	@%p439 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6489;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r4625, %r994, %r414;
	mul.wide.s32 	%rd445, %r4625, 4;
	add.s64 	%rd446, %rd30, %rd445;
	st.global.f32 	[%rd446], %f574;

$L__BB0_688:
	not.pred 	%p440, %p27;
	@%p440 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6489;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r4627, %r994, %r415;
	mul.wide.s32 	%rd447, %r4627, 4;
	add.s64 	%rd448, %rd30, %rd447;
	st.global.f32 	[%rd448], %f575;

$L__BB0_690:
	add.s32 	%r4628, %r982, %r986;
	mul.lo.s32 	%r4629, %r4628, %r58;
	sub.s32 	%r995, %r4629, %r1258;
	@%p28 bra 	$L__BB0_695;

	not.pred 	%p442, %p24;
	@%p442 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r942;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r4631, %r995, %r400;
	mul.wide.s32 	%rd449, %r4631, 4;
	add.s64 	%rd450, %rd30, %rd449;
	st.global.f32 	[%rd450], %f576;

$L__BB0_693:
	not.pred 	%p443, %p26;
	@%p443 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r942;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r4633, %r995, %r401;
	mul.wide.s32 	%rd451, %r4633, 4;
	add.s64 	%rd452, %rd30, %rd451;
	st.global.f32 	[%rd452], %f577;

$L__BB0_695:
	@%p28 bra 	$L__BB0_700;

	not.pred 	%p445, %p25;
	@%p445 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r943;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r4635, %r995, %r414;
	mul.wide.s32 	%rd453, %r4635, 4;
	add.s64 	%rd454, %rd30, %rd453;
	st.global.f32 	[%rd454], %f578;

$L__BB0_698:
	not.pred 	%p446, %p27;
	@%p446 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r943;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r4637, %r995, %r415;
	mul.wide.s32 	%rd455, %r4637, 4;
	add.s64 	%rd456, %rd30, %rd455;
	st.global.f32 	[%rd456], %f579;

$L__BB0_700:
	add.s32 	%r996, %r959, 1;
	add.s32 	%r4638, %r996, %r964;
	mov.u32 	%r4639, 8;
	sub.s32 	%r4640, %r4639, %r1256;
	add.s32 	%r4641, %r4640, %r1257;
	mad.lo.s32 	%r4642, %r4638, %r4641, %r960;
	mul.lo.s32 	%r4643, %r4642, %r58;
	sub.s32 	%r997, %r4643, %r1258;
	@%p28 bra 	$L__BB0_705;

	not.pred 	%p448, %p24;
	@%p448 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6488;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r4645, %r997, %r400;
	mul.wide.s32 	%rd457, %r4645, 4;
	add.s64 	%rd458, %rd30, %rd457;
	st.global.f32 	[%rd458], %f580;

$L__BB0_703:
	not.pred 	%p449, %p26;
	@%p449 bra 	$L__BB0_705;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6488;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r4647, %r997, %r401;
	mul.wide.s32 	%rd459, %r4647, 4;
	add.s64 	%rd460, %rd30, %rd459;
	st.global.f32 	[%rd460], %f581;

$L__BB0_705:
	@%p28 bra 	$L__BB0_710;

	not.pred 	%p451, %p25;
	@%p451 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6487;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r4649, %r997, %r414;
	mul.wide.s32 	%rd461, %r4649, 4;
	add.s64 	%rd462, %rd30, %rd461;
	st.global.f32 	[%rd462], %f582;

$L__BB0_708:
	not.pred 	%p452, %p27;
	@%p452 bra 	$L__BB0_710;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6487;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r4651, %r997, %r415;
	mul.wide.s32 	%rd463, %r4651, 4;
	add.s64 	%rd464, %rd30, %rd463;
	st.global.f32 	[%rd464], %f583;

$L__BB0_710:
	mov.u32 	%r4652, 8;
	sub.s32 	%r4653, %r4652, %r1256;
	add.s32 	%r4654, %r4653, %r1257;
	add.s32 	%r4655, %r996, %r976;
	mul.lo.s32 	%r998, %r4655, %r4654;
	add.s32 	%r4656, %r960, %r998;
	mul.lo.s32 	%r4657, %r4656, %r58;
	sub.s32 	%r999, %r4657, %r1258;
	@%p28 bra 	$L__BB0_715;

	not.pred 	%p454, %p24;
	@%p454 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6486;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r4659, %r999, %r400;
	mul.wide.s32 	%rd465, %r4659, 4;
	add.s64 	%rd466, %rd30, %rd465;
	st.global.f32 	[%rd466], %f584;

$L__BB0_713:
	not.pred 	%p455, %p26;
	@%p455 bra 	$L__BB0_715;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6486;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r4661, %r999, %r401;
	mul.wide.s32 	%rd467, %r4661, 4;
	add.s64 	%rd468, %rd30, %rd467;
	st.global.f32 	[%rd468], %f585;

$L__BB0_715:
	@%p28 bra 	$L__BB0_720;

	not.pred 	%p457, %p25;
	@%p457 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6485;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r4663, %r999, %r414;
	mul.wide.s32 	%rd469, %r4663, 4;
	add.s64 	%rd470, %rd30, %rd469;
	st.global.f32 	[%rd470], %f586;

$L__BB0_718:
	not.pred 	%p458, %p27;
	@%p458 bra 	$L__BB0_720;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6485;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r4665, %r999, %r415;
	mul.wide.s32 	%rd471, %r4665, 4;
	add.s64 	%rd472, %rd30, %rd471;
	st.global.f32 	[%rd472], %f587;

$L__BB0_720:
	add.s32 	%r4666, %r966, %r998;
	mul.lo.s32 	%r4667, %r4666, %r58;
	sub.s32 	%r1000, %r4667, %r1258;
	@%p28 bra 	$L__BB0_725;

	not.pred 	%p460, %p24;
	@%p460 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6484;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r4669, %r1000, %r400;
	mul.wide.s32 	%rd473, %r4669, 4;
	add.s64 	%rd474, %rd30, %rd473;
	st.global.f32 	[%rd474], %f588;

$L__BB0_723:
	not.pred 	%p461, %p26;
	@%p461 bra 	$L__BB0_725;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6484;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r4671, %r1000, %r401;
	mul.wide.s32 	%rd475, %r4671, 4;
	add.s64 	%rd476, %rd30, %rd475;
	st.global.f32 	[%rd476], %f589;

$L__BB0_725:
	@%p28 bra 	$L__BB0_730;

	not.pred 	%p463, %p25;
	@%p463 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6483;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r4673, %r1000, %r414;
	mul.wide.s32 	%rd477, %r4673, 4;
	add.s64 	%rd478, %rd30, %rd477;
	st.global.f32 	[%rd478], %f590;

$L__BB0_728:
	not.pred 	%p464, %p27;
	@%p464 bra 	$L__BB0_730;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6483;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r4675, %r1000, %r415;
	mul.wide.s32 	%rd479, %r4675, 4;
	add.s64 	%rd480, %rd30, %rd479;
	st.global.f32 	[%rd480], %f591;

$L__BB0_730:
	bar.sync 	0;
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4676, {low,high};}

	// end inline asm
	selp.b32 	%r4678, %r6430, %r4676, %p28;
	// begin inline asm
	{mul.f16x2 %r4677,%r4678,%r6480;
}
	// end inline asm
	selp.b32 	%r4681, %r6434, %r4676, %p28;
	// begin inline asm
	{mul.f16x2 %r4680,%r4681,%r6475;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4683, {low,high};}

	// end inline asm
	selp.b32 	%r4685, %r6430, %r4683, %p28;
	// begin inline asm
	{mul.f16x2 %r4684,%r4685,%r6466;
}
	// end inline asm
	selp.b32 	%r4688, %r6434, %r4683, %p28;
	// begin inline asm
	{mul.f16x2 %r4687,%r4688,%r6463;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4690, {low,high};}

	// end inline asm
	selp.b32 	%r4692, %r6430, %r4690, %p28;
	// begin inline asm
	{mul.f16x2 %r4691,%r4692,%r6459;
}
	// end inline asm
	selp.b32 	%r4695, %r6434, %r4690, %p28;
	// begin inline asm
	{mul.f16x2 %r4694,%r4695,%r6458;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4697, {low,high};}

	// end inline asm
	selp.b32 	%r4699, %r6430, %r4697, %p28;
	// begin inline asm
	{mul.f16x2 %r4698,%r4699,%r6462;
}
	// end inline asm
	selp.b32 	%r4702, %r6434, %r4697, %p28;
	// begin inline asm
	{mul.f16x2 %r4701,%r4702,%r6461;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4704, {low,high};}

	// end inline asm
	selp.b32 	%r4706, %r6430, %r4704, %p28;
	// begin inline asm
	{mul.f16x2 %r4705,%r4706,%r6460;
}
	// end inline asm
	selp.b32 	%r4709, %r6434, %r4704, %p28;
	// begin inline asm
	{mul.f16x2 %r4708,%r4709,%r6457;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4711, {low,high};}

	// end inline asm
	selp.b32 	%r4713, %r6430, %r4711, %p28;
	// begin inline asm
	{mul.f16x2 %r4712,%r4713,%r6456;
}
	// end inline asm
	selp.b32 	%r4716, %r6434, %r4711, %p28;
	// begin inline asm
	{mul.f16x2 %r4715,%r4716,%r6455;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4718, {low,high};}

	// end inline asm
	selp.b32 	%r4720, %r6430, %r4718, %p28;
	// begin inline asm
	{mul.f16x2 %r4719,%r4720,%r6454;
}
	// end inline asm
	selp.b32 	%r4723, %r6434, %r4718, %p28;
	// begin inline asm
	{mul.f16x2 %r4722,%r4723,%r6451;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4725, {low,high};}

	// end inline asm
	selp.b32 	%r4727, %r6430, %r4725, %p28;
	// begin inline asm
	{mul.f16x2 %r4726,%r4727,%r6448;
}
	// end inline asm
	selp.b32 	%r4730, %r6434, %r4725, %p28;
	// begin inline asm
	{mul.f16x2 %r4729,%r4730,%r6447;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4732, {low,high};}

	// end inline asm
	selp.b32 	%r4734, %r6430, %r4732, %p28;
	// begin inline asm
	{mul.f16x2 %r4733,%r4734,%r1721;
}
	// end inline asm
	selp.b32 	%r4737, %r6434, %r4732, %p28;
	// begin inline asm
	{mul.f16x2 %r4736,%r4737,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4739, {low,high};}

	// end inline asm
	selp.b32 	%r4741, %r6430, %r4739, %p28;
	// begin inline asm
	{mul.f16x2 %r4740,%r4741,%r1721;
}
	// end inline asm
	selp.b32 	%r4744, %r6434, %r4739, %p28;
	// begin inline asm
	{mul.f16x2 %r4743,%r4744,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4746, {low,high};}

	// end inline asm
	selp.b32 	%r4748, %r6430, %r4746, %p28;
	// begin inline asm
	{mul.f16x2 %r4747,%r4748,%r6443;
}
	// end inline asm
	selp.b32 	%r4751, %r6434, %r4746, %p28;
	// begin inline asm
	{mul.f16x2 %r4750,%r4751,%r6442;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4753, {low,high};}

	// end inline asm
	selp.b32 	%r4755, %r6430, %r4753, %p28;
	// begin inline asm
	{mul.f16x2 %r4754,%r4755,%r6446;
}
	// end inline asm
	selp.b32 	%r4758, %r6434, %r4753, %p28;
	// begin inline asm
	{mul.f16x2 %r4757,%r4758,%r6445;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4760, {low,high};}

	// end inline asm
	selp.b32 	%r4762, %r6430, %r4760, %p28;
	// begin inline asm
	{mul.f16x2 %r4761,%r4762,%r6444;
}
	// end inline asm
	selp.b32 	%r4765, %r6434, %r4760, %p28;
	// begin inline asm
	{mul.f16x2 %r4764,%r4765,%r6441;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4767, {low,high};}

	// end inline asm
	selp.b32 	%r4769, %r6430, %r4767, %p28;
	// begin inline asm
	{mul.f16x2 %r4768,%r4769,%r6438;
}
	// end inline asm
	selp.b32 	%r4772, %r6434, %r4767, %p28;
	// begin inline asm
	{mul.f16x2 %r4771,%r4772,%r6437;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4774, {low,high};}

	// end inline asm
	selp.b32 	%r4776, %r6430, %r4774, %p28;
	// begin inline asm
	{mul.f16x2 %r4775,%r4776,%r6440;
}
	// end inline asm
	selp.b32 	%r4779, %r6434, %r4774, %p28;
	// begin inline asm
	{mul.f16x2 %r4778,%r4779,%r6439;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4781, {low,high};}

	// end inline asm
	selp.b32 	%r4783, %r6430, %r4781, %p28;
	// begin inline asm
	{mul.f16x2 %r4782,%r4783,%r1721;
}
	// end inline asm
	selp.b32 	%r4786, %r6434, %r4781, %p28;
	// begin inline asm
	{mul.f16x2 %r4785,%r4786,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4788, {low,high};}

	// end inline asm
	selp.b32 	%r4790, %r6430, %r4788, %p28;
	// begin inline asm
	{mul.f16x2 %r4789,%r4790,%r1721;
}
	// end inline asm
	selp.b32 	%r4793, %r6434, %r4788, %p28;
	// begin inline asm
	{mul.f16x2 %r4792,%r4793,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4795, {low,high};}

	// end inline asm
	selp.b32 	%r4797, %r6430, %r4795, %p28;
	// begin inline asm
	{mul.f16x2 %r4796,%r4797,%r1721;
}
	// end inline asm
	selp.b32 	%r4800, %r6434, %r4795, %p28;
	// begin inline asm
	{mul.f16x2 %r4799,%r4800,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4802, {low,high};}

	// end inline asm
	selp.b32 	%r4804, %r6430, %r4802, %p28;
	// begin inline asm
	{mul.f16x2 %r4803,%r4804,%r6436;
}
	// end inline asm
	selp.b32 	%r4807, %r6434, %r4802, %p28;
	// begin inline asm
	{mul.f16x2 %r4806,%r4807,%r6435;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4809, {low,high};}

	// end inline asm
	selp.b32 	%r4811, %r6430, %r4809, %p28;
	// begin inline asm
	{mul.f16x2 %r4810,%r4811,%r1721;
}
	// end inline asm
	selp.b32 	%r4814, %r6434, %r4809, %p28;
	// begin inline asm
	{mul.f16x2 %r4813,%r4814,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4816, {low,high};}

	// end inline asm
	selp.b32 	%r4818, %r6430, %r4816, %p28;
	// begin inline asm
	{mul.f16x2 %r4817,%r4818,%r1721;
}
	// end inline asm
	selp.b32 	%r4821, %r6434, %r4816, %p28;
	// begin inline asm
	{mul.f16x2 %r4820,%r4821,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4823, {low,high};}

	// end inline asm
	selp.b32 	%r4825, %r6430, %r4823, %p28;
	// begin inline asm
	{mul.f16x2 %r4824,%r4825,%r1721;
}
	// end inline asm
	selp.b32 	%r4828, %r6434, %r4823, %p28;
	// begin inline asm
	{mul.f16x2 %r4827,%r4828,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4830, {low,high};}

	// end inline asm
	selp.b32 	%r4832, %r6430, %r4830, %p28;
	// begin inline asm
	{mul.f16x2 %r4831,%r4832,%r1721;
}
	// end inline asm
	selp.b32 	%r4835, %r6434, %r4830, %p28;
	// begin inline asm
	{mul.f16x2 %r4834,%r4835,%r1721;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r4837, {low,high};}

	// end inline asm
	selp.b32 	%r4839, %r6430, %r4837, %p28;
	// begin inline asm
	{mul.f16x2 %r4838,%r4839,%r1721;
}
	// end inline asm
	selp.b32 	%r4842, %r6434, %r4837, %p28;
	// begin inline asm
	{mul.f16x2 %r4841,%r4842,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r6506,%r2988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4847,%r3099,%r2945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4850,%r4844,%r4847;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4853,%r6344,%r4850;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4856,%r4677,%r4853;
}
	// end inline asm
	selp.b32 	%r6476, %r4677, %r4856, %p28;
	// begin inline asm
	{sub.f16x2 %r4859,%r6505,%r3054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4862,%r3133,%r3022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4865,%r4859,%r4862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4868,%r6344,%r4865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4871,%r4680,%r4868;
}
	// end inline asm
	selp.b32 	%r6473, %r4680, %r4871, %p28;
	// begin inline asm
	{sub.f16x2 %r4874,%r6502,%r3221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4877,%r6508,%r3178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4880,%r4874,%r4877;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4883,%r6344,%r4880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4886,%r4684,%r4883;
}
	// end inline asm
	selp.b32 	%r6479, %r4684, %r4886, %p28;
	// begin inline asm
	{sub.f16x2 %r4889,%r6501,%r3287;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r6507,%r3255;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4895,%r4889,%r4892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4898,%r6344,%r4895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4901,%r4687,%r4898;
}
	// end inline asm
	selp.b32 	%r6474, %r4687, %r4901, %p28;
	// begin inline asm
	{sub.f16x2 %r4904,%r6505,%r6506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4907,%r6429,%r4904;
}
	// end inline asm
	@%p28 bra 	$L__BB0_732;
	bra.uni 	$L__BB0_731;

$L__BB0_732:
	// begin inline asm
	{neg.f16x2 %r6626,%r4691;
}
	// end inline asm
	bra.uni 	$L__BB0_733;

$L__BB0_731:
	// begin inline asm
	{mul.f16x2 %r6626,%r6430,%r4904;
}
	// end inline asm

$L__BB0_733:
	mov.u32 	%r4918, 31;
	mov.u32 	%r4920, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4916,%r6626,%r4918,%r1800,%r4920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4921,%r4907,%r4916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4924,%r857,%r833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4927,%r4924,%r4921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4930,%r6344,%r4927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6478,%r4691,%r4930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4936,%r6507,%r6508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4939,%r6429,%r4936;
}
	// end inline asm
	mov.u32 	%r6627, %r4698;
	@%p28 bra 	$L__BB0_735;

	// begin inline asm
	{mul.f16x2 %r6627,%r6430,%r4936;
}
	// end inline asm

$L__BB0_735:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4948,%r6627,%r4918,%r1800,%r4920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4953,%r4939,%r4948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4956,%r6496,%r833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4959,%r4953,%r4956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4962,%r6344,%r4959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6482,%r4698,%r4962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4968,%r6498,%r6506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4971,%r6504,%r6508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4974,%r4968,%r4971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4977,%r6344,%r4974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4980,%r4705,%r4977;
}
	// end inline asm
	selp.b32 	%r6480, %r4705, %r4980, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6506;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4985,%r6506,%r435,%r1800,%r4920;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4985;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4991, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4992,%r4991,%r6505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4995,%r6433,%r4992;
}
	// end inline asm
	@%p28 bra 	$L__BB0_737;
	bra.uni 	$L__BB0_736;

$L__BB0_737:
	// begin inline asm
	{neg.f16x2 %r6628,%r4694;
}
	// end inline asm
	bra.uni 	$L__BB0_738;

$L__BB0_736:
	// begin inline asm
	{mul.f16x2 %r6628,%r6434,%r4992;
}
	// end inline asm

$L__BB0_738:
	mov.u32 	%r5010, 31;
	mov.u32 	%r5034, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5008,%r6628,%r5010,%r1800,%r5034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5013,%r4995,%r5008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5016,%r869,%r845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5019,%r5016,%r5013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5022,%r6344,%r5019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6477,%r4694,%r5022;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6508;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5030,%r6508,%r435,%r1800,%r5034;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5030;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5036, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5037,%r5036,%r6507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5040,%r6433,%r5037;
}
	// end inline asm
	mov.u32 	%r6629, %r4701;
	@%p28 bra 	$L__BB0_740;

	// begin inline asm
	{mul.f16x2 %r6629,%r6434,%r5037;
}
	// end inline asm

$L__BB0_740:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5051,%r6629,%r5010,%r1800,%r5034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5056,%r5040,%r5051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5059,%r6495,%r845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5062,%r5056,%r5059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5065,%r6344,%r5062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6481,%r4701,%r5065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5071,%r6497,%r6505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5074,%r6503,%r6507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5077,%r5071,%r5074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5080,%r6344,%r5077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5083,%r4708,%r5080;
}
	// end inline asm
	selp.b32 	%r6475, %r4708, %r5083, %p28;
	// begin inline asm
	{sub.f16x2 %r5086,%r6503,%r6504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5089,%r6429,%r5086;
}
	// end inline asm
	mov.u32 	%r6630, %r4712;
	@%p28 bra 	$L__BB0_742;

	// begin inline asm
	{mul.f16x2 %r6630,%r6430,%r5086;
}
	// end inline asm

$L__BB0_742:
	mov.u32 	%r5100, 31;
	mov.u32 	%r5139, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5098,%r6630,%r5100,%r1800,%r5139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5103,%r5089,%r5098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5106,%r6490,%r857;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5109,%r5103,%r5106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5112,%r6344,%r5109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6472,%r4712,%r5112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5118,%r6492,%r3559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5121,%r3700,%r6504;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5124,%r5118,%r5121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5127,%r6344,%r5124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5130,%r4719,%r5127;
}
	// end inline asm
	selp.b32 	%r6470, %r4719, %r5130, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6504;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5135,%r6504,%r435,%r1800,%r5139;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5135;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5141, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5142,%r5141,%r6503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5145,%r6433,%r5142;
}
	// end inline asm
	mov.u32 	%r6631, %r4715;
	@%p28 bra 	$L__BB0_744;

	// begin inline asm
	{mul.f16x2 %r6631,%r6434,%r5142;
}
	// end inline asm

$L__BB0_744:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5156,%r6631,%r5100,%r1800,%r5139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5161,%r5145,%r5156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5164,%r6489,%r869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5167,%r5161,%r5164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5170,%r6344,%r5167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6471,%r4715,%r5170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5176,%r6491,%r3640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5179,%r3734,%r6503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5182,%r5176,%r5179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5185,%r6344,%r5182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5188,%r4722,%r5185;
}
	// end inline asm
	selp.b32 	%r6469, %r4722, %r5188, %p28;
	// begin inline asm
	{sub.f16x2 %r5191,%r6501,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5194,%r6429,%r5191;
}
	// end inline asm
	@%p28 bra 	$L__BB0_746;
	bra.uni 	$L__BB0_745;

$L__BB0_746:
	// begin inline asm
	{neg.f16x2 %r6632,%r4726;
}
	// end inline asm
	bra.uni 	$L__BB0_747;

$L__BB0_745:
	// begin inline asm
	{mul.f16x2 %r6632,%r6430,%r5191;
}
	// end inline asm

$L__BB0_747:
	mov.u32 	%r5207, 31;
	mov.u32 	%r5209, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5205,%r6632,%r5207,%r1800,%r5209;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5210,%r5194,%r5205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5213,%r6496,%r887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5216,%r5213,%r5210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5219,%r6344,%r5216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6465,%r4726,%r5219;
}
	// end inline asm
	mov.u32 	%r6633, %r4733;
	@%p28 bra 	$L__BB0_749;

	mov.u32 	%r6633, %r6243;

$L__BB0_749:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5237,%r6633,%r5207,%r1800,%r5209;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5242,%r5228,%r5237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5245,%r1721,%r887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5248,%r5242,%r5245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5251,%r6344,%r5248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6468,%r4733,%r5251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5257,%r1721,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5260,%r6500,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5263,%r5257,%r5260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5266,%r6344,%r5263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5269,%r4740,%r5266;
}
	// end inline asm
	selp.b32 	%r6466, %r4740, %r5269, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6502;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5274,%r6502,%r435,%r1800,%r5209;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5274;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5280, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5281,%r5280,%r6501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5284,%r6433,%r5281;
}
	// end inline asm
	@%p28 bra 	$L__BB0_751;
	bra.uni 	$L__BB0_750;

$L__BB0_751:
	// begin inline asm
	{neg.f16x2 %r6634,%r4729;
}
	// end inline asm
	bra.uni 	$L__BB0_752;

$L__BB0_750:
	// begin inline asm
	{mul.f16x2 %r6634,%r6434,%r5281;
}
	// end inline asm

$L__BB0_752:
	mov.u32 	%r5299, 31;
	mov.u32 	%r5323, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5297,%r6634,%r5299,%r1800,%r5323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5302,%r5284,%r5297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5305,%r6495,%r893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5308,%r5305,%r5302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5311,%r6344,%r5308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r4729,%r5311;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5319,%r1721,%r435,%r1800,%r5323;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5319;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5325, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5326,%r5325,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5329,%r6433,%r5326;
}
	// end inline asm
	mov.u32 	%r6635, %r4736;
	@%p28 bra 	$L__BB0_754;

	// begin inline asm
	{mul.f16x2 %r6635,%r6434,%r5326;
}
	// end inline asm

$L__BB0_754:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5340,%r6635,%r5299,%r1800,%r5323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5345,%r5329,%r5340;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5348,%r1721,%r893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5351,%r5345,%r5348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5354,%r6344,%r5351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r4736,%r5354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5360,%r1721,%r6501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5363,%r6499,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5366,%r5360,%r5363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5369,%r6344,%r5366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5372,%r4743,%r5369;
}
	// end inline asm
	selp.b32 	%r6463, %r4743, %r5372, %p28;
	// begin inline asm
	{sub.f16x2 %r5375,%r6497,%r6498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5378,%r6429,%r5375;
}
	// end inline asm
	@%p28 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r6636,%r4747;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r6636,%r6430,%r5375;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5391, 31;
	mov.u32 	%r5393, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5389,%r6636,%r5391,%r1800,%r5393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5394,%r5378,%r5389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5397,%r6490,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5400,%r5397,%r5394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5403,%r6344,%r5400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6459,%r4747,%r5403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5409,%r6499,%r6500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5412,%r6429,%r5409;
}
	// end inline asm
	mov.u32 	%r6637, %r4754;
	@%p28 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r6637,%r6430,%r5409;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5421,%r6637,%r5391,%r1800,%r5393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5426,%r5412,%r5421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5429,%r6486,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5432,%r5426,%r5429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5435,%r6344,%r5432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6462,%r4754,%r5435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5441,%r6488,%r6498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5444,%r6494,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5447,%r5441,%r5444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5450,%r6344,%r5447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5453,%r4761,%r5450;
}
	// end inline asm
	selp.b32 	%r6460, %r4761, %r5453, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6498;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5458,%r6498,%r435,%r1800,%r5393;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5458;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5464, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5465,%r5464,%r6497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5468,%r6433,%r5465;
}
	// end inline asm
	@%p28 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r6638,%r4750;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r6638,%r6434,%r5465;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5483, 31;
	mov.u32 	%r5507, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5481,%r6638,%r5483,%r1800,%r5507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5486,%r5468,%r5481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5489,%r6489,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5492,%r5489,%r5486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5495,%r6344,%r5492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6458,%r4750,%r5495;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6500;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5503,%r6500,%r435,%r1800,%r5507;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5503;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5509, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5510,%r5509,%r6499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5513,%r6433,%r5510;
}
	// end inline asm
	mov.u32 	%r6639, %r4757;
	@%p28 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r6639,%r6434,%r5510;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5524,%r6639,%r5483,%r1800,%r5507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5529,%r5513,%r5524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5532,%r6485,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5535,%r5529,%r5532;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5538,%r6344,%r5535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6461,%r4757,%r5538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5544,%r6487,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5547,%r6493,%r6499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5550,%r5544,%r5547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5553,%r6344,%r5550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5556,%r4764,%r5553;
}
	// end inline asm
	selp.b32 	%r6457, %r4764, %r5556, %p28;
	// begin inline asm
	{sub.f16x2 %r5559,%r6491,%r6492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5562,%r6429,%r5559;
}
	// end inline asm
	@%p28 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r6640,%r4768;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r6640,%r6430,%r5559;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5575, 31;
	mov.u32 	%r5577, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5573,%r6640,%r5575,%r1800,%r5577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5578,%r5562,%r5573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5581,%r942,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5584,%r5581,%r5578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5587,%r6344,%r5584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6453,%r4768,%r5587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5593,%r6493,%r6494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5596,%r6429,%r5593;
}
	// end inline asm
	mov.u32 	%r6641, %r4775;
	@%p28 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r6641,%r6430,%r5593;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5605,%r6641,%r5575,%r1800,%r5577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5610,%r5596,%r5605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5613,%r6484,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5616,%r5610,%r5613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5619,%r6344,%r5616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6456,%r4775,%r5619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5625,%r1721,%r6492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5628,%r1721,%r6494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5631,%r5625,%r5628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5634,%r6344,%r5631;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5637,%r4782,%r5634;
}
	// end inline asm
	selp.b32 	%r6454, %r4782, %r5637, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6492;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5642,%r6492,%r435,%r1800,%r5577;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5642;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5648, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5649,%r5648,%r6491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5652,%r6433,%r5649;
}
	// end inline asm
	@%p28 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r6642,%r4771;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r6642,%r6434,%r5649;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5667, 31;
	mov.u32 	%r5691, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5665,%r6642,%r5667,%r1800,%r5691;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5670,%r5652,%r5665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5673,%r943,%r6489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5676,%r5673,%r5670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5679,%r6344,%r5676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6452,%r4771,%r5679;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6494;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5687,%r6494,%r435,%r1800,%r5691;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5687;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5693, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5694,%r5693,%r6493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5697,%r6433,%r5694;
}
	// end inline asm
	mov.u32 	%r6643, %r4778;
	@%p28 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r6643,%r6434,%r5694;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5708,%r6643,%r5667,%r1800,%r5691;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5713,%r5697,%r5708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5716,%r6483,%r6489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5719,%r5713,%r5716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5722,%r6344,%r5719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6455,%r4778,%r5722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5728,%r1721,%r6491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5731,%r1721,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5734,%r5728,%r5731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5737,%r6344,%r5734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5740,%r4785,%r5737;
}
	// end inline asm
	selp.b32 	%r6451, %r4785, %r5740, %p28;
	mov.u32 	%r6644, %r4789;
	@%p28 bra 	$L__BB0_776;

	mov.u32 	%r6644, %r6243;

$L__BB0_776:
	mov.u32 	%r5757, 31;
	mov.u32 	%r5781, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5755,%r6644,%r5757,%r1800,%r5781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5760,%r5228,%r5755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5763,%r1721,%r942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r5760,%r5763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5769,%r6344,%r5766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6450,%r4789,%r5769;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5777,%r1721,%r435,%r1800,%r5781;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5777;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5783, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5784,%r5783,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5787,%r6433,%r5784;
}
	// end inline asm
	mov.u32 	%r6645, %r4792;
	@%p28 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r6645,%r6434,%r5784;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5798,%r6645,%r5757,%r1800,%r5781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5803,%r5787,%r5798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5806,%r1721,%r943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5809,%r5803,%r5806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5812,%r6344,%r5809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6449,%r4792,%r5812;
}
	// end inline asm
	@%p28 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r6646,%r4796;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	mov.u32 	%r6646, %r6243;

$L__BB0_781:
	mov.u32 	%r5834, 31;
	mov.u32 	%r5858, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5832,%r6646,%r5834,%r1800,%r5858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5837,%r5228,%r5832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5840,%r6486,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5843,%r5840,%r5837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5846,%r6344,%r5843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6448,%r4796,%r5846;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5854,%r1721,%r435,%r1800,%r5858;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5854;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5860, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5861,%r5860,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5864,%r6433,%r5861;
}
	// end inline asm
	@%p28 bra 	$L__BB0_783;
	bra.uni 	$L__BB0_782;

$L__BB0_783:
	// begin inline asm
	{neg.f16x2 %r6647,%r4799;
}
	// end inline asm
	bra.uni 	$L__BB0_784;

$L__BB0_782:
	// begin inline asm
	{mul.f16x2 %r6647,%r6434,%r5861;
}
	// end inline asm

$L__BB0_784:
	mov.u32 	%r5879, 31;
	mov.u32 	%r5881, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5877,%r6647,%r5879,%r1800,%r5881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5882,%r5864,%r5877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r6485,%r1721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5888,%r5885,%r5882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5891,%r6344,%r5888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6447,%r4799,%r5891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5897,%r6487,%r6488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5900,%r6429,%r5897;
}
	// end inline asm
	@%p28 bra 	$L__BB0_786;
	bra.uni 	$L__BB0_785;

$L__BB0_786:
	// begin inline asm
	{neg.f16x2 %r6648,%r4803;
}
	// end inline asm
	bra.uni 	$L__BB0_787;

$L__BB0_785:
	// begin inline asm
	{mul.f16x2 %r6648,%r6430,%r5897;
}
	// end inline asm

$L__BB0_787:
	mov.u32 	%r5913, 31;
	mov.u32 	%r5915, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5911,%r6648,%r5913,%r1800,%r5915;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5916,%r5900,%r5911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r6484,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5922,%r5919,%r5916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5925,%r6344,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6443,%r4803,%r5925;
}
	// end inline asm
	mov.u32 	%r6649, %r4810;
	@%p28 bra 	$L__BB0_789;

	mov.u32 	%r6649, %r6243;

$L__BB0_789:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5943,%r6649,%r5913,%r1800,%r5915;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5948,%r5228,%r5943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5951,%r1721,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5954,%r5948,%r5951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5957,%r6344,%r5954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6446,%r4810,%r5957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5963,%r1721,%r6488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5969,%r5963,%r5225;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5972,%r6344,%r5969;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5975,%r4817,%r5972;
}
	// end inline asm
	selp.b32 	%r6444, %r4817, %r5975, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6488;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5980,%r6488,%r435,%r1800,%r5915;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5980;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5986, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5987,%r5986,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5990,%r6433,%r5987;
}
	// end inline asm
	@%p28 bra 	$L__BB0_791;
	bra.uni 	$L__BB0_790;

$L__BB0_791:
	// begin inline asm
	{neg.f16x2 %r6650,%r4806;
}
	// end inline asm
	bra.uni 	$L__BB0_792;

$L__BB0_790:
	// begin inline asm
	{mul.f16x2 %r6650,%r6434,%r5987;
}
	// end inline asm

$L__BB0_792:
	mov.u32 	%r6005, 31;
	mov.u32 	%r6029, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6003,%r6650,%r6005,%r1800,%r6029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6008,%r5990,%r6003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6011,%r6483,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6014,%r6011,%r6008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6017,%r6344,%r6014;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6442,%r4806,%r6017;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6025,%r1721,%r435,%r1800,%r6029;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6025;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6031, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6032,%r6031,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6035,%r6433,%r6032;
}
	// end inline asm
	mov.u32 	%r6651, %r4813;
	@%p28 bra 	$L__BB0_794;

	// begin inline asm
	{mul.f16x2 %r6651,%r6434,%r6032;
}
	// end inline asm

$L__BB0_794:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6046,%r6651,%r6005,%r1800,%r6029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6051,%r6035,%r6046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6054,%r1721,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6057,%r6051,%r6054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6060,%r6344,%r6057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6445,%r4813,%r6060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6066,%r1721,%r6487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6072,%r6066,%r5225;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6075,%r6344,%r6072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6078,%r4820,%r6075;
}
	// end inline asm
	selp.b32 	%r6441, %r4820, %r6078, %p28;
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r6652,%r4824;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	mov.u32 	%r6652, %r6243;

$L__BB0_797:
	mov.u32 	%r6097, 31;
	mov.u32 	%r6099, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6095,%r6652,%r6097,%r1800,%r6099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6100,%r5228,%r6095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6103,%r1721,%r6484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6106,%r6103,%r6100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6109,%r6344,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r4824,%r6109;
}
	// end inline asm
	mov.u32 	%r6653, %r4831;
	@%p28 bra 	$L__BB0_799;

	mov.u32 	%r6653, %r6243;

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6127,%r6653,%r6097,%r1800,%r6099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6132,%r5228,%r6127;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6135,%r1721,%r6484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r6132,%r6135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r6344,%r6138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6440,%r4831,%r6141;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6149,%r1721,%r435,%r1800,%r6099;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6149;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6155, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6156,%r6155,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6159,%r6433,%r6156;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r6654,%r4827;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r6654,%r6434,%r6156;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6174, 31;
	mov.u32 	%r6198, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6172,%r6654,%r6174,%r1800,%r6198;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6177,%r6159,%r6172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6180,%r1721,%r6483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6183,%r6180,%r6177;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6186,%r6344,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6437,%r4827,%r6186;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6194,%r1721,%r435,%r1800,%r6198;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6194;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6200, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6201,%r6200,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6204,%r6433,%r6201;
}
	// end inline asm
	mov.u32 	%r6655, %r4834;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r6655,%r6434,%r6201;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6215,%r6655,%r6174,%r1800,%r6198;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6220,%r6204,%r6215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6223,%r1721,%r6483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6226,%r6220,%r6223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6229,%r6344,%r6226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6439,%r4834,%r6229;
}
	// end inline asm
	@%p28 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r6656,%r4838;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	mov.u32 	%r6656, %r6243;

$L__BB0_807:
	mov.u32 	%r6251, 31;
	mov.u32 	%r6275, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6249,%r6656,%r6251,%r1800,%r6275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6254,%r5228,%r6249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6260,%r5225,%r6254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6263,%r6344,%r6260;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6436,%r4838,%r6263;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6271,%r1721,%r435,%r1800,%r6275;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6271;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6277, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6278,%r6277,%r1721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6281,%r6433,%r6278;
}
	// end inline asm
	@%p28 bra 	$L__BB0_809;
	bra.uni 	$L__BB0_808;

$L__BB0_809:
	// begin inline asm
	{neg.f16x2 %r6657,%r4841;
}
	// end inline asm
	bra.uni 	$L__BB0_810;

$L__BB0_808:
	// begin inline asm
	{mul.f16x2 %r6657,%r6434,%r6278;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6296, 31;
	mov.u32 	%r6298, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6294,%r6657,%r6296,%r1800,%r6298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6299,%r6281,%r6294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6305,%r5225,%r6299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6308,%r6344,%r6305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6435,%r4841,%r6308;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6316, %r6509, %r1244;
	setp.eq.s32 	%p497, %r6316, 0;
	@%p497 bra 	$L__BB0_812;

	bar.sync 	0;
	bra.uni 	$L__BB0_819;

$L__BB0_812:
	@%p218 bra 	$L__BB0_814;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_814:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_818;

	membar.gl;
	setp.eq.s32 	%p500, %r429, %r430;
	mov.u32 	%r6333, -2147483647;
	sub.s32 	%r6334, %r6333, %r428;
	selp.b32 	%r6322, %r6334, 1, %p500;
	// begin inline asm
	atom.add.release.gpu.u32 %r6321,[%rd28],%r6322;
	// end inline asm

$L__BB0_816:
	ld.volatile.u32 	%r6335, [%rd28];
	xor.b32  	%r6336, %r6335, %r6321;
	setp.gt.s32 	%p501, %r6336, -1;
	@%p501 bra 	$L__BB0_816;

	// begin inline asm
	ld.acquire.gpu.u32 %r6337,[%rd28];
	// end inline asm

$L__BB0_818:
	bar.sync 	0;

$L__BB0_819:
	add.s32 	%r6509, %r6509, 1;
	setp.lt.s32 	%p502, %r6509, %r49;
	@%p502 bra 	$L__BB0_332;

$L__BB0_820:
	ret;

}

