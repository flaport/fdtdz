//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<435>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<6572>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1227, %r1228}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1229, %r1230}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1231, %r1232}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1233, %r1234}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1235, %r1236}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1237, %r1238}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1239, %r1240}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1241, %r1242}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1243, %r1244}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1245, %r1246}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r31, %tid.y;
	mov.u32 	%r32, %tid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %ctaid.z;
	mov.u32 	%r1247, 32;
	sub.s32 	%r35, %r1247, %r1234;
	mov.u32 	%r36, %tid.x;
	setp.le.s32 	%p15, %r35, %r36;
	add.s32 	%r1248, %r1240, -1;
	mad.lo.s32 	%r1249, %r1248, %r1239, %r1238;
	add.s32 	%r1250, %r1233, %r1232;
	add.s32 	%r1251, %r1250, %r1249;
	add.s32 	%r1252, %r1251, 1;
	mul.lo.s32 	%r1253, %r1227, %r1229;
	shl.b32 	%r37, %r1253, 1;
	shl.b32 	%r1254, %r1253, 2;
	div.s32 	%r1255, %r1252, %r1254;
	add.s32 	%r1256, %r1255, 1;
	mul.lo.s32 	%r1257, %r1256, %r1233;
	mul.lo.s32 	%r1258, %r1228, %r1230;
	shl.b32 	%r38, %r1258, 1;
	div.s32 	%r1259, %r1257, %r38;
	add.s32 	%r1260, %r1259, 1;
	mul.lo.s32 	%r39, %r1260, %r1232;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6252, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6252, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1263, %r1229, %r34, %r33;
	mad.lo.s32 	%r1264, %r1263, %r1228, %r32;
	mad.lo.s32 	%r1265, %r1264, %r1227, %r31;
	shl.b32 	%r43, %r1265, 5;
	add.s32 	%r6257, %r43, %r36;
	mul.lo.s32 	%r1266, %r1258, %r1253;
	shl.b32 	%r47, %r1266, 5;
	sub.s32 	%r1267, %r1242, %r1241;
	mul.lo.s32 	%r1268, %r1240, %r1267;
	sub.s32 	%r1269, %r1244, %r1243;
	mul.lo.s32 	%r1270, %r1268, %r1269;
	sub.s32 	%r48, %r1246, %r1245;
	mul.lo.s32 	%r1271, %r1270, %r48;
	mul.lo.s32 	%r49, %r1271, 3;
	setp.ge.s32 	%p16, %r6257, %r49;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1272, %r36;
	add.s32 	%r1273, %r49, %r1272;
	sub.s32 	%r1274, %r1273, %r43;
	mul.lo.s32 	%r1275, %r1258, %r1227;
	mul.lo.s32 	%r1276, %r1275, %r1229;
	shl.b32 	%r1277, %r1276, 5;
	div.u32 	%r50, %r1274, %r1277;
	add.s32 	%r1278, %r50, 1;
	and.b32  	%r6254, %r1278, 3;
	setp.eq.s32 	%p17, %r6254, 0;
	mov.u32 	%r6255, %r6257;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6255, %r6257;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6255, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1279, 0;
	st.global.u32 	[%rd31], %r1279;
	add.s32 	%r6255, %r6255, %r47;
	add.s32 	%r6254, %r6254, -1;
	setp.ne.s32 	%p18, %r6254, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r50, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r47, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6255, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1280, 0;
	st.global.u32 	[%rd33], %r1280;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1280;
	add.s32 	%r1281, %r6255, %r47;
	add.s32 	%r1282, %r1281, %r47;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1280;
	add.s32 	%r1283, %r1282, %r47;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1280;
	add.s32 	%r6255, %r1283, %r47;
	setp.lt.s32 	%p20, %r6255, %r49;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1284, %r1233, %r37;
	div.s32 	%r1285, %r1284, %r38;
	mul.lo.s32 	%r1286, %r1285, %r1232;
	sub.s32 	%r1287, %r1286, %r37;
	sub.s32 	%r1288, %r1232, %r38;
	mul.lo.s32 	%r1289, %r1288, %r1229;
	mul.lo.s32 	%r1290, %r1227, 384;
	add.s32 	%r1291, %r1290, %r1290;
	add.s32 	%r1292, %r1291, 128;
	mul.lo.s32 	%r1294, %r1258, 768;
	mul.lo.s32 	%r1295, %r1289, %r1292;
	mad.lo.s32 	%r59, %r1294, %r1287, %r1295;
	bra.uni 	$L__BB0_11;

$L__BB0_791:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6246, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6257, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6246;
	add.s32 	%r6257, %r6257, %r47;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6257, %r59;
	@%p21 bra 	$L__BB0_791;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6299, %r1227, %r33, %r31;
	mul.lo.s32 	%r63, %r1228, %r34;
	add.s32 	%r64, %r63, %r32;
	setp.ge.s32 	%p22, %r6299, %r1232;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r35, %r36;
	mov.u32 	%r1296, 31;
	sub.s32 	%r1297, %r1296, %r36;
	selp.b32 	%r1298, %r36, %r1297, %p23;
	shl.b32 	%r1299, %r1298, 2;
	mov.u32 	%r1300, 2;
	sub.s32 	%r65, %r1299, %r1235;
	shl.b32 	%r1301, %r1234, 2;
	mov.u32 	%r1302, 128;
	sub.s32 	%r66, %r1302, %r1301;
	sub.s32 	%r1303, %r1300, %r1235;
	add.s32 	%r67, %r1303, %r1299;
	mul.lo.s32 	%r1304, %r1233, %r1232;
	shl.b32 	%r68, %r1304, 6;
	add.s32 	%r69, %r1232, -1;
	add.s32 	%r70, %r65, 1;
	add.s32 	%r71, %r67, 1;
	shl.b32 	%r72, %r36, 1;
	or.b32  	%r73, %r72, 1;
	shr.u32 	%r1305, %r73, 31;
	add.s32 	%r1306, %r73, %r1305;
	shr.s32 	%r75, %r1306, 1;
	and.b32  	%r1307, %r1306, -2;
	sub.s32 	%r1308, %r73, %r1307;
	add.s32 	%r74, %r1308, %r68;
	rem.s32 	%r1343, %r70, %r66;
	add.s32 	%r1344, %r1343, %r66;
	rem.s32 	%r98, %r1344, %r66;
	rem.s32 	%r1345, %r71, %r66;
	add.s32 	%r1346, %r1345, %r66;
	rem.s32 	%r99, %r1346, %r66;
	mov.u32 	%r6258, %r6299;

$L__BB0_14:
	setp.ge.s32 	%p24, %r64, %r1233;
	@%p24 bra 	$L__BB0_35;

	add.s32 	%r77, %r69, %r6258;
	rem.s32 	%r1309, %r65, %r66;
	add.s32 	%r1310, %r1309, %r66;
	rem.s32 	%r78, %r1310, %r66;
	rem.s32 	%r1311, %r67, %r66;
	add.s32 	%r1312, %r1311, %r66;
	rem.s32 	%r79, %r1312, %r66;
	mul.lo.s32 	%r80, %r6258, %r1233;
	add.s32 	%r1313, %r1232, %r6258;
	mul.lo.s32 	%r81, %r1313, %r1233;
	add.s32 	%r1314, %r1313, %r1232;
	mul.lo.s32 	%r82, %r1314, %r1233;
	mov.u32 	%r6259, %r64;

$L__BB0_16:
	mul.lo.s32 	%r84, %r6259, %r1232;
	add.s32 	%r85, %r84, %r6258;
	shl.b32 	%r86, %r85, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1317, %r80, %r6259;
	mul.lo.s32 	%r1318, %r1317, %r66;
	add.s32 	%r1319, %r1318, %r78;
	mul.wide.s32 	%rd41, %r1319, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1320, %r1318, %r79;
	mul.wide.s32 	%rd43, %r1320, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6260, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6260, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r90, %r85, 5;
	add.s32 	%r1321, %r90, %r36;
	shl.b32 	%r1322, %r1321, 2;
	add.s32 	%r1323, %r68, %r1322;
	mul.wide.s32 	%rd45, %r1323, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6260;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1326, %r81, %r6259;
	mul.lo.s32 	%r1327, %r1326, %r66;
	add.s32 	%r1328, %r1327, %r78;
	mul.wide.s32 	%rd47, %r1328, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1329, %r1327, %r79;
	mul.wide.s32 	%rd49, %r1329, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6261, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1330, %r72, %r86;
	mul.wide.s32 	%rd51, %r1330, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6261;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1333, %r82, %r6259;
	mul.lo.s32 	%r1334, %r1333, %r66;
	add.s32 	%r1335, %r1334, %r78;
	mul.wide.s32 	%rd53, %r1335, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1336, %r1334, %r79;
	mul.wide.s32 	%rd55, %r1336, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6262, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1337, %r77, %r1232;
	add.s32 	%r1338, %r1337, %r84;
	shl.b32 	%r97, %r1338, 5;
	add.s32 	%r1339, %r97, %r36;
	shl.b32 	%r1340, %r1339, 2;
	add.s32 	%r1341, %r68, %r1340;
	add.s32 	%r1342, %r1341, 2;
	mul.wide.s32 	%rd57, %r1342, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6262;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1349, %r80, %r6259;
	mul.lo.s32 	%r1350, %r1349, %r66;
	add.s32 	%r1351, %r1350, %r98;
	mul.wide.s32 	%rd59, %r1351, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1352, %r1350, %r99;
	mul.wide.s32 	%rd61, %r1352, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6263, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1353, %r90, %r75;
	shl.b32 	%r1354, %r1353, 2;
	add.s32 	%r1355, %r74, %r1354;
	mul.wide.s32 	%rd63, %r1355, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6263;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1358, %r81, %r6259;
	mul.lo.s32 	%r1359, %r1358, %r66;
	add.s32 	%r1360, %r1359, %r98;
	mul.wide.s32 	%rd65, %r1360, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1361, %r1359, %r99;
	mul.wide.s32 	%rd67, %r1361, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6264, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1362, %r73, %r86;
	mul.wide.s32 	%rd69, %r1362, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6264;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1365, %r82, %r6259;
	mul.lo.s32 	%r1366, %r1365, %r66;
	add.s32 	%r1367, %r1366, %r98;
	mul.wide.s32 	%rd71, %r1367, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1368, %r1366, %r99;
	mul.wide.s32 	%rd73, %r1368, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6265, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1369, %r97, %r75;
	shl.b32 	%r1370, %r1369, 2;
	add.s32 	%r1371, %r74, %r1370;
	add.s32 	%r1372, %r1371, 2;
	mul.wide.s32 	%rd75, %r1372, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6265;
	add.s32 	%r6259, %r6259, %r1258;
	setp.lt.s32 	%p31, %r6259, %r1233;
	@%p31 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6258, %r6258, %r1253;
	setp.lt.s32 	%p32, %r6258, %r1232;
	@%p32 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r111, %r64, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6266, %r6299;

$L__BB0_38:
	setp.ge.s32 	%p34, %r111, %r1233;
	@%p34 bra 	$L__BB0_119;

	mov.u32 	%r6267, %r111;

$L__BB0_40:
	setp.ne.s32 	%p35, %r36, 0;
	@%p35 bra 	$L__BB0_118;

	shr.u32 	%r1374, %r6267, 31;
	add.s32 	%r1375, %r6267, %r1374;
	shr.s32 	%r1376, %r1375, 1;
	mad.lo.s32 	%r1377, %r1376, %r1232, %r6266;
	shl.b32 	%r115, %r1377, 5;
	add.s32 	%r116, %r6267, -2;
	mul.lo.s32 	%r117, %r116, %r1232;
	add.s32 	%r1378, %r1233, %r116;
	mul.lo.s32 	%r118, %r1378, %r1232;
	add.s32 	%r1379, %r1378, %r1233;
	mul.lo.s32 	%r119, %r1379, %r1232;
	add.s32 	%r120, %r117, %r1232;
	add.s32 	%r121, %r6267, -1;
	add.s32 	%r1380, %r1233, %r121;
	mul.lo.s32 	%r122, %r1380, %r1232;
	add.s32 	%r1381, %r1380, %r1233;
	mul.lo.s32 	%r123, %r1381, %r1232;
	add.s32 	%r1382, %r1233, %r6267;
	mul.lo.s32 	%r124, %r1382, %r1232;
	add.s32 	%r1383, %r1382, %r1233;
	mul.lo.s32 	%r125, %r1383, %r1232;
	mul.lo.s32 	%r126, %r6267, %r1232;
	add.s32 	%r127, %r126, %r1232;
	add.s32 	%r128, %r6267, 1;
	add.s32 	%r1384, %r1233, %r128;
	mul.lo.s32 	%r129, %r1384, %r1232;
	add.s32 	%r1385, %r1384, %r1233;
	mul.lo.s32 	%r130, %r1385, %r1232;
	add.s32 	%r131, %r127, %r1232;
	add.s32 	%r132, %r6267, 2;
	add.s32 	%r1386, %r1233, %r132;
	mul.lo.s32 	%r133, %r1386, %r1232;
	add.s32 	%r1387, %r1386, %r1233;
	mul.lo.s32 	%r134, %r1387, %r1232;
	mov.u32 	%r6270, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1388, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1388;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r136, %r1388, %r6266;
	setp.lt.s32 	%p36, %r136, %r1232;
	or.b32  	%r1389, %r116, %r136;
	setp.gt.s32 	%p37, %r1389, -1;
	and.pred  	%p38, %p36, %p37;
	setp.lt.s32 	%p39, %r116, %r1233;
	and.pred  	%p1, %p39, %p38;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p40, %f65, 0f40000000;
	@%p40 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1392, %r117, %r136;
	mul.wide.s32 	%rd80, %r1392, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6269, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6269, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1393, %r6270, %r115;
	mul.wide.s32 	%rd82, %r1393, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6269;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p41, %f3, 0f40000000;
	@%p41 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1396, %r118, %r136;
	mul.wide.s32 	%rd84, %r1396, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6271, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6271, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1397, %r6270, %r115;
	mul.wide.s32 	%rd86, %r1397, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6271;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p42, %f74, 0f40000000;
	@%p42 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1400, %r119, %r136;
	mul.wide.s32 	%rd88, %r1400, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6273, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6273, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1401, %r6270, %r115;
	mul.wide.s32 	%rd90, %r1401, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6273;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_57:
	or.b32  	%r1402, %r121, %r136;
	setp.gt.s32 	%p43, %r1402, -1;
	and.pred  	%p45, %p36, %p43;
	setp.le.s32 	%p46, %r6267, %r1233;
	and.pred  	%p2, %p46, %p45;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p47, %f4, 0f40000000;
	@%p47 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1405, %r120, %r136;
	mul.wide.s32 	%rd92, %r1405, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6275, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6275, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1406, %r6270, %r115;
	mul.wide.s32 	%rd94, %r1406, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6275;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p48, %f5, 0f40000000;
	@%p48 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1409, %r122, %r136;
	mul.wide.s32 	%rd96, %r1409, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6277, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6277, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1410, %r6270, %r115;
	mul.wide.s32 	%rd98, %r1410, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6277;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p49, %f6, 0f40000000;
	@%p49 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1413, %r123, %r136;
	mul.wide.s32 	%rd100, %r1413, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6279, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6279, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1414, %r6270, %r115;
	mul.wide.s32 	%rd102, %r1414, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6279;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_72:
	or.b32  	%r1415, %r6267, %r136;
	setp.gt.s32 	%p50, %r1415, -1;
	and.pred  	%p52, %p36, %p50;
	setp.lt.s32 	%p53, %r6267, %r1233;
	and.pred  	%p3, %p53, %p52;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p54, %f7, 0f40000000;
	@%p54 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1418, %r126, %r136;
	mul.wide.s32 	%rd104, %r1418, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6281, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6281, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1419, %r6270, %r115;
	mul.wide.s32 	%rd106, %r1419, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6281;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p55, %f90, 0f40000000;
	@%p55 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1422, %r124, %r136;
	mul.wide.s32 	%rd108, %r1422, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6283, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6283, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1423, %r6270, %r115;
	mul.wide.s32 	%rd110, %r1423, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6283;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p56, %f8, 0f40000000;
	@%p56 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1426, %r125, %r136;
	mul.wide.s32 	%rd112, %r1426, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6285, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6285, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1427, %r6270, %r115;
	mul.wide.s32 	%rd114, %r1427, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6285;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_87:
	or.b32  	%r1428, %r128, %r136;
	setp.gt.s32 	%p57, %r1428, -1;
	and.pred  	%p59, %p36, %p57;
	setp.lt.s32 	%p60, %r128, %r1233;
	and.pred  	%p4, %p60, %p59;
	@%p54 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1431, %r127, %r136;
	mul.wide.s32 	%rd116, %r1431, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6287, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6287, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1432, %r6270, %r115;
	mul.wide.s32 	%rd118, %r1432, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6287;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_92:
	@%p48 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1435, %r129, %r136;
	mul.wide.s32 	%rd120, %r1435, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6289, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6289, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1436, %r6270, %r115;
	mul.wide.s32 	%rd122, %r1436, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6289;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_97:
	@%p56 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1439, %r130, %r136;
	mul.wide.s32 	%rd124, %r1439, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6291, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6291, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1440, %r6270, %r115;
	mul.wide.s32 	%rd126, %r1440, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6291;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_102:
	or.b32  	%r1441, %r132, %r136;
	setp.gt.s32 	%p64, %r1441, -1;
	and.pred  	%p66, %p36, %p64;
	setp.lt.s32 	%p67, %r132, %r1233;
	and.pred  	%p5, %p67, %p66;
	@%p47 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1444, %r131, %r136;
	mul.wide.s32 	%rd128, %r1444, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6293, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6293, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1445, %r6270, %r115;
	mul.wide.s32 	%rd130, %r1445, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6293;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_107:
	@%p41 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1448, %r133, %r136;
	mul.wide.s32 	%rd132, %r1448, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6295, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6295, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1449, %r6270, %r115;
	mul.wide.s32 	%rd134, %r1449, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6295;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_112:
	@%p49 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1452, %r134, %r136;
	mul.wide.s32 	%rd136, %r1452, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6297, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6297, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1453, %r6270, %r115;
	mul.wide.s32 	%rd138, %r1453, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6297;
	add.s32 	%r6270, %r6270, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p71, %rd455, %rd141;
	@%p71 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6267, %r6267, %r38;
	setp.lt.s32 	%p72, %r6267, %r1233;
	@%p72 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6266, %r6266, %r1253;
	setp.lt.s32 	%p73, %r6266, %r1232;
	@%p73 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p74, %r1236, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p74 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r240, %r64, 1;
	shr.u32 	%r1501, %r1237, 31;
	add.s32 	%r1502, %r1237, %r1501;
	shr.u32 	%r1503, %r1502, 1;
	and.b32  	%r241, %r1503, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p84, %r240, %r1233;
	@%p84 bra 	$L__BB0_266;

	mov.u32 	%r6305, %r240;

$L__BB0_142:
	setp.ne.s32 	%p85, %r36, 0;
	@%p85 bra 	$L__BB0_265;

	shr.u32 	%r1505, %r6305, 31;
	add.s32 	%r1506, %r6305, %r1505;
	shr.s32 	%r1507, %r1506, 1;
	mad.lo.s32 	%r1508, %r1507, %r1232, %r6299;
	shl.b32 	%r245, %r1508, 5;
	add.s32 	%r246, %r6305, -2;
	mul.lo.s32 	%r247, %r246, %r1232;
	add.s32 	%r1509, %r1233, %r246;
	mul.lo.s32 	%r248, %r1509, %r1232;
	add.s32 	%r249, %r247, %r1232;
	add.s32 	%r250, %r6305, -1;
	add.s32 	%r1510, %r1233, %r250;
	mul.lo.s32 	%r251, %r1510, %r1232;
	add.s32 	%r1511, %r1233, %r6305;
	mul.lo.s32 	%r252, %r1511, %r1232;
	mul.lo.s32 	%r253, %r6305, %r1232;
	add.s32 	%r254, %r253, %r1232;
	add.s32 	%r255, %r6305, 1;
	add.s32 	%r1512, %r1233, %r255;
	mul.lo.s32 	%r256, %r1512, %r1232;
	add.s32 	%r257, %r254, %r1232;
	add.s32 	%r258, %r6305, 2;
	add.s32 	%r1513, %r1233, %r258;
	mul.lo.s32 	%r259, %r1513, %r1232;
	mov.u32 	%r6309, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1514, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1514;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r261, %r1514, %r6299;
	setp.lt.s32 	%p86, %r261, %r1232;
	or.b32  	%r1515, %r246, %r261;
	setp.gt.s32 	%p87, %r1515, -1;
	and.pred  	%p88, %p86, %p87;
	setp.lt.s32 	%p89, %r246, %r1233;
	and.pred  	%p6, %p89, %p88;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p90, %f133, 0f40000000;
	@%p90 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p91, %r241, 0;
	add.s32 	%r1517, %r247, %r261;
	shl.b32 	%r1518, %r1517, 1;
	mul.wide.s32 	%rd164, %r1518, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p91 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6307, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6307, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r266, %r6309, %r245;
	mul.wide.s32 	%rd166, %r266, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6307;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p92, %r241, 0;
	add.s32 	%r1522, %r248, %r261;
	shl.b32 	%r1523, %r1522, 1;
	mul.wide.s32 	%rd168, %r1523, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p92 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6308, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1526, %r266, 1;
	mul.wide.s32 	%rd170, %r1526, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6308;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p93, %f13, 0f40000000;
	@%p93 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p94, %r241, 0;
	add.s32 	%r1528, %r247, %r261;
	shl.b32 	%r1529, %r1528, 1;
	or.b32  	%r1530, %r1529, 1;
	mul.wide.s32 	%rd172, %r1530, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p94 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6310, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6310, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r277, %r6309, %r245;
	mul.wide.s32 	%rd174, %r277, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6310;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p95, %r241, 0;
	add.s32 	%r1534, %r248, %r261;
	shl.b32 	%r1535, %r1534, 1;
	or.b32  	%r1536, %r1535, 1;
	mul.wide.s32 	%rd176, %r1536, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p95 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6311, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1539, %r277, 1;
	mul.wide.s32 	%rd178, %r1539, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6311;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_168:
	or.b32  	%r1540, %r250, %r261;
	setp.gt.s32 	%p96, %r1540, -1;
	and.pred  	%p98, %p86, %p96;
	setp.le.s32 	%p99, %r6305, %r1233;
	and.pred  	%p7, %p99, %p98;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p100, %f16, 0f40000000;
	@%p100 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p101, %r241, 0;
	add.s32 	%r1542, %r249, %r261;
	shl.b32 	%r1543, %r1542, 1;
	mul.wide.s32 	%rd180, %r1543, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p101 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6313, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6313, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r288, %r6309, %r245;
	mul.wide.s32 	%rd182, %r288, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6313;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p102, %r241, 0;
	add.s32 	%r1547, %r251, %r261;
	shl.b32 	%r1548, %r1547, 1;
	mul.wide.s32 	%rd184, %r1548, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p102 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6314, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1551, %r288, 1;
	mul.wide.s32 	%rd186, %r1551, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6314;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p103, %f19, 0f40000000;
	@%p103 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p104, %r241, 0;
	add.s32 	%r1553, %r249, %r261;
	shl.b32 	%r1554, %r1553, 1;
	or.b32  	%r1555, %r1554, 1;
	mul.wide.s32 	%rd188, %r1555, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p104 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6316, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6316, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r299, %r6309, %r245;
	mul.wide.s32 	%rd190, %r299, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6316;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p105, %r241, 0;
	add.s32 	%r1559, %r251, %r261;
	shl.b32 	%r1560, %r1559, 1;
	or.b32  	%r1561, %r1560, 1;
	mul.wide.s32 	%rd192, %r1561, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p105 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6317, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1564, %r299, 1;
	mul.wide.s32 	%rd194, %r1564, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6317;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_192:
	or.b32  	%r1565, %r6305, %r261;
	setp.gt.s32 	%p106, %r1565, -1;
	and.pred  	%p108, %p86, %p106;
	setp.lt.s32 	%p109, %r6305, %r1233;
	and.pred  	%p8, %p109, %p108;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p110, %f22, 0f40000000;
	@%p110 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p111, %r241, 0;
	add.s32 	%r1567, %r253, %r261;
	shl.b32 	%r1568, %r1567, 1;
	mul.wide.s32 	%rd196, %r1568, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p111 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6319, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6319, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r310, %r6309, %r245;
	mul.wide.s32 	%rd198, %r310, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6319;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p112, %r241, 0;
	add.s32 	%r1572, %r252, %r261;
	shl.b32 	%r1573, %r1572, 1;
	mul.wide.s32 	%rd200, %r1573, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p112 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6320, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1576, %r310, 1;
	mul.wide.s32 	%rd202, %r1576, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6320;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p113, %f196, 0f40000000;
	@%p113 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p114, %r241, 0;
	add.s32 	%r1578, %r253, %r261;
	shl.b32 	%r1579, %r1578, 1;
	or.b32  	%r1580, %r1579, 1;
	mul.wide.s32 	%rd204, %r1580, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p114 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6322, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6322, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r321, %r6309, %r245;
	mul.wide.s32 	%rd206, %r321, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6322;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p115, %r241, 0;
	add.s32 	%r1584, %r252, %r261;
	shl.b32 	%r1585, %r1584, 1;
	or.b32  	%r1586, %r1585, 1;
	mul.wide.s32 	%rd208, %r1586, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p115 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6323, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1589, %r321, 1;
	mul.wide.s32 	%rd210, %r1589, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6323;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_216:
	or.b32  	%r1590, %r255, %r261;
	setp.gt.s32 	%p116, %r1590, -1;
	and.pred  	%p118, %p86, %p116;
	setp.lt.s32 	%p119, %r255, %r1233;
	and.pred  	%p9, %p119, %p118;
	@%p110 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p121, %r241, 0;
	add.s32 	%r1592, %r254, %r261;
	shl.b32 	%r1593, %r1592, 1;
	mul.wide.s32 	%rd212, %r1593, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p121 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6325, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r332, %r6309, %r245;
	mul.wide.s32 	%rd214, %r332, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6325;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p122, %r241, 0;
	add.s32 	%r1597, %r256, %r261;
	shl.b32 	%r1598, %r1597, 1;
	mul.wide.s32 	%rd216, %r1598, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p122 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6326, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1601, %r332, 1;
	mul.wide.s32 	%rd218, %r1601, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6326;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_228:
	@%p103 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p124, %r241, 0;
	add.s32 	%r1603, %r254, %r261;
	shl.b32 	%r1604, %r1603, 1;
	or.b32  	%r1605, %r1604, 1;
	mul.wide.s32 	%rd220, %r1605, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p124 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6328, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r343, %r6309, %r245;
	mul.wide.s32 	%rd222, %r343, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6328;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p125, %r241, 0;
	add.s32 	%r1609, %r256, %r261;
	shl.b32 	%r1610, %r1609, 1;
	or.b32  	%r1611, %r1610, 1;
	mul.wide.s32 	%rd224, %r1611, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p125 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6329, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1614, %r343, 1;
	mul.wide.s32 	%rd226, %r1614, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6329;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_240:
	or.b32  	%r1615, %r258, %r261;
	setp.gt.s32 	%p126, %r1615, -1;
	and.pred  	%p128, %p86, %p126;
	setp.lt.s32 	%p129, %r258, %r1233;
	and.pred  	%p10, %p129, %p128;
	@%p100 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p131, %r241, 0;
	add.s32 	%r1617, %r257, %r261;
	shl.b32 	%r1618, %r1617, 1;
	mul.wide.s32 	%rd228, %r1618, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p131 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6331, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6331, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r354, %r6309, %r245;
	mul.wide.s32 	%rd230, %r354, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6331;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p132, %r241, 0;
	add.s32 	%r1622, %r259, %r261;
	shl.b32 	%r1623, %r1622, 1;
	mul.wide.s32 	%rd232, %r1623, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p132 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6332, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1626, %r354, 1;
	mul.wide.s32 	%rd234, %r1626, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6332;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_252:
	@%p93 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p134, %r241, 0;
	add.s32 	%r1628, %r257, %r261;
	shl.b32 	%r1629, %r1628, 1;
	or.b32  	%r1630, %r1629, 1;
	mul.wide.s32 	%rd236, %r1630, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p134 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6334, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6334, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r365, %r6309, %r245;
	mul.wide.s32 	%rd238, %r365, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6334;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p135, %r241, 0;
	add.s32 	%r1634, %r259, %r261;
	shl.b32 	%r1635, %r1634, 1;
	or.b32  	%r1636, %r1635, 1;
	mul.wide.s32 	%rd240, %r1636, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p135 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6335, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1639, %r365, 1;
	mul.wide.s32 	%rd242, %r1639, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6335;
	add.s32 	%r6309, %r6309, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p136, %rd456, 0;
	@%p136 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6305, %r6305, %r38;
	setp.lt.s32 	%p137, %r6305, %r1233;
	@%p137 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6299, %r6299, %r1253;
	setp.lt.s32 	%p138, %r6299, %r1232;
	@%p138 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r214, %r63;
	mov.u32 	%r1454, 31;
	sub.s32 	%r1455, %r1454, %r36;
	setp.gt.s32 	%p76, %r35, %r36;
	selp.b32 	%r1456, %r36, %r1455, %p76;
	shl.b32 	%r1457, %r1456, 2;
	mov.u32 	%r1458, 2;
	sub.s32 	%r215, %r1457, %r1235;
	shl.b32 	%r1459, %r1234, 2;
	mov.u32 	%r1460, 128;
	sub.s32 	%r216, %r1460, %r1459;
	sub.s32 	%r1461, %r1458, %r1235;
	add.s32 	%r217, %r1461, %r1457;
	add.s32 	%r218, %r1232, -1;
	add.s32 	%r219, %r215, 1;
	add.s32 	%r220, %r217, 1;
	rem.s32 	%r1486, %r219, %r216;
	add.s32 	%r1487, %r1486, %r216;
	rem.s32 	%r231, %r1487, %r216;
	rem.s32 	%r1488, %r220, %r216;
	add.s32 	%r1489, %r1488, %r216;
	rem.s32 	%r232, %r1489, %r216;

$L__BB0_123:
	setp.ne.s32 	%p77, %r32, %r214;
	@%p77 bra 	$L__BB0_137;

	shl.b32 	%r222, %r6299, 1;
	rem.s32 	%r1462, %r215, %r216;
	add.s32 	%r1463, %r1462, %r216;
	rem.s32 	%r223, %r1463, %r216;
	rem.s32 	%r1464, %r217, %r216;
	add.s32 	%r1465, %r1464, %r216;
	rem.s32 	%r224, %r1465, %r216;
	@%p76 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1468, %r222, %r216;
	add.s32 	%r1469, %r1468, %r223;
	mul.wide.s32 	%rd144, %r1469, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1470, %r1468, %r224;
	mul.wide.s32 	%rd146, %r1470, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6300, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1471, %r6299, 5;
	add.s32 	%r1472, %r1471, %r36;
	shl.b32 	%r1473, %r1472, 2;
	mul.wide.s32 	%rd148, %r1473, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6300;
	@%p76 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1476, %r222, 1;
	mul.lo.s32 	%r1477, %r1476, %r216;
	add.s32 	%r1478, %r1477, %r223;
	mul.wide.s32 	%rd149, %r1478, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1479, %r1477, %r224;
	mul.wide.s32 	%rd151, %r1479, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6301, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1480, %r218, %r6299;
	rem.s32 	%r1481, %r1480, %r1232;
	shl.b32 	%r1482, %r1481, 5;
	add.s32 	%r1483, %r1482, %r36;
	shl.b32 	%r1484, %r1483, 2;
	or.b32  	%r1485, %r1484, 2;
	mul.wide.s32 	%rd153, %r1485, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6301;
	@%p76 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1492, %r222, %r216;
	add.s32 	%r1493, %r1492, %r231;
	mul.wide.s32 	%rd154, %r1493, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1494, %r1492, %r232;
	mul.wide.s32 	%rd156, %r1494, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6302, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6302;
	@%p76 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1497, %r222, 1;
	mul.lo.s32 	%r1498, %r1497, %r216;
	add.s32 	%r1499, %r1498, %r231;
	mul.wide.s32 	%rd158, %r1499, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1500, %r1498, %r232;
	mul.wide.s32 	%rd160, %r1500, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6303, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6303;

$L__BB0_137:
	add.s32 	%r6299, %r6299, %r1253;
	setp.lt.s32 	%p82, %r6299, %r1232;
	@%p82 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1641, %r1227, -1;
	mad.lo.s32 	%r1642, %r1227, 1152, -128;
	add.s32 	%r1643, %r1228, -1;
	mad.lo.s32 	%r1644, %r1228, 896, 128;
	mul.lo.s32 	%r1645, %r1644, %r1641;
	mad.lo.s32 	%r374, %r1642, %r1643, %r1645;
	setp.lt.s32 	%p139, %r374, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6340, {low,high};}

	// end inline asm
	@%p139 bra 	$L__BB0_270;

	mov.u32 	%r6339, 0;
	mov.u32 	%r6337, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6337], %r6340;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1648, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6337+4], %r1648;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1649, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6337+8], %r1649;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1650, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6337+12], %r1650;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6340, {low,high};}

	// end inline asm
	add.s32 	%r6337, %r6337, 16;
	add.s32 	%r6339, %r6339, 4;
	setp.lt.s32 	%p140, %r6339, %r374;
	@%p140 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1652, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1653, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1654, 31;
	sub.s32 	%r1655, %r1654, %r36;
	setp.gt.s32 	%p141, %r35, %r36;
	selp.b32 	%r1656, %r36, %r1655, %p141;
	shl.b32 	%r1657, %r1656, 2;
	sub.s32 	%r385, %r1657, %r1235;
	shl.b32 	%r1658, %r1234, 2;
	mov.u32 	%r1659, 128;
	sub.s32 	%r386, %r1659, %r1658;
	rem.s32 	%r1660, %r385, %r386;
	add.s32 	%r1661, %r1660, %r386;
	rem.s32 	%r387, %r1661, %r386;
	add.s32 	%r1662, %r385, 2;
	rem.s32 	%r1663, %r1662, %r386;
	add.s32 	%r1664, %r1663, %r386;
	rem.s32 	%r388, %r1664, %r386;
	mul.lo.s32 	%r1665, %r387, 6;
	mul.lo.s32 	%r1666, %r388, 6;
	mul.wide.s32 	%rd245, %r1665, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1666, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6341, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6341, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6342, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6343, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6343, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6344, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1675, %r385, 1;
	rem.s32 	%r1676, %r1675, %r386;
	add.s32 	%r1677, %r1676, %r386;
	rem.s32 	%r401, %r1677, %r386;
	add.s32 	%r1678, %r385, 3;
	rem.s32 	%r1679, %r1678, %r386;
	add.s32 	%r1680, %r1679, %r386;
	rem.s32 	%r402, %r1680, %r386;
	mul.lo.s32 	%r1681, %r401, 6;
	mul.lo.s32 	%r1682, %r402, 6;
	mul.wide.s32 	%rd247, %r1681, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1682, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6345, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6346, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6346, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6347, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6348, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6348, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1691, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1691;
	// begin inline asm
	mov.u32 %r1692, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1692;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p150, %rd24, 0;
	@%p150 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1693, %nctaid.y;
	mov.u32 	%r1694, %nctaid.x;
	mul.lo.s32 	%r1695, %r1694, %r1693;
	mov.u32 	%r1696, %nctaid.z;
	mul.lo.s32 	%r415, %r1695, %r1696;
	neg.s32 	%r1697, %r32;
	add.s32 	%r1698, %r36, %r31;
	setp.ne.s32 	%p151, %r1698, %r1697;
	mov.u32 	%r1699, %ctaid.x;
	add.s32 	%r416, %r1699, %r33;
	neg.s32 	%r417, %r34;
	bar.sync 	0;
	@%p151 bra 	$L__BB0_300;

	setp.eq.s32 	%p152, %r416, %r417;
	mov.u32 	%r1702, -2147483647;
	sub.s32 	%r1703, %r1702, %r415;
	selp.b32 	%r1701, %r1703, 1, %p152;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1700,[%rd25],%r1701;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1704, [%rd25];
	xor.b32  	%r1705, %r1704, %r1700;
	setp.gt.s32 	%p153, %r1705, -1;
	@%p153 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1706,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p154, %r39, 1;
	@%p154 bra 	$L__BB0_790;

	shr.s32 	%r1708, %r1237, 31;
	shr.u32 	%r1709, %r1708, 30;
	add.s32 	%r1710, %r1237, %r1709;
	shr.s32 	%r419, %r1710, 2;
	add.s32 	%r1711, %r36, 24;
	mul.hi.s32 	%r1712, %r1711, 1374389535;
	shr.u32 	%r1713, %r1712, 31;
	shr.s32 	%r1714, %r1712, 3;
	add.s32 	%r1715, %r1714, %r1713;
	mul.lo.s32 	%r1716, %r1715, 25;
	sub.s32 	%r1717, %r1711, %r1716;
	add.s32 	%r1718, %r36, 26;
	mul.hi.s32 	%r1719, %r1718, 1374389535;
	shr.u32 	%r1720, %r1719, 31;
	shr.s32 	%r1721, %r1719, 3;
	add.s32 	%r1722, %r1721, %r1720;
	mul.lo.s32 	%r1723, %r1722, 25;
	sub.s32 	%r1724, %r1718, %r1723;
	setp.lt.s32 	%p155, %r36, 25;
	selp.b32 	%r420, %r1717, %r36, %p155;
	shr.u32 	%r1725, %r1237, 31;
	add.s32 	%r1726, %r1237, %r1725;
	and.b32  	%r1727, %r1726, -2;
	sub.s32 	%r421, %r1237, %r1727;
	setp.lt.s32 	%p156, %r387, %r1246;
	setp.ge.s32 	%p157, %r387, %r1245;
	and.pred  	%p11, %p156, %p157;
	setp.lt.s32 	%p158, %r401, %r1246;
	setp.ge.s32 	%p159, %r401, %r1245;
	and.pred  	%p12, %p158, %p159;
	setp.lt.s32 	%p160, %r388, %r1246;
	setp.ge.s32 	%p161, %r388, %r1245;
	and.pred  	%p13, %p160, %p161;
	setp.lt.s32 	%p162, %r402, %r1246;
	setp.ge.s32 	%p163, %r402, %r1245;
	and.pred  	%p14, %p162, %p163;
	selp.b32 	%r422, %r1724, %r36, %p155;
	mov.u32 	%r1707, 0;
	// begin inline asm
	{mov.u32 %r1728, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2053, %r1728, 8;
	add.s32 	%r2054, %r2053, -8192;
	or.b32  	%r1732, %r2054, 31;
	// begin inline asm
	{sub.f16x2 %r5133,%r1653,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5136,%r6343,%r5133;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1653;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6151,%r6344,%r5133;
}
	// end inline asm
	mov.u32 	%r6349, %r1653;
	mov.u32 	%r6350, %r1653;
	mov.u32 	%r6351, %r1653;
	mov.u32 	%r6352, %r1653;
	mov.u32 	%r6353, %r1653;
	mov.u32 	%r6354, %r1653;
	mov.u32 	%r6355, %r1653;
	mov.u32 	%r6356, %r1653;
	mov.u32 	%r6357, %r1653;
	mov.u32 	%r6358, %r1653;
	mov.u32 	%r6359, %r1653;
	mov.u32 	%r6360, %r1653;
	mov.u32 	%r6361, %r1653;
	mov.u32 	%r6362, %r1653;
	mov.u32 	%r6363, %r1653;
	mov.u32 	%r6364, %r1653;
	mov.u32 	%r6365, %r1653;
	mov.u32 	%r6366, %r1653;
	mov.u32 	%r6367, %r1653;
	mov.u32 	%r6368, %r1653;
	mov.u32 	%r6369, %r1653;
	mov.u32 	%r6370, %r1653;
	mov.u32 	%r6371, %r1653;
	mov.u32 	%r6372, %r1653;
	mov.u32 	%r6373, %r1653;
	mov.u32 	%r6374, %r1653;
	mov.u32 	%r6375, %r1653;
	mov.u32 	%r6376, %r1653;
	mov.u32 	%r6377, %r1653;
	mov.u32 	%r6378, %r1653;
	mov.u32 	%r6379, %r1653;
	mov.u32 	%r6380, %r1653;
	mov.u32 	%r6381, %r1653;
	mov.u32 	%r6382, %r1653;
	mov.u32 	%r6383, %r1653;
	mov.u32 	%r6384, %r1653;
	mov.u32 	%r6385, %r1653;
	mov.u32 	%r6386, %r1653;
	mov.u32 	%r6387, %r1653;
	mov.u32 	%r6388, %r1653;
	mov.u32 	%r6389, %r1653;
	mov.u32 	%r6390, %r1653;
	mov.u32 	%r6391, %r1653;
	mov.u32 	%r6392, %r1653;
	mov.u32 	%r6393, %r1653;
	mov.u32 	%r6394, %r1653;
	mov.u32 	%r6395, %r1653;
	mov.u32 	%r6396, %r1653;
	mov.u32 	%r6397, %r1653;
	mov.u32 	%r6398, %r1653;
	mov.u32 	%r6399, %r1653;
	mov.u32 	%r6400, %r1653;
	mov.u32 	%r6401, %r1653;
	mov.u32 	%r6402, %r1653;
	mov.u32 	%r6403, %r1653;
	mov.u32 	%r6404, %r1653;
	mov.u32 	%r6405, %r1653;
	mov.u32 	%r6406, %r1653;
	mov.u32 	%r6407, %r1653;
	mov.u32 	%r6408, %r1653;
	mov.u32 	%r6409, %r1653;
	mov.u32 	%r6410, %r1653;
	mov.u32 	%r6411, %r1653;
	mov.u32 	%r6412, %r1653;
	mov.u32 	%r6413, %r1653;
	mov.u32 	%r6414, %r1653;
	mov.u32 	%r6415, %r1653;
	mov.u32 	%r6416, %r1653;
	mov.u32 	%r6417, %r1653;
	mov.u32 	%r6418, %r1653;
	mov.u32 	%r6419, %r1653;
	mov.u32 	%r6420, %r1653;
	mov.u32 	%r6421, %r1653;
	mov.u32 	%r6422, %r1653;
	mov.u32 	%r6423, %r1707;

$L__BB0_302:
	mov.u32 	%r6250, %tid.y;
	mov.u32 	%r6249, %tid.z;
	mov.u32 	%r6248, %ctaid.y;
	mov.u32 	%r6247, %ctaid.z;
	mov.u32 	%r1743, 1;
	not.b32 	%r2017, %r6247;
	mov.u32 	%r2009, -1;
	add.s32 	%r2018, %r1230, %r2017;
	not.b32 	%r2020, %r6248;
	add.s32 	%r2021, %r1229, %r2020;
	add.s32 	%r2022, %r2021, %r2018;
	mul.lo.s32 	%r2023, %r2022, %r1231;
	add.s32 	%r2024, %r2023, %r1232;
	not.b32 	%r2026, %r6250;
	add.s32 	%r2027, %r1227, %r2026;
	mad.lo.s32 	%r2028, %r2021, %r1227, %r2027;
	not.b32 	%r2030, %r6249;
	add.s32 	%r2031, %r1228, %r2030;
	mad.lo.s32 	%r2032, %r2018, %r1228, %r2031;
	add.s32 	%r2033, %r2028, %r2032;
	shl.b32 	%r2034, %r2033, 1;
	add.s32 	%r2035, %r2024, %r2034;
	add.s32 	%r2036, %r2035, %r6423;
	add.s32 	%r2037, %r6423, %r2023;
	div.s32 	%r2038, %r2036, %r1232;
	mul.lo.s32 	%r2039, %r2038, %r1232;
	sub.s32 	%r2042, %r38, %r1232;
	sub.s32 	%r2043, %r2028, %r2032;
	shl.b32 	%r2044, %r2043, 1;
	add.s32 	%r2045, %r2044, %r1233;
	mad.lo.s32 	%r2046, %r2038, %r38, %r2045;
	mad.lo.s32 	%r2047, %r2038, %r2042, %r2037;
	div.s32 	%r2048, %r2046, %r1233;
	mul.lo.s32 	%r2049, %r2048, %r1233;
	sub.s32 	%r2052, %r1254, %r1233;
	mov.u32 	%r1827, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1729,%r1652,%r1707,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1735, %r6342, %r1729, %p15;
	// begin inline asm
	{mul.f16x2 %r6507,%r1735,%r6422;
}
	// end inline asm
	selp.b32 	%r1738, %r6346, %r1729, %p15;
	// begin inline asm
	{mul.f16x2 %r6505,%r1738,%r6421;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1741,%r1652,%r1743,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1747, %r6342, %r1741, %p15;
	// begin inline asm
	{mul.f16x2 %r6506,%r1747,%r6420;
}
	// end inline asm
	selp.b32 	%r1750, %r6346, %r1741, %p15;
	// begin inline asm
	{mul.f16x2 %r6504,%r1750,%r6419;
}
	// end inline asm
	mov.u32 	%r1755, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1753,%r1652,%r1755,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1759, %r6342, %r1753, %p15;
	// begin inline asm
	{mul.f16x2 %r6503,%r1759,%r6418;
}
	// end inline asm
	selp.b32 	%r1762, %r6346, %r1753, %p15;
	// begin inline asm
	{mul.f16x2 %r6502,%r1762,%r6417;
}
	// end inline asm
	mov.u32 	%r1767, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1765,%r1652,%r1767,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1771, %r6342, %r1765, %p15;
	// begin inline asm
	{mul.f16x2 %r6501,%r1771,%r1653;
}
	// end inline asm
	selp.b32 	%r1774, %r6346, %r1765, %p15;
	// begin inline asm
	{mul.f16x2 %r6499,%r1774,%r1653;
}
	// end inline asm
	mov.u32 	%r1779, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1777,%r1652,%r1779,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1783, %r6342, %r1777, %p15;
	// begin inline asm
	{mul.f16x2 %r6500,%r1783,%r6416;
}
	// end inline asm
	selp.b32 	%r1786, %r6346, %r1777, %p15;
	// begin inline asm
	{mul.f16x2 %r6498,%r1786,%r6415;
}
	// end inline asm
	mov.u32 	%r1791, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1789,%r1652,%r1791,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1795, %r6342, %r1789, %p15;
	// begin inline asm
	{mul.f16x2 %r6497,%r1795,%r6414;
}
	// end inline asm
	selp.b32 	%r1798, %r6346, %r1789, %p15;
	// begin inline asm
	{mul.f16x2 %r6494,%r1798,%r6413;
}
	// end inline asm
	mov.u32 	%r1803, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1801,%r1652,%r1803,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1807, %r6342, %r1801, %p15;
	// begin inline asm
	{mul.f16x2 %r6496,%r1807,%r6412;
}
	// end inline asm
	selp.b32 	%r1810, %r6346, %r1801, %p15;
	// begin inline asm
	{mul.f16x2 %r6493,%r1810,%r6411;
}
	// end inline asm
	mov.u32 	%r1815, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1813,%r1652,%r1815,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1819, %r6342, %r1813, %p15;
	// begin inline asm
	{mul.f16x2 %r6495,%r1819,%r6410;
}
	// end inline asm
	selp.b32 	%r1822, %r6346, %r1813, %p15;
	// begin inline asm
	{mul.f16x2 %r6492,%r1822,%r6409;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1825,%r1652,%r1827,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1831, %r6342, %r1825, %p15;
	// begin inline asm
	{mul.f16x2 %r6491,%r1831,%r6408;
}
	// end inline asm
	selp.b32 	%r1834, %r6346, %r1825, %p15;
	// begin inline asm
	{mul.f16x2 %r6488,%r1834,%r6407;
}
	// end inline asm
	mov.u32 	%r1839, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1837,%r1652,%r1839,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1843, %r6342, %r1837, %p15;
	// begin inline asm
	{mul.f16x2 %r6490,%r1843,%r6406;
}
	// end inline asm
	selp.b32 	%r1846, %r6346, %r1837, %p15;
	// begin inline asm
	{mul.f16x2 %r6487,%r1846,%r6405;
}
	// end inline asm
	mov.u32 	%r1851, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1849,%r1652,%r1851,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1855, %r6342, %r1849, %p15;
	// begin inline asm
	{mul.f16x2 %r6489,%r1855,%r6404;
}
	// end inline asm
	selp.b32 	%r1858, %r6346, %r1849, %p15;
	// begin inline asm
	{mul.f16x2 %r6486,%r1858,%r6403;
}
	// end inline asm
	mov.u32 	%r1863, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1861,%r1652,%r1863,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1867, %r6342, %r1861, %p15;
	// begin inline asm
	{mul.f16x2 %r6485,%r1867,%r1653;
}
	// end inline asm
	selp.b32 	%r1870, %r6346, %r1861, %p15;
	// begin inline asm
	{mul.f16x2 %r6484,%r1870,%r1653;
}
	// end inline asm
	mov.u32 	%r1875, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1873,%r1652,%r1875,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1879, %r6342, %r1873, %p15;
	// begin inline asm
	{mul.f16x2 %r6483,%r1879,%r1653;
}
	// end inline asm
	selp.b32 	%r1882, %r6346, %r1873, %p15;
	// begin inline asm
	{mul.f16x2 %r6481,%r1882,%r1653;
}
	// end inline asm
	mov.u32 	%r1887, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1885,%r1652,%r1887,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1891, %r6342, %r1885, %p15;
	// begin inline asm
	{mul.f16x2 %r6482,%r1891,%r1653;
}
	// end inline asm
	selp.b32 	%r1894, %r6346, %r1885, %p15;
	// begin inline asm
	{mul.f16x2 %r6480,%r1894,%r1653;
}
	// end inline asm
	mov.u32 	%r1899, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1897,%r1652,%r1899,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1903, %r6342, %r1897, %p15;
	// begin inline asm
	{mul.f16x2 %r6479,%r1903,%r1653;
}
	// end inline asm
	selp.b32 	%r1906, %r6346, %r1897, %p15;
	// begin inline asm
	{mul.f16x2 %r6476,%r1906,%r1653;
}
	// end inline asm
	mov.u32 	%r1911, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r1909,%r1652,%r1911,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1915, %r6342, %r1909, %p15;
	// begin inline asm
	{mul.f16x2 %r6478,%r1915,%r6402;
}
	// end inline asm
	selp.b32 	%r1918, %r6346, %r1909, %p15;
	// begin inline asm
	{mul.f16x2 %r6475,%r1918,%r6401;
}
	// end inline asm
	mov.u32 	%r1923, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r1921,%r1652,%r1923,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1927, %r6342, %r1921, %p15;
	// begin inline asm
	{mul.f16x2 %r6477,%r1927,%r6400;
}
	// end inline asm
	selp.b32 	%r1930, %r6346, %r1921, %p15;
	// begin inline asm
	{mul.f16x2 %r6474,%r1930,%r6399;
}
	// end inline asm
	mov.u32 	%r1935, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r1933,%r1652,%r1935,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1939, %r6342, %r1933, %p15;
	// begin inline asm
	{mul.f16x2 %r6473,%r1939,%r1653;
}
	// end inline asm
	selp.b32 	%r1942, %r6346, %r1933, %p15;
	// begin inline asm
	{mul.f16x2 %r6470,%r1942,%r1653;
}
	// end inline asm
	mov.u32 	%r1947, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r1945,%r1652,%r1947,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1951, %r6342, %r1945, %p15;
	// begin inline asm
	{mul.f16x2 %r6472,%r1951,%r1653;
}
	// end inline asm
	selp.b32 	%r1954, %r6346, %r1945, %p15;
	// begin inline asm
	{mul.f16x2 %r6469,%r1954,%r1653;
}
	// end inline asm
	mov.u32 	%r1959, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r1957,%r1652,%r1959,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1963, %r6342, %r1957, %p15;
	// begin inline asm
	{mul.f16x2 %r6471,%r1963,%r6398;
}
	// end inline asm
	selp.b32 	%r1966, %r6346, %r1957, %p15;
	// begin inline asm
	{mul.f16x2 %r6468,%r1966,%r6397;
}
	// end inline asm
	mov.u32 	%r1971, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r1969,%r1652,%r1971,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1975, %r6342, %r1969, %p15;
	// begin inline asm
	{mul.f16x2 %r6467,%r1975,%r1653;
}
	// end inline asm
	selp.b32 	%r1978, %r6346, %r1969, %p15;
	// begin inline asm
	{mul.f16x2 %r6466,%r1978,%r1653;
}
	// end inline asm
	mov.u32 	%r1983, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r1981,%r1652,%r1983,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1987, %r6342, %r1981, %p15;
	// begin inline asm
	{mul.f16x2 %r6465,%r1987,%r1653;
}
	// end inline asm
	selp.b32 	%r1990, %r6346, %r1981, %p15;
	// begin inline asm
	{mul.f16x2 %r6463,%r1990,%r1653;
}
	// end inline asm
	mov.u32 	%r1995, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r1993,%r1652,%r1995,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r1999, %r6342, %r1993, %p15;
	// begin inline asm
	{mul.f16x2 %r6464,%r1999,%r1653;
}
	// end inline asm
	selp.b32 	%r2002, %r6346, %r1993, %p15;
	// begin inline asm
	{mul.f16x2 %r6462,%r2002,%r1653;
}
	// end inline asm
	mov.u32 	%r2007, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2005,%r1652,%r2007,%r1732,%r2009;
}
	// end inline asm
	selp.b32 	%r2011, %r6342, %r2005, %p15;
	// begin inline asm
	{mul.f16x2 %r6461,%r2011,%r1653;
}
	// end inline asm
	selp.b32 	%r2014, %r6346, %r2005, %p15;
	// begin inline asm
	{mul.f16x2 %r6460,%r2014,%r1653;
}
	// end inline asm
	sub.s32 	%r546, %r2036, %r2039;
	sub.s32 	%r547, %r2046, %r2049;
	mad.lo.s32 	%r548, %r2048, %r2052, %r2047;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2101, %r548, 1;
	mul.wide.s32 	%rd256, %r2101, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p74 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	mov.u32 	%r6251, %tid.x;
	add.s32 	%r2304, %r1249, 1;
	setp.lt.s32 	%p171, %r548, %r2304;
	setp.eq.s32 	%p172, %r419, %r6251;
	setp.gt.s32 	%p173, %r548, -1;
	and.pred  	%p174, %p172, %p173;
	and.pred  	%p175, %p171, %p174;
	@%p175 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r6426, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r6427, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2104, %r1249, 1;
	setp.lt.s32 	%p166, %r548, %r2104;
	setp.gt.s32 	%p167, %r548, -1;
	and.pred  	%p168, %p167, %p166;
	@%p168 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r6424, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r6425, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6427, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2312, 0;
	mov.u32 	%r2323, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2310,%r6340,%r2312,%r1732,%r2323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2315,%r6426,%r2310;
}
	// end inline asm
	mov.u32 	%r2321, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2319,%r6340,%r2321,%r1732,%r2323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2324,%r6427,%r2319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6429,%r2315,%r2324;
}
	// end inline asm
	setp.eq.s32 	%p176, %r421, 0;
	mov.u32 	%r6428, %r6429;
	@%p176 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r6428, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r6507,%r6507,%r6428;
}
	// end inline asm
	setp.eq.s32 	%p177, %r421, 1;
	@%p177 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6429, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r6505,%r6505,%r6429;
}
	// end inline asm
	mov.u32 	%r2345, 2;
	mov.u32 	%r2356, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2343,%r6340,%r2345,%r1732,%r2356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2348,%r6426,%r2343;
}
	// end inline asm
	mov.u32 	%r2354, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2352,%r6340,%r2354,%r1732,%r2356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2357,%r6427,%r2352;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6431,%r2348,%r2357;
}
	// end inline asm
	mov.u32 	%r6430, %r6431;
	@%p176 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r6430, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r6506,%r6506,%r6430;
}
	// end inline asm
	@%p177 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r6431, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r6504,%r6504,%r6431;
}
	// end inline asm
	mov.u32 	%r2378, 4;
	mov.u32 	%r2389, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2376,%r6340,%r2378,%r1732,%r2389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2381,%r6426,%r2376;
}
	// end inline asm
	mov.u32 	%r2387, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2385,%r6340,%r2387,%r1732,%r2389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2390,%r6427,%r2385;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6433,%r2381,%r2390;
}
	// end inline asm
	mov.u32 	%r6432, %r6433;
	@%p176 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6432, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r6503,%r6503,%r6432;
}
	// end inline asm
	@%p177 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r6433, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r6502,%r6502,%r6433;
}
	// end inline asm
	mov.u32 	%r2411, 6;
	mov.u32 	%r2422, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2409,%r6340,%r2411,%r1732,%r2422;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2414,%r6426,%r2409;
}
	// end inline asm
	mov.u32 	%r2420, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2418,%r6340,%r2420,%r1732,%r2422;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2423,%r6427,%r2418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6435,%r2414,%r2423;
}
	// end inline asm
	mov.u32 	%r6434, %r6435;
	@%p176 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r6434, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r6501,%r6501,%r6434;
}
	// end inline asm
	@%p177 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r6435, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r6499,%r6499,%r6435;
}
	// end inline asm
	mov.u32 	%r2444, 8;
	mov.u32 	%r2455, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2442,%r6340,%r2444,%r1732,%r2455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2447,%r6426,%r2442;
}
	// end inline asm
	mov.u32 	%r2453, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2451,%r6340,%r2453,%r1732,%r2455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2456,%r6427,%r2451;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6437,%r2447,%r2456;
}
	// end inline asm
	mov.u32 	%r6436, %r6437;
	@%p176 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r6436, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r6500,%r6500,%r6436;
}
	// end inline asm
	@%p177 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r6437, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r6498,%r6498,%r6437;
}
	// end inline asm
	mov.u32 	%r2477, 10;
	mov.u32 	%r2488, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2475,%r6340,%r2477,%r1732,%r2488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2480,%r6426,%r2475;
}
	// end inline asm
	mov.u32 	%r2486, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2484,%r6340,%r2486,%r1732,%r2488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2489,%r6427,%r2484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6439,%r2480,%r2489;
}
	// end inline asm
	mov.u32 	%r6438, %r6439;
	@%p176 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r6438, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r6497,%r6497,%r6438;
}
	// end inline asm
	@%p177 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r6439, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r6494,%r6494,%r6439;
}
	// end inline asm
	mov.u32 	%r2510, 12;
	mov.u32 	%r2521, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2508,%r6340,%r2510,%r1732,%r2521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2513,%r6426,%r2508;
}
	// end inline asm
	mov.u32 	%r2519, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2517,%r6340,%r2519,%r1732,%r2521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2522,%r6427,%r2517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6441,%r2513,%r2522;
}
	// end inline asm
	mov.u32 	%r6440, %r6441;
	@%p176 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r6440, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r6496,%r6496,%r6440;
}
	// end inline asm
	@%p177 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r6441, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r6493,%r6493,%r6441;
}
	// end inline asm
	mov.u32 	%r2543, 14;
	mov.u32 	%r2554, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2541,%r6340,%r2543,%r1732,%r2554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2546,%r6426,%r2541;
}
	// end inline asm
	mov.u32 	%r2552, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2550,%r6340,%r2552,%r1732,%r2554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2555,%r6427,%r2550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6443,%r2546,%r2555;
}
	// end inline asm
	mov.u32 	%r6442, %r6443;
	@%p176 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r6442, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r6491,%r6491,%r6442;
}
	// end inline asm
	@%p177 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r6443, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6488,%r6488,%r6443;
}
	// end inline asm
	mov.u32 	%r2576, 16;
	mov.u32 	%r2587, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2574,%r6340,%r2576,%r1732,%r2587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2579,%r6426,%r2574;
}
	// end inline asm
	mov.u32 	%r2585, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2583,%r6340,%r2585,%r1732,%r2587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2588,%r6427,%r2583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6445,%r2579,%r2588;
}
	// end inline asm
	mov.u32 	%r6444, %r6445;
	@%p176 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r6444, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6490,%r6490,%r6444;
}
	// end inline asm
	@%p177 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r6445, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6487,%r6487,%r6445;
}
	// end inline asm
	mov.u32 	%r2609, 18;
	mov.u32 	%r2620, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2607,%r6340,%r2609,%r1732,%r2620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2612,%r6426,%r2607;
}
	// end inline asm
	mov.u32 	%r2618, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2616,%r6340,%r2618,%r1732,%r2620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2621,%r6427,%r2616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6447,%r2612,%r2621;
}
	// end inline asm
	mov.u32 	%r6446, %r6447;
	@%p176 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r6446, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6485,%r6485,%r6446;
}
	// end inline asm
	@%p177 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r6447, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6484,%r6484,%r6447;
}
	// end inline asm
	mov.u32 	%r2642, 20;
	mov.u32 	%r2653, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2640,%r6340,%r2642,%r1732,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2645,%r6426,%r2640;
}
	// end inline asm
	mov.u32 	%r2651, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2649,%r6340,%r2651,%r1732,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2654,%r6427,%r2649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6449,%r2645,%r2654;
}
	// end inline asm
	mov.u32 	%r6448, %r6449;
	@%p176 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r6448, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6483,%r6483,%r6448;
}
	// end inline asm
	@%p177 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r6449, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6481,%r6481,%r6449;
}
	// end inline asm
	mov.u32 	%r2675, 22;
	mov.u32 	%r2686, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2673,%r6340,%r2675,%r1732,%r2686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2678,%r6426,%r2673;
}
	// end inline asm
	mov.u32 	%r2684, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2682,%r6340,%r2684,%r1732,%r2686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2687,%r6427,%r2682;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6451,%r2678,%r2687;
}
	// end inline asm
	mov.u32 	%r6450, %r6451;
	@%p176 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r6450, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6479,%r6479,%r6450;
}
	// end inline asm
	@%p177 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r6451, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6476,%r6476,%r6451;
}
	// end inline asm
	mov.u32 	%r2708, 24;
	mov.u32 	%r2719, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2706,%r6340,%r2708,%r1732,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2711,%r6426,%r2706;
}
	// end inline asm
	mov.u32 	%r2717, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2715,%r6340,%r2717,%r1732,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2720,%r6427,%r2715;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6453,%r2711,%r2720;
}
	// end inline asm
	mov.u32 	%r6452, %r6453;
	@%p176 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r6452, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6478,%r6478,%r6452;
}
	// end inline asm
	@%p177 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r6453, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6475,%r6475,%r6453;
}
	// end inline asm
	mov.u32 	%r2741, 26;
	mov.u32 	%r2752, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2739,%r6340,%r2741,%r1732,%r2752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2744,%r6426,%r2739;
}
	// end inline asm
	mov.u32 	%r2750, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2748,%r6340,%r2750,%r1732,%r2752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2753,%r6427,%r2748;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6455,%r2744,%r2753;
}
	// end inline asm
	mov.u32 	%r6454, %r6455;
	@%p176 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r6454, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6473,%r6473,%r6454;
}
	// end inline asm
	@%p177 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r6455, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6470,%r6470,%r6455;
}
	// end inline asm
	mov.u32 	%r2774, 28;
	mov.u32 	%r2785, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2772,%r6340,%r2774,%r1732,%r2785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2777,%r6426,%r2772;
}
	// end inline asm
	mov.u32 	%r2783, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2781,%r6340,%r2783,%r1732,%r2785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2786,%r6427,%r2781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6457,%r2777,%r2786;
}
	// end inline asm
	mov.u32 	%r6456, %r6457;
	@%p176 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r6456, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6472,%r6472,%r6456;
}
	// end inline asm
	@%p177 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r6457, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6469,%r6469,%r6457;
}
	// end inline asm
	mov.u32 	%r2816, 31;
	mov.u32 	%r2807, 30;
	mov.u32 	%r2818, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2805,%r6340,%r2807,%r1732,%r2818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2810,%r6426,%r2805;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2814,%r6340,%r2816,%r1732,%r2818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2819,%r6427,%r2814;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6459,%r2810,%r2819;
}
	// end inline asm
	mov.u32 	%r6458, %r6459;
	@%p176 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r6458, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6465,%r6465,%r6458;
}
	// end inline asm
	@%p177 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r6459, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6463,%r6463,%r6459;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6424, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6425, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p169, %r547, %r1237;
	@%p169 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2298, 0;
	// begin inline asm
	{mul.f16x2 %r2206,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6507,%r6507,%r2206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2212,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6495,%r6495,%r2212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2218,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6497,%r6497,%r2218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2224,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6477,%r6477,%r2224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2230,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6479,%r6479,%r2230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2236,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r6464,%r2236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2242,%r6425,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6501,%r6501,%r2242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2248,%r6425,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6482,%r6482,%r2248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2254,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6505,%r6505,%r2254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2260,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6492,%r6492,%r2260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2266,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6494,%r6494,%r2266;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2272,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6474,%r6474,%r2272;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2278,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6476,%r6476,%r2278;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2284,%r6424,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6462,%r6462,%r2284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2290,%r6425,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6499,%r6499,%r2290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2296,%r6425,%r2298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6480,%r6480,%r2296;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2109, %r1237, -2;
	setp.ne.s32 	%p170, %r547, %r2109;
	@%p170 bra 	$L__BB0_378;

	mov.u32 	%r2202, 0;
	// begin inline asm
	{mul.f16x2 %r2110,%r6424,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6485,%r6485,%r2110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2116,%r6424,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r6467,%r2116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2122,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6503,%r2122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2128,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6489,%r6489,%r2128;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2134,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6491,%r6491,%r2134;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2140,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6471,%r6471,%r2140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2146,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6473,%r6473,%r2146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2152,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6461,%r6461,%r2152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2158,%r6424,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6484,%r6484,%r2158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2164,%r6424,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6466,%r6466,%r2164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2170,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6502,%r2170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2176,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6486,%r6486,%r2176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2182,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6488,%r6488,%r2182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2188,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6468,%r6468,%r2188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2194,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6470,%r6470,%r2194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2200,%r6425,%r2202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r6460,%r2200;
}
	// end inline asm

$L__BB0_378:
	mov.u32 	%r2842, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2838,%r6395,%r420,%r1732,%r2842;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2838;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6395;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2845, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2846,%r6396,%r2845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2849,%r6341,%r2846;
}
	// end inline asm
	@%p15 bra 	$L__BB0_380;
	bra.uni 	$L__BB0_379;

$L__BB0_380:
	// begin inline asm
	{neg.f16x2 %r6508,%r6507;
}
	// end inline asm
	bra.uni 	$L__BB0_381;

$L__BB0_379:
	// begin inline asm
	{mul.f16x2 %r6508,%r6342,%r2846;
}
	// end inline asm

$L__BB0_381:
	mov.u32 	%r2862, 31;
	mov.u32 	%r2885, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2860,%r6508,%r2862,%r1732,%r2885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2865,%r2849,%r2860;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2868,%r6394,%r6393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2871,%r2868,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r1653,%r2871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2877,%r6507,%r2874;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2881,%r6391,%r420,%r1732,%r2885;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2881;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6391;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2888, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2889,%r6392,%r2888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2892,%r6341,%r2889;
}
	// end inline asm
	mov.u32 	%r6509, %r6506;
	@%p15 bra 	$L__BB0_383;

	// begin inline asm
	{mul.f16x2 %r6509,%r6342,%r2889;
}
	// end inline asm

$L__BB0_383:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2903,%r6509,%r2862,%r1732,%r2885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2908,%r2892,%r2903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2911,%r6394,%r6390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2914,%r2908,%r2911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2917,%r1653,%r2914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2920,%r6506,%r2917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2923,%r6395,%r6396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2926,%r6345,%r2923;
}
	// end inline asm
	@%p15 bra 	$L__BB0_385;
	bra.uni 	$L__BB0_384;

$L__BB0_385:
	// begin inline asm
	{neg.f16x2 %r6510,%r6505;
}
	// end inline asm
	bra.uni 	$L__BB0_386;

$L__BB0_384:
	// begin inline asm
	{mul.f16x2 %r6510,%r6346,%r2923;
}
	// end inline asm

$L__BB0_386:
	mov.u32 	%r2939, 31;
	mov.u32 	%r2941, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2937,%r6510,%r2939,%r1732,%r2941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2942,%r2926,%r2937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2945,%r6389,%r6388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2948,%r2945,%r2942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r1653,%r2948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2954,%r6505,%r2951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2957,%r6391,%r6392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r6345,%r2957;
}
	// end inline asm
	mov.u32 	%r6511, %r6504;
	@%p15 bra 	$L__BB0_388;

	// begin inline asm
	{mul.f16x2 %r6511,%r6346,%r2957;
}
	// end inline asm

$L__BB0_388:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2969,%r6511,%r2939,%r1732,%r2941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2974,%r2960,%r2969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2977,%r6389,%r6387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2980,%r2974,%r2977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2983,%r1653,%r2980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2986,%r6504,%r2983;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2990,%r6385,%r420,%r1732,%r2941;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2990;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6385;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2997, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2998,%r6386,%r2997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3001,%r6341,%r2998;
}
	// end inline asm
	@%p15 bra 	$L__BB0_390;
	bra.uni 	$L__BB0_389;

$L__BB0_390:
	// begin inline asm
	{neg.f16x2 %r6512,%r6503;
}
	// end inline asm
	bra.uni 	$L__BB0_391;

$L__BB0_389:
	// begin inline asm
	{mul.f16x2 %r6512,%r6342,%r2998;
}
	// end inline asm

$L__BB0_391:
	mov.u32 	%r3016, 31;
	mov.u32 	%r3018, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3014,%r6512,%r3016,%r1732,%r3018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3019,%r3001,%r3014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3022,%r6384,%r6394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3025,%r3022,%r3019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r1653,%r3025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3031,%r6503,%r3028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3034,%r6385,%r6386;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3037,%r6345,%r3034;
}
	// end inline asm
	@%p15 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r6513,%r6502;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r6513,%r6346,%r3034;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3050, 31;
	mov.u32 	%r3073, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3048,%r6513,%r3050,%r1732,%r3073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3053,%r3037,%r3048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3056,%r6383,%r6389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3059,%r3056,%r3053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3062,%r1653,%r3059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3065,%r6502,%r3062;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3069,%r6381,%r420,%r1732,%r3073;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3069;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6381;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3076, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3077,%r6382,%r3076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3080,%r6341,%r3077;
}
	// end inline asm
	@%p15 bra 	$L__BB0_396;
	bra.uni 	$L__BB0_395;

$L__BB0_396:
	// begin inline asm
	{neg.f16x2 %r6514,%r6501;
}
	// end inline asm
	bra.uni 	$L__BB0_397;

$L__BB0_395:
	// begin inline asm
	{mul.f16x2 %r6514,%r6342,%r3077;
}
	// end inline asm

$L__BB0_397:
	mov.u32 	%r3095, 31;
	mov.u32 	%r3118, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3093,%r6514,%r3095,%r1732,%r3118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3098,%r3080,%r3093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3101,%r6380,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3104,%r3101,%r3098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3107,%r1653,%r3104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3110,%r6501,%r3107;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3114,%r6378,%r420,%r1732,%r3118;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3114;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6378;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3121, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3122,%r6379,%r3121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r6341,%r3122;
}
	// end inline asm
	mov.u32 	%r6515, %r6500;
	@%p15 bra 	$L__BB0_399;

	// begin inline asm
	{mul.f16x2 %r6515,%r6342,%r3122;
}
	// end inline asm

$L__BB0_399:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3136,%r6515,%r3095,%r1732,%r3118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3141,%r3125,%r3136;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3144,%r6380,%r6393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3147,%r3141,%r3144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3150,%r1653,%r3147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3153,%r6500,%r3150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3156,%r6381,%r6382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3159,%r6345,%r3156;
}
	// end inline asm
	@%p15 bra 	$L__BB0_401;
	bra.uni 	$L__BB0_400;

$L__BB0_401:
	// begin inline asm
	{neg.f16x2 %r6516,%r6499;
}
	// end inline asm
	bra.uni 	$L__BB0_402;

$L__BB0_400:
	// begin inline asm
	{mul.f16x2 %r6516,%r6346,%r3156;
}
	// end inline asm

$L__BB0_402:
	mov.u32 	%r3172, 31;
	mov.u32 	%r3174, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3170,%r6516,%r3172,%r1732,%r3174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3175,%r3159,%r3170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3178,%r6377,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3181,%r3178,%r3175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3184,%r1653,%r3181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3187,%r6499,%r3184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3190,%r6378,%r6379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3193,%r6345,%r3190;
}
	// end inline asm
	mov.u32 	%r6517, %r6498;
	@%p15 bra 	$L__BB0_404;

	// begin inline asm
	{mul.f16x2 %r6517,%r6346,%r3190;
}
	// end inline asm

$L__BB0_404:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3202,%r6517,%r3172,%r1732,%r3174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3207,%r3193,%r3202;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3210,%r6377,%r6388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3213,%r3207,%r3210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3216,%r1653,%r3213;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3219,%r6498,%r3216;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3223,%r6375,%r420,%r1732,%r3174;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3223;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6375;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3230, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3231,%r6376,%r3230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3234,%r6341,%r3231;
}
	// end inline asm
	@%p15 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r6518,%r6497;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r6518,%r6342,%r3231;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3249, 31;
	mov.u32 	%r3272, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3247,%r6518,%r3249,%r1732,%r3272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3252,%r3234,%r3247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3255,%r6374,%r6380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3258,%r3255,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3261,%r1653,%r3258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6422,%r6497,%r3261;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3268,%r6372,%r420,%r1732,%r3272;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3268;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6372;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3275, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3276,%r6373,%r3275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3279,%r6341,%r3276;
}
	// end inline asm
	mov.u32 	%r6519, %r6496;
	@%p15 bra 	$L__BB0_409;

	// begin inline asm
	{mul.f16x2 %r6519,%r6342,%r3276;
}
	// end inline asm

$L__BB0_409:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3290,%r6519,%r3249,%r1732,%r3272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3295,%r3279,%r3290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3298,%r6374,%r6394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3301,%r3295,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3304,%r1653,%r3301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6420,%r6496,%r3304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3310,%r6376,%r6396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3313,%r6373,%r6379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3316,%r3310,%r3313;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3319,%r1653,%r3316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3322,%r6495,%r3319;
}
	// end inline asm
	selp.b32 	%r820, %r6495, %r3322, %p15;
	// begin inline asm
	{sub.f16x2 %r3325,%r6375,%r6376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3328,%r6345,%r3325;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r6520,%r6494;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r6520,%r6346,%r3325;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3341, 31;
	mov.u32 	%r3343, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3339,%r6520,%r3341,%r1732,%r3343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3344,%r3328,%r3339;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3347,%r6371,%r6377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3350,%r3347,%r3344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3353,%r1653,%r3350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6421,%r6494,%r3353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3359,%r6372,%r6373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3362,%r6345,%r3359;
}
	// end inline asm
	mov.u32 	%r6521, %r6493;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r6521,%r6346,%r3359;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3371,%r6521,%r3341,%r1732,%r3343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3376,%r3362,%r3371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3379,%r6371,%r6389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3382,%r3376,%r3379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3385,%r1653,%r3382;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6419,%r6493,%r3385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3391,%r6375,%r6395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3394,%r6372,%r6378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3397,%r3391,%r3394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3400,%r1653,%r3397;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3403,%r6492,%r3400;
}
	// end inline asm
	selp.b32 	%r832, %r6492, %r3403, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3407,%r6369,%r420,%r1732,%r3343;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3407;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6369;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3414, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3415,%r6370,%r3414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3418,%r6341,%r3415;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r6522,%r6491;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r6522,%r6342,%r3415;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3433, 31;
	mov.u32 	%r3456, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3431,%r6522,%r3433,%r1732,%r3456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3436,%r3418,%r3431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3439,%r6368,%r6374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3442,%r3439,%r3436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3445,%r1653,%r3442;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6418,%r6491,%r3445;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3452,%r6366,%r420,%r1732,%r3456;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3452;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6366;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3459, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3460,%r6367,%r3459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3463,%r6341,%r3460;
}
	// end inline asm
	mov.u32 	%r6523, %r6490;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r6523,%r6342,%r3460;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3474,%r6523,%r3433,%r1732,%r3456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3479,%r3463,%r3474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3482,%r6368,%r6384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3485,%r3479,%r3482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3488,%r1653,%r3485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3491,%r6490,%r3488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3494,%r6370,%r6386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3497,%r6367,%r6373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3500,%r3494,%r3497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3503,%r1653,%r3500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3506,%r6489,%r3503;
}
	// end inline asm
	selp.b32 	%r844, %r6489, %r3506, %p15;
	// begin inline asm
	{sub.f16x2 %r3509,%r6369,%r6370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3512,%r6345,%r3509;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r6524,%r6488;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r6524,%r6346,%r3509;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3525, 31;
	mov.u32 	%r3527, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3523,%r6524,%r3525,%r1732,%r3527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3528,%r3512,%r3523;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3531,%r6365,%r6371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3534,%r3531,%r3528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3537,%r1653,%r3534;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6417,%r6488,%r3537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3543,%r6366,%r6367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3546,%r6345,%r3543;
}
	// end inline asm
	mov.u32 	%r6525, %r6487;
	@%p15 bra 	$L__BB0_424;

	// begin inline asm
	{mul.f16x2 %r6525,%r6346,%r3543;
}
	// end inline asm

$L__BB0_424:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3555,%r6525,%r3525,%r1732,%r3527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3560,%r3546,%r3555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3563,%r6365,%r6383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3566,%r3560,%r3563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3569,%r1653,%r3566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3572,%r6487,%r3569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3575,%r6369,%r6385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3578,%r6366,%r6372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3581,%r3575,%r3578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3584,%r1653,%r3581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3587,%r6486,%r3584;
}
	// end inline asm
	selp.b32 	%r856, %r6486, %r3587, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3591,%r6363,%r420,%r1732,%r3527;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3591;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6363;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3598, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3599,%r6364,%r3598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3602,%r6341,%r3599;
}
	// end inline asm
	@%p15 bra 	$L__BB0_426;
	bra.uni 	$L__BB0_425;

$L__BB0_426:
	// begin inline asm
	{neg.f16x2 %r6526,%r6485;
}
	// end inline asm
	bra.uni 	$L__BB0_427;

$L__BB0_425:
	// begin inline asm
	{mul.f16x2 %r6526,%r6342,%r3599;
}
	// end inline asm

$L__BB0_427:
	mov.u32 	%r3617, 31;
	mov.u32 	%r3619, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3615,%r6526,%r3617,%r1732,%r3619;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3620,%r3602,%r3615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3623,%r1653,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3626,%r3623,%r3620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3629,%r1653,%r3626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3632,%r6485,%r3629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3635,%r6363,%r6364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3638,%r6345,%r3635;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r6527,%r6484;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r6527,%r6346,%r3635;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3651, 31;
	mov.u32 	%r3674, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3649,%r6527,%r3651,%r1732,%r3674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3654,%r3638,%r3649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3657,%r1653,%r6365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3660,%r3657,%r3654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3663,%r1653,%r3660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3666,%r6484,%r3663;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3670,%r6361,%r420,%r1732,%r3674;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3670;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6361;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3677, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3678,%r6362,%r3677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3681,%r6341,%r3678;
}
	// end inline asm
	mov.u32 	%r6528, %r6483;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r6528,%r6342,%r3678;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3692,%r6528,%r3651,%r1732,%r3674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3697,%r3681,%r3692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3700,%r1653,%r6380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r3697,%r3700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3706,%r1653,%r3703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6416,%r6483,%r3706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3712,%r1653,%r6382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3715,%r6362,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3718,%r3712,%r3715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3721,%r1653,%r3718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3724,%r6482,%r3721;
}
	// end inline asm
	selp.b32 	%r874, %r6482, %r3724, %p15;
	// begin inline asm
	{sub.f16x2 %r3727,%r6361,%r6362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3730,%r6345,%r3727;
}
	// end inline asm
	mov.u32 	%r6529, %r6481;
	@%p15 bra 	$L__BB0_434;

	// begin inline asm
	{mul.f16x2 %r6529,%r6346,%r3727;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3741, 31;
	mov.u32 	%r3779, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3739,%r6529,%r3741,%r1732,%r3779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3744,%r3730,%r3739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3747,%r1653,%r6377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3750,%r3744,%r3747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3753,%r1653,%r3750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6415,%r6481,%r3753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3759,%r1653,%r6381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3762,%r6361,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3765,%r3759,%r3762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3768,%r1653,%r3765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3771,%r6480,%r3768;
}
	// end inline asm
	selp.b32 	%r880, %r6480, %r3771, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3775,%r6359,%r420,%r1732,%r3779;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3775;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6359;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3782, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r6360,%r3782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3786,%r6341,%r3783;
}
	// end inline asm
	@%p15 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r6530,%r6479;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r6530,%r6342,%r3783;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3801, 31;
	mov.u32 	%r3824, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3799,%r6530,%r3801,%r1732,%r3824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3804,%r3786,%r3799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3807,%r6358,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3810,%r3807,%r3804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3813,%r1653,%r3810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6414,%r6479,%r3813;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3820,%r6356,%r420,%r1732,%r3824;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3820;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6356;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3827, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r6357,%r3827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3831,%r6341,%r3828;
}
	// end inline asm
	mov.u32 	%r6531, %r6478;
	@%p15 bra 	$L__BB0_439;

	// begin inline asm
	{mul.f16x2 %r6531,%r6342,%r3828;
}
	// end inline asm

$L__BB0_439:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3842,%r6531,%r3801,%r1732,%r3824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3847,%r3831,%r3842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3850,%r6358,%r6374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r3847,%r3850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r1653,%r3853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6412,%r6478,%r3856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r6360,%r6376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3865,%r6357,%r6362;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3868,%r3862,%r3865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3871,%r1653,%r3868;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3874,%r6477,%r3871;
}
	// end inline asm
	selp.b32 	%r6410, %r6477, %r3874, %p15;
	// begin inline asm
	{sub.f16x2 %r3877,%r6359,%r6360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3880,%r6345,%r3877;
}
	// end inline asm
	@%p15 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r6532,%r6476;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r6532,%r6346,%r3877;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3893, 31;
	mov.u32 	%r3895, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3891,%r6532,%r3893,%r1732,%r3895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3896,%r3880,%r3891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3899,%r6355,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3902,%r3899,%r3896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3905,%r1653,%r3902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6413,%r6476,%r3905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3911,%r6356,%r6357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3914,%r6345,%r3911;
}
	// end inline asm
	mov.u32 	%r6533, %r6475;
	@%p15 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r6533,%r6346,%r3911;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3923,%r6533,%r3893,%r1732,%r3895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3928,%r3914,%r3923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3931,%r6355,%r6371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3934,%r3928,%r3931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3937,%r1653,%r3934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6411,%r6475,%r3937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3943,%r6359,%r6375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3946,%r6356,%r6361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3949,%r3943,%r3946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3952,%r1653,%r3949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3955,%r6474,%r3952;
}
	// end inline asm
	selp.b32 	%r6409, %r6474, %r3955, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3959,%r6353,%r420,%r1732,%r3895;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3959;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6353;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3966, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3967,%r6354,%r3966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3970,%r6341,%r3967;
}
	// end inline asm
	@%p15 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r6534,%r6473;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r6534,%r6342,%r3967;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3985, 31;
	mov.u32 	%r4008, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3983,%r6534,%r3985,%r1732,%r4008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3988,%r3970,%r3983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3991,%r1653,%r6358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3994,%r3991,%r3988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3997,%r1653,%r3994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6408,%r6473,%r3997;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4004,%r6351,%r420,%r1732,%r4008;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4004;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6351;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4011, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4012,%r6352,%r4011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4015,%r6341,%r4012;
}
	// end inline asm
	mov.u32 	%r6535, %r6472;
	@%p15 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r6535,%r6342,%r4012;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4026,%r6535,%r3985,%r1732,%r4008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4031,%r4015,%r4026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4034,%r1653,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r4031,%r4034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4040,%r1653,%r4037;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6406,%r6472,%r4040;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4046,%r6354,%r6370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4049,%r6352,%r6357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4052,%r4046,%r4049;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4055,%r1653,%r4052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4058,%r6471,%r4055;
}
	// end inline asm
	selp.b32 	%r6404, %r6471, %r4058, %p15;
	// begin inline asm
	{sub.f16x2 %r4061,%r6353,%r6354;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4064,%r6345,%r4061;
}
	// end inline asm
	@%p15 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r6536,%r6470;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r6536,%r6346,%r4061;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4077, 31;
	mov.u32 	%r4079, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4075,%r6536,%r4077,%r1732,%r4079;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r4064,%r4075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r1653,%r6355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r4083,%r4080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r1653,%r4086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6407,%r6470,%r4089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4095,%r6351,%r6352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4098,%r6345,%r4095;
}
	// end inline asm
	mov.u32 	%r6537, %r6469;
	@%p15 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r6537,%r6346,%r4095;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4107,%r6537,%r4077,%r1732,%r4079;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4112,%r4098,%r4107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4115,%r1653,%r6365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4118,%r4112,%r4115;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4121,%r1653,%r4118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6405,%r6469,%r4121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4127,%r6353,%r6369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4130,%r6351,%r6356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4133,%r4127,%r4130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4136,%r1653,%r4133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4139,%r6468,%r4136;
}
	// end inline asm
	selp.b32 	%r6403, %r6468, %r4139, %p15;
	// begin inline asm
	{sub.f16x2 %r4142,%r1653,%r6364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4145,%r1653,%r6352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r4142,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4151,%r1653,%r4148;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4154,%r6467,%r4151;
}
	// end inline asm
	selp.b32 	%r929, %r6467, %r4154, %p15;
	// begin inline asm
	{sub.f16x2 %r4157,%r1653,%r6363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4160,%r1653,%r6351;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4163,%r4157,%r4160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4166,%r1653,%r4163;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4169,%r6466,%r4166;
}
	// end inline asm
	selp.b32 	%r930, %r6466, %r4169, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4173,%r6349,%r420,%r1732,%r4079;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4173;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6349;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4180, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4181,%r6350,%r4180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4184,%r6341,%r4181;
}
	// end inline asm
	mov.u32 	%r6538, %r6465;
	@%p15 bra 	$L__BB0_456;

	// begin inline asm
	{mul.f16x2 %r6538,%r6342,%r4181;
}
	// end inline asm

$L__BB0_456:
	mov.u32 	%r4197, 31;
	mov.u32 	%r4199, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4195,%r6538,%r4197,%r1732,%r4199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4200,%r4184,%r4195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4203,%r1653,%r6358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4206,%r4200,%r4203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4209,%r1653,%r4206;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6402,%r6465,%r4209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4215,%r1653,%r6360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4218,%r6350,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4221,%r4215,%r4218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4224,%r1653,%r4221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4227,%r6464,%r4224;
}
	// end inline asm
	selp.b32 	%r6400, %r6464, %r4227, %p15;
	// begin inline asm
	{sub.f16x2 %r4230,%r6349,%r6350;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4233,%r6345,%r4230;
}
	// end inline asm
	mov.u32 	%r6539, %r6463;
	@%p15 bra 	$L__BB0_458;

	// begin inline asm
	{mul.f16x2 %r6539,%r6346,%r4230;
}
	// end inline asm

$L__BB0_458:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4242,%r6539,%r4197,%r1732,%r4199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4247,%r4233,%r4242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4250,%r1653,%r6355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4253,%r4247,%r4250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4256,%r1653,%r4253;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6401,%r6463,%r4256;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r1653,%r6359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4265,%r6349,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4268,%r4262,%r4265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4271,%r1653,%r4268;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4274,%r6462,%r4271;
}
	// end inline asm
	selp.b32 	%r6399, %r6462, %r4274, %p15;
	// begin inline asm
	{sub.f16x2 %r4277,%r1653,%r6354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4280,%r1653,%r6350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4283,%r4277,%r4280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4286,%r1653,%r4283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4289,%r6461,%r4286;
}
	// end inline asm
	selp.b32 	%r6398, %r6461, %r4289, %p15;
	// begin inline asm
	{sub.f16x2 %r4292,%r1653,%r6353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4295,%r1653,%r6349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4298,%r4292,%r4295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4301,%r1653,%r4298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4304,%r6460,%r4301;
}
	// end inline asm
	selp.b32 	%r6397, %r6460, %r4304, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4309, %r1241, 2;
	setp.lt.s32 	%p241, %r546, %r4309;
	add.s32 	%r4310, %r1242, -1;
	setp.ge.s32 	%p242, %r546, %r4310;
	or.pred  	%p243, %p242, %p241;
	add.s32 	%r4311, %r1243, 2;
	setp.lt.s32 	%p244, %r547, %r4311;
	or.pred  	%p245, %p243, %p244;
	add.s32 	%r4312, %r1244, -2;
	setp.ge.s32 	%p246, %r547, %r4312;
	or.pred  	%p247, %p246, %p245;
	setp.lt.s32 	%p248, %r548, %r1238;
	or.pred  	%p249, %p248, %p247;
	mad.lo.s32 	%r4313, %r1240, %r1239, %r1238;
	setp.ge.s32 	%p250, %r548, %r4313;
	or.pred  	%p251, %p249, %p250;
	@%p251 bra 	$L__BB0_700;

	sub.s32 	%r945, %r548, %r1238;
	rem.s32 	%r4314, %r945, %r1239;
	setp.ne.s32 	%p252, %r4314, 0;
	@%p252 bra 	$L__BB0_700;

	div.s32 	%r4315, %r945, %r1239;
	mul.lo.s32 	%r4317, %r4315, %r1267;
	sub.s32 	%r946, %r546, %r1241;
	sub.s32 	%r947, %r547, %r1243;
	mul.lo.s32 	%r948, %r4317, 3;
	add.s32 	%r4318, %r946, %r948;
	add.s32 	%r4319, %r4318, -2;
	mul.lo.s32 	%r949, %r4319, %r1269;
	add.s32 	%r4321, %r947, %r949;
	mul.lo.s32 	%r4322, %r4321, %r48;
	sub.s32 	%r950, %r4322, %r1245;
	@%p15 bra 	$L__BB0_465;

	not.pred 	%p254, %p11;
	@%p254 bra 	$L__BB0_463;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2877;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4324, %r950, %r387;
	mul.wide.s32 	%rd259, %r4324, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;

$L__BB0_463:
	not.pred 	%p255, %p13;
	@%p255 bra 	$L__BB0_465;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2877;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4326, %r950, %r388;
	mul.wide.s32 	%rd261, %r4326, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;

$L__BB0_465:
	@%p15 bra 	$L__BB0_470;

	not.pred 	%p257, %p12;
	@%p257 bra 	$L__BB0_468;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2954;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4328, %r950, %r401;
	mul.wide.s32 	%rd263, %r4328, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;

$L__BB0_468:
	not.pred 	%p258, %p14;
	@%p258 bra 	$L__BB0_470;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2954;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4330, %r950, %r402;
	mul.wide.s32 	%rd265, %r4330, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_470:
	add.s32 	%r951, %r948, %r1267;
	add.s32 	%r4332, %r946, %r951;
	add.s32 	%r4333, %r4332, -2;
	mad.lo.s32 	%r4335, %r4333, %r1269, %r947;
	mul.lo.s32 	%r4336, %r4335, %r48;
	sub.s32 	%r952, %r4336, %r1245;
	@%p15 bra 	$L__BB0_475;

	not.pred 	%p260, %p11;
	@%p260 bra 	$L__BB0_473;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2920;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4338, %r952, %r387;
	mul.wide.s32 	%rd267, %r4338, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;

$L__BB0_473:
	not.pred 	%p261, %p13;
	@%p261 bra 	$L__BB0_475;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2920;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4340, %r952, %r388;
	mul.wide.s32 	%rd269, %r4340, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;

$L__BB0_475:
	@%p15 bra 	$L__BB0_480;

	not.pred 	%p263, %p12;
	@%p263 bra 	$L__BB0_478;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2986;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4342, %r952, %r401;
	mul.wide.s32 	%rd271, %r4342, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;

$L__BB0_478:
	not.pred 	%p264, %p14;
	@%p264 bra 	$L__BB0_480;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2986;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4344, %r952, %r402;
	mul.wide.s32 	%rd273, %r4344, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_480:
	add.s32 	%r953, %r947, 1;
	add.s32 	%r4345, %r953, %r949;
	mul.lo.s32 	%r4346, %r4345, %r48;
	sub.s32 	%r954, %r4346, %r1245;
	@%p15 bra 	$L__BB0_485;

	not.pred 	%p266, %p11;
	@%p266 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3031;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4348, %r954, %r387;
	mul.wide.s32 	%rd275, %r4348, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;

$L__BB0_483:
	not.pred 	%p267, %p13;
	@%p267 bra 	$L__BB0_485;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3031;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4350, %r954, %r388;
	mul.wide.s32 	%rd277, %r4350, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;

$L__BB0_485:
	@%p15 bra 	$L__BB0_490;

	not.pred 	%p269, %p12;
	@%p269 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3065;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4352, %r954, %r401;
	mul.wide.s32 	%rd279, %r4352, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;

$L__BB0_488:
	not.pred 	%p270, %p14;
	@%p270 bra 	$L__BB0_490;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3065;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4354, %r954, %r402;
	mul.wide.s32 	%rd281, %r4354, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_490:
	not.b32 	%r4355, %r1241;
	add.s32 	%r955, %r546, %r4355;
	not.b32 	%r4356, %r1243;
	add.s32 	%r956, %r547, %r4356;
	add.s32 	%r4357, %r955, %r948;
	mul.lo.s32 	%r957, %r4357, %r1269;
	add.s32 	%r4359, %r956, %r957;
	mul.lo.s32 	%r4360, %r4359, %r48;
	sub.s32 	%r958, %r4360, %r1245;
	@%p15 bra 	$L__BB0_495;

	not.pred 	%p272, %p11;
	@%p272 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3110;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4362, %r958, %r387;
	mul.wide.s32 	%rd283, %r4362, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;

$L__BB0_493:
	not.pred 	%p273, %p13;
	@%p273 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3110;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4364, %r958, %r388;
	mul.wide.s32 	%rd285, %r4364, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;

$L__BB0_495:
	@%p15 bra 	$L__BB0_500;

	not.pred 	%p275, %p12;
	@%p275 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3187;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4366, %r958, %r401;
	mul.wide.s32 	%rd287, %r4366, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;

$L__BB0_498:
	not.pred 	%p276, %p14;
	@%p276 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3187;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4368, %r958, %r402;
	mul.wide.s32 	%rd289, %r4368, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_500:
	add.s32 	%r4370, %r955, %r951;
	mul.lo.s32 	%r959, %r4370, %r1269;
	add.s32 	%r4371, %r956, %r959;
	mul.lo.s32 	%r4372, %r4371, %r48;
	sub.s32 	%r960, %r4372, %r1245;
	@%p15 bra 	$L__BB0_505;

	not.pred 	%p278, %p11;
	@%p278 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3153;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4374, %r960, %r387;
	mul.wide.s32 	%rd291, %r4374, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;

$L__BB0_503:
	not.pred 	%p279, %p13;
	@%p279 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3153;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4376, %r960, %r388;
	mul.wide.s32 	%rd293, %r4376, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;

$L__BB0_505:
	@%p15 bra 	$L__BB0_510;

	not.pred 	%p281, %p12;
	@%p281 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3219;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4378, %r960, %r401;
	mul.wide.s32 	%rd295, %r4378, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;

$L__BB0_508:
	not.pred 	%p282, %p14;
	@%p282 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3219;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4380, %r960, %r402;
	mul.wide.s32 	%rd297, %r4380, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_510:
	add.s32 	%r4381, %r947, %r957;
	mul.lo.s32 	%r4382, %r4381, %r48;
	sub.s32 	%r961, %r4382, %r1245;
	@%p15 bra 	$L__BB0_515;

	not.pred 	%p284, %p11;
	@%p284 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6422;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4384, %r961, %r387;
	mul.wide.s32 	%rd299, %r4384, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;

$L__BB0_513:
	not.pred 	%p285, %p13;
	@%p285 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6422;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4386, %r961, %r388;
	mul.wide.s32 	%rd301, %r4386, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;

$L__BB0_515:
	@%p15 bra 	$L__BB0_520;

	not.pred 	%p287, %p12;
	@%p287 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6421;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4388, %r961, %r401;
	mul.wide.s32 	%rd303, %r4388, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;

$L__BB0_518:
	not.pred 	%p288, %p14;
	@%p288 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6421;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4390, %r961, %r402;
	mul.wide.s32 	%rd305, %r4390, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_520:
	add.s32 	%r4391, %r947, %r959;
	mul.lo.s32 	%r4392, %r4391, %r48;
	sub.s32 	%r962, %r4392, %r1245;
	@%p15 bra 	$L__BB0_525;

	not.pred 	%p290, %p11;
	@%p290 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6420;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4394, %r962, %r387;
	mul.wide.s32 	%rd307, %r4394, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;

$L__BB0_523:
	not.pred 	%p291, %p13;
	@%p291 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6420;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4396, %r962, %r388;
	mul.wide.s32 	%rd309, %r4396, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;

$L__BB0_525:
	@%p15 bra 	$L__BB0_530;

	not.pred 	%p293, %p12;
	@%p293 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6419;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4398, %r962, %r401;
	mul.wide.s32 	%rd311, %r4398, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;

$L__BB0_528:
	not.pred 	%p294, %p14;
	@%p294 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6419;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4400, %r962, %r402;
	mul.wide.s32 	%rd313, %r4400, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_530:
	add.s32 	%r963, %r951, %r1267;
	add.s32 	%r4402, %r955, %r963;
	mul.lo.s32 	%r964, %r4402, %r1269;
	add.s32 	%r4404, %r947, %r964;
	mul.lo.s32 	%r4405, %r4404, %r48;
	sub.s32 	%r965, %r4405, %r1245;
	@%p15 bra 	$L__BB0_535;

	not.pred 	%p296, %p11;
	@%p296 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r820;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4407, %r965, %r387;
	mul.wide.s32 	%rd315, %r4407, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;

$L__BB0_533:
	not.pred 	%p297, %p13;
	@%p297 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r820;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4409, %r965, %r388;
	mul.wide.s32 	%rd317, %r4409, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;

$L__BB0_535:
	@%p15 bra 	$L__BB0_540;

	not.pred 	%p299, %p12;
	@%p299 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r832;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4411, %r965, %r401;
	mul.wide.s32 	%rd319, %r4411, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;

$L__BB0_538:
	not.pred 	%p300, %p14;
	@%p300 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r832;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4413, %r965, %r402;
	mul.wide.s32 	%rd321, %r4413, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_540:
	add.s32 	%r4414, %r953, %r957;
	mul.lo.s32 	%r4415, %r4414, %r48;
	sub.s32 	%r966, %r4415, %r1245;
	@%p15 bra 	$L__BB0_545;

	not.pred 	%p302, %p11;
	@%p302 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6418;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4417, %r966, %r387;
	mul.wide.s32 	%rd323, %r4417, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;

$L__BB0_543:
	not.pred 	%p303, %p13;
	@%p303 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6418;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4419, %r966, %r388;
	mul.wide.s32 	%rd325, %r4419, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;

$L__BB0_545:
	@%p15 bra 	$L__BB0_550;

	not.pred 	%p305, %p12;
	@%p305 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6417;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4421, %r966, %r401;
	mul.wide.s32 	%rd327, %r4421, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;

$L__BB0_548:
	not.pred 	%p306, %p14;
	@%p306 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6417;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4423, %r966, %r402;
	mul.wide.s32 	%rd329, %r4423, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_550:
	add.s32 	%r4424, %r953, %r959;
	mul.lo.s32 	%r4425, %r4424, %r48;
	sub.s32 	%r967, %r4425, %r1245;
	@%p15 bra 	$L__BB0_555;

	not.pred 	%p308, %p11;
	@%p308 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3491;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4427, %r967, %r387;
	mul.wide.s32 	%rd331, %r4427, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;

$L__BB0_553:
	not.pred 	%p309, %p13;
	@%p309 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3491;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4429, %r967, %r388;
	mul.wide.s32 	%rd333, %r4429, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;

$L__BB0_555:
	@%p15 bra 	$L__BB0_560;

	not.pred 	%p311, %p12;
	@%p311 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3572;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4431, %r967, %r401;
	mul.wide.s32 	%rd335, %r4431, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;

$L__BB0_558:
	not.pred 	%p312, %p14;
	@%p312 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3572;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4433, %r967, %r402;
	mul.wide.s32 	%rd337, %r4433, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_560:
	add.s32 	%r4434, %r953, %r964;
	mul.lo.s32 	%r4435, %r4434, %r48;
	sub.s32 	%r968, %r4435, %r1245;
	@%p15 bra 	$L__BB0_565;

	not.pred 	%p314, %p11;
	@%p314 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r844;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4437, %r968, %r387;
	mul.wide.s32 	%rd339, %r4437, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;

$L__BB0_563:
	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r844;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4439, %r968, %r388;
	mul.wide.s32 	%rd341, %r4439, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;

$L__BB0_565:
	@%p15 bra 	$L__BB0_570;

	not.pred 	%p317, %p12;
	@%p317 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r856;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4441, %r968, %r401;
	mul.wide.s32 	%rd343, %r4441, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;

$L__BB0_568:
	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r856;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4443, %r968, %r402;
	mul.wide.s32 	%rd345, %r4443, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_570:
	add.s32 	%r969, %r947, 2;
	add.s32 	%r4444, %r969, %r957;
	mul.lo.s32 	%r4445, %r4444, %r48;
	sub.s32 	%r970, %r4445, %r1245;
	@%p15 bra 	$L__BB0_575;

	not.pred 	%p320, %p11;
	@%p320 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3632;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4447, %r970, %r387;
	mul.wide.s32 	%rd347, %r4447, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;

$L__BB0_573:
	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3632;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4449, %r970, %r388;
	mul.wide.s32 	%rd349, %r4449, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;

$L__BB0_575:
	@%p15 bra 	$L__BB0_580;

	not.pred 	%p323, %p12;
	@%p323 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3666;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4451, %r970, %r401;
	mul.wide.s32 	%rd351, %r4451, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;

$L__BB0_578:
	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3666;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4453, %r970, %r402;
	mul.wide.s32 	%rd353, %r4453, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_580:
	mul.lo.s32 	%r971, %r4332, %r1269;
	add.s32 	%r4456, %r956, %r971;
	mul.lo.s32 	%r4457, %r4456, %r48;
	sub.s32 	%r972, %r4457, %r1245;
	@%p15 bra 	$L__BB0_585;

	not.pred 	%p326, %p11;
	@%p326 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6416;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4459, %r972, %r387;
	mul.wide.s32 	%rd355, %r4459, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;

$L__BB0_583:
	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6416;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4461, %r972, %r388;
	mul.wide.s32 	%rd357, %r4461, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;

$L__BB0_585:
	@%p15 bra 	$L__BB0_590;

	not.pred 	%p329, %p12;
	@%p329 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6415;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4463, %r972, %r401;
	mul.wide.s32 	%rd359, %r4463, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;

$L__BB0_588:
	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6415;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4465, %r972, %r402;
	mul.wide.s32 	%rd361, %r4465, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_590:
	add.s32 	%r4467, %r946, %r963;
	mul.lo.s32 	%r973, %r4467, %r1269;
	add.s32 	%r4468, %r956, %r973;
	mul.lo.s32 	%r4469, %r4468, %r48;
	sub.s32 	%r974, %r4469, %r1245;
	@%p15 bra 	$L__BB0_595;

	not.pred 	%p332, %p11;
	@%p332 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r874;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4471, %r974, %r387;
	mul.wide.s32 	%rd363, %r4471, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;

$L__BB0_593:
	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r874;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4473, %r974, %r388;
	mul.wide.s32 	%rd365, %r4473, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;

$L__BB0_595:
	@%p15 bra 	$L__BB0_600;

	not.pred 	%p335, %p12;
	@%p335 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r880;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4475, %r974, %r401;
	mul.wide.s32 	%rd367, %r4475, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;

$L__BB0_598:
	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r880;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4477, %r974, %r402;
	mul.wide.s32 	%rd369, %r4477, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_600:
	mul.lo.s32 	%r975, %r4318, %r1269;
	add.s32 	%r4480, %r947, %r975;
	mul.lo.s32 	%r4481, %r4480, %r48;
	sub.s32 	%r976, %r4481, %r1245;
	@%p15 bra 	$L__BB0_605;

	not.pred 	%p338, %p11;
	@%p338 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6414;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4483, %r976, %r387;
	mul.wide.s32 	%rd371, %r4483, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;

$L__BB0_603:
	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6414;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4485, %r976, %r388;
	mul.wide.s32 	%rd373, %r4485, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;

$L__BB0_605:
	@%p15 bra 	$L__BB0_610;

	not.pred 	%p341, %p12;
	@%p341 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6413;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4487, %r976, %r401;
	mul.wide.s32 	%rd375, %r4487, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;

$L__BB0_608:
	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6413;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4489, %r976, %r402;
	mul.wide.s32 	%rd377, %r4489, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_610:
	add.s32 	%r4490, %r947, %r971;
	mul.lo.s32 	%r4491, %r4490, %r48;
	sub.s32 	%r977, %r4491, %r1245;
	@%p15 bra 	$L__BB0_615;

	not.pred 	%p344, %p11;
	@%p344 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6412;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4493, %r977, %r387;
	mul.wide.s32 	%rd379, %r4493, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;

$L__BB0_613:
	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6412;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4495, %r977, %r388;
	mul.wide.s32 	%rd381, %r4495, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;

$L__BB0_615:
	@%p15 bra 	$L__BB0_620;

	not.pred 	%p347, %p12;
	@%p347 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6411;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4497, %r977, %r401;
	mul.wide.s32 	%rd383, %r4497, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;

$L__BB0_618:
	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6411;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4499, %r977, %r402;
	mul.wide.s32 	%rd385, %r4499, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_620:
	add.s32 	%r4500, %r947, %r973;
	mul.lo.s32 	%r4501, %r4500, %r48;
	sub.s32 	%r978, %r4501, %r1245;
	@%p15 bra 	$L__BB0_625;

	not.pred 	%p350, %p11;
	@%p350 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6410;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4503, %r978, %r387;
	mul.wide.s32 	%rd387, %r4503, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;

$L__BB0_623:
	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6410;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4505, %r978, %r388;
	mul.wide.s32 	%rd389, %r4505, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;

$L__BB0_625:
	@%p15 bra 	$L__BB0_630;

	not.pred 	%p353, %p12;
	@%p353 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6409;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4507, %r978, %r401;
	mul.wide.s32 	%rd391, %r4507, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;

$L__BB0_628:
	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6409;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4509, %r978, %r402;
	mul.wide.s32 	%rd393, %r4509, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_630:
	add.s32 	%r4510, %r953, %r975;
	mul.lo.s32 	%r4511, %r4510, %r48;
	sub.s32 	%r979, %r4511, %r1245;
	@%p15 bra 	$L__BB0_635;

	not.pred 	%p356, %p11;
	@%p356 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6408;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4513, %r979, %r387;
	mul.wide.s32 	%rd395, %r4513, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;

$L__BB0_633:
	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6408;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4515, %r979, %r388;
	mul.wide.s32 	%rd397, %r4515, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;

$L__BB0_635:
	@%p15 bra 	$L__BB0_640;

	not.pred 	%p359, %p12;
	@%p359 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6407;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4517, %r979, %r401;
	mul.wide.s32 	%rd399, %r4517, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;

$L__BB0_638:
	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6407;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4519, %r979, %r402;
	mul.wide.s32 	%rd401, %r4519, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_640:
	add.s32 	%r4520, %r953, %r971;
	mul.lo.s32 	%r4521, %r4520, %r48;
	sub.s32 	%r980, %r4521, %r1245;
	@%p15 bra 	$L__BB0_645;

	not.pred 	%p362, %p11;
	@%p362 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6406;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4523, %r980, %r387;
	mul.wide.s32 	%rd403, %r4523, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;

$L__BB0_643:
	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6406;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4525, %r980, %r388;
	mul.wide.s32 	%rd405, %r4525, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;

$L__BB0_645:
	@%p15 bra 	$L__BB0_650;

	not.pred 	%p365, %p12;
	@%p365 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6405;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4527, %r980, %r401;
	mul.wide.s32 	%rd407, %r4527, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;

$L__BB0_648:
	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6405;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4529, %r980, %r402;
	mul.wide.s32 	%rd409, %r4529, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_650:
	add.s32 	%r4530, %r953, %r973;
	mul.lo.s32 	%r4531, %r4530, %r48;
	sub.s32 	%r981, %r4531, %r1245;
	@%p15 bra 	$L__BB0_655;

	not.pred 	%p368, %p11;
	@%p368 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6404;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4533, %r981, %r387;
	mul.wide.s32 	%rd411, %r4533, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;

$L__BB0_653:
	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6404;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4535, %r981, %r388;
	mul.wide.s32 	%rd413, %r4535, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;

$L__BB0_655:
	@%p15 bra 	$L__BB0_660;

	not.pred 	%p371, %p12;
	@%p371 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6403;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4537, %r981, %r401;
	mul.wide.s32 	%rd415, %r4537, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;

$L__BB0_658:
	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6403;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4539, %r981, %r402;
	mul.wide.s32 	%rd417, %r4539, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_660:
	add.s32 	%r4540, %r969, %r973;
	mul.lo.s32 	%r4541, %r4540, %r48;
	sub.s32 	%r982, %r4541, %r1245;
	@%p15 bra 	$L__BB0_665;

	not.pred 	%p374, %p11;
	@%p374 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r929;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4543, %r982, %r387;
	mul.wide.s32 	%rd419, %r4543, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;

$L__BB0_663:
	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r929;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4545, %r982, %r388;
	mul.wide.s32 	%rd421, %r4545, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;

$L__BB0_665:
	@%p15 bra 	$L__BB0_670;

	not.pred 	%p377, %p12;
	@%p377 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r930;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4547, %r982, %r401;
	mul.wide.s32 	%rd423, %r4547, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;

$L__BB0_668:
	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r930;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4549, %r982, %r402;
	mul.wide.s32 	%rd425, %r4549, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_670:
	add.s32 	%r983, %r946, 1;
	add.s32 	%r4550, %r983, %r951;
	mad.lo.s32 	%r4552, %r4550, %r1269, %r947;
	mul.lo.s32 	%r4553, %r4552, %r48;
	sub.s32 	%r984, %r4553, %r1245;
	@%p15 bra 	$L__BB0_675;

	not.pred 	%p380, %p11;
	@%p380 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6402;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4555, %r984, %r387;
	mul.wide.s32 	%rd427, %r4555, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;

$L__BB0_673:
	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6402;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4557, %r984, %r388;
	mul.wide.s32 	%rd429, %r4557, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;

$L__BB0_675:
	@%p15 bra 	$L__BB0_680;

	not.pred 	%p383, %p12;
	@%p383 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6401;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4559, %r984, %r401;
	mul.wide.s32 	%rd431, %r4559, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;

$L__BB0_678:
	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6401;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4561, %r984, %r402;
	mul.wide.s32 	%rd433, %r4561, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_680:
	add.s32 	%r4563, %r983, %r963;
	mul.lo.s32 	%r985, %r4563, %r1269;
	add.s32 	%r4564, %r947, %r985;
	mul.lo.s32 	%r4565, %r4564, %r48;
	sub.s32 	%r986, %r4565, %r1245;
	@%p15 bra 	$L__BB0_685;

	not.pred 	%p386, %p11;
	@%p386 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6400;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4567, %r986, %r387;
	mul.wide.s32 	%rd435, %r4567, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;

$L__BB0_683:
	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6400;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4569, %r986, %r388;
	mul.wide.s32 	%rd437, %r4569, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;

$L__BB0_685:
	@%p15 bra 	$L__BB0_690;

	not.pred 	%p389, %p12;
	@%p389 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6399;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4571, %r986, %r401;
	mul.wide.s32 	%rd439, %r4571, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;

$L__BB0_688:
	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6399;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4573, %r986, %r402;
	mul.wide.s32 	%rd441, %r4573, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_690:
	add.s32 	%r4574, %r953, %r985;
	mul.lo.s32 	%r4575, %r4574, %r48;
	sub.s32 	%r987, %r4575, %r1245;
	@%p15 bra 	$L__BB0_695;

	not.pred 	%p392, %p11;
	@%p392 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6398;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4577, %r987, %r387;
	mul.wide.s32 	%rd443, %r4577, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;

$L__BB0_693:
	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6398;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4579, %r987, %r388;
	mul.wide.s32 	%rd445, %r4579, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;

$L__BB0_695:
	@%p15 bra 	$L__BB0_700;

	not.pred 	%p395, %p12;
	@%p395 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6397;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4581, %r987, %r401;
	mul.wide.s32 	%rd447, %r4581, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;

$L__BB0_698:
	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6397;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4583, %r987, %r402;
	mul.wide.s32 	%rd449, %r4583, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_700:
	bar.sync 	0;
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4584, {low,high};}

	// end inline asm
	selp.b32 	%r4586, %r6344, %r4584, %p15;
	// begin inline asm
	{mul.f16x2 %r4585,%r4586,%r6394;
}
	// end inline asm
	selp.b32 	%r4589, %r6348, %r4584, %p15;
	// begin inline asm
	{mul.f16x2 %r4588,%r4589,%r6389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4591, {low,high};}

	// end inline asm
	selp.b32 	%r4593, %r6344, %r4591, %p15;
	// begin inline asm
	{mul.f16x2 %r4592,%r4593,%r6380;
}
	// end inline asm
	selp.b32 	%r4596, %r6348, %r4591, %p15;
	// begin inline asm
	{mul.f16x2 %r4595,%r4596,%r6377;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4598, {low,high};}

	// end inline asm
	selp.b32 	%r4600, %r6344, %r4598, %p15;
	// begin inline asm
	{mul.f16x2 %r4599,%r4600,%r6373;
}
	// end inline asm
	selp.b32 	%r4603, %r6348, %r4598, %p15;
	// begin inline asm
	{mul.f16x2 %r4602,%r4603,%r6372;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4605, {low,high};}

	// end inline asm
	selp.b32 	%r4607, %r6344, %r4605, %p15;
	// begin inline asm
	{mul.f16x2 %r4606,%r4607,%r6376;
}
	// end inline asm
	selp.b32 	%r4610, %r6348, %r4605, %p15;
	// begin inline asm
	{mul.f16x2 %r4609,%r4610,%r6375;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4612, {low,high};}

	// end inline asm
	selp.b32 	%r4614, %r6344, %r4612, %p15;
	// begin inline asm
	{mul.f16x2 %r4613,%r4614,%r6374;
}
	// end inline asm
	selp.b32 	%r4617, %r6348, %r4612, %p15;
	// begin inline asm
	{mul.f16x2 %r4616,%r4617,%r6371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4619, {low,high};}

	// end inline asm
	selp.b32 	%r4621, %r6344, %r4619, %p15;
	// begin inline asm
	{mul.f16x2 %r4620,%r4621,%r6370;
}
	// end inline asm
	selp.b32 	%r4624, %r6348, %r4619, %p15;
	// begin inline asm
	{mul.f16x2 %r4623,%r4624,%r6369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4626, {low,high};}

	// end inline asm
	selp.b32 	%r4628, %r6344, %r4626, %p15;
	// begin inline asm
	{mul.f16x2 %r4627,%r4628,%r6368;
}
	// end inline asm
	selp.b32 	%r4631, %r6348, %r4626, %p15;
	// begin inline asm
	{mul.f16x2 %r4630,%r4631,%r6365;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4633, {low,high};}

	// end inline asm
	selp.b32 	%r4635, %r6344, %r4633, %p15;
	// begin inline asm
	{mul.f16x2 %r4634,%r4635,%r6362;
}
	// end inline asm
	selp.b32 	%r4638, %r6348, %r4633, %p15;
	// begin inline asm
	{mul.f16x2 %r4637,%r4638,%r6361;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4640, {low,high};}

	// end inline asm
	selp.b32 	%r4642, %r6344, %r4640, %p15;
	// begin inline asm
	{mul.f16x2 %r4641,%r4642,%r1653;
}
	// end inline asm
	selp.b32 	%r4645, %r6348, %r4640, %p15;
	// begin inline asm
	{mul.f16x2 %r4644,%r4645,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4647, {low,high};}

	// end inline asm
	selp.b32 	%r4649, %r6344, %r4647, %p15;
	// begin inline asm
	{mul.f16x2 %r4648,%r4649,%r1653;
}
	// end inline asm
	selp.b32 	%r4652, %r6348, %r4647, %p15;
	// begin inline asm
	{mul.f16x2 %r4651,%r4652,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4654, {low,high};}

	// end inline asm
	selp.b32 	%r4656, %r6344, %r4654, %p15;
	// begin inline asm
	{mul.f16x2 %r4655,%r4656,%r6357;
}
	// end inline asm
	selp.b32 	%r4659, %r6348, %r4654, %p15;
	// begin inline asm
	{mul.f16x2 %r4658,%r4659,%r6356;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4661, {low,high};}

	// end inline asm
	selp.b32 	%r4663, %r6344, %r4661, %p15;
	// begin inline asm
	{mul.f16x2 %r4662,%r4663,%r6360;
}
	// end inline asm
	selp.b32 	%r4666, %r6348, %r4661, %p15;
	// begin inline asm
	{mul.f16x2 %r4665,%r4666,%r6359;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4668, {low,high};}

	// end inline asm
	selp.b32 	%r4670, %r6344, %r4668, %p15;
	// begin inline asm
	{mul.f16x2 %r4669,%r4670,%r6358;
}
	// end inline asm
	selp.b32 	%r4673, %r6348, %r4668, %p15;
	// begin inline asm
	{mul.f16x2 %r4672,%r4673,%r6355;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4675, {low,high};}

	// end inline asm
	selp.b32 	%r4677, %r6344, %r4675, %p15;
	// begin inline asm
	{mul.f16x2 %r4676,%r4677,%r6352;
}
	// end inline asm
	selp.b32 	%r4680, %r6348, %r4675, %p15;
	// begin inline asm
	{mul.f16x2 %r4679,%r4680,%r6351;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4682, {low,high};}

	// end inline asm
	selp.b32 	%r4684, %r6344, %r4682, %p15;
	// begin inline asm
	{mul.f16x2 %r4683,%r4684,%r6354;
}
	// end inline asm
	selp.b32 	%r4687, %r6348, %r4682, %p15;
	// begin inline asm
	{mul.f16x2 %r4686,%r4687,%r6353;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4689, {low,high};}

	// end inline asm
	selp.b32 	%r4691, %r6344, %r4689, %p15;
	// begin inline asm
	{mul.f16x2 %r4690,%r4691,%r1653;
}
	// end inline asm
	selp.b32 	%r4694, %r6348, %r4689, %p15;
	// begin inline asm
	{mul.f16x2 %r4693,%r4694,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4696, {low,high};}

	// end inline asm
	selp.b32 	%r4698, %r6344, %r4696, %p15;
	// begin inline asm
	{mul.f16x2 %r4697,%r4698,%r1653;
}
	// end inline asm
	selp.b32 	%r4701, %r6348, %r4696, %p15;
	// begin inline asm
	{mul.f16x2 %r4700,%r4701,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4703, {low,high};}

	// end inline asm
	selp.b32 	%r4705, %r6344, %r4703, %p15;
	// begin inline asm
	{mul.f16x2 %r4704,%r4705,%r1653;
}
	// end inline asm
	selp.b32 	%r4708, %r6348, %r4703, %p15;
	// begin inline asm
	{mul.f16x2 %r4707,%r4708,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4710, {low,high};}

	// end inline asm
	selp.b32 	%r4712, %r6344, %r4710, %p15;
	// begin inline asm
	{mul.f16x2 %r4711,%r4712,%r6350;
}
	// end inline asm
	selp.b32 	%r4715, %r6348, %r4710, %p15;
	// begin inline asm
	{mul.f16x2 %r4714,%r4715,%r6349;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4717, {low,high};}

	// end inline asm
	selp.b32 	%r4719, %r6344, %r4717, %p15;
	// begin inline asm
	{mul.f16x2 %r4718,%r4719,%r1653;
}
	// end inline asm
	selp.b32 	%r4722, %r6348, %r4717, %p15;
	// begin inline asm
	{mul.f16x2 %r4721,%r4722,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4724, {low,high};}

	// end inline asm
	selp.b32 	%r4726, %r6344, %r4724, %p15;
	// begin inline asm
	{mul.f16x2 %r4725,%r4726,%r1653;
}
	// end inline asm
	selp.b32 	%r4729, %r6348, %r4724, %p15;
	// begin inline asm
	{mul.f16x2 %r4728,%r4729,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4731, {low,high};}

	// end inline asm
	selp.b32 	%r4733, %r6344, %r4731, %p15;
	// begin inline asm
	{mul.f16x2 %r4732,%r4733,%r1653;
}
	// end inline asm
	selp.b32 	%r4736, %r6348, %r4731, %p15;
	// begin inline asm
	{mul.f16x2 %r4735,%r4736,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4738, {low,high};}

	// end inline asm
	selp.b32 	%r4740, %r6344, %r4738, %p15;
	// begin inline asm
	{mul.f16x2 %r4739,%r4740,%r1653;
}
	// end inline asm
	selp.b32 	%r4743, %r6348, %r4738, %p15;
	// begin inline asm
	{mul.f16x2 %r4742,%r4743,%r1653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4745, {low,high};}

	// end inline asm
	selp.b32 	%r4747, %r6344, %r4745, %p15;
	// begin inline asm
	{mul.f16x2 %r4746,%r4747,%r1653;
}
	// end inline asm
	selp.b32 	%r4750, %r6348, %r4745, %p15;
	// begin inline asm
	{mul.f16x2 %r4749,%r4750,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r6420,%r2920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4755,%r3031,%r2877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4758,%r4752,%r4755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4761,%r6252,%r4758;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4764,%r4585,%r4761;
}
	// end inline asm
	selp.b32 	%r6390, %r4585, %r4764, %p15;
	// begin inline asm
	{sub.f16x2 %r4767,%r6419,%r2986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4770,%r3065,%r2954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4773,%r4767,%r4770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4776,%r6252,%r4773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4779,%r4588,%r4776;
}
	// end inline asm
	selp.b32 	%r6387, %r4588, %r4779, %p15;
	// begin inline asm
	{sub.f16x2 %r4782,%r6416,%r3153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4785,%r6422,%r3110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4788,%r4782,%r4785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4791,%r6252,%r4788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4794,%r4592,%r4791;
}
	// end inline asm
	selp.b32 	%r6393, %r4592, %r4794, %p15;
	// begin inline asm
	{sub.f16x2 %r4797,%r6415,%r3219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4800,%r6421,%r3187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4803,%r4797,%r4800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4806,%r6252,%r4803;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4809,%r4595,%r4806;
}
	// end inline asm
	selp.b32 	%r6388, %r4595, %r4809, %p15;
	// begin inline asm
	{sub.f16x2 %r4812,%r6419,%r6420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4815,%r6343,%r4812;
}
	// end inline asm
	@%p15 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r6540,%r4599;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r6540,%r6344,%r4812;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r4826, 31;
	mov.u32 	%r4828, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4824,%r6540,%r4826,%r1732,%r4828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4829,%r4815,%r4824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4832,%r844,%r820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4835,%r4832,%r4829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4838,%r6252,%r4835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6392,%r4599,%r4838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r6421,%r6422;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4847,%r6343,%r4844;
}
	// end inline asm
	mov.u32 	%r6541, %r4606;
	@%p15 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r6541,%r6344,%r4844;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4856,%r6541,%r4826,%r1732,%r4828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4861,%r4847,%r4856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4864,%r6410,%r820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4867,%r4861,%r4864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4870,%r6252,%r4867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6396,%r4606,%r4870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r6412,%r6420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4879,%r6418,%r6422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4882,%r4876,%r4879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4885,%r6252,%r4882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4888,%r4613,%r4885;
}
	// end inline asm
	selp.b32 	%r6394, %r4613, %r4888, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6420;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4893,%r6420,%r422,%r1732,%r4828;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4893;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4899, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4900,%r4899,%r6419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4903,%r6347,%r4900;
}
	// end inline asm
	@%p15 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r6542,%r4602;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r6542,%r6348,%r4900;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r4918, 31;
	mov.u32 	%r4942, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4916,%r6542,%r4918,%r1732,%r4942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4921,%r4903,%r4916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4924,%r856,%r832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4927,%r4924,%r4921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4930,%r6252,%r4927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6391,%r4602,%r4930;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6422;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4938,%r6422,%r422,%r1732,%r4942;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4938;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4944, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4945,%r4944,%r6421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4948,%r6347,%r4945;
}
	// end inline asm
	mov.u32 	%r6543, %r4609;
	@%p15 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r6543,%r6348,%r4945;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4959,%r6543,%r4918,%r1732,%r4942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4964,%r4948,%r4959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4967,%r6409,%r832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4970,%r4964,%r4967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4973,%r6252,%r4970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6395,%r4609,%r4973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r6411,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4982,%r6417,%r6421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4985,%r4979,%r4982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4988,%r6252,%r4985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4991,%r4616,%r4988;
}
	// end inline asm
	selp.b32 	%r6389, %r4616, %r4991, %p15;
	// begin inline asm
	{sub.f16x2 %r4994,%r6417,%r6418;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4997,%r6343,%r4994;
}
	// end inline asm
	mov.u32 	%r6544, %r4620;
	@%p15 bra 	$L__BB0_712;

	// begin inline asm
	{mul.f16x2 %r6544,%r6344,%r4994;
}
	// end inline asm

$L__BB0_712:
	mov.u32 	%r5008, 31;
	mov.u32 	%r5047, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5006,%r6544,%r5008,%r1732,%r5047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5011,%r4997,%r5006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5014,%r6404,%r844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5017,%r5011,%r5014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5020,%r6252,%r5017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6386,%r4620,%r5020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5026,%r6406,%r3491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5029,%r3632,%r6418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5032,%r5026,%r5029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5035,%r6252,%r5032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5038,%r4627,%r5035;
}
	// end inline asm
	selp.b32 	%r6384, %r4627, %r5038, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6418;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5043,%r6418,%r422,%r1732,%r5047;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5043;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5049, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5050,%r5049,%r6417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5053,%r6347,%r5050;
}
	// end inline asm
	mov.u32 	%r6545, %r4623;
	@%p15 bra 	$L__BB0_714;

	// begin inline asm
	{mul.f16x2 %r6545,%r6348,%r5050;
}
	// end inline asm

$L__BB0_714:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5064,%r6545,%r5008,%r1732,%r5047;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5069,%r5053,%r5064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5072,%r6403,%r856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5075,%r5069,%r5072;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5078,%r6252,%r5075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6385,%r4623,%r5078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5084,%r6405,%r3572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5087,%r3666,%r6417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5090,%r5084,%r5087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5093,%r6252,%r5090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5096,%r4630,%r5093;
}
	// end inline asm
	selp.b32 	%r6383, %r4630, %r5096, %p15;
	// begin inline asm
	{sub.f16x2 %r5099,%r6415,%r6416;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5102,%r6343,%r5099;
}
	// end inline asm
	@%p15 bra 	$L__BB0_716;
	bra.uni 	$L__BB0_715;

$L__BB0_716:
	// begin inline asm
	{neg.f16x2 %r6546,%r4634;
}
	// end inline asm
	bra.uni 	$L__BB0_717;

$L__BB0_715:
	// begin inline asm
	{mul.f16x2 %r6546,%r6344,%r5099;
}
	// end inline asm

$L__BB0_717:
	mov.u32 	%r5115, 31;
	mov.u32 	%r5117, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5113,%r6546,%r5115,%r1732,%r5117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5118,%r5102,%r5113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5121,%r6410,%r874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5124,%r5121,%r5118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5127,%r6252,%r5124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6379,%r4634,%r5127;
}
	// end inline asm
	mov.u32 	%r6547, %r4641;
	@%p15 bra 	$L__BB0_719;

	mov.u32 	%r6547, %r6151;

$L__BB0_719:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5145,%r6547,%r5115,%r1732,%r5117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5150,%r5136,%r5145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5153,%r1653,%r874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5156,%r5150,%r5153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5159,%r6252,%r5156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6382,%r4641,%r5159;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5165,%r1653,%r6416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5168,%r6414,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5171,%r5165,%r5168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5174,%r6252,%r5171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5177,%r4648,%r5174;
}
	// end inline asm
	selp.b32 	%r6380, %r4648, %r5177, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6416;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5182,%r6416,%r422,%r1732,%r5117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5182;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5188, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5189,%r5188,%r6415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5192,%r6347,%r5189;
}
	// end inline asm
	@%p15 bra 	$L__BB0_721;
	bra.uni 	$L__BB0_720;

$L__BB0_721:
	// begin inline asm
	{neg.f16x2 %r6548,%r4637;
}
	// end inline asm
	bra.uni 	$L__BB0_722;

$L__BB0_720:
	// begin inline asm
	{mul.f16x2 %r6548,%r6348,%r5189;
}
	// end inline asm

$L__BB0_722:
	mov.u32 	%r5207, 31;
	mov.u32 	%r5231, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5205,%r6548,%r5207,%r1732,%r5231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5210,%r5192,%r5205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5213,%r6409,%r880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5216,%r5213,%r5210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5219,%r6252,%r5216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6378,%r4637,%r5219;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5227,%r1653,%r422,%r1732,%r5231;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5227;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5233, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5234,%r5233,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5237,%r6347,%r5234;
}
	// end inline asm
	mov.u32 	%r6549, %r4644;
	@%p15 bra 	$L__BB0_724;

	// begin inline asm
	{mul.f16x2 %r6549,%r6348,%r5234;
}
	// end inline asm

$L__BB0_724:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5248,%r6549,%r5207,%r1732,%r5231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5253,%r5237,%r5248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5256,%r1653,%r880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5259,%r5253,%r5256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5262,%r6252,%r5259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6381,%r4644,%r5262;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5268,%r1653,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5271,%r6413,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5274,%r5268,%r5271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5277,%r6252,%r5274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5280,%r4651,%r5277;
}
	// end inline asm
	selp.b32 	%r6377, %r4651, %r5280, %p15;
	// begin inline asm
	{sub.f16x2 %r5283,%r6411,%r6412;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5286,%r6343,%r5283;
}
	// end inline asm
	@%p15 bra 	$L__BB0_726;
	bra.uni 	$L__BB0_725;

$L__BB0_726:
	// begin inline asm
	{neg.f16x2 %r6550,%r4655;
}
	// end inline asm
	bra.uni 	$L__BB0_727;

$L__BB0_725:
	// begin inline asm
	{mul.f16x2 %r6550,%r6344,%r5283;
}
	// end inline asm

$L__BB0_727:
	mov.u32 	%r5299, 31;
	mov.u32 	%r5301, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5297,%r6550,%r5299,%r1732,%r5301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5302,%r5286,%r5297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5305,%r6404,%r6410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5308,%r5305,%r5302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5311,%r6252,%r5308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6373,%r4655,%r5311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5317,%r6413,%r6414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5320,%r6343,%r5317;
}
	// end inline asm
	mov.u32 	%r6551, %r4662;
	@%p15 bra 	$L__BB0_729;

	// begin inline asm
	{mul.f16x2 %r6551,%r6344,%r5317;
}
	// end inline asm

$L__BB0_729:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5329,%r6551,%r5299,%r1732,%r5301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5334,%r5320,%r5329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5337,%r6400,%r6410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5340,%r5334,%r5337;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5343,%r6252,%r5340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6376,%r4662,%r5343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5349,%r6402,%r6412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5352,%r6408,%r6414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5355,%r5349,%r5352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5358,%r6252,%r5355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5361,%r4669,%r5358;
}
	// end inline asm
	selp.b32 	%r6374, %r4669, %r5361, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6412;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5366,%r6412,%r422,%r1732,%r5301;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5366;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5372, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5373,%r5372,%r6411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5376,%r6347,%r5373;
}
	// end inline asm
	@%p15 bra 	$L__BB0_731;
	bra.uni 	$L__BB0_730;

$L__BB0_731:
	// begin inline asm
	{neg.f16x2 %r6552,%r4658;
}
	// end inline asm
	bra.uni 	$L__BB0_732;

$L__BB0_730:
	// begin inline asm
	{mul.f16x2 %r6552,%r6348,%r5373;
}
	// end inline asm

$L__BB0_732:
	mov.u32 	%r5391, 31;
	mov.u32 	%r5415, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5389,%r6552,%r5391,%r1732,%r5415;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5394,%r5376,%r5389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5397,%r6403,%r6409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5400,%r5397,%r5394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5403,%r6252,%r5400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6372,%r4658,%r5403;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6414;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5411,%r6414,%r422,%r1732,%r5415;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5411;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5417, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5418,%r5417,%r6413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5421,%r6347,%r5418;
}
	// end inline asm
	mov.u32 	%r6553, %r4665;
	@%p15 bra 	$L__BB0_734;

	// begin inline asm
	{mul.f16x2 %r6553,%r6348,%r5418;
}
	// end inline asm

$L__BB0_734:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5432,%r6553,%r5391,%r1732,%r5415;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5437,%r5421,%r5432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5440,%r6399,%r6409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5443,%r5437,%r5440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5446,%r6252,%r5443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6375,%r4665,%r5446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5452,%r6401,%r6411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5455,%r6407,%r6413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5458,%r5452,%r5455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5461,%r6252,%r5458;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5464,%r4672,%r5461;
}
	// end inline asm
	selp.b32 	%r6371, %r4672, %r5464, %p15;
	// begin inline asm
	{sub.f16x2 %r5467,%r6405,%r6406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5470,%r6343,%r5467;
}
	// end inline asm
	@%p15 bra 	$L__BB0_736;
	bra.uni 	$L__BB0_735;

$L__BB0_736:
	// begin inline asm
	{neg.f16x2 %r6554,%r4676;
}
	// end inline asm
	bra.uni 	$L__BB0_737;

$L__BB0_735:
	// begin inline asm
	{mul.f16x2 %r6554,%r6344,%r5467;
}
	// end inline asm

$L__BB0_737:
	mov.u32 	%r5483, 31;
	mov.u32 	%r5485, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5481,%r6554,%r5483,%r1732,%r5485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5486,%r5470,%r5481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5489,%r929,%r6404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5492,%r5489,%r5486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5495,%r6252,%r5492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6367,%r4676,%r5495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5501,%r6407,%r6408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5504,%r6343,%r5501;
}
	// end inline asm
	mov.u32 	%r6555, %r4683;
	@%p15 bra 	$L__BB0_739;

	// begin inline asm
	{mul.f16x2 %r6555,%r6344,%r5501;
}
	// end inline asm

$L__BB0_739:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5513,%r6555,%r5483,%r1732,%r5485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5518,%r5504,%r5513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5521,%r6398,%r6404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5524,%r5518,%r5521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5527,%r6252,%r5524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6370,%r4683,%r5527;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5533,%r1653,%r6406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5536,%r1653,%r6408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5539,%r5533,%r5536;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5542,%r6252,%r5539;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5545,%r4690,%r5542;
}
	// end inline asm
	selp.b32 	%r6368, %r4690, %r5545, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6406;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5550,%r6406,%r422,%r1732,%r5485;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5550;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5556, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5557,%r5556,%r6405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5560,%r6347,%r5557;
}
	// end inline asm
	@%p15 bra 	$L__BB0_741;
	bra.uni 	$L__BB0_740;

$L__BB0_741:
	// begin inline asm
	{neg.f16x2 %r6556,%r4679;
}
	// end inline asm
	bra.uni 	$L__BB0_742;

$L__BB0_740:
	// begin inline asm
	{mul.f16x2 %r6556,%r6348,%r5557;
}
	// end inline asm

$L__BB0_742:
	mov.u32 	%r5575, 31;
	mov.u32 	%r5599, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5573,%r6556,%r5575,%r1732,%r5599;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5578,%r5560,%r5573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5581,%r930,%r6403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5584,%r5581,%r5578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5587,%r6252,%r5584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6366,%r4679,%r5587;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6408;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5595,%r6408,%r422,%r1732,%r5599;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5595;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5601, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5602,%r5601,%r6407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5605,%r6347,%r5602;
}
	// end inline asm
	mov.u32 	%r6557, %r4686;
	@%p15 bra 	$L__BB0_744;

	// begin inline asm
	{mul.f16x2 %r6557,%r6348,%r5602;
}
	// end inline asm

$L__BB0_744:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5616,%r6557,%r5575,%r1732,%r5599;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5621,%r5605,%r5616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5624,%r6397,%r6403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5627,%r5621,%r5624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5630,%r6252,%r5627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6369,%r4686,%r5630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5636,%r1653,%r6405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5639,%r1653,%r6407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5642,%r5636,%r5639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5645,%r6252,%r5642;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5648,%r4693,%r5645;
}
	// end inline asm
	selp.b32 	%r6365, %r4693, %r5648, %p15;
	mov.u32 	%r6558, %r4697;
	@%p15 bra 	$L__BB0_746;

	mov.u32 	%r6558, %r6151;

$L__BB0_746:
	mov.u32 	%r5665, 31;
	mov.u32 	%r5689, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5663,%r6558,%r5665,%r1732,%r5689;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5668,%r5136,%r5663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5671,%r1653,%r929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r5668,%r5671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5677,%r6252,%r5674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6364,%r4697,%r5677;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5685,%r1653,%r422,%r1732,%r5689;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5685;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5691, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5692,%r5691,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5695,%r6347,%r5692;
}
	// end inline asm
	mov.u32 	%r6559, %r4700;
	@%p15 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r6559,%r6348,%r5692;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5706,%r6559,%r5665,%r1732,%r5689;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5711,%r5695,%r5706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5714,%r1653,%r930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5717,%r5711,%r5714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5720,%r6252,%r5717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6363,%r4700,%r5720;
}
	// end inline asm
	@%p15 bra 	$L__BB0_750;
	bra.uni 	$L__BB0_749;

$L__BB0_750:
	// begin inline asm
	{neg.f16x2 %r6560,%r4704;
}
	// end inline asm
	bra.uni 	$L__BB0_751;

$L__BB0_749:
	mov.u32 	%r6560, %r6151;

$L__BB0_751:
	mov.u32 	%r5742, 31;
	mov.u32 	%r5766, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5740,%r6560,%r5742,%r1732,%r5766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5745,%r5136,%r5740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5748,%r6400,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5751,%r5748,%r5745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5754,%r6252,%r5751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6362,%r4704,%r5754;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5762,%r1653,%r422,%r1732,%r5766;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5762;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5768, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5769,%r5768,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5772,%r6347,%r5769;
}
	// end inline asm
	@%p15 bra 	$L__BB0_753;
	bra.uni 	$L__BB0_752;

$L__BB0_753:
	// begin inline asm
	{neg.f16x2 %r6561,%r4707;
}
	// end inline asm
	bra.uni 	$L__BB0_754;

$L__BB0_752:
	// begin inline asm
	{mul.f16x2 %r6561,%r6348,%r5769;
}
	// end inline asm

$L__BB0_754:
	mov.u32 	%r5787, 31;
	mov.u32 	%r5789, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5785,%r6561,%r5787,%r1732,%r5789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5790,%r5772,%r5785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r6399,%r1653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5796,%r5793,%r5790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5799,%r6252,%r5796;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6361,%r4707,%r5799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5805,%r6401,%r6402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5808,%r6343,%r5805;
}
	// end inline asm
	@%p15 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r6562,%r4711;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r6562,%r6344,%r5805;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5821, 31;
	mov.u32 	%r5823, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5819,%r6562,%r5821,%r1732,%r5823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5824,%r5808,%r5819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5827,%r6398,%r6400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5830,%r5827,%r5824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5833,%r6252,%r5830;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6357,%r4711,%r5833;
}
	// end inline asm
	mov.u32 	%r6563, %r4718;
	@%p15 bra 	$L__BB0_759;

	mov.u32 	%r6563, %r6151;

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5851,%r6563,%r5821,%r1732,%r5823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5856,%r5136,%r5851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r1653,%r6400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5856,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r6252,%r5862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6360,%r4718,%r5865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r1653,%r6402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5877,%r5871,%r5133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5880,%r6252,%r5877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5883,%r4725,%r5880;
}
	// end inline asm
	selp.b32 	%r6358, %r4725, %r5883, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6402;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5888,%r6402,%r422,%r1732,%r5823;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5888;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5894, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5895,%r5894,%r6401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5898,%r6347,%r5895;
}
	// end inline asm
	@%p15 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r6564,%r4714;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r6564,%r6348,%r5895;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5913, 31;
	mov.u32 	%r5937, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5911,%r6564,%r5913,%r1732,%r5937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5916,%r5898,%r5911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r6397,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5922,%r5919,%r5916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5925,%r6252,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6356,%r4714,%r5925;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5933,%r1653,%r422,%r1732,%r5937;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5933;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5939, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5940,%r5939,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5943,%r6347,%r5940;
}
	// end inline asm
	mov.u32 	%r6565, %r4721;
	@%p15 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r6565,%r6348,%r5940;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5954,%r6565,%r5913,%r1732,%r5937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5959,%r5943,%r5954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5962,%r1653,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r5959,%r5962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5968,%r6252,%r5965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6359,%r4721,%r5968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5974,%r1653,%r6401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5980,%r5974,%r5133;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5983,%r6252,%r5980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5986,%r4728,%r5983;
}
	// end inline asm
	selp.b32 	%r6355, %r4728, %r5986, %p15;
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r6566,%r4732;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	mov.u32 	%r6566, %r6151;

$L__BB0_767:
	mov.u32 	%r6005, 31;
	mov.u32 	%r6007, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6003,%r6566,%r6005,%r1732,%r6007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6008,%r5136,%r6003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6011,%r1653,%r6398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6014,%r6011,%r6008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6017,%r6252,%r6014;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6352,%r4732,%r6017;
}
	// end inline asm
	mov.u32 	%r6567, %r4739;
	@%p15 bra 	$L__BB0_769;

	mov.u32 	%r6567, %r6151;

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6035,%r6567,%r6005,%r1732,%r6007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6040,%r5136,%r6035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6043,%r1653,%r6398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6046,%r6040,%r6043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6049,%r6252,%r6046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6354,%r4739,%r6049;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6057,%r1653,%r422,%r1732,%r6007;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6057;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6063, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6064,%r6063,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6067,%r6347,%r6064;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r6568,%r4735;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r6568,%r6348,%r6064;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r6082, 31;
	mov.u32 	%r6106, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6080,%r6568,%r6082,%r1732,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6085,%r6067,%r6080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r1653,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6088,%r6085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r6252,%r6091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6351,%r4735,%r6094;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6102,%r1653,%r422,%r1732,%r6106;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6102;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6108, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6109,%r6108,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6112,%r6347,%r6109;
}
	// end inline asm
	mov.u32 	%r6569, %r4742;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r6569,%r6348,%r6109;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6123,%r6569,%r6082,%r1732,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6128,%r6112,%r6123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6131,%r1653,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r6128,%r6131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r6252,%r6134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6353,%r4742,%r6137;
}
	// end inline asm
	@%p15 bra 	$L__BB0_776;
	bra.uni 	$L__BB0_775;

$L__BB0_776:
	// begin inline asm
	{neg.f16x2 %r6570,%r4746;
}
	// end inline asm
	bra.uni 	$L__BB0_777;

$L__BB0_775:
	mov.u32 	%r6570, %r6151;

$L__BB0_777:
	mov.u32 	%r6159, 31;
	mov.u32 	%r6183, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6157,%r6570,%r6159,%r1732,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6162,%r5136,%r6157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6168,%r5133,%r6162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6171,%r6252,%r6168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6350,%r4746,%r6171;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6179,%r1653,%r422,%r1732,%r6183;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6179;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6185, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6186,%r6185,%r1653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6189,%r6347,%r6186;
}
	// end inline asm
	@%p15 bra 	$L__BB0_779;
	bra.uni 	$L__BB0_778;

$L__BB0_779:
	// begin inline asm
	{neg.f16x2 %r6571,%r4749;
}
	// end inline asm
	bra.uni 	$L__BB0_780;

$L__BB0_778:
	// begin inline asm
	{mul.f16x2 %r6571,%r6348,%r6186;
}
	// end inline asm

$L__BB0_780:
	mov.u32 	%r6204, 31;
	mov.u32 	%r6206, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6202,%r6571,%r6204,%r1732,%r6206;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6207,%r6189,%r6202;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6213,%r5133,%r6207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6216,%r6252,%r6213;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6349,%r4749,%r6216;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6224, %r6423, %r1231;
	setp.eq.s32 	%p429, %r6224, 0;
	@%p429 bra 	$L__BB0_782;

	bar.sync 	0;
	bra.uni 	$L__BB0_789;

$L__BB0_782:
	@%p150 bra 	$L__BB0_784;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_784:
	bar.sync 	0;
	@%p151 bra 	$L__BB0_788;

	membar.gl;
	setp.eq.s32 	%p432, %r416, %r417;
	mov.u32 	%r6241, -2147483647;
	sub.s32 	%r6242, %r6241, %r415;
	selp.b32 	%r6230, %r6242, 1, %p432;
	// begin inline asm
	atom.add.release.gpu.u32 %r6229,[%rd25],%r6230;
	// end inline asm

$L__BB0_786:
	ld.volatile.u32 	%r6243, [%rd25];
	xor.b32  	%r6244, %r6243, %r6229;
	setp.gt.s32 	%p433, %r6244, -1;
	@%p433 bra 	$L__BB0_786;

	// begin inline asm
	ld.acquire.gpu.u32 %r6245,[%rd25];
	// end inline asm

$L__BB0_788:
	bar.sync 	0;

$L__BB0_789:
	add.s32 	%r6423, %r6423, 1;
	setp.lt.s32 	%p434, %r6423, %r39;
	@%p434 bra 	$L__BB0_302;

$L__BB0_790:
	ret;

}

