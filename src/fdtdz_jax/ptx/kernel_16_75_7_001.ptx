//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<470>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<553>;
	.reg .b32 	%r<6669>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<462>;


	mov.b64 	%rd32, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd32;
	ld.param.v2.u32 	{%r1233, %r1234}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1235, %r1236}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1237, %r1238}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1239, %r1240}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1241, %r1242}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1243, %r1244}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1245, %r1246}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1247, %r1248}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1249, %r1250}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1251, %r1252}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1253, 32;
	sub.s32 	%r39, %r1253, %r1240;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p17, %r39, %r40;
	add.s32 	%r1254, %r1246, -1;
	mad.lo.s32 	%r1255, %r1254, %r1245, %r1244;
	add.s32 	%r1256, %r1239, %r1238;
	add.s32 	%r1257, %r1256, %r1255;
	add.s32 	%r1258, %r1257, 1;
	mul.lo.s32 	%r1259, %r1233, %r1235;
	shl.b32 	%r41, %r1259, 1;
	shl.b32 	%r1260, %r1259, 2;
	div.s32 	%r1261, %r1258, %r1260;
	add.s32 	%r1262, %r1261, 1;
	mul.lo.s32 	%r1263, %r1262, %r1239;
	mul.lo.s32 	%r1264, %r1234, %r1236;
	shl.b32 	%r42, %r1264, 1;
	div.s32 	%r1265, %r1263, %r42;
	add.s32 	%r1266, %r1265, 1;
	mul.lo.s32 	%r43, %r1266, %r1238;
	@%p17 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6353, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6353, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd33, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd33;
	mad.lo.s32 	%r1269, %r1235, %r38, %r37;
	mad.lo.s32 	%r1270, %r1269, %r1234, %r36;
	mad.lo.s32 	%r1271, %r1270, %r1233, %r35;
	shl.b32 	%r47, %r1271, 5;
	add.s32 	%r6358, %r47, %r40;
	mul.lo.s32 	%r1272, %r1264, %r1259;
	shl.b32 	%r51, %r1272, 5;
	sub.s32 	%r52, %r1248, %r1247;
	mul.lo.s32 	%r1273, %r1246, %r52;
	sub.s32 	%r53, %r1250, %r1249;
	mul.lo.s32 	%r1274, %r1273, %r53;
	sub.s32 	%r54, %r1252, %r1251;
	mul.lo.s32 	%r1275, %r1274, %r54;
	mul.lo.s32 	%r55, %r1275, 3;
	setp.ge.s32 	%p18, %r6358, %r55;
	@%p18 bra 	$L__BB0_10;

	not.b32 	%r1276, %r40;
	add.s32 	%r1277, %r55, %r1276;
	sub.s32 	%r1278, %r1277, %r47;
	mul.lo.s32 	%r1279, %r1264, %r1233;
	mul.lo.s32 	%r1280, %r1279, %r1235;
	shl.b32 	%r1281, %r1280, 5;
	div.u32 	%r56, %r1278, %r1281;
	add.s32 	%r1282, %r56, 1;
	and.b32  	%r6355, %r1282, 3;
	setp.eq.s32 	%p19, %r6355, 0;
	mov.u32 	%r6356, %r6358;
	@%p19 bra 	$L__BB0_7;

	mov.u32 	%r6356, %r6358;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd34, %r6356, 4;
	add.s64 	%rd35, %rd2, %rd34;
	mov.u32 	%r1283, 0;
	st.global.u32 	[%rd35], %r1283;
	add.s32 	%r6356, %r6356, %r51;
	add.s32 	%r6355, %r6355, -1;
	setp.ne.s32 	%p20, %r6355, 0;
	@%p20 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p21, %r56, 3;
	@%p21 bra 	$L__BB0_10;

	mul.wide.s32 	%rd38, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd36, %r6356, 4;
	add.s64 	%rd37, %rd2, %rd36;
	mov.u32 	%r1284, 0;
	st.global.u32 	[%rd37], %r1284;
	add.s64 	%rd39, %rd37, %rd38;
	st.global.u32 	[%rd39], %r1284;
	add.s32 	%r1285, %r6356, %r51;
	add.s32 	%r1286, %r1285, %r51;
	add.s64 	%rd40, %rd39, %rd38;
	st.global.u32 	[%rd40], %r1284;
	add.s32 	%r1287, %r1286, %r51;
	add.s64 	%rd41, %rd40, %rd38;
	st.global.u32 	[%rd41], %r1284;
	add.s32 	%r6356, %r1287, %r51;
	setp.lt.s32 	%p22, %r6356, %r55;
	@%p22 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd42, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd42;
	sub.s32 	%r1288, %r1239, %r41;
	div.s32 	%r1289, %r1288, %r42;
	mul.lo.s32 	%r1290, %r1289, %r1238;
	sub.s32 	%r1291, %r1290, %r41;
	sub.s32 	%r1292, %r1238, %r42;
	mul.lo.s32 	%r1293, %r1292, %r1235;
	mul.lo.s32 	%r1294, %r1233, 384;
	add.s32 	%r1295, %r1294, %r1294;
	add.s32 	%r1296, %r1295, 128;
	mul.lo.s32 	%r1298, %r1264, 768;
	mul.lo.s32 	%r1299, %r1293, %r1296;
	mad.lo.s32 	%r65, %r1298, %r1291, %r1299;
	bra.uni 	$L__BB0_11;

$L__BB0_805:
	mov.f32 	%f552, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f552;
  cvt.rn.f16.f32 high, %f552;
  mov.b32 %r6339, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd457, %r6358, 4;
	add.s64 	%rd458, %rd3, %rd457;
	st.global.u32 	[%rd458], %r6339;
	add.s32 	%r6358, %r6358, %r51;

$L__BB0_11:
	setp.lt.s32 	%p23, %r6358, %r65;
	@%p23 bra 	$L__BB0_805;

	ld.param.u64 	%rd43, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd43;
	ld.param.u64 	%rd44, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd44;
	mad.lo.s32 	%r6396, %r1233, %r37, %r35;
	mul.lo.s32 	%r69, %r1234, %r38;
	add.s32 	%r70, %r69, %r36;
	setp.ge.s32 	%p24, %r6396, %r1238;
	@%p24 bra 	$L__BB0_50;

	setp.gt.s32 	%p25, %r39, %r40;
	add.s32 	%r71, %r1238, -4;
	add.s32 	%r72, %r1239, -4;
	mov.u32 	%r1300, 31;
	sub.s32 	%r1301, %r1300, %r40;
	selp.b32 	%r1302, %r40, %r1301, %p25;
	shl.b32 	%r1303, %r1302, 2;
	mov.u32 	%r1304, 2;
	sub.s32 	%r73, %r1303, %r1241;
	shl.b32 	%r1305, %r1240, 2;
	mov.u32 	%r1306, 128;
	sub.s32 	%r74, %r1306, %r1305;
	add.s32 	%r75, %r1248, -1;
	add.s32 	%r76, %r1250, -1;
	add.s32 	%r77, %r1252, -1;
	sub.s32 	%r1307, %r1304, %r1241;
	add.s32 	%r78, %r1307, %r1303;
	mul.lo.s32 	%r1308, %r1239, %r1238;
	shl.b32 	%r79, %r1308, 6;
	add.s32 	%r80, %r1238, -1;
	shl.b32 	%r81, %r40, 1;
	or.b32  	%r82, %r81, 1;
	add.s32 	%r83, %r73, 1;
	add.s32 	%r84, %r78, 1;
	shr.u32 	%r1309, %r82, 31;
	add.s32 	%r1310, %r82, %r1309;
	shr.s32 	%r86, %r1310, 1;
	and.b32  	%r1311, %r1310, -2;
	sub.s32 	%r1312, %r82, %r1311;
	add.s32 	%r85, %r1312, %r79;
	mov.u32 	%r6359, %r6396;

$L__BB0_14:
	setp.ge.s32 	%p26, %r70, %r1239;
	@%p26 bra 	$L__BB0_49;

	setp.lt.s32 	%p27, %r6359, 4;
	setp.ge.s32 	%p28, %r6359, %r71;
	or.pred  	%p1, %p27, %p28;
	setp.gt.s32 	%p29, %r1248, %r6359;
	selp.b32 	%r1313, %r6359, %r75, %p29;
	setp.gt.s32 	%p30, %r1247, %r6359;
	selp.b32 	%r1314, %r1247, %r1313, %p30;
	sub.s32 	%r1315, %r1314, %r1247;
	add.s32 	%r88, %r80, %r6359;
	mul.lo.s32 	%r89, %r1315, %r53;
	add.s32 	%r1316, %r1315, %r52;
	mul.lo.s32 	%r90, %r1316, %r53;
	add.s32 	%r1317, %r1316, %r52;
	mul.lo.s32 	%r91, %r1317, %r53;
	mov.u32 	%r6360, %r70;

$L__BB0_16:
	setp.lt.s32 	%p31, %r6360, 4;
	or.pred  	%p32, %p1, %p31;
	setp.ge.s32 	%p33, %r6360, %r72;
	or.pred  	%p2, %p33, %p32;
	setp.gt.s32 	%p34, %r1250, %r6360;
	selp.b32 	%r1318, %r6360, %r76, %p34;
	setp.gt.s32 	%p35, %r1249, %r6360;
	selp.b32 	%r1319, %r1249, %r1318, %p35;
	mul.lo.s32 	%r93, %r6360, %r1238;
	add.s32 	%r94, %r93, %r6359;
	shl.b32 	%r95, %r94, 6;
	sub.s32 	%r96, %r1319, %r1249;
	shl.b32 	%r1320, %r94, 5;
	add.s32 	%r1321, %r1320, %r40;
	shl.b32 	%r1322, %r1321, 2;
	add.s32 	%r1323, %r79, %r1322;
	mul.wide.s32 	%rd45, %r1323, 4;
	add.s64 	%rd7, %rd6, %rd45;
	@%p2 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_17;

$L__BB0_20:
	mov.f32 	%f44, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r1341, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1341;
	bra.uni 	$L__BB0_21;

$L__BB0_17:
	@%p25 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	rem.s32 	%r1326, %r73, %r74;
	add.s32 	%r1327, %r1326, %r74;
	rem.s32 	%r1328, %r1327, %r74;
	rem.s32 	%r1329, %r78, %r74;
	add.s32 	%r1330, %r1329, %r74;
	rem.s32 	%r1331, %r1330, %r74;
	add.s32 	%r1332, %r96, %r89;
	mul.lo.s32 	%r1333, %r1332, %r54;
	sub.s32 	%r1334, %r1333, %r1251;
	setp.gt.s32 	%p37, %r1252, %r1328;
	selp.b32 	%r1335, %r1328, %r77, %p37;
	setp.gt.s32 	%p38, %r1251, %r1328;
	selp.b32 	%r1336, %r1251, %r1335, %p38;
	add.s32 	%r1337, %r1334, %r1336;
	mul.wide.s32 	%rd46, %r1337, 4;
	add.s64 	%rd47, %rd5, %rd46;
	ld.global.f32 	%f41, [%rd47];
	setp.gt.s32 	%p39, %r1252, %r1331;
	selp.b32 	%r1338, %r1331, %r77, %p39;
	setp.gt.s32 	%p40, %r1251, %r1331;
	selp.b32 	%r1339, %r1251, %r1338, %p40;
	add.s32 	%r1340, %r1334, %r1339;
	mul.wide.s32 	%rd48, %r1340, 4;
	add.s64 	%rd49, %rd5, %rd48;
	ld.global.f32 	%f42, [%rd49];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r1325, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1325;
	bra.uni 	$L__BB0_21;

$L__BB0_18:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r1324, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1324;

$L__BB0_21:
	add.s32 	%r1342, %r81, %r95;
	mul.wide.s32 	%rd50, %r1342, 4;
	add.s64 	%rd8, %rd6, %rd50;
	@%p2 bra 	$L__BB0_25;
	bra.uni 	$L__BB0_22;

$L__BB0_25:
	mov.f32 	%f50, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f50;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r1360, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1360;
	bra.uni 	$L__BB0_26;

$L__BB0_22:
	@%p25 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	rem.s32 	%r1345, %r73, %r74;
	add.s32 	%r1346, %r1345, %r74;
	rem.s32 	%r1347, %r1346, %r74;
	rem.s32 	%r1348, %r78, %r74;
	add.s32 	%r1349, %r1348, %r74;
	rem.s32 	%r1350, %r1349, %r74;
	add.s32 	%r1351, %r96, %r90;
	mul.lo.s32 	%r1352, %r1351, %r54;
	sub.s32 	%r1353, %r1352, %r1251;
	setp.gt.s32 	%p42, %r1252, %r1347;
	selp.b32 	%r1354, %r1347, %r77, %p42;
	setp.gt.s32 	%p43, %r1251, %r1347;
	selp.b32 	%r1355, %r1251, %r1354, %p43;
	add.s32 	%r1356, %r1353, %r1355;
	mul.wide.s32 	%rd51, %r1356, 4;
	add.s64 	%rd52, %rd5, %rd51;
	ld.global.f32 	%f47, [%rd52];
	setp.gt.s32 	%p44, %r1252, %r1350;
	selp.b32 	%r1357, %r1350, %r77, %p44;
	setp.gt.s32 	%p45, %r1251, %r1350;
	selp.b32 	%r1358, %r1251, %r1357, %p45;
	add.s32 	%r1359, %r1353, %r1358;
	mul.wide.s32 	%rd53, %r1359, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f48, [%rd54];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r1344, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1344;
	bra.uni 	$L__BB0_26;

$L__BB0_23:
	mov.f32 	%f46, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f46;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r1343, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1343;

$L__BB0_26:
	@%p2 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_27;

$L__BB0_31:
	mov.f32 	%f56, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r1385, {low,high};}

	// end inline asm
	rem.s32 	%r1386, %r88, %r1238;
	add.s32 	%r1387, %r1386, %r93;
	shl.b32 	%r1388, %r1387, 5;
	add.s32 	%r1389, %r1388, %r40;
	shl.b32 	%r1390, %r1389, 2;
	add.s32 	%r1391, %r79, %r1390;
	add.s32 	%r1392, %r1391, 2;
	mul.wide.s32 	%rd61, %r1392, 4;
	add.s64 	%rd62, %rd6, %rd61;
	st.global.u32 	[%rd62], %r1385;
	bra.uni 	$L__BB0_32;

$L__BB0_27:
	@%p25 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_29:
	rem.s32 	%r1363, %r73, %r74;
	add.s32 	%r1364, %r1363, %r74;
	rem.s32 	%r1365, %r1364, %r74;
	rem.s32 	%r1366, %r78, %r74;
	add.s32 	%r1367, %r1366, %r74;
	rem.s32 	%r1368, %r1367, %r74;
	add.s32 	%r1369, %r96, %r91;
	mul.lo.s32 	%r1370, %r1369, %r54;
	sub.s32 	%r1371, %r1370, %r1251;
	setp.gt.s32 	%p47, %r1252, %r1365;
	selp.b32 	%r1372, %r1365, %r77, %p47;
	setp.gt.s32 	%p48, %r1251, %r1365;
	selp.b32 	%r1373, %r1251, %r1372, %p48;
	add.s32 	%r1374, %r1371, %r1373;
	mul.wide.s32 	%rd55, %r1374, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f53, [%rd56];
	setp.gt.s32 	%p49, %r1252, %r1368;
	selp.b32 	%r1375, %r1368, %r77, %p49;
	setp.gt.s32 	%p50, %r1251, %r1368;
	selp.b32 	%r1376, %r1251, %r1375, %p50;
	add.s32 	%r1377, %r1371, %r1376;
	mul.wide.s32 	%rd57, %r1377, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f54, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6361, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_30;

$L__BB0_28:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6361, {low,high};}

	// end inline asm

$L__BB0_30:
	rem.s32 	%r1378, %r88, %r1238;
	add.s32 	%r1379, %r1378, %r93;
	shl.b32 	%r1380, %r1379, 5;
	add.s32 	%r1381, %r1380, %r40;
	shl.b32 	%r1382, %r1381, 2;
	add.s32 	%r1383, %r79, %r1382;
	add.s32 	%r1384, %r1383, 2;
	mul.wide.s32 	%rd59, %r1384, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r6361;

$L__BB0_32:
	add.s32 	%r1394, %r1320, %r86;
	shl.b32 	%r1395, %r1394, 2;
	add.s32 	%r1396, %r85, %r1395;
	mul.wide.s32 	%rd63, %r1396, 4;
	add.s64 	%rd9, %rd6, %rd63;
	@%p2 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_33;

$L__BB0_36:
	mov.f32 	%f62, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r1414, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1414;
	bra.uni 	$L__BB0_37;

$L__BB0_33:
	@%p25 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	rem.s32 	%r1399, %r83, %r74;
	add.s32 	%r1400, %r1399, %r74;
	rem.s32 	%r1401, %r1400, %r74;
	rem.s32 	%r1402, %r84, %r74;
	add.s32 	%r1403, %r1402, %r74;
	rem.s32 	%r1404, %r1403, %r74;
	add.s32 	%r1405, %r96, %r89;
	mul.lo.s32 	%r1406, %r1405, %r54;
	sub.s32 	%r1407, %r1406, %r1251;
	setp.gt.s32 	%p52, %r1252, %r1401;
	selp.b32 	%r1408, %r1401, %r77, %p52;
	setp.gt.s32 	%p53, %r1251, %r1401;
	selp.b32 	%r1409, %r1251, %r1408, %p53;
	add.s32 	%r1410, %r1407, %r1409;
	mul.wide.s32 	%rd64, %r1410, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f59, [%rd65];
	setp.gt.s32 	%p54, %r1252, %r1404;
	selp.b32 	%r1411, %r1404, %r77, %p54;
	setp.gt.s32 	%p55, %r1251, %r1404;
	selp.b32 	%r1412, %r1251, %r1411, %p55;
	add.s32 	%r1413, %r1407, %r1412;
	mul.wide.s32 	%rd66, %r1413, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f60, [%rd67];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r1398, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1398;
	bra.uni 	$L__BB0_37;

$L__BB0_34:
	mov.f32 	%f58, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r1397, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1397;

$L__BB0_37:
	add.s32 	%r1415, %r82, %r95;
	mul.wide.s32 	%rd68, %r1415, 4;
	add.s64 	%rd10, %rd6, %rd68;
	@%p2 bra 	$L__BB0_41;
	bra.uni 	$L__BB0_38;

$L__BB0_41:
	mov.f32 	%f68, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r1433, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1433;
	bra.uni 	$L__BB0_42;

$L__BB0_38:
	@%p25 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_39;

$L__BB0_40:
	rem.s32 	%r1418, %r83, %r74;
	add.s32 	%r1419, %r1418, %r74;
	rem.s32 	%r1420, %r1419, %r74;
	rem.s32 	%r1421, %r84, %r74;
	add.s32 	%r1422, %r1421, %r74;
	rem.s32 	%r1423, %r1422, %r74;
	add.s32 	%r1424, %r96, %r90;
	mul.lo.s32 	%r1425, %r1424, %r54;
	sub.s32 	%r1426, %r1425, %r1251;
	setp.gt.s32 	%p57, %r1252, %r1420;
	selp.b32 	%r1427, %r1420, %r77, %p57;
	setp.gt.s32 	%p58, %r1251, %r1420;
	selp.b32 	%r1428, %r1251, %r1427, %p58;
	add.s32 	%r1429, %r1426, %r1428;
	mul.wide.s32 	%rd69, %r1429, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f65, [%rd70];
	setp.gt.s32 	%p59, %r1252, %r1423;
	selp.b32 	%r1430, %r1423, %r77, %p59;
	setp.gt.s32 	%p60, %r1251, %r1423;
	selp.b32 	%r1431, %r1251, %r1430, %p60;
	add.s32 	%r1432, %r1426, %r1431;
	mul.wide.s32 	%rd71, %r1432, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f66, [%rd72];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r1417, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1417;
	bra.uni 	$L__BB0_42;

$L__BB0_39:
	mov.f32 	%f64, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r1416, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1416;

$L__BB0_42:
	@%p2 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_43;

$L__BB0_47:
	mov.f32 	%f74, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r1458, {low,high};}

	// end inline asm
	rem.s32 	%r1459, %r88, %r1238;
	add.s32 	%r1460, %r1459, %r93;
	shl.b32 	%r1461, %r1460, 5;
	add.s32 	%r1462, %r1461, %r86;
	shl.b32 	%r1463, %r1462, 2;
	add.s32 	%r1464, %r85, %r1463;
	add.s32 	%r1465, %r1464, 2;
	mul.wide.s32 	%rd79, %r1465, 4;
	add.s64 	%rd80, %rd6, %rd79;
	st.global.u32 	[%rd80], %r1458;
	bra.uni 	$L__BB0_48;

$L__BB0_43:
	@%p25 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	rem.s32 	%r1436, %r83, %r74;
	add.s32 	%r1437, %r1436, %r74;
	rem.s32 	%r1438, %r1437, %r74;
	rem.s32 	%r1439, %r84, %r74;
	add.s32 	%r1440, %r1439, %r74;
	rem.s32 	%r1441, %r1440, %r74;
	add.s32 	%r1442, %r96, %r91;
	mul.lo.s32 	%r1443, %r1442, %r54;
	sub.s32 	%r1444, %r1443, %r1251;
	setp.gt.s32 	%p62, %r1252, %r1438;
	selp.b32 	%r1445, %r1438, %r77, %p62;
	setp.gt.s32 	%p63, %r1251, %r1438;
	selp.b32 	%r1446, %r1251, %r1445, %p63;
	add.s32 	%r1447, %r1444, %r1446;
	mul.wide.s32 	%rd73, %r1447, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f71, [%rd74];
	setp.gt.s32 	%p64, %r1252, %r1441;
	selp.b32 	%r1448, %r1441, %r77, %p64;
	setp.gt.s32 	%p65, %r1251, %r1441;
	selp.b32 	%r1449, %r1251, %r1448, %p65;
	add.s32 	%r1450, %r1444, %r1449;
	mul.wide.s32 	%rd75, %r1450, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f72, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6362, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f70, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6362, {low,high};}

	// end inline asm

$L__BB0_46:
	rem.s32 	%r1451, %r88, %r1238;
	add.s32 	%r1452, %r1451, %r93;
	shl.b32 	%r1453, %r1452, 5;
	add.s32 	%r1454, %r1453, %r86;
	shl.b32 	%r1455, %r1454, 2;
	add.s32 	%r1456, %r85, %r1455;
	add.s32 	%r1457, %r1456, 2;
	mul.wide.s32 	%rd77, %r1457, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r6362;

$L__BB0_48:
	add.s32 	%r6360, %r6360, %r1264;
	setp.lt.s32 	%p66, %r6360, %r1239;
	@%p66 bra 	$L__BB0_16;

$L__BB0_49:
	add.s32 	%r6359, %r6359, %r1259;
	setp.lt.s32 	%p67, %r6359, %r1238;
	@%p67 bra 	$L__BB0_14;

$L__BB0_50:
	ld.param.u64 	%rd81, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd81;
	ld.param.u64 	%rd82, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd82;
	@%p24 bra 	$L__BB0_134;

	shl.b32 	%r117, %r70, 1;
	mov.u64 	%rd83, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6363, %r6396;

$L__BB0_52:
	setp.ge.s32 	%p69, %r117, %r1239;
	@%p69 bra 	$L__BB0_133;

	mov.u32 	%r6364, %r117;

$L__BB0_54:
	setp.ne.s32 	%p70, %r40, 0;
	@%p70 bra 	$L__BB0_132;

	shr.u32 	%r1467, %r6364, 31;
	add.s32 	%r1468, %r6364, %r1467;
	shr.s32 	%r1469, %r1468, 1;
	mad.lo.s32 	%r1470, %r1469, %r1238, %r6363;
	shl.b32 	%r121, %r1470, 5;
	add.s32 	%r122, %r6364, -2;
	mul.lo.s32 	%r123, %r122, %r1238;
	add.s32 	%r1471, %r1239, %r122;
	mul.lo.s32 	%r124, %r1471, %r1238;
	add.s32 	%r1472, %r1471, %r1239;
	mul.lo.s32 	%r125, %r1472, %r1238;
	add.s32 	%r126, %r123, %r1238;
	add.s32 	%r127, %r6364, -1;
	add.s32 	%r1473, %r1239, %r127;
	mul.lo.s32 	%r128, %r1473, %r1238;
	add.s32 	%r1474, %r1473, %r1239;
	mul.lo.s32 	%r129, %r1474, %r1238;
	add.s32 	%r1475, %r1239, %r6364;
	mul.lo.s32 	%r130, %r1475, %r1238;
	add.s32 	%r1476, %r1475, %r1239;
	mul.lo.s32 	%r131, %r1476, %r1238;
	mul.lo.s32 	%r132, %r6364, %r1238;
	add.s32 	%r133, %r132, %r1238;
	add.s32 	%r134, %r6364, 1;
	add.s32 	%r1477, %r1239, %r134;
	mul.lo.s32 	%r135, %r1477, %r1238;
	add.s32 	%r1478, %r1477, %r1239;
	mul.lo.s32 	%r136, %r1478, %r1238;
	add.s32 	%r137, %r133, %r1238;
	add.s32 	%r138, %r6364, 2;
	add.s32 	%r1479, %r1239, %r138;
	mul.lo.s32 	%r139, %r1479, %r1238;
	add.s32 	%r1480, %r1479, %r1239;
	mul.lo.s32 	%r140, %r1480, %r1238;
	mov.u32 	%r6367, 0;
	mov.u64 	%rd459, %rd83;

$L__BB0_56:
	ld.global.nc.u32 	%r1481, [%rd459];
	cvt.rn.f64.s32 	%fd1, %r1481;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r142, %r1481, %r6363;
	setp.lt.s32 	%p71, %r142, %r1238;
	or.b32  	%r1482, %r122, %r142;
	setp.gt.s32 	%p72, %r1482, -1;
	and.pred  	%p73, %p71, %p72;
	setp.lt.s32 	%p74, %r122, %r1239;
	and.pred  	%p3, %p74, %p73;
	cvt.rn.f32.f64 	%f75, %fd3;
	add.f32 	%f76, %f75, 0f3E800000;
	abs.f32 	%f1, %f76;
	add.f32 	%f77, %f1, 0f40200000;
	setp.geu.f32 	%p75, %f77, 0f40000000;
	@%p75 bra 	$L__BB0_61;

	@%p3 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1485, %r123, %r142;
	mul.wide.s32 	%rd84, %r1485, 4;
	add.s64 	%rd85, %rd11, %rd84;
	ld.global.f32 	%f80, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6366, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6366, {low,high};}

	// end inline asm

$L__BB0_60:
	add.s32 	%r1486, %r6367, %r121;
	mul.wide.s32 	%rd86, %r1486, 4;
	add.s64 	%rd87, %rd12, %rd86;
	st.global.u32 	[%rd87], %r6366;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_61:
	cvt.rn.f32.f64 	%f81, %fd1;
	add.f32 	%f82, %f81, 0f3E800000;
	abs.f32 	%f2, %f82;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p76, %f3, 0f40000000;
	@%p76 bra 	$L__BB0_66;

	@%p3 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_63;

$L__BB0_64:
	add.s32 	%r1489, %r124, %r142;
	mul.wide.s32 	%rd88, %r1489, 4;
	add.s64 	%rd89, %rd11, %rd88;
	ld.global.f32 	%f85, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f85;
  mov.b32 %r6368, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_65;

$L__BB0_63:
	mov.f32 	%f84, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f84;
  cvt.rn.f16.f32 high, %f84;
  mov.b32 %r6368, {low,high};}

	// end inline asm

$L__BB0_65:
	add.s32 	%r1490, %r6367, %r121;
	mul.wide.s32 	%rd90, %r1490, 4;
	add.s64 	%rd91, %rd12, %rd90;
	st.global.u32 	[%rd91], %r6368;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_66:
	add.f32 	%f86, %f2, 0f40200000;
	setp.geu.f32 	%p77, %f86, 0f40000000;
	@%p77 bra 	$L__BB0_71;

	@%p3 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_68;

$L__BB0_69:
	add.s32 	%r1493, %r125, %r142;
	mul.wide.s32 	%rd92, %r1493, 4;
	add.s64 	%rd93, %rd11, %rd92;
	ld.global.f32 	%f89, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6370, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_70;

$L__BB0_68:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6370, {low,high};}

	// end inline asm

$L__BB0_70:
	add.s32 	%r1494, %r6367, %r121;
	mul.wide.s32 	%rd94, %r1494, 4;
	add.s64 	%rd95, %rd12, %rd94;
	st.global.u32 	[%rd95], %r6370;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_71:
	or.b32  	%r1495, %r127, %r142;
	setp.gt.s32 	%p78, %r1495, -1;
	and.pred  	%p80, %p71, %p78;
	setp.le.s32 	%p81, %r6364, %r1239;
	and.pred  	%p4, %p81, %p80;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p82, %f4, 0f40000000;
	@%p82 bra 	$L__BB0_76;

	@%p4 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_73;

$L__BB0_74:
	add.s32 	%r1498, %r126, %r142;
	mul.wide.s32 	%rd96, %r1498, 4;
	add.s64 	%rd97, %rd11, %rd96;
	ld.global.f32 	%f92, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f92;
  mov.b32 %r6372, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_75;

$L__BB0_73:
	mov.f32 	%f91, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f91;
  cvt.rn.f16.f32 high, %f91;
  mov.b32 %r6372, {low,high};}

	// end inline asm

$L__BB0_75:
	add.s32 	%r1499, %r6367, %r121;
	mul.wide.s32 	%rd98, %r1499, 4;
	add.s64 	%rd99, %rd12, %rd98;
	st.global.u32 	[%rd99], %r6372;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_76:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p83, %f5, 0f40000000;
	@%p83 bra 	$L__BB0_81;

	@%p4 bra 	$L__BB0_79;
	bra.uni 	$L__BB0_78;

$L__BB0_79:
	add.s32 	%r1502, %r128, %r142;
	mul.wide.s32 	%rd100, %r1502, 4;
	add.s64 	%rd101, %rd11, %rd100;
	ld.global.f32 	%f95, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f95;
  mov.b32 %r6374, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_80;

$L__BB0_78:
	mov.f32 	%f94, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f94;
  cvt.rn.f16.f32 high, %f94;
  mov.b32 %r6374, {low,high};}

	// end inline asm

$L__BB0_80:
	add.s32 	%r1503, %r6367, %r121;
	mul.wide.s32 	%rd102, %r1503, 4;
	add.s64 	%rd103, %rd12, %rd102;
	st.global.u32 	[%rd103], %r6374;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_81:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p84, %f6, 0f40000000;
	@%p84 bra 	$L__BB0_86;

	@%p4 bra 	$L__BB0_84;
	bra.uni 	$L__BB0_83;

$L__BB0_84:
	add.s32 	%r1506, %r129, %r142;
	mul.wide.s32 	%rd104, %r1506, 4;
	add.s64 	%rd105, %rd11, %rd104;
	ld.global.f32 	%f98, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r6376, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_85;

$L__BB0_83:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r6376, {low,high};}

	// end inline asm

$L__BB0_85:
	add.s32 	%r1507, %r6367, %r121;
	mul.wide.s32 	%rd106, %r1507, 4;
	add.s64 	%rd107, %rd12, %rd106;
	st.global.u32 	[%rd107], %r6376;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_86:
	or.b32  	%r1508, %r6364, %r142;
	setp.gt.s32 	%p85, %r1508, -1;
	and.pred  	%p87, %p71, %p85;
	setp.lt.s32 	%p88, %r6364, %r1239;
	and.pred  	%p5, %p88, %p87;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p89, %f7, 0f40000000;
	@%p89 bra 	$L__BB0_91;

	@%p5 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_88;

$L__BB0_89:
	add.s32 	%r1511, %r132, %r142;
	mul.wide.s32 	%rd108, %r1511, 4;
	add.s64 	%rd109, %rd11, %rd108;
	ld.global.f32 	%f101, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f101;
  mov.b32 %r6378, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_90;

$L__BB0_88:
	mov.f32 	%f100, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f100;
  cvt.rn.f16.f32 high, %f100;
  mov.b32 %r6378, {low,high};}

	// end inline asm

$L__BB0_90:
	add.s32 	%r1512, %r6367, %r121;
	mul.wide.s32 	%rd110, %r1512, 4;
	add.s64 	%rd111, %rd12, %rd110;
	st.global.u32 	[%rd111], %r6378;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_91:
	add.f32 	%f102, %f2, 0f00000000;
	setp.geu.f32 	%p90, %f102, 0f40000000;
	@%p90 bra 	$L__BB0_96;

	@%p5 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_93;

$L__BB0_94:
	add.s32 	%r1515, %r130, %r142;
	mul.wide.s32 	%rd112, %r1515, 4;
	add.s64 	%rd113, %rd11, %rd112;
	ld.global.f32 	%f105, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6380, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_95;

$L__BB0_93:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6380, {low,high};}

	// end inline asm

$L__BB0_95:
	add.s32 	%r1516, %r6367, %r121;
	mul.wide.s32 	%rd114, %r1516, 4;
	add.s64 	%rd115, %rd12, %rd114;
	st.global.u32 	[%rd115], %r6380;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_96:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p91, %f8, 0f40000000;
	@%p91 bra 	$L__BB0_101;

	@%p5 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;

$L__BB0_99:
	add.s32 	%r1519, %r131, %r142;
	mul.wide.s32 	%rd116, %r1519, 4;
	add.s64 	%rd117, %rd11, %rd116;
	ld.global.f32 	%f108, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6382, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_100;

$L__BB0_98:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6382, {low,high};}

	// end inline asm

$L__BB0_100:
	add.s32 	%r1520, %r6367, %r121;
	mul.wide.s32 	%rd118, %r1520, 4;
	add.s64 	%rd119, %rd12, %rd118;
	st.global.u32 	[%rd119], %r6382;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_101:
	or.b32  	%r1521, %r134, %r142;
	setp.gt.s32 	%p92, %r1521, -1;
	and.pred  	%p94, %p71, %p92;
	setp.lt.s32 	%p95, %r134, %r1239;
	and.pred  	%p6, %p95, %p94;
	@%p89 bra 	$L__BB0_106;

	@%p6 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_103;

$L__BB0_104:
	add.s32 	%r1524, %r133, %r142;
	mul.wide.s32 	%rd120, %r1524, 4;
	add.s64 	%rd121, %rd11, %rd120;
	ld.global.f32 	%f111, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6384, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_105;

$L__BB0_103:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6384, {low,high};}

	// end inline asm

$L__BB0_105:
	add.s32 	%r1525, %r6367, %r121;
	mul.wide.s32 	%rd122, %r1525, 4;
	add.s64 	%rd123, %rd12, %rd122;
	st.global.u32 	[%rd123], %r6384;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_106:
	@%p83 bra 	$L__BB0_111;

	@%p6 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_108;

$L__BB0_109:
	add.s32 	%r1528, %r135, %r142;
	mul.wide.s32 	%rd124, %r1528, 4;
	add.s64 	%rd125, %rd11, %rd124;
	ld.global.f32 	%f114, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6386, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_110;

$L__BB0_108:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6386, {low,high};}

	// end inline asm

$L__BB0_110:
	add.s32 	%r1529, %r6367, %r121;
	mul.wide.s32 	%rd126, %r1529, 4;
	add.s64 	%rd127, %rd12, %rd126;
	st.global.u32 	[%rd127], %r6386;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_111:
	@%p91 bra 	$L__BB0_116;

	@%p6 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_113;

$L__BB0_114:
	add.s32 	%r1532, %r136, %r142;
	mul.wide.s32 	%rd128, %r1532, 4;
	add.s64 	%rd129, %rd11, %rd128;
	ld.global.f32 	%f117, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f117;
  mov.b32 %r6388, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_115;

$L__BB0_113:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6388, {low,high};}

	// end inline asm

$L__BB0_115:
	add.s32 	%r1533, %r6367, %r121;
	mul.wide.s32 	%rd130, %r1533, 4;
	add.s64 	%rd131, %rd12, %rd130;
	st.global.u32 	[%rd131], %r6388;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_116:
	or.b32  	%r1534, %r138, %r142;
	setp.gt.s32 	%p99, %r1534, -1;
	and.pred  	%p101, %p71, %p99;
	setp.lt.s32 	%p102, %r138, %r1239;
	and.pred  	%p7, %p102, %p101;
	@%p82 bra 	$L__BB0_121;

	@%p7 bra 	$L__BB0_119;
	bra.uni 	$L__BB0_118;

$L__BB0_119:
	add.s32 	%r1537, %r137, %r142;
	mul.wide.s32 	%rd132, %r1537, 4;
	add.s64 	%rd133, %rd11, %rd132;
	ld.global.f32 	%f120, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f120;
  mov.b32 %r6390, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_120;

$L__BB0_118:
	mov.f32 	%f119, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f119;
  cvt.rn.f16.f32 high, %f119;
  mov.b32 %r6390, {low,high};}

	// end inline asm

$L__BB0_120:
	add.s32 	%r1538, %r6367, %r121;
	mul.wide.s32 	%rd134, %r1538, 4;
	add.s64 	%rd135, %rd12, %rd134;
	st.global.u32 	[%rd135], %r6390;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_121:
	@%p76 bra 	$L__BB0_126;

	@%p7 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_123;

$L__BB0_124:
	add.s32 	%r1541, %r139, %r142;
	mul.wide.s32 	%rd136, %r1541, 4;
	add.s64 	%rd137, %rd11, %rd136;
	ld.global.f32 	%f123, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f123;
  mov.b32 %r6392, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_125;

$L__BB0_123:
	mov.f32 	%f122, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f122;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6392, {low,high};}

	// end inline asm

$L__BB0_125:
	add.s32 	%r1542, %r6367, %r121;
	mul.wide.s32 	%rd138, %r1542, 4;
	add.s64 	%rd139, %rd12, %rd138;
	st.global.u32 	[%rd139], %r6392;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_126:
	@%p84 bra 	$L__BB0_131;

	@%p7 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1545, %r140, %r142;
	mul.wide.s32 	%rd140, %r1545, 4;
	add.s64 	%rd141, %rd11, %rd140;
	ld.global.f32 	%f126, [%rd141];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r6394, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r6394, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1546, %r6367, %r121;
	mul.wide.s32 	%rd142, %r1546, 4;
	add.s64 	%rd143, %rd12, %rd142;
	st.global.u32 	[%rd143], %r6394;
	add.s32 	%r6367, %r6367, 1;

$L__BB0_131:
	add.s64 	%rd459, %rd459, 4;
	mov.u64 	%rd144, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd145, %rd144, 24;
	setp.ne.s64 	%p106, %rd459, %rd145;
	@%p106 bra 	$L__BB0_56;

$L__BB0_132:
	add.s32 	%r6364, %r6364, %r42;
	setp.lt.s32 	%p107, %r6364, %r1239;
	@%p107 bra 	$L__BB0_54;

$L__BB0_133:
	add.s32 	%r6363, %r6363, %r1259;
	setp.lt.s32 	%p108, %r6363, %r1238;
	@%p108 bra 	$L__BB0_52;

$L__BB0_134:
	setp.eq.s32 	%p109, %r1242, 1;
	ld.param.u64 	%rd146, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd146;
	ld.param.u64 	%rd147, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd147;
	@%p109 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_135;

$L__BB0_152:
	@%p24 bra 	$L__BB0_281;

	shl.b32 	%r246, %r70, 1;
	shr.u32 	%r1594, %r1243, 31;
	add.s32 	%r1595, %r1243, %r1594;
	shr.u32 	%r1596, %r1595, 1;
	and.b32  	%r247, %r1596, 1;
	mov.u64 	%rd167, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_154:
	setp.ge.s32 	%p119, %r246, %r1239;
	@%p119 bra 	$L__BB0_280;

	mov.u32 	%r6402, %r246;

$L__BB0_156:
	setp.ne.s32 	%p120, %r40, 0;
	@%p120 bra 	$L__BB0_279;

	shr.u32 	%r1598, %r6402, 31;
	add.s32 	%r1599, %r6402, %r1598;
	shr.s32 	%r1600, %r1599, 1;
	mad.lo.s32 	%r1601, %r1600, %r1238, %r6396;
	shl.b32 	%r251, %r1601, 5;
	add.s32 	%r252, %r6402, -2;
	mul.lo.s32 	%r253, %r252, %r1238;
	add.s32 	%r1602, %r1239, %r252;
	mul.lo.s32 	%r254, %r1602, %r1238;
	add.s32 	%r255, %r253, %r1238;
	add.s32 	%r256, %r6402, -1;
	add.s32 	%r1603, %r1239, %r256;
	mul.lo.s32 	%r257, %r1603, %r1238;
	add.s32 	%r1604, %r1239, %r6402;
	mul.lo.s32 	%r258, %r1604, %r1238;
	mul.lo.s32 	%r259, %r6402, %r1238;
	add.s32 	%r260, %r259, %r1238;
	add.s32 	%r261, %r6402, 1;
	add.s32 	%r1605, %r1239, %r261;
	mul.lo.s32 	%r262, %r1605, %r1238;
	add.s32 	%r263, %r260, %r1238;
	add.s32 	%r264, %r6402, 2;
	add.s32 	%r1606, %r1239, %r264;
	mul.lo.s32 	%r265, %r1606, %r1238;
	mov.u32 	%r6406, 0;
	mov.u64 	%rd460, 24;
	mov.u64 	%rd461, %rd167;

$L__BB0_158:
	ld.global.nc.u32 	%r1607, [%rd461];
	cvt.rn.f64.s32 	%fd2, %r1607;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r267, %r1607, %r6396;
	setp.lt.s32 	%p121, %r267, %r1238;
	or.b32  	%r1608, %r252, %r267;
	setp.gt.s32 	%p122, %r1608, -1;
	and.pred  	%p123, %p121, %p122;
	setp.lt.s32 	%p124, %r252, %r1239;
	and.pred  	%p8, %p124, %p123;
	cvt.rn.f32.f64 	%f143, %fd4;
	add.f32 	%f144, %f143, 0f3E800000;
	abs.f32 	%f9, %f144;
	add.f32 	%f145, %f9, 0f40200000;
	setp.geu.f32 	%p125, %f145, 0f40000000;
	@%p125 bra 	$L__BB0_170;

	@%p8 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	setp.eq.s32 	%p126, %r247, 0;
	add.s32 	%r1610, %r253, %r267;
	shl.b32 	%r1611, %r1610, 1;
	mul.wide.s32 	%rd168, %r1611, 4;
	add.s64 	%rd169, %rd15, %rd168;
	ld.global.f32 	%f10, [%rd169];
	@%p126 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_162;

$L__BB0_163:
	mov.f32 	%f151, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r6404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_160:
	mov.f32 	%f147, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f147;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r6404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_162:
	mov.f32 	%f148, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f148;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6404, {low,high};}

	// end inline asm

$L__BB0_164:
	add.s32 	%r272, %r6406, %r251;
	mul.wide.s32 	%rd170, %r272, 4;
	add.s64 	%rd171, %rd16, %rd170;
	st.global.u32 	[%rd171], %r6404;
	@%p8 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	setp.eq.s32 	%p127, %r247, 0;
	add.s32 	%r1615, %r254, %r267;
	shl.b32 	%r1616, %r1615, 1;
	mul.wide.s32 	%rd172, %r1616, 4;
	add.s64 	%rd173, %rd15, %rd172;
	ld.global.f32 	%f11, [%rd173];
	@%p127 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_167;

$L__BB0_168:
	mov.f32 	%f157, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f157;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_165:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_167:
	mov.f32 	%f154, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6405, {low,high};}

	// end inline asm

$L__BB0_169:
	add.s32 	%r1619, %r272, 1;
	mul.wide.s32 	%rd174, %r1619, 4;
	add.s64 	%rd175, %rd16, %rd174;
	st.global.u32 	[%rd175], %r6405;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_170:
	cvt.rn.f32.f64 	%f158, %fd2;
	add.f32 	%f159, %f158, 0f3E800000;
	abs.f32 	%f12, %f159;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p128, %f13, 0f40000000;
	@%p128 bra 	$L__BB0_182;

	@%p8 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	setp.eq.s32 	%p129, %r247, 0;
	add.s32 	%r1621, %r253, %r267;
	shl.b32 	%r1622, %r1621, 1;
	or.b32  	%r1623, %r1622, 1;
	mul.wide.s32 	%rd176, %r1623, 4;
	add.s64 	%rd177, %rd15, %rd176;
	ld.global.f32 	%f14, [%rd177];
	@%p129 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_174;

$L__BB0_175:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_172:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_174:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6407, {low,high};}

	// end inline asm

$L__BB0_176:
	add.s32 	%r283, %r6406, %r251;
	mul.wide.s32 	%rd178, %r283, 4;
	add.s64 	%rd179, %rd16, %rd178;
	st.global.u32 	[%rd179], %r6407;
	@%p8 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	setp.eq.s32 	%p130, %r247, 0;
	add.s32 	%r1627, %r254, %r267;
	shl.b32 	%r1628, %r1627, 1;
	or.b32  	%r1629, %r1628, 1;
	mul.wide.s32 	%rd180, %r1629, 4;
	add.s64 	%rd181, %rd15, %rd180;
	ld.global.f32 	%f15, [%rd181];
	@%p130 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_179;

$L__BB0_180:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_177:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_179:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6408, {low,high};}

	// end inline asm

$L__BB0_181:
	add.s32 	%r1632, %r283, 1;
	mul.wide.s32 	%rd182, %r1632, 4;
	add.s64 	%rd183, %rd16, %rd182;
	st.global.u32 	[%rd183], %r6408;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_182:
	or.b32  	%r1633, %r256, %r267;
	setp.gt.s32 	%p131, %r1633, -1;
	and.pred  	%p133, %p121, %p131;
	setp.le.s32 	%p134, %r6402, %r1239;
	and.pred  	%p9, %p134, %p133;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p135, %f16, 0f40000000;
	@%p135 bra 	$L__BB0_194;

	@%p9 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	setp.eq.s32 	%p136, %r247, 0;
	add.s32 	%r1635, %r255, %r267;
	shl.b32 	%r1636, %r1635, 1;
	mul.wide.s32 	%rd184, %r1636, 4;
	add.s64 	%rd185, %rd15, %rd184;
	ld.global.f32 	%f17, [%rd185];
	@%p136 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_186;

$L__BB0_187:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_184:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_186:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6410, {low,high};}

	// end inline asm

$L__BB0_188:
	add.s32 	%r294, %r6406, %r251;
	mul.wide.s32 	%rd186, %r294, 4;
	add.s64 	%rd187, %rd16, %rd186;
	st.global.u32 	[%rd187], %r6410;
	@%p9 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	setp.eq.s32 	%p137, %r247, 0;
	add.s32 	%r1640, %r257, %r267;
	shl.b32 	%r1641, %r1640, 1;
	mul.wide.s32 	%rd188, %r1641, 4;
	add.s64 	%rd189, %rd15, %rd188;
	ld.global.f32 	%f18, [%rd189];
	@%p137 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_191;

$L__BB0_192:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_189:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_191:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6411, {low,high};}

	// end inline asm

$L__BB0_193:
	add.s32 	%r1644, %r294, 1;
	mul.wide.s32 	%rd190, %r1644, 4;
	add.s64 	%rd191, %rd16, %rd190;
	st.global.u32 	[%rd191], %r6411;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_194:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p138, %f19, 0f40000000;
	@%p138 bra 	$L__BB0_206;

	@%p9 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	setp.eq.s32 	%p139, %r247, 0;
	add.s32 	%r1646, %r255, %r267;
	shl.b32 	%r1647, %r1646, 1;
	or.b32  	%r1648, %r1647, 1;
	mul.wide.s32 	%rd192, %r1648, 4;
	add.s64 	%rd193, %rd15, %rd192;
	ld.global.f32 	%f20, [%rd193];
	@%p139 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;

$L__BB0_199:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_196:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_198:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6413, {low,high};}

	// end inline asm

$L__BB0_200:
	add.s32 	%r305, %r6406, %r251;
	mul.wide.s32 	%rd194, %r305, 4;
	add.s64 	%rd195, %rd16, %rd194;
	st.global.u32 	[%rd195], %r6413;
	@%p9 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	setp.eq.s32 	%p140, %r247, 0;
	add.s32 	%r1652, %r257, %r267;
	shl.b32 	%r1653, %r1652, 1;
	or.b32  	%r1654, %r1653, 1;
	mul.wide.s32 	%rd196, %r1654, 4;
	add.s64 	%rd197, %rd15, %rd196;
	ld.global.f32 	%f21, [%rd197];
	@%p140 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;

$L__BB0_204:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_201:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_203:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6414, {low,high};}

	// end inline asm

$L__BB0_205:
	add.s32 	%r1657, %r305, 1;
	mul.wide.s32 	%rd198, %r1657, 4;
	add.s64 	%rd199, %rd16, %rd198;
	st.global.u32 	[%rd199], %r6414;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_206:
	or.b32  	%r1658, %r6402, %r267;
	setp.gt.s32 	%p141, %r1658, -1;
	and.pred  	%p143, %p121, %p141;
	setp.lt.s32 	%p144, %r6402, %r1239;
	and.pred  	%p10, %p144, %p143;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p145, %f22, 0f40000000;
	@%p145 bra 	$L__BB0_218;

	@%p10 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	setp.eq.s32 	%p146, %r247, 0;
	add.s32 	%r1660, %r259, %r267;
	shl.b32 	%r1661, %r1660, 1;
	mul.wide.s32 	%rd200, %r1661, 4;
	add.s64 	%rd201, %rd15, %rd200;
	ld.global.f32 	%f23, [%rd201];
	@%p146 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;

$L__BB0_211:
	mov.f32 	%f201, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f201;
  mov.b32 %r6416, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_208:
	mov.f32 	%f197, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f197;
  cvt.rn.f16.f32 high, %f197;
  mov.b32 %r6416, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_210:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6416, {low,high};}

	// end inline asm

$L__BB0_212:
	add.s32 	%r316, %r6406, %r251;
	mul.wide.s32 	%rd202, %r316, 4;
	add.s64 	%rd203, %rd16, %rd202;
	st.global.u32 	[%rd203], %r6416;
	@%p10 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	setp.eq.s32 	%p147, %r247, 0;
	add.s32 	%r1665, %r258, %r267;
	shl.b32 	%r1666, %r1665, 1;
	mul.wide.s32 	%rd204, %r1666, 4;
	add.s64 	%rd205, %rd15, %rd204;
	ld.global.f32 	%f24, [%rd205];
	@%p147 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_215;

$L__BB0_216:
	mov.f32 	%f207, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f207;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_213:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_215:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6417, {low,high};}

	// end inline asm

$L__BB0_217:
	add.s32 	%r1669, %r316, 1;
	mul.wide.s32 	%rd206, %r1669, 4;
	add.s64 	%rd207, %rd16, %rd206;
	st.global.u32 	[%rd207], %r6417;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_218:
	add.f32 	%f208, %f12, 0f00000000;
	setp.geu.f32 	%p148, %f208, 0f40000000;
	@%p148 bra 	$L__BB0_230;

	@%p10 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	setp.eq.s32 	%p149, %r247, 0;
	add.s32 	%r1671, %r259, %r267;
	shl.b32 	%r1672, %r1671, 1;
	or.b32  	%r1673, %r1672, 1;
	mul.wide.s32 	%rd208, %r1673, 4;
	add.s64 	%rd209, %rd15, %rd208;
	ld.global.f32 	%f25, [%rd209];
	@%p149 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;

$L__BB0_223:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6419, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_220:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6419, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_222:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6419, {low,high};}

	// end inline asm

$L__BB0_224:
	add.s32 	%r327, %r6406, %r251;
	mul.wide.s32 	%rd210, %r327, 4;
	add.s64 	%rd211, %rd16, %rd210;
	st.global.u32 	[%rd211], %r6419;
	@%p10 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	setp.eq.s32 	%p150, %r247, 0;
	add.s32 	%r1677, %r258, %r267;
	shl.b32 	%r1678, %r1677, 1;
	or.b32  	%r1679, %r1678, 1;
	mul.wide.s32 	%rd212, %r1679, 4;
	add.s64 	%rd213, %rd15, %rd212;
	ld.global.f32 	%f26, [%rd213];
	@%p150 bra 	$L__BB0_228;
	bra.uni 	$L__BB0_227;

$L__BB0_228:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6420, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_225:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6420, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_227:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6420, {low,high};}

	// end inline asm

$L__BB0_229:
	add.s32 	%r1682, %r327, 1;
	mul.wide.s32 	%rd214, %r1682, 4;
	add.s64 	%rd215, %rd16, %rd214;
	st.global.u32 	[%rd215], %r6420;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_230:
	or.b32  	%r1683, %r261, %r267;
	setp.gt.s32 	%p151, %r1683, -1;
	and.pred  	%p153, %p121, %p151;
	setp.lt.s32 	%p154, %r261, %r1239;
	and.pred  	%p11, %p154, %p153;
	@%p145 bra 	$L__BB0_242;

	@%p11 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	setp.eq.s32 	%p156, %r247, 0;
	add.s32 	%r1685, %r260, %r267;
	shl.b32 	%r1686, %r1685, 1;
	mul.wide.s32 	%rd216, %r1686, 4;
	add.s64 	%rd217, %rd15, %rd216;
	ld.global.f32 	%f27, [%rd217];
	@%p156 bra 	$L__BB0_235;
	bra.uni 	$L__BB0_234;

$L__BB0_235:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6422, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_232:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6422, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_234:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6422, {low,high};}

	// end inline asm

$L__BB0_236:
	add.s32 	%r338, %r6406, %r251;
	mul.wide.s32 	%rd218, %r338, 4;
	add.s64 	%rd219, %rd16, %rd218;
	st.global.u32 	[%rd219], %r6422;
	@%p11 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	setp.eq.s32 	%p157, %r247, 0;
	add.s32 	%r1690, %r262, %r267;
	shl.b32 	%r1691, %r1690, 1;
	mul.wide.s32 	%rd220, %r1691, 4;
	add.s64 	%rd221, %rd15, %rd220;
	ld.global.f32 	%f28, [%rd221];
	@%p157 bra 	$L__BB0_240;
	bra.uni 	$L__BB0_239;

$L__BB0_240:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6423, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_237:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6423, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_239:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6423, {low,high};}

	// end inline asm

$L__BB0_241:
	add.s32 	%r1694, %r338, 1;
	mul.wide.s32 	%rd222, %r1694, 4;
	add.s64 	%rd223, %rd16, %rd222;
	st.global.u32 	[%rd223], %r6423;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_242:
	@%p138 bra 	$L__BB0_254;

	@%p11 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	setp.eq.s32 	%p159, %r247, 0;
	add.s32 	%r1696, %r260, %r267;
	shl.b32 	%r1697, %r1696, 1;
	or.b32  	%r1698, %r1697, 1;
	mul.wide.s32 	%rd224, %r1698, 4;
	add.s64 	%rd225, %rd15, %rd224;
	ld.global.f32 	%f29, [%rd225];
	@%p159 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_246;

$L__BB0_247:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6425, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_244:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6425, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_246:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6425, {low,high};}

	// end inline asm

$L__BB0_248:
	add.s32 	%r349, %r6406, %r251;
	mul.wide.s32 	%rd226, %r349, 4;
	add.s64 	%rd227, %rd16, %rd226;
	st.global.u32 	[%rd227], %r6425;
	@%p11 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	setp.eq.s32 	%p160, %r247, 0;
	add.s32 	%r1702, %r262, %r267;
	shl.b32 	%r1703, %r1702, 1;
	or.b32  	%r1704, %r1703, 1;
	mul.wide.s32 	%rd228, %r1704, 4;
	add.s64 	%rd229, %rd15, %rd228;
	ld.global.f32 	%f30, [%rd229];
	@%p160 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_251;

$L__BB0_252:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_249:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_251:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6426, {low,high};}

	// end inline asm

$L__BB0_253:
	add.s32 	%r1707, %r349, 1;
	mul.wide.s32 	%rd230, %r1707, 4;
	add.s64 	%rd231, %rd16, %rd230;
	st.global.u32 	[%rd231], %r6426;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_254:
	or.b32  	%r1708, %r264, %r267;
	setp.gt.s32 	%p161, %r1708, -1;
	and.pred  	%p163, %p121, %p161;
	setp.lt.s32 	%p164, %r264, %r1239;
	and.pred  	%p12, %p164, %p163;
	@%p135 bra 	$L__BB0_266;

	@%p12 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	setp.eq.s32 	%p166, %r247, 0;
	add.s32 	%r1710, %r263, %r267;
	shl.b32 	%r1711, %r1710, 1;
	mul.wide.s32 	%rd232, %r1711, 4;
	add.s64 	%rd233, %rd15, %rd232;
	ld.global.f32 	%f31, [%rd233];
	@%p166 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_258;

$L__BB0_259:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6428, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_256:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6428, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_258:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6428, {low,high};}

	// end inline asm

$L__BB0_260:
	add.s32 	%r360, %r6406, %r251;
	mul.wide.s32 	%rd234, %r360, 4;
	add.s64 	%rd235, %rd16, %rd234;
	st.global.u32 	[%rd235], %r6428;
	@%p12 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	setp.eq.s32 	%p167, %r247, 0;
	add.s32 	%r1715, %r265, %r267;
	shl.b32 	%r1716, %r1715, 1;
	mul.wide.s32 	%rd236, %r1716, 4;
	add.s64 	%rd237, %rd15, %rd236;
	ld.global.f32 	%f32, [%rd237];
	@%p167 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_263;

$L__BB0_264:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_261:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_263:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6429, {low,high};}

	// end inline asm

$L__BB0_265:
	add.s32 	%r1719, %r360, 1;
	mul.wide.s32 	%rd238, %r1719, 4;
	add.s64 	%rd239, %rd16, %rd238;
	st.global.u32 	[%rd239], %r6429;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_266:
	@%p128 bra 	$L__BB0_278;

	@%p12 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_268;

$L__BB0_269:
	setp.eq.s32 	%p169, %r247, 0;
	add.s32 	%r1721, %r263, %r267;
	shl.b32 	%r1722, %r1721, 1;
	or.b32  	%r1723, %r1722, 1;
	mul.wide.s32 	%rd240, %r1723, 4;
	add.s64 	%rd241, %rd15, %rd240;
	ld.global.f32 	%f33, [%rd241];
	@%p169 bra 	$L__BB0_271;
	bra.uni 	$L__BB0_270;

$L__BB0_271:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r6431, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_268:
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6431, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_270:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6431, {low,high};}

	// end inline asm

$L__BB0_272:
	add.s32 	%r371, %r6406, %r251;
	mul.wide.s32 	%rd242, %r371, 4;
	add.s64 	%rd243, %rd16, %rd242;
	st.global.u32 	[%rd243], %r6431;
	@%p12 bra 	$L__BB0_274;
	bra.uni 	$L__BB0_273;

$L__BB0_274:
	setp.eq.s32 	%p170, %r247, 0;
	add.s32 	%r1727, %r265, %r267;
	shl.b32 	%r1728, %r1727, 1;
	or.b32  	%r1729, %r1728, 1;
	mul.wide.s32 	%rd244, %r1729, 4;
	add.s64 	%rd245, %rd15, %rd244;
	ld.global.f32 	%f34, [%rd245];
	@%p170 bra 	$L__BB0_276;
	bra.uni 	$L__BB0_275;

$L__BB0_276:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r6432, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_273:
	mov.f32 	%f264, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f264;
  cvt.rn.f16.f32 high, %f264;
  mov.b32 %r6432, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_275:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6432, {low,high};}

	// end inline asm

$L__BB0_277:
	add.s32 	%r1732, %r371, 1;
	mul.wide.s32 	%rd246, %r1732, 4;
	add.s64 	%rd247, %rd16, %rd246;
	st.global.u32 	[%rd247], %r6432;
	add.s32 	%r6406, %r6406, 2;

$L__BB0_278:
	add.s64 	%rd461, %rd461, 4;
	add.s64 	%rd460, %rd460, -4;
	setp.ne.s64 	%p171, %rd460, 0;
	@%p171 bra 	$L__BB0_158;

$L__BB0_279:
	add.s32 	%r6402, %r6402, %r42;
	setp.lt.s32 	%p172, %r6402, %r1239;
	@%p172 bra 	$L__BB0_156;

$L__BB0_280:
	add.s32 	%r6396, %r6396, %r1259;
	setp.lt.s32 	%p173, %r6396, %r1238;
	@%p173 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_281;

$L__BB0_135:
	@%p24 bra 	$L__BB0_281;

	neg.s32 	%r220, %r69;
	mov.u32 	%r1547, 31;
	sub.s32 	%r1548, %r1547, %r40;
	setp.gt.s32 	%p111, %r39, %r40;
	selp.b32 	%r1549, %r40, %r1548, %p111;
	shl.b32 	%r1550, %r1549, 2;
	mov.u32 	%r1551, 2;
	sub.s32 	%r221, %r1550, %r1241;
	shl.b32 	%r1552, %r1240, 2;
	mov.u32 	%r1553, 128;
	sub.s32 	%r222, %r1553, %r1552;
	sub.s32 	%r1554, %r1551, %r1241;
	add.s32 	%r223, %r1554, %r1550;
	add.s32 	%r224, %r1238, -1;
	add.s32 	%r225, %r221, 1;
	add.s32 	%r226, %r223, 1;
	rem.s32 	%r1579, %r225, %r222;
	add.s32 	%r1580, %r1579, %r222;
	rem.s32 	%r237, %r1580, %r222;
	rem.s32 	%r1581, %r226, %r222;
	add.s32 	%r1582, %r1581, %r222;
	rem.s32 	%r238, %r1582, %r222;

$L__BB0_137:
	setp.ne.s32 	%p112, %r36, %r220;
	@%p112 bra 	$L__BB0_151;

	shl.b32 	%r228, %r6396, 1;
	rem.s32 	%r1555, %r221, %r222;
	add.s32 	%r1556, %r1555, %r222;
	rem.s32 	%r229, %r1556, %r222;
	rem.s32 	%r1557, %r223, %r222;
	add.s32 	%r1558, %r1557, %r222;
	rem.s32 	%r230, %r1558, %r222;
	@%p111 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	mul.lo.s32 	%r1561, %r228, %r222;
	add.s32 	%r1562, %r1561, %r229;
	mul.wide.s32 	%rd148, %r1562, 4;
	add.s64 	%rd149, %rd15, %rd148;
	ld.global.f32 	%f129, [%rd149];
	add.s32 	%r1563, %r1561, %r230;
	mul.wide.s32 	%rd150, %r1563, 4;
	add.s64 	%rd151, %rd15, %rd150;
	ld.global.f32 	%f130, [%rd151];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6397, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6397, {low,high};}

	// end inline asm

$L__BB0_141:
	shl.b32 	%r1564, %r6396, 5;
	add.s32 	%r1565, %r1564, %r40;
	shl.b32 	%r1566, %r1565, 2;
	mul.wide.s32 	%rd152, %r1566, 4;
	add.s64 	%rd17, %rd16, %rd152;
	st.global.u32 	[%rd17], %r6397;
	@%p111 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_142;

$L__BB0_143:
	add.s32 	%r1569, %r228, 1;
	mul.lo.s32 	%r1570, %r1569, %r222;
	add.s32 	%r1571, %r1570, %r229;
	mul.wide.s32 	%rd153, %r1571, 4;
	add.s64 	%rd154, %rd15, %rd153;
	ld.global.f32 	%f133, [%rd154];
	add.s32 	%r1572, %r1570, %r230;
	mul.wide.s32 	%rd155, %r1572, 4;
	add.s64 	%rd156, %rd15, %rd155;
	ld.global.f32 	%f134, [%rd156];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f133;
  cvt.rn.f16.f32 high, %f134;
  mov.b32 %r6398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_144;

$L__BB0_142:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6398, {low,high};}

	// end inline asm

$L__BB0_144:
	add.s32 	%r1573, %r224, %r6396;
	rem.s32 	%r1574, %r1573, %r1238;
	shl.b32 	%r1575, %r1574, 5;
	add.s32 	%r1576, %r1575, %r40;
	shl.b32 	%r1577, %r1576, 2;
	or.b32  	%r1578, %r1577, 2;
	mul.wide.s32 	%rd157, %r1578, 4;
	add.s64 	%rd18, %rd16, %rd157;
	st.global.u32 	[%rd18], %r6398;
	@%p111 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_145;

$L__BB0_146:
	mul.lo.s32 	%r1585, %r228, %r222;
	add.s32 	%r1586, %r1585, %r237;
	mul.wide.s32 	%rd158, %r1586, 4;
	add.s64 	%rd159, %rd15, %rd158;
	ld.global.f32 	%f137, [%rd159];
	add.s32 	%r1587, %r1585, %r238;
	mul.wide.s32 	%rd160, %r1587, 4;
	add.s64 	%rd161, %rd15, %rd160;
	ld.global.f32 	%f138, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f137;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r6399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_147;

$L__BB0_145:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f136;
  mov.b32 %r6399, {low,high};}

	// end inline asm

$L__BB0_147:
	st.global.u32 	[%rd17+4], %r6399;
	@%p111 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	add.s32 	%r1590, %r228, 1;
	mul.lo.s32 	%r1591, %r1590, %r222;
	add.s32 	%r1592, %r1591, %r237;
	mul.wide.s32 	%rd162, %r1592, 4;
	add.s64 	%rd163, %rd15, %rd162;
	ld.global.f32 	%f141, [%rd163];
	add.s32 	%r1593, %r1591, %r238;
	mul.wide.s32 	%rd164, %r1593, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f142, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f142;
  mov.b32 %r6400, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f140, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f140;
  cvt.rn.f16.f32 high, %f140;
  mov.b32 %r6400, {low,high};}

	// end inline asm

$L__BB0_150:
	st.global.u32 	[%rd18+4], %r6400;

$L__BB0_151:
	add.s32 	%r6396, %r6396, %r1259;
	setp.lt.s32 	%p117, %r6396, %r1238;
	@%p117 bra 	$L__BB0_137;

$L__BB0_281:
	add.s32 	%r1734, %r1233, -1;
	mad.lo.s32 	%r1735, %r1233, 1152, -128;
	add.s32 	%r1736, %r1234, -1;
	mad.lo.s32 	%r1737, %r1234, 896, 128;
	mul.lo.s32 	%r1738, %r1737, %r1734;
	mad.lo.s32 	%r380, %r1735, %r1736, %r1738;
	setp.lt.s32 	%p174, %r380, 1;
	mov.f32 	%f270, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r6437, {low,high};}

	// end inline asm
	@%p174 bra 	$L__BB0_284;

	mov.u32 	%r6436, 0;
	mov.u32 	%r6434, _ZN6kernel5shmemE;

$L__BB0_283:
	st.shared.u32 	[%r6434], %r6437;
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1741, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6434+4], %r1741;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1742, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6434+8], %r1742;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1743, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6434+12], %r1743;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6437, {low,high};}

	// end inline asm
	add.s32 	%r6434, %r6434, 16;
	add.s32 	%r6436, %r6436, 4;
	setp.lt.s32 	%p175, %r6436, %r380;
	@%p175 bra 	$L__BB0_283;

$L__BB0_284:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r1745, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r1746, {low,high};}

	// end inline asm
	ld.param.u64 	%rd248, [%rd1+152];
	cvta.to.global.u64 	%rd23, %rd248;
	mov.u32 	%r1747, 31;
	sub.s32 	%r1748, %r1747, %r40;
	setp.gt.s32 	%p176, %r39, %r40;
	selp.b32 	%r1749, %r40, %r1748, %p176;
	shl.b32 	%r1750, %r1749, 2;
	sub.s32 	%r391, %r1750, %r1241;
	shl.b32 	%r1751, %r1240, 2;
	mov.u32 	%r1752, 128;
	sub.s32 	%r392, %r1752, %r1751;
	rem.s32 	%r1753, %r391, %r392;
	add.s32 	%r1754, %r1753, %r392;
	rem.s32 	%r393, %r1754, %r392;
	add.s32 	%r1755, %r391, 2;
	rem.s32 	%r1756, %r1755, %r392;
	add.s32 	%r1757, %r1756, %r392;
	rem.s32 	%r394, %r1757, %r392;
	mul.lo.s32 	%r1758, %r393, 6;
	mul.lo.s32 	%r1759, %r394, 6;
	mul.wide.s32 	%rd249, %r1758, 4;
	add.s64 	%rd24, %rd23, %rd249;
	mul.wide.s32 	%rd250, %r1759, 4;
	add.s64 	%rd25, %rd23, %rd250;
	@%p17 bra 	$L__BB0_286;
	bra.uni 	$L__BB0_285;

$L__BB0_286:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6438, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_287;

$L__BB0_285:
	ld.global.f32 	%f285, [%rd24];
	ld.global.f32 	%f286, [%rd24+8];
	add.f32 	%f283, %f285, %f286;
	ld.global.f32 	%f287, [%rd25+8];
	ld.global.f32 	%f288, [%rd25];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6438, {low,high};}

	// end inline asm

$L__BB0_287:
	@%p17 bra 	$L__BB0_289;
	bra.uni 	$L__BB0_288;

$L__BB0_289:
	ld.global.f32 	%f293, [%rd24+4];
	ld.global.f32 	%f294, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_290;

$L__BB0_288:
	ld.global.f32 	%f291, [%rd24];
	ld.global.f32 	%f292, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6439, {low,high};}

	// end inline asm

$L__BB0_290:
	@%p17 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6440, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	ld.global.f32 	%f297, [%rd24+20];
	ld.global.f32 	%f298, [%rd24+12];
	add.f32 	%f295, %f298, %f297;
	ld.global.f32 	%f299, [%rd25+20];
	ld.global.f32 	%f300, [%rd25+12];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6440, {low,high};}

	// end inline asm

$L__BB0_293:
	@%p17 bra 	$L__BB0_295;
	bra.uni 	$L__BB0_294;

$L__BB0_295:
	ld.global.f32 	%f305, [%rd24+16];
	ld.global.f32 	%f306, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6441, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_296;

$L__BB0_294:
	ld.global.f32 	%f303, [%rd24+12];
	ld.global.f32 	%f304, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6441, {low,high};}

	// end inline asm

$L__BB0_296:
	add.s32 	%r1768, %r391, 1;
	rem.s32 	%r1769, %r1768, %r392;
	add.s32 	%r1770, %r1769, %r392;
	rem.s32 	%r407, %r1770, %r392;
	add.s32 	%r1771, %r391, 3;
	rem.s32 	%r1772, %r1771, %r392;
	add.s32 	%r1773, %r1772, %r392;
	rem.s32 	%r408, %r1773, %r392;
	mul.lo.s32 	%r1774, %r407, 6;
	mul.lo.s32 	%r1775, %r408, 6;
	mul.wide.s32 	%rd251, %r1774, 4;
	add.s64 	%rd26, %rd23, %rd251;
	mul.wide.s32 	%rd252, %r1775, 4;
	add.s64 	%rd27, %rd23, %rd252;
	@%p17 bra 	$L__BB0_298;
	bra.uni 	$L__BB0_297;

$L__BB0_298:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6442, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_299;

$L__BB0_297:
	ld.global.f32 	%f309, [%rd26];
	ld.global.f32 	%f310, [%rd26+8];
	add.f32 	%f307, %f309, %f310;
	ld.global.f32 	%f311, [%rd27+8];
	ld.global.f32 	%f312, [%rd27];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6442, {low,high};}

	// end inline asm

$L__BB0_299:
	@%p17 bra 	$L__BB0_301;
	bra.uni 	$L__BB0_300;

$L__BB0_301:
	ld.global.f32 	%f317, [%rd26+4];
	ld.global.f32 	%f318, [%rd27+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6443, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_302;

$L__BB0_300:
	ld.global.f32 	%f315, [%rd26];
	ld.global.f32 	%f316, [%rd27];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6443, {low,high};}

	// end inline asm

$L__BB0_302:
	@%p17 bra 	$L__BB0_304;
	bra.uni 	$L__BB0_303;

$L__BB0_304:
	mov.f32 	%f326, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f326;
  cvt.rn.f16.f32 high, %f326;
  mov.b32 %r6444, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_305;

$L__BB0_303:
	ld.global.f32 	%f321, [%rd26+20];
	ld.global.f32 	%f322, [%rd26+12];
	add.f32 	%f319, %f322, %f321;
	ld.global.f32 	%f323, [%rd27+20];
	ld.global.f32 	%f324, [%rd27+12];
	add.f32 	%f320, %f324, %f323;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f319;
  cvt.rn.f16.f32 high, %f320;
  mov.b32 %r6444, {low,high};}

	// end inline asm

$L__BB0_305:
	@%p17 bra 	$L__BB0_307;
	bra.uni 	$L__BB0_306;

$L__BB0_307:
	ld.global.f32 	%f329, [%rd26+16];
	ld.global.f32 	%f330, [%rd27+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f330;
  mov.b32 %r6445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_308;

$L__BB0_306:
	ld.global.f32 	%f327, [%rd26+12];
	ld.global.f32 	%f328, [%rd27+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6445, {low,high};}

	// end inline asm

$L__BB0_308:
	// begin inline asm
	mov.u32 %r1784, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd253, %r1784;
	// begin inline asm
	mov.u32 %r1785, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd254, %r1785;
	bfi.b64 	%rd28, %rd254, %rd253, 32, 32;
	setp.ne.s64 	%p185, %rd28, 0;
	@%p185 bra 	$L__BB0_310;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_310:
	add.s64 	%rd29, %rd28, 4;
	mov.u32 	%r1786, %nctaid.y;
	mov.u32 	%r1787, %nctaid.x;
	mul.lo.s32 	%r1788, %r1787, %r1786;
	mov.u32 	%r1789, %nctaid.z;
	mul.lo.s32 	%r421, %r1788, %r1789;
	neg.s32 	%r1790, %r36;
	add.s32 	%r1791, %r40, %r35;
	setp.ne.s32 	%p186, %r1791, %r1790;
	mov.u32 	%r1792, %ctaid.x;
	add.s32 	%r422, %r1792, %r37;
	neg.s32 	%r423, %r38;
	bar.sync 	0;
	@%p186 bra 	$L__BB0_314;

	setp.eq.s32 	%p187, %r422, %r423;
	mov.u32 	%r1795, -2147483647;
	sub.s32 	%r1796, %r1795, %r421;
	selp.b32 	%r1794, %r1796, 1, %p187;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1793,[%rd29],%r1794;
	// end inline asm

$L__BB0_312:
	ld.volatile.u32 	%r1797, [%rd29];
	xor.b32  	%r1798, %r1797, %r1793;
	setp.gt.s32 	%p188, %r1798, -1;
	@%p188 bra 	$L__BB0_312;

	// begin inline asm
	ld.acquire.gpu.u32 %r1799,[%rd29];
	// end inline asm

$L__BB0_314:
	bar.sync 	0;
	setp.lt.s32 	%p189, %r43, 1;
	@%p189 bra 	$L__BB0_804;

	shr.s32 	%r1801, %r1243, 31;
	shr.u32 	%r1802, %r1801, 30;
	add.s32 	%r1803, %r1243, %r1802;
	shr.s32 	%r425, %r1803, 2;
	add.s32 	%r1804, %r40, 24;
	mul.hi.s32 	%r1805, %r1804, 1374389535;
	shr.u32 	%r1806, %r1805, 31;
	shr.s32 	%r1807, %r1805, 3;
	add.s32 	%r1808, %r1807, %r1806;
	mul.lo.s32 	%r1809, %r1808, 25;
	sub.s32 	%r1810, %r1804, %r1809;
	add.s32 	%r1811, %r40, 26;
	mul.hi.s32 	%r1812, %r1811, 1374389535;
	shr.u32 	%r1813, %r1812, 31;
	shr.s32 	%r1814, %r1812, 3;
	add.s32 	%r1815, %r1814, %r1813;
	mul.lo.s32 	%r1816, %r1815, 25;
	sub.s32 	%r1817, %r1811, %r1816;
	setp.lt.s32 	%p190, %r40, 25;
	selp.b32 	%r426, %r1810, %r40, %p190;
	shr.u32 	%r1818, %r1243, 31;
	add.s32 	%r1819, %r1243, %r1818;
	and.b32  	%r1820, %r1819, -2;
	sub.s32 	%r427, %r1243, %r1820;
	setp.lt.s32 	%p191, %r393, %r1252;
	setp.ge.s32 	%p192, %r393, %r1251;
	and.pred  	%p13, %p191, %p192;
	setp.lt.s32 	%p193, %r407, %r1252;
	setp.ge.s32 	%p194, %r407, %r1251;
	and.pred  	%p14, %p193, %p194;
	setp.lt.s32 	%p195, %r394, %r1252;
	setp.ge.s32 	%p196, %r394, %r1251;
	and.pred  	%p15, %p195, %p196;
	setp.lt.s32 	%p197, %r408, %r1252;
	setp.ge.s32 	%p198, %r408, %r1251;
	and.pred  	%p16, %p197, %p198;
	selp.b32 	%r428, %r1817, %r40, %p190;
	mov.u32 	%r1800, 0;
	// begin inline asm
	{mov.u32 %r1821, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2146, %r1821, 8;
	add.s32 	%r2147, %r2146, -8192;
	or.b32  	%r1825, %r2147, 31;
	// begin inline asm
	{sub.f16x2 %r5226,%r1746,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5229,%r6440,%r5226;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1746;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6244,%r6441,%r5226;
}
	// end inline asm
	mov.u32 	%r6446, %r1746;
	mov.u32 	%r6447, %r1746;
	mov.u32 	%r6448, %r1746;
	mov.u32 	%r6449, %r1746;
	mov.u32 	%r6450, %r1746;
	mov.u32 	%r6451, %r1746;
	mov.u32 	%r6452, %r1746;
	mov.u32 	%r6453, %r1746;
	mov.u32 	%r6454, %r1746;
	mov.u32 	%r6455, %r1746;
	mov.u32 	%r6456, %r1746;
	mov.u32 	%r6457, %r1746;
	mov.u32 	%r6458, %r1746;
	mov.u32 	%r6459, %r1746;
	mov.u32 	%r6460, %r1746;
	mov.u32 	%r6461, %r1746;
	mov.u32 	%r6462, %r1746;
	mov.u32 	%r6463, %r1746;
	mov.u32 	%r6464, %r1746;
	mov.u32 	%r6465, %r1746;
	mov.u32 	%r6466, %r1746;
	mov.u32 	%r6467, %r1746;
	mov.u32 	%r6468, %r1746;
	mov.u32 	%r6469, %r1746;
	mov.u32 	%r6470, %r1746;
	mov.u32 	%r6471, %r1746;
	mov.u32 	%r6472, %r1746;
	mov.u32 	%r6473, %r1746;
	mov.u32 	%r6474, %r1746;
	mov.u32 	%r6475, %r1746;
	mov.u32 	%r6476, %r1746;
	mov.u32 	%r6477, %r1746;
	mov.u32 	%r6478, %r1746;
	mov.u32 	%r6479, %r1746;
	mov.u32 	%r6480, %r1746;
	mov.u32 	%r6481, %r1746;
	mov.u32 	%r6482, %r1746;
	mov.u32 	%r6483, %r1746;
	mov.u32 	%r6484, %r1746;
	mov.u32 	%r6485, %r1746;
	mov.u32 	%r6486, %r1746;
	mov.u32 	%r6487, %r1746;
	mov.u32 	%r6488, %r1746;
	mov.u32 	%r6489, %r1746;
	mov.u32 	%r6490, %r1746;
	mov.u32 	%r6491, %r1746;
	mov.u32 	%r6492, %r1746;
	mov.u32 	%r6493, %r1746;
	mov.u32 	%r6494, %r1746;
	mov.u32 	%r6495, %r1746;
	mov.u32 	%r6496, %r1746;
	mov.u32 	%r6497, %r1746;
	mov.u32 	%r6498, %r1746;
	mov.u32 	%r6499, %r1746;
	mov.u32 	%r6500, %r1746;
	mov.u32 	%r6501, %r1746;
	mov.u32 	%r6502, %r1746;
	mov.u32 	%r6503, %r1746;
	mov.u32 	%r6504, %r1746;
	mov.u32 	%r6505, %r1746;
	mov.u32 	%r6506, %r1746;
	mov.u32 	%r6507, %r1746;
	mov.u32 	%r6508, %r1746;
	mov.u32 	%r6509, %r1746;
	mov.u32 	%r6510, %r1746;
	mov.u32 	%r6511, %r1746;
	mov.u32 	%r6512, %r1746;
	mov.u32 	%r6513, %r1746;
	mov.u32 	%r6514, %r1746;
	mov.u32 	%r6515, %r1746;
	mov.u32 	%r6516, %r1746;
	mov.u32 	%r6517, %r1746;
	mov.u32 	%r6518, %r1746;
	mov.u32 	%r6519, %r1746;
	mov.u32 	%r6520, %r1800;

$L__BB0_316:
	mov.u32 	%r6351, %tid.y;
	mov.u32 	%r6350, %tid.z;
	mov.u32 	%r6349, %ctaid.y;
	mov.u32 	%r6348, %ctaid.z;
	mov.u32 	%r1836, 1;
	not.b32 	%r2110, %r6348;
	mov.u32 	%r2102, -1;
	add.s32 	%r2111, %r1236, %r2110;
	not.b32 	%r2113, %r6349;
	add.s32 	%r2114, %r1235, %r2113;
	add.s32 	%r2115, %r2114, %r2111;
	mul.lo.s32 	%r2116, %r2115, %r1237;
	add.s32 	%r2117, %r2116, %r1238;
	not.b32 	%r2119, %r6351;
	add.s32 	%r2120, %r1233, %r2119;
	mad.lo.s32 	%r2121, %r2114, %r1233, %r2120;
	not.b32 	%r2123, %r6350;
	add.s32 	%r2124, %r1234, %r2123;
	mad.lo.s32 	%r2125, %r2111, %r1234, %r2124;
	add.s32 	%r2126, %r2121, %r2125;
	shl.b32 	%r2127, %r2126, 1;
	add.s32 	%r2128, %r2117, %r2127;
	add.s32 	%r2129, %r2128, %r6520;
	add.s32 	%r2130, %r6520, %r2116;
	div.s32 	%r2131, %r2129, %r1238;
	mul.lo.s32 	%r2132, %r2131, %r1238;
	sub.s32 	%r2135, %r42, %r1238;
	sub.s32 	%r2136, %r2121, %r2125;
	shl.b32 	%r2137, %r2136, 1;
	add.s32 	%r2138, %r2137, %r1239;
	mad.lo.s32 	%r2139, %r2131, %r42, %r2138;
	mad.lo.s32 	%r2140, %r2131, %r2135, %r2130;
	div.s32 	%r2141, %r2139, %r1239;
	mul.lo.s32 	%r2142, %r2141, %r1239;
	sub.s32 	%r2145, %r1260, %r1239;
	mov.u32 	%r1920, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1822,%r1745,%r1800,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1828, %r6439, %r1822, %p17;
	// begin inline asm
	{mul.f16x2 %r6604,%r1828,%r6519;
}
	// end inline asm
	selp.b32 	%r1831, %r6443, %r1822, %p17;
	// begin inline asm
	{mul.f16x2 %r6602,%r1831,%r6518;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1834,%r1745,%r1836,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1840, %r6439, %r1834, %p17;
	// begin inline asm
	{mul.f16x2 %r6603,%r1840,%r6517;
}
	// end inline asm
	selp.b32 	%r1843, %r6443, %r1834, %p17;
	// begin inline asm
	{mul.f16x2 %r6601,%r1843,%r6516;
}
	// end inline asm
	mov.u32 	%r1848, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1846,%r1745,%r1848,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1852, %r6439, %r1846, %p17;
	// begin inline asm
	{mul.f16x2 %r6600,%r1852,%r6515;
}
	// end inline asm
	selp.b32 	%r1855, %r6443, %r1846, %p17;
	// begin inline asm
	{mul.f16x2 %r6599,%r1855,%r6514;
}
	// end inline asm
	mov.u32 	%r1860, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1858,%r1745,%r1860,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1864, %r6439, %r1858, %p17;
	// begin inline asm
	{mul.f16x2 %r6598,%r1864,%r1746;
}
	// end inline asm
	selp.b32 	%r1867, %r6443, %r1858, %p17;
	// begin inline asm
	{mul.f16x2 %r6596,%r1867,%r1746;
}
	// end inline asm
	mov.u32 	%r1872, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1870,%r1745,%r1872,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1876, %r6439, %r1870, %p17;
	// begin inline asm
	{mul.f16x2 %r6597,%r1876,%r6513;
}
	// end inline asm
	selp.b32 	%r1879, %r6443, %r1870, %p17;
	// begin inline asm
	{mul.f16x2 %r6595,%r1879,%r6512;
}
	// end inline asm
	mov.u32 	%r1884, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1882,%r1745,%r1884,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1888, %r6439, %r1882, %p17;
	// begin inline asm
	{mul.f16x2 %r6594,%r1888,%r6511;
}
	// end inline asm
	selp.b32 	%r1891, %r6443, %r1882, %p17;
	// begin inline asm
	{mul.f16x2 %r6591,%r1891,%r6510;
}
	// end inline asm
	mov.u32 	%r1896, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1894,%r1745,%r1896,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1900, %r6439, %r1894, %p17;
	// begin inline asm
	{mul.f16x2 %r6593,%r1900,%r6509;
}
	// end inline asm
	selp.b32 	%r1903, %r6443, %r1894, %p17;
	// begin inline asm
	{mul.f16x2 %r6590,%r1903,%r6508;
}
	// end inline asm
	mov.u32 	%r1908, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1906,%r1745,%r1908,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1912, %r6439, %r1906, %p17;
	// begin inline asm
	{mul.f16x2 %r6592,%r1912,%r6507;
}
	// end inline asm
	selp.b32 	%r1915, %r6443, %r1906, %p17;
	// begin inline asm
	{mul.f16x2 %r6589,%r1915,%r6506;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1918,%r1745,%r1920,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1924, %r6439, %r1918, %p17;
	// begin inline asm
	{mul.f16x2 %r6588,%r1924,%r6505;
}
	// end inline asm
	selp.b32 	%r1927, %r6443, %r1918, %p17;
	// begin inline asm
	{mul.f16x2 %r6585,%r1927,%r6504;
}
	// end inline asm
	mov.u32 	%r1932, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1930,%r1745,%r1932,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1936, %r6439, %r1930, %p17;
	// begin inline asm
	{mul.f16x2 %r6587,%r1936,%r6503;
}
	// end inline asm
	selp.b32 	%r1939, %r6443, %r1930, %p17;
	// begin inline asm
	{mul.f16x2 %r6584,%r1939,%r6502;
}
	// end inline asm
	mov.u32 	%r1944, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1942,%r1745,%r1944,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1948, %r6439, %r1942, %p17;
	// begin inline asm
	{mul.f16x2 %r6586,%r1948,%r6501;
}
	// end inline asm
	selp.b32 	%r1951, %r6443, %r1942, %p17;
	// begin inline asm
	{mul.f16x2 %r6583,%r1951,%r6500;
}
	// end inline asm
	mov.u32 	%r1956, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1954,%r1745,%r1956,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1960, %r6439, %r1954, %p17;
	// begin inline asm
	{mul.f16x2 %r6582,%r1960,%r1746;
}
	// end inline asm
	selp.b32 	%r1963, %r6443, %r1954, %p17;
	// begin inline asm
	{mul.f16x2 %r6581,%r1963,%r1746;
}
	// end inline asm
	mov.u32 	%r1968, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1966,%r1745,%r1968,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1972, %r6439, %r1966, %p17;
	// begin inline asm
	{mul.f16x2 %r6580,%r1972,%r1746;
}
	// end inline asm
	selp.b32 	%r1975, %r6443, %r1966, %p17;
	// begin inline asm
	{mul.f16x2 %r6578,%r1975,%r1746;
}
	// end inline asm
	mov.u32 	%r1980, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1978,%r1745,%r1980,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1984, %r6439, %r1978, %p17;
	// begin inline asm
	{mul.f16x2 %r6579,%r1984,%r1746;
}
	// end inline asm
	selp.b32 	%r1987, %r6443, %r1978, %p17;
	// begin inline asm
	{mul.f16x2 %r6577,%r1987,%r1746;
}
	// end inline asm
	mov.u32 	%r1992, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1990,%r1745,%r1992,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r1996, %r6439, %r1990, %p17;
	// begin inline asm
	{mul.f16x2 %r6576,%r1996,%r1746;
}
	// end inline asm
	selp.b32 	%r1999, %r6443, %r1990, %p17;
	// begin inline asm
	{mul.f16x2 %r6573,%r1999,%r1746;
}
	// end inline asm
	mov.u32 	%r2004, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2002,%r1745,%r2004,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2008, %r6439, %r2002, %p17;
	// begin inline asm
	{mul.f16x2 %r6575,%r2008,%r6499;
}
	// end inline asm
	selp.b32 	%r2011, %r6443, %r2002, %p17;
	// begin inline asm
	{mul.f16x2 %r6572,%r2011,%r6498;
}
	// end inline asm
	mov.u32 	%r2016, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2014,%r1745,%r2016,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2020, %r6439, %r2014, %p17;
	// begin inline asm
	{mul.f16x2 %r6574,%r2020,%r6497;
}
	// end inline asm
	selp.b32 	%r2023, %r6443, %r2014, %p17;
	// begin inline asm
	{mul.f16x2 %r6571,%r2023,%r6496;
}
	// end inline asm
	mov.u32 	%r2028, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2026,%r1745,%r2028,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2032, %r6439, %r2026, %p17;
	// begin inline asm
	{mul.f16x2 %r6570,%r2032,%r1746;
}
	// end inline asm
	selp.b32 	%r2035, %r6443, %r2026, %p17;
	// begin inline asm
	{mul.f16x2 %r6567,%r2035,%r1746;
}
	// end inline asm
	mov.u32 	%r2040, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2038,%r1745,%r2040,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2044, %r6439, %r2038, %p17;
	// begin inline asm
	{mul.f16x2 %r6569,%r2044,%r1746;
}
	// end inline asm
	selp.b32 	%r2047, %r6443, %r2038, %p17;
	// begin inline asm
	{mul.f16x2 %r6566,%r2047,%r1746;
}
	// end inline asm
	mov.u32 	%r2052, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2050,%r1745,%r2052,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2056, %r6439, %r2050, %p17;
	// begin inline asm
	{mul.f16x2 %r6568,%r2056,%r6495;
}
	// end inline asm
	selp.b32 	%r2059, %r6443, %r2050, %p17;
	// begin inline asm
	{mul.f16x2 %r6565,%r2059,%r6494;
}
	// end inline asm
	mov.u32 	%r2064, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2062,%r1745,%r2064,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2068, %r6439, %r2062, %p17;
	// begin inline asm
	{mul.f16x2 %r6564,%r2068,%r1746;
}
	// end inline asm
	selp.b32 	%r2071, %r6443, %r2062, %p17;
	// begin inline asm
	{mul.f16x2 %r6563,%r2071,%r1746;
}
	// end inline asm
	mov.u32 	%r2076, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2074,%r1745,%r2076,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2080, %r6439, %r2074, %p17;
	// begin inline asm
	{mul.f16x2 %r6562,%r2080,%r1746;
}
	// end inline asm
	selp.b32 	%r2083, %r6443, %r2074, %p17;
	// begin inline asm
	{mul.f16x2 %r6560,%r2083,%r1746;
}
	// end inline asm
	mov.u32 	%r2088, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2086,%r1745,%r2088,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2092, %r6439, %r2086, %p17;
	// begin inline asm
	{mul.f16x2 %r6561,%r2092,%r1746;
}
	// end inline asm
	selp.b32 	%r2095, %r6443, %r2086, %p17;
	// begin inline asm
	{mul.f16x2 %r6559,%r2095,%r1746;
}
	// end inline asm
	mov.u32 	%r2100, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2098,%r1745,%r2100,%r1825,%r2102;
}
	// end inline asm
	selp.b32 	%r2104, %r6439, %r2098, %p17;
	// begin inline asm
	{mul.f16x2 %r6558,%r2104,%r1746;
}
	// end inline asm
	selp.b32 	%r2107, %r6443, %r2098, %p17;
	// begin inline asm
	{mul.f16x2 %r6557,%r2107,%r1746;
}
	// end inline asm
	sub.s32 	%r552, %r2129, %r2132;
	sub.s32 	%r553, %r2139, %r2142;
	mad.lo.s32 	%r554, %r2141, %r2145, %r2140;
	ld.param.u64 	%rd258, [%rd1+144];
	cvta.to.global.u64 	%rd259, %rd258;
	shl.b32 	%r2194, %r554, 1;
	mul.wide.s32 	%rd260, %r2194, 4;
	add.s64 	%rd30, %rd259, %rd260;
	@%p109 bra 	$L__BB0_324;
	bra.uni 	$L__BB0_317;

$L__BB0_324:
	mov.u32 	%r6352, %tid.x;
	add.s32 	%r2397, %r1255, 1;
	setp.lt.s32 	%p206, %r554, %r2397;
	setp.eq.s32 	%p207, %r425, %r6352;
	setp.gt.s32 	%p208, %r554, -1;
	and.pred  	%p209, %p207, %p208;
	and.pred  	%p210, %p206, %p209;
	@%p210 bra 	$L__BB0_326;
	bra.uni 	$L__BB0_325;

$L__BB0_326:
	ld.global.f32 	%f341, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f341;
  mov.b32 %r6523, {low,low};}

	// end inline asm
	ld.global.f32 	%f342, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f342;
  mov.b32 %r6524, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_327;

$L__BB0_317:
	add.s32 	%r2197, %r1255, 1;
	setp.lt.s32 	%p201, %r554, %r2197;
	setp.gt.s32 	%p202, %r554, -1;
	and.pred  	%p203, %p202, %p201;
	@%p203 bra 	$L__BB0_319;
	bra.uni 	$L__BB0_318;

$L__BB0_319:
	ld.global.f32 	%f335, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f335;
  mov.b32 %r6521, {low,low};}

	// end inline asm
	ld.global.f32 	%f336, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f336;
  mov.b32 %r6522, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_320;

$L__BB0_325:
	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6523, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6524, {low,high};}

	// end inline asm

$L__BB0_327:
	mov.u32 	%r2405, 0;
	mov.u32 	%r2416, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2403,%r6437,%r2405,%r1825,%r2416;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2408,%r6523,%r2403;
}
	// end inline asm
	mov.u32 	%r2414, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2412,%r6437,%r2414,%r1825,%r2416;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2417,%r6524,%r2412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6526,%r2408,%r2417;
}
	// end inline asm
	setp.eq.s32 	%p211, %r427, 0;
	mov.u32 	%r6525, %r6526;
	@%p211 bra 	$L__BB0_329;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r6525, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r6604,%r6604,%r6525;
}
	// end inline asm
	setp.eq.s32 	%p212, %r427, 1;
	@%p212 bra 	$L__BB0_331;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r6526, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r6602,%r6602,%r6526;
}
	// end inline asm
	mov.u32 	%r2438, 2;
	mov.u32 	%r2449, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2436,%r6437,%r2438,%r1825,%r2449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2441,%r6523,%r2436;
}
	// end inline asm
	mov.u32 	%r2447, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2445,%r6437,%r2447,%r1825,%r2449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2450,%r6524,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6528,%r2441,%r2450;
}
	// end inline asm
	mov.u32 	%r6527, %r6528;
	@%p211 bra 	$L__BB0_333;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r6527, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r6603,%r6603,%r6527;
}
	// end inline asm
	@%p212 bra 	$L__BB0_335;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r6528, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r6601,%r6601,%r6528;
}
	// end inline asm
	mov.u32 	%r2471, 4;
	mov.u32 	%r2482, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2469,%r6437,%r2471,%r1825,%r2482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2474,%r6523,%r2469;
}
	// end inline asm
	mov.u32 	%r2480, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2478,%r6437,%r2480,%r1825,%r2482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2483,%r6524,%r2478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6530,%r2474,%r2483;
}
	// end inline asm
	mov.u32 	%r6529, %r6530;
	@%p211 bra 	$L__BB0_337;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r6529, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r6600,%r6600,%r6529;
}
	// end inline asm
	@%p212 bra 	$L__BB0_339;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r6530, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r6599,%r6599,%r6530;
}
	// end inline asm
	mov.u32 	%r2504, 6;
	mov.u32 	%r2515, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2502,%r6437,%r2504,%r1825,%r2515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2507,%r6523,%r2502;
}
	// end inline asm
	mov.u32 	%r2513, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2511,%r6437,%r2513,%r1825,%r2515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2516,%r6524,%r2511;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6532,%r2507,%r2516;
}
	// end inline asm
	mov.u32 	%r6531, %r6532;
	@%p211 bra 	$L__BB0_341;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r6531, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r6598,%r6598,%r6531;
}
	// end inline asm
	@%p212 bra 	$L__BB0_343;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r6532, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r6596,%r6596,%r6532;
}
	// end inline asm
	mov.u32 	%r2537, 8;
	mov.u32 	%r2548, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2535,%r6437,%r2537,%r1825,%r2548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2540,%r6523,%r2535;
}
	// end inline asm
	mov.u32 	%r2546, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2544,%r6437,%r2546,%r1825,%r2548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2549,%r6524,%r2544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6534,%r2540,%r2549;
}
	// end inline asm
	mov.u32 	%r6533, %r6534;
	@%p211 bra 	$L__BB0_345;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r6533, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6597,%r6597,%r6533;
}
	// end inline asm
	@%p212 bra 	$L__BB0_347;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r6534, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6595,%r6595,%r6534;
}
	// end inline asm
	mov.u32 	%r2570, 10;
	mov.u32 	%r2581, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2568,%r6437,%r2570,%r1825,%r2581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2573,%r6523,%r2568;
}
	// end inline asm
	mov.u32 	%r2579, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2577,%r6437,%r2579,%r1825,%r2581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2582,%r6524,%r2577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6536,%r2573,%r2582;
}
	// end inline asm
	mov.u32 	%r6535, %r6536;
	@%p211 bra 	$L__BB0_349;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r6535, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6594,%r6594,%r6535;
}
	// end inline asm
	@%p212 bra 	$L__BB0_351;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r6536, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6591,%r6591,%r6536;
}
	// end inline asm
	mov.u32 	%r2603, 12;
	mov.u32 	%r2614, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2601,%r6437,%r2603,%r1825,%r2614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2606,%r6523,%r2601;
}
	// end inline asm
	mov.u32 	%r2612, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2610,%r6437,%r2612,%r1825,%r2614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2615,%r6524,%r2610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6538,%r2606,%r2615;
}
	// end inline asm
	mov.u32 	%r6537, %r6538;
	@%p211 bra 	$L__BB0_353;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r6537, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6593,%r6593,%r6537;
}
	// end inline asm
	@%p212 bra 	$L__BB0_355;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r6538, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6590,%r6590,%r6538;
}
	// end inline asm
	mov.u32 	%r2636, 14;
	mov.u32 	%r2647, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2634,%r6437,%r2636,%r1825,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2639,%r6523,%r2634;
}
	// end inline asm
	mov.u32 	%r2645, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2643,%r6437,%r2645,%r1825,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2648,%r6524,%r2643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6540,%r2639,%r2648;
}
	// end inline asm
	mov.u32 	%r6539, %r6540;
	@%p211 bra 	$L__BB0_357;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r6539, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6588,%r6588,%r6539;
}
	// end inline asm
	@%p212 bra 	$L__BB0_359;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r6540, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r6540;
}
	// end inline asm
	mov.u32 	%r2669, 16;
	mov.u32 	%r2680, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2667,%r6437,%r2669,%r1825,%r2680;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2672,%r6523,%r2667;
}
	// end inline asm
	mov.u32 	%r2678, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2676,%r6437,%r2678,%r1825,%r2680;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2681,%r6524,%r2676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6542,%r2672,%r2681;
}
	// end inline asm
	mov.u32 	%r6541, %r6542;
	@%p211 bra 	$L__BB0_361;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r6541, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6587,%r6587,%r6541;
}
	// end inline asm
	@%p212 bra 	$L__BB0_363;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r6542, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6584,%r6584,%r6542;
}
	// end inline asm
	mov.u32 	%r2702, 18;
	mov.u32 	%r2713, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2700,%r6437,%r2702,%r1825,%r2713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2705,%r6523,%r2700;
}
	// end inline asm
	mov.u32 	%r2711, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2709,%r6437,%r2711,%r1825,%r2713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2714,%r6524,%r2709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6544,%r2705,%r2714;
}
	// end inline asm
	mov.u32 	%r6543, %r6544;
	@%p211 bra 	$L__BB0_365;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r6543, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6582,%r6582,%r6543;
}
	// end inline asm
	@%p212 bra 	$L__BB0_367;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r6544, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6581,%r6581,%r6544;
}
	// end inline asm
	mov.u32 	%r2735, 20;
	mov.u32 	%r2746, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2733,%r6437,%r2735,%r1825,%r2746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2738,%r6523,%r2733;
}
	// end inline asm
	mov.u32 	%r2744, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2742,%r6437,%r2744,%r1825,%r2746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2747,%r6524,%r2742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6546,%r2738,%r2747;
}
	// end inline asm
	mov.u32 	%r6545, %r6546;
	@%p211 bra 	$L__BB0_369;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r6545, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6580,%r6580,%r6545;
}
	// end inline asm
	@%p212 bra 	$L__BB0_371;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r6546, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6578,%r6578,%r6546;
}
	// end inline asm
	mov.u32 	%r2768, 22;
	mov.u32 	%r2779, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2766,%r6437,%r2768,%r1825,%r2779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2771,%r6523,%r2766;
}
	// end inline asm
	mov.u32 	%r2777, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2775,%r6437,%r2777,%r1825,%r2779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2780,%r6524,%r2775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6548,%r2771,%r2780;
}
	// end inline asm
	mov.u32 	%r6547, %r6548;
	@%p211 bra 	$L__BB0_373;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r6547, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6576,%r6576,%r6547;
}
	// end inline asm
	@%p212 bra 	$L__BB0_375;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r6548, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6573,%r6573,%r6548;
}
	// end inline asm
	mov.u32 	%r2801, 24;
	mov.u32 	%r2812, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2799,%r6437,%r2801,%r1825,%r2812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2804,%r6523,%r2799;
}
	// end inline asm
	mov.u32 	%r2810, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2808,%r6437,%r2810,%r1825,%r2812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2813,%r6524,%r2808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r2804,%r2813;
}
	// end inline asm
	mov.u32 	%r6549, %r6550;
	@%p211 bra 	$L__BB0_377;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r6549, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6575,%r6575,%r6549;
}
	// end inline asm
	@%p212 bra 	$L__BB0_379;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r6550, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r6572,%r6572,%r6550;
}
	// end inline asm
	mov.u32 	%r2834, 26;
	mov.u32 	%r2845, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2832,%r6437,%r2834,%r1825,%r2845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2837,%r6523,%r2832;
}
	// end inline asm
	mov.u32 	%r2843, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2841,%r6437,%r2843,%r1825,%r2845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2846,%r6524,%r2841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r2837,%r2846;
}
	// end inline asm
	mov.u32 	%r6551, %r6552;
	@%p211 bra 	$L__BB0_381;

	mov.f32 	%f396, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f396;
  mov.b32 %r6551, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r6551;
}
	// end inline asm
	@%p212 bra 	$L__BB0_383;

	mov.f32 	%f398, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f398;
  cvt.rn.f16.f32 high, %f398;
  mov.b32 %r6552, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r6567,%r6567,%r6552;
}
	// end inline asm
	mov.u32 	%r2867, 28;
	mov.u32 	%r2878, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2865,%r6437,%r2867,%r1825,%r2878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2870,%r6523,%r2865;
}
	// end inline asm
	mov.u32 	%r2876, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2874,%r6437,%r2876,%r1825,%r2878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2879,%r6524,%r2874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6554,%r2870,%r2879;
}
	// end inline asm
	mov.u32 	%r6553, %r6554;
	@%p211 bra 	$L__BB0_385;

	mov.f32 	%f400, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f400;
  cvt.rn.f16.f32 high, %f400;
  mov.b32 %r6553, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r6569,%r6569,%r6553;
}
	// end inline asm
	@%p212 bra 	$L__BB0_387;

	mov.f32 	%f402, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f402;
  cvt.rn.f16.f32 high, %f402;
  mov.b32 %r6554, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r6566,%r6566,%r6554;
}
	// end inline asm
	mov.u32 	%r2909, 31;
	mov.u32 	%r2900, 30;
	mov.u32 	%r2911, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2898,%r6437,%r2900,%r1825,%r2911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2903,%r6523,%r2898;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2907,%r6437,%r2909,%r1825,%r2911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2912,%r6524,%r2907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6556,%r2903,%r2912;
}
	// end inline asm
	mov.u32 	%r6555, %r6556;
	@%p211 bra 	$L__BB0_389;

	mov.f32 	%f404, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f404;
  mov.b32 %r6555, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r6562,%r6562,%r6555;
}
	// end inline asm
	@%p212 bra 	$L__BB0_391;

	mov.f32 	%f406, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f406;
  mov.b32 %r6556, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r6560,%r6560,%r6556;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_318:
	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6521, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6522, {low,high};}

	// end inline asm

$L__BB0_320:
	setp.eq.s32 	%p204, %r553, %r1243;
	@%p204 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_321;

$L__BB0_323:
	mov.u32 	%r2391, 0;
	// begin inline asm
	{mul.f16x2 %r2299,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6604,%r6604,%r2299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2305,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6592,%r6592,%r2305;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2311,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6594,%r6594,%r2311;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2317,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r6574,%r2317;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2323,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6576,%r6576,%r2323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2329,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6561,%r6561,%r2329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2335,%r6522,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6598,%r6598,%r2335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2341,%r6522,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6579,%r6579,%r2341;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2347,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6602,%r6602,%r2347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2353,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6589,%r6589,%r2353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2359,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6591,%r6591,%r2359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2365,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6571,%r6571,%r2365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2371,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6573,%r6573,%r2371;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2377,%r6521,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6559,%r6559,%r2377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2383,%r6522,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6596,%r6596,%r2383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2389,%r6522,%r2391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6577,%r6577,%r2389;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_321:
	add.s32 	%r2202, %r1243, -2;
	setp.ne.s32 	%p205, %r553, %r2202;
	@%p205 bra 	$L__BB0_392;

	mov.u32 	%r2295, 0;
	// begin inline asm
	{mul.f16x2 %r2203,%r6521,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6582,%r6582,%r2203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2209,%r6521,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6564,%r6564,%r2209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2215,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6600,%r6600,%r2215;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2221,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6586,%r6586,%r2221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2227,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6588,%r6588,%r2227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2233,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6568,%r6568,%r2233;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2239,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r2239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2245,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6558,%r6558,%r2245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2251,%r6521,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6581,%r6581,%r2251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2257,%r6521,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6563,%r6563,%r2257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2263,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6599,%r6599,%r2263;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2269,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6583,%r6583,%r2269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2275,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r2275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2281,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6565,%r6565,%r2281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2287,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6567,%r6567,%r2287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2293,%r6522,%r2295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6557,%r6557,%r2293;
}
	// end inline asm

$L__BB0_392:
	mov.u32 	%r2935, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2931,%r6492,%r426,%r1825,%r2935;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2931;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6492;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2938, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2939,%r6493,%r2938;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2942,%r6438,%r2939;
}
	// end inline asm
	@%p17 bra 	$L__BB0_394;
	bra.uni 	$L__BB0_393;

$L__BB0_394:
	// begin inline asm
	{neg.f16x2 %r6605,%r6604;
}
	// end inline asm
	bra.uni 	$L__BB0_395;

$L__BB0_393:
	// begin inline asm
	{mul.f16x2 %r6605,%r6439,%r2939;
}
	// end inline asm

$L__BB0_395:
	mov.u32 	%r2955, 31;
	mov.u32 	%r2978, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2953,%r6605,%r2955,%r1825,%r2978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2958,%r2942,%r2953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2961,%r6491,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2964,%r2961,%r2958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2967,%r1746,%r2964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2970,%r6604,%r2967;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2974,%r6488,%r426,%r1825,%r2978;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2974;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6488;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2981, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2982,%r6489,%r2981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2985,%r6438,%r2982;
}
	// end inline asm
	mov.u32 	%r6606, %r6603;
	@%p17 bra 	$L__BB0_397;

	// begin inline asm
	{mul.f16x2 %r6606,%r6439,%r2982;
}
	// end inline asm

$L__BB0_397:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2996,%r6606,%r2955,%r1825,%r2978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3001,%r2985,%r2996;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3004,%r6491,%r6487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3007,%r3001,%r3004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3010,%r1746,%r3007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3013,%r6603,%r3010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3016,%r6492,%r6493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3019,%r6442,%r3016;
}
	// end inline asm
	@%p17 bra 	$L__BB0_399;
	bra.uni 	$L__BB0_398;

$L__BB0_399:
	// begin inline asm
	{neg.f16x2 %r6607,%r6602;
}
	// end inline asm
	bra.uni 	$L__BB0_400;

$L__BB0_398:
	// begin inline asm
	{mul.f16x2 %r6607,%r6443,%r3016;
}
	// end inline asm

$L__BB0_400:
	mov.u32 	%r3032, 31;
	mov.u32 	%r3034, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3030,%r6607,%r3032,%r1825,%r3034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3035,%r3019,%r3030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3038,%r6486,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3041,%r3038,%r3035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3044,%r1746,%r3041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3047,%r6602,%r3044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3050,%r6488,%r6489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3053,%r6442,%r3050;
}
	// end inline asm
	mov.u32 	%r6608, %r6601;
	@%p17 bra 	$L__BB0_402;

	// begin inline asm
	{mul.f16x2 %r6608,%r6443,%r3050;
}
	// end inline asm

$L__BB0_402:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3062,%r6608,%r3032,%r1825,%r3034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3067,%r3053,%r3062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3070,%r6486,%r6484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3073,%r3067,%r3070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3076,%r1746,%r3073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3079,%r6601,%r3076;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3083,%r6482,%r426,%r1825,%r3034;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3083;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6482;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3090, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3091,%r6483,%r3090;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3094,%r6438,%r3091;
}
	// end inline asm
	@%p17 bra 	$L__BB0_404;
	bra.uni 	$L__BB0_403;

$L__BB0_404:
	// begin inline asm
	{neg.f16x2 %r6609,%r6600;
}
	// end inline asm
	bra.uni 	$L__BB0_405;

$L__BB0_403:
	// begin inline asm
	{mul.f16x2 %r6609,%r6439,%r3091;
}
	// end inline asm

$L__BB0_405:
	mov.u32 	%r3109, 31;
	mov.u32 	%r3111, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3107,%r6609,%r3109,%r1825,%r3111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3112,%r3094,%r3107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3115,%r6481,%r6491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3118,%r3115,%r3112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3121,%r1746,%r3118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3124,%r6600,%r3121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3127,%r6482,%r6483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3130,%r6442,%r3127;
}
	// end inline asm
	@%p17 bra 	$L__BB0_407;
	bra.uni 	$L__BB0_406;

$L__BB0_407:
	// begin inline asm
	{neg.f16x2 %r6610,%r6599;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_406:
	// begin inline asm
	{mul.f16x2 %r6610,%r6443,%r3127;
}
	// end inline asm

$L__BB0_408:
	mov.u32 	%r3143, 31;
	mov.u32 	%r3166, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3141,%r6610,%r3143,%r1825,%r3166;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3146,%r3130,%r3141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3149,%r6480,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3152,%r3149,%r3146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3155,%r1746,%r3152;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3158,%r6599,%r3155;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3162,%r6478,%r426,%r1825,%r3166;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3162;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6478;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3169, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3170,%r6479,%r3169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3173,%r6438,%r3170;
}
	// end inline asm
	@%p17 bra 	$L__BB0_410;
	bra.uni 	$L__BB0_409;

$L__BB0_410:
	// begin inline asm
	{neg.f16x2 %r6611,%r6598;
}
	// end inline asm
	bra.uni 	$L__BB0_411;

$L__BB0_409:
	// begin inline asm
	{mul.f16x2 %r6611,%r6439,%r3170;
}
	// end inline asm

$L__BB0_411:
	mov.u32 	%r3188, 31;
	mov.u32 	%r3211, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3186,%r6611,%r3188,%r1825,%r3211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3191,%r3173,%r3186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3194,%r6477,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3197,%r3194,%r3191;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3200,%r1746,%r3197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3203,%r6598,%r3200;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3207,%r6475,%r426,%r1825,%r3211;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3207;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6475;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3214, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3215,%r6476,%r3214;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3218,%r6438,%r3215;
}
	// end inline asm
	mov.u32 	%r6612, %r6597;
	@%p17 bra 	$L__BB0_413;

	// begin inline asm
	{mul.f16x2 %r6612,%r6439,%r3215;
}
	// end inline asm

$L__BB0_413:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3229,%r6612,%r3188,%r1825,%r3211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3234,%r3218,%r3229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3237,%r6477,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3240,%r3234,%r3237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3243,%r1746,%r3240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3246,%r6597,%r3243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3249,%r6478,%r6479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3252,%r6442,%r3249;
}
	// end inline asm
	@%p17 bra 	$L__BB0_415;
	bra.uni 	$L__BB0_414;

$L__BB0_415:
	// begin inline asm
	{neg.f16x2 %r6613,%r6596;
}
	// end inline asm
	bra.uni 	$L__BB0_416;

$L__BB0_414:
	// begin inline asm
	{mul.f16x2 %r6613,%r6443,%r3249;
}
	// end inline asm

$L__BB0_416:
	mov.u32 	%r3265, 31;
	mov.u32 	%r3267, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3263,%r6613,%r3265,%r1825,%r3267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3268,%r3252,%r3263;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3271,%r6474,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3274,%r3271,%r3268;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3277,%r1746,%r3274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3280,%r6596,%r3277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3283,%r6475,%r6476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3286,%r6442,%r3283;
}
	// end inline asm
	mov.u32 	%r6614, %r6595;
	@%p17 bra 	$L__BB0_418;

	// begin inline asm
	{mul.f16x2 %r6614,%r6443,%r3283;
}
	// end inline asm

$L__BB0_418:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3295,%r6614,%r3265,%r1825,%r3267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3300,%r3286,%r3295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3303,%r6474,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3306,%r3300,%r3303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3309,%r1746,%r3306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3312,%r6595,%r3309;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3316,%r6472,%r426,%r1825,%r3267;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3316;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6472;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3323, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3324,%r6473,%r3323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3327,%r6438,%r3324;
}
	// end inline asm
	@%p17 bra 	$L__BB0_420;
	bra.uni 	$L__BB0_419;

$L__BB0_420:
	// begin inline asm
	{neg.f16x2 %r6615,%r6594;
}
	// end inline asm
	bra.uni 	$L__BB0_421;

$L__BB0_419:
	// begin inline asm
	{mul.f16x2 %r6615,%r6439,%r3324;
}
	// end inline asm

$L__BB0_421:
	mov.u32 	%r3342, 31;
	mov.u32 	%r3365, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3340,%r6615,%r3342,%r1825,%r3365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3345,%r3327,%r3340;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3348,%r6471,%r6477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3351,%r3348,%r3345;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3354,%r1746,%r3351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r6594,%r3354;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3361,%r6469,%r426,%r1825,%r3365;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3361;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6469;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3368, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3369,%r6470,%r3368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3372,%r6438,%r3369;
}
	// end inline asm
	mov.u32 	%r6616, %r6593;
	@%p17 bra 	$L__BB0_423;

	// begin inline asm
	{mul.f16x2 %r6616,%r6439,%r3369;
}
	// end inline asm

$L__BB0_423:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3383,%r6616,%r3342,%r1825,%r3365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3388,%r3372,%r3383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3391,%r6471,%r6491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3394,%r3388,%r3391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3397,%r1746,%r3394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6517,%r6593,%r3397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3403,%r6473,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3406,%r6470,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3409,%r3403,%r3406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3412,%r1746,%r3409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3415,%r6592,%r3412;
}
	// end inline asm
	selp.b32 	%r826, %r6592, %r3415, %p17;
	// begin inline asm
	{sub.f16x2 %r3418,%r6472,%r6473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3421,%r6442,%r3418;
}
	// end inline asm
	@%p17 bra 	$L__BB0_425;
	bra.uni 	$L__BB0_424;

$L__BB0_425:
	// begin inline asm
	{neg.f16x2 %r6617,%r6591;
}
	// end inline asm
	bra.uni 	$L__BB0_426;

$L__BB0_424:
	// begin inline asm
	{mul.f16x2 %r6617,%r6443,%r3418;
}
	// end inline asm

$L__BB0_426:
	mov.u32 	%r3434, 31;
	mov.u32 	%r3436, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3432,%r6617,%r3434,%r1825,%r3436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3437,%r3421,%r3432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3440,%r6468,%r6474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3443,%r3440,%r3437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3446,%r1746,%r3443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6518,%r6591,%r3446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3452,%r6469,%r6470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3455,%r6442,%r3452;
}
	// end inline asm
	mov.u32 	%r6618, %r6590;
	@%p17 bra 	$L__BB0_428;

	// begin inline asm
	{mul.f16x2 %r6618,%r6443,%r3452;
}
	// end inline asm

$L__BB0_428:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3464,%r6618,%r3434,%r1825,%r3436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3469,%r3455,%r3464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3472,%r6468,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3475,%r3469,%r3472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3478,%r1746,%r3475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6516,%r6590,%r3478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3484,%r6472,%r6492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3487,%r6469,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3490,%r3484,%r3487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3493,%r1746,%r3490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3496,%r6589,%r3493;
}
	// end inline asm
	selp.b32 	%r838, %r6589, %r3496, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3500,%r6466,%r426,%r1825,%r3436;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3500;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6466;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3507, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3508,%r6467,%r3507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3511,%r6438,%r3508;
}
	// end inline asm
	@%p17 bra 	$L__BB0_430;
	bra.uni 	$L__BB0_429;

$L__BB0_430:
	// begin inline asm
	{neg.f16x2 %r6619,%r6588;
}
	// end inline asm
	bra.uni 	$L__BB0_431;

$L__BB0_429:
	// begin inline asm
	{mul.f16x2 %r6619,%r6439,%r3508;
}
	// end inline asm

$L__BB0_431:
	mov.u32 	%r3526, 31;
	mov.u32 	%r3549, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3524,%r6619,%r3526,%r1825,%r3549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3529,%r3511,%r3524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3532,%r6465,%r6471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3535,%r3532,%r3529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3538,%r1746,%r3535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6515,%r6588,%r3538;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3545,%r6463,%r426,%r1825,%r3549;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3545;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6463;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3552, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r6464,%r3552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3556,%r6438,%r3553;
}
	// end inline asm
	mov.u32 	%r6620, %r6587;
	@%p17 bra 	$L__BB0_433;

	// begin inline asm
	{mul.f16x2 %r6620,%r6439,%r3553;
}
	// end inline asm

$L__BB0_433:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3567,%r6620,%r3526,%r1825,%r3549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3572,%r3556,%r3567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3575,%r6465,%r6481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3578,%r3572,%r3575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3581,%r1746,%r3578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3584,%r6587,%r3581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3587,%r6467,%r6483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3590,%r6464,%r6470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3593,%r3587,%r3590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3596,%r1746,%r3593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3599,%r6586,%r3596;
}
	// end inline asm
	selp.b32 	%r850, %r6586, %r3599, %p17;
	// begin inline asm
	{sub.f16x2 %r3602,%r6466,%r6467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3605,%r6442,%r3602;
}
	// end inline asm
	@%p17 bra 	$L__BB0_435;
	bra.uni 	$L__BB0_434;

$L__BB0_435:
	// begin inline asm
	{neg.f16x2 %r6621,%r6585;
}
	// end inline asm
	bra.uni 	$L__BB0_436;

$L__BB0_434:
	// begin inline asm
	{mul.f16x2 %r6621,%r6443,%r3602;
}
	// end inline asm

$L__BB0_436:
	mov.u32 	%r3618, 31;
	mov.u32 	%r3620, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3616,%r6621,%r3618,%r1825,%r3620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3621,%r3605,%r3616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3624,%r6462,%r6468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3627,%r3624,%r3621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3630,%r1746,%r3627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6514,%r6585,%r3630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3636,%r6463,%r6464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3639,%r6442,%r3636;
}
	// end inline asm
	mov.u32 	%r6622, %r6584;
	@%p17 bra 	$L__BB0_438;

	// begin inline asm
	{mul.f16x2 %r6622,%r6443,%r3636;
}
	// end inline asm

$L__BB0_438:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3648,%r6622,%r3618,%r1825,%r3620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3653,%r3639,%r3648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3656,%r6462,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3659,%r3653,%r3656;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3662,%r1746,%r3659;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3665,%r6584,%r3662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3668,%r6466,%r6482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3671,%r6463,%r6469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r3668,%r3671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3677,%r1746,%r3674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3680,%r6583,%r3677;
}
	// end inline asm
	selp.b32 	%r862, %r6583, %r3680, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3684,%r6460,%r426,%r1825,%r3620;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3684;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6460;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3691, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3692,%r6461,%r3691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3695,%r6438,%r3692;
}
	// end inline asm
	@%p17 bra 	$L__BB0_440;
	bra.uni 	$L__BB0_439;

$L__BB0_440:
	// begin inline asm
	{neg.f16x2 %r6623,%r6582;
}
	// end inline asm
	bra.uni 	$L__BB0_441;

$L__BB0_439:
	// begin inline asm
	{mul.f16x2 %r6623,%r6439,%r3692;
}
	// end inline asm

$L__BB0_441:
	mov.u32 	%r3710, 31;
	mov.u32 	%r3712, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3708,%r6623,%r3710,%r1825,%r3712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3713,%r3695,%r3708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3716,%r1746,%r6465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3719,%r3716,%r3713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3722,%r1746,%r3719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3725,%r6582,%r3722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3728,%r6460,%r6461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3731,%r6442,%r3728;
}
	// end inline asm
	@%p17 bra 	$L__BB0_443;
	bra.uni 	$L__BB0_442;

$L__BB0_443:
	// begin inline asm
	{neg.f16x2 %r6624,%r6581;
}
	// end inline asm
	bra.uni 	$L__BB0_444;

$L__BB0_442:
	// begin inline asm
	{mul.f16x2 %r6624,%r6443,%r3728;
}
	// end inline asm

$L__BB0_444:
	mov.u32 	%r3744, 31;
	mov.u32 	%r3767, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3742,%r6624,%r3744,%r1825,%r3767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3747,%r3731,%r3742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3750,%r1746,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r3750,%r3747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3756,%r1746,%r3753;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3759,%r6581,%r3756;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3763,%r6458,%r426,%r1825,%r3767;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3763;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6458;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3770, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3771,%r6459,%r3770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3774,%r6438,%r3771;
}
	// end inline asm
	mov.u32 	%r6625, %r6580;
	@%p17 bra 	$L__BB0_446;

	// begin inline asm
	{mul.f16x2 %r6625,%r6439,%r3771;
}
	// end inline asm

$L__BB0_446:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3785,%r6625,%r3744,%r1825,%r3767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3790,%r3774,%r3785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3793,%r1746,%r6477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3796,%r3790,%r3793;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3799,%r1746,%r3796;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6513,%r6580,%r3799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3805,%r1746,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r6459,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3811,%r3805,%r3808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3814,%r1746,%r3811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3817,%r6579,%r3814;
}
	// end inline asm
	selp.b32 	%r880, %r6579, %r3817, %p17;
	// begin inline asm
	{sub.f16x2 %r3820,%r6458,%r6459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3823,%r6442,%r3820;
}
	// end inline asm
	mov.u32 	%r6626, %r6578;
	@%p17 bra 	$L__BB0_448;

	// begin inline asm
	{mul.f16x2 %r6626,%r6443,%r3820;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r3834, 31;
	mov.u32 	%r3872, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3832,%r6626,%r3834,%r1825,%r3872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r3823,%r3832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3840,%r1746,%r6474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3843,%r3837,%r3840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3846,%r1746,%r3843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6512,%r6578,%r3846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3852,%r1746,%r6478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3855,%r6458,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3858,%r3852,%r3855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3861,%r1746,%r3858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3864,%r6577,%r3861;
}
	// end inline asm
	selp.b32 	%r886, %r6577, %r3864, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3868,%r6456,%r426,%r1825,%r3872;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3868;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6456;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3875, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r6457,%r3875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r6438,%r3876;
}
	// end inline asm
	@%p17 bra 	$L__BB0_450;
	bra.uni 	$L__BB0_449;

$L__BB0_450:
	// begin inline asm
	{neg.f16x2 %r6627,%r6576;
}
	// end inline asm
	bra.uni 	$L__BB0_451;

$L__BB0_449:
	// begin inline asm
	{mul.f16x2 %r6627,%r6439,%r3876;
}
	// end inline asm

$L__BB0_451:
	mov.u32 	%r3894, 31;
	mov.u32 	%r3917, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3892,%r6627,%r3894,%r1825,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3897,%r3879,%r3892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3900,%r6455,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3903,%r3900,%r3897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3906,%r1746,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6511,%r6576,%r3906;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3913,%r6453,%r426,%r1825,%r3917;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3913;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6453;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3920, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r6454,%r3920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r6438,%r3921;
}
	// end inline asm
	mov.u32 	%r6628, %r6575;
	@%p17 bra 	$L__BB0_453;

	// begin inline asm
	{mul.f16x2 %r6628,%r6439,%r3921;
}
	// end inline asm

$L__BB0_453:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3935,%r6628,%r3894,%r1825,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3940,%r3924,%r3935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3943,%r6455,%r6471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3946,%r3940,%r3943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3949,%r1746,%r3946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6509,%r6575,%r3949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3955,%r6457,%r6473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3958,%r6454,%r6459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3961,%r3955,%r3958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3964,%r1746,%r3961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3967,%r6574,%r3964;
}
	// end inline asm
	selp.b32 	%r6507, %r6574, %r3967, %p17;
	// begin inline asm
	{sub.f16x2 %r3970,%r6456,%r6457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3973,%r6442,%r3970;
}
	// end inline asm
	@%p17 bra 	$L__BB0_455;
	bra.uni 	$L__BB0_454;

$L__BB0_455:
	// begin inline asm
	{neg.f16x2 %r6629,%r6573;
}
	// end inline asm
	bra.uni 	$L__BB0_456;

$L__BB0_454:
	// begin inline asm
	{mul.f16x2 %r6629,%r6443,%r3970;
}
	// end inline asm

$L__BB0_456:
	mov.u32 	%r3986, 31;
	mov.u32 	%r3988, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3984,%r6629,%r3986,%r1825,%r3988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3989,%r3973,%r3984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r6452,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r3992,%r3989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3998,%r1746,%r3995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6510,%r6573,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4004,%r6453,%r6454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4007,%r6442,%r4004;
}
	// end inline asm
	mov.u32 	%r6630, %r6572;
	@%p17 bra 	$L__BB0_458;

	// begin inline asm
	{mul.f16x2 %r6630,%r6443,%r4004;
}
	// end inline asm

$L__BB0_458:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4016,%r6630,%r3986,%r1825,%r3988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4021,%r4007,%r4016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4024,%r6452,%r6468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r4021,%r4024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4030,%r1746,%r4027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6508,%r6572,%r4030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4036,%r6456,%r6472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4039,%r6453,%r6458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4042,%r4036,%r4039;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4045,%r1746,%r4042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4048,%r6571,%r4045;
}
	// end inline asm
	selp.b32 	%r6506, %r6571, %r4048, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4052,%r6450,%r426,%r1825,%r3988;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4052;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6450;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4059, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4060,%r6451,%r4059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4063,%r6438,%r4060;
}
	// end inline asm
	@%p17 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r6631,%r6570;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r6631,%r6439,%r4060;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4078, 31;
	mov.u32 	%r4101, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4076,%r6631,%r4078,%r1825,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4081,%r4063,%r4076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4084,%r1746,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4087,%r4084,%r4081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4090,%r1746,%r4087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6505,%r6570,%r4090;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4097,%r6448,%r426,%r1825,%r4101;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4097;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6448;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4104, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4105,%r6449,%r4104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4108,%r6438,%r4105;
}
	// end inline asm
	mov.u32 	%r6632, %r6569;
	@%p17 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r6632,%r6439,%r4105;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4119,%r6632,%r4078,%r1825,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4124,%r4108,%r4119;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4127,%r1746,%r6465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4130,%r4124,%r4127;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4133,%r1746,%r4130;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6569,%r4133;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4139,%r6451,%r6467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4142,%r6449,%r6454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4145,%r4139,%r4142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4148,%r1746,%r4145;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4151,%r6568,%r4148;
}
	// end inline asm
	selp.b32 	%r6501, %r6568, %r4151, %p17;
	// begin inline asm
	{sub.f16x2 %r4154,%r6450,%r6451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4157,%r6442,%r4154;
}
	// end inline asm
	@%p17 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r6633,%r6567;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r6633,%r6443,%r4154;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4170, 31;
	mov.u32 	%r4172, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4168,%r6633,%r4170,%r1825,%r4172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4173,%r4157,%r4168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4176,%r1746,%r6452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r4176,%r4173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4182,%r1746,%r4179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6504,%r6567,%r4182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4188,%r6448,%r6449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4191,%r6442,%r4188;
}
	// end inline asm
	mov.u32 	%r6634, %r6566;
	@%p17 bra 	$L__BB0_468;

	// begin inline asm
	{mul.f16x2 %r6634,%r6443,%r4188;
}
	// end inline asm

$L__BB0_468:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4200,%r6634,%r4170,%r1825,%r4172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4205,%r4191,%r4200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4208,%r1746,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r4205,%r4208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4214,%r1746,%r4211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6566,%r4214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4220,%r6450,%r6466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4223,%r6448,%r6453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4226,%r4220,%r4223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4229,%r1746,%r4226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4232,%r6565,%r4229;
}
	// end inline asm
	selp.b32 	%r6500, %r6565, %r4232, %p17;
	// begin inline asm
	{sub.f16x2 %r4235,%r1746,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4238,%r1746,%r6449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4241,%r4235,%r4238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4244,%r1746,%r4241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4247,%r6564,%r4244;
}
	// end inline asm
	selp.b32 	%r935, %r6564, %r4247, %p17;
	// begin inline asm
	{sub.f16x2 %r4250,%r1746,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4253,%r1746,%r6448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4256,%r4250,%r4253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4259,%r1746,%r4256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4262,%r6563,%r4259;
}
	// end inline asm
	selp.b32 	%r936, %r6563, %r4262, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4266,%r6446,%r426,%r1825,%r4172;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4266;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6446;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4273, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4274,%r6447,%r4273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4277,%r6438,%r4274;
}
	// end inline asm
	mov.u32 	%r6635, %r6562;
	@%p17 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r6635,%r6439,%r4274;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4290, 31;
	mov.u32 	%r4292, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4288,%r6635,%r4290,%r1825,%r4292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4293,%r4277,%r4288;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4296,%r1746,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4299,%r4293,%r4296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4302,%r1746,%r4299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6499,%r6562,%r4302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4308,%r1746,%r6457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4311,%r6447,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4314,%r4308,%r4311;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4317,%r1746,%r4314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4320,%r6561,%r4317;
}
	// end inline asm
	selp.b32 	%r6497, %r6561, %r4320, %p17;
	// begin inline asm
	{sub.f16x2 %r4323,%r6446,%r6447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4326,%r6442,%r4323;
}
	// end inline asm
	mov.u32 	%r6636, %r6560;
	@%p17 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r6636,%r6443,%r4323;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4335,%r6636,%r4290,%r1825,%r4292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4340,%r4326,%r4335;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4343,%r1746,%r6452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4346,%r4340,%r4343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4349,%r1746,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6560,%r4349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4355,%r1746,%r6456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4358,%r6446,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4361,%r4355,%r4358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4364,%r1746,%r4361;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4367,%r6559,%r4364;
}
	// end inline asm
	selp.b32 	%r6496, %r6559, %r4367, %p17;
	// begin inline asm
	{sub.f16x2 %r4370,%r1746,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4373,%r1746,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4376,%r4370,%r4373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4379,%r1746,%r4376;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4382,%r6558,%r4379;
}
	// end inline asm
	selp.b32 	%r6495, %r6558, %r4382, %p17;
	// begin inline asm
	{sub.f16x2 %r4385,%r1746,%r6450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r1746,%r6446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4391,%r4385,%r4388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4394,%r1746,%r4391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4397,%r6557,%r4394;
}
	// end inline asm
	selp.b32 	%r6494, %r6557, %r4397, %p17;
	bar.sync 	0;
	ld.param.u64 	%rd262, [%rd1+160];
	cvta.to.global.u64 	%rd31, %rd262;
	add.s32 	%r4402, %r1247, 2;
	setp.lt.s32 	%p276, %r552, %r4402;
	add.s32 	%r4403, %r1248, -1;
	setp.ge.s32 	%p277, %r552, %r4403;
	or.pred  	%p278, %p277, %p276;
	add.s32 	%r4404, %r1249, 2;
	setp.lt.s32 	%p279, %r553, %r4404;
	or.pred  	%p280, %p278, %p279;
	add.s32 	%r4405, %r1250, -2;
	setp.ge.s32 	%p281, %r553, %r4405;
	or.pred  	%p282, %p281, %p280;
	setp.lt.s32 	%p283, %r554, %r1244;
	or.pred  	%p284, %p283, %p282;
	mad.lo.s32 	%r4406, %r1246, %r1245, %r1244;
	setp.ge.s32 	%p285, %r554, %r4406;
	or.pred  	%p286, %p284, %p285;
	@%p286 bra 	$L__BB0_714;

	sub.s32 	%r951, %r554, %r1244;
	rem.s32 	%r4407, %r951, %r1245;
	setp.ne.s32 	%p287, %r4407, 0;
	@%p287 bra 	$L__BB0_714;

	div.s32 	%r4408, %r951, %r1245;
	mul.lo.s32 	%r4410, %r4408, %r52;
	sub.s32 	%r952, %r552, %r1247;
	sub.s32 	%r953, %r553, %r1249;
	mul.lo.s32 	%r954, %r4410, 3;
	add.s32 	%r4411, %r952, %r954;
	add.s32 	%r4412, %r4411, -2;
	mul.lo.s32 	%r955, %r4412, %r53;
	add.s32 	%r4414, %r953, %r955;
	mul.lo.s32 	%r4415, %r4414, %r54;
	sub.s32 	%r956, %r4415, %r1251;
	@%p17 bra 	$L__BB0_479;

	not.pred 	%p289, %p13;
	@%p289 bra 	$L__BB0_477;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2970;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4417, %r956, %r393;
	mul.wide.s32 	%rd263, %r4417, 4;
	add.s64 	%rd264, %rd31, %rd263;
	st.global.f32 	[%rd264], %f407;

$L__BB0_477:
	not.pred 	%p290, %p15;
	@%p290 bra 	$L__BB0_479;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2970;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4419, %r956, %r394;
	mul.wide.s32 	%rd265, %r4419, 4;
	add.s64 	%rd266, %rd31, %rd265;
	st.global.f32 	[%rd266], %f408;

$L__BB0_479:
	@%p17 bra 	$L__BB0_484;

	not.pred 	%p292, %p14;
	@%p292 bra 	$L__BB0_482;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3047;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4421, %r956, %r407;
	mul.wide.s32 	%rd267, %r4421, 4;
	add.s64 	%rd268, %rd31, %rd267;
	st.global.f32 	[%rd268], %f409;

$L__BB0_482:
	not.pred 	%p293, %p16;
	@%p293 bra 	$L__BB0_484;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3047;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4423, %r956, %r408;
	mul.wide.s32 	%rd269, %r4423, 4;
	add.s64 	%rd270, %rd31, %rd269;
	st.global.f32 	[%rd270], %f410;

$L__BB0_484:
	add.s32 	%r957, %r954, %r52;
	add.s32 	%r4425, %r952, %r957;
	add.s32 	%r4426, %r4425, -2;
	mad.lo.s32 	%r4428, %r4426, %r53, %r953;
	mul.lo.s32 	%r4429, %r4428, %r54;
	sub.s32 	%r958, %r4429, %r1251;
	@%p17 bra 	$L__BB0_489;

	not.pred 	%p295, %p13;
	@%p295 bra 	$L__BB0_487;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3013;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4431, %r958, %r393;
	mul.wide.s32 	%rd271, %r4431, 4;
	add.s64 	%rd272, %rd31, %rd271;
	st.global.f32 	[%rd272], %f411;

$L__BB0_487:
	not.pred 	%p296, %p15;
	@%p296 bra 	$L__BB0_489;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3013;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4433, %r958, %r394;
	mul.wide.s32 	%rd273, %r4433, 4;
	add.s64 	%rd274, %rd31, %rd273;
	st.global.f32 	[%rd274], %f412;

$L__BB0_489:
	@%p17 bra 	$L__BB0_494;

	not.pred 	%p298, %p14;
	@%p298 bra 	$L__BB0_492;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3079;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4435, %r958, %r407;
	mul.wide.s32 	%rd275, %r4435, 4;
	add.s64 	%rd276, %rd31, %rd275;
	st.global.f32 	[%rd276], %f413;

$L__BB0_492:
	not.pred 	%p299, %p16;
	@%p299 bra 	$L__BB0_494;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3079;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4437, %r958, %r408;
	mul.wide.s32 	%rd277, %r4437, 4;
	add.s64 	%rd278, %rd31, %rd277;
	st.global.f32 	[%rd278], %f414;

$L__BB0_494:
	add.s32 	%r959, %r953, 1;
	add.s32 	%r4438, %r959, %r955;
	mul.lo.s32 	%r4439, %r4438, %r54;
	sub.s32 	%r960, %r4439, %r1251;
	@%p17 bra 	$L__BB0_499;

	not.pred 	%p301, %p13;
	@%p301 bra 	$L__BB0_497;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3124;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4441, %r960, %r393;
	mul.wide.s32 	%rd279, %r4441, 4;
	add.s64 	%rd280, %rd31, %rd279;
	st.global.f32 	[%rd280], %f415;

$L__BB0_497:
	not.pred 	%p302, %p15;
	@%p302 bra 	$L__BB0_499;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3124;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4443, %r960, %r394;
	mul.wide.s32 	%rd281, %r4443, 4;
	add.s64 	%rd282, %rd31, %rd281;
	st.global.f32 	[%rd282], %f416;

$L__BB0_499:
	@%p17 bra 	$L__BB0_504;

	not.pred 	%p304, %p14;
	@%p304 bra 	$L__BB0_502;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3158;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4445, %r960, %r407;
	mul.wide.s32 	%rd283, %r4445, 4;
	add.s64 	%rd284, %rd31, %rd283;
	st.global.f32 	[%rd284], %f417;

$L__BB0_502:
	not.pred 	%p305, %p16;
	@%p305 bra 	$L__BB0_504;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3158;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4447, %r960, %r408;
	mul.wide.s32 	%rd285, %r4447, 4;
	add.s64 	%rd286, %rd31, %rd285;
	st.global.f32 	[%rd286], %f418;

$L__BB0_504:
	not.b32 	%r4448, %r1247;
	add.s32 	%r961, %r552, %r4448;
	not.b32 	%r4449, %r1249;
	add.s32 	%r962, %r553, %r4449;
	add.s32 	%r4450, %r961, %r954;
	mul.lo.s32 	%r963, %r4450, %r53;
	add.s32 	%r4452, %r962, %r963;
	mul.lo.s32 	%r4453, %r4452, %r54;
	sub.s32 	%r964, %r4453, %r1251;
	@%p17 bra 	$L__BB0_509;

	not.pred 	%p307, %p13;
	@%p307 bra 	$L__BB0_507;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3203;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4455, %r964, %r393;
	mul.wide.s32 	%rd287, %r4455, 4;
	add.s64 	%rd288, %rd31, %rd287;
	st.global.f32 	[%rd288], %f419;

$L__BB0_507:
	not.pred 	%p308, %p15;
	@%p308 bra 	$L__BB0_509;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3203;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4457, %r964, %r394;
	mul.wide.s32 	%rd289, %r4457, 4;
	add.s64 	%rd290, %rd31, %rd289;
	st.global.f32 	[%rd290], %f420;

$L__BB0_509:
	@%p17 bra 	$L__BB0_514;

	not.pred 	%p310, %p14;
	@%p310 bra 	$L__BB0_512;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3280;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4459, %r964, %r407;
	mul.wide.s32 	%rd291, %r4459, 4;
	add.s64 	%rd292, %rd31, %rd291;
	st.global.f32 	[%rd292], %f421;

$L__BB0_512:
	not.pred 	%p311, %p16;
	@%p311 bra 	$L__BB0_514;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3280;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4461, %r964, %r408;
	mul.wide.s32 	%rd293, %r4461, 4;
	add.s64 	%rd294, %rd31, %rd293;
	st.global.f32 	[%rd294], %f422;

$L__BB0_514:
	add.s32 	%r4463, %r961, %r957;
	mul.lo.s32 	%r965, %r4463, %r53;
	add.s32 	%r4464, %r962, %r965;
	mul.lo.s32 	%r4465, %r4464, %r54;
	sub.s32 	%r966, %r4465, %r1251;
	@%p17 bra 	$L__BB0_519;

	not.pred 	%p313, %p13;
	@%p313 bra 	$L__BB0_517;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3246;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4467, %r966, %r393;
	mul.wide.s32 	%rd295, %r4467, 4;
	add.s64 	%rd296, %rd31, %rd295;
	st.global.f32 	[%rd296], %f423;

$L__BB0_517:
	not.pred 	%p314, %p15;
	@%p314 bra 	$L__BB0_519;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3246;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4469, %r966, %r394;
	mul.wide.s32 	%rd297, %r4469, 4;
	add.s64 	%rd298, %rd31, %rd297;
	st.global.f32 	[%rd298], %f424;

$L__BB0_519:
	@%p17 bra 	$L__BB0_524;

	not.pred 	%p316, %p14;
	@%p316 bra 	$L__BB0_522;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3312;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4471, %r966, %r407;
	mul.wide.s32 	%rd299, %r4471, 4;
	add.s64 	%rd300, %rd31, %rd299;
	st.global.f32 	[%rd300], %f425;

$L__BB0_522:
	not.pred 	%p317, %p16;
	@%p317 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3312;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4473, %r966, %r408;
	mul.wide.s32 	%rd301, %r4473, 4;
	add.s64 	%rd302, %rd31, %rd301;
	st.global.f32 	[%rd302], %f426;

$L__BB0_524:
	add.s32 	%r4474, %r953, %r963;
	mul.lo.s32 	%r4475, %r4474, %r54;
	sub.s32 	%r967, %r4475, %r1251;
	@%p17 bra 	$L__BB0_529;

	not.pred 	%p319, %p13;
	@%p319 bra 	$L__BB0_527;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6519;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4477, %r967, %r393;
	mul.wide.s32 	%rd303, %r4477, 4;
	add.s64 	%rd304, %rd31, %rd303;
	st.global.f32 	[%rd304], %f427;

$L__BB0_527:
	not.pred 	%p320, %p15;
	@%p320 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6519;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4479, %r967, %r394;
	mul.wide.s32 	%rd305, %r4479, 4;
	add.s64 	%rd306, %rd31, %rd305;
	st.global.f32 	[%rd306], %f428;

$L__BB0_529:
	@%p17 bra 	$L__BB0_534;

	not.pred 	%p322, %p14;
	@%p322 bra 	$L__BB0_532;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6518;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4481, %r967, %r407;
	mul.wide.s32 	%rd307, %r4481, 4;
	add.s64 	%rd308, %rd31, %rd307;
	st.global.f32 	[%rd308], %f429;

$L__BB0_532:
	not.pred 	%p323, %p16;
	@%p323 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6518;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4483, %r967, %r408;
	mul.wide.s32 	%rd309, %r4483, 4;
	add.s64 	%rd310, %rd31, %rd309;
	st.global.f32 	[%rd310], %f430;

$L__BB0_534:
	add.s32 	%r4484, %r953, %r965;
	mul.lo.s32 	%r4485, %r4484, %r54;
	sub.s32 	%r968, %r4485, %r1251;
	@%p17 bra 	$L__BB0_539;

	not.pred 	%p325, %p13;
	@%p325 bra 	$L__BB0_537;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6517;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4487, %r968, %r393;
	mul.wide.s32 	%rd311, %r4487, 4;
	add.s64 	%rd312, %rd31, %rd311;
	st.global.f32 	[%rd312], %f431;

$L__BB0_537:
	not.pred 	%p326, %p15;
	@%p326 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6517;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4489, %r968, %r394;
	mul.wide.s32 	%rd313, %r4489, 4;
	add.s64 	%rd314, %rd31, %rd313;
	st.global.f32 	[%rd314], %f432;

$L__BB0_539:
	@%p17 bra 	$L__BB0_544;

	not.pred 	%p328, %p14;
	@%p328 bra 	$L__BB0_542;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6516;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4491, %r968, %r407;
	mul.wide.s32 	%rd315, %r4491, 4;
	add.s64 	%rd316, %rd31, %rd315;
	st.global.f32 	[%rd316], %f433;

$L__BB0_542:
	not.pred 	%p329, %p16;
	@%p329 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6516;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4493, %r968, %r408;
	mul.wide.s32 	%rd317, %r4493, 4;
	add.s64 	%rd318, %rd31, %rd317;
	st.global.f32 	[%rd318], %f434;

$L__BB0_544:
	add.s32 	%r969, %r957, %r52;
	add.s32 	%r4495, %r961, %r969;
	mul.lo.s32 	%r970, %r4495, %r53;
	add.s32 	%r4497, %r953, %r970;
	mul.lo.s32 	%r4498, %r4497, %r54;
	sub.s32 	%r971, %r4498, %r1251;
	@%p17 bra 	$L__BB0_549;

	not.pred 	%p331, %p13;
	@%p331 bra 	$L__BB0_547;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r826;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4500, %r971, %r393;
	mul.wide.s32 	%rd319, %r4500, 4;
	add.s64 	%rd320, %rd31, %rd319;
	st.global.f32 	[%rd320], %f435;

$L__BB0_547:
	not.pred 	%p332, %p15;
	@%p332 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r826;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4502, %r971, %r394;
	mul.wide.s32 	%rd321, %r4502, 4;
	add.s64 	%rd322, %rd31, %rd321;
	st.global.f32 	[%rd322], %f436;

$L__BB0_549:
	@%p17 bra 	$L__BB0_554;

	not.pred 	%p334, %p14;
	@%p334 bra 	$L__BB0_552;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r838;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4504, %r971, %r407;
	mul.wide.s32 	%rd323, %r4504, 4;
	add.s64 	%rd324, %rd31, %rd323;
	st.global.f32 	[%rd324], %f437;

$L__BB0_552:
	not.pred 	%p335, %p16;
	@%p335 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r838;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4506, %r971, %r408;
	mul.wide.s32 	%rd325, %r4506, 4;
	add.s64 	%rd326, %rd31, %rd325;
	st.global.f32 	[%rd326], %f438;

$L__BB0_554:
	add.s32 	%r4507, %r959, %r963;
	mul.lo.s32 	%r4508, %r4507, %r54;
	sub.s32 	%r972, %r4508, %r1251;
	@%p17 bra 	$L__BB0_559;

	not.pred 	%p337, %p13;
	@%p337 bra 	$L__BB0_557;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6515;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4510, %r972, %r393;
	mul.wide.s32 	%rd327, %r4510, 4;
	add.s64 	%rd328, %rd31, %rd327;
	st.global.f32 	[%rd328], %f439;

$L__BB0_557:
	not.pred 	%p338, %p15;
	@%p338 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6515;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4512, %r972, %r394;
	mul.wide.s32 	%rd329, %r4512, 4;
	add.s64 	%rd330, %rd31, %rd329;
	st.global.f32 	[%rd330], %f440;

$L__BB0_559:
	@%p17 bra 	$L__BB0_564;

	not.pred 	%p340, %p14;
	@%p340 bra 	$L__BB0_562;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6514;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4514, %r972, %r407;
	mul.wide.s32 	%rd331, %r4514, 4;
	add.s64 	%rd332, %rd31, %rd331;
	st.global.f32 	[%rd332], %f441;

$L__BB0_562:
	not.pred 	%p341, %p16;
	@%p341 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6514;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4516, %r972, %r408;
	mul.wide.s32 	%rd333, %r4516, 4;
	add.s64 	%rd334, %rd31, %rd333;
	st.global.f32 	[%rd334], %f442;

$L__BB0_564:
	add.s32 	%r4517, %r959, %r965;
	mul.lo.s32 	%r4518, %r4517, %r54;
	sub.s32 	%r973, %r4518, %r1251;
	@%p17 bra 	$L__BB0_569;

	not.pred 	%p343, %p13;
	@%p343 bra 	$L__BB0_567;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3584;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4520, %r973, %r393;
	mul.wide.s32 	%rd335, %r4520, 4;
	add.s64 	%rd336, %rd31, %rd335;
	st.global.f32 	[%rd336], %f443;

$L__BB0_567:
	not.pred 	%p344, %p15;
	@%p344 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3584;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4522, %r973, %r394;
	mul.wide.s32 	%rd337, %r4522, 4;
	add.s64 	%rd338, %rd31, %rd337;
	st.global.f32 	[%rd338], %f444;

$L__BB0_569:
	@%p17 bra 	$L__BB0_574;

	not.pred 	%p346, %p14;
	@%p346 bra 	$L__BB0_572;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3665;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4524, %r973, %r407;
	mul.wide.s32 	%rd339, %r4524, 4;
	add.s64 	%rd340, %rd31, %rd339;
	st.global.f32 	[%rd340], %f445;

$L__BB0_572:
	not.pred 	%p347, %p16;
	@%p347 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3665;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4526, %r973, %r408;
	mul.wide.s32 	%rd341, %r4526, 4;
	add.s64 	%rd342, %rd31, %rd341;
	st.global.f32 	[%rd342], %f446;

$L__BB0_574:
	add.s32 	%r4527, %r959, %r970;
	mul.lo.s32 	%r4528, %r4527, %r54;
	sub.s32 	%r974, %r4528, %r1251;
	@%p17 bra 	$L__BB0_579;

	not.pred 	%p349, %p13;
	@%p349 bra 	$L__BB0_577;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r850;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4530, %r974, %r393;
	mul.wide.s32 	%rd343, %r4530, 4;
	add.s64 	%rd344, %rd31, %rd343;
	st.global.f32 	[%rd344], %f447;

$L__BB0_577:
	not.pred 	%p350, %p15;
	@%p350 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r850;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4532, %r974, %r394;
	mul.wide.s32 	%rd345, %r4532, 4;
	add.s64 	%rd346, %rd31, %rd345;
	st.global.f32 	[%rd346], %f448;

$L__BB0_579:
	@%p17 bra 	$L__BB0_584;

	not.pred 	%p352, %p14;
	@%p352 bra 	$L__BB0_582;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r862;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4534, %r974, %r407;
	mul.wide.s32 	%rd347, %r4534, 4;
	add.s64 	%rd348, %rd31, %rd347;
	st.global.f32 	[%rd348], %f449;

$L__BB0_582:
	not.pred 	%p353, %p16;
	@%p353 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r862;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4536, %r974, %r408;
	mul.wide.s32 	%rd349, %r4536, 4;
	add.s64 	%rd350, %rd31, %rd349;
	st.global.f32 	[%rd350], %f450;

$L__BB0_584:
	add.s32 	%r975, %r953, 2;
	add.s32 	%r4537, %r975, %r963;
	mul.lo.s32 	%r4538, %r4537, %r54;
	sub.s32 	%r976, %r4538, %r1251;
	@%p17 bra 	$L__BB0_589;

	not.pred 	%p355, %p13;
	@%p355 bra 	$L__BB0_587;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3725;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4540, %r976, %r393;
	mul.wide.s32 	%rd351, %r4540, 4;
	add.s64 	%rd352, %rd31, %rd351;
	st.global.f32 	[%rd352], %f451;

$L__BB0_587:
	not.pred 	%p356, %p15;
	@%p356 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3725;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4542, %r976, %r394;
	mul.wide.s32 	%rd353, %r4542, 4;
	add.s64 	%rd354, %rd31, %rd353;
	st.global.f32 	[%rd354], %f452;

$L__BB0_589:
	@%p17 bra 	$L__BB0_594;

	not.pred 	%p358, %p14;
	@%p358 bra 	$L__BB0_592;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3759;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4544, %r976, %r407;
	mul.wide.s32 	%rd355, %r4544, 4;
	add.s64 	%rd356, %rd31, %rd355;
	st.global.f32 	[%rd356], %f453;

$L__BB0_592:
	not.pred 	%p359, %p16;
	@%p359 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3759;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4546, %r976, %r408;
	mul.wide.s32 	%rd357, %r4546, 4;
	add.s64 	%rd358, %rd31, %rd357;
	st.global.f32 	[%rd358], %f454;

$L__BB0_594:
	mul.lo.s32 	%r977, %r4425, %r53;
	add.s32 	%r4549, %r962, %r977;
	mul.lo.s32 	%r4550, %r4549, %r54;
	sub.s32 	%r978, %r4550, %r1251;
	@%p17 bra 	$L__BB0_599;

	not.pred 	%p361, %p13;
	@%p361 bra 	$L__BB0_597;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6513;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4552, %r978, %r393;
	mul.wide.s32 	%rd359, %r4552, 4;
	add.s64 	%rd360, %rd31, %rd359;
	st.global.f32 	[%rd360], %f455;

$L__BB0_597:
	not.pred 	%p362, %p15;
	@%p362 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6513;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4554, %r978, %r394;
	mul.wide.s32 	%rd361, %r4554, 4;
	add.s64 	%rd362, %rd31, %rd361;
	st.global.f32 	[%rd362], %f456;

$L__BB0_599:
	@%p17 bra 	$L__BB0_604;

	not.pred 	%p364, %p14;
	@%p364 bra 	$L__BB0_602;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6512;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4556, %r978, %r407;
	mul.wide.s32 	%rd363, %r4556, 4;
	add.s64 	%rd364, %rd31, %rd363;
	st.global.f32 	[%rd364], %f457;

$L__BB0_602:
	not.pred 	%p365, %p16;
	@%p365 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6512;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4558, %r978, %r408;
	mul.wide.s32 	%rd365, %r4558, 4;
	add.s64 	%rd366, %rd31, %rd365;
	st.global.f32 	[%rd366], %f458;

$L__BB0_604:
	add.s32 	%r4560, %r952, %r969;
	mul.lo.s32 	%r979, %r4560, %r53;
	add.s32 	%r4561, %r962, %r979;
	mul.lo.s32 	%r4562, %r4561, %r54;
	sub.s32 	%r980, %r4562, %r1251;
	@%p17 bra 	$L__BB0_609;

	not.pred 	%p367, %p13;
	@%p367 bra 	$L__BB0_607;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r880;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4564, %r980, %r393;
	mul.wide.s32 	%rd367, %r4564, 4;
	add.s64 	%rd368, %rd31, %rd367;
	st.global.f32 	[%rd368], %f459;

$L__BB0_607:
	not.pred 	%p368, %p15;
	@%p368 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r880;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4566, %r980, %r394;
	mul.wide.s32 	%rd369, %r4566, 4;
	add.s64 	%rd370, %rd31, %rd369;
	st.global.f32 	[%rd370], %f460;

$L__BB0_609:
	@%p17 bra 	$L__BB0_614;

	not.pred 	%p370, %p14;
	@%p370 bra 	$L__BB0_612;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r886;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4568, %r980, %r407;
	mul.wide.s32 	%rd371, %r4568, 4;
	add.s64 	%rd372, %rd31, %rd371;
	st.global.f32 	[%rd372], %f461;

$L__BB0_612:
	not.pred 	%p371, %p16;
	@%p371 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r886;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4570, %r980, %r408;
	mul.wide.s32 	%rd373, %r4570, 4;
	add.s64 	%rd374, %rd31, %rd373;
	st.global.f32 	[%rd374], %f462;

$L__BB0_614:
	mul.lo.s32 	%r981, %r4411, %r53;
	add.s32 	%r4573, %r953, %r981;
	mul.lo.s32 	%r4574, %r4573, %r54;
	sub.s32 	%r982, %r4574, %r1251;
	@%p17 bra 	$L__BB0_619;

	not.pred 	%p373, %p13;
	@%p373 bra 	$L__BB0_617;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6511;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4576, %r982, %r393;
	mul.wide.s32 	%rd375, %r4576, 4;
	add.s64 	%rd376, %rd31, %rd375;
	st.global.f32 	[%rd376], %f463;

$L__BB0_617:
	not.pred 	%p374, %p15;
	@%p374 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6511;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4578, %r982, %r394;
	mul.wide.s32 	%rd377, %r4578, 4;
	add.s64 	%rd378, %rd31, %rd377;
	st.global.f32 	[%rd378], %f464;

$L__BB0_619:
	@%p17 bra 	$L__BB0_624;

	not.pred 	%p376, %p14;
	@%p376 bra 	$L__BB0_622;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6510;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4580, %r982, %r407;
	mul.wide.s32 	%rd379, %r4580, 4;
	add.s64 	%rd380, %rd31, %rd379;
	st.global.f32 	[%rd380], %f465;

$L__BB0_622:
	not.pred 	%p377, %p16;
	@%p377 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6510;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4582, %r982, %r408;
	mul.wide.s32 	%rd381, %r4582, 4;
	add.s64 	%rd382, %rd31, %rd381;
	st.global.f32 	[%rd382], %f466;

$L__BB0_624:
	add.s32 	%r4583, %r953, %r977;
	mul.lo.s32 	%r4584, %r4583, %r54;
	sub.s32 	%r983, %r4584, %r1251;
	@%p17 bra 	$L__BB0_629;

	not.pred 	%p379, %p13;
	@%p379 bra 	$L__BB0_627;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6509;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4586, %r983, %r393;
	mul.wide.s32 	%rd383, %r4586, 4;
	add.s64 	%rd384, %rd31, %rd383;
	st.global.f32 	[%rd384], %f467;

$L__BB0_627:
	not.pred 	%p380, %p15;
	@%p380 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6509;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4588, %r983, %r394;
	mul.wide.s32 	%rd385, %r4588, 4;
	add.s64 	%rd386, %rd31, %rd385;
	st.global.f32 	[%rd386], %f468;

$L__BB0_629:
	@%p17 bra 	$L__BB0_634;

	not.pred 	%p382, %p14;
	@%p382 bra 	$L__BB0_632;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6508;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4590, %r983, %r407;
	mul.wide.s32 	%rd387, %r4590, 4;
	add.s64 	%rd388, %rd31, %rd387;
	st.global.f32 	[%rd388], %f469;

$L__BB0_632:
	not.pred 	%p383, %p16;
	@%p383 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6508;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4592, %r983, %r408;
	mul.wide.s32 	%rd389, %r4592, 4;
	add.s64 	%rd390, %rd31, %rd389;
	st.global.f32 	[%rd390], %f470;

$L__BB0_634:
	add.s32 	%r4593, %r953, %r979;
	mul.lo.s32 	%r4594, %r4593, %r54;
	sub.s32 	%r984, %r4594, %r1251;
	@%p17 bra 	$L__BB0_639;

	not.pred 	%p385, %p13;
	@%p385 bra 	$L__BB0_637;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6507;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4596, %r984, %r393;
	mul.wide.s32 	%rd391, %r4596, 4;
	add.s64 	%rd392, %rd31, %rd391;
	st.global.f32 	[%rd392], %f471;

$L__BB0_637:
	not.pred 	%p386, %p15;
	@%p386 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6507;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4598, %r984, %r394;
	mul.wide.s32 	%rd393, %r4598, 4;
	add.s64 	%rd394, %rd31, %rd393;
	st.global.f32 	[%rd394], %f472;

$L__BB0_639:
	@%p17 bra 	$L__BB0_644;

	not.pred 	%p388, %p14;
	@%p388 bra 	$L__BB0_642;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6506;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4600, %r984, %r407;
	mul.wide.s32 	%rd395, %r4600, 4;
	add.s64 	%rd396, %rd31, %rd395;
	st.global.f32 	[%rd396], %f473;

$L__BB0_642:
	not.pred 	%p389, %p16;
	@%p389 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6506;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4602, %r984, %r408;
	mul.wide.s32 	%rd397, %r4602, 4;
	add.s64 	%rd398, %rd31, %rd397;
	st.global.f32 	[%rd398], %f474;

$L__BB0_644:
	add.s32 	%r4603, %r959, %r981;
	mul.lo.s32 	%r4604, %r4603, %r54;
	sub.s32 	%r985, %r4604, %r1251;
	@%p17 bra 	$L__BB0_649;

	not.pred 	%p391, %p13;
	@%p391 bra 	$L__BB0_647;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6505;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4606, %r985, %r393;
	mul.wide.s32 	%rd399, %r4606, 4;
	add.s64 	%rd400, %rd31, %rd399;
	st.global.f32 	[%rd400], %f475;

$L__BB0_647:
	not.pred 	%p392, %p15;
	@%p392 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6505;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4608, %r985, %r394;
	mul.wide.s32 	%rd401, %r4608, 4;
	add.s64 	%rd402, %rd31, %rd401;
	st.global.f32 	[%rd402], %f476;

$L__BB0_649:
	@%p17 bra 	$L__BB0_654;

	not.pred 	%p394, %p14;
	@%p394 bra 	$L__BB0_652;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4610, %r985, %r407;
	mul.wide.s32 	%rd403, %r4610, 4;
	add.s64 	%rd404, %rd31, %rd403;
	st.global.f32 	[%rd404], %f477;

$L__BB0_652:
	not.pred 	%p395, %p16;
	@%p395 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4612, %r985, %r408;
	mul.wide.s32 	%rd405, %r4612, 4;
	add.s64 	%rd406, %rd31, %rd405;
	st.global.f32 	[%rd406], %f478;

$L__BB0_654:
	add.s32 	%r4613, %r959, %r977;
	mul.lo.s32 	%r4614, %r4613, %r54;
	sub.s32 	%r986, %r4614, %r1251;
	@%p17 bra 	$L__BB0_659;

	not.pred 	%p397, %p13;
	@%p397 bra 	$L__BB0_657;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4616, %r986, %r393;
	mul.wide.s32 	%rd407, %r4616, 4;
	add.s64 	%rd408, %rd31, %rd407;
	st.global.f32 	[%rd408], %f479;

$L__BB0_657:
	not.pred 	%p398, %p15;
	@%p398 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4618, %r986, %r394;
	mul.wide.s32 	%rd409, %r4618, 4;
	add.s64 	%rd410, %rd31, %rd409;
	st.global.f32 	[%rd410], %f480;

$L__BB0_659:
	@%p17 bra 	$L__BB0_664;

	not.pred 	%p400, %p14;
	@%p400 bra 	$L__BB0_662;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4620, %r986, %r407;
	mul.wide.s32 	%rd411, %r4620, 4;
	add.s64 	%rd412, %rd31, %rd411;
	st.global.f32 	[%rd412], %f481;

$L__BB0_662:
	not.pred 	%p401, %p16;
	@%p401 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4622, %r986, %r408;
	mul.wide.s32 	%rd413, %r4622, 4;
	add.s64 	%rd414, %rd31, %rd413;
	st.global.f32 	[%rd414], %f482;

$L__BB0_664:
	add.s32 	%r4623, %r959, %r979;
	mul.lo.s32 	%r4624, %r4623, %r54;
	sub.s32 	%r987, %r4624, %r1251;
	@%p17 bra 	$L__BB0_669;

	not.pred 	%p403, %p13;
	@%p403 bra 	$L__BB0_667;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4626, %r987, %r393;
	mul.wide.s32 	%rd415, %r4626, 4;
	add.s64 	%rd416, %rd31, %rd415;
	st.global.f32 	[%rd416], %f483;

$L__BB0_667:
	not.pred 	%p404, %p15;
	@%p404 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4628, %r987, %r394;
	mul.wide.s32 	%rd417, %r4628, 4;
	add.s64 	%rd418, %rd31, %rd417;
	st.global.f32 	[%rd418], %f484;

$L__BB0_669:
	@%p17 bra 	$L__BB0_674;

	not.pred 	%p406, %p14;
	@%p406 bra 	$L__BB0_672;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4630, %r987, %r407;
	mul.wide.s32 	%rd419, %r4630, 4;
	add.s64 	%rd420, %rd31, %rd419;
	st.global.f32 	[%rd420], %f485;

$L__BB0_672:
	not.pred 	%p407, %p16;
	@%p407 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4632, %r987, %r408;
	mul.wide.s32 	%rd421, %r4632, 4;
	add.s64 	%rd422, %rd31, %rd421;
	st.global.f32 	[%rd422], %f486;

$L__BB0_674:
	add.s32 	%r4633, %r975, %r979;
	mul.lo.s32 	%r4634, %r4633, %r54;
	sub.s32 	%r988, %r4634, %r1251;
	@%p17 bra 	$L__BB0_679;

	not.pred 	%p409, %p13;
	@%p409 bra 	$L__BB0_677;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r935;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4636, %r988, %r393;
	mul.wide.s32 	%rd423, %r4636, 4;
	add.s64 	%rd424, %rd31, %rd423;
	st.global.f32 	[%rd424], %f487;

$L__BB0_677:
	not.pred 	%p410, %p15;
	@%p410 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r935;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4638, %r988, %r394;
	mul.wide.s32 	%rd425, %r4638, 4;
	add.s64 	%rd426, %rd31, %rd425;
	st.global.f32 	[%rd426], %f488;

$L__BB0_679:
	@%p17 bra 	$L__BB0_684;

	not.pred 	%p412, %p14;
	@%p412 bra 	$L__BB0_682;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r936;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4640, %r988, %r407;
	mul.wide.s32 	%rd427, %r4640, 4;
	add.s64 	%rd428, %rd31, %rd427;
	st.global.f32 	[%rd428], %f489;

$L__BB0_682:
	not.pred 	%p413, %p16;
	@%p413 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r936;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4642, %r988, %r408;
	mul.wide.s32 	%rd429, %r4642, 4;
	add.s64 	%rd430, %rd31, %rd429;
	st.global.f32 	[%rd430], %f490;

$L__BB0_684:
	add.s32 	%r989, %r952, 1;
	add.s32 	%r4643, %r989, %r957;
	mad.lo.s32 	%r4645, %r4643, %r53, %r953;
	mul.lo.s32 	%r4646, %r4645, %r54;
	sub.s32 	%r990, %r4646, %r1251;
	@%p17 bra 	$L__BB0_689;

	not.pred 	%p415, %p13;
	@%p415 bra 	$L__BB0_687;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f491, low;}

	// end inline asm
	add.s32 	%r4648, %r990, %r393;
	mul.wide.s32 	%rd431, %r4648, 4;
	add.s64 	%rd432, %rd31, %rd431;
	st.global.f32 	[%rd432], %f491;

$L__BB0_687:
	not.pred 	%p416, %p15;
	@%p416 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f492, high;}

	// end inline asm
	add.s32 	%r4650, %r990, %r394;
	mul.wide.s32 	%rd433, %r4650, 4;
	add.s64 	%rd434, %rd31, %rd433;
	st.global.f32 	[%rd434], %f492;

$L__BB0_689:
	@%p17 bra 	$L__BB0_694;

	not.pred 	%p418, %p14;
	@%p418 bra 	$L__BB0_692;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f493, low;}

	// end inline asm
	add.s32 	%r4652, %r990, %r407;
	mul.wide.s32 	%rd435, %r4652, 4;
	add.s64 	%rd436, %rd31, %rd435;
	st.global.f32 	[%rd436], %f493;

$L__BB0_692:
	not.pred 	%p419, %p16;
	@%p419 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f494, high;}

	// end inline asm
	add.s32 	%r4654, %r990, %r408;
	mul.wide.s32 	%rd437, %r4654, 4;
	add.s64 	%rd438, %rd31, %rd437;
	st.global.f32 	[%rd438], %f494;

$L__BB0_694:
	add.s32 	%r4656, %r989, %r969;
	mul.lo.s32 	%r991, %r4656, %r53;
	add.s32 	%r4657, %r953, %r991;
	mul.lo.s32 	%r4658, %r4657, %r54;
	sub.s32 	%r992, %r4658, %r1251;
	@%p17 bra 	$L__BB0_699;

	not.pred 	%p421, %p13;
	@%p421 bra 	$L__BB0_697;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f495, low;}

	// end inline asm
	add.s32 	%r4660, %r992, %r393;
	mul.wide.s32 	%rd439, %r4660, 4;
	add.s64 	%rd440, %rd31, %rd439;
	st.global.f32 	[%rd440], %f495;

$L__BB0_697:
	not.pred 	%p422, %p15;
	@%p422 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f496, high;}

	// end inline asm
	add.s32 	%r4662, %r992, %r394;
	mul.wide.s32 	%rd441, %r4662, 4;
	add.s64 	%rd442, %rd31, %rd441;
	st.global.f32 	[%rd442], %f496;

$L__BB0_699:
	@%p17 bra 	$L__BB0_704;

	not.pred 	%p424, %p14;
	@%p424 bra 	$L__BB0_702;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f497, low;}

	// end inline asm
	add.s32 	%r4664, %r992, %r407;
	mul.wide.s32 	%rd443, %r4664, 4;
	add.s64 	%rd444, %rd31, %rd443;
	st.global.f32 	[%rd444], %f497;

$L__BB0_702:
	not.pred 	%p425, %p16;
	@%p425 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f498, high;}

	// end inline asm
	add.s32 	%r4666, %r992, %r408;
	mul.wide.s32 	%rd445, %r4666, 4;
	add.s64 	%rd446, %rd31, %rd445;
	st.global.f32 	[%rd446], %f498;

$L__BB0_704:
	add.s32 	%r4667, %r959, %r991;
	mul.lo.s32 	%r4668, %r4667, %r54;
	sub.s32 	%r993, %r4668, %r1251;
	@%p17 bra 	$L__BB0_709;

	not.pred 	%p427, %p13;
	@%p427 bra 	$L__BB0_707;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f499, low;}

	// end inline asm
	add.s32 	%r4670, %r993, %r393;
	mul.wide.s32 	%rd447, %r4670, 4;
	add.s64 	%rd448, %rd31, %rd447;
	st.global.f32 	[%rd448], %f499;

$L__BB0_707:
	not.pred 	%p428, %p15;
	@%p428 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f500, high;}

	// end inline asm
	add.s32 	%r4672, %r993, %r394;
	mul.wide.s32 	%rd449, %r4672, 4;
	add.s64 	%rd450, %rd31, %rd449;
	st.global.f32 	[%rd450], %f500;

$L__BB0_709:
	@%p17 bra 	$L__BB0_714;

	not.pred 	%p430, %p14;
	@%p430 bra 	$L__BB0_712;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f501, low;}

	// end inline asm
	add.s32 	%r4674, %r993, %r407;
	mul.wide.s32 	%rd451, %r4674, 4;
	add.s64 	%rd452, %rd31, %rd451;
	st.global.f32 	[%rd452], %f501;

$L__BB0_712:
	not.pred 	%p431, %p16;
	@%p431 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f502, high;}

	// end inline asm
	add.s32 	%r4676, %r993, %r408;
	mul.wide.s32 	%rd453, %r4676, 4;
	add.s64 	%rd454, %rd31, %rd453;
	st.global.f32 	[%rd454], %f502;

$L__BB0_714:
	bar.sync 	0;
	mov.f32 	%f550, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4677, {low,high};}

	// end inline asm
	selp.b32 	%r4679, %r6441, %r4677, %p17;
	// begin inline asm
	{mul.f16x2 %r4678,%r4679,%r6491;
}
	// end inline asm
	selp.b32 	%r4682, %r6445, %r4677, %p17;
	// begin inline asm
	{mul.f16x2 %r4681,%r4682,%r6486;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4684, {low,high};}

	// end inline asm
	selp.b32 	%r4686, %r6441, %r4684, %p17;
	// begin inline asm
	{mul.f16x2 %r4685,%r4686,%r6477;
}
	// end inline asm
	selp.b32 	%r4689, %r6445, %r4684, %p17;
	// begin inline asm
	{mul.f16x2 %r4688,%r4689,%r6474;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4691, {low,high};}

	// end inline asm
	selp.b32 	%r4693, %r6441, %r4691, %p17;
	// begin inline asm
	{mul.f16x2 %r4692,%r4693,%r6470;
}
	// end inline asm
	selp.b32 	%r4696, %r6445, %r4691, %p17;
	// begin inline asm
	{mul.f16x2 %r4695,%r4696,%r6469;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4698, {low,high};}

	// end inline asm
	selp.b32 	%r4700, %r6441, %r4698, %p17;
	// begin inline asm
	{mul.f16x2 %r4699,%r4700,%r6473;
}
	// end inline asm
	selp.b32 	%r4703, %r6445, %r4698, %p17;
	// begin inline asm
	{mul.f16x2 %r4702,%r4703,%r6472;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4705, {low,high};}

	// end inline asm
	selp.b32 	%r4707, %r6441, %r4705, %p17;
	// begin inline asm
	{mul.f16x2 %r4706,%r4707,%r6471;
}
	// end inline asm
	selp.b32 	%r4710, %r6445, %r4705, %p17;
	// begin inline asm
	{mul.f16x2 %r4709,%r4710,%r6468;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4712, {low,high};}

	// end inline asm
	selp.b32 	%r4714, %r6441, %r4712, %p17;
	// begin inline asm
	{mul.f16x2 %r4713,%r4714,%r6467;
}
	// end inline asm
	selp.b32 	%r4717, %r6445, %r4712, %p17;
	// begin inline asm
	{mul.f16x2 %r4716,%r4717,%r6466;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4719, {low,high};}

	// end inline asm
	selp.b32 	%r4721, %r6441, %r4719, %p17;
	// begin inline asm
	{mul.f16x2 %r4720,%r4721,%r6465;
}
	// end inline asm
	selp.b32 	%r4724, %r6445, %r4719, %p17;
	// begin inline asm
	{mul.f16x2 %r4723,%r4724,%r6462;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4726, {low,high};}

	// end inline asm
	selp.b32 	%r4728, %r6441, %r4726, %p17;
	// begin inline asm
	{mul.f16x2 %r4727,%r4728,%r6459;
}
	// end inline asm
	selp.b32 	%r4731, %r6445, %r4726, %p17;
	// begin inline asm
	{mul.f16x2 %r4730,%r4731,%r6458;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4733, {low,high};}

	// end inline asm
	selp.b32 	%r4735, %r6441, %r4733, %p17;
	// begin inline asm
	{mul.f16x2 %r4734,%r4735,%r1746;
}
	// end inline asm
	selp.b32 	%r4738, %r6445, %r4733, %p17;
	// begin inline asm
	{mul.f16x2 %r4737,%r4738,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4740, {low,high};}

	// end inline asm
	selp.b32 	%r4742, %r6441, %r4740, %p17;
	// begin inline asm
	{mul.f16x2 %r4741,%r4742,%r1746;
}
	// end inline asm
	selp.b32 	%r4745, %r6445, %r4740, %p17;
	// begin inline asm
	{mul.f16x2 %r4744,%r4745,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4747, {low,high};}

	// end inline asm
	selp.b32 	%r4749, %r6441, %r4747, %p17;
	// begin inline asm
	{mul.f16x2 %r4748,%r4749,%r6454;
}
	// end inline asm
	selp.b32 	%r4752, %r6445, %r4747, %p17;
	// begin inline asm
	{mul.f16x2 %r4751,%r4752,%r6453;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4754, {low,high};}

	// end inline asm
	selp.b32 	%r4756, %r6441, %r4754, %p17;
	// begin inline asm
	{mul.f16x2 %r4755,%r4756,%r6457;
}
	// end inline asm
	selp.b32 	%r4759, %r6445, %r4754, %p17;
	// begin inline asm
	{mul.f16x2 %r4758,%r4759,%r6456;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4761, {low,high};}

	// end inline asm
	selp.b32 	%r4763, %r6441, %r4761, %p17;
	// begin inline asm
	{mul.f16x2 %r4762,%r4763,%r6455;
}
	// end inline asm
	selp.b32 	%r4766, %r6445, %r4761, %p17;
	// begin inline asm
	{mul.f16x2 %r4765,%r4766,%r6452;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4768, {low,high};}

	// end inline asm
	selp.b32 	%r4770, %r6441, %r4768, %p17;
	// begin inline asm
	{mul.f16x2 %r4769,%r4770,%r6449;
}
	// end inline asm
	selp.b32 	%r4773, %r6445, %r4768, %p17;
	// begin inline asm
	{mul.f16x2 %r4772,%r4773,%r6448;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4775, {low,high};}

	// end inline asm
	selp.b32 	%r4777, %r6441, %r4775, %p17;
	// begin inline asm
	{mul.f16x2 %r4776,%r4777,%r6451;
}
	// end inline asm
	selp.b32 	%r4780, %r6445, %r4775, %p17;
	// begin inline asm
	{mul.f16x2 %r4779,%r4780,%r6450;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4782, {low,high};}

	// end inline asm
	selp.b32 	%r4784, %r6441, %r4782, %p17;
	// begin inline asm
	{mul.f16x2 %r4783,%r4784,%r1746;
}
	// end inline asm
	selp.b32 	%r4787, %r6445, %r4782, %p17;
	// begin inline asm
	{mul.f16x2 %r4786,%r4787,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4789, {low,high};}

	// end inline asm
	selp.b32 	%r4791, %r6441, %r4789, %p17;
	// begin inline asm
	{mul.f16x2 %r4790,%r4791,%r1746;
}
	// end inline asm
	selp.b32 	%r4794, %r6445, %r4789, %p17;
	// begin inline asm
	{mul.f16x2 %r4793,%r4794,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4796, {low,high};}

	// end inline asm
	selp.b32 	%r4798, %r6441, %r4796, %p17;
	// begin inline asm
	{mul.f16x2 %r4797,%r4798,%r1746;
}
	// end inline asm
	selp.b32 	%r4801, %r6445, %r4796, %p17;
	// begin inline asm
	{mul.f16x2 %r4800,%r4801,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4803, {low,high};}

	// end inline asm
	selp.b32 	%r4805, %r6441, %r4803, %p17;
	// begin inline asm
	{mul.f16x2 %r4804,%r4805,%r6447;
}
	// end inline asm
	selp.b32 	%r4808, %r6445, %r4803, %p17;
	// begin inline asm
	{mul.f16x2 %r4807,%r4808,%r6446;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4810, {low,high};}

	// end inline asm
	selp.b32 	%r4812, %r6441, %r4810, %p17;
	// begin inline asm
	{mul.f16x2 %r4811,%r4812,%r1746;
}
	// end inline asm
	selp.b32 	%r4815, %r6445, %r4810, %p17;
	// begin inline asm
	{mul.f16x2 %r4814,%r4815,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4817, {low,high};}

	// end inline asm
	selp.b32 	%r4819, %r6441, %r4817, %p17;
	// begin inline asm
	{mul.f16x2 %r4818,%r4819,%r1746;
}
	// end inline asm
	selp.b32 	%r4822, %r6445, %r4817, %p17;
	// begin inline asm
	{mul.f16x2 %r4821,%r4822,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4824, {low,high};}

	// end inline asm
	selp.b32 	%r4826, %r6441, %r4824, %p17;
	// begin inline asm
	{mul.f16x2 %r4825,%r4826,%r1746;
}
	// end inline asm
	selp.b32 	%r4829, %r6445, %r4824, %p17;
	// begin inline asm
	{mul.f16x2 %r4828,%r4829,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4831, {low,high};}

	// end inline asm
	selp.b32 	%r4833, %r6441, %r4831, %p17;
	// begin inline asm
	{mul.f16x2 %r4832,%r4833,%r1746;
}
	// end inline asm
	selp.b32 	%r4836, %r6445, %r4831, %p17;
	// begin inline asm
	{mul.f16x2 %r4835,%r4836,%r1746;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r4838, {low,high};}

	// end inline asm
	selp.b32 	%r4840, %r6441, %r4838, %p17;
	// begin inline asm
	{mul.f16x2 %r4839,%r4840,%r1746;
}
	// end inline asm
	selp.b32 	%r4843, %r6445, %r4838, %p17;
	// begin inline asm
	{mul.f16x2 %r4842,%r4843,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r6517,%r3013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4848,%r3124,%r2970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4851,%r4845,%r4848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4854,%r6353,%r4851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4857,%r4678,%r4854;
}
	// end inline asm
	selp.b32 	%r6487, %r4678, %r4857, %p17;
	// begin inline asm
	{sub.f16x2 %r4860,%r6516,%r3079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4863,%r3158,%r3047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4866,%r4860,%r4863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4869,%r6353,%r4866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4872,%r4681,%r4869;
}
	// end inline asm
	selp.b32 	%r6484, %r4681, %r4872, %p17;
	// begin inline asm
	{sub.f16x2 %r4875,%r6513,%r3246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4878,%r6519,%r3203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4881,%r4875,%r4878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4884,%r6353,%r4881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4887,%r4685,%r4884;
}
	// end inline asm
	selp.b32 	%r6490, %r4685, %r4887, %p17;
	// begin inline asm
	{sub.f16x2 %r4890,%r6512,%r3312;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4893,%r6518,%r3280;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4896,%r4890,%r4893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4899,%r6353,%r4896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4902,%r4688,%r4899;
}
	// end inline asm
	selp.b32 	%r6485, %r4688, %r4902, %p17;
	// begin inline asm
	{sub.f16x2 %r4905,%r6516,%r6517;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4908,%r6440,%r4905;
}
	// end inline asm
	@%p17 bra 	$L__BB0_716;
	bra.uni 	$L__BB0_715;

$L__BB0_716:
	// begin inline asm
	{neg.f16x2 %r6637,%r4692;
}
	// end inline asm
	bra.uni 	$L__BB0_717;

$L__BB0_715:
	// begin inline asm
	{mul.f16x2 %r6637,%r6441,%r4905;
}
	// end inline asm

$L__BB0_717:
	mov.u32 	%r4919, 31;
	mov.u32 	%r4921, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4917,%r6637,%r4919,%r1825,%r4921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4922,%r4908,%r4917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4925,%r850,%r826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4928,%r4925,%r4922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4931,%r6353,%r4928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6489,%r4692,%r4931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4937,%r6518,%r6519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4940,%r6440,%r4937;
}
	// end inline asm
	mov.u32 	%r6638, %r4699;
	@%p17 bra 	$L__BB0_719;

	// begin inline asm
	{mul.f16x2 %r6638,%r6441,%r4937;
}
	// end inline asm

$L__BB0_719:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4949,%r6638,%r4919,%r1825,%r4921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4954,%r4940,%r4949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4957,%r6507,%r826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4960,%r4954,%r4957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4963,%r6353,%r4960;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r4699,%r4963;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4969,%r6509,%r6517;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4972,%r6515,%r6519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4975,%r4969,%r4972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4978,%r6353,%r4975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4981,%r4706,%r4978;
}
	// end inline asm
	selp.b32 	%r6491, %r4706, %r4981, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6517;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4986,%r6517,%r428,%r1825,%r4921;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4986;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4992, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4993,%r4992,%r6516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4996,%r6444,%r4993;
}
	// end inline asm
	@%p17 bra 	$L__BB0_721;
	bra.uni 	$L__BB0_720;

$L__BB0_721:
	// begin inline asm
	{neg.f16x2 %r6639,%r4695;
}
	// end inline asm
	bra.uni 	$L__BB0_722;

$L__BB0_720:
	// begin inline asm
	{mul.f16x2 %r6639,%r6445,%r4993;
}
	// end inline asm

$L__BB0_722:
	mov.u32 	%r5011, 31;
	mov.u32 	%r5035, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5009,%r6639,%r5011,%r1825,%r5035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5014,%r4996,%r5009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5017,%r862,%r838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r5017,%r5014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5023,%r6353,%r5020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6488,%r4695,%r5023;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6519;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5031,%r6519,%r428,%r1825,%r5035;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5031;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5037, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5038,%r5037,%r6518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5041,%r6444,%r5038;
}
	// end inline asm
	mov.u32 	%r6640, %r4702;
	@%p17 bra 	$L__BB0_724;

	// begin inline asm
	{mul.f16x2 %r6640,%r6445,%r5038;
}
	// end inline asm

$L__BB0_724:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5052,%r6640,%r5011,%r1825,%r5035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5057,%r5041,%r5052;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5060,%r6506,%r838;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5063,%r5057,%r5060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5066,%r6353,%r5063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6492,%r4702,%r5066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5072,%r6508,%r6516;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5075,%r6514,%r6518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5078,%r5072,%r5075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5081,%r6353,%r5078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5084,%r4709,%r5081;
}
	// end inline asm
	selp.b32 	%r6486, %r4709, %r5084, %p17;
	// begin inline asm
	{sub.f16x2 %r5087,%r6514,%r6515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5090,%r6440,%r5087;
}
	// end inline asm
	mov.u32 	%r6641, %r4713;
	@%p17 bra 	$L__BB0_726;

	// begin inline asm
	{mul.f16x2 %r6641,%r6441,%r5087;
}
	// end inline asm

$L__BB0_726:
	mov.u32 	%r5101, 31;
	mov.u32 	%r5140, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5099,%r6641,%r5101,%r1825,%r5140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5104,%r5090,%r5099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5107,%r6501,%r850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5110,%r5104,%r5107;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5113,%r6353,%r5110;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6483,%r4713,%r5113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5119,%r6503,%r3584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5122,%r3725,%r6515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5125,%r5119,%r5122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5128,%r6353,%r5125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5131,%r4720,%r5128;
}
	// end inline asm
	selp.b32 	%r6481, %r4720, %r5131, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6515;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5136,%r6515,%r428,%r1825,%r5140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5136;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5142, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5143,%r5142,%r6514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5146,%r6444,%r5143;
}
	// end inline asm
	mov.u32 	%r6642, %r4716;
	@%p17 bra 	$L__BB0_728;

	// begin inline asm
	{mul.f16x2 %r6642,%r6445,%r5143;
}
	// end inline asm

$L__BB0_728:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5157,%r6642,%r5101,%r1825,%r5140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5162,%r5146,%r5157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5165,%r6500,%r862;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5168,%r5162,%r5165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5171,%r6353,%r5168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6482,%r4716,%r5171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5177,%r6502,%r3665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5180,%r3759,%r6514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5183,%r5177,%r5180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5186,%r6353,%r5183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5189,%r4723,%r5186;
}
	// end inline asm
	selp.b32 	%r6480, %r4723, %r5189, %p17;
	// begin inline asm
	{sub.f16x2 %r5192,%r6512,%r6513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5195,%r6440,%r5192;
}
	// end inline asm
	@%p17 bra 	$L__BB0_730;
	bra.uni 	$L__BB0_729;

$L__BB0_730:
	// begin inline asm
	{neg.f16x2 %r6643,%r4727;
}
	// end inline asm
	bra.uni 	$L__BB0_731;

$L__BB0_729:
	// begin inline asm
	{mul.f16x2 %r6643,%r6441,%r5192;
}
	// end inline asm

$L__BB0_731:
	mov.u32 	%r5208, 31;
	mov.u32 	%r5210, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5206,%r6643,%r5208,%r1825,%r5210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5211,%r5195,%r5206;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5214,%r6507,%r880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5217,%r5214,%r5211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5220,%r6353,%r5217;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6476,%r4727,%r5220;
}
	// end inline asm
	mov.u32 	%r6644, %r4734;
	@%p17 bra 	$L__BB0_733;

	mov.u32 	%r6644, %r6244;

$L__BB0_733:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5238,%r6644,%r5208,%r1825,%r5210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5243,%r5229,%r5238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5246,%r1746,%r880;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5249,%r5243,%r5246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5252,%r6353,%r5249;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6479,%r4734,%r5252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5258,%r1746,%r6513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5261,%r6511,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5264,%r5258,%r5261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5267,%r6353,%r5264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5270,%r4741,%r5267;
}
	// end inline asm
	selp.b32 	%r6477, %r4741, %r5270, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6513;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5275,%r6513,%r428,%r1825,%r5210;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5275;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5281, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5282,%r5281,%r6512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5285,%r6444,%r5282;
}
	// end inline asm
	@%p17 bra 	$L__BB0_735;
	bra.uni 	$L__BB0_734;

$L__BB0_735:
	// begin inline asm
	{neg.f16x2 %r6645,%r4730;
}
	// end inline asm
	bra.uni 	$L__BB0_736;

$L__BB0_734:
	// begin inline asm
	{mul.f16x2 %r6645,%r6445,%r5282;
}
	// end inline asm

$L__BB0_736:
	mov.u32 	%r5300, 31;
	mov.u32 	%r5324, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5298,%r6645,%r5300,%r1825,%r5324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5303,%r5285,%r5298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5306,%r6506,%r886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5309,%r5306,%r5303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5312,%r6353,%r5309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6475,%r4730,%r5312;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5320,%r1746,%r428,%r1825,%r5324;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5320;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5326, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5327,%r5326,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5330,%r6444,%r5327;
}
	// end inline asm
	mov.u32 	%r6646, %r4737;
	@%p17 bra 	$L__BB0_738;

	// begin inline asm
	{mul.f16x2 %r6646,%r6445,%r5327;
}
	// end inline asm

$L__BB0_738:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5341,%r6646,%r5300,%r1825,%r5324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5346,%r5330,%r5341;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5349,%r1746,%r886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5352,%r5346,%r5349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5355,%r6353,%r5352;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6478,%r4737,%r5355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5361,%r1746,%r6512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5364,%r6510,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5367,%r5361,%r5364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5370,%r6353,%r5367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5373,%r4744,%r5370;
}
	// end inline asm
	selp.b32 	%r6474, %r4744, %r5373, %p17;
	// begin inline asm
	{sub.f16x2 %r5376,%r6508,%r6509;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5379,%r6440,%r5376;
}
	// end inline asm
	@%p17 bra 	$L__BB0_740;
	bra.uni 	$L__BB0_739;

$L__BB0_740:
	// begin inline asm
	{neg.f16x2 %r6647,%r4748;
}
	// end inline asm
	bra.uni 	$L__BB0_741;

$L__BB0_739:
	// begin inline asm
	{mul.f16x2 %r6647,%r6441,%r5376;
}
	// end inline asm

$L__BB0_741:
	mov.u32 	%r5392, 31;
	mov.u32 	%r5394, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5390,%r6647,%r5392,%r1825,%r5394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5395,%r5379,%r5390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5398,%r6501,%r6507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5401,%r5398,%r5395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5404,%r6353,%r5401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6470,%r4748,%r5404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5410,%r6510,%r6511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5413,%r6440,%r5410;
}
	// end inline asm
	mov.u32 	%r6648, %r4755;
	@%p17 bra 	$L__BB0_743;

	// begin inline asm
	{mul.f16x2 %r6648,%r6441,%r5410;
}
	// end inline asm

$L__BB0_743:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5422,%r6648,%r5392,%r1825,%r5394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5427,%r5413,%r5422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5430,%r6497,%r6507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5433,%r5427,%r5430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5436,%r6353,%r5433;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6473,%r4755,%r5436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5442,%r6499,%r6509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5445,%r6505,%r6511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5448,%r5442,%r5445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5451,%r6353,%r5448;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5454,%r4762,%r5451;
}
	// end inline asm
	selp.b32 	%r6471, %r4762, %r5454, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6509;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5459,%r6509,%r428,%r1825,%r5394;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5459;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5465, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5466,%r5465,%r6508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5469,%r6444,%r5466;
}
	// end inline asm
	@%p17 bra 	$L__BB0_745;
	bra.uni 	$L__BB0_744;

$L__BB0_745:
	// begin inline asm
	{neg.f16x2 %r6649,%r4751;
}
	// end inline asm
	bra.uni 	$L__BB0_746;

$L__BB0_744:
	// begin inline asm
	{mul.f16x2 %r6649,%r6445,%r5466;
}
	// end inline asm

$L__BB0_746:
	mov.u32 	%r5484, 31;
	mov.u32 	%r5508, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5482,%r6649,%r5484,%r1825,%r5508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5487,%r5469,%r5482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5490,%r6500,%r6506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5493,%r5490,%r5487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5496,%r6353,%r5493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6469,%r4751,%r5496;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6511;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5504,%r6511,%r428,%r1825,%r5508;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5504;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5510, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5511,%r5510,%r6510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5514,%r6444,%r5511;
}
	// end inline asm
	mov.u32 	%r6650, %r4758;
	@%p17 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r6650,%r6445,%r5511;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5525,%r6650,%r5484,%r1825,%r5508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5530,%r5514,%r5525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5533,%r6496,%r6506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5536,%r5530,%r5533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5539,%r6353,%r5536;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6472,%r4758,%r5539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5545,%r6498,%r6508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5548,%r6504,%r6510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5551,%r5545,%r5548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5554,%r6353,%r5551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5557,%r4765,%r5554;
}
	// end inline asm
	selp.b32 	%r6468, %r4765, %r5557, %p17;
	// begin inline asm
	{sub.f16x2 %r5560,%r6502,%r6503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5563,%r6440,%r5560;
}
	// end inline asm
	@%p17 bra 	$L__BB0_750;
	bra.uni 	$L__BB0_749;

$L__BB0_750:
	// begin inline asm
	{neg.f16x2 %r6651,%r4769;
}
	// end inline asm
	bra.uni 	$L__BB0_751;

$L__BB0_749:
	// begin inline asm
	{mul.f16x2 %r6651,%r6441,%r5560;
}
	// end inline asm

$L__BB0_751:
	mov.u32 	%r5576, 31;
	mov.u32 	%r5578, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5574,%r6651,%r5576,%r1825,%r5578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5579,%r5563,%r5574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5582,%r935,%r6501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5585,%r5582,%r5579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5588,%r6353,%r5585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r4769,%r5588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5594,%r6504,%r6505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5597,%r6440,%r5594;
}
	// end inline asm
	mov.u32 	%r6652, %r4776;
	@%p17 bra 	$L__BB0_753;

	// begin inline asm
	{mul.f16x2 %r6652,%r6441,%r5594;
}
	// end inline asm

$L__BB0_753:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5606,%r6652,%r5576,%r1825,%r5578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5611,%r5597,%r5606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5614,%r6495,%r6501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5617,%r5611,%r5614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5620,%r6353,%r5617;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r4776,%r5620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5626,%r1746,%r6503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5629,%r1746,%r6505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5632,%r5626,%r5629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5635,%r6353,%r5632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5638,%r4783,%r5635;
}
	// end inline asm
	selp.b32 	%r6465, %r4783, %r5638, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6503;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5643,%r6503,%r428,%r1825,%r5578;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5643;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5649, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5650,%r5649,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5653,%r6444,%r5650;
}
	// end inline asm
	@%p17 bra 	$L__BB0_755;
	bra.uni 	$L__BB0_754;

$L__BB0_755:
	// begin inline asm
	{neg.f16x2 %r6653,%r4772;
}
	// end inline asm
	bra.uni 	$L__BB0_756;

$L__BB0_754:
	// begin inline asm
	{mul.f16x2 %r6653,%r6445,%r5650;
}
	// end inline asm

$L__BB0_756:
	mov.u32 	%r5668, 31;
	mov.u32 	%r5692, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5666,%r6653,%r5668,%r1825,%r5692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5671,%r5653,%r5666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r936,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5677,%r5674,%r5671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5680,%r6353,%r5677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6463,%r4772,%r5680;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6505;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5688,%r6505,%r428,%r1825,%r5692;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5688;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5694, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5695,%r5694,%r6504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5698,%r6444,%r5695;
}
	// end inline asm
	mov.u32 	%r6654, %r4779;
	@%p17 bra 	$L__BB0_758;

	// begin inline asm
	{mul.f16x2 %r6654,%r6445,%r5695;
}
	// end inline asm

$L__BB0_758:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5709,%r6654,%r5668,%r1825,%r5692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5714,%r5698,%r5709;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5717,%r6494,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5720,%r5714,%r5717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5723,%r6353,%r5720;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6466,%r4779,%r5723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5729,%r1746,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5732,%r1746,%r6504;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5735,%r5729,%r5732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5738,%r6353,%r5735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5741,%r4786,%r5738;
}
	// end inline asm
	selp.b32 	%r6462, %r4786, %r5741, %p17;
	mov.u32 	%r6655, %r4790;
	@%p17 bra 	$L__BB0_760;

	mov.u32 	%r6655, %r6244;

$L__BB0_760:
	mov.u32 	%r5758, 31;
	mov.u32 	%r5782, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5756,%r6655,%r5758,%r1825,%r5782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5761,%r5229,%r5756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5764,%r1746,%r935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5767,%r5761,%r5764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5770,%r6353,%r5767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6461,%r4790,%r5770;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5778,%r1746,%r428,%r1825,%r5782;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5778;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5784, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5785,%r5784,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5788,%r6444,%r5785;
}
	// end inline asm
	mov.u32 	%r6656, %r4793;
	@%p17 bra 	$L__BB0_762;

	// begin inline asm
	{mul.f16x2 %r6656,%r6445,%r5785;
}
	// end inline asm

$L__BB0_762:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5799,%r6656,%r5758,%r1825,%r5782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5804,%r5788,%r5799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5807,%r1746,%r936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5810,%r5804,%r5807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5813,%r6353,%r5810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r4793,%r5813;
}
	// end inline asm
	@%p17 bra 	$L__BB0_764;
	bra.uni 	$L__BB0_763;

$L__BB0_764:
	// begin inline asm
	{neg.f16x2 %r6657,%r4797;
}
	// end inline asm
	bra.uni 	$L__BB0_765;

$L__BB0_763:
	mov.u32 	%r6657, %r6244;

$L__BB0_765:
	mov.u32 	%r5835, 31;
	mov.u32 	%r5859, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5833,%r6657,%r5835,%r1825,%r5859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5838,%r5229,%r5833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5841,%r6497,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r5841,%r5838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5847,%r6353,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6459,%r4797,%r5847;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5855,%r1746,%r428,%r1825,%r5859;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5855;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5861, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5861,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r6444,%r5862;
}
	// end inline asm
	@%p17 bra 	$L__BB0_767;
	bra.uni 	$L__BB0_766;

$L__BB0_767:
	// begin inline asm
	{neg.f16x2 %r6658,%r4800;
}
	// end inline asm
	bra.uni 	$L__BB0_768;

$L__BB0_766:
	// begin inline asm
	{mul.f16x2 %r6658,%r6445,%r5862;
}
	// end inline asm

$L__BB0_768:
	mov.u32 	%r5880, 31;
	mov.u32 	%r5882, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5878,%r6658,%r5880,%r1825,%r5882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5883,%r5865,%r5878;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5886,%r6496,%r1746;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5889,%r5886,%r5883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5892,%r6353,%r5889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6458,%r4800,%r5892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5898,%r6498,%r6499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5901,%r6440,%r5898;
}
	// end inline asm
	@%p17 bra 	$L__BB0_770;
	bra.uni 	$L__BB0_769;

$L__BB0_770:
	// begin inline asm
	{neg.f16x2 %r6659,%r4804;
}
	// end inline asm
	bra.uni 	$L__BB0_771;

$L__BB0_769:
	// begin inline asm
	{mul.f16x2 %r6659,%r6441,%r5898;
}
	// end inline asm

$L__BB0_771:
	mov.u32 	%r5914, 31;
	mov.u32 	%r5916, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5912,%r6659,%r5914,%r1825,%r5916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5917,%r5901,%r5912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5920,%r6495,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5923,%r5920,%r5917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5926,%r6353,%r5923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6454,%r4804,%r5926;
}
	// end inline asm
	mov.u32 	%r6660, %r4811;
	@%p17 bra 	$L__BB0_773;

	mov.u32 	%r6660, %r6244;

$L__BB0_773:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5944,%r6660,%r5914,%r1825,%r5916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5949,%r5229,%r5944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r1746,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5955,%r5949,%r5952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5958,%r6353,%r5955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6457,%r4811,%r5958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5964,%r1746,%r6499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r5964,%r5226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5973,%r6353,%r5970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5976,%r4818,%r5973;
}
	// end inline asm
	selp.b32 	%r6455, %r4818, %r5976, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6499;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5981,%r6499,%r428,%r1825,%r5916;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5981;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5987, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5988,%r5987,%r6498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5991,%r6444,%r5988;
}
	// end inline asm
	@%p17 bra 	$L__BB0_775;
	bra.uni 	$L__BB0_774;

$L__BB0_775:
	// begin inline asm
	{neg.f16x2 %r6661,%r4807;
}
	// end inline asm
	bra.uni 	$L__BB0_776;

$L__BB0_774:
	// begin inline asm
	{mul.f16x2 %r6661,%r6445,%r5988;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r6006, 31;
	mov.u32 	%r6030, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6004,%r6661,%r6006,%r1825,%r6030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6009,%r5991,%r6004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6012,%r6494,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6015,%r6012,%r6009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6018,%r6353,%r6015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6453,%r4807,%r6018;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6026,%r1746,%r428,%r1825,%r6030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6026;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6032, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r6032,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6036,%r6444,%r6033;
}
	// end inline asm
	mov.u32 	%r6662, %r4814;
	@%p17 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r6662,%r6445,%r6033;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6047,%r6662,%r6006,%r1825,%r6030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6052,%r6036,%r6047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r1746,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6058,%r6052,%r6055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6061,%r6353,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6456,%r4814,%r6061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r1746,%r6498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r6067,%r5226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6076,%r6353,%r6073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6079,%r4821,%r6076;
}
	// end inline asm
	selp.b32 	%r6452, %r4821, %r6079, %p17;
	@%p17 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r6663,%r4825;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	mov.u32 	%r6663, %r6244;

$L__BB0_781:
	mov.u32 	%r6098, 31;
	mov.u32 	%r6100, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6096,%r6663,%r6098,%r1825,%r6100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6101,%r5229,%r6096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6104,%r1746,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6107,%r6104,%r6101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6110,%r6353,%r6107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6449,%r4825,%r6110;
}
	// end inline asm
	mov.u32 	%r6664, %r4832;
	@%p17 bra 	$L__BB0_783;

	mov.u32 	%r6664, %r6244;

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6128,%r6664,%r6098,%r1825,%r6100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6133,%r5229,%r6128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r1746,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6139,%r6133,%r6136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6142,%r6353,%r6139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6451,%r4832,%r6142;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6150,%r1746,%r428,%r1825,%r6100;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6150;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6156, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6157,%r6156,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6160,%r6444,%r6157;
}
	// end inline asm
	@%p17 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r6665,%r4828;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r6665,%r6445,%r6157;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6175, 31;
	mov.u32 	%r6199, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6173,%r6665,%r6175,%r1825,%r6199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6178,%r6160,%r6173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6181,%r1746,%r6494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r6181,%r6178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6187,%r6353,%r6184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6448,%r4828,%r6187;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6195,%r1746,%r428,%r1825,%r6199;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6195;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6201, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r6201,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6205,%r6444,%r6202;
}
	// end inline asm
	mov.u32 	%r6666, %r4835;
	@%p17 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r6666,%r6445,%r6202;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6216,%r6666,%r6175,%r1825,%r6199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6221,%r6205,%r6216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6224,%r1746,%r6494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r6221,%r6224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6230,%r6353,%r6227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6450,%r4835,%r6230;
}
	// end inline asm
	@%p17 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r6667,%r4839;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	mov.u32 	%r6667, %r6244;

$L__BB0_791:
	mov.u32 	%r6252, 31;
	mov.u32 	%r6276, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6250,%r6667,%r6252,%r1825,%r6276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6255,%r5229,%r6250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6261,%r5226,%r6255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6264,%r6353,%r6261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6447,%r4839,%r6264;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6272,%r1746,%r428,%r1825,%r6276;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6272;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6278, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6278,%r1746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r6444,%r6279;
}
	// end inline asm
	@%p17 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	// begin inline asm
	{neg.f16x2 %r6668,%r4842;
}
	// end inline asm
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	// begin inline asm
	{mul.f16x2 %r6668,%r6445,%r6279;
}
	// end inline asm

$L__BB0_794:
	mov.u32 	%r6297, 31;
	mov.u32 	%r6299, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6295,%r6668,%r6297,%r1825,%r6299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6300,%r6282,%r6295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6306,%r5226,%r6300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6309,%r6353,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6446,%r4842,%r6309;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6317, %r6520, %r1237;
	setp.eq.s32 	%p464, %r6317, 0;
	@%p464 bra 	$L__BB0_796;

	bar.sync 	0;
	bra.uni 	$L__BB0_803;

$L__BB0_796:
	@%p185 bra 	$L__BB0_798;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_798:
	bar.sync 	0;
	@%p186 bra 	$L__BB0_802;

	membar.gl;
	setp.eq.s32 	%p467, %r422, %r423;
	mov.u32 	%r6334, -2147483647;
	sub.s32 	%r6335, %r6334, %r421;
	selp.b32 	%r6323, %r6335, 1, %p467;
	// begin inline asm
	atom.add.release.gpu.u32 %r6322,[%rd29],%r6323;
	// end inline asm

$L__BB0_800:
	ld.volatile.u32 	%r6336, [%rd29];
	xor.b32  	%r6337, %r6336, %r6322;
	setp.gt.s32 	%p468, %r6337, -1;
	@%p468 bra 	$L__BB0_800;

	// begin inline asm
	ld.acquire.gpu.u32 %r6338,[%rd29];
	// end inline asm

$L__BB0_802:
	bar.sync 	0;

$L__BB0_803:
	add.s32 	%r6520, %r6520, 1;
	setp.lt.s32 	%p469, %r6520, %r43;
	@%p469 bra 	$L__BB0_316;

$L__BB0_804:
	ret;

}

