//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<503>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<578>;
	.reg .b32 	%r<6654>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<482>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1239, %r1240}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1241, %r1242}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1243, %r1244}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1245, %r1246}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1247, %r1248}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1249, %r1250}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1251, %r1252}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1253, %r1254}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1255, %r1256}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1257, %r1258}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1259, %r1260}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1261, %r1262}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1263, %r1264}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1265, 32;
	sub.s32 	%r45, %r1265, %r1246;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1266, %r1252, -1;
	mad.lo.s32 	%r1267, %r1266, %r1251, %r1250;
	add.s32 	%r1268, %r1245, %r1244;
	add.s32 	%r1269, %r1268, %r1267;
	add.s32 	%r1270, %r1269, 1;
	mul.lo.s32 	%r1271, %r1239, %r1241;
	shl.b32 	%r47, %r1271, 1;
	shl.b32 	%r1272, %r1271, 2;
	div.s32 	%r1273, %r1270, %r1272;
	add.s32 	%r1274, %r1273, 1;
	mul.lo.s32 	%r1275, %r1274, %r1245;
	mul.lo.s32 	%r1276, %r1240, %r1242;
	shl.b32 	%r48, %r1276, 1;
	div.s32 	%r1277, %r1275, %r48;
	add.s32 	%r1278, %r1277, 1;
	mul.lo.s32 	%r49, %r1278, %r1244;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r6340, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r6340, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1281, %r1241, %r44, %r43;
	mad.lo.s32 	%r1282, %r1281, %r1240, %r42;
	mad.lo.s32 	%r1283, %r1282, %r1239, %r41;
	shl.b32 	%r53, %r1283, 5;
	add.s32 	%r6345, %r53, %r46;
	mul.lo.s32 	%r1284, %r1276, %r1271;
	shl.b32 	%r57, %r1284, 5;
	mov.u32 	%r1285, 8;
	sub.s32 	%r1286, %r1285, %r1253;
	add.s32 	%r1287, %r1286, %r1254;
	sub.s32 	%r1288, %r1285, %r1255;
	add.s32 	%r1289, %r1288, %r1256;
	sub.s32 	%r58, %r1258, %r1257;
	mul.lo.s32 	%r1290, %r1252, %r58;
	mul.lo.s32 	%r1291, %r1290, %r1289;
	mul.lo.s32 	%r1292, %r1291, %r1287;
	mul.lo.s32 	%r59, %r1292, 3;
	setp.ge.s32 	%p29, %r6345, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1293, %r1256, 8;
	sub.s32 	%r1294, %r1293, %r1255;
	mul.lo.s32 	%r1295, %r1252, %r1294;
	add.s32 	%r1296, %r1254, 8;
	sub.s32 	%r1297, %r1296, %r1253;
	mul.lo.s32 	%r1298, %r1295, %r1297;
	mul.lo.s32 	%r1299, %r1298, %r58;
	not.b32 	%r1300, %r46;
	mad.lo.s32 	%r1301, %r1299, 3, %r1300;
	sub.s32 	%r1302, %r1301, %r53;
	mul.lo.s32 	%r1303, %r1276, %r1239;
	mul.lo.s32 	%r1304, %r1303, %r1241;
	shl.b32 	%r1305, %r1304, 5;
	div.u32 	%r60, %r1302, %r1305;
	add.s32 	%r1306, %r60, 1;
	and.b32  	%r6342, %r1306, 3;
	setp.eq.s32 	%p30, %r6342, 0;
	mov.u32 	%r6343, %r6345;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r6343, %r6345;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6343, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1307, 0;
	st.global.u32 	[%rd31], %r1307;
	add.s32 	%r6343, %r6343, %r57;
	add.s32 	%r6342, %r6342, -1;
	setp.ne.s32 	%p31, %r6342, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6343, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1308, 0;
	st.global.u32 	[%rd33], %r1308;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1308;
	add.s32 	%r1309, %r6343, %r57;
	add.s32 	%r1310, %r1309, %r57;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1308;
	add.s32 	%r1311, %r1310, %r57;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1308;
	add.s32 	%r6343, %r1311, %r57;
	setp.lt.s32 	%p33, %r6343, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1312, %r1245, %r47;
	div.s32 	%r1313, %r1312, %r48;
	mul.lo.s32 	%r1314, %r1313, %r1244;
	sub.s32 	%r1315, %r1314, %r47;
	sub.s32 	%r1316, %r1244, %r48;
	mul.lo.s32 	%r1317, %r1316, %r1241;
	mul.lo.s32 	%r1318, %r1239, 384;
	add.s32 	%r1319, %r1318, %r1318;
	add.s32 	%r1320, %r1319, 128;
	mul.lo.s32 	%r1322, %r1276, 768;
	mul.lo.s32 	%r1323, %r1317, %r1320;
	mad.lo.s32 	%r69, %r1322, %r1315, %r1323;
	bra.uni 	$L__BB0_11;

$L__BB0_821:
	mov.f32 	%f565, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f565;
  cvt.rn.f16.f32 high, %f565;
  mov.b32 %r6334, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd477, %r6345, 4;
	add.s64 	%rd478, %rd3, %rd477;
	st.global.u32 	[%rd478], %r6334;
	add.s32 	%r6345, %r6345, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r6345, %r69;
	@%p34 bra 	$L__BB0_821;

	ld.param.u64 	%rd39, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6381, %r1239, %r43, %r41;
	mul.lo.s32 	%r77, %r1240, %r44;
	add.s32 	%r78, %r77, %r42;
	setp.ge.s32 	%p35, %r6381, %r1244;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1324, 31;
	sub.s32 	%r1325, %r1324, %r46;
	selp.b32 	%r1326, %r46, %r1325, %p36;
	shl.b32 	%r1327, %r1326, 2;
	mov.u32 	%r1328, 2;
	sub.s32 	%r79, %r1327, %r1247;
	shl.b32 	%r1329, %r1246, 2;
	mov.u32 	%r1330, 128;
	sub.s32 	%r80, %r1330, %r1329;
	sub.s32 	%r1331, %r1328, %r1247;
	add.s32 	%r81, %r1331, %r1327;
	sub.s32 	%r82, %r1254, %r1253;
	sub.s32 	%r83, %r1256, %r1255;
	add.s32 	%r84, %r1254, -1;
	add.s32 	%r85, %r1256, -1;
	add.s32 	%r86, %r1258, -1;
	mul.lo.s32 	%r1332, %r1245, %r1244;
	shl.b32 	%r87, %r1332, 6;
	add.s32 	%r88, %r1244, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r89, %r79, 1;
	add.s32 	%r90, %r81, 1;
	shl.b32 	%r91, %r46, 1;
	or.b32  	%r92, %r91, 1;
	shr.u32 	%r1333, %r92, 31;
	add.s32 	%r1334, %r92, %r1333;
	shr.s32 	%r94, %r1334, 1;
	and.b32  	%r1335, %r1334, -2;
	sub.s32 	%r1336, %r92, %r1335;
	add.s32 	%r93, %r1336, %r87;
	rem.s32 	%r1392, %r89, %r80;
	add.s32 	%r1393, %r1392, %r80;
	rem.s32 	%r1394, %r1393, %r80;
	rem.s32 	%r1395, %r90, %r80;
	add.s32 	%r1396, %r1395, %r80;
	rem.s32 	%r1397, %r1396, %r80;
	mov.u32 	%r6346, %r6381;

$L__BB0_14:
	setp.ge.s32 	%p37, %r78, %r1245;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r6346, %r1259;
	setp.lt.s32 	%p39, %r6346, %r1260;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r6346, %r1254;
	setp.ge.s32 	%p41, %r6346, %r1253;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1337, %r6346, %r84, %p40;
	setp.lt.s32 	%p42, %r6346, %r1253;
	selp.b32 	%r1338, %r1253, %r1337, %p42;
	sub.s32 	%r1339, %r1338, %r1253;
	add.s32 	%r96, %r88, %r6346;
	rem.s32 	%r1340, %r79, %r80;
	add.s32 	%r1341, %r1340, %r80;
	rem.s32 	%r97, %r1341, %r80;
	rem.s32 	%r1342, %r81, %r80;
	add.s32 	%r1343, %r1342, %r80;
	rem.s32 	%r98, %r1343, %r80;
	setp.lt.s32 	%p43, %r97, %r1258;
	sub.s32 	%r99, %r97, %r1257;
	setp.lt.s32 	%p44, %r97, %r1257;
	selp.b32 	%r1344, %r97, %r86, %p43;
	selp.b32 	%r1345, %r1257, %r1344, %p44;
	sub.s32 	%r100, %r1345, %r1257;
	setp.lt.s32 	%p45, %r98, %r1258;
	sub.s32 	%r101, %r98, %r1257;
	setp.lt.s32 	%p46, %r98, %r1257;
	selp.b32 	%r1346, %r98, %r86, %p45;
	selp.b32 	%r1347, %r1257, %r1346, %p46;
	sub.s32 	%r102, %r1347, %r1257;
	sub.s32 	%r1348, %r6346, %r1253;
	mul.lo.s32 	%r103, %r1348, %r83;
	mul.lo.s32 	%r104, %r1339, %r83;
	add.s32 	%r1349, %r1348, %r82;
	mul.lo.s32 	%r105, %r1349, %r83;
	add.s32 	%r1350, %r1339, %r82;
	mul.lo.s32 	%r106, %r1350, %r83;
	add.s32 	%r1351, %r1349, %r82;
	mul.lo.s32 	%r107, %r1351, %r83;
	add.s32 	%r1352, %r1350, %r82;
	mul.lo.s32 	%r108, %r1352, %r83;
	mov.u32 	%r6347, %r78;

$L__BB0_16:
	setp.ge.s32 	%p47, %r6347, %r1261;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r6347, %r1262;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r6347, %r1255;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r6347, %r1256;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r110, %r6347, %r1255;
	selp.b32 	%r1353, %r6347, %r85, %p52;
	setp.lt.s32 	%p53, %r6347, %r1255;
	selp.b32 	%r1354, %r1255, %r1353, %p53;
	sub.s32 	%r111, %r1354, %r1255;
	mul.lo.s32 	%r112, %r6347, %r1244;
	add.s32 	%r113, %r112, %r6346;
	shl.b32 	%r114, %r113, 6;
	setp.ge.s32 	%p54, %r97, %r1263;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r97, %r1264;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r97, %r1257;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r98, %r1257;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f566, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1357, %r110, %r103;
	mad.lo.s32 	%r1358, %r1357, %r58, %r99;
	mul.wide.s32 	%rd43, %r1358, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f566, [%rd44];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1355, %r111, %r104;
	mad.lo.s32 	%r1356, %r1355, %r58, %r100;
	mul.wide.s32 	%rd41, %r1356, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f566, [%rd42];

$L__BB0_20:
	setp.lt.s32 	%p67, %r98, %r1264;
	setp.ge.s32 	%p68, %r98, %r1263;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f567, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1361, %r110, %r103;
	mad.lo.s32 	%r1362, %r1361, %r58, %r101;
	mul.wide.s32 	%rd47, %r1362, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f567, [%rd48];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1359, %r111, %r104;
	mad.lo.s32 	%r1360, %r1359, %r58, %r102;
	mul.wide.s32 	%rd45, %r1360, 4;
	add.s64 	%rd46, %rd5, %rd45;
	ld.global.f32 	%f567, [%rd46];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f566;
  cvt.rn.f16.f32 high, %f567;
  mov.b32 %r1363, {low,high};}

	// end inline asm
	shl.b32 	%r115, %r113, 5;
	add.s32 	%r1364, %r115, %r46;
	shl.b32 	%r1365, %r1364, 2;
	add.s32 	%r1366, %r87, %r1365;
	mul.wide.s32 	%rd49, %r1366, 4;
	add.s64 	%rd50, %rd6, %rd49;
	st.global.u32 	[%rd50], %r1363;
	mov.f32 	%f568, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1369, %r110, %r105;
	mad.lo.s32 	%r1370, %r1369, %r58, %r99;
	mul.wide.s32 	%rd53, %r1370, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f568, [%rd54];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1367, %r111, %r106;
	mad.lo.s32 	%r1368, %r1367, %r58, %r100;
	mul.wide.s32 	%rd51, %r1368, 4;
	add.s64 	%rd52, %rd5, %rd51;
	ld.global.f32 	%f568, [%rd52];

$L__BB0_28:
	mov.f32 	%f569, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1373, %r110, %r105;
	mad.lo.s32 	%r1374, %r1373, %r58, %r101;
	mul.wide.s32 	%rd57, %r1374, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f569, [%rd58];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1371, %r111, %r106;
	mad.lo.s32 	%r1372, %r1371, %r58, %r102;
	mul.wide.s32 	%rd55, %r1372, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f569, [%rd56];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f568;
  cvt.rn.f16.f32 high, %f569;
  mov.b32 %r1375, {low,high};}

	// end inline asm
	add.s32 	%r1376, %r91, %r114;
	mul.wide.s32 	%rd59, %r1376, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r1375;
	mov.f32 	%f570, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1379, %r110, %r107;
	mad.lo.s32 	%r1380, %r1379, %r58, %r99;
	mul.wide.s32 	%rd63, %r1380, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f570, [%rd64];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1377, %r111, %r108;
	mad.lo.s32 	%r1378, %r1377, %r58, %r100;
	mul.wide.s32 	%rd61, %r1378, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f570, [%rd62];

$L__BB0_36:
	mov.f32 	%f571, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1383, %r110, %r107;
	mad.lo.s32 	%r1384, %r1383, %r58, %r101;
	mul.wide.s32 	%rd67, %r1384, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f571, [%rd68];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1381, %r111, %r108;
	mad.lo.s32 	%r1382, %r1381, %r58, %r102;
	mul.wide.s32 	%rd65, %r1382, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f571, [%rd66];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f570;
  cvt.rn.f16.f32 high, %f571;
  mov.b32 %r1385, {low,high};}

	// end inline asm
	rem.s32 	%r1386, %r96, %r1244;
	add.s32 	%r1387, %r1386, %r112;
	shl.b32 	%r116, %r1387, 5;
	add.s32 	%r1388, %r116, %r46;
	shl.b32 	%r1389, %r1388, 2;
	add.s32 	%r1390, %r87, %r1389;
	add.s32 	%r1391, %r1390, 2;
	mul.wide.s32 	%rd69, %r1391, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r1385;
	setp.ge.s32 	%p76, %r1394, %r1263;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1394, %r1264;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1394, %r1257;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1394, %r1258;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1397, %r1263;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1397, %r1264;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r117, %r1394, %r1257;
	setp.lt.s32 	%p86, %r1394, %r1257;
	selp.b32 	%r1398, %r1394, %r86, %p82;
	selp.b32 	%r1399, %r1257, %r1398, %p86;
	sub.s32 	%r118, %r1399, %r1257;
	setp.ge.s32 	%p87, %r1397, %r1257;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1397, %r1258;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r119, %r1397, %r1257;
	setp.lt.s32 	%p90, %r1397, %r1257;
	selp.b32 	%r1400, %r1397, %r86, %p89;
	selp.b32 	%r1401, %r1257, %r1400, %p90;
	sub.s32 	%r120, %r1401, %r1257;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f572, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1404, %r110, %r103;
	mad.lo.s32 	%r1405, %r1404, %r58, %r117;
	mul.wide.s32 	%rd73, %r1405, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f572, [%rd74];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1402, %r111, %r104;
	mad.lo.s32 	%r1403, %r1402, %r58, %r118;
	mul.wide.s32 	%rd71, %r1403, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f572, [%rd72];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f573, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1408, %r110, %r103;
	mad.lo.s32 	%r1409, %r1408, %r58, %r119;
	mul.wide.s32 	%rd77, %r1409, 4;
	add.s64 	%rd78, %rd5, %rd77;
	ld.global.f32 	%f573, [%rd78];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1406, %r111, %r104;
	mad.lo.s32 	%r1407, %r1406, %r58, %r120;
	mul.wide.s32 	%rd75, %r1407, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f573, [%rd76];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f572;
  cvt.rn.f16.f32 high, %f573;
  mov.b32 %r1410, {low,high};}

	// end inline asm
	add.s32 	%r1411, %r115, %r94;
	shl.b32 	%r1412, %r1411, 2;
	add.s32 	%r1413, %r93, %r1412;
	mul.wide.s32 	%rd79, %r1413, 4;
	add.s64 	%rd80, %rd6, %rd79;
	st.global.u32 	[%rd80], %r1410;
	mov.f32 	%f574, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1416, %r110, %r105;
	mad.lo.s32 	%r1417, %r1416, %r58, %r117;
	mul.wide.s32 	%rd83, %r1417, 4;
	add.s64 	%rd84, %rd5, %rd83;
	ld.global.f32 	%f574, [%rd84];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1414, %r111, %r106;
	mad.lo.s32 	%r1415, %r1414, %r58, %r118;
	mul.wide.s32 	%rd81, %r1415, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f574, [%rd82];

$L__BB0_52:
	mov.f32 	%f575, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1420, %r110, %r105;
	mad.lo.s32 	%r1421, %r1420, %r58, %r119;
	mul.wide.s32 	%rd87, %r1421, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f575, [%rd88];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1418, %r111, %r106;
	mad.lo.s32 	%r1419, %r1418, %r58, %r120;
	mul.wide.s32 	%rd85, %r1419, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f575, [%rd86];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f574;
  cvt.rn.f16.f32 high, %f575;
  mov.b32 %r1422, {low,high};}

	// end inline asm
	add.s32 	%r1423, %r92, %r114;
	mul.wide.s32 	%rd89, %r1423, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r1422;
	mov.f32 	%f576, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1426, %r110, %r107;
	mad.lo.s32 	%r1427, %r1426, %r58, %r117;
	mul.wide.s32 	%rd93, %r1427, 4;
	add.s64 	%rd94, %rd5, %rd93;
	ld.global.f32 	%f576, [%rd94];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1424, %r111, %r108;
	mad.lo.s32 	%r1425, %r1424, %r58, %r118;
	mul.wide.s32 	%rd91, %r1425, 4;
	add.s64 	%rd92, %rd5, %rd91;
	ld.global.f32 	%f576, [%rd92];

$L__BB0_60:
	mov.f32 	%f577, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1430, %r110, %r107;
	mad.lo.s32 	%r1431, %r1430, %r58, %r119;
	mul.wide.s32 	%rd97, %r1431, 4;
	add.s64 	%rd98, %rd5, %rd97;
	ld.global.f32 	%f577, [%rd98];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1428, %r111, %r108;
	mad.lo.s32 	%r1429, %r1428, %r58, %r120;
	mul.wide.s32 	%rd95, %r1429, 4;
	add.s64 	%rd96, %rd5, %rd95;
	ld.global.f32 	%f577, [%rd96];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f576;
  cvt.rn.f16.f32 high, %f577;
  mov.b32 %r1432, {low,high};}

	// end inline asm
	add.s32 	%r1433, %r116, %r94;
	shl.b32 	%r1434, %r1433, 2;
	add.s32 	%r1435, %r93, %r1434;
	add.s32 	%r1436, %r1435, 2;
	mul.wide.s32 	%rd99, %r1436, 4;
	add.s64 	%rd100, %rd6, %rd99;
	st.global.u32 	[%rd100], %r1432;
	add.s32 	%r6347, %r6347, %r1276;
	setp.lt.s32 	%p99, %r6347, %r1245;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r6346, %r6346, %r1271;
	setp.lt.s32 	%p100, %r6346, %r1244;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd101, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd101;
	ld.param.u64 	%rd102, [%rd1+120];
	cvta.to.global.u64 	%rd8, %rd102;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r123, %r78, 1;
	mov.u64 	%rd103, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6348, %r6381;

$L__BB0_68:
	setp.ge.s32 	%p102, %r123, %r1245;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r6349, %r123;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1438, %r6349, 31;
	add.s32 	%r1439, %r6349, %r1438;
	shr.s32 	%r1440, %r1439, 1;
	mad.lo.s32 	%r1441, %r1440, %r1244, %r6348;
	shl.b32 	%r127, %r1441, 5;
	add.s32 	%r128, %r6349, -2;
	mul.lo.s32 	%r129, %r128, %r1244;
	add.s32 	%r1442, %r1245, %r128;
	mul.lo.s32 	%r130, %r1442, %r1244;
	add.s32 	%r1443, %r1442, %r1245;
	mul.lo.s32 	%r131, %r1443, %r1244;
	add.s32 	%r132, %r129, %r1244;
	add.s32 	%r133, %r6349, -1;
	add.s32 	%r1444, %r1245, %r133;
	mul.lo.s32 	%r134, %r1444, %r1244;
	add.s32 	%r1445, %r1444, %r1245;
	mul.lo.s32 	%r135, %r1445, %r1244;
	add.s32 	%r1446, %r1245, %r6349;
	mul.lo.s32 	%r136, %r1446, %r1244;
	add.s32 	%r1447, %r1446, %r1245;
	mul.lo.s32 	%r137, %r1447, %r1244;
	mul.lo.s32 	%r138, %r6349, %r1244;
	add.s32 	%r139, %r138, %r1244;
	add.s32 	%r140, %r6349, 1;
	add.s32 	%r1448, %r1245, %r140;
	mul.lo.s32 	%r141, %r1448, %r1244;
	add.s32 	%r1449, %r1448, %r1245;
	mul.lo.s32 	%r142, %r1449, %r1244;
	add.s32 	%r143, %r139, %r1244;
	add.s32 	%r144, %r6349, 2;
	add.s32 	%r1450, %r1245, %r144;
	mul.lo.s32 	%r145, %r1450, %r1244;
	add.s32 	%r1451, %r1450, %r1245;
	mul.lo.s32 	%r146, %r1451, %r1244;
	mov.u32 	%r6352, 0;
	mov.u64 	%rd479, %rd103;

$L__BB0_72:
	ld.global.nc.u32 	%r1452, [%rd479];
	cvt.rn.f64.s32 	%fd1, %r1452;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r148, %r1452, %r6348;
	setp.lt.s32 	%p104, %r148, %r1244;
	or.b32  	%r1453, %r128, %r148;
	setp.gt.s32 	%p105, %r1453, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r128, %r1245;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1456, %r129, %r148;
	mul.wide.s32 	%rd104, %r1456, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f93, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6351, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6351, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1457, %r6352, %r127;
	mul.wide.s32 	%rd106, %r1457, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6351;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1460, %r130, %r148;
	mul.wide.s32 	%rd108, %r1460, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f98, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r6353, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r6353, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1461, %r6352, %r127;
	mul.wide.s32 	%rd110, %r1461, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6353;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1464, %r131, %r148;
	mul.wide.s32 	%rd112, %r1464, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f102, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6355, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6355, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1465, %r6352, %r127;
	mul.wide.s32 	%rd114, %r1465, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6355;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_87:
	or.b32  	%r1466, %r133, %r148;
	setp.gt.s32 	%p111, %r1466, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r6349, %r1245;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1469, %r132, %r148;
	mul.wide.s32 	%rd116, %r1469, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f105, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6357, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6357, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1470, %r6352, %r127;
	mul.wide.s32 	%rd118, %r1470, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6357;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1473, %r134, %r148;
	mul.wide.s32 	%rd120, %r1473, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f108, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6359, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6359, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1474, %r6352, %r127;
	mul.wide.s32 	%rd122, %r1474, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6359;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1477, %r135, %r148;
	mul.wide.s32 	%rd124, %r1477, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f111, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6361, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6361, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1478, %r6352, %r127;
	mul.wide.s32 	%rd126, %r1478, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6361;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_102:
	or.b32  	%r1479, %r6349, %r148;
	setp.gt.s32 	%p118, %r1479, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r6349, %r1245;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1482, %r138, %r148;
	mul.wide.s32 	%rd128, %r1482, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f114, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6363, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6363, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1483, %r6352, %r127;
	mul.wide.s32 	%rd130, %r1483, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6363;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1486, %r136, %r148;
	mul.wide.s32 	%rd132, %r1486, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f118, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r6365, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r6365, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1487, %r6352, %r127;
	mul.wide.s32 	%rd134, %r1487, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6365;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1490, %r137, %r148;
	mul.wide.s32 	%rd136, %r1490, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f121, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r6367, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6367, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1491, %r6352, %r127;
	mul.wide.s32 	%rd138, %r1491, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6367;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_117:
	or.b32  	%r1492, %r140, %r148;
	setp.gt.s32 	%p125, %r1492, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r140, %r1245;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1495, %r139, %r148;
	mul.wide.s32 	%rd140, %r1495, 4;
	add.s64 	%rd141, %rd7, %rd140;
	ld.global.f32 	%f124, [%rd141];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r6369, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r6369, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1496, %r6352, %r127;
	mul.wide.s32 	%rd142, %r1496, 4;
	add.s64 	%rd143, %rd8, %rd142;
	st.global.u32 	[%rd143], %r6369;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1499, %r141, %r148;
	mul.wide.s32 	%rd144, %r1499, 4;
	add.s64 	%rd145, %rd7, %rd144;
	ld.global.f32 	%f127, [%rd145];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r6371, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6371, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1500, %r6352, %r127;
	mul.wide.s32 	%rd146, %r1500, 4;
	add.s64 	%rd147, %rd8, %rd146;
	st.global.u32 	[%rd147], %r6371;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1503, %r142, %r148;
	mul.wide.s32 	%rd148, %r1503, 4;
	add.s64 	%rd149, %rd7, %rd148;
	ld.global.f32 	%f130, [%rd149];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r6373, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r6373, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1504, %r6352, %r127;
	mul.wide.s32 	%rd150, %r1504, 4;
	add.s64 	%rd151, %rd8, %rd150;
	st.global.u32 	[%rd151], %r6373;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_132:
	or.b32  	%r1505, %r144, %r148;
	setp.gt.s32 	%p132, %r1505, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r144, %r1245;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1508, %r143, %r148;
	mul.wide.s32 	%rd152, %r1508, 4;
	add.s64 	%rd153, %rd7, %rd152;
	ld.global.f32 	%f133, [%rd153];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r6375, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6375, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1509, %r6352, %r127;
	mul.wide.s32 	%rd154, %r1509, 4;
	add.s64 	%rd155, %rd8, %rd154;
	st.global.u32 	[%rd155], %r6375;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1512, %r145, %r148;
	mul.wide.s32 	%rd156, %r1512, 4;
	add.s64 	%rd157, %rd7, %rd156;
	ld.global.f32 	%f136, [%rd157];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r6377, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6377, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1513, %r6352, %r127;
	mul.wide.s32 	%rd158, %r1513, 4;
	add.s64 	%rd159, %rd8, %rd158;
	st.global.u32 	[%rd159], %r6377;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1516, %r146, %r148;
	mul.wide.s32 	%rd160, %r1516, 4;
	add.s64 	%rd161, %rd7, %rd160;
	ld.global.f32 	%f139, [%rd161];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r6379, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r6379, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1517, %r6352, %r127;
	mul.wide.s32 	%rd162, %r1517, 4;
	add.s64 	%rd163, %rd8, %rd162;
	st.global.u32 	[%rd163], %r6379;
	add.s32 	%r6352, %r6352, 1;

$L__BB0_147:
	add.s64 	%rd479, %rd479, 4;
	mov.u64 	%rd164, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd165, %rd164, 24;
	setp.ne.s64 	%p139, %rd479, %rd165;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r6349, %r6349, %r48;
	setp.lt.s32 	%p140, %r6349, %r1245;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r6348, %r6348, %r1271;
	setp.lt.s32 	%p141, %r6348, %r1244;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1248, 1;
	ld.param.u64 	%rd166, [%rd1+160];
	cvta.to.global.u64 	%rd11, %rd166;
	ld.param.u64 	%rd167, [%rd1+128];
	cvta.to.global.u64 	%rd12, %rd167;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r252, %r78, 1;
	shr.u32 	%r1565, %r1249, 31;
	add.s32 	%r1566, %r1249, %r1565;
	shr.u32 	%r1567, %r1566, 1;
	and.b32  	%r253, %r1567, 1;
	mov.u64 	%rd187, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r252, %r1245;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r6387, %r252;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1569, %r6387, 31;
	add.s32 	%r1570, %r6387, %r1569;
	shr.s32 	%r1571, %r1570, 1;
	mad.lo.s32 	%r1572, %r1571, %r1244, %r6381;
	shl.b32 	%r257, %r1572, 5;
	add.s32 	%r258, %r6387, -2;
	mul.lo.s32 	%r259, %r258, %r1244;
	add.s32 	%r1573, %r1245, %r258;
	mul.lo.s32 	%r260, %r1573, %r1244;
	add.s32 	%r261, %r259, %r1244;
	add.s32 	%r262, %r6387, -1;
	add.s32 	%r1574, %r1245, %r262;
	mul.lo.s32 	%r263, %r1574, %r1244;
	add.s32 	%r1575, %r1245, %r6387;
	mul.lo.s32 	%r264, %r1575, %r1244;
	mul.lo.s32 	%r265, %r6387, %r1244;
	add.s32 	%r266, %r265, %r1244;
	add.s32 	%r267, %r6387, 1;
	add.s32 	%r1576, %r1245, %r267;
	mul.lo.s32 	%r268, %r1576, %r1244;
	add.s32 	%r269, %r266, %r1244;
	add.s32 	%r270, %r6387, 2;
	add.s32 	%r1577, %r1245, %r270;
	mul.lo.s32 	%r271, %r1577, %r1244;
	mov.u32 	%r6391, 0;
	mov.u64 	%rd480, 24;
	mov.u64 	%rd481, %rd187;

$L__BB0_174:
	ld.global.nc.u32 	%r1578, [%rd481];
	cvt.rn.f64.s32 	%fd2, %r1578;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r273, %r1578, %r6381;
	setp.lt.s32 	%p154, %r273, %r1244;
	or.b32  	%r1579, %r258, %r273;
	setp.gt.s32 	%p155, %r1579, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r258, %r1245;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r253, 0;
	add.s32 	%r1581, %r259, %r273;
	shl.b32 	%r1582, %r1581, 1;
	mul.wide.s32 	%rd188, %r1582, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f47, [%rd189];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r6389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r6389, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r6389, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r278, %r6391, %r257;
	mul.wide.s32 	%rd190, %r278, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6389;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r253, 0;
	add.s32 	%r1586, %r260, %r273;
	shl.b32 	%r1587, %r1586, 1;
	mul.wide.s32 	%rd192, %r1587, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f48, [%rd193];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r6390, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r6390, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6390, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1590, %r278, 1;
	mul.wide.s32 	%rd194, %r1590, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6390;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r253, 0;
	add.s32 	%r1592, %r259, %r273;
	shl.b32 	%r1593, %r1592, 1;
	or.b32  	%r1594, %r1593, 1;
	mul.wide.s32 	%rd196, %r1594, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f51, [%rd197];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r6392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r6392, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r6392, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r289, %r6391, %r257;
	mul.wide.s32 	%rd198, %r289, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6392;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r253, 0;
	add.s32 	%r1598, %r260, %r273;
	shl.b32 	%r1599, %r1598, 1;
	or.b32  	%r1600, %r1599, 1;
	mul.wide.s32 	%rd200, %r1600, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f52, [%rd201];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r6393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r6393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6393, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1603, %r289, 1;
	mul.wide.s32 	%rd202, %r1603, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6393;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_198:
	or.b32  	%r1604, %r262, %r273;
	setp.gt.s32 	%p164, %r1604, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r6387, %r1245;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r253, 0;
	add.s32 	%r1606, %r261, %r273;
	shl.b32 	%r1607, %r1606, 1;
	mul.wide.s32 	%rd204, %r1607, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f54, [%rd205];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r6395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r6395, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6395, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r300, %r6391, %r257;
	mul.wide.s32 	%rd206, %r300, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6395;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r253, 0;
	add.s32 	%r1611, %r263, %r273;
	shl.b32 	%r1612, %r1611, 1;
	mul.wide.s32 	%rd208, %r1612, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f55, [%rd209];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r6396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r6396, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r6396, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1615, %r300, 1;
	mul.wide.s32 	%rd210, %r1615, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6396;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r253, 0;
	add.s32 	%r1617, %r261, %r273;
	shl.b32 	%r1618, %r1617, 1;
	or.b32  	%r1619, %r1618, 1;
	mul.wide.s32 	%rd212, %r1619, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f57, [%rd213];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6398, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r6398, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r311, %r6391, %r257;
	mul.wide.s32 	%rd214, %r311, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6398;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r253, 0;
	add.s32 	%r1623, %r263, %r273;
	shl.b32 	%r1624, %r1623, 1;
	or.b32  	%r1625, %r1624, 1;
	mul.wide.s32 	%rd216, %r1625, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f58, [%rd217];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6399, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6399, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1628, %r311, 1;
	mul.wide.s32 	%rd218, %r1628, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6399;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_222:
	or.b32  	%r1629, %r6387, %r273;
	setp.gt.s32 	%p174, %r1629, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r6387, %r1245;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r253, 0;
	add.s32 	%r1631, %r265, %r273;
	shl.b32 	%r1632, %r1631, 1;
	mul.wide.s32 	%rd220, %r1632, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f60, [%rd221];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6401, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r322, %r6391, %r257;
	mul.wide.s32 	%rd222, %r322, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6401;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r253, 0;
	add.s32 	%r1636, %r264, %r273;
	shl.b32 	%r1637, %r1636, 1;
	mul.wide.s32 	%rd224, %r1637, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f61, [%rd225];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r6402, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1640, %r322, 1;
	mul.wide.s32 	%rd226, %r1640, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6402;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r253, 0;
	add.s32 	%r1642, %r265, %r273;
	shl.b32 	%r1643, %r1642, 1;
	or.b32  	%r1644, %r1643, 1;
	mul.wide.s32 	%rd228, %r1644, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f62, [%rd229];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r6404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r6404, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6404, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r333, %r6391, %r257;
	mul.wide.s32 	%rd230, %r333, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6404;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r253, 0;
	add.s32 	%r1648, %r264, %r273;
	shl.b32 	%r1649, %r1648, 1;
	or.b32  	%r1650, %r1649, 1;
	mul.wide.s32 	%rd232, %r1650, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f63, [%rd233];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r6405, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r6405, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1653, %r333, 1;
	mul.wide.s32 	%rd234, %r1653, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6405;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_246:
	or.b32  	%r1654, %r267, %r273;
	setp.gt.s32 	%p184, %r1654, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r267, %r1245;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r253, 0;
	add.s32 	%r1656, %r266, %r273;
	shl.b32 	%r1657, %r1656, 1;
	mul.wide.s32 	%rd236, %r1657, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f64, [%rd237];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r6407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r6407, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r6407, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r344, %r6391, %r257;
	mul.wide.s32 	%rd238, %r344, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6407;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r253, 0;
	add.s32 	%r1661, %r268, %r273;
	shl.b32 	%r1662, %r1661, 1;
	mul.wide.s32 	%rd240, %r1662, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f65, [%rd241];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r6408, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r6408, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1665, %r344, 1;
	mul.wide.s32 	%rd242, %r1665, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6408;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r253, 0;
	add.s32 	%r1667, %r266, %r273;
	shl.b32 	%r1668, %r1667, 1;
	or.b32  	%r1669, %r1668, 1;
	mul.wide.s32 	%rd244, %r1669, 4;
	add.s64 	%rd245, %rd11, %rd244;
	ld.global.f32 	%f66, [%rd245];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r6410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r6410, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r6410, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r355, %r6391, %r257;
	mul.wide.s32 	%rd246, %r355, 4;
	add.s64 	%rd247, %rd12, %rd246;
	st.global.u32 	[%rd247], %r6410;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r253, 0;
	add.s32 	%r1673, %r268, %r273;
	shl.b32 	%r1674, %r1673, 1;
	or.b32  	%r1675, %r1674, 1;
	mul.wide.s32 	%rd248, %r1675, 4;
	add.s64 	%rd249, %rd11, %rd248;
	ld.global.f32 	%f67, [%rd249];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r6411, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6411, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r1678, %r355, 1;
	mul.wide.s32 	%rd250, %r1678, 4;
	add.s64 	%rd251, %rd12, %rd250;
	st.global.u32 	[%rd251], %r6411;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_270:
	or.b32  	%r1679, %r270, %r273;
	setp.gt.s32 	%p194, %r1679, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r270, %r1245;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r253, 0;
	add.s32 	%r1681, %r269, %r273;
	shl.b32 	%r1682, %r1681, 1;
	mul.wide.s32 	%rd252, %r1682, 4;
	add.s64 	%rd253, %rd11, %rd252;
	ld.global.f32 	%f68, [%rd253];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r6413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r6413, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r6413, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r366, %r6391, %r257;
	mul.wide.s32 	%rd254, %r366, 4;
	add.s64 	%rd255, %rd12, %rd254;
	st.global.u32 	[%rd255], %r6413;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r253, 0;
	add.s32 	%r1686, %r271, %r273;
	shl.b32 	%r1687, %r1686, 1;
	mul.wide.s32 	%rd256, %r1687, 4;
	add.s64 	%rd257, %rd11, %rd256;
	ld.global.f32 	%f69, [%rd257];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r6414, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r6414, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r1690, %r366, 1;
	mul.wide.s32 	%rd258, %r1690, 4;
	add.s64 	%rd259, %rd12, %rd258;
	st.global.u32 	[%rd259], %r6414;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r253, 0;
	add.s32 	%r1692, %r269, %r273;
	shl.b32 	%r1693, %r1692, 1;
	or.b32  	%r1694, %r1693, 1;
	mul.wide.s32 	%rd260, %r1694, 4;
	add.s64 	%rd261, %rd11, %rd260;
	ld.global.f32 	%f70, [%rd261];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r6416, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r6416, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6416, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r377, %r6391, %r257;
	mul.wide.s32 	%rd262, %r377, 4;
	add.s64 	%rd263, %rd12, %rd262;
	st.global.u32 	[%rd263], %r6416;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r253, 0;
	add.s32 	%r1698, %r271, %r273;
	shl.b32 	%r1699, %r1698, 1;
	or.b32  	%r1700, %r1699, 1;
	mul.wide.s32 	%rd264, %r1700, 4;
	add.s64 	%rd265, %rd11, %rd264;
	ld.global.f32 	%f71, [%rd265];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r6417, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r6417, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r1703, %r377, 1;
	mul.wide.s32 	%rd266, %r1703, 4;
	add.s64 	%rd267, %rd12, %rd266;
	st.global.u32 	[%rd267], %r6417;
	add.s32 	%r6391, %r6391, 2;

$L__BB0_294:
	add.s64 	%rd481, %rd481, 4;
	add.s64 	%rd480, %rd480, -4;
	setp.ne.s64 	%p204, %rd480, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r6387, %r6387, %r48;
	setp.lt.s32 	%p205, %r6387, %r1245;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r6381, %r6381, %r1271;
	setp.lt.s32 	%p206, %r6381, %r1244;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r226, %r77;
	mov.u32 	%r1518, 31;
	sub.s32 	%r1519, %r1518, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1520, %r46, %r1519, %p144;
	shl.b32 	%r1521, %r1520, 2;
	mov.u32 	%r1522, 2;
	sub.s32 	%r227, %r1521, %r1247;
	shl.b32 	%r1523, %r1246, 2;
	mov.u32 	%r1524, 128;
	sub.s32 	%r228, %r1524, %r1523;
	sub.s32 	%r1525, %r1522, %r1247;
	add.s32 	%r229, %r1525, %r1521;
	add.s32 	%r230, %r1244, -1;
	add.s32 	%r231, %r227, 1;
	add.s32 	%r232, %r229, 1;
	rem.s32 	%r1550, %r231, %r228;
	add.s32 	%r1551, %r1550, %r228;
	rem.s32 	%r243, %r1551, %r228;
	rem.s32 	%r1552, %r232, %r228;
	add.s32 	%r1553, %r1552, %r228;
	rem.s32 	%r244, %r1553, %r228;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r226;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r234, %r6381, 1;
	rem.s32 	%r1526, %r227, %r228;
	add.s32 	%r1527, %r1526, %r228;
	rem.s32 	%r235, %r1527, %r228;
	rem.s32 	%r1528, %r229, %r228;
	add.s32 	%r1529, %r1528, %r228;
	rem.s32 	%r236, %r1529, %r228;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1532, %r234, %r228;
	add.s32 	%r1533, %r1532, %r235;
	mul.wide.s32 	%rd168, %r1533, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f142, [%rd169];
	add.s32 	%r1534, %r1532, %r236;
	mul.wide.s32 	%rd170, %r1534, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f143, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r6382, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6382, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1535, %r6381, 5;
	add.s32 	%r1536, %r1535, %r46;
	shl.b32 	%r1537, %r1536, 2;
	mul.wide.s32 	%rd172, %r1537, 4;
	add.s64 	%rd13, %rd12, %rd172;
	st.global.u32 	[%rd13], %r6382;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1540, %r234, 1;
	mul.lo.s32 	%r1541, %r1540, %r228;
	add.s32 	%r1542, %r1541, %r235;
	mul.wide.s32 	%rd173, %r1542, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f146, [%rd174];
	add.s32 	%r1543, %r1541, %r236;
	mul.wide.s32 	%rd175, %r1543, 4;
	add.s64 	%rd176, %rd11, %rd175;
	ld.global.f32 	%f147, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r6383, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6383, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1544, %r230, %r6381;
	rem.s32 	%r1545, %r1544, %r1244;
	shl.b32 	%r1546, %r1545, 5;
	add.s32 	%r1547, %r1546, %r46;
	shl.b32 	%r1548, %r1547, 2;
	or.b32  	%r1549, %r1548, 2;
	mul.wide.s32 	%rd177, %r1549, 4;
	add.s64 	%rd14, %rd12, %rd177;
	st.global.u32 	[%rd14], %r6383;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1556, %r234, %r228;
	add.s32 	%r1557, %r1556, %r243;
	mul.wide.s32 	%rd178, %r1557, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f150, [%rd179];
	add.s32 	%r1558, %r1556, %r244;
	mul.wide.s32 	%rd180, %r1558, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f151, [%rd181];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r6384, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6384, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd13+4], %r6384;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1561, %r234, 1;
	mul.lo.s32 	%r1562, %r1561, %r228;
	add.s32 	%r1563, %r1562, %r243;
	mul.wide.s32 	%rd182, %r1563, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f154, [%rd183];
	add.s32 	%r1564, %r1562, %r244;
	mul.wide.s32 	%rd184, %r1564, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f155, [%rd185];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6385, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6385, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd14+4], %r6385;

$L__BB0_167:
	add.s32 	%r6381, %r6381, %r1271;
	setp.lt.s32 	%p150, %r6381, %r1244;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r1705, %r1239, -1;
	mad.lo.s32 	%r1706, %r1239, 1152, -128;
	add.s32 	%r1707, %r1240, -1;
	mad.lo.s32 	%r1708, %r1240, 896, 128;
	mul.lo.s32 	%r1709, %r1708, %r1705;
	mad.lo.s32 	%r386, %r1706, %r1707, %r1709;
	setp.lt.s32 	%p207, %r386, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r6422, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r6421, 0;
	mov.u32 	%r6419, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r6419], %r6422;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1712, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6419+4], %r1712;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1713, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6419+8], %r1713;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1714, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6419+12], %r1714;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r6422, {low,high};}

	// end inline asm
	add.s32 	%r6419, %r6419, 16;
	add.s32 	%r6421, %r6421, 4;
	setp.lt.s32 	%p208, %r6421, %r386;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r1716, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r1717, {low,high};}

	// end inline asm
	ld.param.u64 	%rd268, [%rd1+176];
	cvta.to.global.u64 	%rd19, %rd268;
	mov.u32 	%r1718, 31;
	sub.s32 	%r1719, %r1718, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r1720, %r46, %r1719, %p209;
	shl.b32 	%r1721, %r1720, 2;
	sub.s32 	%r397, %r1721, %r1247;
	shl.b32 	%r1722, %r1246, 2;
	mov.u32 	%r1723, 128;
	sub.s32 	%r398, %r1723, %r1722;
	rem.s32 	%r1724, %r397, %r398;
	add.s32 	%r1725, %r1724, %r398;
	rem.s32 	%r399, %r1725, %r398;
	add.s32 	%r1726, %r397, 2;
	rem.s32 	%r1727, %r1726, %r398;
	add.s32 	%r1728, %r1727, %r398;
	rem.s32 	%r400, %r1728, %r398;
	mul.lo.s32 	%r1729, %r399, 6;
	mul.lo.s32 	%r1730, %r400, 6;
	mul.wide.s32 	%rd269, %r1729, 4;
	add.s64 	%rd20, %rd19, %rd269;
	mul.wide.s32 	%rd270, %r1730, 4;
	add.s64 	%rd21, %rd19, %rd270;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r6423, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd20];
	ld.global.f32 	%f299, [%rd20+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd21+8];
	ld.global.f32 	%f301, [%rd21];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r6423, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd20+4];
	ld.global.f32 	%f307, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r6424, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd20];
	ld.global.f32 	%f305, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r6424, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r6425, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd20+20];
	ld.global.f32 	%f311, [%rd20+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd21+20];
	ld.global.f32 	%f313, [%rd21+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r6425, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd20+16];
	ld.global.f32 	%f319, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r6426, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd20+12];
	ld.global.f32 	%f317, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r6426, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r1739, %r397, 1;
	rem.s32 	%r1740, %r1739, %r398;
	add.s32 	%r1741, %r1740, %r398;
	rem.s32 	%r413, %r1741, %r398;
	add.s32 	%r1742, %r397, 3;
	rem.s32 	%r1743, %r1742, %r398;
	add.s32 	%r1744, %r1743, %r398;
	rem.s32 	%r414, %r1744, %r398;
	mul.lo.s32 	%r1745, %r413, 6;
	mul.lo.s32 	%r1746, %r414, 6;
	mul.wide.s32 	%rd271, %r1745, 4;
	add.s64 	%rd22, %rd19, %rd271;
	mul.wide.s32 	%rd272, %r1746, 4;
	add.s64 	%rd23, %rd19, %rd272;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r6427, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd22];
	ld.global.f32 	%f323, [%rd22+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd23+8];
	ld.global.f32 	%f325, [%rd23];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r6427, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd22+4];
	ld.global.f32 	%f331, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r6428, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd22];
	ld.global.f32 	%f329, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r6428, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r6429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd22+20];
	ld.global.f32 	%f335, [%rd22+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd23+20];
	ld.global.f32 	%f337, [%rd23+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r6429, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd22+16];
	ld.global.f32 	%f343, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r6430, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd22+12];
	ld.global.f32 	%f341, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r6430, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r1755, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd273, %r1755;
	// begin inline asm
	mov.u32 %r1756, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd274, %r1756;
	bfi.b64 	%rd24, %rd274, %rd273, 32, 32;
	setp.ne.s64 	%p218, %rd24, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1757, %nctaid.y;
	mov.u32 	%r1758, %nctaid.x;
	mul.lo.s32 	%r1759, %r1758, %r1757;
	mov.u32 	%r1760, %nctaid.z;
	mul.lo.s32 	%r427, %r1759, %r1760;
	neg.s32 	%r1761, %r42;
	add.s32 	%r1762, %r46, %r41;
	setp.ne.s32 	%p219, %r1762, %r1761;
	mov.u32 	%r1763, %ctaid.x;
	add.s32 	%r428, %r1763, %r43;
	neg.s32 	%r429, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r428, %r429;
	mov.u32 	%r1766, -2147483647;
	sub.s32 	%r1767, %r1766, %r427;
	selp.b32 	%r1765, %r1767, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1764,[%rd25],%r1765;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r1768, [%rd25];
	xor.b32  	%r1769, %r1768, %r1764;
	setp.gt.s32 	%p221, %r1769, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r1770,[%rd25];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_820;

	shr.s32 	%r1772, %r1249, 31;
	shr.u32 	%r1773, %r1772, 30;
	add.s32 	%r1774, %r1249, %r1773;
	shr.s32 	%r431, %r1774, 2;
	add.s32 	%r1775, %r46, 24;
	mul.hi.s32 	%r1776, %r1775, 1374389535;
	shr.u32 	%r1777, %r1776, 31;
	shr.s32 	%r1778, %r1776, 3;
	add.s32 	%r1779, %r1778, %r1777;
	mul.lo.s32 	%r1780, %r1779, 25;
	sub.s32 	%r1781, %r1775, %r1780;
	add.s32 	%r1782, %r46, 26;
	mul.hi.s32 	%r1783, %r1782, 1374389535;
	shr.u32 	%r1784, %r1783, 31;
	shr.s32 	%r1785, %r1783, 3;
	add.s32 	%r1786, %r1785, %r1784;
	mul.lo.s32 	%r1787, %r1786, 25;
	sub.s32 	%r1788, %r1782, %r1787;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r432, %r1781, %r46, %p223;
	shr.u32 	%r1789, %r1249, 31;
	add.s32 	%r1790, %r1249, %r1789;
	and.b32  	%r1791, %r1790, -2;
	sub.s32 	%r433, %r1249, %r1791;
	setp.lt.s32 	%p224, %r399, %r1258;
	setp.ge.s32 	%p225, %r399, %r1257;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r413, %r1258;
	setp.ge.s32 	%p227, %r413, %r1257;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r400, %r1258;
	setp.ge.s32 	%p229, %r400, %r1257;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r414, %r1258;
	setp.ge.s32 	%p231, %r414, %r1257;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r434, %r1788, %r46, %p223;
	mov.u32 	%r1771, 0;
	// begin inline asm
	{mov.u32 %r1792, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2117, %r1792, 8;
	add.s32 	%r2118, %r2117, -8192;
	or.b32  	%r1796, %r2118, 31;
	// begin inline asm
	{sub.f16x2 %r5221,%r1717,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5224,%r6425,%r5221;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1717;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6239,%r6426,%r5221;
}
	// end inline asm
	mov.u32 	%r6431, %r1717;
	mov.u32 	%r6432, %r1717;
	mov.u32 	%r6433, %r1717;
	mov.u32 	%r6434, %r1717;
	mov.u32 	%r6435, %r1717;
	mov.u32 	%r6436, %r1717;
	mov.u32 	%r6437, %r1717;
	mov.u32 	%r6438, %r1717;
	mov.u32 	%r6439, %r1717;
	mov.u32 	%r6440, %r1717;
	mov.u32 	%r6441, %r1717;
	mov.u32 	%r6442, %r1717;
	mov.u32 	%r6443, %r1717;
	mov.u32 	%r6444, %r1717;
	mov.u32 	%r6445, %r1717;
	mov.u32 	%r6446, %r1717;
	mov.u32 	%r6447, %r1717;
	mov.u32 	%r6448, %r1717;
	mov.u32 	%r6449, %r1717;
	mov.u32 	%r6450, %r1717;
	mov.u32 	%r6451, %r1717;
	mov.u32 	%r6452, %r1717;
	mov.u32 	%r6453, %r1717;
	mov.u32 	%r6454, %r1717;
	mov.u32 	%r6455, %r1717;
	mov.u32 	%r6456, %r1717;
	mov.u32 	%r6457, %r1717;
	mov.u32 	%r6458, %r1717;
	mov.u32 	%r6459, %r1717;
	mov.u32 	%r6460, %r1717;
	mov.u32 	%r6461, %r1717;
	mov.u32 	%r6462, %r1717;
	mov.u32 	%r6463, %r1717;
	mov.u32 	%r6464, %r1717;
	mov.u32 	%r6465, %r1717;
	mov.u32 	%r6466, %r1717;
	mov.u32 	%r6467, %r1717;
	mov.u32 	%r6468, %r1717;
	mov.u32 	%r6469, %r1717;
	mov.u32 	%r6470, %r1717;
	mov.u32 	%r6471, %r1717;
	mov.u32 	%r6472, %r1717;
	mov.u32 	%r6473, %r1717;
	mov.u32 	%r6474, %r1717;
	mov.u32 	%r6475, %r1717;
	mov.u32 	%r6476, %r1717;
	mov.u32 	%r6477, %r1717;
	mov.u32 	%r6478, %r1717;
	mov.u32 	%r6479, %r1717;
	mov.u32 	%r6480, %r1717;
	mov.u32 	%r6481, %r1717;
	mov.u32 	%r6482, %r1717;
	mov.u32 	%r6483, %r1717;
	mov.u32 	%r6484, %r1717;
	mov.u32 	%r6485, %r1717;
	mov.u32 	%r6486, %r1717;
	mov.u32 	%r6487, %r1717;
	mov.u32 	%r6488, %r1717;
	mov.u32 	%r6489, %r1717;
	mov.u32 	%r6490, %r1717;
	mov.u32 	%r6491, %r1717;
	mov.u32 	%r6492, %r1717;
	mov.u32 	%r6493, %r1717;
	mov.u32 	%r6494, %r1717;
	mov.u32 	%r6495, %r1717;
	mov.u32 	%r6496, %r1717;
	mov.u32 	%r6497, %r1717;
	mov.u32 	%r6498, %r1717;
	mov.u32 	%r6499, %r1717;
	mov.u32 	%r6500, %r1717;
	mov.u32 	%r6501, %r1717;
	mov.u32 	%r6502, %r1717;
	mov.u32 	%r6503, %r1717;
	mov.u32 	%r6504, %r1717;
	mov.u32 	%r6505, %r1771;

$L__BB0_332:
	mov.u32 	%r6338, %tid.y;
	mov.u32 	%r6337, %tid.z;
	mov.u32 	%r6336, %ctaid.y;
	mov.u32 	%r6335, %ctaid.z;
	mov.u32 	%r1807, 1;
	not.b32 	%r2081, %r6335;
	mov.u32 	%r2073, -1;
	add.s32 	%r2082, %r1242, %r2081;
	not.b32 	%r2084, %r6336;
	add.s32 	%r2085, %r1241, %r2084;
	add.s32 	%r2086, %r2085, %r2082;
	mul.lo.s32 	%r2087, %r2086, %r1243;
	add.s32 	%r2088, %r2087, %r1244;
	not.b32 	%r2090, %r6338;
	add.s32 	%r2091, %r1239, %r2090;
	mad.lo.s32 	%r2092, %r2085, %r1239, %r2091;
	not.b32 	%r2094, %r6337;
	add.s32 	%r2095, %r1240, %r2094;
	mad.lo.s32 	%r2096, %r2082, %r1240, %r2095;
	add.s32 	%r2097, %r2092, %r2096;
	shl.b32 	%r2098, %r2097, 1;
	add.s32 	%r2099, %r2088, %r2098;
	add.s32 	%r2100, %r2099, %r6505;
	add.s32 	%r2101, %r6505, %r2087;
	div.s32 	%r2102, %r2100, %r1244;
	mul.lo.s32 	%r2103, %r2102, %r1244;
	sub.s32 	%r2106, %r48, %r1244;
	sub.s32 	%r2107, %r2092, %r2096;
	shl.b32 	%r2108, %r2107, 1;
	add.s32 	%r2109, %r2108, %r1245;
	mad.lo.s32 	%r2110, %r2102, %r48, %r2109;
	mad.lo.s32 	%r2111, %r2102, %r2106, %r2101;
	div.s32 	%r2112, %r2110, %r1245;
	mul.lo.s32 	%r2113, %r2112, %r1245;
	sub.s32 	%r2116, %r1272, %r1245;
	mov.u32 	%r1891, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1793,%r1716,%r1771,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1799, %r6424, %r1793, %p28;
	// begin inline asm
	{mul.f16x2 %r6589,%r1799,%r6504;
}
	// end inline asm
	selp.b32 	%r1802, %r6428, %r1793, %p28;
	// begin inline asm
	{mul.f16x2 %r6587,%r1802,%r6503;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1805,%r1716,%r1807,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1811, %r6424, %r1805, %p28;
	// begin inline asm
	{mul.f16x2 %r6588,%r1811,%r6502;
}
	// end inline asm
	selp.b32 	%r1814, %r6428, %r1805, %p28;
	// begin inline asm
	{mul.f16x2 %r6586,%r1814,%r6501;
}
	// end inline asm
	mov.u32 	%r1819, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1817,%r1716,%r1819,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1823, %r6424, %r1817, %p28;
	// begin inline asm
	{mul.f16x2 %r6585,%r1823,%r6500;
}
	// end inline asm
	selp.b32 	%r1826, %r6428, %r1817, %p28;
	// begin inline asm
	{mul.f16x2 %r6584,%r1826,%r6499;
}
	// end inline asm
	mov.u32 	%r1831, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1829,%r1716,%r1831,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1835, %r6424, %r1829, %p28;
	// begin inline asm
	{mul.f16x2 %r6583,%r1835,%r1717;
}
	// end inline asm
	selp.b32 	%r1838, %r6428, %r1829, %p28;
	// begin inline asm
	{mul.f16x2 %r6581,%r1838,%r1717;
}
	// end inline asm
	mov.u32 	%r1843, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1841,%r1716,%r1843,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1847, %r6424, %r1841, %p28;
	// begin inline asm
	{mul.f16x2 %r6582,%r1847,%r6498;
}
	// end inline asm
	selp.b32 	%r1850, %r6428, %r1841, %p28;
	// begin inline asm
	{mul.f16x2 %r6580,%r1850,%r6497;
}
	// end inline asm
	mov.u32 	%r1855, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1853,%r1716,%r1855,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1859, %r6424, %r1853, %p28;
	// begin inline asm
	{mul.f16x2 %r6579,%r1859,%r6496;
}
	// end inline asm
	selp.b32 	%r1862, %r6428, %r1853, %p28;
	// begin inline asm
	{mul.f16x2 %r6576,%r1862,%r6495;
}
	// end inline asm
	mov.u32 	%r1867, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1865,%r1716,%r1867,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1871, %r6424, %r1865, %p28;
	// begin inline asm
	{mul.f16x2 %r6578,%r1871,%r6494;
}
	// end inline asm
	selp.b32 	%r1874, %r6428, %r1865, %p28;
	// begin inline asm
	{mul.f16x2 %r6575,%r1874,%r6493;
}
	// end inline asm
	mov.u32 	%r1879, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1877,%r1716,%r1879,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1883, %r6424, %r1877, %p28;
	// begin inline asm
	{mul.f16x2 %r6577,%r1883,%r6492;
}
	// end inline asm
	selp.b32 	%r1886, %r6428, %r1877, %p28;
	// begin inline asm
	{mul.f16x2 %r6574,%r1886,%r6491;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1889,%r1716,%r1891,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1895, %r6424, %r1889, %p28;
	// begin inline asm
	{mul.f16x2 %r6573,%r1895,%r6490;
}
	// end inline asm
	selp.b32 	%r1898, %r6428, %r1889, %p28;
	// begin inline asm
	{mul.f16x2 %r6570,%r1898,%r6489;
}
	// end inline asm
	mov.u32 	%r1903, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1901,%r1716,%r1903,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1907, %r6424, %r1901, %p28;
	// begin inline asm
	{mul.f16x2 %r6572,%r1907,%r6488;
}
	// end inline asm
	selp.b32 	%r1910, %r6428, %r1901, %p28;
	// begin inline asm
	{mul.f16x2 %r6569,%r1910,%r6487;
}
	// end inline asm
	mov.u32 	%r1915, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1913,%r1716,%r1915,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1919, %r6424, %r1913, %p28;
	// begin inline asm
	{mul.f16x2 %r6571,%r1919,%r6486;
}
	// end inline asm
	selp.b32 	%r1922, %r6428, %r1913, %p28;
	// begin inline asm
	{mul.f16x2 %r6568,%r1922,%r6485;
}
	// end inline asm
	mov.u32 	%r1927, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1925,%r1716,%r1927,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1931, %r6424, %r1925, %p28;
	// begin inline asm
	{mul.f16x2 %r6567,%r1931,%r1717;
}
	// end inline asm
	selp.b32 	%r1934, %r6428, %r1925, %p28;
	// begin inline asm
	{mul.f16x2 %r6566,%r1934,%r1717;
}
	// end inline asm
	mov.u32 	%r1939, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1937,%r1716,%r1939,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1943, %r6424, %r1937, %p28;
	// begin inline asm
	{mul.f16x2 %r6565,%r1943,%r1717;
}
	// end inline asm
	selp.b32 	%r1946, %r6428, %r1937, %p28;
	// begin inline asm
	{mul.f16x2 %r6563,%r1946,%r1717;
}
	// end inline asm
	mov.u32 	%r1951, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1949,%r1716,%r1951,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1955, %r6424, %r1949, %p28;
	// begin inline asm
	{mul.f16x2 %r6564,%r1955,%r1717;
}
	// end inline asm
	selp.b32 	%r1958, %r6428, %r1949, %p28;
	// begin inline asm
	{mul.f16x2 %r6562,%r1958,%r1717;
}
	// end inline asm
	mov.u32 	%r1963, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1961,%r1716,%r1963,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1967, %r6424, %r1961, %p28;
	// begin inline asm
	{mul.f16x2 %r6561,%r1967,%r1717;
}
	// end inline asm
	selp.b32 	%r1970, %r6428, %r1961, %p28;
	// begin inline asm
	{mul.f16x2 %r6558,%r1970,%r1717;
}
	// end inline asm
	mov.u32 	%r1975, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r1973,%r1716,%r1975,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1979, %r6424, %r1973, %p28;
	// begin inline asm
	{mul.f16x2 %r6560,%r1979,%r6484;
}
	// end inline asm
	selp.b32 	%r1982, %r6428, %r1973, %p28;
	// begin inline asm
	{mul.f16x2 %r6557,%r1982,%r6483;
}
	// end inline asm
	mov.u32 	%r1987, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r1985,%r1716,%r1987,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r1991, %r6424, %r1985, %p28;
	// begin inline asm
	{mul.f16x2 %r6559,%r1991,%r6482;
}
	// end inline asm
	selp.b32 	%r1994, %r6428, %r1985, %p28;
	// begin inline asm
	{mul.f16x2 %r6556,%r1994,%r6481;
}
	// end inline asm
	mov.u32 	%r1999, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r1997,%r1716,%r1999,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2003, %r6424, %r1997, %p28;
	// begin inline asm
	{mul.f16x2 %r6555,%r2003,%r1717;
}
	// end inline asm
	selp.b32 	%r2006, %r6428, %r1997, %p28;
	// begin inline asm
	{mul.f16x2 %r6552,%r2006,%r1717;
}
	// end inline asm
	mov.u32 	%r2011, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2009,%r1716,%r2011,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2015, %r6424, %r2009, %p28;
	// begin inline asm
	{mul.f16x2 %r6554,%r2015,%r1717;
}
	// end inline asm
	selp.b32 	%r2018, %r6428, %r2009, %p28;
	// begin inline asm
	{mul.f16x2 %r6551,%r2018,%r1717;
}
	// end inline asm
	mov.u32 	%r2023, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2021,%r1716,%r2023,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2027, %r6424, %r2021, %p28;
	// begin inline asm
	{mul.f16x2 %r6553,%r2027,%r6480;
}
	// end inline asm
	selp.b32 	%r2030, %r6428, %r2021, %p28;
	// begin inline asm
	{mul.f16x2 %r6550,%r2030,%r6479;
}
	// end inline asm
	mov.u32 	%r2035, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2033,%r1716,%r2035,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2039, %r6424, %r2033, %p28;
	// begin inline asm
	{mul.f16x2 %r6549,%r2039,%r1717;
}
	// end inline asm
	selp.b32 	%r2042, %r6428, %r2033, %p28;
	// begin inline asm
	{mul.f16x2 %r6548,%r2042,%r1717;
}
	// end inline asm
	mov.u32 	%r2047, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2045,%r1716,%r2047,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2051, %r6424, %r2045, %p28;
	// begin inline asm
	{mul.f16x2 %r6547,%r2051,%r1717;
}
	// end inline asm
	selp.b32 	%r2054, %r6428, %r2045, %p28;
	// begin inline asm
	{mul.f16x2 %r6545,%r2054,%r1717;
}
	// end inline asm
	mov.u32 	%r2059, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2057,%r1716,%r2059,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2063, %r6424, %r2057, %p28;
	// begin inline asm
	{mul.f16x2 %r6546,%r2063,%r1717;
}
	// end inline asm
	selp.b32 	%r2066, %r6428, %r2057, %p28;
	// begin inline asm
	{mul.f16x2 %r6544,%r2066,%r1717;
}
	// end inline asm
	mov.u32 	%r2071, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2069,%r1716,%r2071,%r1796,%r2073;
}
	// end inline asm
	selp.b32 	%r2075, %r6424, %r2069, %p28;
	// begin inline asm
	{mul.f16x2 %r6543,%r2075,%r1717;
}
	// end inline asm
	selp.b32 	%r2078, %r6428, %r2069, %p28;
	// begin inline asm
	{mul.f16x2 %r6542,%r2078,%r1717;
}
	// end inline asm
	sub.s32 	%r558, %r2100, %r2103;
	sub.s32 	%r559, %r2110, %r2113;
	mad.lo.s32 	%r560, %r2112, %r2116, %r2111;
	ld.param.u64 	%rd278, [%rd1+168];
	cvta.to.global.u64 	%rd279, %rd278;
	shl.b32 	%r2165, %r560, 1;
	mul.wide.s32 	%rd280, %r2165, 4;
	add.s64 	%rd26, %rd279, %rd280;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	mov.u32 	%r6339, %tid.x;
	add.s32 	%r2368, %r1267, 1;
	setp.lt.s32 	%p239, %r560, %r2368;
	setp.eq.s32 	%p240, %r431, %r6339;
	setp.gt.s32 	%p241, %r560, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r6508, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r6509, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2168, %r1267, 1;
	setp.lt.s32 	%p234, %r560, %r2168;
	setp.gt.s32 	%p235, %r560, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r6506, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r6507, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r6508, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r6509, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2376, 0;
	mov.u32 	%r2387, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2374,%r6422,%r2376,%r1796,%r2387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2379,%r6508,%r2374;
}
	// end inline asm
	mov.u32 	%r2385, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2383,%r6422,%r2385,%r1796,%r2387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2388,%r6509,%r2383;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6511,%r2379,%r2388;
}
	// end inline asm
	setp.eq.s32 	%p244, %r433, 0;
	mov.u32 	%r6510, %r6511;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r6510, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6589,%r6589,%r6510;
}
	// end inline asm
	setp.eq.s32 	%p245, %r433, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r6511, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6587,%r6587,%r6511;
}
	// end inline asm
	mov.u32 	%r2409, 2;
	mov.u32 	%r2420, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2407,%r6422,%r2409,%r1796,%r2420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2412,%r6508,%r2407;
}
	// end inline asm
	mov.u32 	%r2418, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2416,%r6422,%r2418,%r1796,%r2420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2421,%r6509,%r2416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6513,%r2412,%r2421;
}
	// end inline asm
	mov.u32 	%r6512, %r6513;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r6512, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6588,%r6588,%r6512;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r6513, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6586,%r6586,%r6513;
}
	// end inline asm
	mov.u32 	%r2442, 4;
	mov.u32 	%r2453, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2440,%r6422,%r2442,%r1796,%r2453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2445,%r6508,%r2440;
}
	// end inline asm
	mov.u32 	%r2451, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2449,%r6422,%r2451,%r1796,%r2453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2454,%r6509,%r2449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6515,%r2445,%r2454;
}
	// end inline asm
	mov.u32 	%r6514, %r6515;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r6514, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r6514;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r6515, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6584,%r6584,%r6515;
}
	// end inline asm
	mov.u32 	%r2475, 6;
	mov.u32 	%r2486, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2473,%r6422,%r2475,%r1796,%r2486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2478,%r6508,%r2473;
}
	// end inline asm
	mov.u32 	%r2484, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2482,%r6422,%r2484,%r1796,%r2486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2487,%r6509,%r2482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6517,%r2478,%r2487;
}
	// end inline asm
	mov.u32 	%r6516, %r6517;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r6516, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6583,%r6583,%r6516;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r6517, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6581,%r6581,%r6517;
}
	// end inline asm
	mov.u32 	%r2508, 8;
	mov.u32 	%r2519, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2506,%r6422,%r2508,%r1796,%r2519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2511,%r6508,%r2506;
}
	// end inline asm
	mov.u32 	%r2517, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2515,%r6422,%r2517,%r1796,%r2519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2520,%r6509,%r2515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r2511,%r2520;
}
	// end inline asm
	mov.u32 	%r6518, %r6519;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r6518, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6582,%r6582,%r6518;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r6519, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6580,%r6580,%r6519;
}
	// end inline asm
	mov.u32 	%r2541, 10;
	mov.u32 	%r2552, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2539,%r6422,%r2541,%r1796,%r2552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2544,%r6508,%r2539;
}
	// end inline asm
	mov.u32 	%r2550, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2548,%r6422,%r2550,%r1796,%r2552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2553,%r6509,%r2548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6521,%r2544,%r2553;
}
	// end inline asm
	mov.u32 	%r6520, %r6521;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r6520, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6579,%r6579,%r6520;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r6521, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6576,%r6576,%r6521;
}
	// end inline asm
	mov.u32 	%r2574, 12;
	mov.u32 	%r2585, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2572,%r6422,%r2574,%r1796,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2577,%r6508,%r2572;
}
	// end inline asm
	mov.u32 	%r2583, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2581,%r6422,%r2583,%r1796,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2586,%r6509,%r2581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6523,%r2577,%r2586;
}
	// end inline asm
	mov.u32 	%r6522, %r6523;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r6522, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6578,%r6578,%r6522;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r6523, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6575,%r6575,%r6523;
}
	// end inline asm
	mov.u32 	%r2607, 14;
	mov.u32 	%r2618, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2605,%r6422,%r2607,%r1796,%r2618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2610,%r6508,%r2605;
}
	// end inline asm
	mov.u32 	%r2616, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2614,%r6422,%r2616,%r1796,%r2618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2619,%r6509,%r2614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r2610,%r2619;
}
	// end inline asm
	mov.u32 	%r6524, %r6525;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r6524, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6573,%r6573,%r6524;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r6525, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r6525;
}
	// end inline asm
	mov.u32 	%r2640, 16;
	mov.u32 	%r2651, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2638,%r6422,%r2640,%r1796,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2643,%r6508,%r2638;
}
	// end inline asm
	mov.u32 	%r2649, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2647,%r6422,%r2649,%r1796,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2652,%r6509,%r2647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6527,%r2643,%r2652;
}
	// end inline asm
	mov.u32 	%r6526, %r6527;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r6526, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6572,%r6572,%r6526;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r6527, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r6569,%r6569,%r6527;
}
	// end inline asm
	mov.u32 	%r2673, 18;
	mov.u32 	%r2684, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2671,%r6422,%r2673,%r1796,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r6508,%r2671;
}
	// end inline asm
	mov.u32 	%r2682, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2680,%r6422,%r2682,%r1796,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2685,%r6509,%r2680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6529,%r2676,%r2685;
}
	// end inline asm
	mov.u32 	%r6528, %r6529;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r6528, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r6567,%r6567,%r6528;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r6529, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r6566,%r6566,%r6529;
}
	// end inline asm
	mov.u32 	%r2706, 20;
	mov.u32 	%r2717, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2704,%r6422,%r2706,%r1796,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2709,%r6508,%r2704;
}
	// end inline asm
	mov.u32 	%r2715, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2713,%r6422,%r2715,%r1796,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r6509,%r2713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6531,%r2709,%r2718;
}
	// end inline asm
	mov.u32 	%r6530, %r6531;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r6530, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r6565,%r6565,%r6530;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r6531, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r6563,%r6563,%r6531;
}
	// end inline asm
	mov.u32 	%r2739, 22;
	mov.u32 	%r2750, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2737,%r6422,%r2739,%r1796,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r6508,%r2737;
}
	// end inline asm
	mov.u32 	%r2748, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2746,%r6422,%r2748,%r1796,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2751,%r6509,%r2746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6533,%r2742,%r2751;
}
	// end inline asm
	mov.u32 	%r6532, %r6533;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r6532, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r6561,%r6561,%r6532;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r6533, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r6558,%r6558,%r6533;
}
	// end inline asm
	mov.u32 	%r2772, 24;
	mov.u32 	%r2783, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2770,%r6422,%r2772,%r1796,%r2783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2775,%r6508,%r2770;
}
	// end inline asm
	mov.u32 	%r2781, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2779,%r6422,%r2781,%r1796,%r2783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r6509,%r2779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6535,%r2775,%r2784;
}
	// end inline asm
	mov.u32 	%r6534, %r6535;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r6534, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r6560,%r6560,%r6534;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r6535, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r6557,%r6557,%r6535;
}
	// end inline asm
	mov.u32 	%r2805, 26;
	mov.u32 	%r2816, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2803,%r6422,%r2805,%r1796,%r2816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r6508,%r2803;
}
	// end inline asm
	mov.u32 	%r2814, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2812,%r6422,%r2814,%r1796,%r2816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2817,%r6509,%r2812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6537,%r2808,%r2817;
}
	// end inline asm
	mov.u32 	%r6536, %r6537;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r6536, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r6555,%r6555,%r6536;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r6537, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r6552,%r6552,%r6537;
}
	// end inline asm
	mov.u32 	%r2838, 28;
	mov.u32 	%r2849, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2836,%r6422,%r2838,%r1796,%r2849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2841,%r6508,%r2836;
}
	// end inline asm
	mov.u32 	%r2847, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2845,%r6422,%r2847,%r1796,%r2849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r6509,%r2845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6539,%r2841,%r2850;
}
	// end inline asm
	mov.u32 	%r6538, %r6539;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r6538, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r6554,%r6554,%r6538;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r6539, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r6551,%r6551,%r6539;
}
	// end inline asm
	mov.u32 	%r2880, 31;
	mov.u32 	%r2871, 30;
	mov.u32 	%r2882, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2869,%r6422,%r2871,%r1796,%r2882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r6508,%r2869;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2878,%r6422,%r2880,%r1796,%r2882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2883,%r6509,%r2878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6541,%r2874,%r2883;
}
	// end inline asm
	mov.u32 	%r6540, %r6541;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r6540, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r6547,%r6547,%r6540;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r6541, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r6545,%r6545,%r6541;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r6506, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r6507, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r559, %r1249;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	mov.u32 	%r2362, 0;
	// begin inline asm
	{mul.f16x2 %r2270,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6589,%r6589,%r2270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2276,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6577,%r6577,%r2276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2282,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6579,%r6579,%r2282;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2288,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6559,%r6559,%r2288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2294,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6561,%r6561,%r2294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2300,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6546,%r6546,%r2300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2306,%r6507,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6583,%r6583,%r2306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2312,%r6507,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6564,%r6564,%r2312;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2318,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6587,%r6587,%r2318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2324,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r6574,%r2324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2330,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6576,%r6576,%r2330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2336,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6556,%r6556,%r2336;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2342,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6558,%r6558,%r2342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2348,%r6506,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6544,%r6544,%r2348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2354,%r6507,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6581,%r6581,%r2354;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2360,%r6507,%r2362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6562,%r6562,%r2360;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2173, %r1249, -2;
	setp.ne.s32 	%p238, %r559, %r2173;
	@%p238 bra 	$L__BB0_408;

	mov.u32 	%r2266, 0;
	// begin inline asm
	{mul.f16x2 %r2174,%r6506,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6567,%r6567,%r2174;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2180,%r6506,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6549,%r6549,%r2180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2186,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6585,%r6585,%r2186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2192,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6571,%r6571,%r2192;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2198,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6573,%r6573,%r2198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2204,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6553,%r6553,%r2204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2210,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6555,%r6555,%r2210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2216,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6543,%r6543,%r2216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2222,%r6506,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6566,%r6566,%r2222;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2228,%r6506,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6548,%r6548,%r2228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2234,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6584,%r6584,%r2234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2240,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6568,%r6568,%r2240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2246,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6570,%r2246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2252,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r6550,%r2252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2258,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r6552,%r2258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2264,%r6507,%r2266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6542,%r6542,%r2264;
}
	// end inline asm

$L__BB0_408:
	mov.u32 	%r2906, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2902,%r6477,%r432,%r1796,%r2906;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2902;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6477;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2909, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2910,%r6478,%r2909;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2913,%r6423,%r2910;
}
	// end inline asm
	@%p28 bra 	$L__BB0_410;
	bra.uni 	$L__BB0_409;

$L__BB0_410:
	// begin inline asm
	{neg.f16x2 %r6590,%r6589;
}
	// end inline asm
	bra.uni 	$L__BB0_411;

$L__BB0_409:
	// begin inline asm
	{mul.f16x2 %r6590,%r6424,%r2910;
}
	// end inline asm

$L__BB0_411:
	mov.u32 	%r2926, 31;
	mov.u32 	%r2949, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2924,%r6590,%r2926,%r1796,%r2949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2929,%r2913,%r2924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2932,%r6476,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2935,%r2932,%r2929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2938,%r1717,%r2935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2941,%r6589,%r2938;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2945,%r6473,%r432,%r1796,%r2949;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2945;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6473;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2952, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2953,%r6474,%r2952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2956,%r6423,%r2953;
}
	// end inline asm
	mov.u32 	%r6591, %r6588;
	@%p28 bra 	$L__BB0_413;

	// begin inline asm
	{mul.f16x2 %r6591,%r6424,%r2953;
}
	// end inline asm

$L__BB0_413:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2967,%r6591,%r2926,%r1796,%r2949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2972,%r2956,%r2967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2975,%r6476,%r6472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2978,%r2972,%r2975;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2981,%r1717,%r2978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2984,%r6588,%r2981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2987,%r6477,%r6478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2990,%r6427,%r2987;
}
	// end inline asm
	@%p28 bra 	$L__BB0_415;
	bra.uni 	$L__BB0_414;

$L__BB0_415:
	// begin inline asm
	{neg.f16x2 %r6592,%r6587;
}
	// end inline asm
	bra.uni 	$L__BB0_416;

$L__BB0_414:
	// begin inline asm
	{mul.f16x2 %r6592,%r6428,%r2987;
}
	// end inline asm

$L__BB0_416:
	mov.u32 	%r3003, 31;
	mov.u32 	%r3005, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3001,%r6592,%r3003,%r1796,%r3005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3006,%r2990,%r3001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3009,%r6471,%r6470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3012,%r3009,%r3006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3015,%r1717,%r3012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3018,%r6587,%r3015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3021,%r6473,%r6474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3024,%r6427,%r3021;
}
	// end inline asm
	mov.u32 	%r6593, %r6586;
	@%p28 bra 	$L__BB0_418;

	// begin inline asm
	{mul.f16x2 %r6593,%r6428,%r3021;
}
	// end inline asm

$L__BB0_418:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3033,%r6593,%r3003,%r1796,%r3005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3038,%r3024,%r3033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3041,%r6471,%r6469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3044,%r3038,%r3041;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3047,%r1717,%r3044;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3050,%r6586,%r3047;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r6467,%r432,%r1796,%r3005;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3054;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6467;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3061, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3062,%r6468,%r3061;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3065,%r6423,%r3062;
}
	// end inline asm
	@%p28 bra 	$L__BB0_420;
	bra.uni 	$L__BB0_419;

$L__BB0_420:
	// begin inline asm
	{neg.f16x2 %r6594,%r6585;
}
	// end inline asm
	bra.uni 	$L__BB0_421;

$L__BB0_419:
	// begin inline asm
	{mul.f16x2 %r6594,%r6424,%r3062;
}
	// end inline asm

$L__BB0_421:
	mov.u32 	%r3080, 31;
	mov.u32 	%r3082, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3078,%r6594,%r3080,%r1796,%r3082;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3083,%r3065,%r3078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3086,%r6466,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3089,%r3086,%r3083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r1717,%r3089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3095,%r6585,%r3092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3098,%r6467,%r6468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3101,%r6427,%r3098;
}
	// end inline asm
	@%p28 bra 	$L__BB0_423;
	bra.uni 	$L__BB0_422;

$L__BB0_423:
	// begin inline asm
	{neg.f16x2 %r6595,%r6584;
}
	// end inline asm
	bra.uni 	$L__BB0_424;

$L__BB0_422:
	// begin inline asm
	{mul.f16x2 %r6595,%r6428,%r3098;
}
	// end inline asm

$L__BB0_424:
	mov.u32 	%r3114, 31;
	mov.u32 	%r3137, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3112,%r6595,%r3114,%r1796,%r3137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3117,%r3101,%r3112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3120,%r6465,%r6471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3123,%r3120,%r3117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3126,%r1717,%r3123;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3129,%r6584,%r3126;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3133,%r6463,%r432,%r1796,%r3137;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3133;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6463;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3140, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3141,%r6464,%r3140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3144,%r6423,%r3141;
}
	// end inline asm
	@%p28 bra 	$L__BB0_426;
	bra.uni 	$L__BB0_425;

$L__BB0_426:
	// begin inline asm
	{neg.f16x2 %r6596,%r6583;
}
	// end inline asm
	bra.uni 	$L__BB0_427;

$L__BB0_425:
	// begin inline asm
	{mul.f16x2 %r6596,%r6424,%r3141;
}
	// end inline asm

$L__BB0_427:
	mov.u32 	%r3159, 31;
	mov.u32 	%r3182, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3157,%r6596,%r3159,%r1796,%r3182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3162,%r3144,%r3157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3165,%r6462,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3168,%r3165,%r3162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3171,%r1717,%r3168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3174,%r6583,%r3171;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3178,%r6460,%r432,%r1796,%r3182;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3178;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6460;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3185, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3186,%r6461,%r3185;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3189,%r6423,%r3186;
}
	// end inline asm
	mov.u32 	%r6597, %r6582;
	@%p28 bra 	$L__BB0_429;

	// begin inline asm
	{mul.f16x2 %r6597,%r6424,%r3186;
}
	// end inline asm

$L__BB0_429:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3200,%r6597,%r3159,%r1796,%r3182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3205,%r3189,%r3200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3208,%r6462,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3211,%r3205,%r3208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3214,%r1717,%r3211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3217,%r6582,%r3214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3220,%r6463,%r6464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3223,%r6427,%r3220;
}
	// end inline asm
	@%p28 bra 	$L__BB0_431;
	bra.uni 	$L__BB0_430;

$L__BB0_431:
	// begin inline asm
	{neg.f16x2 %r6598,%r6581;
}
	// end inline asm
	bra.uni 	$L__BB0_432;

$L__BB0_430:
	// begin inline asm
	{mul.f16x2 %r6598,%r6428,%r3220;
}
	// end inline asm

$L__BB0_432:
	mov.u32 	%r3236, 31;
	mov.u32 	%r3238, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3234,%r6598,%r3236,%r1796,%r3238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3239,%r3223,%r3234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3242,%r6459,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3245,%r3242,%r3239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3248,%r1717,%r3245;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3251,%r6581,%r3248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3254,%r6460,%r6461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r6427,%r3254;
}
	// end inline asm
	mov.u32 	%r6599, %r6580;
	@%p28 bra 	$L__BB0_434;

	// begin inline asm
	{mul.f16x2 %r6599,%r6428,%r3254;
}
	// end inline asm

$L__BB0_434:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3266,%r6599,%r3236,%r1796,%r3238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3271,%r3257,%r3266;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3274,%r6459,%r6470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3277,%r3271,%r3274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3280,%r1717,%r3277;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3283,%r6580,%r3280;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3287,%r6457,%r432,%r1796,%r3238;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3287;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6457;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3294, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3295,%r6458,%r3294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3298,%r6423,%r3295;
}
	// end inline asm
	@%p28 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r6600,%r6579;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r6600,%r6424,%r3295;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3313, 31;
	mov.u32 	%r3336, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3311,%r6600,%r3313,%r1796,%r3336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3316,%r3298,%r3311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3319,%r6456,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3322,%r3319,%r3316;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3325,%r1717,%r3322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6504,%r6579,%r3325;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3332,%r6454,%r432,%r1796,%r3336;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3332;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6454;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3339, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r6455,%r3339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r6423,%r3340;
}
	// end inline asm
	mov.u32 	%r6601, %r6578;
	@%p28 bra 	$L__BB0_439;

	// begin inline asm
	{mul.f16x2 %r6601,%r6424,%r3340;
}
	// end inline asm

$L__BB0_439:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3354,%r6601,%r3313,%r1796,%r3336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3359,%r3343,%r3354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3362,%r6456,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3365,%r3359,%r3362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3368,%r1717,%r3365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6578,%r3368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3374,%r6458,%r6478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3377,%r6455,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3380,%r3374,%r3377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3383,%r1717,%r3380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3386,%r6577,%r3383;
}
	// end inline asm
	selp.b32 	%r832, %r6577, %r3386, %p28;
	// begin inline asm
	{sub.f16x2 %r3389,%r6457,%r6458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3392,%r6427,%r3389;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r6602,%r6576;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r6602,%r6428,%r3389;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3405, 31;
	mov.u32 	%r3407, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3403,%r6602,%r3405,%r1796,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3408,%r3392,%r3403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3411,%r6453,%r6459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3414,%r3411,%r3408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3417,%r1717,%r3414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6576,%r3417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3423,%r6454,%r6455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3426,%r6427,%r3423;
}
	// end inline asm
	mov.u32 	%r6603, %r6575;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r6603,%r6428,%r3423;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3435,%r6603,%r3405,%r1796,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3440,%r3426,%r3435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3443,%r6453,%r6471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3446,%r3440,%r3443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3449,%r1717,%r3446;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6501,%r6575,%r3449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3455,%r6457,%r6477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3458,%r6454,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3461,%r3455,%r3458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3464,%r1717,%r3461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3467,%r6574,%r3464;
}
	// end inline asm
	selp.b32 	%r844, %r6574, %r3467, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3471,%r6451,%r432,%r1796,%r3407;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3471;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6451;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3478, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3479,%r6452,%r3478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3482,%r6423,%r3479;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r6604,%r6573;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r6604,%r6424,%r3479;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3497, 31;
	mov.u32 	%r3520, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3495,%r6604,%r3497,%r1796,%r3520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3500,%r3482,%r3495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3503,%r6450,%r6456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3506,%r3503,%r3500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3509,%r1717,%r3506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6500,%r6573,%r3509;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3516,%r6448,%r432,%r1796,%r3520;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3516;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6448;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3523, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3524,%r6449,%r3523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3527,%r6423,%r3524;
}
	// end inline asm
	mov.u32 	%r6605, %r6572;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r6605,%r6424,%r3524;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3538,%r6605,%r3497,%r1796,%r3520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3543,%r3527,%r3538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3546,%r6450,%r6466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3549,%r3543,%r3546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3552,%r1717,%r3549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3555,%r6572,%r3552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3558,%r6452,%r6468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3561,%r6449,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3564,%r3558,%r3561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3567,%r1717,%r3564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3570,%r6571,%r3567;
}
	// end inline asm
	selp.b32 	%r856, %r6571, %r3570, %p28;
	// begin inline asm
	{sub.f16x2 %r3573,%r6451,%r6452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r6427,%r3573;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r6606,%r6570;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r6606,%r6428,%r3573;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3589, 31;
	mov.u32 	%r3591, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3587,%r6606,%r3589,%r1796,%r3591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3592,%r3576,%r3587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3595,%r6447,%r6453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r3595,%r3592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3601,%r1717,%r3598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6499,%r6570,%r3601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3607,%r6448,%r6449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3610,%r6427,%r3607;
}
	// end inline asm
	mov.u32 	%r6607, %r6569;
	@%p28 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r6607,%r6428,%r3607;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3619,%r6607,%r3589,%r1796,%r3591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3624,%r3610,%r3619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3627,%r6447,%r6465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3630,%r3624,%r3627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3633,%r1717,%r3630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3636,%r6569,%r3633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3639,%r6451,%r6467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3642,%r6448,%r6454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3645,%r3639,%r3642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3648,%r1717,%r3645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3651,%r6568,%r3648;
}
	// end inline asm
	selp.b32 	%r868, %r6568, %r3651, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3655,%r6445,%r432,%r1796,%r3591;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3655;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6445;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3662, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3663,%r6446,%r3662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3666,%r6423,%r3663;
}
	// end inline asm
	@%p28 bra 	$L__BB0_456;
	bra.uni 	$L__BB0_455;

$L__BB0_456:
	// begin inline asm
	{neg.f16x2 %r6608,%r6567;
}
	// end inline asm
	bra.uni 	$L__BB0_457;

$L__BB0_455:
	// begin inline asm
	{mul.f16x2 %r6608,%r6424,%r3663;
}
	// end inline asm

$L__BB0_457:
	mov.u32 	%r3681, 31;
	mov.u32 	%r3683, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3679,%r6608,%r3681,%r1796,%r3683;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3684,%r3666,%r3679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3687,%r1717,%r6450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3690,%r3687,%r3684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3693,%r1717,%r3690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3696,%r6567,%r3693;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3699,%r6445,%r6446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3702,%r6427,%r3699;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r6609,%r6566;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r6609,%r6428,%r3699;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3715, 31;
	mov.u32 	%r3738, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3713,%r6609,%r3715,%r1796,%r3738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3718,%r3702,%r3713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3721,%r1717,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3724,%r3721,%r3718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3727,%r1717,%r3724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3730,%r6566,%r3727;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3734,%r6443,%r432,%r1796,%r3738;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3734;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6443;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3741, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r6444,%r3741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3745,%r6423,%r3742;
}
	// end inline asm
	mov.u32 	%r6610, %r6565;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r6610,%r6424,%r3742;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3756,%r6610,%r3715,%r1796,%r3738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3761,%r3745,%r3756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3764,%r1717,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3767,%r3761,%r3764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3770,%r1717,%r3767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6565,%r3770;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3776,%r1717,%r6464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3779,%r6444,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3782,%r3776,%r3779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3785,%r1717,%r3782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3788,%r6564,%r3785;
}
	// end inline asm
	selp.b32 	%r886, %r6564, %r3788, %p28;
	// begin inline asm
	{sub.f16x2 %r3791,%r6443,%r6444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3794,%r6427,%r3791;
}
	// end inline asm
	mov.u32 	%r6611, %r6563;
	@%p28 bra 	$L__BB0_464;

	// begin inline asm
	{mul.f16x2 %r6611,%r6428,%r3791;
}
	// end inline asm

$L__BB0_464:
	mov.u32 	%r3805, 31;
	mov.u32 	%r3843, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3803,%r6611,%r3805,%r1796,%r3843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3808,%r3794,%r3803;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3811,%r1717,%r6459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3814,%r3808,%r3811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3817,%r1717,%r3814;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6497,%r6563,%r3817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3823,%r1717,%r6463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3826,%r6443,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3829,%r3823,%r3826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3832,%r1717,%r3829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3835,%r6562,%r3832;
}
	// end inline asm
	selp.b32 	%r892, %r6562, %r3835, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3839,%r6441,%r432,%r1796,%r3843;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3839;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6441;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3846, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3847,%r6442,%r3846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3850,%r6423,%r3847;
}
	// end inline asm
	@%p28 bra 	$L__BB0_466;
	bra.uni 	$L__BB0_465;

$L__BB0_466:
	// begin inline asm
	{neg.f16x2 %r6612,%r6561;
}
	// end inline asm
	bra.uni 	$L__BB0_467;

$L__BB0_465:
	// begin inline asm
	{mul.f16x2 %r6612,%r6424,%r3847;
}
	// end inline asm

$L__BB0_467:
	mov.u32 	%r3865, 31;
	mov.u32 	%r3888, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3863,%r6612,%r3865,%r1796,%r3888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r3850,%r3863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3871,%r6440,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3874,%r3871,%r3868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3877,%r1717,%r3874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6496,%r6561,%r3877;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3884,%r6438,%r432,%r1796,%r3888;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3884;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6438;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3891, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3892,%r6439,%r3891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3895,%r6423,%r3892;
}
	// end inline asm
	mov.u32 	%r6613, %r6560;
	@%p28 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r6613,%r6424,%r3892;
}
	// end inline asm

$L__BB0_469:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3906,%r6613,%r3865,%r1796,%r3888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3911,%r3895,%r3906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r6440,%r6456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r3911,%r3914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3920,%r1717,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6494,%r6560,%r3920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3926,%r6442,%r6458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3929,%r6439,%r6444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3932,%r3926,%r3929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3935,%r1717,%r3932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3938,%r6559,%r3935;
}
	// end inline asm
	selp.b32 	%r6492, %r6559, %r3938, %p28;
	// begin inline asm
	{sub.f16x2 %r3941,%r6441,%r6442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3944,%r6427,%r3941;
}
	// end inline asm
	@%p28 bra 	$L__BB0_471;
	bra.uni 	$L__BB0_470;

$L__BB0_471:
	// begin inline asm
	{neg.f16x2 %r6614,%r6558;
}
	// end inline asm
	bra.uni 	$L__BB0_472;

$L__BB0_470:
	// begin inline asm
	{mul.f16x2 %r6614,%r6428,%r3941;
}
	// end inline asm

$L__BB0_472:
	mov.u32 	%r3957, 31;
	mov.u32 	%r3959, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3955,%r6614,%r3957,%r1796,%r3959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3960,%r3944,%r3955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3963,%r6437,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3966,%r3963,%r3960;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3969,%r1717,%r3966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6495,%r6558,%r3969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3975,%r6438,%r6439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3978,%r6427,%r3975;
}
	// end inline asm
	mov.u32 	%r6615, %r6557;
	@%p28 bra 	$L__BB0_474;

	// begin inline asm
	{mul.f16x2 %r6615,%r6428,%r3975;
}
	// end inline asm

$L__BB0_474:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3987,%r6615,%r3957,%r1796,%r3959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3992,%r3978,%r3987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r6437,%r6453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3998,%r3992,%r3995;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4001,%r1717,%r3998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6557,%r4001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r6441,%r6457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4010,%r6438,%r6443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4013,%r4007,%r4010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4016,%r1717,%r4013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4019,%r6556,%r4016;
}
	// end inline asm
	selp.b32 	%r6491, %r6556, %r4019, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4023,%r6435,%r432,%r1796,%r3959;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4023;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6435;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4030, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r6436,%r4030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r6423,%r4031;
}
	// end inline asm
	@%p28 bra 	$L__BB0_476;
	bra.uni 	$L__BB0_475;

$L__BB0_476:
	// begin inline asm
	{neg.f16x2 %r6616,%r6555;
}
	// end inline asm
	bra.uni 	$L__BB0_477;

$L__BB0_475:
	// begin inline asm
	{mul.f16x2 %r6616,%r6424,%r4031;
}
	// end inline asm

$L__BB0_477:
	mov.u32 	%r4049, 31;
	mov.u32 	%r4072, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4047,%r6616,%r4049,%r1796,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4052,%r4034,%r4047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4055,%r1717,%r6440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4058,%r4055,%r4052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4061,%r1717,%r4058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6490,%r6555,%r4061;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4068,%r6433,%r432,%r1796,%r4072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4068;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6433;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4075, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4076,%r6434,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4079,%r6423,%r4076;
}
	// end inline asm
	mov.u32 	%r6617, %r6554;
	@%p28 bra 	$L__BB0_479;

	// begin inline asm
	{mul.f16x2 %r6617,%r6424,%r4076;
}
	// end inline asm

$L__BB0_479:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4090,%r6617,%r4049,%r1796,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4095,%r4079,%r4090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4098,%r1717,%r6450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4101,%r4095,%r4098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4104,%r1717,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6488,%r6554,%r4104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4110,%r6436,%r6452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r6434,%r6439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4116,%r4110,%r4113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4119,%r1717,%r4116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4122,%r6553,%r4119;
}
	// end inline asm
	selp.b32 	%r6486, %r6553, %r4122, %p28;
	// begin inline asm
	{sub.f16x2 %r4125,%r6435,%r6436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4128,%r6427,%r4125;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r6618,%r6552;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r6618,%r6428,%r4125;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4141, 31;
	mov.u32 	%r4143, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4139,%r6618,%r4141,%r1796,%r4143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4144,%r4128,%r4139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4147,%r1717,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4150,%r4147,%r4144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4153,%r1717,%r4150;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6489,%r6552,%r4153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4159,%r6433,%r6434;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4162,%r6427,%r4159;
}
	// end inline asm
	mov.u32 	%r6619, %r6551;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r6619,%r6428,%r4159;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4171,%r6619,%r4141,%r1796,%r4143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4176,%r4162,%r4171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r1717,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4182,%r4176,%r4179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4185,%r1717,%r4182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6487,%r6551,%r4185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r6435,%r6451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4194,%r6433,%r6438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r4191,%r4194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4200,%r1717,%r4197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4203,%r6550,%r4200;
}
	// end inline asm
	selp.b32 	%r6485, %r6550, %r4203, %p28;
	// begin inline asm
	{sub.f16x2 %r4206,%r1717,%r6446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r1717,%r6434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r4206,%r4209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4215,%r1717,%r4212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4218,%r6549,%r4215;
}
	// end inline asm
	selp.b32 	%r941, %r6549, %r4218, %p28;
	// begin inline asm
	{sub.f16x2 %r4221,%r1717,%r6445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4224,%r1717,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r4221,%r4224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4230,%r1717,%r4227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4233,%r6548,%r4230;
}
	// end inline asm
	selp.b32 	%r942, %r6548, %r4233, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4237,%r6431,%r432,%r1796,%r4143;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4237;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6431;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4244, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4245,%r6432,%r4244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4248,%r6423,%r4245;
}
	// end inline asm
	mov.u32 	%r6620, %r6547;
	@%p28 bra 	$L__BB0_486;

	// begin inline asm
	{mul.f16x2 %r6620,%r6424,%r4245;
}
	// end inline asm

$L__BB0_486:
	mov.u32 	%r4261, 31;
	mov.u32 	%r4263, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4259,%r6620,%r4261,%r1796,%r4263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4264,%r4248,%r4259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4267,%r1717,%r6440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4270,%r4264,%r4267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4273,%r1717,%r4270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6484,%r6547,%r4273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4279,%r1717,%r6442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4282,%r6432,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4285,%r4279,%r4282;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4288,%r1717,%r4285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4291,%r6546,%r4288;
}
	// end inline asm
	selp.b32 	%r6482, %r6546, %r4291, %p28;
	// begin inline asm
	{sub.f16x2 %r4294,%r6431,%r6432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4297,%r6427,%r4294;
}
	// end inline asm
	mov.u32 	%r6621, %r6545;
	@%p28 bra 	$L__BB0_488;

	// begin inline asm
	{mul.f16x2 %r6621,%r6428,%r4294;
}
	// end inline asm

$L__BB0_488:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4306,%r6621,%r4261,%r1796,%r4263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4311,%r4297,%r4306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4314,%r1717,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4317,%r4311,%r4314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4320,%r1717,%r4317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6483,%r6545,%r4320;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4326,%r1717,%r6441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4329,%r6431,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r4326,%r4329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4335,%r1717,%r4332;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4338,%r6544,%r4335;
}
	// end inline asm
	selp.b32 	%r6481, %r6544, %r4338, %p28;
	// begin inline asm
	{sub.f16x2 %r4341,%r1717,%r6436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4344,%r1717,%r6432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4347,%r4341,%r4344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4350,%r1717,%r4347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4353,%r6543,%r4350;
}
	// end inline asm
	selp.b32 	%r6480, %r6543, %r4353, %p28;
	// begin inline asm
	{sub.f16x2 %r4356,%r1717,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4359,%r1717,%r6431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r4356,%r4359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r1717,%r4362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4368,%r6542,%r4365;
}
	// end inline asm
	selp.b32 	%r6479, %r6542, %r4368, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd282, [%rd1+184];
	cvta.to.global.u64 	%rd27, %rd282;
	add.s32 	%r4373, %r1253, -2;
	setp.lt.s32 	%p309, %r558, %r4373;
	add.s32 	%r4374, %r1254, 3;
	setp.ge.s32 	%p310, %r558, %r4374;
	or.pred  	%p311, %p309, %p310;
	add.s32 	%r4375, %r1255, -2;
	setp.lt.s32 	%p312, %r559, %r4375;
	or.pred  	%p313, %p311, %p312;
	add.s32 	%r4376, %r1256, 2;
	setp.ge.s32 	%p314, %r559, %r4376;
	or.pred  	%p315, %p314, %p313;
	setp.lt.s32 	%p316, %r560, %r1250;
	or.pred  	%p317, %p316, %p315;
	mad.lo.s32 	%r4377, %r1252, %r1251, %r1250;
	setp.ge.s32 	%p318, %r560, %r4377;
	or.pred  	%p319, %p317, %p318;
	@%p319 bra 	$L__BB0_730;

	sub.s32 	%r957, %r560, %r1250;
	rem.s32 	%r4378, %r957, %r1251;
	setp.ne.s32 	%p320, %r4378, 0;
	@%p320 bra 	$L__BB0_730;

	div.s32 	%r4379, %r957, %r1251;
	mov.u32 	%r4380, 8;
	sub.s32 	%r4381, %r4380, %r1253;
	add.s32 	%r4382, %r4381, %r1254;
	mul.lo.s32 	%r4383, %r4379, %r4382;
	mov.u32 	%r4384, 4;
	sub.s32 	%r4385, %r4384, %r1253;
	add.s32 	%r958, %r4385, %r558;
	sub.s32 	%r4386, %r4384, %r1255;
	add.s32 	%r959, %r4386, %r559;
	mul.lo.s32 	%r960, %r4383, 3;
	add.s32 	%r4387, %r958, %r960;
	add.s32 	%r4388, %r4387, -2;
	sub.s32 	%r4389, %r4380, %r1255;
	add.s32 	%r4390, %r4389, %r1256;
	mul.lo.s32 	%r961, %r4388, %r4390;
	add.s32 	%r4391, %r959, %r961;
	mul.lo.s32 	%r4392, %r4391, %r58;
	sub.s32 	%r962, %r4392, %r1257;
	@%p28 bra 	$L__BB0_495;

	not.pred 	%p322, %p24;
	@%p322 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2941;
  cvt.f32.f16 %f420, low;}

	// end inline asm
	add.s32 	%r4394, %r962, %r399;
	mul.wide.s32 	%rd283, %r4394, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f420;

$L__BB0_493:
	not.pred 	%p323, %p26;
	@%p323 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2941;
  cvt.f32.f16 %f421, high;}

	// end inline asm
	add.s32 	%r4396, %r962, %r400;
	mul.wide.s32 	%rd285, %r4396, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f421;

$L__BB0_495:
	@%p28 bra 	$L__BB0_500;

	not.pred 	%p325, %p25;
	@%p325 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3018;
  cvt.f32.f16 %f422, low;}

	// end inline asm
	add.s32 	%r4398, %r962, %r413;
	mul.wide.s32 	%rd287, %r4398, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f422;

$L__BB0_498:
	not.pred 	%p326, %p27;
	@%p326 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3018;
  cvt.f32.f16 %f423, high;}

	// end inline asm
	add.s32 	%r4400, %r962, %r414;
	mul.wide.s32 	%rd289, %r4400, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f423;

$L__BB0_500:
	mov.u32 	%r4401, 8;
	sub.s32 	%r4402, %r4401, %r1253;
	add.s32 	%r4403, %r4402, %r1254;
	add.s32 	%r963, %r960, %r4403;
	add.s32 	%r4404, %r958, %r963;
	add.s32 	%r4405, %r4404, -2;
	sub.s32 	%r4406, %r4401, %r1255;
	add.s32 	%r4407, %r4406, %r1256;
	mad.lo.s32 	%r4408, %r4405, %r4407, %r959;
	mul.lo.s32 	%r4409, %r4408, %r58;
	sub.s32 	%r964, %r4409, %r1257;
	@%p28 bra 	$L__BB0_505;

	not.pred 	%p328, %p24;
	@%p328 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2984;
  cvt.f32.f16 %f424, low;}

	// end inline asm
	add.s32 	%r4411, %r964, %r399;
	mul.wide.s32 	%rd291, %r4411, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f424;

$L__BB0_503:
	not.pred 	%p329, %p26;
	@%p329 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2984;
  cvt.f32.f16 %f425, high;}

	// end inline asm
	add.s32 	%r4413, %r964, %r400;
	mul.wide.s32 	%rd293, %r4413, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f425;

$L__BB0_505:
	@%p28 bra 	$L__BB0_510;

	not.pred 	%p331, %p25;
	@%p331 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3050;
  cvt.f32.f16 %f426, low;}

	// end inline asm
	add.s32 	%r4415, %r964, %r413;
	mul.wide.s32 	%rd295, %r4415, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f426;

$L__BB0_508:
	not.pred 	%p332, %p27;
	@%p332 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3050;
  cvt.f32.f16 %f427, high;}

	// end inline asm
	add.s32 	%r4417, %r964, %r414;
	mul.wide.s32 	%rd297, %r4417, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f427;

$L__BB0_510:
	add.s32 	%r965, %r959, 1;
	add.s32 	%r4418, %r965, %r961;
	mul.lo.s32 	%r4419, %r4418, %r58;
	sub.s32 	%r966, %r4419, %r1257;
	@%p28 bra 	$L__BB0_515;

	not.pred 	%p334, %p24;
	@%p334 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3095;
  cvt.f32.f16 %f428, low;}

	// end inline asm
	add.s32 	%r4421, %r966, %r399;
	mul.wide.s32 	%rd299, %r4421, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f428;

$L__BB0_513:
	not.pred 	%p335, %p26;
	@%p335 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3095;
  cvt.f32.f16 %f429, high;}

	// end inline asm
	add.s32 	%r4423, %r966, %r400;
	mul.wide.s32 	%rd301, %r4423, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f429;

$L__BB0_515:
	@%p28 bra 	$L__BB0_520;

	not.pred 	%p337, %p25;
	@%p337 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3129;
  cvt.f32.f16 %f430, low;}

	// end inline asm
	add.s32 	%r4425, %r966, %r413;
	mul.wide.s32 	%rd303, %r4425, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f430;

$L__BB0_518:
	not.pred 	%p338, %p27;
	@%p338 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3129;
  cvt.f32.f16 %f431, high;}

	// end inline asm
	add.s32 	%r4427, %r966, %r414;
	mul.wide.s32 	%rd305, %r4427, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f431;

$L__BB0_520:
	add.s32 	%r967, %r958, -1;
	add.s32 	%r4428, %r967, %r960;
	mov.u32 	%r4429, 8;
	sub.s32 	%r4430, %r4429, %r1255;
	add.s32 	%r4431, %r4430, %r1256;
	mul.lo.s32 	%r968, %r4428, %r4431;
	add.s32 	%r969, %r959, -1;
	add.s32 	%r4432, %r969, %r968;
	mul.lo.s32 	%r4433, %r4432, %r58;
	sub.s32 	%r970, %r4433, %r1257;
	@%p28 bra 	$L__BB0_525;

	not.pred 	%p340, %p24;
	@%p340 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3174;
  cvt.f32.f16 %f432, low;}

	// end inline asm
	add.s32 	%r4435, %r970, %r399;
	mul.wide.s32 	%rd307, %r4435, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f432;

$L__BB0_523:
	not.pred 	%p341, %p26;
	@%p341 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3174;
  cvt.f32.f16 %f433, high;}

	// end inline asm
	add.s32 	%r4437, %r970, %r400;
	mul.wide.s32 	%rd309, %r4437, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f433;

$L__BB0_525:
	@%p28 bra 	$L__BB0_530;

	not.pred 	%p343, %p25;
	@%p343 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3251;
  cvt.f32.f16 %f434, low;}

	// end inline asm
	add.s32 	%r4439, %r970, %r413;
	mul.wide.s32 	%rd311, %r4439, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f434;

$L__BB0_528:
	not.pred 	%p344, %p27;
	@%p344 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3251;
  cvt.f32.f16 %f435, high;}

	// end inline asm
	add.s32 	%r4441, %r970, %r414;
	mul.wide.s32 	%rd313, %r4441, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f435;

$L__BB0_530:
	mov.u32 	%r4442, 8;
	sub.s32 	%r4443, %r4442, %r1255;
	add.s32 	%r4444, %r4443, %r1256;
	add.s32 	%r4445, %r967, %r963;
	mul.lo.s32 	%r971, %r4445, %r4444;
	add.s32 	%r4446, %r969, %r971;
	mul.lo.s32 	%r4447, %r4446, %r58;
	sub.s32 	%r972, %r4447, %r1257;
	@%p28 bra 	$L__BB0_535;

	not.pred 	%p346, %p24;
	@%p346 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3217;
  cvt.f32.f16 %f436, low;}

	// end inline asm
	add.s32 	%r4449, %r972, %r399;
	mul.wide.s32 	%rd315, %r4449, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f436;

$L__BB0_533:
	not.pred 	%p347, %p26;
	@%p347 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3217;
  cvt.f32.f16 %f437, high;}

	// end inline asm
	add.s32 	%r4451, %r972, %r400;
	mul.wide.s32 	%rd317, %r4451, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f437;

$L__BB0_535:
	@%p28 bra 	$L__BB0_540;

	not.pred 	%p349, %p25;
	@%p349 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3283;
  cvt.f32.f16 %f438, low;}

	// end inline asm
	add.s32 	%r4453, %r972, %r413;
	mul.wide.s32 	%rd319, %r4453, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f438;

$L__BB0_538:
	not.pred 	%p350, %p27;
	@%p350 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3283;
  cvt.f32.f16 %f439, high;}

	// end inline asm
	add.s32 	%r4455, %r972, %r414;
	mul.wide.s32 	%rd321, %r4455, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f439;

$L__BB0_540:
	add.s32 	%r4456, %r959, %r968;
	mul.lo.s32 	%r4457, %r4456, %r58;
	sub.s32 	%r973, %r4457, %r1257;
	@%p28 bra 	$L__BB0_545;

	not.pred 	%p352, %p24;
	@%p352 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f440, low;}

	// end inline asm
	add.s32 	%r4459, %r973, %r399;
	mul.wide.s32 	%rd323, %r4459, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f440;

$L__BB0_543:
	not.pred 	%p353, %p26;
	@%p353 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6504;
  cvt.f32.f16 %f441, high;}

	// end inline asm
	add.s32 	%r4461, %r973, %r400;
	mul.wide.s32 	%rd325, %r4461, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f441;

$L__BB0_545:
	@%p28 bra 	$L__BB0_550;

	not.pred 	%p355, %p25;
	@%p355 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f442, low;}

	// end inline asm
	add.s32 	%r4463, %r973, %r413;
	mul.wide.s32 	%rd327, %r4463, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f442;

$L__BB0_548:
	not.pred 	%p356, %p27;
	@%p356 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6503;
  cvt.f32.f16 %f443, high;}

	// end inline asm
	add.s32 	%r4465, %r973, %r414;
	mul.wide.s32 	%rd329, %r4465, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f443;

$L__BB0_550:
	add.s32 	%r4466, %r959, %r971;
	mul.lo.s32 	%r4467, %r4466, %r58;
	sub.s32 	%r974, %r4467, %r1257;
	@%p28 bra 	$L__BB0_555;

	not.pred 	%p358, %p24;
	@%p358 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f444, low;}

	// end inline asm
	add.s32 	%r4469, %r974, %r399;
	mul.wide.s32 	%rd331, %r4469, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f444;

$L__BB0_553:
	not.pred 	%p359, %p26;
	@%p359 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6502;
  cvt.f32.f16 %f445, high;}

	// end inline asm
	add.s32 	%r4471, %r974, %r400;
	mul.wide.s32 	%rd333, %r4471, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f445;

$L__BB0_555:
	@%p28 bra 	$L__BB0_560;

	not.pred 	%p361, %p25;
	@%p361 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f446, low;}

	// end inline asm
	add.s32 	%r4473, %r974, %r413;
	mul.wide.s32 	%rd335, %r4473, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f446;

$L__BB0_558:
	not.pred 	%p362, %p27;
	@%p362 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6501;
  cvt.f32.f16 %f447, high;}

	// end inline asm
	add.s32 	%r4475, %r974, %r414;
	mul.wide.s32 	%rd337, %r4475, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f447;

$L__BB0_560:
	mov.u32 	%r4476, 8;
	sub.s32 	%r4477, %r4476, %r1253;
	add.s32 	%r4478, %r4477, %r1254;
	add.s32 	%r975, %r963, %r4478;
	add.s32 	%r4479, %r967, %r975;
	sub.s32 	%r4480, %r4476, %r1255;
	add.s32 	%r4481, %r4480, %r1256;
	mul.lo.s32 	%r976, %r4479, %r4481;
	add.s32 	%r4482, %r959, %r976;
	mul.lo.s32 	%r4483, %r4482, %r58;
	sub.s32 	%r977, %r4483, %r1257;
	@%p28 bra 	$L__BB0_565;

	not.pred 	%p364, %p24;
	@%p364 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r832;
  cvt.f32.f16 %f448, low;}

	// end inline asm
	add.s32 	%r4485, %r977, %r399;
	mul.wide.s32 	%rd339, %r4485, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f448;

$L__BB0_563:
	not.pred 	%p365, %p26;
	@%p365 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r832;
  cvt.f32.f16 %f449, high;}

	// end inline asm
	add.s32 	%r4487, %r977, %r400;
	mul.wide.s32 	%rd341, %r4487, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f449;

$L__BB0_565:
	@%p28 bra 	$L__BB0_570;

	not.pred 	%p367, %p25;
	@%p367 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r844;
  cvt.f32.f16 %f450, low;}

	// end inline asm
	add.s32 	%r4489, %r977, %r413;
	mul.wide.s32 	%rd343, %r4489, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f450;

$L__BB0_568:
	not.pred 	%p368, %p27;
	@%p368 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r844;
  cvt.f32.f16 %f451, high;}

	// end inline asm
	add.s32 	%r4491, %r977, %r414;
	mul.wide.s32 	%rd345, %r4491, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f451;

$L__BB0_570:
	add.s32 	%r4492, %r965, %r968;
	mul.lo.s32 	%r4493, %r4492, %r58;
	sub.s32 	%r978, %r4493, %r1257;
	@%p28 bra 	$L__BB0_575;

	not.pred 	%p370, %p24;
	@%p370 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f452, low;}

	// end inline asm
	add.s32 	%r4495, %r978, %r399;
	mul.wide.s32 	%rd347, %r4495, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f452;

$L__BB0_573:
	not.pred 	%p371, %p26;
	@%p371 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6500;
  cvt.f32.f16 %f453, high;}

	// end inline asm
	add.s32 	%r4497, %r978, %r400;
	mul.wide.s32 	%rd349, %r4497, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f453;

$L__BB0_575:
	@%p28 bra 	$L__BB0_580;

	not.pred 	%p373, %p25;
	@%p373 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f454, low;}

	// end inline asm
	add.s32 	%r4499, %r978, %r413;
	mul.wide.s32 	%rd351, %r4499, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f454;

$L__BB0_578:
	not.pred 	%p374, %p27;
	@%p374 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6499;
  cvt.f32.f16 %f455, high;}

	// end inline asm
	add.s32 	%r4501, %r978, %r414;
	mul.wide.s32 	%rd353, %r4501, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f455;

$L__BB0_580:
	add.s32 	%r4502, %r965, %r971;
	mul.lo.s32 	%r4503, %r4502, %r58;
	sub.s32 	%r979, %r4503, %r1257;
	@%p28 bra 	$L__BB0_585;

	not.pred 	%p376, %p24;
	@%p376 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3555;
  cvt.f32.f16 %f456, low;}

	// end inline asm
	add.s32 	%r4505, %r979, %r399;
	mul.wide.s32 	%rd355, %r4505, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f456;

$L__BB0_583:
	not.pred 	%p377, %p26;
	@%p377 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3555;
  cvt.f32.f16 %f457, high;}

	// end inline asm
	add.s32 	%r4507, %r979, %r400;
	mul.wide.s32 	%rd357, %r4507, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f457;

$L__BB0_585:
	@%p28 bra 	$L__BB0_590;

	not.pred 	%p379, %p25;
	@%p379 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3636;
  cvt.f32.f16 %f458, low;}

	// end inline asm
	add.s32 	%r4509, %r979, %r413;
	mul.wide.s32 	%rd359, %r4509, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f458;

$L__BB0_588:
	not.pred 	%p380, %p27;
	@%p380 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3636;
  cvt.f32.f16 %f459, high;}

	// end inline asm
	add.s32 	%r4511, %r979, %r414;
	mul.wide.s32 	%rd361, %r4511, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f459;

$L__BB0_590:
	add.s32 	%r4512, %r965, %r976;
	mul.lo.s32 	%r4513, %r4512, %r58;
	sub.s32 	%r980, %r4513, %r1257;
	@%p28 bra 	$L__BB0_595;

	not.pred 	%p382, %p24;
	@%p382 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r856;
  cvt.f32.f16 %f460, low;}

	// end inline asm
	add.s32 	%r4515, %r980, %r399;
	mul.wide.s32 	%rd363, %r4515, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f460;

$L__BB0_593:
	not.pred 	%p383, %p26;
	@%p383 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r856;
  cvt.f32.f16 %f461, high;}

	// end inline asm
	add.s32 	%r4517, %r980, %r400;
	mul.wide.s32 	%rd365, %r4517, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f461;

$L__BB0_595:
	@%p28 bra 	$L__BB0_600;

	not.pred 	%p385, %p25;
	@%p385 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r868;
  cvt.f32.f16 %f462, low;}

	// end inline asm
	add.s32 	%r4519, %r980, %r413;
	mul.wide.s32 	%rd367, %r4519, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f462;

$L__BB0_598:
	not.pred 	%p386, %p27;
	@%p386 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r868;
  cvt.f32.f16 %f463, high;}

	// end inline asm
	add.s32 	%r4521, %r980, %r414;
	mul.wide.s32 	%rd369, %r4521, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f463;

$L__BB0_600:
	add.s32 	%r981, %r959, 2;
	add.s32 	%r4522, %r981, %r968;
	mul.lo.s32 	%r4523, %r4522, %r58;
	sub.s32 	%r982, %r4523, %r1257;
	@%p28 bra 	$L__BB0_605;

	not.pred 	%p388, %p24;
	@%p388 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3696;
  cvt.f32.f16 %f464, low;}

	// end inline asm
	add.s32 	%r4525, %r982, %r399;
	mul.wide.s32 	%rd371, %r4525, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f464;

$L__BB0_603:
	not.pred 	%p389, %p26;
	@%p389 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3696;
  cvt.f32.f16 %f465, high;}

	// end inline asm
	add.s32 	%r4527, %r982, %r400;
	mul.wide.s32 	%rd373, %r4527, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f465;

$L__BB0_605:
	@%p28 bra 	$L__BB0_610;

	not.pred 	%p391, %p25;
	@%p391 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3730;
  cvt.f32.f16 %f466, low;}

	// end inline asm
	add.s32 	%r4529, %r982, %r413;
	mul.wide.s32 	%rd375, %r4529, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f466;

$L__BB0_608:
	not.pred 	%p392, %p27;
	@%p392 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3730;
  cvt.f32.f16 %f467, high;}

	// end inline asm
	add.s32 	%r4531, %r982, %r414;
	mul.wide.s32 	%rd377, %r4531, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f467;

$L__BB0_610:
	mov.u32 	%r4532, 8;
	sub.s32 	%r4533, %r4532, %r1255;
	add.s32 	%r4534, %r4533, %r1256;
	mul.lo.s32 	%r983, %r4404, %r4534;
	add.s32 	%r4536, %r969, %r983;
	mul.lo.s32 	%r4537, %r4536, %r58;
	sub.s32 	%r984, %r4537, %r1257;
	@%p28 bra 	$L__BB0_615;

	not.pred 	%p394, %p24;
	@%p394 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f468, low;}

	// end inline asm
	add.s32 	%r4539, %r984, %r399;
	mul.wide.s32 	%rd379, %r4539, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f468;

$L__BB0_613:
	not.pred 	%p395, %p26;
	@%p395 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6498;
  cvt.f32.f16 %f469, high;}

	// end inline asm
	add.s32 	%r4541, %r984, %r400;
	mul.wide.s32 	%rd381, %r4541, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f469;

$L__BB0_615:
	@%p28 bra 	$L__BB0_620;

	not.pred 	%p397, %p25;
	@%p397 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f470, low;}

	// end inline asm
	add.s32 	%r4543, %r984, %r413;
	mul.wide.s32 	%rd383, %r4543, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f470;

$L__BB0_618:
	not.pred 	%p398, %p27;
	@%p398 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6497;
  cvt.f32.f16 %f471, high;}

	// end inline asm
	add.s32 	%r4545, %r984, %r414;
	mul.wide.s32 	%rd385, %r4545, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f471;

$L__BB0_620:
	mov.u32 	%r4546, 8;
	sub.s32 	%r4547, %r4546, %r1255;
	add.s32 	%r4548, %r4547, %r1256;
	add.s32 	%r4549, %r958, %r975;
	mul.lo.s32 	%r985, %r4549, %r4548;
	add.s32 	%r4550, %r969, %r985;
	mul.lo.s32 	%r4551, %r4550, %r58;
	sub.s32 	%r986, %r4551, %r1257;
	@%p28 bra 	$L__BB0_625;

	not.pred 	%p400, %p24;
	@%p400 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r886;
  cvt.f32.f16 %f472, low;}

	// end inline asm
	add.s32 	%r4553, %r986, %r399;
	mul.wide.s32 	%rd387, %r4553, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f472;

$L__BB0_623:
	not.pred 	%p401, %p26;
	@%p401 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r886;
  cvt.f32.f16 %f473, high;}

	// end inline asm
	add.s32 	%r4555, %r986, %r400;
	mul.wide.s32 	%rd389, %r4555, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f473;

$L__BB0_625:
	@%p28 bra 	$L__BB0_630;

	not.pred 	%p403, %p25;
	@%p403 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r892;
  cvt.f32.f16 %f474, low;}

	// end inline asm
	add.s32 	%r4557, %r986, %r413;
	mul.wide.s32 	%rd391, %r4557, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f474;

$L__BB0_628:
	not.pred 	%p404, %p27;
	@%p404 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r892;
  cvt.f32.f16 %f475, high;}

	// end inline asm
	add.s32 	%r4559, %r986, %r414;
	mul.wide.s32 	%rd393, %r4559, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f475;

$L__BB0_630:
	mov.u32 	%r4560, 8;
	sub.s32 	%r4561, %r4560, %r1255;
	add.s32 	%r4562, %r4561, %r1256;
	mul.lo.s32 	%r987, %r4387, %r4562;
	add.s32 	%r4564, %r959, %r987;
	mul.lo.s32 	%r4565, %r4564, %r58;
	sub.s32 	%r988, %r4565, %r1257;
	@%p28 bra 	$L__BB0_635;

	not.pred 	%p406, %p24;
	@%p406 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f476, low;}

	// end inline asm
	add.s32 	%r4567, %r988, %r399;
	mul.wide.s32 	%rd395, %r4567, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f476;

$L__BB0_633:
	not.pred 	%p407, %p26;
	@%p407 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6496;
  cvt.f32.f16 %f477, high;}

	// end inline asm
	add.s32 	%r4569, %r988, %r400;
	mul.wide.s32 	%rd397, %r4569, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f477;

$L__BB0_635:
	@%p28 bra 	$L__BB0_640;

	not.pred 	%p409, %p25;
	@%p409 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f478, low;}

	// end inline asm
	add.s32 	%r4571, %r988, %r413;
	mul.wide.s32 	%rd399, %r4571, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f478;

$L__BB0_638:
	not.pred 	%p410, %p27;
	@%p410 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6495;
  cvt.f32.f16 %f479, high;}

	// end inline asm
	add.s32 	%r4573, %r988, %r414;
	mul.wide.s32 	%rd401, %r4573, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f479;

$L__BB0_640:
	add.s32 	%r4574, %r959, %r983;
	mul.lo.s32 	%r4575, %r4574, %r58;
	sub.s32 	%r989, %r4575, %r1257;
	@%p28 bra 	$L__BB0_645;

	not.pred 	%p412, %p24;
	@%p412 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f480, low;}

	// end inline asm
	add.s32 	%r4577, %r989, %r399;
	mul.wide.s32 	%rd403, %r4577, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f480;

$L__BB0_643:
	not.pred 	%p413, %p26;
	@%p413 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6494;
  cvt.f32.f16 %f481, high;}

	// end inline asm
	add.s32 	%r4579, %r989, %r400;
	mul.wide.s32 	%rd405, %r4579, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f481;

$L__BB0_645:
	@%p28 bra 	$L__BB0_650;

	not.pred 	%p415, %p25;
	@%p415 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6493;
  cvt.f32.f16 %f482, low;}

	// end inline asm
	add.s32 	%r4581, %r989, %r413;
	mul.wide.s32 	%rd407, %r4581, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f482;

$L__BB0_648:
	not.pred 	%p416, %p27;
	@%p416 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6493;
  cvt.f32.f16 %f483, high;}

	// end inline asm
	add.s32 	%r4583, %r989, %r414;
	mul.wide.s32 	%rd409, %r4583, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f483;

$L__BB0_650:
	add.s32 	%r4584, %r959, %r985;
	mul.lo.s32 	%r4585, %r4584, %r58;
	sub.s32 	%r990, %r4585, %r1257;
	@%p28 bra 	$L__BB0_655;

	not.pred 	%p418, %p24;
	@%p418 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6492;
  cvt.f32.f16 %f484, low;}

	// end inline asm
	add.s32 	%r4587, %r990, %r399;
	mul.wide.s32 	%rd411, %r4587, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f484;

$L__BB0_653:
	not.pred 	%p419, %p26;
	@%p419 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6492;
  cvt.f32.f16 %f485, high;}

	// end inline asm
	add.s32 	%r4589, %r990, %r400;
	mul.wide.s32 	%rd413, %r4589, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f485;

$L__BB0_655:
	@%p28 bra 	$L__BB0_660;

	not.pred 	%p421, %p25;
	@%p421 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6491;
  cvt.f32.f16 %f486, low;}

	// end inline asm
	add.s32 	%r4591, %r990, %r413;
	mul.wide.s32 	%rd415, %r4591, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f486;

$L__BB0_658:
	not.pred 	%p422, %p27;
	@%p422 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6491;
  cvt.f32.f16 %f487, high;}

	// end inline asm
	add.s32 	%r4593, %r990, %r414;
	mul.wide.s32 	%rd417, %r4593, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f487;

$L__BB0_660:
	add.s32 	%r4594, %r965, %r987;
	mul.lo.s32 	%r4595, %r4594, %r58;
	sub.s32 	%r991, %r4595, %r1257;
	@%p28 bra 	$L__BB0_665;

	not.pred 	%p424, %p24;
	@%p424 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6490;
  cvt.f32.f16 %f488, low;}

	// end inline asm
	add.s32 	%r4597, %r991, %r399;
	mul.wide.s32 	%rd419, %r4597, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f488;

$L__BB0_663:
	not.pred 	%p425, %p26;
	@%p425 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6490;
  cvt.f32.f16 %f489, high;}

	// end inline asm
	add.s32 	%r4599, %r991, %r400;
	mul.wide.s32 	%rd421, %r4599, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f489;

$L__BB0_665:
	@%p28 bra 	$L__BB0_670;

	not.pred 	%p427, %p25;
	@%p427 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6489;
  cvt.f32.f16 %f490, low;}

	// end inline asm
	add.s32 	%r4601, %r991, %r413;
	mul.wide.s32 	%rd423, %r4601, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f490;

$L__BB0_668:
	not.pred 	%p428, %p27;
	@%p428 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6489;
  cvt.f32.f16 %f491, high;}

	// end inline asm
	add.s32 	%r4603, %r991, %r414;
	mul.wide.s32 	%rd425, %r4603, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f491;

$L__BB0_670:
	add.s32 	%r4604, %r965, %r983;
	mul.lo.s32 	%r4605, %r4604, %r58;
	sub.s32 	%r992, %r4605, %r1257;
	@%p28 bra 	$L__BB0_675;

	not.pred 	%p430, %p24;
	@%p430 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6488;
  cvt.f32.f16 %f492, low;}

	// end inline asm
	add.s32 	%r4607, %r992, %r399;
	mul.wide.s32 	%rd427, %r4607, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f492;

$L__BB0_673:
	not.pred 	%p431, %p26;
	@%p431 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6488;
  cvt.f32.f16 %f493, high;}

	// end inline asm
	add.s32 	%r4609, %r992, %r400;
	mul.wide.s32 	%rd429, %r4609, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f493;

$L__BB0_675:
	@%p28 bra 	$L__BB0_680;

	not.pred 	%p433, %p25;
	@%p433 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6487;
  cvt.f32.f16 %f494, low;}

	// end inline asm
	add.s32 	%r4611, %r992, %r413;
	mul.wide.s32 	%rd431, %r4611, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f494;

$L__BB0_678:
	not.pred 	%p434, %p27;
	@%p434 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6487;
  cvt.f32.f16 %f495, high;}

	// end inline asm
	add.s32 	%r4613, %r992, %r414;
	mul.wide.s32 	%rd433, %r4613, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f495;

$L__BB0_680:
	add.s32 	%r4614, %r965, %r985;
	mul.lo.s32 	%r4615, %r4614, %r58;
	sub.s32 	%r993, %r4615, %r1257;
	@%p28 bra 	$L__BB0_685;

	not.pred 	%p436, %p24;
	@%p436 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6486;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r4617, %r993, %r399;
	mul.wide.s32 	%rd435, %r4617, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f496;

$L__BB0_683:
	not.pred 	%p437, %p26;
	@%p437 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6486;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r4619, %r993, %r400;
	mul.wide.s32 	%rd437, %r4619, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f497;

$L__BB0_685:
	@%p28 bra 	$L__BB0_690;

	not.pred 	%p439, %p25;
	@%p439 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6485;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r4621, %r993, %r413;
	mul.wide.s32 	%rd439, %r4621, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f498;

$L__BB0_688:
	not.pred 	%p440, %p27;
	@%p440 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6485;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r4623, %r993, %r414;
	mul.wide.s32 	%rd441, %r4623, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f499;

$L__BB0_690:
	add.s32 	%r4624, %r981, %r985;
	mul.lo.s32 	%r4625, %r4624, %r58;
	sub.s32 	%r994, %r4625, %r1257;
	@%p28 bra 	$L__BB0_695;

	not.pred 	%p442, %p24;
	@%p442 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r941;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r4627, %r994, %r399;
	mul.wide.s32 	%rd443, %r4627, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f500;

$L__BB0_693:
	not.pred 	%p443, %p26;
	@%p443 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r941;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r4629, %r994, %r400;
	mul.wide.s32 	%rd445, %r4629, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f501;

$L__BB0_695:
	@%p28 bra 	$L__BB0_700;

	not.pred 	%p445, %p25;
	@%p445 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r942;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r4631, %r994, %r413;
	mul.wide.s32 	%rd447, %r4631, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f502;

$L__BB0_698:
	not.pred 	%p446, %p27;
	@%p446 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r942;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r4633, %r994, %r414;
	mul.wide.s32 	%rd449, %r4633, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f503;

$L__BB0_700:
	add.s32 	%r995, %r958, 1;
	add.s32 	%r4634, %r995, %r963;
	mov.u32 	%r4635, 8;
	sub.s32 	%r4636, %r4635, %r1255;
	add.s32 	%r4637, %r4636, %r1256;
	mad.lo.s32 	%r4638, %r4634, %r4637, %r959;
	mul.lo.s32 	%r4639, %r4638, %r58;
	sub.s32 	%r996, %r4639, %r1257;
	@%p28 bra 	$L__BB0_705;

	not.pred 	%p448, %p24;
	@%p448 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6484;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r4641, %r996, %r399;
	mul.wide.s32 	%rd451, %r4641, 4;
	add.s64 	%rd452, %rd27, %rd451;
	st.global.f32 	[%rd452], %f504;

$L__BB0_703:
	not.pred 	%p449, %p26;
	@%p449 bra 	$L__BB0_705;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6484;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r4643, %r996, %r400;
	mul.wide.s32 	%rd453, %r4643, 4;
	add.s64 	%rd454, %rd27, %rd453;
	st.global.f32 	[%rd454], %f505;

$L__BB0_705:
	@%p28 bra 	$L__BB0_710;

	not.pred 	%p451, %p25;
	@%p451 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6483;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r4645, %r996, %r413;
	mul.wide.s32 	%rd455, %r4645, 4;
	add.s64 	%rd456, %rd27, %rd455;
	st.global.f32 	[%rd456], %f506;

$L__BB0_708:
	not.pred 	%p452, %p27;
	@%p452 bra 	$L__BB0_710;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6483;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r4647, %r996, %r414;
	mul.wide.s32 	%rd457, %r4647, 4;
	add.s64 	%rd458, %rd27, %rd457;
	st.global.f32 	[%rd458], %f507;

$L__BB0_710:
	mov.u32 	%r4648, 8;
	sub.s32 	%r4649, %r4648, %r1255;
	add.s32 	%r4650, %r4649, %r1256;
	add.s32 	%r4651, %r995, %r975;
	mul.lo.s32 	%r997, %r4651, %r4650;
	add.s32 	%r4652, %r959, %r997;
	mul.lo.s32 	%r4653, %r4652, %r58;
	sub.s32 	%r998, %r4653, %r1257;
	@%p28 bra 	$L__BB0_715;

	not.pred 	%p454, %p24;
	@%p454 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6482;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r4655, %r998, %r399;
	mul.wide.s32 	%rd459, %r4655, 4;
	add.s64 	%rd460, %rd27, %rd459;
	st.global.f32 	[%rd460], %f508;

$L__BB0_713:
	not.pred 	%p455, %p26;
	@%p455 bra 	$L__BB0_715;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6482;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r4657, %r998, %r400;
	mul.wide.s32 	%rd461, %r4657, 4;
	add.s64 	%rd462, %rd27, %rd461;
	st.global.f32 	[%rd462], %f509;

$L__BB0_715:
	@%p28 bra 	$L__BB0_720;

	not.pred 	%p457, %p25;
	@%p457 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6481;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r4659, %r998, %r413;
	mul.wide.s32 	%rd463, %r4659, 4;
	add.s64 	%rd464, %rd27, %rd463;
	st.global.f32 	[%rd464], %f510;

$L__BB0_718:
	not.pred 	%p458, %p27;
	@%p458 bra 	$L__BB0_720;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6481;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r4661, %r998, %r414;
	mul.wide.s32 	%rd465, %r4661, 4;
	add.s64 	%rd466, %rd27, %rd465;
	st.global.f32 	[%rd466], %f511;

$L__BB0_720:
	add.s32 	%r4662, %r965, %r997;
	mul.lo.s32 	%r4663, %r4662, %r58;
	sub.s32 	%r999, %r4663, %r1257;
	@%p28 bra 	$L__BB0_725;

	not.pred 	%p460, %p24;
	@%p460 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6480;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r4665, %r999, %r399;
	mul.wide.s32 	%rd467, %r4665, 4;
	add.s64 	%rd468, %rd27, %rd467;
	st.global.f32 	[%rd468], %f512;

$L__BB0_723:
	not.pred 	%p461, %p26;
	@%p461 bra 	$L__BB0_725;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6480;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r4667, %r999, %r400;
	mul.wide.s32 	%rd469, %r4667, 4;
	add.s64 	%rd470, %rd27, %rd469;
	st.global.f32 	[%rd470], %f513;

$L__BB0_725:
	@%p28 bra 	$L__BB0_730;

	not.pred 	%p463, %p25;
	@%p463 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6479;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r4669, %r999, %r413;
	mul.wide.s32 	%rd471, %r4669, 4;
	add.s64 	%rd472, %rd27, %rd471;
	st.global.f32 	[%rd472], %f514;

$L__BB0_728:
	not.pred 	%p464, %p27;
	@%p464 bra 	$L__BB0_730;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6479;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r4671, %r999, %r414;
	mul.wide.s32 	%rd473, %r4671, 4;
	add.s64 	%rd474, %rd27, %rd473;
	st.global.f32 	[%rd474], %f515;

$L__BB0_730:
	bar.sync 	0;
	mov.f32 	%f563, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4672, {low,high};}

	// end inline asm
	selp.b32 	%r4674, %r6426, %r4672, %p28;
	// begin inline asm
	{mul.f16x2 %r4673,%r4674,%r6476;
}
	// end inline asm
	selp.b32 	%r4677, %r6430, %r4672, %p28;
	// begin inline asm
	{mul.f16x2 %r4676,%r4677,%r6471;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4679, {low,high};}

	// end inline asm
	selp.b32 	%r4681, %r6426, %r4679, %p28;
	// begin inline asm
	{mul.f16x2 %r4680,%r4681,%r6462;
}
	// end inline asm
	selp.b32 	%r4684, %r6430, %r4679, %p28;
	// begin inline asm
	{mul.f16x2 %r4683,%r4684,%r6459;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4686, {low,high};}

	// end inline asm
	selp.b32 	%r4688, %r6426, %r4686, %p28;
	// begin inline asm
	{mul.f16x2 %r4687,%r4688,%r6455;
}
	// end inline asm
	selp.b32 	%r4691, %r6430, %r4686, %p28;
	// begin inline asm
	{mul.f16x2 %r4690,%r4691,%r6454;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4693, {low,high};}

	// end inline asm
	selp.b32 	%r4695, %r6426, %r4693, %p28;
	// begin inline asm
	{mul.f16x2 %r4694,%r4695,%r6458;
}
	// end inline asm
	selp.b32 	%r4698, %r6430, %r4693, %p28;
	// begin inline asm
	{mul.f16x2 %r4697,%r4698,%r6457;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4700, {low,high};}

	// end inline asm
	selp.b32 	%r4702, %r6426, %r4700, %p28;
	// begin inline asm
	{mul.f16x2 %r4701,%r4702,%r6456;
}
	// end inline asm
	selp.b32 	%r4705, %r6430, %r4700, %p28;
	// begin inline asm
	{mul.f16x2 %r4704,%r4705,%r6453;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4707, {low,high};}

	// end inline asm
	selp.b32 	%r4709, %r6426, %r4707, %p28;
	// begin inline asm
	{mul.f16x2 %r4708,%r4709,%r6452;
}
	// end inline asm
	selp.b32 	%r4712, %r6430, %r4707, %p28;
	// begin inline asm
	{mul.f16x2 %r4711,%r4712,%r6451;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4714, {low,high};}

	// end inline asm
	selp.b32 	%r4716, %r6426, %r4714, %p28;
	// begin inline asm
	{mul.f16x2 %r4715,%r4716,%r6450;
}
	// end inline asm
	selp.b32 	%r4719, %r6430, %r4714, %p28;
	// begin inline asm
	{mul.f16x2 %r4718,%r4719,%r6447;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4721, {low,high};}

	// end inline asm
	selp.b32 	%r4723, %r6426, %r4721, %p28;
	// begin inline asm
	{mul.f16x2 %r4722,%r4723,%r6444;
}
	// end inline asm
	selp.b32 	%r4726, %r6430, %r4721, %p28;
	// begin inline asm
	{mul.f16x2 %r4725,%r4726,%r6443;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4728, {low,high};}

	// end inline asm
	selp.b32 	%r4730, %r6426, %r4728, %p28;
	// begin inline asm
	{mul.f16x2 %r4729,%r4730,%r1717;
}
	// end inline asm
	selp.b32 	%r4733, %r6430, %r4728, %p28;
	// begin inline asm
	{mul.f16x2 %r4732,%r4733,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4735, {low,high};}

	// end inline asm
	selp.b32 	%r4737, %r6426, %r4735, %p28;
	// begin inline asm
	{mul.f16x2 %r4736,%r4737,%r1717;
}
	// end inline asm
	selp.b32 	%r4740, %r6430, %r4735, %p28;
	// begin inline asm
	{mul.f16x2 %r4739,%r4740,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4742, {low,high};}

	// end inline asm
	selp.b32 	%r4744, %r6426, %r4742, %p28;
	// begin inline asm
	{mul.f16x2 %r4743,%r4744,%r6439;
}
	// end inline asm
	selp.b32 	%r4747, %r6430, %r4742, %p28;
	// begin inline asm
	{mul.f16x2 %r4746,%r4747,%r6438;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4749, {low,high};}

	// end inline asm
	selp.b32 	%r4751, %r6426, %r4749, %p28;
	// begin inline asm
	{mul.f16x2 %r4750,%r4751,%r6442;
}
	// end inline asm
	selp.b32 	%r4754, %r6430, %r4749, %p28;
	// begin inline asm
	{mul.f16x2 %r4753,%r4754,%r6441;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4756, {low,high};}

	// end inline asm
	selp.b32 	%r4758, %r6426, %r4756, %p28;
	// begin inline asm
	{mul.f16x2 %r4757,%r4758,%r6440;
}
	// end inline asm
	selp.b32 	%r4761, %r6430, %r4756, %p28;
	// begin inline asm
	{mul.f16x2 %r4760,%r4761,%r6437;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4763, {low,high};}

	// end inline asm
	selp.b32 	%r4765, %r6426, %r4763, %p28;
	// begin inline asm
	{mul.f16x2 %r4764,%r4765,%r6434;
}
	// end inline asm
	selp.b32 	%r4768, %r6430, %r4763, %p28;
	// begin inline asm
	{mul.f16x2 %r4767,%r4768,%r6433;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4770, {low,high};}

	// end inline asm
	selp.b32 	%r4772, %r6426, %r4770, %p28;
	// begin inline asm
	{mul.f16x2 %r4771,%r4772,%r6436;
}
	// end inline asm
	selp.b32 	%r4775, %r6430, %r4770, %p28;
	// begin inline asm
	{mul.f16x2 %r4774,%r4775,%r6435;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4777, {low,high};}

	// end inline asm
	selp.b32 	%r4779, %r6426, %r4777, %p28;
	// begin inline asm
	{mul.f16x2 %r4778,%r4779,%r1717;
}
	// end inline asm
	selp.b32 	%r4782, %r6430, %r4777, %p28;
	// begin inline asm
	{mul.f16x2 %r4781,%r4782,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4784, {low,high};}

	// end inline asm
	selp.b32 	%r4786, %r6426, %r4784, %p28;
	// begin inline asm
	{mul.f16x2 %r4785,%r4786,%r1717;
}
	// end inline asm
	selp.b32 	%r4789, %r6430, %r4784, %p28;
	// begin inline asm
	{mul.f16x2 %r4788,%r4789,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4791, {low,high};}

	// end inline asm
	selp.b32 	%r4793, %r6426, %r4791, %p28;
	// begin inline asm
	{mul.f16x2 %r4792,%r4793,%r1717;
}
	// end inline asm
	selp.b32 	%r4796, %r6430, %r4791, %p28;
	// begin inline asm
	{mul.f16x2 %r4795,%r4796,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4798, {low,high};}

	// end inline asm
	selp.b32 	%r4800, %r6426, %r4798, %p28;
	// begin inline asm
	{mul.f16x2 %r4799,%r4800,%r6432;
}
	// end inline asm
	selp.b32 	%r4803, %r6430, %r4798, %p28;
	// begin inline asm
	{mul.f16x2 %r4802,%r4803,%r6431;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4805, {low,high};}

	// end inline asm
	selp.b32 	%r4807, %r6426, %r4805, %p28;
	// begin inline asm
	{mul.f16x2 %r4806,%r4807,%r1717;
}
	// end inline asm
	selp.b32 	%r4810, %r6430, %r4805, %p28;
	// begin inline asm
	{mul.f16x2 %r4809,%r4810,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4812, {low,high};}

	// end inline asm
	selp.b32 	%r4814, %r6426, %r4812, %p28;
	// begin inline asm
	{mul.f16x2 %r4813,%r4814,%r1717;
}
	// end inline asm
	selp.b32 	%r4817, %r6430, %r4812, %p28;
	// begin inline asm
	{mul.f16x2 %r4816,%r4817,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4819, {low,high};}

	// end inline asm
	selp.b32 	%r4821, %r6426, %r4819, %p28;
	// begin inline asm
	{mul.f16x2 %r4820,%r4821,%r1717;
}
	// end inline asm
	selp.b32 	%r4824, %r6430, %r4819, %p28;
	// begin inline asm
	{mul.f16x2 %r4823,%r4824,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4826, {low,high};}

	// end inline asm
	selp.b32 	%r4828, %r6426, %r4826, %p28;
	// begin inline asm
	{mul.f16x2 %r4827,%r4828,%r1717;
}
	// end inline asm
	selp.b32 	%r4831, %r6430, %r4826, %p28;
	// begin inline asm
	{mul.f16x2 %r4830,%r4831,%r1717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r4833, {low,high};}

	// end inline asm
	selp.b32 	%r4835, %r6426, %r4833, %p28;
	// begin inline asm
	{mul.f16x2 %r4834,%r4835,%r1717;
}
	// end inline asm
	selp.b32 	%r4838, %r6430, %r4833, %p28;
	// begin inline asm
	{mul.f16x2 %r4837,%r4838,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4840,%r6502,%r2984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4843,%r3095,%r2941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4846,%r4840,%r4843;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4849,%r6340,%r4846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4852,%r4673,%r4849;
}
	// end inline asm
	selp.b32 	%r6472, %r4673, %r4852, %p28;
	// begin inline asm
	{sub.f16x2 %r4855,%r6501,%r3050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4858,%r3129,%r3018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4861,%r4855,%r4858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4864,%r6340,%r4861;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4867,%r4676,%r4864;
}
	// end inline asm
	selp.b32 	%r6469, %r4676, %r4867, %p28;
	// begin inline asm
	{sub.f16x2 %r4870,%r6498,%r3217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4873,%r6504,%r3174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r4870,%r4873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4879,%r6340,%r4876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4882,%r4680,%r4879;
}
	// end inline asm
	selp.b32 	%r6475, %r4680, %r4882, %p28;
	// begin inline asm
	{sub.f16x2 %r4885,%r6497,%r3283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4888,%r6503,%r3251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r4885,%r4888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4894,%r6340,%r4891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4897,%r4683,%r4894;
}
	// end inline asm
	selp.b32 	%r6470, %r4683, %r4897, %p28;
	// begin inline asm
	{sub.f16x2 %r4900,%r6501,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4903,%r6425,%r4900;
}
	// end inline asm
	@%p28 bra 	$L__BB0_732;
	bra.uni 	$L__BB0_731;

$L__BB0_732:
	// begin inline asm
	{neg.f16x2 %r6622,%r4687;
}
	// end inline asm
	bra.uni 	$L__BB0_733;

$L__BB0_731:
	// begin inline asm
	{mul.f16x2 %r6622,%r6426,%r4900;
}
	// end inline asm

$L__BB0_733:
	mov.u32 	%r4914, 31;
	mov.u32 	%r4916, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4912,%r6622,%r4914,%r1796,%r4916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4917,%r4903,%r4912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4920,%r856,%r832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4923,%r4920,%r4917;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4926,%r6340,%r4923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6474,%r4687,%r4926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r6503,%r6504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4935,%r6425,%r4932;
}
	// end inline asm
	mov.u32 	%r6623, %r4694;
	@%p28 bra 	$L__BB0_735;

	// begin inline asm
	{mul.f16x2 %r6623,%r6426,%r4932;
}
	// end inline asm

$L__BB0_735:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4944,%r6623,%r4914,%r1796,%r4916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4949,%r4935,%r4944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r6492,%r832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4955,%r4949,%r4952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4958,%r6340,%r4955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6478,%r4694,%r4958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4964,%r6494,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4967,%r6500,%r6504;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4970,%r4964,%r4967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4973,%r6340,%r4970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4976,%r4701,%r4973;
}
	// end inline asm
	selp.b32 	%r6476, %r4701, %r4976, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6502;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4981,%r6502,%r434,%r1796,%r4916;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4981;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4987, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4988,%r4987,%r6501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4991,%r6429,%r4988;
}
	// end inline asm
	@%p28 bra 	$L__BB0_737;
	bra.uni 	$L__BB0_736;

$L__BB0_737:
	// begin inline asm
	{neg.f16x2 %r6624,%r4690;
}
	// end inline asm
	bra.uni 	$L__BB0_738;

$L__BB0_736:
	// begin inline asm
	{mul.f16x2 %r6624,%r6430,%r4988;
}
	// end inline asm

$L__BB0_738:
	mov.u32 	%r5006, 31;
	mov.u32 	%r5030, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5004,%r6624,%r5006,%r1796,%r5030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5009,%r4991,%r5004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5012,%r868,%r844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5015,%r5012,%r5009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5018,%r6340,%r5015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6473,%r4690,%r5018;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6504;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5026,%r6504,%r434,%r1796,%r5030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5026;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5032, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5033,%r5032,%r6503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5036,%r6429,%r5033;
}
	// end inline asm
	mov.u32 	%r6625, %r4697;
	@%p28 bra 	$L__BB0_740;

	// begin inline asm
	{mul.f16x2 %r6625,%r6430,%r5033;
}
	// end inline asm

$L__BB0_740:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5047,%r6625,%r5006,%r1796,%r5030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5052,%r5036,%r5047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5055,%r6491,%r844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5058,%r5052,%r5055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5061,%r6340,%r5058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6477,%r4697,%r5061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5067,%r6493,%r6501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5070,%r6499,%r6503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5073,%r5067,%r5070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5076,%r6340,%r5073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5079,%r4704,%r5076;
}
	// end inline asm
	selp.b32 	%r6471, %r4704, %r5079, %p28;
	// begin inline asm
	{sub.f16x2 %r5082,%r6499,%r6500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5085,%r6425,%r5082;
}
	// end inline asm
	mov.u32 	%r6626, %r4708;
	@%p28 bra 	$L__BB0_742;

	// begin inline asm
	{mul.f16x2 %r6626,%r6426,%r5082;
}
	// end inline asm

$L__BB0_742:
	mov.u32 	%r5096, 31;
	mov.u32 	%r5135, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5094,%r6626,%r5096,%r1796,%r5135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5099,%r5085,%r5094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5102,%r6486,%r856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5105,%r5099,%r5102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5108,%r6340,%r5105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6468,%r4708,%r5108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5114,%r6488,%r3555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5117,%r3696,%r6500;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5120,%r5114,%r5117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5123,%r6340,%r5120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5126,%r4715,%r5123;
}
	// end inline asm
	selp.b32 	%r6466, %r4715, %r5126, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6500;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5131,%r6500,%r434,%r1796,%r5135;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5131;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5137, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5138,%r5137,%r6499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5141,%r6429,%r5138;
}
	// end inline asm
	mov.u32 	%r6627, %r4711;
	@%p28 bra 	$L__BB0_744;

	// begin inline asm
	{mul.f16x2 %r6627,%r6430,%r5138;
}
	// end inline asm

$L__BB0_744:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5152,%r6627,%r5096,%r1796,%r5135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5157,%r5141,%r5152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5160,%r6485,%r868;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5163,%r5157,%r5160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5166,%r6340,%r5163;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r4711,%r5166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5172,%r6487,%r3636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5175,%r3730,%r6499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5178,%r5172,%r5175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5181,%r6340,%r5178;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5184,%r4718,%r5181;
}
	// end inline asm
	selp.b32 	%r6465, %r4718, %r5184, %p28;
	// begin inline asm
	{sub.f16x2 %r5187,%r6497,%r6498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5190,%r6425,%r5187;
}
	// end inline asm
	@%p28 bra 	$L__BB0_746;
	bra.uni 	$L__BB0_745;

$L__BB0_746:
	// begin inline asm
	{neg.f16x2 %r6628,%r4722;
}
	// end inline asm
	bra.uni 	$L__BB0_747;

$L__BB0_745:
	// begin inline asm
	{mul.f16x2 %r6628,%r6426,%r5187;
}
	// end inline asm

$L__BB0_747:
	mov.u32 	%r5203, 31;
	mov.u32 	%r5205, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5201,%r6628,%r5203,%r1796,%r5205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5206,%r5190,%r5201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5209,%r6492,%r886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5212,%r5209,%r5206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5215,%r6340,%r5212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6461,%r4722,%r5215;
}
	// end inline asm
	mov.u32 	%r6629, %r4729;
	@%p28 bra 	$L__BB0_749;

	mov.u32 	%r6629, %r6239;

$L__BB0_749:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5233,%r6629,%r5203,%r1796,%r5205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5238,%r5224,%r5233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5241,%r1717,%r886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5244,%r5238,%r5241;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5247,%r6340,%r5244;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r4729,%r5247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5253,%r1717,%r6498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5256,%r6496,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5259,%r5253,%r5256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5262,%r6340,%r5259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5265,%r4736,%r5262;
}
	// end inline asm
	selp.b32 	%r6462, %r4736, %r5265, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6498;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5270,%r6498,%r434,%r1796,%r5205;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5270;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5276, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5277,%r5276,%r6497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5280,%r6429,%r5277;
}
	// end inline asm
	@%p28 bra 	$L__BB0_751;
	bra.uni 	$L__BB0_750;

$L__BB0_751:
	// begin inline asm
	{neg.f16x2 %r6630,%r4725;
}
	// end inline asm
	bra.uni 	$L__BB0_752;

$L__BB0_750:
	// begin inline asm
	{mul.f16x2 %r6630,%r6430,%r5277;
}
	// end inline asm

$L__BB0_752:
	mov.u32 	%r5295, 31;
	mov.u32 	%r5319, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5293,%r6630,%r5295,%r1796,%r5319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5298,%r5280,%r5293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5301,%r6491,%r892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5304,%r5301,%r5298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5307,%r6340,%r5304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r4725,%r5307;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5315,%r1717,%r434,%r1796,%r5319;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5315;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5321, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5322,%r5321,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5325,%r6429,%r5322;
}
	// end inline asm
	mov.u32 	%r6631, %r4732;
	@%p28 bra 	$L__BB0_754;

	// begin inline asm
	{mul.f16x2 %r6631,%r6430,%r5322;
}
	// end inline asm

$L__BB0_754:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5336,%r6631,%r5295,%r1796,%r5319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5341,%r5325,%r5336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5344,%r1717,%r892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5347,%r5341,%r5344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5350,%r6340,%r5347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6463,%r4732,%r5350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5356,%r1717,%r6497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5359,%r6495,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5362,%r5356,%r5359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5365,%r6340,%r5362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5368,%r4739,%r5365;
}
	// end inline asm
	selp.b32 	%r6459, %r4739, %r5368, %p28;
	// begin inline asm
	{sub.f16x2 %r5371,%r6493,%r6494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5374,%r6425,%r5371;
}
	// end inline asm
	@%p28 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r6632,%r4743;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r6632,%r6426,%r5371;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5387, 31;
	mov.u32 	%r5389, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5385,%r6632,%r5387,%r1796,%r5389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5390,%r5374,%r5385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5393,%r6486,%r6492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5396,%r5393,%r5390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5399,%r6340,%r5396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6455,%r4743,%r5399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5405,%r6495,%r6496;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5408,%r6425,%r5405;
}
	// end inline asm
	mov.u32 	%r6633, %r4750;
	@%p28 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r6633,%r6426,%r5405;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5417,%r6633,%r5387,%r1796,%r5389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5422,%r5408,%r5417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5425,%r6482,%r6492;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5428,%r5422,%r5425;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5431,%r6340,%r5428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6458,%r4750,%r5431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5437,%r6484,%r6494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5440,%r6490,%r6496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5443,%r5437,%r5440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5446,%r6340,%r5443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5449,%r4757,%r5446;
}
	// end inline asm
	selp.b32 	%r6456, %r4757, %r5449, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6494;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5454,%r6494,%r434,%r1796,%r5389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5454;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5460, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5461,%r5460,%r6493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5464,%r6429,%r5461;
}
	// end inline asm
	@%p28 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r6634,%r4746;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r6634,%r6430,%r5461;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5479, 31;
	mov.u32 	%r5503, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5477,%r6634,%r5479,%r1796,%r5503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5482,%r5464,%r5477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5485,%r6485,%r6491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5488,%r5485,%r5482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5491,%r6340,%r5488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6454,%r4746,%r5491;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6496;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5499,%r6496,%r434,%r1796,%r5503;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5499;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5505, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5506,%r5505,%r6495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5509,%r6429,%r5506;
}
	// end inline asm
	mov.u32 	%r6635, %r4753;
	@%p28 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r6635,%r6430,%r5506;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5520,%r6635,%r5479,%r1796,%r5503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5525,%r5509,%r5520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5528,%r6481,%r6491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5531,%r5525,%r5528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5534,%r6340,%r5531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6457,%r4753,%r5534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5540,%r6483,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5543,%r6489,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5546,%r5540,%r5543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5549,%r6340,%r5546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5552,%r4760,%r5549;
}
	// end inline asm
	selp.b32 	%r6453, %r4760, %r5552, %p28;
	// begin inline asm
	{sub.f16x2 %r5555,%r6487,%r6488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5558,%r6425,%r5555;
}
	// end inline asm
	@%p28 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r6636,%r4764;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r6636,%r6426,%r5555;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5571, 31;
	mov.u32 	%r5573, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5569,%r6636,%r5571,%r1796,%r5573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5574,%r5558,%r5569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5577,%r941,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5580,%r5577,%r5574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5583,%r6340,%r5580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6449,%r4764,%r5583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5589,%r6489,%r6490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5592,%r6425,%r5589;
}
	// end inline asm
	mov.u32 	%r6637, %r4771;
	@%p28 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r6637,%r6426,%r5589;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5601,%r6637,%r5571,%r1796,%r5573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5606,%r5592,%r5601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5609,%r6480,%r6486;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5612,%r5606,%r5609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5615,%r6340,%r5612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6452,%r4771,%r5615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5621,%r1717,%r6488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5624,%r1717,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5627,%r5621,%r5624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5630,%r6340,%r5627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5633,%r4778,%r5630;
}
	// end inline asm
	selp.b32 	%r6450, %r4778, %r5633, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6488;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5638,%r6488,%r434,%r1796,%r5573;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5638;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5644, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5645,%r5644,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5648,%r6429,%r5645;
}
	// end inline asm
	@%p28 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r6638,%r4767;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r6638,%r6430,%r5645;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5663, 31;
	mov.u32 	%r5687, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5661,%r6638,%r5663,%r1796,%r5687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5666,%r5648,%r5661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5669,%r942,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5672,%r5669,%r5666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5675,%r6340,%r5672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6448,%r4767,%r5675;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6490;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5683,%r6490,%r434,%r1796,%r5687;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5683;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5689, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5690,%r5689,%r6489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5693,%r6429,%r5690;
}
	// end inline asm
	mov.u32 	%r6639, %r4774;
	@%p28 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r6639,%r6430,%r5690;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5704,%r6639,%r5663,%r1796,%r5687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5709,%r5693,%r5704;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5712,%r6479,%r6485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5715,%r5709,%r5712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5718,%r6340,%r5715;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6451,%r4774,%r5718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5724,%r1717,%r6487;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5727,%r1717,%r6489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5730,%r5724,%r5727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5733,%r6340,%r5730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5736,%r4781,%r5733;
}
	// end inline asm
	selp.b32 	%r6447, %r4781, %r5736, %p28;
	mov.u32 	%r6640, %r4785;
	@%p28 bra 	$L__BB0_776;

	mov.u32 	%r6640, %r6239;

$L__BB0_776:
	mov.u32 	%r5753, 31;
	mov.u32 	%r5777, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5751,%r6640,%r5753,%r1796,%r5777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5756,%r5224,%r5751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5759,%r1717,%r941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5762,%r5756,%r5759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5765,%r6340,%r5762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6446,%r4785,%r5765;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5773,%r1717,%r434,%r1796,%r5777;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5773;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5779, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5780,%r5779,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5783,%r6429,%r5780;
}
	// end inline asm
	mov.u32 	%r6641, %r4788;
	@%p28 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r6641,%r6430,%r5780;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5794,%r6641,%r5753,%r1796,%r5777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5799,%r5783,%r5794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5802,%r1717,%r942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5805,%r5799,%r5802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5808,%r6340,%r5805;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6445,%r4788,%r5808;
}
	// end inline asm
	@%p28 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r6642,%r4792;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	mov.u32 	%r6642, %r6239;

$L__BB0_781:
	mov.u32 	%r5830, 31;
	mov.u32 	%r5854, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5828,%r6642,%r5830,%r1796,%r5854;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5833,%r5224,%r5828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r6482,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5839,%r5836,%r5833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5842,%r6340,%r5839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6444,%r4792,%r5842;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5850,%r1717,%r434,%r1796,%r5854;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5850;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5856, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5857,%r5856,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5860,%r6429,%r5857;
}
	// end inline asm
	@%p28 bra 	$L__BB0_783;
	bra.uni 	$L__BB0_782;

$L__BB0_783:
	// begin inline asm
	{neg.f16x2 %r6643,%r4795;
}
	// end inline asm
	bra.uni 	$L__BB0_784;

$L__BB0_782:
	// begin inline asm
	{mul.f16x2 %r6643,%r6430,%r5857;
}
	// end inline asm

$L__BB0_784:
	mov.u32 	%r5875, 31;
	mov.u32 	%r5877, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5873,%r6643,%r5875,%r1796,%r5877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5878,%r5860,%r5873;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r6481,%r1717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r5881,%r5878;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5887,%r6340,%r5884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6443,%r4795,%r5887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5893,%r6483,%r6484;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5896,%r6425,%r5893;
}
	// end inline asm
	@%p28 bra 	$L__BB0_786;
	bra.uni 	$L__BB0_785;

$L__BB0_786:
	// begin inline asm
	{neg.f16x2 %r6644,%r4799;
}
	// end inline asm
	bra.uni 	$L__BB0_787;

$L__BB0_785:
	// begin inline asm
	{mul.f16x2 %r6644,%r6426,%r5893;
}
	// end inline asm

$L__BB0_787:
	mov.u32 	%r5909, 31;
	mov.u32 	%r5911, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5907,%r6644,%r5909,%r1796,%r5911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5912,%r5896,%r5907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5915,%r6480,%r6482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r5915,%r5912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5921,%r6340,%r5918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6439,%r4799,%r5921;
}
	// end inline asm
	mov.u32 	%r6645, %r4806;
	@%p28 bra 	$L__BB0_789;

	mov.u32 	%r6645, %r6239;

$L__BB0_789:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5939,%r6645,%r5909,%r1796,%r5911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5944,%r5224,%r5939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r1717,%r6482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5944,%r5947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r6340,%r5950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6442,%r4806,%r5953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5959,%r1717,%r6484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r5959,%r5221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5968,%r6340,%r5965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r4813,%r5968;
}
	// end inline asm
	selp.b32 	%r6440, %r4813, %r5971, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6484;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5976,%r6484,%r434,%r1796,%r5911;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5976;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5982, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r5982,%r6483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5986,%r6429,%r5983;
}
	// end inline asm
	@%p28 bra 	$L__BB0_791;
	bra.uni 	$L__BB0_790;

$L__BB0_791:
	// begin inline asm
	{neg.f16x2 %r6646,%r4802;
}
	// end inline asm
	bra.uni 	$L__BB0_792;

$L__BB0_790:
	// begin inline asm
	{mul.f16x2 %r6646,%r6430,%r5983;
}
	// end inline asm

$L__BB0_792:
	mov.u32 	%r6001, 31;
	mov.u32 	%r6025, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5999,%r6646,%r6001,%r1796,%r6025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6004,%r5986,%r5999;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6007,%r6479,%r6481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6010,%r6007,%r6004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6013,%r6340,%r6010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r4802,%r6013;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6021,%r1717,%r434,%r1796,%r6025;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6021;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6027, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r6027,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6031,%r6429,%r6028;
}
	// end inline asm
	mov.u32 	%r6647, %r4809;
	@%p28 bra 	$L__BB0_794;

	// begin inline asm
	{mul.f16x2 %r6647,%r6430,%r6028;
}
	// end inline asm

$L__BB0_794:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6042,%r6647,%r6001,%r1796,%r6025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6047,%r6031,%r6042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6050,%r1717,%r6481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6053,%r6047,%r6050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6056,%r6340,%r6053;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6441,%r4809,%r6056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6062,%r1717,%r6483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r6062,%r5221;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6071,%r6340,%r6068;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6074,%r4816,%r6071;
}
	// end inline asm
	selp.b32 	%r6437, %r4816, %r6074, %p28;
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r6648,%r4820;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	mov.u32 	%r6648, %r6239;

$L__BB0_797:
	mov.u32 	%r6093, 31;
	mov.u32 	%r6095, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6091,%r6648,%r6093,%r1796,%r6095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6096,%r5224,%r6091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6099,%r1717,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6102,%r6099,%r6096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6105,%r6340,%r6102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6434,%r4820,%r6105;
}
	// end inline asm
	mov.u32 	%r6649, %r4827;
	@%p28 bra 	$L__BB0_799;

	mov.u32 	%r6649, %r6239;

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6123,%r6649,%r6093,%r1796,%r6095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6128,%r5224,%r6123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6131,%r1717,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r6128,%r6131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r6340,%r6134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6436,%r4827,%r6137;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6145,%r1717,%r434,%r1796,%r6095;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6145;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6151, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6152,%r6151,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6155,%r6429,%r6152;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r6650,%r4823;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r6650,%r6430,%r6152;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6170, 31;
	mov.u32 	%r6194, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6168,%r6650,%r6170,%r1796,%r6194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6173,%r6155,%r6168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6176,%r1717,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6179,%r6176,%r6173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6182,%r6340,%r6179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6433,%r4823,%r6182;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6190,%r1717,%r434,%r1796,%r6194;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6190;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6196, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6197,%r6196,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6200,%r6429,%r6197;
}
	// end inline asm
	mov.u32 	%r6651, %r4830;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r6651,%r6430,%r6197;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6211,%r6651,%r6170,%r1796,%r6194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6216,%r6200,%r6211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r1717,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6222,%r6216,%r6219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6225,%r6340,%r6222;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6435,%r4830,%r6225;
}
	// end inline asm
	@%p28 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r6652,%r4834;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	mov.u32 	%r6652, %r6239;

$L__BB0_807:
	mov.u32 	%r6247, 31;
	mov.u32 	%r6271, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6245,%r6652,%r6247,%r1796,%r6271;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6250,%r5224,%r6245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6256,%r5221,%r6250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6259,%r6340,%r6256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6432,%r4834,%r6259;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6267,%r1717,%r434,%r1796,%r6271;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6267;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6273, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6274,%r6273,%r1717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6277,%r6429,%r6274;
}
	// end inline asm
	@%p28 bra 	$L__BB0_809;
	bra.uni 	$L__BB0_808;

$L__BB0_809:
	// begin inline asm
	{neg.f16x2 %r6653,%r4837;
}
	// end inline asm
	bra.uni 	$L__BB0_810;

$L__BB0_808:
	// begin inline asm
	{mul.f16x2 %r6653,%r6430,%r6274;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6292, 31;
	mov.u32 	%r6294, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6290,%r6653,%r6292,%r1796,%r6294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6295,%r6277,%r6290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6301,%r5221,%r6295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6304,%r6340,%r6301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6431,%r4837,%r6304;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6312, %r6505, %r1243;
	setp.eq.s32 	%p497, %r6312, 0;
	@%p497 bra 	$L__BB0_812;

	bar.sync 	0;
	bra.uni 	$L__BB0_819;

$L__BB0_812:
	@%p218 bra 	$L__BB0_814;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_814:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_818;

	membar.gl;
	setp.eq.s32 	%p500, %r428, %r429;
	mov.u32 	%r6329, -2147483647;
	sub.s32 	%r6330, %r6329, %r427;
	selp.b32 	%r6318, %r6330, 1, %p500;
	// begin inline asm
	atom.add.release.gpu.u32 %r6317,[%rd25],%r6318;
	// end inline asm

$L__BB0_816:
	ld.volatile.u32 	%r6331, [%rd25];
	xor.b32  	%r6332, %r6331, %r6317;
	setp.gt.s32 	%p501, %r6332, -1;
	@%p501 bra 	$L__BB0_816;

	// begin inline asm
	ld.acquire.gpu.u32 %r6333,[%rd25];
	// end inline asm

$L__BB0_818:
	bar.sync 	0;

$L__BB0_819:
	add.s32 	%r6505, %r6505, 1;
	setp.lt.s32 	%p502, %r6505, %r49;
	@%p502 bra 	$L__BB0_332;

$L__BB0_820:
	ret;

}

