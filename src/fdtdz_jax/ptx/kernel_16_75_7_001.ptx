//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<447>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<6597>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1237, %r1238}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1239, %r1240}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1241, %r1242}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1243, %r1244}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1245, %r1246}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1247, %r1248}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1249, %r1250}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1251, %r1252}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1253, %r1254}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1255, %r1256}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1257, 32;
	sub.s32 	%r39, %r1257, %r1244;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p15, %r39, %r40;
	add.s32 	%r1258, %r1250, -1;
	mad.lo.s32 	%r1259, %r1258, %r1249, %r1248;
	add.s32 	%r1260, %r1243, %r1242;
	add.s32 	%r1261, %r1260, %r1259;
	add.s32 	%r1262, %r1261, 1;
	mul.lo.s32 	%r1263, %r1237, %r1239;
	shl.b32 	%r41, %r1263, 1;
	shl.b32 	%r1264, %r1263, 2;
	div.s32 	%r1265, %r1262, %r1264;
	add.s32 	%r1266, %r1265, 1;
	mul.lo.s32 	%r1267, %r1266, %r1243;
	mul.lo.s32 	%r1268, %r1238, %r1240;
	shl.b32 	%r42, %r1268, 1;
	div.s32 	%r1269, %r1267, %r42;
	add.s32 	%r1270, %r1269, 1;
	mul.lo.s32 	%r43, %r1270, %r1242;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6277, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1273, %r1239, %r38, %r37;
	mad.lo.s32 	%r1274, %r1273, %r1238, %r36;
	mad.lo.s32 	%r1275, %r1274, %r1237, %r35;
	shl.b32 	%r47, %r1275, 5;
	add.s32 	%r6282, %r47, %r40;
	mul.lo.s32 	%r1276, %r1268, %r1263;
	shl.b32 	%r51, %r1276, 5;
	sub.s32 	%r52, %r1252, %r1251;
	mul.lo.s32 	%r1277, %r1250, %r52;
	sub.s32 	%r53, %r1254, %r1253;
	mul.lo.s32 	%r1278, %r1277, %r53;
	sub.s32 	%r54, %r1256, %r1255;
	mul.lo.s32 	%r1279, %r1278, %r54;
	mul.lo.s32 	%r55, %r1279, 3;
	setp.ge.s32 	%p16, %r6282, %r55;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1280, %r40;
	add.s32 	%r1281, %r55, %r1280;
	sub.s32 	%r1282, %r1281, %r47;
	mul.lo.s32 	%r1283, %r1268, %r1237;
	mul.lo.s32 	%r1284, %r1283, %r1239;
	shl.b32 	%r1285, %r1284, 5;
	div.u32 	%r56, %r1282, %r1285;
	add.s32 	%r1286, %r56, 1;
	and.b32  	%r6279, %r1286, 3;
	setp.eq.s32 	%p17, %r6279, 0;
	mov.u32 	%r6280, %r6282;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6280, %r6282;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6280, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1287, 0;
	st.global.u32 	[%rd31], %r1287;
	add.s32 	%r6280, %r6280, %r51;
	add.s32 	%r6279, %r6279, -1;
	setp.ne.s32 	%p18, %r6279, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r56, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6280, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1288, 0;
	st.global.u32 	[%rd33], %r1288;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1288;
	add.s32 	%r1289, %r6280, %r51;
	add.s32 	%r1290, %r1289, %r51;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1288;
	add.s32 	%r1291, %r1290, %r51;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1288;
	add.s32 	%r6280, %r1291, %r51;
	setp.lt.s32 	%p20, %r6280, %r55;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1292, %r1243, %r41;
	div.s32 	%r1293, %r1292, %r42;
	mul.lo.s32 	%r1294, %r1293, %r1242;
	sub.s32 	%r1295, %r1294, %r41;
	sub.s32 	%r1296, %r1242, %r42;
	mul.lo.s32 	%r1297, %r1296, %r1239;
	mul.lo.s32 	%r1298, %r1237, 384;
	add.s32 	%r1299, %r1298, %r1298;
	add.s32 	%r1300, %r1299, 128;
	mul.lo.s32 	%r1302, %r1268, 768;
	mul.lo.s32 	%r1303, %r1297, %r1300;
	mad.lo.s32 	%r65, %r1302, %r1295, %r1303;
	bra.uni 	$L__BB0_11;

$L__BB0_791:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6271, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6282, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6271;
	add.s32 	%r6282, %r6282, %r51;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6282, %r65;
	@%p21 bra 	$L__BB0_791;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6324, %r1237, %r37, %r35;
	mul.lo.s32 	%r69, %r1238, %r38;
	add.s32 	%r70, %r69, %r36;
	setp.ge.s32 	%p22, %r6324, %r1242;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r39, %r40;
	mov.u32 	%r1304, 31;
	sub.s32 	%r1305, %r1304, %r40;
	selp.b32 	%r1306, %r40, %r1305, %p23;
	shl.b32 	%r1307, %r1306, 2;
	mov.u32 	%r1308, 2;
	sub.s32 	%r71, %r1307, %r1245;
	shl.b32 	%r1309, %r1244, 2;
	mov.u32 	%r1310, 128;
	sub.s32 	%r72, %r1310, %r1309;
	add.s32 	%r73, %r1252, -1;
	add.s32 	%r74, %r1254, -1;
	add.s32 	%r75, %r1256, -1;
	sub.s32 	%r1311, %r1308, %r1245;
	add.s32 	%r76, %r1311, %r1307;
	mul.lo.s32 	%r1312, %r1243, %r1242;
	shl.b32 	%r77, %r1312, 6;
	add.s32 	%r78, %r1242, -1;
	add.s32 	%r79, %r71, 1;
	add.s32 	%r80, %r76, 1;
	shl.b32 	%r81, %r40, 1;
	or.b32  	%r82, %r81, 1;
	shr.u32 	%r1313, %r82, 31;
	add.s32 	%r1314, %r82, %r1313;
	shr.s32 	%r84, %r1314, 1;
	and.b32  	%r1315, %r1314, -2;
	sub.s32 	%r1316, %r82, %r1315;
	add.s32 	%r83, %r1316, %r77;
	rem.s32 	%r1362, %r79, %r72;
	add.s32 	%r1363, %r1362, %r72;
	rem.s32 	%r1364, %r1363, %r72;
	rem.s32 	%r1367, %r80, %r72;
	add.s32 	%r1368, %r1367, %r72;
	rem.s32 	%r1369, %r1368, %r72;
	mov.u32 	%r6283, %r6324;

$L__BB0_14:
	setp.ge.s32 	%p24, %r70, %r1243;
	@%p24 bra 	$L__BB0_35;

	setp.gt.s32 	%p25, %r1251, %r6283;
	setp.gt.s32 	%p26, %r1252, %r6283;
	selp.b32 	%r1317, %r6283, %r73, %p26;
	selp.b32 	%r1318, %r1251, %r1317, %p25;
	sub.s32 	%r1319, %r1318, %r1251;
	add.s32 	%r86, %r78, %r6283;
	rem.s32 	%r1320, %r71, %r72;
	add.s32 	%r1321, %r1320, %r72;
	rem.s32 	%r1322, %r1321, %r72;
	setp.gt.s32 	%p27, %r1255, %r1322;
	setp.gt.s32 	%p28, %r1256, %r1322;
	selp.b32 	%r1323, %r1322, %r75, %p28;
	selp.b32 	%r1324, %r1255, %r1323, %p27;
	rem.s32 	%r1325, %r76, %r72;
	add.s32 	%r1326, %r1325, %r72;
	rem.s32 	%r1327, %r1326, %r72;
	setp.gt.s32 	%p29, %r1255, %r1327;
	setp.gt.s32 	%p30, %r1256, %r1327;
	selp.b32 	%r1328, %r1327, %r75, %p30;
	selp.b32 	%r1329, %r1255, %r1328, %p29;
	sub.s32 	%r87, %r1324, %r1255;
	sub.s32 	%r88, %r1329, %r1255;
	mul.lo.s32 	%r89, %r1319, %r53;
	add.s32 	%r1330, %r1319, %r52;
	mul.lo.s32 	%r90, %r1330, %r53;
	add.s32 	%r1331, %r1330, %r52;
	mul.lo.s32 	%r91, %r1331, %r53;
	mov.u32 	%r6284, %r70;

$L__BB0_16:
	setp.gt.s32 	%p31, %r1254, %r6284;
	selp.b32 	%r1332, %r6284, %r74, %p31;
	setp.gt.s32 	%p32, %r1253, %r6284;
	selp.b32 	%r1333, %r1253, %r1332, %p32;
	sub.s32 	%r93, %r1333, %r1253;
	mul.lo.s32 	%r94, %r6284, %r1242;
	add.s32 	%r95, %r94, %r6283;
	shl.b32 	%r96, %r95, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1336, %r93, %r89;
	mul.lo.s32 	%r1337, %r1336, %r54;
	add.s32 	%r1338, %r87, %r1337;
	mul.wide.s32 	%rd41, %r1338, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1339, %r88, %r1337;
	mul.wide.s32 	%rd43, %r1339, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6285, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r100, %r95, 5;
	add.s32 	%r1340, %r100, %r40;
	shl.b32 	%r1341, %r1340, 2;
	add.s32 	%r1342, %r77, %r1341;
	mul.wide.s32 	%rd45, %r1342, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6285;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1345, %r93, %r90;
	mul.lo.s32 	%r1346, %r1345, %r54;
	add.s32 	%r1347, %r87, %r1346;
	mul.wide.s32 	%rd47, %r1347, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1348, %r88, %r1346;
	mul.wide.s32 	%rd49, %r1348, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6286, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1349, %r81, %r96;
	mul.wide.s32 	%rd51, %r1349, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6286;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1352, %r93, %r91;
	mul.lo.s32 	%r1353, %r1352, %r54;
	add.s32 	%r1354, %r87, %r1353;
	mul.wide.s32 	%rd53, %r1354, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1355, %r88, %r1353;
	mul.wide.s32 	%rd55, %r1355, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6287, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1356, %r86, %r1242;
	add.s32 	%r1357, %r1356, %r94;
	shl.b32 	%r107, %r1357, 5;
	add.s32 	%r1358, %r107, %r40;
	shl.b32 	%r1359, %r1358, 2;
	add.s32 	%r1360, %r77, %r1359;
	add.s32 	%r1361, %r1360, 2;
	mul.wide.s32 	%rd57, %r1361, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6287;
	setp.gt.s32 	%p36, %r1255, %r1364;
	setp.gt.s32 	%p37, %r1256, %r1364;
	selp.b32 	%r1365, %r1364, %r75, %p37;
	selp.b32 	%r1366, %r1255, %r1365, %p36;
	setp.gt.s32 	%p38, %r1255, %r1369;
	setp.gt.s32 	%p39, %r1256, %r1369;
	selp.b32 	%r1370, %r1369, %r75, %p39;
	selp.b32 	%r1371, %r1255, %r1370, %p38;
	sub.s32 	%r108, %r1366, %r1255;
	sub.s32 	%r109, %r1371, %r1255;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1374, %r93, %r89;
	mul.lo.s32 	%r1375, %r1374, %r54;
	add.s32 	%r1376, %r108, %r1375;
	mul.wide.s32 	%rd59, %r1376, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1377, %r109, %r1375;
	mul.wide.s32 	%rd61, %r1377, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6288, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1378, %r100, %r84;
	shl.b32 	%r1379, %r1378, 2;
	add.s32 	%r1380, %r83, %r1379;
	mul.wide.s32 	%rd63, %r1380, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6288;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1383, %r93, %r90;
	mul.lo.s32 	%r1384, %r1383, %r54;
	add.s32 	%r1385, %r108, %r1384;
	mul.wide.s32 	%rd65, %r1385, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1386, %r109, %r1384;
	mul.wide.s32 	%rd67, %r1386, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6289, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1387, %r82, %r96;
	mul.wide.s32 	%rd69, %r1387, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6289;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1390, %r93, %r91;
	mul.lo.s32 	%r1391, %r1390, %r54;
	add.s32 	%r1392, %r108, %r1391;
	mul.wide.s32 	%rd71, %r1392, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1393, %r109, %r1391;
	mul.wide.s32 	%rd73, %r1393, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6290, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1394, %r107, %r84;
	shl.b32 	%r1395, %r1394, 2;
	add.s32 	%r1396, %r83, %r1395;
	add.s32 	%r1397, %r1396, 2;
	mul.wide.s32 	%rd75, %r1397, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6290;
	add.s32 	%r6284, %r6284, %r1268;
	setp.lt.s32 	%p43, %r6284, %r1243;
	@%p43 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6283, %r6283, %r1263;
	setp.lt.s32 	%p44, %r6283, %r1242;
	@%p44 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r121, %r70, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6291, %r6324;

$L__BB0_38:
	setp.ge.s32 	%p46, %r121, %r1243;
	@%p46 bra 	$L__BB0_119;

	mov.u32 	%r6292, %r121;

$L__BB0_40:
	setp.ne.s32 	%p47, %r40, 0;
	@%p47 bra 	$L__BB0_118;

	shr.u32 	%r1399, %r6292, 31;
	add.s32 	%r1400, %r6292, %r1399;
	shr.s32 	%r1401, %r1400, 1;
	mad.lo.s32 	%r1402, %r1401, %r1242, %r6291;
	shl.b32 	%r125, %r1402, 5;
	add.s32 	%r126, %r6292, -2;
	mul.lo.s32 	%r127, %r126, %r1242;
	add.s32 	%r1403, %r1243, %r126;
	mul.lo.s32 	%r128, %r1403, %r1242;
	add.s32 	%r1404, %r1403, %r1243;
	mul.lo.s32 	%r129, %r1404, %r1242;
	add.s32 	%r130, %r127, %r1242;
	add.s32 	%r131, %r6292, -1;
	add.s32 	%r1405, %r1243, %r131;
	mul.lo.s32 	%r132, %r1405, %r1242;
	add.s32 	%r1406, %r1405, %r1243;
	mul.lo.s32 	%r133, %r1406, %r1242;
	add.s32 	%r1407, %r1243, %r6292;
	mul.lo.s32 	%r134, %r1407, %r1242;
	add.s32 	%r1408, %r1407, %r1243;
	mul.lo.s32 	%r135, %r1408, %r1242;
	mul.lo.s32 	%r136, %r6292, %r1242;
	add.s32 	%r137, %r136, %r1242;
	add.s32 	%r138, %r6292, 1;
	add.s32 	%r1409, %r1243, %r138;
	mul.lo.s32 	%r139, %r1409, %r1242;
	add.s32 	%r1410, %r1409, %r1243;
	mul.lo.s32 	%r140, %r1410, %r1242;
	add.s32 	%r141, %r137, %r1242;
	add.s32 	%r142, %r6292, 2;
	add.s32 	%r1411, %r1243, %r142;
	mul.lo.s32 	%r143, %r1411, %r1242;
	add.s32 	%r1412, %r1411, %r1243;
	mul.lo.s32 	%r144, %r1412, %r1242;
	mov.u32 	%r6295, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1413, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1413;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r146, %r1413, %r6291;
	setp.lt.s32 	%p48, %r146, %r1242;
	or.b32  	%r1414, %r126, %r146;
	setp.gt.s32 	%p49, %r1414, -1;
	and.pred  	%p50, %p48, %p49;
	setp.lt.s32 	%p51, %r126, %r1243;
	and.pred  	%p1, %p51, %p50;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p52, %f65, 0f40000000;
	@%p52 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1417, %r127, %r146;
	mul.wide.s32 	%rd80, %r1417, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6294, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6294, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1418, %r6295, %r125;
	mul.wide.s32 	%rd82, %r1418, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6294;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p53, %f3, 0f40000000;
	@%p53 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1421, %r128, %r146;
	mul.wide.s32 	%rd84, %r1421, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6296, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6296, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1422, %r6295, %r125;
	mul.wide.s32 	%rd86, %r1422, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6296;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p54, %f74, 0f40000000;
	@%p54 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1425, %r129, %r146;
	mul.wide.s32 	%rd88, %r1425, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6298, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6298, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1426, %r6295, %r125;
	mul.wide.s32 	%rd90, %r1426, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6298;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_57:
	or.b32  	%r1427, %r131, %r146;
	setp.gt.s32 	%p55, %r1427, -1;
	and.pred  	%p57, %p48, %p55;
	setp.le.s32 	%p58, %r6292, %r1243;
	and.pred  	%p2, %p58, %p57;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p59, %f4, 0f40000000;
	@%p59 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1430, %r130, %r146;
	mul.wide.s32 	%rd92, %r1430, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6300, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6300, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1431, %r6295, %r125;
	mul.wide.s32 	%rd94, %r1431, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6300;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p60, %f5, 0f40000000;
	@%p60 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1434, %r132, %r146;
	mul.wide.s32 	%rd96, %r1434, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6302, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6302, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1435, %r6295, %r125;
	mul.wide.s32 	%rd98, %r1435, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6302;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p61, %f6, 0f40000000;
	@%p61 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1438, %r133, %r146;
	mul.wide.s32 	%rd100, %r1438, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6304, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6304, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1439, %r6295, %r125;
	mul.wide.s32 	%rd102, %r1439, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6304;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_72:
	or.b32  	%r1440, %r6292, %r146;
	setp.gt.s32 	%p62, %r1440, -1;
	and.pred  	%p64, %p48, %p62;
	setp.lt.s32 	%p65, %r6292, %r1243;
	and.pred  	%p3, %p65, %p64;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p66, %f7, 0f40000000;
	@%p66 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1443, %r136, %r146;
	mul.wide.s32 	%rd104, %r1443, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6306, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6306, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1444, %r6295, %r125;
	mul.wide.s32 	%rd106, %r1444, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6306;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p67, %f90, 0f40000000;
	@%p67 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1447, %r134, %r146;
	mul.wide.s32 	%rd108, %r1447, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6308, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6308, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1448, %r6295, %r125;
	mul.wide.s32 	%rd110, %r1448, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6308;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p68, %f8, 0f40000000;
	@%p68 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1451, %r135, %r146;
	mul.wide.s32 	%rd112, %r1451, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6310, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6310, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1452, %r6295, %r125;
	mul.wide.s32 	%rd114, %r1452, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6310;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_87:
	or.b32  	%r1453, %r138, %r146;
	setp.gt.s32 	%p69, %r1453, -1;
	and.pred  	%p71, %p48, %p69;
	setp.lt.s32 	%p72, %r138, %r1243;
	and.pred  	%p4, %p72, %p71;
	@%p66 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1456, %r137, %r146;
	mul.wide.s32 	%rd116, %r1456, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6312, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6312, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1457, %r6295, %r125;
	mul.wide.s32 	%rd118, %r1457, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6312;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_92:
	@%p60 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1460, %r139, %r146;
	mul.wide.s32 	%rd120, %r1460, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6314, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6314, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1461, %r6295, %r125;
	mul.wide.s32 	%rd122, %r1461, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6314;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_97:
	@%p68 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1464, %r140, %r146;
	mul.wide.s32 	%rd124, %r1464, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6316, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6316, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1465, %r6295, %r125;
	mul.wide.s32 	%rd126, %r1465, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6316;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_102:
	or.b32  	%r1466, %r142, %r146;
	setp.gt.s32 	%p76, %r1466, -1;
	and.pred  	%p78, %p48, %p76;
	setp.lt.s32 	%p79, %r142, %r1243;
	and.pred  	%p5, %p79, %p78;
	@%p59 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1469, %r141, %r146;
	mul.wide.s32 	%rd128, %r1469, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6318, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6318, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1470, %r6295, %r125;
	mul.wide.s32 	%rd130, %r1470, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6318;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_107:
	@%p53 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1473, %r143, %r146;
	mul.wide.s32 	%rd132, %r1473, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6320, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6320, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1474, %r6295, %r125;
	mul.wide.s32 	%rd134, %r1474, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6320;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_112:
	@%p61 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1477, %r144, %r146;
	mul.wide.s32 	%rd136, %r1477, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6322, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6322, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1478, %r6295, %r125;
	mul.wide.s32 	%rd138, %r1478, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6322;
	add.s32 	%r6295, %r6295, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p83, %rd455, %rd141;
	@%p83 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6292, %r6292, %r42;
	setp.lt.s32 	%p84, %r6292, %r1243;
	@%p84 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6291, %r6291, %r1263;
	setp.lt.s32 	%p85, %r6291, %r1242;
	@%p85 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p86, %r1246, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p86 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r250, %r70, 1;
	shr.u32 	%r1526, %r1247, 31;
	add.s32 	%r1527, %r1247, %r1526;
	shr.u32 	%r1528, %r1527, 1;
	and.b32  	%r251, %r1528, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p96, %r250, %r1243;
	@%p96 bra 	$L__BB0_266;

	mov.u32 	%r6330, %r250;

$L__BB0_142:
	setp.ne.s32 	%p97, %r40, 0;
	@%p97 bra 	$L__BB0_265;

	shr.u32 	%r1530, %r6330, 31;
	add.s32 	%r1531, %r6330, %r1530;
	shr.s32 	%r1532, %r1531, 1;
	mad.lo.s32 	%r1533, %r1532, %r1242, %r6324;
	shl.b32 	%r255, %r1533, 5;
	add.s32 	%r256, %r6330, -2;
	mul.lo.s32 	%r257, %r256, %r1242;
	add.s32 	%r1534, %r1243, %r256;
	mul.lo.s32 	%r258, %r1534, %r1242;
	add.s32 	%r259, %r257, %r1242;
	add.s32 	%r260, %r6330, -1;
	add.s32 	%r1535, %r1243, %r260;
	mul.lo.s32 	%r261, %r1535, %r1242;
	add.s32 	%r1536, %r1243, %r6330;
	mul.lo.s32 	%r262, %r1536, %r1242;
	mul.lo.s32 	%r263, %r6330, %r1242;
	add.s32 	%r264, %r263, %r1242;
	add.s32 	%r265, %r6330, 1;
	add.s32 	%r1537, %r1243, %r265;
	mul.lo.s32 	%r266, %r1537, %r1242;
	add.s32 	%r267, %r264, %r1242;
	add.s32 	%r268, %r6330, 2;
	add.s32 	%r1538, %r1243, %r268;
	mul.lo.s32 	%r269, %r1538, %r1242;
	mov.u32 	%r6334, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1539, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1539;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r271, %r1539, %r6324;
	setp.lt.s32 	%p98, %r271, %r1242;
	or.b32  	%r1540, %r256, %r271;
	setp.gt.s32 	%p99, %r1540, -1;
	and.pred  	%p100, %p98, %p99;
	setp.lt.s32 	%p101, %r256, %r1243;
	and.pred  	%p6, %p101, %p100;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p102, %f133, 0f40000000;
	@%p102 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p103, %r251, 0;
	add.s32 	%r1542, %r257, %r271;
	shl.b32 	%r1543, %r1542, 1;
	mul.wide.s32 	%rd164, %r1543, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p103 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6332, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r276, %r6334, %r255;
	mul.wide.s32 	%rd166, %r276, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6332;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p104, %r251, 0;
	add.s32 	%r1547, %r258, %r271;
	shl.b32 	%r1548, %r1547, 1;
	mul.wide.s32 	%rd168, %r1548, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p104 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6333, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1551, %r276, 1;
	mul.wide.s32 	%rd170, %r1551, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6333;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p105, %f13, 0f40000000;
	@%p105 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p106, %r251, 0;
	add.s32 	%r1553, %r257, %r271;
	shl.b32 	%r1554, %r1553, 1;
	or.b32  	%r1555, %r1554, 1;
	mul.wide.s32 	%rd172, %r1555, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p106 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6335, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r287, %r6334, %r255;
	mul.wide.s32 	%rd174, %r287, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6335;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p107, %r251, 0;
	add.s32 	%r1559, %r258, %r271;
	shl.b32 	%r1560, %r1559, 1;
	or.b32  	%r1561, %r1560, 1;
	mul.wide.s32 	%rd176, %r1561, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p107 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6336, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6336, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6336, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1564, %r287, 1;
	mul.wide.s32 	%rd178, %r1564, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6336;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_168:
	or.b32  	%r1565, %r260, %r271;
	setp.gt.s32 	%p108, %r1565, -1;
	and.pred  	%p110, %p98, %p108;
	setp.le.s32 	%p111, %r6330, %r1243;
	and.pred  	%p7, %p111, %p110;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p112, %f16, 0f40000000;
	@%p112 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p113, %r251, 0;
	add.s32 	%r1567, %r259, %r271;
	shl.b32 	%r1568, %r1567, 1;
	mul.wide.s32 	%rd180, %r1568, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p113 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6338, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6338, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6338, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r298, %r6334, %r255;
	mul.wide.s32 	%rd182, %r298, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6338;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p114, %r251, 0;
	add.s32 	%r1572, %r261, %r271;
	shl.b32 	%r1573, %r1572, 1;
	mul.wide.s32 	%rd184, %r1573, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p114 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6339, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6339, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6339, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1576, %r298, 1;
	mul.wide.s32 	%rd186, %r1576, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6339;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p115, %f19, 0f40000000;
	@%p115 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p116, %r251, 0;
	add.s32 	%r1578, %r259, %r271;
	shl.b32 	%r1579, %r1578, 1;
	or.b32  	%r1580, %r1579, 1;
	mul.wide.s32 	%rd188, %r1580, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p116 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6341, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6341, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6341, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r309, %r6334, %r255;
	mul.wide.s32 	%rd190, %r309, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6341;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p117, %r251, 0;
	add.s32 	%r1584, %r261, %r271;
	shl.b32 	%r1585, %r1584, 1;
	or.b32  	%r1586, %r1585, 1;
	mul.wide.s32 	%rd192, %r1586, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p117 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6342, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1589, %r309, 1;
	mul.wide.s32 	%rd194, %r1589, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6342;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_192:
	or.b32  	%r1590, %r6330, %r271;
	setp.gt.s32 	%p118, %r1590, -1;
	and.pred  	%p120, %p98, %p118;
	setp.lt.s32 	%p121, %r6330, %r1243;
	and.pred  	%p8, %p121, %p120;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p122, %f22, 0f40000000;
	@%p122 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p123, %r251, 0;
	add.s32 	%r1592, %r263, %r271;
	shl.b32 	%r1593, %r1592, 1;
	mul.wide.s32 	%rd196, %r1593, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p123 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6344, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r320, %r6334, %r255;
	mul.wide.s32 	%rd198, %r320, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6344;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p124, %r251, 0;
	add.s32 	%r1597, %r262, %r271;
	shl.b32 	%r1598, %r1597, 1;
	mul.wide.s32 	%rd200, %r1598, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p124 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6345, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1601, %r320, 1;
	mul.wide.s32 	%rd202, %r1601, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6345;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p125, %f196, 0f40000000;
	@%p125 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p126, %r251, 0;
	add.s32 	%r1603, %r263, %r271;
	shl.b32 	%r1604, %r1603, 1;
	or.b32  	%r1605, %r1604, 1;
	mul.wide.s32 	%rd204, %r1605, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p126 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6347, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r331, %r6334, %r255;
	mul.wide.s32 	%rd206, %r331, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6347;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p127, %r251, 0;
	add.s32 	%r1609, %r262, %r271;
	shl.b32 	%r1610, %r1609, 1;
	or.b32  	%r1611, %r1610, 1;
	mul.wide.s32 	%rd208, %r1611, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p127 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6348, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6348, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6348, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1614, %r331, 1;
	mul.wide.s32 	%rd210, %r1614, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6348;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_216:
	or.b32  	%r1615, %r265, %r271;
	setp.gt.s32 	%p128, %r1615, -1;
	and.pred  	%p130, %p98, %p128;
	setp.lt.s32 	%p131, %r265, %r1243;
	and.pred  	%p9, %p131, %p130;
	@%p122 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p133, %r251, 0;
	add.s32 	%r1617, %r264, %r271;
	shl.b32 	%r1618, %r1617, 1;
	mul.wide.s32 	%rd212, %r1618, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p133 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6350, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6350, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6350, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r342, %r6334, %r255;
	mul.wide.s32 	%rd214, %r342, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6350;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p134, %r251, 0;
	add.s32 	%r1622, %r266, %r271;
	shl.b32 	%r1623, %r1622, 1;
	mul.wide.s32 	%rd216, %r1623, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p134 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6351, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6351, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6351, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1626, %r342, 1;
	mul.wide.s32 	%rd218, %r1626, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6351;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_228:
	@%p115 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p136, %r251, 0;
	add.s32 	%r1628, %r264, %r271;
	shl.b32 	%r1629, %r1628, 1;
	or.b32  	%r1630, %r1629, 1;
	mul.wide.s32 	%rd220, %r1630, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p136 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6353, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6353, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6353, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r353, %r6334, %r255;
	mul.wide.s32 	%rd222, %r353, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6353;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p137, %r251, 0;
	add.s32 	%r1634, %r266, %r271;
	shl.b32 	%r1635, %r1634, 1;
	or.b32  	%r1636, %r1635, 1;
	mul.wide.s32 	%rd224, %r1636, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p137 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6354, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6354, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6354, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1639, %r353, 1;
	mul.wide.s32 	%rd226, %r1639, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6354;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_240:
	or.b32  	%r1640, %r268, %r271;
	setp.gt.s32 	%p138, %r1640, -1;
	and.pred  	%p140, %p98, %p138;
	setp.lt.s32 	%p141, %r268, %r1243;
	and.pred  	%p10, %p141, %p140;
	@%p112 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p143, %r251, 0;
	add.s32 	%r1642, %r267, %r271;
	shl.b32 	%r1643, %r1642, 1;
	mul.wide.s32 	%rd228, %r1643, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p143 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6356, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6356, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6356, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r364, %r6334, %r255;
	mul.wide.s32 	%rd230, %r364, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6356;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p144, %r251, 0;
	add.s32 	%r1647, %r269, %r271;
	shl.b32 	%r1648, %r1647, 1;
	mul.wide.s32 	%rd232, %r1648, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p144 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6357, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6357, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6357, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1651, %r364, 1;
	mul.wide.s32 	%rd234, %r1651, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6357;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_252:
	@%p105 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p146, %r251, 0;
	add.s32 	%r1653, %r267, %r271;
	shl.b32 	%r1654, %r1653, 1;
	or.b32  	%r1655, %r1654, 1;
	mul.wide.s32 	%rd236, %r1655, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p146 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6359, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6359, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6359, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r375, %r6334, %r255;
	mul.wide.s32 	%rd238, %r375, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6359;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p147, %r251, 0;
	add.s32 	%r1659, %r269, %r271;
	shl.b32 	%r1660, %r1659, 1;
	or.b32  	%r1661, %r1660, 1;
	mul.wide.s32 	%rd240, %r1661, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p147 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6360, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6360, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6360, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1664, %r375, 1;
	mul.wide.s32 	%rd242, %r1664, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6360;
	add.s32 	%r6334, %r6334, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p148, %rd456, 0;
	@%p148 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6330, %r6330, %r42;
	setp.lt.s32 	%p149, %r6330, %r1243;
	@%p149 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6324, %r6324, %r1263;
	setp.lt.s32 	%p150, %r6324, %r1242;
	@%p150 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r224, %r69;
	mov.u32 	%r1479, 31;
	sub.s32 	%r1480, %r1479, %r40;
	setp.gt.s32 	%p88, %r39, %r40;
	selp.b32 	%r1481, %r40, %r1480, %p88;
	shl.b32 	%r1482, %r1481, 2;
	mov.u32 	%r1483, 2;
	sub.s32 	%r225, %r1482, %r1245;
	shl.b32 	%r1484, %r1244, 2;
	mov.u32 	%r1485, 128;
	sub.s32 	%r226, %r1485, %r1484;
	sub.s32 	%r1486, %r1483, %r1245;
	add.s32 	%r227, %r1486, %r1482;
	add.s32 	%r228, %r1242, -1;
	add.s32 	%r229, %r225, 1;
	add.s32 	%r230, %r227, 1;
	rem.s32 	%r1511, %r229, %r226;
	add.s32 	%r1512, %r1511, %r226;
	rem.s32 	%r241, %r1512, %r226;
	rem.s32 	%r1513, %r230, %r226;
	add.s32 	%r1514, %r1513, %r226;
	rem.s32 	%r242, %r1514, %r226;

$L__BB0_123:
	setp.ne.s32 	%p89, %r36, %r224;
	@%p89 bra 	$L__BB0_137;

	shl.b32 	%r232, %r6324, 1;
	rem.s32 	%r1487, %r225, %r226;
	add.s32 	%r1488, %r1487, %r226;
	rem.s32 	%r233, %r1488, %r226;
	rem.s32 	%r1489, %r227, %r226;
	add.s32 	%r1490, %r1489, %r226;
	rem.s32 	%r234, %r1490, %r226;
	@%p88 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1493, %r232, %r226;
	add.s32 	%r1494, %r1493, %r233;
	mul.wide.s32 	%rd144, %r1494, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1495, %r1493, %r234;
	mul.wide.s32 	%rd146, %r1495, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6325, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6325, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1496, %r6324, 5;
	add.s32 	%r1497, %r1496, %r40;
	shl.b32 	%r1498, %r1497, 2;
	mul.wide.s32 	%rd148, %r1498, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6325;
	@%p88 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1501, %r232, 1;
	mul.lo.s32 	%r1502, %r1501, %r226;
	add.s32 	%r1503, %r1502, %r233;
	mul.wide.s32 	%rd149, %r1503, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1504, %r1502, %r234;
	mul.wide.s32 	%rd151, %r1504, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6326, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1505, %r228, %r6324;
	rem.s32 	%r1506, %r1505, %r1242;
	shl.b32 	%r1507, %r1506, 5;
	add.s32 	%r1508, %r1507, %r40;
	shl.b32 	%r1509, %r1508, 2;
	or.b32  	%r1510, %r1509, 2;
	mul.wide.s32 	%rd153, %r1510, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6326;
	@%p88 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1517, %r232, %r226;
	add.s32 	%r1518, %r1517, %r241;
	mul.wide.s32 	%rd154, %r1518, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1519, %r1517, %r242;
	mul.wide.s32 	%rd156, %r1519, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6327, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6327;
	@%p88 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1522, %r232, 1;
	mul.lo.s32 	%r1523, %r1522, %r226;
	add.s32 	%r1524, %r1523, %r241;
	mul.wide.s32 	%rd158, %r1524, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1525, %r1523, %r242;
	mul.wide.s32 	%rd160, %r1525, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6328, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6328, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6328;

$L__BB0_137:
	add.s32 	%r6324, %r6324, %r1263;
	setp.lt.s32 	%p94, %r6324, %r1242;
	@%p94 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1666, %r1237, -1;
	mad.lo.s32 	%r1667, %r1237, 1152, -128;
	add.s32 	%r1668, %r1238, -1;
	mad.lo.s32 	%r1669, %r1238, 896, 128;
	mul.lo.s32 	%r1670, %r1669, %r1666;
	mad.lo.s32 	%r384, %r1667, %r1668, %r1670;
	setp.lt.s32 	%p151, %r384, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6365, {low,high};}

	// end inline asm
	@%p151 bra 	$L__BB0_270;

	mov.u32 	%r6364, 0;
	mov.u32 	%r6362, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6362], %r6365;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1673, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6362+4], %r1673;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1674, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6362+8], %r1674;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1675, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6362+12], %r1675;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6365, {low,high};}

	// end inline asm
	add.s32 	%r6362, %r6362, 16;
	add.s32 	%r6364, %r6364, 4;
	setp.lt.s32 	%p152, %r6364, %r384;
	@%p152 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1677, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1678, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1679, 31;
	sub.s32 	%r1680, %r1679, %r40;
	setp.gt.s32 	%p153, %r39, %r40;
	selp.b32 	%r1681, %r40, %r1680, %p153;
	shl.b32 	%r1682, %r1681, 2;
	sub.s32 	%r395, %r1682, %r1245;
	shl.b32 	%r1683, %r1244, 2;
	mov.u32 	%r1684, 128;
	sub.s32 	%r396, %r1684, %r1683;
	rem.s32 	%r1685, %r395, %r396;
	add.s32 	%r1686, %r1685, %r396;
	rem.s32 	%r397, %r1686, %r396;
	add.s32 	%r1687, %r395, 2;
	rem.s32 	%r1688, %r1687, %r396;
	add.s32 	%r1689, %r1688, %r396;
	rem.s32 	%r398, %r1689, %r396;
	mul.lo.s32 	%r1690, %r397, 6;
	mul.lo.s32 	%r1691, %r398, 6;
	mul.wide.s32 	%rd245, %r1690, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1691, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6366, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6366, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6367, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6367, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6368, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6368, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6369, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6369, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1700, %r395, 1;
	rem.s32 	%r1701, %r1700, %r396;
	add.s32 	%r1702, %r1701, %r396;
	rem.s32 	%r411, %r1702, %r396;
	add.s32 	%r1703, %r395, 3;
	rem.s32 	%r1704, %r1703, %r396;
	add.s32 	%r1705, %r1704, %r396;
	rem.s32 	%r412, %r1705, %r396;
	mul.lo.s32 	%r1706, %r411, 6;
	mul.lo.s32 	%r1707, %r412, 6;
	mul.wide.s32 	%rd247, %r1706, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1707, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6370, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6370, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6371, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6371, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6372, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6372, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6373, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6373, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1716, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1716;
	// begin inline asm
	mov.u32 %r1717, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1717;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p162, %rd24, 0;
	@%p162 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1718, %nctaid.y;
	mov.u32 	%r1719, %nctaid.x;
	mul.lo.s32 	%r1720, %r1719, %r1718;
	mov.u32 	%r1721, %nctaid.z;
	mul.lo.s32 	%r425, %r1720, %r1721;
	neg.s32 	%r1722, %r36;
	add.s32 	%r1723, %r40, %r35;
	setp.ne.s32 	%p163, %r1723, %r1722;
	mov.u32 	%r1724, %ctaid.x;
	add.s32 	%r426, %r1724, %r37;
	neg.s32 	%r427, %r38;
	bar.sync 	0;
	@%p163 bra 	$L__BB0_300;

	setp.eq.s32 	%p164, %r426, %r427;
	mov.u32 	%r1727, -2147483647;
	sub.s32 	%r1728, %r1727, %r425;
	selp.b32 	%r1726, %r1728, 1, %p164;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1725,[%rd25],%r1726;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1729, [%rd25];
	xor.b32  	%r1730, %r1729, %r1725;
	setp.gt.s32 	%p165, %r1730, -1;
	@%p165 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1731,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p166, %r43, 1;
	@%p166 bra 	$L__BB0_790;

	shr.s32 	%r1733, %r1247, 31;
	shr.u32 	%r1734, %r1733, 30;
	add.s32 	%r1735, %r1247, %r1734;
	shr.s32 	%r429, %r1735, 2;
	add.s32 	%r1736, %r40, 24;
	mul.hi.s32 	%r1737, %r1736, 1374389535;
	shr.u32 	%r1738, %r1737, 31;
	shr.s32 	%r1739, %r1737, 3;
	add.s32 	%r1740, %r1739, %r1738;
	mul.lo.s32 	%r1741, %r1740, 25;
	sub.s32 	%r1742, %r1736, %r1741;
	add.s32 	%r1743, %r40, 26;
	mul.hi.s32 	%r1744, %r1743, 1374389535;
	shr.u32 	%r1745, %r1744, 31;
	shr.s32 	%r1746, %r1744, 3;
	add.s32 	%r1747, %r1746, %r1745;
	mul.lo.s32 	%r1748, %r1747, 25;
	sub.s32 	%r1749, %r1743, %r1748;
	setp.lt.s32 	%p167, %r40, 25;
	selp.b32 	%r430, %r1742, %r40, %p167;
	shr.u32 	%r1750, %r1247, 31;
	add.s32 	%r1751, %r1247, %r1750;
	and.b32  	%r1752, %r1751, -2;
	sub.s32 	%r431, %r1247, %r1752;
	setp.lt.s32 	%p168, %r397, %r1256;
	setp.ge.s32 	%p169, %r397, %r1255;
	and.pred  	%p11, %p168, %p169;
	setp.lt.s32 	%p170, %r411, %r1256;
	setp.ge.s32 	%p171, %r411, %r1255;
	and.pred  	%p12, %p170, %p171;
	setp.lt.s32 	%p172, %r398, %r1256;
	setp.ge.s32 	%p173, %r398, %r1255;
	and.pred  	%p13, %p172, %p173;
	setp.lt.s32 	%p174, %r412, %r1256;
	setp.ge.s32 	%p175, %r412, %r1255;
	and.pred  	%p14, %p174, %p175;
	selp.b32 	%r432, %r1749, %r40, %p167;
	mov.u32 	%r1732, 0;
	// begin inline asm
	{mov.u32 %r1753, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2078, %r1753, 8;
	add.s32 	%r2079, %r2078, -8192;
	or.b32  	%r1757, %r2079, 31;
	// begin inline asm
	{sub.f16x2 %r5158,%r1678,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5161,%r6368,%r5158;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1678;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6176,%r6369,%r5158;
}
	// end inline asm
	mov.u32 	%r6374, %r1678;
	mov.u32 	%r6375, %r1678;
	mov.u32 	%r6376, %r1678;
	mov.u32 	%r6377, %r1678;
	mov.u32 	%r6378, %r1678;
	mov.u32 	%r6379, %r1678;
	mov.u32 	%r6380, %r1678;
	mov.u32 	%r6381, %r1678;
	mov.u32 	%r6382, %r1678;
	mov.u32 	%r6383, %r1678;
	mov.u32 	%r6384, %r1678;
	mov.u32 	%r6385, %r1678;
	mov.u32 	%r6386, %r1678;
	mov.u32 	%r6387, %r1678;
	mov.u32 	%r6388, %r1678;
	mov.u32 	%r6389, %r1678;
	mov.u32 	%r6390, %r1678;
	mov.u32 	%r6391, %r1678;
	mov.u32 	%r6392, %r1678;
	mov.u32 	%r6393, %r1678;
	mov.u32 	%r6394, %r1678;
	mov.u32 	%r6395, %r1678;
	mov.u32 	%r6396, %r1678;
	mov.u32 	%r6397, %r1678;
	mov.u32 	%r6398, %r1678;
	mov.u32 	%r6399, %r1678;
	mov.u32 	%r6400, %r1678;
	mov.u32 	%r6401, %r1678;
	mov.u32 	%r6402, %r1678;
	mov.u32 	%r6403, %r1678;
	mov.u32 	%r6404, %r1678;
	mov.u32 	%r6405, %r1678;
	mov.u32 	%r6406, %r1678;
	mov.u32 	%r6407, %r1678;
	mov.u32 	%r6408, %r1678;
	mov.u32 	%r6409, %r1678;
	mov.u32 	%r6410, %r1678;
	mov.u32 	%r6411, %r1678;
	mov.u32 	%r6412, %r1678;
	mov.u32 	%r6413, %r1678;
	mov.u32 	%r6414, %r1678;
	mov.u32 	%r6415, %r1678;
	mov.u32 	%r6416, %r1678;
	mov.u32 	%r6417, %r1678;
	mov.u32 	%r6418, %r1678;
	mov.u32 	%r6419, %r1678;
	mov.u32 	%r6420, %r1678;
	mov.u32 	%r6421, %r1678;
	mov.u32 	%r6422, %r1678;
	mov.u32 	%r6423, %r1678;
	mov.u32 	%r6424, %r1678;
	mov.u32 	%r6425, %r1678;
	mov.u32 	%r6426, %r1678;
	mov.u32 	%r6427, %r1678;
	mov.u32 	%r6428, %r1678;
	mov.u32 	%r6429, %r1678;
	mov.u32 	%r6430, %r1678;
	mov.u32 	%r6431, %r1678;
	mov.u32 	%r6432, %r1678;
	mov.u32 	%r6433, %r1678;
	mov.u32 	%r6434, %r1678;
	mov.u32 	%r6435, %r1678;
	mov.u32 	%r6436, %r1678;
	mov.u32 	%r6437, %r1678;
	mov.u32 	%r6438, %r1678;
	mov.u32 	%r6439, %r1678;
	mov.u32 	%r6440, %r1678;
	mov.u32 	%r6441, %r1678;
	mov.u32 	%r6442, %r1678;
	mov.u32 	%r6443, %r1678;
	mov.u32 	%r6444, %r1678;
	mov.u32 	%r6445, %r1678;
	mov.u32 	%r6446, %r1678;
	mov.u32 	%r6447, %r1678;
	mov.u32 	%r6448, %r1732;

$L__BB0_302:
	mov.u32 	%r6275, %tid.y;
	mov.u32 	%r6274, %tid.z;
	mov.u32 	%r6273, %ctaid.y;
	mov.u32 	%r6272, %ctaid.z;
	mov.u32 	%r1768, 1;
	not.b32 	%r2042, %r6272;
	mov.u32 	%r2034, -1;
	add.s32 	%r2043, %r1240, %r2042;
	not.b32 	%r2045, %r6273;
	add.s32 	%r2046, %r1239, %r2045;
	add.s32 	%r2047, %r2046, %r2043;
	mul.lo.s32 	%r2048, %r2047, %r1241;
	add.s32 	%r2049, %r2048, %r1242;
	not.b32 	%r2051, %r6275;
	add.s32 	%r2052, %r1237, %r2051;
	mad.lo.s32 	%r2053, %r2046, %r1237, %r2052;
	not.b32 	%r2055, %r6274;
	add.s32 	%r2056, %r1238, %r2055;
	mad.lo.s32 	%r2057, %r2043, %r1238, %r2056;
	add.s32 	%r2058, %r2053, %r2057;
	shl.b32 	%r2059, %r2058, 1;
	add.s32 	%r2060, %r2049, %r2059;
	add.s32 	%r2061, %r2060, %r6448;
	add.s32 	%r2062, %r6448, %r2048;
	div.s32 	%r2063, %r2061, %r1242;
	mul.lo.s32 	%r2064, %r2063, %r1242;
	sub.s32 	%r2067, %r42, %r1242;
	sub.s32 	%r2068, %r2053, %r2057;
	shl.b32 	%r2069, %r2068, 1;
	add.s32 	%r2070, %r2069, %r1243;
	mad.lo.s32 	%r2071, %r2063, %r42, %r2070;
	mad.lo.s32 	%r2072, %r2063, %r2067, %r2062;
	div.s32 	%r2073, %r2071, %r1243;
	mul.lo.s32 	%r2074, %r2073, %r1243;
	sub.s32 	%r2077, %r1264, %r1243;
	mov.u32 	%r1852, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1754,%r1677,%r1732,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1760, %r6367, %r1754, %p15;
	// begin inline asm
	{mul.f16x2 %r6532,%r1760,%r6447;
}
	// end inline asm
	selp.b32 	%r1763, %r6371, %r1754, %p15;
	// begin inline asm
	{mul.f16x2 %r6530,%r1763,%r6446;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1766,%r1677,%r1768,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1772, %r6367, %r1766, %p15;
	// begin inline asm
	{mul.f16x2 %r6531,%r1772,%r6445;
}
	// end inline asm
	selp.b32 	%r1775, %r6371, %r1766, %p15;
	// begin inline asm
	{mul.f16x2 %r6529,%r1775,%r6444;
}
	// end inline asm
	mov.u32 	%r1780, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1778,%r1677,%r1780,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1784, %r6367, %r1778, %p15;
	// begin inline asm
	{mul.f16x2 %r6528,%r1784,%r6443;
}
	// end inline asm
	selp.b32 	%r1787, %r6371, %r1778, %p15;
	// begin inline asm
	{mul.f16x2 %r6527,%r1787,%r6442;
}
	// end inline asm
	mov.u32 	%r1792, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1790,%r1677,%r1792,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1796, %r6367, %r1790, %p15;
	// begin inline asm
	{mul.f16x2 %r6526,%r1796,%r1678;
}
	// end inline asm
	selp.b32 	%r1799, %r6371, %r1790, %p15;
	// begin inline asm
	{mul.f16x2 %r6524,%r1799,%r1678;
}
	// end inline asm
	mov.u32 	%r1804, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1802,%r1677,%r1804,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1808, %r6367, %r1802, %p15;
	// begin inline asm
	{mul.f16x2 %r6525,%r1808,%r6441;
}
	// end inline asm
	selp.b32 	%r1811, %r6371, %r1802, %p15;
	// begin inline asm
	{mul.f16x2 %r6523,%r1811,%r6440;
}
	// end inline asm
	mov.u32 	%r1816, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1814,%r1677,%r1816,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1820, %r6367, %r1814, %p15;
	// begin inline asm
	{mul.f16x2 %r6522,%r1820,%r6439;
}
	// end inline asm
	selp.b32 	%r1823, %r6371, %r1814, %p15;
	// begin inline asm
	{mul.f16x2 %r6519,%r1823,%r6438;
}
	// end inline asm
	mov.u32 	%r1828, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1826,%r1677,%r1828,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1832, %r6367, %r1826, %p15;
	// begin inline asm
	{mul.f16x2 %r6521,%r1832,%r6437;
}
	// end inline asm
	selp.b32 	%r1835, %r6371, %r1826, %p15;
	// begin inline asm
	{mul.f16x2 %r6518,%r1835,%r6436;
}
	// end inline asm
	mov.u32 	%r1840, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1838,%r1677,%r1840,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1844, %r6367, %r1838, %p15;
	// begin inline asm
	{mul.f16x2 %r6520,%r1844,%r6435;
}
	// end inline asm
	selp.b32 	%r1847, %r6371, %r1838, %p15;
	// begin inline asm
	{mul.f16x2 %r6517,%r1847,%r6434;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1850,%r1677,%r1852,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1856, %r6367, %r1850, %p15;
	// begin inline asm
	{mul.f16x2 %r6516,%r1856,%r6433;
}
	// end inline asm
	selp.b32 	%r1859, %r6371, %r1850, %p15;
	// begin inline asm
	{mul.f16x2 %r6513,%r1859,%r6432;
}
	// end inline asm
	mov.u32 	%r1864, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1862,%r1677,%r1864,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1868, %r6367, %r1862, %p15;
	// begin inline asm
	{mul.f16x2 %r6515,%r1868,%r6431;
}
	// end inline asm
	selp.b32 	%r1871, %r6371, %r1862, %p15;
	// begin inline asm
	{mul.f16x2 %r6512,%r1871,%r6430;
}
	// end inline asm
	mov.u32 	%r1876, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1874,%r1677,%r1876,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1880, %r6367, %r1874, %p15;
	// begin inline asm
	{mul.f16x2 %r6514,%r1880,%r6429;
}
	// end inline asm
	selp.b32 	%r1883, %r6371, %r1874, %p15;
	// begin inline asm
	{mul.f16x2 %r6511,%r1883,%r6428;
}
	// end inline asm
	mov.u32 	%r1888, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1886,%r1677,%r1888,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1892, %r6367, %r1886, %p15;
	// begin inline asm
	{mul.f16x2 %r6510,%r1892,%r1678;
}
	// end inline asm
	selp.b32 	%r1895, %r6371, %r1886, %p15;
	// begin inline asm
	{mul.f16x2 %r6509,%r1895,%r1678;
}
	// end inline asm
	mov.u32 	%r1900, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1898,%r1677,%r1900,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1904, %r6367, %r1898, %p15;
	// begin inline asm
	{mul.f16x2 %r6508,%r1904,%r1678;
}
	// end inline asm
	selp.b32 	%r1907, %r6371, %r1898, %p15;
	// begin inline asm
	{mul.f16x2 %r6506,%r1907,%r1678;
}
	// end inline asm
	mov.u32 	%r1912, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1910,%r1677,%r1912,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1916, %r6367, %r1910, %p15;
	// begin inline asm
	{mul.f16x2 %r6507,%r1916,%r1678;
}
	// end inline asm
	selp.b32 	%r1919, %r6371, %r1910, %p15;
	// begin inline asm
	{mul.f16x2 %r6505,%r1919,%r1678;
}
	// end inline asm
	mov.u32 	%r1924, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1922,%r1677,%r1924,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1928, %r6367, %r1922, %p15;
	// begin inline asm
	{mul.f16x2 %r6504,%r1928,%r1678;
}
	// end inline asm
	selp.b32 	%r1931, %r6371, %r1922, %p15;
	// begin inline asm
	{mul.f16x2 %r6501,%r1931,%r1678;
}
	// end inline asm
	mov.u32 	%r1936, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r1934,%r1677,%r1936,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1940, %r6367, %r1934, %p15;
	// begin inline asm
	{mul.f16x2 %r6503,%r1940,%r6427;
}
	// end inline asm
	selp.b32 	%r1943, %r6371, %r1934, %p15;
	// begin inline asm
	{mul.f16x2 %r6500,%r1943,%r6426;
}
	// end inline asm
	mov.u32 	%r1948, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r1946,%r1677,%r1948,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1952, %r6367, %r1946, %p15;
	// begin inline asm
	{mul.f16x2 %r6502,%r1952,%r6425;
}
	// end inline asm
	selp.b32 	%r1955, %r6371, %r1946, %p15;
	// begin inline asm
	{mul.f16x2 %r6499,%r1955,%r6424;
}
	// end inline asm
	mov.u32 	%r1960, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r1958,%r1677,%r1960,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1964, %r6367, %r1958, %p15;
	// begin inline asm
	{mul.f16x2 %r6498,%r1964,%r1678;
}
	// end inline asm
	selp.b32 	%r1967, %r6371, %r1958, %p15;
	// begin inline asm
	{mul.f16x2 %r6495,%r1967,%r1678;
}
	// end inline asm
	mov.u32 	%r1972, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r1970,%r1677,%r1972,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1976, %r6367, %r1970, %p15;
	// begin inline asm
	{mul.f16x2 %r6497,%r1976,%r1678;
}
	// end inline asm
	selp.b32 	%r1979, %r6371, %r1970, %p15;
	// begin inline asm
	{mul.f16x2 %r6494,%r1979,%r1678;
}
	// end inline asm
	mov.u32 	%r1984, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r1982,%r1677,%r1984,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r1988, %r6367, %r1982, %p15;
	// begin inline asm
	{mul.f16x2 %r6496,%r1988,%r6423;
}
	// end inline asm
	selp.b32 	%r1991, %r6371, %r1982, %p15;
	// begin inline asm
	{mul.f16x2 %r6493,%r1991,%r6422;
}
	// end inline asm
	mov.u32 	%r1996, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r1994,%r1677,%r1996,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r2000, %r6367, %r1994, %p15;
	// begin inline asm
	{mul.f16x2 %r6492,%r2000,%r1678;
}
	// end inline asm
	selp.b32 	%r2003, %r6371, %r1994, %p15;
	// begin inline asm
	{mul.f16x2 %r6491,%r2003,%r1678;
}
	// end inline asm
	mov.u32 	%r2008, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2006,%r1677,%r2008,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r2012, %r6367, %r2006, %p15;
	// begin inline asm
	{mul.f16x2 %r6490,%r2012,%r1678;
}
	// end inline asm
	selp.b32 	%r2015, %r6371, %r2006, %p15;
	// begin inline asm
	{mul.f16x2 %r6488,%r2015,%r1678;
}
	// end inline asm
	mov.u32 	%r2020, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2018,%r1677,%r2020,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r2024, %r6367, %r2018, %p15;
	// begin inline asm
	{mul.f16x2 %r6489,%r2024,%r1678;
}
	// end inline asm
	selp.b32 	%r2027, %r6371, %r2018, %p15;
	// begin inline asm
	{mul.f16x2 %r6487,%r2027,%r1678;
}
	// end inline asm
	mov.u32 	%r2032, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2030,%r1677,%r2032,%r1757,%r2034;
}
	// end inline asm
	selp.b32 	%r2036, %r6367, %r2030, %p15;
	// begin inline asm
	{mul.f16x2 %r6486,%r2036,%r1678;
}
	// end inline asm
	selp.b32 	%r2039, %r6371, %r2030, %p15;
	// begin inline asm
	{mul.f16x2 %r6485,%r2039,%r1678;
}
	// end inline asm
	sub.s32 	%r556, %r2061, %r2064;
	sub.s32 	%r557, %r2071, %r2074;
	mad.lo.s32 	%r558, %r2073, %r2077, %r2072;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2126, %r558, 1;
	mul.wide.s32 	%rd256, %r2126, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p86 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	mov.u32 	%r6276, %tid.x;
	add.s32 	%r2329, %r1259, 1;
	setp.lt.s32 	%p183, %r558, %r2329;
	setp.eq.s32 	%p184, %r429, %r6276;
	setp.gt.s32 	%p185, %r558, -1;
	and.pred  	%p186, %p184, %p185;
	and.pred  	%p187, %p183, %p186;
	@%p187 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r6451, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r6452, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2129, %r1259, 1;
	setp.lt.s32 	%p178, %r558, %r2129;
	setp.gt.s32 	%p179, %r558, -1;
	and.pred  	%p180, %p179, %p178;
	@%p180 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r6449, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r6450, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6451, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6452, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2337, 0;
	mov.u32 	%r2348, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2335,%r6365,%r2337,%r1757,%r2348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2340,%r6451,%r2335;
}
	// end inline asm
	mov.u32 	%r2346, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2344,%r6365,%r2346,%r1757,%r2348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2349,%r6452,%r2344;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6454,%r2340,%r2349;
}
	// end inline asm
	setp.eq.s32 	%p188, %r431, 0;
	mov.u32 	%r6453, %r6454;
	@%p188 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r6453, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r6532,%r6532,%r6453;
}
	// end inline asm
	setp.eq.s32 	%p189, %r431, 1;
	@%p189 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6454, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r6530,%r6530,%r6454;
}
	// end inline asm
	mov.u32 	%r2370, 2;
	mov.u32 	%r2381, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2368,%r6365,%r2370,%r1757,%r2381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2373,%r6451,%r2368;
}
	// end inline asm
	mov.u32 	%r2379, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2377,%r6365,%r2379,%r1757,%r2381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2382,%r6452,%r2377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6456,%r2373,%r2382;
}
	// end inline asm
	mov.u32 	%r6455, %r6456;
	@%p188 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r6455, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r6531,%r6531,%r6455;
}
	// end inline asm
	@%p189 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r6456, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r6529,%r6529,%r6456;
}
	// end inline asm
	mov.u32 	%r2403, 4;
	mov.u32 	%r2414, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2401,%r6365,%r2403,%r1757,%r2414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2406,%r6451,%r2401;
}
	// end inline asm
	mov.u32 	%r2412, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2410,%r6365,%r2412,%r1757,%r2414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2415,%r6452,%r2410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6458,%r2406,%r2415;
}
	// end inline asm
	mov.u32 	%r6457, %r6458;
	@%p188 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6457, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r6528,%r6528,%r6457;
}
	// end inline asm
	@%p189 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r6458, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r6527,%r6527,%r6458;
}
	// end inline asm
	mov.u32 	%r2436, 6;
	mov.u32 	%r2447, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2434,%r6365,%r2436,%r1757,%r2447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2439,%r6451,%r2434;
}
	// end inline asm
	mov.u32 	%r2445, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2443,%r6365,%r2445,%r1757,%r2447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2448,%r6452,%r2443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r2439,%r2448;
}
	// end inline asm
	mov.u32 	%r6459, %r6460;
	@%p188 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r6459, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r6526,%r6526,%r6459;
}
	// end inline asm
	@%p189 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r6460, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r6524,%r6524,%r6460;
}
	// end inline asm
	mov.u32 	%r2469, 8;
	mov.u32 	%r2480, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2467,%r6365,%r2469,%r1757,%r2480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2472,%r6451,%r2467;
}
	// end inline asm
	mov.u32 	%r2478, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2476,%r6365,%r2478,%r1757,%r2480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2481,%r6452,%r2476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6462,%r2472,%r2481;
}
	// end inline asm
	mov.u32 	%r6461, %r6462;
	@%p188 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r6461, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r6525,%r6525,%r6461;
}
	// end inline asm
	@%p189 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r6462, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r6523,%r6523,%r6462;
}
	// end inline asm
	mov.u32 	%r2502, 10;
	mov.u32 	%r2513, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2500,%r6365,%r2502,%r1757,%r2513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2505,%r6451,%r2500;
}
	// end inline asm
	mov.u32 	%r2511, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2509,%r6365,%r2511,%r1757,%r2513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2514,%r6452,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r2505,%r2514;
}
	// end inline asm
	mov.u32 	%r6463, %r6464;
	@%p188 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r6463, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r6522,%r6522,%r6463;
}
	// end inline asm
	@%p189 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r6464, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r6519,%r6519,%r6464;
}
	// end inline asm
	mov.u32 	%r2535, 12;
	mov.u32 	%r2546, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2533,%r6365,%r2535,%r1757,%r2546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2538,%r6451,%r2533;
}
	// end inline asm
	mov.u32 	%r2544, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2542,%r6365,%r2544,%r1757,%r2546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2547,%r6452,%r2542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6466,%r2538,%r2547;
}
	// end inline asm
	mov.u32 	%r6465, %r6466;
	@%p188 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r6465, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r6521,%r6521,%r6465;
}
	// end inline asm
	@%p189 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r6466, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r6518,%r6518,%r6466;
}
	// end inline asm
	mov.u32 	%r2568, 14;
	mov.u32 	%r2579, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2566,%r6365,%r2568,%r1757,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2571,%r6451,%r2566;
}
	// end inline asm
	mov.u32 	%r2577, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2575,%r6365,%r2577,%r1757,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2580,%r6452,%r2575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6468,%r2571,%r2580;
}
	// end inline asm
	mov.u32 	%r6467, %r6468;
	@%p188 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r6467, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r6516,%r6516,%r6467;
}
	// end inline asm
	@%p189 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r6468, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6513,%r6513,%r6468;
}
	// end inline asm
	mov.u32 	%r2601, 16;
	mov.u32 	%r2612, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2599,%r6365,%r2601,%r1757,%r2612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2604,%r6451,%r2599;
}
	// end inline asm
	mov.u32 	%r2610, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2608,%r6365,%r2610,%r1757,%r2612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2613,%r6452,%r2608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6470,%r2604,%r2613;
}
	// end inline asm
	mov.u32 	%r6469, %r6470;
	@%p188 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r6469, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6515,%r6515,%r6469;
}
	// end inline asm
	@%p189 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r6470, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6512,%r6512,%r6470;
}
	// end inline asm
	mov.u32 	%r2634, 18;
	mov.u32 	%r2645, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2632,%r6365,%r2634,%r1757,%r2645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2637,%r6451,%r2632;
}
	// end inline asm
	mov.u32 	%r2643, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2641,%r6365,%r2643,%r1757,%r2645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2646,%r6452,%r2641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6472,%r2637,%r2646;
}
	// end inline asm
	mov.u32 	%r6471, %r6472;
	@%p188 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r6471, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6510,%r6510,%r6471;
}
	// end inline asm
	@%p189 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r6472, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6509,%r6509,%r6472;
}
	// end inline asm
	mov.u32 	%r2667, 20;
	mov.u32 	%r2678, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2665,%r6365,%r2667,%r1757,%r2678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2670,%r6451,%r2665;
}
	// end inline asm
	mov.u32 	%r2676, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2674,%r6365,%r2676,%r1757,%r2678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2679,%r6452,%r2674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6474,%r2670,%r2679;
}
	// end inline asm
	mov.u32 	%r6473, %r6474;
	@%p188 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r6473, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6508,%r6508,%r6473;
}
	// end inline asm
	@%p189 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r6474, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6506,%r6506,%r6474;
}
	// end inline asm
	mov.u32 	%r2700, 22;
	mov.u32 	%r2711, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2698,%r6365,%r2700,%r1757,%r2711;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2703,%r6451,%r2698;
}
	// end inline asm
	mov.u32 	%r2709, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2707,%r6365,%r2709,%r1757,%r2711;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2712,%r6452,%r2707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6476,%r2703,%r2712;
}
	// end inline asm
	mov.u32 	%r6475, %r6476;
	@%p188 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r6475, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6504,%r6504,%r6475;
}
	// end inline asm
	@%p189 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r6476, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6501,%r6501,%r6476;
}
	// end inline asm
	mov.u32 	%r2733, 24;
	mov.u32 	%r2744, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2731,%r6365,%r2733,%r1757,%r2744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r6451,%r2731;
}
	// end inline asm
	mov.u32 	%r2742, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2740,%r6365,%r2742,%r1757,%r2744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2745,%r6452,%r2740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6478,%r2736,%r2745;
}
	// end inline asm
	mov.u32 	%r6477, %r6478;
	@%p188 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r6477, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6503,%r6503,%r6477;
}
	// end inline asm
	@%p189 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r6478, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6500,%r6500,%r6478;
}
	// end inline asm
	mov.u32 	%r2766, 26;
	mov.u32 	%r2777, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2764,%r6365,%r2766,%r1757,%r2777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2769,%r6451,%r2764;
}
	// end inline asm
	mov.u32 	%r2775, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2773,%r6365,%r2775,%r1757,%r2777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r6452,%r2773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6480,%r2769,%r2778;
}
	// end inline asm
	mov.u32 	%r6479, %r6480;
	@%p188 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r6479, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6498,%r6498,%r6479;
}
	// end inline asm
	@%p189 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r6480, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6495,%r6495,%r6480;
}
	// end inline asm
	mov.u32 	%r2799, 28;
	mov.u32 	%r2810, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2797,%r6365,%r2799,%r1757,%r2810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r6451,%r2797;
}
	// end inline asm
	mov.u32 	%r2808, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2806,%r6365,%r2808,%r1757,%r2810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2811,%r6452,%r2806;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6482,%r2802,%r2811;
}
	// end inline asm
	mov.u32 	%r6481, %r6482;
	@%p188 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r6481, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6497,%r6497,%r6481;
}
	// end inline asm
	@%p189 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r6482, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6494,%r6494,%r6482;
}
	// end inline asm
	mov.u32 	%r2841, 31;
	mov.u32 	%r2832, 30;
	mov.u32 	%r2843, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2830,%r6365,%r2832,%r1757,%r2843;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2835,%r6451,%r2830;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2839,%r6365,%r2841,%r1757,%r2843;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2844,%r6452,%r2839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6484,%r2835,%r2844;
}
	// end inline asm
	mov.u32 	%r6483, %r6484;
	@%p188 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r6483, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6490,%r6490,%r6483;
}
	// end inline asm
	@%p189 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r6484, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6488,%r6488,%r6484;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6449, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6450, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p181, %r557, %r1247;
	@%p181 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2323, 0;
	// begin inline asm
	{mul.f16x2 %r2231,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6532,%r6532,%r2231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2237,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6520,%r6520,%r2237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2243,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6522,%r6522,%r2243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2249,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6502,%r6502,%r2249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2255,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6504,%r6504,%r2255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2261,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6489,%r6489,%r2261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2267,%r6450,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6526,%r6526,%r2267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2273,%r6450,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6507,%r6507,%r2273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2279,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6530,%r6530,%r2279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2285,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6517,%r6517,%r2285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2291,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r6519,%r2291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2297,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6499,%r6499,%r2297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2303,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6501,%r6501,%r2303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2309,%r6449,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6487,%r6487,%r2309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2315,%r6450,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6524,%r6524,%r2315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2321,%r6450,%r2323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6505,%r6505,%r2321;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2134, %r1247, -2;
	setp.ne.s32 	%p182, %r557, %r2134;
	@%p182 bra 	$L__BB0_378;

	mov.u32 	%r2227, 0;
	// begin inline asm
	{mul.f16x2 %r2135,%r6449,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6510,%r6510,%r2135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2141,%r6449,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6492,%r6492,%r2141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2147,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6528,%r6528,%r2147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2153,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6514,%r6514,%r2153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2159,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6516,%r6516,%r2159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2165,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6496,%r6496,%r2165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2171,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6498,%r6498,%r2171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2177,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6486,%r6486,%r2177;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2183,%r6449,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6509,%r6509,%r2183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2189,%r6449,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6491,%r6491,%r2189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2195,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6527,%r6527,%r2195;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2201,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6511,%r6511,%r2201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2207,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6513,%r6513,%r2207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2213,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6493,%r2213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2219,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6495,%r6495,%r2219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2225,%r6450,%r2227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6485,%r6485,%r2225;
}
	// end inline asm

$L__BB0_378:
	mov.u32 	%r2867, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2863,%r6420,%r430,%r1757,%r2867;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2863;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6420;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2870, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2871,%r6421,%r2870;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r6366,%r2871;
}
	// end inline asm
	@%p15 bra 	$L__BB0_380;
	bra.uni 	$L__BB0_379;

$L__BB0_380:
	// begin inline asm
	{neg.f16x2 %r6533,%r6532;
}
	// end inline asm
	bra.uni 	$L__BB0_381;

$L__BB0_379:
	// begin inline asm
	{mul.f16x2 %r6533,%r6367,%r2871;
}
	// end inline asm

$L__BB0_381:
	mov.u32 	%r2887, 31;
	mov.u32 	%r2910, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2885,%r6533,%r2887,%r1757,%r2910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2890,%r2874,%r2885;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2893,%r6419,%r6418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2896,%r2893,%r2890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2899,%r1678,%r2896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2902,%r6532,%r2899;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2906,%r6416,%r430,%r1757,%r2910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2906;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6416;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2913, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2914,%r6417,%r2913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2917,%r6366,%r2914;
}
	// end inline asm
	mov.u32 	%r6534, %r6531;
	@%p15 bra 	$L__BB0_383;

	// begin inline asm
	{mul.f16x2 %r6534,%r6367,%r2914;
}
	// end inline asm

$L__BB0_383:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2928,%r6534,%r2887,%r1757,%r2910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2933,%r2917,%r2928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2936,%r6419,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2939,%r2933,%r2936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2942,%r1678,%r2939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2945,%r6531,%r2942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2948,%r6420,%r6421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r6370,%r2948;
}
	// end inline asm
	@%p15 bra 	$L__BB0_385;
	bra.uni 	$L__BB0_384;

$L__BB0_385:
	// begin inline asm
	{neg.f16x2 %r6535,%r6530;
}
	// end inline asm
	bra.uni 	$L__BB0_386;

$L__BB0_384:
	// begin inline asm
	{mul.f16x2 %r6535,%r6371,%r2948;
}
	// end inline asm

$L__BB0_386:
	mov.u32 	%r2964, 31;
	mov.u32 	%r2966, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2962,%r6535,%r2964,%r1757,%r2966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2967,%r2951,%r2962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2970,%r6414,%r6413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2973,%r2970,%r2967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2976,%r1678,%r2973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2979,%r6530,%r2976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2982,%r6416,%r6417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2985,%r6370,%r2982;
}
	// end inline asm
	mov.u32 	%r6536, %r6529;
	@%p15 bra 	$L__BB0_388;

	// begin inline asm
	{mul.f16x2 %r6536,%r6371,%r2982;
}
	// end inline asm

$L__BB0_388:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2994,%r6536,%r2964,%r1757,%r2966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2999,%r2985,%r2994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3002,%r6414,%r6412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3005,%r2999,%r3002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3008,%r1678,%r3005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3011,%r6529,%r3008;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3015,%r6410,%r430,%r1757,%r2966;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3015;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6410;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3022, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3023,%r6411,%r3022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r6366,%r3023;
}
	// end inline asm
	@%p15 bra 	$L__BB0_390;
	bra.uni 	$L__BB0_389;

$L__BB0_390:
	// begin inline asm
	{neg.f16x2 %r6537,%r6528;
}
	// end inline asm
	bra.uni 	$L__BB0_391;

$L__BB0_389:
	// begin inline asm
	{mul.f16x2 %r6537,%r6367,%r3023;
}
	// end inline asm

$L__BB0_391:
	mov.u32 	%r3041, 31;
	mov.u32 	%r3043, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3039,%r6537,%r3041,%r1757,%r3043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3044,%r3026,%r3039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3047,%r6409,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3050,%r3047,%r3044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3053,%r1678,%r3050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3056,%r6528,%r3053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3059,%r6410,%r6411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3062,%r6370,%r3059;
}
	// end inline asm
	@%p15 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r6538,%r6527;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r6538,%r6371,%r3059;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3075, 31;
	mov.u32 	%r3098, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3073,%r6538,%r3075,%r1757,%r3098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3078,%r3062,%r3073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3081,%r6408,%r6414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3084,%r3081,%r3078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3087,%r1678,%r3084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3090,%r6527,%r3087;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3094,%r6406,%r430,%r1757,%r3098;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3094;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6406;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3101, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3102,%r6407,%r3101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3105,%r6366,%r3102;
}
	// end inline asm
	@%p15 bra 	$L__BB0_396;
	bra.uni 	$L__BB0_395;

$L__BB0_396:
	// begin inline asm
	{neg.f16x2 %r6539,%r6526;
}
	// end inline asm
	bra.uni 	$L__BB0_397;

$L__BB0_395:
	// begin inline asm
	{mul.f16x2 %r6539,%r6367,%r3102;
}
	// end inline asm

$L__BB0_397:
	mov.u32 	%r3120, 31;
	mov.u32 	%r3143, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3118,%r6539,%r3120,%r1757,%r3143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3123,%r3105,%r3118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3126,%r6405,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3129,%r3126,%r3123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3132,%r1678,%r3129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3135,%r6526,%r3132;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3139,%r6403,%r430,%r1757,%r3143;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3139;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6403;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3146, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3147,%r6404,%r3146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3150,%r6366,%r3147;
}
	// end inline asm
	mov.u32 	%r6540, %r6525;
	@%p15 bra 	$L__BB0_399;

	// begin inline asm
	{mul.f16x2 %r6540,%r6367,%r3147;
}
	// end inline asm

$L__BB0_399:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3161,%r6540,%r3120,%r1757,%r3143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3166,%r3150,%r3161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3169,%r6405,%r6418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3172,%r3166,%r3169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3175,%r1678,%r3172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3178,%r6525,%r3175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3181,%r6406,%r6407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3184,%r6370,%r3181;
}
	// end inline asm
	@%p15 bra 	$L__BB0_401;
	bra.uni 	$L__BB0_400;

$L__BB0_401:
	// begin inline asm
	{neg.f16x2 %r6541,%r6524;
}
	// end inline asm
	bra.uni 	$L__BB0_402;

$L__BB0_400:
	// begin inline asm
	{mul.f16x2 %r6541,%r6371,%r3181;
}
	// end inline asm

$L__BB0_402:
	mov.u32 	%r3197, 31;
	mov.u32 	%r3199, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3195,%r6541,%r3197,%r1757,%r3199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3200,%r3184,%r3195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3203,%r6402,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3206,%r3203,%r3200;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3209,%r1678,%r3206;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3212,%r6524,%r3209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3215,%r6403,%r6404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3218,%r6370,%r3215;
}
	// end inline asm
	mov.u32 	%r6542, %r6523;
	@%p15 bra 	$L__BB0_404;

	// begin inline asm
	{mul.f16x2 %r6542,%r6371,%r3215;
}
	// end inline asm

$L__BB0_404:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3227,%r6542,%r3197,%r1757,%r3199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3232,%r3218,%r3227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3235,%r6402,%r6413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3238,%r3232,%r3235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3241,%r1678,%r3238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3244,%r6523,%r3241;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3248,%r6400,%r430,%r1757,%r3199;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3248;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6400;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3255, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3256,%r6401,%r3255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3259,%r6366,%r3256;
}
	// end inline asm
	@%p15 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r6543,%r6522;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r6543,%r6367,%r3256;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3274, 31;
	mov.u32 	%r3297, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3272,%r6543,%r3274,%r1757,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3277,%r3259,%r3272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3280,%r6399,%r6405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3283,%r3280,%r3277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3286,%r1678,%r3283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6447,%r6522,%r3286;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3293,%r6397,%r430,%r1757,%r3297;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3293;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6397;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3300, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3301,%r6398,%r3300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3304,%r6366,%r3301;
}
	// end inline asm
	mov.u32 	%r6544, %r6521;
	@%p15 bra 	$L__BB0_409;

	// begin inline asm
	{mul.f16x2 %r6544,%r6367,%r3301;
}
	// end inline asm

$L__BB0_409:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3315,%r6544,%r3274,%r1757,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3320,%r3304,%r3315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3323,%r6399,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3326,%r3320,%r3323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3329,%r1678,%r3326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6445,%r6521,%r3329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3335,%r6401,%r6421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3338,%r6398,%r6404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3341,%r3335,%r3338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3344,%r1678,%r3341;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3347,%r6520,%r3344;
}
	// end inline asm
	selp.b32 	%r830, %r6520, %r3347, %p15;
	// begin inline asm
	{sub.f16x2 %r3350,%r6400,%r6401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3353,%r6370,%r3350;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r6545,%r6519;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r6545,%r6371,%r3350;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3366, 31;
	mov.u32 	%r3368, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3364,%r6545,%r3366,%r1757,%r3368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3369,%r3353,%r3364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3372,%r6396,%r6402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3375,%r3372,%r3369;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3378,%r1678,%r3375;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6446,%r6519,%r3378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3384,%r6397,%r6398;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3387,%r6370,%r3384;
}
	// end inline asm
	mov.u32 	%r6546, %r6518;
	@%p15 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r6546,%r6371,%r3384;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3396,%r6546,%r3366,%r1757,%r3368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3401,%r3387,%r3396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3404,%r6396,%r6414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3407,%r3401,%r3404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3410,%r1678,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6444,%r6518,%r3410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3416,%r6400,%r6420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3419,%r6397,%r6403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3422,%r3416,%r3419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3425,%r1678,%r3422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3428,%r6517,%r3425;
}
	// end inline asm
	selp.b32 	%r842, %r6517, %r3428, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3432,%r6394,%r430,%r1757,%r3368;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3432;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6394;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3439, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3440,%r6395,%r3439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3443,%r6366,%r3440;
}
	// end inline asm
	@%p15 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r6547,%r6516;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r6547,%r6367,%r3440;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3458, 31;
	mov.u32 	%r3481, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3456,%r6547,%r3458,%r1757,%r3481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3461,%r3443,%r3456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3464,%r6393,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3467,%r3464,%r3461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3470,%r1678,%r3467;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6443,%r6516,%r3470;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3477,%r6391,%r430,%r1757,%r3481;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3477;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6391;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3484, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3485,%r6392,%r3484;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3488,%r6366,%r3485;
}
	// end inline asm
	mov.u32 	%r6548, %r6515;
	@%p15 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r6548,%r6367,%r3485;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3499,%r6548,%r3458,%r1757,%r3481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3504,%r3488,%r3499;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3507,%r6393,%r6409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3510,%r3504,%r3507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3513,%r1678,%r3510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3516,%r6515,%r3513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3519,%r6395,%r6411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3522,%r6392,%r6398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3525,%r3519,%r3522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3528,%r1678,%r3525;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3531,%r6514,%r3528;
}
	// end inline asm
	selp.b32 	%r854, %r6514, %r3531, %p15;
	// begin inline asm
	{sub.f16x2 %r3534,%r6394,%r6395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3537,%r6370,%r3534;
}
	// end inline asm
	@%p15 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r6549,%r6513;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r6549,%r6371,%r3534;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3550, 31;
	mov.u32 	%r3552, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3548,%r6549,%r3550,%r1757,%r3552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3553,%r3537,%r3548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3556,%r6390,%r6396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3559,%r3556,%r3553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3562,%r1678,%r3559;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6442,%r6513,%r3562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3568,%r6391,%r6392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3571,%r6370,%r3568;
}
	// end inline asm
	mov.u32 	%r6550, %r6512;
	@%p15 bra 	$L__BB0_424;

	// begin inline asm
	{mul.f16x2 %r6550,%r6371,%r3568;
}
	// end inline asm

$L__BB0_424:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3580,%r6550,%r3550,%r1757,%r3552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3585,%r3571,%r3580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3588,%r6390,%r6408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3591,%r3585,%r3588;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3594,%r1678,%r3591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3597,%r6512,%r3594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3600,%r6394,%r6410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3603,%r6391,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3606,%r3600,%r3603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3609,%r1678,%r3606;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3612,%r6511,%r3609;
}
	// end inline asm
	selp.b32 	%r866, %r6511, %r3612, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3616,%r6388,%r430,%r1757,%r3552;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3616;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6388;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3623, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3624,%r6389,%r3623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3627,%r6366,%r3624;
}
	// end inline asm
	@%p15 bra 	$L__BB0_426;
	bra.uni 	$L__BB0_425;

$L__BB0_426:
	// begin inline asm
	{neg.f16x2 %r6551,%r6510;
}
	// end inline asm
	bra.uni 	$L__BB0_427;

$L__BB0_425:
	// begin inline asm
	{mul.f16x2 %r6551,%r6367,%r3624;
}
	// end inline asm

$L__BB0_427:
	mov.u32 	%r3642, 31;
	mov.u32 	%r3644, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3640,%r6551,%r3642,%r1757,%r3644;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3645,%r3627,%r3640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3648,%r1678,%r6393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3651,%r3648,%r3645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3654,%r1678,%r3651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3657,%r6510,%r3654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3660,%r6388,%r6389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3663,%r6370,%r3660;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r6552,%r6509;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r6552,%r6371,%r3660;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3676, 31;
	mov.u32 	%r3699, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3674,%r6552,%r3676,%r1757,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3679,%r3663,%r3674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3682,%r1678,%r6390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3685,%r3682,%r3679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3688,%r1678,%r3685;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3691,%r6509,%r3688;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3695,%r6386,%r430,%r1757,%r3699;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3695;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6386;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3702, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r6387,%r3702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3706,%r6366,%r3703;
}
	// end inline asm
	mov.u32 	%r6553, %r6508;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r6553,%r6367,%r3703;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3717,%r6553,%r3676,%r1757,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3722,%r3706,%r3717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3725,%r1678,%r6405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3728,%r3722,%r3725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3731,%r1678,%r3728;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6441,%r6508,%r3731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3737,%r1678,%r6407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3740,%r6387,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3743,%r3737,%r3740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3746,%r1678,%r3743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3749,%r6507,%r3746;
}
	// end inline asm
	selp.b32 	%r884, %r6507, %r3749, %p15;
	// begin inline asm
	{sub.f16x2 %r3752,%r6386,%r6387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3755,%r6370,%r3752;
}
	// end inline asm
	mov.u32 	%r6554, %r6506;
	@%p15 bra 	$L__BB0_434;

	// begin inline asm
	{mul.f16x2 %r6554,%r6371,%r3752;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3766, 31;
	mov.u32 	%r3804, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3764,%r6554,%r3766,%r1757,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3769,%r3755,%r3764;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3772,%r1678,%r6402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3775,%r3769,%r3772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3778,%r1678,%r3775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6440,%r6506,%r3778;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3784,%r1678,%r6406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r6386,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3790,%r3784,%r3787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3793,%r1678,%r3790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3796,%r6505,%r3793;
}
	// end inline asm
	selp.b32 	%r890, %r6505, %r3796, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3800,%r6384,%r430,%r1757,%r3804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3800;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6384;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3807, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r6385,%r3807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r6366,%r3808;
}
	// end inline asm
	@%p15 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r6555,%r6504;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r6555,%r6367,%r3808;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3826, 31;
	mov.u32 	%r3849, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3824,%r6555,%r3826,%r1757,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3829,%r3811,%r3824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3832,%r6383,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r3832,%r3829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3838,%r1678,%r3835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6439,%r6504,%r3838;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3845,%r6381,%r430,%r1757,%r3849;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3845;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6381;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3852, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r6382,%r3852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r6366,%r3853;
}
	// end inline asm
	mov.u32 	%r6556, %r6503;
	@%p15 bra 	$L__BB0_439;

	// begin inline asm
	{mul.f16x2 %r6556,%r6367,%r3853;
}
	// end inline asm

$L__BB0_439:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3867,%r6556,%r3826,%r1757,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r3856,%r3867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r6383,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3878,%r3872,%r3875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3881,%r1678,%r3878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6437,%r6503,%r3881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3887,%r6385,%r6401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3890,%r6382,%r6387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3893,%r3887,%r3890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3896,%r1678,%r3893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3899,%r6502,%r3896;
}
	// end inline asm
	selp.b32 	%r6435, %r6502, %r3899, %p15;
	// begin inline asm
	{sub.f16x2 %r3902,%r6384,%r6385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3905,%r6370,%r3902;
}
	// end inline asm
	@%p15 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r6557,%r6501;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r6557,%r6371,%r3902;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3918, 31;
	mov.u32 	%r3920, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3916,%r6557,%r3918,%r1757,%r3920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3921,%r3905,%r3916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3924,%r6380,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3927,%r3924,%r3921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3930,%r1678,%r3927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r6501,%r3930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r6381,%r6382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3939,%r6370,%r3936;
}
	// end inline asm
	mov.u32 	%r6558, %r6500;
	@%p15 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r6558,%r6371,%r3936;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3948,%r6558,%r3918,%r1757,%r3920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3953,%r3939,%r3948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3956,%r6380,%r6396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3959,%r3953,%r3956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3962,%r1678,%r3959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6436,%r6500,%r3962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3968,%r6384,%r6400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3971,%r6381,%r6386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3974,%r3968,%r3971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3977,%r1678,%r3974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3980,%r6499,%r3977;
}
	// end inline asm
	selp.b32 	%r6434, %r6499, %r3980, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3984,%r6378,%r430,%r1757,%r3920;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3984;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6378;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3991, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r6379,%r3991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3995,%r6366,%r3992;
}
	// end inline asm
	@%p15 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r6559,%r6498;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r6559,%r6367,%r3992;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r4010, 31;
	mov.u32 	%r4033, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4008,%r6559,%r4010,%r1757,%r4033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4013,%r3995,%r4008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4016,%r1678,%r6383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4019,%r4016,%r4013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4022,%r1678,%r4019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6433,%r6498,%r4022;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4029,%r6376,%r430,%r1757,%r4033;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4029;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6376;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4036, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r6377,%r4036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4040,%r6366,%r4037;
}
	// end inline asm
	mov.u32 	%r6560, %r6497;
	@%p15 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r6560,%r6367,%r4037;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4051,%r6560,%r4010,%r1757,%r4033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4056,%r4040,%r4051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r1678,%r6393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4062,%r4056,%r4059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4065,%r1678,%r4062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6431,%r6497,%r4065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4071,%r6379,%r6395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r6377,%r6382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r4071,%r4074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4080,%r1678,%r4077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4083,%r6496,%r4080;
}
	// end inline asm
	selp.b32 	%r6429, %r6496, %r4083, %p15;
	// begin inline asm
	{sub.f16x2 %r4086,%r6378,%r6379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r6370,%r4086;
}
	// end inline asm
	@%p15 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r6561,%r6495;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r6561,%r6371,%r4086;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4102, 31;
	mov.u32 	%r4104, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4100,%r6561,%r4102,%r1757,%r4104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4105,%r4089,%r4100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4108,%r1678,%r6380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4111,%r4108,%r4105;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4114,%r1678,%r4111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6432,%r6495,%r4114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r6376,%r6377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4123,%r6370,%r4120;
}
	// end inline asm
	mov.u32 	%r6562, %r6494;
	@%p15 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r6562,%r6371,%r4120;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4132,%r6562,%r4102,%r1757,%r4104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4137,%r4123,%r4132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4140,%r1678,%r6390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4143,%r4137,%r4140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4146,%r1678,%r4143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6430,%r6494,%r4146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4152,%r6378,%r6394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4155,%r6376,%r6381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4158,%r4152,%r4155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4161,%r1678,%r4158;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4164,%r6493,%r4161;
}
	// end inline asm
	selp.b32 	%r6428, %r6493, %r4164, %p15;
	// begin inline asm
	{sub.f16x2 %r4167,%r1678,%r6389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4170,%r1678,%r6377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4173,%r4167,%r4170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4176,%r1678,%r4173;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4179,%r6492,%r4176;
}
	// end inline asm
	selp.b32 	%r939, %r6492, %r4179, %p15;
	// begin inline asm
	{sub.f16x2 %r4182,%r1678,%r6388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4185,%r1678,%r6376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4188,%r4182,%r4185;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4191,%r1678,%r4188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4194,%r6491,%r4191;
}
	// end inline asm
	selp.b32 	%r940, %r6491, %r4194, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4198,%r6374,%r430,%r1757,%r4104;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4198;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6374;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4205, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4206,%r6375,%r4205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4209,%r6366,%r4206;
}
	// end inline asm
	mov.u32 	%r6563, %r6490;
	@%p15 bra 	$L__BB0_456;

	// begin inline asm
	{mul.f16x2 %r6563,%r6367,%r4206;
}
	// end inline asm

$L__BB0_456:
	mov.u32 	%r4222, 31;
	mov.u32 	%r4224, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4220,%r6563,%r4222,%r1757,%r4224;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4225,%r4209,%r4220;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r1678,%r6383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r4225,%r4228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4234,%r1678,%r4231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6427,%r6490,%r4234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4240,%r1678,%r6385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4243,%r6375,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4246,%r4240,%r4243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4249,%r1678,%r4246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4252,%r6489,%r4249;
}
	// end inline asm
	selp.b32 	%r6425, %r6489, %r4252, %p15;
	// begin inline asm
	{sub.f16x2 %r4255,%r6374,%r6375;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4258,%r6370,%r4255;
}
	// end inline asm
	mov.u32 	%r6564, %r6488;
	@%p15 bra 	$L__BB0_458;

	// begin inline asm
	{mul.f16x2 %r6564,%r6371,%r4255;
}
	// end inline asm

$L__BB0_458:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4267,%r6564,%r4222,%r1757,%r4224;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4272,%r4258,%r4267;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4275,%r1678,%r6380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4278,%r4272,%r4275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4281,%r1678,%r4278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6426,%r6488,%r4281;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4287,%r1678,%r6384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4290,%r6374,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r4287,%r4290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4296,%r1678,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4299,%r6487,%r4296;
}
	// end inline asm
	selp.b32 	%r6424, %r6487, %r4299, %p15;
	// begin inline asm
	{sub.f16x2 %r4302,%r1678,%r6379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r1678,%r6375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4308,%r4302,%r4305;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4311,%r1678,%r4308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4314,%r6486,%r4311;
}
	// end inline asm
	selp.b32 	%r6423, %r6486, %r4314, %p15;
	// begin inline asm
	{sub.f16x2 %r4317,%r1678,%r6378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4320,%r1678,%r6374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4323,%r4317,%r4320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4326,%r1678,%r4323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4329,%r6485,%r4326;
}
	// end inline asm
	selp.b32 	%r6422, %r6485, %r4329, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4334, %r1251, 2;
	setp.lt.s32 	%p253, %r556, %r4334;
	add.s32 	%r4335, %r1252, -1;
	setp.ge.s32 	%p254, %r556, %r4335;
	or.pred  	%p255, %p254, %p253;
	add.s32 	%r4336, %r1253, 2;
	setp.lt.s32 	%p256, %r557, %r4336;
	or.pred  	%p257, %p255, %p256;
	add.s32 	%r4337, %r1254, -2;
	setp.ge.s32 	%p258, %r557, %r4337;
	or.pred  	%p259, %p258, %p257;
	setp.lt.s32 	%p260, %r558, %r1248;
	or.pred  	%p261, %p260, %p259;
	mad.lo.s32 	%r4338, %r1250, %r1249, %r1248;
	setp.ge.s32 	%p262, %r558, %r4338;
	or.pred  	%p263, %p261, %p262;
	@%p263 bra 	$L__BB0_700;

	sub.s32 	%r955, %r558, %r1248;
	rem.s32 	%r4339, %r955, %r1249;
	setp.ne.s32 	%p264, %r4339, 0;
	@%p264 bra 	$L__BB0_700;

	div.s32 	%r4340, %r955, %r1249;
	mul.lo.s32 	%r4342, %r4340, %r52;
	sub.s32 	%r956, %r556, %r1251;
	sub.s32 	%r957, %r557, %r1253;
	mul.lo.s32 	%r958, %r4342, 3;
	add.s32 	%r4343, %r956, %r958;
	add.s32 	%r4344, %r4343, -2;
	mul.lo.s32 	%r959, %r4344, %r53;
	add.s32 	%r4346, %r957, %r959;
	mul.lo.s32 	%r4347, %r4346, %r54;
	sub.s32 	%r960, %r4347, %r1255;
	@%p15 bra 	$L__BB0_465;

	not.pred 	%p266, %p11;
	@%p266 bra 	$L__BB0_463;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2902;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4349, %r960, %r397;
	mul.wide.s32 	%rd259, %r4349, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;

$L__BB0_463:
	not.pred 	%p267, %p13;
	@%p267 bra 	$L__BB0_465;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2902;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4351, %r960, %r398;
	mul.wide.s32 	%rd261, %r4351, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;

$L__BB0_465:
	@%p15 bra 	$L__BB0_470;

	not.pred 	%p269, %p12;
	@%p269 bra 	$L__BB0_468;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2979;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4353, %r960, %r411;
	mul.wide.s32 	%rd263, %r4353, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;

$L__BB0_468:
	not.pred 	%p270, %p14;
	@%p270 bra 	$L__BB0_470;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2979;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4355, %r960, %r412;
	mul.wide.s32 	%rd265, %r4355, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_470:
	add.s32 	%r961, %r958, %r52;
	add.s32 	%r4357, %r956, %r961;
	add.s32 	%r4358, %r4357, -2;
	mad.lo.s32 	%r4360, %r4358, %r53, %r957;
	mul.lo.s32 	%r4361, %r4360, %r54;
	sub.s32 	%r962, %r4361, %r1255;
	@%p15 bra 	$L__BB0_475;

	not.pred 	%p272, %p11;
	@%p272 bra 	$L__BB0_473;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2945;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4363, %r962, %r397;
	mul.wide.s32 	%rd267, %r4363, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;

$L__BB0_473:
	not.pred 	%p273, %p13;
	@%p273 bra 	$L__BB0_475;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2945;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4365, %r962, %r398;
	mul.wide.s32 	%rd269, %r4365, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;

$L__BB0_475:
	@%p15 bra 	$L__BB0_480;

	not.pred 	%p275, %p12;
	@%p275 bra 	$L__BB0_478;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3011;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4367, %r962, %r411;
	mul.wide.s32 	%rd271, %r4367, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;

$L__BB0_478:
	not.pred 	%p276, %p14;
	@%p276 bra 	$L__BB0_480;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3011;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4369, %r962, %r412;
	mul.wide.s32 	%rd273, %r4369, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_480:
	add.s32 	%r963, %r957, 1;
	add.s32 	%r4370, %r963, %r959;
	mul.lo.s32 	%r4371, %r4370, %r54;
	sub.s32 	%r964, %r4371, %r1255;
	@%p15 bra 	$L__BB0_485;

	not.pred 	%p278, %p11;
	@%p278 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3056;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4373, %r964, %r397;
	mul.wide.s32 	%rd275, %r4373, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;

$L__BB0_483:
	not.pred 	%p279, %p13;
	@%p279 bra 	$L__BB0_485;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3056;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4375, %r964, %r398;
	mul.wide.s32 	%rd277, %r4375, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;

$L__BB0_485:
	@%p15 bra 	$L__BB0_490;

	not.pred 	%p281, %p12;
	@%p281 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3090;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4377, %r964, %r411;
	mul.wide.s32 	%rd279, %r4377, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;

$L__BB0_488:
	not.pred 	%p282, %p14;
	@%p282 bra 	$L__BB0_490;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3090;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4379, %r964, %r412;
	mul.wide.s32 	%rd281, %r4379, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_490:
	not.b32 	%r4380, %r1251;
	add.s32 	%r965, %r556, %r4380;
	not.b32 	%r4381, %r1253;
	add.s32 	%r966, %r557, %r4381;
	add.s32 	%r4382, %r965, %r958;
	mul.lo.s32 	%r967, %r4382, %r53;
	add.s32 	%r4384, %r966, %r967;
	mul.lo.s32 	%r4385, %r4384, %r54;
	sub.s32 	%r968, %r4385, %r1255;
	@%p15 bra 	$L__BB0_495;

	not.pred 	%p284, %p11;
	@%p284 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3135;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4387, %r968, %r397;
	mul.wide.s32 	%rd283, %r4387, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;

$L__BB0_493:
	not.pred 	%p285, %p13;
	@%p285 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3135;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4389, %r968, %r398;
	mul.wide.s32 	%rd285, %r4389, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;

$L__BB0_495:
	@%p15 bra 	$L__BB0_500;

	not.pred 	%p287, %p12;
	@%p287 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3212;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4391, %r968, %r411;
	mul.wide.s32 	%rd287, %r4391, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;

$L__BB0_498:
	not.pred 	%p288, %p14;
	@%p288 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3212;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4393, %r968, %r412;
	mul.wide.s32 	%rd289, %r4393, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_500:
	add.s32 	%r4395, %r965, %r961;
	mul.lo.s32 	%r969, %r4395, %r53;
	add.s32 	%r4396, %r966, %r969;
	mul.lo.s32 	%r4397, %r4396, %r54;
	sub.s32 	%r970, %r4397, %r1255;
	@%p15 bra 	$L__BB0_505;

	not.pred 	%p290, %p11;
	@%p290 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3178;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4399, %r970, %r397;
	mul.wide.s32 	%rd291, %r4399, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;

$L__BB0_503:
	not.pred 	%p291, %p13;
	@%p291 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3178;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4401, %r970, %r398;
	mul.wide.s32 	%rd293, %r4401, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;

$L__BB0_505:
	@%p15 bra 	$L__BB0_510;

	not.pred 	%p293, %p12;
	@%p293 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3244;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4403, %r970, %r411;
	mul.wide.s32 	%rd295, %r4403, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;

$L__BB0_508:
	not.pred 	%p294, %p14;
	@%p294 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3244;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4405, %r970, %r412;
	mul.wide.s32 	%rd297, %r4405, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_510:
	add.s32 	%r4406, %r957, %r967;
	mul.lo.s32 	%r4407, %r4406, %r54;
	sub.s32 	%r971, %r4407, %r1255;
	@%p15 bra 	$L__BB0_515;

	not.pred 	%p296, %p11;
	@%p296 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6447;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4409, %r971, %r397;
	mul.wide.s32 	%rd299, %r4409, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;

$L__BB0_513:
	not.pred 	%p297, %p13;
	@%p297 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6447;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4411, %r971, %r398;
	mul.wide.s32 	%rd301, %r4411, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;

$L__BB0_515:
	@%p15 bra 	$L__BB0_520;

	not.pred 	%p299, %p12;
	@%p299 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6446;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4413, %r971, %r411;
	mul.wide.s32 	%rd303, %r4413, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;

$L__BB0_518:
	not.pred 	%p300, %p14;
	@%p300 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6446;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4415, %r971, %r412;
	mul.wide.s32 	%rd305, %r4415, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_520:
	add.s32 	%r4416, %r957, %r969;
	mul.lo.s32 	%r4417, %r4416, %r54;
	sub.s32 	%r972, %r4417, %r1255;
	@%p15 bra 	$L__BB0_525;

	not.pred 	%p302, %p11;
	@%p302 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6445;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4419, %r972, %r397;
	mul.wide.s32 	%rd307, %r4419, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;

$L__BB0_523:
	not.pred 	%p303, %p13;
	@%p303 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6445;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4421, %r972, %r398;
	mul.wide.s32 	%rd309, %r4421, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;

$L__BB0_525:
	@%p15 bra 	$L__BB0_530;

	not.pred 	%p305, %p12;
	@%p305 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6444;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4423, %r972, %r411;
	mul.wide.s32 	%rd311, %r4423, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;

$L__BB0_528:
	not.pred 	%p306, %p14;
	@%p306 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6444;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4425, %r972, %r412;
	mul.wide.s32 	%rd313, %r4425, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_530:
	add.s32 	%r973, %r961, %r52;
	add.s32 	%r4427, %r965, %r973;
	mul.lo.s32 	%r974, %r4427, %r53;
	add.s32 	%r4429, %r957, %r974;
	mul.lo.s32 	%r4430, %r4429, %r54;
	sub.s32 	%r975, %r4430, %r1255;
	@%p15 bra 	$L__BB0_535;

	not.pred 	%p308, %p11;
	@%p308 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r830;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4432, %r975, %r397;
	mul.wide.s32 	%rd315, %r4432, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;

$L__BB0_533:
	not.pred 	%p309, %p13;
	@%p309 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r830;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4434, %r975, %r398;
	mul.wide.s32 	%rd317, %r4434, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;

$L__BB0_535:
	@%p15 bra 	$L__BB0_540;

	not.pred 	%p311, %p12;
	@%p311 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r842;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4436, %r975, %r411;
	mul.wide.s32 	%rd319, %r4436, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;

$L__BB0_538:
	not.pred 	%p312, %p14;
	@%p312 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r842;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4438, %r975, %r412;
	mul.wide.s32 	%rd321, %r4438, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_540:
	add.s32 	%r4439, %r963, %r967;
	mul.lo.s32 	%r4440, %r4439, %r54;
	sub.s32 	%r976, %r4440, %r1255;
	@%p15 bra 	$L__BB0_545;

	not.pred 	%p314, %p11;
	@%p314 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6443;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4442, %r976, %r397;
	mul.wide.s32 	%rd323, %r4442, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;

$L__BB0_543:
	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6443;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4444, %r976, %r398;
	mul.wide.s32 	%rd325, %r4444, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;

$L__BB0_545:
	@%p15 bra 	$L__BB0_550;

	not.pred 	%p317, %p12;
	@%p317 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6442;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4446, %r976, %r411;
	mul.wide.s32 	%rd327, %r4446, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;

$L__BB0_548:
	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6442;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4448, %r976, %r412;
	mul.wide.s32 	%rd329, %r4448, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_550:
	add.s32 	%r4449, %r963, %r969;
	mul.lo.s32 	%r4450, %r4449, %r54;
	sub.s32 	%r977, %r4450, %r1255;
	@%p15 bra 	$L__BB0_555;

	not.pred 	%p320, %p11;
	@%p320 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3516;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4452, %r977, %r397;
	mul.wide.s32 	%rd331, %r4452, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;

$L__BB0_553:
	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3516;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4454, %r977, %r398;
	mul.wide.s32 	%rd333, %r4454, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;

$L__BB0_555:
	@%p15 bra 	$L__BB0_560;

	not.pred 	%p323, %p12;
	@%p323 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3597;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4456, %r977, %r411;
	mul.wide.s32 	%rd335, %r4456, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;

$L__BB0_558:
	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3597;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4458, %r977, %r412;
	mul.wide.s32 	%rd337, %r4458, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_560:
	add.s32 	%r4459, %r963, %r974;
	mul.lo.s32 	%r4460, %r4459, %r54;
	sub.s32 	%r978, %r4460, %r1255;
	@%p15 bra 	$L__BB0_565;

	not.pred 	%p326, %p11;
	@%p326 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r854;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4462, %r978, %r397;
	mul.wide.s32 	%rd339, %r4462, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;

$L__BB0_563:
	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r854;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4464, %r978, %r398;
	mul.wide.s32 	%rd341, %r4464, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;

$L__BB0_565:
	@%p15 bra 	$L__BB0_570;

	not.pred 	%p329, %p12;
	@%p329 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r866;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4466, %r978, %r411;
	mul.wide.s32 	%rd343, %r4466, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;

$L__BB0_568:
	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r866;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4468, %r978, %r412;
	mul.wide.s32 	%rd345, %r4468, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_570:
	add.s32 	%r979, %r957, 2;
	add.s32 	%r4469, %r979, %r967;
	mul.lo.s32 	%r4470, %r4469, %r54;
	sub.s32 	%r980, %r4470, %r1255;
	@%p15 bra 	$L__BB0_575;

	not.pred 	%p332, %p11;
	@%p332 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3657;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4472, %r980, %r397;
	mul.wide.s32 	%rd347, %r4472, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;

$L__BB0_573:
	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3657;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4474, %r980, %r398;
	mul.wide.s32 	%rd349, %r4474, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;

$L__BB0_575:
	@%p15 bra 	$L__BB0_580;

	not.pred 	%p335, %p12;
	@%p335 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3691;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4476, %r980, %r411;
	mul.wide.s32 	%rd351, %r4476, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;

$L__BB0_578:
	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3691;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4478, %r980, %r412;
	mul.wide.s32 	%rd353, %r4478, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_580:
	mul.lo.s32 	%r981, %r4357, %r53;
	add.s32 	%r4481, %r966, %r981;
	mul.lo.s32 	%r4482, %r4481, %r54;
	sub.s32 	%r982, %r4482, %r1255;
	@%p15 bra 	$L__BB0_585;

	not.pred 	%p338, %p11;
	@%p338 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6441;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4484, %r982, %r397;
	mul.wide.s32 	%rd355, %r4484, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;

$L__BB0_583:
	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6441;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4486, %r982, %r398;
	mul.wide.s32 	%rd357, %r4486, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;

$L__BB0_585:
	@%p15 bra 	$L__BB0_590;

	not.pred 	%p341, %p12;
	@%p341 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6440;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4488, %r982, %r411;
	mul.wide.s32 	%rd359, %r4488, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;

$L__BB0_588:
	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6440;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4490, %r982, %r412;
	mul.wide.s32 	%rd361, %r4490, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_590:
	add.s32 	%r4492, %r956, %r973;
	mul.lo.s32 	%r983, %r4492, %r53;
	add.s32 	%r4493, %r966, %r983;
	mul.lo.s32 	%r4494, %r4493, %r54;
	sub.s32 	%r984, %r4494, %r1255;
	@%p15 bra 	$L__BB0_595;

	not.pred 	%p344, %p11;
	@%p344 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r884;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4496, %r984, %r397;
	mul.wide.s32 	%rd363, %r4496, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;

$L__BB0_593:
	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r884;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4498, %r984, %r398;
	mul.wide.s32 	%rd365, %r4498, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;

$L__BB0_595:
	@%p15 bra 	$L__BB0_600;

	not.pred 	%p347, %p12;
	@%p347 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r890;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4500, %r984, %r411;
	mul.wide.s32 	%rd367, %r4500, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;

$L__BB0_598:
	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r890;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4502, %r984, %r412;
	mul.wide.s32 	%rd369, %r4502, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_600:
	mul.lo.s32 	%r985, %r4343, %r53;
	add.s32 	%r4505, %r957, %r985;
	mul.lo.s32 	%r4506, %r4505, %r54;
	sub.s32 	%r986, %r4506, %r1255;
	@%p15 bra 	$L__BB0_605;

	not.pred 	%p350, %p11;
	@%p350 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6439;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4508, %r986, %r397;
	mul.wide.s32 	%rd371, %r4508, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;

$L__BB0_603:
	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6439;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4510, %r986, %r398;
	mul.wide.s32 	%rd373, %r4510, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;

$L__BB0_605:
	@%p15 bra 	$L__BB0_610;

	not.pred 	%p353, %p12;
	@%p353 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6438;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4512, %r986, %r411;
	mul.wide.s32 	%rd375, %r4512, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;

$L__BB0_608:
	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6438;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4514, %r986, %r412;
	mul.wide.s32 	%rd377, %r4514, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_610:
	add.s32 	%r4515, %r957, %r981;
	mul.lo.s32 	%r4516, %r4515, %r54;
	sub.s32 	%r987, %r4516, %r1255;
	@%p15 bra 	$L__BB0_615;

	not.pred 	%p356, %p11;
	@%p356 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6437;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4518, %r987, %r397;
	mul.wide.s32 	%rd379, %r4518, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;

$L__BB0_613:
	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6437;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4520, %r987, %r398;
	mul.wide.s32 	%rd381, %r4520, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;

$L__BB0_615:
	@%p15 bra 	$L__BB0_620;

	not.pred 	%p359, %p12;
	@%p359 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6436;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4522, %r987, %r411;
	mul.wide.s32 	%rd383, %r4522, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;

$L__BB0_618:
	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6436;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4524, %r987, %r412;
	mul.wide.s32 	%rd385, %r4524, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_620:
	add.s32 	%r4525, %r957, %r983;
	mul.lo.s32 	%r4526, %r4525, %r54;
	sub.s32 	%r988, %r4526, %r1255;
	@%p15 bra 	$L__BB0_625;

	not.pred 	%p362, %p11;
	@%p362 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6435;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4528, %r988, %r397;
	mul.wide.s32 	%rd387, %r4528, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;

$L__BB0_623:
	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6435;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4530, %r988, %r398;
	mul.wide.s32 	%rd389, %r4530, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;

$L__BB0_625:
	@%p15 bra 	$L__BB0_630;

	not.pred 	%p365, %p12;
	@%p365 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6434;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4532, %r988, %r411;
	mul.wide.s32 	%rd391, %r4532, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;

$L__BB0_628:
	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6434;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4534, %r988, %r412;
	mul.wide.s32 	%rd393, %r4534, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_630:
	add.s32 	%r4535, %r963, %r985;
	mul.lo.s32 	%r4536, %r4535, %r54;
	sub.s32 	%r989, %r4536, %r1255;
	@%p15 bra 	$L__BB0_635;

	not.pred 	%p368, %p11;
	@%p368 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6433;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4538, %r989, %r397;
	mul.wide.s32 	%rd395, %r4538, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;

$L__BB0_633:
	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6433;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4540, %r989, %r398;
	mul.wide.s32 	%rd397, %r4540, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;

$L__BB0_635:
	@%p15 bra 	$L__BB0_640;

	not.pred 	%p371, %p12;
	@%p371 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6432;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4542, %r989, %r411;
	mul.wide.s32 	%rd399, %r4542, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;

$L__BB0_638:
	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6432;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4544, %r989, %r412;
	mul.wide.s32 	%rd401, %r4544, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_640:
	add.s32 	%r4545, %r963, %r981;
	mul.lo.s32 	%r4546, %r4545, %r54;
	sub.s32 	%r990, %r4546, %r1255;
	@%p15 bra 	$L__BB0_645;

	not.pred 	%p374, %p11;
	@%p374 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6431;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4548, %r990, %r397;
	mul.wide.s32 	%rd403, %r4548, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;

$L__BB0_643:
	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6431;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4550, %r990, %r398;
	mul.wide.s32 	%rd405, %r4550, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;

$L__BB0_645:
	@%p15 bra 	$L__BB0_650;

	not.pred 	%p377, %p12;
	@%p377 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6430;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4552, %r990, %r411;
	mul.wide.s32 	%rd407, %r4552, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;

$L__BB0_648:
	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6430;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4554, %r990, %r412;
	mul.wide.s32 	%rd409, %r4554, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_650:
	add.s32 	%r4555, %r963, %r983;
	mul.lo.s32 	%r4556, %r4555, %r54;
	sub.s32 	%r991, %r4556, %r1255;
	@%p15 bra 	$L__BB0_655;

	not.pred 	%p380, %p11;
	@%p380 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6429;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4558, %r991, %r397;
	mul.wide.s32 	%rd411, %r4558, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;

$L__BB0_653:
	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6429;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4560, %r991, %r398;
	mul.wide.s32 	%rd413, %r4560, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;

$L__BB0_655:
	@%p15 bra 	$L__BB0_660;

	not.pred 	%p383, %p12;
	@%p383 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6428;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4562, %r991, %r411;
	mul.wide.s32 	%rd415, %r4562, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;

$L__BB0_658:
	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6428;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4564, %r991, %r412;
	mul.wide.s32 	%rd417, %r4564, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_660:
	add.s32 	%r4565, %r979, %r983;
	mul.lo.s32 	%r4566, %r4565, %r54;
	sub.s32 	%r992, %r4566, %r1255;
	@%p15 bra 	$L__BB0_665;

	not.pred 	%p386, %p11;
	@%p386 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r939;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4568, %r992, %r397;
	mul.wide.s32 	%rd419, %r4568, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;

$L__BB0_663:
	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r939;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4570, %r992, %r398;
	mul.wide.s32 	%rd421, %r4570, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;

$L__BB0_665:
	@%p15 bra 	$L__BB0_670;

	not.pred 	%p389, %p12;
	@%p389 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r940;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4572, %r992, %r411;
	mul.wide.s32 	%rd423, %r4572, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;

$L__BB0_668:
	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r940;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4574, %r992, %r412;
	mul.wide.s32 	%rd425, %r4574, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_670:
	add.s32 	%r993, %r956, 1;
	add.s32 	%r4575, %r993, %r961;
	mad.lo.s32 	%r4577, %r4575, %r53, %r957;
	mul.lo.s32 	%r4578, %r4577, %r54;
	sub.s32 	%r994, %r4578, %r1255;
	@%p15 bra 	$L__BB0_675;

	not.pred 	%p392, %p11;
	@%p392 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6427;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4580, %r994, %r397;
	mul.wide.s32 	%rd427, %r4580, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;

$L__BB0_673:
	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6427;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4582, %r994, %r398;
	mul.wide.s32 	%rd429, %r4582, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;

$L__BB0_675:
	@%p15 bra 	$L__BB0_680;

	not.pred 	%p395, %p12;
	@%p395 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6426;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4584, %r994, %r411;
	mul.wide.s32 	%rd431, %r4584, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;

$L__BB0_678:
	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6426;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4586, %r994, %r412;
	mul.wide.s32 	%rd433, %r4586, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_680:
	add.s32 	%r4588, %r993, %r973;
	mul.lo.s32 	%r995, %r4588, %r53;
	add.s32 	%r4589, %r957, %r995;
	mul.lo.s32 	%r4590, %r4589, %r54;
	sub.s32 	%r996, %r4590, %r1255;
	@%p15 bra 	$L__BB0_685;

	not.pred 	%p398, %p11;
	@%p398 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6425;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4592, %r996, %r397;
	mul.wide.s32 	%rd435, %r4592, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;

$L__BB0_683:
	not.pred 	%p399, %p13;
	@%p399 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6425;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4594, %r996, %r398;
	mul.wide.s32 	%rd437, %r4594, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;

$L__BB0_685:
	@%p15 bra 	$L__BB0_690;

	not.pred 	%p401, %p12;
	@%p401 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6424;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4596, %r996, %r411;
	mul.wide.s32 	%rd439, %r4596, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;

$L__BB0_688:
	not.pred 	%p402, %p14;
	@%p402 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6424;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4598, %r996, %r412;
	mul.wide.s32 	%rd441, %r4598, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_690:
	add.s32 	%r4599, %r963, %r995;
	mul.lo.s32 	%r4600, %r4599, %r54;
	sub.s32 	%r997, %r4600, %r1255;
	@%p15 bra 	$L__BB0_695;

	not.pred 	%p404, %p11;
	@%p404 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6423;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4602, %r997, %r397;
	mul.wide.s32 	%rd443, %r4602, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;

$L__BB0_693:
	not.pred 	%p405, %p13;
	@%p405 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6423;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4604, %r997, %r398;
	mul.wide.s32 	%rd445, %r4604, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;

$L__BB0_695:
	@%p15 bra 	$L__BB0_700;

	not.pred 	%p407, %p12;
	@%p407 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6422;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4606, %r997, %r411;
	mul.wide.s32 	%rd447, %r4606, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;

$L__BB0_698:
	not.pred 	%p408, %p14;
	@%p408 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6422;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4608, %r997, %r412;
	mul.wide.s32 	%rd449, %r4608, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_700:
	bar.sync 	0;
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4609, {low,high};}

	// end inline asm
	selp.b32 	%r4611, %r6369, %r4609, %p15;
	// begin inline asm
	{mul.f16x2 %r4610,%r4611,%r6419;
}
	// end inline asm
	selp.b32 	%r4614, %r6373, %r4609, %p15;
	// begin inline asm
	{mul.f16x2 %r4613,%r4614,%r6414;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4616, {low,high};}

	// end inline asm
	selp.b32 	%r4618, %r6369, %r4616, %p15;
	// begin inline asm
	{mul.f16x2 %r4617,%r4618,%r6405;
}
	// end inline asm
	selp.b32 	%r4621, %r6373, %r4616, %p15;
	// begin inline asm
	{mul.f16x2 %r4620,%r4621,%r6402;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4623, {low,high};}

	// end inline asm
	selp.b32 	%r4625, %r6369, %r4623, %p15;
	// begin inline asm
	{mul.f16x2 %r4624,%r4625,%r6398;
}
	// end inline asm
	selp.b32 	%r4628, %r6373, %r4623, %p15;
	// begin inline asm
	{mul.f16x2 %r4627,%r4628,%r6397;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4630, {low,high};}

	// end inline asm
	selp.b32 	%r4632, %r6369, %r4630, %p15;
	// begin inline asm
	{mul.f16x2 %r4631,%r4632,%r6401;
}
	// end inline asm
	selp.b32 	%r4635, %r6373, %r4630, %p15;
	// begin inline asm
	{mul.f16x2 %r4634,%r4635,%r6400;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4637, {low,high};}

	// end inline asm
	selp.b32 	%r4639, %r6369, %r4637, %p15;
	// begin inline asm
	{mul.f16x2 %r4638,%r4639,%r6399;
}
	// end inline asm
	selp.b32 	%r4642, %r6373, %r4637, %p15;
	// begin inline asm
	{mul.f16x2 %r4641,%r4642,%r6396;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4644, {low,high};}

	// end inline asm
	selp.b32 	%r4646, %r6369, %r4644, %p15;
	// begin inline asm
	{mul.f16x2 %r4645,%r4646,%r6395;
}
	// end inline asm
	selp.b32 	%r4649, %r6373, %r4644, %p15;
	// begin inline asm
	{mul.f16x2 %r4648,%r4649,%r6394;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4651, {low,high};}

	// end inline asm
	selp.b32 	%r4653, %r6369, %r4651, %p15;
	// begin inline asm
	{mul.f16x2 %r4652,%r4653,%r6393;
}
	// end inline asm
	selp.b32 	%r4656, %r6373, %r4651, %p15;
	// begin inline asm
	{mul.f16x2 %r4655,%r4656,%r6390;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4658, {low,high};}

	// end inline asm
	selp.b32 	%r4660, %r6369, %r4658, %p15;
	// begin inline asm
	{mul.f16x2 %r4659,%r4660,%r6387;
}
	// end inline asm
	selp.b32 	%r4663, %r6373, %r4658, %p15;
	// begin inline asm
	{mul.f16x2 %r4662,%r4663,%r6386;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4665, {low,high};}

	// end inline asm
	selp.b32 	%r4667, %r6369, %r4665, %p15;
	// begin inline asm
	{mul.f16x2 %r4666,%r4667,%r1678;
}
	// end inline asm
	selp.b32 	%r4670, %r6373, %r4665, %p15;
	// begin inline asm
	{mul.f16x2 %r4669,%r4670,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4672, {low,high};}

	// end inline asm
	selp.b32 	%r4674, %r6369, %r4672, %p15;
	// begin inline asm
	{mul.f16x2 %r4673,%r4674,%r1678;
}
	// end inline asm
	selp.b32 	%r4677, %r6373, %r4672, %p15;
	// begin inline asm
	{mul.f16x2 %r4676,%r4677,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4679, {low,high};}

	// end inline asm
	selp.b32 	%r4681, %r6369, %r4679, %p15;
	// begin inline asm
	{mul.f16x2 %r4680,%r4681,%r6382;
}
	// end inline asm
	selp.b32 	%r4684, %r6373, %r4679, %p15;
	// begin inline asm
	{mul.f16x2 %r4683,%r4684,%r6381;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4686, {low,high};}

	// end inline asm
	selp.b32 	%r4688, %r6369, %r4686, %p15;
	// begin inline asm
	{mul.f16x2 %r4687,%r4688,%r6385;
}
	// end inline asm
	selp.b32 	%r4691, %r6373, %r4686, %p15;
	// begin inline asm
	{mul.f16x2 %r4690,%r4691,%r6384;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4693, {low,high};}

	// end inline asm
	selp.b32 	%r4695, %r6369, %r4693, %p15;
	// begin inline asm
	{mul.f16x2 %r4694,%r4695,%r6383;
}
	// end inline asm
	selp.b32 	%r4698, %r6373, %r4693, %p15;
	// begin inline asm
	{mul.f16x2 %r4697,%r4698,%r6380;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4700, {low,high};}

	// end inline asm
	selp.b32 	%r4702, %r6369, %r4700, %p15;
	// begin inline asm
	{mul.f16x2 %r4701,%r4702,%r6377;
}
	// end inline asm
	selp.b32 	%r4705, %r6373, %r4700, %p15;
	// begin inline asm
	{mul.f16x2 %r4704,%r4705,%r6376;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4707, {low,high};}

	// end inline asm
	selp.b32 	%r4709, %r6369, %r4707, %p15;
	// begin inline asm
	{mul.f16x2 %r4708,%r4709,%r6379;
}
	// end inline asm
	selp.b32 	%r4712, %r6373, %r4707, %p15;
	// begin inline asm
	{mul.f16x2 %r4711,%r4712,%r6378;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4714, {low,high};}

	// end inline asm
	selp.b32 	%r4716, %r6369, %r4714, %p15;
	// begin inline asm
	{mul.f16x2 %r4715,%r4716,%r1678;
}
	// end inline asm
	selp.b32 	%r4719, %r6373, %r4714, %p15;
	// begin inline asm
	{mul.f16x2 %r4718,%r4719,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4721, {low,high};}

	// end inline asm
	selp.b32 	%r4723, %r6369, %r4721, %p15;
	// begin inline asm
	{mul.f16x2 %r4722,%r4723,%r1678;
}
	// end inline asm
	selp.b32 	%r4726, %r6373, %r4721, %p15;
	// begin inline asm
	{mul.f16x2 %r4725,%r4726,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4728, {low,high};}

	// end inline asm
	selp.b32 	%r4730, %r6369, %r4728, %p15;
	// begin inline asm
	{mul.f16x2 %r4729,%r4730,%r1678;
}
	// end inline asm
	selp.b32 	%r4733, %r6373, %r4728, %p15;
	// begin inline asm
	{mul.f16x2 %r4732,%r4733,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4735, {low,high};}

	// end inline asm
	selp.b32 	%r4737, %r6369, %r4735, %p15;
	// begin inline asm
	{mul.f16x2 %r4736,%r4737,%r6375;
}
	// end inline asm
	selp.b32 	%r4740, %r6373, %r4735, %p15;
	// begin inline asm
	{mul.f16x2 %r4739,%r4740,%r6374;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4742, {low,high};}

	// end inline asm
	selp.b32 	%r4744, %r6369, %r4742, %p15;
	// begin inline asm
	{mul.f16x2 %r4743,%r4744,%r1678;
}
	// end inline asm
	selp.b32 	%r4747, %r6373, %r4742, %p15;
	// begin inline asm
	{mul.f16x2 %r4746,%r4747,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4749, {low,high};}

	// end inline asm
	selp.b32 	%r4751, %r6369, %r4749, %p15;
	// begin inline asm
	{mul.f16x2 %r4750,%r4751,%r1678;
}
	// end inline asm
	selp.b32 	%r4754, %r6373, %r4749, %p15;
	// begin inline asm
	{mul.f16x2 %r4753,%r4754,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4756, {low,high};}

	// end inline asm
	selp.b32 	%r4758, %r6369, %r4756, %p15;
	// begin inline asm
	{mul.f16x2 %r4757,%r4758,%r1678;
}
	// end inline asm
	selp.b32 	%r4761, %r6373, %r4756, %p15;
	// begin inline asm
	{mul.f16x2 %r4760,%r4761,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4763, {low,high};}

	// end inline asm
	selp.b32 	%r4765, %r6369, %r4763, %p15;
	// begin inline asm
	{mul.f16x2 %r4764,%r4765,%r1678;
}
	// end inline asm
	selp.b32 	%r4768, %r6373, %r4763, %p15;
	// begin inline asm
	{mul.f16x2 %r4767,%r4768,%r1678;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4770, {low,high};}

	// end inline asm
	selp.b32 	%r4772, %r6369, %r4770, %p15;
	// begin inline asm
	{mul.f16x2 %r4771,%r4772,%r1678;
}
	// end inline asm
	selp.b32 	%r4775, %r6373, %r4770, %p15;
	// begin inline asm
	{mul.f16x2 %r4774,%r4775,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r6445,%r2945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4780,%r3056,%r2902;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4783,%r4777,%r4780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4786,%r6277,%r4783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4789,%r4610,%r4786;
}
	// end inline asm
	selp.b32 	%r6415, %r4610, %r4789, %p15;
	// begin inline asm
	{sub.f16x2 %r4792,%r6444,%r3011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4795,%r3090,%r2979;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4798,%r4792,%r4795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4801,%r6277,%r4798;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4804,%r4613,%r4801;
}
	// end inline asm
	selp.b32 	%r6412, %r4613, %r4804, %p15;
	// begin inline asm
	{sub.f16x2 %r4807,%r6441,%r3178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4810,%r6447,%r3135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4813,%r4807,%r4810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4816,%r6277,%r4813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4819,%r4617,%r4816;
}
	// end inline asm
	selp.b32 	%r6418, %r4617, %r4819, %p15;
	// begin inline asm
	{sub.f16x2 %r4822,%r6440,%r3244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4825,%r6446,%r3212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4828,%r4822,%r4825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4831,%r6277,%r4828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4834,%r4620,%r4831;
}
	// end inline asm
	selp.b32 	%r6413, %r4620, %r4834, %p15;
	// begin inline asm
	{sub.f16x2 %r4837,%r6444,%r6445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4840,%r6368,%r4837;
}
	// end inline asm
	@%p15 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r6565,%r4624;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r6565,%r6369,%r4837;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r4851, 31;
	mov.u32 	%r4853, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4849,%r6565,%r4851,%r1757,%r4853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4854,%r4840,%r4849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r854,%r830;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4860,%r4857,%r4854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4863,%r6277,%r4860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6417,%r4624,%r4863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4869,%r6446,%r6447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4872,%r6368,%r4869;
}
	// end inline asm
	mov.u32 	%r6566, %r4631;
	@%p15 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r6566,%r6369,%r4869;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4881,%r6566,%r4851,%r1757,%r4853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4886,%r4872,%r4881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r6435,%r830;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r4886,%r4889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4895,%r6277,%r4892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6421,%r4631,%r4895;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4901,%r6437,%r6445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4904,%r6443,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4907,%r4901,%r4904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4910,%r6277,%r4907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4913,%r4638,%r4910;
}
	// end inline asm
	selp.b32 	%r6419, %r4638, %r4913, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6445;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4918,%r6445,%r432,%r1757,%r4853;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4918;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4924, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4925,%r4924,%r6444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4928,%r6372,%r4925;
}
	// end inline asm
	@%p15 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r6567,%r4627;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r6567,%r6373,%r4925;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r4943, 31;
	mov.u32 	%r4967, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4941,%r6567,%r4943,%r1757,%r4967;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4946,%r4928,%r4941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4949,%r866,%r842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r4949,%r4946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4955,%r6277,%r4952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6416,%r4627,%r4955;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6447;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4963,%r6447,%r432,%r1757,%r4967;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4963;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4969, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4970,%r4969,%r6446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4973,%r6372,%r4970;
}
	// end inline asm
	mov.u32 	%r6568, %r4634;
	@%p15 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r6568,%r6373,%r4970;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4984,%r6568,%r4943,%r1757,%r4967;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4989,%r4973,%r4984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4992,%r6434,%r842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4995,%r4989,%r4992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4998,%r6277,%r4995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6420,%r4634,%r4998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5004,%r6436,%r6444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5007,%r6442,%r6446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5010,%r5004,%r5007;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5013,%r6277,%r5010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5016,%r4641,%r5013;
}
	// end inline asm
	selp.b32 	%r6414, %r4641, %r5016, %p15;
	// begin inline asm
	{sub.f16x2 %r5019,%r6442,%r6443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5022,%r6368,%r5019;
}
	// end inline asm
	mov.u32 	%r6569, %r4645;
	@%p15 bra 	$L__BB0_712;

	// begin inline asm
	{mul.f16x2 %r6569,%r6369,%r5019;
}
	// end inline asm

$L__BB0_712:
	mov.u32 	%r5033, 31;
	mov.u32 	%r5072, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5031,%r6569,%r5033,%r1757,%r5072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5036,%r5022,%r5031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5039,%r6429,%r854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5042,%r5036,%r5039;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5045,%r6277,%r5042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6411,%r4645,%r5045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5051,%r6431,%r3516;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5054,%r3657,%r6443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5057,%r5051,%r5054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5060,%r6277,%r5057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5063,%r4652,%r5060;
}
	// end inline asm
	selp.b32 	%r6409, %r4652, %r5063, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6443;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5068,%r6443,%r432,%r1757,%r5072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5068;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5074, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5075,%r5074,%r6442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5078,%r6372,%r5075;
}
	// end inline asm
	mov.u32 	%r6570, %r4648;
	@%p15 bra 	$L__BB0_714;

	// begin inline asm
	{mul.f16x2 %r6570,%r6373,%r5075;
}
	// end inline asm

$L__BB0_714:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5089,%r6570,%r5033,%r1757,%r5072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5094,%r5078,%r5089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5097,%r6428,%r866;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5100,%r5094,%r5097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5103,%r6277,%r5100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6410,%r4648,%r5103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5109,%r6430,%r3597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5112,%r3691,%r6442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5115,%r5109,%r5112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5118,%r6277,%r5115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5121,%r4655,%r5118;
}
	// end inline asm
	selp.b32 	%r6408, %r4655, %r5121, %p15;
	// begin inline asm
	{sub.f16x2 %r5124,%r6440,%r6441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5127,%r6368,%r5124;
}
	// end inline asm
	@%p15 bra 	$L__BB0_716;
	bra.uni 	$L__BB0_715;

$L__BB0_716:
	// begin inline asm
	{neg.f16x2 %r6571,%r4659;
}
	// end inline asm
	bra.uni 	$L__BB0_717;

$L__BB0_715:
	// begin inline asm
	{mul.f16x2 %r6571,%r6369,%r5124;
}
	// end inline asm

$L__BB0_717:
	mov.u32 	%r5140, 31;
	mov.u32 	%r5142, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5138,%r6571,%r5140,%r1757,%r5142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5143,%r5127,%r5138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5146,%r6435,%r884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5149,%r5146,%r5143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5152,%r6277,%r5149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6404,%r4659,%r5152;
}
	// end inline asm
	mov.u32 	%r6572, %r4666;
	@%p15 bra 	$L__BB0_719;

	mov.u32 	%r6572, %r6176;

$L__BB0_719:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5170,%r6572,%r5140,%r1757,%r5142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5175,%r5161,%r5170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5178,%r1678,%r884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5181,%r5175,%r5178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5184,%r6277,%r5181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6407,%r4666,%r5184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5190,%r1678,%r6441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5193,%r6439,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5196,%r5190,%r5193;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5199,%r6277,%r5196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5202,%r4673,%r5199;
}
	// end inline asm
	selp.b32 	%r6405, %r4673, %r5202, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6441;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5207,%r6441,%r432,%r1757,%r5142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5207;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5213, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5214,%r5213,%r6440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5217,%r6372,%r5214;
}
	// end inline asm
	@%p15 bra 	$L__BB0_721;
	bra.uni 	$L__BB0_720;

$L__BB0_721:
	// begin inline asm
	{neg.f16x2 %r6573,%r4662;
}
	// end inline asm
	bra.uni 	$L__BB0_722;

$L__BB0_720:
	// begin inline asm
	{mul.f16x2 %r6573,%r6373,%r5214;
}
	// end inline asm

$L__BB0_722:
	mov.u32 	%r5232, 31;
	mov.u32 	%r5256, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5230,%r6573,%r5232,%r1757,%r5256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5235,%r5217,%r5230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5238,%r6434,%r890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5241,%r5238,%r5235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5244,%r6277,%r5241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6403,%r4662,%r5244;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5252,%r1678,%r432,%r1757,%r5256;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5252;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5258, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5259,%r5258,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5262,%r6372,%r5259;
}
	// end inline asm
	mov.u32 	%r6574, %r4669;
	@%p15 bra 	$L__BB0_724;

	// begin inline asm
	{mul.f16x2 %r6574,%r6373,%r5259;
}
	// end inline asm

$L__BB0_724:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5273,%r6574,%r5232,%r1757,%r5256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5278,%r5262,%r5273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5281,%r1678,%r890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5284,%r5278,%r5281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5287,%r6277,%r5284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6406,%r4669,%r5287;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5293,%r1678,%r6440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5296,%r6438,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5299,%r5293,%r5296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5302,%r6277,%r5299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5305,%r4676,%r5302;
}
	// end inline asm
	selp.b32 	%r6402, %r4676, %r5305, %p15;
	// begin inline asm
	{sub.f16x2 %r5308,%r6436,%r6437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5311,%r6368,%r5308;
}
	// end inline asm
	@%p15 bra 	$L__BB0_726;
	bra.uni 	$L__BB0_725;

$L__BB0_726:
	// begin inline asm
	{neg.f16x2 %r6575,%r4680;
}
	// end inline asm
	bra.uni 	$L__BB0_727;

$L__BB0_725:
	// begin inline asm
	{mul.f16x2 %r6575,%r6369,%r5308;
}
	// end inline asm

$L__BB0_727:
	mov.u32 	%r5324, 31;
	mov.u32 	%r5326, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5322,%r6575,%r5324,%r1757,%r5326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5327,%r5311,%r5322;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5330,%r6429,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5333,%r5330,%r5327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5336,%r6277,%r5333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6398,%r4680,%r5336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5342,%r6438,%r6439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5345,%r6368,%r5342;
}
	// end inline asm
	mov.u32 	%r6576, %r4687;
	@%p15 bra 	$L__BB0_729;

	// begin inline asm
	{mul.f16x2 %r6576,%r6369,%r5342;
}
	// end inline asm

$L__BB0_729:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5354,%r6576,%r5324,%r1757,%r5326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5359,%r5345,%r5354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5362,%r6425,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5365,%r5359,%r5362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5368,%r6277,%r5365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6401,%r4687,%r5368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5374,%r6427,%r6437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5377,%r6433,%r6439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5380,%r5374,%r5377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5383,%r6277,%r5380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5386,%r4694,%r5383;
}
	// end inline asm
	selp.b32 	%r6399, %r4694, %r5386, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6437;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5391,%r6437,%r432,%r1757,%r5326;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5391;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5397, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5398,%r5397,%r6436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5401,%r6372,%r5398;
}
	// end inline asm
	@%p15 bra 	$L__BB0_731;
	bra.uni 	$L__BB0_730;

$L__BB0_731:
	// begin inline asm
	{neg.f16x2 %r6577,%r4683;
}
	// end inline asm
	bra.uni 	$L__BB0_732;

$L__BB0_730:
	// begin inline asm
	{mul.f16x2 %r6577,%r6373,%r5398;
}
	// end inline asm

$L__BB0_732:
	mov.u32 	%r5416, 31;
	mov.u32 	%r5440, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5414,%r6577,%r5416,%r1757,%r5440;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5419,%r5401,%r5414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5422,%r6428,%r6434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5425,%r5422,%r5419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5428,%r6277,%r5425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6397,%r4683,%r5428;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6439;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5436,%r6439,%r432,%r1757,%r5440;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5436;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5442, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5443,%r5442,%r6438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5446,%r6372,%r5443;
}
	// end inline asm
	mov.u32 	%r6578, %r4690;
	@%p15 bra 	$L__BB0_734;

	// begin inline asm
	{mul.f16x2 %r6578,%r6373,%r5443;
}
	// end inline asm

$L__BB0_734:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5457,%r6578,%r5416,%r1757,%r5440;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5462,%r5446,%r5457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5465,%r6424,%r6434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5468,%r5462,%r5465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5471,%r6277,%r5468;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6400,%r4690,%r5471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5477,%r6426,%r6436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5480,%r6432,%r6438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5483,%r5477,%r5480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5486,%r6277,%r5483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5489,%r4697,%r5486;
}
	// end inline asm
	selp.b32 	%r6396, %r4697, %r5489, %p15;
	// begin inline asm
	{sub.f16x2 %r5492,%r6430,%r6431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5495,%r6368,%r5492;
}
	// end inline asm
	@%p15 bra 	$L__BB0_736;
	bra.uni 	$L__BB0_735;

$L__BB0_736:
	// begin inline asm
	{neg.f16x2 %r6579,%r4701;
}
	// end inline asm
	bra.uni 	$L__BB0_737;

$L__BB0_735:
	// begin inline asm
	{mul.f16x2 %r6579,%r6369,%r5492;
}
	// end inline asm

$L__BB0_737:
	mov.u32 	%r5508, 31;
	mov.u32 	%r5510, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5506,%r6579,%r5508,%r1757,%r5510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5511,%r5495,%r5506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5514,%r939,%r6429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5517,%r5514,%r5511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5520,%r6277,%r5517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6392,%r4701,%r5520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5526,%r6432,%r6433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5529,%r6368,%r5526;
}
	// end inline asm
	mov.u32 	%r6580, %r4708;
	@%p15 bra 	$L__BB0_739;

	// begin inline asm
	{mul.f16x2 %r6580,%r6369,%r5526;
}
	// end inline asm

$L__BB0_739:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5538,%r6580,%r5508,%r1757,%r5510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5543,%r5529,%r5538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5546,%r6423,%r6429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5549,%r5543,%r5546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5552,%r6277,%r5549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6395,%r4708,%r5552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5558,%r1678,%r6431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5561,%r1678,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5564,%r5558,%r5561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5567,%r6277,%r5564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5570,%r4715,%r5567;
}
	// end inline asm
	selp.b32 	%r6393, %r4715, %r5570, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6431;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5575,%r6431,%r432,%r1757,%r5510;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5575;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5581, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5582,%r5581,%r6430;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5585,%r6372,%r5582;
}
	// end inline asm
	@%p15 bra 	$L__BB0_741;
	bra.uni 	$L__BB0_740;

$L__BB0_741:
	// begin inline asm
	{neg.f16x2 %r6581,%r4704;
}
	// end inline asm
	bra.uni 	$L__BB0_742;

$L__BB0_740:
	// begin inline asm
	{mul.f16x2 %r6581,%r6373,%r5582;
}
	// end inline asm

$L__BB0_742:
	mov.u32 	%r5600, 31;
	mov.u32 	%r5624, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5598,%r6581,%r5600,%r1757,%r5624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5603,%r5585,%r5598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5606,%r940,%r6428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5609,%r5606,%r5603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5612,%r6277,%r5609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6391,%r4704,%r5612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6433;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5620,%r6433,%r432,%r1757,%r5624;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5620;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5626, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5627,%r5626,%r6432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5630,%r6372,%r5627;
}
	// end inline asm
	mov.u32 	%r6582, %r4711;
	@%p15 bra 	$L__BB0_744;

	// begin inline asm
	{mul.f16x2 %r6582,%r6373,%r5627;
}
	// end inline asm

$L__BB0_744:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5641,%r6582,%r5600,%r1757,%r5624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5646,%r5630,%r5641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5649,%r6422,%r6428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5652,%r5646,%r5649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5655,%r6277,%r5652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6394,%r4711,%r5655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5661,%r1678,%r6430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5664,%r1678,%r6432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5667,%r5661,%r5664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5670,%r6277,%r5667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5673,%r4718,%r5670;
}
	// end inline asm
	selp.b32 	%r6390, %r4718, %r5673, %p15;
	mov.u32 	%r6583, %r4722;
	@%p15 bra 	$L__BB0_746;

	mov.u32 	%r6583, %r6176;

$L__BB0_746:
	mov.u32 	%r5690, 31;
	mov.u32 	%r5714, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5688,%r6583,%r5690,%r1757,%r5714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5693,%r5161,%r5688;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5696,%r1678,%r939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5699,%r5693,%r5696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5702,%r6277,%r5699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6389,%r4722,%r5702;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5710,%r1678,%r432,%r1757,%r5714;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5710;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5716, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5717,%r5716,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5720,%r6372,%r5717;
}
	// end inline asm
	mov.u32 	%r6584, %r4725;
	@%p15 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r6584,%r6373,%r5717;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5731,%r6584,%r5690,%r1757,%r5714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5736,%r5720,%r5731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5739,%r1678,%r940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5742,%r5736,%r5739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5745,%r6277,%r5742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6388,%r4725,%r5745;
}
	// end inline asm
	@%p15 bra 	$L__BB0_750;
	bra.uni 	$L__BB0_749;

$L__BB0_750:
	// begin inline asm
	{neg.f16x2 %r6585,%r4729;
}
	// end inline asm
	bra.uni 	$L__BB0_751;

$L__BB0_749:
	mov.u32 	%r6585, %r6176;

$L__BB0_751:
	mov.u32 	%r5767, 31;
	mov.u32 	%r5791, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5765,%r6585,%r5767,%r1757,%r5791;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5770,%r5161,%r5765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5773,%r6425,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5776,%r5773,%r5770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5779,%r6277,%r5776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6387,%r4729,%r5779;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5787,%r1678,%r432,%r1757,%r5791;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5787;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5793, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5794,%r5793,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5797,%r6372,%r5794;
}
	// end inline asm
	@%p15 bra 	$L__BB0_753;
	bra.uni 	$L__BB0_752;

$L__BB0_753:
	// begin inline asm
	{neg.f16x2 %r6586,%r4732;
}
	// end inline asm
	bra.uni 	$L__BB0_754;

$L__BB0_752:
	// begin inline asm
	{mul.f16x2 %r6586,%r6373,%r5794;
}
	// end inline asm

$L__BB0_754:
	mov.u32 	%r5812, 31;
	mov.u32 	%r5814, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5810,%r6586,%r5812,%r1757,%r5814;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5815,%r5797,%r5810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r6424,%r1678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5821,%r5818,%r5815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5824,%r6277,%r5821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6386,%r4732,%r5824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5830,%r6426,%r6427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5833,%r6368,%r5830;
}
	// end inline asm
	@%p15 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r6587,%r4736;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r6587,%r6369,%r5830;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5846, 31;
	mov.u32 	%r5848, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5844,%r6587,%r5846,%r1757,%r5848;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5849,%r5833,%r5844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5852,%r6423,%r6425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5855,%r5852,%r5849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5858,%r6277,%r5855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6382,%r4736,%r5858;
}
	// end inline asm
	mov.u32 	%r6588, %r4743;
	@%p15 bra 	$L__BB0_759;

	mov.u32 	%r6588, %r6176;

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5876,%r6588,%r5846,%r1757,%r5848;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5881,%r5161,%r5876;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r1678,%r6425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5887,%r5881,%r5884;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5890,%r6277,%r5887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6385,%r4743,%r5890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5896,%r1678,%r6427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5902,%r5896,%r5158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5905,%r6277,%r5902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5908,%r4750,%r5905;
}
	// end inline asm
	selp.b32 	%r6383, %r4750, %r5908, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6427;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5913,%r6427,%r432,%r1757,%r5848;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5913;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5919, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5920,%r5919,%r6426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5923,%r6372,%r5920;
}
	// end inline asm
	@%p15 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r6589,%r4739;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r6589,%r6373,%r5920;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5938, 31;
	mov.u32 	%r5962, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5936,%r6589,%r5938,%r1757,%r5962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5941,%r5923,%r5936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5944,%r6422,%r6424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r5944,%r5941;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5950,%r6277,%r5947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6381,%r4739,%r5950;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5958,%r1678,%r432,%r1757,%r5962;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5958;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5964, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r5964,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5968,%r6372,%r5965;
}
	// end inline asm
	mov.u32 	%r6590, %r4746;
	@%p15 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r6590,%r6373,%r5965;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5979,%r6590,%r5938,%r1757,%r5962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5984,%r5968,%r5979;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5987,%r1678,%r6424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r5984,%r5987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5993,%r6277,%r5990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6384,%r4746,%r5993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5999,%r1678,%r6426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6005,%r5999,%r5158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6008,%r6277,%r6005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6011,%r4753,%r6008;
}
	// end inline asm
	selp.b32 	%r6380, %r4753, %r6011, %p15;
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r6591,%r4757;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	mov.u32 	%r6591, %r6176;

$L__BB0_767:
	mov.u32 	%r6030, 31;
	mov.u32 	%r6032, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6028,%r6591,%r6030,%r1757,%r6032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6033,%r5161,%r6028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r1678,%r6423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6039,%r6036,%r6033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6042,%r6277,%r6039;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6377,%r4757,%r6042;
}
	// end inline asm
	mov.u32 	%r6592, %r4764;
	@%p15 bra 	$L__BB0_769;

	mov.u32 	%r6592, %r6176;

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6060,%r6592,%r6030,%r1757,%r6032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6065,%r5161,%r6060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r1678,%r6423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r6065,%r6068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6074,%r6277,%r6071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6379,%r4764,%r6074;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6082,%r1678,%r432,%r1757,%r6032;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6082;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6088, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6089,%r6088,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6092,%r6372,%r6089;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r6593,%r4760;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r6593,%r6373,%r6089;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r6107, 31;
	mov.u32 	%r6131, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6105,%r6593,%r6107,%r1757,%r6131;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6110,%r6092,%r6105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6113,%r1678,%r6422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6116,%r6113,%r6110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6119,%r6277,%r6116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6376,%r4760,%r6119;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6127,%r1678,%r432,%r1757,%r6131;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6127;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6133, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r6133,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r6372,%r6134;
}
	// end inline asm
	mov.u32 	%r6594, %r4767;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r6594,%r6373,%r6134;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6148,%r6594,%r6107,%r1757,%r6131;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6153,%r6137,%r6148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6156,%r1678,%r6422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6159,%r6153,%r6156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6162,%r6277,%r6159;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6378,%r4767,%r6162;
}
	// end inline asm
	@%p15 bra 	$L__BB0_776;
	bra.uni 	$L__BB0_775;

$L__BB0_776:
	// begin inline asm
	{neg.f16x2 %r6595,%r4771;
}
	// end inline asm
	bra.uni 	$L__BB0_777;

$L__BB0_775:
	mov.u32 	%r6595, %r6176;

$L__BB0_777:
	mov.u32 	%r6184, 31;
	mov.u32 	%r6208, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6182,%r6595,%r6184,%r1757,%r6208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6187,%r5161,%r6182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6193,%r5158,%r6187;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6196,%r6277,%r6193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6375,%r4771,%r6196;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6204,%r1678,%r432,%r1757,%r6208;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6204;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6210, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6211,%r6210,%r1678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6214,%r6372,%r6211;
}
	// end inline asm
	@%p15 bra 	$L__BB0_779;
	bra.uni 	$L__BB0_778;

$L__BB0_779:
	// begin inline asm
	{neg.f16x2 %r6596,%r4774;
}
	// end inline asm
	bra.uni 	$L__BB0_780;

$L__BB0_778:
	// begin inline asm
	{mul.f16x2 %r6596,%r6373,%r6211;
}
	// end inline asm

$L__BB0_780:
	mov.u32 	%r6229, 31;
	mov.u32 	%r6231, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6227,%r6596,%r6229,%r1757,%r6231;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6232,%r6214,%r6227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6238,%r5158,%r6232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6241,%r6277,%r6238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6374,%r4774,%r6241;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6249, %r6448, %r1241;
	setp.eq.s32 	%p441, %r6249, 0;
	@%p441 bra 	$L__BB0_782;

	bar.sync 	0;
	bra.uni 	$L__BB0_789;

$L__BB0_782:
	@%p162 bra 	$L__BB0_784;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_784:
	bar.sync 	0;
	@%p163 bra 	$L__BB0_788;

	membar.gl;
	setp.eq.s32 	%p444, %r426, %r427;
	mov.u32 	%r6266, -2147483647;
	sub.s32 	%r6267, %r6266, %r425;
	selp.b32 	%r6255, %r6267, 1, %p444;
	// begin inline asm
	atom.add.release.gpu.u32 %r6254,[%rd25],%r6255;
	// end inline asm

$L__BB0_786:
	ld.volatile.u32 	%r6268, [%rd25];
	xor.b32  	%r6269, %r6268, %r6254;
	setp.gt.s32 	%p445, %r6269, -1;
	@%p445 bra 	$L__BB0_786;

	// begin inline asm
	ld.acquire.gpu.u32 %r6270,[%rd25];
	// end inline asm

$L__BB0_788:
	bar.sync 	0;

$L__BB0_789:
	add.s32 	%r6448, %r6448, 1;
	setp.lt.s32 	%p446, %r6448, %r43;
	@%p446 bra 	$L__BB0_302;

$L__BB0_790:
	ret;

}

