//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<303>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<6505>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1193, %r1194}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1195, %r1196}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1197, %r1198}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1199, %r1200}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1201, %r1202}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1203, %r1204}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1205, %r1206}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1207, 32;
	sub.s32 	%r27, %r1207, %r1200;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p11, %r27, %r28;
	add.s32 	%r1208, %r1206, -1;
	mad.lo.s32 	%r1209, %r1208, %r1205, %r1204;
	add.s32 	%r1210, %r1199, %r1198;
	add.s32 	%r1211, %r1210, %r1209;
	add.s32 	%r1212, %r1211, 1;
	mul.lo.s32 	%r1213, %r1193, %r1195;
	shl.b32 	%r29, %r1213, 1;
	shl.b32 	%r1214, %r1213, 2;
	div.s32 	%r1215, %r1212, %r1214;
	add.s32 	%r1216, %r1215, 1;
	mul.lo.s32 	%r1217, %r1216, %r1199;
	mul.lo.s32 	%r1218, %r1194, %r1196;
	shl.b32 	%r30, %r1218, 1;
	div.s32 	%r1219, %r1217, %r30;
	add.s32 	%r1220, %r1219, 1;
	mul.lo.s32 	%r31, %r1220, %r1198;
	@%p11 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6185, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6185, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1223, %r1195, %r26, %r25;
	mad.lo.s32 	%r1224, %r1223, %r1194, %r24;
	mad.lo.s32 	%r1225, %r1224, %r1193, %r23;
	shl.b32 	%r35, %r1225, 5;
	add.s32 	%r6190, %r35, %r28;
	mul.lo.s32 	%r1226, %r1218, %r1213;
	shl.b32 	%r39, %r1226, 5;
	shl.b32 	%r1227, %r1200, 2;
	mov.u32 	%r1228, 128;
	sub.s32 	%r40, %r1228, %r1227;
	mul.lo.s32 	%r1229, %r1199, %r1198;
	mul.lo.s32 	%r1230, %r1229, %r1206;
	mul.lo.s32 	%r1231, %r1230, %r40;
	mul.lo.s32 	%r41, %r1231, 3;
	setp.ge.s32 	%p12, %r6190, %r41;
	@%p12 bra 	$L__BB0_10;

	not.b32 	%r1232, %r28;
	add.s32 	%r1233, %r41, %r1232;
	sub.s32 	%r1234, %r1233, %r35;
	mul.lo.s32 	%r1235, %r1218, %r1193;
	mul.lo.s32 	%r1236, %r1235, %r1195;
	shl.b32 	%r1237, %r1236, 5;
	div.u32 	%r42, %r1234, %r1237;
	add.s32 	%r1238, %r42, 1;
	and.b32  	%r6187, %r1238, 3;
	setp.eq.s32 	%p13, %r6187, 0;
	mov.u32 	%r6188, %r6190;
	@%p13 bra 	$L__BB0_7;

	mov.u32 	%r6188, %r6190;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6188, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1239, 0;
	st.global.u32 	[%rd31], %r1239;
	add.s32 	%r6188, %r6188, %r39;
	add.s32 	%r6187, %r6187, -1;
	setp.ne.s32 	%p14, %r6187, 0;
	@%p14 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p15, %r42, 3;
	@%p15 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6188, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1240, 0;
	st.global.u32 	[%rd33], %r1240;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1240;
	add.s32 	%r1241, %r6188, %r39;
	add.s32 	%r1242, %r1241, %r39;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1240;
	add.s32 	%r1243, %r1242, %r39;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1240;
	add.s32 	%r6188, %r1243, %r39;
	setp.lt.s32 	%p16, %r6188, %r41;
	@%p16 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1244, %r1199, %r29;
	div.s32 	%r1245, %r1244, %r30;
	mul.lo.s32 	%r1246, %r1245, %r1198;
	sub.s32 	%r1247, %r1246, %r29;
	sub.s32 	%r1248, %r1198, %r30;
	mul.lo.s32 	%r1249, %r1248, %r1195;
	mul.lo.s32 	%r1250, %r1193, 384;
	add.s32 	%r1251, %r1250, %r1250;
	add.s32 	%r1252, %r1251, 128;
	mul.lo.s32 	%r1254, %r1218, 768;
	mul.lo.s32 	%r1255, %r1249, %r1252;
	mad.lo.s32 	%r51, %r1254, %r1247, %r1255;
	bra.uni 	$L__BB0_11;

$L__BB0_599:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6179, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6190, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6179;
	add.s32 	%r6190, %r6190, %r39;

$L__BB0_11:
	setp.lt.s32 	%p17, %r6190, %r51;
	@%p17 bra 	$L__BB0_599;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6232, %r1193, %r25, %r23;
	mul.lo.s32 	%r55, %r1194, %r26;
	add.s32 	%r56, %r55, %r24;
	setp.ge.s32 	%p18, %r6232, %r1198;
	@%p18 bra 	$L__BB0_36;

	setp.gt.s32 	%p19, %r27, %r28;
	mov.u32 	%r1256, 31;
	sub.s32 	%r1257, %r1256, %r28;
	selp.b32 	%r1258, %r28, %r1257, %p19;
	shl.b32 	%r1259, %r1258, 2;
	mov.u32 	%r1260, 2;
	sub.s32 	%r57, %r1259, %r1201;
	sub.s32 	%r1261, %r1260, %r1201;
	add.s32 	%r58, %r1261, %r1259;
	shl.b32 	%r59, %r1229, 6;
	add.s32 	%r60, %r1198, -1;
	add.s32 	%r61, %r57, 1;
	add.s32 	%r62, %r58, 1;
	shl.b32 	%r63, %r28, 1;
	or.b32  	%r64, %r63, 1;
	shr.u32 	%r1263, %r64, 31;
	add.s32 	%r1264, %r64, %r1263;
	shr.s32 	%r66, %r1264, 1;
	and.b32  	%r1265, %r1264, -2;
	sub.s32 	%r1266, %r64, %r1265;
	add.s32 	%r65, %r1266, %r59;
	rem.s32 	%r1301, %r61, %r40;
	add.s32 	%r1302, %r1301, %r40;
	rem.s32 	%r89, %r1302, %r40;
	rem.s32 	%r1303, %r62, %r40;
	add.s32 	%r1304, %r1303, %r40;
	rem.s32 	%r90, %r1304, %r40;
	mov.u32 	%r6191, %r6232;

$L__BB0_14:
	setp.ge.s32 	%p20, %r56, %r1199;
	@%p20 bra 	$L__BB0_35;

	add.s32 	%r68, %r60, %r6191;
	rem.s32 	%r1267, %r57, %r40;
	add.s32 	%r1268, %r1267, %r40;
	rem.s32 	%r69, %r1268, %r40;
	rem.s32 	%r1269, %r58, %r40;
	add.s32 	%r1270, %r1269, %r40;
	rem.s32 	%r70, %r1270, %r40;
	mul.lo.s32 	%r71, %r6191, %r1199;
	add.s32 	%r1271, %r1198, %r6191;
	mul.lo.s32 	%r72, %r1271, %r1199;
	add.s32 	%r1272, %r1271, %r1198;
	mul.lo.s32 	%r73, %r1272, %r1199;
	mov.u32 	%r6192, %r56;

$L__BB0_16:
	mul.lo.s32 	%r75, %r6192, %r1198;
	add.s32 	%r76, %r75, %r6191;
	shl.b32 	%r77, %r76, 6;
	@%p19 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1275, %r71, %r6192;
	mul.lo.s32 	%r1276, %r1275, %r40;
	add.s32 	%r1277, %r1276, %r69;
	mul.wide.s32 	%rd41, %r1277, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1278, %r1276, %r70;
	mul.wide.s32 	%rd43, %r1278, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6193, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6193, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r81, %r76, 5;
	add.s32 	%r1279, %r81, %r28;
	shl.b32 	%r1280, %r1279, 2;
	add.s32 	%r1281, %r59, %r1280;
	mul.wide.s32 	%rd45, %r1281, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6193;
	@%p19 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1284, %r72, %r6192;
	mul.lo.s32 	%r1285, %r1284, %r40;
	add.s32 	%r1286, %r1285, %r69;
	mul.wide.s32 	%rd47, %r1286, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1287, %r1285, %r70;
	mul.wide.s32 	%rd49, %r1287, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6194, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6194, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1288, %r63, %r77;
	mul.wide.s32 	%rd51, %r1288, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6194;
	@%p19 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1291, %r73, %r6192;
	mul.lo.s32 	%r1292, %r1291, %r40;
	add.s32 	%r1293, %r1292, %r69;
	mul.wide.s32 	%rd53, %r1293, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1294, %r1292, %r70;
	mul.wide.s32 	%rd55, %r1294, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6195, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6195, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1295, %r68, %r1198;
	add.s32 	%r1296, %r1295, %r75;
	shl.b32 	%r88, %r1296, 5;
	add.s32 	%r1297, %r88, %r28;
	shl.b32 	%r1298, %r1297, 2;
	add.s32 	%r1299, %r59, %r1298;
	add.s32 	%r1300, %r1299, 2;
	mul.wide.s32 	%rd57, %r1300, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6195;
	@%p19 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1307, %r71, %r6192;
	mul.lo.s32 	%r1308, %r1307, %r40;
	add.s32 	%r1309, %r1308, %r89;
	mul.wide.s32 	%rd59, %r1309, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1310, %r1308, %r90;
	mul.wide.s32 	%rd61, %r1310, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6196, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6196, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1311, %r81, %r66;
	shl.b32 	%r1312, %r1311, 2;
	add.s32 	%r1313, %r65, %r1312;
	mul.wide.s32 	%rd63, %r1313, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6196;
	@%p19 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1316, %r72, %r6192;
	mul.lo.s32 	%r1317, %r1316, %r40;
	add.s32 	%r1318, %r1317, %r89;
	mul.wide.s32 	%rd65, %r1318, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1319, %r1317, %r90;
	mul.wide.s32 	%rd67, %r1319, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6197, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6197, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1320, %r64, %r77;
	mul.wide.s32 	%rd69, %r1320, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6197;
	@%p19 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1323, %r73, %r6192;
	mul.lo.s32 	%r1324, %r1323, %r40;
	add.s32 	%r1325, %r1324, %r89;
	mul.wide.s32 	%rd71, %r1325, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1326, %r1324, %r90;
	mul.wide.s32 	%rd73, %r1326, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6198, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6198, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1327, %r88, %r66;
	shl.b32 	%r1328, %r1327, 2;
	add.s32 	%r1329, %r65, %r1328;
	add.s32 	%r1330, %r1329, 2;
	mul.wide.s32 	%rd75, %r1330, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6198;
	add.s32 	%r6192, %r6192, %r1218;
	setp.lt.s32 	%p27, %r6192, %r1199;
	@%p27 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6191, %r6191, %r1213;
	setp.lt.s32 	%p28, %r6191, %r1198;
	@%p28 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p18 bra 	$L__BB0_120;

	shl.b32 	%r102, %r56, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6199, %r6232;

$L__BB0_38:
	setp.ge.s32 	%p30, %r102, %r1199;
	@%p30 bra 	$L__BB0_119;

	mov.u32 	%r6200, %r102;

$L__BB0_40:
	setp.ne.s32 	%p31, %r28, 0;
	@%p31 bra 	$L__BB0_118;

	shr.u32 	%r1332, %r6200, 31;
	add.s32 	%r1333, %r6200, %r1332;
	shr.s32 	%r1334, %r1333, 1;
	mad.lo.s32 	%r1335, %r1334, %r1198, %r6199;
	shl.b32 	%r106, %r1335, 5;
	add.s32 	%r107, %r6200, -2;
	mul.lo.s32 	%r108, %r107, %r1198;
	add.s32 	%r1336, %r1199, %r107;
	mul.lo.s32 	%r109, %r1336, %r1198;
	add.s32 	%r1337, %r1336, %r1199;
	mul.lo.s32 	%r110, %r1337, %r1198;
	add.s32 	%r111, %r108, %r1198;
	add.s32 	%r112, %r6200, -1;
	add.s32 	%r1338, %r1199, %r112;
	mul.lo.s32 	%r113, %r1338, %r1198;
	add.s32 	%r1339, %r1338, %r1199;
	mul.lo.s32 	%r114, %r1339, %r1198;
	add.s32 	%r1340, %r1199, %r6200;
	mul.lo.s32 	%r115, %r1340, %r1198;
	add.s32 	%r1341, %r1340, %r1199;
	mul.lo.s32 	%r116, %r1341, %r1198;
	mul.lo.s32 	%r117, %r6200, %r1198;
	add.s32 	%r118, %r117, %r1198;
	add.s32 	%r119, %r6200, 1;
	add.s32 	%r1342, %r1199, %r119;
	mul.lo.s32 	%r120, %r1342, %r1198;
	add.s32 	%r1343, %r1342, %r1199;
	mul.lo.s32 	%r121, %r1343, %r1198;
	add.s32 	%r122, %r118, %r1198;
	add.s32 	%r123, %r6200, 2;
	add.s32 	%r1344, %r1199, %r123;
	mul.lo.s32 	%r124, %r1344, %r1198;
	add.s32 	%r1345, %r1344, %r1199;
	mul.lo.s32 	%r125, %r1345, %r1198;
	mov.u32 	%r6203, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1346, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1346;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r127, %r1346, %r6199;
	setp.lt.s32 	%p32, %r127, %r1198;
	or.b32  	%r1347, %r107, %r127;
	setp.gt.s32 	%p33, %r1347, -1;
	and.pred  	%p34, %p32, %p33;
	setp.lt.s32 	%p35, %r107, %r1199;
	and.pred  	%p1, %p35, %p34;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p36, %f65, 0f40000000;
	@%p36 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1350, %r108, %r127;
	mul.wide.s32 	%rd80, %r1350, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6202, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6202, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1351, %r6203, %r106;
	mul.wide.s32 	%rd82, %r1351, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6202;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p37, %f3, 0f40000000;
	@%p37 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1354, %r109, %r127;
	mul.wide.s32 	%rd84, %r1354, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6204, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6204, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1355, %r6203, %r106;
	mul.wide.s32 	%rd86, %r1355, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6204;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p38, %f74, 0f40000000;
	@%p38 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1358, %r110, %r127;
	mul.wide.s32 	%rd88, %r1358, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6206, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6206, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1359, %r6203, %r106;
	mul.wide.s32 	%rd90, %r1359, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6206;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_57:
	or.b32  	%r1360, %r112, %r127;
	setp.gt.s32 	%p39, %r1360, -1;
	and.pred  	%p41, %p32, %p39;
	setp.le.s32 	%p42, %r6200, %r1199;
	and.pred  	%p2, %p42, %p41;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p43, %f4, 0f40000000;
	@%p43 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1363, %r111, %r127;
	mul.wide.s32 	%rd92, %r1363, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6208, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6208, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1364, %r6203, %r106;
	mul.wide.s32 	%rd94, %r1364, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6208;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p44, %f5, 0f40000000;
	@%p44 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1367, %r113, %r127;
	mul.wide.s32 	%rd96, %r1367, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6210, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6210, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1368, %r6203, %r106;
	mul.wide.s32 	%rd98, %r1368, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6210;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p45, %f6, 0f40000000;
	@%p45 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1371, %r114, %r127;
	mul.wide.s32 	%rd100, %r1371, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6212, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6212, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1372, %r6203, %r106;
	mul.wide.s32 	%rd102, %r1372, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6212;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_72:
	or.b32  	%r1373, %r6200, %r127;
	setp.gt.s32 	%p46, %r1373, -1;
	and.pred  	%p48, %p32, %p46;
	setp.lt.s32 	%p49, %r6200, %r1199;
	and.pred  	%p3, %p49, %p48;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p50, %f7, 0f40000000;
	@%p50 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1376, %r117, %r127;
	mul.wide.s32 	%rd104, %r1376, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6214, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6214, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1377, %r6203, %r106;
	mul.wide.s32 	%rd106, %r1377, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6214;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p51, %f90, 0f40000000;
	@%p51 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1380, %r115, %r127;
	mul.wide.s32 	%rd108, %r1380, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6216, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6216, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1381, %r6203, %r106;
	mul.wide.s32 	%rd110, %r1381, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6216;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p52, %f8, 0f40000000;
	@%p52 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1384, %r116, %r127;
	mul.wide.s32 	%rd112, %r1384, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6218, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6218, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1385, %r6203, %r106;
	mul.wide.s32 	%rd114, %r1385, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6218;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_87:
	or.b32  	%r1386, %r119, %r127;
	setp.gt.s32 	%p53, %r1386, -1;
	and.pred  	%p55, %p32, %p53;
	setp.lt.s32 	%p56, %r119, %r1199;
	and.pred  	%p4, %p56, %p55;
	@%p50 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1389, %r118, %r127;
	mul.wide.s32 	%rd116, %r1389, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6220, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6220, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1390, %r6203, %r106;
	mul.wide.s32 	%rd118, %r1390, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6220;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_92:
	@%p44 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1393, %r120, %r127;
	mul.wide.s32 	%rd120, %r1393, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6222, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6222, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1394, %r6203, %r106;
	mul.wide.s32 	%rd122, %r1394, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6222;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_97:
	@%p52 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1397, %r121, %r127;
	mul.wide.s32 	%rd124, %r1397, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6224, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6224, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1398, %r6203, %r106;
	mul.wide.s32 	%rd126, %r1398, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6224;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_102:
	or.b32  	%r1399, %r123, %r127;
	setp.gt.s32 	%p60, %r1399, -1;
	and.pred  	%p62, %p32, %p60;
	setp.lt.s32 	%p63, %r123, %r1199;
	and.pred  	%p5, %p63, %p62;
	@%p43 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1402, %r122, %r127;
	mul.wide.s32 	%rd128, %r1402, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6226, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6226, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1403, %r6203, %r106;
	mul.wide.s32 	%rd130, %r1403, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6226;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_107:
	@%p37 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1406, %r124, %r127;
	mul.wide.s32 	%rd132, %r1406, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6228, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6228, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1407, %r6203, %r106;
	mul.wide.s32 	%rd134, %r1407, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6228;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_112:
	@%p45 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1410, %r125, %r127;
	mul.wide.s32 	%rd136, %r1410, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6230, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6230, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1411, %r6203, %r106;
	mul.wide.s32 	%rd138, %r1411, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6230;
	add.s32 	%r6203, %r6203, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p67, %rd455, %rd141;
	@%p67 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6200, %r6200, %r30;
	setp.lt.s32 	%p68, %r6200, %r1199;
	@%p68 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6199, %r6199, %r1213;
	setp.lt.s32 	%p69, %r6199, %r1198;
	@%p69 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p70, %r1202, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p70 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p18 bra 	$L__BB0_267;

	shl.b32 	%r230, %r56, 1;
	shr.u32 	%r1457, %r1203, 31;
	add.s32 	%r1458, %r1203, %r1457;
	shr.u32 	%r1459, %r1458, 1;
	and.b32  	%r231, %r1459, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p80, %r230, %r1199;
	@%p80 bra 	$L__BB0_266;

	mov.u32 	%r6238, %r230;

$L__BB0_142:
	setp.ne.s32 	%p81, %r28, 0;
	@%p81 bra 	$L__BB0_265;

	shr.u32 	%r1461, %r6238, 31;
	add.s32 	%r1462, %r6238, %r1461;
	shr.s32 	%r1463, %r1462, 1;
	mad.lo.s32 	%r1464, %r1463, %r1198, %r6232;
	shl.b32 	%r235, %r1464, 5;
	add.s32 	%r236, %r6238, -2;
	mul.lo.s32 	%r237, %r236, %r1198;
	add.s32 	%r1465, %r1199, %r236;
	mul.lo.s32 	%r238, %r1465, %r1198;
	add.s32 	%r239, %r237, %r1198;
	add.s32 	%r240, %r6238, -1;
	add.s32 	%r1466, %r1199, %r240;
	mul.lo.s32 	%r241, %r1466, %r1198;
	add.s32 	%r1467, %r1199, %r6238;
	mul.lo.s32 	%r242, %r1467, %r1198;
	mul.lo.s32 	%r243, %r6238, %r1198;
	add.s32 	%r244, %r243, %r1198;
	add.s32 	%r245, %r6238, 1;
	add.s32 	%r1468, %r1199, %r245;
	mul.lo.s32 	%r246, %r1468, %r1198;
	add.s32 	%r247, %r244, %r1198;
	add.s32 	%r248, %r6238, 2;
	add.s32 	%r1469, %r1199, %r248;
	mul.lo.s32 	%r249, %r1469, %r1198;
	mov.u32 	%r6242, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1470, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1470;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r251, %r1470, %r6232;
	setp.lt.s32 	%p82, %r251, %r1198;
	or.b32  	%r1471, %r236, %r251;
	setp.gt.s32 	%p83, %r1471, -1;
	and.pred  	%p84, %p82, %p83;
	setp.lt.s32 	%p85, %r236, %r1199;
	and.pred  	%p6, %p85, %p84;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p86, %f133, 0f40000000;
	@%p86 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p87, %r231, 0;
	add.s32 	%r1473, %r237, %r251;
	shl.b32 	%r1474, %r1473, 1;
	mul.wide.s32 	%rd164, %r1474, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p87 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6240, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6240, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6240, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r256, %r6242, %r235;
	mul.wide.s32 	%rd166, %r256, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6240;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p88, %r231, 0;
	add.s32 	%r1478, %r238, %r251;
	shl.b32 	%r1479, %r1478, 1;
	mul.wide.s32 	%rd168, %r1479, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p88 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6241, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6241, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6241, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1482, %r256, 1;
	mul.wide.s32 	%rd170, %r1482, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6241;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p89, %f13, 0f40000000;
	@%p89 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p90, %r231, 0;
	add.s32 	%r1484, %r237, %r251;
	shl.b32 	%r1485, %r1484, 1;
	or.b32  	%r1486, %r1485, 1;
	mul.wide.s32 	%rd172, %r1486, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p90 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6243, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6243, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6243, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r267, %r6242, %r235;
	mul.wide.s32 	%rd174, %r267, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6243;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p91, %r231, 0;
	add.s32 	%r1490, %r238, %r251;
	shl.b32 	%r1491, %r1490, 1;
	or.b32  	%r1492, %r1491, 1;
	mul.wide.s32 	%rd176, %r1492, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p91 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6244, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6244, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6244, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1495, %r267, 1;
	mul.wide.s32 	%rd178, %r1495, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6244;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_168:
	or.b32  	%r1496, %r240, %r251;
	setp.gt.s32 	%p92, %r1496, -1;
	and.pred  	%p94, %p82, %p92;
	setp.le.s32 	%p95, %r6238, %r1199;
	and.pred  	%p7, %p95, %p94;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p96, %f16, 0f40000000;
	@%p96 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p97, %r231, 0;
	add.s32 	%r1498, %r239, %r251;
	shl.b32 	%r1499, %r1498, 1;
	mul.wide.s32 	%rd180, %r1499, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p97 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6246, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6246, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6246, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r278, %r6242, %r235;
	mul.wide.s32 	%rd182, %r278, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6246;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p98, %r231, 0;
	add.s32 	%r1503, %r241, %r251;
	shl.b32 	%r1504, %r1503, 1;
	mul.wide.s32 	%rd184, %r1504, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p98 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6247, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6247, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6247, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1507, %r278, 1;
	mul.wide.s32 	%rd186, %r1507, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6247;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p99, %f19, 0f40000000;
	@%p99 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p100, %r231, 0;
	add.s32 	%r1509, %r239, %r251;
	shl.b32 	%r1510, %r1509, 1;
	or.b32  	%r1511, %r1510, 1;
	mul.wide.s32 	%rd188, %r1511, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p100 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6249, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6249, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6249, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r289, %r6242, %r235;
	mul.wide.s32 	%rd190, %r289, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6249;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p101, %r231, 0;
	add.s32 	%r1515, %r241, %r251;
	shl.b32 	%r1516, %r1515, 1;
	or.b32  	%r1517, %r1516, 1;
	mul.wide.s32 	%rd192, %r1517, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p101 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6250, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6250, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6250, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1520, %r289, 1;
	mul.wide.s32 	%rd194, %r1520, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6250;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_192:
	or.b32  	%r1521, %r6238, %r251;
	setp.gt.s32 	%p102, %r1521, -1;
	and.pred  	%p104, %p82, %p102;
	setp.lt.s32 	%p105, %r6238, %r1199;
	and.pred  	%p8, %p105, %p104;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p106, %f22, 0f40000000;
	@%p106 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p107, %r231, 0;
	add.s32 	%r1523, %r243, %r251;
	shl.b32 	%r1524, %r1523, 1;
	mul.wide.s32 	%rd196, %r1524, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p107 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6252, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6252, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6252, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r300, %r6242, %r235;
	mul.wide.s32 	%rd198, %r300, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6252;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p108, %r231, 0;
	add.s32 	%r1528, %r242, %r251;
	shl.b32 	%r1529, %r1528, 1;
	mul.wide.s32 	%rd200, %r1529, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p108 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6253, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6253, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6253, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1532, %r300, 1;
	mul.wide.s32 	%rd202, %r1532, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6253;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p109, %f196, 0f40000000;
	@%p109 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p110, %r231, 0;
	add.s32 	%r1534, %r243, %r251;
	shl.b32 	%r1535, %r1534, 1;
	or.b32  	%r1536, %r1535, 1;
	mul.wide.s32 	%rd204, %r1536, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p110 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6255, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6255, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6255, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r311, %r6242, %r235;
	mul.wide.s32 	%rd206, %r311, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6255;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p111, %r231, 0;
	add.s32 	%r1540, %r242, %r251;
	shl.b32 	%r1541, %r1540, 1;
	or.b32  	%r1542, %r1541, 1;
	mul.wide.s32 	%rd208, %r1542, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p111 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6256, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6256, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6256, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1545, %r311, 1;
	mul.wide.s32 	%rd210, %r1545, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6256;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_216:
	or.b32  	%r1546, %r245, %r251;
	setp.gt.s32 	%p112, %r1546, -1;
	and.pred  	%p114, %p82, %p112;
	setp.lt.s32 	%p115, %r245, %r1199;
	and.pred  	%p9, %p115, %p114;
	@%p106 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p117, %r231, 0;
	add.s32 	%r1548, %r244, %r251;
	shl.b32 	%r1549, %r1548, 1;
	mul.wide.s32 	%rd212, %r1549, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p117 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6258, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6258, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6258, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r322, %r6242, %r235;
	mul.wide.s32 	%rd214, %r322, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6258;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p118, %r231, 0;
	add.s32 	%r1553, %r246, %r251;
	shl.b32 	%r1554, %r1553, 1;
	mul.wide.s32 	%rd216, %r1554, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p118 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6259, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6259, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6259, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1557, %r322, 1;
	mul.wide.s32 	%rd218, %r1557, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6259;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_228:
	@%p99 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p120, %r231, 0;
	add.s32 	%r1559, %r244, %r251;
	shl.b32 	%r1560, %r1559, 1;
	or.b32  	%r1561, %r1560, 1;
	mul.wide.s32 	%rd220, %r1561, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p120 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6261, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r333, %r6242, %r235;
	mul.wide.s32 	%rd222, %r333, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6261;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p121, %r231, 0;
	add.s32 	%r1565, %r246, %r251;
	shl.b32 	%r1566, %r1565, 1;
	or.b32  	%r1567, %r1566, 1;
	mul.wide.s32 	%rd224, %r1567, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p121 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6262, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1570, %r333, 1;
	mul.wide.s32 	%rd226, %r1570, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6262;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_240:
	or.b32  	%r1571, %r248, %r251;
	setp.gt.s32 	%p122, %r1571, -1;
	and.pred  	%p124, %p82, %p122;
	setp.lt.s32 	%p125, %r248, %r1199;
	and.pred  	%p10, %p125, %p124;
	@%p96 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p127, %r231, 0;
	add.s32 	%r1573, %r247, %r251;
	shl.b32 	%r1574, %r1573, 1;
	mul.wide.s32 	%rd228, %r1574, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p127 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6264, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r344, %r6242, %r235;
	mul.wide.s32 	%rd230, %r344, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6264;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p128, %r231, 0;
	add.s32 	%r1578, %r249, %r251;
	shl.b32 	%r1579, %r1578, 1;
	mul.wide.s32 	%rd232, %r1579, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p128 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6265, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1582, %r344, 1;
	mul.wide.s32 	%rd234, %r1582, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6265;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_252:
	@%p89 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p130, %r231, 0;
	add.s32 	%r1584, %r247, %r251;
	shl.b32 	%r1585, %r1584, 1;
	or.b32  	%r1586, %r1585, 1;
	mul.wide.s32 	%rd236, %r1586, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p130 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6267, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r355, %r6242, %r235;
	mul.wide.s32 	%rd238, %r355, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6267;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p131, %r231, 0;
	add.s32 	%r1590, %r249, %r251;
	shl.b32 	%r1591, %r1590, 1;
	or.b32  	%r1592, %r1591, 1;
	mul.wide.s32 	%rd240, %r1592, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p131 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6268, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1595, %r355, 1;
	mul.wide.s32 	%rd242, %r1595, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6268;
	add.s32 	%r6242, %r6242, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p132, %rd456, 0;
	@%p132 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6238, %r6238, %r30;
	setp.lt.s32 	%p133, %r6238, %r1199;
	@%p133 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6232, %r6232, %r1213;
	setp.lt.s32 	%p134, %r6232, %r1198;
	@%p134 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p18 bra 	$L__BB0_267;

	neg.s32 	%r205, %r55;
	mov.u32 	%r1412, 31;
	sub.s32 	%r1413, %r1412, %r28;
	setp.gt.s32 	%p72, %r27, %r28;
	selp.b32 	%r1414, %r28, %r1413, %p72;
	shl.b32 	%r1415, %r1414, 2;
	mov.u32 	%r1416, 2;
	sub.s32 	%r206, %r1415, %r1201;
	sub.s32 	%r1417, %r1416, %r1201;
	add.s32 	%r207, %r1417, %r1415;
	add.s32 	%r208, %r1198, -1;
	add.s32 	%r209, %r206, 1;
	add.s32 	%r210, %r207, 1;
	rem.s32 	%r1442, %r209, %r40;
	add.s32 	%r1443, %r1442, %r40;
	rem.s32 	%r221, %r1443, %r40;
	rem.s32 	%r1444, %r210, %r40;
	add.s32 	%r1445, %r1444, %r40;
	rem.s32 	%r222, %r1445, %r40;

$L__BB0_123:
	setp.ne.s32 	%p73, %r24, %r205;
	@%p73 bra 	$L__BB0_137;

	shl.b32 	%r212, %r6232, 1;
	rem.s32 	%r1418, %r206, %r40;
	add.s32 	%r1419, %r1418, %r40;
	rem.s32 	%r213, %r1419, %r40;
	rem.s32 	%r1420, %r207, %r40;
	add.s32 	%r1421, %r1420, %r40;
	rem.s32 	%r214, %r1421, %r40;
	@%p72 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1424, %r212, %r40;
	add.s32 	%r1425, %r1424, %r213;
	mul.wide.s32 	%rd144, %r1425, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1426, %r1424, %r214;
	mul.wide.s32 	%rd146, %r1426, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6233, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6233, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1427, %r6232, 5;
	add.s32 	%r1428, %r1427, %r28;
	shl.b32 	%r1429, %r1428, 2;
	mul.wide.s32 	%rd148, %r1429, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6233;
	@%p72 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1432, %r212, 1;
	mul.lo.s32 	%r1433, %r1432, %r40;
	add.s32 	%r1434, %r1433, %r213;
	mul.wide.s32 	%rd149, %r1434, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1435, %r1433, %r214;
	mul.wide.s32 	%rd151, %r1435, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6234, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6234, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1436, %r208, %r6232;
	rem.s32 	%r1437, %r1436, %r1198;
	shl.b32 	%r1438, %r1437, 5;
	add.s32 	%r1439, %r1438, %r28;
	shl.b32 	%r1440, %r1439, 2;
	or.b32  	%r1441, %r1440, 2;
	mul.wide.s32 	%rd153, %r1441, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6234;
	@%p72 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1448, %r212, %r40;
	add.s32 	%r1449, %r1448, %r221;
	mul.wide.s32 	%rd154, %r1449, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1450, %r1448, %r222;
	mul.wide.s32 	%rd156, %r1450, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6235, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6235, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6235;
	@%p72 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1453, %r212, 1;
	mul.lo.s32 	%r1454, %r1453, %r40;
	add.s32 	%r1455, %r1454, %r221;
	mul.wide.s32 	%rd158, %r1455, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1456, %r1454, %r222;
	mul.wide.s32 	%rd160, %r1456, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6236, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6236, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6236;

$L__BB0_137:
	add.s32 	%r6232, %r6232, %r1213;
	setp.lt.s32 	%p78, %r6232, %r1198;
	@%p78 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1597, %r1193, -1;
	mad.lo.s32 	%r1598, %r1193, 1152, -128;
	add.s32 	%r1599, %r1194, -1;
	mad.lo.s32 	%r1600, %r1194, 896, 128;
	mul.lo.s32 	%r1601, %r1600, %r1597;
	mad.lo.s32 	%r364, %r1598, %r1599, %r1601;
	setp.lt.s32 	%p135, %r364, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6273, {low,high};}

	// end inline asm
	@%p135 bra 	$L__BB0_270;

	mov.u32 	%r6272, 0;
	mov.u32 	%r6270, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6270], %r6273;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1604, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6270+4], %r1604;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1605, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6270+8], %r1605;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1606, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6270+12], %r1606;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6273, {low,high};}

	// end inline asm
	add.s32 	%r6270, %r6270, 16;
	add.s32 	%r6272, %r6272, 4;
	setp.lt.s32 	%p136, %r6272, %r364;
	@%p136 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1608, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1609, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1610, 31;
	sub.s32 	%r1611, %r1610, %r28;
	setp.gt.s32 	%p137, %r27, %r28;
	selp.b32 	%r1612, %r28, %r1611, %p137;
	shl.b32 	%r1613, %r1612, 2;
	sub.s32 	%r375, %r1613, %r1201;
	rem.s32 	%r1614, %r375, %r40;
	add.s32 	%r1615, %r1614, %r40;
	rem.s32 	%r376, %r1615, %r40;
	add.s32 	%r1616, %r375, 2;
	rem.s32 	%r1617, %r1616, %r40;
	add.s32 	%r1618, %r1617, %r40;
	rem.s32 	%r377, %r1618, %r40;
	mul.lo.s32 	%r1619, %r376, 6;
	mul.lo.s32 	%r1620, %r377, 6;
	mul.wide.s32 	%rd245, %r1619, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1620, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p11 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6274, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6274, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p11 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6275, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6275, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p11 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6276, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6276, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p11 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6277, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1629, %r375, 1;
	rem.s32 	%r1630, %r1629, %r40;
	add.s32 	%r1631, %r1630, %r40;
	rem.s32 	%r390, %r1631, %r40;
	add.s32 	%r1632, %r375, 3;
	rem.s32 	%r1633, %r1632, %r40;
	add.s32 	%r1634, %r1633, %r40;
	rem.s32 	%r391, %r1634, %r40;
	mul.lo.s32 	%r1635, %r390, 6;
	mul.lo.s32 	%r1636, %r391, 6;
	mul.wide.s32 	%rd247, %r1635, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1636, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p11 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6278, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6278, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p11 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6279, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6279, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p11 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6280, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p11 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6281, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1645, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1645;
	// begin inline asm
	mov.u32 %r1646, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1646;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p146, %rd24, 0;
	@%p146 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1647, %nctaid.y;
	mov.u32 	%r1648, %nctaid.x;
	mul.lo.s32 	%r1649, %r1648, %r1647;
	mov.u32 	%r1650, %nctaid.z;
	mul.lo.s32 	%r404, %r1649, %r1650;
	neg.s32 	%r1651, %r24;
	add.s32 	%r1652, %r28, %r23;
	setp.ne.s32 	%p147, %r1652, %r1651;
	mov.u32 	%r1653, %ctaid.x;
	add.s32 	%r405, %r1653, %r25;
	neg.s32 	%r406, %r26;
	bar.sync 	0;
	@%p147 bra 	$L__BB0_300;

	setp.eq.s32 	%p148, %r405, %r406;
	mov.u32 	%r1656, -2147483647;
	sub.s32 	%r1657, %r1656, %r404;
	selp.b32 	%r1655, %r1657, 1, %p148;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1654,[%rd25],%r1655;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1658, [%rd25];
	xor.b32  	%r1659, %r1658, %r1654;
	setp.gt.s32 	%p149, %r1659, -1;
	@%p149 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1660,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p150, %r31, 1;
	@%p150 bra 	$L__BB0_598;

	shr.s32 	%r1662, %r1203, 31;
	shr.u32 	%r1663, %r1662, 30;
	add.s32 	%r1664, %r1203, %r1663;
	shr.s32 	%r408, %r1664, 2;
	add.s32 	%r1665, %r28, 24;
	mul.hi.s32 	%r1666, %r1665, 1374389535;
	shr.u32 	%r1667, %r1666, 31;
	shr.s32 	%r1668, %r1666, 3;
	add.s32 	%r1669, %r1668, %r1667;
	mul.lo.s32 	%r1670, %r1669, 25;
	sub.s32 	%r1671, %r1665, %r1670;
	add.s32 	%r1672, %r28, 26;
	mul.hi.s32 	%r1673, %r1672, 1374389535;
	shr.u32 	%r1674, %r1673, 31;
	shr.s32 	%r1675, %r1673, 3;
	add.s32 	%r1676, %r1675, %r1674;
	mul.lo.s32 	%r1677, %r1676, 25;
	sub.s32 	%r1678, %r1672, %r1677;
	setp.lt.s32 	%p151, %r28, 25;
	selp.b32 	%r409, %r1671, %r28, %p151;
	shr.u32 	%r1679, %r1203, 31;
	add.s32 	%r1680, %r1203, %r1679;
	and.b32  	%r1681, %r1680, -2;
	sub.s32 	%r410, %r1203, %r1681;
	selp.b32 	%r411, %r1678, %r28, %p151;
	mov.u32 	%r1661, 0;
	// begin inline asm
	{mov.u32 %r1682, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2007, %r1682, 8;
	add.s32 	%r2008, %r2007, -8192;
	or.b32  	%r1686, %r2008, 31;
	// begin inline asm
	{sub.f16x2 %r5066,%r1609,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5069,%r6276,%r5066;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r1609;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6084,%r6277,%r5066;
}
	// end inline asm
	mov.u32 	%r6282, %r1609;
	mov.u32 	%r6283, %r1609;
	mov.u32 	%r6284, %r1609;
	mov.u32 	%r6285, %r1609;
	mov.u32 	%r6286, %r1609;
	mov.u32 	%r6287, %r1609;
	mov.u32 	%r6288, %r1609;
	mov.u32 	%r6289, %r1609;
	mov.u32 	%r6290, %r1609;
	mov.u32 	%r6291, %r1609;
	mov.u32 	%r6292, %r1609;
	mov.u32 	%r6293, %r1609;
	mov.u32 	%r6294, %r1609;
	mov.u32 	%r6295, %r1609;
	mov.u32 	%r6296, %r1609;
	mov.u32 	%r6297, %r1609;
	mov.u32 	%r6298, %r1609;
	mov.u32 	%r6299, %r1609;
	mov.u32 	%r6300, %r1609;
	mov.u32 	%r6301, %r1609;
	mov.u32 	%r6302, %r1609;
	mov.u32 	%r6303, %r1609;
	mov.u32 	%r6304, %r1609;
	mov.u32 	%r6305, %r1609;
	mov.u32 	%r6306, %r1609;
	mov.u32 	%r6307, %r1609;
	mov.u32 	%r6308, %r1609;
	mov.u32 	%r6309, %r1609;
	mov.u32 	%r6310, %r1609;
	mov.u32 	%r6311, %r1609;
	mov.u32 	%r6312, %r1609;
	mov.u32 	%r6313, %r1609;
	mov.u32 	%r6314, %r1609;
	mov.u32 	%r6315, %r1609;
	mov.u32 	%r6316, %r1609;
	mov.u32 	%r6317, %r1609;
	mov.u32 	%r6318, %r1609;
	mov.u32 	%r6319, %r1609;
	mov.u32 	%r6320, %r1609;
	mov.u32 	%r6321, %r1609;
	mov.u32 	%r6322, %r1609;
	mov.u32 	%r6323, %r1609;
	mov.u32 	%r6324, %r1609;
	mov.u32 	%r6325, %r1609;
	mov.u32 	%r6326, %r1609;
	mov.u32 	%r6327, %r1609;
	mov.u32 	%r6328, %r1609;
	mov.u32 	%r6329, %r1609;
	mov.u32 	%r6330, %r1609;
	mov.u32 	%r6331, %r1609;
	mov.u32 	%r6332, %r1609;
	mov.u32 	%r6333, %r1609;
	mov.u32 	%r6334, %r1609;
	mov.u32 	%r6335, %r1609;
	mov.u32 	%r6336, %r1609;
	mov.u32 	%r6337, %r1609;
	mov.u32 	%r6338, %r1609;
	mov.u32 	%r6339, %r1609;
	mov.u32 	%r6340, %r1609;
	mov.u32 	%r6341, %r1609;
	mov.u32 	%r6342, %r1609;
	mov.u32 	%r6343, %r1609;
	mov.u32 	%r6344, %r1609;
	mov.u32 	%r6345, %r1609;
	mov.u32 	%r6346, %r1609;
	mov.u32 	%r6347, %r1609;
	mov.u32 	%r6348, %r1609;
	mov.u32 	%r6349, %r1609;
	mov.u32 	%r6350, %r1609;
	mov.u32 	%r6351, %r1609;
	mov.u32 	%r6352, %r1609;
	mov.u32 	%r6353, %r1609;
	mov.u32 	%r6354, %r1609;
	mov.u32 	%r6355, %r1609;
	mov.u32 	%r6356, %r1661;

$L__BB0_302:
	mov.u32 	%r6183, %tid.y;
	mov.u32 	%r6182, %tid.z;
	mov.u32 	%r6181, %ctaid.y;
	mov.u32 	%r6180, %ctaid.z;
	mov.u32 	%r1697, 1;
	not.b32 	%r1971, %r6180;
	mov.u32 	%r1963, -1;
	add.s32 	%r1972, %r1196, %r1971;
	not.b32 	%r1974, %r6181;
	add.s32 	%r1975, %r1195, %r1974;
	add.s32 	%r1976, %r1975, %r1972;
	mul.lo.s32 	%r1977, %r1976, %r1197;
	add.s32 	%r1978, %r1977, %r1198;
	not.b32 	%r1980, %r6183;
	add.s32 	%r1981, %r1193, %r1980;
	mad.lo.s32 	%r1982, %r1975, %r1193, %r1981;
	not.b32 	%r1984, %r6182;
	add.s32 	%r1985, %r1194, %r1984;
	mad.lo.s32 	%r1986, %r1972, %r1194, %r1985;
	add.s32 	%r1987, %r1982, %r1986;
	shl.b32 	%r1988, %r1987, 1;
	add.s32 	%r1989, %r1978, %r1988;
	add.s32 	%r1990, %r1989, %r6356;
	add.s32 	%r1991, %r6356, %r1977;
	div.s32 	%r1992, %r1990, %r1198;
	mul.lo.s32 	%r1993, %r1992, %r1198;
	sub.s32 	%r1996, %r30, %r1198;
	sub.s32 	%r1997, %r1982, %r1986;
	shl.b32 	%r1998, %r1997, 1;
	add.s32 	%r1999, %r1998, %r1199;
	mad.lo.s32 	%r2000, %r1992, %r30, %r1999;
	mad.lo.s32 	%r2001, %r1992, %r1996, %r1991;
	div.s32 	%r2002, %r2000, %r1199;
	mul.lo.s32 	%r2003, %r2002, %r1199;
	sub.s32 	%r2006, %r1214, %r1199;
	mov.u32 	%r1781, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1683,%r1608,%r1661,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1689, %r6275, %r1683, %p11;
	// begin inline asm
	{mul.f16x2 %r6440,%r1689,%r6355;
}
	// end inline asm
	selp.b32 	%r1692, %r6279, %r1683, %p11;
	// begin inline asm
	{mul.f16x2 %r6438,%r1692,%r6354;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1695,%r1608,%r1697,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1701, %r6275, %r1695, %p11;
	// begin inline asm
	{mul.f16x2 %r6439,%r1701,%r6353;
}
	// end inline asm
	selp.b32 	%r1704, %r6279, %r1695, %p11;
	// begin inline asm
	{mul.f16x2 %r6437,%r1704,%r6352;
}
	// end inline asm
	mov.u32 	%r1709, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1707,%r1608,%r1709,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1713, %r6275, %r1707, %p11;
	// begin inline asm
	{mul.f16x2 %r6436,%r1713,%r6351;
}
	// end inline asm
	selp.b32 	%r1716, %r6279, %r1707, %p11;
	// begin inline asm
	{mul.f16x2 %r6435,%r1716,%r6350;
}
	// end inline asm
	mov.u32 	%r1721, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1719,%r1608,%r1721,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1725, %r6275, %r1719, %p11;
	// begin inline asm
	{mul.f16x2 %r6434,%r1725,%r1609;
}
	// end inline asm
	selp.b32 	%r1728, %r6279, %r1719, %p11;
	// begin inline asm
	{mul.f16x2 %r6432,%r1728,%r1609;
}
	// end inline asm
	mov.u32 	%r1733, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1731,%r1608,%r1733,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1737, %r6275, %r1731, %p11;
	// begin inline asm
	{mul.f16x2 %r6433,%r1737,%r6349;
}
	// end inline asm
	selp.b32 	%r1740, %r6279, %r1731, %p11;
	// begin inline asm
	{mul.f16x2 %r6431,%r1740,%r6348;
}
	// end inline asm
	mov.u32 	%r1745, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1743,%r1608,%r1745,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1749, %r6275, %r1743, %p11;
	// begin inline asm
	{mul.f16x2 %r6430,%r1749,%r6347;
}
	// end inline asm
	selp.b32 	%r1752, %r6279, %r1743, %p11;
	// begin inline asm
	{mul.f16x2 %r6427,%r1752,%r6346;
}
	// end inline asm
	mov.u32 	%r1757, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1755,%r1608,%r1757,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1761, %r6275, %r1755, %p11;
	// begin inline asm
	{mul.f16x2 %r6429,%r1761,%r6345;
}
	// end inline asm
	selp.b32 	%r1764, %r6279, %r1755, %p11;
	// begin inline asm
	{mul.f16x2 %r6426,%r1764,%r6344;
}
	// end inline asm
	mov.u32 	%r1769, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r1767,%r1608,%r1769,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1773, %r6275, %r1767, %p11;
	// begin inline asm
	{mul.f16x2 %r6428,%r1773,%r6343;
}
	// end inline asm
	selp.b32 	%r1776, %r6279, %r1767, %p11;
	// begin inline asm
	{mul.f16x2 %r6425,%r1776,%r6342;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1779,%r1608,%r1781,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1785, %r6275, %r1779, %p11;
	// begin inline asm
	{mul.f16x2 %r6424,%r1785,%r6341;
}
	// end inline asm
	selp.b32 	%r1788, %r6279, %r1779, %p11;
	// begin inline asm
	{mul.f16x2 %r6421,%r1788,%r6340;
}
	// end inline asm
	mov.u32 	%r1793, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r1791,%r1608,%r1793,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1797, %r6275, %r1791, %p11;
	// begin inline asm
	{mul.f16x2 %r6423,%r1797,%r6339;
}
	// end inline asm
	selp.b32 	%r1800, %r6279, %r1791, %p11;
	// begin inline asm
	{mul.f16x2 %r6420,%r1800,%r6338;
}
	// end inline asm
	mov.u32 	%r1805, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r1803,%r1608,%r1805,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1809, %r6275, %r1803, %p11;
	// begin inline asm
	{mul.f16x2 %r6422,%r1809,%r6337;
}
	// end inline asm
	selp.b32 	%r1812, %r6279, %r1803, %p11;
	// begin inline asm
	{mul.f16x2 %r6419,%r1812,%r6336;
}
	// end inline asm
	mov.u32 	%r1817, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r1815,%r1608,%r1817,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1821, %r6275, %r1815, %p11;
	// begin inline asm
	{mul.f16x2 %r6418,%r1821,%r1609;
}
	// end inline asm
	selp.b32 	%r1824, %r6279, %r1815, %p11;
	// begin inline asm
	{mul.f16x2 %r6417,%r1824,%r1609;
}
	// end inline asm
	mov.u32 	%r1829, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r1827,%r1608,%r1829,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1833, %r6275, %r1827, %p11;
	// begin inline asm
	{mul.f16x2 %r6416,%r1833,%r1609;
}
	// end inline asm
	selp.b32 	%r1836, %r6279, %r1827, %p11;
	// begin inline asm
	{mul.f16x2 %r6414,%r1836,%r1609;
}
	// end inline asm
	mov.u32 	%r1841, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r1839,%r1608,%r1841,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1845, %r6275, %r1839, %p11;
	// begin inline asm
	{mul.f16x2 %r6415,%r1845,%r1609;
}
	// end inline asm
	selp.b32 	%r1848, %r6279, %r1839, %p11;
	// begin inline asm
	{mul.f16x2 %r6413,%r1848,%r1609;
}
	// end inline asm
	mov.u32 	%r1853, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r1851,%r1608,%r1853,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1857, %r6275, %r1851, %p11;
	// begin inline asm
	{mul.f16x2 %r6412,%r1857,%r1609;
}
	// end inline asm
	selp.b32 	%r1860, %r6279, %r1851, %p11;
	// begin inline asm
	{mul.f16x2 %r6409,%r1860,%r1609;
}
	// end inline asm
	mov.u32 	%r1865, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r1863,%r1608,%r1865,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1869, %r6275, %r1863, %p11;
	// begin inline asm
	{mul.f16x2 %r6411,%r1869,%r6335;
}
	// end inline asm
	selp.b32 	%r1872, %r6279, %r1863, %p11;
	// begin inline asm
	{mul.f16x2 %r6408,%r1872,%r6334;
}
	// end inline asm
	mov.u32 	%r1877, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r1875,%r1608,%r1877,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1881, %r6275, %r1875, %p11;
	// begin inline asm
	{mul.f16x2 %r6410,%r1881,%r6333;
}
	// end inline asm
	selp.b32 	%r1884, %r6279, %r1875, %p11;
	// begin inline asm
	{mul.f16x2 %r6407,%r1884,%r6332;
}
	// end inline asm
	mov.u32 	%r1889, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r1887,%r1608,%r1889,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1893, %r6275, %r1887, %p11;
	// begin inline asm
	{mul.f16x2 %r6406,%r1893,%r1609;
}
	// end inline asm
	selp.b32 	%r1896, %r6279, %r1887, %p11;
	// begin inline asm
	{mul.f16x2 %r6403,%r1896,%r1609;
}
	// end inline asm
	mov.u32 	%r1901, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r1899,%r1608,%r1901,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1905, %r6275, %r1899, %p11;
	// begin inline asm
	{mul.f16x2 %r6405,%r1905,%r1609;
}
	// end inline asm
	selp.b32 	%r1908, %r6279, %r1899, %p11;
	// begin inline asm
	{mul.f16x2 %r6402,%r1908,%r1609;
}
	// end inline asm
	mov.u32 	%r1913, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r1911,%r1608,%r1913,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1917, %r6275, %r1911, %p11;
	// begin inline asm
	{mul.f16x2 %r6404,%r1917,%r6331;
}
	// end inline asm
	selp.b32 	%r1920, %r6279, %r1911, %p11;
	// begin inline asm
	{mul.f16x2 %r6401,%r1920,%r6330;
}
	// end inline asm
	mov.u32 	%r1925, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r1923,%r1608,%r1925,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1929, %r6275, %r1923, %p11;
	// begin inline asm
	{mul.f16x2 %r6400,%r1929,%r1609;
}
	// end inline asm
	selp.b32 	%r1932, %r6279, %r1923, %p11;
	// begin inline asm
	{mul.f16x2 %r6399,%r1932,%r1609;
}
	// end inline asm
	mov.u32 	%r1937, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r1935,%r1608,%r1937,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1941, %r6275, %r1935, %p11;
	// begin inline asm
	{mul.f16x2 %r6398,%r1941,%r1609;
}
	// end inline asm
	selp.b32 	%r1944, %r6279, %r1935, %p11;
	// begin inline asm
	{mul.f16x2 %r6396,%r1944,%r1609;
}
	// end inline asm
	mov.u32 	%r1949, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r1947,%r1608,%r1949,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1953, %r6275, %r1947, %p11;
	// begin inline asm
	{mul.f16x2 %r6397,%r1953,%r1609;
}
	// end inline asm
	selp.b32 	%r1956, %r6279, %r1947, %p11;
	// begin inline asm
	{mul.f16x2 %r6395,%r1956,%r1609;
}
	// end inline asm
	mov.u32 	%r1961, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r1959,%r1608,%r1961,%r1686,%r1963;
}
	// end inline asm
	selp.b32 	%r1965, %r6275, %r1959, %p11;
	// begin inline asm
	{mul.f16x2 %r6394,%r1965,%r1609;
}
	// end inline asm
	selp.b32 	%r1968, %r6279, %r1959, %p11;
	// begin inline asm
	{mul.f16x2 %r6393,%r1968,%r1609;
}
	// end inline asm
	sub.s32 	%r535, %r1990, %r1993;
	sub.s32 	%r536, %r2000, %r2003;
	mad.lo.s32 	%r537, %r2002, %r2006, %r2001;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2055, %r537, 1;
	mul.wide.s32 	%rd256, %r2055, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p70 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	mov.u32 	%r6184, %tid.x;
	add.s32 	%r2258, %r1209, 1;
	setp.lt.s32 	%p159, %r537, %r2258;
	setp.eq.s32 	%p160, %r408, %r6184;
	setp.gt.s32 	%p161, %r537, -1;
	and.pred  	%p162, %p160, %p161;
	and.pred  	%p163, %p159, %p162;
	@%p163 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r6359, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r6360, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2058, %r1209, 1;
	setp.lt.s32 	%p154, %r537, %r2058;
	setp.gt.s32 	%p155, %r537, -1;
	and.pred  	%p156, %p155, %p154;
	@%p156 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r6357, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r6358, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6359, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6360, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2266, 0;
	mov.u32 	%r2277, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2264,%r6273,%r2266,%r1686,%r2277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2269,%r6359,%r2264;
}
	// end inline asm
	mov.u32 	%r2275, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2273,%r6273,%r2275,%r1686,%r2277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2278,%r6360,%r2273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6362,%r2269,%r2278;
}
	// end inline asm
	setp.eq.s32 	%p164, %r410, 0;
	mov.u32 	%r6361, %r6362;
	@%p164 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r6361, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r6440,%r6440,%r6361;
}
	// end inline asm
	setp.eq.s32 	%p165, %r410, 1;
	@%p165 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6362, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r6438,%r6438,%r6362;
}
	// end inline asm
	mov.u32 	%r2299, 2;
	mov.u32 	%r2310, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2297,%r6273,%r2299,%r1686,%r2310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2302,%r6359,%r2297;
}
	// end inline asm
	mov.u32 	%r2308, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2306,%r6273,%r2308,%r1686,%r2310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2311,%r6360,%r2306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6364,%r2302,%r2311;
}
	// end inline asm
	mov.u32 	%r6363, %r6364;
	@%p164 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r6363, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r6439,%r6439,%r6363;
}
	// end inline asm
	@%p165 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r6364, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r6437,%r6437,%r6364;
}
	// end inline asm
	mov.u32 	%r2332, 4;
	mov.u32 	%r2343, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2330,%r6273,%r2332,%r1686,%r2343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2335,%r6359,%r2330;
}
	// end inline asm
	mov.u32 	%r2341, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2339,%r6273,%r2341,%r1686,%r2343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2344,%r6360,%r2339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6366,%r2335,%r2344;
}
	// end inline asm
	mov.u32 	%r6365, %r6366;
	@%p164 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6365, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r6436,%r6436,%r6365;
}
	// end inline asm
	@%p165 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r6366, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r6435,%r6435,%r6366;
}
	// end inline asm
	mov.u32 	%r2365, 6;
	mov.u32 	%r2376, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2363,%r6273,%r2365,%r1686,%r2376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2368,%r6359,%r2363;
}
	// end inline asm
	mov.u32 	%r2374, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2372,%r6273,%r2374,%r1686,%r2376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2377,%r6360,%r2372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6368,%r2368,%r2377;
}
	// end inline asm
	mov.u32 	%r6367, %r6368;
	@%p164 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r6367, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r6434,%r6434,%r6367;
}
	// end inline asm
	@%p165 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r6368, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r6432,%r6432,%r6368;
}
	// end inline asm
	mov.u32 	%r2398, 8;
	mov.u32 	%r2409, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2396,%r6273,%r2398,%r1686,%r2409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2401,%r6359,%r2396;
}
	// end inline asm
	mov.u32 	%r2407, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2405,%r6273,%r2407,%r1686,%r2409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2410,%r6360,%r2405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6370,%r2401,%r2410;
}
	// end inline asm
	mov.u32 	%r6369, %r6370;
	@%p164 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r6369, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r6433,%r6433,%r6369;
}
	// end inline asm
	@%p165 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r6370, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r6431,%r6431,%r6370;
}
	// end inline asm
	mov.u32 	%r2431, 10;
	mov.u32 	%r2442, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2429,%r6273,%r2431,%r1686,%r2442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2434,%r6359,%r2429;
}
	// end inline asm
	mov.u32 	%r2440, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2438,%r6273,%r2440,%r1686,%r2442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2443,%r6360,%r2438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6372,%r2434,%r2443;
}
	// end inline asm
	mov.u32 	%r6371, %r6372;
	@%p164 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r6371, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r6430,%r6430,%r6371;
}
	// end inline asm
	@%p165 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r6372, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r6427,%r6427,%r6372;
}
	// end inline asm
	mov.u32 	%r2464, 12;
	mov.u32 	%r2475, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2462,%r6273,%r2464,%r1686,%r2475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2467,%r6359,%r2462;
}
	// end inline asm
	mov.u32 	%r2473, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2471,%r6273,%r2473,%r1686,%r2475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2476,%r6360,%r2471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6374,%r2467,%r2476;
}
	// end inline asm
	mov.u32 	%r6373, %r6374;
	@%p164 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r6373, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r6429,%r6429,%r6373;
}
	// end inline asm
	@%p165 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r6374, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r6426,%r6426,%r6374;
}
	// end inline asm
	mov.u32 	%r2497, 14;
	mov.u32 	%r2508, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2495,%r6273,%r2497,%r1686,%r2508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2500,%r6359,%r2495;
}
	// end inline asm
	mov.u32 	%r2506, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2504,%r6273,%r2506,%r1686,%r2508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2509,%r6360,%r2504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6376,%r2500,%r2509;
}
	// end inline asm
	mov.u32 	%r6375, %r6376;
	@%p164 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r6375, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r6424,%r6424,%r6375;
}
	// end inline asm
	@%p165 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r6376, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r6421,%r6421,%r6376;
}
	// end inline asm
	mov.u32 	%r2530, 16;
	mov.u32 	%r2541, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2528,%r6273,%r2530,%r1686,%r2541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2533,%r6359,%r2528;
}
	// end inline asm
	mov.u32 	%r2539, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2537,%r6273,%r2539,%r1686,%r2541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2542,%r6360,%r2537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6378,%r2533,%r2542;
}
	// end inline asm
	mov.u32 	%r6377, %r6378;
	@%p164 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r6377, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r6423,%r6423,%r6377;
}
	// end inline asm
	@%p165 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r6378, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r6420,%r6420,%r6378;
}
	// end inline asm
	mov.u32 	%r2563, 18;
	mov.u32 	%r2574, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2561,%r6273,%r2563,%r1686,%r2574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2566,%r6359,%r2561;
}
	// end inline asm
	mov.u32 	%r2572, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2570,%r6273,%r2572,%r1686,%r2574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2575,%r6360,%r2570;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6380,%r2566,%r2575;
}
	// end inline asm
	mov.u32 	%r6379, %r6380;
	@%p164 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r6379, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r6418,%r6418,%r6379;
}
	// end inline asm
	@%p165 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r6380, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r6417,%r6417,%r6380;
}
	// end inline asm
	mov.u32 	%r2596, 20;
	mov.u32 	%r2607, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2594,%r6273,%r2596,%r1686,%r2607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2599,%r6359,%r2594;
}
	// end inline asm
	mov.u32 	%r2605, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2603,%r6273,%r2605,%r1686,%r2607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2608,%r6360,%r2603;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6382,%r2599,%r2608;
}
	// end inline asm
	mov.u32 	%r6381, %r6382;
	@%p164 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r6381, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r6416,%r6416,%r6381;
}
	// end inline asm
	@%p165 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r6382, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r6414,%r6414,%r6382;
}
	// end inline asm
	mov.u32 	%r2629, 22;
	mov.u32 	%r2640, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2627,%r6273,%r2629,%r1686,%r2640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2632,%r6359,%r2627;
}
	// end inline asm
	mov.u32 	%r2638, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2636,%r6273,%r2638,%r1686,%r2640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2641,%r6360,%r2636;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6384,%r2632,%r2641;
}
	// end inline asm
	mov.u32 	%r6383, %r6384;
	@%p164 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r6383, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r6412,%r6412,%r6383;
}
	// end inline asm
	@%p165 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r6384, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r6409,%r6409,%r6384;
}
	// end inline asm
	mov.u32 	%r2662, 24;
	mov.u32 	%r2673, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2660,%r6273,%r2662,%r1686,%r2673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2665,%r6359,%r2660;
}
	// end inline asm
	mov.u32 	%r2671, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2669,%r6273,%r2671,%r1686,%r2673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2674,%r6360,%r2669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6386,%r2665,%r2674;
}
	// end inline asm
	mov.u32 	%r6385, %r6386;
	@%p164 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r6385, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r6411,%r6411,%r6385;
}
	// end inline asm
	@%p165 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r6386, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r6408,%r6408,%r6386;
}
	// end inline asm
	mov.u32 	%r2695, 26;
	mov.u32 	%r2706, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2693,%r6273,%r2695,%r1686,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2698,%r6359,%r2693;
}
	// end inline asm
	mov.u32 	%r2704, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2702,%r6273,%r2704,%r1686,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2707,%r6360,%r2702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6388,%r2698,%r2707;
}
	// end inline asm
	mov.u32 	%r6387, %r6388;
	@%p164 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r6387, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r6406,%r6406,%r6387;
}
	// end inline asm
	@%p165 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r6388, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r6403,%r6403,%r6388;
}
	// end inline asm
	mov.u32 	%r2728, 28;
	mov.u32 	%r2739, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2726,%r6273,%r2728,%r1686,%r2739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r6359,%r2726;
}
	// end inline asm
	mov.u32 	%r2737, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2735,%r6273,%r2737,%r1686,%r2739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2740,%r6360,%r2735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6390,%r2731,%r2740;
}
	// end inline asm
	mov.u32 	%r6389, %r6390;
	@%p164 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r6389, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r6405,%r6405,%r6389;
}
	// end inline asm
	@%p165 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r6390, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r6402,%r6402,%r6390;
}
	// end inline asm
	mov.u32 	%r2770, 31;
	mov.u32 	%r2761, 30;
	mov.u32 	%r2772, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2759,%r6273,%r2761,%r1686,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2764,%r6359,%r2759;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2768,%r6273,%r2770,%r1686,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2773,%r6360,%r2768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6392,%r2764,%r2773;
}
	// end inline asm
	mov.u32 	%r6391, %r6392;
	@%p164 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r6391, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r6398,%r6398,%r6391;
}
	// end inline asm
	@%p165 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r6392, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r6396,%r6396,%r6392;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6357, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6358, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p157, %r536, %r1203;
	@%p157 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2252, 0;
	// begin inline asm
	{mul.f16x2 %r2160,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6440,%r6440,%r2160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2166,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6428,%r6428,%r2166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2172,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6430,%r6430,%r2172;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2178,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6410,%r6410,%r2178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2184,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6412,%r6412,%r2184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2190,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6397,%r6397,%r2190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2196,%r6358,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6434,%r6434,%r2196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2202,%r6358,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6415,%r6415,%r2202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2208,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6438,%r6438,%r2208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2214,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6425,%r6425,%r2214;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2220,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6427,%r6427,%r2220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2226,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6407,%r6407,%r2226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2232,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6409,%r6409,%r2232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2238,%r6357,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6395,%r6395,%r2238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2244,%r6358,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6432,%r6432,%r2244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2250,%r6358,%r2252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6413,%r6413,%r2250;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2063, %r1203, -2;
	setp.ne.s32 	%p158, %r536, %r2063;
	@%p158 bra 	$L__BB0_378;

	mov.u32 	%r2156, 0;
	// begin inline asm
	{mul.f16x2 %r2064,%r6357,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6418,%r6418,%r2064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2070,%r6357,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6400,%r6400,%r2070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2076,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6436,%r6436,%r2076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2082,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6422,%r6422,%r2082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2088,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6424,%r6424,%r2088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2094,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6404,%r6404,%r2094;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2100,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6406,%r6406,%r2100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2106,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6394,%r6394,%r2106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2112,%r6357,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6417,%r6417,%r2112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2118,%r6357,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6399,%r6399,%r2118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2124,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6435,%r6435,%r2124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2130,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6419,%r6419,%r2130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2136,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6421,%r6421,%r2136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2142,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6401,%r6401,%r2142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2148,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6403,%r6403,%r2148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2154,%r6358,%r2156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6393,%r6393,%r2154;
}
	// end inline asm

$L__BB0_378:
	mov.u32 	%r2796, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2792,%r6328,%r409,%r1686,%r2796;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2792;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6328;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2799, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2800,%r6329,%r2799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2803,%r6274,%r2800;
}
	// end inline asm
	@%p11 bra 	$L__BB0_380;
	bra.uni 	$L__BB0_379;

$L__BB0_380:
	// begin inline asm
	{neg.f16x2 %r6441,%r6440;
}
	// end inline asm
	bra.uni 	$L__BB0_381;

$L__BB0_379:
	// begin inline asm
	{mul.f16x2 %r6441,%r6275,%r2800;
}
	// end inline asm

$L__BB0_381:
	mov.u32 	%r2816, 31;
	mov.u32 	%r2839, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2814,%r6441,%r2816,%r1686,%r2839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2819,%r2803,%r2814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2822,%r6327,%r6326;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2825,%r2822,%r2819;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r1609,%r2825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2831,%r6440,%r2828;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2835,%r6324,%r409,%r1686,%r2839;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2835;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6324;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2842, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2843,%r6325,%r2842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2846,%r6274,%r2843;
}
	// end inline asm
	mov.u32 	%r6442, %r6439;
	@%p11 bra 	$L__BB0_383;

	// begin inline asm
	{mul.f16x2 %r6442,%r6275,%r2843;
}
	// end inline asm

$L__BB0_383:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2857,%r6442,%r2816,%r1686,%r2839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2862,%r2846,%r2857;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2865,%r6327,%r6323;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2868,%r2862,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2871,%r1609,%r2868;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2874,%r6439,%r2871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2877,%r6328,%r6329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2880,%r6278,%r2877;
}
	// end inline asm
	@%p11 bra 	$L__BB0_385;
	bra.uni 	$L__BB0_384;

$L__BB0_385:
	// begin inline asm
	{neg.f16x2 %r6443,%r6438;
}
	// end inline asm
	bra.uni 	$L__BB0_386;

$L__BB0_384:
	// begin inline asm
	{mul.f16x2 %r6443,%r6279,%r2877;
}
	// end inline asm

$L__BB0_386:
	mov.u32 	%r2893, 31;
	mov.u32 	%r2895, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2891,%r6443,%r2893,%r1686,%r2895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2896,%r2880,%r2891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2899,%r6322,%r6321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2902,%r2899,%r2896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2905,%r1609,%r2902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2908,%r6438,%r2905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2911,%r6324,%r6325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2914,%r6278,%r2911;
}
	// end inline asm
	mov.u32 	%r6444, %r6437;
	@%p11 bra 	$L__BB0_388;

	// begin inline asm
	{mul.f16x2 %r6444,%r6279,%r2911;
}
	// end inline asm

$L__BB0_388:
	// begin inline asm
	{shfl.sync.bfly.b32 %r2923,%r6444,%r2893,%r1686,%r2895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2928,%r2914,%r2923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2931,%r6322,%r6320;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2934,%r2928,%r2931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2937,%r1609,%r2934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2940,%r6437,%r2937;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2944,%r6318,%r409,%r1686,%r2895;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r2944;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6318;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r2951, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2952,%r6319,%r2951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2955,%r6274,%r2952;
}
	// end inline asm
	@%p11 bra 	$L__BB0_390;
	bra.uni 	$L__BB0_389;

$L__BB0_390:
	// begin inline asm
	{neg.f16x2 %r6445,%r6436;
}
	// end inline asm
	bra.uni 	$L__BB0_391;

$L__BB0_389:
	// begin inline asm
	{mul.f16x2 %r6445,%r6275,%r2952;
}
	// end inline asm

$L__BB0_391:
	mov.u32 	%r2970, 31;
	mov.u32 	%r2972, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r2968,%r6445,%r2970,%r1686,%r2972;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2973,%r2955,%r2968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2976,%r6317,%r6327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2979,%r2976,%r2973;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2982,%r1609,%r2979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r2985,%r6436,%r2982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r2988,%r6318,%r6319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2991,%r6278,%r2988;
}
	// end inline asm
	@%p11 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r6446,%r6435;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r6446,%r6279,%r2988;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3004, 31;
	mov.u32 	%r3027, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3002,%r6446,%r3004,%r1686,%r3027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3007,%r2991,%r3002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3010,%r6316,%r6322;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3013,%r3010,%r3007;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3016,%r1609,%r3013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3019,%r6435,%r3016;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3023,%r6314,%r409,%r1686,%r3027;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3023;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6314;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3030, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3031,%r6315,%r3030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3034,%r6274,%r3031;
}
	// end inline asm
	@%p11 bra 	$L__BB0_396;
	bra.uni 	$L__BB0_395;

$L__BB0_396:
	// begin inline asm
	{neg.f16x2 %r6447,%r6434;
}
	// end inline asm
	bra.uni 	$L__BB0_397;

$L__BB0_395:
	// begin inline asm
	{mul.f16x2 %r6447,%r6275,%r3031;
}
	// end inline asm

$L__BB0_397:
	mov.u32 	%r3049, 31;
	mov.u32 	%r3072, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3047,%r6447,%r3049,%r1686,%r3072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3052,%r3034,%r3047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3055,%r6313,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3058,%r3055,%r3052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3061,%r1609,%r3058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3064,%r6434,%r3061;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3068,%r6311,%r409,%r1686,%r3072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3068;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6311;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3075, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3076,%r6312,%r3075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3079,%r6274,%r3076;
}
	// end inline asm
	mov.u32 	%r6448, %r6433;
	@%p11 bra 	$L__BB0_399;

	// begin inline asm
	{mul.f16x2 %r6448,%r6275,%r3076;
}
	// end inline asm

$L__BB0_399:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3090,%r6448,%r3049,%r1686,%r3072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3095,%r3079,%r3090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3098,%r6313,%r6326;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3101,%r3095,%r3098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3104,%r1609,%r3101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3107,%r6433,%r3104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3110,%r6314,%r6315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3113,%r6278,%r3110;
}
	// end inline asm
	@%p11 bra 	$L__BB0_401;
	bra.uni 	$L__BB0_400;

$L__BB0_401:
	// begin inline asm
	{neg.f16x2 %r6449,%r6432;
}
	// end inline asm
	bra.uni 	$L__BB0_402;

$L__BB0_400:
	// begin inline asm
	{mul.f16x2 %r6449,%r6279,%r3110;
}
	// end inline asm

$L__BB0_402:
	mov.u32 	%r3126, 31;
	mov.u32 	%r3128, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3124,%r6449,%r3126,%r1686,%r3128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3129,%r3113,%r3124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3132,%r6310,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3135,%r3132,%r3129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3138,%r1609,%r3135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3141,%r6432,%r3138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3144,%r6311,%r6312;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3147,%r6278,%r3144;
}
	// end inline asm
	mov.u32 	%r6450, %r6431;
	@%p11 bra 	$L__BB0_404;

	// begin inline asm
	{mul.f16x2 %r6450,%r6279,%r3144;
}
	// end inline asm

$L__BB0_404:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3156,%r6450,%r3126,%r1686,%r3128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3161,%r3147,%r3156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3164,%r6310,%r6321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3167,%r3161,%r3164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3170,%r1609,%r3167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3173,%r6431,%r3170;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3177,%r6308,%r409,%r1686,%r3128;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3177;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6308;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3184, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3185,%r6309,%r3184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3188,%r6274,%r3185;
}
	// end inline asm
	@%p11 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r6451,%r6430;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r6451,%r6275,%r3185;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3203, 31;
	mov.u32 	%r3226, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3201,%r6451,%r3203,%r1686,%r3226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3206,%r3188,%r3201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3209,%r6307,%r6313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3212,%r3209,%r3206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3215,%r1609,%r3212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6355,%r6430,%r3215;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3222,%r6305,%r409,%r1686,%r3226;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3222;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6305;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3229, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3230,%r6306,%r3229;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3233,%r6274,%r3230;
}
	// end inline asm
	mov.u32 	%r6452, %r6429;
	@%p11 bra 	$L__BB0_409;

	// begin inline asm
	{mul.f16x2 %r6452,%r6275,%r3230;
}
	// end inline asm

$L__BB0_409:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3244,%r6452,%r3203,%r1686,%r3226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3249,%r3233,%r3244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3252,%r6307,%r6327;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3255,%r3249,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3258,%r1609,%r3255;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6353,%r6429,%r3258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3264,%r6309,%r6329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3267,%r6306,%r6312;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3270,%r3264,%r3267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3273,%r1609,%r3270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3276,%r6428,%r3273;
}
	// end inline asm
	selp.b32 	%r809, %r6428, %r3276, %p11;
	// begin inline asm
	{sub.f16x2 %r3279,%r6308,%r6309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3282,%r6278,%r3279;
}
	// end inline asm
	@%p11 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r6453,%r6427;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r6453,%r6279,%r3279;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3295, 31;
	mov.u32 	%r3297, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3293,%r6453,%r3295,%r1686,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3298,%r3282,%r3293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3301,%r6304,%r6310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3304,%r3301,%r3298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3307,%r1609,%r3304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6354,%r6427,%r3307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3313,%r6305,%r6306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3316,%r6278,%r3313;
}
	// end inline asm
	mov.u32 	%r6454, %r6426;
	@%p11 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r6454,%r6279,%r3313;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3325,%r6454,%r3295,%r1686,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3330,%r3316,%r3325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3333,%r6304,%r6322;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3336,%r3330,%r3333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3339,%r1609,%r3336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6352,%r6426,%r3339;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3345,%r6308,%r6328;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3348,%r6305,%r6311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3351,%r3345,%r3348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3354,%r1609,%r3351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3357,%r6425,%r3354;
}
	// end inline asm
	selp.b32 	%r821, %r6425, %r3357, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3361,%r6302,%r409,%r1686,%r3297;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3361;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6302;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3368, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3369,%r6303,%r3368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3372,%r6274,%r3369;
}
	// end inline asm
	@%p11 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r6455,%r6424;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r6455,%r6275,%r3369;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3387, 31;
	mov.u32 	%r3410, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3385,%r6455,%r3387,%r1686,%r3410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3390,%r3372,%r3385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3393,%r6301,%r6307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3396,%r3393,%r3390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3399,%r1609,%r3396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6351,%r6424,%r3399;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3406,%r6299,%r409,%r1686,%r3410;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3406;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6299;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3413, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3414,%r6300,%r3413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3417,%r6274,%r3414;
}
	// end inline asm
	mov.u32 	%r6456, %r6423;
	@%p11 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r6456,%r6275,%r3414;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3428,%r6456,%r3387,%r1686,%r3410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3433,%r3417,%r3428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3436,%r6301,%r6317;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3439,%r3433,%r3436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3442,%r1609,%r3439;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3445,%r6423,%r3442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3448,%r6303,%r6319;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3451,%r6300,%r6306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3454,%r3448,%r3451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3457,%r1609,%r3454;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3460,%r6422,%r3457;
}
	// end inline asm
	selp.b32 	%r833, %r6422, %r3460, %p11;
	// begin inline asm
	{sub.f16x2 %r3463,%r6302,%r6303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3466,%r6278,%r3463;
}
	// end inline asm
	@%p11 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r6457,%r6421;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r6457,%r6279,%r3463;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3479, 31;
	mov.u32 	%r3481, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3477,%r6457,%r3479,%r1686,%r3481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3482,%r3466,%r3477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3485,%r6298,%r6304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3488,%r3485,%r3482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3491,%r1609,%r3488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6350,%r6421,%r3491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3497,%r6299,%r6300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3500,%r6278,%r3497;
}
	// end inline asm
	mov.u32 	%r6458, %r6420;
	@%p11 bra 	$L__BB0_424;

	// begin inline asm
	{mul.f16x2 %r6458,%r6279,%r3497;
}
	// end inline asm

$L__BB0_424:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3509,%r6458,%r3479,%r1686,%r3481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3514,%r3500,%r3509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3517,%r6298,%r6316;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3520,%r3514,%r3517;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3523,%r1609,%r3520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3526,%r6420,%r3523;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3529,%r6302,%r6318;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3532,%r6299,%r6305;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3535,%r3529,%r3532;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3538,%r1609,%r3535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3541,%r6419,%r3538;
}
	// end inline asm
	selp.b32 	%r845, %r6419, %r3541, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3545,%r6296,%r409,%r1686,%r3481;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3545;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6296;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3552, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r6297,%r3552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3556,%r6274,%r3553;
}
	// end inline asm
	@%p11 bra 	$L__BB0_426;
	bra.uni 	$L__BB0_425;

$L__BB0_426:
	// begin inline asm
	{neg.f16x2 %r6459,%r6418;
}
	// end inline asm
	bra.uni 	$L__BB0_427;

$L__BB0_425:
	// begin inline asm
	{mul.f16x2 %r6459,%r6275,%r3553;
}
	// end inline asm

$L__BB0_427:
	mov.u32 	%r3571, 31;
	mov.u32 	%r3573, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3569,%r6459,%r3571,%r1686,%r3573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3574,%r3556,%r3569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3577,%r1609,%r6301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3580,%r3577,%r3574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3583,%r1609,%r3580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3586,%r6418,%r3583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3589,%r6296,%r6297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3592,%r6278,%r3589;
}
	// end inline asm
	@%p11 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r6460,%r6417;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r6460,%r6279,%r3589;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3605, 31;
	mov.u32 	%r3628, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3603,%r6460,%r3605,%r1686,%r3628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3608,%r3592,%r3603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3611,%r1609,%r6298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3614,%r3611,%r3608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3617,%r1609,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3620,%r6417,%r3617;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3624,%r6294,%r409,%r1686,%r3628;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3624;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6294;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3631, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3632,%r6295,%r3631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3635,%r6274,%r3632;
}
	// end inline asm
	mov.u32 	%r6461, %r6416;
	@%p11 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r6461,%r6275,%r3632;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3646,%r6461,%r3605,%r1686,%r3628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3651,%r3635,%r3646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3654,%r1609,%r6313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3657,%r3651,%r3654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3660,%r1609,%r3657;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6349,%r6416,%r3660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3666,%r1609,%r6315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3669,%r6295,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r3666,%r3669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3675,%r1609,%r3672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3678,%r6415,%r3675;
}
	// end inline asm
	selp.b32 	%r863, %r6415, %r3678, %p11;
	// begin inline asm
	{sub.f16x2 %r3681,%r6294,%r6295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3684,%r6278,%r3681;
}
	// end inline asm
	mov.u32 	%r6462, %r6414;
	@%p11 bra 	$L__BB0_434;

	// begin inline asm
	{mul.f16x2 %r6462,%r6279,%r3681;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3695, 31;
	mov.u32 	%r3733, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3693,%r6462,%r3695,%r1686,%r3733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3698,%r3684,%r3693;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3701,%r1609,%r6310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3704,%r3698,%r3701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3707,%r1609,%r3704;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6348,%r6414,%r3707;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3713,%r1609,%r6314;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3716,%r6294,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3719,%r3713,%r3716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3722,%r1609,%r3719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3725,%r6413,%r3722;
}
	// end inline asm
	selp.b32 	%r869, %r6413, %r3725, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3729,%r6292,%r409,%r1686,%r3733;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3729;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6292;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3736, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3737,%r6293,%r3736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3740,%r6274,%r3737;
}
	// end inline asm
	@%p11 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r6463,%r6412;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r6463,%r6275,%r3737;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3755, 31;
	mov.u32 	%r3778, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3753,%r6463,%r3755,%r1686,%r3778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3758,%r3740,%r3753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3761,%r6291,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3764,%r3761,%r3758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3767,%r1609,%r3764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6347,%r6412,%r3767;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3774,%r6289,%r409,%r1686,%r3778;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3774;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6289;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3781, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3782,%r6290,%r3781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3785,%r6274,%r3782;
}
	// end inline asm
	mov.u32 	%r6464, %r6411;
	@%p11 bra 	$L__BB0_439;

	// begin inline asm
	{mul.f16x2 %r6464,%r6275,%r3782;
}
	// end inline asm

$L__BB0_439:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3796,%r6464,%r3755,%r1686,%r3778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3801,%r3785,%r3796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r6291,%r6307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3807,%r3801,%r3804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3810,%r1609,%r3807;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6345,%r6411,%r3810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3816,%r6293,%r6309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3819,%r6290,%r6295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3822,%r3816,%r3819;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3825,%r1609,%r3822;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3828,%r6410,%r3825;
}
	// end inline asm
	selp.b32 	%r6343, %r6410, %r3828, %p11;
	// begin inline asm
	{sub.f16x2 %r3831,%r6292,%r6293;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3834,%r6278,%r3831;
}
	// end inline asm
	@%p11 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r6465,%r6409;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r6465,%r6279,%r3831;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3847, 31;
	mov.u32 	%r3849, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3845,%r6465,%r3847,%r1686,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3850,%r3834,%r3845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r6288,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3856,%r3853,%r3850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3859,%r1609,%r3856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6346,%r6409,%r3859;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3865,%r6289,%r6290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3868,%r6278,%r3865;
}
	// end inline asm
	mov.u32 	%r6466, %r6408;
	@%p11 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r6466,%r6279,%r3865;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3877,%r6466,%r3847,%r1686,%r3849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3882,%r3868,%r3877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3885,%r6288,%r6304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3888,%r3882,%r3885;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3891,%r1609,%r3888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6344,%r6408,%r3891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3897,%r6292,%r6308;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3900,%r6289,%r6294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3903,%r3897,%r3900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3906,%r1609,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3909,%r6407,%r3906;
}
	// end inline asm
	selp.b32 	%r6342, %r6407, %r3909, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3913,%r6286,%r409,%r1686,%r3849;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3913;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6286;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3920, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r6287,%r3920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r6274,%r3921;
}
	// end inline asm
	@%p11 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r6467,%r6406;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r6467,%r6275,%r3921;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3939, 31;
	mov.u32 	%r3962, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3937,%r6467,%r3939,%r1686,%r3962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3942,%r3924,%r3937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3945,%r1609,%r6291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3948,%r3945,%r3942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3951,%r1609,%r3948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6341,%r6406,%r3951;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3958,%r6284,%r409,%r1686,%r3962;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3958;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6284;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3965, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3966,%r6285,%r3965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3969,%r6274,%r3966;
}
	// end inline asm
	mov.u32 	%r6468, %r6405;
	@%p11 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r6468,%r6275,%r3966;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3980,%r6468,%r3939,%r1686,%r3962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3985,%r3969,%r3980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3988,%r1609,%r6301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3991,%r3985,%r3988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3994,%r1609,%r3991;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6339,%r6405,%r3994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4000,%r6287,%r6303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4003,%r6285,%r6290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4006,%r4000,%r4003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4009,%r1609,%r4006;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4012,%r6404,%r4009;
}
	// end inline asm
	selp.b32 	%r6337, %r6404, %r4012, %p11;
	// begin inline asm
	{sub.f16x2 %r4015,%r6286,%r6287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4018,%r6278,%r4015;
}
	// end inline asm
	@%p11 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r6469,%r6403;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r6469,%r6279,%r4015;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4031, 31;
	mov.u32 	%r4033, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4029,%r6469,%r4031,%r1686,%r4033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4034,%r4018,%r4029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r1609,%r6288;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r4037,%r4034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4043,%r1609,%r4040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6340,%r6403,%r4043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4049,%r6284,%r6285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4052,%r6278,%r4049;
}
	// end inline asm
	mov.u32 	%r6470, %r6402;
	@%p11 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r6470,%r6279,%r4049;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4061,%r6470,%r4031,%r1686,%r4033;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4066,%r4052,%r4061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4069,%r1609,%r6298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4072,%r4066,%r4069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4075,%r1609,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6338,%r6402,%r4075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4081,%r6286,%r6302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4084,%r6284,%r6289;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4087,%r4081,%r4084;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4090,%r1609,%r4087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4093,%r6401,%r4090;
}
	// end inline asm
	selp.b32 	%r6336, %r6401, %r4093, %p11;
	// begin inline asm
	{sub.f16x2 %r4096,%r1609,%r6297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4099,%r1609,%r6285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4102,%r4096,%r4099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4105,%r1609,%r4102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4108,%r6400,%r4105;
}
	// end inline asm
	selp.b32 	%r918, %r6400, %r4108, %p11;
	// begin inline asm
	{sub.f16x2 %r4111,%r1609,%r6296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4114,%r1609,%r6284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r4111,%r4114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4120,%r1609,%r4117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4123,%r6399,%r4120;
}
	// end inline asm
	selp.b32 	%r919, %r6399, %r4123, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r4127,%r6282,%r409,%r1686,%r4033;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4127;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6282;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4134, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4135,%r6283,%r4134;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4138,%r6274,%r4135;
}
	// end inline asm
	mov.u32 	%r6471, %r6398;
	@%p11 bra 	$L__BB0_456;

	// begin inline asm
	{mul.f16x2 %r6471,%r6275,%r4135;
}
	// end inline asm

$L__BB0_456:
	mov.u32 	%r4151, 31;
	mov.u32 	%r4153, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4149,%r6471,%r4151,%r1686,%r4153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4154,%r4138,%r4149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4157,%r1609,%r6291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4160,%r4154,%r4157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4163,%r1609,%r4160;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6335,%r6398,%r4163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r1609,%r6293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4172,%r6283,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4175,%r4169,%r4172;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4178,%r1609,%r4175;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4181,%r6397,%r4178;
}
	// end inline asm
	selp.b32 	%r6333, %r6397, %r4181, %p11;
	// begin inline asm
	{sub.f16x2 %r4184,%r6282,%r6283;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4187,%r6278,%r4184;
}
	// end inline asm
	mov.u32 	%r6472, %r6396;
	@%p11 bra 	$L__BB0_458;

	// begin inline asm
	{mul.f16x2 %r6472,%r6279,%r4184;
}
	// end inline asm

$L__BB0_458:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4196,%r6472,%r4151,%r1686,%r4153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4201,%r4187,%r4196;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4204,%r1609,%r6288;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4207,%r4201,%r4204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4210,%r1609,%r4207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6334,%r6396,%r4210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r1609,%r6292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r6282,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4222,%r4216,%r4219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4225,%r1609,%r4222;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4228,%r6395,%r4225;
}
	// end inline asm
	selp.b32 	%r6332, %r6395, %r4228, %p11;
	// begin inline asm
	{sub.f16x2 %r4231,%r1609,%r6287;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4234,%r1609,%r6283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4237,%r4231,%r4234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4240,%r1609,%r4237;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4243,%r6394,%r4240;
}
	// end inline asm
	selp.b32 	%r6331, %r6394, %r4243, %p11;
	// begin inline asm
	{sub.f16x2 %r4246,%r1609,%r6286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4249,%r1609,%r6282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4252,%r4246,%r4249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4255,%r1609,%r4252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4258,%r6393,%r4255;
}
	// end inline asm
	selp.b32 	%r6330, %r6393, %r4258, %p11;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4263, %r1198, -1;
	setp.ge.s32 	%p229, %r535, %r4263;
	setp.lt.s32 	%p230, %r535, 2;
	or.pred  	%p231, %p230, %p229;
	setp.lt.s32 	%p232, %r536, 2;
	or.pred  	%p233, %p232, %p231;
	add.s32 	%r4264, %r1199, -2;
	setp.ge.s32 	%p234, %r536, %r4264;
	or.pred  	%p235, %p234, %p233;
	setp.lt.s32 	%p236, %r537, %r1204;
	or.pred  	%p237, %p236, %p235;
	mad.lo.s32 	%r4265, %r1206, %r1205, %r1204;
	setp.ge.s32 	%p238, %r537, %r4265;
	or.pred  	%p239, %p237, %p238;
	@%p239 bra 	$L__BB0_508;

	sub.s32 	%r934, %r537, %r1204;
	rem.s32 	%r4266, %r934, %r1205;
	setp.ne.s32 	%p240, %r4266, 0;
	@%p240 bra 	$L__BB0_508;

	div.s32 	%r4267, %r934, %r1205;
	mul.lo.s32 	%r4268, %r4267, %r1198;
	mul.lo.s32 	%r935, %r4268, 3;
	add.s32 	%r936, %r535, -2;
	add.s32 	%r4269, %r935, %r936;
	mul.lo.s32 	%r937, %r4269, %r1199;
	@%p11 bra 	$L__BB0_462;

	add.s32 	%r4274, %r937, %r536;
	mul.lo.s32 	%r4275, %r4274, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2831;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4276, %r376, %r4275;
	mul.wide.s32 	%rd259, %r4276, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2831;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4277, %r377, %r4275;
	mul.wide.s32 	%rd261, %r4277, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2908;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4278, %r390, %r4275;
	mul.wide.s32 	%rd263, %r4278, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2908;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4279, %r391, %r4275;
	mul.wide.s32 	%rd265, %r4279, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_462:
	add.s32 	%r938, %r935, %r1198;
	@%p11 bra 	$L__BB0_464;

	add.s32 	%r4284, %r938, %r936;
	mad.lo.s32 	%r4285, %r4284, %r1199, %r536;
	mul.lo.s32 	%r4286, %r4285, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2874;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4287, %r376, %r4286;
	mul.wide.s32 	%rd267, %r4287, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2874;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4288, %r377, %r4286;
	mul.wide.s32 	%rd269, %r4288, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2940;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4289, %r390, %r4286;
	mul.wide.s32 	%rd271, %r4289, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2940;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4290, %r391, %r4286;
	mul.wide.s32 	%rd273, %r4290, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_464:
	add.s32 	%r939, %r536, 1;
	@%p11 bra 	$L__BB0_466;

	add.s32 	%r4295, %r937, %r939;
	mul.lo.s32 	%r4296, %r4295, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2985;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4297, %r376, %r4296;
	mul.wide.s32 	%rd275, %r4297, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r2985;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4298, %r377, %r4296;
	mul.wide.s32 	%rd277, %r4298, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3019;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4299, %r390, %r4296;
	mul.wide.s32 	%rd279, %r4299, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3019;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4300, %r391, %r4296;
	mul.wide.s32 	%rd281, %r4300, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_466:
	add.s32 	%r940, %r535, -1;
	add.s32 	%r4301, %r935, %r940;
	mul.lo.s32 	%r941, %r4301, %r1199;
	add.s32 	%r942, %r536, -1;
	@%p11 bra 	$L__BB0_468;

	add.s32 	%r4306, %r941, %r942;
	mul.lo.s32 	%r4307, %r4306, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3064;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4308, %r376, %r4307;
	mul.wide.s32 	%rd283, %r4308, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3064;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4309, %r377, %r4307;
	mul.wide.s32 	%rd285, %r4309, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3141;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4310, %r390, %r4307;
	mul.wide.s32 	%rd287, %r4310, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3141;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4311, %r391, %r4307;
	mul.wide.s32 	%rd289, %r4311, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_468:
	add.s32 	%r4312, %r938, %r940;
	mul.lo.s32 	%r943, %r4312, %r1199;
	@%p11 bra 	$L__BB0_470;

	add.s32 	%r4317, %r943, %r942;
	mul.lo.s32 	%r4318, %r4317, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3107;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4319, %r376, %r4318;
	mul.wide.s32 	%rd291, %r4319, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3107;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4320, %r377, %r4318;
	mul.wide.s32 	%rd293, %r4320, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3173;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4321, %r390, %r4318;
	mul.wide.s32 	%rd295, %r4321, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3173;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4322, %r391, %r4318;
	mul.wide.s32 	%rd297, %r4322, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_470:
	@%p11 bra 	$L__BB0_472;

	add.s32 	%r4327, %r941, %r536;
	mul.lo.s32 	%r4328, %r4327, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6355;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4329, %r376, %r4328;
	mul.wide.s32 	%rd299, %r4329, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6355;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4330, %r377, %r4328;
	mul.wide.s32 	%rd301, %r4330, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6354;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4331, %r390, %r4328;
	mul.wide.s32 	%rd303, %r4331, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6354;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4332, %r391, %r4328;
	mul.wide.s32 	%rd305, %r4332, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_472:
	@%p11 bra 	$L__BB0_474;

	add.s32 	%r4337, %r943, %r536;
	mul.lo.s32 	%r4338, %r4337, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6353;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4339, %r376, %r4338;
	mul.wide.s32 	%rd307, %r4339, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6353;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4340, %r377, %r4338;
	mul.wide.s32 	%rd309, %r4340, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6352;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4341, %r390, %r4338;
	mul.wide.s32 	%rd311, %r4341, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6352;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4342, %r391, %r4338;
	mul.wide.s32 	%rd313, %r4342, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_474:
	add.s32 	%r944, %r938, %r1198;
	add.s32 	%r4343, %r944, %r940;
	mul.lo.s32 	%r945, %r4343, %r1199;
	@%p11 bra 	$L__BB0_476;

	add.s32 	%r4348, %r945, %r536;
	mul.lo.s32 	%r4349, %r4348, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r809;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4350, %r376, %r4349;
	mul.wide.s32 	%rd315, %r4350, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r809;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4351, %r377, %r4349;
	mul.wide.s32 	%rd317, %r4351, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r821;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4352, %r390, %r4349;
	mul.wide.s32 	%rd319, %r4352, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r821;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4353, %r391, %r4349;
	mul.wide.s32 	%rd321, %r4353, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_476:
	@%p11 bra 	$L__BB0_478;

	add.s32 	%r4358, %r941, %r939;
	mul.lo.s32 	%r4359, %r4358, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6351;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4360, %r376, %r4359;
	mul.wide.s32 	%rd323, %r4360, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6351;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4361, %r377, %r4359;
	mul.wide.s32 	%rd325, %r4361, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6350;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4362, %r390, %r4359;
	mul.wide.s32 	%rd327, %r4362, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6350;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4363, %r391, %r4359;
	mul.wide.s32 	%rd329, %r4363, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_478:
	@%p11 bra 	$L__BB0_480;

	add.s32 	%r4368, %r943, %r939;
	mul.lo.s32 	%r4369, %r4368, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3445;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4370, %r376, %r4369;
	mul.wide.s32 	%rd331, %r4370, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3445;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4371, %r377, %r4369;
	mul.wide.s32 	%rd333, %r4371, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3526;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4372, %r390, %r4369;
	mul.wide.s32 	%rd335, %r4372, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3526;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4373, %r391, %r4369;
	mul.wide.s32 	%rd337, %r4373, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_480:
	@%p11 bra 	$L__BB0_482;

	add.s32 	%r4378, %r945, %r939;
	mul.lo.s32 	%r4379, %r4378, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r833;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4380, %r376, %r4379;
	mul.wide.s32 	%rd339, %r4380, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r833;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4381, %r377, %r4379;
	mul.wide.s32 	%rd341, %r4381, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r845;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4382, %r390, %r4379;
	mul.wide.s32 	%rd343, %r4382, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r845;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4383, %r391, %r4379;
	mul.wide.s32 	%rd345, %r4383, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_482:
	add.s32 	%r946, %r536, 2;
	@%p11 bra 	$L__BB0_484;

	add.s32 	%r4388, %r941, %r946;
	mul.lo.s32 	%r4389, %r4388, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3586;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4390, %r376, %r4389;
	mul.wide.s32 	%rd347, %r4390, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3586;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4391, %r377, %r4389;
	mul.wide.s32 	%rd349, %r4391, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3620;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4392, %r390, %r4389;
	mul.wide.s32 	%rd351, %r4392, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3620;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4393, %r391, %r4389;
	mul.wide.s32 	%rd353, %r4393, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_484:
	add.s32 	%r4394, %r938, %r535;
	mul.lo.s32 	%r947, %r4394, %r1199;
	@%p11 bra 	$L__BB0_486;

	add.s32 	%r4399, %r947, %r942;
	mul.lo.s32 	%r4400, %r4399, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6349;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4401, %r376, %r4400;
	mul.wide.s32 	%rd355, %r4401, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6349;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4402, %r377, %r4400;
	mul.wide.s32 	%rd357, %r4402, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6348;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4403, %r390, %r4400;
	mul.wide.s32 	%rd359, %r4403, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6348;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4404, %r391, %r4400;
	mul.wide.s32 	%rd361, %r4404, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_486:
	add.s32 	%r4405, %r944, %r535;
	mul.lo.s32 	%r948, %r4405, %r1199;
	@%p11 bra 	$L__BB0_488;

	add.s32 	%r4410, %r948, %r942;
	mul.lo.s32 	%r4411, %r4410, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r863;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4412, %r376, %r4411;
	mul.wide.s32 	%rd363, %r4412, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r863;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4413, %r377, %r4411;
	mul.wide.s32 	%rd365, %r4413, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r869;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4414, %r390, %r4411;
	mul.wide.s32 	%rd367, %r4414, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r869;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4415, %r391, %r4411;
	mul.wide.s32 	%rd369, %r4415, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_488:
	add.s32 	%r4416, %r935, %r535;
	mul.lo.s32 	%r949, %r4416, %r1199;
	@%p11 bra 	$L__BB0_490;

	add.s32 	%r4421, %r949, %r536;
	mul.lo.s32 	%r4422, %r4421, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6347;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4423, %r376, %r4422;
	mul.wide.s32 	%rd371, %r4423, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6347;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4424, %r377, %r4422;
	mul.wide.s32 	%rd373, %r4424, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6346;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4425, %r390, %r4422;
	mul.wide.s32 	%rd375, %r4425, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6346;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4426, %r391, %r4422;
	mul.wide.s32 	%rd377, %r4426, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_490:
	@%p11 bra 	$L__BB0_492;

	add.s32 	%r4431, %r947, %r536;
	mul.lo.s32 	%r4432, %r4431, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6345;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4433, %r376, %r4432;
	mul.wide.s32 	%rd379, %r4433, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6345;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4434, %r377, %r4432;
	mul.wide.s32 	%rd381, %r4434, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6344;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4435, %r390, %r4432;
	mul.wide.s32 	%rd383, %r4435, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6344;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4436, %r391, %r4432;
	mul.wide.s32 	%rd385, %r4436, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_492:
	@%p11 bra 	$L__BB0_494;

	add.s32 	%r4441, %r948, %r536;
	mul.lo.s32 	%r4442, %r4441, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6343;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4443, %r376, %r4442;
	mul.wide.s32 	%rd387, %r4443, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6343;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4444, %r377, %r4442;
	mul.wide.s32 	%rd389, %r4444, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6342;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4445, %r390, %r4442;
	mul.wide.s32 	%rd391, %r4445, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6342;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4446, %r391, %r4442;
	mul.wide.s32 	%rd393, %r4446, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_494:
	@%p11 bra 	$L__BB0_496;

	add.s32 	%r4451, %r949, %r939;
	mul.lo.s32 	%r4452, %r4451, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6341;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4453, %r376, %r4452;
	mul.wide.s32 	%rd395, %r4453, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6341;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4454, %r377, %r4452;
	mul.wide.s32 	%rd397, %r4454, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6340;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4455, %r390, %r4452;
	mul.wide.s32 	%rd399, %r4455, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6340;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4456, %r391, %r4452;
	mul.wide.s32 	%rd401, %r4456, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_496:
	@%p11 bra 	$L__BB0_498;

	add.s32 	%r4461, %r947, %r939;
	mul.lo.s32 	%r4462, %r4461, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6339;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4463, %r376, %r4462;
	mul.wide.s32 	%rd403, %r4463, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6339;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4464, %r377, %r4462;
	mul.wide.s32 	%rd405, %r4464, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6338;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4465, %r390, %r4462;
	mul.wide.s32 	%rd407, %r4465, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6338;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4466, %r391, %r4462;
	mul.wide.s32 	%rd409, %r4466, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_498:
	@%p11 bra 	$L__BB0_500;

	add.s32 	%r4471, %r948, %r939;
	mul.lo.s32 	%r4472, %r4471, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6337;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4473, %r376, %r4472;
	mul.wide.s32 	%rd411, %r4473, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6337;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4474, %r377, %r4472;
	mul.wide.s32 	%rd413, %r4474, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6336;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4475, %r390, %r4472;
	mul.wide.s32 	%rd415, %r4475, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6336;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4476, %r391, %r4472;
	mul.wide.s32 	%rd417, %r4476, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_500:
	add.s32 	%r950, %r948, %r946;
	@%p11 bra 	$L__BB0_502;

	mul.lo.s32 	%r4481, %r950, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r918;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4482, %r376, %r4481;
	mul.wide.s32 	%rd419, %r4482, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r918;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4483, %r377, %r4481;
	mul.wide.s32 	%rd421, %r4483, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r919;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4484, %r390, %r4481;
	mul.wide.s32 	%rd423, %r4484, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r919;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4485, %r391, %r4481;
	mul.wide.s32 	%rd425, %r4485, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_502:
	add.s32 	%r951, %r535, 1;
	@%p11 bra 	$L__BB0_504;

	add.s32 	%r4490, %r938, %r951;
	mad.lo.s32 	%r4491, %r4490, %r1199, %r536;
	mul.lo.s32 	%r4492, %r4491, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6335;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4493, %r376, %r4492;
	mul.wide.s32 	%rd427, %r4493, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6335;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4494, %r377, %r4492;
	mul.wide.s32 	%rd429, %r4494, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6334;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4495, %r390, %r4492;
	mul.wide.s32 	%rd431, %r4495, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6334;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4496, %r391, %r4492;
	mul.wide.s32 	%rd433, %r4496, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_504:
	add.s32 	%r4497, %r944, %r951;
	mul.lo.s32 	%r952, %r4497, %r1199;
	@%p11 bra 	$L__BB0_506;

	add.s32 	%r4502, %r952, %r536;
	mul.lo.s32 	%r4503, %r4502, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6333;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4504, %r376, %r4503;
	mul.wide.s32 	%rd435, %r4504, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6333;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4505, %r377, %r4503;
	mul.wide.s32 	%rd437, %r4505, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6332;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4506, %r390, %r4503;
	mul.wide.s32 	%rd439, %r4506, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6332;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4507, %r391, %r4503;
	mul.wide.s32 	%rd441, %r4507, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_506:
	add.s32 	%r953, %r952, %r939;
	@%p11 bra 	$L__BB0_508;

	mul.lo.s32 	%r4512, %r953, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6331;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4513, %r376, %r4512;
	mul.wide.s32 	%rd443, %r4513, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6331;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4514, %r377, %r4512;
	mul.wide.s32 	%rd445, %r4514, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6330;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4515, %r390, %r4512;
	mul.wide.s32 	%rd447, %r4515, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6330;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4516, %r391, %r4512;
	mul.wide.s32 	%rd449, %r4516, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_508:
	bar.sync 	0;
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4517, {low,high};}

	// end inline asm
	selp.b32 	%r4519, %r6277, %r4517, %p11;
	// begin inline asm
	{mul.f16x2 %r4518,%r4519,%r6327;
}
	// end inline asm
	selp.b32 	%r4522, %r6281, %r4517, %p11;
	// begin inline asm
	{mul.f16x2 %r4521,%r4522,%r6322;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4524, {low,high};}

	// end inline asm
	selp.b32 	%r4526, %r6277, %r4524, %p11;
	// begin inline asm
	{mul.f16x2 %r4525,%r4526,%r6313;
}
	// end inline asm
	selp.b32 	%r4529, %r6281, %r4524, %p11;
	// begin inline asm
	{mul.f16x2 %r4528,%r4529,%r6310;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4531, {low,high};}

	// end inline asm
	selp.b32 	%r4533, %r6277, %r4531, %p11;
	// begin inline asm
	{mul.f16x2 %r4532,%r4533,%r6306;
}
	// end inline asm
	selp.b32 	%r4536, %r6281, %r4531, %p11;
	// begin inline asm
	{mul.f16x2 %r4535,%r4536,%r6305;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4538, {low,high};}

	// end inline asm
	selp.b32 	%r4540, %r6277, %r4538, %p11;
	// begin inline asm
	{mul.f16x2 %r4539,%r4540,%r6309;
}
	// end inline asm
	selp.b32 	%r4543, %r6281, %r4538, %p11;
	// begin inline asm
	{mul.f16x2 %r4542,%r4543,%r6308;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4545, {low,high};}

	// end inline asm
	selp.b32 	%r4547, %r6277, %r4545, %p11;
	// begin inline asm
	{mul.f16x2 %r4546,%r4547,%r6307;
}
	// end inline asm
	selp.b32 	%r4550, %r6281, %r4545, %p11;
	// begin inline asm
	{mul.f16x2 %r4549,%r4550,%r6304;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4552, {low,high};}

	// end inline asm
	selp.b32 	%r4554, %r6277, %r4552, %p11;
	// begin inline asm
	{mul.f16x2 %r4553,%r4554,%r6303;
}
	// end inline asm
	selp.b32 	%r4557, %r6281, %r4552, %p11;
	// begin inline asm
	{mul.f16x2 %r4556,%r4557,%r6302;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4559, {low,high};}

	// end inline asm
	selp.b32 	%r4561, %r6277, %r4559, %p11;
	// begin inline asm
	{mul.f16x2 %r4560,%r4561,%r6301;
}
	// end inline asm
	selp.b32 	%r4564, %r6281, %r4559, %p11;
	// begin inline asm
	{mul.f16x2 %r4563,%r4564,%r6298;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4566, {low,high};}

	// end inline asm
	selp.b32 	%r4568, %r6277, %r4566, %p11;
	// begin inline asm
	{mul.f16x2 %r4567,%r4568,%r6295;
}
	// end inline asm
	selp.b32 	%r4571, %r6281, %r4566, %p11;
	// begin inline asm
	{mul.f16x2 %r4570,%r4571,%r6294;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4573, {low,high};}

	// end inline asm
	selp.b32 	%r4575, %r6277, %r4573, %p11;
	// begin inline asm
	{mul.f16x2 %r4574,%r4575,%r1609;
}
	// end inline asm
	selp.b32 	%r4578, %r6281, %r4573, %p11;
	// begin inline asm
	{mul.f16x2 %r4577,%r4578,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4580, {low,high};}

	// end inline asm
	selp.b32 	%r4582, %r6277, %r4580, %p11;
	// begin inline asm
	{mul.f16x2 %r4581,%r4582,%r1609;
}
	// end inline asm
	selp.b32 	%r4585, %r6281, %r4580, %p11;
	// begin inline asm
	{mul.f16x2 %r4584,%r4585,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4587, {low,high};}

	// end inline asm
	selp.b32 	%r4589, %r6277, %r4587, %p11;
	// begin inline asm
	{mul.f16x2 %r4588,%r4589,%r6290;
}
	// end inline asm
	selp.b32 	%r4592, %r6281, %r4587, %p11;
	// begin inline asm
	{mul.f16x2 %r4591,%r4592,%r6289;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4594, {low,high};}

	// end inline asm
	selp.b32 	%r4596, %r6277, %r4594, %p11;
	// begin inline asm
	{mul.f16x2 %r4595,%r4596,%r6293;
}
	// end inline asm
	selp.b32 	%r4599, %r6281, %r4594, %p11;
	// begin inline asm
	{mul.f16x2 %r4598,%r4599,%r6292;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4601, {low,high};}

	// end inline asm
	selp.b32 	%r4603, %r6277, %r4601, %p11;
	// begin inline asm
	{mul.f16x2 %r4602,%r4603,%r6291;
}
	// end inline asm
	selp.b32 	%r4606, %r6281, %r4601, %p11;
	// begin inline asm
	{mul.f16x2 %r4605,%r4606,%r6288;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4608, {low,high};}

	// end inline asm
	selp.b32 	%r4610, %r6277, %r4608, %p11;
	// begin inline asm
	{mul.f16x2 %r4609,%r4610,%r6285;
}
	// end inline asm
	selp.b32 	%r4613, %r6281, %r4608, %p11;
	// begin inline asm
	{mul.f16x2 %r4612,%r4613,%r6284;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4615, {low,high};}

	// end inline asm
	selp.b32 	%r4617, %r6277, %r4615, %p11;
	// begin inline asm
	{mul.f16x2 %r4616,%r4617,%r6287;
}
	// end inline asm
	selp.b32 	%r4620, %r6281, %r4615, %p11;
	// begin inline asm
	{mul.f16x2 %r4619,%r4620,%r6286;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4622, {low,high};}

	// end inline asm
	selp.b32 	%r4624, %r6277, %r4622, %p11;
	// begin inline asm
	{mul.f16x2 %r4623,%r4624,%r1609;
}
	// end inline asm
	selp.b32 	%r4627, %r6281, %r4622, %p11;
	// begin inline asm
	{mul.f16x2 %r4626,%r4627,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4629, {low,high};}

	// end inline asm
	selp.b32 	%r4631, %r6277, %r4629, %p11;
	// begin inline asm
	{mul.f16x2 %r4630,%r4631,%r1609;
}
	// end inline asm
	selp.b32 	%r4634, %r6281, %r4629, %p11;
	// begin inline asm
	{mul.f16x2 %r4633,%r4634,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4636, {low,high};}

	// end inline asm
	selp.b32 	%r4638, %r6277, %r4636, %p11;
	// begin inline asm
	{mul.f16x2 %r4637,%r4638,%r1609;
}
	// end inline asm
	selp.b32 	%r4641, %r6281, %r4636, %p11;
	// begin inline asm
	{mul.f16x2 %r4640,%r4641,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4643, {low,high};}

	// end inline asm
	selp.b32 	%r4645, %r6277, %r4643, %p11;
	// begin inline asm
	{mul.f16x2 %r4644,%r4645,%r6283;
}
	// end inline asm
	selp.b32 	%r4648, %r6281, %r4643, %p11;
	// begin inline asm
	{mul.f16x2 %r4647,%r4648,%r6282;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4650, {low,high};}

	// end inline asm
	selp.b32 	%r4652, %r6277, %r4650, %p11;
	// begin inline asm
	{mul.f16x2 %r4651,%r4652,%r1609;
}
	// end inline asm
	selp.b32 	%r4655, %r6281, %r4650, %p11;
	// begin inline asm
	{mul.f16x2 %r4654,%r4655,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4657, {low,high};}

	// end inline asm
	selp.b32 	%r4659, %r6277, %r4657, %p11;
	// begin inline asm
	{mul.f16x2 %r4658,%r4659,%r1609;
}
	// end inline asm
	selp.b32 	%r4662, %r6281, %r4657, %p11;
	// begin inline asm
	{mul.f16x2 %r4661,%r4662,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4664, {low,high};}

	// end inline asm
	selp.b32 	%r4666, %r6277, %r4664, %p11;
	// begin inline asm
	{mul.f16x2 %r4665,%r4666,%r1609;
}
	// end inline asm
	selp.b32 	%r4669, %r6281, %r4664, %p11;
	// begin inline asm
	{mul.f16x2 %r4668,%r4669,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4671, {low,high};}

	// end inline asm
	selp.b32 	%r4673, %r6277, %r4671, %p11;
	// begin inline asm
	{mul.f16x2 %r4672,%r4673,%r1609;
}
	// end inline asm
	selp.b32 	%r4676, %r6281, %r4671, %p11;
	// begin inline asm
	{mul.f16x2 %r4675,%r4676,%r1609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r4678, {low,high};}

	// end inline asm
	selp.b32 	%r4680, %r6277, %r4678, %p11;
	// begin inline asm
	{mul.f16x2 %r4679,%r4680,%r1609;
}
	// end inline asm
	selp.b32 	%r4683, %r6281, %r4678, %p11;
	// begin inline asm
	{mul.f16x2 %r4682,%r4683,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4685,%r6353,%r2874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4688,%r2985,%r2831;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4691,%r4685,%r4688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4694,%r6185,%r4691;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4697,%r4518,%r4694;
}
	// end inline asm
	selp.b32 	%r6323, %r4518, %r4697, %p11;
	// begin inline asm
	{sub.f16x2 %r4700,%r6352,%r2940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4703,%r3019,%r2908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4706,%r4700,%r4703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4709,%r6185,%r4706;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4712,%r4521,%r4709;
}
	// end inline asm
	selp.b32 	%r6320, %r4521, %r4712, %p11;
	// begin inline asm
	{sub.f16x2 %r4715,%r6349,%r3107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r6355,%r3064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4721,%r4715,%r4718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4724,%r6185,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4727,%r4525,%r4724;
}
	// end inline asm
	selp.b32 	%r6326, %r4525, %r4727, %p11;
	// begin inline asm
	{sub.f16x2 %r4730,%r6348,%r3173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4733,%r6354,%r3141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4736,%r4730,%r4733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4739,%r6185,%r4736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4742,%r4528,%r4739;
}
	// end inline asm
	selp.b32 	%r6321, %r4528, %r4742, %p11;
	// begin inline asm
	{sub.f16x2 %r4745,%r6352,%r6353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4748,%r6276,%r4745;
}
	// end inline asm
	@%p11 bra 	$L__BB0_510;
	bra.uni 	$L__BB0_509;

$L__BB0_510:
	// begin inline asm
	{neg.f16x2 %r6473,%r4532;
}
	// end inline asm
	bra.uni 	$L__BB0_511;

$L__BB0_509:
	// begin inline asm
	{mul.f16x2 %r6473,%r6277,%r4745;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4759, 31;
	mov.u32 	%r4761, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4757,%r6473,%r4759,%r1686,%r4761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4762,%r4748,%r4757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4765,%r833,%r809;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r4765,%r4762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4771,%r6185,%r4768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6325,%r4532,%r4771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r6354,%r6355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4780,%r6276,%r4777;
}
	// end inline asm
	mov.u32 	%r6474, %r4539;
	@%p11 bra 	$L__BB0_513;

	// begin inline asm
	{mul.f16x2 %r6474,%r6277,%r4777;
}
	// end inline asm

$L__BB0_513:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4789,%r6474,%r4759,%r1686,%r4761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4794,%r4780,%r4789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4797,%r6343,%r809;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4800,%r4794,%r4797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4803,%r6185,%r4800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6329,%r4539,%r4803;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4809,%r6345,%r6353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4812,%r6351,%r6355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4815,%r4809,%r4812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4818,%r6185,%r4815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4821,%r4546,%r4818;
}
	// end inline asm
	selp.b32 	%r6327, %r4546, %r4821, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6353;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4826,%r6353,%r411,%r1686,%r4761;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4826;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4832, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4833,%r4832,%r6352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4836,%r6280,%r4833;
}
	// end inline asm
	@%p11 bra 	$L__BB0_515;
	bra.uni 	$L__BB0_514;

$L__BB0_515:
	// begin inline asm
	{neg.f16x2 %r6475,%r4535;
}
	// end inline asm
	bra.uni 	$L__BB0_516;

$L__BB0_514:
	// begin inline asm
	{mul.f16x2 %r6475,%r6281,%r4833;
}
	// end inline asm

$L__BB0_516:
	mov.u32 	%r4851, 31;
	mov.u32 	%r4875, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4849,%r6475,%r4851,%r1686,%r4875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4854,%r4836,%r4849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r845,%r821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4860,%r4857,%r4854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4863,%r6185,%r4860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6324,%r4535,%r4863;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6355;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4871,%r6355,%r411,%r1686,%r4875;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4871;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4877, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4878,%r4877,%r6354;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4881,%r6280,%r4878;
}
	// end inline asm
	mov.u32 	%r6476, %r4542;
	@%p11 bra 	$L__BB0_518;

	// begin inline asm
	{mul.f16x2 %r6476,%r6281,%r4878;
}
	// end inline asm

$L__BB0_518:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4892,%r6476,%r4851,%r1686,%r4875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4897,%r4881,%r4892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4900,%r6342,%r821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4903,%r4897,%r4900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4906,%r6185,%r4903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6328,%r4542,%r4906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4912,%r6344,%r6352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4915,%r6350,%r6354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4918,%r4912,%r4915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4921,%r6185,%r4918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4924,%r4549,%r4921;
}
	// end inline asm
	selp.b32 	%r6322, %r4549, %r4924, %p11;
	// begin inline asm
	{sub.f16x2 %r4927,%r6350,%r6351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4930,%r6276,%r4927;
}
	// end inline asm
	mov.u32 	%r6477, %r4553;
	@%p11 bra 	$L__BB0_520;

	// begin inline asm
	{mul.f16x2 %r6477,%r6277,%r4927;
}
	// end inline asm

$L__BB0_520:
	mov.u32 	%r4941, 31;
	mov.u32 	%r4980, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4939,%r6477,%r4941,%r1686,%r4980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4944,%r4930,%r4939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4947,%r6337,%r833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4950,%r4944,%r4947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4953,%r6185,%r4950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6319,%r4553,%r4953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4959,%r6339,%r3445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4962,%r3586,%r6351;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4965,%r4959,%r4962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4968,%r6185,%r4965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4971,%r4560,%r4968;
}
	// end inline asm
	selp.b32 	%r6317, %r4560, %r4971, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6351;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4976,%r6351,%r411,%r1686,%r4980;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4976;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4982, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4983,%r4982,%r6350;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4986,%r6280,%r4983;
}
	// end inline asm
	mov.u32 	%r6478, %r4556;
	@%p11 bra 	$L__BB0_522;

	// begin inline asm
	{mul.f16x2 %r6478,%r6281,%r4983;
}
	// end inline asm

$L__BB0_522:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4997,%r6478,%r4941,%r1686,%r4980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5002,%r4986,%r4997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5005,%r6336,%r845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5008,%r5002,%r5005;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5011,%r6185,%r5008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6318,%r4556,%r5011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5017,%r6338,%r3526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r3620,%r6350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5023,%r5017,%r5020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5026,%r6185,%r5023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5029,%r4563,%r5026;
}
	// end inline asm
	selp.b32 	%r6316, %r4563, %r5029, %p11;
	// begin inline asm
	{sub.f16x2 %r5032,%r6348,%r6349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5035,%r6276,%r5032;
}
	// end inline asm
	@%p11 bra 	$L__BB0_524;
	bra.uni 	$L__BB0_523;

$L__BB0_524:
	// begin inline asm
	{neg.f16x2 %r6479,%r4567;
}
	// end inline asm
	bra.uni 	$L__BB0_525;

$L__BB0_523:
	// begin inline asm
	{mul.f16x2 %r6479,%r6277,%r5032;
}
	// end inline asm

$L__BB0_525:
	mov.u32 	%r5048, 31;
	mov.u32 	%r5050, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5046,%r6479,%r5048,%r1686,%r5050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5051,%r5035,%r5046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5054,%r6343,%r863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5057,%r5054,%r5051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5060,%r6185,%r5057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6312,%r4567,%r5060;
}
	// end inline asm
	mov.u32 	%r6480, %r4574;
	@%p11 bra 	$L__BB0_527;

	mov.u32 	%r6480, %r6084;

$L__BB0_527:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5078,%r6480,%r5048,%r1686,%r5050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5083,%r5069,%r5078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5086,%r1609,%r863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5089,%r5083,%r5086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5092,%r6185,%r5089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6315,%r4574,%r5092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5098,%r1609,%r6349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5101,%r6347,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5104,%r5098,%r5101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5107,%r6185,%r5104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5110,%r4581,%r5107;
}
	// end inline asm
	selp.b32 	%r6313, %r4581, %r5110, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6349;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5115,%r6349,%r411,%r1686,%r5050;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5115;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5121, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5122,%r5121,%r6348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5125,%r6280,%r5122;
}
	// end inline asm
	@%p11 bra 	$L__BB0_529;
	bra.uni 	$L__BB0_528;

$L__BB0_529:
	// begin inline asm
	{neg.f16x2 %r6481,%r4570;
}
	// end inline asm
	bra.uni 	$L__BB0_530;

$L__BB0_528:
	// begin inline asm
	{mul.f16x2 %r6481,%r6281,%r5122;
}
	// end inline asm

$L__BB0_530:
	mov.u32 	%r5140, 31;
	mov.u32 	%r5164, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5138,%r6481,%r5140,%r1686,%r5164;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5143,%r5125,%r5138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5146,%r6342,%r869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5149,%r5146,%r5143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5152,%r6185,%r5149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6311,%r4570,%r5152;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5160,%r1609,%r411,%r1686,%r5164;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5160;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5166, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5167,%r5166,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5170,%r6280,%r5167;
}
	// end inline asm
	mov.u32 	%r6482, %r4577;
	@%p11 bra 	$L__BB0_532;

	// begin inline asm
	{mul.f16x2 %r6482,%r6281,%r5167;
}
	// end inline asm

$L__BB0_532:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5181,%r6482,%r5140,%r1686,%r5164;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5186,%r5170,%r5181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5189,%r1609,%r869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5192,%r5186,%r5189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5195,%r6185,%r5192;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6314,%r4577,%r5195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5201,%r1609,%r6348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5204,%r6346,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5207,%r5201,%r5204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5210,%r6185,%r5207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5213,%r4584,%r5210;
}
	// end inline asm
	selp.b32 	%r6310, %r4584, %r5213, %p11;
	// begin inline asm
	{sub.f16x2 %r5216,%r6344,%r6345;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5219,%r6276,%r5216;
}
	// end inline asm
	@%p11 bra 	$L__BB0_534;
	bra.uni 	$L__BB0_533;

$L__BB0_534:
	// begin inline asm
	{neg.f16x2 %r6483,%r4588;
}
	// end inline asm
	bra.uni 	$L__BB0_535;

$L__BB0_533:
	// begin inline asm
	{mul.f16x2 %r6483,%r6277,%r5216;
}
	// end inline asm

$L__BB0_535:
	mov.u32 	%r5232, 31;
	mov.u32 	%r5234, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5230,%r6483,%r5232,%r1686,%r5234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5235,%r5219,%r5230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5238,%r6337,%r6343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5241,%r5238,%r5235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5244,%r6185,%r5241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6306,%r4588,%r5244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5250,%r6346,%r6347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5253,%r6276,%r5250;
}
	// end inline asm
	mov.u32 	%r6484, %r4595;
	@%p11 bra 	$L__BB0_537;

	// begin inline asm
	{mul.f16x2 %r6484,%r6277,%r5250;
}
	// end inline asm

$L__BB0_537:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5262,%r6484,%r5232,%r1686,%r5234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5267,%r5253,%r5262;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5270,%r6333,%r6343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5273,%r5267,%r5270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5276,%r6185,%r5273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6309,%r4595,%r5276;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5282,%r6335,%r6345;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5285,%r6341,%r6347;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5288,%r5282,%r5285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5291,%r6185,%r5288;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5294,%r4602,%r5291;
}
	// end inline asm
	selp.b32 	%r6307, %r4602, %r5294, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6345;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5299,%r6345,%r411,%r1686,%r5234;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5299;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5305, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5306,%r5305,%r6344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5309,%r6280,%r5306;
}
	// end inline asm
	@%p11 bra 	$L__BB0_539;
	bra.uni 	$L__BB0_538;

$L__BB0_539:
	// begin inline asm
	{neg.f16x2 %r6485,%r4591;
}
	// end inline asm
	bra.uni 	$L__BB0_540;

$L__BB0_538:
	// begin inline asm
	{mul.f16x2 %r6485,%r6281,%r5306;
}
	// end inline asm

$L__BB0_540:
	mov.u32 	%r5324, 31;
	mov.u32 	%r5348, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5322,%r6485,%r5324,%r1686,%r5348;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5327,%r5309,%r5322;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5330,%r6336,%r6342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5333,%r5330,%r5327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5336,%r6185,%r5333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6305,%r4591,%r5336;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6347;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5344,%r6347,%r411,%r1686,%r5348;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5344;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5350, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5351,%r5350,%r6346;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5354,%r6280,%r5351;
}
	// end inline asm
	mov.u32 	%r6486, %r4598;
	@%p11 bra 	$L__BB0_542;

	// begin inline asm
	{mul.f16x2 %r6486,%r6281,%r5351;
}
	// end inline asm

$L__BB0_542:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5365,%r6486,%r5324,%r1686,%r5348;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5370,%r5354,%r5365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5373,%r6332,%r6342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5376,%r5370,%r5373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5379,%r6185,%r5376;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6308,%r4598,%r5379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5385,%r6334,%r6344;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5388,%r6340,%r6346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5391,%r5385,%r5388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5394,%r6185,%r5391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5397,%r4605,%r5394;
}
	// end inline asm
	selp.b32 	%r6304, %r4605, %r5397, %p11;
	// begin inline asm
	{sub.f16x2 %r5400,%r6338,%r6339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5403,%r6276,%r5400;
}
	// end inline asm
	@%p11 bra 	$L__BB0_544;
	bra.uni 	$L__BB0_543;

$L__BB0_544:
	// begin inline asm
	{neg.f16x2 %r6487,%r4609;
}
	// end inline asm
	bra.uni 	$L__BB0_545;

$L__BB0_543:
	// begin inline asm
	{mul.f16x2 %r6487,%r6277,%r5400;
}
	// end inline asm

$L__BB0_545:
	mov.u32 	%r5416, 31;
	mov.u32 	%r5418, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5414,%r6487,%r5416,%r1686,%r5418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5419,%r5403,%r5414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5422,%r918,%r6337;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5425,%r5422,%r5419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5428,%r6185,%r5425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6300,%r4609,%r5428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5434,%r6340,%r6341;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5437,%r6276,%r5434;
}
	// end inline asm
	mov.u32 	%r6488, %r4616;
	@%p11 bra 	$L__BB0_547;

	// begin inline asm
	{mul.f16x2 %r6488,%r6277,%r5434;
}
	// end inline asm

$L__BB0_547:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5446,%r6488,%r5416,%r1686,%r5418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5451,%r5437,%r5446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5454,%r6331,%r6337;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5457,%r5451,%r5454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5460,%r6185,%r5457;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6303,%r4616,%r5460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5466,%r1609,%r6339;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5469,%r1609,%r6341;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5472,%r5466,%r5469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5475,%r6185,%r5472;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5478,%r4623,%r5475;
}
	// end inline asm
	selp.b32 	%r6301, %r4623, %r5478, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6339;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5483,%r6339,%r411,%r1686,%r5418;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5483;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5489, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5490,%r5489,%r6338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5493,%r6280,%r5490;
}
	// end inline asm
	@%p11 bra 	$L__BB0_549;
	bra.uni 	$L__BB0_548;

$L__BB0_549:
	// begin inline asm
	{neg.f16x2 %r6489,%r4612;
}
	// end inline asm
	bra.uni 	$L__BB0_550;

$L__BB0_548:
	// begin inline asm
	{mul.f16x2 %r6489,%r6281,%r5490;
}
	// end inline asm

$L__BB0_550:
	mov.u32 	%r5508, 31;
	mov.u32 	%r5532, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5506,%r6489,%r5508,%r1686,%r5532;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5511,%r5493,%r5506;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5514,%r919,%r6336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5517,%r5514,%r5511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5520,%r6185,%r5517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6299,%r4612,%r5520;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6341;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5528,%r6341,%r411,%r1686,%r5532;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5528;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5534, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5535,%r5534,%r6340;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5538,%r6280,%r5535;
}
	// end inline asm
	mov.u32 	%r6490, %r4619;
	@%p11 bra 	$L__BB0_552;

	// begin inline asm
	{mul.f16x2 %r6490,%r6281,%r5535;
}
	// end inline asm

$L__BB0_552:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5549,%r6490,%r5508,%r1686,%r5532;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5554,%r5538,%r5549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5557,%r6330,%r6336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r5554,%r5557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5563,%r6185,%r5560;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6302,%r4619,%r5563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5569,%r1609,%r6338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5572,%r1609,%r6340;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5575,%r5569,%r5572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5578,%r6185,%r5575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5581,%r4626,%r5578;
}
	// end inline asm
	selp.b32 	%r6298, %r4626, %r5581, %p11;
	mov.u32 	%r6491, %r4630;
	@%p11 bra 	$L__BB0_554;

	mov.u32 	%r6491, %r6084;

$L__BB0_554:
	mov.u32 	%r5598, 31;
	mov.u32 	%r5622, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5596,%r6491,%r5598,%r1686,%r5622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5601,%r5069,%r5596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5604,%r1609,%r918;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5607,%r5601,%r5604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5610,%r6185,%r5607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6297,%r4630,%r5610;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5618,%r1609,%r411,%r1686,%r5622;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5618;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5624, {%rs81,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5625,%r5624,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5628,%r6280,%r5625;
}
	// end inline asm
	mov.u32 	%r6492, %r4633;
	@%p11 bra 	$L__BB0_556;

	// begin inline asm
	{mul.f16x2 %r6492,%r6281,%r5625;
}
	// end inline asm

$L__BB0_556:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5639,%r6492,%r5598,%r1686,%r5622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5644,%r5628,%r5639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5647,%r1609,%r919;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5650,%r5644,%r5647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5653,%r6185,%r5650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6296,%r4633,%r5653;
}
	// end inline asm
	@%p11 bra 	$L__BB0_558;
	bra.uni 	$L__BB0_557;

$L__BB0_558:
	// begin inline asm
	{neg.f16x2 %r6493,%r4637;
}
	// end inline asm
	bra.uni 	$L__BB0_559;

$L__BB0_557:
	mov.u32 	%r6493, %r6084;

$L__BB0_559:
	mov.u32 	%r5675, 31;
	mov.u32 	%r5699, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5673,%r6493,%r5675,%r1686,%r5699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5678,%r5069,%r5673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5681,%r6333,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5684,%r5681,%r5678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5687,%r6185,%r5684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6295,%r4637,%r5687;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5695,%r1609,%r411,%r1686,%r5699;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5695;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5701, {%rs81,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5702,%r5701,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5705,%r6280,%r5702;
}
	// end inline asm
	@%p11 bra 	$L__BB0_561;
	bra.uni 	$L__BB0_560;

$L__BB0_561:
	// begin inline asm
	{neg.f16x2 %r6494,%r4640;
}
	// end inline asm
	bra.uni 	$L__BB0_562;

$L__BB0_560:
	// begin inline asm
	{mul.f16x2 %r6494,%r6281,%r5702;
}
	// end inline asm

$L__BB0_562:
	mov.u32 	%r5720, 31;
	mov.u32 	%r5722, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5718,%r6494,%r5720,%r1686,%r5722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5723,%r5705,%r5718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5726,%r6332,%r1609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5729,%r5726,%r5723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5732,%r6185,%r5729;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6294,%r4640,%r5732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5738,%r6334,%r6335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5741,%r6276,%r5738;
}
	// end inline asm
	@%p11 bra 	$L__BB0_564;
	bra.uni 	$L__BB0_563;

$L__BB0_564:
	// begin inline asm
	{neg.f16x2 %r6495,%r4644;
}
	// end inline asm
	bra.uni 	$L__BB0_565;

$L__BB0_563:
	// begin inline asm
	{mul.f16x2 %r6495,%r6277,%r5738;
}
	// end inline asm

$L__BB0_565:
	mov.u32 	%r5754, 31;
	mov.u32 	%r5756, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5752,%r6495,%r5754,%r1686,%r5756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5757,%r5741,%r5752;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5760,%r6331,%r6333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5763,%r5760,%r5757;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5766,%r6185,%r5763;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6290,%r4644,%r5766;
}
	// end inline asm
	mov.u32 	%r6496, %r4651;
	@%p11 bra 	$L__BB0_567;

	mov.u32 	%r6496, %r6084;

$L__BB0_567:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5784,%r6496,%r5754,%r1686,%r5756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5789,%r5069,%r5784;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5792,%r1609,%r6333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5795,%r5789,%r5792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5798,%r6185,%r5795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6293,%r4651,%r5798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5804,%r1609,%r6335;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5810,%r5804,%r5066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5813,%r6185,%r5810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5816,%r4658,%r5813;
}
	// end inline asm
	selp.b32 	%r6291, %r4658, %r5816, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6335;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5821,%r6335,%r411,%r1686,%r5756;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5821;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5827, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5828,%r5827,%r6334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5831,%r6280,%r5828;
}
	// end inline asm
	@%p11 bra 	$L__BB0_569;
	bra.uni 	$L__BB0_568;

$L__BB0_569:
	// begin inline asm
	{neg.f16x2 %r6497,%r4647;
}
	// end inline asm
	bra.uni 	$L__BB0_570;

$L__BB0_568:
	// begin inline asm
	{mul.f16x2 %r6497,%r6281,%r5828;
}
	// end inline asm

$L__BB0_570:
	mov.u32 	%r5846, 31;
	mov.u32 	%r5870, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5844,%r6497,%r5846,%r1686,%r5870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5849,%r5831,%r5844;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5852,%r6330,%r6332;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5855,%r5852,%r5849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5858,%r6185,%r5855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6289,%r4647,%r5858;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5866,%r1609,%r411,%r1686,%r5870;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5866;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5872, {%rs81,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5873,%r5872,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5876,%r6280,%r5873;
}
	// end inline asm
	mov.u32 	%r6498, %r4654;
	@%p11 bra 	$L__BB0_572;

	// begin inline asm
	{mul.f16x2 %r6498,%r6281,%r5873;
}
	// end inline asm

$L__BB0_572:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5887,%r6498,%r5846,%r1686,%r5870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5892,%r5876,%r5887;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5895,%r1609,%r6332;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5898,%r5892,%r5895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5901,%r6185,%r5898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6292,%r4654,%r5901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r1609,%r6334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5913,%r5907,%r5066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5916,%r6185,%r5913;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5919,%r4661,%r5916;
}
	// end inline asm
	selp.b32 	%r6288, %r4661, %r5919, %p11;
	@%p11 bra 	$L__BB0_574;
	bra.uni 	$L__BB0_573;

$L__BB0_574:
	// begin inline asm
	{neg.f16x2 %r6499,%r4665;
}
	// end inline asm
	bra.uni 	$L__BB0_575;

$L__BB0_573:
	mov.u32 	%r6499, %r6084;

$L__BB0_575:
	mov.u32 	%r5938, 31;
	mov.u32 	%r5940, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5936,%r6499,%r5938,%r1686,%r5940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5941,%r5069,%r5936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5944,%r1609,%r6331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r5944,%r5941;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5950,%r6185,%r5947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6285,%r4665,%r5950;
}
	// end inline asm
	mov.u32 	%r6500, %r4672;
	@%p11 bra 	$L__BB0_577;

	mov.u32 	%r6500, %r6084;

$L__BB0_577:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5968,%r6500,%r5938,%r1686,%r5940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5973,%r5069,%r5968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5976,%r1609,%r6331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5979,%r5973,%r5976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5982,%r6185,%r5979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6287,%r4672,%r5982;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5990,%r1609,%r411,%r1686,%r5940;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5990;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5996, {%rs81,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5997,%r5996,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6000,%r6280,%r5997;
}
	// end inline asm
	@%p11 bra 	$L__BB0_579;
	bra.uni 	$L__BB0_578;

$L__BB0_579:
	// begin inline asm
	{neg.f16x2 %r6501,%r4668;
}
	// end inline asm
	bra.uni 	$L__BB0_580;

$L__BB0_578:
	// begin inline asm
	{mul.f16x2 %r6501,%r6281,%r5997;
}
	// end inline asm

$L__BB0_580:
	mov.u32 	%r6015, 31;
	mov.u32 	%r6039, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6013,%r6501,%r6015,%r1686,%r6039;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6018,%r6000,%r6013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r1609,%r6330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6024,%r6021,%r6018;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6027,%r6185,%r6024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6284,%r4668,%r6027;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6035,%r1609,%r411,%r1686,%r6039;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6035;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6041, {%rs81,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6042,%r6041,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6045,%r6280,%r6042;
}
	// end inline asm
	mov.u32 	%r6502, %r4675;
	@%p11 bra 	$L__BB0_582;

	// begin inline asm
	{mul.f16x2 %r6502,%r6281,%r6042;
}
	// end inline asm

$L__BB0_582:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6056,%r6502,%r6015,%r1686,%r6039;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6061,%r6045,%r6056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6064,%r1609,%r6330;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r6061,%r6064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6070,%r6185,%r6067;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6286,%r4675,%r6070;
}
	// end inline asm
	@%p11 bra 	$L__BB0_584;
	bra.uni 	$L__BB0_583;

$L__BB0_584:
	// begin inline asm
	{neg.f16x2 %r6503,%r4679;
}
	// end inline asm
	bra.uni 	$L__BB0_585;

$L__BB0_583:
	mov.u32 	%r6503, %r6084;

$L__BB0_585:
	mov.u32 	%r6092, 31;
	mov.u32 	%r6116, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6090,%r6503,%r6092,%r1686,%r6116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6095,%r5069,%r6090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6101,%r5066,%r6095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6104,%r6185,%r6101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6283,%r4679,%r6104;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6112,%r1609,%r411,%r1686,%r6116;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6112;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6118, {%rs81,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6119,%r6118,%r1609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6122,%r6280,%r6119;
}
	// end inline asm
	@%p11 bra 	$L__BB0_587;
	bra.uni 	$L__BB0_586;

$L__BB0_587:
	// begin inline asm
	{neg.f16x2 %r6504,%r4682;
}
	// end inline asm
	bra.uni 	$L__BB0_588;

$L__BB0_586:
	// begin inline asm
	{mul.f16x2 %r6504,%r6281,%r6119;
}
	// end inline asm

$L__BB0_588:
	mov.u32 	%r6137, 31;
	mov.u32 	%r6139, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6135,%r6504,%r6137,%r1686,%r6139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6140,%r6122,%r6135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6146,%r5066,%r6140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6149,%r6185,%r6146;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6282,%r4682,%r6149;
}
	// end inline asm
	bar.sync 	0;
	rem.s32 	%r6157, %r6356, %r1197;
	setp.eq.s32 	%p297, %r6157, 0;
	@%p297 bra 	$L__BB0_590;

	bar.sync 	0;
	bra.uni 	$L__BB0_597;

$L__BB0_590:
	@%p146 bra 	$L__BB0_592;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_592:
	bar.sync 	0;
	@%p147 bra 	$L__BB0_596;

	membar.gl;
	setp.eq.s32 	%p300, %r405, %r406;
	mov.u32 	%r6174, -2147483647;
	sub.s32 	%r6175, %r6174, %r404;
	selp.b32 	%r6163, %r6175, 1, %p300;
	// begin inline asm
	atom.add.release.gpu.u32 %r6162,[%rd25],%r6163;
	// end inline asm

$L__BB0_594:
	ld.volatile.u32 	%r6176, [%rd25];
	xor.b32  	%r6177, %r6176, %r6162;
	setp.gt.s32 	%p301, %r6177, -1;
	@%p301 bra 	$L__BB0_594;

	// begin inline asm
	ld.acquire.gpu.u32 %r6178,[%rd25];
	// end inline asm

$L__BB0_596:
	bar.sync 	0;

$L__BB0_597:
	add.s32 	%r6356, %r6356, 1;
	setp.lt.s32 	%p302, %r6356, %r31;
	@%p302 bra 	$L__BB0_302;

$L__BB0_598:
	ret;

}

