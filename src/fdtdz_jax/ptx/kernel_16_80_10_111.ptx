//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_80
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<556>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<8006>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<596>;


	mov.b64 	%rd47, _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd47;
	ld.param.v2.u32 	{%r1731, %r1732}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1733, %r1734}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1735, %r1736}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1737, %r1738}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1739, %r1740}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1741, %r1742}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1743, %r1744}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1745, %r1746}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1747, %r1748}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1749, %r1750}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1751, %r1752}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1753, %r1754}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1755, %r1756}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1757, 32;
	sub.s32 	%r45, %r1757, %r1738;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1758, %r1744, -1;
	mad.lo.s32 	%r1759, %r1758, %r1743, %r1742;
	add.s32 	%r1760, %r1737, %r1736;
	add.s32 	%r1761, %r1760, %r1759;
	add.s32 	%r1762, %r1761, 1;
	mul.lo.s32 	%r1763, %r1731, %r1733;
	shl.b32 	%r47, %r1763, 1;
	shl.b32 	%r1764, %r1763, 2;
	div.s32 	%r1765, %r1762, %r1764;
	add.s32 	%r1766, %r1765, 1;
	mul.lo.s32 	%r1767, %r1766, %r1737;
	mul.lo.s32 	%r1768, %r1732, %r1734;
	shl.b32 	%r48, %r1768, 1;
	div.s32 	%r1769, %r1767, %r48;
	add.s32 	%r1770, %r1769, 1;
	mul.lo.s32 	%r49, %r1770, %r1736;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7391, %f83, %f83; }

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7391, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd48, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd48;
	mad.lo.s32 	%r1773, %r1733, %r44, %r43;
	mad.lo.s32 	%r1774, %r1773, %r1732, %r42;
	mul.lo.s32 	%r53, %r1774, %r1731;
	add.s32 	%r1775, %r53, %r41;
	shl.b32 	%r54, %r1775, 5;
	add.s32 	%r7396, %r54, %r46;
	mul.lo.s32 	%r1776, %r1768, %r1763;
	shl.b32 	%r58, %r1776, 5;
	mov.u32 	%r1777, 8;
	sub.s32 	%r1778, %r1777, %r1745;
	add.s32 	%r1779, %r1778, %r1746;
	sub.s32 	%r1780, %r1777, %r1747;
	add.s32 	%r1781, %r1780, %r1748;
	sub.s32 	%r59, %r1750, %r1749;
	mul.lo.s32 	%r1782, %r1744, %r59;
	mul.lo.s32 	%r1783, %r1782, %r1781;
	mul.lo.s32 	%r1784, %r1783, %r1779;
	mul.lo.s32 	%r60, %r1784, 3;
	setp.ge.s32 	%p29, %r7396, %r60;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1785, %r1748, 8;
	sub.s32 	%r1786, %r1785, %r1747;
	mul.lo.s32 	%r1787, %r1744, %r1786;
	add.s32 	%r1788, %r1746, 8;
	sub.s32 	%r1789, %r1788, %r1745;
	mul.lo.s32 	%r1790, %r1787, %r1789;
	mul.lo.s32 	%r1791, %r1790, %r59;
	not.b32 	%r1792, %r46;
	mad.lo.s32 	%r1793, %r1791, 3, %r1792;
	sub.s32 	%r1794, %r1793, %r54;
	mul.lo.s32 	%r1795, %r1768, %r1731;
	mul.lo.s32 	%r1796, %r1795, %r1733;
	shl.b32 	%r61, %r1796, 5;
	div.u32 	%r62, %r1794, %r61;
	add.s32 	%r1797, %r62, 1;
	and.b32  	%r7393, %r1797, 3;
	setp.eq.s32 	%p30, %r7393, 0;
	mov.u32 	%r7394, %r7396;
	@%p30 bra 	$L__BB0_7;

	shl.b32 	%r1798, %r53, 5;
	add.s32 	%r1799, %r46, %r1798;
	shl.b32 	%r1800, %r41, 5;
	add.s32 	%r7394, %r1799, %r1800;
	mul.wide.s32 	%rd49, %r7396, 4;
	add.s64 	%rd593, %rd2, %rd49;
	mul.wide.s32 	%rd4, %r61, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1801, 0;
	st.global.u32 	[%rd593], %r1801;
	add.s32 	%r7394, %r7394, %r61;
	add.s64 	%rd593, %rd593, %rd4;
	add.s32 	%r7393, %r7393, -1;
	setp.ne.s32 	%p31, %r7393, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r62, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd52, %r58, 4;

$L__BB0_9:
	mul.wide.s32 	%rd50, %r7394, 4;
	add.s64 	%rd51, %rd2, %rd50;
	mov.u32 	%r1802, 0;
	st.global.u32 	[%rd51], %r1802;
	add.s64 	%rd53, %rd51, %rd52;
	st.global.u32 	[%rd53], %r1802;
	add.s32 	%r1803, %r7394, %r58;
	add.s32 	%r1804, %r1803, %r58;
	add.s64 	%rd54, %rd53, %rd52;
	st.global.u32 	[%rd54], %r1802;
	add.s32 	%r1805, %r1804, %r58;
	add.s64 	%rd55, %rd54, %rd52;
	st.global.u32 	[%rd55], %r1802;
	add.s32 	%r7394, %r1805, %r58;
	setp.lt.s32 	%p33, %r7394, %r60;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd56, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd56;
	sub.s32 	%r1806, %r1737, %r47;
	div.s32 	%r1807, %r1806, %r48;
	mul.lo.s32 	%r1808, %r1807, %r1736;
	sub.s32 	%r72, %r1808, %r47;
	sub.s32 	%r1809, %r1736, %r48;
	mul.lo.s32 	%r1810, %r1809, %r1733;
	mul.lo.s32 	%r73, %r1731, 384;
	add.s32 	%r1811, %r73, %r73;
	add.s32 	%r1812, %r1811, 128;
	mul.lo.s32 	%r1814, %r1768, 768;
	mul.lo.s32 	%r1815, %r1810, %r1812;
	mad.lo.s32 	%r74, %r1814, %r72, %r1815;
	bra.uni 	$L__BB0_11;

$L__BB0_895:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7361, %f641, %f641; }

	// end inline asm
	mul.wide.s32 	%rd581, %r7396, 4;
	add.s64 	%rd582, %rd7, %rd581;
	st.global.u32 	[%rd582], %r7361;
	add.s32 	%r7396, %r7396, %r58;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7396, %r74;
	@%p34 bra 	$L__BB0_895;

	ld.param.u64 	%rd57, [%rd1+144];
	cvta.to.global.u64 	%rd9, %rd57;
	ld.param.u64 	%rd58, [%rd1+112];
	cvta.to.global.u64 	%rd10, %rd58;
	ld.param.u64 	%rd59, [%rd1+152];
	cvta.to.global.u64 	%rd11, %rd59;
	mad.lo.s32 	%r7432, %r1731, %r43, %r41;
	mul.lo.s32 	%r82, %r1732, %r44;
	add.s32 	%r83, %r82, %r42;
	setp.ge.s32 	%p35, %r7432, %r1736;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1816, 31;
	sub.s32 	%r1817, %r1816, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1818, %r46, %r1817, %p36;
	shl.b32 	%r1819, %r1818, 2;
	mov.u32 	%r1820, 2;
	sub.s32 	%r84, %r1819, %r1739;
	shl.b32 	%r1821, %r1738, 2;
	mov.u32 	%r1822, 128;
	sub.s32 	%r85, %r1822, %r1821;
	sub.s32 	%r1823, %r1820, %r1739;
	add.s32 	%r86, %r1823, %r1819;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r87, %r1746, %r1745;
	sub.s32 	%r88, %r1748, %r1747;
	add.s32 	%r89, %r1746, -1;
	add.s32 	%r90, %r1748, -1;
	add.s32 	%r91, %r1750, -1;
	mul.lo.s32 	%r1824, %r1737, %r1736;
	shl.b32 	%r92, %r1824, 6;
	add.s32 	%r93, %r1736, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r94, %r84, 1;
	add.s32 	%r95, %r86, 1;
	shl.b32 	%r96, %r46, 1;
	or.b32  	%r97, %r96, 1;
	shr.u32 	%r1825, %r97, 31;
	add.s32 	%r1826, %r97, %r1825;
	shr.s32 	%r99, %r1826, 1;
	and.b32  	%r1827, %r1826, -2;
	sub.s32 	%r1828, %r97, %r1827;
	add.s32 	%r98, %r1828, %r92;
	rem.s32 	%r1887, %r94, %r85;
	add.s32 	%r1888, %r1887, %r85;
	rem.s32 	%r1889, %r1888, %r85;
	rem.s32 	%r1890, %r95, %r85;
	add.s32 	%r1891, %r1890, %r85;
	rem.s32 	%r1892, %r1891, %r85;
	mov.u32 	%r7397, %r7432;

$L__BB0_14:
	setp.ge.s32 	%p37, %r83, %r1737;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7397, %r1751;
	setp.lt.s32 	%p39, %r7397, %r1752;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7397, %r1746;
	setp.ge.s32 	%p41, %r7397, %r1745;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1829, %r7397, %r89, %p40;
	setp.lt.s32 	%p42, %r7397, %r1745;
	selp.b32 	%r1830, %r1745, %r1829, %p42;
	sub.s32 	%r1831, %r1830, %r1745;
	add.s32 	%r101, %r93, %r7397;
	rem.s32 	%r1832, %r84, %r85;
	add.s32 	%r1833, %r1832, %r85;
	rem.s32 	%r102, %r1833, %r85;
	rem.s32 	%r1834, %r86, %r85;
	add.s32 	%r1835, %r1834, %r85;
	rem.s32 	%r103, %r1835, %r85;
	setp.lt.s32 	%p43, %r102, %r1750;
	sub.s32 	%r104, %r102, %r1749;
	setp.lt.s32 	%p44, %r102, %r1749;
	selp.b32 	%r1836, %r102, %r91, %p43;
	selp.b32 	%r1837, %r1749, %r1836, %p44;
	sub.s32 	%r105, %r1837, %r1749;
	setp.lt.s32 	%p45, %r103, %r1750;
	sub.s32 	%r106, %r103, %r1749;
	setp.lt.s32 	%p46, %r103, %r1749;
	selp.b32 	%r1838, %r103, %r91, %p45;
	selp.b32 	%r1839, %r1749, %r1838, %p46;
	sub.s32 	%r107, %r1839, %r1749;
	sub.s32 	%r1840, %r7397, %r1745;
	mul.lo.s32 	%r108, %r1840, %r88;
	mul.lo.s32 	%r109, %r1831, %r88;
	add.s32 	%r1841, %r1840, %r87;
	mul.lo.s32 	%r110, %r1841, %r88;
	add.s32 	%r1842, %r1831, %r87;
	mul.lo.s32 	%r111, %r1842, %r88;
	add.s32 	%r1843, %r1841, %r87;
	mul.lo.s32 	%r112, %r1843, %r88;
	add.s32 	%r1844, %r1842, %r87;
	mul.lo.s32 	%r113, %r1844, %r88;
	mov.u32 	%r7398, %r83;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7398, %r1753;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7398, %r1754;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7398, %r1747;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7398, %r1748;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r115, %r7398, %r1747;
	selp.b32 	%r1845, %r7398, %r90, %p52;
	setp.lt.s32 	%p53, %r7398, %r1747;
	selp.b32 	%r1846, %r1747, %r1845, %p53;
	sub.s32 	%r116, %r1846, %r1747;
	mul.lo.s32 	%r117, %r7398, %r1736;
	add.s32 	%r118, %r117, %r7397;
	shl.b32 	%r119, %r118, 6;
	setp.ge.s32 	%p54, %r102, %r1755;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r102, %r1756;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r102, %r1749;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r103, %r1749;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd60, %r118, 4;
	add.s64 	%rd12, %rd11, %rd60;
	ld.global.f32 	%f85, [%rd12];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1849, %r115, %r108;
	mad.lo.s32 	%r1850, %r1849, %r59, %r104;
	mul.wide.s32 	%rd63, %r1850, 4;
	add.s64 	%rd64, %rd9, %rd63;
	ld.global.f32 	%f642, [%rd64];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1847, %r116, %r109;
	mad.lo.s32 	%r1848, %r1847, %r59, %r105;
	mul.wide.s32 	%rd61, %r1848, 4;
	add.s64 	%rd62, %rd9, %rd61;
	ld.global.f32 	%f642, [%rd62];

$L__BB0_20:
	setp.lt.s32 	%p67, %r103, %r1756;
	setp.ge.s32 	%p68, %r103, %r1755;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1853, %r115, %r108;
	mad.lo.s32 	%r1854, %r1853, %r59, %r106;
	mul.wide.s32 	%rd67, %r1854, 4;
	add.s64 	%rd68, %rd9, %rd67;
	ld.global.f32 	%f643, [%rd68];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1851, %r116, %r109;
	mad.lo.s32 	%r1852, %r1851, %r59, %r107;
	mul.wide.s32 	%rd65, %r1852, 4;
	add.s64 	%rd66, %rd9, %rd65;
	ld.global.f32 	%f643, [%rd66];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1855, %f87, %f86; }

	// end inline asm
	shl.b32 	%r120, %r118, 5;
	add.s32 	%r1856, %r120, %r46;
	shl.b32 	%r1857, %r1856, 2;
	add.s32 	%r1858, %r92, %r1857;
	mul.wide.s32 	%rd69, %r1858, 4;
	add.s64 	%rd70, %rd10, %rd69;
	st.global.u32 	[%rd70], %r1855;
	add.s32 	%r121, %r1737, %r7398;
	mad.lo.s32 	%r1859, %r121, %r1736, %r7397;
	mul.wide.s32 	%rd71, %r1859, 4;
	add.s64 	%rd13, %rd11, %rd71;
	ld.global.f32 	%f88, [%rd13];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1862, %r115, %r110;
	mad.lo.s32 	%r1863, %r1862, %r59, %r104;
	mul.wide.s32 	%rd74, %r1863, 4;
	add.s64 	%rd75, %rd9, %rd74;
	ld.global.f32 	%f644, [%rd75];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1860, %r116, %r111;
	mad.lo.s32 	%r1861, %r1860, %r59, %r105;
	mul.wide.s32 	%rd72, %r1861, 4;
	add.s64 	%rd73, %rd9, %rd72;
	ld.global.f32 	%f644, [%rd73];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1866, %r115, %r110;
	mad.lo.s32 	%r1867, %r1866, %r59, %r106;
	mul.wide.s32 	%rd78, %r1867, 4;
	add.s64 	%rd79, %rd9, %rd78;
	ld.global.f32 	%f645, [%rd79];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1864, %r116, %r111;
	mad.lo.s32 	%r1865, %r1864, %r59, %r107;
	mul.wide.s32 	%rd76, %r1865, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f645, [%rd77];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1868, %f90, %f89; }

	// end inline asm
	add.s32 	%r1869, %r96, %r119;
	mul.wide.s32 	%rd80, %r1869, 4;
	add.s64 	%rd81, %rd10, %rd80;
	st.global.u32 	[%rd81], %r1868;
	add.s32 	%r1870, %r121, %r1737;
	mad.lo.s32 	%r1871, %r1870, %r1736, %r7397;
	mul.wide.s32 	%rd82, %r1871, 4;
	add.s64 	%rd14, %rd11, %rd82;
	ld.global.f32 	%f91, [%rd14];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1874, %r115, %r112;
	mad.lo.s32 	%r1875, %r1874, %r59, %r104;
	mul.wide.s32 	%rd85, %r1875, 4;
	add.s64 	%rd86, %rd9, %rd85;
	ld.global.f32 	%f646, [%rd86];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1872, %r116, %r113;
	mad.lo.s32 	%r1873, %r1872, %r59, %r105;
	mul.wide.s32 	%rd83, %r1873, 4;
	add.s64 	%rd84, %rd9, %rd83;
	ld.global.f32 	%f646, [%rd84];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1878, %r115, %r112;
	mad.lo.s32 	%r1879, %r1878, %r59, %r106;
	mul.wide.s32 	%rd89, %r1879, 4;
	add.s64 	%rd90, %rd9, %rd89;
	ld.global.f32 	%f647, [%rd90];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1876, %r116, %r113;
	mad.lo.s32 	%r1877, %r1876, %r59, %r107;
	mul.wide.s32 	%rd87, %r1877, 4;
	add.s64 	%rd88, %rd9, %rd87;
	ld.global.f32 	%f647, [%rd88];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1880, %f93, %f92; }

	// end inline asm
	rem.s32 	%r1881, %r101, %r1736;
	add.s32 	%r1882, %r1881, %r117;
	shl.b32 	%r122, %r1882, 5;
	add.s32 	%r1883, %r122, %r46;
	shl.b32 	%r1884, %r1883, 2;
	add.s32 	%r1885, %r92, %r1884;
	add.s32 	%r1886, %r1885, 2;
	mul.wide.s32 	%rd91, %r1886, 4;
	add.s64 	%rd92, %rd10, %rd91;
	st.global.u32 	[%rd92], %r1880;
	setp.ge.s32 	%p76, %r1889, %r1755;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1889, %r1756;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1889, %r1749;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1889, %r1750;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1892, %r1755;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1892, %r1756;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r123, %r1889, %r1749;
	setp.lt.s32 	%p86, %r1889, %r1749;
	selp.b32 	%r1893, %r1889, %r91, %p82;
	selp.b32 	%r1894, %r1749, %r1893, %p86;
	sub.s32 	%r124, %r1894, %r1749;
	setp.ge.s32 	%p87, %r1892, %r1749;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1892, %r1750;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r125, %r1892, %r1749;
	setp.lt.s32 	%p90, %r1892, %r1749;
	selp.b32 	%r1895, %r1892, %r91, %p89;
	selp.b32 	%r1896, %r1749, %r1895, %p90;
	sub.s32 	%r126, %r1896, %r1749;
	ld.global.f32 	%f94, [%rd12];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1899, %r115, %r108;
	mad.lo.s32 	%r1900, %r1899, %r59, %r123;
	mul.wide.s32 	%rd95, %r1900, 4;
	add.s64 	%rd96, %rd9, %rd95;
	ld.global.f32 	%f648, [%rd96];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1897, %r116, %r109;
	mad.lo.s32 	%r1898, %r1897, %r59, %r124;
	mul.wide.s32 	%rd93, %r1898, 4;
	add.s64 	%rd94, %rd9, %rd93;
	ld.global.f32 	%f648, [%rd94];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1903, %r115, %r108;
	mad.lo.s32 	%r1904, %r1903, %r59, %r125;
	mul.wide.s32 	%rd99, %r1904, 4;
	add.s64 	%rd100, %rd9, %rd99;
	ld.global.f32 	%f649, [%rd100];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1901, %r116, %r109;
	mad.lo.s32 	%r1902, %r1901, %r59, %r126;
	mul.wide.s32 	%rd97, %r1902, 4;
	add.s64 	%rd98, %rd9, %rd97;
	ld.global.f32 	%f649, [%rd98];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1905, %f96, %f95; }

	// end inline asm
	add.s32 	%r1906, %r120, %r99;
	shl.b32 	%r1907, %r1906, 2;
	add.s32 	%r1908, %r98, %r1907;
	mul.wide.s32 	%rd101, %r1908, 4;
	add.s64 	%rd102, %rd10, %rd101;
	st.global.u32 	[%rd102], %r1905;
	ld.global.f32 	%f97, [%rd13];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1911, %r115, %r110;
	mad.lo.s32 	%r1912, %r1911, %r59, %r123;
	mul.wide.s32 	%rd105, %r1912, 4;
	add.s64 	%rd106, %rd9, %rd105;
	ld.global.f32 	%f650, [%rd106];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1909, %r116, %r111;
	mad.lo.s32 	%r1910, %r1909, %r59, %r124;
	mul.wide.s32 	%rd103, %r1910, 4;
	add.s64 	%rd104, %rd9, %rd103;
	ld.global.f32 	%f650, [%rd104];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1915, %r115, %r110;
	mad.lo.s32 	%r1916, %r1915, %r59, %r125;
	mul.wide.s32 	%rd109, %r1916, 4;
	add.s64 	%rd110, %rd9, %rd109;
	ld.global.f32 	%f651, [%rd110];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1913, %r116, %r111;
	mad.lo.s32 	%r1914, %r1913, %r59, %r126;
	mul.wide.s32 	%rd107, %r1914, 4;
	add.s64 	%rd108, %rd9, %rd107;
	ld.global.f32 	%f651, [%rd108];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1917, %f99, %f98; }

	// end inline asm
	add.s32 	%r1918, %r97, %r119;
	mul.wide.s32 	%rd111, %r1918, 4;
	add.s64 	%rd112, %rd10, %rd111;
	st.global.u32 	[%rd112], %r1917;
	ld.global.f32 	%f100, [%rd14];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1921, %r115, %r112;
	mad.lo.s32 	%r1922, %r1921, %r59, %r123;
	mul.wide.s32 	%rd115, %r1922, 4;
	add.s64 	%rd116, %rd9, %rd115;
	ld.global.f32 	%f652, [%rd116];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1919, %r116, %r113;
	mad.lo.s32 	%r1920, %r1919, %r59, %r124;
	mul.wide.s32 	%rd113, %r1920, 4;
	add.s64 	%rd114, %rd9, %rd113;
	ld.global.f32 	%f652, [%rd114];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1925, %r115, %r112;
	mad.lo.s32 	%r1926, %r1925, %r59, %r125;
	mul.wide.s32 	%rd119, %r1926, 4;
	add.s64 	%rd120, %rd9, %rd119;
	ld.global.f32 	%f653, [%rd120];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1923, %r116, %r113;
	mad.lo.s32 	%r1924, %r1923, %r59, %r126;
	mul.wide.s32 	%rd117, %r1924, 4;
	add.s64 	%rd118, %rd9, %rd117;
	ld.global.f32 	%f653, [%rd118];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r1927, %f102, %f101; }

	// end inline asm
	add.s32 	%r1928, %r122, %r99;
	shl.b32 	%r1929, %r1928, 2;
	add.s32 	%r1930, %r98, %r1929;
	add.s32 	%r1931, %r1930, 2;
	mul.wide.s32 	%rd121, %r1931, 4;
	add.s64 	%rd122, %rd10, %rd121;
	st.global.u32 	[%rd122], %r1927;
	add.s32 	%r7398, %r7398, %r1768;
	setp.lt.s32 	%p99, %r7398, %r1737;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7397, %r7397, %r1763;
	setp.lt.s32 	%p100, %r7397, %r1736;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd123, [%rd1+120];
	cvta.to.global.u64 	%rd15, %rd123;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r129, %r83, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd124, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd186, %rd124, 24;
	mov.u32 	%r7399, %r7432;

$L__BB0_68:
	setp.ge.s32 	%p102, %r129, %r1737;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7400, %r129;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1933, %r7400, 31;
	add.s32 	%r1934, %r7400, %r1933;
	shr.s32 	%r1935, %r1934, 1;
	mad.lo.s32 	%r1936, %r1935, %r1736, %r7399;
	shl.b32 	%r133, %r1936, 5;
	add.s32 	%r134, %r7400, -2;
	mul.lo.s32 	%r135, %r134, %r1736;
	add.s32 	%r1937, %r1737, %r134;
	mul.lo.s32 	%r136, %r1937, %r1736;
	add.s32 	%r1938, %r1937, %r1737;
	mul.lo.s32 	%r137, %r1938, %r1736;
	add.s32 	%r138, %r135, %r1736;
	add.s32 	%r139, %r7400, -1;
	add.s32 	%r1939, %r1737, %r139;
	mul.lo.s32 	%r140, %r1939, %r1736;
	add.s32 	%r1940, %r1939, %r1737;
	mul.lo.s32 	%r141, %r1940, %r1736;
	add.s32 	%r1941, %r1737, %r7400;
	mul.lo.s32 	%r142, %r1941, %r1736;
	add.s32 	%r1942, %r1941, %r1737;
	mul.lo.s32 	%r143, %r1942, %r1736;
	mul.lo.s32 	%r144, %r7400, %r1736;
	add.s32 	%r145, %r144, %r1736;
	add.s32 	%r146, %r7400, 1;
	add.s32 	%r1943, %r1737, %r146;
	mul.lo.s32 	%r147, %r1943, %r1736;
	add.s32 	%r1944, %r1943, %r1737;
	mul.lo.s32 	%r148, %r1944, %r1736;
	add.s32 	%r149, %r145, %r1736;
	add.s32 	%r150, %r7400, 2;
	add.s32 	%r1945, %r1737, %r150;
	mul.lo.s32 	%r151, %r1945, %r1736;
	add.s32 	%r1946, %r1945, %r1737;
	mul.lo.s32 	%r152, %r1946, %r1736;
	mov.u32 	%r7403, 0;
	mov.u64 	%rd594, %rd124;

$L__BB0_72:
	ld.global.nc.u32 	%r1947, [%rd594];
	cvt.rn.f64.s32 	%fd1, %r1947;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r154, %r1947, %r7399;
	setp.lt.s32 	%p104, %r154, %r1736;
	or.b32  	%r1948, %r134, %r154;
	setp.gt.s32 	%p105, %r1948, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r134, %r1737;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1951, %r135, %r154;
	mul.wide.s32 	%rd125, %r1951, 4;
	add.s64 	%rd126, %rd11, %rd125;
	ld.global.f32 	%f110, [%rd126];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r7402, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7402, %f108, %f108; }

	// end inline asm

$L__BB0_76:
	add.s32 	%r1952, %r7403, %r133;
	mul.wide.s32 	%rd127, %r1952, 4;
	add.s64 	%rd128, %rd15, %rd127;
	st.global.u32 	[%rd128], %r7402;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1955, %r136, %r154;
	mul.wide.s32 	%rd129, %r1955, 4;
	add.s64 	%rd130, %rd11, %rd129;
	ld.global.f32 	%f119, [%rd130];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7404, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7404, %f117, %f117; }

	// end inline asm

$L__BB0_81:
	add.s32 	%r1956, %r7403, %r133;
	mul.wide.s32 	%rd131, %r1956, 4;
	add.s64 	%rd132, %rd15, %rd131;
	st.global.u32 	[%rd132], %r7404;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1959, %r137, %r154;
	mul.wide.s32 	%rd133, %r1959, 4;
	add.s64 	%rd134, %rd11, %rd133;
	ld.global.f32 	%f127, [%rd134];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7406, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7406, %f125, %f125; }

	// end inline asm

$L__BB0_86:
	add.s32 	%r1960, %r7403, %r133;
	mul.wide.s32 	%rd135, %r1960, 4;
	add.s64 	%rd136, %rd15, %rd135;
	st.global.u32 	[%rd136], %r7406;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_87:
	or.b32  	%r1961, %r139, %r154;
	setp.gt.s32 	%p111, %r1961, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7400, %r1737;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1964, %r138, %r154;
	mul.wide.s32 	%rd137, %r1964, 4;
	add.s64 	%rd138, %rd11, %rd137;
	ld.global.f32 	%f134, [%rd138];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7408, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7408, %f132, %f132; }

	// end inline asm

$L__BB0_91:
	add.s32 	%r1965, %r7403, %r133;
	mul.wide.s32 	%rd139, %r1965, 4;
	add.s64 	%rd140, %rd15, %rd139;
	st.global.u32 	[%rd140], %r7408;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1968, %r140, %r154;
	mul.wide.s32 	%rd141, %r1968, 4;
	add.s64 	%rd142, %rd11, %rd141;
	ld.global.f32 	%f141, [%rd142];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r7410, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7410, %f139, %f139; }

	// end inline asm

$L__BB0_96:
	add.s32 	%r1969, %r7403, %r133;
	mul.wide.s32 	%rd143, %r1969, 4;
	add.s64 	%rd144, %rd15, %rd143;
	st.global.u32 	[%rd144], %r7410;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1972, %r141, %r154;
	mul.wide.s32 	%rd145, %r1972, 4;
	add.s64 	%rd146, %rd11, %rd145;
	ld.global.f32 	%f148, [%rd146];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r7412, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7412, %f146, %f146; }

	// end inline asm

$L__BB0_101:
	add.s32 	%r1973, %r7403, %r133;
	mul.wide.s32 	%rd147, %r1973, 4;
	add.s64 	%rd148, %rd15, %rd147;
	st.global.u32 	[%rd148], %r7412;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_102:
	or.b32  	%r1974, %r7400, %r154;
	setp.gt.s32 	%p118, %r1974, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7400, %r1737;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1977, %r144, %r154;
	mul.wide.s32 	%rd149, %r1977, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f155, [%rd150];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r7414, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7414, %f153, %f153; }

	// end inline asm

$L__BB0_106:
	add.s32 	%r1978, %r7403, %r133;
	mul.wide.s32 	%rd151, %r1978, 4;
	add.s64 	%rd152, %rd15, %rd151;
	st.global.u32 	[%rd152], %r7414;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1981, %r142, %r154;
	mul.wide.s32 	%rd153, %r1981, 4;
	add.s64 	%rd154, %rd11, %rd153;
	ld.global.f32 	%f163, [%rd154];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r7416, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7416, %f161, %f161; }

	// end inline asm

$L__BB0_111:
	add.s32 	%r1982, %r7403, %r133;
	mul.wide.s32 	%rd155, %r1982, 4;
	add.s64 	%rd156, %rd15, %rd155;
	st.global.u32 	[%rd156], %r7416;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1985, %r143, %r154;
	mul.wide.s32 	%rd157, %r1985, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f170, [%rd158];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r7418, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7418, %f168, %f168; }

	// end inline asm

$L__BB0_116:
	add.s32 	%r1986, %r7403, %r133;
	mul.wide.s32 	%rd159, %r1986, 4;
	add.s64 	%rd160, %rd15, %rd159;
	st.global.u32 	[%rd160], %r7418;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_117:
	or.b32  	%r1987, %r146, %r154;
	setp.gt.s32 	%p125, %r1987, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r146, %r1737;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1990, %r145, %r154;
	mul.wide.s32 	%rd161, %r1990, 4;
	add.s64 	%rd162, %rd11, %rd161;
	ld.global.f32 	%f177, [%rd162];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r7420, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7420, %f175, %f175; }

	// end inline asm

$L__BB0_121:
	add.s32 	%r1991, %r7403, %r133;
	mul.wide.s32 	%rd163, %r1991, 4;
	add.s64 	%rd164, %rd15, %rd163;
	st.global.u32 	[%rd164], %r7420;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1994, %r147, %r154;
	mul.wide.s32 	%rd165, %r1994, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f184, [%rd166];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r7422, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7422, %f182, %f182; }

	// end inline asm

$L__BB0_126:
	add.s32 	%r1995, %r7403, %r133;
	mul.wide.s32 	%rd167, %r1995, 4;
	add.s64 	%rd168, %rd15, %rd167;
	st.global.u32 	[%rd168], %r7422;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1998, %r148, %r154;
	mul.wide.s32 	%rd169, %r1998, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f191, [%rd170];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r7424, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7424, %f189, %f189; }

	// end inline asm

$L__BB0_131:
	add.s32 	%r1999, %r7403, %r133;
	mul.wide.s32 	%rd171, %r1999, 4;
	add.s64 	%rd172, %rd15, %rd171;
	st.global.u32 	[%rd172], %r7424;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_132:
	or.b32  	%r2000, %r150, %r154;
	setp.gt.s32 	%p132, %r2000, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r150, %r1737;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2003, %r149, %r154;
	mul.wide.s32 	%rd173, %r2003, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f198, [%rd174];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r7426, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7426, %f196, %f196; }

	// end inline asm

$L__BB0_136:
	add.s32 	%r2004, %r7403, %r133;
	mul.wide.s32 	%rd175, %r2004, 4;
	add.s64 	%rd176, %rd15, %rd175;
	st.global.u32 	[%rd176], %r7426;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2007, %r151, %r154;
	mul.wide.s32 	%rd177, %r2007, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f205, [%rd178];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r7428, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7428, %f203, %f203; }

	// end inline asm

$L__BB0_141:
	add.s32 	%r2008, %r7403, %r133;
	mul.wide.s32 	%rd179, %r2008, 4;
	add.s64 	%rd180, %rd15, %rd179;
	st.global.u32 	[%rd180], %r7428;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2011, %r152, %r154;
	mul.wide.s32 	%rd181, %r2011, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f212, [%rd182];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r7430, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7430, %f210, %f210; }

	// end inline asm

$L__BB0_146:
	add.s32 	%r2012, %r7403, %r133;
	mul.wide.s32 	%rd183, %r2012, 4;
	add.s64 	%rd184, %rd15, %rd183;
	st.global.u32 	[%rd184], %r7430;
	add.s32 	%r7403, %r7403, 1;

$L__BB0_147:
	add.s64 	%rd594, %rd594, 4;
	setp.ne.s64 	%p139, %rd594, %rd186;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7400, %r7400, %r48;
	setp.lt.s32 	%p140, %r7400, %r1737;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7399, %r7399, %r1763;
	setp.lt.s32 	%p141, %r7399, %r1736;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1740, 1;
	ld.param.u64 	%rd187, [%rd1+160];
	cvta.to.global.u64 	%rd18, %rd187;
	ld.param.u64 	%rd188, [%rd1+128];
	cvta.to.global.u64 	%rd19, %rd188;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r258, %r83, 1;
	shr.u32 	%r2060, %r1741, 31;
	add.s32 	%r2061, %r1741, %r2060;
	shr.u32 	%r2062, %r2061, 1;
	and.b32  	%r259, %r2062, 1;
	mov.u64 	%rd207, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd289, %rd207, 24;

$L__BB0_170:
	setp.ge.s32 	%p152, %r258, %r1737;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7438, %r258;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2064, %r7438, 31;
	add.s32 	%r2065, %r7438, %r2064;
	shr.s32 	%r2066, %r2065, 1;
	mad.lo.s32 	%r2067, %r2066, %r1736, %r7432;
	shl.b32 	%r263, %r2067, 5;
	add.s32 	%r264, %r7438, -2;
	mul.lo.s32 	%r265, %r264, %r1736;
	add.s32 	%r2068, %r1737, %r264;
	mul.lo.s32 	%r266, %r2068, %r1736;
	add.s32 	%r267, %r265, %r1736;
	add.s32 	%r268, %r7438, -1;
	add.s32 	%r2069, %r1737, %r268;
	mul.lo.s32 	%r269, %r2069, %r1736;
	add.s32 	%r2070, %r1737, %r7438;
	mul.lo.s32 	%r270, %r2070, %r1736;
	mul.lo.s32 	%r271, %r7438, %r1736;
	add.s32 	%r272, %r271, %r1736;
	add.s32 	%r273, %r7438, 1;
	add.s32 	%r2071, %r1737, %r273;
	mul.lo.s32 	%r274, %r2071, %r1736;
	add.s32 	%r275, %r272, %r1736;
	add.s32 	%r276, %r7438, 2;
	add.s32 	%r2072, %r1737, %r276;
	mul.lo.s32 	%r277, %r2072, %r1736;
	mov.u32 	%r7442, 0;
	mov.u64 	%rd595, %rd207;

$L__BB0_174:
	ld.global.nc.u32 	%r2073, [%rd595];
	cvt.rn.f64.s32 	%fd2, %r2073;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r279, %r2073, %r7432;
	setp.lt.s32 	%p154, %r279, %r1736;
	or.b32  	%r2074, %r264, %r279;
	setp.gt.s32 	%p155, %r2074, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r264, %r1737;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r259, 0;
	add.s32 	%r2076, %r265, %r279;
	shl.b32 	%r2077, %r2076, 1;
	mul.wide.s32 	%rd208, %r2077, 4;
	add.s64 	%rd209, %rd18, %rd208;
	ld.global.f32 	%f55, [%rd209];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7440, %f240, %f55; }

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7440, %f236, %f236; }

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7440, %f55, %f237; }

	// end inline asm

$L__BB0_180:
	add.s32 	%r284, %r7442, %r263;
	mul.wide.s32 	%rd210, %r284, 4;
	add.s64 	%rd211, %rd19, %rd210;
	st.global.u32 	[%rd211], %r7440;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r259, 0;
	add.s32 	%r2081, %r266, %r279;
	shl.b32 	%r2082, %r2081, 1;
	mul.wide.s32 	%rd212, %r2082, 4;
	add.s64 	%rd213, %rd18, %rd212;
	ld.global.f32 	%f56, [%rd213];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7441, %f246, %f56; }

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7441, %f242, %f242; }

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7441, %f56, %f243; }

	// end inline asm

$L__BB0_185:
	add.s32 	%r2085, %r284, 1;
	mul.wide.s32 	%rd214, %r2085, 4;
	add.s64 	%rd215, %rd19, %rd214;
	st.global.u32 	[%rd215], %r7441;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r259, 0;
	add.s32 	%r2087, %r265, %r279;
	shl.b32 	%r2088, %r2087, 1;
	or.b32  	%r2089, %r2088, 1;
	mul.wide.s32 	%rd216, %r2089, 4;
	add.s64 	%rd217, %rd18, %rd216;
	ld.global.f32 	%f59, [%rd217];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7443, %f254, %f59; }

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7443, %f250, %f250; }

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7443, %f59, %f251; }

	// end inline asm

$L__BB0_192:
	add.s32 	%r295, %r7442, %r263;
	mul.wide.s32 	%rd218, %r295, 4;
	add.s64 	%rd219, %rd19, %rd218;
	st.global.u32 	[%rd219], %r7443;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r259, 0;
	add.s32 	%r2093, %r266, %r279;
	shl.b32 	%r2094, %r2093, 1;
	or.b32  	%r2095, %r2094, 1;
	mul.wide.s32 	%rd220, %r2095, 4;
	add.s64 	%rd221, %rd18, %rd220;
	ld.global.f32 	%f60, [%rd221];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7444, %f260, %f60; }

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7444, %f256, %f256; }

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7444, %f60, %f257; }

	// end inline asm

$L__BB0_197:
	add.s32 	%r2098, %r295, 1;
	mul.wide.s32 	%rd222, %r2098, 4;
	add.s64 	%rd223, %rd19, %rd222;
	st.global.u32 	[%rd223], %r7444;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_198:
	or.b32  	%r2099, %r268, %r279;
	setp.gt.s32 	%p164, %r2099, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7438, %r1737;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r259, 0;
	add.s32 	%r2101, %r267, %r279;
	shl.b32 	%r2102, %r2101, 1;
	mul.wide.s32 	%rd224, %r2102, 4;
	add.s64 	%rd225, %rd18, %rd224;
	ld.global.f32 	%f62, [%rd225];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7446, %f266, %f62; }

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7446, %f262, %f262; }

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7446, %f62, %f263; }

	// end inline asm

$L__BB0_204:
	add.s32 	%r306, %r7442, %r263;
	mul.wide.s32 	%rd226, %r306, 4;
	add.s64 	%rd227, %rd19, %rd226;
	st.global.u32 	[%rd227], %r7446;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r259, 0;
	add.s32 	%r2106, %r269, %r279;
	shl.b32 	%r2107, %r2106, 1;
	mul.wide.s32 	%rd228, %r2107, 4;
	add.s64 	%rd229, %rd18, %rd228;
	ld.global.f32 	%f63, [%rd229];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7447, %f272, %f63; }

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7447, %f268, %f268; }

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7447, %f63, %f269; }

	// end inline asm

$L__BB0_209:
	add.s32 	%r2110, %r306, 1;
	mul.wide.s32 	%rd230, %r2110, 4;
	add.s64 	%rd231, %rd19, %rd230;
	st.global.u32 	[%rd231], %r7447;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r259, 0;
	add.s32 	%r2112, %r267, %r279;
	shl.b32 	%r2113, %r2112, 1;
	or.b32  	%r2114, %r2113, 1;
	mul.wide.s32 	%rd232, %r2114, 4;
	add.s64 	%rd233, %rd18, %rd232;
	ld.global.f32 	%f65, [%rd233];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7449, %f278, %f65; }

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7449, %f274, %f274; }

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7449, %f65, %f275; }

	// end inline asm

$L__BB0_216:
	add.s32 	%r317, %r7442, %r263;
	mul.wide.s32 	%rd234, %r317, 4;
	add.s64 	%rd235, %rd19, %rd234;
	st.global.u32 	[%rd235], %r7449;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r259, 0;
	add.s32 	%r2118, %r269, %r279;
	shl.b32 	%r2119, %r2118, 1;
	or.b32  	%r2120, %r2119, 1;
	mul.wide.s32 	%rd236, %r2120, 4;
	add.s64 	%rd237, %rd18, %rd236;
	ld.global.f32 	%f66, [%rd237];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7450, %f284, %f66; }

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7450, %f280, %f280; }

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7450, %f66, %f281; }

	// end inline asm

$L__BB0_221:
	add.s32 	%r2123, %r317, 1;
	mul.wide.s32 	%rd238, %r2123, 4;
	add.s64 	%rd239, %rd19, %rd238;
	st.global.u32 	[%rd239], %r7450;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_222:
	or.b32  	%r2124, %r7438, %r279;
	setp.gt.s32 	%p174, %r2124, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7438, %r1737;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r259, 0;
	add.s32 	%r2126, %r271, %r279;
	shl.b32 	%r2127, %r2126, 1;
	mul.wide.s32 	%rd240, %r2127, 4;
	add.s64 	%rd241, %rd18, %rd240;
	ld.global.f32 	%f68, [%rd241];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7452, %f290, %f68; }

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7452, %f286, %f286; }

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7452, %f68, %f287; }

	// end inline asm

$L__BB0_228:
	add.s32 	%r328, %r7442, %r263;
	mul.wide.s32 	%rd242, %r328, 4;
	add.s64 	%rd243, %rd19, %rd242;
	st.global.u32 	[%rd243], %r7452;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r259, 0;
	add.s32 	%r2131, %r270, %r279;
	shl.b32 	%r2132, %r2131, 1;
	mul.wide.s32 	%rd244, %r2132, 4;
	add.s64 	%rd245, %rd18, %rd244;
	ld.global.f32 	%f69, [%rd245];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7453, %f296, %f69; }

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7453, %f292, %f292; }

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7453, %f69, %f293; }

	// end inline asm

$L__BB0_233:
	add.s32 	%r2135, %r328, 1;
	mul.wide.s32 	%rd246, %r2135, 4;
	add.s64 	%rd247, %rd19, %rd246;
	st.global.u32 	[%rd247], %r7453;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r259, 0;
	add.s32 	%r2137, %r271, %r279;
	shl.b32 	%r2138, %r2137, 1;
	or.b32  	%r2139, %r2138, 1;
	mul.wide.s32 	%rd248, %r2139, 4;
	add.s64 	%rd249, %rd18, %rd248;
	ld.global.f32 	%f70, [%rd249];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7455, %f303, %f70; }

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7455, %f299, %f299; }

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7455, %f70, %f300; }

	// end inline asm

$L__BB0_240:
	add.s32 	%r339, %r7442, %r263;
	mul.wide.s32 	%rd250, %r339, 4;
	add.s64 	%rd251, %rd19, %rd250;
	st.global.u32 	[%rd251], %r7455;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r259, 0;
	add.s32 	%r2143, %r270, %r279;
	shl.b32 	%r2144, %r2143, 1;
	or.b32  	%r2145, %r2144, 1;
	mul.wide.s32 	%rd252, %r2145, 4;
	add.s64 	%rd253, %rd18, %rd252;
	ld.global.f32 	%f71, [%rd253];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7456, %f309, %f71; }

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7456, %f305, %f305; }

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7456, %f71, %f306; }

	// end inline asm

$L__BB0_245:
	add.s32 	%r2148, %r339, 1;
	mul.wide.s32 	%rd254, %r2148, 4;
	add.s64 	%rd255, %rd19, %rd254;
	st.global.u32 	[%rd255], %r7456;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_246:
	or.b32  	%r2149, %r273, %r279;
	setp.gt.s32 	%p184, %r2149, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r273, %r1737;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r259, 0;
	add.s32 	%r2151, %r272, %r279;
	shl.b32 	%r2152, %r2151, 1;
	mul.wide.s32 	%rd256, %r2152, 4;
	add.s64 	%rd257, %rd18, %rd256;
	ld.global.f32 	%f72, [%rd257];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7458, %f315, %f72; }

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7458, %f311, %f311; }

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7458, %f72, %f312; }

	// end inline asm

$L__BB0_252:
	add.s32 	%r350, %r7442, %r263;
	mul.wide.s32 	%rd258, %r350, 4;
	add.s64 	%rd259, %rd19, %rd258;
	st.global.u32 	[%rd259], %r7458;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r259, 0;
	add.s32 	%r2156, %r274, %r279;
	shl.b32 	%r2157, %r2156, 1;
	mul.wide.s32 	%rd260, %r2157, 4;
	add.s64 	%rd261, %rd18, %rd260;
	ld.global.f32 	%f73, [%rd261];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7459, %f321, %f73; }

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7459, %f317, %f317; }

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7459, %f73, %f318; }

	// end inline asm

$L__BB0_257:
	add.s32 	%r2160, %r350, 1;
	mul.wide.s32 	%rd262, %r2160, 4;
	add.s64 	%rd263, %rd19, %rd262;
	st.global.u32 	[%rd263], %r7459;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r259, 0;
	add.s32 	%r2162, %r272, %r279;
	shl.b32 	%r2163, %r2162, 1;
	or.b32  	%r2164, %r2163, 1;
	mul.wide.s32 	%rd264, %r2164, 4;
	add.s64 	%rd265, %rd18, %rd264;
	ld.global.f32 	%f74, [%rd265];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7461, %f327, %f74; }

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7461, %f323, %f323; }

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7461, %f74, %f324; }

	// end inline asm

$L__BB0_264:
	add.s32 	%r361, %r7442, %r263;
	mul.wide.s32 	%rd266, %r361, 4;
	add.s64 	%rd267, %rd19, %rd266;
	st.global.u32 	[%rd267], %r7461;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r259, 0;
	add.s32 	%r2168, %r274, %r279;
	shl.b32 	%r2169, %r2168, 1;
	or.b32  	%r2170, %r2169, 1;
	mul.wide.s32 	%rd268, %r2170, 4;
	add.s64 	%rd269, %rd18, %rd268;
	ld.global.f32 	%f75, [%rd269];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7462, %f333, %f75; }

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7462, %f329, %f329; }

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7462, %f75, %f330; }

	// end inline asm

$L__BB0_269:
	add.s32 	%r2173, %r361, 1;
	mul.wide.s32 	%rd270, %r2173, 4;
	add.s64 	%rd271, %rd19, %rd270;
	st.global.u32 	[%rd271], %r7462;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_270:
	or.b32  	%r2174, %r276, %r279;
	setp.gt.s32 	%p194, %r2174, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r276, %r1737;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r259, 0;
	add.s32 	%r2176, %r275, %r279;
	shl.b32 	%r2177, %r2176, 1;
	mul.wide.s32 	%rd272, %r2177, 4;
	add.s64 	%rd273, %rd18, %rd272;
	ld.global.f32 	%f76, [%rd273];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7464, %f339, %f76; }

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7464, %f335, %f335; }

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7464, %f76, %f336; }

	// end inline asm

$L__BB0_276:
	add.s32 	%r372, %r7442, %r263;
	mul.wide.s32 	%rd274, %r372, 4;
	add.s64 	%rd275, %rd19, %rd274;
	st.global.u32 	[%rd275], %r7464;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r259, 0;
	add.s32 	%r2181, %r277, %r279;
	shl.b32 	%r2182, %r2181, 1;
	mul.wide.s32 	%rd276, %r2182, 4;
	add.s64 	%rd277, %rd18, %rd276;
	ld.global.f32 	%f77, [%rd277];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7465, %f345, %f77; }

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7465, %f341, %f341; }

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7465, %f77, %f342; }

	// end inline asm

$L__BB0_281:
	add.s32 	%r2185, %r372, 1;
	mul.wide.s32 	%rd278, %r2185, 4;
	add.s64 	%rd279, %rd19, %rd278;
	st.global.u32 	[%rd279], %r7465;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r259, 0;
	add.s32 	%r2187, %r275, %r279;
	shl.b32 	%r2188, %r2187, 1;
	or.b32  	%r2189, %r2188, 1;
	mul.wide.s32 	%rd280, %r2189, 4;
	add.s64 	%rd281, %rd18, %rd280;
	ld.global.f32 	%f78, [%rd281];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7467, %f351, %f78; }

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7467, %f347, %f347; }

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7467, %f78, %f348; }

	// end inline asm

$L__BB0_288:
	add.s32 	%r383, %r7442, %r263;
	mul.wide.s32 	%rd282, %r383, 4;
	add.s64 	%rd283, %rd19, %rd282;
	st.global.u32 	[%rd283], %r7467;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r259, 0;
	add.s32 	%r2193, %r277, %r279;
	shl.b32 	%r2194, %r2193, 1;
	or.b32  	%r2195, %r2194, 1;
	mul.wide.s32 	%rd284, %r2195, 4;
	add.s64 	%rd285, %rd18, %rd284;
	ld.global.f32 	%f79, [%rd285];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7468, %f357, %f79; }

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7468, %f353, %f353; }

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7468, %f79, %f354; }

	// end inline asm

$L__BB0_293:
	add.s32 	%r2198, %r383, 1;
	mul.wide.s32 	%rd286, %r2198, 4;
	add.s64 	%rd287, %rd19, %rd286;
	st.global.u32 	[%rd287], %r7468;
	add.s32 	%r7442, %r7442, 2;

$L__BB0_294:
	add.s64 	%rd595, %rd595, 4;
	setp.ne.s64 	%p204, %rd595, %rd289;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7438, %r7438, %r48;
	setp.lt.s32 	%p205, %r7438, %r1737;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7432, %r7432, %r1763;
	setp.lt.s32 	%p206, %r7432, %r1736;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r232, %r82;
	mov.u32 	%r2013, 31;
	sub.s32 	%r2014, %r2013, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2015, %r46, %r2014, %p144;
	shl.b32 	%r2016, %r2015, 2;
	mov.u32 	%r2017, 2;
	sub.s32 	%r233, %r2016, %r1739;
	shl.b32 	%r2018, %r1738, 2;
	mov.u32 	%r2019, 128;
	sub.s32 	%r234, %r2019, %r2018;
	sub.s32 	%r2020, %r2017, %r1739;
	add.s32 	%r235, %r2020, %r2016;
	add.s32 	%r236, %r1736, -1;
	add.s32 	%r237, %r233, 1;
	add.s32 	%r238, %r235, 1;
	rem.s32 	%r2045, %r237, %r234;
	add.s32 	%r2046, %r2045, %r234;
	rem.s32 	%r249, %r2046, %r234;
	rem.s32 	%r2047, %r238, %r234;
	add.s32 	%r2048, %r2047, %r234;
	rem.s32 	%r250, %r2048, %r234;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r232;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r240, %r7432, 1;
	rem.s32 	%r2021, %r233, %r234;
	add.s32 	%r2022, %r2021, %r234;
	rem.s32 	%r241, %r2022, %r234;
	rem.s32 	%r2023, %r235, %r234;
	add.s32 	%r2024, %r2023, %r234;
	rem.s32 	%r242, %r2024, %r234;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2027, %r240, %r234;
	add.s32 	%r2028, %r2027, %r241;
	mul.wide.s32 	%rd189, %r2028, 4;
	add.s64 	%rd190, %rd18, %rd189;
	ld.global.f32 	%f218, [%rd190];
	add.s32 	%r2029, %r2027, %r242;
	mul.wide.s32 	%rd191, %r2029, 4;
	add.s64 	%rd192, %rd18, %rd191;
	ld.global.f32 	%f219, [%rd192];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7433, %f219, %f218; }

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7433, %f217, %f217; }

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2030, %r7432, 5;
	add.s32 	%r2031, %r2030, %r46;
	shl.b32 	%r2032, %r2031, 2;
	mul.wide.s32 	%rd193, %r2032, 4;
	add.s64 	%rd20, %rd19, %rd193;
	st.global.u32 	[%rd20], %r7433;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2035, %r240, 1;
	mul.lo.s32 	%r2036, %r2035, %r234;
	add.s32 	%r2037, %r2036, %r241;
	mul.wide.s32 	%rd194, %r2037, 4;
	add.s64 	%rd195, %rd18, %rd194;
	ld.global.f32 	%f222, [%rd195];
	add.s32 	%r2038, %r2036, %r242;
	mul.wide.s32 	%rd196, %r2038, 4;
	add.s64 	%rd197, %rd18, %rd196;
	ld.global.f32 	%f223, [%rd197];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7434, %f223, %f222; }

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7434, %f221, %f221; }

	// end inline asm

$L__BB0_160:
	add.s32 	%r2039, %r236, %r7432;
	rem.s32 	%r2040, %r2039, %r1736;
	shl.b32 	%r2041, %r2040, 5;
	add.s32 	%r2042, %r2041, %r46;
	shl.b32 	%r2043, %r2042, 2;
	or.b32  	%r2044, %r2043, 2;
	mul.wide.s32 	%rd198, %r2044, 4;
	add.s64 	%rd21, %rd19, %rd198;
	st.global.u32 	[%rd21], %r7434;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2051, %r240, %r234;
	add.s32 	%r2052, %r2051, %r249;
	mul.wide.s32 	%rd199, %r2052, 4;
	add.s64 	%rd200, %rd18, %rd199;
	ld.global.f32 	%f226, [%rd200];
	add.s32 	%r2053, %r2051, %r250;
	mul.wide.s32 	%rd201, %r2053, 4;
	add.s64 	%rd202, %rd18, %rd201;
	ld.global.f32 	%f227, [%rd202];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7435, %f227, %f226; }

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7435, %f225, %f225; }

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd20+4], %r7435;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2056, %r240, 1;
	mul.lo.s32 	%r2057, %r2056, %r234;
	add.s32 	%r2058, %r2057, %r249;
	mul.wide.s32 	%rd203, %r2058, 4;
	add.s64 	%rd204, %rd18, %rd203;
	ld.global.f32 	%f230, [%rd204];
	add.s32 	%r2059, %r2057, %r250;
	mul.wide.s32 	%rd205, %r2059, 4;
	add.s64 	%rd206, %rd18, %rd205;
	ld.global.f32 	%f231, [%rd206];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7436, %f231, %f230; }

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7436, %f229, %f229; }

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd21+4], %r7436;

$L__BB0_167:
	add.s32 	%r7432, %r7432, %r1763;
	setp.lt.s32 	%p150, %r7432, %r1736;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2200, %r1731, -1;
	mad.lo.s32 	%r2201, %r1732, 576, 128;
	mul.lo.s32 	%r2202, %r2201, %r2200;
	add.s32 	%r2203, %r73, -64;
	add.s32 	%r2204, %r2203, %r73;
	add.s32 	%r2205, %r1732, -1;
	mad.lo.s32 	%r2206, %r2204, %r2205, %r2202;
	mul.lo.s32 	%r2207, %r2200, %r1732;
	mul.lo.s32 	%r2208, %r2207, 320;
	mad.lo.s32 	%r2209, %r2203, %r2205, %r2208;
	add.s32 	%r392, %r2209, %r2206;
	setp.lt.s32 	%p207, %r392, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7651, %f359, %f359; }

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7472, 0;
	mov.u32 	%r7470, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7470], %r7651;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r2212, %f367, %f367; }

	// end inline asm
	st.shared.u32 	[%r7470+4], %r2212;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r2213, %f367, %f367; }

	// end inline asm
	st.shared.u32 	[%r7470+8], %r2213;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r2214, %f367, %f367; }

	// end inline asm
	st.shared.u32 	[%r7470+12], %r2214;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7651, %f367, %f367; }

	// end inline asm
	add.s32 	%r7470, %r7470, 16;
	add.s32 	%r7472, %r7472, 4;
	setp.lt.s32 	%p208, %r7472, %r392;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7652, %f359, %f359; }

	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r2217, %f359, %f359; }

	// end inline asm
	ld.param.u64 	%rd290, [%rd1+176];
	cvta.to.global.u64 	%rd24, %rd290;
	mov.u32 	%r2218, 31;
	sub.s32 	%r2219, %r2218, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2220, %r46, %r2219, %p209;
	shl.b32 	%r2221, %r2220, 2;
	sub.s32 	%r403, %r2221, %r1739;
	shl.b32 	%r2222, %r1738, 2;
	mov.u32 	%r2223, 128;
	sub.s32 	%r404, %r2223, %r2222;
	rem.s32 	%r2224, %r403, %r404;
	add.s32 	%r2225, %r2224, %r404;
	rem.s32 	%r405, %r2225, %r404;
	add.s32 	%r2226, %r403, 2;
	rem.s32 	%r2227, %r2226, %r404;
	add.s32 	%r2228, %r2227, %r404;
	rem.s32 	%r406, %r2228, %r404;
	mul.lo.s32 	%r2229, %r405, 6;
	mul.lo.s32 	%r2230, %r406, 6;
	mul.wide.s32 	%rd291, %r2229, 4;
	add.s64 	%rd25, %rd24, %rd291;
	mul.wide.s32 	%rd292, %r2230, 4;
	add.s64 	%rd26, %rd24, %rd292;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7474, %f379, %f379; }

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd25];
	ld.global.f32 	%f375, [%rd25+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd26+8];
	ld.global.f32 	%f377, [%rd26];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7474, %f373, %f372; }

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd25+4];
	ld.global.f32 	%f383, [%rd26+4];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7475, %f383, %f382; }

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd25];
	ld.global.f32 	%f381, [%rd26];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7475, %f381, %f380; }

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7476, %f391, %f391; }

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd25+20];
	ld.global.f32 	%f387, [%rd25+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd26+20];
	ld.global.f32 	%f389, [%rd26+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7476, %f385, %f384; }

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd25+16];
	ld.global.f32 	%f395, [%rd26+16];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7477, %f395, %f394; }

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd25+12];
	ld.global.f32 	%f393, [%rd26+12];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7477, %f393, %f392; }

	// end inline asm

$L__BB0_312:
	add.s32 	%r2239, %r403, 1;
	rem.s32 	%r2240, %r2239, %r404;
	add.s32 	%r2241, %r2240, %r404;
	rem.s32 	%r419, %r2241, %r404;
	add.s32 	%r2242, %r403, 3;
	rem.s32 	%r2243, %r2242, %r404;
	add.s32 	%r2244, %r2243, %r404;
	rem.s32 	%r420, %r2244, %r404;
	mul.lo.s32 	%r2245, %r419, 6;
	mul.lo.s32 	%r2246, %r420, 6;
	mul.wide.s32 	%rd293, %r2245, 4;
	add.s64 	%rd27, %rd24, %rd293;
	mul.wide.s32 	%rd294, %r2246, 4;
	add.s64 	%rd28, %rd24, %rd294;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7478, %f403, %f403; }

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd27];
	ld.global.f32 	%f399, [%rd27+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd28+8];
	ld.global.f32 	%f401, [%rd28];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7478, %f397, %f396; }

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd27+4];
	ld.global.f32 	%f407, [%rd28+4];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7479, %f407, %f406; }

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd27];
	ld.global.f32 	%f405, [%rd28];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7479, %f405, %f404; }

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7480, %f415, %f415; }

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd27+20];
	ld.global.f32 	%f411, [%rd27+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd28+20];
	ld.global.f32 	%f413, [%rd28+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7480, %f409, %f408; }

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd27+16];
	ld.global.f32 	%f419, [%rd28+16];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7481, %f419, %f418; }

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd27+12];
	ld.global.f32 	%f417, [%rd28+12];
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7481, %f417, %f416; }

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2255, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd295, %r2255;
	// begin inline asm
	mov.u32 %r2256, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd296, %r2256;
	bfi.b64 	%rd29, %rd296, %rd295, 32, 32;
	setp.ne.s64 	%p218, %rd29, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd30, %rd29, 4;
	mov.u32 	%r2257, %nctaid.y;
	mov.u32 	%r2258, %nctaid.x;
	mul.lo.s32 	%r2259, %r2258, %r2257;
	mov.u32 	%r2260, %nctaid.z;
	mul.lo.s32 	%r433, %r2259, %r2260;
	neg.s32 	%r2261, %r42;
	add.s32 	%r2262, %r46, %r41;
	setp.ne.s32 	%p219, %r2262, %r2261;
	mov.u32 	%r2263, %ctaid.x;
	add.s32 	%r434, %r2263, %r43;
	neg.s32 	%r435, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r434, %r435;
	mov.u32 	%r2266, -2147483647;
	sub.s32 	%r2267, %r2266, %r433;
	selp.b32 	%r2265, %r2267, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2264,[%rd30],%r2265;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2268, [%rd30];
	xor.b32  	%r2269, %r2268, %r2264;
	setp.gt.s32 	%p221, %r2269, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2270,[%rd30];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_894;

	shr.s32 	%r2284, %r1741, 31;
	shr.u32 	%r2285, %r2284, 30;
	add.s32 	%r2286, %r1741, %r2285;
	shr.s32 	%r437, %r2286, 2;
	add.s32 	%r2287, %r46, 21;
	mul.hi.s32 	%r2288, %r2287, 780903145;
	shr.u32 	%r2289, %r2288, 31;
	shr.s32 	%r2290, %r2288, 2;
	add.s32 	%r2291, %r2290, %r2289;
	mul.lo.s32 	%r2292, %r2291, 22;
	sub.s32 	%r2293, %r2287, %r2292;
	add.s32 	%r2294, %r46, 23;
	mul.hi.s32 	%r2295, %r2294, 780903145;
	shr.u32 	%r2296, %r2295, 31;
	shr.s32 	%r2297, %r2295, 2;
	add.s32 	%r2298, %r2297, %r2296;
	mul.lo.s32 	%r2299, %r2298, 22;
	sub.s32 	%r2300, %r2294, %r2299;
	shr.u32 	%r2301, %r1741, 31;
	add.s32 	%r2302, %r1741, %r2301;
	and.b32  	%r2303, %r2302, -2;
	sub.s32 	%r438, %r1741, %r2303;
	setp.lt.s32 	%p223, %r46, 22;
	selp.b32 	%r439, %r2293, %r46, %p223;
	setp.lt.s32 	%p224, %r405, %r1750;
	setp.ge.s32 	%p225, %r405, %r1749;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r419, %r1750;
	setp.ge.s32 	%p227, %r419, %r1749;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r406, %r1750;
	setp.ge.s32 	%p229, %r406, %r1749;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r420, %r1750;
	setp.ge.s32 	%p231, %r420, %r1749;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r440, %r2300, %r46, %p223;
	mov.u32 	%r2283, 0;
	// begin inline asm
	{mov.u32 %r2304, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2630, %r2304, 8;
	add.s32 	%r2631, %r2630, -8192;
	or.b32  	%r2308, %r2631, 31;
	mul.wide.s32 	%rd307, %r46, 16;
	mul.wide.s32 	%rd309, %r46, 8;
	mov.u32 	%r7482, %r2283;
	mov.u32 	%r7483, %r2283;
	mov.u32 	%r7484, %r2283;
	mov.u32 	%r7485, %r2283;
	mov.u32 	%r7486, %r2283;
	mov.u32 	%r7487, %r2283;
	mov.u32 	%r7488, %r2283;
	mov.u32 	%r7489, %r2283;
	mov.u32 	%r7490, %r2283;
	mov.u32 	%r7491, %r2283;
	mov.u32 	%r7492, %r2283;
	mov.u32 	%r7493, %r2283;
	mov.u32 	%r7781, %r2217;
	mov.u32 	%r7782, %r2217;
	mov.u32 	%r7779, %r2217;
	mov.u32 	%r7780, %r2217;
	mov.u32 	%r7801, %r2217;
	mov.u32 	%r7802, %r2217;
	mov.u32 	%r7815, %r2217;
	mov.u32 	%r7803, %r2217;
	mov.u32 	%r7817, %r2217;
	mov.u32 	%r7804, %r2217;
	mov.u32 	%r7805, %r2217;
	mov.u32 	%r7806, %r2217;
	mov.u32 	%r7807, %r2217;
	mov.u32 	%r7808, %r2217;
	mov.u32 	%r7809, %r2217;
	mov.u32 	%r7810, %r2217;
	mov.u32 	%r7819, %r2217;
	mov.u32 	%r7820, %r2217;
	mov.u32 	%r7821, %r2217;
	mov.u32 	%r7822, %r2217;
	mov.u32 	%r7823, %r2217;
	mov.u32 	%r7824, %r2217;
	mov.u32 	%r7811, %r2217;
	mov.u32 	%r7812, %r2217;
	mov.u32 	%r7825, %r2217;
	mov.u32 	%r7826, %r2217;
	mov.u32 	%r7813, %r2217;
	mov.u32 	%r7814, %r2217;
	mov.u32 	%r7783, %r2217;
	mov.u32 	%r7784, %r2217;
	mov.u32 	%r7771, %r2217;
	mov.u32 	%r7772, %r2217;
	mov.u32 	%r7773, %r2217;
	mov.u32 	%r7774, %r2217;
	mov.u32 	%r7785, %r2217;
	mov.u32 	%r7786, %r2217;
	mov.u32 	%r7787, %r2217;
	mov.u32 	%r7788, %r2217;
	mov.u32 	%r7789, %r2217;
	mov.u32 	%r7790, %r2217;
	mov.u32 	%r7775, %r2217;
	mov.u32 	%r7776, %r2217;
	mov.u32 	%r7777, %r2217;
	mov.u32 	%r7778, %r2217;
	mov.u32 	%r7791, %r2217;
	mov.u32 	%r7792, %r2217;
	mov.u32 	%r7793, %r2217;
	mov.u32 	%r7794, %r2217;
	mov.u32 	%r7542, %r2217;
	mov.u32 	%r7543, %r2217;
	mov.u32 	%r7841, %r2217;
	mov.u32 	%r7842, %r2217;
	mov.u32 	%r7548, %r2217;
	mov.u32 	%r7549, %r2217;
	mov.u32 	%r7550, %r2217;
	mov.u32 	%r7551, %r2217;
	mov.u32 	%r7843, %r2217;
	mov.u32 	%r7844, %r2217;
	mov.u32 	%r7554, %r2217;
	mov.u32 	%r7845, %r2217;
	mov.u32 	%r7556, %r2217;
	mov.u32 	%r7557, %r2217;
	mov.u32 	%r7846, %r2217;
	mov.u32 	%r7559, %r2217;
	mov.u32 	%r7560, %r2217;
	mov.u32 	%r7561, %r2217;
	mov.u32 	%r7795, %r2217;
	mov.u32 	%r7796, %r2217;
	mov.u32 	%r7564, %r2217;
	mov.u32 	%r7565, %r2217;
	mov.u32 	%r7568, %r2217;
	mov.u32 	%r7569, %r2217;
	mov.u32 	%r7570, %r2217;
	mov.u32 	%r7571, %r2217;
	mov.u32 	%r7572, %r2217;
	mov.u32 	%r7850, %r2217;
	mov.u32 	%r7574, %r2217;
	mov.u32 	%r7575, %r2217;
	mov.u32 	%r7576, %r2217;
	mov.u32 	%r7577, %r2217;
	mov.u32 	%r7578, %r2217;
	mov.u32 	%r7579, %r2217;
	mov.u32 	%r7580, %r2217;
	mov.u32 	%r7852, %r2217;
	mov.u32 	%r7582, %r2217;
	mov.u32 	%r7583, %r2217;
	mov.u32 	%r7584, %r2217;
	mov.u32 	%r7853, %r2217;
	mov.u32 	%r7586, %r2217;
	mov.u32 	%r7587, %r2217;
	mov.u32 	%r7588, %r2217;
	mov.u32 	%r7589, %r2217;
	mov.u32 	%r7590, %r2217;
	mov.u32 	%r7591, %r2217;
	mov.u32 	%r7592, %r2217;
	mov.u32 	%r7854, %r2217;
	mov.u32 	%r7594, %r2217;
	mov.u32 	%r7797, %r2217;
	mov.u32 	%r7596, %r2217;
	mov.u32 	%r7597, %r2217;
	mov.u32 	%r7598, %r2217;
	mov.u32 	%r7599, %r2217;
	mov.u32 	%r7798, %r2217;
	mov.u32 	%r7601, %r2217;
	mov.u32 	%r7602, %r2217;
	mov.u32 	%r7603, %r2217;
	mov.u32 	%r7604, %r2217;
	mov.u32 	%r7605, %r2217;
	mov.u32 	%r7606, %r2217;
	mov.u32 	%r7607, %r2217;
	mov.u32 	%r7608, %r2217;
	mov.u32 	%r7609, %r2217;
	mov.u32 	%r7610, %r2217;
	mov.u32 	%r7611, %r2217;
	mov.u32 	%r7612, %r2217;
	mov.u32 	%r7613, %r2217;
	mov.u32 	%r7614, %r2217;
	mov.u32 	%r7615, %r2217;
	mov.u32 	%r7616, %r2217;
	mov.u32 	%r7617, %r2217;
	mov.u32 	%r7618, %r2217;
	mov.u32 	%r7619, %r2217;
	mov.u32 	%r7620, %r2217;
	mov.u32 	%r7621, %r2217;
	mov.u32 	%r7622, %r2217;
	mov.u32 	%r7623, %r2217;
	mov.u32 	%r7624, %r2217;
	mov.u32 	%r7625, %r2217;
	mov.u32 	%r7626, %r2217;
	mov.u32 	%r7627, %r2217;
	mov.u32 	%r7628, %r2217;
	mov.u32 	%r7629, %r2217;
	mov.u32 	%r7630, %r2217;
	mov.u32 	%r7631, %r2217;
	mov.u32 	%r7632, %r2217;
	mov.u32 	%r7633, %r2217;
	mov.u32 	%r7634, %r2217;
	mov.u32 	%r7635, %r2217;
	mov.u32 	%r7636, %r2217;
	mov.u32 	%r7637, %r2217;
	mov.u32 	%r7638, %r2217;
	mov.u32 	%r7639, %r2217;
	mov.u32 	%r7640, %r2217;
	mov.u32 	%r7641, %r2217;
	mov.u32 	%r7642, %r2217;
	mov.u32 	%r7643, %r2217;
	mov.u32 	%r7644, %r2217;
	mov.u32 	%r7645, %r2217;
	mov.u32 	%r7646, %r2217;
	mov.u32 	%r7647, %r2217;
	mov.u32 	%r7648, %r2217;
	mov.u32 	%r7649, %r2217;
	mov.u32 	%r7650, %r2283;

$L__BB0_332:
	mov.u32 	%r552, %r7854;
	mov.u32 	%r548, %r7589;
	mov.u32 	%r544, %r7853;
	mov.u32 	%r542, %r7583;
	mov.u32 	%r540, %r7852;
	mov.u32 	%r532, %r7850;
	mov.u32 	%r7589, %r7846;
	mov.u32 	%r514, %r7845;
	mov.u32 	%r7583, %r7844;
	mov.u32 	%r511, %r7843;
	mov.u32 	%r506, %r7842;
	mov.u32 	%r505, %r7841;
	sub.s32 	%r7372, %r1736, %r48;
	mov.u32 	%r2319, 1;
	not.b32 	%r2593, %r43;
	mov.u32 	%r2585, -1;
	add.s32 	%r2594, %r1733, %r2593;
	mul.lo.s32 	%r2595, %r2594, %r1735;
	add.s32 	%r2596, %r7650, %r2595;
	not.b32 	%r2598, %r44;
	add.s32 	%r2599, %r1734, %r2598;
	mul.lo.s32 	%r2600, %r2599, %r1735;
	add.s32 	%r2601, %r7650, %r2600;
	add.s32 	%r2602, %r2595, %r2600;
	add.s32 	%r2603, %r2602, %r1736;
	not.b32 	%r2604, %r41;
	add.s32 	%r2605, %r1731, %r2604;
	mad.lo.s32 	%r2606, %r2594, %r1731, %r2605;
	not.b32 	%r2607, %r42;
	add.s32 	%r2608, %r1732, %r2607;
	mad.lo.s32 	%r2609, %r2599, %r1732, %r2608;
	add.s32 	%r2610, %r2606, %r2609;
	shl.b32 	%r2611, %r2610, 1;
	add.s32 	%r2612, %r2603, %r2611;
	add.s32 	%r2613, %r7650, %r2612;
	add.s32 	%r2614, %r7650, %r2602;
	div.s32 	%r2615, %r2613, %r1736;
	neg.s32 	%r2616, %r1736;
	sub.s32 	%r2619, %r48, %r1736;
	sub.s32 	%r2620, %r2606, %r2609;
	shl.b32 	%r2621, %r2620, 1;
	add.s32 	%r2622, %r2621, %r1737;
	mad.lo.s32 	%r2623, %r2615, %r48, %r2622;
	mad.lo.s32 	%r2624, %r2615, %r2619, %r2614;
	div.s32 	%r2625, %r2623, %r1737;
	mul.lo.s32 	%r2626, %r2625, %r1737;
	sub.s32 	%r2629, %r1764, %r1737;
	mov.u32 	%r2403, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2305,%r7652,%r2283,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2311, %r7475, %r2305, %p28;
	// begin inline asm
	{mul.f16x2 %r7736,%r2311,%r7649;
}
	// end inline asm
	selp.b32 	%r2314, %r7479, %r2305, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2314,%r7648;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2317,%r7652,%r2319,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2323, %r7475, %r2317, %p28;
	// begin inline asm
	{mul.f16x2 %r7735,%r2323,%r7647;
}
	// end inline asm
	selp.b32 	%r2326, %r7479, %r2317, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2326,%r7646;
}
	// end inline asm
	mov.u32 	%r2331, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2329,%r7652,%r2331,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2335, %r7475, %r2329, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2335,%r7645;
}
	// end inline asm
	selp.b32 	%r2338, %r7479, %r2329, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2338,%r7644;
}
	// end inline asm
	mov.u32 	%r2343, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2341,%r7652,%r2343,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2347, %r7475, %r2341, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2347,%r7826;
}
	// end inline asm
	selp.b32 	%r2350, %r7479, %r2341, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2350,%r7825;
}
	// end inline asm
	mov.u32 	%r2355, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2353,%r7652,%r2355,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2359, %r7475, %r2353, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2359,%r7643;
}
	// end inline asm
	selp.b32 	%r2362, %r7479, %r2353, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2362,%r7642;
}
	// end inline asm
	mov.u32 	%r2367, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2365,%r7652,%r2367,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2371, %r7475, %r2365, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2371,%r7641;
}
	// end inline asm
	selp.b32 	%r2374, %r7479, %r2365, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2374,%r7640;
}
	// end inline asm
	mov.u32 	%r2379, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2377,%r7652,%r2379,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2383, %r7475, %r2377, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2383,%r7639;
}
	// end inline asm
	selp.b32 	%r2386, %r7479, %r2377, %p28;
	// begin inline asm
	{mul.f16x2 %r7722,%r2386,%r7638;
}
	// end inline asm
	mov.u32 	%r2391, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2389,%r7652,%r2391,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2395, %r7475, %r2389, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2395,%r7637;
}
	// end inline asm
	selp.b32 	%r2398, %r7479, %r2389, %p28;
	// begin inline asm
	{mul.f16x2 %r7721,%r2398,%r7636;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2401,%r7652,%r2403,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2407, %r7475, %r2401, %p28;
	// begin inline asm
	{mul.f16x2 %r7720,%r2407,%r7635;
}
	// end inline asm
	selp.b32 	%r2410, %r7479, %r2401, %p28;
	// begin inline asm
	{mul.f16x2 %r7717,%r2410,%r7634;
}
	// end inline asm
	mov.u32 	%r2415, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2413,%r7652,%r2415,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2419, %r7475, %r2413, %p28;
	// begin inline asm
	{mul.f16x2 %r7719,%r2419,%r7633;
}
	// end inline asm
	selp.b32 	%r2422, %r7479, %r2413, %p28;
	// begin inline asm
	{mul.f16x2 %r7716,%r2422,%r7632;
}
	// end inline asm
	mov.u32 	%r2427, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2425,%r7652,%r2427,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2431, %r7475, %r2425, %p28;
	// begin inline asm
	{mul.f16x2 %r7718,%r2431,%r7631;
}
	// end inline asm
	selp.b32 	%r2434, %r7479, %r2425, %p28;
	// begin inline asm
	{mul.f16x2 %r7715,%r2434,%r7630;
}
	// end inline asm
	mov.u32 	%r2439, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2437,%r7652,%r2439,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2443, %r7475, %r2437, %p28;
	// begin inline asm
	{mul.f16x2 %r7714,%r2443,%r7812;
}
	// end inline asm
	selp.b32 	%r2446, %r7479, %r2437, %p28;
	// begin inline asm
	{mul.f16x2 %r7713,%r2446,%r7811;
}
	// end inline asm
	mov.u32 	%r2451, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2449,%r7652,%r2451,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2455, %r7475, %r2449, %p28;
	// begin inline asm
	{mul.f16x2 %r7712,%r2455,%r7824;
}
	// end inline asm
	selp.b32 	%r2458, %r7479, %r2449, %p28;
	// begin inline asm
	{mul.f16x2 %r7710,%r2458,%r7822;
}
	// end inline asm
	mov.u32 	%r2463, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2461,%r7652,%r2463,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2467, %r7475, %r2461, %p28;
	// begin inline asm
	{mul.f16x2 %r7711,%r2467,%r7823;
}
	// end inline asm
	selp.b32 	%r2470, %r7479, %r2461, %p28;
	// begin inline asm
	{mul.f16x2 %r7709,%r2470,%r7821;
}
	// end inline asm
	mov.u32 	%r2475, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2473,%r7652,%r2475,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2479, %r7475, %r2473, %p28;
	// begin inline asm
	{mul.f16x2 %r7708,%r2479,%r7820;
}
	// end inline asm
	selp.b32 	%r2482, %r7479, %r2473, %p28;
	// begin inline asm
	{mul.f16x2 %r7705,%r2482,%r7819;
}
	// end inline asm
	mov.u32 	%r2487, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2485,%r7652,%r2487,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2491, %r7475, %r2485, %p28;
	// begin inline asm
	{mul.f16x2 %r7707,%r2491,%r7629;
}
	// end inline asm
	selp.b32 	%r2494, %r7479, %r2485, %p28;
	// begin inline asm
	{mul.f16x2 %r7704,%r2494,%r7628;
}
	// end inline asm
	mov.u32 	%r2499, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2497,%r7652,%r2499,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2503, %r7475, %r2497, %p28;
	// begin inline asm
	{mul.f16x2 %r7706,%r2503,%r7627;
}
	// end inline asm
	selp.b32 	%r2506, %r7479, %r2497, %p28;
	// begin inline asm
	{mul.f16x2 %r7703,%r2506,%r7626;
}
	// end inline asm
	mov.u32 	%r2511, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2509,%r7652,%r2511,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2515, %r7475, %r2509, %p28;
	// begin inline asm
	{mul.f16x2 %r7702,%r2515,%r7810;
}
	// end inline asm
	selp.b32 	%r2518, %r7479, %r2509, %p28;
	// begin inline asm
	{mul.f16x2 %r7699,%r2518,%r7808;
}
	// end inline asm
	mov.u32 	%r2523, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2521,%r7652,%r2523,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2527, %r7475, %r2521, %p28;
	// begin inline asm
	{mul.f16x2 %r7701,%r2527,%r7809;
}
	// end inline asm
	selp.b32 	%r2530, %r7479, %r2521, %p28;
	// begin inline asm
	{mul.f16x2 %r7698,%r2530,%r7807;
}
	// end inline asm
	mov.u32 	%r2535, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2533,%r7652,%r2535,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2539, %r7475, %r2533, %p28;
	// begin inline asm
	{mul.f16x2 %r7700,%r2539,%r7625;
}
	// end inline asm
	selp.b32 	%r2542, %r7479, %r2533, %p28;
	// begin inline asm
	{mul.f16x2 %r7697,%r2542,%r7624;
}
	// end inline asm
	mov.u32 	%r2547, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2545,%r7652,%r2547,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2551, %r7475, %r2545, %p28;
	// begin inline asm
	{mul.f16x2 %r7696,%r2551,%r7806;
}
	// end inline asm
	selp.b32 	%r2554, %r7479, %r2545, %p28;
	// begin inline asm
	{mul.f16x2 %r7695,%r2554,%r7805;
}
	// end inline asm
	mov.u32 	%r2559, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2557,%r7652,%r2559,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2563, %r7475, %r2557, %p28;
	// begin inline asm
	{mul.f16x2 %r7694,%r2563,%r7804;
}
	// end inline asm
	selp.b32 	%r2566, %r7479, %r2557, %p28;
	// begin inline asm
	{mul.f16x2 %r7692,%r2566,%r7803;
}
	// end inline asm
	mov.u32 	%r2571, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2569,%r7652,%r2571,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2575, %r7475, %r2569, %p28;
	// begin inline asm
	{mul.f16x2 %r7693,%r2575,%r7817;
}
	// end inline asm
	selp.b32 	%r2578, %r7479, %r2569, %p28;
	// begin inline asm
	{mul.f16x2 %r7691,%r2578,%r7815;
}
	// end inline asm
	mov.u32 	%r2583, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2581,%r7652,%r2583,%r2308,%r2585;
}
	// end inline asm
	selp.b32 	%r2587, %r7475, %r2581, %p28;
	// begin inline asm
	{mul.f16x2 %r7690,%r2587,%r7802;
}
	// end inline asm
	selp.b32 	%r2590, %r7479, %r2581, %p28;
	// begin inline asm
	{mul.f16x2 %r7689,%r2590,%r7801;
}
	// end inline asm
	rem.s32 	%r660, %r2596, %r72;
	rem.s32 	%r661, %r2601, %r7372;
	mad.lo.s32 	%r662, %r2615, %r2616, %r2613;
	sub.s32 	%r663, %r2623, %r2626;
	mad.lo.s32 	%r664, %r2625, %r2629, %r2624;
	ld.param.u64 	%rd300, [%rd1+168];
	cvta.to.global.u64 	%rd301, %rd300;
	shl.b32 	%r2679, %r664, 1;
	mul.wide.s32 	%rd302, %r2679, 4;
	add.s64 	%rd31, %rd301, %rd302;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2882, %r1759, 1;
	setp.lt.s32 	%p239, %r664, %r2882;
	setp.eq.s32 	%p240, %r437, %r46;
	setp.gt.s32 	%p241, %r664, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd31];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r7655, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd31+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r7656, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2682, %r1759, 1;
	setp.lt.s32 	%p234, %r664, %r2682;
	setp.gt.s32 	%p235, %r664, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd31];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r7653, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd31+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r7654, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7655, %f429, %f429; }

	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7656, %f429, %f429; }

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2890, 0;
	mov.u32 	%r2901, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2888,%r7651,%r2890,%r2308,%r2901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2893,%r7655,%r2888;
}
	// end inline asm
	mov.u32 	%r2899, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2897,%r7651,%r2899,%r2308,%r2901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2902,%r7656,%r2897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r2893,%r2902;
}
	// end inline asm
	setp.eq.s32 	%p244, %r438, 0;
	mov.u32 	%r7657, %r7658;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7657, %f433, %f433; }

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r7657;
}
	// end inline asm
	setp.eq.s32 	%p245, %r438, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7658, %f435, %f435; }

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r7658;
}
	// end inline asm
	mov.u32 	%r2923, 2;
	mov.u32 	%r2934, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2921,%r7651,%r2923,%r2308,%r2934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2926,%r7655,%r2921;
}
	// end inline asm
	mov.u32 	%r2932, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2930,%r7651,%r2932,%r2308,%r2934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2935,%r7656,%r2930;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r2926,%r2935;
}
	// end inline asm
	mov.u32 	%r7659, %r7660;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7659, %f437, %f437; }

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r7659;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7660, %f439, %f439; }

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r7660;
}
	// end inline asm
	mov.u32 	%r2956, 4;
	mov.u32 	%r2967, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2954,%r7651,%r2956,%r2308,%r2967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2959,%r7655,%r2954;
}
	// end inline asm
	mov.u32 	%r2965, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2963,%r7651,%r2965,%r2308,%r2967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2968,%r7656,%r2963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r2959,%r2968;
}
	// end inline asm
	mov.u32 	%r7661, %r7662;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7661, %f441, %f441; }

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7661;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7662, %f443, %f443; }

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7662;
}
	// end inline asm
	mov.u32 	%r2989, 6;
	mov.u32 	%r3000, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2987,%r7651,%r2989,%r2308,%r3000;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2992,%r7655,%r2987;
}
	// end inline asm
	mov.u32 	%r2998, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2996,%r7651,%r2998,%r2308,%r3000;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3001,%r7656,%r2996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r2992,%r3001;
}
	// end inline asm
	mov.u32 	%r7663, %r7664;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7663, %f445, %f445; }

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7663;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7664, %f447, %f447; }

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r7664;
}
	// end inline asm
	mov.u32 	%r3022, 8;
	mov.u32 	%r3033, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3020,%r7651,%r3022,%r2308,%r3033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3025,%r7655,%r3020;
}
	// end inline asm
	mov.u32 	%r3031, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3029,%r7651,%r3031,%r2308,%r3033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3034,%r7656,%r3029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r3025,%r3034;
}
	// end inline asm
	mov.u32 	%r7665, %r7666;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7665, %f449, %f449; }

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r7665;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7666, %f451, %f451; }

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r7666;
}
	// end inline asm
	mov.u32 	%r3055, 10;
	mov.u32 	%r3066, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3053,%r7651,%r3055,%r2308,%r3066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3058,%r7655,%r3053;
}
	// end inline asm
	mov.u32 	%r3064, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3062,%r7651,%r3064,%r2308,%r3066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3067,%r7656,%r3062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r3058,%r3067;
}
	// end inline asm
	mov.u32 	%r7667, %r7668;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7667, %f453, %f453; }

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7667;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7668, %f455, %f455; }

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r7668;
}
	// end inline asm
	mov.u32 	%r3088, 12;
	mov.u32 	%r3099, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3086,%r7651,%r3088,%r2308,%r3099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3091,%r7655,%r3086;
}
	// end inline asm
	mov.u32 	%r3097, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3095,%r7651,%r3097,%r2308,%r3099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3100,%r7656,%r3095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7670,%r3091,%r3100;
}
	// end inline asm
	mov.u32 	%r7669, %r7670;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7669, %f457, %f457; }

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r7669;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7670, %f459, %f459; }

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r7670;
}
	// end inline asm
	mov.u32 	%r3121, 14;
	mov.u32 	%r3132, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3119,%r7651,%r3121,%r2308,%r3132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3124,%r7655,%r3119;
}
	// end inline asm
	mov.u32 	%r3130, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3128,%r7651,%r3130,%r2308,%r3132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3133,%r7656,%r3128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7672,%r3124,%r3133;
}
	// end inline asm
	mov.u32 	%r7671, %r7672;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7671, %f461, %f461; }

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r7671;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7672, %f463, %f463; }

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r7672;
}
	// end inline asm
	mov.u32 	%r3154, 16;
	mov.u32 	%r3165, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3152,%r7651,%r3154,%r2308,%r3165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3157,%r7655,%r3152;
}
	// end inline asm
	mov.u32 	%r3163, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3161,%r7651,%r3163,%r2308,%r3165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3166,%r7656,%r3161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7674,%r3157,%r3166;
}
	// end inline asm
	mov.u32 	%r7673, %r7674;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7673, %f465, %f465; }

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r7673;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7674, %f467, %f467; }

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7716,%r7716,%r7674;
}
	// end inline asm
	mov.u32 	%r3187, 18;
	mov.u32 	%r3198, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3185,%r7651,%r3187,%r2308,%r3198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3190,%r7655,%r3185;
}
	// end inline asm
	mov.u32 	%r3196, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3194,%r7651,%r3196,%r2308,%r3198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3199,%r7656,%r3194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7676,%r3190,%r3199;
}
	// end inline asm
	mov.u32 	%r7675, %r7676;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7675, %f469, %f469; }

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7714,%r7714,%r7675;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7676, %f471, %f471; }

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r7676;
}
	// end inline asm
	mov.u32 	%r3220, 20;
	mov.u32 	%r3231, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3218,%r7651,%r3220,%r2308,%r3231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3223,%r7655,%r3218;
}
	// end inline asm
	mov.u32 	%r3229, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3227,%r7651,%r3229,%r2308,%r3231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3232,%r7656,%r3227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7678,%r3223,%r3232;
}
	// end inline asm
	mov.u32 	%r7677, %r7678;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7677, %f473, %f473; }

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r7677;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7678, %f475, %f475; }

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7710,%r7710,%r7678;
}
	// end inline asm
	mov.u32 	%r3253, 22;
	mov.u32 	%r3264, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3251,%r7651,%r3253,%r2308,%r3264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3256,%r7655,%r3251;
}
	// end inline asm
	mov.u32 	%r3262, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3260,%r7651,%r3262,%r2308,%r3264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3265,%r7656,%r3260;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7680,%r3256,%r3265;
}
	// end inline asm
	mov.u32 	%r7679, %r7680;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7679, %f477, %f477; }

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7708,%r7708,%r7679;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7680, %f479, %f479; }

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7705,%r7705,%r7680;
}
	// end inline asm
	mov.u32 	%r3286, 24;
	mov.u32 	%r3297, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3284,%r7651,%r3286,%r2308,%r3297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3289,%r7655,%r3284;
}
	// end inline asm
	mov.u32 	%r3295, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3293,%r7651,%r3295,%r2308,%r3297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3298,%r7656,%r3293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7682,%r3289,%r3298;
}
	// end inline asm
	mov.u32 	%r7681, %r7682;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7681, %f481, %f481; }

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7707,%r7707,%r7681;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7682, %f483, %f483; }

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7704,%r7704,%r7682;
}
	// end inline asm
	mov.u32 	%r3319, 26;
	mov.u32 	%r3330, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3317,%r7651,%r3319,%r2308,%r3330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3322,%r7655,%r3317;
}
	// end inline asm
	mov.u32 	%r3328, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3326,%r7651,%r3328,%r2308,%r3330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3331,%r7656,%r3326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7684,%r3322,%r3331;
}
	// end inline asm
	mov.u32 	%r7683, %r7684;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7683, %f485, %f485; }

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7702,%r7702,%r7683;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7684, %f487, %f487; }

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7699,%r7699,%r7684;
}
	// end inline asm
	mov.u32 	%r3352, 28;
	mov.u32 	%r3363, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3350,%r7651,%r3352,%r2308,%r3363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3355,%r7655,%r3350;
}
	// end inline asm
	mov.u32 	%r3361, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3359,%r7651,%r3361,%r2308,%r3363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3364,%r7656,%r3359;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7686,%r3355,%r3364;
}
	// end inline asm
	mov.u32 	%r7685, %r7686;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7685, %f489, %f489; }

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7701,%r7701,%r7685;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7686, %f491, %f491; }

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7698,%r7698,%r7686;
}
	// end inline asm
	mov.u32 	%r3394, 31;
	mov.u32 	%r3385, 30;
	mov.u32 	%r3396, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3383,%r7651,%r3385,%r2308,%r3396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3388,%r7655,%r3383;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3392,%r7651,%r3394,%r2308,%r3396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3397,%r7656,%r3392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7688,%r3388,%r3397;
}
	// end inline asm
	mov.u32 	%r7687, %r7688;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7687, %f493, %f493; }

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7694,%r7694,%r7687;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7688, %f495, %f495; }

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7692,%r7692,%r7688;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7653, %f423, %f423; }

	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r7654, %f423, %f423; }

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r663, %r1741;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2784,%r7653,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7653,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7653,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7653,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r2802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7653,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7708,%r7708,%r2808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7653,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7693,%r7693,%r2814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2820,%r7654,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2826,%r7654,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7711,%r7711,%r2826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2832,%r7653,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2838,%r7653,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r2838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2844,%r7653,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r2844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r7653,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2856,%r7653,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7705,%r7705,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2862,%r7653,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7691,%r7691,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2868,%r7654,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r7654,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r2874;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2687, %r1741, -2;
	setp.ne.s32 	%p238, %r663, %r2687;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2688,%r7653,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r7714,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2694,%r7653,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r7696,%r2694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2700,%r7654,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2706,%r7654,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2712,%r7654,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r2712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r7654,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r7700,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7654,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r7702,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7654,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7690,%r7690,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7653,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7653,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7695,%r7695,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7654,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r2748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7654,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7715,%r7715,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7654,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7654,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7697,%r7697,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7654,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7699,%r7699,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7654,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7689,%r7689,%r2778;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7841, %r2217;
	mov.u32 	%r7842, %r2217;
	mov.u32 	%r7847, %r2217;
	mov.u32 	%r7848, %r2217;
	mov.u32 	%r7849, %r2217;
	mov.u32 	%r7850, %r2217;
	mov.u32 	%r7851, %r2217;
	mov.u32 	%r7852, %r2217;
	mov.u32 	%r7859, %r2217;
	mov.u32 	%r7860, %r2217;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3415, %r1732, 320;
	add.s32 	%r3416, %r41, -1;
	mul.lo.s32 	%r3417, %r42, 320;
	mad.lo.s32 	%r3418, %r3415, %r3416, %r3417;
	add.s32 	%r3421, %r1811, -64;
	mad.lo.s32 	%r3426, %r3421, %r2205, %r2202;
	add.s32 	%r3427, %r3418, %r3426;
	shl.b32 	%r3428, %r3427, 2;
	mov.u32 	%r3429, _ZN6kernel5shmemE;
	add.s32 	%r3430, %r3429, %r3428;
	shl.b32 	%r3431, %r46, 4;
	add.s32 	%r3432, %r3430, %r3431;
	ld.shared.v4.u32 	{%r7852, %r7850, %r7842, %r7841}, [%r3432];
	shl.b32 	%r3437, %r46, 3;
	add.s32 	%r3438, %r3430, %r3437;
	ld.shared.v2.u32 	{%r7851, %r7849}, [%r3438+512];
	ld.shared.v4.u32 	{%r7860, %r7859, %r7848, %r7847}, [%r3432+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7843, %r2217;
	mov.u32 	%r7844, %r2217;
	mov.u32 	%r7845, %r2217;
	mov.u32 	%r7846, %r2217;
	mov.u32 	%r7853, %r2217;
	mov.u32 	%r7854, %r2217;
	mov.u32 	%r7855, %r2217;
	mov.u32 	%r7856, %r2217;
	mov.u32 	%r7857, %r2217;
	mov.u32 	%r7858, %r2217;
	mov.u32 	%r7861, %r2217;
	mov.u32 	%r7862, %r2217;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3450, %r2605, 384, %r2208;
	add.s32 	%r3453, %r42, -1;
	mad.lo.s32 	%r3454, %r2203, %r3453, %r3450;
	add.s32 	%r3460, %r3454, %r2206;
	shl.b32 	%r3461, %r3460, 2;
	mov.u32 	%r3462, _ZN6kernel5shmemE;
	add.s32 	%r3463, %r3462, %r3461;
	shl.b32 	%r3464, %r46, 4;
	add.s32 	%r3465, %r3463, %r3464;
	ld.shared.v4.u32 	{%r7862, %r7861, %r7857, %r7855}, [%r3465];
	shl.b32 	%r3470, %r46, 3;
	add.s32 	%r3471, %r3463, %r3470;
	ld.shared.v2.u32 	{%r7858, %r7856}, [%r3471+512];
	ld.shared.v4.u32 	{%r7854, %r7853, %r7845, %r7843}, [%r3465+768];
	mov.u32 	%r7844, %r2217;
	mov.u32 	%r7846, %r2217;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7362, %r3471, 512;
	ld.shared.v2.u32 	{%r7846, %r7844}, [%r7362+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2205;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3481, %r1731, %r41;
	mul.lo.s32 	%r3483, %r73, %r42;
	mad.lo.s32 	%r3484, %r3481, 384, %r3483;
	mad.lo.s32 	%r3487, %r2203, %r2205, %r3484;
	mad.lo.s32 	%r3490, %r2201, %r2200, %r3487;
	shl.b32 	%r3491, %r3490, 2;
	mov.u32 	%r3492, _ZN6kernel5shmemE;
	add.s32 	%r3493, %r3492, %r3491;
	shl.b32 	%r3494, %r46, 4;
	add.s32 	%r3495, %r3493, %r3494;
	ld.shared.v4.u32 	{%r7780, %r7779, %r7782, %r7781}, [%r3495];

$L__BB0_416:
	shl.b32 	%r3500, %r42, 8;
	shl.b32 	%r3504, %r1732, 8;
	or.b32  	%r3505, %r3504, 128;
	add.s32 	%r3506, %r41, -1;
	mad.lo.s32 	%r3507, %r3505, %r3506, %r2208;
	add.s32 	%r3508, %r3507, %r3500;
	shl.b32 	%r3509, %r3508, 2;
	mov.u32 	%r3510, _ZN6kernel5shmemE;
	add.s32 	%r3511, %r3510, %r3509;
	setp.ne.s32 	%p281, %r42, %r2205;
	shl.b32 	%r3513, %r46, 4;
	add.s32 	%r926, %r3511, %r3513;
	ld.shared.v4.u32 	{%r7773, %r7771, %r7774, %r7772}, [%r926];
	ld.shared.v4.u32 	{%r7778, %r7777, %r7776, %r7775}, [%r926+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7780, %r7779, %r7782, %r7781}, [%r926+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3527, %r73, %r42;
	sub.s32 	%r3528, %r3527, %r73;
	mad.lo.s32 	%r3531, %r2605, 384, %r3528;
	mad.lo.s32 	%r3534, %r2203, %r2205, %r3531;
	mad.lo.s32 	%r3537, %r2201, %r2200, %r3534;
	shl.b32 	%r3538, %r3537, 2;
	mov.u32 	%r3539, _ZN6kernel5shmemE;
	add.s32 	%r3540, %r3539, %r3538;
	shl.b32 	%r3541, %r46, 4;
	add.s32 	%r955, %r3540, %r3541;
	ld.shared.v4.u32 	{%r7796, %r7795, %r7798, %r7797}, [%r955];
	ld.shared.v4.u32 	{%r7794, %r7792, %r7790, %r7789}, [%r955+512];
	ld.shared.v4.u32 	{%r7793, %r7791, %r7788, %r7786}, [%r955+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7784, %r7783, %r7787, %r7785}, [%r955+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd584, [%rd1+104];
	cvta.to.global.u64 	%rd583, %rd584;
	mad.lo.s32 	%r3559, %r660, %r1734, %r44;
	mul.lo.s32 	%r3560, %r1732, %r3559;
	mul.lo.s32 	%r3561, %r3560, 768;
	mad.lo.s32 	%r3562, %r42, 384, %r3561;
	add.s32 	%r3563, %r3562, -64;
	mul.wide.s32 	%rd305, %r3563, 4;
	add.s64 	%rd306, %rd583, %rd305;
	add.s64 	%rd308, %rd306, %rd307;
	ld.global.v4.u32 	{%r7810, %r7808, %r7802, %r7801}, [%rd308+256];
	ld.global.v4.u32 	{%r7812, %r7811, %r7806, %r7805}, [%rd308+1024];
	add.s64 	%rd33, %rd306, %rd309;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7804, %r7803}, [%rd33];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2205;
	ld.global.v2.u32 	{%r7809, %r7807}, [%rd33+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7814, %r7813}, [%rd33+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd586, [%rd1+104];
	cvta.to.global.u64 	%rd585, %rd586;
	mad.lo.s32 	%r3580, %r661, %r1733, %r43;
	mul.lo.s32 	%r3584, %r3580, %r1812;
	mad.lo.s32 	%r3587, %r2605, 384, %r3584;
	add.s32 	%r3588, %r3587, -64;
	mad.lo.s32 	%r3591, %r1814, %r72, %r3588;
	mul.wide.s32 	%rd310, %r3591, 4;
	add.s64 	%rd311, %rd585, %rd310;
	add.s64 	%rd313, %rd311, %rd307;
	ld.global.v4.u32 	{%r7826, %r7825, %r7823, %r7821}, [%rd313+256];
	ld.global.v4.u32 	{%r7820, %r7819, %r7817, %r7815}, [%rd313+1024];
	add.s64 	%rd315, %rd311, %rd309;
	ld.global.v2.u32 	{%r7824, %r7822}, [%rd315+768];
	ld.global.v2.u32 	{%r7804, %r7803}, [%rd315+1536];

$L__BB0_428:
	add.s32 	%r3604, %r1736, -1;
	setp.ge.s32 	%p288, %r662, %r3604;
	setp.lt.s32 	%p289, %r662, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r663, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3605, %r1737, -2;
	setp.ge.s32 	%p293, %r663, %r3605;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd588, [%rd1+112];
	cvta.to.global.u64 	%rd587, %rd588;
	mad.lo.s32 	%r1050, %r663, %r1736, %r662;
	shl.b32 	%r3606, %r1050, 6;
	mul.wide.s32 	%rd318, %r3606, 4;
	add.s64 	%rd35, %rd587, %rd318;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd320, %rd35, %rd309;
	ld.global.v2.u32 	{%r7846, %r7844}, [%rd320+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3609, %r1736, 5;
	cvt.s64.s32 	%rd321, %r3609;
	cvt.s64.s32 	%rd322, %r46;
	add.s64 	%rd323, %rd321, %rd322;
	shl.b64 	%rd324, %rd323, 3;
	add.s64 	%rd325, %rd35, %rd324;
	ld.global.v2.u32 	{%r7851, %r7849}, [%rd325];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3612, %r1736, 5;
	neg.s32 	%r3613, %r3612;
	cvt.s64.s32 	%rd326, %r3613;
	cvt.s64.s32 	%rd327, %r46;
	add.s64 	%rd328, %rd326, %rd327;
	shl.b64 	%rd329, %rd328, 3;
	add.s64 	%rd330, %rd35, %rd329;
	ld.global.v2.u32 	{%r7858, %r7856}, [%rd330];

$L__BB0_435:
	mad.lo.s32 	%r7373, %r663, %r1736, %r662;
	ld.param.u64 	%rd590, [%rd1+112];
	cvta.to.global.u64 	%rd589, %rd590;
	shl.b32 	%r3616, %r1737, 6;
	shl.b32 	%r3617, %r7373, 7;
	mad.lo.s32 	%r3618, %r3616, %r1736, %r3617;
	mul.wide.s32 	%rd331, %r3618, 4;
	add.s64 	%rd36, %rd589, %rd331;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3619, %r1736, 5;
	cvt.s64.s32 	%rd332, %r3619;
	cvt.s64.s32 	%rd333, %r46;
	add.s64 	%rd334, %rd332, %rd333;
	shl.b64 	%rd335, %rd334, 4;
	add.s64 	%rd336, %rd36, %rd335;
	ld.global.v4.u32 	{%r7852, %r7850, %r7842, %r7841}, [%rd336];
	shl.b32 	%r3624, %r1736, 6;
	add.s32 	%r3625, %r3624, -32;
	cvt.s64.s32 	%rd337, %r3625;
	add.s64 	%rd338, %rd337, %rd333;
	shl.b64 	%rd339, %rd338, 4;
	add.s64 	%rd340, %rd36, %rd339;
	ld.global.v4.u32 	{%r7860, %r7859, %r7848, %r7847}, [%rd340];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3630, %r1736, 5;
	xor.b32  	%r3631, %r3630, -32;
	cvt.s64.s32 	%rd341, %r3631;
	cvt.s64.s32 	%rd342, %r46;
	add.s64 	%rd343, %rd341, %rd342;
	shl.b64 	%rd344, %rd343, 4;
	add.s64 	%rd345, %rd36, %rd344;
	ld.global.v4.u32 	{%r7862, %r7861, %r7857, %r7855}, [%rd345];
	add.s64 	%rd347, %rd36, %rd307;
	ld.global.v4.u32 	{%r7854, %r7853, %r7845, %r7843}, [%rd347];

$L__BB0_439:
	mov.u32 	%r3645, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3641,%r7621,%r439,%r2308,%r3645;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3641;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7621;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3648, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3649,%r7622,%r3648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3652,%r7474,%r3649;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7863,%r7736;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7863,%r7475,%r3649;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3665, 31;
	mov.u32 	%r3688, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3663,%r7863,%r3665,%r2308,%r3688;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3668,%r3652,%r3663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3671,%r7620,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r3671,%r3668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3677,%r7623,%r3674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3680,%r7736,%r3677;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3684,%r7616,%r439,%r2308,%r3688;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3684;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7616;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3691, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3692,%r7617,%r3691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3695,%r7474,%r3692;
}
	// end inline asm
	mov.u32 	%r7864, %r7735;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7864,%r7475,%r3692;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3706,%r7864,%r3665,%r2308,%r3688;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3711,%r3695,%r3706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3714,%r7620,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3717,%r3711,%r3714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3720,%r7618,%r3717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3723,%r7735,%r3720;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3726,%r7621,%r7622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3729,%r7478,%r3726;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7865,%r7734;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7865,%r7479,%r3726;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3742, 31;
	mov.u32 	%r3744, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3740,%r7865,%r3742,%r2308,%r3744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3745,%r3729,%r3740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3748,%r7613,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r3748,%r3745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r7614,%r3751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3757,%r7734,%r3754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3760,%r7616,%r7617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3763,%r7478,%r3760;
}
	// end inline asm
	mov.u32 	%r7866, %r7733;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7866,%r7479,%r3760;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3772,%r7866,%r3742,%r2308,%r3744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3777,%r3763,%r3772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r7613,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r3777,%r3780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3786,%r7611,%r3783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3789,%r7733,%r3786;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3793,%r7607,%r439,%r2308,%r3744;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3793;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7607;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3800, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3801,%r7608,%r3800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3804,%r7474,%r3801;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7867,%r7732;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7867,%r7475,%r3801;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3819, 31;
	mov.u32 	%r3821, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3817,%r7867,%r3819,%r2308,%r3821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3822,%r3804,%r3817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3825,%r7606,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r3825,%r3822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3831,%r7609,%r3828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3834,%r7732,%r3831;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3837,%r7607,%r7608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3840,%r7478,%r3837;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7868,%r7731;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7868,%r7479,%r3837;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3853, 31;
	mov.u32 	%r3876, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3851,%r7868,%r3853,%r2308,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3856,%r3840,%r3851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3859,%r7604,%r7613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r3859,%r3856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3865,%r7605,%r3862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r7731,%r3865;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3872,%r7602,%r439,%r2308,%r3876;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3872;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7602;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3879, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3880,%r7603,%r3879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3883,%r7474,%r3880;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7869,%r7730;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7869,%r7475,%r3880;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3898, 31;
	mov.u32 	%r3921, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3896,%r7869,%r3898,%r2308,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3901,%r3883,%r3896;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3904,%r7601,%r7798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3907,%r3904,%r3901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3910,%r7862,%r3907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3913,%r7730,%r3910;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3917,%r7597,%r439,%r2308,%r3921;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3917;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7597;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3924, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3925,%r7598,%r3924;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3928,%r7474,%r3925;
}
	// end inline asm
	mov.u32 	%r7870, %r7729;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7870,%r7475,%r3925;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3939,%r7870,%r3898,%r2308,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3944,%r3928,%r3939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3947,%r7601,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3950,%r3944,%r3947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3953,%r7599,%r3950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3956,%r7729,%r3953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3959,%r7602,%r7603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3962,%r7478,%r3959;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7871,%r7728;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7871,%r7479,%r3959;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r3975, 31;
	mov.u32 	%r3977, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3973,%r7871,%r3975,%r2308,%r3977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3978,%r3962,%r3973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3981,%r7596,%r7797;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r3981,%r3978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3987,%r7861,%r3984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3990,%r7728,%r3987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3993,%r7597,%r7598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3996,%r7478,%r3993;
}
	// end inline asm
	mov.u32 	%r7872, %r7727;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7872,%r7479,%r3993;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4005,%r7872,%r3975,%r2308,%r3977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4010,%r3996,%r4005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4013,%r7596,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4016,%r4010,%r4013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4019,%r7594,%r4016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4022,%r7727,%r4019;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4026,%r7591,%r439,%r2308,%r3977;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4026;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7591;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4033, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4034,%r7592,%r4033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4037,%r7474,%r4034;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7873,%r7726;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7873,%r7475,%r4034;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4052, 31;
	mov.u32 	%r4075, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4050,%r7873,%r4052,%r2308,%r4075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4055,%r4037,%r4050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4058,%r7590,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4061,%r4058,%r4055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4064,%r552,%r4061;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7726,%r4064;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4071,%r7587,%r439,%r2308,%r4075;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4071;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7587;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4078, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4079,%r7588,%r4078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4082,%r7474,%r4079;
}
	// end inline asm
	mov.u32 	%r7874, %r7725;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7874,%r7475,%r4079;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4093,%r7874,%r4052,%r2308,%r4075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4098,%r4082,%r4093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4101,%r7590,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4104,%r4098,%r4101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4107,%r548,%r4104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7725,%r4107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r7592,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4116,%r7588,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4119,%r4113,%r4116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4122,%r7586,%r4119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4125,%r7724,%r4122;
}
	// end inline asm
	selp.b32 	%r1176, %r7724, %r4125, %p28;
	// begin inline asm
	{sub.f16x2 %r4128,%r7591,%r7592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r7478,%r4128;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7875,%r7723;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7875,%r7479,%r4128;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4144, 31;
	mov.u32 	%r4146, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4142,%r7875,%r4144,%r2308,%r4146;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4147,%r4131,%r4142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4150,%r7584,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4153,%r4150,%r4147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4156,%r544,%r4153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7723,%r4156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4162,%r7587,%r7588;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4165,%r7478,%r4162;
}
	// end inline asm
	mov.u32 	%r7876, %r7722;
	@%p28 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7876,%r7479,%r4162;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4174,%r7876,%r4144,%r2308,%r4146;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4179,%r4165,%r4174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4182,%r7584,%r7613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4185,%r4179,%r4182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4188,%r542,%r4185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r7722,%r4188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4194,%r7591,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r7587,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4200,%r4194,%r4197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4203,%r7582,%r4200;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4206,%r7721,%r4203;
}
	// end inline asm
	selp.b32 	%r1188, %r7721, %r4206, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4210,%r7579,%r439,%r2308,%r4146;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4210;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7579;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4217, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4218,%r7580,%r4217;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4221,%r7474,%r4218;
}
	// end inline asm
	@%p28 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7877,%r7720;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7877,%r7475,%r4218;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4236, 31;
	mov.u32 	%r4259, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4234,%r7877,%r4236,%r2308,%r4259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4239,%r4221,%r4234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4242,%r7578,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4245,%r4242,%r4239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4248,%r540,%r4245;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7720,%r4248;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4255,%r7575,%r439,%r2308,%r4259;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4255;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7575;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4262, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4263,%r7576,%r4262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4266,%r7474,%r4263;
}
	// end inline asm
	mov.u32 	%r7878, %r7719;
	@%p28 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7878,%r7475,%r4263;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4277,%r7878,%r4236,%r2308,%r4259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4282,%r4266,%r4277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4285,%r7578,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4288,%r4282,%r4285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4291,%r7577,%r4288;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4294,%r7719,%r4291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r7580,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4300,%r7576,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4303,%r4297,%r4300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4306,%r7574,%r4303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4309,%r7718,%r4306;
}
	// end inline asm
	selp.b32 	%r1200, %r7718, %r4309, %p28;
	// begin inline asm
	{sub.f16x2 %r4312,%r7579,%r7580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4315,%r7478,%r4312;
}
	// end inline asm
	@%p28 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7879,%r7717;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7879,%r7479,%r4312;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4328, 31;
	mov.u32 	%r4330, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4326,%r7879,%r4328,%r2308,%r4330;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4331,%r4315,%r4326;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4334,%r7572,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4337,%r4334,%r4331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4340,%r532,%r4337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7717,%r4340;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4346,%r7575,%r7576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4349,%r7478,%r4346;
}
	// end inline asm
	mov.u32 	%r7880, %r7716;
	@%p28 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7880,%r7479,%r4346;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4358,%r7880,%r4328,%r2308,%r4330;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4363,%r4349,%r4358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4366,%r7572,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4369,%r4363,%r4366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4372,%r7571,%r4369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4375,%r7716,%r4372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4378,%r7579,%r7607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4381,%r7575,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r4378,%r4381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4387,%r7570,%r4384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4390,%r7715,%r4387;
}
	// end inline asm
	selp.b32 	%r1212, %r7715, %r4390, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4394,%r7568,%r439,%r2308,%r4330;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4394;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7568;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4401, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4402,%r7569,%r4401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4405,%r7474,%r4402;
}
	// end inline asm
	@%p28 bra 	$L__BB0_487;
	bra.uni 	$L__BB0_486;

$L__BB0_487:
	// begin inline asm
	{neg.f16x2 %r7881,%r7714;
}
	// end inline asm
	bra.uni 	$L__BB0_488;

$L__BB0_486:
	// begin inline asm
	{mul.f16x2 %r7881,%r7475,%r4402;
}
	// end inline asm

$L__BB0_488:
	mov.u32 	%r4420, 31;
	mov.u32 	%r4422, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4418,%r7881,%r4420,%r2308,%r4422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4423,%r4405,%r4418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4426,%r7782,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4429,%r4426,%r4423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4432,%r7860,%r4429;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4435,%r7714,%r4432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4438,%r7568,%r7569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4441,%r7478,%r4438;
}
	// end inline asm
	@%p28 bra 	$L__BB0_490;
	bra.uni 	$L__BB0_489;

$L__BB0_490:
	// begin inline asm
	{neg.f16x2 %r7882,%r7713;
}
	// end inline asm
	bra.uni 	$L__BB0_491;

$L__BB0_489:
	// begin inline asm
	{mul.f16x2 %r7882,%r7479,%r4438;
}
	// end inline asm

$L__BB0_491:
	mov.u32 	%r4454, 31;
	mov.u32 	%r4477, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4452,%r7882,%r4454,%r2308,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4457,%r4441,%r4452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4460,%r7781,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r4460,%r4457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4466,%r7859,%r4463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4469,%r7713,%r4466;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4473,%r7564,%r439,%r2308,%r4477;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4473;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7564;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4480, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4481,%r7565,%r4480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4484,%r7474,%r4481;
}
	// end inline asm
	mov.u32 	%r7883, %r7712;
	@%p28 bra 	$L__BB0_493;

	// begin inline asm
	{mul.f16x2 %r7883,%r7475,%r4481;
}
	// end inline asm

$L__BB0_493:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4495,%r7883,%r4454,%r2308,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4500,%r4484,%r4495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4503,%r7793,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4506,%r4500,%r4503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4509,%r7858,%r4506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7712,%r4509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4515,%r7794,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4518,%r7565,%r7796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4521,%r4515,%r4518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4524,%r7857,%r4521;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4527,%r7711,%r4524;
}
	// end inline asm
	selp.b32 	%r1230, %r7711, %r4527, %p28;
	// begin inline asm
	{sub.f16x2 %r4530,%r7564,%r7565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4533,%r7478,%r4530;
}
	// end inline asm
	mov.u32 	%r7884, %r7710;
	@%p28 bra 	$L__BB0_495;

	// begin inline asm
	{mul.f16x2 %r7884,%r7479,%r4530;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4544, 31;
	mov.u32 	%r4582, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4542,%r7884,%r4544,%r2308,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4547,%r4533,%r4542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4550,%r7791,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4553,%r4547,%r4550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4556,%r7856,%r4553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7710,%r4556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4562,%r7792,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4565,%r7564,%r7795;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4568,%r4562,%r4565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4571,%r7855,%r4568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4574,%r7709,%r4571;
}
	// end inline asm
	selp.b32 	%r1236, %r7709, %r4574, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4578,%r7560,%r439,%r2308,%r4582;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4578;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7560;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4585, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r7561,%r4585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4589,%r7474,%r4586;
}
	// end inline asm
	@%p28 bra 	$L__BB0_497;
	bra.uni 	$L__BB0_496;

$L__BB0_497:
	// begin inline asm
	{neg.f16x2 %r7885,%r7708;
}
	// end inline asm
	bra.uni 	$L__BB0_498;

$L__BB0_496:
	// begin inline asm
	{mul.f16x2 %r7885,%r7475,%r4586;
}
	// end inline asm

$L__BB0_498:
	mov.u32 	%r4604, 31;
	mov.u32 	%r4627, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4602,%r7885,%r4604,%r2308,%r4627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4607,%r4589,%r4602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4610,%r7559,%r7793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4613,%r4610,%r4607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4616,%r7854,%r4613;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7708,%r4616;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4623,%r7556,%r439,%r2308,%r4627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4623;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7556;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4630, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4631,%r7557,%r4630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4634,%r7474,%r4631;
}
	// end inline asm
	mov.u32 	%r7886, %r7707;
	@%p28 bra 	$L__BB0_500;

	// begin inline asm
	{mul.f16x2 %r7886,%r7475,%r4631;
}
	// end inline asm

$L__BB0_500:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4645,%r7886,%r4604,%r2308,%r4627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4650,%r4634,%r4645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4653,%r7559,%r7590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4656,%r4650,%r4653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4659,%r7589,%r4656;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7707,%r4659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4665,%r7561,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4668,%r7557,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4671,%r4665,%r4668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4674,%r514,%r4671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4677,%r7706,%r4674;
}
	// end inline asm
	selp.b32 	%r7637, %r7706, %r4677, %p28;
	// begin inline asm
	{sub.f16x2 %r4680,%r7560,%r7561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4683,%r7478,%r4680;
}
	// end inline asm
	@%p28 bra 	$L__BB0_502;
	bra.uni 	$L__BB0_501;

$L__BB0_502:
	// begin inline asm
	{neg.f16x2 %r7887,%r7705;
}
	// end inline asm
	bra.uni 	$L__BB0_503;

$L__BB0_501:
	// begin inline asm
	{mul.f16x2 %r7887,%r7479,%r4680;
}
	// end inline asm

$L__BB0_503:
	mov.u32 	%r4696, 31;
	mov.u32 	%r4698, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4694,%r7887,%r4696,%r2308,%r4698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4699,%r4683,%r4694;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4702,%r7554,%r7791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4705,%r4702,%r4699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4708,%r7853,%r4705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7705,%r4708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4714,%r7556,%r7557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4717,%r7478,%r4714;
}
	// end inline asm
	mov.u32 	%r7888, %r7704;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7888,%r7479,%r4714;
}
	// end inline asm

$L__BB0_505:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4726,%r7888,%r4696,%r2308,%r4698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4731,%r4717,%r4726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4734,%r7554,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4737,%r4731,%r4734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4740,%r7583,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7704,%r4740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4746,%r7560,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4749,%r7556,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r4746,%r4749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r511,%r4752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4758,%r7703,%r4755;
}
	// end inline asm
	selp.b32 	%r7636, %r7703, %r4758, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4762,%r7550,%r439,%r2308,%r4698;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4762;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7550;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4769, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4770,%r7551,%r4769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4773,%r7474,%r4770;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;
	bra.uni 	$L__BB0_506;

$L__BB0_507:
	// begin inline asm
	{neg.f16x2 %r7889,%r7702;
}
	// end inline asm
	bra.uni 	$L__BB0_508;

$L__BB0_506:
	// begin inline asm
	{mul.f16x2 %r7889,%r7475,%r4770;
}
	// end inline asm

$L__BB0_508:
	mov.u32 	%r4788, 31;
	mov.u32 	%r4811, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4786,%r7889,%r4788,%r2308,%r4811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4791,%r4773,%r4786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4794,%r7778,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4797,%r4794,%r4791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4800,%r7852,%r4797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7635,%r7702,%r4800;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4807,%r7548,%r439,%r2308,%r4811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4807;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7548;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4814, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4815,%r7549,%r4814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4818,%r7474,%r4815;
}
	// end inline asm
	mov.u32 	%r7890, %r7701;
	@%p28 bra 	$L__BB0_510;

	// begin inline asm
	{mul.f16x2 %r7890,%r7475,%r4815;
}
	// end inline asm

$L__BB0_510:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4829,%r7890,%r4788,%r2308,%r4811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4834,%r4818,%r4829;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4837,%r7778,%r7578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4840,%r4834,%r4837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4843,%r7851,%r4840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7701,%r4843;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4849,%r7551,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4852,%r7549,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4855,%r4849,%r4852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4858,%r506,%r4855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4861,%r7700,%r4858;
}
	// end inline asm
	selp.b32 	%r7631, %r7700, %r4861, %p28;
	// begin inline asm
	{sub.f16x2 %r4864,%r7550,%r7551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4867,%r7478,%r4864;
}
	// end inline asm
	@%p28 bra 	$L__BB0_512;
	bra.uni 	$L__BB0_511;

$L__BB0_512:
	// begin inline asm
	{neg.f16x2 %r7891,%r7699;
}
	// end inline asm
	bra.uni 	$L__BB0_513;

$L__BB0_511:
	// begin inline asm
	{mul.f16x2 %r7891,%r7479,%r4864;
}
	// end inline asm

$L__BB0_513:
	mov.u32 	%r4880, 31;
	mov.u32 	%r4882, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4878,%r7891,%r4880,%r2308,%r4882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4883,%r4867,%r4878;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4886,%r7777,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r4886,%r4883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4892,%r7850,%r4889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7634,%r7699,%r4892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4898,%r7548,%r7549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4901,%r7478,%r4898;
}
	// end inline asm
	mov.u32 	%r7892, %r7698;
	@%p28 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7892,%r7479,%r4898;
}
	// end inline asm

$L__BB0_515:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4910,%r7892,%r4880,%r2308,%r4882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4915,%r4901,%r4910;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4918,%r7777,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4921,%r4915,%r4918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4924,%r7849,%r4921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7698,%r4924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4930,%r7550,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4933,%r7548,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4936,%r4930,%r4933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4939,%r505,%r4936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4942,%r7697,%r4939;
}
	// end inline asm
	selp.b32 	%r7630, %r7697, %r4942, %p28;
	// begin inline asm
	{sub.f16x2 %r4945,%r7776,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4948,%r7780,%r7549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4951,%r4945,%r4948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4954,%r7848,%r4951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4957,%r7696,%r4954;
}
	// end inline asm
	selp.b32 	%r1285, %r7696, %r4957, %p28;
	// begin inline asm
	{sub.f16x2 %r4960,%r7775,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4963,%r7779,%r7548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4966,%r4960,%r4963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4969,%r7847,%r4966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4972,%r7695,%r4969;
}
	// end inline asm
	selp.b32 	%r1286, %r7695, %r4972, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4976,%r7542,%r439,%r2308,%r4882;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4976;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7542;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4983, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4984,%r7543,%r4983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4987,%r7474,%r4984;
}
	// end inline asm
	mov.u32 	%r7893, %r7694;
	@%p28 bra 	$L__BB0_517;

	// begin inline asm
	{mul.f16x2 %r7893,%r7475,%r4984;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r5000, 31;
	mov.u32 	%r5002, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4998,%r7893,%r5000,%r2308,%r5002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5003,%r4987,%r4998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5006,%r7787,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5009,%r5003,%r5006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5012,%r7846,%r5009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r7694,%r5012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5018,%r7788,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5021,%r7543,%r7790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5024,%r5018,%r5021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5027,%r7845,%r5024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5030,%r7693,%r5027;
}
	// end inline asm
	selp.b32 	%r7627, %r7693, %r5030, %p28;
	// begin inline asm
	{sub.f16x2 %r5033,%r7542,%r7543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5036,%r7478,%r5033;
}
	// end inline asm
	mov.u32 	%r7894, %r7692;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7894,%r7479,%r5033;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5045,%r7894,%r5000,%r2308,%r5002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5050,%r5036,%r5045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5053,%r7785,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5056,%r5050,%r5053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5059,%r7844,%r5056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7628,%r7692,%r5059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5065,%r7786,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5068,%r7542,%r7789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5071,%r5065,%r5068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5074,%r7843,%r5071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5077,%r7691,%r5074;
}
	// end inline asm
	selp.b32 	%r7626, %r7691, %r5077, %p28;
	// begin inline asm
	{sub.f16x2 %r5080,%r7773,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5083,%r7774,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5086,%r5080,%r5083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5089,%r7842,%r5086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5092,%r7690,%r5089;
}
	// end inline asm
	selp.b32 	%r7625, %r7690, %r5092, %p28;
	// begin inline asm
	{sub.f16x2 %r5095,%r7771,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5098,%r7772,%r7542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5101,%r5095,%r5098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5104,%r7841,%r5101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5107,%r7689,%r5104;
}
	// end inline asm
	selp.b32 	%r7624, %r7689, %r5107, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd348, [%rd1+184];
	cvta.to.global.u64 	%rd38, %rd348;
	add.s32 	%r5112, %r1745, -2;
	setp.lt.s32 	%p335, %r662, %r5112;
	add.s32 	%r5113, %r1746, 3;
	setp.ge.s32 	%p336, %r662, %r5113;
	or.pred  	%p337, %p335, %p336;
	add.s32 	%r5114, %r1747, -2;
	setp.lt.s32 	%p338, %r663, %r5114;
	or.pred  	%p339, %p337, %p338;
	add.s32 	%r5115, %r1748, 2;
	setp.ge.s32 	%p340, %r663, %r5115;
	or.pred  	%p341, %p340, %p339;
	setp.lt.s32 	%p342, %r664, %r1742;
	or.pred  	%p343, %p342, %p341;
	mad.lo.s32 	%r5116, %r1744, %r1743, %r1742;
	setp.ge.s32 	%p344, %r664, %r5116;
	or.pred  	%p345, %p343, %p344;
	@%p345 bra 	$L__BB0_761;

	sub.s32 	%r1301, %r664, %r1742;
	rem.s32 	%r5117, %r1301, %r1743;
	setp.ne.s32 	%p346, %r5117, 0;
	@%p346 bra 	$L__BB0_761;

	div.s32 	%r5118, %r1301, %r1743;
	mov.u32 	%r5119, 8;
	sub.s32 	%r5120, %r5119, %r1745;
	add.s32 	%r5121, %r5120, %r1746;
	mul.lo.s32 	%r5122, %r5118, %r5121;
	mov.u32 	%r5123, 4;
	sub.s32 	%r5124, %r5123, %r1745;
	add.s32 	%r1302, %r5124, %r662;
	sub.s32 	%r5125, %r5123, %r1747;
	add.s32 	%r1303, %r5125, %r663;
	mul.lo.s32 	%r1304, %r5122, 3;
	add.s32 	%r5126, %r1302, %r1304;
	add.s32 	%r5127, %r5126, -2;
	sub.s32 	%r5128, %r5119, %r1747;
	add.s32 	%r5129, %r5128, %r1748;
	mul.lo.s32 	%r1305, %r5127, %r5129;
	add.s32 	%r5130, %r1303, %r1305;
	mul.lo.s32 	%r5131, %r5130, %r59;
	sub.s32 	%r1306, %r5131, %r1749;
	@%p28 bra 	$L__BB0_526;

	not.pred 	%p348, %p24;
	@%p348 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3680;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5133, %r1306, %r405;
	mul.wide.s32 	%rd349, %r5133, 4;
	add.s64 	%rd350, %rd38, %rd349;
	st.global.f32 	[%rd350], %f496;

$L__BB0_524:
	not.pred 	%p349, %p26;
	@%p349 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3680;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5135, %r1306, %r406;
	mul.wide.s32 	%rd351, %r5135, 4;
	add.s64 	%rd352, %rd38, %rd351;
	st.global.f32 	[%rd352], %f497;

$L__BB0_526:
	@%p28 bra 	$L__BB0_531;

	not.pred 	%p351, %p25;
	@%p351 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3757;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5137, %r1306, %r419;
	mul.wide.s32 	%rd353, %r5137, 4;
	add.s64 	%rd354, %rd38, %rd353;
	st.global.f32 	[%rd354], %f498;

$L__BB0_529:
	not.pred 	%p352, %p27;
	@%p352 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3757;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5139, %r1306, %r420;
	mul.wide.s32 	%rd355, %r5139, 4;
	add.s64 	%rd356, %rd38, %rd355;
	st.global.f32 	[%rd356], %f499;

$L__BB0_531:
	mov.u32 	%r5140, 8;
	sub.s32 	%r5141, %r5140, %r1745;
	add.s32 	%r5142, %r5141, %r1746;
	add.s32 	%r1307, %r1304, %r5142;
	add.s32 	%r5143, %r1302, %r1307;
	add.s32 	%r5144, %r5143, -2;
	sub.s32 	%r5145, %r5140, %r1747;
	add.s32 	%r5146, %r5145, %r1748;
	mad.lo.s32 	%r5147, %r5144, %r5146, %r1303;
	mul.lo.s32 	%r5148, %r5147, %r59;
	sub.s32 	%r1308, %r5148, %r1749;
	@%p28 bra 	$L__BB0_536;

	not.pred 	%p354, %p24;
	@%p354 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3723;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5150, %r1308, %r405;
	mul.wide.s32 	%rd357, %r5150, 4;
	add.s64 	%rd358, %rd38, %rd357;
	st.global.f32 	[%rd358], %f500;

$L__BB0_534:
	not.pred 	%p355, %p26;
	@%p355 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3723;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5152, %r1308, %r406;
	mul.wide.s32 	%rd359, %r5152, 4;
	add.s64 	%rd360, %rd38, %rd359;
	st.global.f32 	[%rd360], %f501;

$L__BB0_536:
	@%p28 bra 	$L__BB0_541;

	not.pred 	%p357, %p25;
	@%p357 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3789;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5154, %r1308, %r419;
	mul.wide.s32 	%rd361, %r5154, 4;
	add.s64 	%rd362, %rd38, %rd361;
	st.global.f32 	[%rd362], %f502;

$L__BB0_539:
	not.pred 	%p358, %p27;
	@%p358 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3789;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5156, %r1308, %r420;
	mul.wide.s32 	%rd363, %r5156, 4;
	add.s64 	%rd364, %rd38, %rd363;
	st.global.f32 	[%rd364], %f503;

$L__BB0_541:
	add.s32 	%r1309, %r1303, 1;
	add.s32 	%r5157, %r1309, %r1305;
	mul.lo.s32 	%r5158, %r5157, %r59;
	sub.s32 	%r1310, %r5158, %r1749;
	@%p28 bra 	$L__BB0_546;

	not.pred 	%p360, %p24;
	@%p360 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3834;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5160, %r1310, %r405;
	mul.wide.s32 	%rd365, %r5160, 4;
	add.s64 	%rd366, %rd38, %rd365;
	st.global.f32 	[%rd366], %f504;

$L__BB0_544:
	not.pred 	%p361, %p26;
	@%p361 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3834;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5162, %r1310, %r406;
	mul.wide.s32 	%rd367, %r5162, 4;
	add.s64 	%rd368, %rd38, %rd367;
	st.global.f32 	[%rd368], %f505;

$L__BB0_546:
	@%p28 bra 	$L__BB0_551;

	not.pred 	%p363, %p25;
	@%p363 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3868;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5164, %r1310, %r419;
	mul.wide.s32 	%rd369, %r5164, 4;
	add.s64 	%rd370, %rd38, %rd369;
	st.global.f32 	[%rd370], %f506;

$L__BB0_549:
	not.pred 	%p364, %p27;
	@%p364 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3868;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5166, %r1310, %r420;
	mul.wide.s32 	%rd371, %r5166, 4;
	add.s64 	%rd372, %rd38, %rd371;
	st.global.f32 	[%rd372], %f507;

$L__BB0_551:
	add.s32 	%r1311, %r1302, -1;
	add.s32 	%r5167, %r1311, %r1304;
	mov.u32 	%r5168, 8;
	sub.s32 	%r5169, %r5168, %r1747;
	add.s32 	%r5170, %r5169, %r1748;
	mul.lo.s32 	%r1312, %r5167, %r5170;
	add.s32 	%r1313, %r1303, -1;
	add.s32 	%r5171, %r1313, %r1312;
	mul.lo.s32 	%r5172, %r5171, %r59;
	sub.s32 	%r1314, %r5172, %r1749;
	@%p28 bra 	$L__BB0_556;

	not.pred 	%p366, %p24;
	@%p366 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3913;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5174, %r1314, %r405;
	mul.wide.s32 	%rd373, %r5174, 4;
	add.s64 	%rd374, %rd38, %rd373;
	st.global.f32 	[%rd374], %f508;

$L__BB0_554:
	not.pred 	%p367, %p26;
	@%p367 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3913;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5176, %r1314, %r406;
	mul.wide.s32 	%rd375, %r5176, 4;
	add.s64 	%rd376, %rd38, %rd375;
	st.global.f32 	[%rd376], %f509;

$L__BB0_556:
	@%p28 bra 	$L__BB0_561;

	not.pred 	%p369, %p25;
	@%p369 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3990;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5178, %r1314, %r419;
	mul.wide.s32 	%rd377, %r5178, 4;
	add.s64 	%rd378, %rd38, %rd377;
	st.global.f32 	[%rd378], %f510;

$L__BB0_559:
	not.pred 	%p370, %p27;
	@%p370 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3990;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5180, %r1314, %r420;
	mul.wide.s32 	%rd379, %r5180, 4;
	add.s64 	%rd380, %rd38, %rd379;
	st.global.f32 	[%rd380], %f511;

$L__BB0_561:
	mov.u32 	%r5181, 8;
	sub.s32 	%r5182, %r5181, %r1747;
	add.s32 	%r5183, %r5182, %r1748;
	add.s32 	%r5184, %r1311, %r1307;
	mul.lo.s32 	%r1315, %r5184, %r5183;
	add.s32 	%r5185, %r1313, %r1315;
	mul.lo.s32 	%r5186, %r5185, %r59;
	sub.s32 	%r1316, %r5186, %r1749;
	@%p28 bra 	$L__BB0_566;

	not.pred 	%p372, %p24;
	@%p372 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5188, %r1316, %r405;
	mul.wide.s32 	%rd381, %r5188, 4;
	add.s64 	%rd382, %rd38, %rd381;
	st.global.f32 	[%rd382], %f512;

$L__BB0_564:
	not.pred 	%p373, %p26;
	@%p373 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5190, %r1316, %r406;
	mul.wide.s32 	%rd383, %r5190, 4;
	add.s64 	%rd384, %rd38, %rd383;
	st.global.f32 	[%rd384], %f513;

$L__BB0_566:
	@%p28 bra 	$L__BB0_571;

	not.pred 	%p375, %p25;
	@%p375 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4022;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5192, %r1316, %r419;
	mul.wide.s32 	%rd385, %r5192, 4;
	add.s64 	%rd386, %rd38, %rd385;
	st.global.f32 	[%rd386], %f514;

$L__BB0_569:
	not.pred 	%p376, %p27;
	@%p376 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4022;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5194, %r1316, %r420;
	mul.wide.s32 	%rd387, %r5194, 4;
	add.s64 	%rd388, %rd38, %rd387;
	st.global.f32 	[%rd388], %f515;

$L__BB0_571:
	add.s32 	%r5195, %r1303, %r1312;
	mul.lo.s32 	%r5196, %r5195, %r59;
	sub.s32 	%r1317, %r5196, %r1749;
	@%p28 bra 	$L__BB0_576;

	not.pred 	%p378, %p24;
	@%p378 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r5198, %r1317, %r405;
	mul.wide.s32 	%rd389, %r5198, 4;
	add.s64 	%rd390, %rd38, %rd389;
	st.global.f32 	[%rd390], %f516;

$L__BB0_574:
	not.pred 	%p379, %p26;
	@%p379 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r5200, %r1317, %r406;
	mul.wide.s32 	%rd391, %r5200, 4;
	add.s64 	%rd392, %rd38, %rd391;
	st.global.f32 	[%rd392], %f517;

$L__BB0_576:
	@%p28 bra 	$L__BB0_581;

	not.pred 	%p381, %p25;
	@%p381 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r5202, %r1317, %r419;
	mul.wide.s32 	%rd393, %r5202, 4;
	add.s64 	%rd394, %rd38, %rd393;
	st.global.f32 	[%rd394], %f518;

$L__BB0_579:
	not.pred 	%p382, %p27;
	@%p382 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r5204, %r1317, %r420;
	mul.wide.s32 	%rd395, %r5204, 4;
	add.s64 	%rd396, %rd38, %rd395;
	st.global.f32 	[%rd396], %f519;

$L__BB0_581:
	add.s32 	%r5205, %r1303, %r1315;
	mul.lo.s32 	%r5206, %r5205, %r59;
	sub.s32 	%r1318, %r5206, %r1749;
	@%p28 bra 	$L__BB0_586;

	not.pred 	%p384, %p24;
	@%p384 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r5208, %r1318, %r405;
	mul.wide.s32 	%rd397, %r5208, 4;
	add.s64 	%rd398, %rd38, %rd397;
	st.global.f32 	[%rd398], %f520;

$L__BB0_584:
	not.pred 	%p385, %p26;
	@%p385 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r5210, %r1318, %r406;
	mul.wide.s32 	%rd399, %r5210, 4;
	add.s64 	%rd400, %rd38, %rd399;
	st.global.f32 	[%rd400], %f521;

$L__BB0_586:
	@%p28 bra 	$L__BB0_591;

	not.pred 	%p387, %p25;
	@%p387 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7646;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r5212, %r1318, %r419;
	mul.wide.s32 	%rd401, %r5212, 4;
	add.s64 	%rd402, %rd38, %rd401;
	st.global.f32 	[%rd402], %f522;

$L__BB0_589:
	not.pred 	%p388, %p27;
	@%p388 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7646;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r5214, %r1318, %r420;
	mul.wide.s32 	%rd403, %r5214, 4;
	add.s64 	%rd404, %rd38, %rd403;
	st.global.f32 	[%rd404], %f523;

$L__BB0_591:
	mov.u32 	%r5215, 8;
	sub.s32 	%r5216, %r5215, %r1745;
	add.s32 	%r5217, %r5216, %r1746;
	add.s32 	%r1319, %r1307, %r5217;
	add.s32 	%r5218, %r1311, %r1319;
	sub.s32 	%r5219, %r5215, %r1747;
	add.s32 	%r5220, %r5219, %r1748;
	mul.lo.s32 	%r1320, %r5218, %r5220;
	add.s32 	%r5221, %r1303, %r1320;
	mul.lo.s32 	%r5222, %r5221, %r59;
	sub.s32 	%r1321, %r5222, %r1749;
	@%p28 bra 	$L__BB0_596;

	not.pred 	%p390, %p24;
	@%p390 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1176;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r5224, %r1321, %r405;
	mul.wide.s32 	%rd405, %r5224, 4;
	add.s64 	%rd406, %rd38, %rd405;
	st.global.f32 	[%rd406], %f524;

$L__BB0_594:
	not.pred 	%p391, %p26;
	@%p391 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1176;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r5226, %r1321, %r406;
	mul.wide.s32 	%rd407, %r5226, 4;
	add.s64 	%rd408, %rd38, %rd407;
	st.global.f32 	[%rd408], %f525;

$L__BB0_596:
	@%p28 bra 	$L__BB0_601;

	not.pred 	%p393, %p25;
	@%p393 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1188;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r5228, %r1321, %r419;
	mul.wide.s32 	%rd409, %r5228, 4;
	add.s64 	%rd410, %rd38, %rd409;
	st.global.f32 	[%rd410], %f526;

$L__BB0_599:
	not.pred 	%p394, %p27;
	@%p394 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1188;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r5230, %r1321, %r420;
	mul.wide.s32 	%rd411, %r5230, 4;
	add.s64 	%rd412, %rd38, %rd411;
	st.global.f32 	[%rd412], %f527;

$L__BB0_601:
	add.s32 	%r7374, %r1303, 1;
	add.s32 	%r5231, %r7374, %r1312;
	mul.lo.s32 	%r5232, %r5231, %r59;
	sub.s32 	%r1322, %r5232, %r1749;
	@%p28 bra 	$L__BB0_606;

	not.pred 	%p396, %p24;
	@%p396 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r5234, %r1322, %r405;
	mul.wide.s32 	%rd413, %r5234, 4;
	add.s64 	%rd414, %rd38, %rd413;
	st.global.f32 	[%rd414], %f528;

$L__BB0_604:
	not.pred 	%p397, %p26;
	@%p397 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r5236, %r1322, %r406;
	mul.wide.s32 	%rd415, %r5236, 4;
	add.s64 	%rd416, %rd38, %rd415;
	st.global.f32 	[%rd416], %f529;

$L__BB0_606:
	@%p28 bra 	$L__BB0_611;

	not.pred 	%p399, %p25;
	@%p399 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r5238, %r1322, %r419;
	mul.wide.s32 	%rd417, %r5238, 4;
	add.s64 	%rd418, %rd38, %rd417;
	st.global.f32 	[%rd418], %f530;

$L__BB0_609:
	not.pred 	%p400, %p27;
	@%p400 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r5240, %r1322, %r420;
	mul.wide.s32 	%rd419, %r5240, 4;
	add.s64 	%rd420, %rd38, %rd419;
	st.global.f32 	[%rd420], %f531;

$L__BB0_611:
	add.s32 	%r7375, %r1303, 1;
	add.s32 	%r5241, %r7375, %r1315;
	mul.lo.s32 	%r5242, %r5241, %r59;
	sub.s32 	%r1323, %r5242, %r1749;
	@%p28 bra 	$L__BB0_616;

	not.pred 	%p402, %p24;
	@%p402 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4294;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r5244, %r1323, %r405;
	mul.wide.s32 	%rd421, %r5244, 4;
	add.s64 	%rd422, %rd38, %rd421;
	st.global.f32 	[%rd422], %f532;

$L__BB0_614:
	not.pred 	%p403, %p26;
	@%p403 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4294;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r5246, %r1323, %r406;
	mul.wide.s32 	%rd423, %r5246, 4;
	add.s64 	%rd424, %rd38, %rd423;
	st.global.f32 	[%rd424], %f533;

$L__BB0_616:
	@%p28 bra 	$L__BB0_621;

	not.pred 	%p405, %p25;
	@%p405 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4375;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r5248, %r1323, %r419;
	mul.wide.s32 	%rd425, %r5248, 4;
	add.s64 	%rd426, %rd38, %rd425;
	st.global.f32 	[%rd426], %f534;

$L__BB0_619:
	not.pred 	%p406, %p27;
	@%p406 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4375;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r5250, %r1323, %r420;
	mul.wide.s32 	%rd427, %r5250, 4;
	add.s64 	%rd428, %rd38, %rd427;
	st.global.f32 	[%rd428], %f535;

$L__BB0_621:
	add.s32 	%r7376, %r1303, 1;
	add.s32 	%r5251, %r7376, %r1320;
	mul.lo.s32 	%r5252, %r5251, %r59;
	sub.s32 	%r1324, %r5252, %r1749;
	@%p28 bra 	$L__BB0_626;

	not.pred 	%p408, %p24;
	@%p408 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1200;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r5254, %r1324, %r405;
	mul.wide.s32 	%rd429, %r5254, 4;
	add.s64 	%rd430, %rd38, %rd429;
	st.global.f32 	[%rd430], %f536;

$L__BB0_624:
	not.pred 	%p409, %p26;
	@%p409 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1200;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r5256, %r1324, %r406;
	mul.wide.s32 	%rd431, %r5256, 4;
	add.s64 	%rd432, %rd38, %rd431;
	st.global.f32 	[%rd432], %f537;

$L__BB0_626:
	@%p28 bra 	$L__BB0_631;

	not.pred 	%p411, %p25;
	@%p411 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1212;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r5258, %r1324, %r419;
	mul.wide.s32 	%rd433, %r5258, 4;
	add.s64 	%rd434, %rd38, %rd433;
	st.global.f32 	[%rd434], %f538;

$L__BB0_629:
	not.pred 	%p412, %p27;
	@%p412 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1212;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r5260, %r1324, %r420;
	mul.wide.s32 	%rd435, %r5260, 4;
	add.s64 	%rd436, %rd38, %rd435;
	st.global.f32 	[%rd436], %f539;

$L__BB0_631:
	add.s32 	%r1325, %r1303, 2;
	add.s32 	%r5261, %r1325, %r1312;
	mul.lo.s32 	%r5262, %r5261, %r59;
	sub.s32 	%r1326, %r5262, %r1749;
	@%p28 bra 	$L__BB0_636;

	not.pred 	%p414, %p24;
	@%p414 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4435;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r5264, %r1326, %r405;
	mul.wide.s32 	%rd437, %r5264, 4;
	add.s64 	%rd438, %rd38, %rd437;
	st.global.f32 	[%rd438], %f540;

$L__BB0_634:
	not.pred 	%p415, %p26;
	@%p415 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4435;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r5266, %r1326, %r406;
	mul.wide.s32 	%rd439, %r5266, 4;
	add.s64 	%rd440, %rd38, %rd439;
	st.global.f32 	[%rd440], %f541;

$L__BB0_636:
	@%p28 bra 	$L__BB0_641;

	not.pred 	%p417, %p25;
	@%p417 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4469;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r5268, %r1326, %r419;
	mul.wide.s32 	%rd441, %r5268, 4;
	add.s64 	%rd442, %rd38, %rd441;
	st.global.f32 	[%rd442], %f542;

$L__BB0_639:
	not.pred 	%p418, %p27;
	@%p418 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4469;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r5270, %r1326, %r420;
	mul.wide.s32 	%rd443, %r5270, 4;
	add.s64 	%rd444, %rd38, %rd443;
	st.global.f32 	[%rd444], %f543;

$L__BB0_641:
	add.s32 	%r7377, %r1303, -1;
	mov.u32 	%r5271, 8;
	sub.s32 	%r5272, %r5271, %r1747;
	add.s32 	%r5273, %r5272, %r1748;
	mul.lo.s32 	%r1327, %r5143, %r5273;
	add.s32 	%r5275, %r7377, %r1327;
	mul.lo.s32 	%r5276, %r5275, %r59;
	sub.s32 	%r1328, %r5276, %r1749;
	@%p28 bra 	$L__BB0_646;

	not.pred 	%p420, %p24;
	@%p420 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r5278, %r1328, %r405;
	mul.wide.s32 	%rd445, %r5278, 4;
	add.s64 	%rd446, %rd38, %rd445;
	st.global.f32 	[%rd446], %f544;

$L__BB0_644:
	not.pred 	%p421, %p26;
	@%p421 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r5280, %r1328, %r406;
	mul.wide.s32 	%rd447, %r5280, 4;
	add.s64 	%rd448, %rd38, %rd447;
	st.global.f32 	[%rd448], %f545;

$L__BB0_646:
	@%p28 bra 	$L__BB0_651;

	not.pred 	%p423, %p25;
	@%p423 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r5282, %r1328, %r419;
	mul.wide.s32 	%rd449, %r5282, 4;
	add.s64 	%rd450, %rd38, %rd449;
	st.global.f32 	[%rd450], %f546;

$L__BB0_649:
	not.pred 	%p424, %p27;
	@%p424 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r5284, %r1328, %r420;
	mul.wide.s32 	%rd451, %r5284, 4;
	add.s64 	%rd452, %rd38, %rd451;
	st.global.f32 	[%rd452], %f547;

$L__BB0_651:
	mov.u32 	%r7382, 8;
	sub.s32 	%r7381, %r7382, %r1745;
	add.s32 	%r7380, %r7381, %r1746;
	add.s32 	%r7379, %r1307, %r7380;
	add.s32 	%r7378, %r1303, -1;
	mov.u32 	%r5285, 8;
	sub.s32 	%r5286, %r5285, %r1747;
	add.s32 	%r5287, %r5286, %r1748;
	add.s32 	%r5288, %r1302, %r7379;
	mul.lo.s32 	%r1329, %r5288, %r5287;
	add.s32 	%r5289, %r7378, %r1329;
	mul.lo.s32 	%r5290, %r5289, %r59;
	sub.s32 	%r1330, %r5290, %r1749;
	@%p28 bra 	$L__BB0_656;

	not.pred 	%p426, %p24;
	@%p426 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1230;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r5292, %r1330, %r405;
	mul.wide.s32 	%rd453, %r5292, 4;
	add.s64 	%rd454, %rd38, %rd453;
	st.global.f32 	[%rd454], %f548;

$L__BB0_654:
	not.pred 	%p427, %p26;
	@%p427 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1230;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r5294, %r1330, %r406;
	mul.wide.s32 	%rd455, %r5294, 4;
	add.s64 	%rd456, %rd38, %rd455;
	st.global.f32 	[%rd456], %f549;

$L__BB0_656:
	@%p28 bra 	$L__BB0_661;

	not.pred 	%p429, %p25;
	@%p429 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1236;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r5296, %r1330, %r419;
	mul.wide.s32 	%rd457, %r5296, 4;
	add.s64 	%rd458, %rd38, %rd457;
	st.global.f32 	[%rd458], %f550;

$L__BB0_659:
	not.pred 	%p430, %p27;
	@%p430 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1236;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r5298, %r1330, %r420;
	mul.wide.s32 	%rd459, %r5298, 4;
	add.s64 	%rd460, %rd38, %rd459;
	st.global.f32 	[%rd460], %f551;

$L__BB0_661:
	mov.u32 	%r5299, 8;
	sub.s32 	%r5300, %r5299, %r1747;
	add.s32 	%r5301, %r5300, %r1748;
	mul.lo.s32 	%r1331, %r5126, %r5301;
	add.s32 	%r5303, %r1303, %r1331;
	mul.lo.s32 	%r5304, %r5303, %r59;
	sub.s32 	%r1332, %r5304, %r1749;
	@%p28 bra 	$L__BB0_666;

	not.pred 	%p432, %p24;
	@%p432 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r5306, %r1332, %r405;
	mul.wide.s32 	%rd461, %r5306, 4;
	add.s64 	%rd462, %rd38, %rd461;
	st.global.f32 	[%rd462], %f552;

$L__BB0_664:
	not.pred 	%p433, %p26;
	@%p433 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r5308, %r1332, %r406;
	mul.wide.s32 	%rd463, %r5308, 4;
	add.s64 	%rd464, %rd38, %rd463;
	st.global.f32 	[%rd464], %f553;

$L__BB0_666:
	@%p28 bra 	$L__BB0_671;

	not.pred 	%p435, %p25;
	@%p435 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r5310, %r1332, %r419;
	mul.wide.s32 	%rd465, %r5310, 4;
	add.s64 	%rd466, %rd38, %rd465;
	st.global.f32 	[%rd466], %f554;

$L__BB0_669:
	not.pred 	%p436, %p27;
	@%p436 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r5312, %r1332, %r420;
	mul.wide.s32 	%rd467, %r5312, 4;
	add.s64 	%rd468, %rd38, %rd467;
	st.global.f32 	[%rd468], %f555;

$L__BB0_671:
	add.s32 	%r5313, %r1303, %r1327;
	mul.lo.s32 	%r5314, %r5313, %r59;
	sub.s32 	%r1333, %r5314, %r1749;
	@%p28 bra 	$L__BB0_676;

	not.pred 	%p438, %p24;
	@%p438 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r5316, %r1333, %r405;
	mul.wide.s32 	%rd469, %r5316, 4;
	add.s64 	%rd470, %rd38, %rd469;
	st.global.f32 	[%rd470], %f556;

$L__BB0_674:
	not.pred 	%p439, %p26;
	@%p439 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r5318, %r1333, %r406;
	mul.wide.s32 	%rd471, %r5318, 4;
	add.s64 	%rd472, %rd38, %rd471;
	st.global.f32 	[%rd472], %f557;

$L__BB0_676:
	@%p28 bra 	$L__BB0_681;

	not.pred 	%p441, %p25;
	@%p441 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r5320, %r1333, %r419;
	mul.wide.s32 	%rd473, %r5320, 4;
	add.s64 	%rd474, %rd38, %rd473;
	st.global.f32 	[%rd474], %f558;

$L__BB0_679:
	not.pred 	%p442, %p27;
	@%p442 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r5322, %r1333, %r420;
	mul.wide.s32 	%rd475, %r5322, 4;
	add.s64 	%rd476, %rd38, %rd475;
	st.global.f32 	[%rd476], %f559;

$L__BB0_681:
	add.s32 	%r5323, %r1303, %r1329;
	mul.lo.s32 	%r5324, %r5323, %r59;
	sub.s32 	%r1334, %r5324, %r1749;
	@%p28 bra 	$L__BB0_686;

	not.pred 	%p444, %p24;
	@%p444 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r5326, %r1334, %r405;
	mul.wide.s32 	%rd477, %r5326, 4;
	add.s64 	%rd478, %rd38, %rd477;
	st.global.f32 	[%rd478], %f560;

$L__BB0_684:
	not.pred 	%p445, %p26;
	@%p445 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r5328, %r1334, %r406;
	mul.wide.s32 	%rd479, %r5328, 4;
	add.s64 	%rd480, %rd38, %rd479;
	st.global.f32 	[%rd480], %f561;

$L__BB0_686:
	@%p28 bra 	$L__BB0_691;

	not.pred 	%p447, %p25;
	@%p447 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r5330, %r1334, %r419;
	mul.wide.s32 	%rd481, %r5330, 4;
	add.s64 	%rd482, %rd38, %rd481;
	st.global.f32 	[%rd482], %f562;

$L__BB0_689:
	not.pred 	%p448, %p27;
	@%p448 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r5332, %r1334, %r420;
	mul.wide.s32 	%rd483, %r5332, 4;
	add.s64 	%rd484, %rd38, %rd483;
	st.global.f32 	[%rd484], %f563;

$L__BB0_691:
	add.s32 	%r7383, %r1303, 1;
	add.s32 	%r5333, %r7383, %r1331;
	mul.lo.s32 	%r5334, %r5333, %r59;
	sub.s32 	%r1335, %r5334, %r1749;
	@%p28 bra 	$L__BB0_696;

	not.pred 	%p450, %p24;
	@%p450 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r5336, %r1335, %r405;
	mul.wide.s32 	%rd485, %r5336, 4;
	add.s64 	%rd486, %rd38, %rd485;
	st.global.f32 	[%rd486], %f564;

$L__BB0_694:
	not.pred 	%p451, %p26;
	@%p451 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r5338, %r1335, %r406;
	mul.wide.s32 	%rd487, %r5338, 4;
	add.s64 	%rd488, %rd38, %rd487;
	st.global.f32 	[%rd488], %f565;

$L__BB0_696:
	@%p28 bra 	$L__BB0_701;

	not.pred 	%p453, %p25;
	@%p453 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r5340, %r1335, %r419;
	mul.wide.s32 	%rd489, %r5340, 4;
	add.s64 	%rd490, %rd38, %rd489;
	st.global.f32 	[%rd490], %f566;

$L__BB0_699:
	not.pred 	%p454, %p27;
	@%p454 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r5342, %r1335, %r420;
	mul.wide.s32 	%rd491, %r5342, 4;
	add.s64 	%rd492, %rd38, %rd491;
	st.global.f32 	[%rd492], %f567;

$L__BB0_701:
	add.s32 	%r7384, %r1303, 1;
	add.s32 	%r5343, %r7384, %r1327;
	mul.lo.s32 	%r5344, %r5343, %r59;
	sub.s32 	%r1336, %r5344, %r1749;
	@%p28 bra 	$L__BB0_706;

	not.pred 	%p456, %p24;
	@%p456 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r5346, %r1336, %r405;
	mul.wide.s32 	%rd493, %r5346, 4;
	add.s64 	%rd494, %rd38, %rd493;
	st.global.f32 	[%rd494], %f568;

$L__BB0_704:
	not.pred 	%p457, %p26;
	@%p457 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r5348, %r1336, %r406;
	mul.wide.s32 	%rd495, %r5348, 4;
	add.s64 	%rd496, %rd38, %rd495;
	st.global.f32 	[%rd496], %f569;

$L__BB0_706:
	@%p28 bra 	$L__BB0_711;

	not.pred 	%p459, %p25;
	@%p459 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r5350, %r1336, %r419;
	mul.wide.s32 	%rd497, %r5350, 4;
	add.s64 	%rd498, %rd38, %rd497;
	st.global.f32 	[%rd498], %f570;

$L__BB0_709:
	not.pred 	%p460, %p27;
	@%p460 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r5352, %r1336, %r420;
	mul.wide.s32 	%rd499, %r5352, 4;
	add.s64 	%rd500, %rd38, %rd499;
	st.global.f32 	[%rd500], %f571;

$L__BB0_711:
	add.s32 	%r7385, %r1303, 1;
	add.s32 	%r5353, %r7385, %r1329;
	mul.lo.s32 	%r5354, %r5353, %r59;
	sub.s32 	%r1337, %r5354, %r1749;
	@%p28 bra 	$L__BB0_716;

	not.pred 	%p462, %p24;
	@%p462 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r5356, %r1337, %r405;
	mul.wide.s32 	%rd501, %r5356, 4;
	add.s64 	%rd502, %rd38, %rd501;
	st.global.f32 	[%rd502], %f572;

$L__BB0_714:
	not.pred 	%p463, %p26;
	@%p463 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r5358, %r1337, %r406;
	mul.wide.s32 	%rd503, %r5358, 4;
	add.s64 	%rd504, %rd38, %rd503;
	st.global.f32 	[%rd504], %f573;

$L__BB0_716:
	@%p28 bra 	$L__BB0_721;

	not.pred 	%p465, %p25;
	@%p465 bra 	$L__BB0_719;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r5360, %r1337, %r419;
	mul.wide.s32 	%rd505, %r5360, 4;
	add.s64 	%rd506, %rd38, %rd505;
	st.global.f32 	[%rd506], %f574;

$L__BB0_719:
	not.pred 	%p466, %p27;
	@%p466 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r5362, %r1337, %r420;
	mul.wide.s32 	%rd507, %r5362, 4;
	add.s64 	%rd508, %rd38, %rd507;
	st.global.f32 	[%rd508], %f575;

$L__BB0_721:
	add.s32 	%r5363, %r1325, %r1329;
	mul.lo.s32 	%r5364, %r5363, %r59;
	sub.s32 	%r1338, %r5364, %r1749;
	@%p28 bra 	$L__BB0_726;

	not.pred 	%p468, %p24;
	@%p468 bra 	$L__BB0_724;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1285;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r5366, %r1338, %r405;
	mul.wide.s32 	%rd509, %r5366, 4;
	add.s64 	%rd510, %rd38, %rd509;
	st.global.f32 	[%rd510], %f576;

$L__BB0_724:
	not.pred 	%p469, %p26;
	@%p469 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1285;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r5368, %r1338, %r406;
	mul.wide.s32 	%rd511, %r5368, 4;
	add.s64 	%rd512, %rd38, %rd511;
	st.global.f32 	[%rd512], %f577;

$L__BB0_726:
	@%p28 bra 	$L__BB0_731;

	not.pred 	%p471, %p25;
	@%p471 bra 	$L__BB0_729;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1286;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r5370, %r1338, %r419;
	mul.wide.s32 	%rd513, %r5370, 4;
	add.s64 	%rd514, %rd38, %rd513;
	st.global.f32 	[%rd514], %f578;

$L__BB0_729:
	not.pred 	%p472, %p27;
	@%p472 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1286;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r5372, %r1338, %r420;
	mul.wide.s32 	%rd515, %r5372, 4;
	add.s64 	%rd516, %rd38, %rd515;
	st.global.f32 	[%rd516], %f579;

$L__BB0_731:
	add.s32 	%r1339, %r1302, 1;
	add.s32 	%r5373, %r1339, %r1307;
	mov.u32 	%r5374, 8;
	sub.s32 	%r5375, %r5374, %r1747;
	add.s32 	%r5376, %r5375, %r1748;
	mad.lo.s32 	%r5377, %r5373, %r5376, %r1303;
	mul.lo.s32 	%r5378, %r5377, %r59;
	sub.s32 	%r1340, %r5378, %r1749;
	@%p28 bra 	$L__BB0_736;

	not.pred 	%p474, %p24;
	@%p474 bra 	$L__BB0_734;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r5380, %r1340, %r405;
	mul.wide.s32 	%rd517, %r5380, 4;
	add.s64 	%rd518, %rd38, %rd517;
	st.global.f32 	[%rd518], %f580;

$L__BB0_734:
	not.pred 	%p475, %p26;
	@%p475 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r5382, %r1340, %r406;
	mul.wide.s32 	%rd519, %r5382, 4;
	add.s64 	%rd520, %rd38, %rd519;
	st.global.f32 	[%rd520], %f581;

$L__BB0_736:
	@%p28 bra 	$L__BB0_741;

	not.pred 	%p477, %p25;
	@%p477 bra 	$L__BB0_739;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r5384, %r1340, %r419;
	mul.wide.s32 	%rd521, %r5384, 4;
	add.s64 	%rd522, %rd38, %rd521;
	st.global.f32 	[%rd522], %f582;

$L__BB0_739:
	not.pred 	%p478, %p27;
	@%p478 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r5386, %r1340, %r420;
	mul.wide.s32 	%rd523, %r5386, 4;
	add.s64 	%rd524, %rd38, %rd523;
	st.global.f32 	[%rd524], %f583;

$L__BB0_741:
	mov.u32 	%r7389, 8;
	sub.s32 	%r7388, %r7389, %r1745;
	add.s32 	%r7387, %r7388, %r1746;
	add.s32 	%r7386, %r1307, %r7387;
	mov.u32 	%r5387, 8;
	sub.s32 	%r5388, %r5387, %r1747;
	add.s32 	%r5389, %r5388, %r1748;
	add.s32 	%r5390, %r1339, %r7386;
	mul.lo.s32 	%r1341, %r5390, %r5389;
	add.s32 	%r5391, %r1303, %r1341;
	mul.lo.s32 	%r5392, %r5391, %r59;
	sub.s32 	%r1342, %r5392, %r1749;
	@%p28 bra 	$L__BB0_746;

	not.pred 	%p480, %p24;
	@%p480 bra 	$L__BB0_744;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r5394, %r1342, %r405;
	mul.wide.s32 	%rd525, %r5394, 4;
	add.s64 	%rd526, %rd38, %rd525;
	st.global.f32 	[%rd526], %f584;

$L__BB0_744:
	not.pred 	%p481, %p26;
	@%p481 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r5396, %r1342, %r406;
	mul.wide.s32 	%rd527, %r5396, 4;
	add.s64 	%rd528, %rd38, %rd527;
	st.global.f32 	[%rd528], %f585;

$L__BB0_746:
	@%p28 bra 	$L__BB0_751;

	not.pred 	%p483, %p25;
	@%p483 bra 	$L__BB0_749;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r5398, %r1342, %r419;
	mul.wide.s32 	%rd529, %r5398, 4;
	add.s64 	%rd530, %rd38, %rd529;
	st.global.f32 	[%rd530], %f586;

$L__BB0_749:
	not.pred 	%p484, %p27;
	@%p484 bra 	$L__BB0_751;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r5400, %r1342, %r420;
	mul.wide.s32 	%rd531, %r5400, 4;
	add.s64 	%rd532, %rd38, %rd531;
	st.global.f32 	[%rd532], %f587;

$L__BB0_751:
	add.s32 	%r7390, %r1303, 1;
	add.s32 	%r5401, %r7390, %r1341;
	mul.lo.s32 	%r5402, %r5401, %r59;
	sub.s32 	%r1343, %r5402, %r1749;
	@%p28 bra 	$L__BB0_756;

	not.pred 	%p486, %p24;
	@%p486 bra 	$L__BB0_754;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7625;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r5404, %r1343, %r405;
	mul.wide.s32 	%rd533, %r5404, 4;
	add.s64 	%rd534, %rd38, %rd533;
	st.global.f32 	[%rd534], %f588;

$L__BB0_754:
	not.pred 	%p487, %p26;
	@%p487 bra 	$L__BB0_756;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7625;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r5406, %r1343, %r406;
	mul.wide.s32 	%rd535, %r5406, 4;
	add.s64 	%rd536, %rd38, %rd535;
	st.global.f32 	[%rd536], %f589;

$L__BB0_756:
	@%p28 bra 	$L__BB0_761;

	not.pred 	%p489, %p25;
	@%p489 bra 	$L__BB0_759;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7624;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r5408, %r1343, %r419;
	mul.wide.s32 	%rd537, %r5408, 4;
	add.s64 	%rd538, %rd38, %rd537;
	st.global.f32 	[%rd538], %f590;

$L__BB0_759:
	not.pred 	%p490, %p27;
	@%p490 bra 	$L__BB0_761;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7624;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r5410, %r1343, %r420;
	mul.wide.s32 	%rd539, %r5410, 4;
	add.s64 	%rd540, %rd38, %rd539;
	st.global.f32 	[%rd540], %f591;

$L__BB0_761:
	setp.eq.s32 	%p491, %r41, %r2200;
	@%p491 bra 	$L__BB0_763;

	mad.lo.s32 	%r5411, %r1732, %r41, %r42;
	mov.u32 	%r5412, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5413, %r5411, 1280, %r5412;
	add.s32 	%r5414, %r5413, -256;
	shl.b32 	%r5415, %r46, 4;
	add.s32 	%r5416, %r5414, %r5415;
	st.shared.v4.u32 	[%r5416+256], {%r3913, %r3990, %r1230, %r1236};
	st.shared.v4.u32 	[%r5416+1024], {%r3680, %r3757, %r1176, %r1188};
	shl.b32 	%r5417, %r46, 3;
	add.s32 	%r5418, %r5414, %r5417;
	st.shared.v2.u32 	[%r5418+768], {%r3956, %r4022};

$L__BB0_763:
	setp.eq.s32 	%p492, %r42, %r2205;
	@%p492 bra 	$L__BB0_767;

	mad.lo.s32 	%r5422, %r1731, 384, -64;
	mul.lo.s32 	%r5423, %r5422, %r42;
	mad.lo.s32 	%r5425, %r2201, %r2200, %r5423;
	mad.lo.s32 	%r5426, %r2605, 384, %r5425;
	shl.b32 	%r5427, %r5426, 2;
	mov.u32 	%r5428, _ZN6kernel5shmemE;
	add.s32 	%r5429, %r5428, %r5427;
	add.s32 	%r5430, %r5429, -256;
	shl.b32 	%r5431, %r46, 4;
	add.s32 	%r5432, %r5430, %r5431;
	st.shared.v4.u32 	[%r5432+256], {%r3834, %r3868, %r1200, %r1212};
	st.shared.v4.u32 	[%r5432+1024], {%r4435, %r4469, %r1285, %r1286};
	shl.b32 	%r5433, %r46, 3;
	add.s32 	%r1347, %r5430, %r5433;
	@%p491 bra 	$L__BB0_766;

	st.shared.v2.u32 	[%r1347], {%r3723, %r3789};

$L__BB0_766:
	st.shared.v2.u32 	[%r1347+768], {%r4294, %r4375};

$L__BB0_767:
	setp.ne.s32 	%p494, %r41, %r2200;
	ld.param.u64 	%rd541, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd541;
	@%p494 bra 	$L__BB0_769;

	mad.lo.s32 	%r5435, %r660, %r1734, %r44;
	mul.lo.s32 	%r5436, %r1732, %r5435;
	mul.lo.s32 	%r5437, %r5436, 768;
	mad.lo.s32 	%r5438, %r42, 384, %r5437;
	add.s32 	%r5439, %r5438, -64;
	mul.wide.s32 	%rd542, %r5439, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd545, %rd543, %rd307;
	st.global.v4.u32 	[%rd545+256], {%r3913, %r3990, %r1230, %r1236};
	st.global.v4.u32 	[%rd545+1024], {%r3680, %r3757, %r1176, %r1188};
	add.s64 	%rd547, %rd543, %rd309;
	st.global.v2.u32 	[%rd547+768], {%r3956, %r4022};
	st.global.v2.u32 	[%rd547+1536], {%r3723, %r3789};

$L__BB0_769:
	setp.ne.s32 	%p495, %r42, %r2205;
	@%p495 bra 	$L__BB0_774;

	ld.param.u64 	%rd592, [%rd1+104];
	cvta.to.global.u64 	%rd591, %rd592;
	mad.lo.s32 	%r5442, %r661, %r1733, %r43;
	mul.lo.s32 	%r5446, %r5442, %r1812;
	mad.lo.s32 	%r5449, %r2605, 384, %r5446;
	add.s32 	%r5450, %r5449, -64;
	mad.lo.s32 	%r5453, %r1814, %r72, %r5450;
	mul.wide.s32 	%rd548, %r5453, 4;
	add.s64 	%rd549, %rd591, %rd548;
	add.s64 	%rd551, %rd549, %rd307;
	st.global.v4.u32 	[%rd551+256], {%r3834, %r3868, %r1200, %r1212};
	st.global.v4.u32 	[%rd551+1024], {%r4435, %r4469, %r1285, %r1286};
	add.s64 	%rd40, %rd549, %rd309;
	@%p491 bra 	$L__BB0_772;

	st.global.v2.u32 	[%rd40], {%r3723, %r3789};

$L__BB0_772:
	st.global.v2.u32 	[%rd40+768], {%r4294, %r4375};
	@%p284 bra 	$L__BB0_774;

	st.global.v2.u32 	[%rd40+1536], {%r7814, %r7813};

$L__BB0_774:
	setp.ge.s32 	%p498, %r41, %r2200;
	@%p498 bra 	$L__BB0_776;

	mul.lo.s32 	%r5454, %r1732, 320;
	mul.lo.s32 	%r5455, %r42, 320;
	mad.lo.s32 	%r5456, %r5454, %r41, %r5455;
	add.s32 	%r5460, %r1811, -64;
	mad.lo.s32 	%r5464, %r5460, %r2205, %r2202;
	add.s32 	%r5465, %r5456, %r5464;
	shl.b32 	%r5466, %r5465, 2;
	mov.u32 	%r5467, _ZN6kernel5shmemE;
	add.s32 	%r5468, %r5467, %r5466;
	shl.b32 	%r5469, %r46, 4;
	add.s32 	%r5470, %r5468, %r5469;
	st.shared.v4.u32 	[%r5470], {%r7862, %r7861, %r7857, %r7855};
	shl.b32 	%r5471, %r46, 3;
	add.s32 	%r5472, %r5468, %r5471;
	st.shared.v2.u32 	[%r5472+512], {%r7599, %r7594};
	st.shared.v4.u32 	[%r5470+768], {%r7623, %r7614, %r7586, %r7582};

$L__BB0_776:
	setp.ge.s32 	%p499, %r42, %r2205;
	@%p499 bra 	$L__BB0_780;

	mad.lo.s32 	%r5478, %r2605, 384, %r2208;
	mad.lo.s32 	%r5481, %r2203, %r42, %r5478;
	add.s32 	%r5487, %r5481, %r2206;
	shl.b32 	%r5488, %r5487, 2;
	mov.u32 	%r5489, _ZN6kernel5shmemE;
	add.s32 	%r5490, %r5489, %r5488;
	shl.b32 	%r5491, %r46, 3;
	add.s32 	%r5492, %r5490, %r5491;
	@%p498 bra 	$L__BB0_779;

	add.s32 	%r7363, %r5492, -256;
	st.shared.v2.u32 	[%r7363], {%r7618, %r7611};

$L__BB0_779:
	shl.b32 	%r5511, %r46, 4;
	add.s32 	%r5512, %r5490, %r5511;
	st.shared.v4.u32 	[%r5512], {%r7609, %r7605, %r7574, %r7570};
	add.s32 	%r7364, %r5492, -256;
	st.shared.v2.u32 	[%r7364+768], {%r7577, %r7571};
	st.shared.v4.u32 	[%r5512+768], {%r7860, %r7859, %r7848, %r7847};

$L__BB0_780:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_782;

	mul.lo.s32 	%r5513, %r1732, 320;
	add.s32 	%r5514, %r41, -1;
	mul.lo.s32 	%r5515, %r42, 320;
	mad.lo.s32 	%r5516, %r5513, %r5514, %r5515;
	shl.b32 	%r5517, %r5516, 2;
	mov.u32 	%r5518, _ZN6kernel5shmemE;
	add.s32 	%r5519, %r5518, %r5517;
	add.s32 	%r5520, %r5519, -256;
	shl.b32 	%r5521, %r46, 4;
	add.s32 	%r5522, %r5520, %r5521;
	ld.shared.v4.u32 	{%r7810, %r7808, %r7802, %r7801}, [%r5522+256];
	ld.shared.v4.u32 	{%r7812, %r7811, %r7806, %r7805}, [%r5522+1024];
	shl.b32 	%r5531, %r46, 3;
	add.s32 	%r5532, %r5520, %r5531;
	ld.shared.v2.u32 	{%r7809, %r7807}, [%r5532+768];

$L__BB0_782:
	@%p282 bra 	$L__BB0_785;

	mad.lo.s32 	%r5537, %r1731, 384, -64;
	add.s32 	%r5538, %r42, -1;
	mul.lo.s32 	%r5539, %r5537, %r5538;
	mad.lo.s32 	%r5542, %r2201, %r2200, %r5539;
	mad.lo.s32 	%r5543, %r2605, 384, %r5542;
	shl.b32 	%r5544, %r5543, 2;
	mov.u32 	%r5545, _ZN6kernel5shmemE;
	add.s32 	%r5546, %r5545, %r5544;
	add.s32 	%r5547, %r5546, -256;
	shl.b32 	%r5548, %r46, 4;
	add.s32 	%r5549, %r5547, %r5548;
	ld.shared.v4.u32 	{%r7826, %r7825, %r7823, %r7821}, [%r5549+256];
	ld.shared.v4.u32 	{%r7820, %r7819, %r7817, %r7815}, [%r5549+1024];
	shl.b32 	%r5558, %r46, 3;
	add.s32 	%r5559, %r5547, %r5558;
	ld.shared.v2.u32 	{%r7824, %r7822}, [%r5559+768];
	@%p279 bra 	$L__BB0_785;

	add.s32 	%r7365, %r5559, 768;
	ld.shared.v2.u32 	{%r7804, %r7803}, [%r7365+768];

$L__BB0_785:
	ld.param.u64 	%rd553, [%rd1+104];
	cvta.to.global.u64 	%rd41, %rd553;
	mov.u32 	%r7941, %r7783;
	mov.u32 	%r7942, %r7784;
	mov.u32 	%r7927, %r7771;
	mov.u32 	%r7928, %r7772;
	mov.u32 	%r7929, %r7773;
	mov.u32 	%r7930, %r7774;
	mov.u32 	%r7943, %r7785;
	mov.u32 	%r7945, %r7787;
	mov.u32 	%r7933, %r7775;
	mov.u32 	%r7934, %r7776;
	mov.u32 	%r7935, %r7777;
	mov.u32 	%r7936, %r7778;
	@%p284 bra 	$L__BB0_789;

	mad.lo.s32 	%r5565, %r660, %r1734, %r44;
	mad.lo.s32 	%r5566, %r5565, 768, 384;
	mul.lo.s32 	%r5567, %r5566, %r1732;
	mad.lo.s32 	%r5568, %r42, 384, %r5567;
	add.s32 	%r5569, %r5568, -128;
	mul.wide.s32 	%rd554, %r5569, 4;
	add.s64 	%rd555, %rd41, %rd554;
	add.s64 	%rd557, %rd555, %rd307;
	add.s64 	%rd42, %rd557, 512;
	mov.u32 	%r7941, %r7783;
	mov.u32 	%r7942, %r7784;
	mov.u32 	%r7943, %r7785;
	mov.u32 	%r7945, %r7787;
	@%p282 bra 	$L__BB0_788;

	ld.global.v4.u32 	{%r7942, %r7941, %r7945, %r7943}, [%rd42+-512];

$L__BB0_788:
	ld.global.v4.u32 	{%r7929, %r7927, %r7930, %r7928}, [%rd42];
	ld.global.v4.u32 	{%r7936, %r7935, %r7934, %r7933}, [%rd42+512];
	ld.global.v4.u32 	{%r7780, %r7779, %r7782, %r7781}, [%rd42+1024];

$L__BB0_789:
	mov.u32 	%r7944, %r7786;
	mov.u32 	%r7946, %r7788;
	mov.u32 	%r7947, %r7789;
	mov.u32 	%r7948, %r7790;
	mov.u32 	%r7949, %r7791;
	mov.u32 	%r7950, %r7792;
	mov.u32 	%r7951, %r7793;
	mov.u32 	%r7952, %r7794;
	@%p287 bra 	$L__BB0_791;

	mad.lo.s32 	%r5587, %r661, %r1733, %r43;
	mad.lo.s32 	%r5593, %r2605, 384, %r73;
	mad.lo.s32 	%r5594, %r5587, %r1812, %r5593;
	mad.lo.s32 	%r5597, %r1814, %r72, %r5594;
	mul.wide.s32 	%rd558, %r5597, 4;
	add.s64 	%rd559, %rd41, %rd558;
	add.s64 	%rd561, %rd559, %rd307;
	ld.global.v4.u32 	{%r7796, %r7795, %r7798, %r7797}, [%rd561];
	ld.global.v4.u32 	{%r7952, %r7950, %r7948, %r7947}, [%rd561+512];
	ld.global.v4.u32 	{%r7951, %r7949, %r7946, %r7944}, [%rd561+1024];
	ld.global.v4.u32 	{%r7942, %r7941, %r7945, %r7943}, [%rd561+1536];

$L__BB0_791:
	neg.s32 	%r7371, %r1736;
	not.b32 	%r7370, %r44;
	add.s32 	%r7369, %r1734, %r7370;
	mul.lo.s32 	%r7368, %r7369, %r1735;
	not.b32 	%r7367, %r43;
	add.s32 	%r7366, %r1733, %r7367;
	mad.lo.s32 	%r5621, %r7366, %r1735, %r7368;
	add.s32 	%r5622, %r5621, %r1736;
	add.s32 	%r5631, %r5622, %r2611;
	add.s32 	%r1467, %r7650, 1;
	add.s32 	%r5632, %r1467, %r5631;
	div.s32 	%r5633, %r5632, %r1736;
	mad.lo.s32 	%r1468, %r5633, %r7371, %r5632;
	mad.lo.s32 	%r5640, %r5633, %r48, %r2622;
	ld.param.u64 	%rd562, [%rd1+120];
	cvta.to.global.u64 	%rd563, %rd562;
	rem.s32 	%r5641, %r5640, %r1737;
	shr.u32 	%r5642, %r5641, 31;
	add.s32 	%r5643, %r5641, %r5642;
	shr.s32 	%r5644, %r5643, 1;
	mad.lo.s32 	%r5645, %r5644, %r1736, %r1468;
	shl.b32 	%r5646, %r5645, 5;
	add.s32 	%r5647, %r5646, %r46;
	cvt.s64.s32 	%rd43, %r5647;
	mul.wide.s32 	%rd564, %r5647, 4;
	add.s64 	%rd565, %rd563, %rd564;
	ld.global.u32 	%r7652, [%rd565];
	ld.param.u64 	%rd566, [%rd1+128];
	cvta.to.global.u64 	%rd44, %rd566;
	@%p142 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	shl.b64 	%rd569, %rd43, 2;
	add.s64 	%rd570, %rd44, %rd569;
	ld.global.u32 	%r7651, [%rd570];
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	shl.b32 	%r5648, %r1468, 5;
	add.s32 	%r5649, %r5648, %r46;
	mul.wide.s32 	%rd567, %r5649, 16;
	add.s64 	%rd568, %rd44, %rd567;
	ld.global.v4.u32 	{%r5650, %r5651, %r5652, %r5653}, [%rd568];
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r7487;
	mov.u32 	%r7484, %r7488;
	mov.u32 	%r7485, %r7489;
	mov.u32 	%r7486, %r7490;
	mov.u32 	%r7487, %r7491;
	mov.u32 	%r7488, %r7492;
	mov.u32 	%r7489, %r7493;
	mov.u32 	%r7490, %r5653;
	mov.u32 	%r7491, %r5652;
	mov.u32 	%r7492, %r5651;
	mov.u32 	%r7493, %r5650;

$L__BB0_794:
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5654, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5656, %r7477, %r5654, %p28;
	// begin inline asm
	{mul.f16x2 %r5655,%r5656,%r7620;
}
	// end inline asm
	selp.b32 	%r5659, %r7481, %r5654, %p28;
	// begin inline asm
	{mul.f16x2 %r5658,%r5659,%r7613;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5661, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5663, %r7477, %r5661, %p28;
	// begin inline asm
	{mul.f16x2 %r5662,%r5663,%r7601;
}
	// end inline asm
	selp.b32 	%r5666, %r7481, %r5661, %p28;
	// begin inline asm
	{mul.f16x2 %r5665,%r5666,%r7596;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5668, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5670, %r7477, %r5668, %p28;
	// begin inline asm
	{mul.f16x2 %r5669,%r5670,%r7588;
}
	// end inline asm
	selp.b32 	%r5673, %r7481, %r5668, %p28;
	// begin inline asm
	{mul.f16x2 %r5672,%r5673,%r7587;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5675, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5677, %r7477, %r5675, %p28;
	// begin inline asm
	{mul.f16x2 %r5676,%r5677,%r7592;
}
	// end inline asm
	selp.b32 	%r5680, %r7481, %r5675, %p28;
	// begin inline asm
	{mul.f16x2 %r5679,%r5680,%r7591;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5682, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5684, %r7477, %r5682, %p28;
	// begin inline asm
	{mul.f16x2 %r5683,%r5684,%r7590;
}
	// end inline asm
	selp.b32 	%r5687, %r7481, %r5682, %p28;
	// begin inline asm
	{mul.f16x2 %r5686,%r5687,%r7584;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5689, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5691, %r7477, %r5689, %p28;
	// begin inline asm
	{mul.f16x2 %r5690,%r5691,%r7580;
}
	// end inline asm
	selp.b32 	%r5694, %r7481, %r5689, %p28;
	// begin inline asm
	{mul.f16x2 %r5693,%r5694,%r7579;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5696, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5698, %r7477, %r5696, %p28;
	// begin inline asm
	{mul.f16x2 %r5697,%r5698,%r7578;
}
	// end inline asm
	selp.b32 	%r5701, %r7481, %r5696, %p28;
	// begin inline asm
	{mul.f16x2 %r5700,%r5701,%r7572;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5703, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5705, %r7477, %r5703, %p28;
	// begin inline asm
	{mul.f16x2 %r5704,%r5705,%r7565;
}
	// end inline asm
	selp.b32 	%r5708, %r7481, %r5703, %p28;
	// begin inline asm
	{mul.f16x2 %r5707,%r5708,%r7564;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5710, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5712, %r7477, %r5710, %p28;
	// begin inline asm
	{mul.f16x2 %r5711,%r5712,%r7794;
}
	// end inline asm
	selp.b32 	%r5715, %r7481, %r5710, %p28;
	// begin inline asm
	{mul.f16x2 %r5714,%r5715,%r7792;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5717, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5719, %r7477, %r5717, %p28;
	// begin inline asm
	{mul.f16x2 %r5718,%r5719,%r7793;
}
	// end inline asm
	selp.b32 	%r5722, %r7481, %r5717, %p28;
	// begin inline asm
	{mul.f16x2 %r5721,%r5722,%r7791;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5724, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5726, %r7477, %r5724, %p28;
	// begin inline asm
	{mul.f16x2 %r5725,%r5726,%r7557;
}
	// end inline asm
	selp.b32 	%r5729, %r7481, %r5724, %p28;
	// begin inline asm
	{mul.f16x2 %r5728,%r5729,%r7556;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5731, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5733, %r7477, %r5731, %p28;
	// begin inline asm
	{mul.f16x2 %r5732,%r5733,%r7561;
}
	// end inline asm
	selp.b32 	%r5736, %r7481, %r5731, %p28;
	// begin inline asm
	{mul.f16x2 %r5735,%r5736,%r7560;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5738, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5740, %r7477, %r5738, %p28;
	// begin inline asm
	{mul.f16x2 %r5739,%r5740,%r7559;
}
	// end inline asm
	selp.b32 	%r5743, %r7481, %r5738, %p28;
	// begin inline asm
	{mul.f16x2 %r5742,%r5743,%r7554;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5745, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5747, %r7477, %r5745, %p28;
	// begin inline asm
	{mul.f16x2 %r5746,%r5747,%r7549;
}
	// end inline asm
	selp.b32 	%r5750, %r7481, %r5745, %p28;
	// begin inline asm
	{mul.f16x2 %r5749,%r5750,%r7548;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5752, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5754, %r7477, %r5752, %p28;
	// begin inline asm
	{mul.f16x2 %r5753,%r5754,%r7551;
}
	// end inline asm
	selp.b32 	%r5757, %r7481, %r5752, %p28;
	// begin inline asm
	{mul.f16x2 %r5756,%r5757,%r7550;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5759, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5761, %r7477, %r5759, %p28;
	// begin inline asm
	{mul.f16x2 %r5760,%r5761,%r7778;
}
	// end inline asm
	selp.b32 	%r5764, %r7481, %r5759, %p28;
	// begin inline asm
	{mul.f16x2 %r5763,%r5764,%r7777;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5766, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5768, %r7477, %r5766, %p28;
	// begin inline asm
	{mul.f16x2 %r5767,%r5768,%r7776;
}
	// end inline asm
	selp.b32 	%r5771, %r7481, %r5766, %p28;
	// begin inline asm
	{mul.f16x2 %r5770,%r5771,%r7775;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5773, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5775, %r7477, %r5773, %p28;
	// begin inline asm
	{mul.f16x2 %r5774,%r5775,%r7790;
}
	// end inline asm
	selp.b32 	%r5778, %r7481, %r5773, %p28;
	// begin inline asm
	{mul.f16x2 %r5777,%r5778,%r7789;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5780, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5782, %r7477, %r5780, %p28;
	// begin inline asm
	{mul.f16x2 %r5781,%r5782,%r7543;
}
	// end inline asm
	selp.b32 	%r5785, %r7481, %r5780, %p28;
	// begin inline asm
	{mul.f16x2 %r5784,%r5785,%r7542;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5787, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5789, %r7477, %r5787, %p28;
	// begin inline asm
	{mul.f16x2 %r5788,%r5789,%r7788;
}
	// end inline asm
	selp.b32 	%r5792, %r7481, %r5787, %p28;
	// begin inline asm
	{mul.f16x2 %r5791,%r5792,%r7786;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5794, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5796, %r7477, %r5794, %p28;
	// begin inline asm
	{mul.f16x2 %r5795,%r5796,%r7787;
}
	// end inline asm
	selp.b32 	%r5799, %r7481, %r5794, %p28;
	// begin inline asm
	{mul.f16x2 %r5798,%r5799,%r7785;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5801, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5803, %r7477, %r5801, %p28;
	// begin inline asm
	{mul.f16x2 %r5802,%r5803,%r7774;
}
	// end inline asm
	selp.b32 	%r5806, %r7481, %r5801, %p28;
	// begin inline asm
	{mul.f16x2 %r5805,%r5806,%r7772;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5808, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5810, %r7477, %r5808, %p28;
	// begin inline asm
	{mul.f16x2 %r5809,%r5810,%r7773;
}
	// end inline asm
	selp.b32 	%r5813, %r7481, %r5808, %p28;
	// begin inline asm
	{mul.f16x2 %r5812,%r5813,%r7771;
}
	// end inline asm
	// begin inline asm
	{ cvt.rn.f16x2.f32 %r5815, %f639, %f639; }

	// end inline asm
	selp.b32 	%r5817, %r7477, %r5815, %p28;
	// begin inline asm
	{mul.f16x2 %r5816,%r5817,%r7784;
}
	// end inline asm
	selp.b32 	%r5820, %r7481, %r5815, %p28;
	// begin inline asm
	{mul.f16x2 %r5819,%r5820,%r7783;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5822,%r7647,%r3723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5825,%r3834,%r3680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5828,%r5822,%r5825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5831,%r7391,%r5828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5834,%r5655,%r5831;
}
	// end inline asm
	selp.b32 	%r7615, %r5655, %r5834, %p28;
	// begin inline asm
	{sub.f16x2 %r5837,%r7646,%r3789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5840,%r3868,%r3757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5843,%r5837,%r5840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5846,%r7391,%r5843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5849,%r5658,%r5846;
}
	// end inline asm
	selp.b32 	%r7610, %r5658, %r5849, %p28;
	// begin inline asm
	{sub.f16x2 %r5852,%r7643,%r3956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5855,%r7649,%r3913;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5858,%r5852,%r5855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5861,%r7391,%r5858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5864,%r5662,%r5861;
}
	// end inline asm
	selp.b32 	%r7619, %r5662, %r5864, %p28;
	// begin inline asm
	{sub.f16x2 %r5867,%r7642,%r4022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5870,%r7648,%r3990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5873,%r5867,%r5870;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5876,%r7391,%r5873;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5879,%r5665,%r5876;
}
	// end inline asm
	selp.b32 	%r7612, %r5665, %r5879, %p28;
	// begin inline asm
	{sub.f16x2 %r5882,%r7646,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5885,%r7476,%r5882;
}
	// end inline asm
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7970,%r5669;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7970,%r7477,%r5882;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r5896, 31;
	mov.u32 	%r5898, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5894,%r7970,%r5896,%r2308,%r5898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5899,%r5885,%r5894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5902,%r1200,%r1176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5905,%r5902,%r5899;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5908,%r7391,%r5905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7617,%r5669,%r5908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5914,%r7648,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5917,%r7476,%r5914;
}
	// end inline asm
	mov.u32 	%r7971, %r5676;
	@%p28 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7971,%r7477,%r5914;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5926,%r7971,%r5896,%r2308,%r5898;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5931,%r5917,%r5926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5934,%r7637,%r1176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5937,%r5931,%r5934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5940,%r7391,%r5937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r5676,%r5940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5946,%r7639,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5949,%r7645,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r5946,%r5949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5955,%r7391,%r5952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5958,%r5683,%r5955;
}
	// end inline asm
	selp.b32 	%r7620, %r5683, %r5958, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5963,%r7647,%r440,%r2308,%r5898;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5963;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5969, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r5969,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5973,%r7480,%r5970;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7972,%r5672;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7972,%r7481,%r5970;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r5988, 31;
	mov.u32 	%r6012, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5986,%r7972,%r5988,%r2308,%r6012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5991,%r5973,%r5986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5994,%r1212,%r1188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5997,%r5994,%r5991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6000,%r7391,%r5997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7616,%r5672,%r6000;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6008,%r7649,%r440,%r2308,%r6012;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6008;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6014, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6015,%r6014,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6018,%r7480,%r6015;
}
	// end inline asm
	mov.u32 	%r7973, %r5679;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7973,%r7481,%r6015;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6029,%r7973,%r5988,%r2308,%r6012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6034,%r6018,%r6029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6037,%r7636,%r1188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6040,%r6034,%r6037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6043,%r7391,%r6040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7621,%r5679,%r6043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6049,%r7638,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6052,%r7644,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r6049,%r6052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6058,%r7391,%r6055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6061,%r5686,%r6058;
}
	// end inline asm
	selp.b32 	%r7613, %r5686, %r6061, %p28;
	// begin inline asm
	{sub.f16x2 %r6064,%r7644,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6067,%r7476,%r6064;
}
	// end inline asm
	mov.u32 	%r7974, %r5690;
	@%p28 bra 	$L__BB0_806;

	// begin inline asm
	{mul.f16x2 %r7974,%r7477,%r6064;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6078, 31;
	mov.u32 	%r6117, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6076,%r7974,%r6078,%r2308,%r6117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6081,%r6067,%r6076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6084,%r7631,%r1200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6087,%r6081,%r6084;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6090,%r7391,%r6087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7608,%r5690,%r6090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6096,%r7633,%r4294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6099,%r4435,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6102,%r6096,%r6099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6105,%r7391,%r6102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6108,%r5697,%r6105;
}
	// end inline asm
	selp.b32 	%r7606, %r5697, %r6108, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6113,%r7645,%r440,%r2308,%r6117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6113;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6119, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6120,%r6119,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6123,%r7480,%r6120;
}
	// end inline asm
	mov.u32 	%r7975, %r5693;
	@%p28 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7975,%r7481,%r6120;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6134,%r7975,%r6078,%r2308,%r6117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6139,%r6123,%r6134;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6142,%r7630,%r1212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6145,%r6139,%r6142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6148,%r7391,%r6145;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7607,%r5693,%r6148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6154,%r7632,%r4375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6157,%r4469,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6160,%r6154,%r6157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6163,%r7391,%r6160;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6166,%r5700,%r6163;
}
	// end inline asm
	selp.b32 	%r7604, %r5700, %r6166, %p28;
	// begin inline asm
	{sub.f16x2 %r6169,%r7642,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6172,%r7476,%r6169;
}
	// end inline asm
	@%p28 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7976,%r5704;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7976,%r7477,%r6169;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6185, 31;
	mov.u32 	%r6187, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6183,%r7976,%r6185,%r2308,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6188,%r6172,%r6183;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6191,%r7637,%r1230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6194,%r6191,%r6188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6197,%r7391,%r6194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r5704,%r6197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6203,%r7825,%r7826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6206,%r7476,%r6203;
}
	// end inline asm
	mov.u32 	%r7977, %r5711;
	@%p28 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7977,%r7477,%r6203;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6215,%r7977,%r6185,%r2308,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6220,%r6206,%r6215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6223,%r7823,%r1230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6226,%r6220,%r6223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6229,%r7391,%r6226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7603,%r5711,%r6229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6235,%r7824,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6238,%r7641,%r7826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6241,%r6235,%r6238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6244,%r7391,%r6241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6247,%r5718,%r6244;
}
	// end inline asm
	selp.b32 	%r7601, %r5718, %r6247, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6252,%r7643,%r440,%r2308,%r6187;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6252;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6258, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6259,%r6258,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6262,%r7480,%r6259;
}
	// end inline asm
	@%p28 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7978,%r5707;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7978,%r7481,%r6259;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6277, 31;
	mov.u32 	%r6301, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6275,%r7978,%r6277,%r2308,%r6301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6280,%r6262,%r6275;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6283,%r7636,%r1236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6286,%r6283,%r6280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6289,%r7391,%r6286;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7597,%r5707,%r6289;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7826;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6297,%r7826,%r440,%r2308,%r6301;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6297;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6303, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6304,%r6303,%r7825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6307,%r7480,%r6304;
}
	// end inline asm
	mov.u32 	%r7979, %r5714;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7979,%r7481,%r6304;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6318,%r7979,%r6277,%r2308,%r6301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6323,%r6307,%r6318;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6326,%r7821,%r1236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6329,%r6323,%r6326;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6332,%r7391,%r6329;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r5714,%r6332;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6338,%r7822,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6341,%r7640,%r7825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6344,%r6338,%r6341;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6347,%r7391,%r6344;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6350,%r5721,%r6347;
}
	// end inline asm
	selp.b32 	%r7596, %r5721, %r6350, %p28;
	// begin inline asm
	{sub.f16x2 %r6353,%r7638,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6356,%r7476,%r6353;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7980,%r5725;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7980,%r7477,%r6353;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6369, 31;
	mov.u32 	%r6371, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6367,%r7980,%r6369,%r2308,%r6371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6372,%r6356,%r6367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6375,%r7631,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6378,%r6375,%r6372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6381,%r7391,%r6378;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r5725,%r6381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6387,%r7640,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6390,%r7476,%r6387;
}
	// end inline asm
	mov.u32 	%r7981, %r5732;
	@%p28 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7981,%r7477,%r6387;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6399,%r7981,%r6369,%r2308,%r6371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6404,%r6390,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6407,%r7627,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6410,%r6404,%r6407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6413,%r7391,%r6410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r5732,%r6413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6419,%r7629,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6422,%r7635,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6425,%r6419,%r6422;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6428,%r7391,%r6425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6431,%r5739,%r6428;
}
	// end inline asm
	selp.b32 	%r7590, %r5739, %r6431, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7639;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6436,%r7639,%r440,%r2308,%r6371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6436;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6442, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6443,%r6442,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6446,%r7480,%r6443;
}
	// end inline asm
	@%p28 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7982,%r5728;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7982,%r7481,%r6443;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6461, 31;
	mov.u32 	%r6485, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6459,%r7982,%r6461,%r2308,%r6485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6464,%r6446,%r6459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6467,%r7630,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6470,%r6467,%r6464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6473,%r7391,%r6470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r5728,%r6473;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6481,%r7641,%r440,%r2308,%r6485;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6481;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6487, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6488,%r6487,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6491,%r7480,%r6488;
}
	// end inline asm
	mov.u32 	%r7983, %r5735;
	@%p28 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7983,%r7481,%r6488;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6502,%r7983,%r6461,%r2308,%r6485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6507,%r6491,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6510,%r7626,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6513,%r6507,%r6510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6516,%r7391,%r6513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7591,%r5735,%r6516;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r7628,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6525,%r7634,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6528,%r6522,%r6525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6531,%r7391,%r6528;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6534,%r5742,%r6531;
}
	// end inline asm
	selp.b32 	%r7584, %r5742, %r6534, %p28;
	// begin inline asm
	{sub.f16x2 %r6537,%r7632,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6540,%r7476,%r6537;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7984,%r5746;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7984,%r7477,%r6537;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6553, 31;
	mov.u32 	%r6555, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6551,%r7984,%r6553,%r2308,%r6555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6556,%r6540,%r6551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6559,%r1285,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6562,%r6559,%r6556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6565,%r7391,%r6562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r5746,%r6565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6571,%r7634,%r7635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6574,%r7476,%r6571;
}
	// end inline asm
	mov.u32 	%r7985, %r5753;
	@%p28 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7985,%r7477,%r6571;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6583,%r7985,%r6553,%r2308,%r6555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6588,%r6574,%r6583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6591,%r7625,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6594,%r6588,%r6591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6597,%r7391,%r6594;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r5753,%r6597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6603,%r7809,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6606,%r7812,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6609,%r6603,%r6606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6612,%r7391,%r6609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6615,%r5760,%r6612;
}
	// end inline asm
	selp.b32 	%r7578, %r5760, %r6615, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6620,%r7633,%r440,%r2308,%r6555;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6620;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6626, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6627,%r6626,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6630,%r7480,%r6627;
}
	// end inline asm
	@%p28 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7986,%r5749;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7986,%r7481,%r6627;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r6645, 31;
	mov.u32 	%r6669, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6643,%r7986,%r6645,%r2308,%r6669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6648,%r6630,%r6643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6651,%r1286,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6654,%r6651,%r6648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6657,%r7391,%r6654;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r5749,%r6657;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7635;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6665,%r7635,%r440,%r2308,%r6669;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6665;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6671, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6672,%r6671,%r7634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6675,%r7480,%r6672;
}
	// end inline asm
	mov.u32 	%r7987, %r5756;
	@%p28 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7987,%r7481,%r6672;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6686,%r7987,%r6645,%r2308,%r6669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6691,%r6675,%r6686;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6694,%r7624,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6697,%r6691,%r6694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6700,%r7391,%r6697;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r5756,%r6700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6706,%r7807,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6709,%r7811,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6712,%r6706,%r6709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6715,%r7391,%r6712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6718,%r5763,%r6715;
}
	// end inline asm
	selp.b32 	%r7572, %r5763, %r6718, %p28;
	// begin inline asm
	{sub.f16x2 %r6721,%r7811,%r7812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6724,%r7476,%r6721;
}
	// end inline asm
	mov.u32 	%r7988, %r5767;
	@%p28 bra 	$L__BB0_840;

	// begin inline asm
	{mul.f16x2 %r7988,%r7477,%r6721;
}
	// end inline asm

$L__BB0_840:
	mov.u32 	%r6735, 31;
	mov.u32 	%r6759, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6733,%r7988,%r6735,%r2308,%r6759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6738,%r6724,%r6733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6741,%r7806,%r1285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6744,%r6738,%r6741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6747,%r7391,%r6744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r5767,%r6747;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7812;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6755,%r7812,%r440,%r2308,%r6759;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6755;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6761, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6762,%r6761,%r7811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6765,%r7480,%r6762;
}
	// end inline asm
	mov.u32 	%r7989, %r5770;
	@%p28 bra 	$L__BB0_842;

	// begin inline asm
	{mul.f16x2 %r7989,%r7481,%r6762;
}
	// end inline asm

$L__BB0_842:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6776,%r7989,%r6735,%r2308,%r6759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6781,%r6765,%r6776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6784,%r7805,%r1286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6787,%r6781,%r6784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6790,%r7391,%r6787;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r5770,%r6790;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6796,%r7822,%r7824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6799,%r7476,%r6796;
}
	// end inline asm
	@%p28 bra 	$L__BB0_844;
	bra.uni 	$L__BB0_843;

$L__BB0_844:
	// begin inline asm
	{neg.f16x2 %r7990,%r5774;
}
	// end inline asm
	bra.uni 	$L__BB0_845;

$L__BB0_843:
	// begin inline asm
	{mul.f16x2 %r7990,%r7477,%r6796;
}
	// end inline asm

$L__BB0_845:
	mov.u32 	%r6812, 31;
	mov.u32 	%r6836, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6810,%r7990,%r6812,%r2308,%r6836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6815,%r6799,%r6810;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6818,%r7627,%r7823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6821,%r6818,%r6815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6824,%r7391,%r6821;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r5774,%r6824;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7824;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6832,%r7824,%r440,%r2308,%r6836;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6832;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6838, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6839,%r6838,%r7822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6842,%r7480,%r6839;
}
	// end inline asm
	@%p28 bra 	$L__BB0_847;
	bra.uni 	$L__BB0_846;

$L__BB0_847:
	// begin inline asm
	{neg.f16x2 %r7991,%r5777;
}
	// end inline asm
	bra.uni 	$L__BB0_848;

$L__BB0_846:
	// begin inline asm
	{mul.f16x2 %r7991,%r7481,%r6839;
}
	// end inline asm

$L__BB0_848:
	mov.u32 	%r6857, 31;
	mov.u32 	%r6859, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6855,%r7991,%r6857,%r2308,%r6859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6860,%r6842,%r6855;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6863,%r7626,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6866,%r6863,%r6860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6869,%r7391,%r6866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r5777,%r6869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6875,%r7628,%r7629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6878,%r7476,%r6875;
}
	// end inline asm
	@%p28 bra 	$L__BB0_850;
	bra.uni 	$L__BB0_849;

$L__BB0_850:
	// begin inline asm
	{neg.f16x2 %r7992,%r5781;
}
	// end inline asm
	bra.uni 	$L__BB0_851;

$L__BB0_849:
	// begin inline asm
	{mul.f16x2 %r7992,%r7477,%r6875;
}
	// end inline asm

$L__BB0_851:
	mov.u32 	%r6891, 31;
	mov.u32 	%r6893, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6889,%r7992,%r6891,%r2308,%r6893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6894,%r6878,%r6889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6897,%r7625,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6900,%r6897,%r6894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6903,%r7391,%r6900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r5781,%r6903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6909,%r7819,%r7820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6912,%r7476,%r6909;
}
	// end inline asm
	mov.u32 	%r7993, %r5788;
	@%p28 bra 	$L__BB0_853;

	// begin inline asm
	{mul.f16x2 %r7993,%r7477,%r6909;
}
	// end inline asm

$L__BB0_853:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6921,%r7993,%r6891,%r2308,%r6893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6926,%r6912,%r6921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6929,%r7817,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6932,%r6926,%r6929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6935,%r7391,%r6932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r5788,%r6935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6941,%r7804,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6944,%r7810,%r7820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6947,%r6941,%r6944;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6950,%r7391,%r6947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6953,%r5795,%r6950;
}
	// end inline asm
	selp.b32 	%r7559, %r5795, %r6953, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7629;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6958,%r7629,%r440,%r2308,%r6893;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6958;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6964, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6965,%r6964,%r7628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6968,%r7480,%r6965;
}
	// end inline asm
	@%p28 bra 	$L__BB0_855;
	bra.uni 	$L__BB0_854;

$L__BB0_855:
	// begin inline asm
	{neg.f16x2 %r7994,%r5784;
}
	// end inline asm
	bra.uni 	$L__BB0_856;

$L__BB0_854:
	// begin inline asm
	{mul.f16x2 %r7994,%r7481,%r6965;
}
	// end inline asm

$L__BB0_856:
	mov.u32 	%r6983, 31;
	mov.u32 	%r7007, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6981,%r7994,%r6983,%r2308,%r7007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6986,%r6968,%r6981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6989,%r7624,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6992,%r6989,%r6986;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6995,%r7391,%r6992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r5784,%r6995;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7820;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7003,%r7820,%r440,%r2308,%r7007;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7003;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7009, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7010,%r7009,%r7819;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7013,%r7480,%r7010;
}
	// end inline asm
	mov.u32 	%r7995, %r5791;
	@%p28 bra 	$L__BB0_858;

	// begin inline asm
	{mul.f16x2 %r7995,%r7481,%r7010;
}
	// end inline asm

$L__BB0_858:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7024,%r7995,%r6983,%r2308,%r7007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7029,%r7013,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7032,%r7815,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7035,%r7029,%r7032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7038,%r7391,%r7035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r5791,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7044,%r7803,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7047,%r7808,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7050,%r7044,%r7047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7053,%r7391,%r7050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7056,%r5798,%r7053;
}
	// end inline asm
	selp.b32 	%r7554, %r5798, %r7056, %p28;
	// begin inline asm
	{sub.f16x2 %r7059,%r7807,%r7809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7062,%r7476,%r7059;
}
	// end inline asm
	@%p28 bra 	$L__BB0_860;
	bra.uni 	$L__BB0_859;

$L__BB0_860:
	// begin inline asm
	{neg.f16x2 %r7996,%r5802;
}
	// end inline asm
	bra.uni 	$L__BB0_861;

$L__BB0_859:
	// begin inline asm
	{mul.f16x2 %r7996,%r7477,%r7059;
}
	// end inline asm

$L__BB0_861:
	mov.u32 	%r7075, 31;
	mov.u32 	%r7077, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7073,%r7996,%r7075,%r2308,%r7077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7078,%r7062,%r7073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7081,%r7806,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7084,%r7081,%r7078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7087,%r7391,%r7084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r5802,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7093,%r7808,%r7810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7096,%r7476,%r7093;
}
	// end inline asm
	mov.u32 	%r7997, %r5809;
	@%p28 bra 	$L__BB0_863;

	// begin inline asm
	{mul.f16x2 %r7997,%r7477,%r7093;
}
	// end inline asm

$L__BB0_863:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7105,%r7997,%r7075,%r2308,%r7077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7110,%r7096,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7113,%r7802,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7116,%r7110,%r7113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7119,%r7391,%r7116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r5809,%r7119;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7809;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7127,%r7809,%r440,%r2308,%r7077;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7127;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7133, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7134,%r7133,%r7807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7137,%r7480,%r7134;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r7998,%r5805;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r7998,%r7481,%r7134;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r7152, 31;
	mov.u32 	%r7176, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7150,%r7998,%r7152,%r2308,%r7176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7155,%r7137,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7158,%r7805,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7161,%r7158,%r7155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7164,%r7391,%r7161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r5805,%r7164;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7810;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7172,%r7810,%r440,%r2308,%r7176;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7172;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7178, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7179,%r7178,%r7808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7182,%r7480,%r7179;
}
	// end inline asm
	mov.u32 	%r7999, %r5812;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r7999,%r7481,%r7179;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7193,%r7999,%r7152,%r2308,%r7176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7198,%r7182,%r7193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7201,%r7801,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7204,%r7198,%r7201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7207,%r7391,%r7204;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r5812,%r7207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7213,%r7803,%r7804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7216,%r7476,%r7213;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;
	bra.uni 	$L__BB0_869;

$L__BB0_870:
	// begin inline asm
	{neg.f16x2 %r8000,%r5816;
}
	// end inline asm
	bra.uni 	$L__BB0_871;

$L__BB0_869:
	// begin inline asm
	{mul.f16x2 %r8000,%r7477,%r7213;
}
	// end inline asm

$L__BB0_871:
	mov.u32 	%r7229, 31;
	mov.u32 	%r7253, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7227,%r8000,%r7229,%r2308,%r7253;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7232,%r7216,%r7227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7235,%r7802,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7238,%r7235,%r7232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7241,%r7391,%r7238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r5816,%r7241;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7804;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7249,%r7804,%r440,%r2308,%r7253;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7249;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7255, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7256,%r7255,%r7803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7259,%r7480,%r7256;
}
	// end inline asm
	@%p28 bra 	$L__BB0_873;
	bra.uni 	$L__BB0_872;

$L__BB0_873:
	// begin inline asm
	{neg.f16x2 %r8001,%r5819;
}
	// end inline asm
	bra.uni 	$L__BB0_874;

$L__BB0_872:
	// begin inline asm
	{mul.f16x2 %r8001,%r7481,%r7256;
}
	// end inline asm

$L__BB0_874:
	mov.u32 	%r7274, 31;
	mov.u32 	%r7276, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7272,%r8001,%r7274,%r2308,%r7276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7277,%r7259,%r7272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7280,%r7801,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7283,%r7280,%r7277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7286,%r7391,%r7283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r5819,%r7286;
}
	// end inline asm
	bar.sync 	0;
	@%p491 bra 	$L__BB0_877;

	setp.ne.s32 	%p554, %r42, %r2205;
	shl.b32 	%r7295, %r42, 8;
	shl.b32 	%r7299, %r1732, 8;
	or.b32  	%r7300, %r7299, 128;
	mad.lo.s32 	%r7301, %r7300, %r41, %r2208;
	add.s32 	%r7302, %r7301, %r7295;
	shl.b32 	%r7303, %r7302, 2;
	mov.u32 	%r7304, _ZN6kernel5shmemE;
	add.s32 	%r7305, %r7304, %r7303;
	shl.b32 	%r7306, %r46, 4;
	add.s32 	%r1724, %r7305, %r7306;
	st.shared.v4.u32 	[%r1724], {%r7603, %r7602, %r7598, %r7597};
	st.shared.v4.u32 	[%r1724+512], {%r7619, %r7612, %r7622, %r7621};
	@%p554 bra 	$L__BB0_877;

	st.shared.v4.u32 	[%r1724+1024], {%r7617, %r7616, %r7615, %r7610};

$L__BB0_877:
	setp.eq.s32 	%p552, %r42, %r2205;
	@%p552 bra 	$L__BB0_879;

	mul.lo.s32 	%r7310, %r2605, 384;
	mad.lo.s32 	%r7311, %r73, %r42, %r7310;
	mad.lo.s32 	%r7314, %r2203, %r2205, %r7311;
	mad.lo.s32 	%r7317, %r2201, %r2200, %r7314;
	shl.b32 	%r7318, %r7317, 2;
	mov.u32 	%r7319, _ZN6kernel5shmemE;
	add.s32 	%r7320, %r7319, %r7318;
	shl.b32 	%r7321, %r46, 4;
	add.s32 	%r7322, %r7320, %r7321;
	st.shared.v4.u32 	[%r7322], {%r7617, %r7616, %r7615, %r7610};
	st.shared.v4.u32 	[%r7322+512], {%r7608, %r7607, %r7576, %r7575};
	st.shared.v4.u32 	[%r7322+1024], {%r7606, %r7604, %r7569, %r7568};

$L__BB0_879:
	setp.ne.s32 	%p553, %r41, %r2200;
	ld.param.u64 	%rd571, [%rd1+104];
	cvta.to.global.u64 	%rd45, %rd571;
	@%p553 bra 	$L__BB0_881;

	mad.lo.s32 	%r7324, %r660, %r1734, %r44;
	mad.lo.s32 	%r7325, %r7324, 768, 384;
	mul.lo.s32 	%r7326, %r7325, %r1732;
	mad.lo.s32 	%r7327, %r42, 384, %r7326;
	add.s32 	%r7328, %r7327, -128;
	mul.wide.s32 	%rd572, %r7328, 4;
	add.s64 	%rd573, %rd45, %rd572;
	add.s64 	%rd575, %rd573, %rd307;
	st.global.v4.u32 	[%rd575+512], {%r7603, %r7602, %r7598, %r7597};
	st.global.v4.u32 	[%rd575+1024], {%r7619, %r7612, %r7622, %r7621};
	st.global.v4.u32 	[%rd575+1536], {%r7617, %r7616, %r7615, %r7610};

$L__BB0_881:
	setp.ne.s32 	%p555, %r42, %r2205;
	@%p555 bra 	$L__BB0_884;

	mad.lo.s32 	%r7330, %r661, %r1733, %r43;
	mad.lo.s32 	%r7336, %r2605, 384, %r73;
	mad.lo.s32 	%r7337, %r7330, %r1812, %r7336;
	mad.lo.s32 	%r7340, %r1814, %r72, %r7337;
	mul.wide.s32 	%rd576, %r7340, 4;
	add.s64 	%rd577, %rd45, %rd576;
	add.s64 	%rd46, %rd577, %rd307;
	st.global.v4.u32 	[%rd46], {%r7617, %r7616, %r7615, %r7610};
	st.global.v4.u32 	[%rd46+512], {%r7608, %r7607, %r7576, %r7575};
	st.global.v4.u32 	[%rd46+1024], {%r7606, %r7604, %r7569, %r7568};
	@%p284 bra 	$L__BB0_884;

	st.global.v4.u32 	[%rd46+1536], {%r7780, %r7779, %r7782, %r7781};

$L__BB0_884:
	rem.s32 	%r7341, %r7650, %r1735;
	setp.eq.s32 	%p546, %r7341, 0;
	@%p546 bra 	$L__BB0_886;

	bar.sync 	0;
	bra.uni 	$L__BB0_893;

$L__BB0_886:
	@%p218 bra 	$L__BB0_888;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_888:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_892;

	membar.gl;
	setp.eq.s32 	%p549, %r434, %r435;
	mov.u32 	%r7356, -2147483647;
	sub.s32 	%r7357, %r7356, %r433;
	selp.b32 	%r7345, %r7357, 1, %p549;
	// begin inline asm
	atom.add.release.gpu.u32 %r7344,[%rd30],%r7345;
	// end inline asm

$L__BB0_890:
	ld.volatile.u32 	%r7358, [%rd30];
	xor.b32  	%r7359, %r7358, %r7344;
	setp.gt.s32 	%p550, %r7359, -1;
	@%p550 bra 	$L__BB0_890;

	// begin inline asm
	ld.acquire.gpu.u32 %r7360,[%rd30];
	// end inline asm

$L__BB0_892:
	bar.sync 	0;

$L__BB0_893:
	setp.lt.s32 	%p551, %r1467, %r49;
	mov.u32 	%r7783, %r7941;
	mov.u32 	%r7784, %r7942;
	mov.u32 	%r7771, %r7927;
	mov.u32 	%r7772, %r7928;
	mov.u32 	%r7773, %r7929;
	mov.u32 	%r7774, %r7930;
	mov.u32 	%r7785, %r7943;
	mov.u32 	%r7786, %r7944;
	mov.u32 	%r7787, %r7945;
	mov.u32 	%r7788, %r7946;
	mov.u32 	%r7789, %r7947;
	mov.u32 	%r7790, %r7948;
	mov.u32 	%r7775, %r7933;
	mov.u32 	%r7776, %r7934;
	mov.u32 	%r7777, %r7935;
	mov.u32 	%r7778, %r7936;
	mov.u32 	%r7791, %r7949;
	mov.u32 	%r7792, %r7950;
	mov.u32 	%r7793, %r7951;
	mov.u32 	%r7794, %r7952;
	mov.u32 	%r7570, %r505;
	mov.u32 	%r7571, %r7849;
	mov.u32 	%r7574, %r506;
	mov.u32 	%r7577, %r7851;
	mov.u32 	%r7582, %r511;
	mov.u32 	%r7586, %r514;
	mov.u32 	%r7594, %r7856;
	mov.u32 	%r7599, %r7858;
	mov.u32 	%r7605, %r532;
	mov.u32 	%r7609, %r540;
	mov.u32 	%r7611, %r542;
	mov.u32 	%r7614, %r544;
	mov.u32 	%r7618, %r548;
	mov.u32 	%r7623, %r552;
	mov.u32 	%r7650, %r1467;
	@%p551 bra 	$L__BB0_332;

$L__BB0_894:
	ret;

}

