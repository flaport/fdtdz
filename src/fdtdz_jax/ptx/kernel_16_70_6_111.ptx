//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_70
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<351>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7829>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<564>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1681, %r1682}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1683, %r1684}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1685, %r1686}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1687, %r1688}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1689, %r1690}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1691, %r1692}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1693, %r1694}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1695, 32;
	sub.s32 	%r27, %r1695, %r1688;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1696, %r1694, -1;
	mad.lo.s32 	%r1697, %r1696, %r1693, %r1692;
	add.s32 	%r1698, %r1687, %r1686;
	add.s32 	%r1699, %r1698, %r1697;
	add.s32 	%r1700, %r1699, 1;
	mul.lo.s32 	%r1701, %r1681, %r1683;
	shl.b32 	%r29, %r1701, 1;
	shl.b32 	%r1702, %r1701, 2;
	div.s32 	%r1703, %r1700, %r1702;
	add.s32 	%r1704, %r1703, 1;
	mul.lo.s32 	%r1705, %r1704, %r1687;
	mul.lo.s32 	%r1706, %r1682, %r1684;
	shl.b32 	%r30, %r1706, 1;
	div.s32 	%r1707, %r1705, %r30;
	add.s32 	%r1708, %r1707, 1;
	mul.lo.s32 	%r31, %r1708, %r1686;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7208, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7208, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1711, %r1683, %r26, %r25;
	mad.lo.s32 	%r1712, %r1711, %r1682, %r24;
	mad.lo.s32 	%r1713, %r1712, %r1681, %r23;
	shl.b32 	%r35, %r1713, 5;
	add.s32 	%r7213, %r35, %r28;
	mul.lo.s32 	%r1714, %r1706, %r1701;
	shl.b32 	%r39, %r1714, 5;
	shl.b32 	%r1715, %r1688, 2;
	mov.u32 	%r1716, 128;
	sub.s32 	%r40, %r1716, %r1715;
	mul.lo.s32 	%r1717, %r1687, %r1686;
	mul.lo.s32 	%r1718, %r1717, %r1694;
	mul.lo.s32 	%r1719, %r1718, %r40;
	mul.lo.s32 	%r41, %r1719, 3;
	setp.ge.s32 	%p13, %r7213, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1720, %r28;
	add.s32 	%r1721, %r41, %r1720;
	sub.s32 	%r1722, %r1721, %r35;
	mul.lo.s32 	%r1723, %r1706, %r1681;
	mul.lo.s32 	%r1724, %r1723, %r1683;
	shl.b32 	%r1725, %r1724, 5;
	div.u32 	%r42, %r1722, %r1725;
	add.s32 	%r1726, %r42, 1;
	and.b32  	%r7210, %r1726, 3;
	setp.eq.s32 	%p14, %r7210, 0;
	mov.u32 	%r7211, %r7213;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7211, %r7213;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r7211, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1727, 0;
	st.global.u32 	[%rd45], %r1727;
	add.s32 	%r7211, %r7211, %r39;
	add.s32 	%r7210, %r7210, -1;
	setp.ne.s32 	%p15, %r7210, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r7211, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1728, 0;
	st.global.u32 	[%rd47], %r1728;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1728;
	add.s32 	%r1729, %r7211, %r39;
	add.s32 	%r1730, %r1729, %r39;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1728;
	add.s32 	%r1731, %r1730, %r39;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1728;
	add.s32 	%r7211, %r1731, %r39;
	setp.lt.s32 	%p17, %r7211, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1732, %r1687, %r29;
	div.s32 	%r1733, %r1732, %r30;
	mul.lo.s32 	%r1734, %r1733, %r1686;
	sub.s32 	%r51, %r1734, %r29;
	sub.s32 	%r1735, %r1686, %r30;
	mul.lo.s32 	%r1736, %r1735, %r1683;
	mul.lo.s32 	%r52, %r1681, 384;
	add.s32 	%r1737, %r52, %r52;
	add.s32 	%r1738, %r1737, 128;
	mul.lo.s32 	%r1740, %r1706, 768;
	mul.lo.s32 	%r1741, %r1736, %r1738;
	mad.lo.s32 	%r53, %r1740, %r51, %r1741;
	bra.uni 	$L__BB0_11;

$L__BB0_673:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7195, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r7213, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r7195;
	add.s32 	%r7213, %r7213, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7213, %r53;
	@%p18 bra 	$L__BB0_673;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r7255, %r1681, %r25, %r23;
	mul.lo.s32 	%r57, %r1682, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7255, %r1686;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1742, 31;
	sub.s32 	%r1743, %r1742, %r28;
	selp.b32 	%r1744, %r28, %r1743, %p20;
	shl.b32 	%r1745, %r1744, 2;
	mov.u32 	%r1746, 2;
	sub.s32 	%r59, %r1745, %r1689;
	sub.s32 	%r1747, %r1746, %r1689;
	add.s32 	%r60, %r1747, %r1745;
	shl.b32 	%r61, %r1717, 6;
	add.s32 	%r62, %r1686, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1749, %r66, 31;
	add.s32 	%r1750, %r66, %r1749;
	shr.s32 	%r68, %r1750, 1;
	and.b32  	%r1751, %r1750, -2;
	sub.s32 	%r1752, %r66, %r1751;
	add.s32 	%r67, %r1752, %r61;
	rem.s32 	%r1787, %r63, %r40;
	add.s32 	%r1788, %r1787, %r40;
	rem.s32 	%r91, %r1788, %r40;
	rem.s32 	%r1789, %r64, %r40;
	add.s32 	%r1790, %r1789, %r40;
	rem.s32 	%r92, %r1790, %r40;
	mov.u32 	%r7214, %r7255;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1687;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7214;
	rem.s32 	%r1753, %r59, %r40;
	add.s32 	%r1754, %r1753, %r40;
	rem.s32 	%r71, %r1754, %r40;
	rem.s32 	%r1755, %r60, %r40;
	add.s32 	%r1756, %r1755, %r40;
	rem.s32 	%r72, %r1756, %r40;
	mul.lo.s32 	%r73, %r7214, %r1687;
	add.s32 	%r1757, %r1686, %r7214;
	mul.lo.s32 	%r74, %r1757, %r1687;
	add.s32 	%r1758, %r1757, %r1686;
	mul.lo.s32 	%r75, %r1758, %r1687;
	mov.u32 	%r7215, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7215, %r1686;
	add.s32 	%r78, %r77, %r7214;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1761, %r73, %r7215;
	mul.lo.s32 	%r1762, %r1761, %r40;
	add.s32 	%r1763, %r1762, %r71;
	mul.wide.s32 	%rd55, %r1763, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1764, %r1762, %r72;
	mul.wide.s32 	%rd57, %r1764, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7216, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7216, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1765, %r83, %r28;
	shl.b32 	%r1766, %r1765, 2;
	add.s32 	%r1767, %r61, %r1766;
	mul.wide.s32 	%rd59, %r1767, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r7216;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1770, %r74, %r7215;
	mul.lo.s32 	%r1771, %r1770, %r40;
	add.s32 	%r1772, %r1771, %r71;
	mul.wide.s32 	%rd61, %r1772, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1773, %r1771, %r72;
	mul.wide.s32 	%rd63, %r1773, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7217, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7217, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1774, %r65, %r79;
	mul.wide.s32 	%rd65, %r1774, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r7217;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1777, %r75, %r7215;
	mul.lo.s32 	%r1778, %r1777, %r40;
	add.s32 	%r1779, %r1778, %r71;
	mul.wide.s32 	%rd67, %r1779, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1780, %r1778, %r72;
	mul.wide.s32 	%rd69, %r1780, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7218, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7218, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1781, %r70, %r1686;
	add.s32 	%r1782, %r1781, %r77;
	shl.b32 	%r90, %r1782, 5;
	add.s32 	%r1783, %r90, %r28;
	shl.b32 	%r1784, %r1783, 2;
	add.s32 	%r1785, %r61, %r1784;
	add.s32 	%r1786, %r1785, 2;
	mul.wide.s32 	%rd71, %r1786, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r7218;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1793, %r73, %r7215;
	mul.lo.s32 	%r1794, %r1793, %r40;
	add.s32 	%r1795, %r1794, %r91;
	mul.wide.s32 	%rd73, %r1795, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1796, %r1794, %r92;
	mul.wide.s32 	%rd75, %r1796, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7219, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7219, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1797, %r83, %r68;
	shl.b32 	%r1798, %r1797, 2;
	add.s32 	%r1799, %r67, %r1798;
	mul.wide.s32 	%rd77, %r1799, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r7219;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1802, %r74, %r7215;
	mul.lo.s32 	%r1803, %r1802, %r40;
	add.s32 	%r1804, %r1803, %r91;
	mul.wide.s32 	%rd79, %r1804, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1805, %r1803, %r92;
	mul.wide.s32 	%rd81, %r1805, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7220, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7220, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1806, %r66, %r79;
	mul.wide.s32 	%rd83, %r1806, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r7220;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1809, %r75, %r7215;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r91;
	mul.wide.s32 	%rd85, %r1811, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1812, %r1810, %r92;
	mul.wide.s32 	%rd87, %r1812, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7221, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7221, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1813, %r90, %r68;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r67, %r1814;
	add.s32 	%r1816, %r1815, 2;
	mul.wide.s32 	%rd89, %r1816, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r7221;
	add.s32 	%r7215, %r7215, %r1706;
	setp.lt.s32 	%p28, %r7215, %r1687;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7214, %r7214, %r1701;
	setp.lt.s32 	%p29, %r7214, %r1686;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7222, %r7255;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1687;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7223, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1818, %r7223, 31;
	add.s32 	%r1819, %r7223, %r1818;
	shr.s32 	%r1820, %r1819, 1;
	mad.lo.s32 	%r1821, %r1820, %r1686, %r7222;
	shl.b32 	%r108, %r1821, 5;
	add.s32 	%r109, %r7223, -2;
	mul.lo.s32 	%r110, %r109, %r1686;
	add.s32 	%r1822, %r1687, %r109;
	mul.lo.s32 	%r111, %r1822, %r1686;
	add.s32 	%r1823, %r1822, %r1687;
	mul.lo.s32 	%r112, %r1823, %r1686;
	add.s32 	%r113, %r110, %r1686;
	add.s32 	%r114, %r7223, -1;
	add.s32 	%r1824, %r1687, %r114;
	mul.lo.s32 	%r115, %r1824, %r1686;
	add.s32 	%r1825, %r1824, %r1687;
	mul.lo.s32 	%r116, %r1825, %r1686;
	add.s32 	%r1826, %r1687, %r7223;
	mul.lo.s32 	%r117, %r1826, %r1686;
	add.s32 	%r1827, %r1826, %r1687;
	mul.lo.s32 	%r118, %r1827, %r1686;
	mul.lo.s32 	%r119, %r7223, %r1686;
	add.s32 	%r120, %r119, %r1686;
	add.s32 	%r121, %r7223, 1;
	add.s32 	%r1828, %r1687, %r121;
	mul.lo.s32 	%r122, %r1828, %r1686;
	add.s32 	%r1829, %r1828, %r1687;
	mul.lo.s32 	%r123, %r1829, %r1686;
	add.s32 	%r124, %r120, %r1686;
	add.s32 	%r125, %r7223, 2;
	add.s32 	%r1830, %r1687, %r125;
	mul.lo.s32 	%r126, %r1830, %r1686;
	add.s32 	%r1831, %r1830, %r1687;
	mul.lo.s32 	%r127, %r1831, %r1686;
	mov.u32 	%r7226, 0;
	mov.u64 	%rd561, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1832, [%rd561];
	cvt.rn.f64.s32 	%fd1, %r1832;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1832, %r7222;
	setp.lt.s32 	%p33, %r129, %r1686;
	or.b32  	%r1833, %r109, %r129;
	setp.gt.s32 	%p34, %r1833, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1687;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1836, %r110, %r129;
	mul.wide.s32 	%rd94, %r1836, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7225, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7225, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1837, %r7226, %r108;
	mul.wide.s32 	%rd96, %r1837, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r7225;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1840, %r111, %r129;
	mul.wide.s32 	%rd98, %r1840, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7227, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7227, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1841, %r7226, %r108;
	mul.wide.s32 	%rd100, %r1841, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r7227;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1844, %r112, %r129;
	mul.wide.s32 	%rd102, %r1844, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7229, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7229, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1845, %r7226, %r108;
	mul.wide.s32 	%rd104, %r1845, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r7229;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_57:
	or.b32  	%r1846, %r114, %r129;
	setp.gt.s32 	%p40, %r1846, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7223, %r1687;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1849, %r113, %r129;
	mul.wide.s32 	%rd106, %r1849, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7231, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7231, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1850, %r7226, %r108;
	mul.wide.s32 	%rd108, %r1850, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r7231;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1853, %r115, %r129;
	mul.wide.s32 	%rd110, %r1853, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7233, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7233, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1854, %r7226, %r108;
	mul.wide.s32 	%rd112, %r1854, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r7233;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1857, %r116, %r129;
	mul.wide.s32 	%rd114, %r1857, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7235, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7235, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1858, %r7226, %r108;
	mul.wide.s32 	%rd116, %r1858, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r7235;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_72:
	or.b32  	%r1859, %r7223, %r129;
	setp.gt.s32 	%p47, %r1859, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7223, %r1687;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1862, %r119, %r129;
	mul.wide.s32 	%rd118, %r1862, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7237, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7237, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1863, %r7226, %r108;
	mul.wide.s32 	%rd120, %r1863, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r7237;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1866, %r117, %r129;
	mul.wide.s32 	%rd122, %r1866, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7239, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7239, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1867, %r7226, %r108;
	mul.wide.s32 	%rd124, %r1867, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r7239;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1870, %r118, %r129;
	mul.wide.s32 	%rd126, %r1870, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7241, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7241, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1871, %r7226, %r108;
	mul.wide.s32 	%rd128, %r1871, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r7241;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_87:
	or.b32  	%r1872, %r121, %r129;
	setp.gt.s32 	%p54, %r1872, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1687;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1875, %r120, %r129;
	mul.wide.s32 	%rd130, %r1875, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7243, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7243, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1876, %r7226, %r108;
	mul.wide.s32 	%rd132, %r1876, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r7243;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1879, %r122, %r129;
	mul.wide.s32 	%rd134, %r1879, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7245, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1880, %r7226, %r108;
	mul.wide.s32 	%rd136, %r1880, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r7245;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1883, %r123, %r129;
	mul.wide.s32 	%rd138, %r1883, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7247, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7247, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1884, %r7226, %r108;
	mul.wide.s32 	%rd140, %r1884, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r7247;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_102:
	or.b32  	%r1885, %r125, %r129;
	setp.gt.s32 	%p61, %r1885, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1687;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1888, %r124, %r129;
	mul.wide.s32 	%rd142, %r1888, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7249, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7249, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1889, %r7226, %r108;
	mul.wide.s32 	%rd144, %r1889, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r7249;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1892, %r126, %r129;
	mul.wide.s32 	%rd146, %r1892, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7251, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7251, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1893, %r7226, %r108;
	mul.wide.s32 	%rd148, %r1893, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r7251;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1896, %r127, %r129;
	mul.wide.s32 	%rd150, %r1896, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7253, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7253, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1897, %r7226, %r108;
	mul.wide.s32 	%rd152, %r1897, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r7253;
	add.s32 	%r7226, %r7226, 1;

$L__BB0_117:
	add.s64 	%rd561, %rd561, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p68, %rd561, %rd155;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7223, %r7223, %r30;
	setp.lt.s32 	%p69, %r7223, %r1687;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7222, %r7222, %r1701;
	setp.lt.s32 	%p70, %r7222, %r1686;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1690, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1943, %r1691, 31;
	add.s32 	%r1944, %r1691, %r1943;
	shr.u32 	%r1945, %r1944, 1;
	and.b32  	%r233, %r1945, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1687;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7261, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1947, %r7261, 31;
	add.s32 	%r1948, %r7261, %r1947;
	shr.s32 	%r1949, %r1948, 1;
	mad.lo.s32 	%r1950, %r1949, %r1686, %r7255;
	shl.b32 	%r237, %r1950, 5;
	add.s32 	%r238, %r7261, -2;
	mul.lo.s32 	%r239, %r238, %r1686;
	add.s32 	%r1951, %r1687, %r238;
	mul.lo.s32 	%r240, %r1951, %r1686;
	add.s32 	%r241, %r239, %r1686;
	add.s32 	%r242, %r7261, -1;
	add.s32 	%r1952, %r1687, %r242;
	mul.lo.s32 	%r243, %r1952, %r1686;
	add.s32 	%r1953, %r1687, %r7261;
	mul.lo.s32 	%r244, %r1953, %r1686;
	mul.lo.s32 	%r245, %r7261, %r1686;
	add.s32 	%r246, %r245, %r1686;
	add.s32 	%r247, %r7261, 1;
	add.s32 	%r1954, %r1687, %r247;
	mul.lo.s32 	%r248, %r1954, %r1686;
	add.s32 	%r249, %r246, %r1686;
	add.s32 	%r250, %r7261, 2;
	add.s32 	%r1955, %r1687, %r250;
	mul.lo.s32 	%r251, %r1955, %r1686;
	mov.u32 	%r7265, 0;
	mov.u64 	%rd562, 24;
	mov.u64 	%rd563, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1956, [%rd563];
	cvt.rn.f64.s32 	%fd2, %r1956;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r1956, %r7255;
	setp.lt.s32 	%p83, %r253, %r1686;
	or.b32  	%r1957, %r238, %r253;
	setp.gt.s32 	%p84, %r1957, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1687;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r1959, %r239, %r253;
	shl.b32 	%r1960, %r1959, 1;
	mul.wide.s32 	%rd178, %r1960, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7265, %r237;
	mul.wide.s32 	%rd180, %r258, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r7263;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r1964, %r240, %r253;
	shl.b32 	%r1965, %r1964, 1;
	mul.wide.s32 	%rd182, %r1965, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1968, %r258, 1;
	mul.wide.s32 	%rd184, %r1968, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r7264;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r1970, %r239, %r253;
	shl.b32 	%r1971, %r1970, 1;
	or.b32  	%r1972, %r1971, 1;
	mul.wide.s32 	%rd186, %r1972, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7265, %r237;
	mul.wide.s32 	%rd188, %r269, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r7266;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r1976, %r240, %r253;
	shl.b32 	%r1977, %r1976, 1;
	or.b32  	%r1978, %r1977, 1;
	mul.wide.s32 	%rd190, %r1978, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1981, %r269, 1;
	mul.wide.s32 	%rd192, %r1981, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r7267;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_168:
	or.b32  	%r1982, %r242, %r253;
	setp.gt.s32 	%p93, %r1982, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7261, %r1687;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r1984, %r241, %r253;
	shl.b32 	%r1985, %r1984, 1;
	mul.wide.s32 	%rd194, %r1985, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7269, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7269, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7265, %r237;
	mul.wide.s32 	%rd196, %r280, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r7269;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r1989, %r243, %r253;
	shl.b32 	%r1990, %r1989, 1;
	mul.wide.s32 	%rd198, %r1990, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7270, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7270, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1993, %r280, 1;
	mul.wide.s32 	%rd200, %r1993, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r7270;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r1995, %r241, %r253;
	shl.b32 	%r1996, %r1995, 1;
	or.b32  	%r1997, %r1996, 1;
	mul.wide.s32 	%rd202, %r1997, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7272, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7272, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7265, %r237;
	mul.wide.s32 	%rd204, %r291, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r7272;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2001, %r243, %r253;
	shl.b32 	%r2002, %r2001, 1;
	or.b32  	%r2003, %r2002, 1;
	mul.wide.s32 	%rd206, %r2003, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7273, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7273, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2006, %r291, 1;
	mul.wide.s32 	%rd208, %r2006, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r7273;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_192:
	or.b32  	%r2007, %r7261, %r253;
	setp.gt.s32 	%p103, %r2007, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7261, %r1687;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2009, %r245, %r253;
	shl.b32 	%r2010, %r2009, 1;
	mul.wide.s32 	%rd210, %r2010, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7275, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7275, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7265, %r237;
	mul.wide.s32 	%rd212, %r302, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r7275;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2014, %r244, %r253;
	shl.b32 	%r2015, %r2014, 1;
	mul.wide.s32 	%rd214, %r2015, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7276, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7276, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2018, %r302, 1;
	mul.wide.s32 	%rd216, %r2018, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r7276;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2020, %r245, %r253;
	shl.b32 	%r2021, %r2020, 1;
	or.b32  	%r2022, %r2021, 1;
	mul.wide.s32 	%rd218, %r2022, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7278, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7278, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7265, %r237;
	mul.wide.s32 	%rd220, %r313, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r7278;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2026, %r244, %r253;
	shl.b32 	%r2027, %r2026, 1;
	or.b32  	%r2028, %r2027, 1;
	mul.wide.s32 	%rd222, %r2028, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7279, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7279, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2031, %r313, 1;
	mul.wide.s32 	%rd224, %r2031, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r7279;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_216:
	or.b32  	%r2032, %r247, %r253;
	setp.gt.s32 	%p113, %r2032, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1687;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2034, %r246, %r253;
	shl.b32 	%r2035, %r2034, 1;
	mul.wide.s32 	%rd226, %r2035, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7265, %r237;
	mul.wide.s32 	%rd228, %r324, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r7281;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2039, %r248, %r253;
	shl.b32 	%r2040, %r2039, 1;
	mul.wide.s32 	%rd230, %r2040, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2043, %r324, 1;
	mul.wide.s32 	%rd232, %r2043, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r7282;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2045, %r246, %r253;
	shl.b32 	%r2046, %r2045, 1;
	or.b32  	%r2047, %r2046, 1;
	mul.wide.s32 	%rd234, %r2047, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7265, %r237;
	mul.wide.s32 	%rd236, %r335, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r7284;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2051, %r248, %r253;
	shl.b32 	%r2052, %r2051, 1;
	or.b32  	%r2053, %r2052, 1;
	mul.wide.s32 	%rd238, %r2053, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2056, %r335, 1;
	mul.wide.s32 	%rd240, %r2056, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r7285;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_240:
	or.b32  	%r2057, %r250, %r253;
	setp.gt.s32 	%p123, %r2057, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1687;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2059, %r249, %r253;
	shl.b32 	%r2060, %r2059, 1;
	mul.wide.s32 	%rd242, %r2060, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7265, %r237;
	mul.wide.s32 	%rd244, %r346, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r7287;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2064, %r251, %r253;
	shl.b32 	%r2065, %r2064, 1;
	mul.wide.s32 	%rd246, %r2065, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2068, %r346, 1;
	mul.wide.s32 	%rd248, %r2068, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r7288;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2070, %r249, %r253;
	shl.b32 	%r2071, %r2070, 1;
	or.b32  	%r2072, %r2071, 1;
	mul.wide.s32 	%rd250, %r2072, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7265, %r237;
	mul.wide.s32 	%rd252, %r357, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r7290;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2076, %r251, %r253;
	shl.b32 	%r2077, %r2076, 1;
	or.b32  	%r2078, %r2077, 1;
	mul.wide.s32 	%rd254, %r2078, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7291, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7291, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2081, %r357, 1;
	mul.wide.s32 	%rd256, %r2081, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r7291;
	add.s32 	%r7265, %r7265, 2;

$L__BB0_264:
	add.s64 	%rd563, %rd563, 4;
	add.s64 	%rd562, %rd562, -4;
	setp.ne.s64 	%p133, %rd562, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7261, %r7261, %r30;
	setp.lt.s32 	%p134, %r7261, %r1687;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7255, %r7255, %r1701;
	setp.lt.s32 	%p135, %r7255, %r1686;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1898, 31;
	sub.s32 	%r1899, %r1898, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1900, %r28, %r1899, %p73;
	shl.b32 	%r1901, %r1900, 2;
	mov.u32 	%r1902, 2;
	sub.s32 	%r208, %r1901, %r1689;
	sub.s32 	%r1903, %r1902, %r1689;
	add.s32 	%r209, %r1903, %r1901;
	add.s32 	%r210, %r1686, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1928, %r211, %r40;
	add.s32 	%r1929, %r1928, %r40;
	rem.s32 	%r223, %r1929, %r40;
	rem.s32 	%r1930, %r212, %r40;
	add.s32 	%r1931, %r1930, %r40;
	rem.s32 	%r224, %r1931, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7255, 1;
	rem.s32 	%r1904, %r208, %r40;
	add.s32 	%r1905, %r1904, %r40;
	rem.s32 	%r215, %r1905, %r40;
	rem.s32 	%r1906, %r209, %r40;
	add.s32 	%r1907, %r1906, %r40;
	rem.s32 	%r216, %r1907, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1910, %r214, %r40;
	add.s32 	%r1911, %r1910, %r215;
	mul.wide.s32 	%rd158, %r1911, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1912, %r1910, %r216;
	mul.wide.s32 	%rd160, %r1912, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7256, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7256, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1913, %r7255, 5;
	add.s32 	%r1914, %r1913, %r28;
	shl.b32 	%r1915, %r1914, 2;
	mul.wide.s32 	%rd162, %r1915, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r7256;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1918, %r214, 1;
	mul.lo.s32 	%r1919, %r1918, %r40;
	add.s32 	%r1920, %r1919, %r215;
	mul.wide.s32 	%rd163, %r1920, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1921, %r1919, %r216;
	mul.wide.s32 	%rd165, %r1921, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7257, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7257, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1922, %r210, %r7255;
	rem.s32 	%r1923, %r1922, %r1686;
	shl.b32 	%r1924, %r1923, 5;
	add.s32 	%r1925, %r1924, %r28;
	shl.b32 	%r1926, %r1925, 2;
	or.b32  	%r1927, %r1926, 2;
	mul.wide.s32 	%rd167, %r1927, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r7257;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1934, %r214, %r40;
	add.s32 	%r1935, %r1934, %r223;
	mul.wide.s32 	%rd168, %r1935, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1936, %r1934, %r224;
	mul.wide.s32 	%rd170, %r1936, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7258, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7258, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7258;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1939, %r214, 1;
	mul.lo.s32 	%r1940, %r1939, %r40;
	add.s32 	%r1941, %r1940, %r223;
	mul.wide.s32 	%rd172, %r1941, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1942, %r1940, %r224;
	mul.wide.s32 	%rd174, %r1942, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7259, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7259;

$L__BB0_137:
	add.s32 	%r7255, %r7255, %r1701;
	setp.lt.s32 	%p79, %r7255, %r1686;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2083, %r1681, -1;
	mad.lo.s32 	%r2084, %r1682, 576, 128;
	mul.lo.s32 	%r2085, %r2084, %r2083;
	add.s32 	%r2086, %r52, -64;
	add.s32 	%r2087, %r2086, %r52;
	add.s32 	%r2088, %r1682, -1;
	mad.lo.s32 	%r2089, %r2087, %r2088, %r2085;
	mul.lo.s32 	%r2090, %r2083, %r1682;
	mul.lo.s32 	%r2091, %r2090, 320;
	mad.lo.s32 	%r2092, %r2086, %r2088, %r2091;
	add.s32 	%r366, %r2092, %r2089;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7295, 0;
	mov.u32 	%r7293, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7293], %r7474;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2095, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7293+4], %r2095;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2096, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7293+8], %r2096;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2097, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7293+12], %r2097;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	add.s32 	%r7293, %r7293, 16;
	add.s32 	%r7295, %r7295, 4;
	setp.lt.s32 	%p137, %r7295, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2100, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r2101, 31;
	sub.s32 	%r2102, %r2101, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2103, %r28, %r2102, %p138;
	shl.b32 	%r2104, %r2103, 2;
	sub.s32 	%r377, %r2104, %r1689;
	rem.s32 	%r2105, %r377, %r40;
	add.s32 	%r2106, %r2105, %r40;
	rem.s32 	%r378, %r2106, %r40;
	add.s32 	%r2107, %r377, 2;
	rem.s32 	%r2108, %r2107, %r40;
	add.s32 	%r2109, %r2108, %r40;
	rem.s32 	%r379, %r2109, %r40;
	mul.lo.s32 	%r2110, %r378, 6;
	mul.lo.s32 	%r2111, %r379, 6;
	mul.wide.s32 	%rd259, %r2110, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r2111, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7297, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2120, %r377, 1;
	rem.s32 	%r2121, %r2120, %r40;
	add.s32 	%r2122, %r2121, %r40;
	rem.s32 	%r392, %r2122, %r40;
	add.s32 	%r2123, %r377, 3;
	rem.s32 	%r2124, %r2123, %r40;
	add.s32 	%r2125, %r2124, %r40;
	rem.s32 	%r393, %r2125, %r40;
	mul.lo.s32 	%r2126, %r392, 6;
	mul.lo.s32 	%r2127, %r393, 6;
	mul.wide.s32 	%rd261, %r2126, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r2127, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2136, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2136;
	// begin inline asm
	mov.u32 %r2137, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r2137;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2138, %nctaid.y;
	mov.u32 	%r2139, %nctaid.x;
	mul.lo.s32 	%r2140, %r2139, %r2138;
	mov.u32 	%r2141, %nctaid.z;
	mul.lo.s32 	%r406, %r2140, %r2141;
	neg.s32 	%r2142, %r24;
	add.s32 	%r2143, %r28, %r23;
	setp.ne.s32 	%p148, %r2143, %r2142;
	mov.u32 	%r2144, %ctaid.x;
	add.s32 	%r407, %r2144, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2147, -2147483647;
	sub.s32 	%r2148, %r2147, %r406;
	selp.b32 	%r2146, %r2148, 1, %p149;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2145,[%rd25],%r2146;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2149, [%rd25];
	xor.b32  	%r2150, %r2149, %r2145;
	setp.gt.s32 	%p150, %r2150, -1;
	@%p150 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2151,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_672;

	shr.s32 	%r2165, %r1691, 31;
	shr.u32 	%r2166, %r2165, 30;
	add.s32 	%r2167, %r1691, %r2166;
	shr.s32 	%r410, %r2167, 2;
	add.s32 	%r2168, %r28, 25;
	mul.hi.s32 	%r2169, %r2168, 1321528399;
	shr.u32 	%r2170, %r2169, 31;
	shr.s32 	%r2171, %r2169, 3;
	add.s32 	%r2172, %r2171, %r2170;
	mul.lo.s32 	%r2173, %r2172, 26;
	sub.s32 	%r2174, %r2168, %r2173;
	add.s32 	%r2175, %r28, 27;
	mul.hi.s32 	%r2176, %r2175, 1321528399;
	shr.u32 	%r2177, %r2176, 31;
	shr.s32 	%r2178, %r2176, 3;
	add.s32 	%r2179, %r2178, %r2177;
	mul.lo.s32 	%r2180, %r2179, 26;
	sub.s32 	%r2181, %r2175, %r2180;
	shr.u32 	%r2182, %r1691, 31;
	add.s32 	%r2183, %r1691, %r2182;
	and.b32  	%r2184, %r2183, -2;
	sub.s32 	%r411, %r1691, %r2184;
	setp.lt.s32 	%p152, %r28, 26;
	selp.b32 	%r412, %r2174, %r28, %p152;
	selp.b32 	%r413, %r2181, %r28, %p152;
	mov.u32 	%r2164, 0;
	// begin inline asm
	{mov.u32 %r2185, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2511, %r2185, 8;
	add.s32 	%r2512, %r2511, -8192;
	or.b32  	%r2189, %r2512, 31;
	mul.wide.s32 	%rd275, %r28, 16;
	mul.wide.s32 	%rd277, %r28, 8;
	mov.u32 	%r7305, %r2164;
	mov.u32 	%r7306, %r2164;
	mov.u32 	%r7307, %r2164;
	mov.u32 	%r7308, %r2164;
	mov.u32 	%r7309, %r2164;
	mov.u32 	%r7310, %r2164;
	mov.u32 	%r7311, %r2164;
	mov.u32 	%r7312, %r2164;
	mov.u32 	%r7313, %r2164;
	mov.u32 	%r7314, %r2164;
	mov.u32 	%r7315, %r2164;
	mov.u32 	%r7316, %r2164;
	mov.u32 	%r7604, %r2100;
	mov.u32 	%r7605, %r2100;
	mov.u32 	%r7602, %r2100;
	mov.u32 	%r7603, %r2100;
	mov.u32 	%r7624, %r2100;
	mov.u32 	%r7625, %r2100;
	mov.u32 	%r7638, %r2100;
	mov.u32 	%r7626, %r2100;
	mov.u32 	%r7640, %r2100;
	mov.u32 	%r7627, %r2100;
	mov.u32 	%r7628, %r2100;
	mov.u32 	%r7629, %r2100;
	mov.u32 	%r7630, %r2100;
	mov.u32 	%r7631, %r2100;
	mov.u32 	%r7632, %r2100;
	mov.u32 	%r7633, %r2100;
	mov.u32 	%r7642, %r2100;
	mov.u32 	%r7643, %r2100;
	mov.u32 	%r7644, %r2100;
	mov.u32 	%r7645, %r2100;
	mov.u32 	%r7646, %r2100;
	mov.u32 	%r7647, %r2100;
	mov.u32 	%r7634, %r2100;
	mov.u32 	%r7635, %r2100;
	mov.u32 	%r7648, %r2100;
	mov.u32 	%r7649, %r2100;
	mov.u32 	%r7636, %r2100;
	mov.u32 	%r7637, %r2100;
	mov.u32 	%r7606, %r2100;
	mov.u32 	%r7607, %r2100;
	mov.u32 	%r7594, %r2100;
	mov.u32 	%r7595, %r2100;
	mov.u32 	%r7596, %r2100;
	mov.u32 	%r7597, %r2100;
	mov.u32 	%r7608, %r2100;
	mov.u32 	%r7609, %r2100;
	mov.u32 	%r7610, %r2100;
	mov.u32 	%r7611, %r2100;
	mov.u32 	%r7612, %r2100;
	mov.u32 	%r7613, %r2100;
	mov.u32 	%r7598, %r2100;
	mov.u32 	%r7599, %r2100;
	mov.u32 	%r7600, %r2100;
	mov.u32 	%r7601, %r2100;
	mov.u32 	%r7614, %r2100;
	mov.u32 	%r7615, %r2100;
	mov.u32 	%r7616, %r2100;
	mov.u32 	%r7617, %r2100;
	mov.u32 	%r7365, %r2100;
	mov.u32 	%r7366, %r2100;
	mov.u32 	%r7664, %r2100;
	mov.u32 	%r7665, %r2100;
	mov.u32 	%r7371, %r2100;
	mov.u32 	%r7372, %r2100;
	mov.u32 	%r7373, %r2100;
	mov.u32 	%r7374, %r2100;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7377, %r2100;
	mov.u32 	%r7668, %r2100;
	mov.u32 	%r7379, %r2100;
	mov.u32 	%r7380, %r2100;
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7382, %r2100;
	mov.u32 	%r7383, %r2100;
	mov.u32 	%r7384, %r2100;
	mov.u32 	%r7618, %r2100;
	mov.u32 	%r7619, %r2100;
	mov.u32 	%r7387, %r2100;
	mov.u32 	%r7388, %r2100;
	mov.u32 	%r7391, %r2100;
	mov.u32 	%r7392, %r2100;
	mov.u32 	%r7393, %r2100;
	mov.u32 	%r7394, %r2100;
	mov.u32 	%r7395, %r2100;
	mov.u32 	%r7673, %r2100;
	mov.u32 	%r7397, %r2100;
	mov.u32 	%r7398, %r2100;
	mov.u32 	%r7399, %r2100;
	mov.u32 	%r7400, %r2100;
	mov.u32 	%r7401, %r2100;
	mov.u32 	%r7402, %r2100;
	mov.u32 	%r7403, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7405, %r2100;
	mov.u32 	%r7406, %r2100;
	mov.u32 	%r7407, %r2100;
	mov.u32 	%r7676, %r2100;
	mov.u32 	%r7409, %r2100;
	mov.u32 	%r7410, %r2100;
	mov.u32 	%r7411, %r2100;
	mov.u32 	%r7412, %r2100;
	mov.u32 	%r7413, %r2100;
	mov.u32 	%r7414, %r2100;
	mov.u32 	%r7415, %r2100;
	mov.u32 	%r7677, %r2100;
	mov.u32 	%r7417, %r2100;
	mov.u32 	%r7620, %r2100;
	mov.u32 	%r7419, %r2100;
	mov.u32 	%r7420, %r2100;
	mov.u32 	%r7421, %r2100;
	mov.u32 	%r7422, %r2100;
	mov.u32 	%r7621, %r2100;
	mov.u32 	%r7424, %r2100;
	mov.u32 	%r7425, %r2100;
	mov.u32 	%r7426, %r2100;
	mov.u32 	%r7427, %r2100;
	mov.u32 	%r7428, %r2100;
	mov.u32 	%r7429, %r2100;
	mov.u32 	%r7430, %r2100;
	mov.u32 	%r7431, %r2100;
	mov.u32 	%r7432, %r2100;
	mov.u32 	%r7433, %r2100;
	mov.u32 	%r7434, %r2100;
	mov.u32 	%r7435, %r2100;
	mov.u32 	%r7436, %r2100;
	mov.u32 	%r7437, %r2100;
	mov.u32 	%r7438, %r2100;
	mov.u32 	%r7439, %r2100;
	mov.u32 	%r7440, %r2100;
	mov.u32 	%r7441, %r2100;
	mov.u32 	%r7442, %r2100;
	mov.u32 	%r7443, %r2100;
	mov.u32 	%r7444, %r2100;
	mov.u32 	%r7445, %r2100;
	mov.u32 	%r7446, %r2100;
	mov.u32 	%r7447, %r2100;
	mov.u32 	%r7448, %r2100;
	mov.u32 	%r7449, %r2100;
	mov.u32 	%r7450, %r2100;
	mov.u32 	%r7451, %r2100;
	mov.u32 	%r7452, %r2100;
	mov.u32 	%r7453, %r2100;
	mov.u32 	%r7454, %r2100;
	mov.u32 	%r7455, %r2100;
	mov.u32 	%r7456, %r2100;
	mov.u32 	%r7457, %r2100;
	mov.u32 	%r7458, %r2100;
	mov.u32 	%r7459, %r2100;
	mov.u32 	%r7460, %r2100;
	mov.u32 	%r7461, %r2100;
	mov.u32 	%r7462, %r2100;
	mov.u32 	%r7463, %r2100;
	mov.u32 	%r7464, %r2100;
	mov.u32 	%r7465, %r2100;
	mov.u32 	%r7466, %r2100;
	mov.u32 	%r7467, %r2100;
	mov.u32 	%r7468, %r2100;
	mov.u32 	%r7469, %r2100;
	mov.u32 	%r7470, %r2100;
	mov.u32 	%r7471, %r2100;
	mov.u32 	%r7472, %r2100;
	mov.u32 	%r7473, %r2164;

$L__BB0_302:
	mov.u32 	%r525, %r7677;
	mov.u32 	%r521, %r7412;
	mov.u32 	%r517, %r7676;
	mov.u32 	%r515, %r7406;
	mov.u32 	%r513, %r7675;
	mov.u32 	%r505, %r7673;
	mov.u32 	%r7412, %r7669;
	mov.u32 	%r487, %r7668;
	mov.u32 	%r7406, %r7667;
	mov.u32 	%r484, %r7666;
	mov.u32 	%r479, %r7665;
	mov.u32 	%r478, %r7664;
	sub.s32 	%r7206, %r1686, %r30;
	mov.u32 	%r2200, 1;
	not.b32 	%r2474, %r25;
	mov.u32 	%r2466, -1;
	add.s32 	%r2475, %r1683, %r2474;
	mul.lo.s32 	%r2476, %r2475, %r1685;
	add.s32 	%r2477, %r7473, %r2476;
	not.b32 	%r2479, %r26;
	add.s32 	%r2480, %r1684, %r2479;
	mul.lo.s32 	%r2481, %r2480, %r1685;
	add.s32 	%r2482, %r7473, %r2481;
	add.s32 	%r2483, %r2476, %r2481;
	add.s32 	%r2484, %r2483, %r1686;
	not.b32 	%r2485, %r23;
	add.s32 	%r2486, %r1681, %r2485;
	mad.lo.s32 	%r2487, %r2475, %r1681, %r2486;
	not.b32 	%r2488, %r24;
	add.s32 	%r2489, %r1682, %r2488;
	mad.lo.s32 	%r2490, %r2480, %r1682, %r2489;
	add.s32 	%r2491, %r2487, %r2490;
	shl.b32 	%r2492, %r2491, 1;
	add.s32 	%r2493, %r2484, %r2492;
	add.s32 	%r2494, %r7473, %r2493;
	add.s32 	%r2495, %r7473, %r2483;
	div.s32 	%r2496, %r2494, %r1686;
	neg.s32 	%r2497, %r1686;
	sub.s32 	%r2500, %r30, %r1686;
	sub.s32 	%r2501, %r2487, %r2490;
	shl.b32 	%r2502, %r2501, 1;
	add.s32 	%r2503, %r2502, %r1687;
	mad.lo.s32 	%r2504, %r2496, %r30, %r2503;
	mad.lo.s32 	%r2505, %r2496, %r2500, %r2495;
	div.s32 	%r2506, %r2504, %r1687;
	mul.lo.s32 	%r2507, %r2506, %r1687;
	sub.s32 	%r2510, %r1702, %r1687;
	mov.u32 	%r2284, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2186,%r7475,%r2164,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2192, %r7298, %r2186, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2192,%r7472;
}
	// end inline asm
	selp.b32 	%r2195, %r7302, %r2186, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2195,%r7471;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2198,%r7475,%r2200,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2204, %r7298, %r2198, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2204,%r7470;
}
	// end inline asm
	selp.b32 	%r2207, %r7302, %r2198, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2207,%r7469;
}
	// end inline asm
	mov.u32 	%r2212, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2210,%r7475,%r2212,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2216, %r7298, %r2210, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2216,%r7468;
}
	// end inline asm
	selp.b32 	%r2219, %r7302, %r2210, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2219,%r7467;
}
	// end inline asm
	mov.u32 	%r2224, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2222,%r7475,%r2224,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2228, %r7298, %r2222, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2228,%r7649;
}
	// end inline asm
	selp.b32 	%r2231, %r7302, %r2222, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2231,%r7648;
}
	// end inline asm
	mov.u32 	%r2236, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2234,%r7475,%r2236,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2240, %r7298, %r2234, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2240,%r7466;
}
	// end inline asm
	selp.b32 	%r2243, %r7302, %r2234, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2243,%r7465;
}
	// end inline asm
	mov.u32 	%r2248, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2246,%r7475,%r2248,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2252, %r7298, %r2246, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2252,%r7464;
}
	// end inline asm
	selp.b32 	%r2255, %r7302, %r2246, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2255,%r7463;
}
	// end inline asm
	mov.u32 	%r2260, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2258,%r7475,%r2260,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2264, %r7298, %r2258, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2264,%r7462;
}
	// end inline asm
	selp.b32 	%r2267, %r7302, %r2258, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2267,%r7461;
}
	// end inline asm
	mov.u32 	%r2272, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2270,%r7475,%r2272,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2276, %r7298, %r2270, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2276,%r7460;
}
	// end inline asm
	selp.b32 	%r2279, %r7302, %r2270, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2279,%r7459;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2282,%r7475,%r2284,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2288, %r7298, %r2282, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2288,%r7458;
}
	// end inline asm
	selp.b32 	%r2291, %r7302, %r2282, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2291,%r7457;
}
	// end inline asm
	mov.u32 	%r2296, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2294,%r7475,%r2296,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2300, %r7298, %r2294, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2300,%r7456;
}
	// end inline asm
	selp.b32 	%r2303, %r7302, %r2294, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2303,%r7455;
}
	// end inline asm
	mov.u32 	%r2308, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2306,%r7475,%r2308,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2312, %r7298, %r2306, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2312,%r7454;
}
	// end inline asm
	selp.b32 	%r2315, %r7302, %r2306, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2315,%r7453;
}
	// end inline asm
	mov.u32 	%r2320, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2318,%r7475,%r2320,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2324, %r7298, %r2318, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2324,%r7635;
}
	// end inline asm
	selp.b32 	%r2327, %r7302, %r2318, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2327,%r7634;
}
	// end inline asm
	mov.u32 	%r2332, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2330,%r7475,%r2332,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2336, %r7298, %r2330, %p12;
	// begin inline asm
	{mul.f16x2 %r7535,%r2336,%r7647;
}
	// end inline asm
	selp.b32 	%r2339, %r7302, %r2330, %p12;
	// begin inline asm
	{mul.f16x2 %r7533,%r2339,%r7645;
}
	// end inline asm
	mov.u32 	%r2344, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2342,%r7475,%r2344,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2348, %r7298, %r2342, %p12;
	// begin inline asm
	{mul.f16x2 %r7534,%r2348,%r7646;
}
	// end inline asm
	selp.b32 	%r2351, %r7302, %r2342, %p12;
	// begin inline asm
	{mul.f16x2 %r7532,%r2351,%r7644;
}
	// end inline asm
	mov.u32 	%r2356, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2354,%r7475,%r2356,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2360, %r7298, %r2354, %p12;
	// begin inline asm
	{mul.f16x2 %r7531,%r2360,%r7643;
}
	// end inline asm
	selp.b32 	%r2363, %r7302, %r2354, %p12;
	// begin inline asm
	{mul.f16x2 %r7528,%r2363,%r7642;
}
	// end inline asm
	mov.u32 	%r2368, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2366,%r7475,%r2368,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2372, %r7298, %r2366, %p12;
	// begin inline asm
	{mul.f16x2 %r7530,%r2372,%r7452;
}
	// end inline asm
	selp.b32 	%r2375, %r7302, %r2366, %p12;
	// begin inline asm
	{mul.f16x2 %r7527,%r2375,%r7451;
}
	// end inline asm
	mov.u32 	%r2380, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2378,%r7475,%r2380,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2384, %r7298, %r2378, %p12;
	// begin inline asm
	{mul.f16x2 %r7529,%r2384,%r7450;
}
	// end inline asm
	selp.b32 	%r2387, %r7302, %r2378, %p12;
	// begin inline asm
	{mul.f16x2 %r7526,%r2387,%r7449;
}
	// end inline asm
	mov.u32 	%r2392, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2390,%r7475,%r2392,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2396, %r7298, %r2390, %p12;
	// begin inline asm
	{mul.f16x2 %r7525,%r2396,%r7633;
}
	// end inline asm
	selp.b32 	%r2399, %r7302, %r2390, %p12;
	// begin inline asm
	{mul.f16x2 %r7522,%r2399,%r7631;
}
	// end inline asm
	mov.u32 	%r2404, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2402,%r7475,%r2404,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2408, %r7298, %r2402, %p12;
	// begin inline asm
	{mul.f16x2 %r7524,%r2408,%r7632;
}
	// end inline asm
	selp.b32 	%r2411, %r7302, %r2402, %p12;
	// begin inline asm
	{mul.f16x2 %r7521,%r2411,%r7630;
}
	// end inline asm
	mov.u32 	%r2416, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2414,%r7475,%r2416,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2420, %r7298, %r2414, %p12;
	// begin inline asm
	{mul.f16x2 %r7523,%r2420,%r7448;
}
	// end inline asm
	selp.b32 	%r2423, %r7302, %r2414, %p12;
	// begin inline asm
	{mul.f16x2 %r7520,%r2423,%r7447;
}
	// end inline asm
	mov.u32 	%r2428, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2426,%r7475,%r2428,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2432, %r7298, %r2426, %p12;
	// begin inline asm
	{mul.f16x2 %r7519,%r2432,%r7629;
}
	// end inline asm
	selp.b32 	%r2435, %r7302, %r2426, %p12;
	// begin inline asm
	{mul.f16x2 %r7518,%r2435,%r7628;
}
	// end inline asm
	mov.u32 	%r2440, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2438,%r7475,%r2440,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2444, %r7298, %r2438, %p12;
	// begin inline asm
	{mul.f16x2 %r7517,%r2444,%r7627;
}
	// end inline asm
	selp.b32 	%r2447, %r7302, %r2438, %p12;
	// begin inline asm
	{mul.f16x2 %r7515,%r2447,%r7626;
}
	// end inline asm
	mov.u32 	%r2452, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2450,%r7475,%r2452,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2456, %r7298, %r2450, %p12;
	// begin inline asm
	{mul.f16x2 %r7516,%r2456,%r7640;
}
	// end inline asm
	selp.b32 	%r2459, %r7302, %r2450, %p12;
	// begin inline asm
	{mul.f16x2 %r7514,%r2459,%r7638;
}
	// end inline asm
	mov.u32 	%r2464, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2462,%r7475,%r2464,%r2189,%r2466;
}
	// end inline asm
	selp.b32 	%r2468, %r7298, %r2462, %p12;
	// begin inline asm
	{mul.f16x2 %r7513,%r2468,%r7625;
}
	// end inline asm
	selp.b32 	%r2471, %r7302, %r2462, %p12;
	// begin inline asm
	{mul.f16x2 %r7512,%r2471,%r7624;
}
	// end inline asm
	rem.s32 	%r633, %r2477, %r51;
	rem.s32 	%r634, %r2482, %r7206;
	mad.lo.s32 	%r635, %r2496, %r2497, %r2494;
	sub.s32 	%r636, %r2504, %r2507;
	mad.lo.s32 	%r637, %r2506, %r2510, %r2505;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2560, %r637, 1;
	mul.wide.s32 	%rd270, %r2560, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2763, %r1697, 1;
	setp.lt.s32 	%p160, %r637, %r2763;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r637, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7478, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7479, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2563, %r1697, 1;
	setp.lt.s32 	%p155, %r637, %r2563;
	setp.gt.s32 	%p156, %r637, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7476, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7477, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2771, 0;
	mov.u32 	%r2782, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2769,%r7474,%r2771,%r2189,%r2782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2774,%r7478,%r2769;
}
	// end inline asm
	mov.u32 	%r2780, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2778,%r7474,%r2780,%r2189,%r2782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2783,%r7479,%r2778;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7481,%r2774,%r2783;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7480, %r7481;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7480, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r7480;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7481;
}
	// end inline asm
	mov.u32 	%r2804, 2;
	mov.u32 	%r2815, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2802,%r7474,%r2804,%r2189,%r2815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2807,%r7478,%r2802;
}
	// end inline asm
	mov.u32 	%r2813, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2811,%r7474,%r2813,%r2189,%r2815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2816,%r7479,%r2811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r2807,%r2816;
}
	// end inline asm
	mov.u32 	%r7482, %r7483;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r7482;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7483;
}
	// end inline asm
	mov.u32 	%r2837, 4;
	mov.u32 	%r2848, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2835,%r7474,%r2837,%r2189,%r2848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2840,%r7478,%r2835;
}
	// end inline asm
	mov.u32 	%r2846, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2844,%r7474,%r2846,%r2189,%r2848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2849,%r7479,%r2844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r2840,%r2849;
}
	// end inline asm
	mov.u32 	%r7484, %r7485;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7484;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r7485;
}
	// end inline asm
	mov.u32 	%r2870, 6;
	mov.u32 	%r2881, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2868,%r7474,%r2870,%r2189,%r2881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2873,%r7478,%r2868;
}
	// end inline asm
	mov.u32 	%r2879, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2877,%r7474,%r2879,%r2189,%r2881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2882,%r7479,%r2877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r2873,%r2882;
}
	// end inline asm
	mov.u32 	%r7486, %r7487;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r7486;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7487, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r7487;
}
	// end inline asm
	mov.u32 	%r2903, 8;
	mov.u32 	%r2914, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2901,%r7474,%r2903,%r2189,%r2914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2906,%r7478,%r2901;
}
	// end inline asm
	mov.u32 	%r2912, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2910,%r7474,%r2912,%r2189,%r2914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2915,%r7479,%r2910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r2906,%r2915;
}
	// end inline asm
	mov.u32 	%r7488, %r7489;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r7488;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r7489;
}
	// end inline asm
	mov.u32 	%r2936, 10;
	mov.u32 	%r2947, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2934,%r7474,%r2936,%r2189,%r2947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2939,%r7478,%r2934;
}
	// end inline asm
	mov.u32 	%r2945, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2943,%r7474,%r2945,%r2189,%r2947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2948,%r7479,%r2943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r2939,%r2948;
}
	// end inline asm
	mov.u32 	%r7490, %r7491;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7490, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r7490;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r7491;
}
	// end inline asm
	mov.u32 	%r2969, 12;
	mov.u32 	%r2980, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2967,%r7474,%r2969,%r2189,%r2980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2972,%r7478,%r2967;
}
	// end inline asm
	mov.u32 	%r2978, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2976,%r7474,%r2978,%r2189,%r2980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2981,%r7479,%r2976;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7493,%r2972,%r2981;
}
	// end inline asm
	mov.u32 	%r7492, %r7493;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r7492;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7493, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r7493;
}
	// end inline asm
	mov.u32 	%r3002, 14;
	mov.u32 	%r3013, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3000,%r7474,%r3002,%r2189,%r3013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3005,%r7478,%r3000;
}
	// end inline asm
	mov.u32 	%r3011, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3009,%r7474,%r3011,%r2189,%r3013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3014,%r7479,%r3009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r3005,%r3014;
}
	// end inline asm
	mov.u32 	%r7494, %r7495;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r7494;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r7495;
}
	// end inline asm
	mov.u32 	%r3035, 16;
	mov.u32 	%r3046, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3033,%r7474,%r3035,%r2189,%r3046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3038,%r7478,%r3033;
}
	// end inline asm
	mov.u32 	%r3044, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3042,%r7474,%r3044,%r2189,%r3046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3047,%r7479,%r3042;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7497,%r3038,%r3047;
}
	// end inline asm
	mov.u32 	%r7496, %r7497;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7496, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r7496;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r7497;
}
	// end inline asm
	mov.u32 	%r3068, 18;
	mov.u32 	%r3079, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3066,%r7474,%r3068,%r2189,%r3079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3071,%r7478,%r3066;
}
	// end inline asm
	mov.u32 	%r3077, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3075,%r7474,%r3077,%r2189,%r3079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3080,%r7479,%r3075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7499,%r3071,%r3080;
}
	// end inline asm
	mov.u32 	%r7498, %r7499;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r7498;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r7499;
}
	// end inline asm
	mov.u32 	%r3101, 20;
	mov.u32 	%r3112, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3099,%r7474,%r3101,%r2189,%r3112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3104,%r7478,%r3099;
}
	// end inline asm
	mov.u32 	%r3110, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3108,%r7474,%r3110,%r2189,%r3112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3113,%r7479,%r3108;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7501,%r3104,%r3113;
}
	// end inline asm
	mov.u32 	%r7500, %r7501;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r7500;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7533,%r7533,%r7501;
}
	// end inline asm
	mov.u32 	%r3134, 22;
	mov.u32 	%r3145, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3132,%r7474,%r3134,%r2189,%r3145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3137,%r7478,%r3132;
}
	// end inline asm
	mov.u32 	%r3143, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3141,%r7474,%r3143,%r2189,%r3145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3146,%r7479,%r3141;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r3137,%r3146;
}
	// end inline asm
	mov.u32 	%r7502, %r7503;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7531,%r7531,%r7502;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7528,%r7528,%r7503;
}
	// end inline asm
	mov.u32 	%r3167, 24;
	mov.u32 	%r3178, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3165,%r7474,%r3167,%r2189,%r3178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3170,%r7478,%r3165;
}
	// end inline asm
	mov.u32 	%r3176, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3174,%r7474,%r3176,%r2189,%r3178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3179,%r7479,%r3174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r3170,%r3179;
}
	// end inline asm
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7530,%r7530,%r7504;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7527,%r7527,%r7505;
}
	// end inline asm
	mov.u32 	%r3200, 26;
	mov.u32 	%r3211, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3198,%r7474,%r3200,%r2189,%r3211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3203,%r7478,%r3198;
}
	// end inline asm
	mov.u32 	%r3209, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3207,%r7474,%r3209,%r2189,%r3211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3212,%r7479,%r3207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r3203,%r3212;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7525,%r7525,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7522,%r7522,%r7507;
}
	// end inline asm
	mov.u32 	%r3233, 28;
	mov.u32 	%r3244, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3231,%r7474,%r3233,%r2189,%r3244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3236,%r7478,%r3231;
}
	// end inline asm
	mov.u32 	%r3242, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3240,%r7474,%r3242,%r2189,%r3244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3245,%r7479,%r3240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r3236,%r3245;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7524,%r7524,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7521,%r7521,%r7509;
}
	// end inline asm
	mov.u32 	%r3275, 31;
	mov.u32 	%r3266, 30;
	mov.u32 	%r3277, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3264,%r7474,%r3266,%r2189,%r3277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3269,%r7478,%r3264;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3273,%r7474,%r3275,%r2189,%r3277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3278,%r7479,%r3273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r3269,%r3278;
}
	// end inline asm
	mov.u32 	%r7510, %r7511;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7517,%r7517,%r7510;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7515,%r7515,%r7511;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r636, %r1691;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2665,%r7476,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2671,%r7476,%r7306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r2671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2677,%r7476,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r2677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2683,%r7476,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r7529,%r2683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r7476,%r7316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r7531,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2695,%r7476,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7516,%r7516,%r2695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2701,%r7477,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2707,%r7477,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r2707;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2713,%r7476,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2719,%r7476,%r7305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2725,%r7476,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r7476,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r7526,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2737,%r7476,%r7315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r7528,%r2737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2743,%r7476,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7514,%r7514,%r2743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2749,%r7477,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r7477,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r7532,%r2755;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2568, %r1691, -2;
	setp.ne.s32 	%p159, %r636, %r2568;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2569,%r7476,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r2569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2575,%r7476,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7519,%r7519,%r2575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2581,%r7477,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2587,%r7477,%r7306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r2587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2593,%r7477,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r2593;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2599,%r7477,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r7523,%r2599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2605,%r7477,%r7316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r7525,%r2605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2611,%r7477,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r7513,%r2611;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2617,%r7476,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2623,%r7476,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7518,%r7518,%r2623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2629,%r7477,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r2629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2635,%r7477,%r7305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2641,%r7477,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r2641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2647,%r7477,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7520,%r7520,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2653,%r7477,%r7315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r7522,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2659,%r7477,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7512,%r7512,%r2659;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7664, %r2100;
	mov.u32 	%r7665, %r2100;
	mov.u32 	%r7670, %r2100;
	mov.u32 	%r7671, %r2100;
	mov.u32 	%r7672, %r2100;
	mov.u32 	%r7673, %r2100;
	mov.u32 	%r7674, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7682, %r2100;
	mov.u32 	%r7683, %r2100;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3296, %r1682, 320;
	add.s32 	%r3297, %r23, -1;
	mul.lo.s32 	%r3298, %r24, 320;
	mad.lo.s32 	%r3299, %r3296, %r3297, %r3298;
	add.s32 	%r3302, %r1737, -64;
	mad.lo.s32 	%r3307, %r3302, %r2088, %r2085;
	add.s32 	%r3308, %r3299, %r3307;
	shl.b32 	%r3309, %r3308, 2;
	mov.u32 	%r3310, _ZN6kernel5shmemE;
	add.s32 	%r3311, %r3310, %r3309;
	shl.b32 	%r3312, %r28, 4;
	add.s32 	%r3313, %r3311, %r3312;
	ld.shared.v4.u32 	{%r7675, %r7673, %r7665, %r7664}, [%r3313];
	shl.b32 	%r3318, %r28, 3;
	add.s32 	%r3319, %r3311, %r3318;
	ld.shared.v2.u32 	{%r7674, %r7672}, [%r3319+512];
	ld.shared.v4.u32 	{%r7683, %r7682, %r7671, %r7670}, [%r3313+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7668, %r2100;
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7676, %r2100;
	mov.u32 	%r7677, %r2100;
	mov.u32 	%r7678, %r2100;
	mov.u32 	%r7679, %r2100;
	mov.u32 	%r7680, %r2100;
	mov.u32 	%r7681, %r2100;
	mov.u32 	%r7684, %r2100;
	mov.u32 	%r7685, %r2100;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3331, %r2486, 384, %r2091;
	add.s32 	%r3334, %r24, -1;
	mad.lo.s32 	%r3335, %r2086, %r3334, %r3331;
	add.s32 	%r3341, %r3335, %r2089;
	shl.b32 	%r3342, %r3341, 2;
	mov.u32 	%r3343, _ZN6kernel5shmemE;
	add.s32 	%r3344, %r3343, %r3342;
	shl.b32 	%r3345, %r28, 4;
	add.s32 	%r3346, %r3344, %r3345;
	ld.shared.v4.u32 	{%r7685, %r7684, %r7680, %r7678}, [%r3346];
	shl.b32 	%r3351, %r28, 3;
	add.s32 	%r3352, %r3344, %r3351;
	ld.shared.v2.u32 	{%r7681, %r7679}, [%r3352+512];
	ld.shared.v4.u32 	{%r7677, %r7676, %r7668, %r7666}, [%r3346+768];
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7669, %r2100;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7196, %r3352, 512;
	ld.shared.v2.u32 	{%r7669, %r7667}, [%r7196+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2088;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3362, %r1681, %r23;
	mul.lo.s32 	%r3364, %r52, %r24;
	mad.lo.s32 	%r3365, %r3362, 384, %r3364;
	mad.lo.s32 	%r3368, %r2086, %r2088, %r3365;
	mad.lo.s32 	%r3371, %r2084, %r2083, %r3368;
	shl.b32 	%r3372, %r3371, 2;
	mov.u32 	%r3373, _ZN6kernel5shmemE;
	add.s32 	%r3374, %r3373, %r3372;
	shl.b32 	%r3375, %r28, 4;
	add.s32 	%r3376, %r3374, %r3375;
	ld.shared.v4.u32 	{%r7603, %r7602, %r7605, %r7604}, [%r3376];

$L__BB0_386:
	shl.b32 	%r3381, %r24, 8;
	shl.b32 	%r3385, %r1682, 8;
	or.b32  	%r3386, %r3385, 128;
	add.s32 	%r3387, %r23, -1;
	mad.lo.s32 	%r3388, %r3386, %r3387, %r2091;
	add.s32 	%r3389, %r3388, %r3381;
	shl.b32 	%r3390, %r3389, 2;
	mov.u32 	%r3391, _ZN6kernel5shmemE;
	add.s32 	%r3392, %r3391, %r3390;
	setp.ne.s32 	%p202, %r24, %r2088;
	shl.b32 	%r3394, %r28, 4;
	add.s32 	%r899, %r3392, %r3394;
	ld.shared.v4.u32 	{%r7596, %r7594, %r7597, %r7595}, [%r899];
	ld.shared.v4.u32 	{%r7601, %r7600, %r7599, %r7598}, [%r899+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7603, %r7602, %r7605, %r7604}, [%r899+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3408, %r52, %r24;
	sub.s32 	%r3409, %r3408, %r52;
	mad.lo.s32 	%r3412, %r2486, 384, %r3409;
	mad.lo.s32 	%r3415, %r2086, %r2088, %r3412;
	mad.lo.s32 	%r3418, %r2084, %r2083, %r3415;
	shl.b32 	%r3419, %r3418, 2;
	mov.u32 	%r3420, _ZN6kernel5shmemE;
	add.s32 	%r3421, %r3420, %r3419;
	shl.b32 	%r3422, %r28, 4;
	add.s32 	%r928, %r3421, %r3422;
	ld.shared.v4.u32 	{%r7619, %r7618, %r7621, %r7620}, [%r928];
	ld.shared.v4.u32 	{%r7617, %r7615, %r7613, %r7612}, [%r928+512];
	ld.shared.v4.u32 	{%r7616, %r7614, %r7611, %r7609}, [%r928+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7607, %r7606, %r7610, %r7608}, [%r928+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd552, [%rd1+80];
	cvta.to.global.u64 	%rd551, %rd552;
	mad.lo.s32 	%r3440, %r633, %r1684, %r26;
	mul.lo.s32 	%r3441, %r1682, %r3440;
	mul.lo.s32 	%r3442, %r3441, 768;
	mad.lo.s32 	%r3443, %r24, 384, %r3442;
	add.s32 	%r3444, %r3443, -64;
	mul.wide.s32 	%rd273, %r3444, 4;
	add.s64 	%rd274, %rd551, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7633, %r7631, %r7625, %r7624}, [%rd276+256];
	ld.global.v4.u32 	{%r7635, %r7634, %r7629, %r7628}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7627, %r7626}, [%rd28];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2088;
	ld.global.v2.u32 	{%r7632, %r7630}, [%rd28+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7637, %r7636}, [%rd28+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3461, %r634, %r1683, %r25;
	mul.lo.s32 	%r3465, %r3461, %r1738;
	mad.lo.s32 	%r3468, %r2486, 384, %r3465;
	add.s32 	%r3469, %r3468, -64;
	mad.lo.s32 	%r3472, %r1740, %r51, %r3469;
	mul.wide.s32 	%rd278, %r3472, 4;
	add.s64 	%rd279, %rd553, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7649, %r7648, %r7646, %r7644}, [%rd281+256];
	ld.global.v4.u32 	{%r7643, %r7642, %r7640, %r7638}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7647, %r7645}, [%rd283+768];
	ld.global.v2.u32 	{%r7627, %r7626}, [%rd283+1536];

$L__BB0_398:
	add.s32 	%r3485, %r1686, -1;
	setp.lt.s32 	%p209, %r635, %r3485;
	setp.gt.s32 	%p210, %r635, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r636, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3486, %r1687, -2;
	setp.lt.s32 	%p214, %r636, %r3486;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd556, [%rd1+88];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r1023, %r636, %r1686, %r635;
	shl.b32 	%r3487, %r1023, 6;
	mul.wide.s32 	%rd286, %r3487, 4;
	add.s64 	%rd30, %rd555, %rd286;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7669, %r7667}, [%rd288+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3490, %r1686, 5;
	cvt.s64.s32 	%rd289, %r3490;
	cvt.s64.s32 	%rd290, %r28;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7674, %r7672}, [%rd293];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3493, %r1686, 5;
	neg.s32 	%r3494, %r3493;
	cvt.s64.s32 	%rd294, %r3494;
	cvt.s64.s32 	%rd295, %r28;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7681, %r7679}, [%rd298];

$L__BB0_405:
	mad.lo.s32 	%r7207, %r636, %r1686, %r635;
	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	shl.b32 	%r3497, %r1687, 6;
	shl.b32 	%r3498, %r7207, 7;
	mad.lo.s32 	%r3499, %r3497, %r1686, %r3498;
	mul.wide.s32 	%rd299, %r3499, 4;
	add.s64 	%rd31, %rd557, %rd299;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3500, %r1686, 5;
	cvt.s64.s32 	%rd300, %r3500;
	cvt.s64.s32 	%rd301, %r28;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7675, %r7673, %r7665, %r7664}, [%rd304];
	shl.b32 	%r3505, %r1686, 6;
	add.s32 	%r3506, %r3505, -32;
	cvt.s64.s32 	%rd305, %r3506;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7683, %r7682, %r7671, %r7670}, [%rd308];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3511, %r1686, 5;
	xor.b32  	%r3512, %r3511, -32;
	cvt.s64.s32 	%rd309, %r3512;
	cvt.s64.s32 	%rd310, %r28;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7685, %r7684, %r7680, %r7678}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7677, %r7676, %r7668, %r7666}, [%rd315];

$L__BB0_409:
	mov.u32 	%r3526, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3522,%r7444,%r412,%r2189,%r3526;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3522;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7444;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3529, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3530,%r7445,%r3529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3533,%r7297,%r3530;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7686,%r7559;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7686,%r7298,%r3530;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3546, 31;
	mov.u32 	%r3569, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3544,%r7686,%r3546,%r2189,%r3569;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3549,%r3533,%r3544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3552,%r7443,%r7442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3555,%r3552,%r3549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3558,%r7446,%r3555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3561,%r7559,%r3558;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3565,%r7439,%r412,%r2189,%r3569;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3565;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7439;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3572, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r7440,%r3572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r7297,%r3573;
}
	// end inline asm
	mov.u32 	%r7687, %r7558;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7687,%r7298,%r3573;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3587,%r7687,%r3546,%r2189,%r3569;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3592,%r3576,%r3587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3595,%r7443,%r7438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r3592,%r3595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3601,%r7441,%r3598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3604,%r7558,%r3601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3607,%r7444,%r7445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3610,%r7301,%r3607;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7688,%r7557;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7688,%r7302,%r3607;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3623, 31;
	mov.u32 	%r3625, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3621,%r7688,%r3623,%r2189,%r3625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3626,%r3610,%r3621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3629,%r7436,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3632,%r3629,%r3626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3635,%r7437,%r3632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3638,%r7557,%r3635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r7439,%r7440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3644,%r7301,%r3641;
}
	// end inline asm
	mov.u32 	%r7689, %r7556;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7689,%r7302,%r3641;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3653,%r7689,%r3623,%r2189,%r3625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3658,%r3644,%r3653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3661,%r7436,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3664,%r3658,%r3661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3667,%r7434,%r3664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3670,%r7556,%r3667;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3674,%r7430,%r412,%r2189,%r3625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3674;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7430;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3681, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3682,%r7431,%r3681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3685,%r7297,%r3682;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7690,%r7555;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7690,%r7298,%r3682;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3700, 31;
	mov.u32 	%r3702, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3698,%r7690,%r3700,%r2189,%r3702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3703,%r3685,%r3698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3706,%r7429,%r7443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3709,%r3706,%r3703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3712,%r7432,%r3709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3715,%r7555,%r3712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3718,%r7430,%r7431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3721,%r7301,%r3718;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7691,%r7554;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7691,%r7302,%r3718;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3734, 31;
	mov.u32 	%r3757, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3732,%r7691,%r3734,%r2189,%r3757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3737,%r3721,%r3732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3740,%r7427,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3743,%r3740,%r3737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3746,%r7428,%r3743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3749,%r7554,%r3746;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3753,%r7425,%r412,%r2189,%r3757;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3753;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7425;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3760, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3761,%r7426,%r3760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3764,%r7297,%r3761;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7692,%r7553;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7692,%r7298,%r3761;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3779, 31;
	mov.u32 	%r3802, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3777,%r7692,%r3779,%r2189,%r3802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3782,%r3764,%r3777;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r7424,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3788,%r3785,%r3782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3791,%r7685,%r3788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3794,%r7553,%r3791;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3798,%r7420,%r412,%r2189,%r3802;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3798;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7420;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3805, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3806,%r7421,%r3805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3809,%r7297,%r3806;
}
	// end inline asm
	mov.u32 	%r7693, %r7552;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7693,%r7298,%r3806;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3820,%r7693,%r3779,%r2189,%r3802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3825,%r3809,%r3820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r7424,%r7442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3831,%r3825,%r3828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3834,%r7422,%r3831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r7552,%r3834;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3840,%r7425,%r7426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3843,%r7301,%r3840;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7694,%r7551;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7694,%r7302,%r3840;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3856, 31;
	mov.u32 	%r3858, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3854,%r7694,%r3856,%r2189,%r3858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3859,%r3843,%r3854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r7419,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3865,%r3862,%r3859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3868,%r7684,%r3865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3871,%r7551,%r3868;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3874,%r7420,%r7421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3877,%r7301,%r3874;
}
	// end inline asm
	mov.u32 	%r7695, %r7550;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7695,%r7302,%r3874;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3886,%r7695,%r3856,%r2189,%r3858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3891,%r3877,%r3886;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3894,%r7419,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3897,%r3891,%r3894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3900,%r7417,%r3897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3903,%r7550,%r3900;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3907,%r7414,%r412,%r2189,%r3858;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3907;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7414;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3914, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3915,%r7415,%r3914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3918,%r7297,%r3915;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7696,%r7549;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7696,%r7298,%r3915;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3933, 31;
	mov.u32 	%r3956, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3931,%r7696,%r3933,%r2189,%r3956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3936,%r3918,%r3931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r7413,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3942,%r3939,%r3936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3945,%r525,%r3942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r7549,%r3945;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3952,%r7410,%r412,%r2189,%r3956;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3952;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7410;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3959, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3960,%r7411,%r3959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3963,%r7297,%r3960;
}
	// end inline asm
	mov.u32 	%r7697, %r7548;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7697,%r7298,%r3960;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3974,%r7697,%r3933,%r2189,%r3956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3979,%r3963,%r3974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r7413,%r7443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3985,%r3979,%r3982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3988,%r521,%r3985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r7548,%r3988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3994,%r7415,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3997,%r7411,%r7421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4000,%r3994,%r3997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4003,%r7409,%r4000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4006,%r7547,%r4003;
}
	// end inline asm
	selp.b32 	%r1149, %r7547, %r4006, %p12;
	// begin inline asm
	{sub.f16x2 %r4009,%r7414,%r7415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4012,%r7301,%r4009;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7698,%r7546;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7698,%r7302,%r4009;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4025, 31;
	mov.u32 	%r4027, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4023,%r7698,%r4025,%r2189,%r4027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4028,%r4012,%r4023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r7407,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4034,%r4031,%r4028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4037,%r517,%r4034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7471,%r7546,%r4037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4043,%r7410,%r7411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4046,%r7301,%r4043;
}
	// end inline asm
	mov.u32 	%r7699, %r7545;
	@%p12 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7699,%r7302,%r4043;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4055,%r7699,%r4025,%r2189,%r4027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4060,%r4046,%r4055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4063,%r7407,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4066,%r4060,%r4063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4069,%r515,%r4066;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r7545,%r4069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4075,%r7414,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4078,%r7410,%r7420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4081,%r4075,%r4078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4084,%r7405,%r4081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4087,%r7544,%r4084;
}
	// end inline asm
	selp.b32 	%r1161, %r7544, %r4087, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4091,%r7402,%r412,%r2189,%r4027;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4091;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7402;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4098, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4099,%r7403,%r4098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4102,%r7297,%r4099;
}
	// end inline asm
	@%p12 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7700,%r7543;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7700,%r7298,%r4099;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4117, 31;
	mov.u32 	%r4140, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4115,%r7700,%r4117,%r2189,%r4140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4120,%r4102,%r4115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4123,%r7401,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r4123,%r4120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4129,%r513,%r4126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7543,%r4129;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4136,%r7398,%r412,%r2189,%r4140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4136;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7398;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4143, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r7399,%r4143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r7297,%r4144;
}
	// end inline asm
	mov.u32 	%r7701, %r7542;
	@%p12 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7701,%r7298,%r4144;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4158,%r7701,%r4117,%r2189,%r4140;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4163,%r4147,%r4158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r7401,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r4163,%r4166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4172,%r7400,%r4169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4175,%r7542,%r4172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4178,%r7403,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4181,%r7399,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4184,%r4178,%r4181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4187,%r7397,%r4184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4190,%r7541,%r4187;
}
	// end inline asm
	selp.b32 	%r1173, %r7541, %r4190, %p12;
	// begin inline asm
	{sub.f16x2 %r4193,%r7402,%r7403;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4196,%r7301,%r4193;
}
	// end inline asm
	@%p12 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7702,%r7540;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7702,%r7302,%r4193;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4209, 31;
	mov.u32 	%r4211, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4207,%r7702,%r4209,%r2189,%r4211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4212,%r4196,%r4207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4215,%r7395,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4218,%r4215,%r4212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4221,%r505,%r4218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7467,%r7540,%r4221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r7398,%r7399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4230,%r7301,%r4227;
}
	// end inline asm
	mov.u32 	%r7703, %r7539;
	@%p12 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7703,%r7302,%r4227;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4239,%r7703,%r4209,%r2189,%r4211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4244,%r4230,%r4239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4247,%r7395,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4250,%r4244,%r4247;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4253,%r7394,%r4250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4256,%r7539,%r4253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4259,%r7402,%r7430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r7398,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4265,%r4259,%r4262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4268,%r7393,%r4265;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4271,%r7538,%r4268;
}
	// end inline asm
	selp.b32 	%r1185, %r7538, %r4271, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4275,%r7391,%r412,%r2189,%r4211;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4275;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7391;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4282, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4283,%r7392,%r4282;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4286,%r7297,%r4283;
}
	// end inline asm
	@%p12 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7704,%r7537;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7704,%r7298,%r4283;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4301, 31;
	mov.u32 	%r4303, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4299,%r7704,%r4301,%r2189,%r4303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4304,%r4286,%r4299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r7605,%r7401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4310,%r4307,%r4304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4313,%r7683,%r4310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4316,%r7537,%r4313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4319,%r7391,%r7392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4322,%r7301,%r4319;
}
	// end inline asm
	@%p12 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7705,%r7536;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7705,%r7302,%r4319;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4335, 31;
	mov.u32 	%r4358, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4333,%r7705,%r4335,%r2189,%r4358;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4338,%r4322,%r4333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4341,%r7604,%r7395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4344,%r4341,%r4338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4347,%r7682,%r4344;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4350,%r7536,%r4347;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4354,%r7387,%r412,%r2189,%r4358;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4354;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7387;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4361, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r7388,%r4361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r7297,%r4362;
}
	// end inline asm
	mov.u32 	%r7706, %r7535;
	@%p12 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7706,%r7298,%r4362;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4376,%r7706,%r4335,%r2189,%r4358;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4381,%r4365,%r4376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r7616,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4387,%r4381,%r4384;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4390,%r7681,%r4387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7535,%r4390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r7617,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4399,%r7388,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4402,%r4396,%r4399;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4405,%r7680,%r4402;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4408,%r7534,%r4405;
}
	// end inline asm
	selp.b32 	%r1203, %r7534, %r4408, %p12;
	// begin inline asm
	{sub.f16x2 %r4411,%r7387,%r7388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4414,%r7301,%r4411;
}
	// end inline asm
	mov.u32 	%r7707, %r7533;
	@%p12 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7707,%r7302,%r4411;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4425, 31;
	mov.u32 	%r4463, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4423,%r7707,%r4425,%r2189,%r4463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4428,%r4414,%r4423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4431,%r7614,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4434,%r4428,%r4431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4437,%r7679,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r7533,%r4437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4443,%r7615,%r7425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4446,%r7387,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4449,%r4443,%r4446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4452,%r7678,%r4449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4455,%r7532,%r4452;
}
	// end inline asm
	selp.b32 	%r1209, %r7532, %r4455, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4459,%r7383,%r412,%r2189,%r4463;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4459;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7383;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4466, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4467,%r7384,%r4466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4470,%r7297,%r4467;
}
	// end inline asm
	@%p12 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7708,%r7531;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7708,%r7298,%r4467;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4485, 31;
	mov.u32 	%r4508, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4483,%r7708,%r4485,%r2189,%r4508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4488,%r4470,%r4483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r7382,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4494,%r4491,%r4488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4497,%r7677,%r4494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7531,%r4497;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4504,%r7379,%r412,%r2189,%r4508;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4504;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7379;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4511, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r7380,%r4511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4515,%r7297,%r4512;
}
	// end inline asm
	mov.u32 	%r7709, %r7530;
	@%p12 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7709,%r7298,%r4512;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4526,%r7709,%r4485,%r2189,%r4508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4531,%r4515,%r4526;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r7382,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4537,%r4531,%r4534;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4540,%r7412,%r4537;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7462,%r7530,%r4540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r7384,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r7380,%r7388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4552,%r4546,%r4549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4555,%r487,%r4552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4558,%r7529,%r4555;
}
	// end inline asm
	selp.b32 	%r7460, %r7529, %r4558, %p12;
	// begin inline asm
	{sub.f16x2 %r4561,%r7383,%r7384;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4564,%r7301,%r4561;
}
	// end inline asm
	@%p12 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7710,%r7528;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7710,%r7302,%r4561;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4577, 31;
	mov.u32 	%r4579, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4575,%r7710,%r4577,%r2189,%r4579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4580,%r4564,%r4575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4583,%r7377,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r4583,%r4580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4589,%r7676,%r4586;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7463,%r7528,%r4589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4595,%r7379,%r7380;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4598,%r7301,%r4595;
}
	// end inline asm
	mov.u32 	%r7711, %r7527;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7711,%r7302,%r4595;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4607,%r7711,%r4577,%r2189,%r4579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4612,%r4598,%r4607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4615,%r7377,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4618,%r4612,%r4615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4621,%r7406,%r4618;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7461,%r7527,%r4621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4627,%r7383,%r7414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r7379,%r7387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4633,%r4627,%r4630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4636,%r484,%r4633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4639,%r7526,%r4636;
}
	// end inline asm
	selp.b32 	%r7459, %r7526, %r4639, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4643,%r7373,%r412,%r2189,%r4579;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4643;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7373;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4650, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4651,%r7374,%r4650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4654,%r7297,%r4651;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7712,%r7525;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7712,%r7298,%r4651;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4669, 31;
	mov.u32 	%r4692, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4667,%r7712,%r4669,%r2189,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4672,%r4654,%r4667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r7601,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r4675,%r4672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4681,%r7675,%r4678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7458,%r7525,%r4681;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4688,%r7371,%r412,%r2189,%r4692;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4688;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7371;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4695, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r7372,%r4695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4699,%r7297,%r4696;
}
	// end inline asm
	mov.u32 	%r7713, %r7524;
	@%p12 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7713,%r7298,%r4696;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4710,%r7713,%r4669,%r2189,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4715,%r4699,%r4710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r7601,%r7401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4721,%r4715,%r4718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4724,%r7674,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7456,%r7524,%r4724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4730,%r7374,%r7403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4733,%r7372,%r7380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4736,%r4730,%r4733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4739,%r479,%r4736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4742,%r7523,%r4739;
}
	// end inline asm
	selp.b32 	%r7454, %r7523, %r4742, %p12;
	// begin inline asm
	{sub.f16x2 %r4745,%r7373,%r7374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4748,%r7301,%r4745;
}
	// end inline asm
	@%p12 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7714,%r7522;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7714,%r7302,%r4745;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4761, 31;
	mov.u32 	%r4763, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4759,%r7714,%r4761,%r2189,%r4763;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4764,%r4748,%r4759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4767,%r7600,%r7377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4770,%r4767,%r4764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4773,%r7673,%r4770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r7522,%r4773;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4779,%r7371,%r7372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4782,%r7301,%r4779;
}
	// end inline asm
	mov.u32 	%r7715, %r7521;
	@%p12 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7715,%r7302,%r4779;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4791,%r7715,%r4761,%r2189,%r4763;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4796,%r4782,%r4791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4799,%r7600,%r7395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4802,%r4796,%r4799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4805,%r7672,%r4802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r7521,%r4805;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4811,%r7373,%r7402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4814,%r7371,%r7379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4817,%r4811,%r4814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4820,%r478,%r4817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4823,%r7520,%r4820;
}
	// end inline asm
	selp.b32 	%r7453, %r7520, %r4823, %p12;
	// begin inline asm
	{sub.f16x2 %r4826,%r7599,%r7392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4829,%r7603,%r7372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4832,%r4826,%r4829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4835,%r7671,%r4832;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4838,%r7519,%r4835;
}
	// end inline asm
	selp.b32 	%r1258, %r7519, %r4838, %p12;
	// begin inline asm
	{sub.f16x2 %r4841,%r7598,%r7391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r7602,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4847,%r4841,%r4844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4850,%r7670,%r4847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4853,%r7518,%r4850;
}
	// end inline asm
	selp.b32 	%r1259, %r7518, %r4853, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4857,%r7365,%r412,%r2189,%r4763;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4857;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7365;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4864, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4865,%r7366,%r4864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4868,%r7297,%r4865;
}
	// end inline asm
	mov.u32 	%r7716, %r7517;
	@%p12 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7716,%r7298,%r4865;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4881, 31;
	mov.u32 	%r4883, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4879,%r7716,%r4881,%r2189,%r4883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4884,%r4868,%r4879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4887,%r7610,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4890,%r4884,%r4887;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4893,%r7669,%r4890;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7452,%r7517,%r4893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4899,%r7611,%r7384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4902,%r7366,%r7613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4905,%r4899,%r4902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4908,%r7668,%r4905;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4911,%r7516,%r4908;
}
	// end inline asm
	selp.b32 	%r7450, %r7516, %r4911, %p12;
	// begin inline asm
	{sub.f16x2 %r4914,%r7365,%r7366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4917,%r7301,%r4914;
}
	// end inline asm
	mov.u32 	%r7717, %r7515;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7717,%r7302,%r4914;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4926,%r7717,%r4881,%r2189,%r4883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4931,%r4917,%r4926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4934,%r7608,%r7377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4937,%r4931,%r4934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4940,%r7667,%r4937;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7451,%r7515,%r4940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4946,%r7609,%r7383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4949,%r7365,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4952,%r4946,%r4949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4955,%r7666,%r4952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4958,%r7514,%r4955;
}
	// end inline asm
	selp.b32 	%r7449, %r7514, %r4958, %p12;
	// begin inline asm
	{sub.f16x2 %r4961,%r7596,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4964,%r7597,%r7366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4967,%r4961,%r4964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4970,%r7665,%r4967;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4973,%r7513,%r4970;
}
	// end inline asm
	selp.b32 	%r7448, %r7513, %r4973, %p12;
	// begin inline asm
	{sub.f16x2 %r4976,%r7594,%r7373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r7595,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4982,%r4976,%r4979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4985,%r7664,%r4982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4988,%r7512,%r4985;
}
	// end inline asm
	selp.b32 	%r7447, %r7512, %r4988, %p12;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	setp.lt.s32 	%p256, %r637, %r1692;
	or.pred  	%p258, %p256, %p215;
	mad.lo.s32 	%r4993, %r1694, %r1693, %r1692;
	setp.ge.s32 	%p259, %r637, %r4993;
	or.pred  	%p260, %p258, %p259;
	@%p260 bra 	$L__BB0_539;

	sub.s32 	%r1274, %r637, %r1692;
	rem.s32 	%r4994, %r1274, %r1693;
	setp.ne.s32 	%p261, %r4994, 0;
	@%p261 bra 	$L__BB0_539;

	div.s32 	%r4995, %r1274, %r1693;
	mul.lo.s32 	%r4996, %r4995, %r1686;
	mul.lo.s32 	%r1275, %r4996, 3;
	add.s32 	%r1276, %r635, -2;
	add.s32 	%r4997, %r1275, %r1276;
	mul.lo.s32 	%r1277, %r4997, %r1687;
	@%p12 bra 	$L__BB0_493;

	add.s32 	%r5002, %r1277, %r636;
	mul.lo.s32 	%r5003, %r5002, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3561;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5004, %r378, %r5003;
	mul.wide.s32 	%rd317, %r5004, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3561;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5005, %r379, %r5003;
	mul.wide.s32 	%rd319, %r5005, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3638;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5006, %r392, %r5003;
	mul.wide.s32 	%rd321, %r5006, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3638;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5007, %r393, %r5003;
	mul.wide.s32 	%rd323, %r5007, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_493:
	add.s32 	%r1278, %r1275, %r1686;
	@%p12 bra 	$L__BB0_495;

	add.s32 	%r5012, %r1278, %r1276;
	mad.lo.s32 	%r5013, %r5012, %r1687, %r636;
	mul.lo.s32 	%r5014, %r5013, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5015, %r378, %r5014;
	mul.wide.s32 	%rd325, %r5015, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5016, %r379, %r5014;
	mul.wide.s32 	%rd327, %r5016, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3670;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5017, %r392, %r5014;
	mul.wide.s32 	%rd329, %r5017, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3670;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5018, %r393, %r5014;
	mul.wide.s32 	%rd331, %r5018, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_495:
	add.s32 	%r1279, %r636, 1;
	@%p12 bra 	$L__BB0_497;

	add.s32 	%r5023, %r1277, %r1279;
	mul.lo.s32 	%r5024, %r5023, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5025, %r378, %r5024;
	mul.wide.s32 	%rd333, %r5025, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5026, %r379, %r5024;
	mul.wide.s32 	%rd335, %r5026, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3749;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5027, %r392, %r5024;
	mul.wide.s32 	%rd337, %r5027, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3749;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5028, %r393, %r5024;
	mul.wide.s32 	%rd339, %r5028, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_497:
	add.s32 	%r1280, %r635, -1;
	add.s32 	%r5029, %r1275, %r1280;
	mul.lo.s32 	%r1281, %r5029, %r1687;
	add.s32 	%r1282, %r636, -1;
	@%p12 bra 	$L__BB0_499;

	add.s32 	%r5034, %r1281, %r1282;
	mul.lo.s32 	%r5035, %r5034, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5036, %r378, %r5035;
	mul.wide.s32 	%rd341, %r5036, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5037, %r379, %r5035;
	mul.wide.s32 	%rd343, %r5037, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3871;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5038, %r392, %r5035;
	mul.wide.s32 	%rd345, %r5038, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3871;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5039, %r393, %r5035;
	mul.wide.s32 	%rd347, %r5039, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_499:
	add.s32 	%r5040, %r1278, %r1280;
	mul.lo.s32 	%r1283, %r5040, %r1687;
	@%p12 bra 	$L__BB0_501;

	add.s32 	%r5045, %r1283, %r1282;
	mul.lo.s32 	%r5046, %r5045, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5047, %r378, %r5046;
	mul.wide.s32 	%rd349, %r5047, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3837;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5048, %r379, %r5046;
	mul.wide.s32 	%rd351, %r5048, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3903;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5049, %r392, %r5046;
	mul.wide.s32 	%rd353, %r5049, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3903;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5050, %r393, %r5046;
	mul.wide.s32 	%rd355, %r5050, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_501:
	@%p12 bra 	$L__BB0_503;

	add.s32 	%r5055, %r1281, %r636;
	mul.lo.s32 	%r5056, %r5055, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5057, %r378, %r5056;
	mul.wide.s32 	%rd357, %r5057, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5058, %r379, %r5056;
	mul.wide.s32 	%rd359, %r5058, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5059, %r392, %r5056;
	mul.wide.s32 	%rd361, %r5059, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5060, %r393, %r5056;
	mul.wide.s32 	%rd363, %r5060, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_503:
	@%p12 bra 	$L__BB0_505;

	add.s32 	%r5065, %r1283, %r636;
	mul.lo.s32 	%r5066, %r5065, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5067, %r378, %r5066;
	mul.wide.s32 	%rd365, %r5067, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5068, %r379, %r5066;
	mul.wide.s32 	%rd367, %r5068, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5069, %r392, %r5066;
	mul.wide.s32 	%rd369, %r5069, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5070, %r393, %r5066;
	mul.wide.s32 	%rd371, %r5070, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_505:
	add.s32 	%r1284, %r1278, %r1686;
	add.s32 	%r5071, %r1284, %r1280;
	mul.lo.s32 	%r1285, %r5071, %r1687;
	@%p12 bra 	$L__BB0_507;

	add.s32 	%r5076, %r1285, %r636;
	mul.lo.s32 	%r5077, %r5076, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5078, %r378, %r5077;
	mul.wide.s32 	%rd373, %r5078, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5079, %r379, %r5077;
	mul.wide.s32 	%rd375, %r5079, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5080, %r392, %r5077;
	mul.wide.s32 	%rd377, %r5080, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5081, %r393, %r5077;
	mul.wide.s32 	%rd379, %r5081, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_507:
	@%p12 bra 	$L__BB0_509;

	add.s32 	%r5086, %r1281, %r1279;
	mul.lo.s32 	%r5087, %r5086, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5088, %r378, %r5087;
	mul.wide.s32 	%rd381, %r5088, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5089, %r379, %r5087;
	mul.wide.s32 	%rd383, %r5089, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5090, %r392, %r5087;
	mul.wide.s32 	%rd385, %r5090, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5091, %r393, %r5087;
	mul.wide.s32 	%rd387, %r5091, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_509:
	@%p12 bra 	$L__BB0_511;

	add.s32 	%r5096, %r1283, %r1279;
	mul.lo.s32 	%r5097, %r5096, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4175;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5098, %r378, %r5097;
	mul.wide.s32 	%rd389, %r5098, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4175;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5099, %r379, %r5097;
	mul.wide.s32 	%rd391, %r5099, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4256;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5100, %r392, %r5097;
	mul.wide.s32 	%rd393, %r5100, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4256;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5101, %r393, %r5097;
	mul.wide.s32 	%rd395, %r5101, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_511:
	@%p12 bra 	$L__BB0_513;

	add.s32 	%r5106, %r1285, %r1279;
	mul.lo.s32 	%r5107, %r5106, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5108, %r378, %r5107;
	mul.wide.s32 	%rd397, %r5108, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5109, %r379, %r5107;
	mul.wide.s32 	%rd399, %r5109, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5110, %r392, %r5107;
	mul.wide.s32 	%rd401, %r5110, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5111, %r393, %r5107;
	mul.wide.s32 	%rd403, %r5111, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_513:
	add.s32 	%r1286, %r636, 2;
	@%p12 bra 	$L__BB0_515;

	add.s32 	%r5116, %r1281, %r1286;
	mul.lo.s32 	%r5117, %r5116, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4316;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5118, %r378, %r5117;
	mul.wide.s32 	%rd405, %r5118, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4316;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5119, %r379, %r5117;
	mul.wide.s32 	%rd407, %r5119, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4350;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5120, %r392, %r5117;
	mul.wide.s32 	%rd409, %r5120, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4350;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5121, %r393, %r5117;
	mul.wide.s32 	%rd411, %r5121, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_515:
	add.s32 	%r5122, %r1278, %r635;
	mul.lo.s32 	%r1287, %r5122, %r1687;
	@%p12 bra 	$L__BB0_517;

	add.s32 	%r5127, %r1287, %r1282;
	mul.lo.s32 	%r5128, %r5127, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5129, %r378, %r5128;
	mul.wide.s32 	%rd413, %r5129, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5130, %r379, %r5128;
	mul.wide.s32 	%rd415, %r5130, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5131, %r392, %r5128;
	mul.wide.s32 	%rd417, %r5131, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5132, %r393, %r5128;
	mul.wide.s32 	%rd419, %r5132, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_517:
	add.s32 	%r5133, %r1284, %r635;
	mul.lo.s32 	%r1288, %r5133, %r1687;
	@%p12 bra 	$L__BB0_519;

	add.s32 	%r5138, %r1288, %r1282;
	mul.lo.s32 	%r5139, %r5138, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5140, %r378, %r5139;
	mul.wide.s32 	%rd421, %r5140, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5141, %r379, %r5139;
	mul.wide.s32 	%rd423, %r5141, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5142, %r392, %r5139;
	mul.wide.s32 	%rd425, %r5142, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5143, %r393, %r5139;
	mul.wide.s32 	%rd427, %r5143, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_519:
	add.s32 	%r5144, %r1275, %r635;
	mul.lo.s32 	%r1289, %r5144, %r1687;
	@%p12 bra 	$L__BB0_521;

	add.s32 	%r5149, %r1289, %r636;
	mul.lo.s32 	%r5150, %r5149, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5151, %r378, %r5150;
	mul.wide.s32 	%rd429, %r5151, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5152, %r379, %r5150;
	mul.wide.s32 	%rd431, %r5152, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5153, %r392, %r5150;
	mul.wide.s32 	%rd433, %r5153, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5154, %r393, %r5150;
	mul.wide.s32 	%rd435, %r5154, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_521:
	@%p12 bra 	$L__BB0_523;

	add.s32 	%r5159, %r1287, %r636;
	mul.lo.s32 	%r5160, %r5159, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5161, %r378, %r5160;
	mul.wide.s32 	%rd437, %r5161, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5162, %r379, %r5160;
	mul.wide.s32 	%rd439, %r5162, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5163, %r392, %r5160;
	mul.wide.s32 	%rd441, %r5163, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5164, %r393, %r5160;
	mul.wide.s32 	%rd443, %r5164, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_523:
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5169, %r1288, %r636;
	mul.lo.s32 	%r5170, %r5169, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5171, %r378, %r5170;
	mul.wide.s32 	%rd445, %r5171, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5172, %r379, %r5170;
	mul.wide.s32 	%rd447, %r5172, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5173, %r392, %r5170;
	mul.wide.s32 	%rd449, %r5173, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5174, %r393, %r5170;
	mul.wide.s32 	%rd451, %r5174, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_525:
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5179, %r1289, %r1279;
	mul.lo.s32 	%r5180, %r5179, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5181, %r378, %r5180;
	mul.wide.s32 	%rd453, %r5181, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5182, %r379, %r5180;
	mul.wide.s32 	%rd455, %r5182, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5183, %r392, %r5180;
	mul.wide.s32 	%rd457, %r5183, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5184, %r393, %r5180;
	mul.wide.s32 	%rd459, %r5184, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_527:
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5189, %r1287, %r1279;
	mul.lo.s32 	%r5190, %r5189, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5191, %r378, %r5190;
	mul.wide.s32 	%rd461, %r5191, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5192, %r379, %r5190;
	mul.wide.s32 	%rd463, %r5192, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5193, %r392, %r5190;
	mul.wide.s32 	%rd465, %r5193, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5194, %r393, %r5190;
	mul.wide.s32 	%rd467, %r5194, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_529:
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5199, %r1288, %r1279;
	mul.lo.s32 	%r5200, %r5199, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5201, %r378, %r5200;
	mul.wide.s32 	%rd469, %r5201, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5202, %r379, %r5200;
	mul.wide.s32 	%rd471, %r5202, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5203, %r392, %r5200;
	mul.wide.s32 	%rd473, %r5203, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5204, %r393, %r5200;
	mul.wide.s32 	%rd475, %r5204, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_531:
	add.s32 	%r1290, %r1288, %r1286;
	@%p12 bra 	$L__BB0_533;

	mul.lo.s32 	%r5209, %r1290, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5210, %r378, %r5209;
	mul.wide.s32 	%rd477, %r5210, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5211, %r379, %r5209;
	mul.wide.s32 	%rd479, %r5211, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5212, %r392, %r5209;
	mul.wide.s32 	%rd481, %r5212, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5213, %r393, %r5209;
	mul.wide.s32 	%rd483, %r5213, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_533:
	add.s32 	%r1291, %r635, 1;
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5218, %r1278, %r1291;
	mad.lo.s32 	%r5219, %r5218, %r1687, %r636;
	mul.lo.s32 	%r5220, %r5219, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5221, %r378, %r5220;
	mul.wide.s32 	%rd485, %r5221, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5222, %r379, %r5220;
	mul.wide.s32 	%rd487, %r5222, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5223, %r392, %r5220;
	mul.wide.s32 	%rd489, %r5223, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5224, %r393, %r5220;
	mul.wide.s32 	%rd491, %r5224, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_535:
	add.s32 	%r5225, %r1284, %r1291;
	mul.lo.s32 	%r1292, %r5225, %r1687;
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5230, %r1292, %r636;
	mul.lo.s32 	%r5231, %r5230, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5232, %r378, %r5231;
	mul.wide.s32 	%rd493, %r5232, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5233, %r379, %r5231;
	mul.wide.s32 	%rd495, %r5233, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5234, %r392, %r5231;
	mul.wide.s32 	%rd497, %r5234, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5235, %r393, %r5231;
	mul.wide.s32 	%rd499, %r5235, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_537:
	add.s32 	%r1293, %r1292, %r1279;
	@%p12 bra 	$L__BB0_539;

	mul.lo.s32 	%r5240, %r1293, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5241, %r378, %r5240;
	mul.wide.s32 	%rd501, %r5241, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5242, %r379, %r5240;
	mul.wide.s32 	%rd503, %r5242, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5243, %r392, %r5240;
	mul.wide.s32 	%rd505, %r5243, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5244, %r393, %r5240;
	mul.wide.s32 	%rd507, %r5244, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_539:
	setp.eq.s32 	%p286, %r23, %r2083;
	@%p286 bra 	$L__BB0_541;

	mad.lo.s32 	%r5245, %r1682, %r23, %r24;
	mov.u32 	%r5246, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5247, %r5245, 1280, %r5246;
	add.s32 	%r5248, %r5247, -256;
	shl.b32 	%r5249, %r28, 4;
	add.s32 	%r5250, %r5248, %r5249;
	st.shared.v4.u32 	[%r5250+256], {%r3794, %r3871, %r1203, %r1209};
	st.shared.v4.u32 	[%r5250+1024], {%r3561, %r3638, %r1149, %r1161};
	shl.b32 	%r5251, %r28, 3;
	add.s32 	%r5252, %r5248, %r5251;
	st.shared.v2.u32 	[%r5252+768], {%r3837, %r3903};

$L__BB0_541:
	setp.eq.s32 	%p287, %r24, %r2088;
	@%p287 bra 	$L__BB0_545;

	mad.lo.s32 	%r5256, %r1681, 384, -64;
	mul.lo.s32 	%r5257, %r5256, %r24;
	mad.lo.s32 	%r5259, %r2084, %r2083, %r5257;
	mad.lo.s32 	%r5260, %r2486, 384, %r5259;
	shl.b32 	%r5261, %r5260, 2;
	mov.u32 	%r5262, _ZN6kernel5shmemE;
	add.s32 	%r5263, %r5262, %r5261;
	add.s32 	%r5264, %r5263, -256;
	shl.b32 	%r5265, %r28, 4;
	add.s32 	%r5266, %r5264, %r5265;
	st.shared.v4.u32 	[%r5266+256], {%r3715, %r3749, %r1173, %r1185};
	st.shared.v4.u32 	[%r5266+1024], {%r4316, %r4350, %r1258, %r1259};
	shl.b32 	%r5267, %r28, 3;
	add.s32 	%r1297, %r5264, %r5267;
	@%p286 bra 	$L__BB0_544;

	st.shared.v2.u32 	[%r1297], {%r3604, %r3670};

$L__BB0_544:
	st.shared.v2.u32 	[%r1297+768], {%r4175, %r4256};

$L__BB0_545:
	setp.ne.s32 	%p289, %r23, %r2083;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p289 bra 	$L__BB0_547;

	mad.lo.s32 	%r5269, %r633, %r1684, %r26;
	mul.lo.s32 	%r5270, %r1682, %r5269;
	mul.lo.s32 	%r5271, %r5270, 768;
	mad.lo.s32 	%r5272, %r24, 384, %r5271;
	add.s32 	%r5273, %r5272, -64;
	mul.wide.s32 	%rd510, %r5273, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3794, %r3871, %r1203, %r1209};
	st.global.v4.u32 	[%rd513+1024], {%r3561, %r3638, %r1149, %r1161};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3837, %r3903};
	st.global.v2.u32 	[%rd515+1536], {%r3604, %r3670};

$L__BB0_547:
	setp.ne.s32 	%p290, %r24, %r2088;
	@%p290 bra 	$L__BB0_552;

	ld.param.u64 	%rd560, [%rd1+80];
	cvta.to.global.u64 	%rd559, %rd560;
	mad.lo.s32 	%r5276, %r634, %r1683, %r25;
	mul.lo.s32 	%r5280, %r5276, %r1738;
	mad.lo.s32 	%r5283, %r2486, 384, %r5280;
	add.s32 	%r5284, %r5283, -64;
	mad.lo.s32 	%r5287, %r1740, %r51, %r5284;
	mul.wide.s32 	%rd516, %r5287, 4;
	add.s64 	%rd517, %rd559, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3715, %r3749, %r1173, %r1185};
	st.global.v4.u32 	[%rd519+1024], {%r4316, %r4350, %r1258, %r1259};
	add.s64 	%rd35, %rd517, %rd277;
	@%p286 bra 	$L__BB0_550;

	st.global.v2.u32 	[%rd35], {%r3604, %r3670};

$L__BB0_550:
	st.global.v2.u32 	[%rd35+768], {%r4175, %r4256};
	@%p205 bra 	$L__BB0_552;

	st.global.v2.u32 	[%rd35+1536], {%r7637, %r7636};

$L__BB0_552:
	setp.ge.s32 	%p293, %r23, %r2083;
	@%p293 bra 	$L__BB0_554;

	mul.lo.s32 	%r5288, %r1682, 320;
	mul.lo.s32 	%r5289, %r24, 320;
	mad.lo.s32 	%r5290, %r5288, %r23, %r5289;
	add.s32 	%r5294, %r1737, -64;
	mad.lo.s32 	%r5298, %r5294, %r2088, %r2085;
	add.s32 	%r5299, %r5290, %r5298;
	shl.b32 	%r5300, %r5299, 2;
	mov.u32 	%r5301, _ZN6kernel5shmemE;
	add.s32 	%r5302, %r5301, %r5300;
	shl.b32 	%r5303, %r28, 4;
	add.s32 	%r5304, %r5302, %r5303;
	st.shared.v4.u32 	[%r5304], {%r7685, %r7684, %r7680, %r7678};
	shl.b32 	%r5305, %r28, 3;
	add.s32 	%r5306, %r5302, %r5305;
	st.shared.v2.u32 	[%r5306+512], {%r7422, %r7417};
	st.shared.v4.u32 	[%r5304+768], {%r7446, %r7437, %r7409, %r7405};

$L__BB0_554:
	setp.ge.s32 	%p294, %r24, %r2088;
	@%p294 bra 	$L__BB0_558;

	mad.lo.s32 	%r5312, %r2486, 384, %r2091;
	mad.lo.s32 	%r5315, %r2086, %r24, %r5312;
	add.s32 	%r5321, %r5315, %r2089;
	shl.b32 	%r5322, %r5321, 2;
	mov.u32 	%r5323, _ZN6kernel5shmemE;
	add.s32 	%r5324, %r5323, %r5322;
	shl.b32 	%r5325, %r28, 3;
	add.s32 	%r5326, %r5324, %r5325;
	@%p293 bra 	$L__BB0_557;

	add.s32 	%r7197, %r5326, -256;
	st.shared.v2.u32 	[%r7197], {%r7441, %r7434};

$L__BB0_557:
	shl.b32 	%r5345, %r28, 4;
	add.s32 	%r5346, %r5324, %r5345;
	st.shared.v4.u32 	[%r5346], {%r7432, %r7428, %r7397, %r7393};
	add.s32 	%r7198, %r5326, -256;
	st.shared.v2.u32 	[%r7198+768], {%r7400, %r7394};
	st.shared.v4.u32 	[%r5346+768], {%r7683, %r7682, %r7671, %r7670};

$L__BB0_558:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_560;

	mul.lo.s32 	%r5347, %r1682, 320;
	add.s32 	%r5348, %r23, -1;
	mul.lo.s32 	%r5349, %r24, 320;
	mad.lo.s32 	%r5350, %r5347, %r5348, %r5349;
	shl.b32 	%r5351, %r5350, 2;
	mov.u32 	%r5352, _ZN6kernel5shmemE;
	add.s32 	%r5353, %r5352, %r5351;
	add.s32 	%r5354, %r5353, -256;
	shl.b32 	%r5355, %r28, 4;
	add.s32 	%r5356, %r5354, %r5355;
	ld.shared.v4.u32 	{%r7633, %r7631, %r7625, %r7624}, [%r5356+256];
	ld.shared.v4.u32 	{%r7635, %r7634, %r7629, %r7628}, [%r5356+1024];
	shl.b32 	%r5365, %r28, 3;
	add.s32 	%r5366, %r5354, %r5365;
	ld.shared.v2.u32 	{%r7632, %r7630}, [%r5366+768];

$L__BB0_560:
	@%p203 bra 	$L__BB0_563;

	mad.lo.s32 	%r5371, %r1681, 384, -64;
	add.s32 	%r5372, %r24, -1;
	mul.lo.s32 	%r5373, %r5371, %r5372;
	mad.lo.s32 	%r5376, %r2084, %r2083, %r5373;
	mad.lo.s32 	%r5377, %r2486, 384, %r5376;
	shl.b32 	%r5378, %r5377, 2;
	mov.u32 	%r5379, _ZN6kernel5shmemE;
	add.s32 	%r5380, %r5379, %r5378;
	add.s32 	%r5381, %r5380, -256;
	shl.b32 	%r5382, %r28, 4;
	add.s32 	%r5383, %r5381, %r5382;
	ld.shared.v4.u32 	{%r7649, %r7648, %r7646, %r7644}, [%r5383+256];
	ld.shared.v4.u32 	{%r7643, %r7642, %r7640, %r7638}, [%r5383+1024];
	shl.b32 	%r5392, %r28, 3;
	add.s32 	%r5393, %r5381, %r5392;
	ld.shared.v2.u32 	{%r7647, %r7645}, [%r5393+768];
	@%p200 bra 	$L__BB0_563;

	add.s32 	%r7199, %r5393, 768;
	ld.shared.v2.u32 	{%r7627, %r7626}, [%r7199+768];

$L__BB0_563:
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7764, %r7606;
	mov.u32 	%r7765, %r7607;
	mov.u32 	%r7750, %r7594;
	mov.u32 	%r7751, %r7595;
	mov.u32 	%r7752, %r7596;
	mov.u32 	%r7753, %r7597;
	mov.u32 	%r7766, %r7608;
	mov.u32 	%r7768, %r7610;
	mov.u32 	%r7756, %r7598;
	mov.u32 	%r7757, %r7599;
	mov.u32 	%r7758, %r7600;
	mov.u32 	%r7759, %r7601;
	@%p205 bra 	$L__BB0_567;

	mad.lo.s32 	%r5399, %r633, %r1684, %r26;
	mad.lo.s32 	%r5400, %r5399, 768, 384;
	mul.lo.s32 	%r5401, %r5400, %r1682;
	mad.lo.s32 	%r5402, %r24, 384, %r5401;
	add.s32 	%r5403, %r5402, -128;
	mul.wide.s32 	%rd522, %r5403, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7764, %r7606;
	mov.u32 	%r7765, %r7607;
	mov.u32 	%r7766, %r7608;
	mov.u32 	%r7768, %r7610;
	@%p203 bra 	$L__BB0_566;

	ld.global.v4.u32 	{%r7765, %r7764, %r7768, %r7766}, [%rd37+-512];

$L__BB0_566:
	ld.global.v4.u32 	{%r7752, %r7750, %r7753, %r7751}, [%rd37];
	ld.global.v4.u32 	{%r7759, %r7758, %r7757, %r7756}, [%rd37+512];
	ld.global.v4.u32 	{%r7603, %r7602, %r7605, %r7604}, [%rd37+1024];

$L__BB0_567:
	mov.u32 	%r7767, %r7609;
	mov.u32 	%r7769, %r7611;
	mov.u32 	%r7770, %r7612;
	mov.u32 	%r7771, %r7613;
	mov.u32 	%r7772, %r7614;
	mov.u32 	%r7773, %r7615;
	mov.u32 	%r7774, %r7616;
	mov.u32 	%r7775, %r7617;
	@%p208 bra 	$L__BB0_569;

	mad.lo.s32 	%r5421, %r634, %r1683, %r25;
	mad.lo.s32 	%r5427, %r2486, 384, %r52;
	mad.lo.s32 	%r5428, %r5421, %r1738, %r5427;
	mad.lo.s32 	%r5431, %r1740, %r51, %r5428;
	mul.wide.s32 	%rd526, %r5431, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7619, %r7618, %r7621, %r7620}, [%rd529];
	ld.global.v4.u32 	{%r7775, %r7773, %r7771, %r7770}, [%rd529+512];
	ld.global.v4.u32 	{%r7774, %r7772, %r7769, %r7767}, [%rd529+1024];
	ld.global.v4.u32 	{%r7765, %r7764, %r7768, %r7766}, [%rd529+1536];

$L__BB0_569:
	neg.s32 	%r7205, %r1686;
	not.b32 	%r7204, %r26;
	add.s32 	%r7203, %r1684, %r7204;
	mul.lo.s32 	%r7202, %r7203, %r1685;
	not.b32 	%r7201, %r25;
	add.s32 	%r7200, %r1683, %r7201;
	mad.lo.s32 	%r5455, %r7200, %r1685, %r7202;
	add.s32 	%r5456, %r5455, %r1686;
	add.s32 	%r5465, %r5456, %r2492;
	add.s32 	%r1417, %r7473, 1;
	add.s32 	%r5466, %r1417, %r5465;
	div.s32 	%r5467, %r5466, %r1686;
	mad.lo.s32 	%r1418, %r5467, %r7205, %r5466;
	mad.lo.s32 	%r5474, %r5467, %r30, %r2503;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5475, %r5474, %r1687;
	shr.u32 	%r5476, %r5475, 31;
	add.s32 	%r5477, %r5475, %r5476;
	shr.s32 	%r5478, %r5477, 1;
	mad.lo.s32 	%r5479, %r5478, %r1686, %r1418;
	shl.b32 	%r5480, %r5479, 5;
	add.s32 	%r5481, %r5480, %r28;
	cvt.s64.s32 	%rd38, %r5481;
	mul.wide.s32 	%rd532, %r5481, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7475, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p71 bra 	$L__BB0_571;
	bra.uni 	$L__BB0_570;

$L__BB0_571:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7474, [%rd538];
	bra.uni 	$L__BB0_572;

$L__BB0_570:
	shl.b32 	%r5482, %r1418, 5;
	add.s32 	%r5483, %r5482, %r28;
	mul.wide.s32 	%rd535, %r5483, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5484, %r5485, %r5486, %r5487}, [%rd536];
	mov.u32 	%r7305, %r7309;
	mov.u32 	%r7306, %r7310;
	mov.u32 	%r7307, %r7311;
	mov.u32 	%r7308, %r7312;
	mov.u32 	%r7309, %r7313;
	mov.u32 	%r7310, %r7314;
	mov.u32 	%r7311, %r7315;
	mov.u32 	%r7312, %r7316;
	mov.u32 	%r7313, %r5487;
	mov.u32 	%r7314, %r5486;
	mov.u32 	%r7315, %r5485;
	mov.u32 	%r7316, %r5484;

$L__BB0_572:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5488, {low,high};}

	// end inline asm
	selp.b32 	%r5490, %r7300, %r5488, %p12;
	// begin inline asm
	{mul.f16x2 %r5489,%r5490,%r7443;
}
	// end inline asm
	selp.b32 	%r5493, %r7304, %r5488, %p12;
	// begin inline asm
	{mul.f16x2 %r5492,%r5493,%r7436;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5495, {low,high};}

	// end inline asm
	selp.b32 	%r5497, %r7300, %r5495, %p12;
	// begin inline asm
	{mul.f16x2 %r5496,%r5497,%r7424;
}
	// end inline asm
	selp.b32 	%r5500, %r7304, %r5495, %p12;
	// begin inline asm
	{mul.f16x2 %r5499,%r5500,%r7419;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5502, {low,high};}

	// end inline asm
	selp.b32 	%r5504, %r7300, %r5502, %p12;
	// begin inline asm
	{mul.f16x2 %r5503,%r5504,%r7411;
}
	// end inline asm
	selp.b32 	%r5507, %r7304, %r5502, %p12;
	// begin inline asm
	{mul.f16x2 %r5506,%r5507,%r7410;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5509, {low,high};}

	// end inline asm
	selp.b32 	%r5511, %r7300, %r5509, %p12;
	// begin inline asm
	{mul.f16x2 %r5510,%r5511,%r7415;
}
	// end inline asm
	selp.b32 	%r5514, %r7304, %r5509, %p12;
	// begin inline asm
	{mul.f16x2 %r5513,%r5514,%r7414;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5516, {low,high};}

	// end inline asm
	selp.b32 	%r5518, %r7300, %r5516, %p12;
	// begin inline asm
	{mul.f16x2 %r5517,%r5518,%r7413;
}
	// end inline asm
	selp.b32 	%r5521, %r7304, %r5516, %p12;
	// begin inline asm
	{mul.f16x2 %r5520,%r5521,%r7407;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5523, {low,high};}

	// end inline asm
	selp.b32 	%r5525, %r7300, %r5523, %p12;
	// begin inline asm
	{mul.f16x2 %r5524,%r5525,%r7403;
}
	// end inline asm
	selp.b32 	%r5528, %r7304, %r5523, %p12;
	// begin inline asm
	{mul.f16x2 %r5527,%r5528,%r7402;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5530, {low,high};}

	// end inline asm
	selp.b32 	%r5532, %r7300, %r5530, %p12;
	// begin inline asm
	{mul.f16x2 %r5531,%r5532,%r7401;
}
	// end inline asm
	selp.b32 	%r5535, %r7304, %r5530, %p12;
	// begin inline asm
	{mul.f16x2 %r5534,%r5535,%r7395;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5537, {low,high};}

	// end inline asm
	selp.b32 	%r5539, %r7300, %r5537, %p12;
	// begin inline asm
	{mul.f16x2 %r5538,%r5539,%r7388;
}
	// end inline asm
	selp.b32 	%r5542, %r7304, %r5537, %p12;
	// begin inline asm
	{mul.f16x2 %r5541,%r5542,%r7387;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5544, {low,high};}

	// end inline asm
	selp.b32 	%r5546, %r7300, %r5544, %p12;
	// begin inline asm
	{mul.f16x2 %r5545,%r5546,%r7617;
}
	// end inline asm
	selp.b32 	%r5549, %r7304, %r5544, %p12;
	// begin inline asm
	{mul.f16x2 %r5548,%r5549,%r7615;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5551, {low,high};}

	// end inline asm
	selp.b32 	%r5553, %r7300, %r5551, %p12;
	// begin inline asm
	{mul.f16x2 %r5552,%r5553,%r7616;
}
	// end inline asm
	selp.b32 	%r5556, %r7304, %r5551, %p12;
	// begin inline asm
	{mul.f16x2 %r5555,%r5556,%r7614;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5558, {low,high};}

	// end inline asm
	selp.b32 	%r5560, %r7300, %r5558, %p12;
	// begin inline asm
	{mul.f16x2 %r5559,%r5560,%r7380;
}
	// end inline asm
	selp.b32 	%r5563, %r7304, %r5558, %p12;
	// begin inline asm
	{mul.f16x2 %r5562,%r5563,%r7379;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5565, {low,high};}

	// end inline asm
	selp.b32 	%r5567, %r7300, %r5565, %p12;
	// begin inline asm
	{mul.f16x2 %r5566,%r5567,%r7384;
}
	// end inline asm
	selp.b32 	%r5570, %r7304, %r5565, %p12;
	// begin inline asm
	{mul.f16x2 %r5569,%r5570,%r7383;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5572, {low,high};}

	// end inline asm
	selp.b32 	%r5574, %r7300, %r5572, %p12;
	// begin inline asm
	{mul.f16x2 %r5573,%r5574,%r7382;
}
	// end inline asm
	selp.b32 	%r5577, %r7304, %r5572, %p12;
	// begin inline asm
	{mul.f16x2 %r5576,%r5577,%r7377;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5579, {low,high};}

	// end inline asm
	selp.b32 	%r5581, %r7300, %r5579, %p12;
	// begin inline asm
	{mul.f16x2 %r5580,%r5581,%r7372;
}
	// end inline asm
	selp.b32 	%r5584, %r7304, %r5579, %p12;
	// begin inline asm
	{mul.f16x2 %r5583,%r5584,%r7371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5586, {low,high};}

	// end inline asm
	selp.b32 	%r5588, %r7300, %r5586, %p12;
	// begin inline asm
	{mul.f16x2 %r5587,%r5588,%r7374;
}
	// end inline asm
	selp.b32 	%r5591, %r7304, %r5586, %p12;
	// begin inline asm
	{mul.f16x2 %r5590,%r5591,%r7373;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5593, {low,high};}

	// end inline asm
	selp.b32 	%r5595, %r7300, %r5593, %p12;
	// begin inline asm
	{mul.f16x2 %r5594,%r5595,%r7601;
}
	// end inline asm
	selp.b32 	%r5598, %r7304, %r5593, %p12;
	// begin inline asm
	{mul.f16x2 %r5597,%r5598,%r7600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5600, {low,high};}

	// end inline asm
	selp.b32 	%r5602, %r7300, %r5600, %p12;
	// begin inline asm
	{mul.f16x2 %r5601,%r5602,%r7599;
}
	// end inline asm
	selp.b32 	%r5605, %r7304, %r5600, %p12;
	// begin inline asm
	{mul.f16x2 %r5604,%r5605,%r7598;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5607, {low,high};}

	// end inline asm
	selp.b32 	%r5609, %r7300, %r5607, %p12;
	// begin inline asm
	{mul.f16x2 %r5608,%r5609,%r7613;
}
	// end inline asm
	selp.b32 	%r5612, %r7304, %r5607, %p12;
	// begin inline asm
	{mul.f16x2 %r5611,%r5612,%r7612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5614, {low,high};}

	// end inline asm
	selp.b32 	%r5616, %r7300, %r5614, %p12;
	// begin inline asm
	{mul.f16x2 %r5615,%r5616,%r7366;
}
	// end inline asm
	selp.b32 	%r5619, %r7304, %r5614, %p12;
	// begin inline asm
	{mul.f16x2 %r5618,%r5619,%r7365;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5621, {low,high};}

	// end inline asm
	selp.b32 	%r5623, %r7300, %r5621, %p12;
	// begin inline asm
	{mul.f16x2 %r5622,%r5623,%r7611;
}
	// end inline asm
	selp.b32 	%r5626, %r7304, %r5621, %p12;
	// begin inline asm
	{mul.f16x2 %r5625,%r5626,%r7609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5628, {low,high};}

	// end inline asm
	selp.b32 	%r5630, %r7300, %r5628, %p12;
	// begin inline asm
	{mul.f16x2 %r5629,%r5630,%r7610;
}
	// end inline asm
	selp.b32 	%r5633, %r7304, %r5628, %p12;
	// begin inline asm
	{mul.f16x2 %r5632,%r5633,%r7608;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5635, {low,high};}

	// end inline asm
	selp.b32 	%r5637, %r7300, %r5635, %p12;
	// begin inline asm
	{mul.f16x2 %r5636,%r5637,%r7597;
}
	// end inline asm
	selp.b32 	%r5640, %r7304, %r5635, %p12;
	// begin inline asm
	{mul.f16x2 %r5639,%r5640,%r7595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5642, {low,high};}

	// end inline asm
	selp.b32 	%r5644, %r7300, %r5642, %p12;
	// begin inline asm
	{mul.f16x2 %r5643,%r5644,%r7596;
}
	// end inline asm
	selp.b32 	%r5647, %r7304, %r5642, %p12;
	// begin inline asm
	{mul.f16x2 %r5646,%r5647,%r7594;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5649, {low,high};}

	// end inline asm
	selp.b32 	%r5651, %r7300, %r5649, %p12;
	// begin inline asm
	{mul.f16x2 %r5650,%r5651,%r7607;
}
	// end inline asm
	selp.b32 	%r5654, %r7304, %r5649, %p12;
	// begin inline asm
	{mul.f16x2 %r5653,%r5654,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5656,%r7470,%r3604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5659,%r3715,%r3561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5662,%r5656,%r5659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5665,%r7208,%r5662;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5668,%r5489,%r5665;
}
	// end inline asm
	selp.b32 	%r7438, %r5489, %r5668, %p12;
	// begin inline asm
	{sub.f16x2 %r5671,%r7469,%r3670;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r3749,%r3638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5677,%r5671,%r5674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5680,%r7208,%r5677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5683,%r5492,%r5680;
}
	// end inline asm
	selp.b32 	%r7433, %r5492, %r5683, %p12;
	// begin inline asm
	{sub.f16x2 %r5686,%r7466,%r3837;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5689,%r7472,%r3794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5692,%r5686,%r5689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5695,%r7208,%r5692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5698,%r5496,%r5695;
}
	// end inline asm
	selp.b32 	%r7442, %r5496, %r5698, %p12;
	// begin inline asm
	{sub.f16x2 %r5701,%r7465,%r3903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5704,%r7471,%r3871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5707,%r5701,%r5704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5710,%r7208,%r5707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5713,%r5499,%r5710;
}
	// end inline asm
	selp.b32 	%r7435, %r5499, %r5713, %p12;
	// begin inline asm
	{sub.f16x2 %r5716,%r7469,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5719,%r7299,%r5716;
}
	// end inline asm
	@%p12 bra 	$L__BB0_574;
	bra.uni 	$L__BB0_573;

$L__BB0_574:
	// begin inline asm
	{neg.f16x2 %r7793,%r5503;
}
	// end inline asm
	bra.uni 	$L__BB0_575;

$L__BB0_573:
	// begin inline asm
	{mul.f16x2 %r7793,%r7300,%r5716;
}
	// end inline asm

$L__BB0_575:
	mov.u32 	%r5730, 31;
	mov.u32 	%r5732, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5728,%r7793,%r5730,%r2189,%r5732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5733,%r5719,%r5728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5736,%r1173,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5739,%r5736,%r5733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5742,%r7208,%r5739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7440,%r5503,%r5742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5748,%r7471,%r7472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5751,%r7299,%r5748;
}
	// end inline asm
	mov.u32 	%r7794, %r5510;
	@%p12 bra 	$L__BB0_577;

	// begin inline asm
	{mul.f16x2 %r7794,%r7300,%r5748;
}
	// end inline asm

$L__BB0_577:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5760,%r7794,%r5730,%r2189,%r5732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5765,%r5751,%r5760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r7460,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r5765,%r5768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5774,%r7208,%r5771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7445,%r5510,%r5774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5780,%r7462,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5783,%r7468,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r5780,%r5783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5789,%r7208,%r5786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5792,%r5517,%r5789;
}
	// end inline asm
	selp.b32 	%r7443, %r5517, %r5792, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7470;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5797,%r7470,%r413,%r2189,%r5732;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5797;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5803, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5804,%r5803,%r7469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5807,%r7303,%r5804;
}
	// end inline asm
	@%p12 bra 	$L__BB0_579;
	bra.uni 	$L__BB0_578;

$L__BB0_579:
	// begin inline asm
	{neg.f16x2 %r7795,%r5506;
}
	// end inline asm
	bra.uni 	$L__BB0_580;

$L__BB0_578:
	// begin inline asm
	{mul.f16x2 %r7795,%r7304,%r5804;
}
	// end inline asm

$L__BB0_580:
	mov.u32 	%r5822, 31;
	mov.u32 	%r5846, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5820,%r7795,%r5822,%r2189,%r5846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5825,%r5807,%r5820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5828,%r1185,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5831,%r5828,%r5825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5834,%r7208,%r5831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7439,%r5506,%r5834;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7472;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5842,%r7472,%r413,%r2189,%r5846;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5842;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5848, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5849,%r5848,%r7471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5852,%r7303,%r5849;
}
	// end inline asm
	mov.u32 	%r7796, %r5513;
	@%p12 bra 	$L__BB0_582;

	// begin inline asm
	{mul.f16x2 %r7796,%r7304,%r5849;
}
	// end inline asm

$L__BB0_582:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5863,%r7796,%r5822,%r2189,%r5846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r5852,%r5863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r7459,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r5868,%r5871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5877,%r7208,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7444,%r5513,%r5877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r7461,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5886,%r7467,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5889,%r5883,%r5886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5892,%r7208,%r5889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5895,%r5520,%r5892;
}
	// end inline asm
	selp.b32 	%r7436, %r5520, %r5895, %p12;
	// begin inline asm
	{sub.f16x2 %r5898,%r7467,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5901,%r7299,%r5898;
}
	// end inline asm
	mov.u32 	%r7797, %r5524;
	@%p12 bra 	$L__BB0_584;

	// begin inline asm
	{mul.f16x2 %r7797,%r7300,%r5898;
}
	// end inline asm

$L__BB0_584:
	mov.u32 	%r5912, 31;
	mov.u32 	%r5951, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5910,%r7797,%r5912,%r2189,%r5951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5915,%r5901,%r5910;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r7454,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5921,%r5915,%r5918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5924,%r7208,%r5921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7431,%r5524,%r5924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5930,%r7456,%r4175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5933,%r4316,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5936,%r5930,%r5933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5939,%r7208,%r5936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5942,%r5531,%r5939;
}
	// end inline asm
	selp.b32 	%r7429, %r5531, %r5942, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7468;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5947,%r7468,%r413,%r2189,%r5951;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5947;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5953, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5954,%r5953,%r7467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5957,%r7303,%r5954;
}
	// end inline asm
	mov.u32 	%r7798, %r5527;
	@%p12 bra 	$L__BB0_586;

	// begin inline asm
	{mul.f16x2 %r7798,%r7304,%r5954;
}
	// end inline asm

$L__BB0_586:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5968,%r7798,%r5912,%r2189,%r5951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5973,%r5957,%r5968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5976,%r7453,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5979,%r5973,%r5976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5982,%r7208,%r5979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7430,%r5527,%r5982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5988,%r7455,%r4256;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5991,%r4350,%r7467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5994,%r5988,%r5991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5997,%r7208,%r5994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6000,%r5534,%r5997;
}
	// end inline asm
	selp.b32 	%r7427, %r5534, %r6000, %p12;
	// begin inline asm
	{sub.f16x2 %r6003,%r7465,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6006,%r7299,%r6003;
}
	// end inline asm
	@%p12 bra 	$L__BB0_588;
	bra.uni 	$L__BB0_587;

$L__BB0_588:
	// begin inline asm
	{neg.f16x2 %r7799,%r5538;
}
	// end inline asm
	bra.uni 	$L__BB0_589;

$L__BB0_587:
	// begin inline asm
	{mul.f16x2 %r7799,%r7300,%r6003;
}
	// end inline asm

$L__BB0_589:
	mov.u32 	%r6019, 31;
	mov.u32 	%r6021, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6017,%r7799,%r6019,%r2189,%r6021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6022,%r6006,%r6017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6025,%r7460,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r6025,%r6022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6031,%r7208,%r6028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7421,%r5538,%r6031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6037,%r7648,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6040,%r7299,%r6037;
}
	// end inline asm
	mov.u32 	%r7800, %r5545;
	@%p12 bra 	$L__BB0_591;

	// begin inline asm
	{mul.f16x2 %r7800,%r7300,%r6037;
}
	// end inline asm

$L__BB0_591:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6049,%r7800,%r6019,%r2189,%r6021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6054,%r6040,%r6049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6057,%r7646,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6060,%r6054,%r6057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6063,%r7208,%r6060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7426,%r5545,%r6063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6069,%r7647,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6072,%r7464,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6075,%r6069,%r6072;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6078,%r7208,%r6075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6081,%r5552,%r6078;
}
	// end inline asm
	selp.b32 	%r7424, %r5552, %r6081, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7466;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6086,%r7466,%r413,%r2189,%r6021;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6086;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6092, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6093,%r6092,%r7465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6096,%r7303,%r6093;
}
	// end inline asm
	@%p12 bra 	$L__BB0_593;
	bra.uni 	$L__BB0_592;

$L__BB0_593:
	// begin inline asm
	{neg.f16x2 %r7801,%r5541;
}
	// end inline asm
	bra.uni 	$L__BB0_594;

$L__BB0_592:
	// begin inline asm
	{mul.f16x2 %r7801,%r7304,%r6093;
}
	// end inline asm

$L__BB0_594:
	mov.u32 	%r6111, 31;
	mov.u32 	%r6135, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6109,%r7801,%r6111,%r2189,%r6135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6114,%r6096,%r6109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6117,%r7459,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6120,%r6117,%r6114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6123,%r7208,%r6120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7420,%r5541,%r6123;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6131,%r7649,%r413,%r2189,%r6135;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6131;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6137, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r6137,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r7303,%r6138;
}
	// end inline asm
	mov.u32 	%r7802, %r5548;
	@%p12 bra 	$L__BB0_596;

	// begin inline asm
	{mul.f16x2 %r7802,%r7304,%r6138;
}
	// end inline asm

$L__BB0_596:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6152,%r7802,%r6111,%r2189,%r6135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6157,%r6141,%r6152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6160,%r7644,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6163,%r6157,%r6160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6166,%r7208,%r6163;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7425,%r5548,%r6166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6172,%r7645,%r7465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6175,%r7463,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6178,%r6172,%r6175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6181,%r7208,%r6178;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6184,%r5555,%r6181;
}
	// end inline asm
	selp.b32 	%r7419, %r5555, %r6184, %p12;
	// begin inline asm
	{sub.f16x2 %r6187,%r7461,%r7462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r7299,%r6187;
}
	// end inline asm
	@%p12 bra 	$L__BB0_598;
	bra.uni 	$L__BB0_597;

$L__BB0_598:
	// begin inline asm
	{neg.f16x2 %r7803,%r5559;
}
	// end inline asm
	bra.uni 	$L__BB0_599;

$L__BB0_597:
	// begin inline asm
	{mul.f16x2 %r7803,%r7300,%r6187;
}
	// end inline asm

$L__BB0_599:
	mov.u32 	%r6203, 31;
	mov.u32 	%r6205, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6201,%r7803,%r6203,%r2189,%r6205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6206,%r6190,%r6201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6209,%r7454,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6212,%r6209,%r6206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6215,%r7208,%r6212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7411,%r5559,%r6215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6221,%r7463,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6224,%r7299,%r6221;
}
	// end inline asm
	mov.u32 	%r7804, %r5566;
	@%p12 bra 	$L__BB0_601;

	// begin inline asm
	{mul.f16x2 %r7804,%r7300,%r6221;
}
	// end inline asm

$L__BB0_601:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6233,%r7804,%r6203,%r2189,%r6205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6238,%r6224,%r6233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6241,%r7450,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6244,%r6238,%r6241;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6247,%r7208,%r6244;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7415,%r5566,%r6247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6253,%r7452,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6256,%r7458,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6259,%r6253,%r6256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6262,%r7208,%r6259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6265,%r5573,%r6262;
}
	// end inline asm
	selp.b32 	%r7413, %r5573, %r6265, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7462;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6270,%r7462,%r413,%r2189,%r6205;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6270;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6276, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r6276,%r7461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6280,%r7303,%r6277;
}
	// end inline asm
	@%p12 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	// begin inline asm
	{neg.f16x2 %r7805,%r5562;
}
	// end inline asm
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	// begin inline asm
	{mul.f16x2 %r7805,%r7304,%r6277;
}
	// end inline asm

$L__BB0_604:
	mov.u32 	%r6295, 31;
	mov.u32 	%r6319, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6293,%r7805,%r6295,%r2189,%r6319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6298,%r6280,%r6293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6301,%r7453,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6304,%r6301,%r6298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6307,%r7208,%r6304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7410,%r5562,%r6307;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6315,%r7464,%r413,%r2189,%r6319;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6315;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6321, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r6321,%r7463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6325,%r7303,%r6322;
}
	// end inline asm
	mov.u32 	%r7806, %r5569;
	@%p12 bra 	$L__BB0_606;

	// begin inline asm
	{mul.f16x2 %r7806,%r7304,%r6322;
}
	// end inline asm

$L__BB0_606:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6336,%r7806,%r6295,%r2189,%r6319;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6341,%r6325,%r6336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6344,%r7449,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6347,%r6341,%r6344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6350,%r7208,%r6347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7414,%r5569,%r6350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6356,%r7451,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6359,%r7457,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6362,%r6356,%r6359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6365,%r7208,%r6362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6368,%r5576,%r6365;
}
	// end inline asm
	selp.b32 	%r7407, %r5576, %r6368, %p12;
	// begin inline asm
	{sub.f16x2 %r6371,%r7455,%r7456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6374,%r7299,%r6371;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;
	bra.uni 	$L__BB0_607;

$L__BB0_608:
	// begin inline asm
	{neg.f16x2 %r7807,%r5580;
}
	// end inline asm
	bra.uni 	$L__BB0_609;

$L__BB0_607:
	// begin inline asm
	{mul.f16x2 %r7807,%r7300,%r6371;
}
	// end inline asm

$L__BB0_609:
	mov.u32 	%r6387, 31;
	mov.u32 	%r6389, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6385,%r7807,%r6387,%r2189,%r6389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6390,%r6374,%r6385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6393,%r1258,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6396,%r6393,%r6390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6399,%r7208,%r6396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7399,%r5580,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r7457,%r7458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6408,%r7299,%r6405;
}
	// end inline asm
	mov.u32 	%r7808, %r5587;
	@%p12 bra 	$L__BB0_611;

	// begin inline asm
	{mul.f16x2 %r7808,%r7300,%r6405;
}
	// end inline asm

$L__BB0_611:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6417,%r7808,%r6387,%r2189,%r6389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6422,%r6408,%r6417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6425,%r7448,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6428,%r6422,%r6425;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6431,%r7208,%r6428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7403,%r5587,%r6431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6437,%r7632,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6440,%r7635,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6443,%r6437,%r6440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6446,%r7208,%r6443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6449,%r5594,%r6446;
}
	// end inline asm
	selp.b32 	%r7401, %r5594, %r6449, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7456;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6454,%r7456,%r413,%r2189,%r6389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6454;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6460, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6461,%r6460,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6464,%r7303,%r6461;
}
	// end inline asm
	@%p12 bra 	$L__BB0_613;
	bra.uni 	$L__BB0_612;

$L__BB0_613:
	// begin inline asm
	{neg.f16x2 %r7809,%r5583;
}
	// end inline asm
	bra.uni 	$L__BB0_614;

$L__BB0_612:
	// begin inline asm
	{mul.f16x2 %r7809,%r7304,%r6461;
}
	// end inline asm

$L__BB0_614:
	mov.u32 	%r6479, 31;
	mov.u32 	%r6503, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6477,%r7809,%r6479,%r2189,%r6503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6482,%r6464,%r6477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6485,%r1259,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6488,%r6485,%r6482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6491,%r7208,%r6488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7398,%r5583,%r6491;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7458;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6499,%r7458,%r413,%r2189,%r6503;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6499;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6505, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r6505,%r7457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6509,%r7303,%r6506;
}
	// end inline asm
	mov.u32 	%r7810, %r5590;
	@%p12 bra 	$L__BB0_616;

	// begin inline asm
	{mul.f16x2 %r7810,%r7304,%r6506;
}
	// end inline asm

$L__BB0_616:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6520,%r7810,%r6479,%r2189,%r6503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r6509,%r6520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6528,%r7447,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6531,%r6525,%r6528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6534,%r7208,%r6531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7402,%r5590,%r6534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6540,%r7630,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6543,%r7634,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6546,%r6540,%r6543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6549,%r7208,%r6546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r5597,%r6549;
}
	// end inline asm
	selp.b32 	%r7395, %r5597, %r6552, %p12;
	// begin inline asm
	{sub.f16x2 %r6555,%r7634,%r7635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6558,%r7299,%r6555;
}
	// end inline asm
	mov.u32 	%r7811, %r5601;
	@%p12 bra 	$L__BB0_618;

	// begin inline asm
	{mul.f16x2 %r7811,%r7300,%r6555;
}
	// end inline asm

$L__BB0_618:
	mov.u32 	%r6569, 31;
	mov.u32 	%r6593, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6567,%r7811,%r6569,%r2189,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6572,%r6558,%r6567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6575,%r7629,%r1258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6578,%r6572,%r6575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6581,%r7208,%r6578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7392,%r5601,%r6581;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7635;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6589,%r7635,%r413,%r2189,%r6593;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6589;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6595, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6596,%r6595,%r7634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6599,%r7303,%r6596;
}
	// end inline asm
	mov.u32 	%r7812, %r5604;
	@%p12 bra 	$L__BB0_620;

	// begin inline asm
	{mul.f16x2 %r7812,%r7304,%r6596;
}
	// end inline asm

$L__BB0_620:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6610,%r7812,%r6569,%r2189,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6615,%r6599,%r6610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6618,%r7628,%r1259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6621,%r6615,%r6618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6624,%r7208,%r6621;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7391,%r5604,%r6624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6630,%r7645,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6633,%r7299,%r6630;
}
	// end inline asm
	@%p12 bra 	$L__BB0_622;
	bra.uni 	$L__BB0_621;

$L__BB0_622:
	// begin inline asm
	{neg.f16x2 %r7813,%r5608;
}
	// end inline asm
	bra.uni 	$L__BB0_623;

$L__BB0_621:
	// begin inline asm
	{mul.f16x2 %r7813,%r7300,%r6630;
}
	// end inline asm

$L__BB0_623:
	mov.u32 	%r6646, 31;
	mov.u32 	%r6670, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6644,%r7813,%r6646,%r2189,%r6670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6649,%r6633,%r6644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6652,%r7450,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6655,%r6652,%r6649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6658,%r7208,%r6655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7388,%r5608,%r6658;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6666,%r7647,%r413,%r2189,%r6670;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6666;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6672, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6673,%r6672,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6676,%r7303,%r6673;
}
	// end inline asm
	@%p12 bra 	$L__BB0_625;
	bra.uni 	$L__BB0_624;

$L__BB0_625:
	// begin inline asm
	{neg.f16x2 %r7814,%r5611;
}
	// end inline asm
	bra.uni 	$L__BB0_626;

$L__BB0_624:
	// begin inline asm
	{mul.f16x2 %r7814,%r7304,%r6673;
}
	// end inline asm

$L__BB0_626:
	mov.u32 	%r6691, 31;
	mov.u32 	%r6693, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6689,%r7814,%r6691,%r2189,%r6693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6694,%r6676,%r6689;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6697,%r7449,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6700,%r6697,%r6694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6703,%r7208,%r6700;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7387,%r5611,%r6703;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6709,%r7451,%r7452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6712,%r7299,%r6709;
}
	// end inline asm
	@%p12 bra 	$L__BB0_628;
	bra.uni 	$L__BB0_627;

$L__BB0_628:
	// begin inline asm
	{neg.f16x2 %r7815,%r5615;
}
	// end inline asm
	bra.uni 	$L__BB0_629;

$L__BB0_627:
	// begin inline asm
	{mul.f16x2 %r7815,%r7300,%r6709;
}
	// end inline asm

$L__BB0_629:
	mov.u32 	%r6725, 31;
	mov.u32 	%r6727, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6723,%r7815,%r6725,%r2189,%r6727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6728,%r6712,%r6723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6731,%r7448,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6734,%r6731,%r6728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6737,%r7208,%r6734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7380,%r5615,%r6737;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6743,%r7642,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6746,%r7299,%r6743;
}
	// end inline asm
	mov.u32 	%r7816, %r5622;
	@%p12 bra 	$L__BB0_631;

	// begin inline asm
	{mul.f16x2 %r7816,%r7300,%r6743;
}
	// end inline asm

$L__BB0_631:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6755,%r7816,%r6725,%r2189,%r6727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6760,%r6746,%r6755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6763,%r7640,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6766,%r6760,%r6763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6769,%r7208,%r6766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7384,%r5622,%r6769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6775,%r7627,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6778,%r7633,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6781,%r6775,%r6778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6784,%r7208,%r6781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6787,%r5629,%r6784;
}
	// end inline asm
	selp.b32 	%r7382, %r5629, %r6787, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7452;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6792,%r7452,%r413,%r2189,%r6727;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6792;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6798, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6799,%r6798,%r7451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6802,%r7303,%r6799;
}
	// end inline asm
	@%p12 bra 	$L__BB0_633;
	bra.uni 	$L__BB0_632;

$L__BB0_633:
	// begin inline asm
	{neg.f16x2 %r7817,%r5618;
}
	// end inline asm
	bra.uni 	$L__BB0_634;

$L__BB0_632:
	// begin inline asm
	{mul.f16x2 %r7817,%r7304,%r6799;
}
	// end inline asm

$L__BB0_634:
	mov.u32 	%r6817, 31;
	mov.u32 	%r6841, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6815,%r7817,%r6817,%r2189,%r6841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6820,%r6802,%r6815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6823,%r7447,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6826,%r6823,%r6820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6829,%r7208,%r6826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7379,%r5618,%r6829;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6837,%r7643,%r413,%r2189,%r6841;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6837;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6843, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6844,%r6843,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6847,%r7303,%r6844;
}
	// end inline asm
	mov.u32 	%r7818, %r5625;
	@%p12 bra 	$L__BB0_636;

	// begin inline asm
	{mul.f16x2 %r7818,%r7304,%r6844;
}
	// end inline asm

$L__BB0_636:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6858,%r7818,%r6817,%r2189,%r6841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6863,%r6847,%r6858;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6866,%r7638,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6869,%r6863,%r6866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6872,%r7208,%r6869;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7383,%r5625,%r6872;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6878,%r7626,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6881,%r7631,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6884,%r6878,%r6881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6887,%r7208,%r6884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6890,%r5632,%r6887;
}
	// end inline asm
	selp.b32 	%r7377, %r5632, %r6890, %p12;
	// begin inline asm
	{sub.f16x2 %r6893,%r7630,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6896,%r7299,%r6893;
}
	// end inline asm
	@%p12 bra 	$L__BB0_638;
	bra.uni 	$L__BB0_637;

$L__BB0_638:
	// begin inline asm
	{neg.f16x2 %r7819,%r5636;
}
	// end inline asm
	bra.uni 	$L__BB0_639;

$L__BB0_637:
	// begin inline asm
	{mul.f16x2 %r7819,%r7300,%r6893;
}
	// end inline asm

$L__BB0_639:
	mov.u32 	%r6909, 31;
	mov.u32 	%r6911, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6907,%r7819,%r6909,%r2189,%r6911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6912,%r6896,%r6907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6915,%r7629,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6918,%r6915,%r6912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6921,%r7208,%r6918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7372,%r5636,%r6921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6927,%r7631,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6930,%r7299,%r6927;
}
	// end inline asm
	mov.u32 	%r7820, %r5643;
	@%p12 bra 	$L__BB0_641;

	// begin inline asm
	{mul.f16x2 %r7820,%r7300,%r6927;
}
	// end inline asm

$L__BB0_641:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6939,%r7820,%r6909,%r2189,%r6911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6944,%r6930,%r6939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6947,%r7625,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6950,%r6944,%r6947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6953,%r7208,%r6950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7374,%r5643,%r6953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7632;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6961,%r7632,%r413,%r2189,%r6911;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6961;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6967, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6968,%r6967,%r7630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6971,%r7303,%r6968;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7821,%r5639;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7821,%r7304,%r6968;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6986, 31;
	mov.u32 	%r7010, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6984,%r7821,%r6986,%r2189,%r7010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6989,%r6971,%r6984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6992,%r7628,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6995,%r6992,%r6989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6998,%r7208,%r6995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7371,%r5639,%r6998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7006,%r7633,%r413,%r2189,%r7010;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7006;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7012, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7013,%r7012,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7016,%r7303,%r7013;
}
	// end inline asm
	mov.u32 	%r7822, %r5646;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7822,%r7304,%r7013;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7027,%r7822,%r6986,%r2189,%r7010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7032,%r7016,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7035,%r7624,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7038,%r7032,%r7035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7041,%r7208,%r7038;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7373,%r5646,%r7041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7047,%r7626,%r7627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7050,%r7299,%r7047;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;
	bra.uni 	$L__BB0_647;

$L__BB0_648:
	// begin inline asm
	{neg.f16x2 %r7823,%r5650;
}
	// end inline asm
	bra.uni 	$L__BB0_649;

$L__BB0_647:
	// begin inline asm
	{mul.f16x2 %r7823,%r7300,%r7047;
}
	// end inline asm

$L__BB0_649:
	mov.u32 	%r7063, 31;
	mov.u32 	%r7087, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7061,%r7823,%r7063,%r2189,%r7087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r7050,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7069,%r7625,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7072,%r7069,%r7066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7075,%r7208,%r7072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7366,%r5650,%r7075;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7627;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7083,%r7627,%r413,%r2189,%r7087;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7083;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7089, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7090,%r7089,%r7626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7093,%r7303,%r7090;
}
	// end inline asm
	@%p12 bra 	$L__BB0_651;
	bra.uni 	$L__BB0_650;

$L__BB0_651:
	// begin inline asm
	{neg.f16x2 %r7824,%r5653;
}
	// end inline asm
	bra.uni 	$L__BB0_652;

$L__BB0_650:
	// begin inline asm
	{mul.f16x2 %r7824,%r7304,%r7090;
}
	// end inline asm

$L__BB0_652:
	mov.u32 	%r7108, 31;
	mov.u32 	%r7110, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7106,%r7824,%r7108,%r2189,%r7110;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7093,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7624,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7117,%r7114,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7120,%r7208,%r7117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7365,%r5653,%r7120;
}
	// end inline asm
	bar.sync 	0;
	@%p286 bra 	$L__BB0_655;

	setp.ne.s32 	%p349, %r24, %r2088;
	shl.b32 	%r7129, %r24, 8;
	shl.b32 	%r7133, %r1682, 8;
	or.b32  	%r7134, %r7133, 128;
	mad.lo.s32 	%r7135, %r7134, %r23, %r2091;
	add.s32 	%r7136, %r7135, %r7129;
	shl.b32 	%r7137, %r7136, 2;
	mov.u32 	%r7138, _ZN6kernel5shmemE;
	add.s32 	%r7139, %r7138, %r7137;
	shl.b32 	%r7140, %r28, 4;
	add.s32 	%r1674, %r7139, %r7140;
	st.shared.v4.u32 	[%r1674], {%r7426, %r7425, %r7421, %r7420};
	st.shared.v4.u32 	[%r1674+512], {%r7442, %r7435, %r7445, %r7444};
	@%p349 bra 	$L__BB0_655;

	st.shared.v4.u32 	[%r1674+1024], {%r7440, %r7439, %r7438, %r7433};

$L__BB0_655:
	setp.eq.s32 	%p347, %r24, %r2088;
	@%p347 bra 	$L__BB0_657;

	mul.lo.s32 	%r7144, %r2486, 384;
	mad.lo.s32 	%r7145, %r52, %r24, %r7144;
	mad.lo.s32 	%r7148, %r2086, %r2088, %r7145;
	mad.lo.s32 	%r7151, %r2084, %r2083, %r7148;
	shl.b32 	%r7152, %r7151, 2;
	mov.u32 	%r7153, _ZN6kernel5shmemE;
	add.s32 	%r7154, %r7153, %r7152;
	shl.b32 	%r7155, %r28, 4;
	add.s32 	%r7156, %r7154, %r7155;
	st.shared.v4.u32 	[%r7156], {%r7440, %r7439, %r7438, %r7433};
	st.shared.v4.u32 	[%r7156+512], {%r7431, %r7430, %r7399, %r7398};
	st.shared.v4.u32 	[%r7156+1024], {%r7429, %r7427, %r7392, %r7391};

$L__BB0_657:
	setp.ne.s32 	%p348, %r23, %r2083;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p348 bra 	$L__BB0_659;

	mad.lo.s32 	%r7158, %r633, %r1684, %r26;
	mad.lo.s32 	%r7159, %r7158, 768, 384;
	mul.lo.s32 	%r7160, %r7159, %r1682;
	mad.lo.s32 	%r7161, %r24, 384, %r7160;
	add.s32 	%r7162, %r7161, -128;
	mul.wide.s32 	%rd540, %r7162, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7426, %r7425, %r7421, %r7420};
	st.global.v4.u32 	[%rd543+1024], {%r7442, %r7435, %r7445, %r7444};
	st.global.v4.u32 	[%rd543+1536], {%r7440, %r7439, %r7438, %r7433};

$L__BB0_659:
	setp.ne.s32 	%p350, %r24, %r2088;
	@%p350 bra 	$L__BB0_662;

	mad.lo.s32 	%r7164, %r634, %r1683, %r25;
	mad.lo.s32 	%r7170, %r2486, 384, %r52;
	mad.lo.s32 	%r7171, %r7164, %r1738, %r7170;
	mad.lo.s32 	%r7174, %r1740, %r51, %r7171;
	mul.wide.s32 	%rd544, %r7174, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7440, %r7439, %r7438, %r7433};
	st.global.v4.u32 	[%rd41+512], {%r7431, %r7430, %r7399, %r7398};
	st.global.v4.u32 	[%rd41+1024], {%r7429, %r7427, %r7392, %r7391};
	@%p205 bra 	$L__BB0_662;

	st.global.v4.u32 	[%rd41+1536], {%r7603, %r7602, %r7605, %r7604};

$L__BB0_662:
	rem.s32 	%r7175, %r7473, %r1685;
	setp.eq.s32 	%p341, %r7175, 0;
	@%p341 bra 	$L__BB0_664;

	bar.sync 	0;
	bra.uni 	$L__BB0_671;

$L__BB0_664:
	@%p147 bra 	$L__BB0_666;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_666:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_670;

	membar.gl;
	setp.eq.s32 	%p344, %r407, %r408;
	mov.u32 	%r7190, -2147483647;
	sub.s32 	%r7191, %r7190, %r406;
	selp.b32 	%r7179, %r7191, 1, %p344;
	// begin inline asm
	atom.add.release.gpu.u32 %r7178,[%rd25],%r7179;
	// end inline asm

$L__BB0_668:
	ld.volatile.u32 	%r7192, [%rd25];
	xor.b32  	%r7193, %r7192, %r7178;
	setp.gt.s32 	%p345, %r7193, -1;
	@%p345 bra 	$L__BB0_668;

	// begin inline asm
	ld.acquire.gpu.u32 %r7194,[%rd25];
	// end inline asm

$L__BB0_670:
	bar.sync 	0;

$L__BB0_671:
	setp.lt.s32 	%p346, %r1417, %r31;
	mov.u32 	%r7606, %r7764;
	mov.u32 	%r7607, %r7765;
	mov.u32 	%r7594, %r7750;
	mov.u32 	%r7595, %r7751;
	mov.u32 	%r7596, %r7752;
	mov.u32 	%r7597, %r7753;
	mov.u32 	%r7608, %r7766;
	mov.u32 	%r7609, %r7767;
	mov.u32 	%r7610, %r7768;
	mov.u32 	%r7611, %r7769;
	mov.u32 	%r7612, %r7770;
	mov.u32 	%r7613, %r7771;
	mov.u32 	%r7598, %r7756;
	mov.u32 	%r7599, %r7757;
	mov.u32 	%r7600, %r7758;
	mov.u32 	%r7601, %r7759;
	mov.u32 	%r7614, %r7772;
	mov.u32 	%r7615, %r7773;
	mov.u32 	%r7616, %r7774;
	mov.u32 	%r7617, %r7775;
	mov.u32 	%r7393, %r478;
	mov.u32 	%r7394, %r7672;
	mov.u32 	%r7397, %r479;
	mov.u32 	%r7400, %r7674;
	mov.u32 	%r7405, %r484;
	mov.u32 	%r7409, %r487;
	mov.u32 	%r7417, %r7679;
	mov.u32 	%r7422, %r7681;
	mov.u32 	%r7428, %r505;
	mov.u32 	%r7432, %r513;
	mov.u32 	%r7434, %r515;
	mov.u32 	%r7437, %r517;
	mov.u32 	%r7441, %r521;
	mov.u32 	%r7446, %r525;
	mov.u32 	%r7473, %r1417;
	@%p346 bra 	$L__BB0_302;

$L__BB0_672:
	ret;

}

