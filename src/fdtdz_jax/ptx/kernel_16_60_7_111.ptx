//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<382>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7886>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<561>;


	mov.b64 	%rd41, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd41;
	ld.param.v2.u32 	{%r1729, %r1730}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1731, %r1732}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1733, %r1734}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1735, %r1736}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1737, %r1738}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1739, %r1740}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1741, %r1742}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1743, 32;
	sub.s32 	%r27, %r1743, %r1736;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1744, %r1742, -1;
	mad.lo.s32 	%r1745, %r1744, %r1741, %r1740;
	add.s32 	%r1746, %r1735, %r1734;
	add.s32 	%r1747, %r1746, %r1745;
	add.s32 	%r1748, %r1747, 1;
	mul.lo.s32 	%r1749, %r1729, %r1731;
	shl.b32 	%r29, %r1749, 1;
	shl.b32 	%r1750, %r1749, 2;
	div.s32 	%r1751, %r1748, %r1750;
	add.s32 	%r1752, %r1751, 1;
	mul.lo.s32 	%r1753, %r1752, %r1735;
	mul.lo.s32 	%r1754, %r1730, %r1732;
	shl.b32 	%r30, %r1754, 1;
	div.s32 	%r1755, %r1753, %r30;
	add.s32 	%r1756, %r1755, 1;
	mul.lo.s32 	%r31, %r1756, %r1734;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7253, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7253, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd42, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd42;
	mad.lo.s32 	%r1759, %r1731, %r26, %r25;
	mad.lo.s32 	%r1760, %r1759, %r1730, %r24;
	mad.lo.s32 	%r1761, %r1760, %r1729, %r23;
	shl.b32 	%r35, %r1761, 5;
	add.s32 	%r7258, %r35, %r28;
	mul.lo.s32 	%r1762, %r1754, %r1749;
	shl.b32 	%r39, %r1762, 5;
	shl.b32 	%r1763, %r1736, 2;
	mov.u32 	%r1764, 128;
	sub.s32 	%r40, %r1764, %r1763;
	mul.lo.s32 	%r1765, %r1735, %r1734;
	mul.lo.s32 	%r1766, %r1765, %r1742;
	mul.lo.s32 	%r1767, %r1766, %r40;
	mul.lo.s32 	%r41, %r1767, 3;
	setp.ge.s32 	%p13, %r7258, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1768, %r28;
	add.s32 	%r1769, %r41, %r1768;
	sub.s32 	%r1770, %r1769, %r35;
	mul.lo.s32 	%r1771, %r1754, %r1729;
	mul.lo.s32 	%r1772, %r1771, %r1731;
	shl.b32 	%r1773, %r1772, 5;
	div.u32 	%r42, %r1770, %r1773;
	add.s32 	%r1774, %r42, 1;
	and.b32  	%r7255, %r1774, 3;
	setp.eq.s32 	%p14, %r7255, 0;
	mov.u32 	%r7256, %r7258;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7256, %r7258;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd43, %r7256, 4;
	add.s64 	%rd44, %rd2, %rd43;
	mov.u32 	%r1775, 0;
	st.global.u32 	[%rd44], %r1775;
	add.s32 	%r7256, %r7256, %r39;
	add.s32 	%r7255, %r7255, -1;
	setp.ne.s32 	%p15, %r7255, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd47, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd45, %r7256, 4;
	add.s64 	%rd46, %rd2, %rd45;
	mov.u32 	%r1776, 0;
	st.global.u32 	[%rd46], %r1776;
	add.s64 	%rd48, %rd46, %rd47;
	st.global.u32 	[%rd48], %r1776;
	add.s32 	%r1777, %r7256, %r39;
	add.s32 	%r1778, %r1777, %r39;
	add.s64 	%rd49, %rd48, %rd47;
	st.global.u32 	[%rd49], %r1776;
	add.s32 	%r1779, %r1778, %r39;
	add.s64 	%rd50, %rd49, %rd47;
	st.global.u32 	[%rd50], %r1776;
	add.s32 	%r7256, %r1779, %r39;
	setp.lt.s32 	%p17, %r7256, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd51, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd51;
	sub.s32 	%r1780, %r1735, %r29;
	div.s32 	%r1781, %r1780, %r30;
	mul.lo.s32 	%r1782, %r1781, %r1734;
	sub.s32 	%r51, %r1782, %r29;
	sub.s32 	%r1783, %r1734, %r30;
	mul.lo.s32 	%r1784, %r1783, %r1731;
	mul.lo.s32 	%r52, %r1729, 384;
	add.s32 	%r1785, %r52, %r52;
	add.s32 	%r1786, %r1785, 128;
	mul.lo.s32 	%r1788, %r1754, 768;
	mul.lo.s32 	%r1789, %r1784, %r1786;
	mad.lo.s32 	%r53, %r1788, %r51, %r1789;
	bra.uni 	$L__BB0_11;

$L__BB0_737:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7239, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd546, %r7258, 4;
	add.s64 	%rd547, %rd3, %rd546;
	st.global.u32 	[%rd547], %r7239;
	add.s32 	%r7258, %r7258, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7258, %r53;
	@%p18 bra 	$L__BB0_737;

	ld.param.u64 	%rd52, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd52;
	ld.param.u64 	%rd53, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd53;
	mad.lo.s32 	%r7300, %r1729, %r25, %r23;
	mul.lo.s32 	%r57, %r1730, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7300, %r1734;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1790, 31;
	sub.s32 	%r1791, %r1790, %r28;
	selp.b32 	%r1792, %r28, %r1791, %p20;
	shl.b32 	%r1793, %r1792, 2;
	mov.u32 	%r1794, 2;
	sub.s32 	%r59, %r1793, %r1737;
	sub.s32 	%r1795, %r1794, %r1737;
	add.s32 	%r60, %r1795, %r1793;
	shl.b32 	%r61, %r1765, 6;
	add.s32 	%r62, %r1734, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1797, %r66, 31;
	add.s32 	%r1798, %r66, %r1797;
	shr.s32 	%r68, %r1798, 1;
	and.b32  	%r1799, %r1798, -2;
	sub.s32 	%r1800, %r66, %r1799;
	add.s32 	%r67, %r1800, %r61;
	rem.s32 	%r1835, %r63, %r40;
	add.s32 	%r1836, %r1835, %r40;
	rem.s32 	%r91, %r1836, %r40;
	rem.s32 	%r1837, %r64, %r40;
	add.s32 	%r1838, %r1837, %r40;
	rem.s32 	%r92, %r1838, %r40;
	mov.u32 	%r7259, %r7300;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1735;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7259;
	rem.s32 	%r1801, %r59, %r40;
	add.s32 	%r1802, %r1801, %r40;
	rem.s32 	%r71, %r1802, %r40;
	rem.s32 	%r1803, %r60, %r40;
	add.s32 	%r1804, %r1803, %r40;
	rem.s32 	%r72, %r1804, %r40;
	mul.lo.s32 	%r73, %r7259, %r1735;
	add.s32 	%r1805, %r1734, %r7259;
	mul.lo.s32 	%r74, %r1805, %r1735;
	add.s32 	%r1806, %r1805, %r1734;
	mul.lo.s32 	%r75, %r1806, %r1735;
	mov.u32 	%r7260, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7260, %r1734;
	add.s32 	%r78, %r77, %r7259;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1809, %r73, %r7260;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r71;
	mul.wide.s32 	%rd54, %r1811, 4;
	add.s64 	%rd55, %rd5, %rd54;
	ld.global.f32 	%f41, [%rd55];
	add.s32 	%r1812, %r1810, %r72;
	mul.wide.s32 	%rd56, %r1812, 4;
	add.s64 	%rd57, %rd5, %rd56;
	ld.global.f32 	%f42, [%rd57];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1813, %r83, %r28;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r61, %r1814;
	mul.wide.s32 	%rd58, %r1815, 4;
	add.s64 	%rd59, %rd6, %rd58;
	st.global.u32 	[%rd59], %r7261;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1818, %r74, %r7260;
	mul.lo.s32 	%r1819, %r1818, %r40;
	add.s32 	%r1820, %r1819, %r71;
	mul.wide.s32 	%rd60, %r1820, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f45, [%rd61];
	add.s32 	%r1821, %r1819, %r72;
	mul.wide.s32 	%rd62, %r1821, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f46, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7262, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1822, %r65, %r79;
	mul.wide.s32 	%rd64, %r1822, 4;
	add.s64 	%rd65, %rd6, %rd64;
	st.global.u32 	[%rd65], %r7262;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1825, %r75, %r7260;
	mul.lo.s32 	%r1826, %r1825, %r40;
	add.s32 	%r1827, %r1826, %r71;
	mul.wide.s32 	%rd66, %r1827, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f49, [%rd67];
	add.s32 	%r1828, %r1826, %r72;
	mul.wide.s32 	%rd68, %r1828, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f50, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1829, %r70, %r1734;
	add.s32 	%r1830, %r1829, %r77;
	shl.b32 	%r90, %r1830, 5;
	add.s32 	%r1831, %r90, %r28;
	shl.b32 	%r1832, %r1831, 2;
	add.s32 	%r1833, %r61, %r1832;
	add.s32 	%r1834, %r1833, 2;
	mul.wide.s32 	%rd70, %r1834, 4;
	add.s64 	%rd71, %rd6, %rd70;
	st.global.u32 	[%rd71], %r7263;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1841, %r73, %r7260;
	mul.lo.s32 	%r1842, %r1841, %r40;
	add.s32 	%r1843, %r1842, %r91;
	mul.wide.s32 	%rd72, %r1843, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f53, [%rd73];
	add.s32 	%r1844, %r1842, %r92;
	mul.wide.s32 	%rd74, %r1844, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f54, [%rd75];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1845, %r83, %r68;
	shl.b32 	%r1846, %r1845, 2;
	add.s32 	%r1847, %r67, %r1846;
	mul.wide.s32 	%rd76, %r1847, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r7264;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1850, %r74, %r7260;
	mul.lo.s32 	%r1851, %r1850, %r40;
	add.s32 	%r1852, %r1851, %r91;
	mul.wide.s32 	%rd78, %r1852, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f57, [%rd79];
	add.s32 	%r1853, %r1851, %r92;
	mul.wide.s32 	%rd80, %r1853, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f58, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1854, %r66, %r79;
	mul.wide.s32 	%rd82, %r1854, 4;
	add.s64 	%rd83, %rd6, %rd82;
	st.global.u32 	[%rd83], %r7265;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1857, %r75, %r7260;
	mul.lo.s32 	%r1858, %r1857, %r40;
	add.s32 	%r1859, %r1858, %r91;
	mul.wide.s32 	%rd84, %r1859, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f61, [%rd85];
	add.s32 	%r1860, %r1858, %r92;
	mul.wide.s32 	%rd86, %r1860, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f62, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1861, %r90, %r68;
	shl.b32 	%r1862, %r1861, 2;
	add.s32 	%r1863, %r67, %r1862;
	add.s32 	%r1864, %r1863, 2;
	mul.wide.s32 	%rd88, %r1864, 4;
	add.s64 	%rd89, %rd6, %rd88;
	st.global.u32 	[%rd89], %r7266;
	add.s32 	%r7260, %r7260, %r1754;
	setp.lt.s32 	%p28, %r7260, %r1735;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7259, %r7259, %r1749;
	setp.lt.s32 	%p29, %r7259, %r1734;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd90, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd90;
	ld.param.u64 	%rd91, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd91;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd92, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7267, %r7300;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1735;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7268, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1866, %r7268, 31;
	add.s32 	%r1867, %r7268, %r1866;
	shr.s32 	%r1868, %r1867, 1;
	mad.lo.s32 	%r1869, %r1868, %r1734, %r7267;
	shl.b32 	%r108, %r1869, 5;
	add.s32 	%r109, %r7268, -2;
	mul.lo.s32 	%r110, %r109, %r1734;
	add.s32 	%r1870, %r1735, %r109;
	mul.lo.s32 	%r111, %r1870, %r1734;
	add.s32 	%r1871, %r1870, %r1735;
	mul.lo.s32 	%r112, %r1871, %r1734;
	add.s32 	%r113, %r110, %r1734;
	add.s32 	%r114, %r7268, -1;
	add.s32 	%r1872, %r1735, %r114;
	mul.lo.s32 	%r115, %r1872, %r1734;
	add.s32 	%r1873, %r1872, %r1735;
	mul.lo.s32 	%r116, %r1873, %r1734;
	add.s32 	%r1874, %r1735, %r7268;
	mul.lo.s32 	%r117, %r1874, %r1734;
	add.s32 	%r1875, %r1874, %r1735;
	mul.lo.s32 	%r118, %r1875, %r1734;
	mul.lo.s32 	%r119, %r7268, %r1734;
	add.s32 	%r120, %r119, %r1734;
	add.s32 	%r121, %r7268, 1;
	add.s32 	%r1876, %r1735, %r121;
	mul.lo.s32 	%r122, %r1876, %r1734;
	add.s32 	%r1877, %r1876, %r1735;
	mul.lo.s32 	%r123, %r1877, %r1734;
	add.s32 	%r124, %r120, %r1734;
	add.s32 	%r125, %r7268, 2;
	add.s32 	%r1878, %r1735, %r125;
	mul.lo.s32 	%r126, %r1878, %r1734;
	add.s32 	%r1879, %r1878, %r1735;
	mul.lo.s32 	%r127, %r1879, %r1734;
	mov.u32 	%r7271, 0;
	mov.u64 	%rd558, %rd92;

$L__BB0_42:
	ld.global.nc.u32 	%r1880, [%rd558];
	cvt.rn.f64.s32 	%fd1, %r1880;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1880, %r7267;
	setp.lt.s32 	%p33, %r129, %r1734;
	or.b32  	%r1881, %r109, %r129;
	setp.gt.s32 	%p34, %r1881, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1735;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1884, %r110, %r129;
	mul.wide.s32 	%rd93, %r1884, 4;
	add.s64 	%rd94, %rd7, %rd93;
	ld.global.f32 	%f68, [%rd94];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7270, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1885, %r7271, %r108;
	mul.wide.s32 	%rd95, %r1885, 4;
	add.s64 	%rd96, %rd8, %rd95;
	st.global.u32 	[%rd96], %r7270;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1888, %r111, %r129;
	mul.wide.s32 	%rd97, %r1888, 4;
	add.s64 	%rd98, %rd7, %rd97;
	ld.global.f32 	%f73, [%rd98];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7272, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1889, %r7271, %r108;
	mul.wide.s32 	%rd99, %r1889, 4;
	add.s64 	%rd100, %rd8, %rd99;
	st.global.u32 	[%rd100], %r7272;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1892, %r112, %r129;
	mul.wide.s32 	%rd101, %r1892, 4;
	add.s64 	%rd102, %rd7, %rd101;
	ld.global.f32 	%f77, [%rd102];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7274, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1893, %r7271, %r108;
	mul.wide.s32 	%rd103, %r1893, 4;
	add.s64 	%rd104, %rd8, %rd103;
	st.global.u32 	[%rd104], %r7274;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_57:
	or.b32  	%r1894, %r114, %r129;
	setp.gt.s32 	%p40, %r1894, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7268, %r1735;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1897, %r113, %r129;
	mul.wide.s32 	%rd105, %r1897, 4;
	add.s64 	%rd106, %rd7, %rd105;
	ld.global.f32 	%f80, [%rd106];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7276, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1898, %r7271, %r108;
	mul.wide.s32 	%rd107, %r1898, 4;
	add.s64 	%rd108, %rd8, %rd107;
	st.global.u32 	[%rd108], %r7276;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1901, %r115, %r129;
	mul.wide.s32 	%rd109, %r1901, 4;
	add.s64 	%rd110, %rd7, %rd109;
	ld.global.f32 	%f83, [%rd110];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7278, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1902, %r7271, %r108;
	mul.wide.s32 	%rd111, %r1902, 4;
	add.s64 	%rd112, %rd8, %rd111;
	st.global.u32 	[%rd112], %r7278;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1905, %r116, %r129;
	mul.wide.s32 	%rd113, %r1905, 4;
	add.s64 	%rd114, %rd7, %rd113;
	ld.global.f32 	%f86, [%rd114];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7280, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1906, %r7271, %r108;
	mul.wide.s32 	%rd115, %r1906, 4;
	add.s64 	%rd116, %rd8, %rd115;
	st.global.u32 	[%rd116], %r7280;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_72:
	or.b32  	%r1907, %r7268, %r129;
	setp.gt.s32 	%p47, %r1907, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7268, %r1735;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1910, %r119, %r129;
	mul.wide.s32 	%rd117, %r1910, 4;
	add.s64 	%rd118, %rd7, %rd117;
	ld.global.f32 	%f89, [%rd118];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7282, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1911, %r7271, %r108;
	mul.wide.s32 	%rd119, %r1911, 4;
	add.s64 	%rd120, %rd8, %rd119;
	st.global.u32 	[%rd120], %r7282;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1914, %r117, %r129;
	mul.wide.s32 	%rd121, %r1914, 4;
	add.s64 	%rd122, %rd7, %rd121;
	ld.global.f32 	%f93, [%rd122];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7284, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1915, %r7271, %r108;
	mul.wide.s32 	%rd123, %r1915, 4;
	add.s64 	%rd124, %rd8, %rd123;
	st.global.u32 	[%rd124], %r7284;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1918, %r118, %r129;
	mul.wide.s32 	%rd125, %r1918, 4;
	add.s64 	%rd126, %rd7, %rd125;
	ld.global.f32 	%f96, [%rd126];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7286, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1919, %r7271, %r108;
	mul.wide.s32 	%rd127, %r1919, 4;
	add.s64 	%rd128, %rd8, %rd127;
	st.global.u32 	[%rd128], %r7286;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_87:
	or.b32  	%r1920, %r121, %r129;
	setp.gt.s32 	%p54, %r1920, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1735;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1923, %r120, %r129;
	mul.wide.s32 	%rd129, %r1923, 4;
	add.s64 	%rd130, %rd7, %rd129;
	ld.global.f32 	%f99, [%rd130];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7288, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1924, %r7271, %r108;
	mul.wide.s32 	%rd131, %r1924, 4;
	add.s64 	%rd132, %rd8, %rd131;
	st.global.u32 	[%rd132], %r7288;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1927, %r122, %r129;
	mul.wide.s32 	%rd133, %r1927, 4;
	add.s64 	%rd134, %rd7, %rd133;
	ld.global.f32 	%f102, [%rd134];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7290, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1928, %r7271, %r108;
	mul.wide.s32 	%rd135, %r1928, 4;
	add.s64 	%rd136, %rd8, %rd135;
	st.global.u32 	[%rd136], %r7290;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1931, %r123, %r129;
	mul.wide.s32 	%rd137, %r1931, 4;
	add.s64 	%rd138, %rd7, %rd137;
	ld.global.f32 	%f105, [%rd138];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7292, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1932, %r7271, %r108;
	mul.wide.s32 	%rd139, %r1932, 4;
	add.s64 	%rd140, %rd8, %rd139;
	st.global.u32 	[%rd140], %r7292;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_102:
	or.b32  	%r1933, %r125, %r129;
	setp.gt.s32 	%p61, %r1933, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1735;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1936, %r124, %r129;
	mul.wide.s32 	%rd141, %r1936, 4;
	add.s64 	%rd142, %rd7, %rd141;
	ld.global.f32 	%f108, [%rd142];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7294, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1937, %r7271, %r108;
	mul.wide.s32 	%rd143, %r1937, 4;
	add.s64 	%rd144, %rd8, %rd143;
	st.global.u32 	[%rd144], %r7294;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1940, %r126, %r129;
	mul.wide.s32 	%rd145, %r1940, 4;
	add.s64 	%rd146, %rd7, %rd145;
	ld.global.f32 	%f111, [%rd146];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7296, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1941, %r7271, %r108;
	mul.wide.s32 	%rd147, %r1941, 4;
	add.s64 	%rd148, %rd8, %rd147;
	st.global.u32 	[%rd148], %r7296;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1944, %r127, %r129;
	mul.wide.s32 	%rd149, %r1944, 4;
	add.s64 	%rd150, %rd7, %rd149;
	ld.global.f32 	%f114, [%rd150];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7298, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1945, %r7271, %r108;
	mul.wide.s32 	%rd151, %r1945, 4;
	add.s64 	%rd152, %rd8, %rd151;
	st.global.u32 	[%rd152], %r7298;
	add.s32 	%r7271, %r7271, 1;

$L__BB0_117:
	add.s64 	%rd558, %rd558, 4;
	mov.u64 	%rd153, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd154, %rd153, 24;
	setp.ne.s64 	%p68, %rd558, %rd154;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7268, %r7268, %r30;
	setp.lt.s32 	%p69, %r7268, %r1735;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7267, %r7267, %r1749;
	setp.lt.s32 	%p70, %r7267, %r1734;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1738, 1;
	ld.param.u64 	%rd155, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd155;
	ld.param.u64 	%rd156, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd156;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1991, %r1739, 31;
	add.s32 	%r1992, %r1739, %r1991;
	bfe.u32 	%r233, %r1992, 1, 1;
	mov.u64 	%rd176, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1735;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7306, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1994, %r7306, 31;
	add.s32 	%r1995, %r7306, %r1994;
	shr.s32 	%r1996, %r1995, 1;
	mad.lo.s32 	%r1997, %r1996, %r1734, %r7300;
	shl.b32 	%r237, %r1997, 5;
	add.s32 	%r238, %r7306, -2;
	mul.lo.s32 	%r239, %r238, %r1734;
	add.s32 	%r1998, %r1735, %r238;
	mul.lo.s32 	%r240, %r1998, %r1734;
	add.s32 	%r241, %r239, %r1734;
	add.s32 	%r242, %r7306, -1;
	add.s32 	%r1999, %r1735, %r242;
	mul.lo.s32 	%r243, %r1999, %r1734;
	add.s32 	%r2000, %r1735, %r7306;
	mul.lo.s32 	%r244, %r2000, %r1734;
	mul.lo.s32 	%r245, %r7306, %r1734;
	add.s32 	%r246, %r245, %r1734;
	add.s32 	%r247, %r7306, 1;
	add.s32 	%r2001, %r1735, %r247;
	mul.lo.s32 	%r248, %r2001, %r1734;
	add.s32 	%r249, %r246, %r1734;
	add.s32 	%r250, %r7306, 2;
	add.s32 	%r2002, %r1735, %r250;
	mul.lo.s32 	%r251, %r2002, %r1734;
	mov.u32 	%r7310, 0;
	mov.u64 	%rd559, 24;
	mov.u64 	%rd560, %rd176;

$L__BB0_144:
	ld.global.nc.u32 	%r2003, [%rd560];
	cvt.rn.f64.s32 	%fd2, %r2003;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r2003, %r7300;
	setp.lt.s32 	%p83, %r253, %r1734;
	or.b32  	%r2004, %r238, %r253;
	setp.gt.s32 	%p84, %r2004, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1735;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r2006, %r239, %r253;
	shl.b32 	%r2007, %r2006, 1;
	mul.wide.s32 	%rd177, %r2007, 4;
	add.s64 	%rd178, %rd11, %rd177;
	ld.global.f32 	%f10, [%rd178];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7308, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7308, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7310, %r237;
	mul.wide.s32 	%rd179, %r258, 4;
	add.s64 	%rd180, %rd12, %rd179;
	st.global.u32 	[%rd180], %r7308;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r2011, %r240, %r253;
	shl.b32 	%r2012, %r2011, 1;
	mul.wide.s32 	%rd181, %r2012, 4;
	add.s64 	%rd182, %rd11, %rd181;
	ld.global.f32 	%f11, [%rd182];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7309, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7309, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r2015, %r258, 1;
	mul.wide.s32 	%rd183, %r2015, 4;
	add.s64 	%rd184, %rd12, %rd183;
	st.global.u32 	[%rd184], %r7309;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r2017, %r239, %r253;
	shl.b32 	%r2018, %r2017, 1;
	or.b32  	%r2019, %r2018, 1;
	mul.wide.s32 	%rd185, %r2019, 4;
	add.s64 	%rd186, %rd11, %rd185;
	ld.global.f32 	%f14, [%rd186];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7311, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7311, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7310, %r237;
	mul.wide.s32 	%rd187, %r269, 4;
	add.s64 	%rd188, %rd12, %rd187;
	st.global.u32 	[%rd188], %r7311;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r2023, %r240, %r253;
	shl.b32 	%r2024, %r2023, 1;
	or.b32  	%r2025, %r2024, 1;
	mul.wide.s32 	%rd189, %r2025, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f15, [%rd190];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7312, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7312, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r2028, %r269, 1;
	mul.wide.s32 	%rd191, %r2028, 4;
	add.s64 	%rd192, %rd12, %rd191;
	st.global.u32 	[%rd192], %r7312;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_168:
	or.b32  	%r2029, %r242, %r253;
	setp.gt.s32 	%p93, %r2029, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7306, %r1735;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r2031, %r241, %r253;
	shl.b32 	%r2032, %r2031, 1;
	mul.wide.s32 	%rd193, %r2032, 4;
	add.s64 	%rd194, %rd11, %rd193;
	ld.global.f32 	%f17, [%rd194];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7314, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7314, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7310, %r237;
	mul.wide.s32 	%rd195, %r280, 4;
	add.s64 	%rd196, %rd12, %rd195;
	st.global.u32 	[%rd196], %r7314;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r2036, %r243, %r253;
	shl.b32 	%r2037, %r2036, 1;
	mul.wide.s32 	%rd197, %r2037, 4;
	add.s64 	%rd198, %rd11, %rd197;
	ld.global.f32 	%f18, [%rd198];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7315, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7315, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r2040, %r280, 1;
	mul.wide.s32 	%rd199, %r2040, 4;
	add.s64 	%rd200, %rd12, %rd199;
	st.global.u32 	[%rd200], %r7315;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r2042, %r241, %r253;
	shl.b32 	%r2043, %r2042, 1;
	or.b32  	%r2044, %r2043, 1;
	mul.wide.s32 	%rd201, %r2044, 4;
	add.s64 	%rd202, %rd11, %rd201;
	ld.global.f32 	%f20, [%rd202];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7317, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7317, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7310, %r237;
	mul.wide.s32 	%rd203, %r291, 4;
	add.s64 	%rd204, %rd12, %rd203;
	st.global.u32 	[%rd204], %r7317;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2048, %r243, %r253;
	shl.b32 	%r2049, %r2048, 1;
	or.b32  	%r2050, %r2049, 1;
	mul.wide.s32 	%rd205, %r2050, 4;
	add.s64 	%rd206, %rd11, %rd205;
	ld.global.f32 	%f21, [%rd206];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7318, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7318, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2053, %r291, 1;
	mul.wide.s32 	%rd207, %r2053, 4;
	add.s64 	%rd208, %rd12, %rd207;
	st.global.u32 	[%rd208], %r7318;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_192:
	or.b32  	%r2054, %r7306, %r253;
	setp.gt.s32 	%p103, %r2054, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7306, %r1735;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2056, %r245, %r253;
	shl.b32 	%r2057, %r2056, 1;
	mul.wide.s32 	%rd209, %r2057, 4;
	add.s64 	%rd210, %rd11, %rd209;
	ld.global.f32 	%f23, [%rd210];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7320, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7320, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7310, %r237;
	mul.wide.s32 	%rd211, %r302, 4;
	add.s64 	%rd212, %rd12, %rd211;
	st.global.u32 	[%rd212], %r7320;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2061, %r244, %r253;
	shl.b32 	%r2062, %r2061, 1;
	mul.wide.s32 	%rd213, %r2062, 4;
	add.s64 	%rd214, %rd11, %rd213;
	ld.global.f32 	%f24, [%rd214];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7321, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7321, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7321, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2065, %r302, 1;
	mul.wide.s32 	%rd215, %r2065, 4;
	add.s64 	%rd216, %rd12, %rd215;
	st.global.u32 	[%rd216], %r7321;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2067, %r245, %r253;
	shl.b32 	%r2068, %r2067, 1;
	or.b32  	%r2069, %r2068, 1;
	mul.wide.s32 	%rd217, %r2069, 4;
	add.s64 	%rd218, %rd11, %rd217;
	ld.global.f32 	%f25, [%rd218];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7323, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7323, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7310, %r237;
	mul.wide.s32 	%rd219, %r313, 4;
	add.s64 	%rd220, %rd12, %rd219;
	st.global.u32 	[%rd220], %r7323;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2073, %r244, %r253;
	shl.b32 	%r2074, %r2073, 1;
	or.b32  	%r2075, %r2074, 1;
	mul.wide.s32 	%rd221, %r2075, 4;
	add.s64 	%rd222, %rd11, %rd221;
	ld.global.f32 	%f26, [%rd222];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7324, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7324, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2078, %r313, 1;
	mul.wide.s32 	%rd223, %r2078, 4;
	add.s64 	%rd224, %rd12, %rd223;
	st.global.u32 	[%rd224], %r7324;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_216:
	or.b32  	%r2079, %r247, %r253;
	setp.gt.s32 	%p113, %r2079, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1735;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2081, %r246, %r253;
	shl.b32 	%r2082, %r2081, 1;
	mul.wide.s32 	%rd225, %r2082, 4;
	add.s64 	%rd226, %rd11, %rd225;
	ld.global.f32 	%f27, [%rd226];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7326, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7326, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7310, %r237;
	mul.wide.s32 	%rd227, %r324, 4;
	add.s64 	%rd228, %rd12, %rd227;
	st.global.u32 	[%rd228], %r7326;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2086, %r248, %r253;
	shl.b32 	%r2087, %r2086, 1;
	mul.wide.s32 	%rd229, %r2087, 4;
	add.s64 	%rd230, %rd11, %rd229;
	ld.global.f32 	%f28, [%rd230];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7327, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7327, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2090, %r324, 1;
	mul.wide.s32 	%rd231, %r2090, 4;
	add.s64 	%rd232, %rd12, %rd231;
	st.global.u32 	[%rd232], %r7327;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2092, %r246, %r253;
	shl.b32 	%r2093, %r2092, 1;
	or.b32  	%r2094, %r2093, 1;
	mul.wide.s32 	%rd233, %r2094, 4;
	add.s64 	%rd234, %rd11, %rd233;
	ld.global.f32 	%f29, [%rd234];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7329, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7329, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7310, %r237;
	mul.wide.s32 	%rd235, %r335, 4;
	add.s64 	%rd236, %rd12, %rd235;
	st.global.u32 	[%rd236], %r7329;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2098, %r248, %r253;
	shl.b32 	%r2099, %r2098, 1;
	or.b32  	%r2100, %r2099, 1;
	mul.wide.s32 	%rd237, %r2100, 4;
	add.s64 	%rd238, %rd11, %rd237;
	ld.global.f32 	%f30, [%rd238];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7330, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7330, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2103, %r335, 1;
	mul.wide.s32 	%rd239, %r2103, 4;
	add.s64 	%rd240, %rd12, %rd239;
	st.global.u32 	[%rd240], %r7330;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_240:
	or.b32  	%r2104, %r250, %r253;
	setp.gt.s32 	%p123, %r2104, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1735;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2106, %r249, %r253;
	shl.b32 	%r2107, %r2106, 1;
	mul.wide.s32 	%rd241, %r2107, 4;
	add.s64 	%rd242, %rd11, %rd241;
	ld.global.f32 	%f31, [%rd242];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7332, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7332, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7310, %r237;
	mul.wide.s32 	%rd243, %r346, 4;
	add.s64 	%rd244, %rd12, %rd243;
	st.global.u32 	[%rd244], %r7332;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2111, %r251, %r253;
	shl.b32 	%r2112, %r2111, 1;
	mul.wide.s32 	%rd245, %r2112, 4;
	add.s64 	%rd246, %rd11, %rd245;
	ld.global.f32 	%f32, [%rd246];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7333, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7333, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2115, %r346, 1;
	mul.wide.s32 	%rd247, %r2115, 4;
	add.s64 	%rd248, %rd12, %rd247;
	st.global.u32 	[%rd248], %r7333;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2117, %r249, %r253;
	shl.b32 	%r2118, %r2117, 1;
	or.b32  	%r2119, %r2118, 1;
	mul.wide.s32 	%rd249, %r2119, 4;
	add.s64 	%rd250, %rd11, %rd249;
	ld.global.f32 	%f33, [%rd250];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7335, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7335, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7310, %r237;
	mul.wide.s32 	%rd251, %r357, 4;
	add.s64 	%rd252, %rd12, %rd251;
	st.global.u32 	[%rd252], %r7335;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2123, %r251, %r253;
	shl.b32 	%r2124, %r2123, 1;
	or.b32  	%r2125, %r2124, 1;
	mul.wide.s32 	%rd253, %r2125, 4;
	add.s64 	%rd254, %rd11, %rd253;
	ld.global.f32 	%f34, [%rd254];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7336, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7336, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7336, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2128, %r357, 1;
	mul.wide.s32 	%rd255, %r2128, 4;
	add.s64 	%rd256, %rd12, %rd255;
	st.global.u32 	[%rd256], %r7336;
	add.s32 	%r7310, %r7310, 2;

$L__BB0_264:
	add.s64 	%rd560, %rd560, 4;
	add.s64 	%rd559, %rd559, -4;
	setp.ne.s64 	%p133, %rd559, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7306, %r7306, %r30;
	setp.lt.s32 	%p134, %r7306, %r1735;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7300, %r7300, %r1749;
	setp.lt.s32 	%p135, %r7300, %r1734;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1946, 31;
	sub.s32 	%r1947, %r1946, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1948, %r28, %r1947, %p73;
	shl.b32 	%r1949, %r1948, 2;
	mov.u32 	%r1950, 2;
	sub.s32 	%r208, %r1949, %r1737;
	sub.s32 	%r1951, %r1950, %r1737;
	add.s32 	%r209, %r1951, %r1949;
	add.s32 	%r210, %r1734, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1976, %r211, %r40;
	add.s32 	%r1977, %r1976, %r40;
	rem.s32 	%r223, %r1977, %r40;
	rem.s32 	%r1978, %r212, %r40;
	add.s32 	%r1979, %r1978, %r40;
	rem.s32 	%r224, %r1979, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7300, 1;
	rem.s32 	%r1952, %r208, %r40;
	add.s32 	%r1953, %r1952, %r40;
	rem.s32 	%r215, %r1953, %r40;
	rem.s32 	%r1954, %r209, %r40;
	add.s32 	%r1955, %r1954, %r40;
	rem.s32 	%r216, %r1955, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1958, %r214, %r40;
	add.s32 	%r1959, %r1958, %r215;
	mul.wide.s32 	%rd157, %r1959, 4;
	add.s64 	%rd158, %rd11, %rd157;
	ld.global.f32 	%f117, [%rd158];
	add.s32 	%r1960, %r1958, %r216;
	mul.wide.s32 	%rd159, %r1960, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f118, [%rd160];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1961, %r7300, 5;
	add.s32 	%r1962, %r1961, %r28;
	shl.b32 	%r1963, %r1962, 2;
	mul.wide.s32 	%rd161, %r1963, 4;
	add.s64 	%rd13, %rd12, %rd161;
	st.global.u32 	[%rd13], %r7301;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1966, %r214, 1;
	mul.lo.s32 	%r1967, %r1966, %r40;
	add.s32 	%r1968, %r1967, %r215;
	mul.wide.s32 	%rd162, %r1968, 4;
	add.s64 	%rd163, %rd11, %rd162;
	ld.global.f32 	%f121, [%rd163];
	add.s32 	%r1969, %r1967, %r216;
	mul.wide.s32 	%rd164, %r1969, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f122, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1970, %r210, %r7300;
	rem.s32 	%r1971, %r1970, %r1734;
	shl.b32 	%r1972, %r1971, 5;
	add.s32 	%r1973, %r1972, %r28;
	shl.b32 	%r1974, %r1973, 2;
	or.b32  	%r1975, %r1974, 2;
	mul.wide.s32 	%rd166, %r1975, 4;
	add.s64 	%rd14, %rd12, %rd166;
	st.global.u32 	[%rd14], %r7302;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1982, %r214, %r40;
	add.s32 	%r1983, %r1982, %r223;
	mul.wide.s32 	%rd167, %r1983, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f125, [%rd168];
	add.s32 	%r1984, %r1982, %r224;
	mul.wide.s32 	%rd169, %r1984, 4;
	add.s64 	%rd170, %rd11, %rd169;
	ld.global.f32 	%f126, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7303;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1987, %r214, 1;
	mul.lo.s32 	%r1988, %r1987, %r40;
	add.s32 	%r1989, %r1988, %r223;
	mul.wide.s32 	%rd171, %r1989, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f129, [%rd172];
	add.s32 	%r1990, %r1988, %r224;
	mul.wide.s32 	%rd173, %r1990, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f130, [%rd174];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7304;

$L__BB0_137:
	add.s32 	%r7300, %r7300, %r1749;
	setp.lt.s32 	%p79, %r7300, %r1734;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2130, %r1729, -1;
	mad.lo.s32 	%r2131, %r1730, 576, 128;
	mul.lo.s32 	%r2132, %r2131, %r2130;
	add.s32 	%r2133, %r52, -64;
	add.s32 	%r2134, %r2133, %r52;
	add.s32 	%r2135, %r1730, -1;
	mad.lo.s32 	%r2136, %r2134, %r2135, %r2132;
	mul.lo.s32 	%r2137, %r2130, %r1730;
	mul.lo.s32 	%r2138, %r2137, 320;
	mad.lo.s32 	%r2139, %r2133, %r2135, %r2138;
	add.s32 	%r366, %r2139, %r2136;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7340, 0;
	mov.u32 	%r7338, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7338], %r7515;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2142, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7338+4], %r2142;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2143, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7338+8], %r2143;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2144, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7338+12], %r2144;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7515, {low,high};}

	// end inline asm
	add.s32 	%r7338, %r7338, 16;
	add.s32 	%r7340, %r7340, 4;
	setp.lt.s32 	%p137, %r7340, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7516, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2147, {low,high};}

	// end inline asm
	ld.param.u64 	%rd257, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd257;
	mov.u32 	%r2148, 31;
	sub.s32 	%r2149, %r2148, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2150, %r28, %r2149, %p138;
	shl.b32 	%r2151, %r2150, 2;
	sub.s32 	%r377, %r2151, %r1737;
	rem.s32 	%r2152, %r377, %r40;
	add.s32 	%r2153, %r2152, %r40;
	rem.s32 	%r378, %r2153, %r40;
	add.s32 	%r2154, %r377, 2;
	rem.s32 	%r2155, %r2154, %r40;
	add.s32 	%r2156, %r2155, %r40;
	rem.s32 	%r379, %r2156, %r40;
	mul.lo.s32 	%r2157, %r378, 6;
	mul.lo.s32 	%r2158, %r379, 6;
	mul.wide.s32 	%rd258, %r2157, 4;
	add.s64 	%rd20, %rd19, %rd258;
	mul.wide.s32 	%rd259, %r2158, 4;
	add.s64 	%rd21, %rd19, %rd259;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7342, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7342, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7343, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7343, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7344, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7344, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7345, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7345, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2167, %r377, 1;
	rem.s32 	%r2168, %r2167, %r40;
	add.s32 	%r2169, %r2168, %r40;
	rem.s32 	%r392, %r2169, %r40;
	add.s32 	%r2170, %r377, 3;
	rem.s32 	%r2171, %r2170, %r40;
	add.s32 	%r2172, %r2171, %r40;
	rem.s32 	%r393, %r2172, %r40;
	mul.lo.s32 	%r2173, %r392, 6;
	mul.lo.s32 	%r2174, %r393, 6;
	mul.wide.s32 	%rd260, %r2173, 4;
	add.s64 	%rd22, %rd19, %rd260;
	mul.wide.s32 	%rd261, %r2174, 4;
	add.s64 	%rd23, %rd19, %rd261;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7346, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7346, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7347, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7347, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7348, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7348, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7349, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7349, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2183, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd262, %r2183;
	// begin inline asm
	mov.u32 %r2184, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2184;
	bfi.b64 	%rd24, %rd263, %rd262, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	mov.u32 	%r2185, %nctaid.x;
	mov.u32 	%r2186, %nctaid.y;
	mul.lo.s32 	%r2187, %r2185, %r2186;
	mov.u32 	%r2188, %nctaid.z;
	mul.lo.s32 	%r406, %r2187, %r2188;
	neg.s32 	%r2189, %r24;
	add.s32 	%r2190, %r28, %r23;
	setp.ne.s32 	%p148, %r2190, %r2189;
	mov.u32 	%r2191, %ctaid.x;
	add.s32 	%r407, %r2191, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2192, -2147483647;
	sub.s32 	%r2193, %r2192, %r406;
	selp.b32 	%r2194, %r2193, 1, %p149;
	membar.gl;
	add.s64 	%rd264, %rd24, 4;
	atom.add.u32 	%r409, [%rd264], %r2194;

$L__BB0_298:
	ld.volatile.u32 	%r2195, [%rd24+4];
	xor.b32  	%r2196, %r2195, %r409;
	setp.gt.s32 	%p150, %r2196, -1;
	@%p150 bra 	$L__BB0_298;

	membar.gl;

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_736;

	shr.s32 	%r2210, %r1739, 31;
	shr.u32 	%r2211, %r2210, 30;
	add.s32 	%r2212, %r1739, %r2211;
	shr.s32 	%r410, %r2212, 2;
	add.s32 	%r2213, %r28, 24;
	mul.hi.s32 	%r2214, %r2213, 1374389535;
	shr.u32 	%r2215, %r2214, 31;
	shr.s32 	%r2216, %r2214, 3;
	add.s32 	%r2217, %r2216, %r2215;
	mul.lo.s32 	%r2218, %r2217, 25;
	sub.s32 	%r2219, %r2213, %r2218;
	add.s32 	%r2220, %r28, 26;
	mul.hi.s32 	%r2221, %r2220, 1374389535;
	shr.u32 	%r2222, %r2221, 31;
	shr.s32 	%r2223, %r2221, 3;
	add.s32 	%r2224, %r2223, %r2222;
	mul.lo.s32 	%r2225, %r2224, 25;
	sub.s32 	%r2226, %r2220, %r2225;
	shr.u32 	%r2227, %r1739, 31;
	add.s32 	%r2228, %r1739, %r2227;
	and.b32  	%r2229, %r2228, -2;
	sub.s32 	%r411, %r1739, %r2229;
	setp.lt.s32 	%p152, %r28, 25;
	selp.b32 	%r412, %r2219, %r28, %p152;
	selp.b32 	%r413, %r2226, %r28, %p152;
	mov.u32 	%r2209, 0;
	// begin inline asm
	{mov.u32 %r2230, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2556, %r2230, 8;
	add.s32 	%r2557, %r2556, -8192;
	or.b32  	%r2234, %r2557, 31;
	mul.wide.s32 	%rd273, %r28, 16;
	mul.wide.s32 	%rd275, %r28, 8;
	mov.u32 	%r7627, %r2147;
	mov.u32 	%r7657, %r2147;
	mov.u32 	%r7628, %r2147;
	mov.u32 	%r7658, %r2147;
	mov.u32 	%r7629, %r2147;
	mov.u32 	%r7355, %r2147;
	mov.u32 	%r7356, %r2147;
	mov.u32 	%r7670, %r2147;
	mov.u32 	%r7659, %r2147;
	mov.u32 	%r7660, %r2147;
	mov.u32 	%r7630, %r2147;
	mov.u32 	%r7631, %r2147;
	mov.u32 	%r7632, %r2147;
	mov.u32 	%r7363, %r2147;
	mov.u32 	%r7364, %r2147;
	mov.u32 	%r7669, %r2147;
	mov.u32 	%r7661, %r2147;
	mov.u32 	%r7662, %r2147;
	mov.u32 	%r7639, %r2147;
	mov.u32 	%r7369, %r2147;
	mov.u32 	%r7370, %r2147;
	mov.u32 	%r7371, %r2147;
	mov.u32 	%r7680, %r2147;
	mov.u32 	%r7666, %r2147;
	mov.u32 	%r7671, %r2147;
	mov.u32 	%r7640, %r2147;
	mov.u32 	%r7376, %r2147;
	mov.u32 	%r7377, %r2147;
	mov.u32 	%r7378, %r2147;
	mov.u32 	%r7674, %r2147;
	mov.u32 	%r7663, %r2147;
	mov.u32 	%r7672, %r2147;
	mov.u32 	%r7641, %r2147;
	mov.u32 	%r7642, %r2147;
	mov.u32 	%r7384, %r2147;
	mov.u32 	%r7675, %r2147;
	mov.u32 	%r7676, %r2147;
	mov.u32 	%r7387, %r2147;
	mov.u32 	%r7643, %r2147;
	mov.u32 	%r7644, %r2147;
	mov.u32 	%r7645, %r2147;
	mov.u32 	%r7391, %r2147;
	mov.u32 	%r7677, %r2147;
	mov.u32 	%r7678, %r2147;
	mov.u32 	%r7646, %r2147;
	mov.u32 	%r7647, %r2147;
	mov.u32 	%r7648, %r2147;
	mov.u32 	%r7633, %r2147;
	mov.u32 	%r7398, %r2147;
	mov.u32 	%r7664, %r2147;
	mov.u32 	%r7665, %r2147;
	mov.u32 	%r7634, %r2147;
	mov.u32 	%r7402, %r2147;
	mov.u32 	%r7667, %r2147;
	mov.u32 	%r7668, %r2147;
	mov.u32 	%r7697, %r2147;
	mov.u32 	%r7406, %r2147;
	mov.u32 	%r7407, %r2147;
	mov.u32 	%r7408, %r2147;
	mov.u32 	%r7553, %r2147;
	mov.u32 	%r7698, %r2147;
	mov.u32 	%r7411, %r2147;
	mov.u32 	%r7412, %r2147;
	mov.u32 	%r7413, %r2147;
	mov.u32 	%r7554, %r2147;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7417, %r2147;
	mov.u32 	%r7418, %r2147;
	mov.u32 	%r7419, %r2147;
	mov.u32 	%r7555, %r2147;
	mov.u32 	%r7421, %r2147;
	mov.u32 	%r7701, %r2147;
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7424, %r2147;
	mov.u32 	%r7425, %r2147;
	mov.u32 	%r7426, %r2147;
	mov.u32 	%r7557, %r2147;
	mov.u32 	%r7428, %r2147;
	mov.u32 	%r7429, %r2147;
	mov.u32 	%r7430, %r2147;
	mov.u32 	%r7431, %r2147;
	mov.u32 	%r7681, %r2147;
	mov.u32 	%r7433, %r2147;
	mov.u32 	%r7434, %r2147;
	mov.u32 	%r7435, %r2147;
	mov.u32 	%r7436, %r2147;
	mov.u32 	%r7682, %r2147;
	mov.u32 	%r7649, %r2147;
	mov.u32 	%r7650, %r2147;
	mov.u32 	%r7651, %r2147;
	mov.u32 	%r7652, %r2147;
	mov.u32 	%r7442, %r2147;
	mov.u32 	%r7443, %r2147;
	mov.u32 	%r7706, %r2147;
	mov.u32 	%r7445, %r2147;
	mov.u32 	%r7446, %r2147;
	mov.u32 	%r7561, %r2147;
	mov.u32 	%r7448, %r2147;
	mov.u32 	%r7449, %r2147;
	mov.u32 	%r7450, %r2147;
	mov.u32 	%r7451, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7453, %r2147;
	mov.u32 	%r7454, %r2147;
	mov.u32 	%r7564, %r2147;
	mov.u32 	%r7456, %r2147;
	mov.u32 	%r7457, %r2147;
	mov.u32 	%r7458, %r2147;
	mov.u32 	%r7459, %r2147;
	mov.u32 	%r7709, %r2147;
	mov.u32 	%r7461, %r2147;
	mov.u32 	%r7462, %r2147;
	mov.u32 	%r7463, %r2147;
	mov.u32 	%r7567, %r2147;
	mov.u32 	%r7465, %r2147;
	mov.u32 	%r7466, %r2147;
	mov.u32 	%r7467, %r2147;
	mov.u32 	%r7468, %r2147;
	mov.u32 	%r7710, %r2147;
	mov.u32 	%r7470, %r2147;
	mov.u32 	%r7471, %r2147;
	mov.u32 	%r7472, %r2147;
	mov.u32 	%r7570, %r2147;
	mov.u32 	%r7474, %r2147;
	mov.u32 	%r7475, %r2147;
	mov.u32 	%r7476, %r2147;
	mov.u32 	%r7477, %r2147;
	mov.u32 	%r7478, %r2147;
	mov.u32 	%r7479, %r2147;
	mov.u32 	%r7480, %r2147;
	mov.u32 	%r7481, %r2147;
	mov.u32 	%r7482, %r2147;
	mov.u32 	%r7483, %r2147;
	mov.u32 	%r7484, %r2147;
	mov.u32 	%r7485, %r2147;
	mov.u32 	%r7486, %r2147;
	mov.u32 	%r7487, %r2147;
	mov.u32 	%r7488, %r2147;
	mov.u32 	%r7489, %r2147;
	mov.u32 	%r7490, %r2147;
	mov.u32 	%r7491, %r2147;
	mov.u32 	%r7492, %r2147;
	mov.u32 	%r7493, %r2147;
	mov.u32 	%r7494, %r2147;
	mov.u32 	%r7495, %r2147;
	mov.u32 	%r7496, %r2209;
	mov.u32 	%r7497, %r2209;
	mov.u32 	%r7498, %r2209;
	mov.u32 	%r7499, %r2209;
	mov.u32 	%r7500, %r2209;
	mov.u32 	%r7501, %r2209;
	mov.u32 	%r7502, %r2209;
	mov.u32 	%r7503, %r2209;
	mov.u32 	%r7504, %r2209;
	mov.u32 	%r7505, %r2209;
	mov.u32 	%r7506, %r2209;
	mov.u32 	%r7507, %r2209;
	mov.u32 	%r7635, %r2147;
	mov.u32 	%r7636, %r2147;
	mov.u32 	%r7637, %r2147;
	mov.u32 	%r7638, %r2147;
	mov.u32 	%r7653, %r2147;
	mov.u32 	%r7654, %r2147;
	mov.u32 	%r7514, %r2209;

$L__BB0_302:
	mov.u32 	%r551, %r7710;
	mov.u32 	%r550, %r7468;
	mov.u32 	%r542, %r7709;
	mov.u32 	%r541, %r7459;
	mov.u32 	%r534, %r7708;
	mov.u32 	%r526, %r7706;
	mov.u32 	%r7468, %r7702;
	mov.u32 	%r496, %r7701;
	mov.u32 	%r7459, %r7700;
	mov.u32 	%r488, %r7699;
	mov.u32 	%r481, %r7698;
	mov.u32 	%r474, %r7697;
	sub.s32 	%r7250, %r1734, %r30;
	mov.u32 	%r2245, 1;
	not.b32 	%r2519, %r25;
	mov.u32 	%r2511, -1;
	add.s32 	%r2520, %r1731, %r2519;
	mul.lo.s32 	%r2521, %r2520, %r1733;
	add.s32 	%r2522, %r7514, %r2521;
	not.b32 	%r2524, %r26;
	add.s32 	%r2525, %r1732, %r2524;
	mul.lo.s32 	%r2526, %r2525, %r1733;
	add.s32 	%r2527, %r7514, %r2526;
	add.s32 	%r2528, %r2521, %r2526;
	add.s32 	%r2529, %r2528, %r1734;
	not.b32 	%r2530, %r23;
	add.s32 	%r2531, %r1729, %r2530;
	mad.lo.s32 	%r2532, %r2520, %r1729, %r2531;
	not.b32 	%r2533, %r24;
	add.s32 	%r2534, %r1730, %r2533;
	mad.lo.s32 	%r2535, %r2525, %r1730, %r2534;
	add.s32 	%r2536, %r2532, %r2535;
	shl.b32 	%r2537, %r2536, 1;
	add.s32 	%r2538, %r2529, %r2537;
	add.s32 	%r2539, %r7514, %r2538;
	add.s32 	%r2540, %r7514, %r2528;
	div.s32 	%r2541, %r2539, %r1734;
	neg.s32 	%r2542, %r1734;
	sub.s32 	%r2545, %r30, %r1734;
	sub.s32 	%r2546, %r2532, %r2535;
	shl.b32 	%r2547, %r2546, 1;
	add.s32 	%r2548, %r2547, %r1735;
	mad.lo.s32 	%r2549, %r2541, %r30, %r2548;
	mad.lo.s32 	%r2550, %r2541, %r2545, %r2540;
	div.s32 	%r2551, %r2549, %r1735;
	mul.lo.s32 	%r2552, %r2551, %r1735;
	sub.s32 	%r2555, %r1750, %r1735;
	mov.u32 	%r2329, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2231,%r7516,%r2209,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2237, %r7343, %r2231, %p12;
	// begin inline asm
	{mul.f16x2 %r7600,%r2237,%r7495;
}
	// end inline asm
	selp.b32 	%r2240, %r7347, %r2231, %p12;
	// begin inline asm
	{mul.f16x2 %r7598,%r2240,%r7490;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2243,%r7516,%r2245,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2249, %r7343, %r2243, %p12;
	// begin inline asm
	{mul.f16x2 %r7599,%r2249,%r7494;
}
	// end inline asm
	selp.b32 	%r2252, %r7347, %r2243, %p12;
	// begin inline asm
	{mul.f16x2 %r7597,%r2252,%r7489;
}
	// end inline asm
	mov.u32 	%r2257, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2255,%r7516,%r2257,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2261, %r7343, %r2255, %p12;
	// begin inline asm
	{mul.f16x2 %r7596,%r2261,%r7485;
}
	// end inline asm
	selp.b32 	%r2264, %r7347, %r2255, %p12;
	// begin inline asm
	{mul.f16x2 %r7595,%r2264,%r7483;
}
	// end inline asm
	mov.u32 	%r2269, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2267,%r7516,%r2269,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2273, %r7343, %r2267, %p12;
	// begin inline asm
	{mul.f16x2 %r7594,%r2273,%r7682;
}
	// end inline asm
	selp.b32 	%r2276, %r7347, %r2267, %p12;
	// begin inline asm
	{mul.f16x2 %r7592,%r2276,%r7681;
}
	// end inline asm
	mov.u32 	%r2281, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2279,%r7516,%r2281,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2285, %r7343, %r2279, %p12;
	// begin inline asm
	{mul.f16x2 %r7593,%r2285,%r7481;
}
	// end inline asm
	selp.b32 	%r2288, %r7347, %r2279, %p12;
	// begin inline asm
	{mul.f16x2 %r7591,%r2288,%r7478;
}
	// end inline asm
	mov.u32 	%r2293, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2291,%r7516,%r2293,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2297, %r7343, %r2291, %p12;
	// begin inline asm
	{mul.f16x2 %r7590,%r2297,%r7475;
}
	// end inline asm
	selp.b32 	%r2300, %r7347, %r2291, %p12;
	// begin inline asm
	{mul.f16x2 %r7587,%r2300,%r7466;
}
	// end inline asm
	mov.u32 	%r2305, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2303,%r7516,%r2305,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2309, %r7343, %r2303, %p12;
	// begin inline asm
	{mul.f16x2 %r7589,%r2309,%r7474;
}
	// end inline asm
	selp.b32 	%r2312, %r7347, %r2303, %p12;
	// begin inline asm
	{mul.f16x2 %r7586,%r2312,%r7465;
}
	// end inline asm
	mov.u32 	%r2317, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2315,%r7516,%r2317,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2321, %r7343, %r2315, %p12;
	// begin inline asm
	{mul.f16x2 %r7588,%r2321,%r7570;
}
	// end inline asm
	selp.b32 	%r2324, %r7347, %r2315, %p12;
	// begin inline asm
	{mul.f16x2 %r7585,%r2324,%r7567;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2327,%r7516,%r2329,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2333, %r7343, %r2327, %p12;
	// begin inline asm
	{mul.f16x2 %r7584,%r2333,%r7457;
}
	// end inline asm
	selp.b32 	%r2336, %r7347, %r2327, %p12;
	// begin inline asm
	{mul.f16x2 %r7581,%r2336,%r7449;
}
	// end inline asm
	mov.u32 	%r2341, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2339,%r7516,%r2341,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2345, %r7343, %r2339, %p12;
	// begin inline asm
	{mul.f16x2 %r7583,%r2345,%r7456;
}
	// end inline asm
	selp.b32 	%r2348, %r7347, %r2339, %p12;
	// begin inline asm
	{mul.f16x2 %r7580,%r2348,%r7448;
}
	// end inline asm
	mov.u32 	%r2353, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2351,%r7516,%r2353,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2357, %r7343, %r2351, %p12;
	// begin inline asm
	{mul.f16x2 %r7582,%r2357,%r7564;
}
	// end inline asm
	selp.b32 	%r2360, %r7347, %r2351, %p12;
	// begin inline asm
	{mul.f16x2 %r7579,%r2360,%r7561;
}
	// end inline asm
	mov.u32 	%r2365, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2363,%r7516,%r2365,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2369, %r7343, %r2363, %p12;
	// begin inline asm
	{mul.f16x2 %r7578,%r2369,%r7668;
}
	// end inline asm
	selp.b32 	%r2372, %r7347, %r2363, %p12;
	// begin inline asm
	{mul.f16x2 %r7577,%r2372,%r7665;
}
	// end inline asm
	mov.u32 	%r2377, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2375,%r7516,%r2377,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2381, %r7343, %r2375, %p12;
	// begin inline asm
	{mul.f16x2 %r7576,%r2381,%r7678;
}
	// end inline asm
	selp.b32 	%r2384, %r7347, %r2375, %p12;
	// begin inline asm
	{mul.f16x2 %r7574,%r2384,%r7676;
}
	// end inline asm
	mov.u32 	%r2389, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2387,%r7516,%r2389,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2393, %r7343, %r2387, %p12;
	// begin inline asm
	{mul.f16x2 %r7575,%r2393,%r7677;
}
	// end inline asm
	selp.b32 	%r2396, %r7347, %r2387, %p12;
	// begin inline asm
	{mul.f16x2 %r7573,%r2396,%r7675;
}
	// end inline asm
	mov.u32 	%r2401, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2399,%r7516,%r2401,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2405, %r7343, %r2399, %p12;
	// begin inline asm
	{mul.f16x2 %r7572,%r2405,%r7672;
}
	// end inline asm
	selp.b32 	%r2408, %r7347, %r2399, %p12;
	// begin inline asm
	{mul.f16x2 %r7569,%r2408,%r7671;
}
	// end inline asm
	mov.u32 	%r2413, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2411,%r7516,%r2413,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2417, %r7343, %r2411, %p12;
	// begin inline asm
	{mul.f16x2 %r7571,%r2417,%r7428;
}
	// end inline asm
	selp.b32 	%r2420, %r7347, %r2411, %p12;
	// begin inline asm
	{mul.f16x2 %r7568,%r2420,%r7421;
}
	// end inline asm
	mov.u32 	%r2425, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2423,%r7516,%r2425,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2429, %r7343, %r2423, %p12;
	// begin inline asm
	{mul.f16x2 %r7570,%r2429,%r7557;
}
	// end inline asm
	selp.b32 	%r2432, %r7347, %r2423, %p12;
	// begin inline asm
	{mul.f16x2 %r7567,%r2432,%r7555;
}
	// end inline asm
	mov.u32 	%r2437, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2435,%r7516,%r2437,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2441, %r7343, %r2435, %p12;
	// begin inline asm
	{mul.f16x2 %r7566,%r2441,%r7662;
}
	// end inline asm
	selp.b32 	%r2444, %r7347, %r2435, %p12;
	// begin inline asm
	{mul.f16x2 %r7563,%r2444,%r7660;
}
	// end inline asm
	mov.u32 	%r2449, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2447,%r7516,%r2449,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2453, %r7343, %r2447, %p12;
	// begin inline asm
	{mul.f16x2 %r7565,%r2453,%r7661;
}
	// end inline asm
	selp.b32 	%r2456, %r7347, %r2447, %p12;
	// begin inline asm
	{mul.f16x2 %r7562,%r2456,%r7659;
}
	// end inline asm
	mov.u32 	%r2461, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2459,%r7516,%r2461,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2465, %r7343, %r2459, %p12;
	// begin inline asm
	{mul.f16x2 %r7564,%r2465,%r7554;
}
	// end inline asm
	selp.b32 	%r2468, %r7347, %r2459, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2468,%r7553;
}
	// end inline asm
	mov.u32 	%r2473, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2471,%r7516,%r2473,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2477, %r7343, %r2471, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2477,%r7657;
}
	// end inline asm
	selp.b32 	%r2480, %r7347, %r2471, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2480,%r7658;
}
	// end inline asm
	mov.u32 	%r2485, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2483,%r7516,%r2485,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2489, %r7343, %r2483, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2489,%r7663;
}
	// end inline asm
	selp.b32 	%r2492, %r7347, %r2483, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2492,%r7666;
}
	// end inline asm
	mov.u32 	%r2497, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2495,%r7516,%r2497,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2501, %r7343, %r2495, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2501,%r7674;
}
	// end inline asm
	selp.b32 	%r2504, %r7347, %r2495, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2504,%r7680;
}
	// end inline asm
	mov.u32 	%r2509, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2507,%r7516,%r2509,%r2234,%r2511;
}
	// end inline asm
	selp.b32 	%r2513, %r7343, %r2507, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2513,%r7669;
}
	// end inline asm
	selp.b32 	%r2516, %r7347, %r2507, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2516,%r7670;
}
	// end inline asm
	rem.s32 	%r651, %r2522, %r51;
	rem.s32 	%r652, %r2527, %r7250;
	mad.lo.s32 	%r653, %r2541, %r2542, %r2539;
	sub.s32 	%r654, %r2549, %r2552;
	mad.lo.s32 	%r655, %r2551, %r2555, %r2550;
	ld.param.u64 	%rd266, [%rd1+144];
	cvta.to.global.u64 	%rd267, %rd266;
	shl.b32 	%r2605, %r655, 1;
	mul.wide.s32 	%rd268, %r2605, 4;
	add.s64 	%rd25, %rd267, %rd268;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2808, %r1745, 1;
	setp.lt.s32 	%p160, %r655, %r2808;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r655, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7519, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7520, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2608, %r1745, 1;
	setp.lt.s32 	%p155, %r655, %r2608;
	setp.gt.s32 	%p156, %r655, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd25];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7517, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd25+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7518, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7519, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2816, 0;
	mov.u32 	%r2827, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2814,%r7515,%r2816,%r2234,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2819,%r7519,%r2814;
}
	// end inline asm
	mov.u32 	%r2825, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2823,%r7515,%r2825,%r2234,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r7520,%r2823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r2819,%r2828;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7521, %r7522;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7600,%r7600,%r7521;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r7522;
}
	// end inline asm
	mov.u32 	%r2849, 2;
	mov.u32 	%r2860, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2847,%r7515,%r2849,%r2234,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2852,%r7519,%r2847;
}
	// end inline asm
	mov.u32 	%r2858, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2856,%r7515,%r2858,%r2234,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2861,%r7520,%r2856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r2852,%r2861;
}
	// end inline asm
	mov.u32 	%r7523, %r7524;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7599,%r7599,%r7523;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7524, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7597,%r7597,%r7524;
}
	// end inline asm
	mov.u32 	%r2882, 4;
	mov.u32 	%r2893, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2880,%r7515,%r2882,%r2234,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2885,%r7519,%r2880;
}
	// end inline asm
	mov.u32 	%r2891, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2889,%r7515,%r2891,%r2234,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2894,%r7520,%r2889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r2885,%r2894;
}
	// end inline asm
	mov.u32 	%r7525, %r7526;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7525, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r7525;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7526, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7595,%r7595,%r7526;
}
	// end inline asm
	mov.u32 	%r2915, 6;
	mov.u32 	%r2926, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2913,%r7515,%r2915,%r2234,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2918,%r7519,%r2913;
}
	// end inline asm
	mov.u32 	%r2924, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7515,%r2924,%r2234,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7520,%r2922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r2918,%r2927;
}
	// end inline asm
	mov.u32 	%r7527, %r7528;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7527, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r7527;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7528, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r7528;
}
	// end inline asm
	mov.u32 	%r2948, 8;
	mov.u32 	%r2959, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2946,%r7515,%r2948,%r2234,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r7519,%r2946;
}
	// end inline asm
	mov.u32 	%r2957, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7515,%r2957,%r2234,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7520,%r2955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r2951,%r2960;
}
	// end inline asm
	mov.u32 	%r7529, %r7530;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7529, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7593,%r7593,%r7529;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7530, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7591,%r7591,%r7530;
}
	// end inline asm
	mov.u32 	%r2981, 10;
	mov.u32 	%r2992, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2979,%r7515,%r2981,%r2234,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2984,%r7519,%r2979;
}
	// end inline asm
	mov.u32 	%r2990, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7515,%r2990,%r2234,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7520,%r2988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r2984,%r2993;
}
	// end inline asm
	mov.u32 	%r7531, %r7532;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7531, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7590,%r7590,%r7531;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7532, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7587,%r7587,%r7532;
}
	// end inline asm
	mov.u32 	%r3014, 12;
	mov.u32 	%r3025, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3012,%r7515,%r3014,%r2234,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3017,%r7519,%r3012;
}
	// end inline asm
	mov.u32 	%r3023, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7515,%r3023,%r2234,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7520,%r3021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r3017,%r3026;
}
	// end inline asm
	mov.u32 	%r7533, %r7534;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7533, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7589,%r7589,%r7533;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7534, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7586,%r7586,%r7534;
}
	// end inline asm
	mov.u32 	%r3047, 14;
	mov.u32 	%r3058, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3045,%r7515,%r3047,%r2234,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3050,%r7519,%r3045;
}
	// end inline asm
	mov.u32 	%r3056, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7515,%r3056,%r2234,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7520,%r3054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r3050,%r3059;
}
	// end inline asm
	mov.u32 	%r7535, %r7536;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7535, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7584,%r7584,%r7535;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7536, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r7536;
}
	// end inline asm
	mov.u32 	%r3080, 16;
	mov.u32 	%r3091, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3078,%r7515,%r3080,%r2234,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3083,%r7519,%r3078;
}
	// end inline asm
	mov.u32 	%r3089, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7515,%r3089,%r2234,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7520,%r3087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r3083,%r3092;
}
	// end inline asm
	mov.u32 	%r7537, %r7538;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7537, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7583,%r7583,%r7537;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7538, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7580,%r7580,%r7538;
}
	// end inline asm
	mov.u32 	%r3113, 18;
	mov.u32 	%r3124, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3111,%r7515,%r3113,%r2234,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3116,%r7519,%r3111;
}
	// end inline asm
	mov.u32 	%r3122, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7515,%r3122,%r2234,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7520,%r3120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r3116,%r3125;
}
	// end inline asm
	mov.u32 	%r7539, %r7540;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7539, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r7539;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7540, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r7540;
}
	// end inline asm
	mov.u32 	%r3146, 20;
	mov.u32 	%r3157, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3144,%r7515,%r3146,%r2234,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3149,%r7519,%r3144;
}
	// end inline asm
	mov.u32 	%r3155, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7515,%r3155,%r2234,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7520,%r3153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r3149,%r3158;
}
	// end inline asm
	mov.u32 	%r7541, %r7542;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7541, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7576,%r7576,%r7541;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7542, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7574,%r7574,%r7542;
}
	// end inline asm
	mov.u32 	%r3179, 22;
	mov.u32 	%r3190, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3177,%r7515,%r3179,%r2234,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3182,%r7519,%r3177;
}
	// end inline asm
	mov.u32 	%r3188, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7515,%r3188,%r2234,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7520,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r3182,%r3191;
}
	// end inline asm
	mov.u32 	%r7543, %r7544;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7543, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r7543;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7544, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r7544;
}
	// end inline asm
	mov.u32 	%r3212, 24;
	mov.u32 	%r3223, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3210,%r7515,%r3212,%r2234,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3215,%r7519,%r3210;
}
	// end inline asm
	mov.u32 	%r3221, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7515,%r3221,%r2234,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7520,%r3219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r3215,%r3224;
}
	// end inline asm
	mov.u32 	%r7545, %r7546;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7545, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7571,%r7571,%r7545;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7546, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7568,%r7568,%r7546;
}
	// end inline asm
	mov.u32 	%r3245, 26;
	mov.u32 	%r3256, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3243,%r7515,%r3245,%r2234,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3248,%r7519,%r3243;
}
	// end inline asm
	mov.u32 	%r3254, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3252,%r7515,%r3254,%r2234,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7520,%r3252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r3248,%r3257;
}
	// end inline asm
	mov.u32 	%r7547, %r7548;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7547, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r7547;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7548, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r7548;
}
	// end inline asm
	mov.u32 	%r3278, 28;
	mov.u32 	%r3289, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3276,%r7515,%r3278,%r2234,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3281,%r7519,%r3276;
}
	// end inline asm
	mov.u32 	%r3287, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3285,%r7515,%r3287,%r2234,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3290,%r7520,%r3285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7550,%r3281,%r3290;
}
	// end inline asm
	mov.u32 	%r7549, %r7550;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7549, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7565,%r7565,%r7549;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7550, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7562,%r7562,%r7550;
}
	// end inline asm
	mov.u32 	%r3320, 31;
	mov.u32 	%r3311, 30;
	mov.u32 	%r3322, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3309,%r7515,%r3311,%r2234,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3314,%r7519,%r3309;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3318,%r7515,%r3320,%r2234,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3323,%r7520,%r3318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r3314,%r3323;
}
	// end inline asm
	mov.u32 	%r7551, %r7552;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7551, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r7551;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7552, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7552;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r654, %r1739;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2710,%r7517,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r7600,%r2710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2716,%r7517,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r7588,%r2716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2722,%r7517,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7590,%r7590,%r2722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2728,%r7517,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7570,%r7570,%r2728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2734,%r7517,%r7507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r7572,%r2734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2740,%r7517,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2746,%r7518,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r7594,%r2746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2752,%r7518,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r7575,%r2752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2758,%r7517,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r7598,%r2758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2764,%r7517,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7585,%r7585,%r2764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2770,%r7517,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r7587,%r2770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2776,%r7517,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7567,%r7567,%r2776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2782,%r7517,%r7506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r7569,%r2782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2788,%r7517,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2794,%r7518,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r7592,%r2794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2800,%r7518,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r7573,%r2800;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2613, %r1739, -2;
	setp.ne.s32 	%p159, %r654, %r2613;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2614,%r7517,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7578,%r7578,%r2614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2620,%r7517,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r2620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2626,%r7518,%r7499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r7596,%r2626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2632,%r7518,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7582,%r7582,%r2632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2638,%r7518,%r7503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7584,%r7584,%r2638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2644,%r7518,%r7501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r7564,%r2644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2650,%r7518,%r7507;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7566,%r7566,%r2650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2656,%r7518,%r7505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r2656;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2662,%r7517,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7577,%r7577,%r2662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2668,%r7517,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2674,%r7518,%r7498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r7595,%r2674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2680,%r7518,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r7579,%r2680;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2686,%r7518,%r7502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r7581,%r2686;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2692,%r7518,%r7500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2698,%r7518,%r7506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7563,%r7563,%r2698;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2704,%r7518,%r7504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2704;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7697, %r2147;
	mov.u32 	%r7698, %r2147;
	mov.u32 	%r7703, %r2147;
	mov.u32 	%r7704, %r2147;
	mov.u32 	%r7705, %r2147;
	mov.u32 	%r7706, %r2147;
	mov.u32 	%r7707, %r2147;
	mov.u32 	%r7708, %r2147;
	mov.u32 	%r7715, %r2147;
	mov.u32 	%r7716, %r2147;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3341, %r1730, 320;
	add.s32 	%r3342, %r23, -1;
	mul.lo.s32 	%r3343, %r24, 320;
	mad.lo.s32 	%r3344, %r3341, %r3342, %r3343;
	add.s32 	%r3347, %r1785, -64;
	mad.lo.s32 	%r3352, %r3347, %r2135, %r2132;
	add.s32 	%r3353, %r3344, %r3352;
	shl.b32 	%r3354, %r3353, 2;
	mov.u32 	%r3355, _ZN6kernel5shmemE;
	add.s32 	%r3356, %r3355, %r3354;
	shl.b32 	%r3357, %r28, 4;
	add.s32 	%r3358, %r3356, %r3357;
	ld.shared.v4.u32 	{%r7708, %r7706, %r7698, %r7697}, [%r3358];
	shl.b32 	%r3363, %r28, 3;
	add.s32 	%r3364, %r3356, %r3363;
	ld.shared.v2.u32 	{%r7707, %r7705}, [%r3364+512];
	ld.shared.v4.u32 	{%r7716, %r7715, %r7704, %r7703}, [%r3358+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7699, %r2147;
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7701, %r2147;
	mov.u32 	%r7702, %r2147;
	mov.u32 	%r7709, %r2147;
	mov.u32 	%r7710, %r2147;
	mov.u32 	%r7711, %r2147;
	mov.u32 	%r7712, %r2147;
	mov.u32 	%r7713, %r2147;
	mov.u32 	%r7714, %r2147;
	mov.u32 	%r7717, %r2147;
	mov.u32 	%r7718, %r2147;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3376, %r2531, 384, %r2138;
	add.s32 	%r3379, %r24, -1;
	mad.lo.s32 	%r3380, %r2133, %r3379, %r3376;
	add.s32 	%r3386, %r3380, %r2136;
	shl.b32 	%r3387, %r3386, 2;
	mov.u32 	%r3388, _ZN6kernel5shmemE;
	add.s32 	%r3389, %r3388, %r3387;
	shl.b32 	%r3390, %r28, 4;
	add.s32 	%r3391, %r3389, %r3390;
	ld.shared.v4.u32 	{%r7718, %r7717, %r7713, %r7711}, [%r3391];
	shl.b32 	%r3396, %r28, 3;
	add.s32 	%r3397, %r3389, %r3396;
	ld.shared.v2.u32 	{%r7714, %r7712}, [%r3397+512];
	ld.shared.v4.u32 	{%r7710, %r7709, %r7701, %r7699}, [%r3391+768];
	mov.u32 	%r7700, %r2147;
	mov.u32 	%r7702, %r2147;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7240, %r3397, 512;
	ld.shared.v2.u32 	{%r7702, %r7700}, [%r7240+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2135;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3407, %r1729, %r23;
	mul.lo.s32 	%r3409, %r52, %r24;
	mad.lo.s32 	%r3410, %r3407, 384, %r3409;
	mad.lo.s32 	%r3413, %r2133, %r2135, %r3410;
	mad.lo.s32 	%r3416, %r2131, %r2130, %r3413;
	shl.b32 	%r3417, %r3416, 2;
	mov.u32 	%r3418, _ZN6kernel5shmemE;
	add.s32 	%r3419, %r3418, %r3417;
	shl.b32 	%r3420, %r28, 4;
	add.s32 	%r3421, %r3419, %r3420;
	ld.shared.v4.u32 	{%r7627, %r7630, %r7634, %r7633}, [%r3421];

$L__BB0_386:
	shl.b32 	%r3426, %r24, 8;
	shl.b32 	%r3430, %r1730, 8;
	or.b32  	%r3431, %r3430, 128;
	add.s32 	%r3432, %r23, -1;
	mad.lo.s32 	%r3433, %r3431, %r3432, %r2138;
	add.s32 	%r3434, %r3433, %r3426;
	shl.b32 	%r3435, %r3434, 2;
	mov.u32 	%r3436, _ZN6kernel5shmemE;
	add.s32 	%r3437, %r3436, %r3435;
	setp.ne.s32 	%p202, %r24, %r2135;
	shl.b32 	%r3439, %r28, 4;
	add.s32 	%r913, %r3437, %r3439;
	ld.shared.v4.u32 	{%r7636, %r7638, %r7635, %r7637}, [%r913];
	ld.shared.v4.u32 	{%r7632, %r7629, %r7628, %r7631}, [%r913+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7627, %r7630, %r7634, %r7633}, [%r913+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3453, %r52, %r24;
	sub.s32 	%r3454, %r3453, %r52;
	mad.lo.s32 	%r3457, %r2531, 384, %r3454;
	mad.lo.s32 	%r3460, %r2133, %r2135, %r3457;
	mad.lo.s32 	%r3463, %r2131, %r2130, %r3460;
	shl.b32 	%r3464, %r3463, 2;
	mov.u32 	%r3465, _ZN6kernel5shmemE;
	add.s32 	%r3466, %r3465, %r3464;
	shl.b32 	%r3467, %r28, 4;
	add.s32 	%r938, %r3466, %r3467;
	ld.shared.v4.u32 	{%r7647, %r7646, %r7651, %r7649}, [%r938];
	ld.shared.v4.u32 	{%r7645, %r7642, %r7639, %r7640}, [%r938+512];
	ld.shared.v4.u32 	{%r7644, %r7641, %r7643, %r7650}, [%r938+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7653, %r7654, %r7648, %r7652}, [%r938+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd549, [%rd1+80];
	cvta.to.global.u64 	%rd548, %rd549;
	mad.lo.s32 	%r3485, %r651, %r1732, %r26;
	mul.lo.s32 	%r3486, %r1730, %r3485;
	mul.lo.s32 	%r3487, %r3486, 768;
	mad.lo.s32 	%r3488, %r24, 384, %r3487;
	add.s32 	%r3489, %r3488, -64;
	mul.wide.s32 	%rd271, %r3489, 4;
	add.s64 	%rd272, %rd548, %rd271;
	add.s64 	%rd274, %rd272, %rd273;
	ld.global.v4.u32 	{%r7662, %r7660, %r7669, %r7670}, [%rd274+256];
	ld.global.v4.u32 	{%r7668, %r7665, %r7657, %r7658}, [%rd274+1024];
	add.s64 	%rd27, %rd272, %rd275;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7663, %r7666}, [%rd27];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2135;
	ld.global.v2.u32 	{%r7661, %r7659}, [%rd27+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7667, %r7664}, [%rd27+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd551, [%rd1+80];
	cvta.to.global.u64 	%rd550, %rd551;
	mad.lo.s32 	%r3506, %r652, %r1731, %r25;
	mul.lo.s32 	%r3510, %r3506, %r1786;
	mad.lo.s32 	%r3513, %r2531, 384, %r3510;
	add.s32 	%r3514, %r3513, -64;
	mad.lo.s32 	%r3517, %r1788, %r51, %r3514;
	mul.wide.s32 	%rd276, %r3517, 4;
	add.s64 	%rd277, %rd550, %rd276;
	add.s64 	%rd279, %rd277, %rd273;
	ld.global.v4.u32 	{%r7682, %r7681, %r7677, %r7675}, [%rd279+256];
	ld.global.v4.u32 	{%r7672, %r7671, %r7674, %r7680}, [%rd279+1024];
	add.s64 	%rd281, %rd277, %rd275;
	ld.global.v2.u32 	{%r7678, %r7676}, [%rd281+768];
	ld.global.v2.u32 	{%r7663, %r7666}, [%rd281+1536];

$L__BB0_398:
	add.s32 	%r3530, %r1734, -1;
	setp.lt.s32 	%p209, %r653, %r3530;
	setp.gt.s32 	%p210, %r653, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r654, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3531, %r1735, -2;
	setp.lt.s32 	%p214, %r654, %r3531;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd553, [%rd1+88];
	cvta.to.global.u64 	%rd552, %rd553;
	mad.lo.s32 	%r1033, %r654, %r1734, %r653;
	shl.b32 	%r3532, %r1033, 6;
	mul.wide.s32 	%rd284, %r3532, 4;
	add.s64 	%rd29, %rd552, %rd284;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd286, %rd29, %rd275;
	ld.global.v2.u32 	{%r7702, %r7700}, [%rd286+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3535, %r1734, 5;
	cvt.s64.s32 	%rd287, %r3535;
	cvt.s64.s32 	%rd288, %r28;
	add.s64 	%rd289, %rd287, %rd288;
	shl.b64 	%rd290, %rd289, 3;
	add.s64 	%rd291, %rd29, %rd290;
	ld.global.v2.u32 	{%r7707, %r7705}, [%rd291];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3538, %r1734, 5;
	neg.s32 	%r3539, %r3538;
	cvt.s64.s32 	%rd292, %r3539;
	cvt.s64.s32 	%rd293, %r28;
	add.s64 	%rd294, %rd292, %rd293;
	shl.b64 	%rd295, %rd294, 3;
	add.s64 	%rd296, %rd29, %rd295;
	ld.global.v2.u32 	{%r7714, %r7712}, [%rd296];

$L__BB0_405:
	mad.lo.s32 	%r7251, %r654, %r1734, %r653;
	ld.param.u64 	%rd555, [%rd1+88];
	cvta.to.global.u64 	%rd554, %rd555;
	shl.b32 	%r3542, %r1735, 6;
	shl.b32 	%r3543, %r7251, 7;
	mad.lo.s32 	%r3544, %r3542, %r1734, %r3543;
	mul.wide.s32 	%rd297, %r3544, 4;
	add.s64 	%rd30, %rd554, %rd297;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3545, %r1734, 5;
	cvt.s64.s32 	%rd298, %r3545;
	cvt.s64.s32 	%rd299, %r28;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 4;
	add.s64 	%rd302, %rd30, %rd301;
	ld.global.v4.u32 	{%r7708, %r7706, %r7698, %r7697}, [%rd302];
	shl.b32 	%r3550, %r1734, 6;
	add.s32 	%r3551, %r3550, -32;
	cvt.s64.s32 	%rd303, %r3551;
	add.s64 	%rd304, %rd303, %rd299;
	shl.b64 	%rd305, %rd304, 4;
	add.s64 	%rd306, %rd30, %rd305;
	ld.global.v4.u32 	{%r7716, %r7715, %r7704, %r7703}, [%rd306];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3556, %r1734, 5;
	xor.b32  	%r3557, %r3556, -32;
	cvt.s64.s32 	%rd307, %r3557;
	cvt.s64.s32 	%rd308, %r28;
	add.s64 	%rd309, %rd307, %rd308;
	shl.b64 	%rd310, %rd309, 4;
	add.s64 	%rd311, %rd30, %rd310;
	ld.global.v4.u32 	{%r7718, %r7717, %r7713, %r7711}, [%rd311];
	add.s64 	%rd313, %rd30, %rd273;
	ld.global.v4.u32 	{%r7710, %r7709, %r7701, %r7699}, [%rd313];

$L__BB0_409:
	mov.u32 	%r3571, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3567,%r7462,%r412,%r2234,%r3571;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3567;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7462;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3574, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3575,%r7471,%r3574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3578,%r7342,%r3575;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7719,%r7600;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7719,%r7343,%r3575;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3591, 31;
	mov.u32 	%r3614, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3589,%r7719,%r3591,%r2234,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3594,%r3578,%r3589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3597,%r7470,%r7480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3600,%r3597,%r3594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3603,%r7492,%r3600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3606,%r7600,%r3603;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3610,%r7463,%r412,%r2234,%r3614;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3610;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7463;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3617, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3618,%r7472,%r3617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3621,%r7342,%r3618;
}
	// end inline asm
	mov.u32 	%r7720, %r7599;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7720,%r7343,%r3618;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3632,%r7720,%r3591,%r2234,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3637,%r3621,%r3632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3640,%r7470,%r7493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3643,%r3637,%r3640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3646,%r7491,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3649,%r7599,%r3646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3652,%r7462,%r7471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3655,%r7346,%r3652;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7721,%r7598;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7721,%r7347,%r3652;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3668, 31;
	mov.u32 	%r3670, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3666,%r7721,%r3668,%r2234,%r3670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3671,%r3655,%r3666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r7461,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3677,%r3674,%r3671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3680,%r7487,%r3677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3683,%r7598,%r3680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3686,%r7463,%r7472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3689,%r7346,%r3686;
}
	// end inline asm
	mov.u32 	%r7722, %r7597;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7722,%r7347,%r3686;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3698,%r7722,%r3668,%r2234,%r3670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3703,%r3689,%r3698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3706,%r7461,%r7488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3709,%r3703,%r3706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3712,%r7486,%r3709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3715,%r7597,%r3712;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3719,%r7446,%r412,%r2234,%r3670;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3719;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7446;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3726, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3727,%r7454,%r3726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3730,%r7342,%r3727;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7723,%r7596;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7723,%r7343,%r3727;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3745, 31;
	mov.u32 	%r3747, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3743,%r7723,%r3745,%r2234,%r3747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3748,%r3730,%r3743;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r7453,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3754,%r3751,%r3748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3757,%r7484,%r3754;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3760,%r7596,%r3757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3763,%r7446,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3766,%r7346,%r3763;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7724,%r7595;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7724,%r7347,%r3763;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3779, 31;
	mov.u32 	%r3802, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3777,%r7724,%r3779,%r2234,%r3802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3782,%r3766,%r3777;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r7445,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3788,%r3785,%r3782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3791,%r7482,%r3788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3794,%r7595,%r3791;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3798,%r7430,%r412,%r2234,%r3802;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3798;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7430;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3805, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3806,%r7435,%r3805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3809,%r7342,%r3806;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7725,%r7594;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7725,%r7343,%r3806;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3824, 31;
	mov.u32 	%r3847, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3822,%r7725,%r3824,%r2234,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3827,%r3809,%r3822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3830,%r7434,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r3830,%r3827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3836,%r7718,%r3833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3839,%r7594,%r3836;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3843,%r7431,%r412,%r2234,%r3847;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3843;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7431;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3850, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3851,%r7436,%r3850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3854,%r7342,%r3851;
}
	// end inline asm
	mov.u32 	%r7726, %r7593;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7726,%r7343,%r3851;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3865,%r7726,%r3824,%r2234,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3870,%r3854,%r3865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3873,%r7434,%r7480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r3870,%r3873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r7479,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3882,%r7593,%r3879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3885,%r7430,%r7435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3888,%r7346,%r3885;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7727,%r7592;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7727,%r7347,%r3885;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3901, 31;
	mov.u32 	%r3903, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3899,%r7727,%r3901,%r2234,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3904,%r3888,%r3899;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3907,%r7429,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3910,%r3907,%r3904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3913,%r7717,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3916,%r7592,%r3913;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3919,%r7431,%r7436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3922,%r7346,%r3919;
}
	// end inline asm
	mov.u32 	%r7728, %r7591;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7728,%r7347,%r3919;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3931,%r7728,%r3901,%r2234,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3936,%r3922,%r3931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r7429,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3942,%r3936,%r3939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3945,%r7476,%r3942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3948,%r7591,%r3945;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3952,%r7418,%r412,%r2234,%r3903;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3952;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7418;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3959, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3960,%r7425,%r3959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3963,%r7342,%r3960;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7729,%r7590;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7729,%r7343,%r3960;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3978, 31;
	mov.u32 	%r4001, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3976,%r7729,%r3978,%r2234,%r4001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3981,%r3963,%r3976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r7424,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3987,%r3984,%r3981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3990,%r551,%r3987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r7590,%r3990;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3997,%r7419,%r412,%r2234,%r4001;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3997;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7419;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4004, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4005,%r7426,%r4004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4008,%r7342,%r4005;
}
	// end inline asm
	mov.u32 	%r7730, %r7589;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7730,%r7343,%r4005;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4019,%r7730,%r3978,%r2234,%r4001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4024,%r4008,%r4019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r7424,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4030,%r4024,%r4027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4033,%r550,%r4030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7494,%r7589,%r4033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4039,%r7425,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4042,%r7426,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4045,%r4039,%r4042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4048,%r7467,%r4045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4051,%r7588,%r4048;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;

	mov.u32 	%r7588, %r4051;

$L__BB0_442:
	// begin inline asm
	{sub.f16x2 %r4056,%r7418,%r7425;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4059,%r7346,%r4056;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7732,%r7587;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7732,%r7347,%r4056;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4070, 31;
	mov.u32 	%r4072, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4068,%r7732,%r4070,%r2234,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4073,%r4059,%r4068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4076,%r7417,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4079,%r4076,%r4073;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4082,%r542,%r4079;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7490,%r7587,%r4082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4088,%r7419,%r7426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4091,%r7346,%r4088;
}
	// end inline asm
	mov.u32 	%r7733, %r7586;
	@%p12 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7733,%r7347,%r4088;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4100,%r7733,%r4070,%r2234,%r4072;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4105,%r4091,%r4100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4108,%r7417,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4111,%r4105,%r4108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4114,%r541,%r4111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r7586,%r4114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r7418,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4123,%r7419,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r4120,%r4123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4129,%r7458,%r4126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4132,%r7585,%r4129;
}
	// end inline asm
	@%p12 bra 	$L__BB0_449;

	mov.u32 	%r7585, %r4132;

$L__BB0_449:
	mov.u32 	%r4142, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4138,%r7407,%r412,%r2234,%r4142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4138;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7407;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4145, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4146,%r7412,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4149,%r7342,%r4146;
}
	// end inline asm
	@%p12 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7735,%r7584;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7735,%r7343,%r4146;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4162, 31;
	mov.u32 	%r4185, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4160,%r7735,%r4162,%r2234,%r4185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4165,%r4149,%r4160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4168,%r7411,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4171,%r4168,%r4165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4174,%r534,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r7584,%r4174;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4181,%r7408,%r412,%r2234,%r4185;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4181;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7408;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4188, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4189,%r7413,%r4188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4192,%r7342,%r4189;
}
	// end inline asm
	mov.u32 	%r7736, %r7583;
	@%p12 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7736,%r7343,%r4189;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4203,%r7736,%r4162,%r2234,%r4185;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4208,%r4192,%r4203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r7411,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4214,%r4208,%r4211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4217,%r7451,%r4214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4220,%r7583,%r4217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4223,%r7412,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4226,%r7413,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4229,%r4223,%r4226;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4232,%r7450,%r4229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4235,%r7582,%r4232;
}
	// end inline asm
	@%p12 bra 	$L__BB0_456;

	mov.u32 	%r7582, %r4235;

$L__BB0_456:
	// begin inline asm
	{sub.f16x2 %r4240,%r7407,%r7412;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4243,%r7346,%r4240;
}
	// end inline asm
	@%p12 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7738,%r7581;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7738,%r7347,%r4240;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4254, 31;
	mov.u32 	%r4256, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4252,%r7738,%r4254,%r2234,%r4256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4257,%r4243,%r4252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4260,%r7406,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4263,%r4260,%r4257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4266,%r526,%r4263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r7581,%r4266;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4272,%r7408,%r7413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4275,%r7346,%r4272;
}
	// end inline asm
	mov.u32 	%r7739, %r7580;
	@%p12 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7739,%r7347,%r4272;
}
	// end inline asm

$L__BB0_461:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4284,%r7739,%r4254,%r2234,%r4256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4289,%r4275,%r4284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4292,%r7406,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4295,%r4289,%r4292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4298,%r7443,%r4295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4301,%r7580,%r4298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r7407,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r7408,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4310,%r4304,%r4307;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4313,%r7442,%r4310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4316,%r7579,%r4313;
}
	// end inline asm
	@%p12 bra 	$L__BB0_463;

	mov.u32 	%r7579, %r4316;

$L__BB0_463:
	mov.u32 	%r4326, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4322,%r7398,%r412,%r2234,%r4326;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4322;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7398;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4329, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r7402,%r4329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4333,%r7342,%r4330;
}
	// end inline asm
	@%p12 bra 	$L__BB0_465;
	bra.uni 	$L__BB0_464;

$L__BB0_465:
	// begin inline asm
	{neg.f16x2 %r7741,%r7578;
}
	// end inline asm
	bra.uni 	$L__BB0_466;

$L__BB0_464:
	// begin inline asm
	{mul.f16x2 %r7741,%r7343,%r4330;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4346, 31;
	mov.u32 	%r4348, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4344,%r7741,%r4346,%r2234,%r4348;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4349,%r4333,%r4344;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4352,%r7634,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4355,%r4352,%r4349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4358,%r7716,%r4355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4361,%r7578,%r4358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4364,%r7398,%r7402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4367,%r7346,%r4364;
}
	// end inline asm
	@%p12 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7742,%r7577;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7742,%r7347,%r4364;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4380, 31;
	mov.u32 	%r4403, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4378,%r7742,%r4380,%r2234,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4383,%r4367,%r4378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4386,%r7633,%r7406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4389,%r4386,%r4383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4392,%r7715,%r4389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4395,%r7577,%r4392;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4399,%r7384,%r412,%r2234,%r4403;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4399;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7384;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4406, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4407,%r7391,%r4406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4410,%r7342,%r4407;
}
	// end inline asm
	mov.u32 	%r7743, %r7576;
	@%p12 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7743,%r7343,%r4407;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4421,%r7743,%r4380,%r2234,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4426,%r4410,%r4421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4429,%r7644,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4432,%r4426,%r4429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4435,%r7714,%r4432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7481,%r7576,%r4435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4441,%r7645,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4444,%r7391,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4447,%r4441,%r4444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4450,%r7713,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4453,%r7575,%r4450;
}
	// end inline asm
	@%p12 bra 	$L__BB0_473;

	mov.u32 	%r7575, %r4453;

$L__BB0_473:
	// begin inline asm
	{sub.f16x2 %r4458,%r7384,%r7391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4461,%r7346,%r4458;
}
	// end inline asm
	mov.u32 	%r7745, %r7574;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7745,%r7347,%r4458;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4470, 31;
	mov.u32 	%r4472, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4468,%r7745,%r4470,%r2234,%r4472;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4473,%r4461,%r4468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4476,%r7641,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4479,%r4473,%r4476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4482,%r7712,%r4479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7478,%r7574,%r4482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r7642,%r7430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r7384,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4494,%r4488,%r4491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4497,%r7711,%r4494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4500,%r7573,%r4497;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;

	mov.u32 	%r7573, %r4500;

$L__BB0_477:
	// begin inline asm
	{shfl.sync.idx.b32 %r4506,%r7370,%r412,%r2234,%r4472;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4506;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7370;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4513, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4514,%r7377,%r4513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4517,%r7342,%r4514;
}
	// end inline asm
	@%p12 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7747,%r7572;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7747,%r7343,%r4514;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4530, 31;
	mov.u32 	%r4553, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4528,%r7747,%r4530,%r2234,%r4553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4533,%r4517,%r4528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4536,%r7376,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4539,%r4536,%r4533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4542,%r7710,%r4539;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7475,%r7572,%r4542;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4549,%r7371,%r412,%r2234,%r4553;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4549;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7371;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4556, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4557,%r7378,%r4556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4560,%r7342,%r4557;
}
	// end inline asm
	mov.u32 	%r7748, %r7571;
	@%p12 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7748,%r7343,%r4557;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4571,%r7748,%r4530,%r2234,%r4553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4576,%r4560,%r4571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4579,%r7376,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4582,%r4576,%r4579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4585,%r7468,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7474,%r7571,%r4585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4591,%r7377,%r7425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4594,%r7378,%r7391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4597,%r4591,%r4594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4600,%r496,%r4597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4603,%r7570,%r4600;
}
	// end inline asm
	@%p12 bra 	$L__BB0_484;

	mov.u32 	%r7570, %r4603;

$L__BB0_484:
	// begin inline asm
	{sub.f16x2 %r4608,%r7370,%r7377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4611,%r7346,%r4608;
}
	// end inline asm
	@%p12 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7750,%r7569;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7750,%r7347,%r4608;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4622, 31;
	mov.u32 	%r4624, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4620,%r7750,%r4622,%r2234,%r4624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4625,%r4611,%r4620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4628,%r7369,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4631,%r4628,%r4625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4634,%r7709,%r4631;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7569,%r4634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4640,%r7371,%r7378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4643,%r7346,%r4640;
}
	// end inline asm
	mov.u32 	%r7751, %r7568;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7751,%r7347,%r4640;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4652,%r7751,%r4622,%r2234,%r4624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4657,%r4643,%r4652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4660,%r7369,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4663,%r4657,%r4660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4666,%r7459,%r4663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r7568,%r4666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4672,%r7370,%r7418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r7371,%r7384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r4672,%r4675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4681,%r488,%r4678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4684,%r7567,%r4681;
}
	// end inline asm
	@%p12 bra 	$L__BB0_491;

	mov.u32 	%r7567, %r4684;

$L__BB0_491:
	mov.u32 	%r4694, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4690,%r7355,%r412,%r2234,%r4694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4690;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7355;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4697, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4698,%r7363,%r4697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4701,%r7342,%r4698;
}
	// end inline asm
	@%p12 bra 	$L__BB0_493;
	bra.uni 	$L__BB0_492;

$L__BB0_493:
	// begin inline asm
	{neg.f16x2 %r7753,%r7566;
}
	// end inline asm
	bra.uni 	$L__BB0_494;

$L__BB0_492:
	// begin inline asm
	{mul.f16x2 %r7753,%r7343,%r4698;
}
	// end inline asm

$L__BB0_494:
	mov.u32 	%r4714, 31;
	mov.u32 	%r4737, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4712,%r7753,%r4714,%r2234,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4717,%r4701,%r4712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4720,%r7632,%r7376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4723,%r4720,%r4717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4726,%r7708,%r4723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r7566,%r4726;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4733,%r7356,%r412,%r2234,%r4737;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4733;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7356;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4740, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4741,%r7364,%r4740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4744,%r7342,%r4741;
}
	// end inline asm
	mov.u32 	%r7754, %r7565;
	@%p12 bra 	$L__BB0_496;

	// begin inline asm
	{mul.f16x2 %r7754,%r7343,%r4741;
}
	// end inline asm

$L__BB0_496:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4755,%r7754,%r4714,%r2234,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4760,%r4744,%r4755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4763,%r7632,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4766,%r4760,%r4763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4769,%r7707,%r4766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7456,%r7565,%r4769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4775,%r7363,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4778,%r7364,%r7378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4781,%r4775,%r4778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4784,%r481,%r4781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4787,%r7564,%r4784;
}
	// end inline asm
	@%p12 bra 	$L__BB0_498;

	mov.u32 	%r7564, %r4787;

$L__BB0_498:
	// begin inline asm
	{sub.f16x2 %r4792,%r7355,%r7363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4795,%r7346,%r4792;
}
	// end inline asm
	@%p12 bra 	$L__BB0_500;
	bra.uni 	$L__BB0_499;

$L__BB0_500:
	// begin inline asm
	{neg.f16x2 %r7756,%r7563;
}
	// end inline asm
	bra.uni 	$L__BB0_501;

$L__BB0_499:
	// begin inline asm
	{mul.f16x2 %r7756,%r7347,%r4792;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r4806, 31;
	mov.u32 	%r4808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4804,%r7756,%r4806,%r2234,%r4808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4809,%r4795,%r4804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4812,%r7629,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4815,%r4812,%r4809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4818,%r7706,%r4815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7449,%r7563,%r4818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4824,%r7356,%r7364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4827,%r7346,%r4824;
}
	// end inline asm
	mov.u32 	%r7757, %r7562;
	@%p12 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7757,%r7347,%r4824;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4836,%r7757,%r4806,%r2234,%r4808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4841,%r4827,%r4836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4844,%r7629,%r7406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4847,%r4841,%r4844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4850,%r7705,%r4847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7448,%r7562,%r4850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4856,%r7355,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4859,%r7356,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4862,%r4856,%r4859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4865,%r474,%r4862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4868,%r7561,%r4865;
}
	// end inline asm
	@%p12 bra 	$L__BB0_505;

	mov.u32 	%r7561, %r4868;

$L__BB0_505:
	// begin inline asm
	{sub.f16x2 %r4873,%r7628,%r7402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4876,%r7627,%r7364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4879,%r4873,%r4876;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4882,%r7704,%r4879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4885,%r7560,%r4882;
}
	// end inline asm
	@%p12 bra 	$L__BB0_507;

	mov.u32 	%r7560, %r4885;

$L__BB0_507:
	// begin inline asm
	{sub.f16x2 %r4888,%r7631,%r7398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r7630,%r7356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4894,%r4888,%r4891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4897,%r7703,%r4894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4900,%r7559,%r4897;
}
	// end inline asm
	@%p12 bra 	$L__BB0_509;

	mov.u32 	%r7559, %r4900;

$L__BB0_509:
	mov.u32 	%r4908, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4904,%r7433,%r412,%r2234,%r4908;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4904;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7433;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4911, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4912,%r7387,%r4911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4915,%r7342,%r4912;
}
	// end inline asm
	mov.u32 	%r7761, %r7558;
	@%p12 bra 	$L__BB0_511;

	// begin inline asm
	{mul.f16x2 %r7761,%r7343,%r4912;
}
	// end inline asm

$L__BB0_511:
	mov.u32 	%r4926, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4924,%r7761,%r4926,%r2234,%r4908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4929,%r4915,%r4924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r7648,%r7376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4935,%r4929,%r4932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4938,%r7702,%r4935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r7558,%r4938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4944,%r7643,%r7377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4947,%r7387,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4950,%r4944,%r4947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4953,%r7701,%r4950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4956,%r7557,%r4953;
}
	// end inline asm
	@%p12 bra 	$L__BB0_513;

	mov.u32 	%r7557, %r4956;

$L__BB0_513:
	// begin inline asm
	{sub.f16x2 %r4961,%r7433,%r7387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4964,%r7346,%r4961;
}
	// end inline asm
	mov.u32 	%r7763, %r7556;
	@%p12 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7763,%r7347,%r4961;
}
	// end inline asm

$L__BB0_515:
	mov.u32 	%r4973, 31;
	mov.u32 	%r4975, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4971,%r7763,%r4973,%r2234,%r4975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4976,%r4964,%r4971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4979,%r7652,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4982,%r4976,%r4979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4985,%r7700,%r4982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7421,%r7556,%r4985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4991,%r7650,%r7370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4994,%r7433,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4997,%r4991,%r4994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5000,%r7699,%r4997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5003,%r7555,%r5000;
}
	// end inline asm
	@%p12 bra 	$L__BB0_517;

	mov.u32 	%r7555, %r5003;

$L__BB0_517:
	// begin inline asm
	{sub.f16x2 %r5008,%r7636,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5011,%r7635,%r7387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5014,%r5008,%r5011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5017,%r7698,%r5014;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5020,%r7554,%r5017;
}
	// end inline asm
	@%p12 bra 	$L__BB0_519;

	mov.u32 	%r7554, %r5020;

$L__BB0_519:
	// begin inline asm
	{sub.f16x2 %r5023,%r7638,%r7355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5026,%r7637,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5029,%r5023,%r5026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5032,%r7697,%r5029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5035,%r7553,%r5032;
}
	// end inline asm
	@%p12 bra 	$L__BB0_521;

	mov.u32 	%r7553, %r5035;

$L__BB0_521:
	bar.sync 	0;
	ld.param.u64 	%rd314, [%rd1+160];
	cvta.to.global.u64 	%rd32, %rd314;
	setp.lt.s32 	%p271, %r655, %r1740;
	or.pred  	%p273, %p271, %p215;
	mad.lo.s32 	%r5038, %r1742, %r1741, %r1740;
	setp.ge.s32 	%p274, %r655, %r5038;
	or.pred  	%p275, %p273, %p274;
	@%p275 bra 	$L__BB0_571;

	sub.s32 	%r1300, %r655, %r1740;
	rem.s32 	%r5039, %r1300, %r1741;
	setp.ne.s32 	%p276, %r5039, 0;
	@%p276 bra 	$L__BB0_571;

	div.s32 	%r5040, %r1300, %r1741;
	mul.lo.s32 	%r5041, %r5040, %r1734;
	mul.lo.s32 	%r1301, %r5041, 3;
	add.s32 	%r1302, %r653, -2;
	add.s32 	%r5042, %r1301, %r1302;
	mul.lo.s32 	%r1303, %r5042, %r1735;
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5047, %r1303, %r654;
	mul.lo.s32 	%r5048, %r5047, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5049, %r378, %r5048;
	mul.wide.s32 	%rd315, %r5049, 4;
	add.s64 	%rd316, %rd32, %rd315;
	st.global.f32 	[%rd316], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5050, %r379, %r5048;
	mul.wide.s32 	%rd317, %r5050, 4;
	add.s64 	%rd318, %rd32, %rd317;
	st.global.f32 	[%rd318], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3683;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5051, %r392, %r5048;
	mul.wide.s32 	%rd319, %r5051, 4;
	add.s64 	%rd320, %rd32, %rd319;
	st.global.f32 	[%rd320], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3683;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5052, %r393, %r5048;
	mul.wide.s32 	%rd321, %r5052, 4;
	add.s64 	%rd322, %rd32, %rd321;
	st.global.f32 	[%rd322], %f398;

$L__BB0_525:
	add.s32 	%r1304, %r1301, %r1734;
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5057, %r1304, %r1302;
	mad.lo.s32 	%r5058, %r5057, %r1735, %r654;
	mul.lo.s32 	%r5059, %r5058, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3649;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5060, %r378, %r5059;
	mul.wide.s32 	%rd323, %r5060, 4;
	add.s64 	%rd324, %rd32, %rd323;
	st.global.f32 	[%rd324], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3649;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5061, %r379, %r5059;
	mul.wide.s32 	%rd325, %r5061, 4;
	add.s64 	%rd326, %rd32, %rd325;
	st.global.f32 	[%rd326], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5062, %r392, %r5059;
	mul.wide.s32 	%rd327, %r5062, 4;
	add.s64 	%rd328, %rd32, %rd327;
	st.global.f32 	[%rd328], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3715;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5063, %r393, %r5059;
	mul.wide.s32 	%rd329, %r5063, 4;
	add.s64 	%rd330, %rd32, %rd329;
	st.global.f32 	[%rd330], %f402;

$L__BB0_527:
	add.s32 	%r1305, %r654, 1;
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5068, %r1303, %r1305;
	mul.lo.s32 	%r5069, %r5068, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3760;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5070, %r378, %r5069;
	mul.wide.s32 	%rd331, %r5070, 4;
	add.s64 	%rd332, %rd32, %rd331;
	st.global.f32 	[%rd332], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3760;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5071, %r379, %r5069;
	mul.wide.s32 	%rd333, %r5071, 4;
	add.s64 	%rd334, %rd32, %rd333;
	st.global.f32 	[%rd334], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5072, %r392, %r5069;
	mul.wide.s32 	%rd335, %r5072, 4;
	add.s64 	%rd336, %rd32, %rd335;
	st.global.f32 	[%rd336], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3794;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5073, %r393, %r5069;
	mul.wide.s32 	%rd337, %r5073, 4;
	add.s64 	%rd338, %rd32, %rd337;
	st.global.f32 	[%rd338], %f406;

$L__BB0_529:
	add.s32 	%r1306, %r653, -1;
	add.s32 	%r5074, %r1301, %r1306;
	mul.lo.s32 	%r1307, %r5074, %r1735;
	add.s32 	%r1308, %r654, -1;
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5079, %r1307, %r1308;
	mul.lo.s32 	%r5080, %r5079, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5081, %r378, %r5080;
	mul.wide.s32 	%rd339, %r5081, 4;
	add.s64 	%rd340, %rd32, %rd339;
	st.global.f32 	[%rd340], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5082, %r379, %r5080;
	mul.wide.s32 	%rd341, %r5082, 4;
	add.s64 	%rd342, %rd32, %rd341;
	st.global.f32 	[%rd342], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3916;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5083, %r392, %r5080;
	mul.wide.s32 	%rd343, %r5083, 4;
	add.s64 	%rd344, %rd32, %rd343;
	st.global.f32 	[%rd344], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3916;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5084, %r393, %r5080;
	mul.wide.s32 	%rd345, %r5084, 4;
	add.s64 	%rd346, %rd32, %rd345;
	st.global.f32 	[%rd346], %f410;

$L__BB0_531:
	add.s32 	%r5085, %r1304, %r1306;
	mul.lo.s32 	%r1309, %r5085, %r1735;
	@%p12 bra 	$L__BB0_533;

	add.s32 	%r5090, %r1309, %r1308;
	mul.lo.s32 	%r5091, %r5090, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3882;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5092, %r378, %r5091;
	mul.wide.s32 	%rd347, %r5092, 4;
	add.s64 	%rd348, %rd32, %rd347;
	st.global.f32 	[%rd348], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3882;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5093, %r379, %r5091;
	mul.wide.s32 	%rd349, %r5093, 4;
	add.s64 	%rd350, %rd32, %rd349;
	st.global.f32 	[%rd350], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3948;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5094, %r392, %r5091;
	mul.wide.s32 	%rd351, %r5094, 4;
	add.s64 	%rd352, %rd32, %rd351;
	st.global.f32 	[%rd352], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3948;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5095, %r393, %r5091;
	mul.wide.s32 	%rd353, %r5095, 4;
	add.s64 	%rd354, %rd32, %rd353;
	st.global.f32 	[%rd354], %f414;

$L__BB0_533:
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5100, %r1307, %r654;
	mul.lo.s32 	%r5101, %r5100, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7495;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5102, %r378, %r5101;
	mul.wide.s32 	%rd355, %r5102, 4;
	add.s64 	%rd356, %rd32, %rd355;
	st.global.f32 	[%rd356], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7495;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5103, %r379, %r5101;
	mul.wide.s32 	%rd357, %r5103, 4;
	add.s64 	%rd358, %rd32, %rd357;
	st.global.f32 	[%rd358], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7490;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5104, %r392, %r5101;
	mul.wide.s32 	%rd359, %r5104, 4;
	add.s64 	%rd360, %rd32, %rd359;
	st.global.f32 	[%rd360], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7490;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5105, %r393, %r5101;
	mul.wide.s32 	%rd361, %r5105, 4;
	add.s64 	%rd362, %rd32, %rd361;
	st.global.f32 	[%rd362], %f418;

$L__BB0_535:
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5110, %r1309, %r654;
	mul.lo.s32 	%r5111, %r5110, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7494;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5112, %r378, %r5111;
	mul.wide.s32 	%rd363, %r5112, 4;
	add.s64 	%rd364, %rd32, %rd363;
	st.global.f32 	[%rd364], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7494;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5113, %r379, %r5111;
	mul.wide.s32 	%rd365, %r5113, 4;
	add.s64 	%rd366, %rd32, %rd365;
	st.global.f32 	[%rd366], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7489;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5114, %r392, %r5111;
	mul.wide.s32 	%rd367, %r5114, 4;
	add.s64 	%rd368, %rd32, %rd367;
	st.global.f32 	[%rd368], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7489;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5115, %r393, %r5111;
	mul.wide.s32 	%rd369, %r5115, 4;
	add.s64 	%rd370, %rd32, %rd369;
	st.global.f32 	[%rd370], %f422;

$L__BB0_537:
	add.s32 	%r1310, %r1304, %r1734;
	add.s32 	%r5116, %r1310, %r1306;
	mul.lo.s32 	%r1311, %r5116, %r1735;
	@%p12 bra 	$L__BB0_539;

	add.s32 	%r5121, %r1311, %r654;
	mul.lo.s32 	%r5122, %r5121, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7588;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5123, %r378, %r5122;
	mul.wide.s32 	%rd371, %r5123, 4;
	add.s64 	%rd372, %rd32, %rd371;
	st.global.f32 	[%rd372], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7588;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5124, %r379, %r5122;
	mul.wide.s32 	%rd373, %r5124, 4;
	add.s64 	%rd374, %rd32, %rd373;
	st.global.f32 	[%rd374], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7585;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5125, %r392, %r5122;
	mul.wide.s32 	%rd375, %r5125, 4;
	add.s64 	%rd376, %rd32, %rd375;
	st.global.f32 	[%rd376], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7585;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5126, %r393, %r5122;
	mul.wide.s32 	%rd377, %r5126, 4;
	add.s64 	%rd378, %rd32, %rd377;
	st.global.f32 	[%rd378], %f426;

$L__BB0_539:
	@%p12 bra 	$L__BB0_541;

	add.s32 	%r5131, %r1307, %r1305;
	mul.lo.s32 	%r5132, %r5131, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7485;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5133, %r378, %r5132;
	mul.wide.s32 	%rd379, %r5133, 4;
	add.s64 	%rd380, %rd32, %rd379;
	st.global.f32 	[%rd380], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7485;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5134, %r379, %r5132;
	mul.wide.s32 	%rd381, %r5134, 4;
	add.s64 	%rd382, %rd32, %rd381;
	st.global.f32 	[%rd382], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5135, %r392, %r5132;
	mul.wide.s32 	%rd383, %r5135, 4;
	add.s64 	%rd384, %rd32, %rd383;
	st.global.f32 	[%rd384], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7483;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5136, %r393, %r5132;
	mul.wide.s32 	%rd385, %r5136, 4;
	add.s64 	%rd386, %rd32, %rd385;
	st.global.f32 	[%rd386], %f430;

$L__BB0_541:
	@%p12 bra 	$L__BB0_543;

	add.s32 	%r5141, %r1309, %r1305;
	mul.lo.s32 	%r5142, %r5141, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4220;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5143, %r378, %r5142;
	mul.wide.s32 	%rd387, %r5143, 4;
	add.s64 	%rd388, %rd32, %rd387;
	st.global.f32 	[%rd388], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4220;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5144, %r379, %r5142;
	mul.wide.s32 	%rd389, %r5144, 4;
	add.s64 	%rd390, %rd32, %rd389;
	st.global.f32 	[%rd390], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4301;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5145, %r392, %r5142;
	mul.wide.s32 	%rd391, %r5145, 4;
	add.s64 	%rd392, %rd32, %rd391;
	st.global.f32 	[%rd392], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4301;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5146, %r393, %r5142;
	mul.wide.s32 	%rd393, %r5146, 4;
	add.s64 	%rd394, %rd32, %rd393;
	st.global.f32 	[%rd394], %f434;

$L__BB0_543:
	@%p12 bra 	$L__BB0_545;

	add.s32 	%r5151, %r1311, %r1305;
	mul.lo.s32 	%r5152, %r5151, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7582;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5153, %r378, %r5152;
	mul.wide.s32 	%rd395, %r5153, 4;
	add.s64 	%rd396, %rd32, %rd395;
	st.global.f32 	[%rd396], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7582;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5154, %r379, %r5152;
	mul.wide.s32 	%rd397, %r5154, 4;
	add.s64 	%rd398, %rd32, %rd397;
	st.global.f32 	[%rd398], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5155, %r392, %r5152;
	mul.wide.s32 	%rd399, %r5155, 4;
	add.s64 	%rd400, %rd32, %rd399;
	st.global.f32 	[%rd400], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7579;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5156, %r393, %r5152;
	mul.wide.s32 	%rd401, %r5156, 4;
	add.s64 	%rd402, %rd32, %rd401;
	st.global.f32 	[%rd402], %f438;

$L__BB0_545:
	add.s32 	%r1312, %r654, 2;
	@%p12 bra 	$L__BB0_547;

	add.s32 	%r5161, %r1307, %r1312;
	mul.lo.s32 	%r5162, %r5161, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4361;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5163, %r378, %r5162;
	mul.wide.s32 	%rd403, %r5163, 4;
	add.s64 	%rd404, %rd32, %rd403;
	st.global.f32 	[%rd404], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4361;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5164, %r379, %r5162;
	mul.wide.s32 	%rd405, %r5164, 4;
	add.s64 	%rd406, %rd32, %rd405;
	st.global.f32 	[%rd406], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4395;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5165, %r392, %r5162;
	mul.wide.s32 	%rd407, %r5165, 4;
	add.s64 	%rd408, %rd32, %rd407;
	st.global.f32 	[%rd408], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4395;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5166, %r393, %r5162;
	mul.wide.s32 	%rd409, %r5166, 4;
	add.s64 	%rd410, %rd32, %rd409;
	st.global.f32 	[%rd410], %f442;

$L__BB0_547:
	add.s32 	%r5167, %r1304, %r653;
	mul.lo.s32 	%r1313, %r5167, %r1735;
	@%p12 bra 	$L__BB0_549;

	add.s32 	%r5172, %r1313, %r1308;
	mul.lo.s32 	%r5173, %r5172, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7481;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5174, %r378, %r5173;
	mul.wide.s32 	%rd411, %r5174, 4;
	add.s64 	%rd412, %rd32, %rd411;
	st.global.f32 	[%rd412], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7481;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5175, %r379, %r5173;
	mul.wide.s32 	%rd413, %r5175, 4;
	add.s64 	%rd414, %rd32, %rd413;
	st.global.f32 	[%rd414], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7478;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5176, %r392, %r5173;
	mul.wide.s32 	%rd415, %r5176, 4;
	add.s64 	%rd416, %rd32, %rd415;
	st.global.f32 	[%rd416], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7478;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5177, %r393, %r5173;
	mul.wide.s32 	%rd417, %r5177, 4;
	add.s64 	%rd418, %rd32, %rd417;
	st.global.f32 	[%rd418], %f446;

$L__BB0_549:
	add.s32 	%r5178, %r1310, %r653;
	mul.lo.s32 	%r1314, %r5178, %r1735;
	@%p12 bra 	$L__BB0_551;

	add.s32 	%r5183, %r1314, %r1308;
	mul.lo.s32 	%r5184, %r5183, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5185, %r378, %r5184;
	mul.wide.s32 	%rd419, %r5185, 4;
	add.s64 	%rd420, %rd32, %rd419;
	st.global.f32 	[%rd420], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7575;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5186, %r379, %r5184;
	mul.wide.s32 	%rd421, %r5186, 4;
	add.s64 	%rd422, %rd32, %rd421;
	st.global.f32 	[%rd422], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5187, %r392, %r5184;
	mul.wide.s32 	%rd423, %r5187, 4;
	add.s64 	%rd424, %rd32, %rd423;
	st.global.f32 	[%rd424], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7573;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5188, %r393, %r5184;
	mul.wide.s32 	%rd425, %r5188, 4;
	add.s64 	%rd426, %rd32, %rd425;
	st.global.f32 	[%rd426], %f450;

$L__BB0_551:
	add.s32 	%r5189, %r1301, %r653;
	mul.lo.s32 	%r1315, %r5189, %r1735;
	@%p12 bra 	$L__BB0_553;

	add.s32 	%r5194, %r1315, %r654;
	mul.lo.s32 	%r5195, %r5194, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7475;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5196, %r378, %r5195;
	mul.wide.s32 	%rd427, %r5196, 4;
	add.s64 	%rd428, %rd32, %rd427;
	st.global.f32 	[%rd428], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7475;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5197, %r379, %r5195;
	mul.wide.s32 	%rd429, %r5197, 4;
	add.s64 	%rd430, %rd32, %rd429;
	st.global.f32 	[%rd430], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5198, %r392, %r5195;
	mul.wide.s32 	%rd431, %r5198, 4;
	add.s64 	%rd432, %rd32, %rd431;
	st.global.f32 	[%rd432], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5199, %r393, %r5195;
	mul.wide.s32 	%rd433, %r5199, 4;
	add.s64 	%rd434, %rd32, %rd433;
	st.global.f32 	[%rd434], %f454;

$L__BB0_553:
	@%p12 bra 	$L__BB0_555;

	add.s32 	%r5204, %r1313, %r654;
	mul.lo.s32 	%r5205, %r5204, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5206, %r378, %r5205;
	mul.wide.s32 	%rd435, %r5206, 4;
	add.s64 	%rd436, %rd32, %rd435;
	st.global.f32 	[%rd436], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5207, %r379, %r5205;
	mul.wide.s32 	%rd437, %r5207, 4;
	add.s64 	%rd438, %rd32, %rd437;
	st.global.f32 	[%rd438], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5208, %r392, %r5205;
	mul.wide.s32 	%rd439, %r5208, 4;
	add.s64 	%rd440, %rd32, %rd439;
	st.global.f32 	[%rd440], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5209, %r393, %r5205;
	mul.wide.s32 	%rd441, %r5209, 4;
	add.s64 	%rd442, %rd32, %rd441;
	st.global.f32 	[%rd442], %f458;

$L__BB0_555:
	@%p12 bra 	$L__BB0_557;

	add.s32 	%r5214, %r1314, %r654;
	mul.lo.s32 	%r5215, %r5214, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5216, %r378, %r5215;
	mul.wide.s32 	%rd443, %r5216, 4;
	add.s64 	%rd444, %rd32, %rd443;
	st.global.f32 	[%rd444], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7570;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5217, %r379, %r5215;
	mul.wide.s32 	%rd445, %r5217, 4;
	add.s64 	%rd446, %rd32, %rd445;
	st.global.f32 	[%rd446], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5218, %r392, %r5215;
	mul.wide.s32 	%rd447, %r5218, 4;
	add.s64 	%rd448, %rd32, %rd447;
	st.global.f32 	[%rd448], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7567;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5219, %r393, %r5215;
	mul.wide.s32 	%rd449, %r5219, 4;
	add.s64 	%rd450, %rd32, %rd449;
	st.global.f32 	[%rd450], %f462;

$L__BB0_557:
	@%p12 bra 	$L__BB0_559;

	add.s32 	%r5224, %r1315, %r1305;
	mul.lo.s32 	%r5225, %r5224, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5226, %r378, %r5225;
	mul.wide.s32 	%rd451, %r5226, 4;
	add.s64 	%rd452, %rd32, %rd451;
	st.global.f32 	[%rd452], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5227, %r379, %r5225;
	mul.wide.s32 	%rd453, %r5227, 4;
	add.s64 	%rd454, %rd32, %rd453;
	st.global.f32 	[%rd454], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5228, %r392, %r5225;
	mul.wide.s32 	%rd455, %r5228, 4;
	add.s64 	%rd456, %rd32, %rd455;
	st.global.f32 	[%rd456], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5229, %r393, %r5225;
	mul.wide.s32 	%rd457, %r5229, 4;
	add.s64 	%rd458, %rd32, %rd457;
	st.global.f32 	[%rd458], %f466;

$L__BB0_559:
	@%p12 bra 	$L__BB0_561;

	add.s32 	%r5234, %r1313, %r1305;
	mul.lo.s32 	%r5235, %r5234, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5236, %r378, %r5235;
	mul.wide.s32 	%rd459, %r5236, 4;
	add.s64 	%rd460, %rd32, %rd459;
	st.global.f32 	[%rd460], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5237, %r379, %r5235;
	mul.wide.s32 	%rd461, %r5237, 4;
	add.s64 	%rd462, %rd32, %rd461;
	st.global.f32 	[%rd462], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5238, %r392, %r5235;
	mul.wide.s32 	%rd463, %r5238, 4;
	add.s64 	%rd464, %rd32, %rd463;
	st.global.f32 	[%rd464], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5239, %r393, %r5235;
	mul.wide.s32 	%rd465, %r5239, 4;
	add.s64 	%rd466, %rd32, %rd465;
	st.global.f32 	[%rd466], %f470;

$L__BB0_561:
	@%p12 bra 	$L__BB0_563;

	add.s32 	%r5244, %r1314, %r1305;
	mul.lo.s32 	%r5245, %r5244, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5246, %r378, %r5245;
	mul.wide.s32 	%rd467, %r5246, 4;
	add.s64 	%rd468, %rd32, %rd467;
	st.global.f32 	[%rd468], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7564;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5247, %r379, %r5245;
	mul.wide.s32 	%rd469, %r5247, 4;
	add.s64 	%rd470, %rd32, %rd469;
	st.global.f32 	[%rd470], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5248, %r392, %r5245;
	mul.wide.s32 	%rd471, %r5248, 4;
	add.s64 	%rd472, %rd32, %rd471;
	st.global.f32 	[%rd472], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7561;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5249, %r393, %r5245;
	mul.wide.s32 	%rd473, %r5249, 4;
	add.s64 	%rd474, %rd32, %rd473;
	st.global.f32 	[%rd474], %f474;

$L__BB0_563:
	add.s32 	%r1316, %r1314, %r1312;
	@%p12 bra 	$L__BB0_565;

	mul.lo.s32 	%r5254, %r1316, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5255, %r378, %r5254;
	mul.wide.s32 	%rd475, %r5255, 4;
	add.s64 	%rd476, %rd32, %rd475;
	st.global.f32 	[%rd476], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7560;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5256, %r379, %r5254;
	mul.wide.s32 	%rd477, %r5256, 4;
	add.s64 	%rd478, %rd32, %rd477;
	st.global.f32 	[%rd478], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5257, %r392, %r5254;
	mul.wide.s32 	%rd479, %r5257, 4;
	add.s64 	%rd480, %rd32, %rd479;
	st.global.f32 	[%rd480], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7559;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5258, %r393, %r5254;
	mul.wide.s32 	%rd481, %r5258, 4;
	add.s64 	%rd482, %rd32, %rd481;
	st.global.f32 	[%rd482], %f478;

$L__BB0_565:
	add.s32 	%r1317, %r653, 1;
	@%p12 bra 	$L__BB0_567;

	add.s32 	%r5263, %r1304, %r1317;
	mad.lo.s32 	%r5264, %r5263, %r1735, %r654;
	mul.lo.s32 	%r5265, %r5264, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7428;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5266, %r378, %r5265;
	mul.wide.s32 	%rd483, %r5266, 4;
	add.s64 	%rd484, %rd32, %rd483;
	st.global.f32 	[%rd484], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7428;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5267, %r379, %r5265;
	mul.wide.s32 	%rd485, %r5267, 4;
	add.s64 	%rd486, %rd32, %rd485;
	st.global.f32 	[%rd486], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7421;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5268, %r392, %r5265;
	mul.wide.s32 	%rd487, %r5268, 4;
	add.s64 	%rd488, %rd32, %rd487;
	st.global.f32 	[%rd488], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7421;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5269, %r393, %r5265;
	mul.wide.s32 	%rd489, %r5269, 4;
	add.s64 	%rd490, %rd32, %rd489;
	st.global.f32 	[%rd490], %f482;

$L__BB0_567:
	add.s32 	%r5270, %r1310, %r1317;
	mul.lo.s32 	%r1318, %r5270, %r1735;
	@%p12 bra 	$L__BB0_569;

	add.s32 	%r5275, %r1318, %r654;
	mul.lo.s32 	%r5276, %r5275, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5277, %r378, %r5276;
	mul.wide.s32 	%rd491, %r5277, 4;
	add.s64 	%rd492, %rd32, %rd491;
	st.global.f32 	[%rd492], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7557;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5278, %r379, %r5276;
	mul.wide.s32 	%rd493, %r5278, 4;
	add.s64 	%rd494, %rd32, %rd493;
	st.global.f32 	[%rd494], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5279, %r392, %r5276;
	mul.wide.s32 	%rd495, %r5279, 4;
	add.s64 	%rd496, %rd32, %rd495;
	st.global.f32 	[%rd496], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7555;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5280, %r393, %r5276;
	mul.wide.s32 	%rd497, %r5280, 4;
	add.s64 	%rd498, %rd32, %rd497;
	st.global.f32 	[%rd498], %f486;

$L__BB0_569:
	add.s32 	%r1319, %r1318, %r1305;
	@%p12 bra 	$L__BB0_571;

	mul.lo.s32 	%r5285, %r1319, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5286, %r378, %r5285;
	mul.wide.s32 	%rd499, %r5286, 4;
	add.s64 	%rd500, %rd32, %rd499;
	st.global.f32 	[%rd500], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7554;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5287, %r379, %r5285;
	mul.wide.s32 	%rd501, %r5287, 4;
	add.s64 	%rd502, %rd32, %rd501;
	st.global.f32 	[%rd502], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5288, %r392, %r5285;
	mul.wide.s32 	%rd503, %r5288, 4;
	add.s64 	%rd504, %rd32, %rd503;
	st.global.f32 	[%rd504], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7553;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5289, %r393, %r5285;
	mul.wide.s32 	%rd505, %r5289, 4;
	add.s64 	%rd506, %rd32, %rd505;
	st.global.f32 	[%rd506], %f490;

$L__BB0_571:
	setp.eq.s32 	%p301, %r23, %r2130;
	@%p301 bra 	$L__BB0_573;

	mad.lo.s32 	%r5290, %r1730, %r23, %r24;
	mov.u32 	%r5291, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5292, %r5290, 1280, %r5291;
	add.s32 	%r5293, %r5292, -256;
	shl.b32 	%r5294, %r28, 4;
	add.s32 	%r5295, %r5293, %r5294;
	st.shared.v4.u32 	[%r5295+256], {%r3839, %r3916, %r7575, %r7573};
	st.shared.v4.u32 	[%r5295+1024], {%r3606, %r3683, %r7588, %r7585};
	shl.b32 	%r5296, %r28, 3;
	add.s32 	%r5297, %r5293, %r5296;
	st.shared.v2.u32 	[%r5297+768], {%r3882, %r3948};

$L__BB0_573:
	setp.eq.s32 	%p302, %r24, %r2135;
	@%p302 bra 	$L__BB0_577;

	mad.lo.s32 	%r5301, %r1729, 384, -64;
	mul.lo.s32 	%r5302, %r5301, %r24;
	mad.lo.s32 	%r5304, %r2131, %r2130, %r5302;
	mad.lo.s32 	%r5305, %r2531, 384, %r5304;
	shl.b32 	%r5306, %r5305, 2;
	mov.u32 	%r5307, _ZN6kernel5shmemE;
	add.s32 	%r5308, %r5307, %r5306;
	add.s32 	%r5309, %r5308, -256;
	shl.b32 	%r5310, %r28, 4;
	add.s32 	%r5311, %r5309, %r5310;
	st.shared.v4.u32 	[%r5311+256], {%r3760, %r3794, %r7582, %r7579};
	st.shared.v4.u32 	[%r5311+1024], {%r4361, %r4395, %r7560, %r7559};
	shl.b32 	%r5312, %r28, 3;
	add.s32 	%r1323, %r5309, %r5312;
	@%p301 bra 	$L__BB0_576;

	st.shared.v2.u32 	[%r1323], {%r3649, %r3715};

$L__BB0_576:
	st.shared.v2.u32 	[%r1323+768], {%r4220, %r4301};

$L__BB0_577:
	setp.ne.s32 	%p304, %r23, %r2130;
	ld.param.u64 	%rd507, [%rd1+80];
	cvta.to.global.u64 	%rd33, %rd507;
	@%p304 bra 	$L__BB0_579;

	mad.lo.s32 	%r5314, %r651, %r1732, %r26;
	mul.lo.s32 	%r5315, %r1730, %r5314;
	mul.lo.s32 	%r5316, %r5315, 768;
	mad.lo.s32 	%r5317, %r24, 384, %r5316;
	add.s32 	%r5318, %r5317, -64;
	mul.wide.s32 	%rd508, %r5318, 4;
	add.s64 	%rd509, %rd33, %rd508;
	add.s64 	%rd511, %rd509, %rd273;
	st.global.v4.u32 	[%rd511+256], {%r3839, %r3916, %r7575, %r7573};
	st.global.v4.u32 	[%rd511+1024], {%r3606, %r3683, %r7588, %r7585};
	add.s64 	%rd513, %rd509, %rd275;
	st.global.v2.u32 	[%rd513+768], {%r3882, %r3948};
	st.global.v2.u32 	[%rd513+1536], {%r3649, %r3715};

$L__BB0_579:
	setp.ne.s32 	%p305, %r24, %r2135;
	@%p305 bra 	$L__BB0_584;

	ld.param.u64 	%rd557, [%rd1+80];
	cvta.to.global.u64 	%rd556, %rd557;
	mad.lo.s32 	%r5321, %r652, %r1731, %r25;
	mul.lo.s32 	%r5325, %r5321, %r1786;
	mad.lo.s32 	%r5328, %r2531, 384, %r5325;
	add.s32 	%r5329, %r5328, -64;
	mad.lo.s32 	%r5332, %r1788, %r51, %r5329;
	mul.wide.s32 	%rd514, %r5332, 4;
	add.s64 	%rd515, %rd556, %rd514;
	add.s64 	%rd517, %rd515, %rd273;
	st.global.v4.u32 	[%rd517+256], {%r3760, %r3794, %r7582, %r7579};
	st.global.v4.u32 	[%rd517+1024], {%r4361, %r4395, %r7560, %r7559};
	add.s64 	%rd34, %rd515, %rd275;
	@%p301 bra 	$L__BB0_582;

	st.global.v2.u32 	[%rd34], {%r3649, %r3715};

$L__BB0_582:
	st.global.v2.u32 	[%rd34+768], {%r4220, %r4301};
	@%p205 bra 	$L__BB0_584;

	st.global.v2.u32 	[%rd34+1536], {%r7667, %r7664};

$L__BB0_584:
	setp.ge.s32 	%p308, %r23, %r2130;
	@%p308 bra 	$L__BB0_586;

	mul.lo.s32 	%r5333, %r1730, 320;
	mul.lo.s32 	%r5334, %r24, 320;
	mad.lo.s32 	%r5335, %r5333, %r23, %r5334;
	add.s32 	%r5339, %r1785, -64;
	mad.lo.s32 	%r5343, %r5339, %r2135, %r2132;
	add.s32 	%r5344, %r5335, %r5343;
	shl.b32 	%r5345, %r5344, 2;
	mov.u32 	%r5346, _ZN6kernel5shmemE;
	add.s32 	%r5347, %r5346, %r5345;
	shl.b32 	%r5348, %r28, 4;
	add.s32 	%r5349, %r5347, %r5348;
	st.shared.v4.u32 	[%r5349], {%r7718, %r7717, %r7713, %r7711};
	shl.b32 	%r5350, %r28, 3;
	add.s32 	%r5351, %r5347, %r5350;
	st.shared.v2.u32 	[%r5351+512], {%r7479, %r7476};
	st.shared.v4.u32 	[%r5349+768], {%r7492, %r7487, %r7467, %r7458};

$L__BB0_586:
	setp.ge.s32 	%p309, %r24, %r2135;
	@%p309 bra 	$L__BB0_590;

	mad.lo.s32 	%r5357, %r2531, 384, %r2138;
	mad.lo.s32 	%r5360, %r2133, %r24, %r5357;
	add.s32 	%r5366, %r5360, %r2136;
	shl.b32 	%r5367, %r5366, 2;
	mov.u32 	%r5368, _ZN6kernel5shmemE;
	add.s32 	%r5369, %r5368, %r5367;
	shl.b32 	%r5370, %r28, 3;
	add.s32 	%r5371, %r5369, %r5370;
	@%p308 bra 	$L__BB0_589;

	add.s32 	%r7241, %r5371, -256;
	st.shared.v2.u32 	[%r7241], {%r7491, %r7486};

$L__BB0_589:
	shl.b32 	%r5390, %r28, 4;
	add.s32 	%r5391, %r5369, %r5390;
	st.shared.v4.u32 	[%r5391], {%r7484, %r7482, %r7450, %r7442};
	add.s32 	%r7242, %r5371, -256;
	st.shared.v2.u32 	[%r7242+768], {%r7451, %r7443};
	st.shared.v4.u32 	[%r5391+768], {%r7716, %r7715, %r7704, %r7703};

$L__BB0_590:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_592;

	mul.lo.s32 	%r5392, %r1730, 320;
	add.s32 	%r5393, %r23, -1;
	mul.lo.s32 	%r5394, %r24, 320;
	mad.lo.s32 	%r5395, %r5392, %r5393, %r5394;
	shl.b32 	%r5396, %r5395, 2;
	mov.u32 	%r5397, _ZN6kernel5shmemE;
	add.s32 	%r5398, %r5397, %r5396;
	add.s32 	%r5399, %r5398, -256;
	shl.b32 	%r5400, %r28, 4;
	add.s32 	%r5401, %r5399, %r5400;
	ld.shared.v4.u32 	{%r7662, %r7660, %r7669, %r7670}, [%r5401+256];
	ld.shared.v4.u32 	{%r7668, %r7665, %r7657, %r7658}, [%r5401+1024];
	shl.b32 	%r5410, %r28, 3;
	add.s32 	%r5411, %r5399, %r5410;
	ld.shared.v2.u32 	{%r7661, %r7659}, [%r5411+768];

$L__BB0_592:
	@%p203 bra 	$L__BB0_595;

	mad.lo.s32 	%r5416, %r1729, 384, -64;
	add.s32 	%r5417, %r24, -1;
	mul.lo.s32 	%r5418, %r5416, %r5417;
	mad.lo.s32 	%r5421, %r2131, %r2130, %r5418;
	mad.lo.s32 	%r5422, %r2531, 384, %r5421;
	shl.b32 	%r5423, %r5422, 2;
	mov.u32 	%r5424, _ZN6kernel5shmemE;
	add.s32 	%r5425, %r5424, %r5423;
	add.s32 	%r5426, %r5425, -256;
	shl.b32 	%r5427, %r28, 4;
	add.s32 	%r5428, %r5426, %r5427;
	ld.shared.v4.u32 	{%r7682, %r7681, %r7677, %r7675}, [%r5428+256];
	ld.shared.v4.u32 	{%r7672, %r7671, %r7674, %r7680}, [%r5428+1024];
	shl.b32 	%r5437, %r28, 3;
	add.s32 	%r5438, %r5426, %r5437;
	ld.shared.v2.u32 	{%r7678, %r7676}, [%r5438+768];
	@%p200 bra 	$L__BB0_595;

	add.s32 	%r7243, %r5438, 768;
	ld.shared.v2.u32 	{%r7663, %r7666}, [%r7243+768];

$L__BB0_595:
	ld.param.u64 	%rd519, [%rd1+80];
	cvta.to.global.u64 	%rd35, %rd519;
	mov.u32 	%r7794, %r7628;
	mov.u32 	%r7795, %r7629;
	mov.u32 	%r7797, %r7631;
	mov.u32 	%r7798, %r7632;
	mov.u32 	%r7818, %r7648;
	mov.u32 	%r7822, %r7652;
	mov.u32 	%r7803, %r7635;
	mov.u32 	%r7804, %r7636;
	mov.u32 	%r7805, %r7637;
	mov.u32 	%r7806, %r7638;
	mov.u32 	%r7823, %r7653;
	mov.u32 	%r7824, %r7654;
	@%p205 bra 	$L__BB0_599;

	mad.lo.s32 	%r5444, %r651, %r1732, %r26;
	mad.lo.s32 	%r5445, %r5444, 768, 384;
	mul.lo.s32 	%r5446, %r5445, %r1730;
	mad.lo.s32 	%r5447, %r24, 384, %r5446;
	add.s32 	%r5448, %r5447, -128;
	mul.wide.s32 	%rd520, %r5448, 4;
	add.s64 	%rd521, %rd35, %rd520;
	add.s64 	%rd523, %rd521, %rd273;
	add.s64 	%rd36, %rd523, 512;
	mov.u32 	%r7818, %r7648;
	mov.u32 	%r7822, %r7652;
	mov.u32 	%r7823, %r7653;
	mov.u32 	%r7824, %r7654;
	@%p203 bra 	$L__BB0_598;

	ld.global.v4.u32 	{%r7823, %r7824, %r7818, %r7822}, [%rd36+-512];

$L__BB0_598:
	ld.global.v4.u32 	{%r7804, %r7806, %r7803, %r7805}, [%rd36];
	ld.global.v4.u32 	{%r7798, %r7795, %r7794, %r7797}, [%rd36+512];
	ld.global.v4.u32 	{%r7627, %r7630, %r7634, %r7633}, [%rd36+1024];

$L__BB0_599:
	mov.u32 	%r7809, %r7639;
	mov.u32 	%r7810, %r7640;
	mov.u32 	%r7811, %r7641;
	mov.u32 	%r7812, %r7642;
	mov.u32 	%r7813, %r7643;
	mov.u32 	%r7814, %r7644;
	mov.u32 	%r7815, %r7645;
	mov.u32 	%r7820, %r7650;
	@%p208 bra 	$L__BB0_601;

	mad.lo.s32 	%r5466, %r652, %r1731, %r25;
	mad.lo.s32 	%r5474, %r2531, 384, %r52;
	mad.lo.s32 	%r5475, %r1788, %r51, %r5474;
	mad.lo.s32 	%r5476, %r5466, %r1786, %r5475;
	mul.wide.s32 	%rd524, %r5476, 4;
	add.s64 	%rd525, %rd35, %rd524;
	add.s64 	%rd527, %rd525, %rd273;
	ld.global.v4.u32 	{%r7647, %r7646, %r7651, %r7649}, [%rd527];
	ld.global.v4.u32 	{%r7815, %r7812, %r7809, %r7810}, [%rd527+512];
	ld.global.v4.u32 	{%r7814, %r7811, %r7813, %r7820}, [%rd527+1024];
	ld.global.v4.u32 	{%r7823, %r7824, %r7818, %r7822}, [%rd527+1536];

$L__BB0_601:
	neg.s32 	%r7249, %r1734;
	not.b32 	%r7248, %r26;
	add.s32 	%r7247, %r1732, %r7248;
	mul.lo.s32 	%r7246, %r7247, %r1733;
	not.b32 	%r7245, %r25;
	add.s32 	%r7244, %r1731, %r7245;
	mad.lo.s32 	%r5500, %r7244, %r1733, %r7246;
	add.s32 	%r5501, %r5500, %r1734;
	add.s32 	%r5510, %r5501, %r2537;
	add.s32 	%r1443, %r7514, 1;
	add.s32 	%r5511, %r1443, %r5510;
	div.s32 	%r5512, %r5511, %r1734;
	mad.lo.s32 	%r1444, %r5512, %r7249, %r5511;
	mad.lo.s32 	%r5519, %r5512, %r30, %r2548;
	ld.param.u64 	%rd528, [%rd1+96];
	cvta.to.global.u64 	%rd529, %rd528;
	rem.s32 	%r5520, %r5519, %r1735;
	shr.u32 	%r5521, %r5520, 31;
	add.s32 	%r5522, %r5520, %r5521;
	shr.s32 	%r5523, %r5522, 1;
	mad.lo.s32 	%r5524, %r5523, %r1734, %r1444;
	shl.b32 	%r5525, %r5524, 5;
	add.s32 	%r5526, %r5525, %r28;
	cvt.s64.s32 	%rd37, %r5526;
	mul.wide.s32 	%rd530, %r5526, 4;
	add.s64 	%rd531, %rd529, %rd530;
	ld.global.u32 	%r7516, [%rd531];
	ld.param.u64 	%rd532, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd532;
	@%p71 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	shl.b64 	%rd535, %rd37, 2;
	add.s64 	%rd536, %rd38, %rd535;
	ld.global.u32 	%r7515, [%rd536];
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	shl.b32 	%r5527, %r1444, 5;
	add.s32 	%r5528, %r5527, %r28;
	mul.wide.s32 	%rd533, %r5528, 16;
	add.s64 	%rd534, %rd38, %rd533;
	ld.global.v4.u32 	{%r5529, %r5530, %r5531, %r5532}, [%rd534];
	mov.u32 	%r7496, %r7500;
	mov.u32 	%r7497, %r7501;
	mov.u32 	%r7498, %r7502;
	mov.u32 	%r7499, %r7503;
	mov.u32 	%r7500, %r7504;
	mov.u32 	%r7501, %r7505;
	mov.u32 	%r7502, %r7506;
	mov.u32 	%r7503, %r7507;
	mov.u32 	%r7504, %r5532;
	mov.u32 	%r7505, %r5531;
	mov.u32 	%r7506, %r5530;
	mov.u32 	%r7507, %r5529;

$L__BB0_604:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5533, {low,high};}

	// end inline asm
	selp.b32 	%r5535, %r7345, %r5533, %p12;
	// begin inline asm
	{mul.f16x2 %r7493,%r5535,%r7470;
}
	// end inline asm
	selp.b32 	%r5538, %r7349, %r5533, %p12;
	// begin inline asm
	{mul.f16x2 %r7488,%r5538,%r7461;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5540, {low,high};}

	// end inline asm
	selp.b32 	%r5542, %r7345, %r5540, %p12;
	// begin inline asm
	{mul.f16x2 %r7480,%r5542,%r7434;
}
	// end inline asm
	selp.b32 	%r5545, %r7349, %r5540, %p12;
	// begin inline asm
	{mul.f16x2 %r7477,%r5545,%r7429;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5547, {low,high};}

	// end inline asm
	selp.b32 	%r5549, %r7345, %r5547, %p12;
	// begin inline asm
	{mul.f16x2 %r5548,%r5549,%r7426;
}
	// end inline asm
	selp.b32 	%r5552, %r7349, %r5547, %p12;
	// begin inline asm
	{mul.f16x2 %r5551,%r5552,%r7419;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5554, {low,high};}

	// end inline asm
	selp.b32 	%r5556, %r7345, %r5554, %p12;
	// begin inline asm
	{mul.f16x2 %r5555,%r5556,%r7425;
}
	// end inline asm
	selp.b32 	%r5559, %r7349, %r5554, %p12;
	// begin inline asm
	{mul.f16x2 %r5558,%r5559,%r7418;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5561, {low,high};}

	// end inline asm
	selp.b32 	%r5563, %r7345, %r5561, %p12;
	// begin inline asm
	{mul.f16x2 %r7470,%r5563,%r7424;
}
	// end inline asm
	selp.b32 	%r5566, %r7349, %r5561, %p12;
	// begin inline asm
	{mul.f16x2 %r7461,%r5566,%r7417;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5568, {low,high};}

	// end inline asm
	selp.b32 	%r5570, %r7345, %r5568, %p12;
	// begin inline asm
	{mul.f16x2 %r5569,%r5570,%r7412;
}
	// end inline asm
	selp.b32 	%r5573, %r7349, %r5568, %p12;
	// begin inline asm
	{mul.f16x2 %r5572,%r5573,%r7407;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5575, {low,high};}

	// end inline asm
	selp.b32 	%r5577, %r7345, %r5575, %p12;
	// begin inline asm
	{mul.f16x2 %r7453,%r5577,%r7411;
}
	// end inline asm
	selp.b32 	%r5580, %r7349, %r5575, %p12;
	// begin inline asm
	{mul.f16x2 %r7445,%r5580,%r7406;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5582, {low,high};}

	// end inline asm
	selp.b32 	%r5584, %r7345, %r5582, %p12;
	// begin inline asm
	{mul.f16x2 %r5583,%r5584,%r7391;
}
	// end inline asm
	selp.b32 	%r5587, %r7349, %r5582, %p12;
	// begin inline asm
	{mul.f16x2 %r5586,%r5587,%r7384;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5589, {low,high};}

	// end inline asm
	selp.b32 	%r5591, %r7345, %r5589, %p12;
	// begin inline asm
	{mul.f16x2 %r5590,%r5591,%r7645;
}
	// end inline asm
	selp.b32 	%r5594, %r7349, %r5589, %p12;
	// begin inline asm
	{mul.f16x2 %r5593,%r5594,%r7642;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5596, {low,high};}

	// end inline asm
	selp.b32 	%r5598, %r7345, %r5596, %p12;
	// begin inline asm
	{mul.f16x2 %r7434,%r5598,%r7644;
}
	// end inline asm
	selp.b32 	%r5601, %r7349, %r5596, %p12;
	// begin inline asm
	{mul.f16x2 %r7429,%r5601,%r7641;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5603, {low,high};}

	// end inline asm
	selp.b32 	%r5605, %r7345, %r5603, %p12;
	// begin inline asm
	{mul.f16x2 %r5604,%r5605,%r7378;
}
	// end inline asm
	selp.b32 	%r5608, %r7349, %r5603, %p12;
	// begin inline asm
	{mul.f16x2 %r5607,%r5608,%r7371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5610, {low,high};}

	// end inline asm
	selp.b32 	%r5612, %r7345, %r5610, %p12;
	// begin inline asm
	{mul.f16x2 %r5611,%r5612,%r7377;
}
	// end inline asm
	selp.b32 	%r5615, %r7349, %r5610, %p12;
	// begin inline asm
	{mul.f16x2 %r5614,%r5615,%r7370;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5617, {low,high};}

	// end inline asm
	selp.b32 	%r5619, %r7345, %r5617, %p12;
	// begin inline asm
	{mul.f16x2 %r7424,%r5619,%r7376;
}
	// end inline asm
	selp.b32 	%r5622, %r7349, %r5617, %p12;
	// begin inline asm
	{mul.f16x2 %r7417,%r5622,%r7369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5624, {low,high};}

	// end inline asm
	selp.b32 	%r5626, %r7345, %r5624, %p12;
	// begin inline asm
	{mul.f16x2 %r5625,%r5626,%r7364;
}
	// end inline asm
	selp.b32 	%r5629, %r7349, %r5624, %p12;
	// begin inline asm
	{mul.f16x2 %r5628,%r5629,%r7356;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5631, {low,high};}

	// end inline asm
	selp.b32 	%r5633, %r7345, %r5631, %p12;
	// begin inline asm
	{mul.f16x2 %r5632,%r5633,%r7363;
}
	// end inline asm
	selp.b32 	%r5636, %r7349, %r5631, %p12;
	// begin inline asm
	{mul.f16x2 %r5635,%r5636,%r7355;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5638, {low,high};}

	// end inline asm
	selp.b32 	%r5640, %r7345, %r5638, %p12;
	// begin inline asm
	{mul.f16x2 %r7411,%r5640,%r7632;
}
	// end inline asm
	selp.b32 	%r5643, %r7349, %r5638, %p12;
	// begin inline asm
	{mul.f16x2 %r7406,%r5643,%r7629;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5645, {low,high};}

	// end inline asm
	selp.b32 	%r5647, %r7345, %r5645, %p12;
	// begin inline asm
	{mul.f16x2 %r5646,%r5647,%r7628;
}
	// end inline asm
	selp.b32 	%r5650, %r7349, %r5645, %p12;
	// begin inline asm
	{mul.f16x2 %r5649,%r5650,%r7631;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5652, {low,high};}

	// end inline asm
	selp.b32 	%r5654, %r7345, %r5652, %p12;
	// begin inline asm
	{mul.f16x2 %r5653,%r5654,%r7639;
}
	// end inline asm
	selp.b32 	%r5657, %r7349, %r5652, %p12;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5659, {low,high};}

	// end inline asm
	selp.b32 	%r5661, %r7345, %r5659, %p12;
	// begin inline asm
	{mul.f16x2 %r5660,%r5661,%r7387;
}
	// end inline asm
	selp.b32 	%r5664, %r7349, %r5659, %p12;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7433;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5666, {low,high};}

	// end inline asm
	selp.b32 	%r5668, %r7345, %r5666, %p12;
	// begin inline asm
	{mul.f16x2 %r5667,%r5668,%r7643;
}
	// end inline asm
	selp.b32 	%r5671, %r7349, %r5666, %p12;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7650;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5673, {low,high};}

	// end inline asm
	selp.b32 	%r5675, %r7345, %r5673, %p12;
	// begin inline asm
	{mul.f16x2 %r7376,%r5675,%r7648;
}
	// end inline asm
	selp.b32 	%r5678, %r7349, %r5673, %p12;
	// begin inline asm
	{mul.f16x2 %r7369,%r5678,%r7652;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5680, {low,high};}

	// end inline asm
	selp.b32 	%r5682, %r7345, %r5680, %p12;
	// begin inline asm
	{mul.f16x2 %r5681,%r5682,%r7635;
}
	// end inline asm
	selp.b32 	%r5685, %r7349, %r5680, %p12;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7637;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5687, {low,high};}

	// end inline asm
	selp.b32 	%r5689, %r7345, %r5687, %p12;
	// begin inline asm
	{mul.f16x2 %r5688,%r5689,%r7636;
}
	// end inline asm
	selp.b32 	%r5692, %r7349, %r5687, %p12;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7638;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5694, {low,high};}

	// end inline asm
	selp.b32 	%r5696, %r7345, %r5694, %p12;
	// begin inline asm
	{mul.f16x2 %r5695,%r5696,%r7653;
}
	// end inline asm
	selp.b32 	%r5699, %r7349, %r5694, %p12;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5701,%r7494,%r3649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5704,%r3760,%r3606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5707,%r5701,%r5704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5710,%r7253,%r5707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5713,%r7493,%r5710;
}
	// end inline asm
	@%p12 bra 	$L__BB0_606;

	mov.u32 	%r7493, %r5713;

$L__BB0_606:
	// begin inline asm
	{sub.f16x2 %r5716,%r7489,%r3715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5719,%r3794,%r3683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5722,%r5716,%r5719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5725,%r7253,%r5722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5728,%r7488,%r5725;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;

	mov.u32 	%r7488, %r5728;

$L__BB0_608:
	// begin inline asm
	{sub.f16x2 %r5731,%r7481,%r3882;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5734,%r7495,%r3839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5737,%r5731,%r5734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5740,%r7253,%r5737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5743,%r7480,%r5740;
}
	// end inline asm
	@%p12 bra 	$L__BB0_610;

	mov.u32 	%r7480, %r5743;

$L__BB0_610:
	// begin inline asm
	{sub.f16x2 %r5746,%r7478,%r3948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5749,%r7490,%r3916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5752,%r5746,%r5749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5755,%r7253,%r5752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5758,%r7477,%r5755;
}
	// end inline asm
	@%p12 bra 	$L__BB0_612;

	mov.u32 	%r7477, %r5758;

$L__BB0_612:
	// begin inline asm
	{sub.f16x2 %r5761,%r7489,%r7494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5764,%r7344,%r5761;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7842,%r5548;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7842,%r7345,%r5761;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r5775, 31;
	mov.u32 	%r5777, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5773,%r7842,%r5775,%r2234,%r5777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5778,%r5764,%r5773;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5781,%r7582,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5784,%r5781,%r5778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5787,%r7253,%r5784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r5548,%r5787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r7490,%r7495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r7344,%r5793;
}
	// end inline asm
	mov.u32 	%r7843, %r5555;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7843,%r7345,%r5793;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5805,%r7843,%r5775,%r2234,%r5777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5810,%r5796,%r5805;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5813,%r7570,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5816,%r5810,%r5813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5819,%r7253,%r5816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7471,%r5555,%r5819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5825,%r7474,%r7494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5828,%r7485,%r7495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5831,%r5825,%r5828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5834,%r7253,%r5831;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5837,%r7470,%r5834;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;

	mov.u32 	%r7470, %r5837;

$L__BB0_619:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7494;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r5848, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5844,%r7494,%r413,%r2234,%r5848;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5844;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5850, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r5850,%r7489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r7348,%r5851;
}
	// end inline asm
	@%p12 bra 	$L__BB0_621;
	bra.uni 	$L__BB0_620;

$L__BB0_621:
	// begin inline asm
	{neg.f16x2 %r7845,%r5551;
}
	// end inline asm
	bra.uni 	$L__BB0_622;

$L__BB0_620:
	// begin inline asm
	{mul.f16x2 %r7845,%r7349,%r5851;
}
	// end inline asm

$L__BB0_622:
	mov.u32 	%r5867, 31;
	mov.u32 	%r5891, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5865,%r7845,%r5867,%r2234,%r5891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5870,%r5854,%r5865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5873,%r7579,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5876,%r5873,%r5870;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5879,%r7253,%r5876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7463,%r5551,%r5879;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7495;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5887,%r7495,%r413,%r2234,%r5891;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5887;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5893, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5894,%r5893,%r7490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5897,%r7348,%r5894;
}
	// end inline asm
	mov.u32 	%r7846, %r5558;
	@%p12 bra 	$L__BB0_624;

	// begin inline asm
	{mul.f16x2 %r7846,%r7349,%r5894;
}
	// end inline asm

$L__BB0_624:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5908,%r7846,%r5867,%r2234,%r5891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5913,%r5897,%r5908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5916,%r7567,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r5913,%r5916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5922,%r7253,%r5919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7462,%r5558,%r5922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r7465,%r7489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5931,%r7483,%r7490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5934,%r5928,%r5931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5937,%r7253,%r5934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5940,%r7461,%r5937;
}
	// end inline asm
	@%p12 bra 	$L__BB0_626;

	mov.u32 	%r7461, %r5940;

$L__BB0_626:
	// begin inline asm
	{sub.f16x2 %r5945,%r7483,%r7485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5948,%r7344,%r5945;
}
	// end inline asm
	mov.u32 	%r7848, %r5569;
	@%p12 bra 	$L__BB0_628;

	// begin inline asm
	{mul.f16x2 %r7848,%r7345,%r5945;
}
	// end inline asm

$L__BB0_628:
	mov.u32 	%r5957, 31;
	mov.u32 	%r5959, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5955,%r7848,%r5957,%r2234,%r5959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5960,%r5948,%r5955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5963,%r7564,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5966,%r5960,%r5963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5969,%r7253,%r5966;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r5569,%r5969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5975,%r7456,%r4220;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5978,%r4361,%r7485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5981,%r5975,%r5978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5984,%r7253,%r5981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5987,%r7453,%r5984;
}
	// end inline asm
	@%p12 bra 	$L__BB0_630;

	mov.u32 	%r7453, %r5987;

$L__BB0_630:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7485;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5994,%r7485,%r413,%r2234,%r5959;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5994;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6000, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6001,%r6000,%r7483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6004,%r7348,%r6001;
}
	// end inline asm
	mov.u32 	%r7850, %r5572;
	@%p12 bra 	$L__BB0_632;

	// begin inline asm
	{mul.f16x2 %r7850,%r7349,%r6001;
}
	// end inline asm

$L__BB0_632:
	mov.u32 	%r6015, 31;
	mov.u32 	%r6017, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6013,%r7850,%r6015,%r2234,%r6017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6018,%r6004,%r6013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r7561,%r7579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6024,%r6018,%r6021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6027,%r7253,%r6024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7446,%r5572,%r6027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r7448,%r4301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r4395,%r7483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6039,%r6033,%r6036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6042,%r7253,%r6039;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6045,%r7445,%r6042;
}
	// end inline asm
	@%p12 bra 	$L__BB0_634;

	mov.u32 	%r7445, %r6045;

$L__BB0_634:
	// begin inline asm
	{sub.f16x2 %r6050,%r7478,%r7481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6053,%r7344,%r6050;
}
	// end inline asm
	@%p12 bra 	$L__BB0_636;
	bra.uni 	$L__BB0_635;

$L__BB0_636:
	// begin inline asm
	{neg.f16x2 %r7852,%r5583;
}
	// end inline asm
	bra.uni 	$L__BB0_637;

$L__BB0_635:
	// begin inline asm
	{mul.f16x2 %r7852,%r7345,%r6050;
}
	// end inline asm

$L__BB0_637:
	mov.u32 	%r6064, 31;
	mov.u32 	%r6066, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6062,%r7852,%r6064,%r2234,%r6066;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6067,%r6053,%r6062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6070,%r7570,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r6070,%r6067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6076,%r7253,%r6073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7436,%r5583,%r6076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6082,%r7681,%r7682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6085,%r7344,%r6082;
}
	// end inline asm
	mov.u32 	%r7853, %r5590;
	@%p12 bra 	$L__BB0_639;

	// begin inline asm
	{mul.f16x2 %r7853,%r7345,%r6082;
}
	// end inline asm

$L__BB0_639:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6094,%r7853,%r6064,%r2234,%r6066;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6099,%r6085,%r6094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6102,%r7677,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6105,%r6099,%r6102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6108,%r7253,%r6105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7435,%r5590,%r6108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6114,%r7678,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6117,%r7475,%r7682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6120,%r6114,%r6117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6123,%r7253,%r6120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6126,%r7434,%r6123;
}
	// end inline asm
	@%p12 bra 	$L__BB0_641;

	mov.u32 	%r7434, %r6126;

$L__BB0_641:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7481;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6137, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6133,%r7481,%r413,%r2234,%r6137;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6133;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6139, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6140,%r6139,%r7478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6143,%r7348,%r6140;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7855,%r5586;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7855,%r7349,%r6140;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6156, 31;
	mov.u32 	%r6180, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6154,%r7855,%r6156,%r2234,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6159,%r6143,%r6154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6162,%r7567,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6165,%r6162,%r6159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6168,%r7253,%r6165;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7431,%r5586,%r6168;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7682;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6176,%r7682,%r413,%r2234,%r6180;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6176;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6182, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6183,%r6182,%r7681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6186,%r7348,%r6183;
}
	// end inline asm
	mov.u32 	%r7856, %r5593;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7856,%r7349,%r6183;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6197,%r7856,%r6156,%r2234,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6202,%r6186,%r6197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6205,%r7675,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6208,%r6202,%r6205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6211,%r7253,%r6208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7430,%r5593,%r6211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6217,%r7676,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6220,%r7466,%r7681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6223,%r6217,%r6220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6226,%r7253,%r6223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6229,%r7429,%r6226;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;

	mov.u32 	%r7429, %r6229;

$L__BB0_648:
	// begin inline asm
	{sub.f16x2 %r6234,%r7465,%r7474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6237,%r7344,%r6234;
}
	// end inline asm
	@%p12 bra 	$L__BB0_650;
	bra.uni 	$L__BB0_649;

$L__BB0_650:
	// begin inline asm
	{neg.f16x2 %r7858,%r5604;
}
	// end inline asm
	bra.uni 	$L__BB0_651;

$L__BB0_649:
	// begin inline asm
	{mul.f16x2 %r7858,%r7345,%r6234;
}
	// end inline asm

$L__BB0_651:
	mov.u32 	%r6248, 31;
	mov.u32 	%r6250, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6246,%r7858,%r6248,%r2234,%r6250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6251,%r6237,%r6246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6254,%r7564,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r6254,%r6251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6260,%r7253,%r6257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7426,%r5604,%r6260;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6266,%r7466,%r7475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6269,%r7344,%r6266;
}
	// end inline asm
	mov.u32 	%r7859, %r5611;
	@%p12 bra 	$L__BB0_653;

	// begin inline asm
	{mul.f16x2 %r7859,%r7345,%r6266;
}
	// end inline asm

$L__BB0_653:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6278,%r7859,%r6248,%r2234,%r6250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6283,%r6269,%r6278;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6286,%r7557,%r7570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6289,%r6283,%r6286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6292,%r7253,%r6289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7425,%r5611,%r6292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6298,%r7428,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6301,%r7457,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6304,%r6298,%r6301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6307,%r7253,%r6304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6310,%r7424,%r6307;
}
	// end inline asm
	@%p12 bra 	$L__BB0_655;

	mov.u32 	%r7424, %r6310;

$L__BB0_655:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7474;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6321, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6317,%r7474,%r413,%r2234,%r6321;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6317;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6323, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r6323,%r7465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r7348,%r6324;
}
	// end inline asm
	@%p12 bra 	$L__BB0_657;
	bra.uni 	$L__BB0_656;

$L__BB0_657:
	// begin inline asm
	{neg.f16x2 %r7861,%r5607;
}
	// end inline asm
	bra.uni 	$L__BB0_658;

$L__BB0_656:
	// begin inline asm
	{mul.f16x2 %r7861,%r7349,%r6324;
}
	// end inline asm

$L__BB0_658:
	mov.u32 	%r6340, 31;
	mov.u32 	%r6364, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6338,%r7861,%r6340,%r2234,%r6364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6343,%r6327,%r6338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6346,%r7561,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6349,%r6346,%r6343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6352,%r7253,%r6349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7419,%r5607,%r6352;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7475;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6360,%r7475,%r413,%r2234,%r6364;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6360;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6366, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6367,%r6366,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6370,%r7348,%r6367;
}
	// end inline asm
	mov.u32 	%r7862, %r5614;
	@%p12 bra 	$L__BB0_660;

	// begin inline asm
	{mul.f16x2 %r7862,%r7349,%r6367;
}
	// end inline asm

$L__BB0_660:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6381,%r7862,%r6340,%r2234,%r6364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6386,%r6370,%r6381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6389,%r7555,%r7567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6392,%r6386,%r6389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6395,%r7253,%r6392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7418,%r5614,%r6395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6401,%r7421,%r7465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6404,%r7449,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6407,%r6401,%r6404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r7253,%r6407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6413,%r7417,%r6410;
}
	// end inline asm
	@%p12 bra 	$L__BB0_662;

	mov.u32 	%r7417, %r6413;

$L__BB0_662:
	// begin inline asm
	{sub.f16x2 %r6418,%r7448,%r7456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6421,%r7344,%r6418;
}
	// end inline asm
	@%p12 bra 	$L__BB0_664;
	bra.uni 	$L__BB0_663;

$L__BB0_664:
	// begin inline asm
	{neg.f16x2 %r7864,%r5625;
}
	// end inline asm
	bra.uni 	$L__BB0_665;

$L__BB0_663:
	// begin inline asm
	{mul.f16x2 %r7864,%r7345,%r6418;
}
	// end inline asm

$L__BB0_665:
	mov.u32 	%r6432, 31;
	mov.u32 	%r6434, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6430,%r7864,%r6432,%r2234,%r6434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6435,%r6421,%r6430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6438,%r7560,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r6438,%r6435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6444,%r7253,%r6441;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7413,%r5625,%r6444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6450,%r7449,%r7457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6453,%r7344,%r6450;
}
	// end inline asm
	mov.u32 	%r7865, %r5632;
	@%p12 bra 	$L__BB0_667;

	// begin inline asm
	{mul.f16x2 %r7865,%r7345,%r6450;
}
	// end inline asm

$L__BB0_667:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6462,%r7865,%r6432,%r2234,%r6434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6467,%r6453,%r6462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6470,%r7554,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6473,%r6467,%r6470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6476,%r7253,%r6473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7412,%r5632,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6482,%r7661,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6485,%r7668,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6488,%r6482,%r6485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6491,%r7253,%r6488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6494,%r7411,%r6491;
}
	// end inline asm
	@%p12 bra 	$L__BB0_669;

	mov.u32 	%r7411, %r6494;

$L__BB0_669:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7456;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6505, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6501,%r7456,%r413,%r2234,%r6505;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6501;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6507, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r6507,%r7448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6511,%r7348,%r6508;
}
	// end inline asm
	@%p12 bra 	$L__BB0_671;
	bra.uni 	$L__BB0_670;

$L__BB0_671:
	// begin inline asm
	{neg.f16x2 %r7867,%r5628;
}
	// end inline asm
	bra.uni 	$L__BB0_672;

$L__BB0_670:
	// begin inline asm
	{mul.f16x2 %r7867,%r7349,%r6508;
}
	// end inline asm

$L__BB0_672:
	mov.u32 	%r6524, 31;
	mov.u32 	%r6548, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6522,%r7867,%r6524,%r2234,%r6548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6527,%r6511,%r6522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6530,%r7559,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6533,%r6530,%r6527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6536,%r7253,%r6533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7408,%r5628,%r6536;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7457;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6544,%r7457,%r413,%r2234,%r6548;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6544;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6550, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6551,%r6550,%r7449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6554,%r7348,%r6551;
}
	// end inline asm
	mov.u32 	%r7868, %r5635;
	@%p12 bra 	$L__BB0_674;

	// begin inline asm
	{mul.f16x2 %r7868,%r7349,%r6551;
}
	// end inline asm

$L__BB0_674:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6565,%r7868,%r6524,%r2234,%r6548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6554,%r6565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6573,%r7553,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6576,%r6570,%r6573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6579,%r7253,%r6576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7407,%r5635,%r6579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6585,%r7659,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6588,%r7665,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6591,%r6585,%r6588;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6594,%r7253,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6597,%r7406,%r6594;
}
	// end inline asm
	@%p12 bra 	$L__BB0_676;

	mov.u32 	%r7406, %r6597;

$L__BB0_676:
	// begin inline asm
	{sub.f16x2 %r6602,%r7665,%r7668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6605,%r7344,%r6602;
}
	// end inline asm
	mov.u32 	%r7870, %r5646;
	@%p12 bra 	$L__BB0_678;

	// begin inline asm
	{mul.f16x2 %r7870,%r7345,%r6602;
}
	// end inline asm

$L__BB0_678:
	mov.u32 	%r6614, 31;
	mov.u32 	%r6638, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6612,%r7870,%r6614,%r2234,%r6638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6617,%r6605,%r6612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6620,%r7657,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6623,%r6617,%r6620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6626,%r7253,%r6623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7402,%r5646,%r6626;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7668;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6634,%r7668,%r413,%r2234,%r6638;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6634;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6640, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6641,%r6640,%r7665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6644,%r7348,%r6641;
}
	// end inline asm
	mov.u32 	%r7871, %r5649;
	@%p12 bra 	$L__BB0_680;

	// begin inline asm
	{mul.f16x2 %r7871,%r7349,%r6641;
}
	// end inline asm

$L__BB0_680:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6655,%r7871,%r6614,%r2234,%r6638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6660,%r6644,%r6655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6663,%r7658,%r7559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6666,%r6660,%r6663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6669,%r7253,%r6666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7398,%r5649,%r6669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6675,%r7676,%r7678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6678,%r7344,%r6675;
}
	// end inline asm
	@%p12 bra 	$L__BB0_682;
	bra.uni 	$L__BB0_681;

$L__BB0_682:
	// begin inline asm
	{neg.f16x2 %r7872,%r5653;
}
	// end inline asm
	bra.uni 	$L__BB0_683;

$L__BB0_681:
	// begin inline asm
	{mul.f16x2 %r7872,%r7345,%r6675;
}
	// end inline asm

$L__BB0_683:
	mov.u32 	%r6691, 31;
	mov.u32 	%r6715, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6689,%r7872,%r6691,%r2234,%r6715;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6694,%r6678,%r6689;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6697,%r7557,%r7677;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6700,%r6697,%r6694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6703,%r7253,%r6700;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7391,%r5653,%r6703;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7678;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6711,%r7678,%r413,%r2234,%r6715;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6711;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6717, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6718,%r6717,%r7676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6721,%r7348,%r6718;
}
	// end inline asm
	@%p12 bra 	$L__BB0_685;
	bra.uni 	$L__BB0_684;

$L__BB0_685:
	// begin inline asm
	{neg.f16x2 %r7873,%r5656;
}
	// end inline asm
	bra.uni 	$L__BB0_686;

$L__BB0_684:
	// begin inline asm
	{mul.f16x2 %r7873,%r7349,%r6718;
}
	// end inline asm

$L__BB0_686:
	mov.u32 	%r6736, 31;
	mov.u32 	%r6738, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6734,%r7873,%r6736,%r2234,%r6738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6739,%r6721,%r6734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r7555,%r7675;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6745,%r6742,%r6739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6748,%r7253,%r6745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7384,%r5656,%r6748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6754,%r7421,%r7428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6757,%r7344,%r6754;
}
	// end inline asm
	@%p12 bra 	$L__BB0_688;
	bra.uni 	$L__BB0_687;

$L__BB0_688:
	// begin inline asm
	{neg.f16x2 %r7874,%r5660;
}
	// end inline asm
	bra.uni 	$L__BB0_689;

$L__BB0_687:
	// begin inline asm
	{mul.f16x2 %r7874,%r7345,%r6754;
}
	// end inline asm

$L__BB0_689:
	mov.u32 	%r6770, 31;
	mov.u32 	%r6772, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6768,%r7874,%r6770,%r2234,%r6772;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6773,%r6757,%r6768;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6776,%r7554,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6779,%r6776,%r6773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6782,%r7253,%r6779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7378,%r5660,%r6782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6788,%r7671,%r7672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6791,%r7344,%r6788;
}
	// end inline asm
	mov.u32 	%r7875, %r5667;
	@%p12 bra 	$L__BB0_691;

	// begin inline asm
	{mul.f16x2 %r7875,%r7345,%r6788;
}
	// end inline asm

$L__BB0_691:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6800,%r7875,%r6770,%r2234,%r6772;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6805,%r6791,%r6800;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6808,%r7674,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6811,%r6805,%r6808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6814,%r7253,%r6811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7377,%r5667,%r6814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6820,%r7663,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6823,%r7662,%r7672;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6826,%r6820,%r6823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6829,%r7253,%r6826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6832,%r7376,%r6829;
}
	// end inline asm
	@%p12 bra 	$L__BB0_693;

	mov.u32 	%r7376, %r6832;

$L__BB0_693:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7428;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r6843, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6839,%r7428,%r413,%r2234,%r6843;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6839;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6845, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6846,%r6845,%r7421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6849,%r7348,%r6846;
}
	// end inline asm
	@%p12 bra 	$L__BB0_695;
	bra.uni 	$L__BB0_694;

$L__BB0_695:
	// begin inline asm
	{neg.f16x2 %r7877,%r5663;
}
	// end inline asm
	bra.uni 	$L__BB0_696;

$L__BB0_694:
	// begin inline asm
	{mul.f16x2 %r7877,%r7349,%r6846;
}
	// end inline asm

$L__BB0_696:
	mov.u32 	%r6862, 31;
	mov.u32 	%r6886, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6860,%r7877,%r6862,%r2234,%r6886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6865,%r6849,%r6860;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6868,%r7553,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6871,%r6868,%r6865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6874,%r7253,%r6871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7371,%r5663,%r6874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7672;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6882,%r7672,%r413,%r2234,%r6886;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6882;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6888, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6889,%r6888,%r7671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6892,%r7348,%r6889;
}
	// end inline asm
	mov.u32 	%r7878, %r5670;
	@%p12 bra 	$L__BB0_698;

	// begin inline asm
	{mul.f16x2 %r7878,%r7349,%r6889;
}
	// end inline asm

$L__BB0_698:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6903,%r7878,%r6862,%r2234,%r6886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6908,%r6892,%r6903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6911,%r7680,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6914,%r6908,%r6911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6917,%r7253,%r6914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7370,%r5670,%r6917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6923,%r7666,%r7421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6926,%r7660,%r7671;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6929,%r6923,%r6926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6932,%r7253,%r6929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6935,%r7369,%r6932;
}
	// end inline asm
	@%p12 bra 	$L__BB0_700;

	mov.u32 	%r7369, %r6935;

$L__BB0_700:
	// begin inline asm
	{sub.f16x2 %r6940,%r7659,%r7661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6943,%r7344,%r6940;
}
	// end inline asm
	@%p12 bra 	$L__BB0_702;
	bra.uni 	$L__BB0_701;

$L__BB0_702:
	// begin inline asm
	{neg.f16x2 %r7880,%r5681;
}
	// end inline asm
	bra.uni 	$L__BB0_703;

$L__BB0_701:
	// begin inline asm
	{mul.f16x2 %r7880,%r7345,%r6940;
}
	// end inline asm

$L__BB0_703:
	mov.u32 	%r6954, 31;
	mov.u32 	%r6956, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6952,%r7880,%r6954,%r2234,%r6956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6957,%r6943,%r6952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6960,%r7657,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6963,%r6960,%r6957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6966,%r7253,%r6963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7364,%r5681,%r6966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6972,%r7660,%r7662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6975,%r7344,%r6972;
}
	// end inline asm
	mov.u32 	%r7881, %r5688;
	@%p12 bra 	$L__BB0_705;

	// begin inline asm
	{mul.f16x2 %r7881,%r7345,%r6972;
}
	// end inline asm

$L__BB0_705:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6984,%r7881,%r6954,%r2234,%r6956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6989,%r6975,%r6984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6992,%r7669,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6995,%r6989,%r6992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6998,%r7253,%r6995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7363,%r5688,%r6998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7661;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7006,%r7661,%r413,%r2234,%r6956;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7006;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7012, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7013,%r7012,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7016,%r7348,%r7013;
}
	// end inline asm
	@%p12 bra 	$L__BB0_707;
	bra.uni 	$L__BB0_706;

$L__BB0_707:
	// begin inline asm
	{neg.f16x2 %r7882,%r5684;
}
	// end inline asm
	bra.uni 	$L__BB0_708;

$L__BB0_706:
	// begin inline asm
	{mul.f16x2 %r7882,%r7349,%r7013;
}
	// end inline asm

$L__BB0_708:
	mov.u32 	%r7031, 31;
	mov.u32 	%r7055, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7029,%r7882,%r7031,%r2234,%r7055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r7016,%r7029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7037,%r7658,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7040,%r7037,%r7034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7043,%r7253,%r7040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7356,%r5684,%r7043;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7662;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7051,%r7662,%r413,%r2234,%r7055;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7051;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7057, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7058,%r7057,%r7660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7061,%r7348,%r7058;
}
	// end inline asm
	mov.u32 	%r7883, %r5691;
	@%p12 bra 	$L__BB0_710;

	// begin inline asm
	{mul.f16x2 %r7883,%r7349,%r7058;
}
	// end inline asm

$L__BB0_710:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7072,%r7883,%r7031,%r2234,%r7055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7077,%r7061,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7080,%r7670,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7083,%r7077,%r7080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7086,%r7253,%r7083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7355,%r5691,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7092,%r7666,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7095,%r7344,%r7092;
}
	// end inline asm
	@%p12 bra 	$L__BB0_712;
	bra.uni 	$L__BB0_711;

$L__BB0_712:
	// begin inline asm
	{neg.f16x2 %r7884,%r5695;
}
	// end inline asm
	bra.uni 	$L__BB0_713;

$L__BB0_711:
	// begin inline asm
	{mul.f16x2 %r7884,%r7345,%r7092;
}
	// end inline asm

$L__BB0_713:
	mov.u32 	%r7108, 31;
	mov.u32 	%r7132, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7106,%r7884,%r7108,%r2234,%r7132;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7095,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7669,%r7674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7117,%r7114,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7120,%r7253,%r7117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7387,%r5695,%r7120;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7663;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7128,%r7663,%r413,%r2234,%r7132;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7128;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7134, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7135,%r7134,%r7666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7138,%r7348,%r7135;
}
	// end inline asm
	@%p12 bra 	$L__BB0_715;
	bra.uni 	$L__BB0_714;

$L__BB0_715:
	// begin inline asm
	{neg.f16x2 %r7885,%r5698;
}
	// end inline asm
	bra.uni 	$L__BB0_716;

$L__BB0_714:
	// begin inline asm
	{mul.f16x2 %r7885,%r7349,%r7135;
}
	// end inline asm

$L__BB0_716:
	mov.u32 	%r7153, 31;
	mov.u32 	%r7155, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7151,%r7885,%r7153,%r2234,%r7155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r7138,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7159,%r7670,%r7680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7162,%r7159,%r7156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7165,%r7253,%r7162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5698,%r7165;
}
	// end inline asm
	bar.sync 	0;
	@%p301 bra 	$L__BB0_719;

	setp.ne.s32 	%p380, %r24, %r2135;
	shl.b32 	%r7174, %r24, 8;
	shl.b32 	%r7178, %r1730, 8;
	or.b32  	%r7179, %r7178, 128;
	mad.lo.s32 	%r7180, %r7179, %r23, %r2138;
	add.s32 	%r7181, %r7180, %r7174;
	shl.b32 	%r7182, %r7181, 2;
	mov.u32 	%r7183, _ZN6kernel5shmemE;
	add.s32 	%r7184, %r7183, %r7182;
	shl.b32 	%r7185, %r28, 4;
	add.s32 	%r1726, %r7184, %r7185;
	st.shared.v4.u32 	[%r1726], {%r7435, %r7430, %r7436, %r7431};
	st.shared.v4.u32 	[%r1726+512], {%r7480, %r7477, %r7471, %r7462};
	@%p380 bra 	$L__BB0_719;

	st.shared.v4.u32 	[%r1726+1024], {%r7472, %r7463, %r7493, %r7488};

$L__BB0_719:
	setp.eq.s32 	%p378, %r24, %r2135;
	@%p378 bra 	$L__BB0_721;

	mul.lo.s32 	%r7189, %r2531, 384;
	mad.lo.s32 	%r7190, %r52, %r24, %r7189;
	mad.lo.s32 	%r7193, %r2133, %r2135, %r7190;
	mad.lo.s32 	%r7196, %r2131, %r2130, %r7193;
	shl.b32 	%r7197, %r7196, 2;
	mov.u32 	%r7198, _ZN6kernel5shmemE;
	add.s32 	%r7199, %r7198, %r7197;
	shl.b32 	%r7200, %r28, 4;
	add.s32 	%r7201, %r7199, %r7200;
	st.shared.v4.u32 	[%r7201], {%r7472, %r7463, %r7493, %r7488};
	st.shared.v4.u32 	[%r7201+512], {%r7454, %r7446, %r7413, %r7408};
	st.shared.v4.u32 	[%r7201+1024], {%r7453, %r7445, %r7402, %r7398};

$L__BB0_721:
	setp.ne.s32 	%p379, %r23, %r2130;
	ld.param.u64 	%rd537, [%rd1+80];
	cvta.to.global.u64 	%rd39, %rd537;
	@%p379 bra 	$L__BB0_723;

	mad.lo.s32 	%r7203, %r651, %r1732, %r26;
	mul.lo.s32 	%r7204, %r7203, %r1730;
	mul.lo.s32 	%r7205, %r7204, 768;
	add.s32 	%r7206, %r1730, %r24;
	mad.lo.s32 	%r7207, %r7206, 384, %r7205;
	add.s32 	%r7208, %r7207, -128;
	mul.wide.s32 	%rd538, %r7208, 4;
	add.s64 	%rd539, %rd39, %rd538;
	add.s64 	%rd541, %rd539, %rd273;
	st.global.v4.u32 	[%rd541+512], {%r7435, %r7430, %r7436, %r7431};
	st.global.v4.u32 	[%rd541+1024], {%r7480, %r7477, %r7471, %r7462};
	st.global.v4.u32 	[%rd541+1536], {%r7472, %r7463, %r7493, %r7488};

$L__BB0_723:
	setp.ne.s32 	%p381, %r24, %r2135;
	@%p381 bra 	$L__BB0_726;

	mad.lo.s32 	%r7210, %r652, %r1731, %r25;
	mad.lo.s32 	%r7218, %r2531, 384, %r52;
	mad.lo.s32 	%r7219, %r1788, %r51, %r7218;
	mad.lo.s32 	%r7220, %r7210, %r1786, %r7219;
	mul.wide.s32 	%rd542, %r7220, 4;
	add.s64 	%rd543, %rd39, %rd542;
	add.s64 	%rd40, %rd543, %rd273;
	st.global.v4.u32 	[%rd40], {%r7472, %r7463, %r7493, %r7488};
	st.global.v4.u32 	[%rd40+512], {%r7454, %r7446, %r7413, %r7408};
	st.global.v4.u32 	[%rd40+1024], {%r7453, %r7445, %r7402, %r7398};
	@%p205 bra 	$L__BB0_726;

	st.global.v4.u32 	[%rd40+1536], {%r7627, %r7630, %r7634, %r7633};

$L__BB0_726:
	rem.s32 	%r7221, %r7514, %r1733;
	setp.eq.s32 	%p372, %r7221, 0;
	@%p372 bra 	$L__BB0_728;

	bar.sync 	0;
	bra.uni 	$L__BB0_735;

$L__BB0_728:
	@%p147 bra 	$L__BB0_730;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_730:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_734;

	membar.gl;
	add.s64 	%rd545, %rd24, 4;
	setp.eq.s32 	%p375, %r407, %r408;
	mov.u32 	%r7234, -2147483647;
	sub.s32 	%r7235, %r7234, %r406;
	selp.b32 	%r7236, %r7235, 1, %p375;
	atom.add.u32 	%r1727, [%rd545], %r7236;

$L__BB0_732:
	ld.volatile.u32 	%r7237, [%rd24+4];
	xor.b32  	%r7238, %r7237, %r1727;
	setp.gt.s32 	%p376, %r7238, -1;
	@%p376 bra 	$L__BB0_732;

	membar.gl;

$L__BB0_734:
	bar.sync 	0;

$L__BB0_735:
	add.s32 	%r7514, %r7514, 1;
	setp.lt.s32 	%p377, %r7514, %r31;
	mov.u32 	%r7628, %r7794;
	mov.u32 	%r7629, %r7795;
	mov.u32 	%r7631, %r7797;
	mov.u32 	%r7632, %r7798;
	mov.u32 	%r7639, %r7809;
	mov.u32 	%r7640, %r7810;
	mov.u32 	%r7641, %r7811;
	mov.u32 	%r7642, %r7812;
	mov.u32 	%r7643, %r7813;
	mov.u32 	%r7644, %r7814;
	mov.u32 	%r7645, %r7815;
	mov.u32 	%r7648, %r7818;
	mov.u32 	%r7650, %r7820;
	mov.u32 	%r7652, %r7822;
	mov.u32 	%r7442, %r474;
	mov.u32 	%r7443, %r7705;
	mov.u32 	%r7450, %r481;
	mov.u32 	%r7451, %r7707;
	mov.u32 	%r7458, %r488;
	mov.u32 	%r7467, %r496;
	mov.u32 	%r7476, %r7712;
	mov.u32 	%r7479, %r7714;
	mov.u32 	%r7482, %r526;
	mov.u32 	%r7484, %r534;
	mov.u32 	%r7486, %r541;
	mov.u32 	%r7487, %r542;
	mov.u32 	%r7491, %r550;
	mov.u32 	%r7492, %r551;
	mov.u32 	%r7635, %r7803;
	mov.u32 	%r7636, %r7804;
	mov.u32 	%r7637, %r7805;
	mov.u32 	%r7638, %r7806;
	mov.u32 	%r7653, %r7823;
	mov.u32 	%r7654, %r7824;
	@%p377 bra 	$L__BB0_302;

$L__BB0_736:
	ret;

}

