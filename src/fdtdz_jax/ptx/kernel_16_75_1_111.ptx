//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<351>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7831>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<564>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1681, %r1682}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1683, %r1684}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1685, %r1686}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1687, %r1688}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1689, %r1690}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1691, %r1692}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1693, %r1694}, [_ZN6kernel16SimulationKernelI7__half2fLi1ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1695, 32;
	sub.s32 	%r27, %r1695, %r1688;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1696, %r1694, -1;
	mad.lo.s32 	%r1697, %r1696, %r1693, %r1692;
	add.s32 	%r1698, %r1687, %r1686;
	add.s32 	%r1699, %r1698, %r1697;
	add.s32 	%r1700, %r1699, 1;
	mul.lo.s32 	%r1701, %r1681, %r1683;
	shl.b32 	%r29, %r1701, 1;
	shl.b32 	%r1702, %r1701, 2;
	div.s32 	%r1703, %r1700, %r1702;
	add.s32 	%r1704, %r1703, 1;
	mul.lo.s32 	%r1705, %r1704, %r1687;
	mul.lo.s32 	%r1706, %r1682, %r1684;
	shl.b32 	%r30, %r1706, 1;
	div.s32 	%r1707, %r1705, %r30;
	add.s32 	%r1708, %r1707, 1;
	mul.lo.s32 	%r31, %r1708, %r1686;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7210, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7210, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1711, %r1683, %r26, %r25;
	mad.lo.s32 	%r1712, %r1711, %r1682, %r24;
	mad.lo.s32 	%r1713, %r1712, %r1681, %r23;
	shl.b32 	%r35, %r1713, 5;
	add.s32 	%r7215, %r35, %r28;
	mul.lo.s32 	%r1714, %r1706, %r1701;
	shl.b32 	%r39, %r1714, 5;
	shl.b32 	%r1715, %r1688, 2;
	mov.u32 	%r1716, 128;
	sub.s32 	%r40, %r1716, %r1715;
	mul.lo.s32 	%r1717, %r1687, %r1686;
	mul.lo.s32 	%r1718, %r1717, %r1694;
	mul.lo.s32 	%r1719, %r1718, %r40;
	mul.lo.s32 	%r41, %r1719, 3;
	setp.ge.s32 	%p13, %r7215, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1720, %r28;
	add.s32 	%r1721, %r41, %r1720;
	sub.s32 	%r1722, %r1721, %r35;
	mul.lo.s32 	%r1723, %r1706, %r1681;
	mul.lo.s32 	%r1724, %r1723, %r1683;
	shl.b32 	%r1725, %r1724, 5;
	div.u32 	%r42, %r1722, %r1725;
	add.s32 	%r1726, %r42, 1;
	and.b32  	%r7212, %r1726, 3;
	setp.eq.s32 	%p14, %r7212, 0;
	mov.u32 	%r7213, %r7215;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7213, %r7215;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r7213, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1727, 0;
	st.global.u32 	[%rd45], %r1727;
	add.s32 	%r7213, %r7213, %r39;
	add.s32 	%r7212, %r7212, -1;
	setp.ne.s32 	%p15, %r7212, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r7213, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1728, 0;
	st.global.u32 	[%rd47], %r1728;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1728;
	add.s32 	%r1729, %r7213, %r39;
	add.s32 	%r1730, %r1729, %r39;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1728;
	add.s32 	%r1731, %r1730, %r39;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1728;
	add.s32 	%r7213, %r1731, %r39;
	setp.lt.s32 	%p17, %r7213, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1732, %r1687, %r29;
	div.s32 	%r1733, %r1732, %r30;
	mul.lo.s32 	%r1734, %r1733, %r1686;
	sub.s32 	%r51, %r1734, %r29;
	sub.s32 	%r1735, %r1686, %r30;
	mul.lo.s32 	%r1736, %r1735, %r1683;
	mul.lo.s32 	%r52, %r1681, 384;
	add.s32 	%r1737, %r52, %r52;
	add.s32 	%r1738, %r1737, 128;
	mul.lo.s32 	%r1740, %r1706, 768;
	mul.lo.s32 	%r1741, %r1736, %r1738;
	mad.lo.s32 	%r53, %r1740, %r51, %r1741;
	bra.uni 	$L__BB0_11;

$L__BB0_673:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7197, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r7215, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r7197;
	add.s32 	%r7215, %r7215, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7215, %r53;
	@%p18 bra 	$L__BB0_673;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r7257, %r1681, %r25, %r23;
	mul.lo.s32 	%r57, %r1682, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7257, %r1686;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1742, 31;
	sub.s32 	%r1743, %r1742, %r28;
	selp.b32 	%r1744, %r28, %r1743, %p20;
	shl.b32 	%r1745, %r1744, 2;
	mov.u32 	%r1746, 2;
	sub.s32 	%r59, %r1745, %r1689;
	sub.s32 	%r1747, %r1746, %r1689;
	add.s32 	%r60, %r1747, %r1745;
	shl.b32 	%r61, %r1717, 6;
	add.s32 	%r62, %r1686, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1749, %r66, 31;
	add.s32 	%r1750, %r66, %r1749;
	shr.s32 	%r68, %r1750, 1;
	and.b32  	%r1751, %r1750, -2;
	sub.s32 	%r1752, %r66, %r1751;
	add.s32 	%r67, %r1752, %r61;
	rem.s32 	%r1787, %r63, %r40;
	add.s32 	%r1788, %r1787, %r40;
	rem.s32 	%r91, %r1788, %r40;
	rem.s32 	%r1789, %r64, %r40;
	add.s32 	%r1790, %r1789, %r40;
	rem.s32 	%r92, %r1790, %r40;
	mov.u32 	%r7216, %r7257;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1687;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7216;
	rem.s32 	%r1753, %r59, %r40;
	add.s32 	%r1754, %r1753, %r40;
	rem.s32 	%r71, %r1754, %r40;
	rem.s32 	%r1755, %r60, %r40;
	add.s32 	%r1756, %r1755, %r40;
	rem.s32 	%r72, %r1756, %r40;
	mul.lo.s32 	%r73, %r7216, %r1687;
	add.s32 	%r1757, %r1686, %r7216;
	mul.lo.s32 	%r74, %r1757, %r1687;
	add.s32 	%r1758, %r1757, %r1686;
	mul.lo.s32 	%r75, %r1758, %r1687;
	mov.u32 	%r7217, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7217, %r1686;
	add.s32 	%r78, %r77, %r7216;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1761, %r73, %r7217;
	mul.lo.s32 	%r1762, %r1761, %r40;
	add.s32 	%r1763, %r1762, %r71;
	mul.wide.s32 	%rd55, %r1763, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1764, %r1762, %r72;
	mul.wide.s32 	%rd57, %r1764, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7218, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7218, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1765, %r83, %r28;
	shl.b32 	%r1766, %r1765, 2;
	add.s32 	%r1767, %r61, %r1766;
	mul.wide.s32 	%rd59, %r1767, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r7218;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1770, %r74, %r7217;
	mul.lo.s32 	%r1771, %r1770, %r40;
	add.s32 	%r1772, %r1771, %r71;
	mul.wide.s32 	%rd61, %r1772, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1773, %r1771, %r72;
	mul.wide.s32 	%rd63, %r1773, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7219, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7219, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1774, %r65, %r79;
	mul.wide.s32 	%rd65, %r1774, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r7219;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1777, %r75, %r7217;
	mul.lo.s32 	%r1778, %r1777, %r40;
	add.s32 	%r1779, %r1778, %r71;
	mul.wide.s32 	%rd67, %r1779, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1780, %r1778, %r72;
	mul.wide.s32 	%rd69, %r1780, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7220, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7220, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1781, %r70, %r1686;
	add.s32 	%r1782, %r1781, %r77;
	shl.b32 	%r90, %r1782, 5;
	add.s32 	%r1783, %r90, %r28;
	shl.b32 	%r1784, %r1783, 2;
	add.s32 	%r1785, %r61, %r1784;
	add.s32 	%r1786, %r1785, 2;
	mul.wide.s32 	%rd71, %r1786, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r7220;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1793, %r73, %r7217;
	mul.lo.s32 	%r1794, %r1793, %r40;
	add.s32 	%r1795, %r1794, %r91;
	mul.wide.s32 	%rd73, %r1795, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1796, %r1794, %r92;
	mul.wide.s32 	%rd75, %r1796, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7221, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7221, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1797, %r83, %r68;
	shl.b32 	%r1798, %r1797, 2;
	add.s32 	%r1799, %r67, %r1798;
	mul.wide.s32 	%rd77, %r1799, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r7221;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1802, %r74, %r7217;
	mul.lo.s32 	%r1803, %r1802, %r40;
	add.s32 	%r1804, %r1803, %r91;
	mul.wide.s32 	%rd79, %r1804, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1805, %r1803, %r92;
	mul.wide.s32 	%rd81, %r1805, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7222, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7222, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1806, %r66, %r79;
	mul.wide.s32 	%rd83, %r1806, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r7222;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1809, %r75, %r7217;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r91;
	mul.wide.s32 	%rd85, %r1811, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1812, %r1810, %r92;
	mul.wide.s32 	%rd87, %r1812, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7223, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7223, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1813, %r90, %r68;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r67, %r1814;
	add.s32 	%r1816, %r1815, 2;
	mul.wide.s32 	%rd89, %r1816, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r7223;
	add.s32 	%r7217, %r7217, %r1706;
	setp.lt.s32 	%p28, %r7217, %r1687;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7216, %r7216, %r1701;
	setp.lt.s32 	%p29, %r7216, %r1686;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7224, %r7257;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1687;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7225, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1818, %r7225, 31;
	add.s32 	%r1819, %r7225, %r1818;
	shr.s32 	%r1820, %r1819, 1;
	mad.lo.s32 	%r1821, %r1820, %r1686, %r7224;
	shl.b32 	%r108, %r1821, 5;
	add.s32 	%r109, %r7225, -2;
	mul.lo.s32 	%r110, %r109, %r1686;
	add.s32 	%r1822, %r1687, %r109;
	mul.lo.s32 	%r111, %r1822, %r1686;
	add.s32 	%r1823, %r1822, %r1687;
	mul.lo.s32 	%r112, %r1823, %r1686;
	add.s32 	%r113, %r110, %r1686;
	add.s32 	%r114, %r7225, -1;
	add.s32 	%r1824, %r1687, %r114;
	mul.lo.s32 	%r115, %r1824, %r1686;
	add.s32 	%r1825, %r1824, %r1687;
	mul.lo.s32 	%r116, %r1825, %r1686;
	add.s32 	%r1826, %r1687, %r7225;
	mul.lo.s32 	%r117, %r1826, %r1686;
	add.s32 	%r1827, %r1826, %r1687;
	mul.lo.s32 	%r118, %r1827, %r1686;
	mul.lo.s32 	%r119, %r7225, %r1686;
	add.s32 	%r120, %r119, %r1686;
	add.s32 	%r121, %r7225, 1;
	add.s32 	%r1828, %r1687, %r121;
	mul.lo.s32 	%r122, %r1828, %r1686;
	add.s32 	%r1829, %r1828, %r1687;
	mul.lo.s32 	%r123, %r1829, %r1686;
	add.s32 	%r124, %r120, %r1686;
	add.s32 	%r125, %r7225, 2;
	add.s32 	%r1830, %r1687, %r125;
	mul.lo.s32 	%r126, %r1830, %r1686;
	add.s32 	%r1831, %r1830, %r1687;
	mul.lo.s32 	%r127, %r1831, %r1686;
	mov.u32 	%r7228, 0;
	mov.u64 	%rd561, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1832, [%rd561];
	cvt.rn.f64.s32 	%fd1, %r1832;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1832, %r7224;
	setp.lt.s32 	%p33, %r129, %r1686;
	or.b32  	%r1833, %r109, %r129;
	setp.gt.s32 	%p34, %r1833, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1687;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1836, %r110, %r129;
	mul.wide.s32 	%rd94, %r1836, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7227, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7227, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1837, %r7228, %r108;
	mul.wide.s32 	%rd96, %r1837, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r7227;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1840, %r111, %r129;
	mul.wide.s32 	%rd98, %r1840, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7229, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7229, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1841, %r7228, %r108;
	mul.wide.s32 	%rd100, %r1841, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r7229;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1844, %r112, %r129;
	mul.wide.s32 	%rd102, %r1844, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7231, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7231, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1845, %r7228, %r108;
	mul.wide.s32 	%rd104, %r1845, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r7231;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_57:
	or.b32  	%r1846, %r114, %r129;
	setp.gt.s32 	%p40, %r1846, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7225, %r1687;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1849, %r113, %r129;
	mul.wide.s32 	%rd106, %r1849, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7233, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7233, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1850, %r7228, %r108;
	mul.wide.s32 	%rd108, %r1850, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r7233;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1853, %r115, %r129;
	mul.wide.s32 	%rd110, %r1853, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7235, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7235, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1854, %r7228, %r108;
	mul.wide.s32 	%rd112, %r1854, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r7235;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1857, %r116, %r129;
	mul.wide.s32 	%rd114, %r1857, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7237, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7237, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1858, %r7228, %r108;
	mul.wide.s32 	%rd116, %r1858, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r7237;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_72:
	or.b32  	%r1859, %r7225, %r129;
	setp.gt.s32 	%p47, %r1859, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7225, %r1687;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1862, %r119, %r129;
	mul.wide.s32 	%rd118, %r1862, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7239, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7239, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1863, %r7228, %r108;
	mul.wide.s32 	%rd120, %r1863, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r7239;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1866, %r117, %r129;
	mul.wide.s32 	%rd122, %r1866, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7241, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7241, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1867, %r7228, %r108;
	mul.wide.s32 	%rd124, %r1867, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r7241;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1870, %r118, %r129;
	mul.wide.s32 	%rd126, %r1870, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7243, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7243, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1871, %r7228, %r108;
	mul.wide.s32 	%rd128, %r1871, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r7243;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_87:
	or.b32  	%r1872, %r121, %r129;
	setp.gt.s32 	%p54, %r1872, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1687;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1875, %r120, %r129;
	mul.wide.s32 	%rd130, %r1875, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7245, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1876, %r7228, %r108;
	mul.wide.s32 	%rd132, %r1876, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r7245;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1879, %r122, %r129;
	mul.wide.s32 	%rd134, %r1879, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7247, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7247, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1880, %r7228, %r108;
	mul.wide.s32 	%rd136, %r1880, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r7247;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1883, %r123, %r129;
	mul.wide.s32 	%rd138, %r1883, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7249, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7249, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1884, %r7228, %r108;
	mul.wide.s32 	%rd140, %r1884, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r7249;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_102:
	or.b32  	%r1885, %r125, %r129;
	setp.gt.s32 	%p61, %r1885, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1687;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1888, %r124, %r129;
	mul.wide.s32 	%rd142, %r1888, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7251, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7251, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1889, %r7228, %r108;
	mul.wide.s32 	%rd144, %r1889, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r7251;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1892, %r126, %r129;
	mul.wide.s32 	%rd146, %r1892, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7253, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7253, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1893, %r7228, %r108;
	mul.wide.s32 	%rd148, %r1893, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r7253;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1896, %r127, %r129;
	mul.wide.s32 	%rd150, %r1896, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7255, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7255, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1897, %r7228, %r108;
	mul.wide.s32 	%rd152, %r1897, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r7255;
	add.s32 	%r7228, %r7228, 1;

$L__BB0_117:
	add.s64 	%rd561, %rd561, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p68, %rd561, %rd155;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7225, %r7225, %r30;
	setp.lt.s32 	%p69, %r7225, %r1687;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7224, %r7224, %r1701;
	setp.lt.s32 	%p70, %r7224, %r1686;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1690, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1943, %r1691, 31;
	add.s32 	%r1944, %r1691, %r1943;
	shr.u32 	%r1945, %r1944, 1;
	and.b32  	%r233, %r1945, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1687;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7263, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1947, %r7263, 31;
	add.s32 	%r1948, %r7263, %r1947;
	shr.s32 	%r1949, %r1948, 1;
	mad.lo.s32 	%r1950, %r1949, %r1686, %r7257;
	shl.b32 	%r237, %r1950, 5;
	add.s32 	%r238, %r7263, -2;
	mul.lo.s32 	%r239, %r238, %r1686;
	add.s32 	%r1951, %r1687, %r238;
	mul.lo.s32 	%r240, %r1951, %r1686;
	add.s32 	%r241, %r239, %r1686;
	add.s32 	%r242, %r7263, -1;
	add.s32 	%r1952, %r1687, %r242;
	mul.lo.s32 	%r243, %r1952, %r1686;
	add.s32 	%r1953, %r1687, %r7263;
	mul.lo.s32 	%r244, %r1953, %r1686;
	mul.lo.s32 	%r245, %r7263, %r1686;
	add.s32 	%r246, %r245, %r1686;
	add.s32 	%r247, %r7263, 1;
	add.s32 	%r1954, %r1687, %r247;
	mul.lo.s32 	%r248, %r1954, %r1686;
	add.s32 	%r249, %r246, %r1686;
	add.s32 	%r250, %r7263, 2;
	add.s32 	%r1955, %r1687, %r250;
	mul.lo.s32 	%r251, %r1955, %r1686;
	mov.u32 	%r7267, 0;
	mov.u64 	%rd562, 24;
	mov.u64 	%rd563, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1956, [%rd563];
	cvt.rn.f64.s32 	%fd2, %r1956;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r1956, %r7257;
	setp.lt.s32 	%p83, %r253, %r1686;
	or.b32  	%r1957, %r238, %r253;
	setp.gt.s32 	%p84, %r1957, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1687;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r1959, %r239, %r253;
	shl.b32 	%r1960, %r1959, 1;
	mul.wide.s32 	%rd178, %r1960, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7267, %r237;
	mul.wide.s32 	%rd180, %r258, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r7265;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r1964, %r240, %r253;
	shl.b32 	%r1965, %r1964, 1;
	mul.wide.s32 	%rd182, %r1965, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7266, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1968, %r258, 1;
	mul.wide.s32 	%rd184, %r1968, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r7266;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r1970, %r239, %r253;
	shl.b32 	%r1971, %r1970, 1;
	or.b32  	%r1972, %r1971, 1;
	mul.wide.s32 	%rd186, %r1972, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7267, %r237;
	mul.wide.s32 	%rd188, %r269, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r7268;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r1976, %r240, %r253;
	shl.b32 	%r1977, %r1976, 1;
	or.b32  	%r1978, %r1977, 1;
	mul.wide.s32 	%rd190, %r1978, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7269, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7269, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1981, %r269, 1;
	mul.wide.s32 	%rd192, %r1981, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r7269;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_168:
	or.b32  	%r1982, %r242, %r253;
	setp.gt.s32 	%p93, %r1982, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7263, %r1687;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r1984, %r241, %r253;
	shl.b32 	%r1985, %r1984, 1;
	mul.wide.s32 	%rd194, %r1985, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7271, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7271, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7267, %r237;
	mul.wide.s32 	%rd196, %r280, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r7271;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r1989, %r243, %r253;
	shl.b32 	%r1990, %r1989, 1;
	mul.wide.s32 	%rd198, %r1990, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7272, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7272, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1993, %r280, 1;
	mul.wide.s32 	%rd200, %r1993, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r7272;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r1995, %r241, %r253;
	shl.b32 	%r1996, %r1995, 1;
	or.b32  	%r1997, %r1996, 1;
	mul.wide.s32 	%rd202, %r1997, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7274, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7274, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7267, %r237;
	mul.wide.s32 	%rd204, %r291, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r7274;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2001, %r243, %r253;
	shl.b32 	%r2002, %r2001, 1;
	or.b32  	%r2003, %r2002, 1;
	mul.wide.s32 	%rd206, %r2003, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7275, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7275, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2006, %r291, 1;
	mul.wide.s32 	%rd208, %r2006, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r7275;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_192:
	or.b32  	%r2007, %r7263, %r253;
	setp.gt.s32 	%p103, %r2007, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7263, %r1687;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2009, %r245, %r253;
	shl.b32 	%r2010, %r2009, 1;
	mul.wide.s32 	%rd210, %r2010, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7267, %r237;
	mul.wide.s32 	%rd212, %r302, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r7277;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2014, %r244, %r253;
	shl.b32 	%r2015, %r2014, 1;
	mul.wide.s32 	%rd214, %r2015, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7278, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7278, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2018, %r302, 1;
	mul.wide.s32 	%rd216, %r2018, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r7278;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2020, %r245, %r253;
	shl.b32 	%r2021, %r2020, 1;
	or.b32  	%r2022, %r2021, 1;
	mul.wide.s32 	%rd218, %r2022, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7267, %r237;
	mul.wide.s32 	%rd220, %r313, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r7280;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2026, %r244, %r253;
	shl.b32 	%r2027, %r2026, 1;
	or.b32  	%r2028, %r2027, 1;
	mul.wide.s32 	%rd222, %r2028, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7281, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2031, %r313, 1;
	mul.wide.s32 	%rd224, %r2031, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r7281;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_216:
	or.b32  	%r2032, %r247, %r253;
	setp.gt.s32 	%p113, %r2032, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1687;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2034, %r246, %r253;
	shl.b32 	%r2035, %r2034, 1;
	mul.wide.s32 	%rd226, %r2035, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7267, %r237;
	mul.wide.s32 	%rd228, %r324, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r7283;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2039, %r248, %r253;
	shl.b32 	%r2040, %r2039, 1;
	mul.wide.s32 	%rd230, %r2040, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7284, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2043, %r324, 1;
	mul.wide.s32 	%rd232, %r2043, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r7284;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2045, %r246, %r253;
	shl.b32 	%r2046, %r2045, 1;
	or.b32  	%r2047, %r2046, 1;
	mul.wide.s32 	%rd234, %r2047, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7267, %r237;
	mul.wide.s32 	%rd236, %r335, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r7286;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2051, %r248, %r253;
	shl.b32 	%r2052, %r2051, 1;
	or.b32  	%r2053, %r2052, 1;
	mul.wide.s32 	%rd238, %r2053, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7287, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2056, %r335, 1;
	mul.wide.s32 	%rd240, %r2056, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r7287;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_240:
	or.b32  	%r2057, %r250, %r253;
	setp.gt.s32 	%p123, %r2057, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1687;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2059, %r249, %r253;
	shl.b32 	%r2060, %r2059, 1;
	mul.wide.s32 	%rd242, %r2060, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7267, %r237;
	mul.wide.s32 	%rd244, %r346, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r7289;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2064, %r251, %r253;
	shl.b32 	%r2065, %r2064, 1;
	mul.wide.s32 	%rd246, %r2065, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7290, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2068, %r346, 1;
	mul.wide.s32 	%rd248, %r2068, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r7290;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2070, %r249, %r253;
	shl.b32 	%r2071, %r2070, 1;
	or.b32  	%r2072, %r2071, 1;
	mul.wide.s32 	%rd250, %r2072, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7292, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7267, %r237;
	mul.wide.s32 	%rd252, %r357, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r7292;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2076, %r251, %r253;
	shl.b32 	%r2077, %r2076, 1;
	or.b32  	%r2078, %r2077, 1;
	mul.wide.s32 	%rd254, %r2078, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7293, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7293, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2081, %r357, 1;
	mul.wide.s32 	%rd256, %r2081, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r7293;
	add.s32 	%r7267, %r7267, 2;

$L__BB0_264:
	add.s64 	%rd563, %rd563, 4;
	add.s64 	%rd562, %rd562, -4;
	setp.ne.s64 	%p133, %rd562, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7263, %r7263, %r30;
	setp.lt.s32 	%p134, %r7263, %r1687;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7257, %r7257, %r1701;
	setp.lt.s32 	%p135, %r7257, %r1686;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1898, 31;
	sub.s32 	%r1899, %r1898, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1900, %r28, %r1899, %p73;
	shl.b32 	%r1901, %r1900, 2;
	mov.u32 	%r1902, 2;
	sub.s32 	%r208, %r1901, %r1689;
	sub.s32 	%r1903, %r1902, %r1689;
	add.s32 	%r209, %r1903, %r1901;
	add.s32 	%r210, %r1686, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1928, %r211, %r40;
	add.s32 	%r1929, %r1928, %r40;
	rem.s32 	%r223, %r1929, %r40;
	rem.s32 	%r1930, %r212, %r40;
	add.s32 	%r1931, %r1930, %r40;
	rem.s32 	%r224, %r1931, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7257, 1;
	rem.s32 	%r1904, %r208, %r40;
	add.s32 	%r1905, %r1904, %r40;
	rem.s32 	%r215, %r1905, %r40;
	rem.s32 	%r1906, %r209, %r40;
	add.s32 	%r1907, %r1906, %r40;
	rem.s32 	%r216, %r1907, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1910, %r214, %r40;
	add.s32 	%r1911, %r1910, %r215;
	mul.wide.s32 	%rd158, %r1911, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1912, %r1910, %r216;
	mul.wide.s32 	%rd160, %r1912, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7258, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7258, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1913, %r7257, 5;
	add.s32 	%r1914, %r1913, %r28;
	shl.b32 	%r1915, %r1914, 2;
	mul.wide.s32 	%rd162, %r1915, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r7258;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1918, %r214, 1;
	mul.lo.s32 	%r1919, %r1918, %r40;
	add.s32 	%r1920, %r1919, %r215;
	mul.wide.s32 	%rd163, %r1920, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1921, %r1919, %r216;
	mul.wide.s32 	%rd165, %r1921, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7259, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1922, %r210, %r7257;
	rem.s32 	%r1923, %r1922, %r1686;
	shl.b32 	%r1924, %r1923, 5;
	add.s32 	%r1925, %r1924, %r28;
	shl.b32 	%r1926, %r1925, 2;
	or.b32  	%r1927, %r1926, 2;
	mul.wide.s32 	%rd167, %r1927, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r7259;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1934, %r214, %r40;
	add.s32 	%r1935, %r1934, %r223;
	mul.wide.s32 	%rd168, %r1935, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1936, %r1934, %r224;
	mul.wide.s32 	%rd170, %r1936, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7260, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7260, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7260;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1939, %r214, 1;
	mul.lo.s32 	%r1940, %r1939, %r40;
	add.s32 	%r1941, %r1940, %r223;
	mul.wide.s32 	%rd172, %r1941, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1942, %r1940, %r224;
	mul.wide.s32 	%rd174, %r1942, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7261;

$L__BB0_137:
	add.s32 	%r7257, %r7257, %r1701;
	setp.lt.s32 	%p79, %r7257, %r1686;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2083, %r1681, -1;
	mad.lo.s32 	%r2084, %r1682, 576, 128;
	mul.lo.s32 	%r2085, %r2084, %r2083;
	add.s32 	%r2086, %r52, -64;
	add.s32 	%r2087, %r2086, %r52;
	add.s32 	%r2088, %r1682, -1;
	mad.lo.s32 	%r2089, %r2087, %r2088, %r2085;
	mul.lo.s32 	%r2090, %r2083, %r1682;
	mul.lo.s32 	%r2091, %r2090, 320;
	mad.lo.s32 	%r2092, %r2086, %r2088, %r2091;
	add.s32 	%r366, %r2092, %r2089;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7297, 0;
	mov.u32 	%r7295, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7295], %r7476;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2095, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7295+4], %r2095;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2096, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7295+8], %r2096;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2097, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7295+12], %r2097;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	add.s32 	%r7295, %r7295, 16;
	add.s32 	%r7297, %r7297, 4;
	setp.lt.s32 	%p137, %r7297, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2100, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r2101, 31;
	sub.s32 	%r2102, %r2101, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2103, %r28, %r2102, %p138;
	shl.b32 	%r2104, %r2103, 2;
	sub.s32 	%r377, %r2104, %r1689;
	rem.s32 	%r2105, %r377, %r40;
	add.s32 	%r2106, %r2105, %r40;
	rem.s32 	%r378, %r2106, %r40;
	add.s32 	%r2107, %r377, 2;
	rem.s32 	%r2108, %r2107, %r40;
	add.s32 	%r2109, %r2108, %r40;
	rem.s32 	%r379, %r2109, %r40;
	mul.lo.s32 	%r2110, %r378, 6;
	mul.lo.s32 	%r2111, %r379, 6;
	mul.wide.s32 	%rd259, %r2110, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r2111, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2120, %r377, 1;
	rem.s32 	%r2121, %r2120, %r40;
	add.s32 	%r2122, %r2121, %r40;
	rem.s32 	%r392, %r2122, %r40;
	add.s32 	%r2123, %r377, 3;
	rem.s32 	%r2124, %r2123, %r40;
	add.s32 	%r2125, %r2124, %r40;
	rem.s32 	%r393, %r2125, %r40;
	mul.lo.s32 	%r2126, %r392, 6;
	mul.lo.s32 	%r2127, %r393, 6;
	mul.wide.s32 	%rd261, %r2126, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r2127, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7303, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7303, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7304, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7304, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7305, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7305, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7306, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7306, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2136, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2136;
	// begin inline asm
	mov.u32 %r2137, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r2137;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2138, %nctaid.y;
	mov.u32 	%r2139, %nctaid.x;
	mul.lo.s32 	%r2140, %r2139, %r2138;
	mov.u32 	%r2141, %nctaid.z;
	mul.lo.s32 	%r406, %r2140, %r2141;
	neg.s32 	%r2142, %r24;
	add.s32 	%r2143, %r28, %r23;
	setp.ne.s32 	%p148, %r2143, %r2142;
	mov.u32 	%r2144, %ctaid.x;
	add.s32 	%r407, %r2144, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2147, -2147483647;
	sub.s32 	%r2148, %r2147, %r406;
	selp.b32 	%r2146, %r2148, 1, %p149;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2145,[%rd25],%r2146;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2149, [%rd25];
	xor.b32  	%r2150, %r2149, %r2145;
	setp.gt.s32 	%p150, %r2150, -1;
	@%p150 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2151,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_672;

	shr.s32 	%r2165, %r1691, 31;
	shr.u32 	%r2166, %r2165, 30;
	add.s32 	%r2167, %r1691, %r2166;
	shr.s32 	%r410, %r2167, 2;
	add.s32 	%r2168, %r28, 30;
	mul.hi.s32 	%r2169, %r2168, -2078209981;
	add.s32 	%r2170, %r2169, %r2168;
	shr.u32 	%r2171, %r2170, 31;
	shr.s32 	%r2172, %r2170, 4;
	add.s32 	%r2173, %r2172, %r2171;
	mul.lo.s32 	%r2174, %r2173, 31;
	sub.s32 	%r2175, %r2168, %r2174;
	add.s32 	%r2176, %r28, 32;
	mul.hi.s32 	%r2177, %r2176, -2078209981;
	add.s32 	%r2178, %r2177, %r2176;
	shr.u32 	%r2179, %r2178, 31;
	shr.s32 	%r2180, %r2178, 4;
	add.s32 	%r2181, %r2180, %r2179;
	mul.lo.s32 	%r2182, %r2181, 31;
	sub.s32 	%r2183, %r2176, %r2182;
	shr.u32 	%r2184, %r1691, 31;
	add.s32 	%r2185, %r1691, %r2184;
	and.b32  	%r2186, %r2185, -2;
	sub.s32 	%r411, %r1691, %r2186;
	setp.lt.s32 	%p152, %r28, 31;
	selp.b32 	%r412, %r2175, %r28, %p152;
	selp.b32 	%r413, %r2183, %r28, %p152;
	mov.u32 	%r2164, 0;
	// begin inline asm
	{mov.u32 %r2187, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2513, %r2187, 8;
	add.s32 	%r2514, %r2513, -8192;
	or.b32  	%r2191, %r2514, 31;
	mul.wide.s32 	%rd275, %r28, 16;
	mul.wide.s32 	%rd277, %r28, 8;
	mov.u32 	%r7307, %r2164;
	mov.u32 	%r7308, %r2164;
	mov.u32 	%r7309, %r2164;
	mov.u32 	%r7310, %r2164;
	mov.u32 	%r7311, %r2164;
	mov.u32 	%r7312, %r2164;
	mov.u32 	%r7313, %r2164;
	mov.u32 	%r7314, %r2164;
	mov.u32 	%r7315, %r2164;
	mov.u32 	%r7316, %r2164;
	mov.u32 	%r7317, %r2164;
	mov.u32 	%r7318, %r2164;
	mov.u32 	%r7606, %r2100;
	mov.u32 	%r7607, %r2100;
	mov.u32 	%r7604, %r2100;
	mov.u32 	%r7605, %r2100;
	mov.u32 	%r7626, %r2100;
	mov.u32 	%r7627, %r2100;
	mov.u32 	%r7640, %r2100;
	mov.u32 	%r7628, %r2100;
	mov.u32 	%r7642, %r2100;
	mov.u32 	%r7629, %r2100;
	mov.u32 	%r7630, %r2100;
	mov.u32 	%r7631, %r2100;
	mov.u32 	%r7632, %r2100;
	mov.u32 	%r7633, %r2100;
	mov.u32 	%r7634, %r2100;
	mov.u32 	%r7635, %r2100;
	mov.u32 	%r7644, %r2100;
	mov.u32 	%r7645, %r2100;
	mov.u32 	%r7646, %r2100;
	mov.u32 	%r7647, %r2100;
	mov.u32 	%r7648, %r2100;
	mov.u32 	%r7649, %r2100;
	mov.u32 	%r7636, %r2100;
	mov.u32 	%r7637, %r2100;
	mov.u32 	%r7650, %r2100;
	mov.u32 	%r7651, %r2100;
	mov.u32 	%r7638, %r2100;
	mov.u32 	%r7639, %r2100;
	mov.u32 	%r7608, %r2100;
	mov.u32 	%r7609, %r2100;
	mov.u32 	%r7596, %r2100;
	mov.u32 	%r7597, %r2100;
	mov.u32 	%r7598, %r2100;
	mov.u32 	%r7599, %r2100;
	mov.u32 	%r7610, %r2100;
	mov.u32 	%r7611, %r2100;
	mov.u32 	%r7612, %r2100;
	mov.u32 	%r7613, %r2100;
	mov.u32 	%r7614, %r2100;
	mov.u32 	%r7615, %r2100;
	mov.u32 	%r7600, %r2100;
	mov.u32 	%r7601, %r2100;
	mov.u32 	%r7602, %r2100;
	mov.u32 	%r7603, %r2100;
	mov.u32 	%r7616, %r2100;
	mov.u32 	%r7617, %r2100;
	mov.u32 	%r7618, %r2100;
	mov.u32 	%r7619, %r2100;
	mov.u32 	%r7367, %r2100;
	mov.u32 	%r7368, %r2100;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7373, %r2100;
	mov.u32 	%r7374, %r2100;
	mov.u32 	%r7375, %r2100;
	mov.u32 	%r7376, %r2100;
	mov.u32 	%r7668, %r2100;
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7379, %r2100;
	mov.u32 	%r7670, %r2100;
	mov.u32 	%r7381, %r2100;
	mov.u32 	%r7382, %r2100;
	mov.u32 	%r7671, %r2100;
	mov.u32 	%r7384, %r2100;
	mov.u32 	%r7385, %r2100;
	mov.u32 	%r7386, %r2100;
	mov.u32 	%r7620, %r2100;
	mov.u32 	%r7621, %r2100;
	mov.u32 	%r7389, %r2100;
	mov.u32 	%r7390, %r2100;
	mov.u32 	%r7393, %r2100;
	mov.u32 	%r7394, %r2100;
	mov.u32 	%r7395, %r2100;
	mov.u32 	%r7396, %r2100;
	mov.u32 	%r7397, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7399, %r2100;
	mov.u32 	%r7400, %r2100;
	mov.u32 	%r7401, %r2100;
	mov.u32 	%r7402, %r2100;
	mov.u32 	%r7403, %r2100;
	mov.u32 	%r7404, %r2100;
	mov.u32 	%r7405, %r2100;
	mov.u32 	%r7677, %r2100;
	mov.u32 	%r7407, %r2100;
	mov.u32 	%r7408, %r2100;
	mov.u32 	%r7409, %r2100;
	mov.u32 	%r7678, %r2100;
	mov.u32 	%r7411, %r2100;
	mov.u32 	%r7412, %r2100;
	mov.u32 	%r7413, %r2100;
	mov.u32 	%r7414, %r2100;
	mov.u32 	%r7415, %r2100;
	mov.u32 	%r7416, %r2100;
	mov.u32 	%r7417, %r2100;
	mov.u32 	%r7679, %r2100;
	mov.u32 	%r7419, %r2100;
	mov.u32 	%r7622, %r2100;
	mov.u32 	%r7421, %r2100;
	mov.u32 	%r7422, %r2100;
	mov.u32 	%r7423, %r2100;
	mov.u32 	%r7424, %r2100;
	mov.u32 	%r7623, %r2100;
	mov.u32 	%r7426, %r2100;
	mov.u32 	%r7427, %r2100;
	mov.u32 	%r7428, %r2100;
	mov.u32 	%r7429, %r2100;
	mov.u32 	%r7430, %r2100;
	mov.u32 	%r7431, %r2100;
	mov.u32 	%r7432, %r2100;
	mov.u32 	%r7433, %r2100;
	mov.u32 	%r7434, %r2100;
	mov.u32 	%r7435, %r2100;
	mov.u32 	%r7436, %r2100;
	mov.u32 	%r7437, %r2100;
	mov.u32 	%r7438, %r2100;
	mov.u32 	%r7439, %r2100;
	mov.u32 	%r7440, %r2100;
	mov.u32 	%r7441, %r2100;
	mov.u32 	%r7442, %r2100;
	mov.u32 	%r7443, %r2100;
	mov.u32 	%r7444, %r2100;
	mov.u32 	%r7445, %r2100;
	mov.u32 	%r7446, %r2100;
	mov.u32 	%r7447, %r2100;
	mov.u32 	%r7448, %r2100;
	mov.u32 	%r7449, %r2100;
	mov.u32 	%r7450, %r2100;
	mov.u32 	%r7451, %r2100;
	mov.u32 	%r7452, %r2100;
	mov.u32 	%r7453, %r2100;
	mov.u32 	%r7454, %r2100;
	mov.u32 	%r7455, %r2100;
	mov.u32 	%r7456, %r2100;
	mov.u32 	%r7457, %r2100;
	mov.u32 	%r7458, %r2100;
	mov.u32 	%r7459, %r2100;
	mov.u32 	%r7460, %r2100;
	mov.u32 	%r7461, %r2100;
	mov.u32 	%r7462, %r2100;
	mov.u32 	%r7463, %r2100;
	mov.u32 	%r7464, %r2100;
	mov.u32 	%r7465, %r2100;
	mov.u32 	%r7466, %r2100;
	mov.u32 	%r7467, %r2100;
	mov.u32 	%r7468, %r2100;
	mov.u32 	%r7469, %r2100;
	mov.u32 	%r7470, %r2100;
	mov.u32 	%r7471, %r2100;
	mov.u32 	%r7472, %r2100;
	mov.u32 	%r7473, %r2100;
	mov.u32 	%r7474, %r2100;
	mov.u32 	%r7475, %r2164;

$L__BB0_302:
	mov.u32 	%r525, %r7679;
	mov.u32 	%r521, %r7414;
	mov.u32 	%r517, %r7678;
	mov.u32 	%r515, %r7408;
	mov.u32 	%r513, %r7677;
	mov.u32 	%r505, %r7675;
	mov.u32 	%r7414, %r7671;
	mov.u32 	%r487, %r7670;
	mov.u32 	%r7408, %r7669;
	mov.u32 	%r484, %r7668;
	mov.u32 	%r479, %r7667;
	mov.u32 	%r478, %r7666;
	sub.s32 	%r7208, %r1686, %r30;
	mov.u32 	%r2202, 1;
	not.b32 	%r2476, %r25;
	mov.u32 	%r2468, -1;
	add.s32 	%r2477, %r1683, %r2476;
	mul.lo.s32 	%r2478, %r2477, %r1685;
	add.s32 	%r2479, %r7475, %r2478;
	not.b32 	%r2481, %r26;
	add.s32 	%r2482, %r1684, %r2481;
	mul.lo.s32 	%r2483, %r2482, %r1685;
	add.s32 	%r2484, %r7475, %r2483;
	add.s32 	%r2485, %r2478, %r2483;
	add.s32 	%r2486, %r2485, %r1686;
	not.b32 	%r2487, %r23;
	add.s32 	%r2488, %r1681, %r2487;
	mad.lo.s32 	%r2489, %r2477, %r1681, %r2488;
	not.b32 	%r2490, %r24;
	add.s32 	%r2491, %r1682, %r2490;
	mad.lo.s32 	%r2492, %r2482, %r1682, %r2491;
	add.s32 	%r2493, %r2489, %r2492;
	shl.b32 	%r2494, %r2493, 1;
	add.s32 	%r2495, %r2486, %r2494;
	add.s32 	%r2496, %r7475, %r2495;
	add.s32 	%r2497, %r7475, %r2485;
	div.s32 	%r2498, %r2496, %r1686;
	neg.s32 	%r2499, %r1686;
	sub.s32 	%r2502, %r30, %r1686;
	sub.s32 	%r2503, %r2489, %r2492;
	shl.b32 	%r2504, %r2503, 1;
	add.s32 	%r2505, %r2504, %r1687;
	mad.lo.s32 	%r2506, %r2498, %r30, %r2505;
	mad.lo.s32 	%r2507, %r2498, %r2502, %r2497;
	div.s32 	%r2508, %r2506, %r1687;
	mul.lo.s32 	%r2509, %r2508, %r1687;
	sub.s32 	%r2512, %r1702, %r1687;
	mov.u32 	%r2286, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2188,%r7477,%r2164,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2194, %r7300, %r2188, %p12;
	// begin inline asm
	{mul.f16x2 %r7561,%r2194,%r7474;
}
	// end inline asm
	selp.b32 	%r2197, %r7304, %r2188, %p12;
	// begin inline asm
	{mul.f16x2 %r7559,%r2197,%r7473;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2200,%r7477,%r2202,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2206, %r7300, %r2200, %p12;
	// begin inline asm
	{mul.f16x2 %r7560,%r2206,%r7472;
}
	// end inline asm
	selp.b32 	%r2209, %r7304, %r2200, %p12;
	// begin inline asm
	{mul.f16x2 %r7558,%r2209,%r7471;
}
	// end inline asm
	mov.u32 	%r2214, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2212,%r7477,%r2214,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2218, %r7300, %r2212, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2218,%r7470;
}
	// end inline asm
	selp.b32 	%r2221, %r7304, %r2212, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2221,%r7469;
}
	// end inline asm
	mov.u32 	%r2226, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2224,%r7477,%r2226,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2230, %r7300, %r2224, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2230,%r7651;
}
	// end inline asm
	selp.b32 	%r2233, %r7304, %r2224, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2233,%r7650;
}
	// end inline asm
	mov.u32 	%r2238, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2236,%r7477,%r2238,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2242, %r7300, %r2236, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2242,%r7468;
}
	// end inline asm
	selp.b32 	%r2245, %r7304, %r2236, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2245,%r7467;
}
	// end inline asm
	mov.u32 	%r2250, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2248,%r7477,%r2250,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2254, %r7300, %r2248, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2254,%r7466;
}
	// end inline asm
	selp.b32 	%r2257, %r7304, %r2248, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2257,%r7465;
}
	// end inline asm
	mov.u32 	%r2262, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2260,%r7477,%r2262,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2266, %r7300, %r2260, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2266,%r7464;
}
	// end inline asm
	selp.b32 	%r2269, %r7304, %r2260, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2269,%r7463;
}
	// end inline asm
	mov.u32 	%r2274, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2272,%r7477,%r2274,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2278, %r7300, %r2272, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2278,%r7462;
}
	// end inline asm
	selp.b32 	%r2281, %r7304, %r2272, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2281,%r7461;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2284,%r7477,%r2286,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2290, %r7300, %r2284, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2290,%r7460;
}
	// end inline asm
	selp.b32 	%r2293, %r7304, %r2284, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2293,%r7459;
}
	// end inline asm
	mov.u32 	%r2298, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2296,%r7477,%r2298,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2302, %r7300, %r2296, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2302,%r7458;
}
	// end inline asm
	selp.b32 	%r2305, %r7304, %r2296, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2305,%r7457;
}
	// end inline asm
	mov.u32 	%r2310, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2308,%r7477,%r2310,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2314, %r7300, %r2308, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2314,%r7456;
}
	// end inline asm
	selp.b32 	%r2317, %r7304, %r2308, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2317,%r7455;
}
	// end inline asm
	mov.u32 	%r2322, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2320,%r7477,%r2322,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2326, %r7300, %r2320, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2326,%r7637;
}
	// end inline asm
	selp.b32 	%r2329, %r7304, %r2320, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2329,%r7636;
}
	// end inline asm
	mov.u32 	%r2334, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2332,%r7477,%r2334,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2338, %r7300, %r2332, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2338,%r7649;
}
	// end inline asm
	selp.b32 	%r2341, %r7304, %r2332, %p12;
	// begin inline asm
	{mul.f16x2 %r7535,%r2341,%r7647;
}
	// end inline asm
	mov.u32 	%r2346, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2344,%r7477,%r2346,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2350, %r7300, %r2344, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2350,%r7648;
}
	// end inline asm
	selp.b32 	%r2353, %r7304, %r2344, %p12;
	// begin inline asm
	{mul.f16x2 %r7534,%r2353,%r7646;
}
	// end inline asm
	mov.u32 	%r2358, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2356,%r7477,%r2358,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2362, %r7300, %r2356, %p12;
	// begin inline asm
	{mul.f16x2 %r7533,%r2362,%r7645;
}
	// end inline asm
	selp.b32 	%r2365, %r7304, %r2356, %p12;
	// begin inline asm
	{mul.f16x2 %r7530,%r2365,%r7644;
}
	// end inline asm
	mov.u32 	%r2370, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2368,%r7477,%r2370,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2374, %r7300, %r2368, %p12;
	// begin inline asm
	{mul.f16x2 %r7532,%r2374,%r7454;
}
	// end inline asm
	selp.b32 	%r2377, %r7304, %r2368, %p12;
	// begin inline asm
	{mul.f16x2 %r7529,%r2377,%r7453;
}
	// end inline asm
	mov.u32 	%r2382, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2380,%r7477,%r2382,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2386, %r7300, %r2380, %p12;
	// begin inline asm
	{mul.f16x2 %r7531,%r2386,%r7452;
}
	// end inline asm
	selp.b32 	%r2389, %r7304, %r2380, %p12;
	// begin inline asm
	{mul.f16x2 %r7528,%r2389,%r7451;
}
	// end inline asm
	mov.u32 	%r2394, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2392,%r7477,%r2394,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2398, %r7300, %r2392, %p12;
	// begin inline asm
	{mul.f16x2 %r7527,%r2398,%r7635;
}
	// end inline asm
	selp.b32 	%r2401, %r7304, %r2392, %p12;
	// begin inline asm
	{mul.f16x2 %r7524,%r2401,%r7633;
}
	// end inline asm
	mov.u32 	%r2406, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2404,%r7477,%r2406,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2410, %r7300, %r2404, %p12;
	// begin inline asm
	{mul.f16x2 %r7526,%r2410,%r7634;
}
	// end inline asm
	selp.b32 	%r2413, %r7304, %r2404, %p12;
	// begin inline asm
	{mul.f16x2 %r7523,%r2413,%r7632;
}
	// end inline asm
	mov.u32 	%r2418, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2416,%r7477,%r2418,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2422, %r7300, %r2416, %p12;
	// begin inline asm
	{mul.f16x2 %r7525,%r2422,%r7450;
}
	// end inline asm
	selp.b32 	%r2425, %r7304, %r2416, %p12;
	// begin inline asm
	{mul.f16x2 %r7522,%r2425,%r7449;
}
	// end inline asm
	mov.u32 	%r2430, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2428,%r7477,%r2430,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2434, %r7300, %r2428, %p12;
	// begin inline asm
	{mul.f16x2 %r7521,%r2434,%r7631;
}
	// end inline asm
	selp.b32 	%r2437, %r7304, %r2428, %p12;
	// begin inline asm
	{mul.f16x2 %r7520,%r2437,%r7630;
}
	// end inline asm
	mov.u32 	%r2442, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2440,%r7477,%r2442,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2446, %r7300, %r2440, %p12;
	// begin inline asm
	{mul.f16x2 %r7519,%r2446,%r7629;
}
	// end inline asm
	selp.b32 	%r2449, %r7304, %r2440, %p12;
	// begin inline asm
	{mul.f16x2 %r7517,%r2449,%r7628;
}
	// end inline asm
	mov.u32 	%r2454, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2452,%r7477,%r2454,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2458, %r7300, %r2452, %p12;
	// begin inline asm
	{mul.f16x2 %r7518,%r2458,%r7642;
}
	// end inline asm
	selp.b32 	%r2461, %r7304, %r2452, %p12;
	// begin inline asm
	{mul.f16x2 %r7516,%r2461,%r7640;
}
	// end inline asm
	mov.u32 	%r2466, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2464,%r7477,%r2466,%r2191,%r2468;
}
	// end inline asm
	selp.b32 	%r2470, %r7300, %r2464, %p12;
	// begin inline asm
	{mul.f16x2 %r7515,%r2470,%r7627;
}
	// end inline asm
	selp.b32 	%r2473, %r7304, %r2464, %p12;
	// begin inline asm
	{mul.f16x2 %r7514,%r2473,%r7626;
}
	// end inline asm
	rem.s32 	%r633, %r2479, %r51;
	rem.s32 	%r634, %r2484, %r7208;
	mad.lo.s32 	%r635, %r2498, %r2499, %r2496;
	sub.s32 	%r636, %r2506, %r2509;
	mad.lo.s32 	%r637, %r2508, %r2512, %r2507;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2562, %r637, 1;
	mul.wide.s32 	%rd270, %r2562, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2765, %r1697, 1;
	setp.lt.s32 	%p160, %r637, %r2765;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r637, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7480, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7481, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2565, %r1697, 1;
	setp.lt.s32 	%p155, %r637, %r2565;
	setp.gt.s32 	%p156, %r637, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7478, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7479, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2773, 0;
	mov.u32 	%r2784, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2771,%r7476,%r2773,%r2191,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2776,%r7480,%r2771;
}
	// end inline asm
	mov.u32 	%r2782, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2780,%r7476,%r2782,%r2191,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2785,%r7481,%r2780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r2776,%r2785;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7482, %r7483;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r7482;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r7483;
}
	// end inline asm
	mov.u32 	%r2806, 2;
	mov.u32 	%r2817, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2804,%r7476,%r2806,%r2191,%r2817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2809,%r7480,%r2804;
}
	// end inline asm
	mov.u32 	%r2815, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2813,%r7476,%r2815,%r2191,%r2817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2818,%r7481,%r2813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r2809,%r2818;
}
	// end inline asm
	mov.u32 	%r7484, %r7485;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7560,%r7560,%r7484;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7558,%r7558,%r7485;
}
	// end inline asm
	mov.u32 	%r2839, 4;
	mov.u32 	%r2850, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2837,%r7476,%r2839,%r2191,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2842,%r7480,%r2837;
}
	// end inline asm
	mov.u32 	%r2848, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2846,%r7476,%r2848,%r2191,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2851,%r7481,%r2846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r2842,%r2851;
}
	// end inline asm
	mov.u32 	%r7486, %r7487;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7486;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7487, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7487;
}
	// end inline asm
	mov.u32 	%r2872, 6;
	mov.u32 	%r2883, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2870,%r7476,%r2872,%r2191,%r2883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2875,%r7480,%r2870;
}
	// end inline asm
	mov.u32 	%r2881, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2879,%r7476,%r2881,%r2191,%r2883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2884,%r7481,%r2879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r2875,%r2884;
}
	// end inline asm
	mov.u32 	%r7488, %r7489;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7488;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r7489;
}
	// end inline asm
	mov.u32 	%r2905, 8;
	mov.u32 	%r2916, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2903,%r7476,%r2905,%r2191,%r2916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2908,%r7480,%r2903;
}
	// end inline asm
	mov.u32 	%r2914, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2912,%r7476,%r2914,%r2191,%r2916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2917,%r7481,%r2912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r2908,%r2917;
}
	// end inline asm
	mov.u32 	%r7490, %r7491;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7490, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r7490;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r7491;
}
	// end inline asm
	mov.u32 	%r2938, 10;
	mov.u32 	%r2949, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2936,%r7476,%r2938,%r2191,%r2949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2941,%r7480,%r2936;
}
	// end inline asm
	mov.u32 	%r2947, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2945,%r7476,%r2947,%r2191,%r2949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2950,%r7481,%r2945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7493,%r2941,%r2950;
}
	// end inline asm
	mov.u32 	%r7492, %r7493;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r7492;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7493, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r7493;
}
	// end inline asm
	mov.u32 	%r2971, 12;
	mov.u32 	%r2982, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2969,%r7476,%r2971,%r2191,%r2982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2974,%r7480,%r2969;
}
	// end inline asm
	mov.u32 	%r2980, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2978,%r7476,%r2980,%r2191,%r2982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2983,%r7481,%r2978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r2974,%r2983;
}
	// end inline asm
	mov.u32 	%r7494, %r7495;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r7494;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r7495;
}
	// end inline asm
	mov.u32 	%r3004, 14;
	mov.u32 	%r3015, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3002,%r7476,%r3004,%r2191,%r3015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3007,%r7480,%r3002;
}
	// end inline asm
	mov.u32 	%r3013, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3011,%r7476,%r3013,%r2191,%r3015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3016,%r7481,%r3011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7497,%r3007,%r3016;
}
	// end inline asm
	mov.u32 	%r7496, %r7497;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7496, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r7496;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r7497;
}
	// end inline asm
	mov.u32 	%r3037, 16;
	mov.u32 	%r3048, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3035,%r7476,%r3037,%r2191,%r3048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3040,%r7480,%r3035;
}
	// end inline asm
	mov.u32 	%r3046, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3044,%r7476,%r3046,%r2191,%r3048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3049,%r7481,%r3044;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7499,%r3040,%r3049;
}
	// end inline asm
	mov.u32 	%r7498, %r7499;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r7498;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r7499;
}
	// end inline asm
	mov.u32 	%r3070, 18;
	mov.u32 	%r3081, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3068,%r7476,%r3070,%r2191,%r3081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3073,%r7480,%r3068;
}
	// end inline asm
	mov.u32 	%r3079, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3077,%r7476,%r3079,%r2191,%r3081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3082,%r7481,%r3077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7501,%r3073,%r3082;
}
	// end inline asm
	mov.u32 	%r7500, %r7501;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r7500;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r7501;
}
	// end inline asm
	mov.u32 	%r3103, 20;
	mov.u32 	%r3114, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3101,%r7476,%r3103,%r2191,%r3114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3106,%r7480,%r3101;
}
	// end inline asm
	mov.u32 	%r3112, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3110,%r7476,%r3112,%r2191,%r3114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3115,%r7481,%r3110;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r3106,%r3115;
}
	// end inline asm
	mov.u32 	%r7502, %r7503;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r7502;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r7503;
}
	// end inline asm
	mov.u32 	%r3136, 22;
	mov.u32 	%r3147, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3134,%r7476,%r3136,%r2191,%r3147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3139,%r7480,%r3134;
}
	// end inline asm
	mov.u32 	%r3145, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3143,%r7476,%r3145,%r2191,%r3147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3148,%r7481,%r3143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r3139,%r3148;
}
	// end inline asm
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7533,%r7533,%r7504;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7530,%r7530,%r7505;
}
	// end inline asm
	mov.u32 	%r3169, 24;
	mov.u32 	%r3180, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3167,%r7476,%r3169,%r2191,%r3180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3172,%r7480,%r3167;
}
	// end inline asm
	mov.u32 	%r3178, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3176,%r7476,%r3178,%r2191,%r3180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3181,%r7481,%r3176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r3172,%r3181;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7532,%r7532,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7529,%r7529,%r7507;
}
	// end inline asm
	mov.u32 	%r3202, 26;
	mov.u32 	%r3213, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3200,%r7476,%r3202,%r2191,%r3213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3205,%r7480,%r3200;
}
	// end inline asm
	mov.u32 	%r3211, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3209,%r7476,%r3211,%r2191,%r3213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3214,%r7481,%r3209;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r3205,%r3214;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7527,%r7527,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7524,%r7524,%r7509;
}
	// end inline asm
	mov.u32 	%r3235, 28;
	mov.u32 	%r3246, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3233,%r7476,%r3235,%r2191,%r3246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3238,%r7480,%r3233;
}
	// end inline asm
	mov.u32 	%r3244, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3242,%r7476,%r3244,%r2191,%r3246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3247,%r7481,%r3242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r3238,%r3247;
}
	// end inline asm
	mov.u32 	%r7510, %r7511;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7526,%r7526,%r7510;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7511, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7523,%r7523,%r7511;
}
	// end inline asm
	mov.u32 	%r3277, 31;
	mov.u32 	%r3268, 30;
	mov.u32 	%r3279, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3266,%r7476,%r3268,%r2191,%r3279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3271,%r7480,%r3266;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3275,%r7476,%r3277,%r2191,%r3279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3280,%r7481,%r3275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7513,%r3271,%r3280;
}
	// end inline asm
	mov.u32 	%r7512, %r7513;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7512, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7519,%r7519,%r7512;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7513, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7517,%r7517,%r7513;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r636, %r1691;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2667,%r7478,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r7561,%r2667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2673,%r7478,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r2673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2679,%r7478,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2685,%r7478,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7531,%r7531,%r2685;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2691,%r7478,%r7318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7533,%r7533,%r2691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2697,%r7478,%r7316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7518,%r7518,%r2697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2703,%r7479,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2709,%r7479,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2715,%r7478,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7559,%r7559,%r2715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2721,%r7478,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r2721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2727,%r7478,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r2727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2733,%r7478,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7528,%r7528,%r2733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2739,%r7478,%r7317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r7530,%r2739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2745,%r7478,%r7315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7516,%r7516,%r2745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2751,%r7479,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2757,%r7479,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r2757;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2570, %r1691, -2;
	setp.ne.s32 	%p159, %r636, %r2570;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2571,%r7478,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r2571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2577,%r7478,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r7521,%r2577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2583,%r7479,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2589,%r7479,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r2589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2595,%r7479,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r2595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2601,%r7479,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7525,%r7525,%r2601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2607,%r7479,%r7318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r7527,%r2607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2613,%r7479,%r7316;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7515,%r7515,%r2613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2619,%r7478,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2625,%r7478,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7520,%r7520,%r2625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2631,%r7479,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r2631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2637,%r7479,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r2637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2643,%r7479,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r2643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2649,%r7479,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7522,%r7522,%r2649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2655,%r7479,%r7317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r7524,%r2655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2661,%r7479,%r7315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7514,%r7514,%r2661;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7672, %r2100;
	mov.u32 	%r7673, %r2100;
	mov.u32 	%r7674, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7676, %r2100;
	mov.u32 	%r7677, %r2100;
	mov.u32 	%r7684, %r2100;
	mov.u32 	%r7685, %r2100;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3298, %r1682, 320;
	add.s32 	%r3299, %r23, -1;
	mul.lo.s32 	%r3300, %r24, 320;
	mad.lo.s32 	%r3301, %r3298, %r3299, %r3300;
	add.s32 	%r3304, %r1737, -64;
	mad.lo.s32 	%r3309, %r3304, %r2088, %r2085;
	add.s32 	%r3310, %r3301, %r3309;
	shl.b32 	%r3311, %r3310, 2;
	mov.u32 	%r3312, _ZN6kernel5shmemE;
	add.s32 	%r3313, %r3312, %r3311;
	shl.b32 	%r3314, %r28, 4;
	add.s32 	%r3315, %r3313, %r3314;
	ld.shared.v4.u32 	{%r7677, %r7675, %r7667, %r7666}, [%r3315];
	shl.b32 	%r3320, %r28, 3;
	add.s32 	%r3321, %r3313, %r3320;
	ld.shared.v2.u32 	{%r7676, %r7674}, [%r3321+512];
	ld.shared.v4.u32 	{%r7685, %r7684, %r7673, %r7672}, [%r3315+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7668, %r2100;
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7670, %r2100;
	mov.u32 	%r7671, %r2100;
	mov.u32 	%r7678, %r2100;
	mov.u32 	%r7679, %r2100;
	mov.u32 	%r7680, %r2100;
	mov.u32 	%r7681, %r2100;
	mov.u32 	%r7682, %r2100;
	mov.u32 	%r7683, %r2100;
	mov.u32 	%r7686, %r2100;
	mov.u32 	%r7687, %r2100;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3333, %r2488, 384, %r2091;
	add.s32 	%r3336, %r24, -1;
	mad.lo.s32 	%r3337, %r2086, %r3336, %r3333;
	add.s32 	%r3343, %r3337, %r2089;
	shl.b32 	%r3344, %r3343, 2;
	mov.u32 	%r3345, _ZN6kernel5shmemE;
	add.s32 	%r3346, %r3345, %r3344;
	shl.b32 	%r3347, %r28, 4;
	add.s32 	%r3348, %r3346, %r3347;
	ld.shared.v4.u32 	{%r7687, %r7686, %r7682, %r7680}, [%r3348];
	shl.b32 	%r3353, %r28, 3;
	add.s32 	%r3354, %r3346, %r3353;
	ld.shared.v2.u32 	{%r7683, %r7681}, [%r3354+512];
	ld.shared.v4.u32 	{%r7679, %r7678, %r7670, %r7668}, [%r3348+768];
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7671, %r2100;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7198, %r3354, 512;
	ld.shared.v2.u32 	{%r7671, %r7669}, [%r7198+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2088;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3364, %r1681, %r23;
	mul.lo.s32 	%r3366, %r52, %r24;
	mad.lo.s32 	%r3367, %r3364, 384, %r3366;
	mad.lo.s32 	%r3370, %r2086, %r2088, %r3367;
	mad.lo.s32 	%r3373, %r2084, %r2083, %r3370;
	shl.b32 	%r3374, %r3373, 2;
	mov.u32 	%r3375, _ZN6kernel5shmemE;
	add.s32 	%r3376, %r3375, %r3374;
	shl.b32 	%r3377, %r28, 4;
	add.s32 	%r3378, %r3376, %r3377;
	ld.shared.v4.u32 	{%r7605, %r7604, %r7607, %r7606}, [%r3378];

$L__BB0_386:
	shl.b32 	%r3383, %r24, 8;
	shl.b32 	%r3387, %r1682, 8;
	or.b32  	%r3388, %r3387, 128;
	add.s32 	%r3389, %r23, -1;
	mad.lo.s32 	%r3390, %r3388, %r3389, %r2091;
	add.s32 	%r3391, %r3390, %r3383;
	shl.b32 	%r3392, %r3391, 2;
	mov.u32 	%r3393, _ZN6kernel5shmemE;
	add.s32 	%r3394, %r3393, %r3392;
	setp.ne.s32 	%p202, %r24, %r2088;
	shl.b32 	%r3396, %r28, 4;
	add.s32 	%r899, %r3394, %r3396;
	ld.shared.v4.u32 	{%r7598, %r7596, %r7599, %r7597}, [%r899];
	ld.shared.v4.u32 	{%r7603, %r7602, %r7601, %r7600}, [%r899+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7605, %r7604, %r7607, %r7606}, [%r899+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3410, %r52, %r24;
	sub.s32 	%r3411, %r3410, %r52;
	mad.lo.s32 	%r3414, %r2488, 384, %r3411;
	mad.lo.s32 	%r3417, %r2086, %r2088, %r3414;
	mad.lo.s32 	%r3420, %r2084, %r2083, %r3417;
	shl.b32 	%r3421, %r3420, 2;
	mov.u32 	%r3422, _ZN6kernel5shmemE;
	add.s32 	%r3423, %r3422, %r3421;
	shl.b32 	%r3424, %r28, 4;
	add.s32 	%r928, %r3423, %r3424;
	ld.shared.v4.u32 	{%r7621, %r7620, %r7623, %r7622}, [%r928];
	ld.shared.v4.u32 	{%r7619, %r7617, %r7615, %r7614}, [%r928+512];
	ld.shared.v4.u32 	{%r7618, %r7616, %r7613, %r7611}, [%r928+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7609, %r7608, %r7612, %r7610}, [%r928+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd552, [%rd1+80];
	cvta.to.global.u64 	%rd551, %rd552;
	mad.lo.s32 	%r3442, %r633, %r1684, %r26;
	mul.lo.s32 	%r3443, %r1682, %r3442;
	mul.lo.s32 	%r3444, %r3443, 768;
	mad.lo.s32 	%r3445, %r24, 384, %r3444;
	add.s32 	%r3446, %r3445, -64;
	mul.wide.s32 	%rd273, %r3446, 4;
	add.s64 	%rd274, %rd551, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7635, %r7633, %r7627, %r7626}, [%rd276+256];
	ld.global.v4.u32 	{%r7637, %r7636, %r7631, %r7630}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7629, %r7628}, [%rd28];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2088;
	ld.global.v2.u32 	{%r7634, %r7632}, [%rd28+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7639, %r7638}, [%rd28+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3463, %r634, %r1683, %r25;
	mul.lo.s32 	%r3467, %r3463, %r1738;
	mad.lo.s32 	%r3470, %r2488, 384, %r3467;
	add.s32 	%r3471, %r3470, -64;
	mad.lo.s32 	%r3474, %r1740, %r51, %r3471;
	mul.wide.s32 	%rd278, %r3474, 4;
	add.s64 	%rd279, %rd553, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7651, %r7650, %r7648, %r7646}, [%rd281+256];
	ld.global.v4.u32 	{%r7645, %r7644, %r7642, %r7640}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7649, %r7647}, [%rd283+768];
	ld.global.v2.u32 	{%r7629, %r7628}, [%rd283+1536];

$L__BB0_398:
	add.s32 	%r3487, %r1686, -1;
	setp.lt.s32 	%p209, %r635, %r3487;
	setp.gt.s32 	%p210, %r635, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r636, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3488, %r1687, -2;
	setp.lt.s32 	%p214, %r636, %r3488;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd556, [%rd1+88];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r1023, %r636, %r1686, %r635;
	shl.b32 	%r3489, %r1023, 6;
	mul.wide.s32 	%rd286, %r3489, 4;
	add.s64 	%rd30, %rd555, %rd286;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7671, %r7669}, [%rd288+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3492, %r1686, 5;
	cvt.s64.s32 	%rd289, %r3492;
	cvt.s64.s32 	%rd290, %r28;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7676, %r7674}, [%rd293];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3495, %r1686, 5;
	neg.s32 	%r3496, %r3495;
	cvt.s64.s32 	%rd294, %r3496;
	cvt.s64.s32 	%rd295, %r28;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7683, %r7681}, [%rd298];

$L__BB0_405:
	mad.lo.s32 	%r7209, %r636, %r1686, %r635;
	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	shl.b32 	%r3499, %r1687, 6;
	shl.b32 	%r3500, %r7209, 7;
	mad.lo.s32 	%r3501, %r3499, %r1686, %r3500;
	mul.wide.s32 	%rd299, %r3501, 4;
	add.s64 	%rd31, %rd557, %rd299;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3502, %r1686, 5;
	cvt.s64.s32 	%rd300, %r3502;
	cvt.s64.s32 	%rd301, %r28;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7677, %r7675, %r7667, %r7666}, [%rd304];
	shl.b32 	%r3507, %r1686, 6;
	add.s32 	%r3508, %r3507, -32;
	cvt.s64.s32 	%rd305, %r3508;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7685, %r7684, %r7673, %r7672}, [%rd308];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3513, %r1686, 5;
	xor.b32  	%r3514, %r3513, -32;
	cvt.s64.s32 	%rd309, %r3514;
	cvt.s64.s32 	%rd310, %r28;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7687, %r7686, %r7682, %r7680}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7679, %r7678, %r7670, %r7668}, [%rd315];

$L__BB0_409:
	mov.u32 	%r3528, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3524,%r7446,%r412,%r2191,%r3528;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3524;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7446;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3531, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3532,%r7447,%r3531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3535,%r7299,%r3532;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7688,%r7561;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7688,%r7300,%r3532;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3548, 31;
	mov.u32 	%r3571, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3546,%r7688,%r3548,%r2191,%r3571;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3551,%r3535,%r3546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3554,%r7445,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3557,%r3554,%r3551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3560,%r7448,%r3557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3563,%r7561,%r3560;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3567,%r7441,%r412,%r2191,%r3571;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3567;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7441;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3574, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3575,%r7442,%r3574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3578,%r7299,%r3575;
}
	// end inline asm
	mov.u32 	%r7689, %r7560;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7689,%r7300,%r3575;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3589,%r7689,%r3548,%r2191,%r3571;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3594,%r3578,%r3589;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3597,%r7445,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3600,%r3594,%r3597;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3603,%r7443,%r3600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3606,%r7560,%r3603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3609,%r7446,%r7447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3612,%r7303,%r3609;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7690,%r7559;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7690,%r7304,%r3609;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3625, 31;
	mov.u32 	%r3627, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3623,%r7690,%r3625,%r2191,%r3627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3628,%r3612,%r3623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3631,%r7438,%r7437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3634,%r3631,%r3628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3637,%r7439,%r3634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3640,%r7559,%r3637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3643,%r7441,%r7442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3646,%r7303,%r3643;
}
	// end inline asm
	mov.u32 	%r7691, %r7558;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7691,%r7304,%r3643;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3655,%r7691,%r3625,%r2191,%r3627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3660,%r3646,%r3655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3663,%r7438,%r7435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3666,%r3660,%r3663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3669,%r7436,%r3666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3672,%r7558,%r3669;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3676,%r7432,%r412,%r2191,%r3627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3676;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7432;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3683, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7433,%r3683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r7299,%r3684;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7692,%r7557;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7692,%r7300,%r3684;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3702, 31;
	mov.u32 	%r3704, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3700,%r7692,%r3702,%r2191,%r3704;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3705,%r3687,%r3700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3708,%r7431,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3711,%r3708,%r3705;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3714,%r7434,%r3711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3717,%r7557,%r3714;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3720,%r7432,%r7433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3723,%r7303,%r3720;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7693,%r7556;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7693,%r7304,%r3720;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3736, 31;
	mov.u32 	%r3759, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3734,%r7693,%r3736,%r2191,%r3759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3739,%r3723,%r3734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r7429,%r7438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3745,%r3742,%r3739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3748,%r7430,%r3745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3751,%r7556,%r3748;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3755,%r7427,%r412,%r2191,%r3759;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3755;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7427;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3762, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3763,%r7428,%r3762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3766,%r7299,%r3763;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7694,%r7555;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7694,%r7300,%r3763;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3781, 31;
	mov.u32 	%r3804, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3779,%r7694,%r3781,%r2191,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3784,%r3766,%r3779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3787,%r7426,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3790,%r3787,%r3784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3793,%r7687,%r3790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3796,%r7555,%r3793;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3800,%r7422,%r412,%r2191,%r3804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3800;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7422;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3807, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r7423,%r3807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r7299,%r3808;
}
	// end inline asm
	mov.u32 	%r7695, %r7554;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7695,%r7300,%r3808;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3822,%r7695,%r3781,%r2191,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3827,%r3811,%r3822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3830,%r7426,%r7444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r3827,%r3830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3836,%r7424,%r3833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3839,%r7554,%r3836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3842,%r7427,%r7428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3845,%r7303,%r3842;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7696,%r7553;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7696,%r7304,%r3842;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3858, 31;
	mov.u32 	%r3860, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3856,%r7696,%r3858,%r2191,%r3860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3861,%r3845,%r3856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3864,%r7421,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3867,%r3864,%r3861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3870,%r7686,%r3867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3873,%r7553,%r3870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r7422,%r7423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r7303,%r3876;
}
	// end inline asm
	mov.u32 	%r7697, %r7552;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7697,%r7304,%r3876;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3888,%r7697,%r3858,%r2191,%r3860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3893,%r3879,%r3888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3896,%r7421,%r7437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3899,%r3893,%r3896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3902,%r7419,%r3899;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3905,%r7552,%r3902;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3909,%r7416,%r412,%r2191,%r3860;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3909;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7416;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3916, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r7417,%r3916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3920,%r7299,%r3917;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7698,%r7551;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7698,%r7300,%r3917;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3935, 31;
	mov.u32 	%r3958, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3933,%r7698,%r3935,%r2191,%r3958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3938,%r3920,%r3933;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3941,%r7415,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3944,%r3941,%r3938;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3947,%r525,%r3944;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7474,%r7551,%r3947;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3954,%r7412,%r412,%r2191,%r3958;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3954;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7412;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3961, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3962,%r7413,%r3961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3965,%r7299,%r3962;
}
	// end inline asm
	mov.u32 	%r7699, %r7550;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7699,%r7300,%r3962;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3976,%r7699,%r3935,%r2191,%r3958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3981,%r3965,%r3976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r7415,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3987,%r3981,%r3984;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3990,%r521,%r3987;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7472,%r7550,%r3990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3996,%r7417,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3999,%r7413,%r7423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4002,%r3996,%r3999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4005,%r7411,%r4002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4008,%r7549,%r4005;
}
	// end inline asm
	selp.b32 	%r1149, %r7549, %r4008, %p12;
	// begin inline asm
	{sub.f16x2 %r4011,%r7416,%r7417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4014,%r7303,%r4011;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7700,%r7548;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7700,%r7304,%r4011;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4027, 31;
	mov.u32 	%r4029, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4025,%r7700,%r4027,%r2191,%r4029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4030,%r4014,%r4025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4033,%r7409,%r7421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4036,%r4033,%r4030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4039,%r517,%r4036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7473,%r7548,%r4039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4045,%r7412,%r7413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4048,%r7303,%r4045;
}
	// end inline asm
	mov.u32 	%r7701, %r7547;
	@%p12 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7701,%r7304,%r4045;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4057,%r7701,%r4027,%r2191,%r4029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4062,%r4048,%r4057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4065,%r7409,%r7438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4068,%r4062,%r4065;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4071,%r515,%r4068;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7471,%r7547,%r4071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r7416,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4080,%r7412,%r7422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r4077,%r4080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4086,%r7407,%r4083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4089,%r7546,%r4086;
}
	// end inline asm
	selp.b32 	%r1161, %r7546, %r4089, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4093,%r7404,%r412,%r2191,%r4029;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4093;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7404;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4100, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4101,%r7405,%r4100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4104,%r7299,%r4101;
}
	// end inline asm
	@%p12 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7702,%r7545;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7702,%r7300,%r4101;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4119, 31;
	mov.u32 	%r4142, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4117,%r7702,%r4119,%r2191,%r4142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4122,%r4104,%r4117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4125,%r7403,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4128,%r4125,%r4122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r513,%r4128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r7545,%r4131;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4138,%r7400,%r412,%r2191,%r4142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4138;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7400;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4145, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4146,%r7401,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4149,%r7299,%r4146;
}
	// end inline asm
	mov.u32 	%r7703, %r7544;
	@%p12 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7703,%r7300,%r4146;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4160,%r7703,%r4119,%r2191,%r4142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4165,%r4149,%r4160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4168,%r7403,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4171,%r4165,%r4168;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4174,%r7402,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4177,%r7544,%r4174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4180,%r7405,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4183,%r7401,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4186,%r4180,%r4183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4189,%r7399,%r4186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4192,%r7543,%r4189;
}
	// end inline asm
	selp.b32 	%r1173, %r7543, %r4192, %p12;
	// begin inline asm
	{sub.f16x2 %r4195,%r7404,%r7405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4198,%r7303,%r4195;
}
	// end inline asm
	@%p12 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7704,%r7542;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7704,%r7304,%r4195;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4211, 31;
	mov.u32 	%r4213, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4209,%r7704,%r4211,%r2191,%r4213;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4214,%r4198,%r4209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4217,%r7397,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4220,%r4217,%r4214;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4223,%r505,%r4220;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r7542,%r4223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4229,%r7400,%r7401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4232,%r7303,%r4229;
}
	// end inline asm
	mov.u32 	%r7705, %r7541;
	@%p12 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7705,%r7304,%r4229;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4241,%r7705,%r4211,%r2191,%r4213;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4246,%r4232,%r4241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4249,%r7397,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4252,%r4246,%r4249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4255,%r7396,%r4252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4258,%r7541,%r4255;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4261,%r7404,%r7432;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4264,%r7400,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4267,%r4261,%r4264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4270,%r7395,%r4267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4273,%r7540,%r4270;
}
	// end inline asm
	selp.b32 	%r1185, %r7540, %r4273, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4277,%r7393,%r412,%r2191,%r4213;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4277;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7393;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4284, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4285,%r7394,%r4284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4288,%r7299,%r4285;
}
	// end inline asm
	@%p12 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7706,%r7539;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7706,%r7300,%r4285;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4303, 31;
	mov.u32 	%r4305, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4301,%r7706,%r4303,%r2191,%r4305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4306,%r4288,%r4301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4309,%r7607,%r7403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4312,%r4309,%r4306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4315,%r7685,%r4312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4318,%r7539,%r4315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4321,%r7393,%r7394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4324,%r7303,%r4321;
}
	// end inline asm
	@%p12 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7707,%r7538;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7707,%r7304,%r4321;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4337, 31;
	mov.u32 	%r4360, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4335,%r7707,%r4337,%r2191,%r4360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4340,%r4324,%r4335;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4343,%r7606,%r7397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4346,%r4343,%r4340;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4349,%r7684,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4352,%r7538,%r4349;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4356,%r7389,%r412,%r2191,%r4360;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4356;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7389;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4363, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4364,%r7390,%r4363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4367,%r7299,%r4364;
}
	// end inline asm
	mov.u32 	%r7708, %r7537;
	@%p12 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7708,%r7300,%r4364;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4378,%r7708,%r4337,%r2191,%r4360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4383,%r4367,%r4378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4386,%r7618,%r7426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4389,%r4383,%r4386;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4392,%r7683,%r4389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7537,%r4392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4398,%r7619,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4401,%r7390,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4404,%r4398,%r4401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4407,%r7682,%r4404;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4410,%r7536,%r4407;
}
	// end inline asm
	selp.b32 	%r1203, %r7536, %r4410, %p12;
	// begin inline asm
	{sub.f16x2 %r4413,%r7389,%r7390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4416,%r7303,%r4413;
}
	// end inline asm
	mov.u32 	%r7709, %r7535;
	@%p12 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7709,%r7304,%r4413;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4427, 31;
	mov.u32 	%r4465, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4425,%r7709,%r4427,%r2191,%r4465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4430,%r4416,%r4425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4433,%r7616,%r7421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4436,%r4430,%r4433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4439,%r7681,%r4436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7467,%r7535,%r4439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4445,%r7617,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4448,%r7389,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4451,%r4445,%r4448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4454,%r7680,%r4451;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4457,%r7534,%r4454;
}
	// end inline asm
	selp.b32 	%r1209, %r7534, %r4457, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4461,%r7385,%r412,%r2191,%r4465;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4461;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7385;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4468, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4469,%r7386,%r4468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4472,%r7299,%r4469;
}
	// end inline asm
	@%p12 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7710,%r7533;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7710,%r7300,%r4469;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4487, 31;
	mov.u32 	%r4510, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4485,%r7710,%r4487,%r2191,%r4510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4490,%r4472,%r4485;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4493,%r7384,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r4493,%r4490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4499,%r7679,%r4496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7533,%r4499;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4506,%r7381,%r412,%r2191,%r4510;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4506;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7381;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4513, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4514,%r7382,%r4513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4517,%r7299,%r4514;
}
	// end inline asm
	mov.u32 	%r7711, %r7532;
	@%p12 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7711,%r7300,%r4514;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4528,%r7711,%r4487,%r2191,%r4510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4533,%r4517,%r4528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4536,%r7384,%r7415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4539,%r4533,%r4536;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4542,%r7414,%r4539;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7532,%r4542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4548,%r7386,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4551,%r7382,%r7390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4554,%r4548,%r4551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4557,%r487,%r4554;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4560,%r7531,%r4557;
}
	// end inline asm
	selp.b32 	%r7462, %r7531, %r4560, %p12;
	// begin inline asm
	{sub.f16x2 %r4563,%r7385,%r7386;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4566,%r7303,%r4563;
}
	// end inline asm
	@%p12 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7712,%r7530;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7712,%r7304,%r4563;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4579, 31;
	mov.u32 	%r4581, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4577,%r7712,%r4579,%r2191,%r4581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4582,%r4566,%r4577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4585,%r7379,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4588,%r4585,%r4582;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4591,%r7678,%r4588;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r7530,%r4591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4597,%r7381,%r7382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4600,%r7303,%r4597;
}
	// end inline asm
	mov.u32 	%r7713, %r7529;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7713,%r7304,%r4597;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4609,%r7713,%r4579,%r2191,%r4581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4614,%r4600,%r4609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4617,%r7379,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4620,%r4614,%r4617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4623,%r7408,%r4620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7463,%r7529,%r4623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r7385,%r7416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4632,%r7381,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r4629,%r4632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4638,%r484,%r4635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4641,%r7528,%r4638;
}
	// end inline asm
	selp.b32 	%r7461, %r7528, %r4641, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4645,%r7375,%r412,%r2191,%r4581;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4645;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7375;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4652, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4653,%r7376,%r4652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4656,%r7299,%r4653;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7714,%r7527;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7714,%r7300,%r4653;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4671, 31;
	mov.u32 	%r4694, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4669,%r7714,%r4671,%r2191,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4674,%r4656,%r4669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4677,%r7603,%r7384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4680,%r4677,%r4674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4683,%r7677,%r4680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7460,%r7527,%r4683;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4690,%r7373,%r412,%r2191,%r4694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4690;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7373;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4697, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4698,%r7374,%r4697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4701,%r7299,%r4698;
}
	// end inline asm
	mov.u32 	%r7715, %r7526;
	@%p12 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7715,%r7300,%r4698;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4712,%r7715,%r4671,%r2191,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4717,%r4701,%r4712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4720,%r7603,%r7403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4723,%r4717,%r4720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4726,%r7676,%r4723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7458,%r7526,%r4726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4732,%r7376,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4735,%r7374,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4738,%r4732,%r4735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4741,%r479,%r4738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4744,%r7525,%r4741;
}
	// end inline asm
	selp.b32 	%r7456, %r7525, %r4744, %p12;
	// begin inline asm
	{sub.f16x2 %r4747,%r7375,%r7376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4750,%r7303,%r4747;
}
	// end inline asm
	@%p12 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7716,%r7524;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7716,%r7304,%r4747;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4763, 31;
	mov.u32 	%r4765, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4761,%r7716,%r4763,%r2191,%r4765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4766,%r4750,%r4761;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4769,%r7602,%r7379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4772,%r4769,%r4766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4775,%r7675,%r4772;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7459,%r7524,%r4775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4781,%r7373,%r7374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4784,%r7303,%r4781;
}
	// end inline asm
	mov.u32 	%r7717, %r7523;
	@%p12 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7717,%r7304,%r4781;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4793,%r7717,%r4763,%r2191,%r4765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4798,%r4784,%r4793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4801,%r7602,%r7397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4804,%r4798,%r4801;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4807,%r7674,%r4804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7457,%r7523,%r4807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4813,%r7375,%r7404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4816,%r7373,%r7381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4819,%r4813,%r4816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4822,%r478,%r4819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4825,%r7522,%r4822;
}
	// end inline asm
	selp.b32 	%r7455, %r7522, %r4825, %p12;
	// begin inline asm
	{sub.f16x2 %r4828,%r7601,%r7394;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4831,%r7605,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4834,%r4828,%r4831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4837,%r7673,%r4834;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4840,%r7521,%r4837;
}
	// end inline asm
	selp.b32 	%r1258, %r7521, %r4840, %p12;
	// begin inline asm
	{sub.f16x2 %r4843,%r7600,%r7393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4846,%r7604,%r7373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4849,%r4843,%r4846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4852,%r7672,%r4849;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4855,%r7520,%r4852;
}
	// end inline asm
	selp.b32 	%r1259, %r7520, %r4855, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4859,%r7367,%r412,%r2191,%r4765;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4859;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7367;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4866, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4867,%r7368,%r4866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4870,%r7299,%r4867;
}
	// end inline asm
	mov.u32 	%r7718, %r7519;
	@%p12 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7718,%r7300,%r4867;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4883, 31;
	mov.u32 	%r4885, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4881,%r7718,%r4883,%r2191,%r4885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4886,%r4870,%r4881;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4889,%r7612,%r7384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4892,%r4886,%r4889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4895,%r7671,%r4892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r7519,%r4895;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4901,%r7613,%r7386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4904,%r7368,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4907,%r4901,%r4904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4910,%r7670,%r4907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4913,%r7518,%r4910;
}
	// end inline asm
	selp.b32 	%r7452, %r7518, %r4913, %p12;
	// begin inline asm
	{sub.f16x2 %r4916,%r7367,%r7368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4919,%r7303,%r4916;
}
	// end inline asm
	mov.u32 	%r7719, %r7517;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7719,%r7304,%r4916;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4928,%r7719,%r4883,%r2191,%r4885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4933,%r4919,%r4928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4936,%r7610,%r7379;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4939,%r4933,%r4936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4942,%r7669,%r4939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7453,%r7517,%r4942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4948,%r7611,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4951,%r7367,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4954,%r4948,%r4951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4957,%r7668,%r4954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4960,%r7516,%r4957;
}
	// end inline asm
	selp.b32 	%r7451, %r7516, %r4960, %p12;
	// begin inline asm
	{sub.f16x2 %r4963,%r7598,%r7376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4966,%r7599,%r7368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4969,%r4963,%r4966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4972,%r7667,%r4969;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4975,%r7515,%r4972;
}
	// end inline asm
	selp.b32 	%r7450, %r7515, %r4975, %p12;
	// begin inline asm
	{sub.f16x2 %r4978,%r7596,%r7375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4981,%r7597,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4984,%r4978,%r4981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4987,%r7666,%r4984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4990,%r7514,%r4987;
}
	// end inline asm
	selp.b32 	%r7449, %r7514, %r4990, %p12;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	setp.lt.s32 	%p256, %r637, %r1692;
	or.pred  	%p258, %p256, %p215;
	mad.lo.s32 	%r4995, %r1694, %r1693, %r1692;
	setp.ge.s32 	%p259, %r637, %r4995;
	or.pred  	%p260, %p258, %p259;
	@%p260 bra 	$L__BB0_539;

	sub.s32 	%r1274, %r637, %r1692;
	rem.s32 	%r4996, %r1274, %r1693;
	setp.ne.s32 	%p261, %r4996, 0;
	@%p261 bra 	$L__BB0_539;

	div.s32 	%r4997, %r1274, %r1693;
	mul.lo.s32 	%r4998, %r4997, %r1686;
	mul.lo.s32 	%r1275, %r4998, 3;
	add.s32 	%r1276, %r635, -2;
	add.s32 	%r4999, %r1275, %r1276;
	mul.lo.s32 	%r1277, %r4999, %r1687;
	@%p12 bra 	$L__BB0_493;

	add.s32 	%r5004, %r1277, %r636;
	mul.lo.s32 	%r5005, %r5004, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3563;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5006, %r378, %r5005;
	mul.wide.s32 	%rd317, %r5006, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3563;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5007, %r379, %r5005;
	mul.wide.s32 	%rd319, %r5007, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3640;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5008, %r392, %r5005;
	mul.wide.s32 	%rd321, %r5008, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3640;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5009, %r393, %r5005;
	mul.wide.s32 	%rd323, %r5009, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_493:
	add.s32 	%r1278, %r1275, %r1686;
	@%p12 bra 	$L__BB0_495;

	add.s32 	%r5014, %r1278, %r1276;
	mad.lo.s32 	%r5015, %r5014, %r1687, %r636;
	mul.lo.s32 	%r5016, %r5015, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5017, %r378, %r5016;
	mul.wide.s32 	%rd325, %r5017, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3606;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5018, %r379, %r5016;
	mul.wide.s32 	%rd327, %r5018, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3672;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5019, %r392, %r5016;
	mul.wide.s32 	%rd329, %r5019, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3672;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5020, %r393, %r5016;
	mul.wide.s32 	%rd331, %r5020, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_495:
	add.s32 	%r1279, %r636, 1;
	@%p12 bra 	$L__BB0_497;

	add.s32 	%r5025, %r1277, %r1279;
	mul.lo.s32 	%r5026, %r5025, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5027, %r378, %r5026;
	mul.wide.s32 	%rd333, %r5027, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3717;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5028, %r379, %r5026;
	mul.wide.s32 	%rd335, %r5028, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3751;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5029, %r392, %r5026;
	mul.wide.s32 	%rd337, %r5029, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3751;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5030, %r393, %r5026;
	mul.wide.s32 	%rd339, %r5030, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_497:
	add.s32 	%r1280, %r635, -1;
	add.s32 	%r5031, %r1275, %r1280;
	mul.lo.s32 	%r1281, %r5031, %r1687;
	add.s32 	%r1282, %r636, -1;
	@%p12 bra 	$L__BB0_499;

	add.s32 	%r5036, %r1281, %r1282;
	mul.lo.s32 	%r5037, %r5036, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5038, %r378, %r5037;
	mul.wide.s32 	%rd341, %r5038, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3796;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5039, %r379, %r5037;
	mul.wide.s32 	%rd343, %r5039, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3873;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5040, %r392, %r5037;
	mul.wide.s32 	%rd345, %r5040, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3873;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5041, %r393, %r5037;
	mul.wide.s32 	%rd347, %r5041, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_499:
	add.s32 	%r5042, %r1278, %r1280;
	mul.lo.s32 	%r1283, %r5042, %r1687;
	@%p12 bra 	$L__BB0_501;

	add.s32 	%r5047, %r1283, %r1282;
	mul.lo.s32 	%r5048, %r5047, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5049, %r378, %r5048;
	mul.wide.s32 	%rd349, %r5049, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3839;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5050, %r379, %r5048;
	mul.wide.s32 	%rd351, %r5050, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3905;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5051, %r392, %r5048;
	mul.wide.s32 	%rd353, %r5051, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3905;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5052, %r393, %r5048;
	mul.wide.s32 	%rd355, %r5052, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_501:
	@%p12 bra 	$L__BB0_503;

	add.s32 	%r5057, %r1281, %r636;
	mul.lo.s32 	%r5058, %r5057, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5059, %r378, %r5058;
	mul.wide.s32 	%rd357, %r5059, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7474;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5060, %r379, %r5058;
	mul.wide.s32 	%rd359, %r5060, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5061, %r392, %r5058;
	mul.wide.s32 	%rd361, %r5061, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7473;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5062, %r393, %r5058;
	mul.wide.s32 	%rd363, %r5062, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_503:
	@%p12 bra 	$L__BB0_505;

	add.s32 	%r5067, %r1283, %r636;
	mul.lo.s32 	%r5068, %r5067, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5069, %r378, %r5068;
	mul.wide.s32 	%rd365, %r5069, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7472;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5070, %r379, %r5068;
	mul.wide.s32 	%rd367, %r5070, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5071, %r392, %r5068;
	mul.wide.s32 	%rd369, %r5071, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7471;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5072, %r393, %r5068;
	mul.wide.s32 	%rd371, %r5072, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_505:
	add.s32 	%r1284, %r1278, %r1686;
	add.s32 	%r5073, %r1284, %r1280;
	mul.lo.s32 	%r1285, %r5073, %r1687;
	@%p12 bra 	$L__BB0_507;

	add.s32 	%r5078, %r1285, %r636;
	mul.lo.s32 	%r5079, %r5078, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5080, %r378, %r5079;
	mul.wide.s32 	%rd373, %r5080, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5081, %r379, %r5079;
	mul.wide.s32 	%rd375, %r5081, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5082, %r392, %r5079;
	mul.wide.s32 	%rd377, %r5082, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5083, %r393, %r5079;
	mul.wide.s32 	%rd379, %r5083, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_507:
	@%p12 bra 	$L__BB0_509;

	add.s32 	%r5088, %r1281, %r1279;
	mul.lo.s32 	%r5089, %r5088, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5090, %r378, %r5089;
	mul.wide.s32 	%rd381, %r5090, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5091, %r379, %r5089;
	mul.wide.s32 	%rd383, %r5091, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5092, %r392, %r5089;
	mul.wide.s32 	%rd385, %r5092, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5093, %r393, %r5089;
	mul.wide.s32 	%rd387, %r5093, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_509:
	@%p12 bra 	$L__BB0_511;

	add.s32 	%r5098, %r1283, %r1279;
	mul.lo.s32 	%r5099, %r5098, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4177;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5100, %r378, %r5099;
	mul.wide.s32 	%rd389, %r5100, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4177;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5101, %r379, %r5099;
	mul.wide.s32 	%rd391, %r5101, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4258;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5102, %r392, %r5099;
	mul.wide.s32 	%rd393, %r5102, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4258;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5103, %r393, %r5099;
	mul.wide.s32 	%rd395, %r5103, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_511:
	@%p12 bra 	$L__BB0_513;

	add.s32 	%r5108, %r1285, %r1279;
	mul.lo.s32 	%r5109, %r5108, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5110, %r378, %r5109;
	mul.wide.s32 	%rd397, %r5110, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5111, %r379, %r5109;
	mul.wide.s32 	%rd399, %r5111, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5112, %r392, %r5109;
	mul.wide.s32 	%rd401, %r5112, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5113, %r393, %r5109;
	mul.wide.s32 	%rd403, %r5113, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_513:
	add.s32 	%r1286, %r636, 2;
	@%p12 bra 	$L__BB0_515;

	add.s32 	%r5118, %r1281, %r1286;
	mul.lo.s32 	%r5119, %r5118, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4318;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5120, %r378, %r5119;
	mul.wide.s32 	%rd405, %r5120, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4318;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5121, %r379, %r5119;
	mul.wide.s32 	%rd407, %r5121, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4352;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5122, %r392, %r5119;
	mul.wide.s32 	%rd409, %r5122, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4352;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5123, %r393, %r5119;
	mul.wide.s32 	%rd411, %r5123, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_515:
	add.s32 	%r5124, %r1278, %r635;
	mul.lo.s32 	%r1287, %r5124, %r1687;
	@%p12 bra 	$L__BB0_517;

	add.s32 	%r5129, %r1287, %r1282;
	mul.lo.s32 	%r5130, %r5129, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5131, %r378, %r5130;
	mul.wide.s32 	%rd413, %r5131, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5132, %r379, %r5130;
	mul.wide.s32 	%rd415, %r5132, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5133, %r392, %r5130;
	mul.wide.s32 	%rd417, %r5133, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5134, %r393, %r5130;
	mul.wide.s32 	%rd419, %r5134, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_517:
	add.s32 	%r5135, %r1284, %r635;
	mul.lo.s32 	%r1288, %r5135, %r1687;
	@%p12 bra 	$L__BB0_519;

	add.s32 	%r5140, %r1288, %r1282;
	mul.lo.s32 	%r5141, %r5140, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5142, %r378, %r5141;
	mul.wide.s32 	%rd421, %r5142, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5143, %r379, %r5141;
	mul.wide.s32 	%rd423, %r5143, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5144, %r392, %r5141;
	mul.wide.s32 	%rd425, %r5144, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5145, %r393, %r5141;
	mul.wide.s32 	%rd427, %r5145, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_519:
	add.s32 	%r5146, %r1275, %r635;
	mul.lo.s32 	%r1289, %r5146, %r1687;
	@%p12 bra 	$L__BB0_521;

	add.s32 	%r5151, %r1289, %r636;
	mul.lo.s32 	%r5152, %r5151, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5153, %r378, %r5152;
	mul.wide.s32 	%rd429, %r5153, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5154, %r379, %r5152;
	mul.wide.s32 	%rd431, %r5154, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5155, %r392, %r5152;
	mul.wide.s32 	%rd433, %r5155, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5156, %r393, %r5152;
	mul.wide.s32 	%rd435, %r5156, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_521:
	@%p12 bra 	$L__BB0_523;

	add.s32 	%r5161, %r1287, %r636;
	mul.lo.s32 	%r5162, %r5161, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5163, %r378, %r5162;
	mul.wide.s32 	%rd437, %r5163, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5164, %r379, %r5162;
	mul.wide.s32 	%rd439, %r5164, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5165, %r392, %r5162;
	mul.wide.s32 	%rd441, %r5165, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5166, %r393, %r5162;
	mul.wide.s32 	%rd443, %r5166, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_523:
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5171, %r1288, %r636;
	mul.lo.s32 	%r5172, %r5171, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5173, %r378, %r5172;
	mul.wide.s32 	%rd445, %r5173, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5174, %r379, %r5172;
	mul.wide.s32 	%rd447, %r5174, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5175, %r392, %r5172;
	mul.wide.s32 	%rd449, %r5175, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5176, %r393, %r5172;
	mul.wide.s32 	%rd451, %r5176, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_525:
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5181, %r1289, %r1279;
	mul.lo.s32 	%r5182, %r5181, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5183, %r378, %r5182;
	mul.wide.s32 	%rd453, %r5183, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5184, %r379, %r5182;
	mul.wide.s32 	%rd455, %r5184, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5185, %r392, %r5182;
	mul.wide.s32 	%rd457, %r5185, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5186, %r393, %r5182;
	mul.wide.s32 	%rd459, %r5186, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_527:
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5191, %r1287, %r1279;
	mul.lo.s32 	%r5192, %r5191, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5193, %r378, %r5192;
	mul.wide.s32 	%rd461, %r5193, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5194, %r379, %r5192;
	mul.wide.s32 	%rd463, %r5194, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5195, %r392, %r5192;
	mul.wide.s32 	%rd465, %r5195, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5196, %r393, %r5192;
	mul.wide.s32 	%rd467, %r5196, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_529:
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5201, %r1288, %r1279;
	mul.lo.s32 	%r5202, %r5201, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5203, %r378, %r5202;
	mul.wide.s32 	%rd469, %r5203, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5204, %r379, %r5202;
	mul.wide.s32 	%rd471, %r5204, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5205, %r392, %r5202;
	mul.wide.s32 	%rd473, %r5205, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5206, %r393, %r5202;
	mul.wide.s32 	%rd475, %r5206, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_531:
	add.s32 	%r1290, %r1288, %r1286;
	@%p12 bra 	$L__BB0_533;

	mul.lo.s32 	%r5211, %r1290, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5212, %r378, %r5211;
	mul.wide.s32 	%rd477, %r5212, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5213, %r379, %r5211;
	mul.wide.s32 	%rd479, %r5213, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5214, %r392, %r5211;
	mul.wide.s32 	%rd481, %r5214, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5215, %r393, %r5211;
	mul.wide.s32 	%rd483, %r5215, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_533:
	add.s32 	%r1291, %r635, 1;
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5220, %r1278, %r1291;
	mad.lo.s32 	%r5221, %r5220, %r1687, %r636;
	mul.lo.s32 	%r5222, %r5221, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5223, %r378, %r5222;
	mul.wide.s32 	%rd485, %r5223, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5224, %r379, %r5222;
	mul.wide.s32 	%rd487, %r5224, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5225, %r392, %r5222;
	mul.wide.s32 	%rd489, %r5225, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5226, %r393, %r5222;
	mul.wide.s32 	%rd491, %r5226, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_535:
	add.s32 	%r5227, %r1284, %r1291;
	mul.lo.s32 	%r1292, %r5227, %r1687;
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5232, %r1292, %r636;
	mul.lo.s32 	%r5233, %r5232, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5234, %r378, %r5233;
	mul.wide.s32 	%rd493, %r5234, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5235, %r379, %r5233;
	mul.wide.s32 	%rd495, %r5235, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5236, %r392, %r5233;
	mul.wide.s32 	%rd497, %r5236, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5237, %r393, %r5233;
	mul.wide.s32 	%rd499, %r5237, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_537:
	add.s32 	%r1293, %r1292, %r1279;
	@%p12 bra 	$L__BB0_539;

	mul.lo.s32 	%r5242, %r1293, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5243, %r378, %r5242;
	mul.wide.s32 	%rd501, %r5243, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5244, %r379, %r5242;
	mul.wide.s32 	%rd503, %r5244, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5245, %r392, %r5242;
	mul.wide.s32 	%rd505, %r5245, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5246, %r393, %r5242;
	mul.wide.s32 	%rd507, %r5246, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_539:
	setp.eq.s32 	%p286, %r23, %r2083;
	@%p286 bra 	$L__BB0_541;

	mad.lo.s32 	%r5247, %r1682, %r23, %r24;
	mov.u32 	%r5248, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5249, %r5247, 1280, %r5248;
	add.s32 	%r5250, %r5249, -256;
	shl.b32 	%r5251, %r28, 4;
	add.s32 	%r5252, %r5250, %r5251;
	st.shared.v4.u32 	[%r5252+256], {%r3796, %r3873, %r1203, %r1209};
	st.shared.v4.u32 	[%r5252+1024], {%r3563, %r3640, %r1149, %r1161};
	shl.b32 	%r5253, %r28, 3;
	add.s32 	%r5254, %r5250, %r5253;
	st.shared.v2.u32 	[%r5254+768], {%r3839, %r3905};

$L__BB0_541:
	setp.eq.s32 	%p287, %r24, %r2088;
	@%p287 bra 	$L__BB0_545;

	mad.lo.s32 	%r5258, %r1681, 384, -64;
	mul.lo.s32 	%r5259, %r5258, %r24;
	mad.lo.s32 	%r5261, %r2084, %r2083, %r5259;
	mad.lo.s32 	%r5262, %r2488, 384, %r5261;
	shl.b32 	%r5263, %r5262, 2;
	mov.u32 	%r5264, _ZN6kernel5shmemE;
	add.s32 	%r5265, %r5264, %r5263;
	add.s32 	%r5266, %r5265, -256;
	shl.b32 	%r5267, %r28, 4;
	add.s32 	%r5268, %r5266, %r5267;
	st.shared.v4.u32 	[%r5268+256], {%r3717, %r3751, %r1173, %r1185};
	st.shared.v4.u32 	[%r5268+1024], {%r4318, %r4352, %r1258, %r1259};
	shl.b32 	%r5269, %r28, 3;
	add.s32 	%r1297, %r5266, %r5269;
	@%p286 bra 	$L__BB0_544;

	st.shared.v2.u32 	[%r1297], {%r3606, %r3672};

$L__BB0_544:
	st.shared.v2.u32 	[%r1297+768], {%r4177, %r4258};

$L__BB0_545:
	setp.ne.s32 	%p289, %r23, %r2083;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p289 bra 	$L__BB0_547;

	mad.lo.s32 	%r5271, %r633, %r1684, %r26;
	mul.lo.s32 	%r5272, %r1682, %r5271;
	mul.lo.s32 	%r5273, %r5272, 768;
	mad.lo.s32 	%r5274, %r24, 384, %r5273;
	add.s32 	%r5275, %r5274, -64;
	mul.wide.s32 	%rd510, %r5275, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3796, %r3873, %r1203, %r1209};
	st.global.v4.u32 	[%rd513+1024], {%r3563, %r3640, %r1149, %r1161};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3839, %r3905};
	st.global.v2.u32 	[%rd515+1536], {%r3606, %r3672};

$L__BB0_547:
	setp.ne.s32 	%p290, %r24, %r2088;
	@%p290 bra 	$L__BB0_552;

	ld.param.u64 	%rd560, [%rd1+80];
	cvta.to.global.u64 	%rd559, %rd560;
	mad.lo.s32 	%r5278, %r634, %r1683, %r25;
	mul.lo.s32 	%r5282, %r5278, %r1738;
	mad.lo.s32 	%r5285, %r2488, 384, %r5282;
	add.s32 	%r5286, %r5285, -64;
	mad.lo.s32 	%r5289, %r1740, %r51, %r5286;
	mul.wide.s32 	%rd516, %r5289, 4;
	add.s64 	%rd517, %rd559, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3717, %r3751, %r1173, %r1185};
	st.global.v4.u32 	[%rd519+1024], {%r4318, %r4352, %r1258, %r1259};
	add.s64 	%rd35, %rd517, %rd277;
	@%p286 bra 	$L__BB0_550;

	st.global.v2.u32 	[%rd35], {%r3606, %r3672};

$L__BB0_550:
	st.global.v2.u32 	[%rd35+768], {%r4177, %r4258};
	@%p205 bra 	$L__BB0_552;

	st.global.v2.u32 	[%rd35+1536], {%r7639, %r7638};

$L__BB0_552:
	setp.ge.s32 	%p293, %r23, %r2083;
	@%p293 bra 	$L__BB0_554;

	mul.lo.s32 	%r5290, %r1682, 320;
	mul.lo.s32 	%r5291, %r24, 320;
	mad.lo.s32 	%r5292, %r5290, %r23, %r5291;
	add.s32 	%r5296, %r1737, -64;
	mad.lo.s32 	%r5300, %r5296, %r2088, %r2085;
	add.s32 	%r5301, %r5292, %r5300;
	shl.b32 	%r5302, %r5301, 2;
	mov.u32 	%r5303, _ZN6kernel5shmemE;
	add.s32 	%r5304, %r5303, %r5302;
	shl.b32 	%r5305, %r28, 4;
	add.s32 	%r5306, %r5304, %r5305;
	st.shared.v4.u32 	[%r5306], {%r7687, %r7686, %r7682, %r7680};
	shl.b32 	%r5307, %r28, 3;
	add.s32 	%r5308, %r5304, %r5307;
	st.shared.v2.u32 	[%r5308+512], {%r7424, %r7419};
	st.shared.v4.u32 	[%r5306+768], {%r7448, %r7439, %r7411, %r7407};

$L__BB0_554:
	setp.ge.s32 	%p294, %r24, %r2088;
	@%p294 bra 	$L__BB0_558;

	mad.lo.s32 	%r5314, %r2488, 384, %r2091;
	mad.lo.s32 	%r5317, %r2086, %r24, %r5314;
	add.s32 	%r5323, %r5317, %r2089;
	shl.b32 	%r5324, %r5323, 2;
	mov.u32 	%r5325, _ZN6kernel5shmemE;
	add.s32 	%r5326, %r5325, %r5324;
	shl.b32 	%r5327, %r28, 3;
	add.s32 	%r5328, %r5326, %r5327;
	@%p293 bra 	$L__BB0_557;

	add.s32 	%r7199, %r5328, -256;
	st.shared.v2.u32 	[%r7199], {%r7443, %r7436};

$L__BB0_557:
	shl.b32 	%r5347, %r28, 4;
	add.s32 	%r5348, %r5326, %r5347;
	st.shared.v4.u32 	[%r5348], {%r7434, %r7430, %r7399, %r7395};
	add.s32 	%r7200, %r5328, -256;
	st.shared.v2.u32 	[%r7200+768], {%r7402, %r7396};
	st.shared.v4.u32 	[%r5348+768], {%r7685, %r7684, %r7673, %r7672};

$L__BB0_558:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_560;

	mul.lo.s32 	%r5349, %r1682, 320;
	add.s32 	%r5350, %r23, -1;
	mul.lo.s32 	%r5351, %r24, 320;
	mad.lo.s32 	%r5352, %r5349, %r5350, %r5351;
	shl.b32 	%r5353, %r5352, 2;
	mov.u32 	%r5354, _ZN6kernel5shmemE;
	add.s32 	%r5355, %r5354, %r5353;
	add.s32 	%r5356, %r5355, -256;
	shl.b32 	%r5357, %r28, 4;
	add.s32 	%r5358, %r5356, %r5357;
	ld.shared.v4.u32 	{%r7635, %r7633, %r7627, %r7626}, [%r5358+256];
	ld.shared.v4.u32 	{%r7637, %r7636, %r7631, %r7630}, [%r5358+1024];
	shl.b32 	%r5367, %r28, 3;
	add.s32 	%r5368, %r5356, %r5367;
	ld.shared.v2.u32 	{%r7634, %r7632}, [%r5368+768];

$L__BB0_560:
	@%p203 bra 	$L__BB0_563;

	mad.lo.s32 	%r5373, %r1681, 384, -64;
	add.s32 	%r5374, %r24, -1;
	mul.lo.s32 	%r5375, %r5373, %r5374;
	mad.lo.s32 	%r5378, %r2084, %r2083, %r5375;
	mad.lo.s32 	%r5379, %r2488, 384, %r5378;
	shl.b32 	%r5380, %r5379, 2;
	mov.u32 	%r5381, _ZN6kernel5shmemE;
	add.s32 	%r5382, %r5381, %r5380;
	add.s32 	%r5383, %r5382, -256;
	shl.b32 	%r5384, %r28, 4;
	add.s32 	%r5385, %r5383, %r5384;
	ld.shared.v4.u32 	{%r7651, %r7650, %r7648, %r7646}, [%r5385+256];
	ld.shared.v4.u32 	{%r7645, %r7644, %r7642, %r7640}, [%r5385+1024];
	shl.b32 	%r5394, %r28, 3;
	add.s32 	%r5395, %r5383, %r5394;
	ld.shared.v2.u32 	{%r7649, %r7647}, [%r5395+768];
	@%p200 bra 	$L__BB0_563;

	add.s32 	%r7201, %r5395, 768;
	ld.shared.v2.u32 	{%r7629, %r7628}, [%r7201+768];

$L__BB0_563:
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7766, %r7608;
	mov.u32 	%r7767, %r7609;
	mov.u32 	%r7752, %r7596;
	mov.u32 	%r7753, %r7597;
	mov.u32 	%r7754, %r7598;
	mov.u32 	%r7755, %r7599;
	mov.u32 	%r7768, %r7610;
	mov.u32 	%r7770, %r7612;
	mov.u32 	%r7758, %r7600;
	mov.u32 	%r7759, %r7601;
	mov.u32 	%r7760, %r7602;
	mov.u32 	%r7761, %r7603;
	@%p205 bra 	$L__BB0_567;

	mad.lo.s32 	%r5401, %r633, %r1684, %r26;
	mad.lo.s32 	%r5402, %r5401, 768, 384;
	mul.lo.s32 	%r5403, %r5402, %r1682;
	mad.lo.s32 	%r5404, %r24, 384, %r5403;
	add.s32 	%r5405, %r5404, -128;
	mul.wide.s32 	%rd522, %r5405, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7766, %r7608;
	mov.u32 	%r7767, %r7609;
	mov.u32 	%r7768, %r7610;
	mov.u32 	%r7770, %r7612;
	@%p203 bra 	$L__BB0_566;

	ld.global.v4.u32 	{%r7767, %r7766, %r7770, %r7768}, [%rd37+-512];

$L__BB0_566:
	ld.global.v4.u32 	{%r7754, %r7752, %r7755, %r7753}, [%rd37];
	ld.global.v4.u32 	{%r7761, %r7760, %r7759, %r7758}, [%rd37+512];
	ld.global.v4.u32 	{%r7605, %r7604, %r7607, %r7606}, [%rd37+1024];

$L__BB0_567:
	mov.u32 	%r7769, %r7611;
	mov.u32 	%r7771, %r7613;
	mov.u32 	%r7772, %r7614;
	mov.u32 	%r7773, %r7615;
	mov.u32 	%r7774, %r7616;
	mov.u32 	%r7775, %r7617;
	mov.u32 	%r7776, %r7618;
	mov.u32 	%r7777, %r7619;
	@%p208 bra 	$L__BB0_569;

	mad.lo.s32 	%r5423, %r634, %r1683, %r25;
	mad.lo.s32 	%r5429, %r2488, 384, %r52;
	mad.lo.s32 	%r5430, %r5423, %r1738, %r5429;
	mad.lo.s32 	%r5433, %r1740, %r51, %r5430;
	mul.wide.s32 	%rd526, %r5433, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7621, %r7620, %r7623, %r7622}, [%rd529];
	ld.global.v4.u32 	{%r7777, %r7775, %r7773, %r7772}, [%rd529+512];
	ld.global.v4.u32 	{%r7776, %r7774, %r7771, %r7769}, [%rd529+1024];
	ld.global.v4.u32 	{%r7767, %r7766, %r7770, %r7768}, [%rd529+1536];

$L__BB0_569:
	neg.s32 	%r7207, %r1686;
	not.b32 	%r7206, %r26;
	add.s32 	%r7205, %r1684, %r7206;
	mul.lo.s32 	%r7204, %r7205, %r1685;
	not.b32 	%r7203, %r25;
	add.s32 	%r7202, %r1683, %r7203;
	mad.lo.s32 	%r5457, %r7202, %r1685, %r7204;
	add.s32 	%r5458, %r5457, %r1686;
	add.s32 	%r5467, %r5458, %r2494;
	add.s32 	%r1417, %r7475, 1;
	add.s32 	%r5468, %r1417, %r5467;
	div.s32 	%r5469, %r5468, %r1686;
	mad.lo.s32 	%r1418, %r5469, %r7207, %r5468;
	mad.lo.s32 	%r5476, %r5469, %r30, %r2505;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5477, %r5476, %r1687;
	shr.u32 	%r5478, %r5477, 31;
	add.s32 	%r5479, %r5477, %r5478;
	shr.s32 	%r5480, %r5479, 1;
	mad.lo.s32 	%r5481, %r5480, %r1686, %r1418;
	shl.b32 	%r5482, %r5481, 5;
	add.s32 	%r5483, %r5482, %r28;
	cvt.s64.s32 	%rd38, %r5483;
	mul.wide.s32 	%rd532, %r5483, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7477, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p71 bra 	$L__BB0_571;
	bra.uni 	$L__BB0_570;

$L__BB0_571:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7476, [%rd538];
	bra.uni 	$L__BB0_572;

$L__BB0_570:
	shl.b32 	%r5484, %r1418, 5;
	add.s32 	%r5485, %r5484, %r28;
	mul.wide.s32 	%rd535, %r5485, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5486, %r5487, %r5488, %r5489}, [%rd536];
	mov.u32 	%r7307, %r7311;
	mov.u32 	%r7308, %r7312;
	mov.u32 	%r7309, %r7313;
	mov.u32 	%r7310, %r7314;
	mov.u32 	%r7311, %r7315;
	mov.u32 	%r7312, %r7316;
	mov.u32 	%r7313, %r7317;
	mov.u32 	%r7314, %r7318;
	mov.u32 	%r7315, %r5489;
	mov.u32 	%r7316, %r5488;
	mov.u32 	%r7317, %r5487;
	mov.u32 	%r7318, %r5486;

$L__BB0_572:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5490, {low,high};}

	// end inline asm
	selp.b32 	%r5492, %r7302, %r5490, %p12;
	// begin inline asm
	{mul.f16x2 %r5491,%r5492,%r7445;
}
	// end inline asm
	selp.b32 	%r5495, %r7306, %r5490, %p12;
	// begin inline asm
	{mul.f16x2 %r5494,%r5495,%r7438;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5497, {low,high};}

	// end inline asm
	selp.b32 	%r5499, %r7302, %r5497, %p12;
	// begin inline asm
	{mul.f16x2 %r5498,%r5499,%r7426;
}
	// end inline asm
	selp.b32 	%r5502, %r7306, %r5497, %p12;
	// begin inline asm
	{mul.f16x2 %r5501,%r5502,%r7421;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5504, {low,high};}

	// end inline asm
	selp.b32 	%r5506, %r7302, %r5504, %p12;
	// begin inline asm
	{mul.f16x2 %r5505,%r5506,%r7413;
}
	// end inline asm
	selp.b32 	%r5509, %r7306, %r5504, %p12;
	// begin inline asm
	{mul.f16x2 %r5508,%r5509,%r7412;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5511, {low,high};}

	// end inline asm
	selp.b32 	%r5513, %r7302, %r5511, %p12;
	// begin inline asm
	{mul.f16x2 %r5512,%r5513,%r7417;
}
	// end inline asm
	selp.b32 	%r5516, %r7306, %r5511, %p12;
	// begin inline asm
	{mul.f16x2 %r5515,%r5516,%r7416;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5518, {low,high};}

	// end inline asm
	selp.b32 	%r5520, %r7302, %r5518, %p12;
	// begin inline asm
	{mul.f16x2 %r5519,%r5520,%r7415;
}
	// end inline asm
	selp.b32 	%r5523, %r7306, %r5518, %p12;
	// begin inline asm
	{mul.f16x2 %r5522,%r5523,%r7409;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5525, {low,high};}

	// end inline asm
	selp.b32 	%r5527, %r7302, %r5525, %p12;
	// begin inline asm
	{mul.f16x2 %r5526,%r5527,%r7405;
}
	// end inline asm
	selp.b32 	%r5530, %r7306, %r5525, %p12;
	// begin inline asm
	{mul.f16x2 %r5529,%r5530,%r7404;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5532, {low,high};}

	// end inline asm
	selp.b32 	%r5534, %r7302, %r5532, %p12;
	// begin inline asm
	{mul.f16x2 %r5533,%r5534,%r7403;
}
	// end inline asm
	selp.b32 	%r5537, %r7306, %r5532, %p12;
	// begin inline asm
	{mul.f16x2 %r5536,%r5537,%r7397;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5539, {low,high};}

	// end inline asm
	selp.b32 	%r5541, %r7302, %r5539, %p12;
	// begin inline asm
	{mul.f16x2 %r5540,%r5541,%r7390;
}
	// end inline asm
	selp.b32 	%r5544, %r7306, %r5539, %p12;
	// begin inline asm
	{mul.f16x2 %r5543,%r5544,%r7389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5546, {low,high};}

	// end inline asm
	selp.b32 	%r5548, %r7302, %r5546, %p12;
	// begin inline asm
	{mul.f16x2 %r5547,%r5548,%r7619;
}
	// end inline asm
	selp.b32 	%r5551, %r7306, %r5546, %p12;
	// begin inline asm
	{mul.f16x2 %r5550,%r5551,%r7617;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5553, {low,high};}

	// end inline asm
	selp.b32 	%r5555, %r7302, %r5553, %p12;
	// begin inline asm
	{mul.f16x2 %r5554,%r5555,%r7618;
}
	// end inline asm
	selp.b32 	%r5558, %r7306, %r5553, %p12;
	// begin inline asm
	{mul.f16x2 %r5557,%r5558,%r7616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5560, {low,high};}

	// end inline asm
	selp.b32 	%r5562, %r7302, %r5560, %p12;
	// begin inline asm
	{mul.f16x2 %r5561,%r5562,%r7382;
}
	// end inline asm
	selp.b32 	%r5565, %r7306, %r5560, %p12;
	// begin inline asm
	{mul.f16x2 %r5564,%r5565,%r7381;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5567, {low,high};}

	// end inline asm
	selp.b32 	%r5569, %r7302, %r5567, %p12;
	// begin inline asm
	{mul.f16x2 %r5568,%r5569,%r7386;
}
	// end inline asm
	selp.b32 	%r5572, %r7306, %r5567, %p12;
	// begin inline asm
	{mul.f16x2 %r5571,%r5572,%r7385;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5574, {low,high};}

	// end inline asm
	selp.b32 	%r5576, %r7302, %r5574, %p12;
	// begin inline asm
	{mul.f16x2 %r5575,%r5576,%r7384;
}
	// end inline asm
	selp.b32 	%r5579, %r7306, %r5574, %p12;
	// begin inline asm
	{mul.f16x2 %r5578,%r5579,%r7379;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5581, {low,high};}

	// end inline asm
	selp.b32 	%r5583, %r7302, %r5581, %p12;
	// begin inline asm
	{mul.f16x2 %r5582,%r5583,%r7374;
}
	// end inline asm
	selp.b32 	%r5586, %r7306, %r5581, %p12;
	// begin inline asm
	{mul.f16x2 %r5585,%r5586,%r7373;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5588, {low,high};}

	// end inline asm
	selp.b32 	%r5590, %r7302, %r5588, %p12;
	// begin inline asm
	{mul.f16x2 %r5589,%r5590,%r7376;
}
	// end inline asm
	selp.b32 	%r5593, %r7306, %r5588, %p12;
	// begin inline asm
	{mul.f16x2 %r5592,%r5593,%r7375;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5595, {low,high};}

	// end inline asm
	selp.b32 	%r5597, %r7302, %r5595, %p12;
	// begin inline asm
	{mul.f16x2 %r5596,%r5597,%r7603;
}
	// end inline asm
	selp.b32 	%r5600, %r7306, %r5595, %p12;
	// begin inline asm
	{mul.f16x2 %r5599,%r5600,%r7602;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5602, {low,high};}

	// end inline asm
	selp.b32 	%r5604, %r7302, %r5602, %p12;
	// begin inline asm
	{mul.f16x2 %r5603,%r5604,%r7601;
}
	// end inline asm
	selp.b32 	%r5607, %r7306, %r5602, %p12;
	// begin inline asm
	{mul.f16x2 %r5606,%r5607,%r7600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5609, {low,high};}

	// end inline asm
	selp.b32 	%r5611, %r7302, %r5609, %p12;
	// begin inline asm
	{mul.f16x2 %r5610,%r5611,%r7615;
}
	// end inline asm
	selp.b32 	%r5614, %r7306, %r5609, %p12;
	// begin inline asm
	{mul.f16x2 %r5613,%r5614,%r7614;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5616, {low,high};}

	// end inline asm
	selp.b32 	%r5618, %r7302, %r5616, %p12;
	// begin inline asm
	{mul.f16x2 %r5617,%r5618,%r7368;
}
	// end inline asm
	selp.b32 	%r5621, %r7306, %r5616, %p12;
	// begin inline asm
	{mul.f16x2 %r5620,%r5621,%r7367;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5623, {low,high};}

	// end inline asm
	selp.b32 	%r5625, %r7302, %r5623, %p12;
	// begin inline asm
	{mul.f16x2 %r5624,%r5625,%r7613;
}
	// end inline asm
	selp.b32 	%r5628, %r7306, %r5623, %p12;
	// begin inline asm
	{mul.f16x2 %r5627,%r5628,%r7611;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5630, {low,high};}

	// end inline asm
	selp.b32 	%r5632, %r7302, %r5630, %p12;
	// begin inline asm
	{mul.f16x2 %r5631,%r5632,%r7612;
}
	// end inline asm
	selp.b32 	%r5635, %r7306, %r5630, %p12;
	// begin inline asm
	{mul.f16x2 %r5634,%r5635,%r7610;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5637, {low,high};}

	// end inline asm
	selp.b32 	%r5639, %r7302, %r5637, %p12;
	// begin inline asm
	{mul.f16x2 %r5638,%r5639,%r7599;
}
	// end inline asm
	selp.b32 	%r5642, %r7306, %r5637, %p12;
	// begin inline asm
	{mul.f16x2 %r5641,%r5642,%r7597;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5644, {low,high};}

	// end inline asm
	selp.b32 	%r5646, %r7302, %r5644, %p12;
	// begin inline asm
	{mul.f16x2 %r5645,%r5646,%r7598;
}
	// end inline asm
	selp.b32 	%r5649, %r7306, %r5644, %p12;
	// begin inline asm
	{mul.f16x2 %r5648,%r5649,%r7596;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5651, {low,high};}

	// end inline asm
	selp.b32 	%r5653, %r7302, %r5651, %p12;
	// begin inline asm
	{mul.f16x2 %r5652,%r5653,%r7609;
}
	// end inline asm
	selp.b32 	%r5656, %r7306, %r5651, %p12;
	// begin inline asm
	{mul.f16x2 %r5655,%r5656,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5658,%r7472,%r3606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5661,%r3717,%r3563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5664,%r5658,%r5661;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5667,%r7210,%r5664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5670,%r5491,%r5667;
}
	// end inline asm
	selp.b32 	%r7440, %r5491, %r5670, %p12;
	// begin inline asm
	{sub.f16x2 %r5673,%r7471,%r3672;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5676,%r3751,%r3640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5679,%r5673,%r5676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5682,%r7210,%r5679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5685,%r5494,%r5682;
}
	// end inline asm
	selp.b32 	%r7435, %r5494, %r5685, %p12;
	// begin inline asm
	{sub.f16x2 %r5688,%r7468,%r3839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5691,%r7474,%r3796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5694,%r5688,%r5691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5697,%r7210,%r5694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5700,%r5498,%r5697;
}
	// end inline asm
	selp.b32 	%r7444, %r5498, %r5700, %p12;
	// begin inline asm
	{sub.f16x2 %r5703,%r7467,%r3905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5706,%r7473,%r3873;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5709,%r5703,%r5706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5712,%r7210,%r5709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5715,%r5501,%r5712;
}
	// end inline asm
	selp.b32 	%r7437, %r5501, %r5715, %p12;
	// begin inline asm
	{sub.f16x2 %r5718,%r7471,%r7472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5721,%r7301,%r5718;
}
	// end inline asm
	@%p12 bra 	$L__BB0_574;
	bra.uni 	$L__BB0_573;

$L__BB0_574:
	// begin inline asm
	{neg.f16x2 %r7795,%r5505;
}
	// end inline asm
	bra.uni 	$L__BB0_575;

$L__BB0_573:
	// begin inline asm
	{mul.f16x2 %r7795,%r7302,%r5718;
}
	// end inline asm

$L__BB0_575:
	mov.u32 	%r5732, 31;
	mov.u32 	%r5734, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5730,%r7795,%r5732,%r2191,%r5734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5735,%r5721,%r5730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5738,%r1173,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5741,%r5738,%r5735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5744,%r7210,%r5741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7442,%r5505,%r5744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5750,%r7473,%r7474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5753,%r7301,%r5750;
}
	// end inline asm
	mov.u32 	%r7796, %r5512;
	@%p12 bra 	$L__BB0_577;

	// begin inline asm
	{mul.f16x2 %r7796,%r7302,%r5750;
}
	// end inline asm

$L__BB0_577:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5762,%r7796,%r5732,%r2191,%r5734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5767,%r5753,%r5762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5770,%r7462,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5773,%r5767,%r5770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5776,%r7210,%r5773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7447,%r5512,%r5776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5782,%r7464,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5785,%r7470,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5788,%r5782,%r5785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5791,%r7210,%r5788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5794,%r5519,%r5791;
}
	// end inline asm
	selp.b32 	%r7445, %r5519, %r5794, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7472;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5799,%r7472,%r413,%r2191,%r5734;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5799;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5805, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5806,%r5805,%r7471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5809,%r7305,%r5806;
}
	// end inline asm
	@%p12 bra 	$L__BB0_579;
	bra.uni 	$L__BB0_578;

$L__BB0_579:
	// begin inline asm
	{neg.f16x2 %r7797,%r5508;
}
	// end inline asm
	bra.uni 	$L__BB0_580;

$L__BB0_578:
	// begin inline asm
	{mul.f16x2 %r7797,%r7306,%r5806;
}
	// end inline asm

$L__BB0_580:
	mov.u32 	%r5824, 31;
	mov.u32 	%r5848, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5822,%r7797,%r5824,%r2191,%r5848;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5827,%r5809,%r5822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5830,%r1185,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5833,%r5830,%r5827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5836,%r7210,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7441,%r5508,%r5836;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7474;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5844,%r7474,%r413,%r2191,%r5848;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5844;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5850, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r5850,%r7473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r7305,%r5851;
}
	// end inline asm
	mov.u32 	%r7798, %r5515;
	@%p12 bra 	$L__BB0_582;

	// begin inline asm
	{mul.f16x2 %r7798,%r7306,%r5851;
}
	// end inline asm

$L__BB0_582:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5865,%r7798,%r5824,%r2191,%r5848;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5870,%r5854,%r5865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5873,%r7461,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5876,%r5870,%r5873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5879,%r7210,%r5876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7446,%r5515,%r5879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r7463,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5888,%r7469,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5891,%r5885,%r5888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5894,%r7210,%r5891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5897,%r5522,%r5894;
}
	// end inline asm
	selp.b32 	%r7438, %r5522, %r5897, %p12;
	// begin inline asm
	{sub.f16x2 %r5900,%r7469,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5903,%r7301,%r5900;
}
	// end inline asm
	mov.u32 	%r7799, %r5526;
	@%p12 bra 	$L__BB0_584;

	// begin inline asm
	{mul.f16x2 %r7799,%r7302,%r5900;
}
	// end inline asm

$L__BB0_584:
	mov.u32 	%r5914, 31;
	mov.u32 	%r5953, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5912,%r7799,%r5914,%r2191,%r5953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5917,%r5903,%r5912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5920,%r7456,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5923,%r5917,%r5920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5926,%r7210,%r5923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7433,%r5526,%r5926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5932,%r7458,%r4177;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5935,%r4318,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5938,%r5932,%r5935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5941,%r7210,%r5938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5944,%r5533,%r5941;
}
	// end inline asm
	selp.b32 	%r7431, %r5533, %r5944, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7470;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5949,%r7470,%r413,%r2191,%r5953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5949;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5955, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5956,%r5955,%r7469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5959,%r7305,%r5956;
}
	// end inline asm
	mov.u32 	%r7800, %r5529;
	@%p12 bra 	$L__BB0_586;

	// begin inline asm
	{mul.f16x2 %r7800,%r7306,%r5956;
}
	// end inline asm

$L__BB0_586:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5970,%r7800,%r5914,%r2191,%r5953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5975,%r5959,%r5970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5978,%r7455,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5981,%r5975,%r5978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5984,%r7210,%r5981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7432,%r5529,%r5984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r7457,%r4258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5993,%r4352,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5996,%r5990,%r5993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5999,%r7210,%r5996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6002,%r5536,%r5999;
}
	// end inline asm
	selp.b32 	%r7429, %r5536, %r6002, %p12;
	// begin inline asm
	{sub.f16x2 %r6005,%r7467,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6008,%r7301,%r6005;
}
	// end inline asm
	@%p12 bra 	$L__BB0_588;
	bra.uni 	$L__BB0_587;

$L__BB0_588:
	// begin inline asm
	{neg.f16x2 %r7801,%r5540;
}
	// end inline asm
	bra.uni 	$L__BB0_589;

$L__BB0_587:
	// begin inline asm
	{mul.f16x2 %r7801,%r7302,%r6005;
}
	// end inline asm

$L__BB0_589:
	mov.u32 	%r6021, 31;
	mov.u32 	%r6023, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6019,%r7801,%r6021,%r2191,%r6023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6024,%r6008,%r6019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6027,%r7462,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r6027,%r6024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6033,%r7210,%r6030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7423,%r5540,%r6033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6039,%r7650,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6042,%r7301,%r6039;
}
	// end inline asm
	mov.u32 	%r7802, %r5547;
	@%p12 bra 	$L__BB0_591;

	// begin inline asm
	{mul.f16x2 %r7802,%r7302,%r6039;
}
	// end inline asm

$L__BB0_591:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6051,%r7802,%r6021,%r2191,%r6023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6056,%r6042,%r6051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6059,%r7648,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6062,%r6056,%r6059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6065,%r7210,%r6062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r5547,%r6065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r7649,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6074,%r7466,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6077,%r6071,%r6074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6080,%r7210,%r6077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6083,%r5554,%r6080;
}
	// end inline asm
	selp.b32 	%r7426, %r5554, %r6083, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7468;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6088,%r7468,%r413,%r2191,%r6023;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6088;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6094, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6095,%r6094,%r7467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6098,%r7305,%r6095;
}
	// end inline asm
	@%p12 bra 	$L__BB0_593;
	bra.uni 	$L__BB0_592;

$L__BB0_593:
	// begin inline asm
	{neg.f16x2 %r7803,%r5543;
}
	// end inline asm
	bra.uni 	$L__BB0_594;

$L__BB0_592:
	// begin inline asm
	{mul.f16x2 %r7803,%r7306,%r6095;
}
	// end inline asm

$L__BB0_594:
	mov.u32 	%r6113, 31;
	mov.u32 	%r6137, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6111,%r7803,%r6113,%r2191,%r6137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6116,%r6098,%r6111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6119,%r7461,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6122,%r6119,%r6116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6125,%r7210,%r6122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7422,%r5543,%r6125;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6133,%r7651,%r413,%r2191,%r6137;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6133;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6139, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6140,%r6139,%r7650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6143,%r7305,%r6140;
}
	// end inline asm
	mov.u32 	%r7804, %r5550;
	@%p12 bra 	$L__BB0_596;

	// begin inline asm
	{mul.f16x2 %r7804,%r7306,%r6140;
}
	// end inline asm

$L__BB0_596:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6154,%r7804,%r6113,%r2191,%r6137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6159,%r6143,%r6154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6162,%r7646,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6165,%r6159,%r6162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6168,%r7210,%r6165;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7427,%r5550,%r6168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6174,%r7647,%r7467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6177,%r7465,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6180,%r6174,%r6177;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6183,%r7210,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6186,%r5557,%r6183;
}
	// end inline asm
	selp.b32 	%r7421, %r5557, %r6186, %p12;
	// begin inline asm
	{sub.f16x2 %r6189,%r7463,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6192,%r7301,%r6189;
}
	// end inline asm
	@%p12 bra 	$L__BB0_598;
	bra.uni 	$L__BB0_597;

$L__BB0_598:
	// begin inline asm
	{neg.f16x2 %r7805,%r5561;
}
	// end inline asm
	bra.uni 	$L__BB0_599;

$L__BB0_597:
	// begin inline asm
	{mul.f16x2 %r7805,%r7302,%r6189;
}
	// end inline asm

$L__BB0_599:
	mov.u32 	%r6205, 31;
	mov.u32 	%r6207, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6203,%r7805,%r6205,%r2191,%r6207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6208,%r6192,%r6203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6211,%r7456,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6214,%r6211,%r6208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6217,%r7210,%r6214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7413,%r5561,%r6217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6223,%r7465,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6226,%r7301,%r6223;
}
	// end inline asm
	mov.u32 	%r7806, %r5568;
	@%p12 bra 	$L__BB0_601;

	// begin inline asm
	{mul.f16x2 %r7806,%r7302,%r6223;
}
	// end inline asm

$L__BB0_601:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6235,%r7806,%r6205,%r2191,%r6207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6240,%r6226,%r6235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6243,%r7452,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6246,%r6240,%r6243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6249,%r7210,%r6246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7417,%r5568,%r6249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6255,%r7454,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6258,%r7460,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6261,%r6255,%r6258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6264,%r7210,%r6261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6267,%r5575,%r6264;
}
	// end inline asm
	selp.b32 	%r7415, %r5575, %r6267, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6272,%r7464,%r413,%r2191,%r6207;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6272;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6278, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6278,%r7463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r7305,%r6279;
}
	// end inline asm
	@%p12 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	// begin inline asm
	{neg.f16x2 %r7807,%r5564;
}
	// end inline asm
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	// begin inline asm
	{mul.f16x2 %r7807,%r7306,%r6279;
}
	// end inline asm

$L__BB0_604:
	mov.u32 	%r6297, 31;
	mov.u32 	%r6321, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6295,%r7807,%r6297,%r2191,%r6321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6300,%r6282,%r6295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r7455,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6306,%r6303,%r6300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6309,%r7210,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7412,%r5564,%r6309;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7466;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6317,%r7466,%r413,%r2191,%r6321;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6317;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6323, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r6323,%r7465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r7305,%r6324;
}
	// end inline asm
	mov.u32 	%r7808, %r5571;
	@%p12 bra 	$L__BB0_606;

	// begin inline asm
	{mul.f16x2 %r7808,%r7306,%r6324;
}
	// end inline asm

$L__BB0_606:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6338,%r7808,%r6297,%r2191,%r6321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6343,%r6327,%r6338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6346,%r7451,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6349,%r6343,%r6346;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6352,%r7210,%r6349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7416,%r5571,%r6352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6358,%r7453,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6361,%r7459,%r7465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6364,%r6358,%r6361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6367,%r7210,%r6364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6370,%r5578,%r6367;
}
	// end inline asm
	selp.b32 	%r7409, %r5578, %r6370, %p12;
	// begin inline asm
	{sub.f16x2 %r6373,%r7457,%r7458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6376,%r7301,%r6373;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;
	bra.uni 	$L__BB0_607;

$L__BB0_608:
	// begin inline asm
	{neg.f16x2 %r7809,%r5582;
}
	// end inline asm
	bra.uni 	$L__BB0_609;

$L__BB0_607:
	// begin inline asm
	{mul.f16x2 %r7809,%r7302,%r6373;
}
	// end inline asm

$L__BB0_609:
	mov.u32 	%r6389, 31;
	mov.u32 	%r6391, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6387,%r7809,%r6389,%r2191,%r6391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6392,%r6376,%r6387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6395,%r1258,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6398,%r6395,%r6392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6401,%r7210,%r6398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7401,%r5582,%r6401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6407,%r7459,%r7460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r7301,%r6407;
}
	// end inline asm
	mov.u32 	%r7810, %r5589;
	@%p12 bra 	$L__BB0_611;

	// begin inline asm
	{mul.f16x2 %r7810,%r7302,%r6407;
}
	// end inline asm

$L__BB0_611:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6419,%r7810,%r6389,%r2191,%r6391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6424,%r6410,%r6419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6427,%r7450,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6430,%r6424,%r6427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6433,%r7210,%r6430;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7405,%r5589,%r6433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r7634,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6442,%r7637,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6445,%r6439,%r6442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6448,%r7210,%r6445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6451,%r5596,%r6448;
}
	// end inline asm
	selp.b32 	%r7403, %r5596, %r6451, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7458;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6456,%r7458,%r413,%r2191,%r6391;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6456;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6462, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6463,%r6462,%r7457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6466,%r7305,%r6463;
}
	// end inline asm
	@%p12 bra 	$L__BB0_613;
	bra.uni 	$L__BB0_612;

$L__BB0_613:
	// begin inline asm
	{neg.f16x2 %r7811,%r5585;
}
	// end inline asm
	bra.uni 	$L__BB0_614;

$L__BB0_612:
	// begin inline asm
	{mul.f16x2 %r7811,%r7306,%r6463;
}
	// end inline asm

$L__BB0_614:
	mov.u32 	%r6481, 31;
	mov.u32 	%r6505, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6479,%r7811,%r6481,%r2191,%r6505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6484,%r6466,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r1259,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6490,%r6487,%r6484;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6493,%r7210,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r5585,%r6493;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7460;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6501,%r7460,%r413,%r2191,%r6505;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6501;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6507, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r6507,%r7459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6511,%r7305,%r6508;
}
	// end inline asm
	mov.u32 	%r7812, %r5592;
	@%p12 bra 	$L__BB0_616;

	// begin inline asm
	{mul.f16x2 %r7812,%r7306,%r6508;
}
	// end inline asm

$L__BB0_616:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6522,%r7812,%r6481,%r2191,%r6505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6527,%r6511,%r6522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6530,%r7449,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6533,%r6527,%r6530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6536,%r7210,%r6533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7404,%r5592,%r6536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6542,%r7632,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6545,%r7636,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6548,%r6542,%r6545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6551,%r7210,%r6548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6554,%r5599,%r6551;
}
	// end inline asm
	selp.b32 	%r7397, %r5599, %r6554, %p12;
	// begin inline asm
	{sub.f16x2 %r6557,%r7636,%r7637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6560,%r7301,%r6557;
}
	// end inline asm
	mov.u32 	%r7813, %r5603;
	@%p12 bra 	$L__BB0_618;

	// begin inline asm
	{mul.f16x2 %r7813,%r7302,%r6557;
}
	// end inline asm

$L__BB0_618:
	mov.u32 	%r6571, 31;
	mov.u32 	%r6595, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6569,%r7813,%r6571,%r2191,%r6595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r6560,%r6569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6577,%r7631,%r1258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6580,%r6574,%r6577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6583,%r7210,%r6580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7394,%r5603,%r6583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7637;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6591,%r7637,%r413,%r2191,%r6595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6591;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6597, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6598,%r6597,%r7636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6601,%r7305,%r6598;
}
	// end inline asm
	mov.u32 	%r7814, %r5606;
	@%p12 bra 	$L__BB0_620;

	// begin inline asm
	{mul.f16x2 %r7814,%r7306,%r6598;
}
	// end inline asm

$L__BB0_620:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6612,%r7814,%r6571,%r2191,%r6595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6617,%r6601,%r6612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6620,%r7630,%r1259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6623,%r6617,%r6620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6626,%r7210,%r6623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7393,%r5606,%r6626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6632,%r7647,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6635,%r7301,%r6632;
}
	// end inline asm
	@%p12 bra 	$L__BB0_622;
	bra.uni 	$L__BB0_621;

$L__BB0_622:
	// begin inline asm
	{neg.f16x2 %r7815,%r5610;
}
	// end inline asm
	bra.uni 	$L__BB0_623;

$L__BB0_621:
	// begin inline asm
	{mul.f16x2 %r7815,%r7302,%r6632;
}
	// end inline asm

$L__BB0_623:
	mov.u32 	%r6648, 31;
	mov.u32 	%r6672, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6646,%r7815,%r6648,%r2191,%r6672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6651,%r6635,%r6646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6654,%r7452,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6657,%r6654,%r6651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6660,%r7210,%r6657;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7390,%r5610,%r6660;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6668,%r7649,%r413,%r2191,%r6672;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6668;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6674, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6675,%r6674,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6678,%r7305,%r6675;
}
	// end inline asm
	@%p12 bra 	$L__BB0_625;
	bra.uni 	$L__BB0_624;

$L__BB0_625:
	// begin inline asm
	{neg.f16x2 %r7816,%r5613;
}
	// end inline asm
	bra.uni 	$L__BB0_626;

$L__BB0_624:
	// begin inline asm
	{mul.f16x2 %r7816,%r7306,%r6675;
}
	// end inline asm

$L__BB0_626:
	mov.u32 	%r6693, 31;
	mov.u32 	%r6695, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6691,%r7816,%r6693,%r2191,%r6695;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6696,%r6678,%r6691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6699,%r7451,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6702,%r6699,%r6696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6705,%r7210,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7389,%r5613,%r6705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6711,%r7453,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6714,%r7301,%r6711;
}
	// end inline asm
	@%p12 bra 	$L__BB0_628;
	bra.uni 	$L__BB0_627;

$L__BB0_628:
	// begin inline asm
	{neg.f16x2 %r7817,%r5617;
}
	// end inline asm
	bra.uni 	$L__BB0_629;

$L__BB0_627:
	// begin inline asm
	{mul.f16x2 %r7817,%r7302,%r6711;
}
	// end inline asm

$L__BB0_629:
	mov.u32 	%r6727, 31;
	mov.u32 	%r6729, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6725,%r7817,%r6727,%r2191,%r6729;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6730,%r6714,%r6725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6733,%r7450,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6736,%r6733,%r6730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6739,%r7210,%r6736;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7382,%r5617,%r6739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6745,%r7644,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6748,%r7301,%r6745;
}
	// end inline asm
	mov.u32 	%r7818, %r5624;
	@%p12 bra 	$L__BB0_631;

	// begin inline asm
	{mul.f16x2 %r7818,%r7302,%r6745;
}
	// end inline asm

$L__BB0_631:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6757,%r7818,%r6727,%r2191,%r6729;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6762,%r6748,%r6757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6765,%r7642,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6768,%r6762,%r6765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6771,%r7210,%r6768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7386,%r5624,%r6771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6777,%r7629,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6780,%r7635,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6783,%r6777,%r6780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6786,%r7210,%r6783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6789,%r5631,%r6786;
}
	// end inline asm
	selp.b32 	%r7384, %r5631, %r6789, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7454;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6794,%r7454,%r413,%r2191,%r6729;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6794;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6800, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6801,%r6800,%r7453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6804,%r7305,%r6801;
}
	// end inline asm
	@%p12 bra 	$L__BB0_633;
	bra.uni 	$L__BB0_632;

$L__BB0_633:
	// begin inline asm
	{neg.f16x2 %r7819,%r5620;
}
	// end inline asm
	bra.uni 	$L__BB0_634;

$L__BB0_632:
	// begin inline asm
	{mul.f16x2 %r7819,%r7306,%r6801;
}
	// end inline asm

$L__BB0_634:
	mov.u32 	%r6819, 31;
	mov.u32 	%r6843, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6817,%r7819,%r6819,%r2191,%r6843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6822,%r6804,%r6817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6825,%r7449,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6828,%r6825,%r6822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6831,%r7210,%r6828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7381,%r5620,%r6831;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6839,%r7645,%r413,%r2191,%r6843;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6839;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6845, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6846,%r6845,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6849,%r7305,%r6846;
}
	// end inline asm
	mov.u32 	%r7820, %r5627;
	@%p12 bra 	$L__BB0_636;

	// begin inline asm
	{mul.f16x2 %r7820,%r7306,%r6846;
}
	// end inline asm

$L__BB0_636:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6860,%r7820,%r6819,%r2191,%r6843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6865,%r6849,%r6860;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6868,%r7640,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6871,%r6865,%r6868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6874,%r7210,%r6871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7385,%r5627,%r6874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6880,%r7628,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6883,%r7633,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6886,%r6880,%r6883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6889,%r7210,%r6886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6892,%r5634,%r6889;
}
	// end inline asm
	selp.b32 	%r7379, %r5634, %r6892, %p12;
	// begin inline asm
	{sub.f16x2 %r6895,%r7632,%r7634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6898,%r7301,%r6895;
}
	// end inline asm
	@%p12 bra 	$L__BB0_638;
	bra.uni 	$L__BB0_637;

$L__BB0_638:
	// begin inline asm
	{neg.f16x2 %r7821,%r5638;
}
	// end inline asm
	bra.uni 	$L__BB0_639;

$L__BB0_637:
	// begin inline asm
	{mul.f16x2 %r7821,%r7302,%r6895;
}
	// end inline asm

$L__BB0_639:
	mov.u32 	%r6911, 31;
	mov.u32 	%r6913, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6909,%r7821,%r6911,%r2191,%r6913;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6914,%r6898,%r6909;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6917,%r7631,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6920,%r6917,%r6914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6923,%r7210,%r6920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7374,%r5638,%r6923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6929,%r7633,%r7635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6932,%r7301,%r6929;
}
	// end inline asm
	mov.u32 	%r7822, %r5645;
	@%p12 bra 	$L__BB0_641;

	// begin inline asm
	{mul.f16x2 %r7822,%r7302,%r6929;
}
	// end inline asm

$L__BB0_641:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6941,%r7822,%r6911,%r2191,%r6913;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6946,%r6932,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6949,%r7627,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6952,%r6946,%r6949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6955,%r7210,%r6952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7376,%r5645,%r6955;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7634;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6963,%r7634,%r413,%r2191,%r6913;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6963;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6969, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6970,%r6969,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6973,%r7305,%r6970;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7823,%r5641;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7823,%r7306,%r6970;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6988, 31;
	mov.u32 	%r7012, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6986,%r7823,%r6988,%r2191,%r7012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6991,%r6973,%r6986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6994,%r7630,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6997,%r6994,%r6991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7000,%r7210,%r6997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7373,%r5641,%r7000;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7635;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7008,%r7635,%r413,%r2191,%r7012;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7008;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7014, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7015,%r7014,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7018,%r7305,%r7015;
}
	// end inline asm
	mov.u32 	%r7824, %r5648;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7824,%r7306,%r7015;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7029,%r7824,%r6988,%r2191,%r7012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r7018,%r7029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7037,%r7626,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7040,%r7034,%r7037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7043,%r7210,%r7040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7375,%r5648,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7049,%r7628,%r7629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7052,%r7301,%r7049;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;
	bra.uni 	$L__BB0_647;

$L__BB0_648:
	// begin inline asm
	{neg.f16x2 %r7825,%r5652;
}
	// end inline asm
	bra.uni 	$L__BB0_649;

$L__BB0_647:
	// begin inline asm
	{mul.f16x2 %r7825,%r7302,%r7049;
}
	// end inline asm

$L__BB0_649:
	mov.u32 	%r7065, 31;
	mov.u32 	%r7089, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7063,%r7825,%r7065,%r2191,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7068,%r7052,%r7063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7071,%r7627,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7074,%r7071,%r7068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7077,%r7210,%r7074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7368,%r5652,%r7077;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7629;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7085,%r7629,%r413,%r2191,%r7089;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7085;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7091, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7092,%r7091,%r7628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7095,%r7305,%r7092;
}
	// end inline asm
	@%p12 bra 	$L__BB0_651;
	bra.uni 	$L__BB0_650;

$L__BB0_651:
	// begin inline asm
	{neg.f16x2 %r7826,%r5655;
}
	// end inline asm
	bra.uni 	$L__BB0_652;

$L__BB0_650:
	// begin inline asm
	{mul.f16x2 %r7826,%r7306,%r7092;
}
	// end inline asm

$L__BB0_652:
	mov.u32 	%r7110, 31;
	mov.u32 	%r7112, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7108,%r7826,%r7110,%r2191,%r7112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7113,%r7095,%r7108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7116,%r7626,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7119,%r7116,%r7113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7122,%r7210,%r7119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7367,%r5655,%r7122;
}
	// end inline asm
	bar.sync 	0;
	@%p286 bra 	$L__BB0_655;

	setp.ne.s32 	%p349, %r24, %r2088;
	shl.b32 	%r7131, %r24, 8;
	shl.b32 	%r7135, %r1682, 8;
	or.b32  	%r7136, %r7135, 128;
	mad.lo.s32 	%r7137, %r7136, %r23, %r2091;
	add.s32 	%r7138, %r7137, %r7131;
	shl.b32 	%r7139, %r7138, 2;
	mov.u32 	%r7140, _ZN6kernel5shmemE;
	add.s32 	%r7141, %r7140, %r7139;
	shl.b32 	%r7142, %r28, 4;
	add.s32 	%r1674, %r7141, %r7142;
	st.shared.v4.u32 	[%r1674], {%r7428, %r7427, %r7423, %r7422};
	st.shared.v4.u32 	[%r1674+512], {%r7444, %r7437, %r7447, %r7446};
	@%p349 bra 	$L__BB0_655;

	st.shared.v4.u32 	[%r1674+1024], {%r7442, %r7441, %r7440, %r7435};

$L__BB0_655:
	setp.eq.s32 	%p347, %r24, %r2088;
	@%p347 bra 	$L__BB0_657;

	mul.lo.s32 	%r7146, %r2488, 384;
	mad.lo.s32 	%r7147, %r52, %r24, %r7146;
	mad.lo.s32 	%r7150, %r2086, %r2088, %r7147;
	mad.lo.s32 	%r7153, %r2084, %r2083, %r7150;
	shl.b32 	%r7154, %r7153, 2;
	mov.u32 	%r7155, _ZN6kernel5shmemE;
	add.s32 	%r7156, %r7155, %r7154;
	shl.b32 	%r7157, %r28, 4;
	add.s32 	%r7158, %r7156, %r7157;
	st.shared.v4.u32 	[%r7158], {%r7442, %r7441, %r7440, %r7435};
	st.shared.v4.u32 	[%r7158+512], {%r7433, %r7432, %r7401, %r7400};
	st.shared.v4.u32 	[%r7158+1024], {%r7431, %r7429, %r7394, %r7393};

$L__BB0_657:
	setp.ne.s32 	%p348, %r23, %r2083;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p348 bra 	$L__BB0_659;

	mad.lo.s32 	%r7160, %r633, %r1684, %r26;
	mad.lo.s32 	%r7161, %r7160, 768, 384;
	mul.lo.s32 	%r7162, %r7161, %r1682;
	mad.lo.s32 	%r7163, %r24, 384, %r7162;
	add.s32 	%r7164, %r7163, -128;
	mul.wide.s32 	%rd540, %r7164, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7428, %r7427, %r7423, %r7422};
	st.global.v4.u32 	[%rd543+1024], {%r7444, %r7437, %r7447, %r7446};
	st.global.v4.u32 	[%rd543+1536], {%r7442, %r7441, %r7440, %r7435};

$L__BB0_659:
	setp.ne.s32 	%p350, %r24, %r2088;
	@%p350 bra 	$L__BB0_662;

	mad.lo.s32 	%r7166, %r634, %r1683, %r25;
	mad.lo.s32 	%r7172, %r2488, 384, %r52;
	mad.lo.s32 	%r7173, %r7166, %r1738, %r7172;
	mad.lo.s32 	%r7176, %r1740, %r51, %r7173;
	mul.wide.s32 	%rd544, %r7176, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7442, %r7441, %r7440, %r7435};
	st.global.v4.u32 	[%rd41+512], {%r7433, %r7432, %r7401, %r7400};
	st.global.v4.u32 	[%rd41+1024], {%r7431, %r7429, %r7394, %r7393};
	@%p205 bra 	$L__BB0_662;

	st.global.v4.u32 	[%rd41+1536], {%r7605, %r7604, %r7607, %r7606};

$L__BB0_662:
	rem.s32 	%r7177, %r7475, %r1685;
	setp.eq.s32 	%p341, %r7177, 0;
	@%p341 bra 	$L__BB0_664;

	bar.sync 	0;
	bra.uni 	$L__BB0_671;

$L__BB0_664:
	@%p147 bra 	$L__BB0_666;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_666:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_670;

	membar.gl;
	setp.eq.s32 	%p344, %r407, %r408;
	mov.u32 	%r7192, -2147483647;
	sub.s32 	%r7193, %r7192, %r406;
	selp.b32 	%r7181, %r7193, 1, %p344;
	// begin inline asm
	atom.add.release.gpu.u32 %r7180,[%rd25],%r7181;
	// end inline asm

$L__BB0_668:
	ld.volatile.u32 	%r7194, [%rd25];
	xor.b32  	%r7195, %r7194, %r7180;
	setp.gt.s32 	%p345, %r7195, -1;
	@%p345 bra 	$L__BB0_668;

	// begin inline asm
	ld.acquire.gpu.u32 %r7196,[%rd25];
	// end inline asm

$L__BB0_670:
	bar.sync 	0;

$L__BB0_671:
	setp.lt.s32 	%p346, %r1417, %r31;
	mov.u32 	%r7608, %r7766;
	mov.u32 	%r7609, %r7767;
	mov.u32 	%r7596, %r7752;
	mov.u32 	%r7597, %r7753;
	mov.u32 	%r7598, %r7754;
	mov.u32 	%r7599, %r7755;
	mov.u32 	%r7610, %r7768;
	mov.u32 	%r7611, %r7769;
	mov.u32 	%r7612, %r7770;
	mov.u32 	%r7613, %r7771;
	mov.u32 	%r7614, %r7772;
	mov.u32 	%r7615, %r7773;
	mov.u32 	%r7600, %r7758;
	mov.u32 	%r7601, %r7759;
	mov.u32 	%r7602, %r7760;
	mov.u32 	%r7603, %r7761;
	mov.u32 	%r7616, %r7774;
	mov.u32 	%r7617, %r7775;
	mov.u32 	%r7618, %r7776;
	mov.u32 	%r7619, %r7777;
	mov.u32 	%r7395, %r478;
	mov.u32 	%r7396, %r7674;
	mov.u32 	%r7399, %r479;
	mov.u32 	%r7402, %r7676;
	mov.u32 	%r7407, %r484;
	mov.u32 	%r7411, %r487;
	mov.u32 	%r7419, %r7681;
	mov.u32 	%r7424, %r7683;
	mov.u32 	%r7430, %r505;
	mov.u32 	%r7434, %r513;
	mov.u32 	%r7436, %r515;
	mov.u32 	%r7439, %r517;
	mov.u32 	%r7443, %r521;
	mov.u32 	%r7448, %r525;
	mov.u32 	%r7475, %r1417;
	@%p346 bra 	$L__BB0_302;

$L__BB0_672:
	ret;

}

