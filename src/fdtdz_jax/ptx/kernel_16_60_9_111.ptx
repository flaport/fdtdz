//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_60
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<587>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<8060>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<591>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1776, %r1777}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1778, %r1779}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1780, %r1781}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1782, %r1783}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1784, %r1785}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1786, %r1787}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1788, %r1789}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1790, %r1791}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1792, %r1793}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1794, %r1795}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1796, %r1797}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1798, %r1799}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1800, %r1801}, [_ZN6kernel16SimulationKernelI7__half2fLi9ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1802, 32;
	sub.s32 	%r45, %r1802, %r1783;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1803, %r1789, -1;
	mad.lo.s32 	%r1804, %r1803, %r1788, %r1787;
	add.s32 	%r1805, %r1782, %r1781;
	add.s32 	%r1806, %r1805, %r1804;
	add.s32 	%r1807, %r1806, 1;
	mul.lo.s32 	%r1808, %r1776, %r1778;
	shl.b32 	%r47, %r1808, 1;
	shl.b32 	%r1809, %r1808, 2;
	div.s32 	%r1810, %r1807, %r1809;
	add.s32 	%r1811, %r1810, 1;
	mul.lo.s32 	%r1812, %r1811, %r1782;
	mul.lo.s32 	%r1813, %r1777, %r1779;
	shl.b32 	%r48, %r1813, 1;
	div.s32 	%r1814, %r1812, %r48;
	add.s32 	%r1815, %r1814, 1;
	mul.lo.s32 	%r49, %r1815, %r1781;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f83;
  cvt.rn.f16.f32 high, %f83;
  mov.b32 %r7433, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7433, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1818, %r1778, %r44, %r43;
	mad.lo.s32 	%r1819, %r1818, %r1777, %r42;
	mad.lo.s32 	%r1820, %r1819, %r1776, %r41;
	shl.b32 	%r53, %r1820, 5;
	add.s32 	%r7438, %r53, %r46;
	mul.lo.s32 	%r1821, %r1813, %r1808;
	shl.b32 	%r57, %r1821, 5;
	mov.u32 	%r1822, 8;
	sub.s32 	%r1823, %r1822, %r1790;
	add.s32 	%r1824, %r1823, %r1791;
	sub.s32 	%r1825, %r1822, %r1792;
	add.s32 	%r1826, %r1825, %r1793;
	sub.s32 	%r58, %r1795, %r1794;
	mul.lo.s32 	%r1827, %r1789, %r58;
	mul.lo.s32 	%r1828, %r1827, %r1826;
	mul.lo.s32 	%r1829, %r1828, %r1824;
	mul.lo.s32 	%r59, %r1829, 3;
	setp.ge.s32 	%p29, %r7438, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1830, %r1793, 8;
	sub.s32 	%r1831, %r1830, %r1792;
	mul.lo.s32 	%r1832, %r1789, %r1831;
	add.s32 	%r1833, %r1791, 8;
	sub.s32 	%r1834, %r1833, %r1790;
	mul.lo.s32 	%r1835, %r1832, %r1834;
	mul.lo.s32 	%r1836, %r1835, %r58;
	not.b32 	%r1837, %r46;
	mad.lo.s32 	%r1838, %r1836, 3, %r1837;
	sub.s32 	%r1839, %r1838, %r53;
	mul.lo.s32 	%r1840, %r1813, %r1776;
	mul.lo.s32 	%r1841, %r1840, %r1778;
	shl.b32 	%r1842, %r1841, 5;
	div.u32 	%r60, %r1839, %r1842;
	add.s32 	%r1843, %r60, 1;
	and.b32  	%r7435, %r1843, 3;
	setp.eq.s32 	%p30, %r7435, 0;
	mov.u32 	%r7436, %r7438;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r7436, %r7438;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd46, %r7436, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1844, 0;
	st.global.u32 	[%rd47], %r1844;
	add.s32 	%r7436, %r7436, %r57;
	add.s32 	%r7435, %r7435, -1;
	setp.ne.s32 	%p31, %r7435, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd50, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd48, %r7436, 4;
	add.s64 	%rd49, %rd2, %rd48;
	mov.u32 	%r1845, 0;
	st.global.u32 	[%rd49], %r1845;
	add.s64 	%rd51, %rd49, %rd50;
	st.global.u32 	[%rd51], %r1845;
	add.s32 	%r1846, %r7436, %r57;
	add.s32 	%r1847, %r1846, %r57;
	add.s64 	%rd52, %rd51, %rd50;
	st.global.u32 	[%rd52], %r1845;
	add.s32 	%r1848, %r1847, %r57;
	add.s64 	%rd53, %rd52, %rd50;
	st.global.u32 	[%rd53], %r1845;
	add.s32 	%r7436, %r1848, %r57;
	setp.lt.s32 	%p33, %r7436, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd54, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd54;
	sub.s32 	%r1849, %r1782, %r47;
	div.s32 	%r1850, %r1849, %r48;
	mul.lo.s32 	%r1851, %r1850, %r1781;
	sub.s32 	%r69, %r1851, %r47;
	sub.s32 	%r1852, %r1781, %r48;
	mul.lo.s32 	%r1853, %r1852, %r1778;
	mul.lo.s32 	%r70, %r1776, 384;
	add.s32 	%r1854, %r70, %r70;
	add.s32 	%r1855, %r1854, 128;
	mul.lo.s32 	%r1857, %r1813, 768;
	mul.lo.s32 	%r1858, %r1853, %r1855;
	mad.lo.s32 	%r71, %r1857, %r69, %r1858;
	bra.uni 	$L__BB0_11;

$L__BB0_959:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f641;
  cvt.rn.f16.f32 high, %f641;
  mov.b32 %r7402, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd576, %r7438, 4;
	add.s64 	%rd577, %rd3, %rd576;
	st.global.u32 	[%rd577], %r7402;
	add.s32 	%r7438, %r7438, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7438, %r71;
	@%p34 bra 	$L__BB0_959;

	ld.param.u64 	%rd55, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd55;
	ld.param.u64 	%rd56, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd56;
	ld.param.u64 	%rd57, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd57;
	mad.lo.s32 	%r7474, %r1776, %r43, %r41;
	mul.lo.s32 	%r79, %r1777, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7474, %r1781;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1859, 31;
	sub.s32 	%r1860, %r1859, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1861, %r46, %r1860, %p36;
	shl.b32 	%r1862, %r1861, 2;
	mov.u32 	%r1863, 2;
	sub.s32 	%r81, %r1862, %r1784;
	shl.b32 	%r1864, %r1783, 2;
	mov.u32 	%r1865, 128;
	sub.s32 	%r82, %r1865, %r1864;
	sub.s32 	%r1866, %r1863, %r1784;
	add.s32 	%r83, %r1866, %r1862;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r84, %r1791, %r1790;
	sub.s32 	%r85, %r1793, %r1792;
	add.s32 	%r86, %r1791, -1;
	add.s32 	%r87, %r1793, -1;
	add.s32 	%r88, %r1795, -1;
	mul.lo.s32 	%r1867, %r1782, %r1781;
	shl.b32 	%r89, %r1867, 6;
	add.s32 	%r90, %r1781, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1868, %r94, 31;
	add.s32 	%r1869, %r94, %r1868;
	shr.s32 	%r96, %r1869, 1;
	and.b32  	%r1870, %r1869, -2;
	sub.s32 	%r1871, %r94, %r1870;
	add.s32 	%r95, %r1871, %r89;
	rem.s32 	%r1930, %r91, %r82;
	add.s32 	%r1931, %r1930, %r82;
	rem.s32 	%r1932, %r1931, %r82;
	rem.s32 	%r1933, %r92, %r82;
	add.s32 	%r1934, %r1933, %r82;
	rem.s32 	%r1935, %r1934, %r82;
	mov.u32 	%r7439, %r7474;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1782;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7439, %r1796;
	setp.lt.s32 	%p39, %r7439, %r1797;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7439, %r1791;
	setp.ge.s32 	%p41, %r7439, %r1790;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1872, %r7439, %r86, %p40;
	setp.lt.s32 	%p42, %r7439, %r1790;
	selp.b32 	%r1873, %r1790, %r1872, %p42;
	sub.s32 	%r1874, %r1873, %r1790;
	add.s32 	%r98, %r90, %r7439;
	rem.s32 	%r1875, %r81, %r82;
	add.s32 	%r1876, %r1875, %r82;
	rem.s32 	%r99, %r1876, %r82;
	rem.s32 	%r1877, %r83, %r82;
	add.s32 	%r1878, %r1877, %r82;
	rem.s32 	%r100, %r1878, %r82;
	setp.lt.s32 	%p43, %r99, %r1795;
	sub.s32 	%r101, %r99, %r1794;
	setp.lt.s32 	%p44, %r99, %r1794;
	selp.b32 	%r1879, %r99, %r88, %p43;
	selp.b32 	%r1880, %r1794, %r1879, %p44;
	sub.s32 	%r102, %r1880, %r1794;
	setp.lt.s32 	%p45, %r100, %r1795;
	sub.s32 	%r103, %r100, %r1794;
	setp.lt.s32 	%p46, %r100, %r1794;
	selp.b32 	%r1881, %r100, %r88, %p45;
	selp.b32 	%r1882, %r1794, %r1881, %p46;
	sub.s32 	%r104, %r1882, %r1794;
	sub.s32 	%r1883, %r7439, %r1790;
	mul.lo.s32 	%r105, %r1883, %r85;
	mul.lo.s32 	%r106, %r1874, %r85;
	add.s32 	%r1884, %r1883, %r84;
	mul.lo.s32 	%r107, %r1884, %r85;
	add.s32 	%r1885, %r1874, %r84;
	mul.lo.s32 	%r108, %r1885, %r85;
	add.s32 	%r1886, %r1884, %r84;
	mul.lo.s32 	%r109, %r1886, %r85;
	add.s32 	%r1887, %r1885, %r84;
	mul.lo.s32 	%r110, %r1887, %r85;
	mov.u32 	%r7440, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7440, %r1798;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7440, %r1799;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7440, %r1792;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7440, %r1793;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7440, %r1792;
	selp.b32 	%r1888, %r7440, %r87, %p52;
	setp.lt.s32 	%p53, %r7440, %r1792;
	selp.b32 	%r1889, %r1792, %r1888, %p53;
	sub.s32 	%r113, %r1889, %r1792;
	mul.lo.s32 	%r114, %r7440, %r1781;
	add.s32 	%r115, %r114, %r7439;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1800;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1801;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1794;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1794;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd58, %r115, 4;
	add.s64 	%rd8, %rd7, %rd58;
	ld.global.f32 	%f85, [%rd8];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1892, %r112, %r105;
	mad.lo.s32 	%r1893, %r1892, %r58, %r101;
	mul.wide.s32 	%rd61, %r1893, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f642, [%rd62];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1890, %r113, %r106;
	mad.lo.s32 	%r1891, %r1890, %r58, %r102;
	mul.wide.s32 	%rd59, %r1891, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f642, [%rd60];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1801;
	setp.ge.s32 	%p68, %r100, %r1800;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1896, %r112, %r105;
	mad.lo.s32 	%r1897, %r1896, %r58, %r103;
	mul.wide.s32 	%rd65, %r1897, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f643, [%rd66];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1894, %r113, %r106;
	mad.lo.s32 	%r1895, %r1894, %r58, %r104;
	mul.wide.s32 	%rd63, %r1895, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f643, [%rd64];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f86;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1898, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1899, %r117, %r46;
	shl.b32 	%r1900, %r1899, 2;
	add.s32 	%r1901, %r89, %r1900;
	mul.wide.s32 	%rd67, %r1901, 4;
	add.s64 	%rd68, %rd6, %rd67;
	st.global.u32 	[%rd68], %r1898;
	add.s32 	%r118, %r1782, %r7440;
	mad.lo.s32 	%r1902, %r118, %r1781, %r7439;
	mul.wide.s32 	%rd69, %r1902, 4;
	add.s64 	%rd9, %rd7, %rd69;
	ld.global.f32 	%f88, [%rd9];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1905, %r112, %r107;
	mad.lo.s32 	%r1906, %r1905, %r58, %r101;
	mul.wide.s32 	%rd72, %r1906, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f644, [%rd73];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1903, %r113, %r108;
	mad.lo.s32 	%r1904, %r1903, %r58, %r102;
	mul.wide.s32 	%rd70, %r1904, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f644, [%rd71];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1909, %r112, %r107;
	mad.lo.s32 	%r1910, %r1909, %r58, %r103;
	mul.wide.s32 	%rd76, %r1910, 4;
	add.s64 	%rd77, %rd5, %rd76;
	ld.global.f32 	%f645, [%rd77];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1907, %r113, %r108;
	mad.lo.s32 	%r1908, %r1907, %r58, %r104;
	mul.wide.s32 	%rd74, %r1908, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f645, [%rd75];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f89;
  cvt.rn.f16.f32 high, %f90;
  mov.b32 %r1911, {low,high};}

	// end inline asm
	add.s32 	%r1912, %r93, %r116;
	mul.wide.s32 	%rd78, %r1912, 4;
	add.s64 	%rd79, %rd6, %rd78;
	st.global.u32 	[%rd79], %r1911;
	add.s32 	%r1913, %r118, %r1782;
	mad.lo.s32 	%r1914, %r1913, %r1781, %r7439;
	mul.wide.s32 	%rd80, %r1914, 4;
	add.s64 	%rd10, %rd7, %rd80;
	ld.global.f32 	%f91, [%rd10];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1917, %r112, %r109;
	mad.lo.s32 	%r1918, %r1917, %r58, %r101;
	mul.wide.s32 	%rd83, %r1918, 4;
	add.s64 	%rd84, %rd5, %rd83;
	ld.global.f32 	%f646, [%rd84];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1915, %r113, %r110;
	mad.lo.s32 	%r1916, %r1915, %r58, %r102;
	mul.wide.s32 	%rd81, %r1916, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f646, [%rd82];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1921, %r112, %r109;
	mad.lo.s32 	%r1922, %r1921, %r58, %r103;
	mul.wide.s32 	%rd87, %r1922, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f647, [%rd88];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1919, %r113, %r110;
	mad.lo.s32 	%r1920, %r1919, %r58, %r104;
	mul.wide.s32 	%rd85, %r1920, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f647, [%rd86];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f93;
  mov.b32 %r1923, {low,high};}

	// end inline asm
	rem.s32 	%r1924, %r98, %r1781;
	add.s32 	%r1925, %r1924, %r114;
	shl.b32 	%r119, %r1925, 5;
	add.s32 	%r1926, %r119, %r46;
	shl.b32 	%r1927, %r1926, 2;
	add.s32 	%r1928, %r89, %r1927;
	add.s32 	%r1929, %r1928, 2;
	mul.wide.s32 	%rd89, %r1929, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r1923;
	setp.ge.s32 	%p76, %r1932, %r1800;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1932, %r1801;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1932, %r1794;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1932, %r1795;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1935, %r1800;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1935, %r1801;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r120, %r1932, %r1794;
	setp.lt.s32 	%p86, %r1932, %r1794;
	selp.b32 	%r1936, %r1932, %r88, %p82;
	selp.b32 	%r1937, %r1794, %r1936, %p86;
	sub.s32 	%r121, %r1937, %r1794;
	setp.ge.s32 	%p87, %r1935, %r1794;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1935, %r1795;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r122, %r1935, %r1794;
	setp.lt.s32 	%p90, %r1935, %r1794;
	selp.b32 	%r1938, %r1935, %r88, %p89;
	selp.b32 	%r1939, %r1794, %r1938, %p90;
	sub.s32 	%r123, %r1939, %r1794;
	ld.global.f32 	%f94, [%rd8];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1942, %r112, %r105;
	mad.lo.s32 	%r1943, %r1942, %r58, %r120;
	mul.wide.s32 	%rd93, %r1943, 4;
	add.s64 	%rd94, %rd5, %rd93;
	ld.global.f32 	%f648, [%rd94];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1940, %r113, %r106;
	mad.lo.s32 	%r1941, %r1940, %r58, %r121;
	mul.wide.s32 	%rd91, %r1941, 4;
	add.s64 	%rd92, %rd5, %rd91;
	ld.global.f32 	%f648, [%rd92];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1946, %r112, %r105;
	mad.lo.s32 	%r1947, %r1946, %r58, %r122;
	mul.wide.s32 	%rd97, %r1947, 4;
	add.s64 	%rd98, %rd5, %rd97;
	ld.global.f32 	%f649, [%rd98];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1944, %r113, %r106;
	mad.lo.s32 	%r1945, %r1944, %r58, %r123;
	mul.wide.s32 	%rd95, %r1945, 4;
	add.s64 	%rd96, %rd5, %rd95;
	ld.global.f32 	%f649, [%rd96];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f96;
  mov.b32 %r1948, {low,high};}

	// end inline asm
	add.s32 	%r1949, %r117, %r96;
	shl.b32 	%r1950, %r1949, 2;
	add.s32 	%r1951, %r95, %r1950;
	mul.wide.s32 	%rd99, %r1951, 4;
	add.s64 	%rd100, %rd6, %rd99;
	st.global.u32 	[%rd100], %r1948;
	ld.global.f32 	%f97, [%rd9];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1954, %r112, %r107;
	mad.lo.s32 	%r1955, %r1954, %r58, %r120;
	mul.wide.s32 	%rd103, %r1955, 4;
	add.s64 	%rd104, %rd5, %rd103;
	ld.global.f32 	%f650, [%rd104];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1952, %r113, %r108;
	mad.lo.s32 	%r1953, %r1952, %r58, %r121;
	mul.wide.s32 	%rd101, %r1953, 4;
	add.s64 	%rd102, %rd5, %rd101;
	ld.global.f32 	%f650, [%rd102];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1958, %r112, %r107;
	mad.lo.s32 	%r1959, %r1958, %r58, %r122;
	mul.wide.s32 	%rd107, %r1959, 4;
	add.s64 	%rd108, %rd5, %rd107;
	ld.global.f32 	%f651, [%rd108];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1956, %r113, %r108;
	mad.lo.s32 	%r1957, %r1956, %r58, %r123;
	mul.wide.s32 	%rd105, %r1957, 4;
	add.s64 	%rd106, %rd5, %rd105;
	ld.global.f32 	%f651, [%rd106];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f99;
  mov.b32 %r1960, {low,high};}

	// end inline asm
	add.s32 	%r1961, %r94, %r116;
	mul.wide.s32 	%rd109, %r1961, 4;
	add.s64 	%rd110, %rd6, %rd109;
	st.global.u32 	[%rd110], %r1960;
	ld.global.f32 	%f100, [%rd10];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1964, %r112, %r109;
	mad.lo.s32 	%r1965, %r1964, %r58, %r120;
	mul.wide.s32 	%rd113, %r1965, 4;
	add.s64 	%rd114, %rd5, %rd113;
	ld.global.f32 	%f652, [%rd114];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1962, %r113, %r110;
	mad.lo.s32 	%r1963, %r1962, %r58, %r121;
	mul.wide.s32 	%rd111, %r1963, 4;
	add.s64 	%rd112, %rd5, %rd111;
	ld.global.f32 	%f652, [%rd112];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1968, %r112, %r109;
	mad.lo.s32 	%r1969, %r1968, %r58, %r122;
	mul.wide.s32 	%rd117, %r1969, 4;
	add.s64 	%rd118, %rd5, %rd117;
	ld.global.f32 	%f653, [%rd118];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1966, %r113, %r110;
	mad.lo.s32 	%r1967, %r1966, %r58, %r123;
	mul.wide.s32 	%rd115, %r1967, 4;
	add.s64 	%rd116, %rd5, %rd115;
	ld.global.f32 	%f653, [%rd116];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f102;
  mov.b32 %r1970, {low,high};}

	// end inline asm
	add.s32 	%r1971, %r119, %r96;
	shl.b32 	%r1972, %r1971, 2;
	add.s32 	%r1973, %r95, %r1972;
	add.s32 	%r1974, %r1973, 2;
	mul.wide.s32 	%rd119, %r1974, 4;
	add.s64 	%rd120, %rd6, %rd119;
	st.global.u32 	[%rd120], %r1970;
	add.s32 	%r7440, %r7440, %r1813;
	setp.lt.s32 	%p99, %r7440, %r1782;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7439, %r7439, %r1808;
	setp.lt.s32 	%p100, %r7439, %r1781;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd121, [%rd1+120];
	cvta.to.global.u64 	%rd11, %rd121;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r126, %r80, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd122, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd184, %rd122, 24;
	mov.u32 	%r7441, %r7474;

$L__BB0_68:
	setp.ge.s32 	%p102, %r126, %r1782;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7442, %r126;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1976, %r7442, 31;
	add.s32 	%r1977, %r7442, %r1976;
	shr.s32 	%r1978, %r1977, 1;
	mad.lo.s32 	%r1979, %r1978, %r1781, %r7441;
	shl.b32 	%r130, %r1979, 5;
	add.s32 	%r131, %r7442, -2;
	mul.lo.s32 	%r132, %r131, %r1781;
	add.s32 	%r1980, %r1782, %r131;
	mul.lo.s32 	%r133, %r1980, %r1781;
	add.s32 	%r1981, %r1980, %r1782;
	mul.lo.s32 	%r134, %r1981, %r1781;
	add.s32 	%r135, %r132, %r1781;
	add.s32 	%r136, %r7442, -1;
	add.s32 	%r1982, %r1782, %r136;
	mul.lo.s32 	%r137, %r1982, %r1781;
	add.s32 	%r1983, %r1982, %r1782;
	mul.lo.s32 	%r138, %r1983, %r1781;
	add.s32 	%r1984, %r1782, %r7442;
	mul.lo.s32 	%r139, %r1984, %r1781;
	add.s32 	%r1985, %r1984, %r1782;
	mul.lo.s32 	%r140, %r1985, %r1781;
	mul.lo.s32 	%r141, %r7442, %r1781;
	add.s32 	%r142, %r141, %r1781;
	add.s32 	%r143, %r7442, 1;
	add.s32 	%r1986, %r1782, %r143;
	mul.lo.s32 	%r144, %r1986, %r1781;
	add.s32 	%r1987, %r1986, %r1782;
	mul.lo.s32 	%r145, %r1987, %r1781;
	add.s32 	%r146, %r142, %r1781;
	add.s32 	%r147, %r7442, 2;
	add.s32 	%r1988, %r1782, %r147;
	mul.lo.s32 	%r148, %r1988, %r1781;
	add.s32 	%r1989, %r1988, %r1782;
	mul.lo.s32 	%r149, %r1989, %r1781;
	mov.u32 	%r7445, 0;
	mov.u64 	%rd588, %rd122;

$L__BB0_72:
	ld.global.nc.u32 	%r1990, [%rd588];
	cvt.rn.f64.s32 	%fd1, %r1990;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r151, %r1990, %r7441;
	setp.lt.s32 	%p104, %r151, %r1781;
	or.b32  	%r1991, %r131, %r151;
	setp.gt.s32 	%p105, %r1991, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r131, %r1782;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1994, %r132, %r151;
	mul.wide.s32 	%rd123, %r1994, 4;
	add.s64 	%rd124, %rd7, %rd123;
	ld.global.f32 	%f110, [%rd124];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r7444, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f108;
  cvt.rn.f16.f32 high, %f108;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1995, %r7445, %r130;
	mul.wide.s32 	%rd125, %r1995, 4;
	add.s64 	%rd126, %rd11, %rd125;
	st.global.u32 	[%rd126], %r7444;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1998, %r133, %r151;
	mul.wide.s32 	%rd127, %r1998, 4;
	add.s64 	%rd128, %rd7, %rd127;
	ld.global.f32 	%f119, [%rd128];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7446, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7446, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1999, %r7445, %r130;
	mul.wide.s32 	%rd129, %r1999, 4;
	add.s64 	%rd130, %rd11, %rd129;
	st.global.u32 	[%rd130], %r7446;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r2002, %r134, %r151;
	mul.wide.s32 	%rd131, %r2002, 4;
	add.s64 	%rd132, %rd7, %rd131;
	ld.global.f32 	%f127, [%rd132];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7448, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r2003, %r7445, %r130;
	mul.wide.s32 	%rd133, %r2003, 4;
	add.s64 	%rd134, %rd11, %rd133;
	st.global.u32 	[%rd134], %r7448;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_87:
	or.b32  	%r2004, %r136, %r151;
	setp.gt.s32 	%p111, %r2004, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7442, %r1782;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r2007, %r135, %r151;
	mul.wide.s32 	%rd135, %r2007, 4;
	add.s64 	%rd136, %rd7, %rd135;
	ld.global.f32 	%f134, [%rd136];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7450, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r2008, %r7445, %r130;
	mul.wide.s32 	%rd137, %r2008, 4;
	add.s64 	%rd138, %rd11, %rd137;
	st.global.u32 	[%rd138], %r7450;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r2011, %r137, %r151;
	mul.wide.s32 	%rd139, %r2011, 4;
	add.s64 	%rd140, %rd7, %rd139;
	ld.global.f32 	%f141, [%rd140];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r7452, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f139;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7452, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r2012, %r7445, %r130;
	mul.wide.s32 	%rd141, %r2012, 4;
	add.s64 	%rd142, %rd11, %rd141;
	st.global.u32 	[%rd142], %r7452;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r2015, %r138, %r151;
	mul.wide.s32 	%rd143, %r2015, 4;
	add.s64 	%rd144, %rd7, %rd143;
	ld.global.f32 	%f148, [%rd144];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r7454, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f146;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r2016, %r7445, %r130;
	mul.wide.s32 	%rd145, %r2016, 4;
	add.s64 	%rd146, %rd11, %rd145;
	st.global.u32 	[%rd146], %r7454;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_102:
	or.b32  	%r2017, %r7442, %r151;
	setp.gt.s32 	%p118, %r2017, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7442, %r1782;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r2020, %r141, %r151;
	mul.wide.s32 	%rd147, %r2020, 4;
	add.s64 	%rd148, %rd7, %rd147;
	ld.global.f32 	%f155, [%rd148];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r7456, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r2021, %r7445, %r130;
	mul.wide.s32 	%rd149, %r2021, 4;
	add.s64 	%rd150, %rd11, %rd149;
	st.global.u32 	[%rd150], %r7456;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r2024, %r139, %r151;
	mul.wide.s32 	%rd151, %r2024, 4;
	add.s64 	%rd152, %rd7, %rd151;
	ld.global.f32 	%f163, [%rd152];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r7458, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7458, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r2025, %r7445, %r130;
	mul.wide.s32 	%rd153, %r2025, 4;
	add.s64 	%rd154, %rd11, %rd153;
	st.global.u32 	[%rd154], %r7458;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r2028, %r140, %r151;
	mul.wide.s32 	%rd155, %r2028, 4;
	add.s64 	%rd156, %rd7, %rd155;
	ld.global.f32 	%f170, [%rd156];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r7460, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f168;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r2029, %r7445, %r130;
	mul.wide.s32 	%rd157, %r2029, 4;
	add.s64 	%rd158, %rd11, %rd157;
	st.global.u32 	[%rd158], %r7460;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_117:
	or.b32  	%r2030, %r143, %r151;
	setp.gt.s32 	%p125, %r2030, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r143, %r1782;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r2033, %r142, %r151;
	mul.wide.s32 	%rd159, %r2033, 4;
	add.s64 	%rd160, %rd7, %rd159;
	ld.global.f32 	%f177, [%rd160];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r7462, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f175;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r2034, %r7445, %r130;
	mul.wide.s32 	%rd161, %r2034, 4;
	add.s64 	%rd162, %rd11, %rd161;
	st.global.u32 	[%rd162], %r7462;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r2037, %r144, %r151;
	mul.wide.s32 	%rd163, %r2037, 4;
	add.s64 	%rd164, %rd7, %rd163;
	ld.global.f32 	%f184, [%rd164];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r7464, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f182;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r7464, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r2038, %r7445, %r130;
	mul.wide.s32 	%rd165, %r2038, 4;
	add.s64 	%rd166, %rd11, %rd165;
	st.global.u32 	[%rd166], %r7464;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r2041, %r145, %r151;
	mul.wide.s32 	%rd167, %r2041, 4;
	add.s64 	%rd168, %rd7, %rd167;
	ld.global.f32 	%f191, [%rd168];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r7466, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f189;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7466, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r2042, %r7445, %r130;
	mul.wide.s32 	%rd169, %r2042, 4;
	add.s64 	%rd170, %rd11, %rd169;
	st.global.u32 	[%rd170], %r7466;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_132:
	or.b32  	%r2043, %r147, %r151;
	setp.gt.s32 	%p132, %r2043, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r147, %r1782;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r2046, %r146, %r151;
	mul.wide.s32 	%rd171, %r2046, 4;
	add.s64 	%rd172, %rd7, %rd171;
	ld.global.f32 	%f198, [%rd172];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r7468, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f196;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7468, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2047, %r7445, %r130;
	mul.wide.s32 	%rd173, %r2047, 4;
	add.s64 	%rd174, %rd11, %rd173;
	st.global.u32 	[%rd174], %r7468;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2050, %r148, %r151;
	mul.wide.s32 	%rd175, %r2050, 4;
	add.s64 	%rd176, %rd7, %rd175;
	ld.global.f32 	%f205, [%rd176];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r7470, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r7470, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2051, %r7445, %r130;
	mul.wide.s32 	%rd177, %r2051, 4;
	add.s64 	%rd178, %rd11, %rd177;
	st.global.u32 	[%rd178], %r7470;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2054, %r149, %r151;
	mul.wide.s32 	%rd179, %r2054, 4;
	add.s64 	%rd180, %rd7, %rd179;
	ld.global.f32 	%f212, [%rd180];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r7472, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2055, %r7445, %r130;
	mul.wide.s32 	%rd181, %r2055, 4;
	add.s64 	%rd182, %rd11, %rd181;
	st.global.u32 	[%rd182], %r7472;
	add.s32 	%r7445, %r7445, 1;

$L__BB0_147:
	add.s64 	%rd588, %rd588, 4;
	setp.ne.s64 	%p139, %rd588, %rd184;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7442, %r7442, %r48;
	setp.lt.s32 	%p140, %r7442, %r1782;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7441, %r7441, %r1808;
	setp.lt.s32 	%p141, %r7441, %r1781;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1785, 1;
	ld.param.u64 	%rd185, [%rd1+160];
	cvta.to.global.u64 	%rd14, %rd185;
	ld.param.u64 	%rd186, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd186;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r255, %r80, 1;
	shr.u32 	%r2103, %r1786, 31;
	add.s32 	%r2104, %r1786, %r2103;
	bfe.u32 	%r256, %r2104, 1, 1;
	mov.u64 	%rd206, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r255, %r1782;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7480, %r255;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2106, %r7480, 31;
	add.s32 	%r2107, %r7480, %r2106;
	shr.s32 	%r2108, %r2107, 1;
	mad.lo.s32 	%r2109, %r2108, %r1781, %r7474;
	shl.b32 	%r260, %r2109, 5;
	add.s32 	%r261, %r7480, -2;
	mul.lo.s32 	%r262, %r261, %r1781;
	add.s32 	%r2110, %r1782, %r261;
	mul.lo.s32 	%r263, %r2110, %r1781;
	add.s32 	%r264, %r262, %r1781;
	add.s32 	%r265, %r7480, -1;
	add.s32 	%r2111, %r1782, %r265;
	mul.lo.s32 	%r266, %r2111, %r1781;
	add.s32 	%r2112, %r1782, %r7480;
	mul.lo.s32 	%r267, %r2112, %r1781;
	mul.lo.s32 	%r268, %r7480, %r1781;
	add.s32 	%r269, %r268, %r1781;
	add.s32 	%r270, %r7480, 1;
	add.s32 	%r2113, %r1782, %r270;
	mul.lo.s32 	%r271, %r2113, %r1781;
	add.s32 	%r272, %r269, %r1781;
	add.s32 	%r273, %r7480, 2;
	add.s32 	%r2114, %r1782, %r273;
	mul.lo.s32 	%r274, %r2114, %r1781;
	mov.u32 	%r7484, 0;
	mov.u64 	%rd589, 24;
	mov.u64 	%rd590, %rd206;

$L__BB0_174:
	ld.global.nc.u32 	%r2115, [%rd590];
	cvt.rn.f64.s32 	%fd2, %r2115;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r276, %r2115, %r7474;
	setp.lt.s32 	%p154, %r276, %r1781;
	or.b32  	%r2116, %r261, %r276;
	setp.gt.s32 	%p155, %r2116, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r261, %r1782;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r256, 0;
	add.s32 	%r2118, %r262, %r276;
	shl.b32 	%r2119, %r2118, 1;
	mul.wide.s32 	%rd207, %r2119, 4;
	add.s64 	%rd208, %rd14, %rd207;
	ld.global.f32 	%f55, [%rd208];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f236;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f237;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r281, %r7484, %r260;
	mul.wide.s32 	%rd209, %r281, 4;
	add.s64 	%rd210, %rd15, %rd209;
	st.global.u32 	[%rd210], %r7482;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r256, 0;
	add.s32 	%r2123, %r263, %r276;
	shl.b32 	%r2124, %r2123, 1;
	mul.wide.s32 	%rd211, %r2124, 4;
	add.s64 	%rd212, %rd14, %rd211;
	ld.global.f32 	%f56, [%rd212];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f242;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f243;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2127, %r281, 1;
	mul.wide.s32 	%rd213, %r2127, 4;
	add.s64 	%rd214, %rd15, %rd213;
	st.global.u32 	[%rd214], %r7483;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r256, 0;
	add.s32 	%r2129, %r262, %r276;
	shl.b32 	%r2130, %r2129, 1;
	or.b32  	%r2131, %r2130, 1;
	mul.wide.s32 	%rd215, %r2131, 4;
	add.s64 	%rd216, %rd14, %rd215;
	ld.global.f32 	%f59, [%rd216];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f254;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f250;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r292, %r7484, %r260;
	mul.wide.s32 	%rd217, %r292, 4;
	add.s64 	%rd218, %rd15, %rd217;
	st.global.u32 	[%rd218], %r7485;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r256, 0;
	add.s32 	%r2135, %r263, %r276;
	shl.b32 	%r2136, %r2135, 1;
	or.b32  	%r2137, %r2136, 1;
	mul.wide.s32 	%rd219, %r2137, 4;
	add.s64 	%rd220, %rd14, %rd219;
	ld.global.f32 	%f60, [%rd220];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f260;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f256;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7486, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2140, %r292, 1;
	mul.wide.s32 	%rd221, %r2140, 4;
	add.s64 	%rd222, %rd15, %rd221;
	st.global.u32 	[%rd222], %r7486;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_198:
	or.b32  	%r2141, %r265, %r276;
	setp.gt.s32 	%p164, %r2141, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7480, %r1782;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r256, 0;
	add.s32 	%r2143, %r264, %r276;
	shl.b32 	%r2144, %r2143, 1;
	mul.wide.s32 	%rd223, %r2144, 4;
	add.s64 	%rd224, %rd14, %rd223;
	ld.global.f32 	%f62, [%rd224];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f262;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r7488, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f263;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r303, %r7484, %r260;
	mul.wide.s32 	%rd225, %r303, 4;
	add.s64 	%rd226, %rd15, %rd225;
	st.global.u32 	[%rd226], %r7488;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r256, 0;
	add.s32 	%r2148, %r266, %r276;
	shl.b32 	%r2149, %r2148, 1;
	mul.wide.s32 	%rd227, %r2149, 4;
	add.s64 	%rd228, %rd14, %rd227;
	ld.global.f32 	%f63, [%rd228];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f268;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r7489, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f269;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2152, %r303, 1;
	mul.wide.s32 	%rd229, %r2152, 4;
	add.s64 	%rd230, %rd15, %rd229;
	st.global.u32 	[%rd230], %r7489;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r256, 0;
	add.s32 	%r2154, %r264, %r276;
	shl.b32 	%r2155, %r2154, 1;
	or.b32  	%r2156, %r2155, 1;
	mul.wide.s32 	%rd231, %r2156, 4;
	add.s64 	%rd232, %rd14, %rd231;
	ld.global.f32 	%f65, [%rd232];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f274;
  cvt.rn.f16.f32 high, %f274;
  mov.b32 %r7491, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f275;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r314, %r7484, %r260;
	mul.wide.s32 	%rd233, %r314, 4;
	add.s64 	%rd234, %rd15, %rd233;
	st.global.u32 	[%rd234], %r7491;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r256, 0;
	add.s32 	%r2160, %r266, %r276;
	shl.b32 	%r2161, %r2160, 1;
	or.b32  	%r2162, %r2161, 1;
	mul.wide.s32 	%rd235, %r2162, 4;
	add.s64 	%rd236, %rd14, %rd235;
	ld.global.f32 	%f66, [%rd236];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f280;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7492, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2165, %r314, 1;
	mul.wide.s32 	%rd237, %r2165, 4;
	add.s64 	%rd238, %rd15, %rd237;
	st.global.u32 	[%rd238], %r7492;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_222:
	or.b32  	%r2166, %r7480, %r276;
	setp.gt.s32 	%p174, %r2166, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7480, %r1782;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r256, 0;
	add.s32 	%r2168, %r268, %r276;
	shl.b32 	%r2169, %r2168, 1;
	mul.wide.s32 	%rd239, %r2169, 4;
	add.s64 	%rd240, %rd14, %rd239;
	ld.global.f32 	%f68, [%rd240];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f286;
  cvt.rn.f16.f32 high, %f286;
  mov.b32 %r7494, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f287;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r325, %r7484, %r260;
	mul.wide.s32 	%rd241, %r325, 4;
	add.s64 	%rd242, %rd15, %rd241;
	st.global.u32 	[%rd242], %r7494;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r256, 0;
	add.s32 	%r2173, %r267, %r276;
	shl.b32 	%r2174, %r2173, 1;
	mul.wide.s32 	%rd243, %r2174, 4;
	add.s64 	%rd244, %rd14, %rd243;
	ld.global.f32 	%f69, [%rd244];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f292;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7495, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2177, %r325, 1;
	mul.wide.s32 	%rd245, %r2177, 4;
	add.s64 	%rd246, %rd15, %rd245;
	st.global.u32 	[%rd246], %r7495;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r256, 0;
	add.s32 	%r2179, %r268, %r276;
	shl.b32 	%r2180, %r2179, 1;
	or.b32  	%r2181, %r2180, 1;
	mul.wide.s32 	%rd247, %r2181, 4;
	add.s64 	%rd248, %rd14, %rd247;
	ld.global.f32 	%f70, [%rd248];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f299;
  cvt.rn.f16.f32 high, %f299;
  mov.b32 %r7497, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f300;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r336, %r7484, %r260;
	mul.wide.s32 	%rd249, %r336, 4;
	add.s64 	%rd250, %rd15, %rd249;
	st.global.u32 	[%rd250], %r7497;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r256, 0;
	add.s32 	%r2185, %r267, %r276;
	shl.b32 	%r2186, %r2185, 1;
	or.b32  	%r2187, %r2186, 1;
	mul.wide.s32 	%rd251, %r2187, 4;
	add.s64 	%rd252, %rd14, %rd251;
	ld.global.f32 	%f71, [%rd252];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7498, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2190, %r336, 1;
	mul.wide.s32 	%rd253, %r2190, 4;
	add.s64 	%rd254, %rd15, %rd253;
	st.global.u32 	[%rd254], %r7498;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_246:
	or.b32  	%r2191, %r270, %r276;
	setp.gt.s32 	%p184, %r2191, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r270, %r1782;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r256, 0;
	add.s32 	%r2193, %r269, %r276;
	shl.b32 	%r2194, %r2193, 1;
	mul.wide.s32 	%rd255, %r2194, 4;
	add.s64 	%rd256, %rd14, %rd255;
	ld.global.f32 	%f72, [%rd256];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f311;
  cvt.rn.f16.f32 high, %f311;
  mov.b32 %r7500, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f312;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r347, %r7484, %r260;
	mul.wide.s32 	%rd257, %r347, 4;
	add.s64 	%rd258, %rd15, %rd257;
	st.global.u32 	[%rd258], %r7500;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r256, 0;
	add.s32 	%r2198, %r271, %r276;
	shl.b32 	%r2199, %r2198, 1;
	mul.wide.s32 	%rd259, %r2199, 4;
	add.s64 	%rd260, %rd14, %rd259;
	ld.global.f32 	%f73, [%rd260];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f73;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7501, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f73;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2202, %r347, 1;
	mul.wide.s32 	%rd261, %r2202, 4;
	add.s64 	%rd262, %rd15, %rd261;
	st.global.u32 	[%rd262], %r7501;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r256, 0;
	add.s32 	%r2204, %r269, %r276;
	shl.b32 	%r2205, %r2204, 1;
	or.b32  	%r2206, %r2205, 1;
	mul.wide.s32 	%rd263, %r2206, 4;
	add.s64 	%rd264, %rd14, %rd263;
	ld.global.f32 	%f74, [%rd264];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f323;
  cvt.rn.f16.f32 high, %f323;
  mov.b32 %r7503, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f324;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r358, %r7484, %r260;
	mul.wide.s32 	%rd265, %r358, 4;
	add.s64 	%rd266, %rd15, %rd265;
	st.global.u32 	[%rd266], %r7503;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r256, 0;
	add.s32 	%r2210, %r271, %r276;
	shl.b32 	%r2211, %r2210, 1;
	or.b32  	%r2212, %r2211, 1;
	mul.wide.s32 	%rd267, %r2212, 4;
	add.s64 	%rd268, %rd14, %rd267;
	ld.global.f32 	%f75, [%rd268];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7504, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7504, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2215, %r358, 1;
	mul.wide.s32 	%rd269, %r2215, 4;
	add.s64 	%rd270, %rd15, %rd269;
	st.global.u32 	[%rd270], %r7504;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_270:
	or.b32  	%r2216, %r273, %r276;
	setp.gt.s32 	%p194, %r2216, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r273, %r1782;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r256, 0;
	add.s32 	%r2218, %r272, %r276;
	shl.b32 	%r2219, %r2218, 1;
	mul.wide.s32 	%rd271, %r2219, 4;
	add.s64 	%rd272, %rd14, %rd271;
	ld.global.f32 	%f76, [%rd272];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7506, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f335;
  cvt.rn.f16.f32 high, %f335;
  mov.b32 %r7506, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r369, %r7484, %r260;
	mul.wide.s32 	%rd273, %r369, 4;
	add.s64 	%rd274, %rd15, %rd273;
	st.global.u32 	[%rd274], %r7506;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r256, 0;
	add.s32 	%r2223, %r274, %r276;
	shl.b32 	%r2224, %r2223, 1;
	mul.wide.s32 	%rd275, %r2224, 4;
	add.s64 	%rd276, %rd14, %rd275;
	ld.global.f32 	%f77, [%rd276];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f77;
  cvt.rn.f16.f32 high, %f345;
  mov.b32 %r7507, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f341;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7507, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f77;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2227, %r369, 1;
	mul.wide.s32 	%rd277, %r2227, 4;
	add.s64 	%rd278, %rd15, %rd277;
	st.global.u32 	[%rd278], %r7507;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r256, 0;
	add.s32 	%r2229, %r272, %r276;
	shl.b32 	%r2230, %r2229, 1;
	or.b32  	%r2231, %r2230, 1;
	mul.wide.s32 	%rd279, %r2231, 4;
	add.s64 	%rd280, %rd14, %rd279;
	ld.global.f32 	%f78, [%rd280];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f351;
  mov.b32 %r7509, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7509, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r380, %r7484, %r260;
	mul.wide.s32 	%rd281, %r380, 4;
	add.s64 	%rd282, %rd15, %rd281;
	st.global.u32 	[%rd282], %r7509;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r256, 0;
	add.s32 	%r2235, %r274, %r276;
	shl.b32 	%r2236, %r2235, 1;
	or.b32  	%r2237, %r2236, 1;
	mul.wide.s32 	%rd283, %r2237, 4;
	add.s64 	%rd284, %rd14, %rd283;
	ld.global.f32 	%f79, [%rd284];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7510, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7510, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7510, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2240, %r380, 1;
	mul.wide.s32 	%rd285, %r2240, 4;
	add.s64 	%rd286, %rd15, %rd285;
	st.global.u32 	[%rd286], %r7510;
	add.s32 	%r7484, %r7484, 2;

$L__BB0_294:
	add.s64 	%rd590, %rd590, 4;
	add.s64 	%rd589, %rd589, -4;
	setp.ne.s64 	%p204, %rd589, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7480, %r7480, %r48;
	setp.lt.s32 	%p205, %r7480, %r1782;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7474, %r7474, %r1808;
	setp.lt.s32 	%p206, %r7474, %r1781;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r229, %r79;
	mov.u32 	%r2056, 31;
	sub.s32 	%r2057, %r2056, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2058, %r46, %r2057, %p144;
	shl.b32 	%r2059, %r2058, 2;
	mov.u32 	%r2060, 2;
	sub.s32 	%r230, %r2059, %r1784;
	shl.b32 	%r2061, %r1783, 2;
	mov.u32 	%r2062, 128;
	sub.s32 	%r231, %r2062, %r2061;
	sub.s32 	%r2063, %r2060, %r1784;
	add.s32 	%r232, %r2063, %r2059;
	add.s32 	%r233, %r1781, -1;
	add.s32 	%r234, %r230, 1;
	add.s32 	%r235, %r232, 1;
	rem.s32 	%r2088, %r234, %r231;
	add.s32 	%r2089, %r2088, %r231;
	rem.s32 	%r246, %r2089, %r231;
	rem.s32 	%r2090, %r235, %r231;
	add.s32 	%r2091, %r2090, %r231;
	rem.s32 	%r247, %r2091, %r231;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r229;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r237, %r7474, 1;
	rem.s32 	%r2064, %r230, %r231;
	add.s32 	%r2065, %r2064, %r231;
	rem.s32 	%r238, %r2065, %r231;
	rem.s32 	%r2066, %r232, %r231;
	add.s32 	%r2067, %r2066, %r231;
	rem.s32 	%r239, %r2067, %r231;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2070, %r237, %r231;
	add.s32 	%r2071, %r2070, %r238;
	mul.wide.s32 	%rd187, %r2071, 4;
	add.s64 	%rd188, %rd14, %rd187;
	ld.global.f32 	%f218, [%rd188];
	add.s32 	%r2072, %r2070, %r239;
	mul.wide.s32 	%rd189, %r2072, 4;
	add.s64 	%rd190, %rd14, %rd189;
	ld.global.f32 	%f219, [%rd190];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f218;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f217;
  mov.b32 %r7475, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2073, %r7474, 5;
	add.s32 	%r2074, %r2073, %r46;
	shl.b32 	%r2075, %r2074, 2;
	mul.wide.s32 	%rd191, %r2075, 4;
	add.s64 	%rd16, %rd15, %rd191;
	st.global.u32 	[%rd16], %r7475;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2078, %r237, 1;
	mul.lo.s32 	%r2079, %r2078, %r231;
	add.s32 	%r2080, %r2079, %r238;
	mul.wide.s32 	%rd192, %r2080, 4;
	add.s64 	%rd193, %rd14, %rd192;
	ld.global.f32 	%f222, [%rd193];
	add.s32 	%r2081, %r2079, %r239;
	mul.wide.s32 	%rd194, %r2081, 4;
	add.s64 	%rd195, %rd14, %rd194;
	ld.global.f32 	%f223, [%rd195];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r7476, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2082, %r233, %r7474;
	rem.s32 	%r2083, %r2082, %r1781;
	shl.b32 	%r2084, %r2083, 5;
	add.s32 	%r2085, %r2084, %r46;
	shl.b32 	%r2086, %r2085, 2;
	or.b32  	%r2087, %r2086, 2;
	mul.wide.s32 	%rd196, %r2087, 4;
	add.s64 	%rd17, %rd15, %rd196;
	st.global.u32 	[%rd17], %r7476;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2094, %r237, %r231;
	add.s32 	%r2095, %r2094, %r246;
	mul.wide.s32 	%rd197, %r2095, 4;
	add.s64 	%rd198, %rd14, %rd197;
	ld.global.f32 	%f226, [%rd198];
	add.s32 	%r2096, %r2094, %r247;
	mul.wide.s32 	%rd199, %r2096, 4;
	add.s64 	%rd200, %rd14, %rd199;
	ld.global.f32 	%f227, [%rd200];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f226;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f225;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd16+4], %r7477;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2099, %r237, 1;
	mul.lo.s32 	%r2100, %r2099, %r231;
	add.s32 	%r2101, %r2100, %r246;
	mul.wide.s32 	%rd201, %r2101, 4;
	add.s64 	%rd202, %rd14, %rd201;
	ld.global.f32 	%f230, [%rd202];
	add.s32 	%r2102, %r2100, %r247;
	mul.wide.s32 	%rd203, %r2102, 4;
	add.s64 	%rd204, %rd14, %rd203;
	ld.global.f32 	%f231, [%rd204];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd17+4], %r7478;

$L__BB0_167:
	add.s32 	%r7474, %r7474, %r1808;
	setp.lt.s32 	%p150, %r7474, %r1781;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2242, %r1776, -1;
	mad.lo.s32 	%r2243, %r1777, 576, 128;
	mul.lo.s32 	%r2244, %r2243, %r2242;
	add.s32 	%r2245, %r70, -64;
	add.s32 	%r2246, %r2245, %r70;
	add.s32 	%r2247, %r1777, -1;
	mad.lo.s32 	%r2248, %r2246, %r2247, %r2244;
	mul.lo.s32 	%r2249, %r2242, %r1777;
	mul.lo.s32 	%r2250, %r2249, 320;
	mad.lo.s32 	%r2251, %r2245, %r2247, %r2250;
	add.s32 	%r389, %r2251, %r2248;
	setp.lt.s32 	%p207, %r389, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7689, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7514, 0;
	mov.u32 	%r7512, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7512], %r7689;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2254, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7512+4], %r2254;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2255, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7512+8], %r2255;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2256, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7512+12], %r2256;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7689, {low,high};}

	// end inline asm
	add.s32 	%r7512, %r7512, 16;
	add.s32 	%r7514, %r7514, 4;
	setp.lt.s32 	%p208, %r7514, %r389;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7690, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r2259, {low,high};}

	// end inline asm
	ld.param.u64 	%rd287, [%rd1+176];
	cvta.to.global.u64 	%rd22, %rd287;
	mov.u32 	%r2260, 31;
	sub.s32 	%r2261, %r2260, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2262, %r46, %r2261, %p209;
	shl.b32 	%r2263, %r2262, 2;
	sub.s32 	%r400, %r2263, %r1784;
	shl.b32 	%r2264, %r1783, 2;
	mov.u32 	%r2265, 128;
	sub.s32 	%r401, %r2265, %r2264;
	rem.s32 	%r2266, %r400, %r401;
	add.s32 	%r2267, %r2266, %r401;
	rem.s32 	%r402, %r2267, %r401;
	add.s32 	%r2268, %r400, 2;
	rem.s32 	%r2269, %r2268, %r401;
	add.s32 	%r2270, %r2269, %r401;
	rem.s32 	%r403, %r2270, %r401;
	mul.lo.s32 	%r2271, %r402, 6;
	mul.lo.s32 	%r2272, %r403, 6;
	mul.wide.s32 	%rd288, %r2271, 4;
	add.s64 	%rd23, %rd22, %rd288;
	mul.wide.s32 	%rd289, %r2272, 4;
	add.s64 	%rd24, %rd22, %rd289;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7516, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd23];
	ld.global.f32 	%f375, [%rd23+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd24+8];
	ld.global.f32 	%f377, [%rd24];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7516, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd23+4];
	ld.global.f32 	%f383, [%rd24+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7517, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd23];
	ld.global.f32 	%f381, [%rd24];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7517, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7518, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd23+20];
	ld.global.f32 	%f387, [%rd23+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd24+20];
	ld.global.f32 	%f389, [%rd24+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7518, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd23+16];
	ld.global.f32 	%f395, [%rd24+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7519, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd23+12];
	ld.global.f32 	%f393, [%rd24+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7519, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2281, %r400, 1;
	rem.s32 	%r2282, %r2281, %r401;
	add.s32 	%r2283, %r2282, %r401;
	rem.s32 	%r416, %r2283, %r401;
	add.s32 	%r2284, %r400, 3;
	rem.s32 	%r2285, %r2284, %r401;
	add.s32 	%r2286, %r2285, %r401;
	rem.s32 	%r417, %r2286, %r401;
	mul.lo.s32 	%r2287, %r416, 6;
	mul.lo.s32 	%r2288, %r417, 6;
	mul.wide.s32 	%rd290, %r2287, 4;
	add.s64 	%rd25, %rd22, %rd290;
	mul.wide.s32 	%rd291, %r2288, 4;
	add.s64 	%rd26, %rd22, %rd291;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7520, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd25];
	ld.global.f32 	%f399, [%rd25+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd26+8];
	ld.global.f32 	%f401, [%rd26];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7520, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd25+4];
	ld.global.f32 	%f407, [%rd26+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7521, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd25];
	ld.global.f32 	%f405, [%rd26];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7521, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7522, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd25+20];
	ld.global.f32 	%f411, [%rd25+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd26+20];
	ld.global.f32 	%f413, [%rd26+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f408;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7522, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd25+16];
	ld.global.f32 	%f419, [%rd26+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f418;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7523, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd25+12];
	ld.global.f32 	%f417, [%rd26+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f416;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7523, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2297, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd292, %r2297;
	// begin inline asm
	mov.u32 %r2298, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd293, %r2298;
	bfi.b64 	%rd27, %rd293, %rd292, 32, 32;
	setp.ne.s64 	%p218, %rd27, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	mov.u32 	%r2299, %nctaid.x;
	mov.u32 	%r2300, %nctaid.y;
	mul.lo.s32 	%r2301, %r2299, %r2300;
	mov.u32 	%r2302, %nctaid.z;
	mul.lo.s32 	%r430, %r2301, %r2302;
	neg.s32 	%r2303, %r42;
	add.s32 	%r2304, %r46, %r41;
	setp.ne.s32 	%p219, %r2304, %r2303;
	mov.u32 	%r2305, %ctaid.x;
	add.s32 	%r431, %r2305, %r43;
	neg.s32 	%r432, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r431, %r432;
	mov.u32 	%r2306, -2147483647;
	sub.s32 	%r2307, %r2306, %r430;
	selp.b32 	%r2308, %r2307, 1, %p220;
	membar.gl;
	add.s64 	%rd294, %rd27, 4;
	atom.add.u32 	%r433, [%rd294], %r2308;

$L__BB0_328:
	ld.volatile.u32 	%r2309, [%rd27+4];
	xor.b32  	%r2310, %r2309, %r433;
	setp.gt.s32 	%p221, %r2310, -1;
	@%p221 bra 	$L__BB0_328;

	membar.gl;

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_958;

	shr.s32 	%r2324, %r1786, 31;
	shr.u32 	%r2325, %r2324, 30;
	add.s32 	%r2326, %r1786, %r2325;
	shr.s32 	%r434, %r2326, 2;
	add.s32 	%r2327, %r46, 22;
	mul.hi.s32 	%r2328, %r2327, -1307163959;
	add.s32 	%r2329, %r2328, %r2327;
	shr.u32 	%r2330, %r2329, 31;
	shr.s32 	%r2331, %r2329, 4;
	add.s32 	%r2332, %r2331, %r2330;
	mul.lo.s32 	%r2333, %r2332, 23;
	sub.s32 	%r2334, %r2327, %r2333;
	add.s32 	%r2335, %r46, 24;
	mul.hi.s32 	%r2336, %r2335, -1307163959;
	add.s32 	%r2337, %r2336, %r2335;
	shr.u32 	%r2338, %r2337, 31;
	shr.s32 	%r2339, %r2337, 4;
	add.s32 	%r2340, %r2339, %r2338;
	mul.lo.s32 	%r2341, %r2340, 23;
	sub.s32 	%r2342, %r2335, %r2341;
	shr.u32 	%r2343, %r1786, 31;
	add.s32 	%r2344, %r1786, %r2343;
	and.b32  	%r2345, %r2344, -2;
	sub.s32 	%r435, %r1786, %r2345;
	setp.lt.s32 	%p223, %r46, 23;
	selp.b32 	%r436, %r2334, %r46, %p223;
	setp.lt.s32 	%p224, %r402, %r1795;
	setp.ge.s32 	%p225, %r402, %r1794;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r416, %r1795;
	setp.ge.s32 	%p227, %r416, %r1794;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r403, %r1795;
	setp.ge.s32 	%p229, %r403, %r1794;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r417, %r1795;
	setp.ge.s32 	%p231, %r417, %r1794;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r437, %r2342, %r46, %p223;
	mov.u32 	%r2323, 0;
	// begin inline asm
	{mov.u32 %r2346, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2672, %r2346, 8;
	add.s32 	%r2673, %r2672, -8192;
	or.b32  	%r2350, %r2673, 31;
	mul.wide.s32 	%rd303, %r46, 16;
	mul.wide.s32 	%rd305, %r46, 8;
	mov.u32 	%r7801, %r2259;
	mov.u32 	%r7831, %r2259;
	mov.u32 	%r7802, %r2259;
	mov.u32 	%r7832, %r2259;
	mov.u32 	%r7803, %r2259;
	mov.u32 	%r7529, %r2259;
	mov.u32 	%r7530, %r2259;
	mov.u32 	%r7844, %r2259;
	mov.u32 	%r7833, %r2259;
	mov.u32 	%r7834, %r2259;
	mov.u32 	%r7804, %r2259;
	mov.u32 	%r7805, %r2259;
	mov.u32 	%r7806, %r2259;
	mov.u32 	%r7537, %r2259;
	mov.u32 	%r7538, %r2259;
	mov.u32 	%r7843, %r2259;
	mov.u32 	%r7835, %r2259;
	mov.u32 	%r7836, %r2259;
	mov.u32 	%r7813, %r2259;
	mov.u32 	%r7543, %r2259;
	mov.u32 	%r7544, %r2259;
	mov.u32 	%r7545, %r2259;
	mov.u32 	%r7854, %r2259;
	mov.u32 	%r7840, %r2259;
	mov.u32 	%r7845, %r2259;
	mov.u32 	%r7814, %r2259;
	mov.u32 	%r7550, %r2259;
	mov.u32 	%r7551, %r2259;
	mov.u32 	%r7552, %r2259;
	mov.u32 	%r7848, %r2259;
	mov.u32 	%r7837, %r2259;
	mov.u32 	%r7846, %r2259;
	mov.u32 	%r7815, %r2259;
	mov.u32 	%r7816, %r2259;
	mov.u32 	%r7558, %r2259;
	mov.u32 	%r7849, %r2259;
	mov.u32 	%r7850, %r2259;
	mov.u32 	%r7561, %r2259;
	mov.u32 	%r7817, %r2259;
	mov.u32 	%r7818, %r2259;
	mov.u32 	%r7819, %r2259;
	mov.u32 	%r7565, %r2259;
	mov.u32 	%r7851, %r2259;
	mov.u32 	%r7852, %r2259;
	mov.u32 	%r7820, %r2259;
	mov.u32 	%r7821, %r2259;
	mov.u32 	%r7822, %r2259;
	mov.u32 	%r7807, %r2259;
	mov.u32 	%r7572, %r2259;
	mov.u32 	%r7838, %r2259;
	mov.u32 	%r7839, %r2259;
	mov.u32 	%r7808, %r2259;
	mov.u32 	%r7576, %r2259;
	mov.u32 	%r7841, %r2259;
	mov.u32 	%r7842, %r2259;
	mov.u32 	%r7871, %r2259;
	mov.u32 	%r7580, %r2259;
	mov.u32 	%r7581, %r2259;
	mov.u32 	%r7582, %r2259;
	mov.u32 	%r7727, %r2259;
	mov.u32 	%r7872, %r2259;
	mov.u32 	%r7585, %r2259;
	mov.u32 	%r7586, %r2259;
	mov.u32 	%r7587, %r2259;
	mov.u32 	%r7728, %r2259;
	mov.u32 	%r7873, %r2259;
	mov.u32 	%r7874, %r2259;
	mov.u32 	%r7591, %r2259;
	mov.u32 	%r7592, %r2259;
	mov.u32 	%r7593, %r2259;
	mov.u32 	%r7729, %r2259;
	mov.u32 	%r7595, %r2259;
	mov.u32 	%r7875, %r2259;
	mov.u32 	%r7876, %r2259;
	mov.u32 	%r7598, %r2259;
	mov.u32 	%r7599, %r2259;
	mov.u32 	%r7600, %r2259;
	mov.u32 	%r7731, %r2259;
	mov.u32 	%r7602, %r2259;
	mov.u32 	%r7603, %r2259;
	mov.u32 	%r7604, %r2259;
	mov.u32 	%r7605, %r2259;
	mov.u32 	%r7855, %r2259;
	mov.u32 	%r7607, %r2259;
	mov.u32 	%r7608, %r2259;
	mov.u32 	%r7609, %r2259;
	mov.u32 	%r7610, %r2259;
	mov.u32 	%r7856, %r2259;
	mov.u32 	%r7823, %r2259;
	mov.u32 	%r7824, %r2259;
	mov.u32 	%r7825, %r2259;
	mov.u32 	%r7826, %r2259;
	mov.u32 	%r7616, %r2259;
	mov.u32 	%r7617, %r2259;
	mov.u32 	%r7880, %r2259;
	mov.u32 	%r7619, %r2259;
	mov.u32 	%r7620, %r2259;
	mov.u32 	%r7735, %r2259;
	mov.u32 	%r7622, %r2259;
	mov.u32 	%r7623, %r2259;
	mov.u32 	%r7624, %r2259;
	mov.u32 	%r7625, %r2259;
	mov.u32 	%r7882, %r2259;
	mov.u32 	%r7627, %r2259;
	mov.u32 	%r7628, %r2259;
	mov.u32 	%r7738, %r2259;
	mov.u32 	%r7630, %r2259;
	mov.u32 	%r7631, %r2259;
	mov.u32 	%r7632, %r2259;
	mov.u32 	%r7633, %r2259;
	mov.u32 	%r7883, %r2259;
	mov.u32 	%r7635, %r2259;
	mov.u32 	%r7636, %r2259;
	mov.u32 	%r7637, %r2259;
	mov.u32 	%r7741, %r2259;
	mov.u32 	%r7639, %r2259;
	mov.u32 	%r7640, %r2259;
	mov.u32 	%r7641, %r2259;
	mov.u32 	%r7642, %r2259;
	mov.u32 	%r7884, %r2259;
	mov.u32 	%r7644, %r2259;
	mov.u32 	%r7645, %r2259;
	mov.u32 	%r7646, %r2259;
	mov.u32 	%r7744, %r2259;
	mov.u32 	%r7648, %r2259;
	mov.u32 	%r7649, %r2259;
	mov.u32 	%r7650, %r2259;
	mov.u32 	%r7651, %r2259;
	mov.u32 	%r7652, %r2259;
	mov.u32 	%r7653, %r2259;
	mov.u32 	%r7654, %r2259;
	mov.u32 	%r7655, %r2259;
	mov.u32 	%r7656, %r2259;
	mov.u32 	%r7657, %r2259;
	mov.u32 	%r7658, %r2259;
	mov.u32 	%r7659, %r2259;
	mov.u32 	%r7660, %r2259;
	mov.u32 	%r7661, %r2259;
	mov.u32 	%r7662, %r2259;
	mov.u32 	%r7663, %r2259;
	mov.u32 	%r7664, %r2259;
	mov.u32 	%r7665, %r2259;
	mov.u32 	%r7666, %r2259;
	mov.u32 	%r7667, %r2259;
	mov.u32 	%r7668, %r2259;
	mov.u32 	%r7669, %r2259;
	mov.u32 	%r7670, %r2323;
	mov.u32 	%r7671, %r2323;
	mov.u32 	%r7672, %r2323;
	mov.u32 	%r7673, %r2323;
	mov.u32 	%r7674, %r2323;
	mov.u32 	%r7675, %r2323;
	mov.u32 	%r7676, %r2323;
	mov.u32 	%r7677, %r2323;
	mov.u32 	%r7678, %r2323;
	mov.u32 	%r7679, %r2323;
	mov.u32 	%r7680, %r2323;
	mov.u32 	%r7681, %r2323;
	mov.u32 	%r7809, %r2259;
	mov.u32 	%r7810, %r2259;
	mov.u32 	%r7811, %r2259;
	mov.u32 	%r7812, %r2259;
	mov.u32 	%r7827, %r2259;
	mov.u32 	%r7828, %r2259;
	mov.u32 	%r7688, %r2323;

$L__BB0_332:
	mov.u32 	%r575, %r7884;
	mov.u32 	%r574, %r7642;
	mov.u32 	%r566, %r7883;
	mov.u32 	%r565, %r7633;
	mov.u32 	%r558, %r7882;
	mov.u32 	%r550, %r7880;
	mov.u32 	%r7642, %r7876;
	mov.u32 	%r520, %r7875;
	mov.u32 	%r7633, %r7874;
	mov.u32 	%r512, %r7873;
	mov.u32 	%r505, %r7872;
	mov.u32 	%r498, %r7871;
	sub.s32 	%r7413, %r1781, %r48;
	mov.u32 	%r2361, 1;
	not.b32 	%r2635, %r43;
	mov.u32 	%r2627, -1;
	add.s32 	%r2636, %r1778, %r2635;
	mul.lo.s32 	%r2637, %r2636, %r1780;
	add.s32 	%r2638, %r7688, %r2637;
	not.b32 	%r2640, %r44;
	add.s32 	%r2641, %r1779, %r2640;
	mul.lo.s32 	%r2642, %r2641, %r1780;
	add.s32 	%r2643, %r7688, %r2642;
	add.s32 	%r2644, %r2637, %r2642;
	add.s32 	%r2645, %r2644, %r1781;
	not.b32 	%r2646, %r41;
	add.s32 	%r2647, %r1776, %r2646;
	mad.lo.s32 	%r2648, %r2636, %r1776, %r2647;
	not.b32 	%r2649, %r42;
	add.s32 	%r2650, %r1777, %r2649;
	mad.lo.s32 	%r2651, %r2641, %r1777, %r2650;
	add.s32 	%r2652, %r2648, %r2651;
	shl.b32 	%r2653, %r2652, 1;
	add.s32 	%r2654, %r2645, %r2653;
	add.s32 	%r2655, %r7688, %r2654;
	add.s32 	%r2656, %r7688, %r2644;
	div.s32 	%r2657, %r2655, %r1781;
	neg.s32 	%r2658, %r1781;
	sub.s32 	%r2661, %r48, %r1781;
	sub.s32 	%r2662, %r2648, %r2651;
	shl.b32 	%r2663, %r2662, 1;
	add.s32 	%r2664, %r2663, %r1782;
	mad.lo.s32 	%r2665, %r2657, %r48, %r2664;
	mad.lo.s32 	%r2666, %r2657, %r2661, %r2656;
	div.s32 	%r2667, %r2665, %r1782;
	mul.lo.s32 	%r2668, %r2667, %r1782;
	sub.s32 	%r2671, %r1809, %r1782;
	mov.u32 	%r2445, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2347,%r7690,%r2323,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2353, %r7517, %r2347, %p28;
	// begin inline asm
	{mul.f16x2 %r7774,%r2353,%r7669;
}
	// end inline asm
	selp.b32 	%r2356, %r7521, %r2347, %p28;
	// begin inline asm
	{mul.f16x2 %r7772,%r2356,%r7664;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2359,%r7690,%r2361,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2365, %r7517, %r2359, %p28;
	// begin inline asm
	{mul.f16x2 %r7773,%r2365,%r7668;
}
	// end inline asm
	selp.b32 	%r2368, %r7521, %r2359, %p28;
	// begin inline asm
	{mul.f16x2 %r7771,%r2368,%r7663;
}
	// end inline asm
	mov.u32 	%r2373, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2371,%r7690,%r2373,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2377, %r7517, %r2371, %p28;
	// begin inline asm
	{mul.f16x2 %r7770,%r2377,%r7659;
}
	// end inline asm
	selp.b32 	%r2380, %r7521, %r2371, %p28;
	// begin inline asm
	{mul.f16x2 %r7769,%r2380,%r7657;
}
	// end inline asm
	mov.u32 	%r2385, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2383,%r7690,%r2385,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2389, %r7517, %r2383, %p28;
	// begin inline asm
	{mul.f16x2 %r7768,%r2389,%r7856;
}
	// end inline asm
	selp.b32 	%r2392, %r7521, %r2383, %p28;
	// begin inline asm
	{mul.f16x2 %r7766,%r2392,%r7855;
}
	// end inline asm
	mov.u32 	%r2397, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2395,%r7690,%r2397,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2401, %r7517, %r2395, %p28;
	// begin inline asm
	{mul.f16x2 %r7767,%r2401,%r7655;
}
	// end inline asm
	selp.b32 	%r2404, %r7521, %r2395, %p28;
	// begin inline asm
	{mul.f16x2 %r7765,%r2404,%r7652;
}
	// end inline asm
	mov.u32 	%r2409, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2407,%r7690,%r2409,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2413, %r7517, %r2407, %p28;
	// begin inline asm
	{mul.f16x2 %r7764,%r2413,%r7649;
}
	// end inline asm
	selp.b32 	%r2416, %r7521, %r2407, %p28;
	// begin inline asm
	{mul.f16x2 %r7761,%r2416,%r7640;
}
	// end inline asm
	mov.u32 	%r2421, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2419,%r7690,%r2421,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2425, %r7517, %r2419, %p28;
	// begin inline asm
	{mul.f16x2 %r7763,%r2425,%r7648;
}
	// end inline asm
	selp.b32 	%r2428, %r7521, %r2419, %p28;
	// begin inline asm
	{mul.f16x2 %r7760,%r2428,%r7639;
}
	// end inline asm
	mov.u32 	%r2433, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2431,%r7690,%r2433,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2437, %r7517, %r2431, %p28;
	// begin inline asm
	{mul.f16x2 %r7762,%r2437,%r7744;
}
	// end inline asm
	selp.b32 	%r2440, %r7521, %r2431, %p28;
	// begin inline asm
	{mul.f16x2 %r7759,%r2440,%r7741;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2443,%r7690,%r2445,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2449, %r7517, %r2443, %p28;
	// begin inline asm
	{mul.f16x2 %r7758,%r2449,%r7631;
}
	// end inline asm
	selp.b32 	%r2452, %r7521, %r2443, %p28;
	// begin inline asm
	{mul.f16x2 %r7755,%r2452,%r7623;
}
	// end inline asm
	mov.u32 	%r2457, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2455,%r7690,%r2457,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2461, %r7517, %r2455, %p28;
	// begin inline asm
	{mul.f16x2 %r7757,%r2461,%r7630;
}
	// end inline asm
	selp.b32 	%r2464, %r7521, %r2455, %p28;
	// begin inline asm
	{mul.f16x2 %r7754,%r2464,%r7622;
}
	// end inline asm
	mov.u32 	%r2469, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2467,%r7690,%r2469,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2473, %r7517, %r2467, %p28;
	// begin inline asm
	{mul.f16x2 %r7756,%r2473,%r7738;
}
	// end inline asm
	selp.b32 	%r2476, %r7521, %r2467, %p28;
	// begin inline asm
	{mul.f16x2 %r7753,%r2476,%r7735;
}
	// end inline asm
	mov.u32 	%r2481, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2479,%r7690,%r2481,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2485, %r7517, %r2479, %p28;
	// begin inline asm
	{mul.f16x2 %r7752,%r2485,%r7842;
}
	// end inline asm
	selp.b32 	%r2488, %r7521, %r2479, %p28;
	// begin inline asm
	{mul.f16x2 %r7751,%r2488,%r7839;
}
	// end inline asm
	mov.u32 	%r2493, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2491,%r7690,%r2493,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2497, %r7517, %r2491, %p28;
	// begin inline asm
	{mul.f16x2 %r7750,%r2497,%r7852;
}
	// end inline asm
	selp.b32 	%r2500, %r7521, %r2491, %p28;
	// begin inline asm
	{mul.f16x2 %r7748,%r2500,%r7850;
}
	// end inline asm
	mov.u32 	%r2505, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2503,%r7690,%r2505,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2509, %r7517, %r2503, %p28;
	// begin inline asm
	{mul.f16x2 %r7749,%r2509,%r7851;
}
	// end inline asm
	selp.b32 	%r2512, %r7521, %r2503, %p28;
	// begin inline asm
	{mul.f16x2 %r7747,%r2512,%r7849;
}
	// end inline asm
	mov.u32 	%r2517, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2515,%r7690,%r2517,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2521, %r7517, %r2515, %p28;
	// begin inline asm
	{mul.f16x2 %r7746,%r2521,%r7846;
}
	// end inline asm
	selp.b32 	%r2524, %r7521, %r2515, %p28;
	// begin inline asm
	{mul.f16x2 %r7743,%r2524,%r7845;
}
	// end inline asm
	mov.u32 	%r2529, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2527,%r7690,%r2529,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2533, %r7517, %r2527, %p28;
	// begin inline asm
	{mul.f16x2 %r7745,%r2533,%r7602;
}
	// end inline asm
	selp.b32 	%r2536, %r7521, %r2527, %p28;
	// begin inline asm
	{mul.f16x2 %r7742,%r2536,%r7595;
}
	// end inline asm
	mov.u32 	%r2541, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2539,%r7690,%r2541,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2545, %r7517, %r2539, %p28;
	// begin inline asm
	{mul.f16x2 %r7744,%r2545,%r7731;
}
	// end inline asm
	selp.b32 	%r2548, %r7521, %r2539, %p28;
	// begin inline asm
	{mul.f16x2 %r7741,%r2548,%r7729;
}
	// end inline asm
	mov.u32 	%r2553, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2551,%r7690,%r2553,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2557, %r7517, %r2551, %p28;
	// begin inline asm
	{mul.f16x2 %r7740,%r2557,%r7836;
}
	// end inline asm
	selp.b32 	%r2560, %r7521, %r2551, %p28;
	// begin inline asm
	{mul.f16x2 %r7737,%r2560,%r7834;
}
	// end inline asm
	mov.u32 	%r2565, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2563,%r7690,%r2565,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2569, %r7517, %r2563, %p28;
	// begin inline asm
	{mul.f16x2 %r7739,%r2569,%r7835;
}
	// end inline asm
	selp.b32 	%r2572, %r7521, %r2563, %p28;
	// begin inline asm
	{mul.f16x2 %r7736,%r2572,%r7833;
}
	// end inline asm
	mov.u32 	%r2577, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2575,%r7690,%r2577,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2581, %r7517, %r2575, %p28;
	// begin inline asm
	{mul.f16x2 %r7738,%r2581,%r7728;
}
	// end inline asm
	selp.b32 	%r2584, %r7521, %r2575, %p28;
	// begin inline asm
	{mul.f16x2 %r7735,%r2584,%r7727;
}
	// end inline asm
	mov.u32 	%r2589, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2587,%r7690,%r2589,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2593, %r7517, %r2587, %p28;
	// begin inline asm
	{mul.f16x2 %r7734,%r2593,%r7831;
}
	// end inline asm
	selp.b32 	%r2596, %r7521, %r2587, %p28;
	// begin inline asm
	{mul.f16x2 %r7733,%r2596,%r7832;
}
	// end inline asm
	mov.u32 	%r2601, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2599,%r7690,%r2601,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2605, %r7517, %r2599, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2605,%r7837;
}
	// end inline asm
	selp.b32 	%r2608, %r7521, %r2599, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2608,%r7840;
}
	// end inline asm
	mov.u32 	%r2613, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2611,%r7690,%r2613,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2617, %r7517, %r2611, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2617,%r7848;
}
	// end inline asm
	selp.b32 	%r2620, %r7521, %r2611, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2620,%r7854;
}
	// end inline asm
	mov.u32 	%r2625, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2623,%r7690,%r2625,%r2350,%r2627;
}
	// end inline asm
	selp.b32 	%r2629, %r7517, %r2623, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2629,%r7843;
}
	// end inline asm
	selp.b32 	%r2632, %r7521, %r2623, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2632,%r7844;
}
	// end inline asm
	rem.s32 	%r675, %r2638, %r69;
	rem.s32 	%r676, %r2643, %r7413;
	mad.lo.s32 	%r677, %r2657, %r2658, %r2655;
	sub.s32 	%r678, %r2665, %r2668;
	mad.lo.s32 	%r679, %r2667, %r2671, %r2666;
	ld.param.u64 	%rd296, [%rd1+168];
	cvta.to.global.u64 	%rd297, %rd296;
	shl.b32 	%r2721, %r679, 1;
	mul.wide.s32 	%rd298, %r2721, 4;
	add.s64 	%rd28, %rd297, %rd298;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2924, %r1804, 1;
	setp.lt.s32 	%p239, %r679, %r2924;
	setp.eq.s32 	%p240, %r434, %r46;
	setp.gt.s32 	%p241, %r679, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r7693, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r7694, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2724, %r1804, 1;
	setp.lt.s32 	%p234, %r679, %r2724;
	setp.gt.s32 	%p235, %r679, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r7691, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r7692, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7693, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7694, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2932, 0;
	mov.u32 	%r2943, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2930,%r7689,%r2932,%r2350,%r2943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2935,%r7693,%r2930;
}
	// end inline asm
	mov.u32 	%r2941, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2939,%r7689,%r2941,%r2350,%r2943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2944,%r7694,%r2939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r2935,%r2944;
}
	// end inline asm
	setp.eq.s32 	%p244, %r435, 0;
	mov.u32 	%r7695, %r7696;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f433;
  cvt.rn.f16.f32 high, %f433;
  mov.b32 %r7695, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7774,%r7774,%r7695;
}
	// end inline asm
	setp.eq.s32 	%p245, %r435, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f435;
  cvt.rn.f16.f32 high, %f435;
  mov.b32 %r7696, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7772,%r7772,%r7696;
}
	// end inline asm
	mov.u32 	%r2965, 2;
	mov.u32 	%r2976, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2963,%r7689,%r2965,%r2350,%r2976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2968,%r7693,%r2963;
}
	// end inline asm
	mov.u32 	%r2974, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2972,%r7689,%r2974,%r2350,%r2976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2977,%r7694,%r2972;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r2968,%r2977;
}
	// end inline asm
	mov.u32 	%r7697, %r7698;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f437;
  cvt.rn.f16.f32 high, %f437;
  mov.b32 %r7697, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7773,%r7773,%r7697;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f439;
  cvt.rn.f16.f32 high, %f439;
  mov.b32 %r7698, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7771,%r7771,%r7698;
}
	// end inline asm
	mov.u32 	%r2998, 4;
	mov.u32 	%r3009, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2996,%r7689,%r2998,%r2350,%r3009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3001,%r7693,%r2996;
}
	// end inline asm
	mov.u32 	%r3007, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r3005,%r7689,%r3007,%r2350,%r3009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3010,%r7694,%r3005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r3001,%r3010;
}
	// end inline asm
	mov.u32 	%r7699, %r7700;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f441;
  cvt.rn.f16.f32 high, %f441;
  mov.b32 %r7699, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7770,%r7770,%r7699;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f443;
  cvt.rn.f16.f32 high, %f443;
  mov.b32 %r7700, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7769,%r7769,%r7700;
}
	// end inline asm
	mov.u32 	%r3031, 6;
	mov.u32 	%r3042, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3029,%r7689,%r3031,%r2350,%r3042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3034,%r7693,%r3029;
}
	// end inline asm
	mov.u32 	%r3040, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r3038,%r7689,%r3040,%r2350,%r3042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3043,%r7694,%r3038;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r3034,%r3043;
}
	// end inline asm
	mov.u32 	%r7701, %r7702;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f445;
  cvt.rn.f16.f32 high, %f445;
  mov.b32 %r7701, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r7701;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f447;
  cvt.rn.f16.f32 high, %f447;
  mov.b32 %r7702, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r7702;
}
	// end inline asm
	mov.u32 	%r3064, 8;
	mov.u32 	%r3075, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3062,%r7689,%r3064,%r2350,%r3075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3067,%r7693,%r3062;
}
	// end inline asm
	mov.u32 	%r3073, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3071,%r7689,%r3073,%r2350,%r3075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3076,%r7694,%r3071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r3067,%r3076;
}
	// end inline asm
	mov.u32 	%r7703, %r7704;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f449;
  cvt.rn.f16.f32 high, %f449;
  mov.b32 %r7703, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7767,%r7767,%r7703;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f451;
  cvt.rn.f16.f32 high, %f451;
  mov.b32 %r7704, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7765,%r7765,%r7704;
}
	// end inline asm
	mov.u32 	%r3097, 10;
	mov.u32 	%r3108, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3095,%r7689,%r3097,%r2350,%r3108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3100,%r7693,%r3095;
}
	// end inline asm
	mov.u32 	%r3106, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3104,%r7689,%r3106,%r2350,%r3108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3109,%r7694,%r3104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r3100,%r3109;
}
	// end inline asm
	mov.u32 	%r7705, %r7706;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f453;
  cvt.rn.f16.f32 high, %f453;
  mov.b32 %r7705, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r7705;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f455;
  cvt.rn.f16.f32 high, %f455;
  mov.b32 %r7706, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r7706;
}
	// end inline asm
	mov.u32 	%r3130, 12;
	mov.u32 	%r3141, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3128,%r7689,%r3130,%r2350,%r3141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3133,%r7693,%r3128;
}
	// end inline asm
	mov.u32 	%r3139, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3137,%r7689,%r3139,%r2350,%r3141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3142,%r7694,%r3137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7708,%r3133,%r3142;
}
	// end inline asm
	mov.u32 	%r7707, %r7708;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f457;
  cvt.rn.f16.f32 high, %f457;
  mov.b32 %r7707, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7763,%r7763,%r7707;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f459;
  cvt.rn.f16.f32 high, %f459;
  mov.b32 %r7708, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7760,%r7760,%r7708;
}
	// end inline asm
	mov.u32 	%r3163, 14;
	mov.u32 	%r3174, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3161,%r7689,%r3163,%r2350,%r3174;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3166,%r7693,%r3161;
}
	// end inline asm
	mov.u32 	%r3172, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3170,%r7689,%r3172,%r2350,%r3174;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3175,%r7694,%r3170;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r3166,%r3175;
}
	// end inline asm
	mov.u32 	%r7709, %r7710;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f461;
  cvt.rn.f16.f32 high, %f461;
  mov.b32 %r7709, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r7709;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f463;
  cvt.rn.f16.f32 high, %f463;
  mov.b32 %r7710, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r7710;
}
	// end inline asm
	mov.u32 	%r3196, 16;
	mov.u32 	%r3207, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3194,%r7689,%r3196,%r2350,%r3207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3199,%r7693,%r3194;
}
	// end inline asm
	mov.u32 	%r3205, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3203,%r7689,%r3205,%r2350,%r3207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3208,%r7694,%r3203;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r3199,%r3208;
}
	// end inline asm
	mov.u32 	%r7711, %r7712;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f465;
  cvt.rn.f16.f32 high, %f465;
  mov.b32 %r7711, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7757,%r7757,%r7711;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r7712, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7754,%r7754,%r7712;
}
	// end inline asm
	mov.u32 	%r3229, 18;
	mov.u32 	%r3240, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3227,%r7689,%r3229,%r2350,%r3240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3232,%r7693,%r3227;
}
	// end inline asm
	mov.u32 	%r3238, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3236,%r7689,%r3238,%r2350,%r3240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3241,%r7694,%r3236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r3232,%r3241;
}
	// end inline asm
	mov.u32 	%r7713, %r7714;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7713, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r7713;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f471;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r7714, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r7714;
}
	// end inline asm
	mov.u32 	%r3262, 20;
	mov.u32 	%r3273, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3260,%r7689,%r3262,%r2350,%r3273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3265,%r7693,%r3260;
}
	// end inline asm
	mov.u32 	%r3271, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3269,%r7689,%r3271,%r2350,%r3273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3274,%r7694,%r3269;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r3265,%r3274;
}
	// end inline asm
	mov.u32 	%r7715, %r7716;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f473;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r7715, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7750,%r7750,%r7715;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f475;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r7716, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7748,%r7748,%r7716;
}
	// end inline asm
	mov.u32 	%r3295, 22;
	mov.u32 	%r3306, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3293,%r7689,%r3295,%r2350,%r3306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3298,%r7693,%r3293;
}
	// end inline asm
	mov.u32 	%r3304, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3302,%r7689,%r3304,%r2350,%r3306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3307,%r7694,%r3302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r3298,%r3307;
}
	// end inline asm
	mov.u32 	%r7717, %r7718;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f477;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r7717, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r7717;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f479;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r7718, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r7718;
}
	// end inline asm
	mov.u32 	%r3328, 24;
	mov.u32 	%r3339, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3326,%r7689,%r3328,%r2350,%r3339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3331,%r7693,%r3326;
}
	// end inline asm
	mov.u32 	%r3337, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3335,%r7689,%r3337,%r2350,%r3339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3340,%r7694,%r3335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r3331,%r3340;
}
	// end inline asm
	mov.u32 	%r7719, %r7720;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f481;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r7719, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7745,%r7745,%r7719;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f483;
  cvt.rn.f16.f32 high, %f483;
  mov.b32 %r7720, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7742,%r7742,%r7720;
}
	// end inline asm
	mov.u32 	%r3361, 26;
	mov.u32 	%r3372, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3359,%r7689,%r3361,%r2350,%r3372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3364,%r7693,%r3359;
}
	// end inline asm
	mov.u32 	%r3370, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3368,%r7689,%r3370,%r2350,%r3372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3373,%r7694,%r3368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r3364,%r3373;
}
	// end inline asm
	mov.u32 	%r7721, %r7722;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f485;
  cvt.rn.f16.f32 high, %f485;
  mov.b32 %r7721, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r7721;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f487;
  cvt.rn.f16.f32 high, %f487;
  mov.b32 %r7722, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r7722;
}
	// end inline asm
	mov.u32 	%r3394, 28;
	mov.u32 	%r3405, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3392,%r7689,%r3394,%r2350,%r3405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3397,%r7693,%r3392;
}
	// end inline asm
	mov.u32 	%r3403, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3401,%r7689,%r3403,%r2350,%r3405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3406,%r7694,%r3401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r3397,%r3406;
}
	// end inline asm
	mov.u32 	%r7723, %r7724;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f489;
  cvt.rn.f16.f32 high, %f489;
  mov.b32 %r7723, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r7723;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f491;
  cvt.rn.f16.f32 high, %f491;
  mov.b32 %r7724, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r7724;
}
	// end inline asm
	mov.u32 	%r3436, 31;
	mov.u32 	%r3427, 30;
	mov.u32 	%r3438, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3425,%r7689,%r3427,%r2350,%r3438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3430,%r7693,%r3425;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3434,%r7689,%r3436,%r2350,%r3438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3439,%r7694,%r3434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7726,%r3430,%r3439;
}
	// end inline asm
	mov.u32 	%r7725, %r7726;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f493;
  cvt.rn.f16.f32 high, %f493;
  mov.b32 %r7725, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7725;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f495;
  cvt.rn.f16.f32 high, %f495;
  mov.b32 %r7726, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7726;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7691, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7692, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r678, %r1786;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2826,%r7691,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7774,%r7774,%r2826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2832,%r7691,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7762,%r7762,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2838,%r7691,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7764,%r7764,%r2838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2844,%r7691,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7744,%r7744,%r2844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r7691,%r7681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7746,%r7746,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2856,%r7691,%r7679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2862,%r7692,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7768,%r7768,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2868,%r7692,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7749,%r7749,%r2868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r7691,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7772,%r7772,%r2874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2880,%r7691,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7759,%r7759,%r2880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2886,%r7691,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7761,%r7761,%r2886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2892,%r7691,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7741,%r7741,%r2892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2898,%r7691,%r7680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7743,%r7743,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2904,%r7691,%r7678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r2904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2910,%r7692,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7766,%r7766,%r2910;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2916,%r7692,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7747,%r7747,%r2916;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2729, %r1786, -2;
	setp.ne.s32 	%p238, %r678, %r2729;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2730,%r7691,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7752,%r7752,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2736,%r7691,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7692,%r7673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7770,%r7770,%r2742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7692,%r7671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7756,%r7756,%r2748;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7692,%r7677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7758,%r7758,%r2754;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2760,%r7692,%r7675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r2760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7692,%r7681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7692,%r7679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2778,%r7691,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7751,%r7751,%r2778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7691,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7692,%r7672;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7769,%r7769,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7692,%r7670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7753,%r7753,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2802,%r7692,%r7676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7755,%r7755,%r2802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7692,%r7674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r2808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7692,%r7680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r2814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2820,%r7692,%r7678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2820;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7871, %r2259;
	mov.u32 	%r7872, %r2259;
	mov.u32 	%r7877, %r2259;
	mov.u32 	%r7878, %r2259;
	mov.u32 	%r7879, %r2259;
	mov.u32 	%r7880, %r2259;
	mov.u32 	%r7881, %r2259;
	mov.u32 	%r7882, %r2259;
	mov.u32 	%r7889, %r2259;
	mov.u32 	%r7890, %r2259;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3457, %r1777, 320;
	add.s32 	%r3458, %r41, -1;
	mul.lo.s32 	%r3459, %r42, 320;
	mad.lo.s32 	%r3460, %r3457, %r3458, %r3459;
	add.s32 	%r3463, %r1854, -64;
	mad.lo.s32 	%r3468, %r3463, %r2247, %r2244;
	add.s32 	%r3469, %r3460, %r3468;
	shl.b32 	%r3470, %r3469, 2;
	mov.u32 	%r3471, _ZN6kernel5shmemE;
	add.s32 	%r3472, %r3471, %r3470;
	shl.b32 	%r3473, %r46, 4;
	add.s32 	%r3474, %r3472, %r3473;
	ld.shared.v4.u32 	{%r7882, %r7880, %r7872, %r7871}, [%r3474];
	shl.b32 	%r3479, %r46, 3;
	add.s32 	%r3480, %r3472, %r3479;
	ld.shared.v2.u32 	{%r7881, %r7879}, [%r3480+512];
	ld.shared.v4.u32 	{%r7890, %r7889, %r7878, %r7877}, [%r3474+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7873, %r2259;
	mov.u32 	%r7874, %r2259;
	mov.u32 	%r7875, %r2259;
	mov.u32 	%r7876, %r2259;
	mov.u32 	%r7883, %r2259;
	mov.u32 	%r7884, %r2259;
	mov.u32 	%r7885, %r2259;
	mov.u32 	%r7886, %r2259;
	mov.u32 	%r7887, %r2259;
	mov.u32 	%r7888, %r2259;
	mov.u32 	%r7891, %r2259;
	mov.u32 	%r7892, %r2259;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3492, %r2647, 384, %r2250;
	add.s32 	%r3495, %r42, -1;
	mad.lo.s32 	%r3496, %r2245, %r3495, %r3492;
	add.s32 	%r3502, %r3496, %r2248;
	shl.b32 	%r3503, %r3502, 2;
	mov.u32 	%r3504, _ZN6kernel5shmemE;
	add.s32 	%r3505, %r3504, %r3503;
	shl.b32 	%r3506, %r46, 4;
	add.s32 	%r3507, %r3505, %r3506;
	ld.shared.v4.u32 	{%r7892, %r7891, %r7887, %r7885}, [%r3507];
	shl.b32 	%r3512, %r46, 3;
	add.s32 	%r3513, %r3505, %r3512;
	ld.shared.v2.u32 	{%r7888, %r7886}, [%r3513+512];
	ld.shared.v4.u32 	{%r7884, %r7883, %r7875, %r7873}, [%r3507+768];
	mov.u32 	%r7874, %r2259;
	mov.u32 	%r7876, %r2259;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7403, %r3513, 512;
	ld.shared.v2.u32 	{%r7876, %r7874}, [%r7403+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2247;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3523, %r1776, %r41;
	mul.lo.s32 	%r3525, %r70, %r42;
	mad.lo.s32 	%r3526, %r3523, 384, %r3525;
	mad.lo.s32 	%r3529, %r2245, %r2247, %r3526;
	mad.lo.s32 	%r3532, %r2243, %r2242, %r3529;
	shl.b32 	%r3533, %r3532, 2;
	mov.u32 	%r3534, _ZN6kernel5shmemE;
	add.s32 	%r3535, %r3534, %r3533;
	shl.b32 	%r3536, %r46, 4;
	add.s32 	%r3537, %r3535, %r3536;
	ld.shared.v4.u32 	{%r7801, %r7804, %r7808, %r7807}, [%r3537];

$L__BB0_416:
	shl.b32 	%r3542, %r42, 8;
	shl.b32 	%r3546, %r1777, 8;
	or.b32  	%r3547, %r3546, 128;
	add.s32 	%r3548, %r41, -1;
	mad.lo.s32 	%r3549, %r3547, %r3548, %r2250;
	add.s32 	%r3550, %r3549, %r3542;
	shl.b32 	%r3551, %r3550, 2;
	mov.u32 	%r3552, _ZN6kernel5shmemE;
	add.s32 	%r3553, %r3552, %r3551;
	setp.ne.s32 	%p281, %r42, %r2247;
	shl.b32 	%r3555, %r46, 4;
	add.s32 	%r937, %r3553, %r3555;
	ld.shared.v4.u32 	{%r7810, %r7812, %r7809, %r7811}, [%r937];
	ld.shared.v4.u32 	{%r7806, %r7803, %r7802, %r7805}, [%r937+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7801, %r7804, %r7808, %r7807}, [%r937+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3569, %r70, %r42;
	sub.s32 	%r3570, %r3569, %r70;
	mad.lo.s32 	%r3573, %r2647, 384, %r3570;
	mad.lo.s32 	%r3576, %r2245, %r2247, %r3573;
	mad.lo.s32 	%r3579, %r2243, %r2242, %r3576;
	shl.b32 	%r3580, %r3579, 2;
	mov.u32 	%r3581, _ZN6kernel5shmemE;
	add.s32 	%r3582, %r3581, %r3580;
	shl.b32 	%r3583, %r46, 4;
	add.s32 	%r962, %r3582, %r3583;
	ld.shared.v4.u32 	{%r7821, %r7820, %r7825, %r7823}, [%r962];
	ld.shared.v4.u32 	{%r7819, %r7816, %r7813, %r7814}, [%r962+512];
	ld.shared.v4.u32 	{%r7818, %r7815, %r7817, %r7824}, [%r962+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7827, %r7828, %r7822, %r7826}, [%r962+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd579, [%rd1+104];
	cvta.to.global.u64 	%rd578, %rd579;
	mad.lo.s32 	%r3601, %r675, %r1779, %r44;
	mul.lo.s32 	%r3602, %r1777, %r3601;
	mul.lo.s32 	%r3603, %r3602, 768;
	mad.lo.s32 	%r3604, %r42, 384, %r3603;
	add.s32 	%r3605, %r3604, -64;
	mul.wide.s32 	%rd301, %r3605, 4;
	add.s64 	%rd302, %rd578, %rd301;
	add.s64 	%rd304, %rd302, %rd303;
	ld.global.v4.u32 	{%r7836, %r7834, %r7843, %r7844}, [%rd304+256];
	ld.global.v4.u32 	{%r7842, %r7839, %r7831, %r7832}, [%rd304+1024];
	add.s64 	%rd30, %rd302, %rd305;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7837, %r7840}, [%rd30];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2247;
	ld.global.v2.u32 	{%r7835, %r7833}, [%rd30+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7841, %r7838}, [%rd30+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd581, [%rd1+104];
	cvta.to.global.u64 	%rd580, %rd581;
	mad.lo.s32 	%r3622, %r676, %r1778, %r43;
	mul.lo.s32 	%r3626, %r3622, %r1855;
	mad.lo.s32 	%r3629, %r2647, 384, %r3626;
	add.s32 	%r3630, %r3629, -64;
	mad.lo.s32 	%r3633, %r1857, %r69, %r3630;
	mul.wide.s32 	%rd306, %r3633, 4;
	add.s64 	%rd307, %rd580, %rd306;
	add.s64 	%rd309, %rd307, %rd303;
	ld.global.v4.u32 	{%r7856, %r7855, %r7851, %r7849}, [%rd309+256];
	ld.global.v4.u32 	{%r7846, %r7845, %r7848, %r7854}, [%rd309+1024];
	add.s64 	%rd311, %rd307, %rd305;
	ld.global.v2.u32 	{%r7852, %r7850}, [%rd311+768];
	ld.global.v2.u32 	{%r7837, %r7840}, [%rd311+1536];

$L__BB0_428:
	add.s32 	%r3646, %r1781, -1;
	setp.ge.s32 	%p288, %r677, %r3646;
	setp.lt.s32 	%p289, %r677, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r678, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3647, %r1782, -2;
	setp.ge.s32 	%p293, %r678, %r3647;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd583, [%rd1+112];
	cvta.to.global.u64 	%rd582, %rd583;
	mad.lo.s32 	%r1057, %r678, %r1781, %r677;
	shl.b32 	%r3648, %r1057, 6;
	mul.wide.s32 	%rd314, %r3648, 4;
	add.s64 	%rd32, %rd582, %rd314;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd316, %rd32, %rd305;
	ld.global.v2.u32 	{%r7876, %r7874}, [%rd316+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3651, %r1781, 5;
	cvt.s64.s32 	%rd317, %r3651;
	cvt.s64.s32 	%rd318, %r46;
	add.s64 	%rd319, %rd317, %rd318;
	shl.b64 	%rd320, %rd319, 3;
	add.s64 	%rd321, %rd32, %rd320;
	ld.global.v2.u32 	{%r7881, %r7879}, [%rd321];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3654, %r1781, 5;
	neg.s32 	%r3655, %r3654;
	cvt.s64.s32 	%rd322, %r3655;
	cvt.s64.s32 	%rd323, %r46;
	add.s64 	%rd324, %rd322, %rd323;
	shl.b64 	%rd325, %rd324, 3;
	add.s64 	%rd326, %rd32, %rd325;
	ld.global.v2.u32 	{%r7888, %r7886}, [%rd326];

$L__BB0_435:
	mad.lo.s32 	%r7414, %r678, %r1781, %r677;
	ld.param.u64 	%rd585, [%rd1+112];
	cvta.to.global.u64 	%rd584, %rd585;
	shl.b32 	%r3658, %r1782, 6;
	shl.b32 	%r3659, %r7414, 7;
	mad.lo.s32 	%r3660, %r3658, %r1781, %r3659;
	mul.wide.s32 	%rd327, %r3660, 4;
	add.s64 	%rd33, %rd584, %rd327;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3661, %r1781, 5;
	cvt.s64.s32 	%rd328, %r3661;
	cvt.s64.s32 	%rd329, %r46;
	add.s64 	%rd330, %rd328, %rd329;
	shl.b64 	%rd331, %rd330, 4;
	add.s64 	%rd332, %rd33, %rd331;
	ld.global.v4.u32 	{%r7882, %r7880, %r7872, %r7871}, [%rd332];
	shl.b32 	%r3666, %r1781, 6;
	add.s32 	%r3667, %r3666, -32;
	cvt.s64.s32 	%rd333, %r3667;
	add.s64 	%rd334, %rd333, %rd329;
	shl.b64 	%rd335, %rd334, 4;
	add.s64 	%rd336, %rd33, %rd335;
	ld.global.v4.u32 	{%r7890, %r7889, %r7878, %r7877}, [%rd336];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3672, %r1781, 5;
	xor.b32  	%r3673, %r3672, -32;
	cvt.s64.s32 	%rd337, %r3673;
	cvt.s64.s32 	%rd338, %r46;
	add.s64 	%rd339, %rd337, %rd338;
	shl.b64 	%rd340, %rd339, 4;
	add.s64 	%rd341, %rd33, %rd340;
	ld.global.v4.u32 	{%r7892, %r7891, %r7887, %r7885}, [%rd341];
	add.s64 	%rd343, %rd33, %rd303;
	ld.global.v4.u32 	{%r7884, %r7883, %r7875, %r7873}, [%rd343];

$L__BB0_439:
	mov.u32 	%r3687, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3683,%r7636,%r436,%r2350,%r3687;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3683;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7636;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3690, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3691,%r7645,%r3690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3694,%r7516,%r3691;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7893,%r7774;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7893,%r7517,%r3691;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3707, 31;
	mov.u32 	%r3730, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3705,%r7893,%r3707,%r2350,%r3730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3710,%r3694,%r3705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3713,%r7644,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3716,%r3713,%r3710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3719,%r7666,%r3716;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3722,%r7774,%r3719;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3726,%r7637,%r436,%r2350,%r3730;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3726;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7637;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3733, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3734,%r7646,%r3733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3737,%r7516,%r3734;
}
	// end inline asm
	mov.u32 	%r7894, %r7773;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7894,%r7517,%r3734;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3748,%r7894,%r3707,%r2350,%r3730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3753,%r3737,%r3748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3756,%r7644,%r7667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3759,%r3753,%r3756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3762,%r7665,%r3759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3765,%r7773,%r3762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3768,%r7636,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3771,%r7520,%r3768;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7895,%r7772;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7895,%r7521,%r3768;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3784, 31;
	mov.u32 	%r3786, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3782,%r7895,%r3784,%r2350,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3787,%r3771,%r3782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3790,%r7635,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3793,%r3790,%r3787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3796,%r7661,%r3793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3799,%r7772,%r3796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3802,%r7637,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3805,%r7520,%r3802;
}
	// end inline asm
	mov.u32 	%r7896, %r7771;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7896,%r7521,%r3802;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3814,%r7896,%r3784,%r2350,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3819,%r3805,%r3814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3822,%r7635,%r7662;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3825,%r3819,%r3822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3828,%r7660,%r3825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3831,%r7771,%r3828;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3835,%r7620,%r436,%r2350,%r3786;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3835;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7620;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3842, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3843,%r7628,%r3842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3846,%r7516,%r3843;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7897,%r7770;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7897,%r7517,%r3843;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3861, 31;
	mov.u32 	%r3863, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3859,%r7897,%r3861,%r2350,%r3863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3864,%r3846,%r3859;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3867,%r7627,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3870,%r3867,%r3864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3873,%r7658,%r3870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3876,%r7770,%r3873;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3879,%r7620,%r7628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3882,%r7520,%r3879;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7898,%r7769;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7898,%r7521,%r3879;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3895, 31;
	mov.u32 	%r3918, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3893,%r7898,%r3895,%r2350,%r3918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3898,%r3882,%r3893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3901,%r7619,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3904,%r3901,%r3898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3907,%r7656,%r3904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3910,%r7769,%r3907;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3914,%r7604,%r436,%r2350,%r3918;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3914;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7604;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3921, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3922,%r7609,%r3921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3925,%r7516,%r3922;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7899,%r7768;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7899,%r7517,%r3922;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3940, 31;
	mov.u32 	%r3963, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3938,%r7899,%r3940,%r2350,%r3963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3943,%r3925,%r3938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3946,%r7608,%r7825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3949,%r3946,%r3943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3952,%r7892,%r3949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3955,%r7768,%r3952;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3959,%r7605,%r436,%r2350,%r3963;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3959;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7605;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3966, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3967,%r7610,%r3966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3970,%r7516,%r3967;
}
	// end inline asm
	mov.u32 	%r7900, %r7767;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7900,%r7517,%r3967;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3981,%r7900,%r3940,%r2350,%r3963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3986,%r3970,%r3981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r7608,%r7654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r3986,%r3989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3995,%r7653,%r3992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3998,%r7767,%r3995;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4001,%r7604,%r7609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4004,%r7520,%r4001;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7901,%r7766;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7901,%r7521,%r4001;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r4017, 31;
	mov.u32 	%r4019, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4015,%r7901,%r4017,%r2350,%r4019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4020,%r4004,%r4015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4023,%r7603,%r7823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4026,%r4023,%r4020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4029,%r7891,%r4026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4032,%r7766,%r4029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4035,%r7605,%r7610;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4038,%r7520,%r4035;
}
	// end inline asm
	mov.u32 	%r7902, %r7765;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7902,%r7521,%r4035;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4047,%r7902,%r4017,%r2350,%r4019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4052,%r4038,%r4047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4055,%r7603,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4058,%r4052,%r4055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4061,%r7650,%r4058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4064,%r7765,%r4061;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4068,%r7592,%r436,%r2350,%r4019;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4068;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7592;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4075, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4076,%r7599,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4079,%r7516,%r4076;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7903,%r7764;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7903,%r7517,%r4076;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4094, 31;
	mov.u32 	%r4117, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4092,%r7903,%r4094,%r2350,%r4117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4097,%r4079,%r4092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4100,%r7598,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4103,%r4100,%r4097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4106,%r575,%r4103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7669,%r7764,%r4106;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4113,%r7593,%r436,%r2350,%r4117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4113;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7593;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4120, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7600,%r4120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4124,%r7516,%r4121;
}
	// end inline asm
	mov.u32 	%r7904, %r7763;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7904,%r7517,%r4121;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4135,%r7904,%r4094,%r2350,%r4117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4140,%r4124,%r4135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4143,%r7598,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4146,%r4140,%r4143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4149,%r574,%r4146;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r7763,%r4149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4155,%r7599,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4158,%r7600,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4161,%r4155,%r4158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4164,%r7641,%r4161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4167,%r7762,%r4164;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;

	mov.u32 	%r7762, %r4167;

$L__BB0_472:
	// begin inline asm
	{sub.f16x2 %r4172,%r7592,%r7599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4175,%r7520,%r4172;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7906,%r7761;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7906,%r7521,%r4172;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4186, 31;
	mov.u32 	%r4188, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4184,%r7906,%r4186,%r2350,%r4188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4189,%r4175,%r4184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4192,%r7591,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4195,%r4192,%r4189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4198,%r566,%r4195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r7761,%r4198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4204,%r7593,%r7600;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4207,%r7520,%r4204;
}
	// end inline asm
	mov.u32 	%r7907, %r7760;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7907,%r7521,%r4204;
}
	// end inline asm

$L__BB0_477:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4216,%r7907,%r4186,%r2350,%r4188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4221,%r4207,%r4216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4224,%r7591,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r4221,%r4224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4230,%r565,%r4227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7663,%r7760,%r4230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4236,%r7592,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4239,%r7593,%r7605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4242,%r4236,%r4239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4245,%r7632,%r4242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4248,%r7759,%r4245;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;

	mov.u32 	%r7759, %r4248;

$L__BB0_479:
	mov.u32 	%r4258, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4254,%r7581,%r436,%r2350,%r4258;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4254;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7581;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4261, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r7586,%r4261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4265,%r7516,%r4262;
}
	// end inline asm
	@%p28 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r7909,%r7758;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r7909,%r7517,%r4262;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4278, 31;
	mov.u32 	%r4301, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4276,%r7909,%r4278,%r2350,%r4301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4281,%r4265,%r4276;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4284,%r7585,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4287,%r4284,%r4281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4290,%r558,%r4287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7659,%r7758,%r4290;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4297,%r7582,%r436,%r2350,%r4301;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4297;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7582;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4304, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7587,%r4304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4308,%r7516,%r4305;
}
	// end inline asm
	mov.u32 	%r7910, %r7757;
	@%p28 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r7910,%r7517,%r4305;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4319,%r7910,%r4278,%r2350,%r4301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4324,%r4308,%r4319;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4327,%r7585,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r4324,%r4327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4333,%r7625,%r4330;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4336,%r7757,%r4333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4339,%r7586,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4342,%r7587,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4345,%r4339,%r4342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4348,%r7624,%r4345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4351,%r7756,%r4348;
}
	// end inline asm
	@%p28 bra 	$L__BB0_486;

	mov.u32 	%r7756, %r4351;

$L__BB0_486:
	// begin inline asm
	{sub.f16x2 %r4356,%r7581,%r7586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4359,%r7520,%r4356;
}
	// end inline asm
	@%p28 bra 	$L__BB0_488;
	bra.uni 	$L__BB0_487;

$L__BB0_488:
	// begin inline asm
	{neg.f16x2 %r7912,%r7755;
}
	// end inline asm
	bra.uni 	$L__BB0_489;

$L__BB0_487:
	// begin inline asm
	{mul.f16x2 %r7912,%r7521,%r4356;
}
	// end inline asm

$L__BB0_489:
	mov.u32 	%r4370, 31;
	mov.u32 	%r4372, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4368,%r7912,%r4370,%r2350,%r4372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4373,%r4359,%r4368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4376,%r7580,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4379,%r4376,%r4373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4382,%r550,%r4379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7657,%r7755,%r4382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r7582,%r7587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4391,%r7520,%r4388;
}
	// end inline asm
	mov.u32 	%r7913, %r7754;
	@%p28 bra 	$L__BB0_491;

	// begin inline asm
	{mul.f16x2 %r7913,%r7521,%r4388;
}
	// end inline asm

$L__BB0_491:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4400,%r7913,%r4370,%r2350,%r4372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4405,%r4391,%r4400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4408,%r7580,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4411,%r4405,%r4408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4414,%r7617,%r4411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4417,%r7754,%r4414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4420,%r7581,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4423,%r7582,%r7593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4426,%r4420,%r4423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4429,%r7616,%r4426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4432,%r7753,%r4429;
}
	// end inline asm
	@%p28 bra 	$L__BB0_493;

	mov.u32 	%r7753, %r4432;

$L__BB0_493:
	mov.u32 	%r4442, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4438,%r7572,%r436,%r2350,%r4442;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4438;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7572;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4445, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4446,%r7576,%r4445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4449,%r7516,%r4446;
}
	// end inline asm
	@%p28 bra 	$L__BB0_495;
	bra.uni 	$L__BB0_494;

$L__BB0_495:
	// begin inline asm
	{neg.f16x2 %r7915,%r7752;
}
	// end inline asm
	bra.uni 	$L__BB0_496;

$L__BB0_494:
	// begin inline asm
	{mul.f16x2 %r7915,%r7517,%r4446;
}
	// end inline asm

$L__BB0_496:
	mov.u32 	%r4462, 31;
	mov.u32 	%r4464, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4460,%r7915,%r4462,%r2350,%r4464;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4465,%r4449,%r4460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4468,%r7808,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4471,%r4468,%r4465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4474,%r7890,%r4471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4477,%r7752,%r4474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4480,%r7572,%r7576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4483,%r7520,%r4480;
}
	// end inline asm
	@%p28 bra 	$L__BB0_498;
	bra.uni 	$L__BB0_497;

$L__BB0_498:
	// begin inline asm
	{neg.f16x2 %r7916,%r7751;
}
	// end inline asm
	bra.uni 	$L__BB0_499;

$L__BB0_497:
	// begin inline asm
	{mul.f16x2 %r7916,%r7521,%r4480;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4496, 31;
	mov.u32 	%r4519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4494,%r7916,%r4496,%r2350,%r4519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4499,%r4483,%r4494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4502,%r7807,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4505,%r4502,%r4499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4508,%r7889,%r4505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4511,%r7751,%r4508;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4515,%r7558,%r436,%r2350,%r4519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4515;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7558;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4522, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4523,%r7565,%r4522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4526,%r7516,%r4523;
}
	// end inline asm
	mov.u32 	%r7917, %r7750;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7917,%r7517,%r4523;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4537,%r7917,%r4496,%r2350,%r4519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4542,%r4526,%r4537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4545,%r7818,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4548,%r4542,%r4545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4551,%r7888,%r4548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7655,%r7750,%r4551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4557,%r7819,%r7609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4560,%r7565,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4563,%r4557,%r4560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4566,%r7887,%r4563;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4569,%r7749,%r4566;
}
	// end inline asm
	@%p28 bra 	$L__BB0_503;

	mov.u32 	%r7749, %r4569;

$L__BB0_503:
	// begin inline asm
	{sub.f16x2 %r4574,%r7558,%r7565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4577,%r7520,%r4574;
}
	// end inline asm
	mov.u32 	%r7919, %r7748;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7919,%r7521,%r4574;
}
	// end inline asm

$L__BB0_505:
	mov.u32 	%r4586, 31;
	mov.u32 	%r4588, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4584,%r7919,%r4586,%r2350,%r4588;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4589,%r4577,%r4584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r7815,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4595,%r4589,%r4592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4598,%r7886,%r4595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7652,%r7748,%r4598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4604,%r7816,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4607,%r7558,%r7820;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4610,%r4604,%r4607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4613,%r7885,%r4610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4616,%r7747,%r4613;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;

	mov.u32 	%r7747, %r4616;

$L__BB0_507:
	// begin inline asm
	{shfl.sync.idx.b32 %r4622,%r7544,%r436,%r2350,%r4588;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4622;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7544;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4629, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r7551,%r4629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4633,%r7516,%r4630;
}
	// end inline asm
	@%p28 bra 	$L__BB0_509;
	bra.uni 	$L__BB0_508;

$L__BB0_509:
	// begin inline asm
	{neg.f16x2 %r7921,%r7746;
}
	// end inline asm
	bra.uni 	$L__BB0_510;

$L__BB0_508:
	// begin inline asm
	{mul.f16x2 %r7921,%r7517,%r4630;
}
	// end inline asm

$L__BB0_510:
	mov.u32 	%r4646, 31;
	mov.u32 	%r4669, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4644,%r7921,%r4646,%r2350,%r4669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4649,%r4633,%r4644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4652,%r7550,%r7818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4655,%r4652,%r4649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4658,%r7884,%r4655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7746,%r4658;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4665,%r7545,%r436,%r2350,%r4669;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4665;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7545;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4672, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4673,%r7552,%r4672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4676,%r7516,%r4673;
}
	// end inline asm
	mov.u32 	%r7922, %r7745;
	@%p28 bra 	$L__BB0_512;

	// begin inline asm
	{mul.f16x2 %r7922,%r7517,%r4673;
}
	// end inline asm

$L__BB0_512:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4687,%r7922,%r4646,%r2350,%r4669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4692,%r4676,%r4687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4695,%r7550,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4698,%r4692,%r4695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4701,%r7642,%r4698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7745,%r4701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4707,%r7551,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4710,%r7552,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4713,%r4707,%r4710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4716,%r520,%r4713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4719,%r7744,%r4716;
}
	// end inline asm
	@%p28 bra 	$L__BB0_514;

	mov.u32 	%r7744, %r4719;

$L__BB0_514:
	// begin inline asm
	{sub.f16x2 %r4724,%r7544,%r7551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4727,%r7520,%r4724;
}
	// end inline asm
	@%p28 bra 	$L__BB0_516;
	bra.uni 	$L__BB0_515;

$L__BB0_516:
	// begin inline asm
	{neg.f16x2 %r7924,%r7743;
}
	// end inline asm
	bra.uni 	$L__BB0_517;

$L__BB0_515:
	// begin inline asm
	{mul.f16x2 %r7924,%r7521,%r4724;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4738, 31;
	mov.u32 	%r4740, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4736,%r7924,%r4738,%r2350,%r4740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4741,%r4727,%r4736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4744,%r7543,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4747,%r4744,%r4741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4750,%r7883,%r4747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7743,%r4750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4756,%r7545,%r7552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4759,%r7520,%r4756;
}
	// end inline asm
	mov.u32 	%r7925, %r7742;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7925,%r7521,%r4756;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4768,%r7925,%r4738,%r2350,%r4740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4773,%r4759,%r4768;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4776,%r7543,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4779,%r4773,%r4776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4782,%r7633,%r4779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7742,%r4782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4788,%r7544,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4791,%r7545,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4794,%r4788,%r4791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4797,%r512,%r4794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4800,%r7741,%r4797;
}
	// end inline asm
	@%p28 bra 	$L__BB0_521;

	mov.u32 	%r7741, %r4800;

$L__BB0_521:
	mov.u32 	%r4810, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r4806,%r7529,%r436,%r2350,%r4810;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4806;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7529;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4813, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4814,%r7537,%r4813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4817,%r7516,%r4814;
}
	// end inline asm
	@%p28 bra 	$L__BB0_523;
	bra.uni 	$L__BB0_522;

$L__BB0_523:
	// begin inline asm
	{neg.f16x2 %r7927,%r7740;
}
	// end inline asm
	bra.uni 	$L__BB0_524;

$L__BB0_522:
	// begin inline asm
	{mul.f16x2 %r7927,%r7517,%r4814;
}
	// end inline asm

$L__BB0_524:
	mov.u32 	%r4830, 31;
	mov.u32 	%r4853, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4828,%r7927,%r4830,%r2350,%r4853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4833,%r4817,%r4828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4836,%r7806,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4839,%r4836,%r4833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4842,%r7882,%r4839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7740,%r4842;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4849,%r7530,%r436,%r2350,%r4853;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4849;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7530;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4856, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4857,%r7538,%r4856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4860,%r7516,%r4857;
}
	// end inline asm
	mov.u32 	%r7928, %r7739;
	@%p28 bra 	$L__BB0_526;

	// begin inline asm
	{mul.f16x2 %r7928,%r7517,%r4857;
}
	// end inline asm

$L__BB0_526:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4871,%r7928,%r4830,%r2350,%r4853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4876,%r4860,%r4871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4879,%r7806,%r7585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4882,%r4876,%r4879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4885,%r7881,%r4882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7739,%r4885;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4891,%r7537,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4894,%r7538,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4897,%r4891,%r4894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4900,%r505,%r4897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4903,%r7738,%r4900;
}
	// end inline asm
	@%p28 bra 	$L__BB0_528;

	mov.u32 	%r7738, %r4903;

$L__BB0_528:
	// begin inline asm
	{sub.f16x2 %r4908,%r7529,%r7537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4911,%r7520,%r4908;
}
	// end inline asm
	@%p28 bra 	$L__BB0_530;
	bra.uni 	$L__BB0_529;

$L__BB0_530:
	// begin inline asm
	{neg.f16x2 %r7930,%r7737;
}
	// end inline asm
	bra.uni 	$L__BB0_531;

$L__BB0_529:
	// begin inline asm
	{mul.f16x2 %r7930,%r7521,%r4908;
}
	// end inline asm

$L__BB0_531:
	mov.u32 	%r4922, 31;
	mov.u32 	%r4924, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4920,%r7930,%r4922,%r2350,%r4924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4925,%r4911,%r4920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4928,%r7803,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4931,%r4928,%r4925;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4934,%r7880,%r4931;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7623,%r7737,%r4934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4940,%r7530,%r7538;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4943,%r7520,%r4940;
}
	// end inline asm
	mov.u32 	%r7931, %r7736;
	@%p28 bra 	$L__BB0_533;

	// begin inline asm
	{mul.f16x2 %r7931,%r7521,%r4940;
}
	// end inline asm

$L__BB0_533:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4952,%r7931,%r4922,%r2350,%r4924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4957,%r4943,%r4952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4960,%r7803,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4963,%r4957,%r4960;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4966,%r7879,%r4963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7622,%r7736,%r4966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4972,%r7529,%r7581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4975,%r7530,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4978,%r4972,%r4975;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4981,%r498,%r4978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4984,%r7735,%r4981;
}
	// end inline asm
	@%p28 bra 	$L__BB0_535;

	mov.u32 	%r7735, %r4984;

$L__BB0_535:
	// begin inline asm
	{sub.f16x2 %r4989,%r7802,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4992,%r7801,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4995,%r4989,%r4992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4998,%r7878,%r4995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5001,%r7734,%r4998;
}
	// end inline asm
	@%p28 bra 	$L__BB0_537;

	mov.u32 	%r7734, %r5001;

$L__BB0_537:
	// begin inline asm
	{sub.f16x2 %r5004,%r7805,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5007,%r7804,%r7530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5010,%r5004,%r5007;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5013,%r7877,%r5010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5016,%r7733,%r5013;
}
	// end inline asm
	@%p28 bra 	$L__BB0_539;

	mov.u32 	%r7733, %r5016;

$L__BB0_539:
	mov.u32 	%r5024, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r5020,%r7607,%r436,%r2350,%r5024;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5020;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7607;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5027, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5028,%r7561,%r5027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5031,%r7516,%r5028;
}
	// end inline asm
	mov.u32 	%r7935, %r7732;
	@%p28 bra 	$L__BB0_541;

	// begin inline asm
	{mul.f16x2 %r7935,%r7517,%r5028;
}
	// end inline asm

$L__BB0_541:
	mov.u32 	%r5042, 31;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5040,%r7935,%r5042,%r2350,%r5024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5045,%r5031,%r5040;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5048,%r7822,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5051,%r5045,%r5048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5054,%r7876,%r5051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r7732,%r5054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5060,%r7817,%r7551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5063,%r7561,%r7813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5066,%r5060,%r5063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5069,%r7875,%r5066;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5072,%r7731,%r5069;
}
	// end inline asm
	@%p28 bra 	$L__BB0_543;

	mov.u32 	%r7731, %r5072;

$L__BB0_543:
	// begin inline asm
	{sub.f16x2 %r5077,%r7607,%r7561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5080,%r7520,%r5077;
}
	// end inline asm
	mov.u32 	%r7937, %r7730;
	@%p28 bra 	$L__BB0_545;

	// begin inline asm
	{mul.f16x2 %r7937,%r7521,%r5077;
}
	// end inline asm

$L__BB0_545:
	mov.u32 	%r5089, 31;
	mov.u32 	%r5091, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5087,%r7937,%r5089,%r2350,%r5091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5092,%r5080,%r5087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5095,%r7826,%r7543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5098,%r5092,%r5095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5101,%r7874,%r5098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r7730,%r5101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5107,%r7824,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5110,%r7607,%r7814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5113,%r5107,%r5110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5116,%r7873,%r5113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5119,%r7729,%r5116;
}
	// end inline asm
	@%p28 bra 	$L__BB0_547;

	mov.u32 	%r7729, %r5119;

$L__BB0_547:
	// begin inline asm
	{sub.f16x2 %r5124,%r7810,%r7537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5127,%r7809,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5130,%r5124,%r5127;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5133,%r7872,%r5130;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5136,%r7728,%r5133;
}
	// end inline asm
	@%p28 bra 	$L__BB0_549;

	mov.u32 	%r7728, %r5136;

$L__BB0_549:
	// begin inline asm
	{sub.f16x2 %r5139,%r7812,%r7529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5142,%r7811,%r7607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5145,%r5139,%r5142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5148,%r7871,%r5145;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5151,%r7727,%r5148;
}
	// end inline asm
	@%p28 bra 	$L__BB0_551;

	mov.u32 	%r7727, %r5151;

$L__BB0_551:
	bar.sync 	0;
	ld.param.u64 	%rd344, [%rd1+184];
	cvta.to.global.u64 	%rd35, %rd344;
	add.s32 	%r5154, %r1790, -2;
	setp.lt.s32 	%p350, %r677, %r5154;
	add.s32 	%r5155, %r1791, 3;
	setp.ge.s32 	%p351, %r677, %r5155;
	or.pred  	%p352, %p350, %p351;
	add.s32 	%r5156, %r1792, -2;
	setp.lt.s32 	%p353, %r678, %r5156;
	or.pred  	%p354, %p352, %p353;
	add.s32 	%r5157, %r1793, 2;
	setp.ge.s32 	%p355, %r678, %r5157;
	or.pred  	%p356, %p355, %p354;
	setp.lt.s32 	%p357, %r679, %r1787;
	or.pred  	%p358, %p357, %p356;
	mad.lo.s32 	%r5158, %r1789, %r1788, %r1787;
	setp.ge.s32 	%p359, %r679, %r5158;
	or.pred  	%p360, %p358, %p359;
	@%p360 bra 	$L__BB0_793;

	sub.s32 	%r1324, %r679, %r1787;
	rem.s32 	%r5159, %r1324, %r1788;
	setp.ne.s32 	%p361, %r5159, 0;
	@%p361 bra 	$L__BB0_793;

	div.s32 	%r5160, %r1324, %r1788;
	mov.u32 	%r5161, 8;
	sub.s32 	%r5162, %r5161, %r1790;
	add.s32 	%r5163, %r5162, %r1791;
	mul.lo.s32 	%r5164, %r5160, %r5163;
	mov.u32 	%r5165, 4;
	sub.s32 	%r5166, %r5165, %r1790;
	add.s32 	%r1325, %r5166, %r677;
	sub.s32 	%r5167, %r5165, %r1792;
	add.s32 	%r1326, %r5167, %r678;
	mul.lo.s32 	%r1327, %r5164, 3;
	add.s32 	%r5168, %r1325, %r1327;
	add.s32 	%r5169, %r5168, -2;
	sub.s32 	%r5170, %r5161, %r1792;
	add.s32 	%r5171, %r5170, %r1793;
	mul.lo.s32 	%r1328, %r5169, %r5171;
	add.s32 	%r5172, %r1326, %r1328;
	mul.lo.s32 	%r5173, %r5172, %r58;
	sub.s32 	%r1329, %r5173, %r1794;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p363, %p24;
	@%p363 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3722;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5175, %r1329, %r402;
	mul.wide.s32 	%rd345, %r5175, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f496;

$L__BB0_556:
	not.pred 	%p364, %p26;
	@%p364 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3722;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5177, %r1329, %r403;
	mul.wide.s32 	%rd347, %r5177, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f497;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p366, %p25;
	@%p366 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3799;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5179, %r1329, %r416;
	mul.wide.s32 	%rd349, %r5179, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f498;

$L__BB0_561:
	not.pred 	%p367, %p27;
	@%p367 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3799;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5181, %r1329, %r417;
	mul.wide.s32 	%rd351, %r5181, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f499;

$L__BB0_563:
	mov.u32 	%r5182, 8;
	sub.s32 	%r5183, %r5182, %r1790;
	add.s32 	%r5184, %r5183, %r1791;
	add.s32 	%r1330, %r1327, %r5184;
	add.s32 	%r5185, %r1325, %r1330;
	add.s32 	%r5186, %r5185, -2;
	sub.s32 	%r5187, %r5182, %r1792;
	add.s32 	%r5188, %r5187, %r1793;
	mad.lo.s32 	%r5189, %r5186, %r5188, %r1326;
	mul.lo.s32 	%r5190, %r5189, %r58;
	sub.s32 	%r1331, %r5190, %r1794;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p369, %p24;
	@%p369 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3765;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5192, %r1331, %r402;
	mul.wide.s32 	%rd353, %r5192, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f500;

$L__BB0_566:
	not.pred 	%p370, %p26;
	@%p370 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3765;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5194, %r1331, %r403;
	mul.wide.s32 	%rd355, %r5194, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f501;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p372, %p25;
	@%p372 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3831;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5196, %r1331, %r416;
	mul.wide.s32 	%rd357, %r5196, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f502;

$L__BB0_571:
	not.pred 	%p373, %p27;
	@%p373 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3831;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5198, %r1331, %r417;
	mul.wide.s32 	%rd359, %r5198, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f503;

$L__BB0_573:
	add.s32 	%r1332, %r1326, 1;
	add.s32 	%r5199, %r1332, %r1328;
	mul.lo.s32 	%r5200, %r5199, %r58;
	sub.s32 	%r1333, %r5200, %r1794;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p375, %p24;
	@%p375 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3876;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5202, %r1333, %r402;
	mul.wide.s32 	%rd361, %r5202, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f504;

$L__BB0_576:
	not.pred 	%p376, %p26;
	@%p376 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3876;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5204, %r1333, %r403;
	mul.wide.s32 	%rd363, %r5204, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f505;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p378, %p25;
	@%p378 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3910;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5206, %r1333, %r416;
	mul.wide.s32 	%rd365, %r5206, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f506;

$L__BB0_581:
	not.pred 	%p379, %p27;
	@%p379 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3910;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5208, %r1333, %r417;
	mul.wide.s32 	%rd367, %r5208, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f507;

$L__BB0_583:
	add.s32 	%r1334, %r1325, -1;
	add.s32 	%r5209, %r1334, %r1327;
	mov.u32 	%r5210, 8;
	sub.s32 	%r5211, %r5210, %r1792;
	add.s32 	%r5212, %r5211, %r1793;
	mul.lo.s32 	%r1335, %r5209, %r5212;
	add.s32 	%r1336, %r1326, -1;
	add.s32 	%r5213, %r1336, %r1335;
	mul.lo.s32 	%r5214, %r5213, %r58;
	sub.s32 	%r1337, %r5214, %r1794;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p381, %p24;
	@%p381 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3955;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5216, %r1337, %r402;
	mul.wide.s32 	%rd369, %r5216, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f508;

$L__BB0_586:
	not.pred 	%p382, %p26;
	@%p382 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3955;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5218, %r1337, %r403;
	mul.wide.s32 	%rd371, %r5218, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f509;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p384, %p25;
	@%p384 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4032;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5220, %r1337, %r416;
	mul.wide.s32 	%rd373, %r5220, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f510;

$L__BB0_591:
	not.pred 	%p385, %p27;
	@%p385 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4032;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5222, %r1337, %r417;
	mul.wide.s32 	%rd375, %r5222, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f511;

$L__BB0_593:
	mov.u32 	%r5223, 8;
	sub.s32 	%r5224, %r5223, %r1792;
	add.s32 	%r5225, %r5224, %r1793;
	add.s32 	%r5226, %r1334, %r1330;
	mul.lo.s32 	%r1338, %r5226, %r5225;
	add.s32 	%r5227, %r1336, %r1338;
	mul.lo.s32 	%r5228, %r5227, %r58;
	sub.s32 	%r1339, %r5228, %r1794;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p387, %p24;
	@%p387 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3998;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5230, %r1339, %r402;
	mul.wide.s32 	%rd377, %r5230, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f512;

$L__BB0_596:
	not.pred 	%p388, %p26;
	@%p388 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3998;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5232, %r1339, %r403;
	mul.wide.s32 	%rd379, %r5232, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f513;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p390, %p25;
	@%p390 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4064;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5234, %r1339, %r416;
	mul.wide.s32 	%rd381, %r5234, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f514;

$L__BB0_601:
	not.pred 	%p391, %p27;
	@%p391 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4064;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5236, %r1339, %r417;
	mul.wide.s32 	%rd383, %r5236, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f515;

$L__BB0_603:
	add.s32 	%r5237, %r1326, %r1335;
	mul.lo.s32 	%r5238, %r5237, %r58;
	sub.s32 	%r1340, %r5238, %r1794;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p393, %p24;
	@%p393 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7669;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r5240, %r1340, %r402;
	mul.wide.s32 	%rd385, %r5240, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f516;

$L__BB0_606:
	not.pred 	%p394, %p26;
	@%p394 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7669;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r5242, %r1340, %r403;
	mul.wide.s32 	%rd387, %r5242, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f517;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p396, %p25;
	@%p396 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7664;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r5244, %r1340, %r416;
	mul.wide.s32 	%rd389, %r5244, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f518;

$L__BB0_611:
	not.pred 	%p397, %p27;
	@%p397 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7664;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r5246, %r1340, %r417;
	mul.wide.s32 	%rd391, %r5246, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f519;

$L__BB0_613:
	add.s32 	%r5247, %r1326, %r1338;
	mul.lo.s32 	%r5248, %r5247, %r58;
	sub.s32 	%r1341, %r5248, %r1794;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p399, %p24;
	@%p399 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7668;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r5250, %r1341, %r402;
	mul.wide.s32 	%rd393, %r5250, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f520;

$L__BB0_616:
	not.pred 	%p400, %p26;
	@%p400 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7668;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r5252, %r1341, %r403;
	mul.wide.s32 	%rd395, %r5252, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f521;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p402, %p25;
	@%p402 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7663;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r5254, %r1341, %r416;
	mul.wide.s32 	%rd397, %r5254, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f522;

$L__BB0_621:
	not.pred 	%p403, %p27;
	@%p403 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7663;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r5256, %r1341, %r417;
	mul.wide.s32 	%rd399, %r5256, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f523;

$L__BB0_623:
	mov.u32 	%r5257, 8;
	sub.s32 	%r5258, %r5257, %r1790;
	add.s32 	%r5259, %r5258, %r1791;
	add.s32 	%r1342, %r1330, %r5259;
	add.s32 	%r5260, %r1334, %r1342;
	sub.s32 	%r5261, %r5257, %r1792;
	add.s32 	%r5262, %r5261, %r1793;
	mul.lo.s32 	%r1343, %r5260, %r5262;
	add.s32 	%r5263, %r1326, %r1343;
	mul.lo.s32 	%r5264, %r5263, %r58;
	sub.s32 	%r1344, %r5264, %r1794;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p405, %p24;
	@%p405 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7762;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r5266, %r1344, %r402;
	mul.wide.s32 	%rd401, %r5266, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f524;

$L__BB0_626:
	not.pred 	%p406, %p26;
	@%p406 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7762;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r5268, %r1344, %r403;
	mul.wide.s32 	%rd403, %r5268, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f525;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p408, %p25;
	@%p408 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7759;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r5270, %r1344, %r416;
	mul.wide.s32 	%rd405, %r5270, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f526;

$L__BB0_631:
	not.pred 	%p409, %p27;
	@%p409 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7759;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r5272, %r1344, %r417;
	mul.wide.s32 	%rd407, %r5272, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f527;

$L__BB0_633:
	add.s32 	%r7415, %r1326, 1;
	add.s32 	%r5273, %r7415, %r1335;
	mul.lo.s32 	%r5274, %r5273, %r58;
	sub.s32 	%r1345, %r5274, %r1794;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p411, %p24;
	@%p411 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r5276, %r1345, %r402;
	mul.wide.s32 	%rd409, %r5276, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f528;

$L__BB0_636:
	not.pred 	%p412, %p26;
	@%p412 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7659;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r5278, %r1345, %r403;
	mul.wide.s32 	%rd411, %r5278, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f529;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p414, %p25;
	@%p414 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7657;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r5280, %r1345, %r416;
	mul.wide.s32 	%rd413, %r5280, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f530;

$L__BB0_641:
	not.pred 	%p415, %p27;
	@%p415 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7657;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r5282, %r1345, %r417;
	mul.wide.s32 	%rd415, %r5282, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f531;

$L__BB0_643:
	add.s32 	%r7416, %r1326, 1;
	add.s32 	%r5283, %r7416, %r1338;
	mul.lo.s32 	%r5284, %r5283, %r58;
	sub.s32 	%r1346, %r5284, %r1794;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p417, %p24;
	@%p417 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4336;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r5286, %r1346, %r402;
	mul.wide.s32 	%rd417, %r5286, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f532;

$L__BB0_646:
	not.pred 	%p418, %p26;
	@%p418 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4336;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r5288, %r1346, %r403;
	mul.wide.s32 	%rd419, %r5288, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f533;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p420, %p25;
	@%p420 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4417;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r5290, %r1346, %r416;
	mul.wide.s32 	%rd421, %r5290, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f534;

$L__BB0_651:
	not.pred 	%p421, %p27;
	@%p421 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4417;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r5292, %r1346, %r417;
	mul.wide.s32 	%rd423, %r5292, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f535;

$L__BB0_653:
	add.s32 	%r7417, %r1326, 1;
	add.s32 	%r5293, %r7417, %r1343;
	mul.lo.s32 	%r5294, %r5293, %r58;
	sub.s32 	%r1347, %r5294, %r1794;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p423, %p24;
	@%p423 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7756;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r5296, %r1347, %r402;
	mul.wide.s32 	%rd425, %r5296, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f536;

$L__BB0_656:
	not.pred 	%p424, %p26;
	@%p424 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7756;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r5298, %r1347, %r403;
	mul.wide.s32 	%rd427, %r5298, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f537;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p426, %p25;
	@%p426 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7753;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r5300, %r1347, %r416;
	mul.wide.s32 	%rd429, %r5300, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f538;

$L__BB0_661:
	not.pred 	%p427, %p27;
	@%p427 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7753;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r5302, %r1347, %r417;
	mul.wide.s32 	%rd431, %r5302, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f539;

$L__BB0_663:
	add.s32 	%r1348, %r1326, 2;
	add.s32 	%r5303, %r1348, %r1335;
	mul.lo.s32 	%r5304, %r5303, %r58;
	sub.s32 	%r1349, %r5304, %r1794;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p429, %p24;
	@%p429 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4477;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r5306, %r1349, %r402;
	mul.wide.s32 	%rd433, %r5306, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f540;

$L__BB0_666:
	not.pred 	%p430, %p26;
	@%p430 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4477;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r5308, %r1349, %r403;
	mul.wide.s32 	%rd435, %r5308, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f541;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p432, %p25;
	@%p432 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4511;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r5310, %r1349, %r416;
	mul.wide.s32 	%rd437, %r5310, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f542;

$L__BB0_671:
	not.pred 	%p433, %p27;
	@%p433 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4511;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r5312, %r1349, %r417;
	mul.wide.s32 	%rd439, %r5312, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f543;

$L__BB0_673:
	add.s32 	%r7418, %r1326, -1;
	mov.u32 	%r5313, 8;
	sub.s32 	%r5314, %r5313, %r1792;
	add.s32 	%r5315, %r5314, %r1793;
	mul.lo.s32 	%r1350, %r5185, %r5315;
	add.s32 	%r5317, %r7418, %r1350;
	mul.lo.s32 	%r5318, %r5317, %r58;
	sub.s32 	%r1351, %r5318, %r1794;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p435, %p24;
	@%p435 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7655;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r5320, %r1351, %r402;
	mul.wide.s32 	%rd441, %r5320, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f544;

$L__BB0_676:
	not.pred 	%p436, %p26;
	@%p436 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7655;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r5322, %r1351, %r403;
	mul.wide.s32 	%rd443, %r5322, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f545;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p438, %p25;
	@%p438 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r5324, %r1351, %r416;
	mul.wide.s32 	%rd445, %r5324, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f546;

$L__BB0_681:
	not.pred 	%p439, %p27;
	@%p439 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r5326, %r1351, %r417;
	mul.wide.s32 	%rd447, %r5326, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f547;

$L__BB0_683:
	mov.u32 	%r7423, 8;
	sub.s32 	%r7422, %r7423, %r1790;
	add.s32 	%r7421, %r7422, %r1791;
	add.s32 	%r7420, %r1330, %r7421;
	add.s32 	%r7419, %r1326, -1;
	mov.u32 	%r5327, 8;
	sub.s32 	%r5328, %r5327, %r1792;
	add.s32 	%r5329, %r5328, %r1793;
	add.s32 	%r5330, %r1325, %r7420;
	mul.lo.s32 	%r1352, %r5330, %r5329;
	add.s32 	%r5331, %r7419, %r1352;
	mul.lo.s32 	%r5332, %r5331, %r58;
	sub.s32 	%r1353, %r5332, %r1794;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p441, %p24;
	@%p441 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7749;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r5334, %r1353, %r402;
	mul.wide.s32 	%rd449, %r5334, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f548;

$L__BB0_686:
	not.pred 	%p442, %p26;
	@%p442 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7749;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r5336, %r1353, %r403;
	mul.wide.s32 	%rd451, %r5336, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f549;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p444, %p25;
	@%p444 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7747;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r5338, %r1353, %r416;
	mul.wide.s32 	%rd453, %r5338, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f550;

$L__BB0_691:
	not.pred 	%p445, %p27;
	@%p445 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7747;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r5340, %r1353, %r417;
	mul.wide.s32 	%rd455, %r5340, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f551;

$L__BB0_693:
	mov.u32 	%r5341, 8;
	sub.s32 	%r5342, %r5341, %r1792;
	add.s32 	%r5343, %r5342, %r1793;
	mul.lo.s32 	%r1354, %r5168, %r5343;
	add.s32 	%r5345, %r1326, %r1354;
	mul.lo.s32 	%r5346, %r5345, %r58;
	sub.s32 	%r1355, %r5346, %r1794;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p447, %p24;
	@%p447 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r5348, %r1355, %r402;
	mul.wide.s32 	%rd457, %r5348, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f552;

$L__BB0_696:
	not.pred 	%p448, %p26;
	@%p448 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r5350, %r1355, %r403;
	mul.wide.s32 	%rd459, %r5350, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f553;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p450, %p25;
	@%p450 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r5352, %r1355, %r416;
	mul.wide.s32 	%rd461, %r5352, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f554;

$L__BB0_701:
	not.pred 	%p451, %p27;
	@%p451 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r5354, %r1355, %r417;
	mul.wide.s32 	%rd463, %r5354, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f555;

$L__BB0_703:
	add.s32 	%r5355, %r1326, %r1350;
	mul.lo.s32 	%r5356, %r5355, %r58;
	sub.s32 	%r1356, %r5356, %r1794;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p453, %p24;
	@%p453 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r5358, %r1356, %r402;
	mul.wide.s32 	%rd465, %r5358, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f556;

$L__BB0_706:
	not.pred 	%p454, %p26;
	@%p454 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r5360, %r1356, %r403;
	mul.wide.s32 	%rd467, %r5360, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f557;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p456, %p25;
	@%p456 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r5362, %r1356, %r416;
	mul.wide.s32 	%rd469, %r5362, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f558;

$L__BB0_711:
	not.pred 	%p457, %p27;
	@%p457 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r5364, %r1356, %r417;
	mul.wide.s32 	%rd471, %r5364, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f559;

$L__BB0_713:
	add.s32 	%r5365, %r1326, %r1352;
	mul.lo.s32 	%r5366, %r5365, %r58;
	sub.s32 	%r1357, %r5366, %r1794;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p459, %p24;
	@%p459 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7744;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r5368, %r1357, %r402;
	mul.wide.s32 	%rd473, %r5368, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f560;

$L__BB0_716:
	not.pred 	%p460, %p26;
	@%p460 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7744;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r5370, %r1357, %r403;
	mul.wide.s32 	%rd475, %r5370, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f561;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p462, %p25;
	@%p462 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7741;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r5372, %r1357, %r416;
	mul.wide.s32 	%rd477, %r5372, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f562;

$L__BB0_721:
	not.pred 	%p463, %p27;
	@%p463 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7741;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r5374, %r1357, %r417;
	mul.wide.s32 	%rd479, %r5374, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f563;

$L__BB0_723:
	add.s32 	%r7424, %r1326, 1;
	add.s32 	%r5375, %r7424, %r1354;
	mul.lo.s32 	%r5376, %r5375, %r58;
	sub.s32 	%r1358, %r5376, %r1794;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p465, %p24;
	@%p465 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r5378, %r1358, %r402;
	mul.wide.s32 	%rd481, %r5378, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f564;

$L__BB0_726:
	not.pred 	%p466, %p26;
	@%p466 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r5380, %r1358, %r403;
	mul.wide.s32 	%rd483, %r5380, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f565;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p468, %p25;
	@%p468 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7623;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r5382, %r1358, %r416;
	mul.wide.s32 	%rd485, %r5382, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f566;

$L__BB0_731:
	not.pred 	%p469, %p27;
	@%p469 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7623;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r5384, %r1358, %r417;
	mul.wide.s32 	%rd487, %r5384, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f567;

$L__BB0_733:
	add.s32 	%r7425, %r1326, 1;
	add.s32 	%r5385, %r7425, %r1350;
	mul.lo.s32 	%r5386, %r5385, %r58;
	sub.s32 	%r1359, %r5386, %r1794;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p471, %p24;
	@%p471 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r5388, %r1359, %r402;
	mul.wide.s32 	%rd489, %r5388, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f568;

$L__BB0_736:
	not.pred 	%p472, %p26;
	@%p472 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r5390, %r1359, %r403;
	mul.wide.s32 	%rd491, %r5390, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f569;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p474, %p25;
	@%p474 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7622;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r5392, %r1359, %r416;
	mul.wide.s32 	%rd493, %r5392, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f570;

$L__BB0_741:
	not.pred 	%p475, %p27;
	@%p475 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7622;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r5394, %r1359, %r417;
	mul.wide.s32 	%rd495, %r5394, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f571;

$L__BB0_743:
	add.s32 	%r7426, %r1326, 1;
	add.s32 	%r5395, %r7426, %r1352;
	mul.lo.s32 	%r5396, %r5395, %r58;
	sub.s32 	%r1360, %r5396, %r1794;
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p477, %p24;
	@%p477 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7738;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r5398, %r1360, %r402;
	mul.wide.s32 	%rd497, %r5398, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f572;

$L__BB0_746:
	not.pred 	%p478, %p26;
	@%p478 bra 	$L__BB0_748;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7738;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r5400, %r1360, %r403;
	mul.wide.s32 	%rd499, %r5400, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f573;

$L__BB0_748:
	@%p28 bra 	$L__BB0_753;

	not.pred 	%p480, %p25;
	@%p480 bra 	$L__BB0_751;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7735;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r5402, %r1360, %r416;
	mul.wide.s32 	%rd501, %r5402, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f574;

$L__BB0_751:
	not.pred 	%p481, %p27;
	@%p481 bra 	$L__BB0_753;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7735;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r5404, %r1360, %r417;
	mul.wide.s32 	%rd503, %r5404, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f575;

$L__BB0_753:
	add.s32 	%r5405, %r1348, %r1352;
	mul.lo.s32 	%r5406, %r5405, %r58;
	sub.s32 	%r1361, %r5406, %r1794;
	@%p28 bra 	$L__BB0_758;

	not.pred 	%p483, %p24;
	@%p483 bra 	$L__BB0_756;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7734;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r5408, %r1361, %r402;
	mul.wide.s32 	%rd505, %r5408, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f576;

$L__BB0_756:
	not.pred 	%p484, %p26;
	@%p484 bra 	$L__BB0_758;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7734;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r5410, %r1361, %r403;
	mul.wide.s32 	%rd507, %r5410, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f577;

$L__BB0_758:
	@%p28 bra 	$L__BB0_763;

	not.pred 	%p486, %p25;
	@%p486 bra 	$L__BB0_761;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7733;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r5412, %r1361, %r416;
	mul.wide.s32 	%rd509, %r5412, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f578;

$L__BB0_761:
	not.pred 	%p487, %p27;
	@%p487 bra 	$L__BB0_763;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7733;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r5414, %r1361, %r417;
	mul.wide.s32 	%rd511, %r5414, 4;
	add.s64 	%rd512, %rd35, %rd511;
	st.global.f32 	[%rd512], %f579;

$L__BB0_763:
	add.s32 	%r1362, %r1325, 1;
	add.s32 	%r5415, %r1362, %r1330;
	mov.u32 	%r5416, 8;
	sub.s32 	%r5417, %r5416, %r1792;
	add.s32 	%r5418, %r5417, %r1793;
	mad.lo.s32 	%r5419, %r5415, %r5418, %r1326;
	mul.lo.s32 	%r5420, %r5419, %r58;
	sub.s32 	%r1363, %r5420, %r1794;
	@%p28 bra 	$L__BB0_768;

	not.pred 	%p489, %p24;
	@%p489 bra 	$L__BB0_766;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7602;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r5422, %r1363, %r402;
	mul.wide.s32 	%rd513, %r5422, 4;
	add.s64 	%rd514, %rd35, %rd513;
	st.global.f32 	[%rd514], %f580;

$L__BB0_766:
	not.pred 	%p490, %p26;
	@%p490 bra 	$L__BB0_768;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7602;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r5424, %r1363, %r403;
	mul.wide.s32 	%rd515, %r5424, 4;
	add.s64 	%rd516, %rd35, %rd515;
	st.global.f32 	[%rd516], %f581;

$L__BB0_768:
	@%p28 bra 	$L__BB0_773;

	not.pred 	%p492, %p25;
	@%p492 bra 	$L__BB0_771;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7595;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r5426, %r1363, %r416;
	mul.wide.s32 	%rd517, %r5426, 4;
	add.s64 	%rd518, %rd35, %rd517;
	st.global.f32 	[%rd518], %f582;

$L__BB0_771:
	not.pred 	%p493, %p27;
	@%p493 bra 	$L__BB0_773;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7595;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r5428, %r1363, %r417;
	mul.wide.s32 	%rd519, %r5428, 4;
	add.s64 	%rd520, %rd35, %rd519;
	st.global.f32 	[%rd520], %f583;

$L__BB0_773:
	mov.u32 	%r7430, 8;
	sub.s32 	%r7429, %r7430, %r1790;
	add.s32 	%r7428, %r7429, %r1791;
	add.s32 	%r7427, %r1330, %r7428;
	mov.u32 	%r5429, 8;
	sub.s32 	%r5430, %r5429, %r1792;
	add.s32 	%r5431, %r5430, %r1793;
	add.s32 	%r5432, %r1362, %r7427;
	mul.lo.s32 	%r1364, %r5432, %r5431;
	add.s32 	%r5433, %r1326, %r1364;
	mul.lo.s32 	%r5434, %r5433, %r58;
	sub.s32 	%r1365, %r5434, %r1794;
	@%p28 bra 	$L__BB0_778;

	not.pred 	%p495, %p24;
	@%p495 bra 	$L__BB0_776;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7731;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r5436, %r1365, %r402;
	mul.wide.s32 	%rd521, %r5436, 4;
	add.s64 	%rd522, %rd35, %rd521;
	st.global.f32 	[%rd522], %f584;

$L__BB0_776:
	not.pred 	%p496, %p26;
	@%p496 bra 	$L__BB0_778;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7731;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r5438, %r1365, %r403;
	mul.wide.s32 	%rd523, %r5438, 4;
	add.s64 	%rd524, %rd35, %rd523;
	st.global.f32 	[%rd524], %f585;

$L__BB0_778:
	@%p28 bra 	$L__BB0_783;

	not.pred 	%p498, %p25;
	@%p498 bra 	$L__BB0_781;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7729;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r5440, %r1365, %r416;
	mul.wide.s32 	%rd525, %r5440, 4;
	add.s64 	%rd526, %rd35, %rd525;
	st.global.f32 	[%rd526], %f586;

$L__BB0_781:
	not.pred 	%p499, %p27;
	@%p499 bra 	$L__BB0_783;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7729;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r5442, %r1365, %r417;
	mul.wide.s32 	%rd527, %r5442, 4;
	add.s64 	%rd528, %rd35, %rd527;
	st.global.f32 	[%rd528], %f587;

$L__BB0_783:
	add.s32 	%r7431, %r1326, 1;
	add.s32 	%r5443, %r7431, %r1364;
	mul.lo.s32 	%r5444, %r5443, %r58;
	sub.s32 	%r1366, %r5444, %r1794;
	@%p28 bra 	$L__BB0_788;

	not.pred 	%p501, %p24;
	@%p501 bra 	$L__BB0_786;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7728;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r5446, %r1366, %r402;
	mul.wide.s32 	%rd529, %r5446, 4;
	add.s64 	%rd530, %rd35, %rd529;
	st.global.f32 	[%rd530], %f588;

$L__BB0_786:
	not.pred 	%p502, %p26;
	@%p502 bra 	$L__BB0_788;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7728;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r5448, %r1366, %r403;
	mul.wide.s32 	%rd531, %r5448, 4;
	add.s64 	%rd532, %rd35, %rd531;
	st.global.f32 	[%rd532], %f589;

$L__BB0_788:
	@%p28 bra 	$L__BB0_793;

	not.pred 	%p504, %p25;
	@%p504 bra 	$L__BB0_791;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7727;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r5450, %r1366, %r416;
	mul.wide.s32 	%rd533, %r5450, 4;
	add.s64 	%rd534, %rd35, %rd533;
	st.global.f32 	[%rd534], %f590;

$L__BB0_791:
	not.pred 	%p505, %p27;
	@%p505 bra 	$L__BB0_793;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7727;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r5452, %r1366, %r417;
	mul.wide.s32 	%rd535, %r5452, 4;
	add.s64 	%rd536, %rd35, %rd535;
	st.global.f32 	[%rd536], %f591;

$L__BB0_793:
	setp.eq.s32 	%p506, %r41, %r2242;
	@%p506 bra 	$L__BB0_795;

	mad.lo.s32 	%r5453, %r1777, %r41, %r42;
	mov.u32 	%r5454, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5455, %r5453, 1280, %r5454;
	add.s32 	%r5456, %r5455, -256;
	shl.b32 	%r5457, %r46, 4;
	add.s32 	%r5458, %r5456, %r5457;
	st.shared.v4.u32 	[%r5458+256], {%r3955, %r4032, %r7749, %r7747};
	st.shared.v4.u32 	[%r5458+1024], {%r3722, %r3799, %r7762, %r7759};
	shl.b32 	%r5459, %r46, 3;
	add.s32 	%r5460, %r5456, %r5459;
	st.shared.v2.u32 	[%r5460+768], {%r3998, %r4064};

$L__BB0_795:
	setp.eq.s32 	%p507, %r42, %r2247;
	@%p507 bra 	$L__BB0_799;

	mad.lo.s32 	%r5464, %r1776, 384, -64;
	mul.lo.s32 	%r5465, %r5464, %r42;
	mad.lo.s32 	%r5467, %r2243, %r2242, %r5465;
	mad.lo.s32 	%r5468, %r2647, 384, %r5467;
	shl.b32 	%r5469, %r5468, 2;
	mov.u32 	%r5470, _ZN6kernel5shmemE;
	add.s32 	%r5471, %r5470, %r5469;
	add.s32 	%r5472, %r5471, -256;
	shl.b32 	%r5473, %r46, 4;
	add.s32 	%r5474, %r5472, %r5473;
	st.shared.v4.u32 	[%r5474+256], {%r3876, %r3910, %r7756, %r7753};
	st.shared.v4.u32 	[%r5474+1024], {%r4477, %r4511, %r7734, %r7733};
	shl.b32 	%r5475, %r46, 3;
	add.s32 	%r1370, %r5472, %r5475;
	@%p506 bra 	$L__BB0_798;

	st.shared.v2.u32 	[%r1370], {%r3765, %r3831};

$L__BB0_798:
	st.shared.v2.u32 	[%r1370+768], {%r4336, %r4417};

$L__BB0_799:
	setp.ne.s32 	%p509, %r41, %r2242;
	ld.param.u64 	%rd537, [%rd1+104];
	cvta.to.global.u64 	%rd36, %rd537;
	@%p509 bra 	$L__BB0_801;

	mad.lo.s32 	%r5477, %r675, %r1779, %r44;
	mul.lo.s32 	%r5478, %r1777, %r5477;
	mul.lo.s32 	%r5479, %r5478, 768;
	mad.lo.s32 	%r5480, %r42, 384, %r5479;
	add.s32 	%r5481, %r5480, -64;
	mul.wide.s32 	%rd538, %r5481, 4;
	add.s64 	%rd539, %rd36, %rd538;
	add.s64 	%rd541, %rd539, %rd303;
	st.global.v4.u32 	[%rd541+256], {%r3955, %r4032, %r7749, %r7747};
	st.global.v4.u32 	[%rd541+1024], {%r3722, %r3799, %r7762, %r7759};
	add.s64 	%rd543, %rd539, %rd305;
	st.global.v2.u32 	[%rd543+768], {%r3998, %r4064};
	st.global.v2.u32 	[%rd543+1536], {%r3765, %r3831};

$L__BB0_801:
	setp.ne.s32 	%p510, %r42, %r2247;
	@%p510 bra 	$L__BB0_806;

	ld.param.u64 	%rd587, [%rd1+104];
	cvta.to.global.u64 	%rd586, %rd587;
	mad.lo.s32 	%r5484, %r676, %r1778, %r43;
	mul.lo.s32 	%r5488, %r5484, %r1855;
	mad.lo.s32 	%r5491, %r2647, 384, %r5488;
	add.s32 	%r5492, %r5491, -64;
	mad.lo.s32 	%r5495, %r1857, %r69, %r5492;
	mul.wide.s32 	%rd544, %r5495, 4;
	add.s64 	%rd545, %rd586, %rd544;
	add.s64 	%rd547, %rd545, %rd303;
	st.global.v4.u32 	[%rd547+256], {%r3876, %r3910, %r7756, %r7753};
	st.global.v4.u32 	[%rd547+1024], {%r4477, %r4511, %r7734, %r7733};
	add.s64 	%rd37, %rd545, %rd305;
	@%p506 bra 	$L__BB0_804;

	st.global.v2.u32 	[%rd37], {%r3765, %r3831};

$L__BB0_804:
	st.global.v2.u32 	[%rd37+768], {%r4336, %r4417};
	@%p284 bra 	$L__BB0_806;

	st.global.v2.u32 	[%rd37+1536], {%r7841, %r7838};

$L__BB0_806:
	setp.ge.s32 	%p513, %r41, %r2242;
	@%p513 bra 	$L__BB0_808;

	mul.lo.s32 	%r5496, %r1777, 320;
	mul.lo.s32 	%r5497, %r42, 320;
	mad.lo.s32 	%r5498, %r5496, %r41, %r5497;
	add.s32 	%r5502, %r1854, -64;
	mad.lo.s32 	%r5506, %r5502, %r2247, %r2244;
	add.s32 	%r5507, %r5498, %r5506;
	shl.b32 	%r5508, %r5507, 2;
	mov.u32 	%r5509, _ZN6kernel5shmemE;
	add.s32 	%r5510, %r5509, %r5508;
	shl.b32 	%r5511, %r46, 4;
	add.s32 	%r5512, %r5510, %r5511;
	st.shared.v4.u32 	[%r5512], {%r7892, %r7891, %r7887, %r7885};
	shl.b32 	%r5513, %r46, 3;
	add.s32 	%r5514, %r5510, %r5513;
	st.shared.v2.u32 	[%r5514+512], {%r7653, %r7650};
	st.shared.v4.u32 	[%r5512+768], {%r7666, %r7661, %r7641, %r7632};

$L__BB0_808:
	setp.ge.s32 	%p514, %r42, %r2247;
	@%p514 bra 	$L__BB0_812;

	mad.lo.s32 	%r5520, %r2647, 384, %r2250;
	mad.lo.s32 	%r5523, %r2245, %r42, %r5520;
	add.s32 	%r5529, %r5523, %r2248;
	shl.b32 	%r5530, %r5529, 2;
	mov.u32 	%r5531, _ZN6kernel5shmemE;
	add.s32 	%r5532, %r5531, %r5530;
	shl.b32 	%r5533, %r46, 3;
	add.s32 	%r5534, %r5532, %r5533;
	@%p513 bra 	$L__BB0_811;

	add.s32 	%r7404, %r5534, -256;
	st.shared.v2.u32 	[%r7404], {%r7665, %r7660};

$L__BB0_811:
	shl.b32 	%r5553, %r46, 4;
	add.s32 	%r5554, %r5532, %r5553;
	st.shared.v4.u32 	[%r5554], {%r7658, %r7656, %r7624, %r7616};
	add.s32 	%r7405, %r5534, -256;
	st.shared.v2.u32 	[%r7405+768], {%r7625, %r7617};
	st.shared.v4.u32 	[%r5554+768], {%r7890, %r7889, %r7878, %r7877};

$L__BB0_812:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_814;

	mul.lo.s32 	%r5555, %r1777, 320;
	add.s32 	%r5556, %r41, -1;
	mul.lo.s32 	%r5557, %r42, 320;
	mad.lo.s32 	%r5558, %r5555, %r5556, %r5557;
	shl.b32 	%r5559, %r5558, 2;
	mov.u32 	%r5560, _ZN6kernel5shmemE;
	add.s32 	%r5561, %r5560, %r5559;
	add.s32 	%r5562, %r5561, -256;
	shl.b32 	%r5563, %r46, 4;
	add.s32 	%r5564, %r5562, %r5563;
	ld.shared.v4.u32 	{%r7836, %r7834, %r7843, %r7844}, [%r5564+256];
	ld.shared.v4.u32 	{%r7842, %r7839, %r7831, %r7832}, [%r5564+1024];
	shl.b32 	%r5573, %r46, 3;
	add.s32 	%r5574, %r5562, %r5573;
	ld.shared.v2.u32 	{%r7835, %r7833}, [%r5574+768];

$L__BB0_814:
	@%p282 bra 	$L__BB0_817;

	mad.lo.s32 	%r5579, %r1776, 384, -64;
	add.s32 	%r5580, %r42, -1;
	mul.lo.s32 	%r5581, %r5579, %r5580;
	mad.lo.s32 	%r5584, %r2243, %r2242, %r5581;
	mad.lo.s32 	%r5585, %r2647, 384, %r5584;
	shl.b32 	%r5586, %r5585, 2;
	mov.u32 	%r5587, _ZN6kernel5shmemE;
	add.s32 	%r5588, %r5587, %r5586;
	add.s32 	%r5589, %r5588, -256;
	shl.b32 	%r5590, %r46, 4;
	add.s32 	%r5591, %r5589, %r5590;
	ld.shared.v4.u32 	{%r7856, %r7855, %r7851, %r7849}, [%r5591+256];
	ld.shared.v4.u32 	{%r7846, %r7845, %r7848, %r7854}, [%r5591+1024];
	shl.b32 	%r5600, %r46, 3;
	add.s32 	%r5601, %r5589, %r5600;
	ld.shared.v2.u32 	{%r7852, %r7850}, [%r5601+768];
	@%p279 bra 	$L__BB0_817;

	add.s32 	%r7406, %r5601, 768;
	ld.shared.v2.u32 	{%r7837, %r7840}, [%r7406+768];

$L__BB0_817:
	ld.param.u64 	%rd549, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd549;
	mov.u32 	%r7968, %r7802;
	mov.u32 	%r7969, %r7803;
	mov.u32 	%r7971, %r7805;
	mov.u32 	%r7972, %r7806;
	mov.u32 	%r7992, %r7822;
	mov.u32 	%r7996, %r7826;
	mov.u32 	%r7977, %r7809;
	mov.u32 	%r7978, %r7810;
	mov.u32 	%r7979, %r7811;
	mov.u32 	%r7980, %r7812;
	mov.u32 	%r7997, %r7827;
	mov.u32 	%r7998, %r7828;
	@%p284 bra 	$L__BB0_821;

	mad.lo.s32 	%r5607, %r675, %r1779, %r44;
	mad.lo.s32 	%r5608, %r5607, 768, 384;
	mul.lo.s32 	%r5609, %r5608, %r1777;
	mad.lo.s32 	%r5610, %r42, 384, %r5609;
	add.s32 	%r5611, %r5610, -128;
	mul.wide.s32 	%rd550, %r5611, 4;
	add.s64 	%rd551, %rd38, %rd550;
	add.s64 	%rd553, %rd551, %rd303;
	add.s64 	%rd39, %rd553, 512;
	mov.u32 	%r7992, %r7822;
	mov.u32 	%r7996, %r7826;
	mov.u32 	%r7997, %r7827;
	mov.u32 	%r7998, %r7828;
	@%p282 bra 	$L__BB0_820;

	ld.global.v4.u32 	{%r7997, %r7998, %r7992, %r7996}, [%rd39+-512];

$L__BB0_820:
	ld.global.v4.u32 	{%r7978, %r7980, %r7977, %r7979}, [%rd39];
	ld.global.v4.u32 	{%r7972, %r7969, %r7968, %r7971}, [%rd39+512];
	ld.global.v4.u32 	{%r7801, %r7804, %r7808, %r7807}, [%rd39+1024];

$L__BB0_821:
	mov.u32 	%r7983, %r7813;
	mov.u32 	%r7984, %r7814;
	mov.u32 	%r7985, %r7815;
	mov.u32 	%r7986, %r7816;
	mov.u32 	%r7987, %r7817;
	mov.u32 	%r7988, %r7818;
	mov.u32 	%r7989, %r7819;
	mov.u32 	%r7994, %r7824;
	@%p287 bra 	$L__BB0_823;

	mad.lo.s32 	%r5629, %r676, %r1778, %r43;
	mad.lo.s32 	%r5637, %r2647, 384, %r70;
	mad.lo.s32 	%r5638, %r1857, %r69, %r5637;
	mad.lo.s32 	%r5639, %r5629, %r1855, %r5638;
	mul.wide.s32 	%rd554, %r5639, 4;
	add.s64 	%rd555, %rd38, %rd554;
	add.s64 	%rd557, %rd555, %rd303;
	ld.global.v4.u32 	{%r7821, %r7820, %r7825, %r7823}, [%rd557];
	ld.global.v4.u32 	{%r7989, %r7986, %r7983, %r7984}, [%rd557+512];
	ld.global.v4.u32 	{%r7988, %r7985, %r7987, %r7994}, [%rd557+1024];
	ld.global.v4.u32 	{%r7997, %r7998, %r7992, %r7996}, [%rd557+1536];

$L__BB0_823:
	neg.s32 	%r7412, %r1781;
	not.b32 	%r7411, %r44;
	add.s32 	%r7410, %r1779, %r7411;
	mul.lo.s32 	%r7409, %r7410, %r1780;
	not.b32 	%r7408, %r43;
	add.s32 	%r7407, %r1778, %r7408;
	mad.lo.s32 	%r5663, %r7407, %r1780, %r7409;
	add.s32 	%r5664, %r5663, %r1781;
	add.s32 	%r5673, %r5664, %r2653;
	add.s32 	%r1490, %r7688, 1;
	add.s32 	%r5674, %r1490, %r5673;
	div.s32 	%r5675, %r5674, %r1781;
	mad.lo.s32 	%r1491, %r5675, %r7412, %r5674;
	mad.lo.s32 	%r5682, %r5675, %r48, %r2664;
	ld.param.u64 	%rd558, [%rd1+120];
	cvta.to.global.u64 	%rd559, %rd558;
	rem.s32 	%r5683, %r5682, %r1782;
	shr.u32 	%r5684, %r5683, 31;
	add.s32 	%r5685, %r5683, %r5684;
	shr.s32 	%r5686, %r5685, 1;
	mad.lo.s32 	%r5687, %r5686, %r1781, %r1491;
	shl.b32 	%r5688, %r5687, 5;
	add.s32 	%r5689, %r5688, %r46;
	cvt.s64.s32 	%rd40, %r5689;
	mul.wide.s32 	%rd560, %r5689, 4;
	add.s64 	%rd561, %rd559, %rd560;
	ld.global.u32 	%r7690, [%rd561];
	ld.param.u64 	%rd562, [%rd1+128];
	cvta.to.global.u64 	%rd41, %rd562;
	@%p142 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	shl.b64 	%rd565, %rd40, 2;
	add.s64 	%rd566, %rd41, %rd565;
	ld.global.u32 	%r7689, [%rd566];
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	shl.b32 	%r5690, %r1491, 5;
	add.s32 	%r5691, %r5690, %r46;
	mul.wide.s32 	%rd563, %r5691, 16;
	add.s64 	%rd564, %rd41, %rd563;
	ld.global.v4.u32 	{%r5692, %r5693, %r5694, %r5695}, [%rd564];
	mov.u32 	%r7670, %r7674;
	mov.u32 	%r7671, %r7675;
	mov.u32 	%r7672, %r7676;
	mov.u32 	%r7673, %r7677;
	mov.u32 	%r7674, %r7678;
	mov.u32 	%r7675, %r7679;
	mov.u32 	%r7676, %r7680;
	mov.u32 	%r7677, %r7681;
	mov.u32 	%r7678, %r5695;
	mov.u32 	%r7679, %r5694;
	mov.u32 	%r7680, %r5693;
	mov.u32 	%r7681, %r5692;

$L__BB0_826:
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5696, {low,high};}

	// end inline asm
	selp.b32 	%r5698, %r7519, %r5696, %p28;
	// begin inline asm
	{mul.f16x2 %r7667,%r5698,%r7644;
}
	// end inline asm
	selp.b32 	%r5701, %r7523, %r5696, %p28;
	// begin inline asm
	{mul.f16x2 %r7662,%r5701,%r7635;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5703, {low,high};}

	// end inline asm
	selp.b32 	%r5705, %r7519, %r5703, %p28;
	// begin inline asm
	{mul.f16x2 %r7654,%r5705,%r7608;
}
	// end inline asm
	selp.b32 	%r5708, %r7523, %r5703, %p28;
	// begin inline asm
	{mul.f16x2 %r7651,%r5708,%r7603;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5710, {low,high};}

	// end inline asm
	selp.b32 	%r5712, %r7519, %r5710, %p28;
	// begin inline asm
	{mul.f16x2 %r5711,%r5712,%r7600;
}
	// end inline asm
	selp.b32 	%r5715, %r7523, %r5710, %p28;
	// begin inline asm
	{mul.f16x2 %r5714,%r5715,%r7593;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5717, {low,high};}

	// end inline asm
	selp.b32 	%r5719, %r7519, %r5717, %p28;
	// begin inline asm
	{mul.f16x2 %r5718,%r5719,%r7599;
}
	// end inline asm
	selp.b32 	%r5722, %r7523, %r5717, %p28;
	// begin inline asm
	{mul.f16x2 %r5721,%r5722,%r7592;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5724, {low,high};}

	// end inline asm
	selp.b32 	%r5726, %r7519, %r5724, %p28;
	// begin inline asm
	{mul.f16x2 %r7644,%r5726,%r7598;
}
	// end inline asm
	selp.b32 	%r5729, %r7523, %r5724, %p28;
	// begin inline asm
	{mul.f16x2 %r7635,%r5729,%r7591;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5731, {low,high};}

	// end inline asm
	selp.b32 	%r5733, %r7519, %r5731, %p28;
	// begin inline asm
	{mul.f16x2 %r5732,%r5733,%r7586;
}
	// end inline asm
	selp.b32 	%r5736, %r7523, %r5731, %p28;
	// begin inline asm
	{mul.f16x2 %r5735,%r5736,%r7581;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5738, {low,high};}

	// end inline asm
	selp.b32 	%r5740, %r7519, %r5738, %p28;
	// begin inline asm
	{mul.f16x2 %r7627,%r5740,%r7585;
}
	// end inline asm
	selp.b32 	%r5743, %r7523, %r5738, %p28;
	// begin inline asm
	{mul.f16x2 %r7619,%r5743,%r7580;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5745, {low,high};}

	// end inline asm
	selp.b32 	%r5747, %r7519, %r5745, %p28;
	// begin inline asm
	{mul.f16x2 %r5746,%r5747,%r7565;
}
	// end inline asm
	selp.b32 	%r5750, %r7523, %r5745, %p28;
	// begin inline asm
	{mul.f16x2 %r5749,%r5750,%r7558;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5752, {low,high};}

	// end inline asm
	selp.b32 	%r5754, %r7519, %r5752, %p28;
	// begin inline asm
	{mul.f16x2 %r5753,%r5754,%r7819;
}
	// end inline asm
	selp.b32 	%r5757, %r7523, %r5752, %p28;
	// begin inline asm
	{mul.f16x2 %r5756,%r5757,%r7816;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5759, {low,high};}

	// end inline asm
	selp.b32 	%r5761, %r7519, %r5759, %p28;
	// begin inline asm
	{mul.f16x2 %r7608,%r5761,%r7818;
}
	// end inline asm
	selp.b32 	%r5764, %r7523, %r5759, %p28;
	// begin inline asm
	{mul.f16x2 %r7603,%r5764,%r7815;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5766, {low,high};}

	// end inline asm
	selp.b32 	%r5768, %r7519, %r5766, %p28;
	// begin inline asm
	{mul.f16x2 %r5767,%r5768,%r7552;
}
	// end inline asm
	selp.b32 	%r5771, %r7523, %r5766, %p28;
	// begin inline asm
	{mul.f16x2 %r5770,%r5771,%r7545;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5773, {low,high};}

	// end inline asm
	selp.b32 	%r5775, %r7519, %r5773, %p28;
	// begin inline asm
	{mul.f16x2 %r5774,%r5775,%r7551;
}
	// end inline asm
	selp.b32 	%r5778, %r7523, %r5773, %p28;
	// begin inline asm
	{mul.f16x2 %r5777,%r5778,%r7544;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5780, {low,high};}

	// end inline asm
	selp.b32 	%r5782, %r7519, %r5780, %p28;
	// begin inline asm
	{mul.f16x2 %r7598,%r5782,%r7550;
}
	// end inline asm
	selp.b32 	%r5785, %r7523, %r5780, %p28;
	// begin inline asm
	{mul.f16x2 %r7591,%r5785,%r7543;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5787, {low,high};}

	// end inline asm
	selp.b32 	%r5789, %r7519, %r5787, %p28;
	// begin inline asm
	{mul.f16x2 %r5788,%r5789,%r7538;
}
	// end inline asm
	selp.b32 	%r5792, %r7523, %r5787, %p28;
	// begin inline asm
	{mul.f16x2 %r5791,%r5792,%r7530;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5794, {low,high};}

	// end inline asm
	selp.b32 	%r5796, %r7519, %r5794, %p28;
	// begin inline asm
	{mul.f16x2 %r5795,%r5796,%r7537;
}
	// end inline asm
	selp.b32 	%r5799, %r7523, %r5794, %p28;
	// begin inline asm
	{mul.f16x2 %r5798,%r5799,%r7529;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5801, {low,high};}

	// end inline asm
	selp.b32 	%r5803, %r7519, %r5801, %p28;
	// begin inline asm
	{mul.f16x2 %r7585,%r5803,%r7806;
}
	// end inline asm
	selp.b32 	%r5806, %r7523, %r5801, %p28;
	// begin inline asm
	{mul.f16x2 %r7580,%r5806,%r7803;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5808, {low,high};}

	// end inline asm
	selp.b32 	%r5810, %r7519, %r5808, %p28;
	// begin inline asm
	{mul.f16x2 %r5809,%r5810,%r7802;
}
	// end inline asm
	selp.b32 	%r5813, %r7523, %r5808, %p28;
	// begin inline asm
	{mul.f16x2 %r5812,%r5813,%r7805;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5815, {low,high};}

	// end inline asm
	selp.b32 	%r5817, %r7519, %r5815, %p28;
	// begin inline asm
	{mul.f16x2 %r5816,%r5817,%r7813;
}
	// end inline asm
	selp.b32 	%r5820, %r7523, %r5815, %p28;
	// begin inline asm
	{mul.f16x2 %r5819,%r5820,%r7814;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5822, {low,high};}

	// end inline asm
	selp.b32 	%r5824, %r7519, %r5822, %p28;
	// begin inline asm
	{mul.f16x2 %r5823,%r5824,%r7561;
}
	// end inline asm
	selp.b32 	%r5827, %r7523, %r5822, %p28;
	// begin inline asm
	{mul.f16x2 %r5826,%r5827,%r7607;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5829, {low,high};}

	// end inline asm
	selp.b32 	%r5831, %r7519, %r5829, %p28;
	// begin inline asm
	{mul.f16x2 %r5830,%r5831,%r7817;
}
	// end inline asm
	selp.b32 	%r5834, %r7523, %r5829, %p28;
	// begin inline asm
	{mul.f16x2 %r5833,%r5834,%r7824;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5836, {low,high};}

	// end inline asm
	selp.b32 	%r5838, %r7519, %r5836, %p28;
	// begin inline asm
	{mul.f16x2 %r7550,%r5838,%r7822;
}
	// end inline asm
	selp.b32 	%r5841, %r7523, %r5836, %p28;
	// begin inline asm
	{mul.f16x2 %r7543,%r5841,%r7826;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5843, {low,high};}

	// end inline asm
	selp.b32 	%r5845, %r7519, %r5843, %p28;
	// begin inline asm
	{mul.f16x2 %r5844,%r5845,%r7809;
}
	// end inline asm
	selp.b32 	%r5848, %r7523, %r5843, %p28;
	// begin inline asm
	{mul.f16x2 %r5847,%r5848,%r7811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5850, {low,high};}

	// end inline asm
	selp.b32 	%r5852, %r7519, %r5850, %p28;
	// begin inline asm
	{mul.f16x2 %r5851,%r5852,%r7810;
}
	// end inline asm
	selp.b32 	%r5855, %r7523, %r5850, %p28;
	// begin inline asm
	{mul.f16x2 %r5854,%r5855,%r7812;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5857, {low,high};}

	// end inline asm
	selp.b32 	%r5859, %r7519, %r5857, %p28;
	// begin inline asm
	{mul.f16x2 %r5858,%r5859,%r7827;
}
	// end inline asm
	selp.b32 	%r5862, %r7523, %r5857, %p28;
	// begin inline asm
	{mul.f16x2 %r5861,%r5862,%r7828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5864,%r7668,%r3765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5867,%r3876,%r3722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5870,%r5864,%r5867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5873,%r7433,%r5870;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5876,%r7667,%r5873;
}
	// end inline asm
	@%p28 bra 	$L__BB0_828;

	mov.u32 	%r7667, %r5876;

$L__BB0_828:
	// begin inline asm
	{sub.f16x2 %r5879,%r7663,%r3831;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5882,%r3910,%r3799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r5879,%r5882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5888,%r7433,%r5885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5891,%r7662,%r5888;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;

	mov.u32 	%r7662, %r5891;

$L__BB0_830:
	// begin inline asm
	{sub.f16x2 %r5894,%r7655,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5897,%r7669,%r3955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5900,%r5894,%r5897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5903,%r7433,%r5900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5906,%r7654,%r5903;
}
	// end inline asm
	@%p28 bra 	$L__BB0_832;

	mov.u32 	%r7654, %r5906;

$L__BB0_832:
	// begin inline asm
	{sub.f16x2 %r5909,%r7652,%r4064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5912,%r7664,%r4032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5915,%r5909,%r5912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5918,%r7433,%r5915;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5921,%r7651,%r5918;
}
	// end inline asm
	@%p28 bra 	$L__BB0_834;

	mov.u32 	%r7651, %r5921;

$L__BB0_834:
	// begin inline asm
	{sub.f16x2 %r5924,%r7663,%r7668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5927,%r7518,%r5924;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r8016,%r5711;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r8016,%r7519,%r5924;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r5938, 31;
	mov.u32 	%r5940, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5936,%r8016,%r5938,%r2350,%r5940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5941,%r5927,%r5936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5944,%r7756,%r7762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r5944,%r5941;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5950,%r7433,%r5947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r5711,%r5950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5956,%r7664,%r7669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5959,%r7518,%r5956;
}
	// end inline asm
	mov.u32 	%r8017, %r5718;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r8017,%r7519,%r5956;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5968,%r8017,%r5938,%r2350,%r5940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5973,%r5959,%r5968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5976,%r7744,%r7762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5979,%r5973,%r5976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5982,%r7433,%r5979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r5718,%r5982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5988,%r7648,%r7668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5991,%r7659,%r7669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5994,%r5988,%r5991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5997,%r7433,%r5994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6000,%r7644,%r5997;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;

	mov.u32 	%r7644, %r6000;

$L__BB0_841:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7668;
 mov.b16 %rs65, high;}
	// end inline asm
	mov.u32 	%r6011, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6007,%r7668,%r437,%r2350,%r6011;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6007;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6013, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6014,%r6013,%r7663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6017,%r7522,%r6014;
}
	// end inline asm
	@%p28 bra 	$L__BB0_843;
	bra.uni 	$L__BB0_842;

$L__BB0_843:
	// begin inline asm
	{neg.f16x2 %r8019,%r5714;
}
	// end inline asm
	bra.uni 	$L__BB0_844;

$L__BB0_842:
	// begin inline asm
	{mul.f16x2 %r8019,%r7523,%r6014;
}
	// end inline asm

$L__BB0_844:
	mov.u32 	%r6030, 31;
	mov.u32 	%r6054, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6028,%r8019,%r6030,%r2350,%r6054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6033,%r6017,%r6028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r7753,%r7759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6039,%r6036,%r6033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6042,%r7433,%r6039;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r5714,%r6042;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7669;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6050,%r7669,%r437,%r2350,%r6054;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6050;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6056, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6057,%r6056,%r7664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6060,%r7522,%r6057;
}
	// end inline asm
	mov.u32 	%r8020, %r5721;
	@%p28 bra 	$L__BB0_846;

	// begin inline asm
	{mul.f16x2 %r8020,%r7523,%r6057;
}
	// end inline asm

$L__BB0_846:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6071,%r8020,%r6030,%r2350,%r6054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6076,%r6060,%r6071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6079,%r7741,%r7759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6082,%r6076,%r6079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6085,%r7433,%r6082;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r5721,%r6085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r7639,%r7663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6094,%r7657,%r7664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6097,%r6091,%r6094;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6100,%r7433,%r6097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6103,%r7635,%r6100;
}
	// end inline asm
	@%p28 bra 	$L__BB0_848;

	mov.u32 	%r7635, %r6103;

$L__BB0_848:
	// begin inline asm
	{sub.f16x2 %r6108,%r7657,%r7659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6111,%r7518,%r6108;
}
	// end inline asm
	mov.u32 	%r8022, %r5732;
	@%p28 bra 	$L__BB0_850;

	// begin inline asm
	{mul.f16x2 %r8022,%r7519,%r6108;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r6120, 31;
	mov.u32 	%r6122, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6118,%r8022,%r6120,%r2350,%r6122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6123,%r6111,%r6118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6126,%r7738,%r7756;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6129,%r6123,%r6126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6132,%r7433,%r6129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7628,%r5732,%r6132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r7630,%r4336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6141,%r4477,%r7659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6144,%r6138,%r6141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6147,%r7433,%r6144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6150,%r7627,%r6147;
}
	// end inline asm
	@%p28 bra 	$L__BB0_852;

	mov.u32 	%r7627, %r6150;

$L__BB0_852:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7659;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6157,%r7659,%r437,%r2350,%r6122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6157;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6163, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6164,%r6163,%r7657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6167,%r7522,%r6164;
}
	// end inline asm
	mov.u32 	%r8024, %r5735;
	@%p28 bra 	$L__BB0_854;

	// begin inline asm
	{mul.f16x2 %r8024,%r7523,%r6164;
}
	// end inline asm

$L__BB0_854:
	mov.u32 	%r6178, 31;
	mov.u32 	%r6180, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6176,%r8024,%r6178,%r2350,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6181,%r6167,%r6176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r7735,%r7753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r6181,%r6184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r7433,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r5735,%r6190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6196,%r7622,%r4417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6199,%r4511,%r7657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r6196,%r6199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6205,%r7433,%r6202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6208,%r7619,%r6205;
}
	// end inline asm
	@%p28 bra 	$L__BB0_856;

	mov.u32 	%r7619, %r6208;

$L__BB0_856:
	// begin inline asm
	{sub.f16x2 %r6213,%r7652,%r7655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6216,%r7518,%r6213;
}
	// end inline asm
	@%p28 bra 	$L__BB0_858;
	bra.uni 	$L__BB0_857;

$L__BB0_858:
	// begin inline asm
	{neg.f16x2 %r8026,%r5746;
}
	// end inline asm
	bra.uni 	$L__BB0_859;

$L__BB0_857:
	// begin inline asm
	{mul.f16x2 %r8026,%r7519,%r6213;
}
	// end inline asm

$L__BB0_859:
	mov.u32 	%r6227, 31;
	mov.u32 	%r6229, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6225,%r8026,%r6227,%r2350,%r6229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6230,%r6216,%r6225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6233,%r7744,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r6233,%r6230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6239,%r7433,%r6236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7610,%r5746,%r6239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6245,%r7855,%r7856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6248,%r7518,%r6245;
}
	// end inline asm
	mov.u32 	%r8027, %r5753;
	@%p28 bra 	$L__BB0_861;

	// begin inline asm
	{mul.f16x2 %r8027,%r7519,%r6245;
}
	// end inline asm

$L__BB0_861:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6257,%r8027,%r6227,%r2350,%r6229;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6262,%r6248,%r6257;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6265,%r7851,%r7749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6268,%r6262,%r6265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6271,%r7433,%r6268;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7609,%r5753,%r6271;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r7852,%r7655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6280,%r7649,%r7856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6283,%r6277,%r6280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6286,%r7433,%r6283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6289,%r7608,%r6286;
}
	// end inline asm
	@%p28 bra 	$L__BB0_863;

	mov.u32 	%r7608, %r6289;

$L__BB0_863:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7655;
 mov.b16 %rs77, high;}
	// end inline asm
	mov.u32 	%r6300, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6296,%r7655,%r437,%r2350,%r6300;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6296;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6302, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r6302,%r7652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6306,%r7522,%r6303;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r8029,%r5749;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r8029,%r7523,%r6303;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r6319, 31;
	mov.u32 	%r6343, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6317,%r8029,%r6319,%r2350,%r6343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6322,%r6306,%r6317;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6325,%r7741,%r7747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6328,%r6325,%r6322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6331,%r7433,%r6328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7605,%r5749,%r6331;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7856;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6339,%r7856,%r437,%r2350,%r6343;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6339;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6345, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6346,%r6345,%r7855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6349,%r7522,%r6346;
}
	// end inline asm
	mov.u32 	%r8030, %r5756;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r8030,%r7523,%r6346;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6360,%r8030,%r6319,%r2350,%r6343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6365,%r6349,%r6360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6368,%r7849,%r7747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6371,%r6365,%r6368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6374,%r7433,%r6371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r5756,%r6374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6380,%r7850,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6383,%r7640,%r7855;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6386,%r6380,%r6383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6389,%r7433,%r6386;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6392,%r7603,%r6389;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;

	mov.u32 	%r7603, %r6392;

$L__BB0_870:
	// begin inline asm
	{sub.f16x2 %r6397,%r7639,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6400,%r7518,%r6397;
}
	// end inline asm
	@%p28 bra 	$L__BB0_872;
	bra.uni 	$L__BB0_871;

$L__BB0_872:
	// begin inline asm
	{neg.f16x2 %r8032,%r5767;
}
	// end inline asm
	bra.uni 	$L__BB0_873;

$L__BB0_871:
	// begin inline asm
	{mul.f16x2 %r8032,%r7519,%r6397;
}
	// end inline asm

$L__BB0_873:
	mov.u32 	%r6411, 31;
	mov.u32 	%r6413, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6409,%r8032,%r6411,%r2350,%r6413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6414,%r6400,%r6409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6417,%r7738,%r7744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6420,%r6417,%r6414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6423,%r7433,%r6420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7600,%r5767,%r6423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6429,%r7640,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6432,%r7518,%r6429;
}
	// end inline asm
	mov.u32 	%r8033, %r5774;
	@%p28 bra 	$L__BB0_875;

	// begin inline asm
	{mul.f16x2 %r8033,%r7519,%r6429;
}
	// end inline asm

$L__BB0_875:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6441,%r8033,%r6411,%r2350,%r6413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6446,%r6432,%r6441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6449,%r7731,%r7744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6452,%r6446,%r6449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6455,%r7433,%r6452;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r5774,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6461,%r7602,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6464,%r7631,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6467,%r6461,%r6464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6470,%r7433,%r6467;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6473,%r7598,%r6470;
}
	// end inline asm
	@%p28 bra 	$L__BB0_877;

	mov.u32 	%r7598, %r6473;

$L__BB0_877:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7648;
 mov.b16 %rs85, high;}
	// end inline asm
	mov.u32 	%r6484, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6480,%r7648,%r437,%r2350,%r6484;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6480;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6486, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r6486,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6490,%r7522,%r6487;
}
	// end inline asm
	@%p28 bra 	$L__BB0_879;
	bra.uni 	$L__BB0_878;

$L__BB0_879:
	// begin inline asm
	{neg.f16x2 %r8035,%r5770;
}
	// end inline asm
	bra.uni 	$L__BB0_880;

$L__BB0_878:
	// begin inline asm
	{mul.f16x2 %r8035,%r7523,%r6487;
}
	// end inline asm

$L__BB0_880:
	mov.u32 	%r6503, 31;
	mov.u32 	%r6527, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6501,%r8035,%r6503,%r2350,%r6527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6506,%r6490,%r6501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6509,%r7735,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6512,%r6509,%r6506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6515,%r7433,%r6512;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7593,%r5770,%r6515;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6523,%r7649,%r437,%r2350,%r6527;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6523;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6529, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6530,%r6529,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6533,%r7522,%r6530;
}
	// end inline asm
	mov.u32 	%r8036, %r5777;
	@%p28 bra 	$L__BB0_882;

	// begin inline asm
	{mul.f16x2 %r8036,%r7523,%r6530;
}
	// end inline asm

$L__BB0_882:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6544,%r8036,%r6503,%r2350,%r6527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6549,%r6533,%r6544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6552,%r7729,%r7741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6555,%r6549,%r6552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6558,%r7433,%r6555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r5777,%r6558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6564,%r7595,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6567,%r7623,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6570,%r6564,%r6567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6573,%r7433,%r6570;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6576,%r7591,%r6573;
}
	// end inline asm
	@%p28 bra 	$L__BB0_884;

	mov.u32 	%r7591, %r6576;

$L__BB0_884:
	// begin inline asm
	{sub.f16x2 %r6581,%r7622,%r7630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6584,%r7518,%r6581;
}
	// end inline asm
	@%p28 bra 	$L__BB0_886;
	bra.uni 	$L__BB0_885;

$L__BB0_886:
	// begin inline asm
	{neg.f16x2 %r8038,%r5788;
}
	// end inline asm
	bra.uni 	$L__BB0_887;

$L__BB0_885:
	// begin inline asm
	{mul.f16x2 %r8038,%r7519,%r6581;
}
	// end inline asm

$L__BB0_887:
	mov.u32 	%r6595, 31;
	mov.u32 	%r6597, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6593,%r8038,%r6595,%r2350,%r6597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6598,%r6584,%r6593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6601,%r7734,%r7738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6604,%r6601,%r6598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6607,%r7433,%r6604;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r5788,%r6607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6613,%r7623,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6616,%r7518,%r6613;
}
	// end inline asm
	mov.u32 	%r8039, %r5795;
	@%p28 bra 	$L__BB0_889;

	// begin inline asm
	{mul.f16x2 %r8039,%r7519,%r6613;
}
	// end inline asm

$L__BB0_889:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6625,%r8039,%r6595,%r2350,%r6597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6630,%r6616,%r6625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6633,%r7728,%r7738;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6636,%r6630,%r6633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6639,%r7433,%r6636;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7586,%r5795,%r6639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6645,%r7835,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6648,%r7842,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6651,%r6645,%r6648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6654,%r7433,%r6651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6657,%r7585,%r6654;
}
	// end inline asm
	@%p28 bra 	$L__BB0_891;

	mov.u32 	%r7585, %r6657;

$L__BB0_891:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7630;
 mov.b16 %rs93, high;}
	// end inline asm
	mov.u32 	%r6668, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r6664,%r7630,%r437,%r2350,%r6668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6664;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6670, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6671,%r6670,%r7622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6674,%r7522,%r6671;
}
	// end inline asm
	@%p28 bra 	$L__BB0_893;
	bra.uni 	$L__BB0_892;

$L__BB0_893:
	// begin inline asm
	{neg.f16x2 %r8041,%r5791;
}
	// end inline asm
	bra.uni 	$L__BB0_894;

$L__BB0_892:
	// begin inline asm
	{mul.f16x2 %r8041,%r7523,%r6671;
}
	// end inline asm

$L__BB0_894:
	mov.u32 	%r6687, 31;
	mov.u32 	%r6711, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6685,%r8041,%r6687,%r2350,%r6711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6690,%r6674,%r6685;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6693,%r7733,%r7735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6696,%r6693,%r6690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6699,%r7433,%r6696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7582,%r5791,%r6699;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7631;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6707,%r7631,%r437,%r2350,%r6711;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6707;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6713, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6714,%r6713,%r7623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6717,%r7522,%r6714;
}
	// end inline asm
	mov.u32 	%r8042, %r5798;
	@%p28 bra 	$L__BB0_896;

	// begin inline asm
	{mul.f16x2 %r8042,%r7523,%r6714;
}
	// end inline asm

$L__BB0_896:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6728,%r8042,%r6687,%r2350,%r6711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6733,%r6717,%r6728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6736,%r7727,%r7735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6739,%r6733,%r6736;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6742,%r7433,%r6739;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7581,%r5798,%r6742;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6748,%r7833,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6751,%r7839,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6754,%r6748,%r6751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6757,%r7433,%r6754;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6760,%r7580,%r6757;
}
	// end inline asm
	@%p28 bra 	$L__BB0_898;

	mov.u32 	%r7580, %r6760;

$L__BB0_898:
	// begin inline asm
	{sub.f16x2 %r6765,%r7839,%r7842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6768,%r7518,%r6765;
}
	// end inline asm
	mov.u32 	%r8044, %r5809;
	@%p28 bra 	$L__BB0_900;

	// begin inline asm
	{mul.f16x2 %r8044,%r7519,%r6765;
}
	// end inline asm

$L__BB0_900:
	mov.u32 	%r6777, 31;
	mov.u32 	%r6801, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6775,%r8044,%r6777,%r2350,%r6801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6780,%r6768,%r6775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6783,%r7831,%r7734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6786,%r6780,%r6783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6789,%r7433,%r6786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r5809,%r6789;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7842;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6797,%r7842,%r437,%r2350,%r6801;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6797;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6803, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6804,%r6803,%r7839;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6807,%r7522,%r6804;
}
	// end inline asm
	mov.u32 	%r8045, %r5812;
	@%p28 bra 	$L__BB0_902;

	// begin inline asm
	{mul.f16x2 %r8045,%r7523,%r6804;
}
	// end inline asm

$L__BB0_902:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6818,%r8045,%r6777,%r2350,%r6801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6823,%r6807,%r6818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6826,%r7832,%r7733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6829,%r6823,%r6826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6832,%r7433,%r6829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r5812,%r6832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6838,%r7850,%r7852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6841,%r7518,%r6838;
}
	// end inline asm
	@%p28 bra 	$L__BB0_904;
	bra.uni 	$L__BB0_903;

$L__BB0_904:
	// begin inline asm
	{neg.f16x2 %r8046,%r5816;
}
	// end inline asm
	bra.uni 	$L__BB0_905;

$L__BB0_903:
	// begin inline asm
	{mul.f16x2 %r8046,%r7519,%r6838;
}
	// end inline asm

$L__BB0_905:
	mov.u32 	%r6854, 31;
	mov.u32 	%r6878, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6852,%r8046,%r6854,%r2350,%r6878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6857,%r6841,%r6852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6860,%r7731,%r7851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6863,%r6860,%r6857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6866,%r7433,%r6863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r5816,%r6866;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7852;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6874,%r7852,%r437,%r2350,%r6878;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6874;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6880, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6881,%r6880,%r7850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6884,%r7522,%r6881;
}
	// end inline asm
	@%p28 bra 	$L__BB0_907;
	bra.uni 	$L__BB0_906;

$L__BB0_907:
	// begin inline asm
	{neg.f16x2 %r8047,%r5819;
}
	// end inline asm
	bra.uni 	$L__BB0_908;

$L__BB0_906:
	// begin inline asm
	{mul.f16x2 %r8047,%r7523,%r6881;
}
	// end inline asm

$L__BB0_908:
	mov.u32 	%r6899, 31;
	mov.u32 	%r6901, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6897,%r8047,%r6899,%r2350,%r6901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6902,%r6884,%r6897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6905,%r7729,%r7849;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6908,%r6905,%r6902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6911,%r7433,%r6908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7558,%r5819,%r6911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6917,%r7595,%r7602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6920,%r7518,%r6917;
}
	// end inline asm
	@%p28 bra 	$L__BB0_910;
	bra.uni 	$L__BB0_909;

$L__BB0_910:
	// begin inline asm
	{neg.f16x2 %r8048,%r5823;
}
	// end inline asm
	bra.uni 	$L__BB0_911;

$L__BB0_909:
	// begin inline asm
	{mul.f16x2 %r8048,%r7519,%r6917;
}
	// end inline asm

$L__BB0_911:
	mov.u32 	%r6933, 31;
	mov.u32 	%r6935, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6931,%r8048,%r6933,%r2350,%r6935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6936,%r6920,%r6931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6939,%r7728,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6942,%r6939,%r6936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6945,%r7433,%r6942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r5823,%r6945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6951,%r7845,%r7846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6954,%r7518,%r6951;
}
	// end inline asm
	mov.u32 	%r8049, %r5830;
	@%p28 bra 	$L__BB0_913;

	// begin inline asm
	{mul.f16x2 %r8049,%r7519,%r6951;
}
	// end inline asm

$L__BB0_913:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6963,%r8049,%r6933,%r2350,%r6935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6968,%r6954,%r6963;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6971,%r7848,%r7731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6974,%r6968,%r6971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6977,%r7433,%r6974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r5830,%r6977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6983,%r7837,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6986,%r7836,%r7846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6989,%r6983,%r6986;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6992,%r7433,%r6989;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6995,%r7550,%r6992;
}
	// end inline asm
	@%p28 bra 	$L__BB0_915;

	mov.u32 	%r7550, %r6995;

$L__BB0_915:
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7602;
 mov.b16 %rs109, high;}
	// end inline asm
	mov.u32 	%r7006, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r7002,%r7602,%r437,%r2350,%r7006;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7002;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7008, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7009,%r7008,%r7595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7012,%r7522,%r7009;
}
	// end inline asm
	@%p28 bra 	$L__BB0_917;
	bra.uni 	$L__BB0_916;

$L__BB0_917:
	// begin inline asm
	{neg.f16x2 %r8051,%r5826;
}
	// end inline asm
	bra.uni 	$L__BB0_918;

$L__BB0_916:
	// begin inline asm
	{mul.f16x2 %r8051,%r7523,%r7009;
}
	// end inline asm

$L__BB0_918:
	mov.u32 	%r7025, 31;
	mov.u32 	%r7049, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7023,%r8051,%r7025,%r2350,%r7049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7028,%r7012,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7031,%r7727,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7034,%r7031,%r7028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7037,%r7433,%r7034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r5826,%r7037;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7846;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7045,%r7846,%r437,%r2350,%r7049;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7045;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7051, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7052,%r7051,%r7845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7055,%r7522,%r7052;
}
	// end inline asm
	mov.u32 	%r8052, %r5833;
	@%p28 bra 	$L__BB0_920;

	// begin inline asm
	{mul.f16x2 %r8052,%r7523,%r7052;
}
	// end inline asm

$L__BB0_920:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7066,%r8052,%r7025,%r2350,%r7049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7071,%r7055,%r7066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7074,%r7854,%r7729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7077,%r7071,%r7074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7080,%r7433,%r7077;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r5833,%r7080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7086,%r7840,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7089,%r7834,%r7845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7092,%r7086,%r7089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7095,%r7433,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r7543,%r7095;
}
	// end inline asm
	@%p28 bra 	$L__BB0_922;

	mov.u32 	%r7543, %r7098;

$L__BB0_922:
	// begin inline asm
	{sub.f16x2 %r7103,%r7833,%r7835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7106,%r7518,%r7103;
}
	// end inline asm
	@%p28 bra 	$L__BB0_924;
	bra.uni 	$L__BB0_923;

$L__BB0_924:
	// begin inline asm
	{neg.f16x2 %r8054,%r5844;
}
	// end inline asm
	bra.uni 	$L__BB0_925;

$L__BB0_923:
	// begin inline asm
	{mul.f16x2 %r8054,%r7519,%r7103;
}
	// end inline asm

$L__BB0_925:
	mov.u32 	%r7117, 31;
	mov.u32 	%r7119, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7115,%r8054,%r7117,%r2350,%r7119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7120,%r7106,%r7115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7123,%r7831,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7126,%r7123,%r7120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7129,%r7433,%r7126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r5844,%r7129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7135,%r7834,%r7836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7138,%r7518,%r7135;
}
	// end inline asm
	mov.u32 	%r8055, %r5851;
	@%p28 bra 	$L__BB0_927;

	// begin inline asm
	{mul.f16x2 %r8055,%r7519,%r7135;
}
	// end inline asm

$L__BB0_927:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7147,%r8055,%r7117,%r2350,%r7119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r7138,%r7147;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7155,%r7843,%r7728;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7158,%r7152,%r7155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7161,%r7433,%r7158;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7537,%r5851,%r7161;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7835;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7169,%r7835,%r437,%r2350,%r7119;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7169;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7175, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7176,%r7175,%r7833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7179,%r7522,%r7176;
}
	// end inline asm
	@%p28 bra 	$L__BB0_929;
	bra.uni 	$L__BB0_928;

$L__BB0_929:
	// begin inline asm
	{neg.f16x2 %r8056,%r5847;
}
	// end inline asm
	bra.uni 	$L__BB0_930;

$L__BB0_928:
	// begin inline asm
	{mul.f16x2 %r8056,%r7523,%r7176;
}
	// end inline asm

$L__BB0_930:
	mov.u32 	%r7194, 31;
	mov.u32 	%r7218, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7192,%r8056,%r7194,%r2350,%r7218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7197,%r7179,%r7192;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7200,%r7832,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7203,%r7200,%r7197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7206,%r7433,%r7203;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r5847,%r7206;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7836;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7214,%r7836,%r437,%r2350,%r7218;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7214;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7220, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7221,%r7220,%r7834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7224,%r7522,%r7221;
}
	// end inline asm
	mov.u32 	%r8057, %r5854;
	@%p28 bra 	$L__BB0_932;

	// begin inline asm
	{mul.f16x2 %r8057,%r7523,%r7221;
}
	// end inline asm

$L__BB0_932:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7235,%r8057,%r7194,%r2350,%r7218;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7240,%r7224,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7243,%r7844,%r7727;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7246,%r7240,%r7243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7249,%r7433,%r7246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r5854,%r7249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7255,%r7840,%r7837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7258,%r7518,%r7255;
}
	// end inline asm
	@%p28 bra 	$L__BB0_934;
	bra.uni 	$L__BB0_933;

$L__BB0_934:
	// begin inline asm
	{neg.f16x2 %r8058,%r5858;
}
	// end inline asm
	bra.uni 	$L__BB0_935;

$L__BB0_933:
	// begin inline asm
	{mul.f16x2 %r8058,%r7519,%r7255;
}
	// end inline asm

$L__BB0_935:
	mov.u32 	%r7271, 31;
	mov.u32 	%r7295, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7269,%r8058,%r7271,%r2350,%r7295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7274,%r7258,%r7269;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7277,%r7843,%r7848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7280,%r7277,%r7274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7283,%r7433,%r7280;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r5858,%r7283;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7837;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7291,%r7837,%r437,%r2350,%r7295;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7291;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7297, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7298,%r7297,%r7840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7301,%r7522,%r7298;
}
	// end inline asm
	@%p28 bra 	$L__BB0_937;
	bra.uni 	$L__BB0_936;

$L__BB0_937:
	// begin inline asm
	{neg.f16x2 %r8059,%r5861;
}
	// end inline asm
	bra.uni 	$L__BB0_938;

$L__BB0_936:
	// begin inline asm
	{mul.f16x2 %r8059,%r7523,%r7298;
}
	// end inline asm

$L__BB0_938:
	mov.u32 	%r7316, 31;
	mov.u32 	%r7318, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7314,%r8059,%r7316,%r2350,%r7318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7319,%r7301,%r7314;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7322,%r7844,%r7854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7325,%r7322,%r7319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7328,%r7433,%r7325;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7607,%r5861,%r7328;
}
	// end inline asm
	bar.sync 	0;
	@%p506 bra 	$L__BB0_941;

	setp.ne.s32 	%p585, %r42, %r2247;
	shl.b32 	%r7337, %r42, 8;
	shl.b32 	%r7341, %r1777, 8;
	or.b32  	%r7342, %r7341, 128;
	mad.lo.s32 	%r7343, %r7342, %r41, %r2250;
	add.s32 	%r7344, %r7343, %r7337;
	shl.b32 	%r7345, %r7344, 2;
	mov.u32 	%r7346, _ZN6kernel5shmemE;
	add.s32 	%r7347, %r7346, %r7345;
	shl.b32 	%r7348, %r46, 4;
	add.s32 	%r1773, %r7347, %r7348;
	st.shared.v4.u32 	[%r1773], {%r7609, %r7604, %r7610, %r7605};
	st.shared.v4.u32 	[%r1773+512], {%r7654, %r7651, %r7645, %r7636};
	@%p585 bra 	$L__BB0_941;

	st.shared.v4.u32 	[%r1773+1024], {%r7646, %r7637, %r7667, %r7662};

$L__BB0_941:
	setp.eq.s32 	%p583, %r42, %r2247;
	@%p583 bra 	$L__BB0_943;

	mul.lo.s32 	%r7352, %r2647, 384;
	mad.lo.s32 	%r7353, %r70, %r42, %r7352;
	mad.lo.s32 	%r7356, %r2245, %r2247, %r7353;
	mad.lo.s32 	%r7359, %r2243, %r2242, %r7356;
	shl.b32 	%r7360, %r7359, 2;
	mov.u32 	%r7361, _ZN6kernel5shmemE;
	add.s32 	%r7362, %r7361, %r7360;
	shl.b32 	%r7363, %r46, 4;
	add.s32 	%r7364, %r7362, %r7363;
	st.shared.v4.u32 	[%r7364], {%r7646, %r7637, %r7667, %r7662};
	st.shared.v4.u32 	[%r7364+512], {%r7628, %r7620, %r7587, %r7582};
	st.shared.v4.u32 	[%r7364+1024], {%r7627, %r7619, %r7576, %r7572};

$L__BB0_943:
	setp.ne.s32 	%p584, %r41, %r2242;
	ld.param.u64 	%rd567, [%rd1+104];
	cvta.to.global.u64 	%rd42, %rd567;
	@%p584 bra 	$L__BB0_945;

	mad.lo.s32 	%r7366, %r675, %r1779, %r44;
	mul.lo.s32 	%r7367, %r7366, %r1777;
	mul.lo.s32 	%r7368, %r7367, 768;
	add.s32 	%r7369, %r1777, %r42;
	mad.lo.s32 	%r7370, %r7369, 384, %r7368;
	add.s32 	%r7371, %r7370, -128;
	mul.wide.s32 	%rd568, %r7371, 4;
	add.s64 	%rd569, %rd42, %rd568;
	add.s64 	%rd571, %rd569, %rd303;
	st.global.v4.u32 	[%rd571+512], {%r7609, %r7604, %r7610, %r7605};
	st.global.v4.u32 	[%rd571+1024], {%r7654, %r7651, %r7645, %r7636};
	st.global.v4.u32 	[%rd571+1536], {%r7646, %r7637, %r7667, %r7662};

$L__BB0_945:
	setp.ne.s32 	%p586, %r42, %r2247;
	@%p586 bra 	$L__BB0_948;

	mad.lo.s32 	%r7373, %r676, %r1778, %r43;
	mad.lo.s32 	%r7381, %r2647, 384, %r70;
	mad.lo.s32 	%r7382, %r1857, %r69, %r7381;
	mad.lo.s32 	%r7383, %r7373, %r1855, %r7382;
	mul.wide.s32 	%rd572, %r7383, 4;
	add.s64 	%rd573, %rd42, %rd572;
	add.s64 	%rd43, %rd573, %rd303;
	st.global.v4.u32 	[%rd43], {%r7646, %r7637, %r7667, %r7662};
	st.global.v4.u32 	[%rd43+512], {%r7628, %r7620, %r7587, %r7582};
	st.global.v4.u32 	[%rd43+1024], {%r7627, %r7619, %r7576, %r7572};
	@%p284 bra 	$L__BB0_948;

	st.global.v4.u32 	[%rd43+1536], {%r7801, %r7804, %r7808, %r7807};

$L__BB0_948:
	rem.s32 	%r7384, %r7688, %r1780;
	setp.eq.s32 	%p577, %r7384, 0;
	@%p577 bra 	$L__BB0_950;

	bar.sync 	0;
	bra.uni 	$L__BB0_957;

$L__BB0_950:
	@%p218 bra 	$L__BB0_952;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_952:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_956;

	membar.gl;
	add.s64 	%rd575, %rd27, 4;
	setp.eq.s32 	%p580, %r431, %r432;
	mov.u32 	%r7397, -2147483647;
	sub.s32 	%r7398, %r7397, %r430;
	selp.b32 	%r7399, %r7398, 1, %p580;
	atom.add.u32 	%r1774, [%rd575], %r7399;

$L__BB0_954:
	ld.volatile.u32 	%r7400, [%rd27+4];
	xor.b32  	%r7401, %r7400, %r1774;
	setp.gt.s32 	%p581, %r7401, -1;
	@%p581 bra 	$L__BB0_954;

	membar.gl;

$L__BB0_956:
	bar.sync 	0;

$L__BB0_957:
	add.s32 	%r7688, %r7688, 1;
	setp.lt.s32 	%p582, %r7688, %r49;
	mov.u32 	%r7802, %r7968;
	mov.u32 	%r7803, %r7969;
	mov.u32 	%r7805, %r7971;
	mov.u32 	%r7806, %r7972;
	mov.u32 	%r7813, %r7983;
	mov.u32 	%r7814, %r7984;
	mov.u32 	%r7815, %r7985;
	mov.u32 	%r7816, %r7986;
	mov.u32 	%r7817, %r7987;
	mov.u32 	%r7818, %r7988;
	mov.u32 	%r7819, %r7989;
	mov.u32 	%r7822, %r7992;
	mov.u32 	%r7824, %r7994;
	mov.u32 	%r7826, %r7996;
	mov.u32 	%r7616, %r498;
	mov.u32 	%r7617, %r7879;
	mov.u32 	%r7624, %r505;
	mov.u32 	%r7625, %r7881;
	mov.u32 	%r7632, %r512;
	mov.u32 	%r7641, %r520;
	mov.u32 	%r7650, %r7886;
	mov.u32 	%r7653, %r7888;
	mov.u32 	%r7656, %r550;
	mov.u32 	%r7658, %r558;
	mov.u32 	%r7660, %r565;
	mov.u32 	%r7661, %r566;
	mov.u32 	%r7665, %r574;
	mov.u32 	%r7666, %r575;
	mov.u32 	%r7809, %r7977;
	mov.u32 	%r7810, %r7978;
	mov.u32 	%r7811, %r7979;
	mov.u32 	%r7812, %r7980;
	mov.u32 	%r7827, %r7997;
	mov.u32 	%r7828, %r7998;
	@%p582 bra 	$L__BB0_332;

$L__BB0_958:
	ret;

}

