//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<469>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7435>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<556>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1550, %r1551}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1552, %r1553}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1554, %r1555}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1556, %r1557}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1558, %r1559}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1560, %r1561}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1562, %r1563}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1564, %r1565}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1566, %r1567}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1568, %r1569}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r31, %tid.y;
	mov.u32 	%r32, %tid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %ctaid.z;
	mov.u32 	%r1570, 32;
	sub.s32 	%r35, %r1570, %r1557;
	mov.u32 	%r36, %tid.x;
	setp.le.s32 	%p15, %r35, %r36;
	add.s32 	%r1571, %r1563, -1;
	mad.lo.s32 	%r1572, %r1571, %r1562, %r1561;
	add.s32 	%r1573, %r1556, %r1555;
	add.s32 	%r1574, %r1573, %r1572;
	add.s32 	%r1575, %r1574, 1;
	mul.lo.s32 	%r1576, %r1550, %r1552;
	shl.b32 	%r37, %r1576, 1;
	shl.b32 	%r1577, %r1576, 2;
	div.s32 	%r1578, %r1575, %r1577;
	add.s32 	%r1579, %r1578, 1;
	mul.lo.s32 	%r1580, %r1579, %r1556;
	mul.lo.s32 	%r1581, %r1551, %r1553;
	shl.b32 	%r38, %r1581, 1;
	div.s32 	%r1582, %r1580, %r38;
	add.s32 	%r1583, %r1582, 1;
	mul.lo.s32 	%r39, %r1583, %r1555;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6898, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6898, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1586, %r1552, %r34, %r33;
	mad.lo.s32 	%r1587, %r1586, %r1551, %r32;
	mad.lo.s32 	%r1588, %r1587, %r1550, %r31;
	shl.b32 	%r43, %r1588, 5;
	add.s32 	%r6903, %r43, %r36;
	mul.lo.s32 	%r1589, %r1581, %r1576;
	shl.b32 	%r47, %r1589, 5;
	sub.s32 	%r1590, %r1565, %r1564;
	mul.lo.s32 	%r1591, %r1563, %r1590;
	sub.s32 	%r1592, %r1567, %r1566;
	mul.lo.s32 	%r1593, %r1591, %r1592;
	sub.s32 	%r48, %r1569, %r1568;
	mul.lo.s32 	%r1594, %r1593, %r48;
	mul.lo.s32 	%r49, %r1594, 3;
	setp.ge.s32 	%p16, %r6903, %r49;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1595, %r36;
	add.s32 	%r1596, %r49, %r1595;
	sub.s32 	%r1597, %r1596, %r43;
	mul.lo.s32 	%r1598, %r1581, %r1550;
	mul.lo.s32 	%r1599, %r1598, %r1552;
	shl.b32 	%r1600, %r1599, 5;
	div.u32 	%r50, %r1597, %r1600;
	add.s32 	%r1601, %r50, 1;
	and.b32  	%r6900, %r1601, 3;
	setp.eq.s32 	%p17, %r6900, 0;
	mov.u32 	%r6901, %r6903;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6901, %r6903;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r6901, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1602, 0;
	st.global.u32 	[%rd45], %r1602;
	add.s32 	%r6901, %r6901, %r47;
	add.s32 	%r6900, %r6900, -1;
	setp.ne.s32 	%p18, %r6900, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r50, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r47, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r6901, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1603, 0;
	st.global.u32 	[%rd47], %r1603;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1603;
	add.s32 	%r1604, %r6901, %r47;
	add.s32 	%r1605, %r1604, %r47;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1603;
	add.s32 	%r1606, %r1605, %r47;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1603;
	add.s32 	%r6901, %r1606, %r47;
	setp.lt.s32 	%p20, %r6901, %r49;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1607, %r1556, %r37;
	div.s32 	%r1608, %r1607, %r38;
	mul.lo.s32 	%r1609, %r1608, %r1555;
	sub.s32 	%r59, %r1609, %r37;
	sub.s32 	%r1610, %r1555, %r38;
	mul.lo.s32 	%r1611, %r1610, %r1552;
	mul.lo.s32 	%r60, %r1550, 384;
	add.s32 	%r1612, %r60, %r60;
	add.s32 	%r1613, %r1612, 128;
	mul.lo.s32 	%r1615, %r1581, 768;
	mul.lo.s32 	%r1616, %r1611, %r1613;
	mad.lo.s32 	%r61, %r1615, %r59, %r1616;
	bra.uni 	$L__BB0_11;

$L__BB0_836:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6867, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r6903, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r6867;
	add.s32 	%r6903, %r6903, %r47;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6903, %r61;
	@%p21 bra 	$L__BB0_836;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r6945, %r1550, %r33, %r31;
	mul.lo.s32 	%r65, %r1551, %r34;
	add.s32 	%r66, %r65, %r32;
	setp.ge.s32 	%p22, %r6945, %r1555;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r35, %r36;
	mov.u32 	%r1617, 31;
	sub.s32 	%r1618, %r1617, %r36;
	selp.b32 	%r1619, %r36, %r1618, %p23;
	shl.b32 	%r1620, %r1619, 2;
	mov.u32 	%r1621, 2;
	sub.s32 	%r67, %r1620, %r1558;
	shl.b32 	%r1622, %r1557, 2;
	mov.u32 	%r1623, 128;
	sub.s32 	%r68, %r1623, %r1622;
	sub.s32 	%r1624, %r1621, %r1558;
	add.s32 	%r69, %r1624, %r1620;
	mul.lo.s32 	%r1625, %r1556, %r1555;
	shl.b32 	%r70, %r1625, 6;
	add.s32 	%r71, %r1555, -1;
	add.s32 	%r72, %r67, 1;
	add.s32 	%r73, %r69, 1;
	shl.b32 	%r74, %r36, 1;
	or.b32  	%r75, %r74, 1;
	shr.u32 	%r1626, %r75, 31;
	add.s32 	%r1627, %r75, %r1626;
	shr.s32 	%r77, %r1627, 1;
	and.b32  	%r1628, %r1627, -2;
	sub.s32 	%r1629, %r75, %r1628;
	add.s32 	%r76, %r1629, %r70;
	rem.s32 	%r1664, %r72, %r68;
	add.s32 	%r1665, %r1664, %r68;
	rem.s32 	%r100, %r1665, %r68;
	rem.s32 	%r1666, %r73, %r68;
	add.s32 	%r1667, %r1666, %r68;
	rem.s32 	%r101, %r1667, %r68;
	mov.u32 	%r6904, %r6945;

$L__BB0_14:
	setp.ge.s32 	%p24, %r66, %r1556;
	@%p24 bra 	$L__BB0_35;

	add.s32 	%r79, %r71, %r6904;
	rem.s32 	%r1630, %r67, %r68;
	add.s32 	%r1631, %r1630, %r68;
	rem.s32 	%r80, %r1631, %r68;
	rem.s32 	%r1632, %r69, %r68;
	add.s32 	%r1633, %r1632, %r68;
	rem.s32 	%r81, %r1633, %r68;
	mul.lo.s32 	%r82, %r6904, %r1556;
	add.s32 	%r1634, %r1555, %r6904;
	mul.lo.s32 	%r83, %r1634, %r1556;
	add.s32 	%r1635, %r1634, %r1555;
	mul.lo.s32 	%r84, %r1635, %r1556;
	mov.u32 	%r6905, %r66;

$L__BB0_16:
	mul.lo.s32 	%r86, %r6905, %r1555;
	add.s32 	%r87, %r86, %r6904;
	shl.b32 	%r88, %r87, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1638, %r82, %r6905;
	mul.lo.s32 	%r1639, %r1638, %r68;
	add.s32 	%r1640, %r1639, %r80;
	mul.wide.s32 	%rd55, %r1640, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1641, %r1639, %r81;
	mul.wide.s32 	%rd57, %r1641, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6906, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6906, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r92, %r87, 5;
	add.s32 	%r1642, %r92, %r36;
	shl.b32 	%r1643, %r1642, 2;
	add.s32 	%r1644, %r70, %r1643;
	mul.wide.s32 	%rd59, %r1644, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r6906;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1647, %r83, %r6905;
	mul.lo.s32 	%r1648, %r1647, %r68;
	add.s32 	%r1649, %r1648, %r80;
	mul.wide.s32 	%rd61, %r1649, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1650, %r1648, %r81;
	mul.wide.s32 	%rd63, %r1650, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6907, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6907, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1651, %r74, %r88;
	mul.wide.s32 	%rd65, %r1651, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r6907;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1654, %r84, %r6905;
	mul.lo.s32 	%r1655, %r1654, %r68;
	add.s32 	%r1656, %r1655, %r80;
	mul.wide.s32 	%rd67, %r1656, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1657, %r1655, %r81;
	mul.wide.s32 	%rd69, %r1657, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6908, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6908, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1658, %r79, %r1555;
	add.s32 	%r1659, %r1658, %r86;
	shl.b32 	%r99, %r1659, 5;
	add.s32 	%r1660, %r99, %r36;
	shl.b32 	%r1661, %r1660, 2;
	add.s32 	%r1662, %r70, %r1661;
	add.s32 	%r1663, %r1662, 2;
	mul.wide.s32 	%rd71, %r1663, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r6908;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1670, %r82, %r6905;
	mul.lo.s32 	%r1671, %r1670, %r68;
	add.s32 	%r1672, %r1671, %r100;
	mul.wide.s32 	%rd73, %r1672, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1673, %r1671, %r101;
	mul.wide.s32 	%rd75, %r1673, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6909, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6909, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1674, %r92, %r77;
	shl.b32 	%r1675, %r1674, 2;
	add.s32 	%r1676, %r76, %r1675;
	mul.wide.s32 	%rd77, %r1676, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r6909;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1679, %r83, %r6905;
	mul.lo.s32 	%r1680, %r1679, %r68;
	add.s32 	%r1681, %r1680, %r100;
	mul.wide.s32 	%rd79, %r1681, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1682, %r1680, %r101;
	mul.wide.s32 	%rd81, %r1682, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6910, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6910, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1683, %r75, %r88;
	mul.wide.s32 	%rd83, %r1683, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r6910;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1686, %r84, %r6905;
	mul.lo.s32 	%r1687, %r1686, %r68;
	add.s32 	%r1688, %r1687, %r100;
	mul.wide.s32 	%rd85, %r1688, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1689, %r1687, %r101;
	mul.wide.s32 	%rd87, %r1689, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6911, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6911, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1690, %r99, %r77;
	shl.b32 	%r1691, %r1690, 2;
	add.s32 	%r1692, %r76, %r1691;
	add.s32 	%r1693, %r1692, 2;
	mul.wide.s32 	%rd89, %r1693, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r6911;
	add.s32 	%r6905, %r6905, %r1581;
	setp.lt.s32 	%p31, %r6905, %r1556;
	@%p31 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6904, %r6904, %r1576;
	setp.lt.s32 	%p32, %r6904, %r1555;
	@%p32 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r113, %r66, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6912, %r6945;

$L__BB0_38:
	setp.ge.s32 	%p34, %r113, %r1556;
	@%p34 bra 	$L__BB0_119;

	mov.u32 	%r6913, %r113;

$L__BB0_40:
	setp.ne.s32 	%p35, %r36, 0;
	@%p35 bra 	$L__BB0_118;

	shr.u32 	%r1695, %r6913, 31;
	add.s32 	%r1696, %r6913, %r1695;
	shr.s32 	%r1697, %r1696, 1;
	mad.lo.s32 	%r1698, %r1697, %r1555, %r6912;
	shl.b32 	%r117, %r1698, 5;
	add.s32 	%r118, %r6913, -2;
	mul.lo.s32 	%r119, %r118, %r1555;
	add.s32 	%r1699, %r1556, %r118;
	mul.lo.s32 	%r120, %r1699, %r1555;
	add.s32 	%r1700, %r1699, %r1556;
	mul.lo.s32 	%r121, %r1700, %r1555;
	add.s32 	%r122, %r119, %r1555;
	add.s32 	%r123, %r6913, -1;
	add.s32 	%r1701, %r1556, %r123;
	mul.lo.s32 	%r124, %r1701, %r1555;
	add.s32 	%r1702, %r1701, %r1556;
	mul.lo.s32 	%r125, %r1702, %r1555;
	add.s32 	%r1703, %r1556, %r6913;
	mul.lo.s32 	%r126, %r1703, %r1555;
	add.s32 	%r1704, %r1703, %r1556;
	mul.lo.s32 	%r127, %r1704, %r1555;
	mul.lo.s32 	%r128, %r6913, %r1555;
	add.s32 	%r129, %r128, %r1555;
	add.s32 	%r130, %r6913, 1;
	add.s32 	%r1705, %r1556, %r130;
	mul.lo.s32 	%r131, %r1705, %r1555;
	add.s32 	%r1706, %r1705, %r1556;
	mul.lo.s32 	%r132, %r1706, %r1555;
	add.s32 	%r133, %r129, %r1555;
	add.s32 	%r134, %r6913, 2;
	add.s32 	%r1707, %r1556, %r134;
	mul.lo.s32 	%r135, %r1707, %r1555;
	add.s32 	%r1708, %r1707, %r1556;
	mul.lo.s32 	%r136, %r1708, %r1555;
	mov.u32 	%r6916, 0;
	mov.u64 	%rd553, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1709, [%rd553];
	cvt.rn.f64.s32 	%fd1, %r1709;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r138, %r1709, %r6912;
	setp.lt.s32 	%p36, %r138, %r1555;
	or.b32  	%r1710, %r118, %r138;
	setp.gt.s32 	%p37, %r1710, -1;
	and.pred  	%p38, %p36, %p37;
	setp.lt.s32 	%p39, %r118, %r1556;
	and.pred  	%p1, %p39, %p38;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p40, %f65, 0f40000000;
	@%p40 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1713, %r119, %r138;
	mul.wide.s32 	%rd94, %r1713, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6915, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6915, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1714, %r6916, %r117;
	mul.wide.s32 	%rd96, %r1714, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r6915;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p41, %f3, 0f40000000;
	@%p41 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1717, %r120, %r138;
	mul.wide.s32 	%rd98, %r1717, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6917, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6917, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1718, %r6916, %r117;
	mul.wide.s32 	%rd100, %r1718, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r6917;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p42, %f74, 0f40000000;
	@%p42 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1721, %r121, %r138;
	mul.wide.s32 	%rd102, %r1721, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6919, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6919, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1722, %r6916, %r117;
	mul.wide.s32 	%rd104, %r1722, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r6919;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_57:
	or.b32  	%r1723, %r123, %r138;
	setp.gt.s32 	%p43, %r1723, -1;
	and.pred  	%p45, %p36, %p43;
	setp.le.s32 	%p46, %r6913, %r1556;
	and.pred  	%p2, %p46, %p45;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p47, %f4, 0f40000000;
	@%p47 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1726, %r122, %r138;
	mul.wide.s32 	%rd106, %r1726, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6921, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6921, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1727, %r6916, %r117;
	mul.wide.s32 	%rd108, %r1727, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r6921;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p48, %f5, 0f40000000;
	@%p48 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1730, %r124, %r138;
	mul.wide.s32 	%rd110, %r1730, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6923, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6923, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1731, %r6916, %r117;
	mul.wide.s32 	%rd112, %r1731, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r6923;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p49, %f6, 0f40000000;
	@%p49 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1734, %r125, %r138;
	mul.wide.s32 	%rd114, %r1734, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6925, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6925, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1735, %r6916, %r117;
	mul.wide.s32 	%rd116, %r1735, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r6925;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_72:
	or.b32  	%r1736, %r6913, %r138;
	setp.gt.s32 	%p50, %r1736, -1;
	and.pred  	%p52, %p36, %p50;
	setp.lt.s32 	%p53, %r6913, %r1556;
	and.pred  	%p3, %p53, %p52;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p54, %f7, 0f40000000;
	@%p54 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1739, %r128, %r138;
	mul.wide.s32 	%rd118, %r1739, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6927, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6927, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1740, %r6916, %r117;
	mul.wide.s32 	%rd120, %r1740, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r6927;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p55, %f90, 0f40000000;
	@%p55 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1743, %r126, %r138;
	mul.wide.s32 	%rd122, %r1743, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6929, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6929, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1744, %r6916, %r117;
	mul.wide.s32 	%rd124, %r1744, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r6929;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p56, %f8, 0f40000000;
	@%p56 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1747, %r127, %r138;
	mul.wide.s32 	%rd126, %r1747, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6931, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6931, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1748, %r6916, %r117;
	mul.wide.s32 	%rd128, %r1748, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r6931;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_87:
	or.b32  	%r1749, %r130, %r138;
	setp.gt.s32 	%p57, %r1749, -1;
	and.pred  	%p59, %p36, %p57;
	setp.lt.s32 	%p60, %r130, %r1556;
	and.pred  	%p4, %p60, %p59;
	@%p54 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1752, %r129, %r138;
	mul.wide.s32 	%rd130, %r1752, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6933, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6933, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1753, %r6916, %r117;
	mul.wide.s32 	%rd132, %r1753, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r6933;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_92:
	@%p48 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1756, %r131, %r138;
	mul.wide.s32 	%rd134, %r1756, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6935, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6935, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1757, %r6916, %r117;
	mul.wide.s32 	%rd136, %r1757, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r6935;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_97:
	@%p56 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1760, %r132, %r138;
	mul.wide.s32 	%rd138, %r1760, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6937, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6937, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1761, %r6916, %r117;
	mul.wide.s32 	%rd140, %r1761, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r6937;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_102:
	or.b32  	%r1762, %r134, %r138;
	setp.gt.s32 	%p64, %r1762, -1;
	and.pred  	%p66, %p36, %p64;
	setp.lt.s32 	%p67, %r134, %r1556;
	and.pred  	%p5, %p67, %p66;
	@%p47 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1765, %r133, %r138;
	mul.wide.s32 	%rd142, %r1765, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6939, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6939, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1766, %r6916, %r117;
	mul.wide.s32 	%rd144, %r1766, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r6939;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_107:
	@%p41 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1769, %r135, %r138;
	mul.wide.s32 	%rd146, %r1769, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6941, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6941, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1770, %r6916, %r117;
	mul.wide.s32 	%rd148, %r1770, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r6941;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_112:
	@%p49 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1773, %r136, %r138;
	mul.wide.s32 	%rd150, %r1773, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6943, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6943, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1774, %r6916, %r117;
	mul.wide.s32 	%rd152, %r1774, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r6943;
	add.s32 	%r6916, %r6916, 1;

$L__BB0_117:
	add.s64 	%rd553, %rd553, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p71, %rd553, %rd155;
	@%p71 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6913, %r6913, %r38;
	setp.lt.s32 	%p72, %r6913, %r1556;
	@%p72 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6912, %r6912, %r1576;
	setp.lt.s32 	%p73, %r6912, %r1555;
	@%p73 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p74, %r1559, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p74 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r242, %r66, 1;
	shr.u32 	%r1822, %r1560, 31;
	add.s32 	%r1823, %r1560, %r1822;
	shr.u32 	%r1824, %r1823, 1;
	and.b32  	%r243, %r1824, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p84, %r242, %r1556;
	@%p84 bra 	$L__BB0_266;

	mov.u32 	%r6951, %r242;

$L__BB0_142:
	setp.ne.s32 	%p85, %r36, 0;
	@%p85 bra 	$L__BB0_265;

	shr.u32 	%r1826, %r6951, 31;
	add.s32 	%r1827, %r6951, %r1826;
	shr.s32 	%r1828, %r1827, 1;
	mad.lo.s32 	%r1829, %r1828, %r1555, %r6945;
	shl.b32 	%r247, %r1829, 5;
	add.s32 	%r248, %r6951, -2;
	mul.lo.s32 	%r249, %r248, %r1555;
	add.s32 	%r1830, %r1556, %r248;
	mul.lo.s32 	%r250, %r1830, %r1555;
	add.s32 	%r251, %r249, %r1555;
	add.s32 	%r252, %r6951, -1;
	add.s32 	%r1831, %r1556, %r252;
	mul.lo.s32 	%r253, %r1831, %r1555;
	add.s32 	%r1832, %r1556, %r6951;
	mul.lo.s32 	%r254, %r1832, %r1555;
	mul.lo.s32 	%r255, %r6951, %r1555;
	add.s32 	%r256, %r255, %r1555;
	add.s32 	%r257, %r6951, 1;
	add.s32 	%r1833, %r1556, %r257;
	mul.lo.s32 	%r258, %r1833, %r1555;
	add.s32 	%r259, %r256, %r1555;
	add.s32 	%r260, %r6951, 2;
	add.s32 	%r1834, %r1556, %r260;
	mul.lo.s32 	%r261, %r1834, %r1555;
	mov.u32 	%r6955, 0;
	mov.u64 	%rd554, 24;
	mov.u64 	%rd555, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1835, [%rd555];
	cvt.rn.f64.s32 	%fd2, %r1835;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r263, %r1835, %r6945;
	setp.lt.s32 	%p86, %r263, %r1555;
	or.b32  	%r1836, %r248, %r263;
	setp.gt.s32 	%p87, %r1836, -1;
	and.pred  	%p88, %p86, %p87;
	setp.lt.s32 	%p89, %r248, %r1556;
	and.pred  	%p6, %p89, %p88;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p90, %f133, 0f40000000;
	@%p90 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p91, %r243, 0;
	add.s32 	%r1838, %r249, %r263;
	shl.b32 	%r1839, %r1838, 1;
	mul.wide.s32 	%rd178, %r1839, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p91 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6953, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6953, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6953, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r268, %r6955, %r247;
	mul.wide.s32 	%rd180, %r268, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r6953;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p92, %r243, 0;
	add.s32 	%r1843, %r250, %r263;
	shl.b32 	%r1844, %r1843, 1;
	mul.wide.s32 	%rd182, %r1844, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p92 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6954, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1847, %r268, 1;
	mul.wide.s32 	%rd184, %r1847, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r6954;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p93, %f13, 0f40000000;
	@%p93 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p94, %r243, 0;
	add.s32 	%r1849, %r249, %r263;
	shl.b32 	%r1850, %r1849, 1;
	or.b32  	%r1851, %r1850, 1;
	mul.wide.s32 	%rd186, %r1851, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p94 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6956, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r279, %r6955, %r247;
	mul.wide.s32 	%rd188, %r279, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r6956;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p95, %r243, 0;
	add.s32 	%r1855, %r250, %r263;
	shl.b32 	%r1856, %r1855, 1;
	or.b32  	%r1857, %r1856, 1;
	mul.wide.s32 	%rd190, %r1857, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p95 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6957, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1860, %r279, 1;
	mul.wide.s32 	%rd192, %r1860, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r6957;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_168:
	or.b32  	%r1861, %r252, %r263;
	setp.gt.s32 	%p96, %r1861, -1;
	and.pred  	%p98, %p86, %p96;
	setp.le.s32 	%p99, %r6951, %r1556;
	and.pred  	%p7, %p99, %p98;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p100, %f16, 0f40000000;
	@%p100 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p101, %r243, 0;
	add.s32 	%r1863, %r251, %r263;
	shl.b32 	%r1864, %r1863, 1;
	mul.wide.s32 	%rd194, %r1864, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p101 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6959, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r290, %r6955, %r247;
	mul.wide.s32 	%rd196, %r290, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r6959;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p102, %r243, 0;
	add.s32 	%r1868, %r253, %r263;
	shl.b32 	%r1869, %r1868, 1;
	mul.wide.s32 	%rd198, %r1869, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p102 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6960, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1872, %r290, 1;
	mul.wide.s32 	%rd200, %r1872, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r6960;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p103, %f19, 0f40000000;
	@%p103 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p104, %r243, 0;
	add.s32 	%r1874, %r251, %r263;
	shl.b32 	%r1875, %r1874, 1;
	or.b32  	%r1876, %r1875, 1;
	mul.wide.s32 	%rd202, %r1876, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p104 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6962, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6962, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6962, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r301, %r6955, %r247;
	mul.wide.s32 	%rd204, %r301, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r6962;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p105, %r243, 0;
	add.s32 	%r1880, %r253, %r263;
	shl.b32 	%r1881, %r1880, 1;
	or.b32  	%r1882, %r1881, 1;
	mul.wide.s32 	%rd206, %r1882, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p105 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6963, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6963, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6963, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1885, %r301, 1;
	mul.wide.s32 	%rd208, %r1885, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r6963;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_192:
	or.b32  	%r1886, %r6951, %r263;
	setp.gt.s32 	%p106, %r1886, -1;
	and.pred  	%p108, %p86, %p106;
	setp.lt.s32 	%p109, %r6951, %r1556;
	and.pred  	%p8, %p109, %p108;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p110, %f22, 0f40000000;
	@%p110 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p111, %r243, 0;
	add.s32 	%r1888, %r255, %r263;
	shl.b32 	%r1889, %r1888, 1;
	mul.wide.s32 	%rd210, %r1889, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p111 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6965, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6965, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6965, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r312, %r6955, %r247;
	mul.wide.s32 	%rd212, %r312, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r6965;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p112, %r243, 0;
	add.s32 	%r1893, %r254, %r263;
	shl.b32 	%r1894, %r1893, 1;
	mul.wide.s32 	%rd214, %r1894, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p112 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6966, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6966, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6966, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1897, %r312, 1;
	mul.wide.s32 	%rd216, %r1897, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r6966;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p113, %f196, 0f40000000;
	@%p113 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p114, %r243, 0;
	add.s32 	%r1899, %r255, %r263;
	shl.b32 	%r1900, %r1899, 1;
	or.b32  	%r1901, %r1900, 1;
	mul.wide.s32 	%rd218, %r1901, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p114 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6968, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6968, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6968, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r323, %r6955, %r247;
	mul.wide.s32 	%rd220, %r323, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r6968;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p115, %r243, 0;
	add.s32 	%r1905, %r254, %r263;
	shl.b32 	%r1906, %r1905, 1;
	or.b32  	%r1907, %r1906, 1;
	mul.wide.s32 	%rd222, %r1907, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p115 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6969, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6969, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6969, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1910, %r323, 1;
	mul.wide.s32 	%rd224, %r1910, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r6969;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_216:
	or.b32  	%r1911, %r257, %r263;
	setp.gt.s32 	%p116, %r1911, -1;
	and.pred  	%p118, %p86, %p116;
	setp.lt.s32 	%p119, %r257, %r1556;
	and.pred  	%p9, %p119, %p118;
	@%p110 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p121, %r243, 0;
	add.s32 	%r1913, %r256, %r263;
	shl.b32 	%r1914, %r1913, 1;
	mul.wide.s32 	%rd226, %r1914, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p121 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6971, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6971, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6971, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r334, %r6955, %r247;
	mul.wide.s32 	%rd228, %r334, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r6971;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p122, %r243, 0;
	add.s32 	%r1918, %r258, %r263;
	shl.b32 	%r1919, %r1918, 1;
	mul.wide.s32 	%rd230, %r1919, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p122 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6972, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6972, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6972, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1922, %r334, 1;
	mul.wide.s32 	%rd232, %r1922, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r6972;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_228:
	@%p103 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p124, %r243, 0;
	add.s32 	%r1924, %r256, %r263;
	shl.b32 	%r1925, %r1924, 1;
	or.b32  	%r1926, %r1925, 1;
	mul.wide.s32 	%rd234, %r1926, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p124 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6974, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6974, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6974, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r345, %r6955, %r247;
	mul.wide.s32 	%rd236, %r345, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r6974;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p125, %r243, 0;
	add.s32 	%r1930, %r258, %r263;
	shl.b32 	%r1931, %r1930, 1;
	or.b32  	%r1932, %r1931, 1;
	mul.wide.s32 	%rd238, %r1932, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p125 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6975, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6975, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6975, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1935, %r345, 1;
	mul.wide.s32 	%rd240, %r1935, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r6975;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_240:
	or.b32  	%r1936, %r260, %r263;
	setp.gt.s32 	%p126, %r1936, -1;
	and.pred  	%p128, %p86, %p126;
	setp.lt.s32 	%p129, %r260, %r1556;
	and.pred  	%p10, %p129, %p128;
	@%p100 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p131, %r243, 0;
	add.s32 	%r1938, %r259, %r263;
	shl.b32 	%r1939, %r1938, 1;
	mul.wide.s32 	%rd242, %r1939, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p131 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6977, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6977, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6977, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r356, %r6955, %r247;
	mul.wide.s32 	%rd244, %r356, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r6977;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p132, %r243, 0;
	add.s32 	%r1943, %r261, %r263;
	shl.b32 	%r1944, %r1943, 1;
	mul.wide.s32 	%rd246, %r1944, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p132 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6978, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6978, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6978, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1947, %r356, 1;
	mul.wide.s32 	%rd248, %r1947, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r6978;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_252:
	@%p93 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p134, %r243, 0;
	add.s32 	%r1949, %r259, %r263;
	shl.b32 	%r1950, %r1949, 1;
	or.b32  	%r1951, %r1950, 1;
	mul.wide.s32 	%rd250, %r1951, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p134 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6980, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6980, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6980, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r367, %r6955, %r247;
	mul.wide.s32 	%rd252, %r367, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r6980;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p135, %r243, 0;
	add.s32 	%r1955, %r261, %r263;
	shl.b32 	%r1956, %r1955, 1;
	or.b32  	%r1957, %r1956, 1;
	mul.wide.s32 	%rd254, %r1957, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p135 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6981, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6981, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6981, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1960, %r367, 1;
	mul.wide.s32 	%rd256, %r1960, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r6981;
	add.s32 	%r6955, %r6955, 2;

$L__BB0_264:
	add.s64 	%rd555, %rd555, 4;
	add.s64 	%rd554, %rd554, -4;
	setp.ne.s64 	%p136, %rd554, 0;
	@%p136 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6951, %r6951, %r38;
	setp.lt.s32 	%p137, %r6951, %r1556;
	@%p137 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6945, %r6945, %r1576;
	setp.lt.s32 	%p138, %r6945, %r1555;
	@%p138 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r216, %r65;
	mov.u32 	%r1775, 31;
	sub.s32 	%r1776, %r1775, %r36;
	setp.gt.s32 	%p76, %r35, %r36;
	selp.b32 	%r1777, %r36, %r1776, %p76;
	shl.b32 	%r1778, %r1777, 2;
	mov.u32 	%r1779, 2;
	sub.s32 	%r217, %r1778, %r1558;
	shl.b32 	%r1780, %r1557, 2;
	mov.u32 	%r1781, 128;
	sub.s32 	%r218, %r1781, %r1780;
	sub.s32 	%r1782, %r1779, %r1558;
	add.s32 	%r219, %r1782, %r1778;
	add.s32 	%r220, %r1555, -1;
	add.s32 	%r221, %r217, 1;
	add.s32 	%r222, %r219, 1;
	rem.s32 	%r1807, %r221, %r218;
	add.s32 	%r1808, %r1807, %r218;
	rem.s32 	%r233, %r1808, %r218;
	rem.s32 	%r1809, %r222, %r218;
	add.s32 	%r1810, %r1809, %r218;
	rem.s32 	%r234, %r1810, %r218;

$L__BB0_123:
	setp.ne.s32 	%p77, %r32, %r216;
	@%p77 bra 	$L__BB0_137;

	shl.b32 	%r224, %r6945, 1;
	rem.s32 	%r1783, %r217, %r218;
	add.s32 	%r1784, %r1783, %r218;
	rem.s32 	%r225, %r1784, %r218;
	rem.s32 	%r1785, %r219, %r218;
	add.s32 	%r1786, %r1785, %r218;
	rem.s32 	%r226, %r1786, %r218;
	@%p76 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1789, %r224, %r218;
	add.s32 	%r1790, %r1789, %r225;
	mul.wide.s32 	%rd158, %r1790, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1791, %r1789, %r226;
	mul.wide.s32 	%rd160, %r1791, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6946, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6946, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1792, %r6945, 5;
	add.s32 	%r1793, %r1792, %r36;
	shl.b32 	%r1794, %r1793, 2;
	mul.wide.s32 	%rd162, %r1794, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r6946;
	@%p76 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1797, %r224, 1;
	mul.lo.s32 	%r1798, %r1797, %r218;
	add.s32 	%r1799, %r1798, %r225;
	mul.wide.s32 	%rd163, %r1799, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1800, %r1798, %r226;
	mul.wide.s32 	%rd165, %r1800, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6947, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6947, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1801, %r220, %r6945;
	rem.s32 	%r1802, %r1801, %r1555;
	shl.b32 	%r1803, %r1802, 5;
	add.s32 	%r1804, %r1803, %r36;
	shl.b32 	%r1805, %r1804, 2;
	or.b32  	%r1806, %r1805, 2;
	mul.wide.s32 	%rd167, %r1806, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r6947;
	@%p76 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1813, %r224, %r218;
	add.s32 	%r1814, %r1813, %r233;
	mul.wide.s32 	%rd168, %r1814, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1815, %r1813, %r234;
	mul.wide.s32 	%rd170, %r1815, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6948, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6948, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6948;
	@%p76 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1818, %r224, 1;
	mul.lo.s32 	%r1819, %r1818, %r218;
	add.s32 	%r1820, %r1819, %r233;
	mul.wide.s32 	%rd172, %r1820, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1821, %r1819, %r234;
	mul.wide.s32 	%rd174, %r1821, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6949, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6949, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6949;

$L__BB0_137:
	add.s32 	%r6945, %r6945, %r1576;
	setp.lt.s32 	%p82, %r6945, %r1555;
	@%p82 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1962, %r1550, -1;
	mad.lo.s32 	%r1963, %r1551, 576, 128;
	mul.lo.s32 	%r1964, %r1963, %r1962;
	add.s32 	%r1965, %r60, -64;
	add.s32 	%r1966, %r1965, %r60;
	add.s32 	%r1967, %r1551, -1;
	mad.lo.s32 	%r1968, %r1966, %r1967, %r1964;
	mul.lo.s32 	%r1969, %r1962, %r1551;
	mul.lo.s32 	%r1970, %r1969, 320;
	mad.lo.s32 	%r1971, %r1965, %r1967, %r1970;
	add.s32 	%r376, %r1971, %r1968;
	setp.lt.s32 	%p139, %r376, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7164, {low,high};}

	// end inline asm
	@%p139 bra 	$L__BB0_270;

	mov.u32 	%r6985, 0;
	mov.u32 	%r6983, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6983], %r7164;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1974, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6983+4], %r1974;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1975, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6983+8], %r1975;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1976, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6983+12], %r1976;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7164, {low,high};}

	// end inline asm
	add.s32 	%r6983, %r6983, 16;
	add.s32 	%r6985, %r6985, 4;
	setp.lt.s32 	%p140, %r6985, %r376;
	@%p140 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7165, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1979, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r1980, 31;
	sub.s32 	%r1981, %r1980, %r36;
	setp.gt.s32 	%p141, %r35, %r36;
	selp.b32 	%r1982, %r36, %r1981, %p141;
	shl.b32 	%r1983, %r1982, 2;
	sub.s32 	%r387, %r1983, %r1558;
	shl.b32 	%r1984, %r1557, 2;
	mov.u32 	%r1985, 128;
	sub.s32 	%r388, %r1985, %r1984;
	rem.s32 	%r1986, %r387, %r388;
	add.s32 	%r1987, %r1986, %r388;
	rem.s32 	%r389, %r1987, %r388;
	add.s32 	%r1988, %r387, 2;
	rem.s32 	%r1989, %r1988, %r388;
	add.s32 	%r1990, %r1989, %r388;
	rem.s32 	%r390, %r1990, %r388;
	mul.lo.s32 	%r1991, %r389, 6;
	mul.lo.s32 	%r1992, %r390, 6;
	mul.wide.s32 	%rd259, %r1991, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r1992, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6987, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6987, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6988, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6988, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6989, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6989, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6990, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6990, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2001, %r387, 1;
	rem.s32 	%r2002, %r2001, %r388;
	add.s32 	%r2003, %r2002, %r388;
	rem.s32 	%r403, %r2003, %r388;
	add.s32 	%r2004, %r387, 3;
	rem.s32 	%r2005, %r2004, %r388;
	add.s32 	%r2006, %r2005, %r388;
	rem.s32 	%r404, %r2006, %r388;
	mul.lo.s32 	%r2007, %r403, 6;
	mul.lo.s32 	%r2008, %r404, 6;
	mul.wide.s32 	%rd261, %r2007, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r2008, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6991, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6991, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6992, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6992, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6993, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6993, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6994, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6994, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2017, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2017;
	// begin inline asm
	mov.u32 %r2018, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r2018;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p150, %rd24, 0;
	@%p150 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2019, %nctaid.y;
	mov.u32 	%r2020, %nctaid.x;
	mul.lo.s32 	%r2021, %r2020, %r2019;
	mov.u32 	%r2022, %nctaid.z;
	mul.lo.s32 	%r417, %r2021, %r2022;
	neg.s32 	%r2023, %r32;
	add.s32 	%r2024, %r36, %r31;
	setp.ne.s32 	%p151, %r2024, %r2023;
	mov.u32 	%r2025, %ctaid.x;
	add.s32 	%r418, %r2025, %r33;
	neg.s32 	%r419, %r34;
	bar.sync 	0;
	@%p151 bra 	$L__BB0_300;

	setp.eq.s32 	%p152, %r418, %r419;
	mov.u32 	%r2028, -2147483647;
	sub.s32 	%r2029, %r2028, %r417;
	selp.b32 	%r2027, %r2029, 1, %p152;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2026,[%rd25],%r2027;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2030, [%rd25];
	xor.b32  	%r2031, %r2030, %r2026;
	setp.gt.s32 	%p153, %r2031, -1;
	@%p153 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2032,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p154, %r39, 1;
	@%p154 bra 	$L__BB0_835;

	shr.s32 	%r2046, %r1560, 31;
	shr.u32 	%r2047, %r2046, 30;
	add.s32 	%r2048, %r1560, %r2047;
	shr.s32 	%r421, %r2048, 2;
	add.s32 	%r2049, %r36, 24;
	mul.hi.s32 	%r2050, %r2049, 1374389535;
	shr.u32 	%r2051, %r2050, 31;
	shr.s32 	%r2052, %r2050, 3;
	add.s32 	%r2053, %r2052, %r2051;
	mul.lo.s32 	%r2054, %r2053, 25;
	sub.s32 	%r2055, %r2049, %r2054;
	add.s32 	%r2056, %r36, 26;
	mul.hi.s32 	%r2057, %r2056, 1374389535;
	shr.u32 	%r2058, %r2057, 31;
	shr.s32 	%r2059, %r2057, 3;
	add.s32 	%r2060, %r2059, %r2058;
	mul.lo.s32 	%r2061, %r2060, 25;
	sub.s32 	%r2062, %r2056, %r2061;
	shr.u32 	%r2063, %r1560, 31;
	add.s32 	%r2064, %r1560, %r2063;
	and.b32  	%r2065, %r2064, -2;
	sub.s32 	%r422, %r1560, %r2065;
	setp.lt.s32 	%p155, %r36, 25;
	selp.b32 	%r423, %r2055, %r36, %p155;
	setp.lt.s32 	%p156, %r389, %r1569;
	setp.ge.s32 	%p157, %r389, %r1568;
	and.pred  	%p11, %p156, %p157;
	setp.lt.s32 	%p158, %r403, %r1569;
	setp.ge.s32 	%p159, %r403, %r1568;
	and.pred  	%p12, %p158, %p159;
	setp.lt.s32 	%p160, %r390, %r1569;
	setp.ge.s32 	%p161, %r390, %r1568;
	and.pred  	%p13, %p160, %p161;
	setp.lt.s32 	%p162, %r404, %r1569;
	setp.ge.s32 	%p163, %r404, %r1568;
	and.pred  	%p14, %p162, %p163;
	selp.b32 	%r424, %r2062, %r36, %p155;
	mov.u32 	%r2045, 0;
	// begin inline asm
	{mov.u32 %r2066, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2393, %r2066, 8;
	add.s32 	%r2394, %r2393, -8192;
	or.b32  	%r2070, %r2394, 31;
	mul.wide.s32 	%rd275, %r36, 16;
	mul.wide.s32 	%rd277, %r36, 8;
	mov.u32 	%r6995, %r2045;
	mov.u32 	%r6996, %r2045;
	mov.u32 	%r6997, %r2045;
	mov.u32 	%r6998, %r2045;
	mov.u32 	%r6999, %r2045;
	mov.u32 	%r7000, %r2045;
	mov.u32 	%r7001, %r2045;
	mov.u32 	%r7002, %r2045;
	mov.u32 	%r7003, %r2045;
	mov.u32 	%r7004, %r2045;
	mov.u32 	%r7005, %r2045;
	mov.u32 	%r7006, %r2045;
	mov.u32 	%r7368, %r1979;
	mov.u32 	%r7369, %r1979;
	mov.u32 	%r7366, %r1979;
	mov.u32 	%r7367, %r1979;
	mov.u32 	%r7252, %r1979;
	mov.u32 	%r7253, %r1979;
	mov.u32 	%r7266, %r1979;
	mov.u32 	%r7254, %r1979;
	mov.u32 	%r7268, %r1979;
	mov.u32 	%r7255, %r1979;
	mov.u32 	%r7256, %r1979;
	mov.u32 	%r7257, %r1979;
	mov.u32 	%r7258, %r1979;
	mov.u32 	%r7259, %r1979;
	mov.u32 	%r7260, %r1979;
	mov.u32 	%r7261, %r1979;
	mov.u32 	%r7270, %r1979;
	mov.u32 	%r7271, %r1979;
	mov.u32 	%r7272, %r1979;
	mov.u32 	%r7273, %r1979;
	mov.u32 	%r7274, %r1979;
	mov.u32 	%r7275, %r1979;
	mov.u32 	%r7262, %r1979;
	mov.u32 	%r7263, %r1979;
	mov.u32 	%r7276, %r1979;
	mov.u32 	%r7277, %r1979;
	mov.u32 	%r7264, %r1979;
	mov.u32 	%r7265, %r1979;
	mov.u32 	%r7035, %r1979;
	mov.u32 	%r7036, %r1979;
	mov.u32 	%r7037, %r1979;
	mov.u32 	%r7038, %r1979;
	mov.u32 	%r7039, %r1979;
	mov.u32 	%r7040, %r1979;
	mov.u32 	%r7041, %r1979;
	mov.u32 	%r7042, %r1979;
	mov.u32 	%r7043, %r1979;
	mov.u32 	%r7044, %r1979;
	mov.u32 	%r7045, %r1979;
	mov.u32 	%r7046, %r1979;
	mov.u32 	%r7047, %r1979;
	mov.u32 	%r7048, %r1979;
	mov.u32 	%r7049, %r1979;
	mov.u32 	%r7050, %r1979;
	mov.u32 	%r7051, %r1979;
	mov.u32 	%r7052, %r1979;
	mov.u32 	%r7053, %r1979;
	mov.u32 	%r7054, %r1979;
	mov.u32 	%r7055, %r1979;
	mov.u32 	%r7056, %r1979;
	mov.u32 	%r7292, %r1979;
	mov.u32 	%r7293, %r1979;
	mov.u32 	%r7061, %r1979;
	mov.u32 	%r7062, %r1979;
	mov.u32 	%r7063, %r1979;
	mov.u32 	%r7064, %r1979;
	mov.u32 	%r7294, %r1979;
	mov.u32 	%r7295, %r1979;
	mov.u32 	%r7067, %r1979;
	mov.u32 	%r7296, %r1979;
	mov.u32 	%r7069, %r1979;
	mov.u32 	%r7070, %r1979;
	mov.u32 	%r7297, %r1979;
	mov.u32 	%r7072, %r1979;
	mov.u32 	%r7073, %r1979;
	mov.u32 	%r7074, %r1979;
	mov.u32 	%r7382, %r1979;
	mov.u32 	%r7383, %r1979;
	mov.u32 	%r7077, %r1979;
	mov.u32 	%r7078, %r1979;
	mov.u32 	%r7081, %r1979;
	mov.u32 	%r7082, %r1979;
	mov.u32 	%r7083, %r1979;
	mov.u32 	%r7084, %r1979;
	mov.u32 	%r7085, %r1979;
	mov.u32 	%r7301, %r1979;
	mov.u32 	%r7087, %r1979;
	mov.u32 	%r7088, %r1979;
	mov.u32 	%r7089, %r1979;
	mov.u32 	%r7090, %r1979;
	mov.u32 	%r7091, %r1979;
	mov.u32 	%r7092, %r1979;
	mov.u32 	%r7093, %r1979;
	mov.u32 	%r7303, %r1979;
	mov.u32 	%r7095, %r1979;
	mov.u32 	%r7096, %r1979;
	mov.u32 	%r7097, %r1979;
	mov.u32 	%r7304, %r1979;
	mov.u32 	%r7099, %r1979;
	mov.u32 	%r7100, %r1979;
	mov.u32 	%r7101, %r1979;
	mov.u32 	%r7102, %r1979;
	mov.u32 	%r7103, %r1979;
	mov.u32 	%r7104, %r1979;
	mov.u32 	%r7105, %r1979;
	mov.u32 	%r7305, %r1979;
	mov.u32 	%r7107, %r1979;
	mov.u32 	%r7384, %r1979;
	mov.u32 	%r7109, %r1979;
	mov.u32 	%r7110, %r1979;
	mov.u32 	%r7111, %r1979;
	mov.u32 	%r7112, %r1979;
	mov.u32 	%r7385, %r1979;
	mov.u32 	%r7114, %r1979;
	mov.u32 	%r7115, %r1979;
	mov.u32 	%r7116, %r1979;
	mov.u32 	%r7117, %r1979;
	mov.u32 	%r7118, %r1979;
	mov.u32 	%r7119, %r1979;
	mov.u32 	%r7120, %r1979;
	mov.u32 	%r7121, %r1979;
	mov.u32 	%r7122, %r1979;
	mov.u32 	%r7123, %r1979;
	mov.u32 	%r7124, %r1979;
	mov.u32 	%r7125, %r1979;
	mov.u32 	%r7126, %r1979;
	mov.u32 	%r7127, %r1979;
	mov.u32 	%r7128, %r1979;
	mov.u32 	%r7129, %r1979;
	mov.u32 	%r7130, %r1979;
	mov.u32 	%r7131, %r1979;
	mov.u32 	%r7132, %r1979;
	mov.u32 	%r7133, %r1979;
	mov.u32 	%r7134, %r1979;
	mov.u32 	%r7135, %r1979;
	mov.u32 	%r7136, %r1979;
	mov.u32 	%r7137, %r1979;
	mov.u32 	%r7138, %r1979;
	mov.u32 	%r7139, %r1979;
	mov.u32 	%r7140, %r1979;
	mov.u32 	%r7141, %r1979;
	mov.u32 	%r7142, %r1979;
	mov.u32 	%r7143, %r1979;
	mov.u32 	%r7144, %r1979;
	mov.u32 	%r7145, %r1979;
	mov.u32 	%r7146, %r1979;
	mov.u32 	%r7147, %r1979;
	mov.u32 	%r7148, %r1979;
	mov.u32 	%r7149, %r1979;
	mov.u32 	%r7150, %r1979;
	mov.u32 	%r7151, %r1979;
	mov.u32 	%r7152, %r1979;
	mov.u32 	%r7153, %r1979;
	mov.u32 	%r7154, %r1979;
	mov.u32 	%r7155, %r1979;
	mov.u32 	%r7156, %r1979;
	mov.u32 	%r7157, %r1979;
	mov.u32 	%r7158, %r1979;
	mov.u32 	%r7159, %r1979;
	mov.u32 	%r7160, %r1979;
	mov.u32 	%r7161, %r1979;
	mov.u32 	%r7162, %r1979;
	mov.u32 	%r7163, %r2045;

$L__BB0_302:
	mov.u32 	%r536, %r7305;
	mov.u32 	%r532, %r7102;
	mov.u32 	%r528, %r7304;
	mov.u32 	%r526, %r7096;
	mov.u32 	%r524, %r7303;
	mov.u32 	%r516, %r7301;
	mov.u32 	%r7102, %r7297;
	mov.u32 	%r498, %r7296;
	mov.u32 	%r7096, %r7295;
	mov.u32 	%r495, %r7294;
	mov.u32 	%r490, %r7293;
	mov.u32 	%r489, %r7292;
	sub.s32 	%r6876, %r1555, %r38;
	mov.u32 	%r2081, 1;
	not.b32 	%r2355, %r33;
	mov.u32 	%r2347, -1;
	add.s32 	%r2356, %r1552, %r2355;
	mul.lo.s32 	%r2357, %r2356, %r1554;
	add.s32 	%r2358, %r7163, %r2357;
	not.b32 	%r2360, %r34;
	add.s32 	%r2361, %r1553, %r2360;
	mul.lo.s32 	%r2362, %r2361, %r1554;
	add.s32 	%r2363, %r7163, %r2362;
	add.s32 	%r2364, %r2357, %r2362;
	add.s32 	%r2365, %r2364, %r1555;
	not.b32 	%r2366, %r31;
	add.s32 	%r2367, %r1550, %r2366;
	mad.lo.s32 	%r2368, %r2356, %r1550, %r2367;
	not.b32 	%r2370, %r32;
	add.s32 	%r2371, %r1551, %r2370;
	mad.lo.s32 	%r2372, %r2361, %r1551, %r2371;
	add.s32 	%r2373, %r2368, %r2372;
	shl.b32 	%r2374, %r2373, 1;
	add.s32 	%r2375, %r2365, %r2374;
	add.s32 	%r2376, %r7163, %r2375;
	add.s32 	%r2377, %r7163, %r2364;
	div.s32 	%r2378, %r2376, %r1555;
	neg.s32 	%r2379, %r1555;
	sub.s32 	%r2382, %r38, %r1555;
	sub.s32 	%r2383, %r2368, %r2372;
	shl.b32 	%r2384, %r2383, 1;
	add.s32 	%r2385, %r2384, %r1556;
	mad.lo.s32 	%r2386, %r2378, %r38, %r2385;
	mad.lo.s32 	%r2387, %r2378, %r2382, %r2377;
	div.s32 	%r2388, %r2386, %r1556;
	mul.lo.s32 	%r2389, %r2388, %r1556;
	sub.s32 	%r2392, %r1577, %r1556;
	mov.u32 	%r2165, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2067,%r7165,%r2045,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2073, %r6988, %r2067, %p15;
	// begin inline asm
	{mul.f16x2 %r7249,%r2073,%r7162;
}
	// end inline asm
	selp.b32 	%r2076, %r6992, %r2067, %p15;
	// begin inline asm
	{mul.f16x2 %r7247,%r2076,%r7161;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2079,%r7165,%r2081,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2085, %r6988, %r2079, %p15;
	// begin inline asm
	{mul.f16x2 %r7248,%r2085,%r7160;
}
	// end inline asm
	selp.b32 	%r2088, %r6992, %r2079, %p15;
	// begin inline asm
	{mul.f16x2 %r7246,%r2088,%r7159;
}
	// end inline asm
	mov.u32 	%r2093, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2091,%r7165,%r2093,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2097, %r6988, %r2091, %p15;
	// begin inline asm
	{mul.f16x2 %r7245,%r2097,%r7158;
}
	// end inline asm
	selp.b32 	%r2100, %r6992, %r2091, %p15;
	// begin inline asm
	{mul.f16x2 %r7244,%r2100,%r7157;
}
	// end inline asm
	mov.u32 	%r2105, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2103,%r7165,%r2105,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2109, %r6988, %r2103, %p15;
	// begin inline asm
	{mul.f16x2 %r7243,%r2109,%r7277;
}
	// end inline asm
	selp.b32 	%r2112, %r6992, %r2103, %p15;
	// begin inline asm
	{mul.f16x2 %r7241,%r2112,%r7276;
}
	// end inline asm
	mov.u32 	%r2117, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2115,%r7165,%r2117,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2121, %r6988, %r2115, %p15;
	// begin inline asm
	{mul.f16x2 %r7242,%r2121,%r7156;
}
	// end inline asm
	selp.b32 	%r2124, %r6992, %r2115, %p15;
	// begin inline asm
	{mul.f16x2 %r7240,%r2124,%r7155;
}
	// end inline asm
	mov.u32 	%r2129, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2127,%r7165,%r2129,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2133, %r6988, %r2127, %p15;
	// begin inline asm
	{mul.f16x2 %r7239,%r2133,%r7154;
}
	// end inline asm
	selp.b32 	%r2136, %r6992, %r2127, %p15;
	// begin inline asm
	{mul.f16x2 %r7236,%r2136,%r7153;
}
	// end inline asm
	mov.u32 	%r2141, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2139,%r7165,%r2141,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2145, %r6988, %r2139, %p15;
	// begin inline asm
	{mul.f16x2 %r7238,%r2145,%r7152;
}
	// end inline asm
	selp.b32 	%r2148, %r6992, %r2139, %p15;
	// begin inline asm
	{mul.f16x2 %r7235,%r2148,%r7151;
}
	// end inline asm
	mov.u32 	%r2153, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2151,%r7165,%r2153,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2157, %r6988, %r2151, %p15;
	// begin inline asm
	{mul.f16x2 %r7237,%r2157,%r7150;
}
	// end inline asm
	selp.b32 	%r2160, %r6992, %r2151, %p15;
	// begin inline asm
	{mul.f16x2 %r7234,%r2160,%r7149;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2163,%r7165,%r2165,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2169, %r6988, %r2163, %p15;
	// begin inline asm
	{mul.f16x2 %r7233,%r2169,%r7148;
}
	// end inline asm
	selp.b32 	%r2172, %r6992, %r2163, %p15;
	// begin inline asm
	{mul.f16x2 %r7230,%r2172,%r7147;
}
	// end inline asm
	mov.u32 	%r2177, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2175,%r7165,%r2177,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2181, %r6988, %r2175, %p15;
	// begin inline asm
	{mul.f16x2 %r7232,%r2181,%r7146;
}
	// end inline asm
	selp.b32 	%r2184, %r6992, %r2175, %p15;
	// begin inline asm
	{mul.f16x2 %r7229,%r2184,%r7145;
}
	// end inline asm
	mov.u32 	%r2189, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2187,%r7165,%r2189,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2193, %r6988, %r2187, %p15;
	// begin inline asm
	{mul.f16x2 %r7231,%r2193,%r7144;
}
	// end inline asm
	selp.b32 	%r2196, %r6992, %r2187, %p15;
	// begin inline asm
	{mul.f16x2 %r7228,%r2196,%r7143;
}
	// end inline asm
	mov.u32 	%r2201, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2199,%r7165,%r2201,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2205, %r6988, %r2199, %p15;
	// begin inline asm
	{mul.f16x2 %r7227,%r2205,%r7263;
}
	// end inline asm
	selp.b32 	%r2208, %r6992, %r2199, %p15;
	// begin inline asm
	{mul.f16x2 %r7226,%r2208,%r7262;
}
	// end inline asm
	mov.u32 	%r2213, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2211,%r7165,%r2213,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2217, %r6988, %r2211, %p15;
	// begin inline asm
	{mul.f16x2 %r7225,%r2217,%r7275;
}
	// end inline asm
	selp.b32 	%r2220, %r6992, %r2211, %p15;
	// begin inline asm
	{mul.f16x2 %r7223,%r2220,%r7273;
}
	// end inline asm
	mov.u32 	%r2225, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2223,%r7165,%r2225,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2229, %r6988, %r2223, %p15;
	// begin inline asm
	{mul.f16x2 %r7224,%r2229,%r7274;
}
	// end inline asm
	selp.b32 	%r2232, %r6992, %r2223, %p15;
	// begin inline asm
	{mul.f16x2 %r7222,%r2232,%r7272;
}
	// end inline asm
	mov.u32 	%r2237, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2235,%r7165,%r2237,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2241, %r6988, %r2235, %p15;
	// begin inline asm
	{mul.f16x2 %r7221,%r2241,%r7271;
}
	// end inline asm
	selp.b32 	%r2244, %r6992, %r2235, %p15;
	// begin inline asm
	{mul.f16x2 %r7218,%r2244,%r7270;
}
	// end inline asm
	mov.u32 	%r2249, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2247,%r7165,%r2249,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2253, %r6988, %r2247, %p15;
	// begin inline asm
	{mul.f16x2 %r7220,%r2253,%r7142;
}
	// end inline asm
	selp.b32 	%r2256, %r6992, %r2247, %p15;
	// begin inline asm
	{mul.f16x2 %r7217,%r2256,%r7141;
}
	// end inline asm
	mov.u32 	%r2261, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2259,%r7165,%r2261,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2265, %r6988, %r2259, %p15;
	// begin inline asm
	{mul.f16x2 %r7219,%r2265,%r7140;
}
	// end inline asm
	selp.b32 	%r2268, %r6992, %r2259, %p15;
	// begin inline asm
	{mul.f16x2 %r7216,%r2268,%r7139;
}
	// end inline asm
	mov.u32 	%r2273, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2271,%r7165,%r2273,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2277, %r6988, %r2271, %p15;
	// begin inline asm
	{mul.f16x2 %r7215,%r2277,%r7261;
}
	// end inline asm
	selp.b32 	%r2280, %r6992, %r2271, %p15;
	// begin inline asm
	{mul.f16x2 %r7212,%r2280,%r7259;
}
	// end inline asm
	mov.u32 	%r2285, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2283,%r7165,%r2285,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2289, %r6988, %r2283, %p15;
	// begin inline asm
	{mul.f16x2 %r7214,%r2289,%r7260;
}
	// end inline asm
	selp.b32 	%r2292, %r6992, %r2283, %p15;
	// begin inline asm
	{mul.f16x2 %r7211,%r2292,%r7258;
}
	// end inline asm
	mov.u32 	%r2297, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2295,%r7165,%r2297,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2301, %r6988, %r2295, %p15;
	// begin inline asm
	{mul.f16x2 %r7213,%r2301,%r7138;
}
	// end inline asm
	selp.b32 	%r2304, %r6992, %r2295, %p15;
	// begin inline asm
	{mul.f16x2 %r7210,%r2304,%r7137;
}
	// end inline asm
	mov.u32 	%r2309, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2307,%r7165,%r2309,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2313, %r6988, %r2307, %p15;
	// begin inline asm
	{mul.f16x2 %r7209,%r2313,%r7257;
}
	// end inline asm
	selp.b32 	%r2316, %r6992, %r2307, %p15;
	// begin inline asm
	{mul.f16x2 %r7208,%r2316,%r7256;
}
	// end inline asm
	mov.u32 	%r2321, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2319,%r7165,%r2321,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2325, %r6988, %r2319, %p15;
	// begin inline asm
	{mul.f16x2 %r7207,%r2325,%r7255;
}
	// end inline asm
	selp.b32 	%r2328, %r6992, %r2319, %p15;
	// begin inline asm
	{mul.f16x2 %r7205,%r2328,%r7254;
}
	// end inline asm
	mov.u32 	%r2333, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2331,%r7165,%r2333,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2337, %r6988, %r2331, %p15;
	// begin inline asm
	{mul.f16x2 %r7206,%r2337,%r7268;
}
	// end inline asm
	selp.b32 	%r2340, %r6992, %r2331, %p15;
	// begin inline asm
	{mul.f16x2 %r7204,%r2340,%r7266;
}
	// end inline asm
	mov.u32 	%r2345, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2343,%r7165,%r2345,%r2070,%r2347;
}
	// end inline asm
	selp.b32 	%r2349, %r6988, %r2343, %p15;
	// begin inline asm
	{mul.f16x2 %r7203,%r2349,%r7253;
}
	// end inline asm
	selp.b32 	%r2352, %r6992, %r2343, %p15;
	// begin inline asm
	{mul.f16x2 %r7202,%r2352,%r7252;
}
	// end inline asm
	rem.s32 	%r644, %r2358, %r59;
	rem.s32 	%r645, %r2363, %r6876;
	mad.lo.s32 	%r646, %r2378, %r2379, %r2376;
	sub.s32 	%r647, %r2386, %r2389;
	mad.lo.s32 	%r648, %r2388, %r2392, %r2387;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2442, %r648, 1;
	mul.wide.s32 	%rd270, %r2442, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p74 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2645, %r1572, 1;
	setp.lt.s32 	%p171, %r648, %r2645;
	setp.eq.s32 	%p172, %r421, %r36;
	setp.gt.s32 	%p173, %r648, -1;
	and.pred  	%p174, %p172, %p173;
	and.pred  	%p175, %p171, %p174;
	@%p175 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7168, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7169, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2445, %r1572, 1;
	setp.lt.s32 	%p166, %r648, %r2445;
	setp.gt.s32 	%p167, %r648, -1;
	and.pred  	%p168, %p167, %p166;
	@%p168 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7166, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7167, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7168, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7169, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2653, 0;
	mov.u32 	%r2664, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2651,%r7164,%r2653,%r2070,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2656,%r7168,%r2651;
}
	// end inline asm
	mov.u32 	%r2662, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2660,%r7164,%r2662,%r2070,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2665,%r7169,%r2660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r2656,%r2665;
}
	// end inline asm
	setp.eq.s32 	%p176, %r422, 0;
	mov.u32 	%r7170, %r7171;
	@%p176 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7170, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7249,%r7249,%r7170;
}
	// end inline asm
	setp.eq.s32 	%p177, %r422, 1;
	@%p177 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7171, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7247,%r7247,%r7171;
}
	// end inline asm
	mov.u32 	%r2686, 2;
	mov.u32 	%r2697, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2684,%r7164,%r2686,%r2070,%r2697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r7168,%r2684;
}
	// end inline asm
	mov.u32 	%r2695, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2693,%r7164,%r2695,%r2070,%r2697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2698,%r7169,%r2693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7173,%r2689,%r2698;
}
	// end inline asm
	mov.u32 	%r7172, %r7173;
	@%p176 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7172, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7248,%r7248,%r7172;
}
	// end inline asm
	@%p177 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7173, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7246,%r7246,%r7173;
}
	// end inline asm
	mov.u32 	%r2719, 4;
	mov.u32 	%r2730, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2717,%r7164,%r2719,%r2070,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2722,%r7168,%r2717;
}
	// end inline asm
	mov.u32 	%r2728, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2726,%r7164,%r2728,%r2070,%r2730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r7169,%r2726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r2722,%r2731;
}
	// end inline asm
	mov.u32 	%r7174, %r7175;
	@%p176 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7174, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7245,%r7245,%r7174;
}
	// end inline asm
	@%p177 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7175, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7244,%r7244,%r7175;
}
	// end inline asm
	mov.u32 	%r2752, 6;
	mov.u32 	%r2763, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2750,%r7164,%r2752,%r2070,%r2763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r7168,%r2750;
}
	// end inline asm
	mov.u32 	%r2761, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2759,%r7164,%r2761,%r2070,%r2763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2764,%r7169,%r2759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7177,%r2755,%r2764;
}
	// end inline asm
	mov.u32 	%r7176, %r7177;
	@%p176 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7176, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7243,%r7243,%r7176;
}
	// end inline asm
	@%p177 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7177, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7241,%r7241,%r7177;
}
	// end inline asm
	mov.u32 	%r2785, 8;
	mov.u32 	%r2796, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2783,%r7164,%r2785,%r2070,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2788,%r7168,%r2783;
}
	// end inline asm
	mov.u32 	%r2794, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2792,%r7164,%r2794,%r2070,%r2796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2797,%r7169,%r2792;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7179,%r2788,%r2797;
}
	// end inline asm
	mov.u32 	%r7178, %r7179;
	@%p176 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7178, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7242,%r7242,%r7178;
}
	// end inline asm
	@%p177 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7179, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7240,%r7240,%r7179;
}
	// end inline asm
	mov.u32 	%r2818, 10;
	mov.u32 	%r2829, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2816,%r7164,%r2818,%r2070,%r2829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2821,%r7168,%r2816;
}
	// end inline asm
	mov.u32 	%r2827, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2825,%r7164,%r2827,%r2070,%r2829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2830,%r7169,%r2825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r2821,%r2830;
}
	// end inline asm
	mov.u32 	%r7180, %r7181;
	@%p176 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7180, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7239,%r7239,%r7180;
}
	// end inline asm
	@%p177 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7181, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7236,%r7236,%r7181;
}
	// end inline asm
	mov.u32 	%r2851, 12;
	mov.u32 	%r2862, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2849,%r7164,%r2851,%r2070,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2854,%r7168,%r2849;
}
	// end inline asm
	mov.u32 	%r2860, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2858,%r7164,%r2860,%r2070,%r2862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2863,%r7169,%r2858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7183,%r2854,%r2863;
}
	// end inline asm
	mov.u32 	%r7182, %r7183;
	@%p176 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7182, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7238,%r7238,%r7182;
}
	// end inline asm
	@%p177 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7183, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7235,%r7235,%r7183;
}
	// end inline asm
	mov.u32 	%r2884, 14;
	mov.u32 	%r2895, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2882,%r7164,%r2884,%r2070,%r2895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2887,%r7168,%r2882;
}
	// end inline asm
	mov.u32 	%r2893, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2891,%r7164,%r2893,%r2070,%r2895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2896,%r7169,%r2891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r2887,%r2896;
}
	// end inline asm
	mov.u32 	%r7184, %r7185;
	@%p176 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7184, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7233,%r7233,%r7184;
}
	// end inline asm
	@%p177 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7185, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7230,%r7230,%r7185;
}
	// end inline asm
	mov.u32 	%r2917, 16;
	mov.u32 	%r2928, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2915,%r7164,%r2917,%r2070,%r2928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2920,%r7168,%r2915;
}
	// end inline asm
	mov.u32 	%r2926, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2924,%r7164,%r2926,%r2070,%r2928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2929,%r7169,%r2924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r2920,%r2929;
}
	// end inline asm
	mov.u32 	%r7186, %r7187;
	@%p176 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7186, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7232,%r7232,%r7186;
}
	// end inline asm
	@%p177 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7187, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7229,%r7229,%r7187;
}
	// end inline asm
	mov.u32 	%r2950, 18;
	mov.u32 	%r2961, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2948,%r7164,%r2950,%r2070,%r2961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2953,%r7168,%r2948;
}
	// end inline asm
	mov.u32 	%r2959, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2957,%r7164,%r2959,%r2070,%r2961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2962,%r7169,%r2957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r2953,%r2962;
}
	// end inline asm
	mov.u32 	%r7188, %r7189;
	@%p176 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7188, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7227,%r7227,%r7188;
}
	// end inline asm
	@%p177 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7189, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7226,%r7226,%r7189;
}
	// end inline asm
	mov.u32 	%r2983, 20;
	mov.u32 	%r2994, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2981,%r7164,%r2983,%r2070,%r2994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2986,%r7168,%r2981;
}
	// end inline asm
	mov.u32 	%r2992, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2990,%r7164,%r2992,%r2070,%r2994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2995,%r7169,%r2990;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7191,%r2986,%r2995;
}
	// end inline asm
	mov.u32 	%r7190, %r7191;
	@%p176 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7190, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7225,%r7225,%r7190;
}
	// end inline asm
	@%p177 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7191, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7223,%r7223,%r7191;
}
	// end inline asm
	mov.u32 	%r3016, 22;
	mov.u32 	%r3027, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3014,%r7164,%r3016,%r2070,%r3027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3019,%r7168,%r3014;
}
	// end inline asm
	mov.u32 	%r3025, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3023,%r7164,%r3025,%r2070,%r3027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3028,%r7169,%r3023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r3019,%r3028;
}
	// end inline asm
	mov.u32 	%r7192, %r7193;
	@%p176 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7192, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7221,%r7221,%r7192;
}
	// end inline asm
	@%p177 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7193, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7218,%r7218,%r7193;
}
	// end inline asm
	mov.u32 	%r3049, 24;
	mov.u32 	%r3060, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3047,%r7164,%r3049,%r2070,%r3060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3052,%r7168,%r3047;
}
	// end inline asm
	mov.u32 	%r3058, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3056,%r7164,%r3058,%r2070,%r3060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3061,%r7169,%r3056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7195,%r3052,%r3061;
}
	// end inline asm
	mov.u32 	%r7194, %r7195;
	@%p176 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7194, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7220,%r7220,%r7194;
}
	// end inline asm
	@%p177 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7195, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7217,%r7217,%r7195;
}
	// end inline asm
	mov.u32 	%r3082, 26;
	mov.u32 	%r3093, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3080,%r7164,%r3082,%r2070,%r3093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3085,%r7168,%r3080;
}
	// end inline asm
	mov.u32 	%r3091, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3089,%r7164,%r3091,%r2070,%r3093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3094,%r7169,%r3089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7197,%r3085,%r3094;
}
	// end inline asm
	mov.u32 	%r7196, %r7197;
	@%p176 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7196, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7215,%r7215,%r7196;
}
	// end inline asm
	@%p177 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7197, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7212,%r7212,%r7197;
}
	// end inline asm
	mov.u32 	%r3115, 28;
	mov.u32 	%r3126, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3113,%r7164,%r3115,%r2070,%r3126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3118,%r7168,%r3113;
}
	// end inline asm
	mov.u32 	%r3124, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3122,%r7164,%r3124,%r2070,%r3126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3127,%r7169,%r3122;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7199,%r3118,%r3127;
}
	// end inline asm
	mov.u32 	%r7198, %r7199;
	@%p176 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7198, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7214,%r7214,%r7198;
}
	// end inline asm
	@%p177 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7199, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7211,%r7211,%r7199;
}
	// end inline asm
	mov.u32 	%r3157, 31;
	mov.u32 	%r3148, 30;
	mov.u32 	%r3159, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3146,%r7164,%r3148,%r2070,%r3159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3151,%r7168,%r3146;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3155,%r7164,%r3157,%r2070,%r3159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3160,%r7169,%r3155;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7201,%r3151,%r3160;
}
	// end inline asm
	mov.u32 	%r7200, %r7201;
	@%p176 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7200, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7207,%r7207,%r7200;
}
	// end inline asm
	@%p177 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7201, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7205,%r7205,%r7201;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7166, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7167, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p169, %r647, %r1560;
	@%p169 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2547,%r7166,%r6998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7249,%r7249,%r2547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2553,%r7166,%r6996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7237,%r7237,%r2553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2559,%r7166,%r7002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7239,%r7239,%r2559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2565,%r7166,%r7000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7219,%r7219,%r2565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2571,%r7166,%r7006;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7221,%r7221,%r2571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2577,%r7166,%r7004;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7206,%r7206,%r2577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2583,%r7167,%r7002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7243,%r7243,%r2583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2589,%r7167,%r7000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7224,%r7224,%r2589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2595,%r7166,%r6997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7247,%r7247,%r2595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2601,%r7166,%r6995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7234,%r7234,%r2601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2607,%r7166,%r7001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7236,%r7236,%r2607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2613,%r7166,%r6999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7216,%r7216,%r2613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2619,%r7166,%r7005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7218,%r7218,%r2619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2625,%r7166,%r7003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7204,%r7204,%r2625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2631,%r7167,%r7001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7241,%r7241,%r2631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2637,%r7167,%r6999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7222,%r7222,%r2637;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2450, %r1560, -2;
	setp.ne.s32 	%p170, %r647, %r2450;
	@%p170 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2451,%r7166,%r7002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7227,%r7227,%r2451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2457,%r7166,%r7000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7209,%r7209,%r2457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2463,%r7167,%r6998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7245,%r7245,%r2463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2469,%r7167,%r6996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7231,%r7231,%r2469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2475,%r7167,%r7002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7233,%r7233,%r2475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2481,%r7167,%r7000;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7213,%r7213,%r2481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2487,%r7167,%r7006;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7215,%r7215,%r2487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2493,%r7167,%r7004;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7203,%r7203,%r2493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2499,%r7166,%r7001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7226,%r7226,%r2499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2505,%r7166,%r6999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r7208,%r2505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2511,%r7167,%r6997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7244,%r7244,%r2511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2517,%r7167,%r6995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7228,%r7228,%r2517;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2523,%r7167,%r7001;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7230,%r7230,%r2523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2529,%r7167,%r6999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7210,%r7210,%r2529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2535,%r7167,%r7005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7212,%r7212,%r2535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2541,%r7167,%r7003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7202,%r7202,%r2541;
}
	// end inline asm

$L__BB0_378:
	ld.param.u64 	%rd272, [%rd1+80];
	cvta.to.global.u64 	%rd27, %rd272;
	setp.ne.s32 	%p208, %r31, 0;
	@%p208 bra 	$L__BB0_383;

	setp.eq.s32 	%p209, %r32, 0;
	mad.lo.s32 	%r3180, %r644, %r1553, %r34;
	mul.lo.s32 	%r3181, %r1551, %r3180;
	mul.lo.s32 	%r3182, %r3181, 768;
	mad.lo.s32 	%r3183, %r32, 384, %r3182;
	add.s32 	%r3184, %r3183, -64;
	mul.wide.s32 	%rd273, %r3184, 4;
	add.s64 	%rd274, %rd27, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7261, %r7259, %r7253, %r7252}, [%rd276+256];
	ld.global.v4.u32 	{%r7263, %r7262, %r7257, %r7256}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p209 bra 	$L__BB0_381;

	ld.global.v2.u32 	{%r7255, %r7254}, [%rd28];

$L__BB0_381:
	setp.ne.s32 	%p210, %r32, %r1967;
	ld.global.v2.u32 	{%r7260, %r7258}, [%rd28+768];
	@%p210 bra 	$L__BB0_383;

	ld.global.v2.u32 	{%r7265, %r7264}, [%rd28+1536];

$L__BB0_383:
	setp.ne.s32 	%p211, %r32, 0;
	@%p211 bra 	$L__BB0_385;

	not.b32 	%r6878, %r31;
	add.s32 	%r6877, %r1550, %r6878;
	mad.lo.s32 	%r3203, %r645, %r1552, %r33;
	mul.lo.s32 	%r3207, %r3203, %r1613;
	mad.lo.s32 	%r3210, %r6877, 384, %r3207;
	add.s32 	%r3211, %r3210, -64;
	mad.lo.s32 	%r3214, %r1615, %r59, %r3211;
	mul.wide.s32 	%rd278, %r3214, 4;
	add.s64 	%rd279, %rd27, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7277, %r7276, %r7274, %r7272}, [%rd281+256];
	ld.global.v4.u32 	{%r7271, %r7270, %r7268, %r7266}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7275, %r7273}, [%rd283+768];
	ld.global.v2.u32 	{%r7255, %r7254}, [%rd283+1536];

$L__BB0_385:
	ld.param.u64 	%rd285, [%rd1+88];
	cvta.to.global.u64 	%rd29, %rd285;
	add.s32 	%r3227, %r1555, -1;
	setp.ge.s32 	%p212, %r646, %r3227;
	setp.lt.s32 	%p213, %r646, 2;
	or.pred  	%p214, %p213, %p212;
	setp.lt.s32 	%p215, %r647, 2;
	or.pred  	%p216, %p214, %p215;
	add.s32 	%r3228, %r1556, -2;
	setp.ge.s32 	%p217, %r647, %r3228;
	or.pred  	%p218, %p217, %p216;
	mov.u32 	%r7292, %r1979;
	mov.u32 	%r7293, %r1979;
	mov.u32 	%r7294, %r1979;
	mov.u32 	%r7295, %r1979;
	mov.u32 	%r7296, %r1979;
	mov.u32 	%r7297, %r1979;
	mov.u32 	%r7298, %r1979;
	mov.u32 	%r7299, %r1979;
	mov.u32 	%r7300, %r1979;
	mov.u32 	%r7301, %r1979;
	mov.u32 	%r7302, %r1979;
	mov.u32 	%r7303, %r1979;
	mov.u32 	%r7304, %r1979;
	mov.u32 	%r7305, %r1979;
	mov.u32 	%r7306, %r1979;
	mov.u32 	%r7307, %r1979;
	mov.u32 	%r7308, %r1979;
	mov.u32 	%r7309, %r1979;
	mov.u32 	%r7310, %r1979;
	mov.u32 	%r7311, %r1979;
	mov.u32 	%r7312, %r1979;
	mov.u32 	%r7313, %r1979;
	@%p218 bra 	$L__BB0_396;

	mad.lo.s32 	%r915, %r647, %r1555, %r646;
	shl.b32 	%r3229, %r915, 6;
	mul.wide.s32 	%rd286, %r3229, 4;
	add.s64 	%rd30, %rd29, %rd286;
	and.pred  	%p221, %p208, %p211;
	mov.u32 	%r7295, %r1979;
	mov.u32 	%r7297, %r1979;
	@%p221 bra 	$L__BB0_388;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7297, %r7295}, [%rd288+256];

$L__BB0_388:
	mov.u32 	%r7300, %r1979;
	mov.u32 	%r7302, %r1979;
	@%p208 bra 	$L__BB0_390;

	shl.b32 	%r3233, %r1555, 5;
	cvt.s64.s32 	%rd289, %r3233;
	cvt.s64.s32 	%rd290, %r36;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7302, %r7300}, [%rd293];

$L__BB0_390:
	mov.u32 	%r7307, %r1979;
	mov.u32 	%r7309, %r1979;
	@%p211 bra 	$L__BB0_392;

	shl.b32 	%r3237, %r1555, 5;
	neg.s32 	%r3238, %r3237;
	cvt.s64.s32 	%rd294, %r3238;
	cvt.s64.s32 	%rd295, %r36;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7309, %r7307}, [%rd298];

$L__BB0_392:
	shl.b32 	%r3241, %r1556, 6;
	shl.b32 	%r3242, %r915, 7;
	mad.lo.s32 	%r3243, %r3241, %r1555, %r3242;
	mul.wide.s32 	%rd299, %r3243, 4;
	add.s64 	%rd31, %rd29, %rd299;
	mov.u32 	%r7292, %r1979;
	mov.u32 	%r7293, %r1979;
	mov.u32 	%r7298, %r1979;
	mov.u32 	%r7299, %r1979;
	mov.u32 	%r7301, %r1979;
	mov.u32 	%r7303, %r1979;
	mov.u32 	%r7310, %r1979;
	mov.u32 	%r7311, %r1979;
	@%p208 bra 	$L__BB0_394;

	shl.b32 	%r3244, %r1555, 5;
	cvt.s64.s32 	%rd300, %r3244;
	cvt.s64.s32 	%rd301, %r36;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7303, %r7301, %r7293, %r7292}, [%rd304];
	shl.b32 	%r3249, %r1555, 6;
	add.s32 	%r3250, %r3249, -32;
	cvt.s64.s32 	%rd305, %r3250;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7311, %r7310, %r7299, %r7298}, [%rd308];

$L__BB0_394:
	mov.u32 	%r7294, %r1979;
	mov.u32 	%r7296, %r1979;
	mov.u32 	%r7304, %r1979;
	mov.u32 	%r7305, %r1979;
	mov.u32 	%r7306, %r1979;
	mov.u32 	%r7308, %r1979;
	mov.u32 	%r7312, %r1979;
	mov.u32 	%r7313, %r1979;
	@%p211 bra 	$L__BB0_396;

	shl.b32 	%r3256, %r1555, 5;
	xor.b32  	%r3257, %r3256, -32;
	cvt.s64.s32 	%rd309, %r3257;
	cvt.s64.s32 	%rd310, %r36;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7313, %r7312, %r7308, %r7306}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7305, %r7304, %r7296, %r7294}, [%rd315];

$L__BB0_396:
	mov.u32 	%r3271, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3267,%r7134,%r423,%r2070,%r3271;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3267;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7134;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3274, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3275,%r7135,%r3274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3278,%r6987,%r3275;
}
	// end inline asm
	@%p15 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7314,%r7249;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7314,%r6988,%r3275;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3291, 31;
	mov.u32 	%r3314, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3289,%r7314,%r3291,%r2070,%r3314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3294,%r3278,%r3289;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3297,%r7133,%r7132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3300,%r3297,%r3294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3303,%r7136,%r3300;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3306,%r7249,%r3303;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3310,%r7129,%r423,%r2070,%r3314;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3310;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7129;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3317, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3318,%r7130,%r3317;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3321,%r6987,%r3318;
}
	// end inline asm
	mov.u32 	%r7315, %r7248;
	@%p15 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7315,%r6988,%r3318;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3332,%r7315,%r3291,%r2070,%r3314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3337,%r3321,%r3332;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r7133,%r7128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3343,%r3337,%r3340;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3346,%r7131,%r3343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3349,%r7248,%r3346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3352,%r7134,%r7135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3355,%r6991,%r3352;
}
	// end inline asm
	@%p15 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7316,%r7247;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7316,%r6992,%r3352;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3368, 31;
	mov.u32 	%r3370, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3366,%r7316,%r3368,%r2070,%r3370;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3371,%r3355,%r3366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3374,%r7126,%r7125;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3377,%r3374,%r3371;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3380,%r7127,%r3377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3383,%r7247,%r3380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3386,%r7129,%r7130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3389,%r6991,%r3386;
}
	// end inline asm
	mov.u32 	%r7317, %r7246;
	@%p15 bra 	$L__BB0_406;

	// begin inline asm
	{mul.f16x2 %r7317,%r6992,%r3386;
}
	// end inline asm

$L__BB0_406:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3398,%r7317,%r3368,%r2070,%r3370;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3403,%r3389,%r3398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3406,%r7126,%r7123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3409,%r3403,%r3406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3412,%r7124,%r3409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3415,%r7246,%r3412;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3419,%r7120,%r423,%r2070,%r3370;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3419;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7120;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3426, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3427,%r7121,%r3426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3430,%r6987,%r3427;
}
	// end inline asm
	@%p15 bra 	$L__BB0_408;
	bra.uni 	$L__BB0_407;

$L__BB0_408:
	// begin inline asm
	{neg.f16x2 %r7318,%r7245;
}
	// end inline asm
	bra.uni 	$L__BB0_409;

$L__BB0_407:
	// begin inline asm
	{mul.f16x2 %r7318,%r6988,%r3427;
}
	// end inline asm

$L__BB0_409:
	mov.u32 	%r3445, 31;
	mov.u32 	%r3447, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3443,%r7318,%r3445,%r2070,%r3447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3448,%r3430,%r3443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3451,%r7119,%r7133;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3454,%r3451,%r3448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3457,%r7122,%r3454;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3460,%r7245,%r3457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3463,%r7120,%r7121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3466,%r6991,%r3463;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7319,%r7244;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7319,%r6992,%r3463;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3479, 31;
	mov.u32 	%r3502, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3477,%r7319,%r3479,%r2070,%r3502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3482,%r3466,%r3477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3485,%r7117,%r7126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3488,%r3485,%r3482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3491,%r7118,%r3488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3494,%r7244,%r3491;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3498,%r7115,%r423,%r2070,%r3502;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3498;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7115;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3505, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3506,%r7116,%r3505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3509,%r6987,%r3506;
}
	// end inline asm
	@%p15 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7320,%r7243;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7320,%r6988,%r3506;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3524, 31;
	mov.u32 	%r3547, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3522,%r7320,%r3524,%r2070,%r3547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3527,%r3509,%r3522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3530,%r7114,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3533,%r3530,%r3527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3536,%r7313,%r3533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3539,%r7243,%r3536;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3543,%r7110,%r423,%r2070,%r3547;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3543;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7110;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3550, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3551,%r7111,%r3550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3554,%r6987,%r3551;
}
	// end inline asm
	mov.u32 	%r7321, %r7242;
	@%p15 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7321,%r6988,%r3551;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3565,%r7321,%r3524,%r2070,%r3547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3570,%r3554,%r3565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r7114,%r7132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3576,%r3570,%r3573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3579,%r7112,%r3576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3582,%r7242,%r3579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3585,%r7115,%r7116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3588,%r6991,%r3585;
}
	// end inline asm
	@%p15 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7322,%r7241;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7322,%r6992,%r3585;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3601, 31;
	mov.u32 	%r3603, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3599,%r7322,%r3601,%r2070,%r3603;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3604,%r3588,%r3599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3607,%r7109,%r7384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3610,%r3607,%r3604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3613,%r7312,%r3610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3616,%r7241,%r3613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3619,%r7110,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3622,%r6991,%r3619;
}
	// end inline asm
	mov.u32 	%r7323, %r7240;
	@%p15 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7323,%r6992,%r3619;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3631,%r7323,%r3601,%r2070,%r3603;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3636,%r3622,%r3631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3639,%r7109,%r7125;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3642,%r3636,%r3639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3645,%r7107,%r3642;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3648,%r7240,%r3645;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3652,%r7104,%r423,%r2070,%r3603;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3652;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7104;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3659, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3660,%r7105,%r3659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3663,%r6987,%r3660;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7324,%r7239;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7324,%r6988,%r3660;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3678, 31;
	mov.u32 	%r3701, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3676,%r7324,%r3678,%r2070,%r3701;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3681,%r3663,%r3676;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7103,%r7114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3687,%r3684,%r3681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3690,%r536,%r3687;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r7239,%r3690;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3697,%r7100,%r423,%r2070,%r3701;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3697;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7100;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3704, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3705,%r7101,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3708,%r6987,%r3705;
}
	// end inline asm
	mov.u32 	%r7325, %r7238;
	@%p15 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7325,%r6988,%r3705;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3719,%r7325,%r3678,%r2070,%r3701;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3724,%r3708,%r3719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3727,%r7103,%r7133;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3730,%r3724,%r3727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3733,%r532,%r3730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r7238,%r3733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3739,%r7105,%r7135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r7101,%r7111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3745,%r3739,%r3742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3748,%r7099,%r3745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3751,%r7237,%r3748;
}
	// end inline asm
	selp.b32 	%r1041, %r7237, %r3751, %p15;
	// begin inline asm
	{sub.f16x2 %r3754,%r7104,%r7105;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3757,%r6991,%r3754;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7326,%r7236;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7326,%r6992,%r3754;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3770, 31;
	mov.u32 	%r3772, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3768,%r7326,%r3770,%r2070,%r3772;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3773,%r3757,%r3768;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3776,%r7097,%r7109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3779,%r3776,%r3773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3782,%r528,%r3779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7161,%r7236,%r3782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3788,%r7100,%r7101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3791,%r6991,%r3788;
}
	// end inline asm
	mov.u32 	%r7327, %r7235;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7327,%r6992,%r3788;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3800,%r7327,%r3770,%r2070,%r3772;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3805,%r3791,%r3800;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r7097,%r7126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3811,%r3805,%r3808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3814,%r526,%r3811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7159,%r7235,%r3814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3820,%r7104,%r7134;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3823,%r7100,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3826,%r3820,%r3823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3829,%r7095,%r3826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3832,%r7234,%r3829;
}
	// end inline asm
	selp.b32 	%r1053, %r7234, %r3832, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3836,%r7092,%r423,%r2070,%r3772;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3836;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7092;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3843, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3844,%r7093,%r3843;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3847,%r6987,%r3844;
}
	// end inline asm
	@%p15 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7328,%r7233;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7328,%r6988,%r3844;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3862, 31;
	mov.u32 	%r3885, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3860,%r7328,%r3862,%r2070,%r3885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3865,%r3847,%r3860;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3868,%r7091,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3871,%r3868,%r3865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3874,%r524,%r3871;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r7233,%r3874;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3881,%r7088,%r423,%r2070,%r3885;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3881;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7088;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3888, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3889,%r7089,%r3888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3892,%r6987,%r3889;
}
	// end inline asm
	mov.u32 	%r7329, %r7232;
	@%p15 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7329,%r6988,%r3889;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3903,%r7329,%r3862,%r2070,%r3885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3908,%r3892,%r3903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3911,%r7091,%r7119;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r3908,%r3911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3917,%r7090,%r3914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3920,%r7232,%r3917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3923,%r7093,%r7121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3926,%r7089,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3929,%r3923,%r3926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3932,%r7087,%r3929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3935,%r7231,%r3932;
}
	// end inline asm
	selp.b32 	%r1065, %r7231, %r3935, %p15;
	// begin inline asm
	{sub.f16x2 %r3938,%r7092,%r7093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3941,%r6991,%r3938;
}
	// end inline asm
	@%p15 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7330,%r7230;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7330,%r6992,%r3938;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3954, 31;
	mov.u32 	%r3956, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3952,%r7330,%r3954,%r2070,%r3956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3957,%r3941,%r3952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3960,%r7085,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3963,%r3960,%r3957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3966,%r516,%r3963;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7157,%r7230,%r3966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3972,%r7088,%r7089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3975,%r6991,%r3972;
}
	// end inline asm
	mov.u32 	%r7331, %r7229;
	@%p15 bra 	$L__BB0_442;

	// begin inline asm
	{mul.f16x2 %r7331,%r6992,%r3972;
}
	// end inline asm

$L__BB0_442:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3984,%r7331,%r3954,%r2070,%r3956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3989,%r3975,%r3984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r7085,%r7117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r3989,%r3992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3998,%r7084,%r3995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4001,%r7229,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4004,%r7092,%r7120;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r7088,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4010,%r4004,%r4007;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4013,%r7083,%r4010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4016,%r7228,%r4013;
}
	// end inline asm
	selp.b32 	%r1077, %r7228, %r4016, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4020,%r7081,%r423,%r2070,%r3956;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4020;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7081;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4027, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r7082,%r4027;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4031,%r6987,%r4028;
}
	// end inline asm
	@%p15 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7332,%r7227;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7332,%r6988,%r4028;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4046, 31;
	mov.u32 	%r4048, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4044,%r7332,%r4046,%r2070,%r4048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4049,%r4031,%r4044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4052,%r7369,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4055,%r4052,%r4049;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4058,%r7311,%r4055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4061,%r7227,%r4058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4064,%r7081,%r7082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4067,%r6991,%r4064;
}
	// end inline asm
	@%p15 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7333,%r7226;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7333,%r6992,%r4064;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4080, 31;
	mov.u32 	%r4103, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4078,%r7333,%r4080,%r2070,%r4103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4083,%r4067,%r4078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r7368,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4089,%r4086,%r4083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4092,%r7310,%r4089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4095,%r7226,%r4092;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4099,%r7077,%r423,%r2070,%r4103;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4099;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7077;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4106, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4107,%r7078,%r4106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4110,%r6987,%r4107;
}
	// end inline asm
	mov.u32 	%r7334, %r7225;
	@%p15 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7334,%r6988,%r4107;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4121,%r7334,%r4080,%r2070,%r4103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4126,%r4110,%r4121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4129,%r7053,%r7114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4132,%r4126,%r4129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4135,%r7309,%r4132;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r7225,%r4135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4141,%r7054,%r7116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r7078,%r7383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4147,%r4141,%r4144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4150,%r7308,%r4147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4153,%r7224,%r4150;
}
	// end inline asm
	selp.b32 	%r1095, %r7224, %r4153, %p15;
	// begin inline asm
	{sub.f16x2 %r4156,%r7077,%r7078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4159,%r6991,%r4156;
}
	// end inline asm
	mov.u32 	%r7335, %r7223;
	@%p15 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7335,%r6992,%r4156;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4170, 31;
	mov.u32 	%r4208, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4168,%r7335,%r4170,%r2070,%r4208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4173,%r4159,%r4168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4176,%r7051,%r7109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r4173,%r4176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4182,%r7307,%r4179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7155,%r7223,%r4182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4188,%r7052,%r7115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r7077,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4194,%r4188,%r4191;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4197,%r7306,%r4194;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4200,%r7222,%r4197;
}
	// end inline asm
	selp.b32 	%r1101, %r7222, %r4200, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4204,%r7073,%r423,%r2070,%r4208;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4204;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7073;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4211, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r7074,%r4211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4215,%r6987,%r4212;
}
	// end inline asm
	@%p15 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7336,%r7221;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7336,%r6988,%r4212;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4230, 31;
	mov.u32 	%r4253, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4228,%r7336,%r4230,%r2070,%r4253;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4233,%r4215,%r4228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4236,%r7072,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4239,%r4236,%r4233;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4242,%r7305,%r4239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r7221,%r4242;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4249,%r7069,%r423,%r2070,%r4253;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4249;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7069;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4256, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4257,%r7070,%r4256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4260,%r6987,%r4257;
}
	// end inline asm
	mov.u32 	%r7337, %r7220;
	@%p15 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7337,%r6988,%r4257;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4271,%r7337,%r4230,%r2070,%r4253;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4276,%r4260,%r4271;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4279,%r7072,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4282,%r4276,%r4279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4285,%r7102,%r4282;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r7220,%r4285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4291,%r7074,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4294,%r7070,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r4291,%r4294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4300,%r498,%r4297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4303,%r7219,%r4300;
}
	// end inline asm
	selp.b32 	%r7150, %r7219, %r4303, %p15;
	// begin inline asm
	{sub.f16x2 %r4306,%r7073,%r7074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4309,%r6991,%r4306;
}
	// end inline asm
	@%p15 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7338,%r7218;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7338,%r6992,%r4306;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4322, 31;
	mov.u32 	%r4324, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4320,%r7338,%r4322,%r2070,%r4324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4325,%r4309,%r4320;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r7067,%r7051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4331,%r4328,%r4325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4334,%r7304,%r4331;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7153,%r7218,%r4334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4340,%r7069,%r7070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4343,%r6991,%r4340;
}
	// end inline asm
	mov.u32 	%r7339, %r7217;
	@%p15 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7339,%r6992,%r4340;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4352,%r7339,%r4322,%r2070,%r4324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4357,%r4343,%r4352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4360,%r7067,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4363,%r4357,%r4360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4366,%r7096,%r4363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7151,%r7217,%r4366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4372,%r7073,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4375,%r7069,%r7077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4378,%r4372,%r4375;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4381,%r495,%r4378;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4384,%r7216,%r4381;
}
	// end inline asm
	selp.b32 	%r7149, %r7216, %r4384, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4388,%r7063,%r423,%r2070,%r4324;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4388;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7063;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4395, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r7064,%r4395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4399,%r6987,%r4396;
}
	// end inline asm
	@%p15 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7340,%r7215;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7340,%r6988,%r4396;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4414, 31;
	mov.u32 	%r4437, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4412,%r7340,%r4414,%r2070,%r4437;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4417,%r4399,%r4412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4420,%r7050,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4423,%r4420,%r4417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4426,%r7303,%r4423;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r7215,%r4426;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4433,%r7061,%r423,%r2070,%r4437;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4433;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7061;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4440, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4441,%r7062,%r4440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4444,%r6987,%r4441;
}
	// end inline asm
	mov.u32 	%r7341, %r7214;
	@%p15 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7341,%r6988,%r4441;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4455,%r7341,%r4414,%r2070,%r4437;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4460,%r4444,%r4455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r7050,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4466,%r4460,%r4463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4469,%r7302,%r4466;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7146,%r7214,%r4469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4475,%r7064,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4478,%r7062,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4481,%r4475,%r4478;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4484,%r490,%r4481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4487,%r7213,%r4484;
}
	// end inline asm
	selp.b32 	%r7144, %r7213, %r4487, %p15;
	// begin inline asm
	{sub.f16x2 %r4490,%r7063,%r7064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4493,%r6991,%r4490;
}
	// end inline asm
	@%p15 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7342,%r7212;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7342,%r6992,%r4490;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4506, 31;
	mov.u32 	%r4508, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4504,%r7342,%r4506,%r2070,%r4508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4509,%r4493,%r4504;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r7049,%r7067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4515,%r4512,%r4509;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4518,%r7301,%r4515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7147,%r7212,%r4518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4524,%r7061,%r7062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4527,%r6991,%r4524;
}
	// end inline asm
	mov.u32 	%r7343, %r7211;
	@%p15 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r7343,%r6992,%r4524;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4536,%r7343,%r4506,%r2070,%r4508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4541,%r4527,%r4536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4544,%r7049,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4547,%r4541,%r4544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4550,%r7300,%r4547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r7211,%r4550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4556,%r7063,%r7092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r7061,%r7069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4562,%r4556,%r4559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4565,%r489,%r4562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4568,%r7210,%r4565;
}
	// end inline asm
	selp.b32 	%r7143, %r7210, %r4568, %p15;
	// begin inline asm
	{sub.f16x2 %r4571,%r7048,%r7082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4574,%r7367,%r7062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4577,%r4571,%r4574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4580,%r7299,%r4577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4583,%r7209,%r4580;
}
	// end inline asm
	selp.b32 	%r1150, %r7209, %r4583, %p15;
	// begin inline asm
	{sub.f16x2 %r4586,%r7047,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r7366,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r4586,%r4589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4595,%r7298,%r4592;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4598,%r7208,%r4595;
}
	// end inline asm
	selp.b32 	%r1151, %r7208, %r4598, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4602,%r7055,%r423,%r2070,%r4508;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4602;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7055;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4609, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4610,%r7056,%r4609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4613,%r6987,%r4610;
}
	// end inline asm
	mov.u32 	%r7344, %r7207;
	@%p15 bra 	$L__BB0_474;

	// begin inline asm
	{mul.f16x2 %r7344,%r6988,%r4610;
}
	// end inline asm

$L__BB0_474:
	mov.u32 	%r4626, 31;
	mov.u32 	%r4628, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4624,%r7344,%r4626,%r2070,%r4628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4629,%r4613,%r4624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4632,%r7043,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r4629,%r4632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4638,%r7297,%r4635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7142,%r7207,%r4638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4644,%r7044,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4647,%r7056,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4650,%r4644,%r4647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4653,%r7296,%r4650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4656,%r7206,%r4653;
}
	// end inline asm
	selp.b32 	%r7140, %r7206, %r4656, %p15;
	// begin inline asm
	{sub.f16x2 %r4659,%r7055,%r7056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4662,%r6991,%r4659;
}
	// end inline asm
	mov.u32 	%r7345, %r7205;
	@%p15 bra 	$L__BB0_476;

	// begin inline asm
	{mul.f16x2 %r7345,%r6992,%r4659;
}
	// end inline asm

$L__BB0_476:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4671,%r7345,%r4626,%r2070,%r4628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4676,%r4662,%r4671;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4679,%r7041,%r7067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4682,%r4676,%r4679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4685,%r7295,%r4682;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7141,%r7205,%r4685;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4691,%r7042,%r7073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4694,%r7055,%r7045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4697,%r4691,%r4694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4700,%r7294,%r4697;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4703,%r7204,%r4700;
}
	// end inline asm
	selp.b32 	%r7139, %r7204, %r4703, %p15;
	// begin inline asm
	{sub.f16x2 %r4706,%r7039,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4709,%r7040,%r7056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4712,%r4706,%r4709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4715,%r7293,%r4712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4718,%r7203,%r4715;
}
	// end inline asm
	selp.b32 	%r7138, %r7203, %r4718, %p15;
	// begin inline asm
	{sub.f16x2 %r4721,%r7037,%r7063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4724,%r7038,%r7055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4727,%r4721,%r4724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4730,%r7292,%r4727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4733,%r7202,%r4730;
}
	// end inline asm
	selp.b32 	%r7137, %r7202, %r4733, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	add.s32 	%r4738, %r1564, 2;
	setp.lt.s32 	%p259, %r646, %r4738;
	add.s32 	%r4739, %r1565, -1;
	setp.ge.s32 	%p260, %r646, %r4739;
	or.pred  	%p261, %p260, %p259;
	add.s32 	%r4740, %r1566, 2;
	setp.lt.s32 	%p262, %r647, %r4740;
	or.pred  	%p263, %p261, %p262;
	add.s32 	%r4741, %r1567, -2;
	setp.ge.s32 	%p264, %r647, %r4741;
	or.pred  	%p265, %p264, %p263;
	setp.lt.s32 	%p266, %r648, %r1561;
	or.pred  	%p267, %p266, %p265;
	mad.lo.s32 	%r4742, %r1563, %r1562, %r1561;
	setp.ge.s32 	%p268, %r648, %r4742;
	or.pred  	%p269, %p267, %p268;
	@%p269 bra 	$L__BB0_718;

	sub.s32 	%r1166, %r648, %r1561;
	rem.s32 	%r4743, %r1166, %r1562;
	setp.ne.s32 	%p270, %r4743, 0;
	@%p270 bra 	$L__BB0_718;

	div.s32 	%r4744, %r1166, %r1562;
	mul.lo.s32 	%r4746, %r4744, %r1590;
	sub.s32 	%r1167, %r646, %r1564;
	sub.s32 	%r1168, %r647, %r1566;
	mul.lo.s32 	%r1169, %r4746, 3;
	add.s32 	%r4747, %r1167, %r1169;
	add.s32 	%r4748, %r4747, -2;
	mul.lo.s32 	%r1170, %r4748, %r1592;
	add.s32 	%r4750, %r1168, %r1170;
	mul.lo.s32 	%r4751, %r4750, %r48;
	sub.s32 	%r1171, %r4751, %r1568;
	@%p15 bra 	$L__BB0_483;

	not.pred 	%p272, %p11;
	@%p272 bra 	$L__BB0_481;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3306;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4753, %r1171, %r389;
	mul.wide.s32 	%rd317, %r4753, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;

$L__BB0_481:
	not.pred 	%p273, %p13;
	@%p273 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3306;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4755, %r1171, %r390;
	mul.wide.s32 	%rd319, %r4755, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;

$L__BB0_483:
	@%p15 bra 	$L__BB0_488;

	not.pred 	%p275, %p12;
	@%p275 bra 	$L__BB0_486;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3383;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4757, %r1171, %r403;
	mul.wide.s32 	%rd321, %r4757, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;

$L__BB0_486:
	not.pred 	%p276, %p14;
	@%p276 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3383;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4759, %r1171, %r404;
	mul.wide.s32 	%rd323, %r4759, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_488:
	sub.s32 	%r6888, %r646, %r1564;
	add.s32 	%r1172, %r1169, %r1590;
	add.s32 	%r4761, %r6888, %r1172;
	add.s32 	%r4762, %r4761, -2;
	mad.lo.s32 	%r4764, %r4762, %r1592, %r1168;
	mul.lo.s32 	%r4765, %r4764, %r48;
	sub.s32 	%r1173, %r4765, %r1568;
	@%p15 bra 	$L__BB0_493;

	not.pred 	%p278, %p11;
	@%p278 bra 	$L__BB0_491;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3349;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4767, %r1173, %r389;
	mul.wide.s32 	%rd325, %r4767, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;

$L__BB0_491:
	not.pred 	%p279, %p13;
	@%p279 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3349;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4769, %r1173, %r390;
	mul.wide.s32 	%rd327, %r4769, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;

$L__BB0_493:
	@%p15 bra 	$L__BB0_498;

	not.pred 	%p281, %p12;
	@%p281 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3415;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4771, %r1173, %r403;
	mul.wide.s32 	%rd329, %r4771, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;

$L__BB0_496:
	not.pred 	%p282, %p14;
	@%p282 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3415;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4773, %r1173, %r404;
	mul.wide.s32 	%rd331, %r4773, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_498:
	add.s32 	%r1174, %r1168, 1;
	add.s32 	%r4774, %r1174, %r1170;
	mul.lo.s32 	%r4775, %r4774, %r48;
	sub.s32 	%r1175, %r4775, %r1568;
	@%p15 bra 	$L__BB0_503;

	not.pred 	%p284, %p11;
	@%p284 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3460;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4777, %r1175, %r389;
	mul.wide.s32 	%rd333, %r4777, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;

$L__BB0_501:
	not.pred 	%p285, %p13;
	@%p285 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3460;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4779, %r1175, %r390;
	mul.wide.s32 	%rd335, %r4779, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;

$L__BB0_503:
	@%p15 bra 	$L__BB0_508;

	not.pred 	%p287, %p12;
	@%p287 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3494;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4781, %r1175, %r403;
	mul.wide.s32 	%rd337, %r4781, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;

$L__BB0_506:
	not.pred 	%p288, %p14;
	@%p288 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3494;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4783, %r1175, %r404;
	mul.wide.s32 	%rd339, %r4783, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_508:
	not.b32 	%r4784, %r1564;
	add.s32 	%r1176, %r646, %r4784;
	not.b32 	%r4785, %r1566;
	add.s32 	%r1177, %r647, %r4785;
	add.s32 	%r4786, %r1176, %r1169;
	mul.lo.s32 	%r1178, %r4786, %r1592;
	add.s32 	%r4788, %r1177, %r1178;
	mul.lo.s32 	%r4789, %r4788, %r48;
	sub.s32 	%r1179, %r4789, %r1568;
	@%p15 bra 	$L__BB0_513;

	not.pred 	%p290, %p11;
	@%p290 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3539;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4791, %r1179, %r389;
	mul.wide.s32 	%rd341, %r4791, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;

$L__BB0_511:
	not.pred 	%p291, %p13;
	@%p291 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3539;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4793, %r1179, %r390;
	mul.wide.s32 	%rd343, %r4793, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;

$L__BB0_513:
	@%p15 bra 	$L__BB0_518;

	not.pred 	%p293, %p12;
	@%p293 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3616;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4795, %r1179, %r403;
	mul.wide.s32 	%rd345, %r4795, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;

$L__BB0_516:
	not.pred 	%p294, %p14;
	@%p294 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3616;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4797, %r1179, %r404;
	mul.wide.s32 	%rd347, %r4797, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_518:
	add.s32 	%r4799, %r1176, %r1172;
	mul.lo.s32 	%r1180, %r4799, %r1592;
	add.s32 	%r4800, %r1177, %r1180;
	mul.lo.s32 	%r4801, %r4800, %r48;
	sub.s32 	%r1181, %r4801, %r1568;
	@%p15 bra 	$L__BB0_523;

	not.pred 	%p296, %p11;
	@%p296 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3582;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4803, %r1181, %r389;
	mul.wide.s32 	%rd349, %r4803, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;

$L__BB0_521:
	not.pred 	%p297, %p13;
	@%p297 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3582;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4805, %r1181, %r390;
	mul.wide.s32 	%rd351, %r4805, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;

$L__BB0_523:
	@%p15 bra 	$L__BB0_528;

	not.pred 	%p299, %p12;
	@%p299 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3648;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4807, %r1181, %r403;
	mul.wide.s32 	%rd353, %r4807, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;

$L__BB0_526:
	not.pred 	%p300, %p14;
	@%p300 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3648;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4809, %r1181, %r404;
	mul.wide.s32 	%rd355, %r4809, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_528:
	add.s32 	%r4810, %r1168, %r1178;
	mul.lo.s32 	%r4811, %r4810, %r48;
	sub.s32 	%r1182, %r4811, %r1568;
	@%p15 bra 	$L__BB0_533;

	not.pred 	%p302, %p11;
	@%p302 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7162;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4813, %r1182, %r389;
	mul.wide.s32 	%rd357, %r4813, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;

$L__BB0_531:
	not.pred 	%p303, %p13;
	@%p303 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7162;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4815, %r1182, %r390;
	mul.wide.s32 	%rd359, %r4815, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;

$L__BB0_533:
	@%p15 bra 	$L__BB0_538;

	not.pred 	%p305, %p12;
	@%p305 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7161;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4817, %r1182, %r403;
	mul.wide.s32 	%rd361, %r4817, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;

$L__BB0_536:
	not.pred 	%p306, %p14;
	@%p306 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7161;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4819, %r1182, %r404;
	mul.wide.s32 	%rd363, %r4819, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_538:
	add.s32 	%r4820, %r1168, %r1180;
	mul.lo.s32 	%r4821, %r4820, %r48;
	sub.s32 	%r1183, %r4821, %r1568;
	@%p15 bra 	$L__BB0_543;

	not.pred 	%p308, %p11;
	@%p308 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7160;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4823, %r1183, %r389;
	mul.wide.s32 	%rd365, %r4823, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;

$L__BB0_541:
	not.pred 	%p309, %p13;
	@%p309 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7160;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4825, %r1183, %r390;
	mul.wide.s32 	%rd367, %r4825, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;

$L__BB0_543:
	@%p15 bra 	$L__BB0_548;

	not.pred 	%p311, %p12;
	@%p311 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7159;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4827, %r1183, %r403;
	mul.wide.s32 	%rd369, %r4827, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;

$L__BB0_546:
	not.pred 	%p312, %p14;
	@%p312 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7159;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4829, %r1183, %r404;
	mul.wide.s32 	%rd371, %r4829, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_548:
	add.s32 	%r1184, %r1172, %r1590;
	add.s32 	%r4831, %r1176, %r1184;
	mul.lo.s32 	%r1185, %r4831, %r1592;
	add.s32 	%r4833, %r1168, %r1185;
	mul.lo.s32 	%r4834, %r4833, %r48;
	sub.s32 	%r1186, %r4834, %r1568;
	@%p15 bra 	$L__BB0_553;

	not.pred 	%p314, %p11;
	@%p314 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1041;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4836, %r1186, %r389;
	mul.wide.s32 	%rd373, %r4836, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;

$L__BB0_551:
	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1041;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4838, %r1186, %r390;
	mul.wide.s32 	%rd375, %r4838, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;

$L__BB0_553:
	@%p15 bra 	$L__BB0_558;

	not.pred 	%p317, %p12;
	@%p317 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1053;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4840, %r1186, %r403;
	mul.wide.s32 	%rd377, %r4840, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;

$L__BB0_556:
	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1053;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4842, %r1186, %r404;
	mul.wide.s32 	%rd379, %r4842, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_558:
	add.s32 	%r6891, %r1168, 1;
	add.s32 	%r4843, %r6891, %r1178;
	mul.lo.s32 	%r4844, %r4843, %r48;
	sub.s32 	%r1187, %r4844, %r1568;
	@%p15 bra 	$L__BB0_563;

	not.pred 	%p320, %p11;
	@%p320 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7158;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4846, %r1187, %r389;
	mul.wide.s32 	%rd381, %r4846, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;

$L__BB0_561:
	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7158;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4848, %r1187, %r390;
	mul.wide.s32 	%rd383, %r4848, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;

$L__BB0_563:
	@%p15 bra 	$L__BB0_568;

	not.pred 	%p323, %p12;
	@%p323 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7157;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4850, %r1187, %r403;
	mul.wide.s32 	%rd385, %r4850, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;

$L__BB0_566:
	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7157;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4852, %r1187, %r404;
	mul.wide.s32 	%rd387, %r4852, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_568:
	add.s32 	%r6892, %r1168, 1;
	add.s32 	%r4853, %r6892, %r1180;
	mul.lo.s32 	%r4854, %r4853, %r48;
	sub.s32 	%r1188, %r4854, %r1568;
	@%p15 bra 	$L__BB0_573;

	not.pred 	%p326, %p11;
	@%p326 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3920;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4856, %r1188, %r389;
	mul.wide.s32 	%rd389, %r4856, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;

$L__BB0_571:
	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3920;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4858, %r1188, %r390;
	mul.wide.s32 	%rd391, %r4858, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;

$L__BB0_573:
	@%p15 bra 	$L__BB0_578;

	not.pred 	%p329, %p12;
	@%p329 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4001;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4860, %r1188, %r403;
	mul.wide.s32 	%rd393, %r4860, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;

$L__BB0_576:
	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4001;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4862, %r1188, %r404;
	mul.wide.s32 	%rd395, %r4862, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_578:
	add.s32 	%r6893, %r1168, 1;
	add.s32 	%r4863, %r6893, %r1185;
	mul.lo.s32 	%r4864, %r4863, %r48;
	sub.s32 	%r1189, %r4864, %r1568;
	@%p15 bra 	$L__BB0_583;

	not.pred 	%p332, %p11;
	@%p332 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1065;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4866, %r1189, %r389;
	mul.wide.s32 	%rd397, %r4866, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;

$L__BB0_581:
	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1065;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4868, %r1189, %r390;
	mul.wide.s32 	%rd399, %r4868, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;

$L__BB0_583:
	@%p15 bra 	$L__BB0_588;

	not.pred 	%p335, %p12;
	@%p335 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1077;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4870, %r1189, %r403;
	mul.wide.s32 	%rd401, %r4870, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;

$L__BB0_586:
	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1077;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4872, %r1189, %r404;
	mul.wide.s32 	%rd403, %r4872, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_588:
	add.s32 	%r1190, %r1168, 2;
	add.s32 	%r4873, %r1190, %r1178;
	mul.lo.s32 	%r4874, %r4873, %r48;
	sub.s32 	%r1191, %r4874, %r1568;
	@%p15 bra 	$L__BB0_593;

	not.pred 	%p338, %p11;
	@%p338 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4061;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4876, %r1191, %r389;
	mul.wide.s32 	%rd405, %r4876, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;

$L__BB0_591:
	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4061;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4878, %r1191, %r390;
	mul.wide.s32 	%rd407, %r4878, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;

$L__BB0_593:
	@%p15 bra 	$L__BB0_598;

	not.pred 	%p341, %p12;
	@%p341 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4095;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4880, %r1191, %r403;
	mul.wide.s32 	%rd409, %r4880, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;

$L__BB0_596:
	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4095;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4882, %r1191, %r404;
	mul.wide.s32 	%rd411, %r4882, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_598:
	mul.lo.s32 	%r1192, %r4761, %r1592;
	add.s32 	%r4885, %r1177, %r1192;
	mul.lo.s32 	%r4886, %r4885, %r48;
	sub.s32 	%r1193, %r4886, %r1568;
	@%p15 bra 	$L__BB0_603;

	not.pred 	%p344, %p11;
	@%p344 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7156;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4888, %r1193, %r389;
	mul.wide.s32 	%rd413, %r4888, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;

$L__BB0_601:
	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7156;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4890, %r1193, %r390;
	mul.wide.s32 	%rd415, %r4890, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;

$L__BB0_603:
	@%p15 bra 	$L__BB0_608;

	not.pred 	%p347, %p12;
	@%p347 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7155;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4892, %r1193, %r403;
	mul.wide.s32 	%rd417, %r4892, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;

$L__BB0_606:
	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7155;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4894, %r1193, %r404;
	mul.wide.s32 	%rd419, %r4894, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_608:
	sub.s32 	%r6889, %r646, %r1564;
	add.s32 	%r4896, %r6889, %r1184;
	mul.lo.s32 	%r1194, %r4896, %r1592;
	add.s32 	%r4897, %r1177, %r1194;
	mul.lo.s32 	%r4898, %r4897, %r48;
	sub.s32 	%r1195, %r4898, %r1568;
	@%p15 bra 	$L__BB0_613;

	not.pred 	%p350, %p11;
	@%p350 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1095;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4900, %r1195, %r389;
	mul.wide.s32 	%rd421, %r4900, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;

$L__BB0_611:
	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1095;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4902, %r1195, %r390;
	mul.wide.s32 	%rd423, %r4902, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;

$L__BB0_613:
	@%p15 bra 	$L__BB0_618;

	not.pred 	%p353, %p12;
	@%p353 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1101;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4904, %r1195, %r403;
	mul.wide.s32 	%rd425, %r4904, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;

$L__BB0_616:
	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1101;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4906, %r1195, %r404;
	mul.wide.s32 	%rd427, %r4906, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_618:
	mul.lo.s32 	%r1196, %r4747, %r1592;
	add.s32 	%r4909, %r1168, %r1196;
	mul.lo.s32 	%r4910, %r4909, %r48;
	sub.s32 	%r1197, %r4910, %r1568;
	@%p15 bra 	$L__BB0_623;

	not.pred 	%p356, %p11;
	@%p356 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7154;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4912, %r1197, %r389;
	mul.wide.s32 	%rd429, %r4912, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;

$L__BB0_621:
	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7154;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4914, %r1197, %r390;
	mul.wide.s32 	%rd431, %r4914, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;

$L__BB0_623:
	@%p15 bra 	$L__BB0_628;

	not.pred 	%p359, %p12;
	@%p359 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7153;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4916, %r1197, %r403;
	mul.wide.s32 	%rd433, %r4916, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;

$L__BB0_626:
	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7153;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4918, %r1197, %r404;
	mul.wide.s32 	%rd435, %r4918, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_628:
	add.s32 	%r4919, %r1168, %r1192;
	mul.lo.s32 	%r4920, %r4919, %r48;
	sub.s32 	%r1198, %r4920, %r1568;
	@%p15 bra 	$L__BB0_633;

	not.pred 	%p362, %p11;
	@%p362 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7152;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4922, %r1198, %r389;
	mul.wide.s32 	%rd437, %r4922, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;

$L__BB0_631:
	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7152;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4924, %r1198, %r390;
	mul.wide.s32 	%rd439, %r4924, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;

$L__BB0_633:
	@%p15 bra 	$L__BB0_638;

	not.pred 	%p365, %p12;
	@%p365 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7151;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4926, %r1198, %r403;
	mul.wide.s32 	%rd441, %r4926, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;

$L__BB0_636:
	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7151;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4928, %r1198, %r404;
	mul.wide.s32 	%rd443, %r4928, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_638:
	add.s32 	%r4929, %r1168, %r1194;
	mul.lo.s32 	%r4930, %r4929, %r48;
	sub.s32 	%r1199, %r4930, %r1568;
	@%p15 bra 	$L__BB0_643;

	not.pred 	%p368, %p11;
	@%p368 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7150;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4932, %r1199, %r389;
	mul.wide.s32 	%rd445, %r4932, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;

$L__BB0_641:
	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7150;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4934, %r1199, %r390;
	mul.wide.s32 	%rd447, %r4934, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;

$L__BB0_643:
	@%p15 bra 	$L__BB0_648;

	not.pred 	%p371, %p12;
	@%p371 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7149;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4936, %r1199, %r403;
	mul.wide.s32 	%rd449, %r4936, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;

$L__BB0_646:
	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7149;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4938, %r1199, %r404;
	mul.wide.s32 	%rd451, %r4938, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_648:
	add.s32 	%r6894, %r1168, 1;
	add.s32 	%r4939, %r6894, %r1196;
	mul.lo.s32 	%r4940, %r4939, %r48;
	sub.s32 	%r1200, %r4940, %r1568;
	@%p15 bra 	$L__BB0_653;

	not.pred 	%p374, %p11;
	@%p374 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7148;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4942, %r1200, %r389;
	mul.wide.s32 	%rd453, %r4942, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;

$L__BB0_651:
	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7148;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4944, %r1200, %r390;
	mul.wide.s32 	%rd455, %r4944, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;

$L__BB0_653:
	@%p15 bra 	$L__BB0_658;

	not.pred 	%p377, %p12;
	@%p377 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7147;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4946, %r1200, %r403;
	mul.wide.s32 	%rd457, %r4946, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;

$L__BB0_656:
	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7147;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4948, %r1200, %r404;
	mul.wide.s32 	%rd459, %r4948, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_658:
	add.s32 	%r6895, %r1168, 1;
	add.s32 	%r4949, %r6895, %r1192;
	mul.lo.s32 	%r4950, %r4949, %r48;
	sub.s32 	%r1201, %r4950, %r1568;
	@%p15 bra 	$L__BB0_663;

	not.pred 	%p380, %p11;
	@%p380 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7146;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4952, %r1201, %r389;
	mul.wide.s32 	%rd461, %r4952, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;

$L__BB0_661:
	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7146;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4954, %r1201, %r390;
	mul.wide.s32 	%rd463, %r4954, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;

$L__BB0_663:
	@%p15 bra 	$L__BB0_668;

	not.pred 	%p383, %p12;
	@%p383 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7145;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4956, %r1201, %r403;
	mul.wide.s32 	%rd465, %r4956, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;

$L__BB0_666:
	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7145;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4958, %r1201, %r404;
	mul.wide.s32 	%rd467, %r4958, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_668:
	add.s32 	%r6896, %r1168, 1;
	add.s32 	%r4959, %r6896, %r1194;
	mul.lo.s32 	%r4960, %r4959, %r48;
	sub.s32 	%r1202, %r4960, %r1568;
	@%p15 bra 	$L__BB0_673;

	not.pred 	%p386, %p11;
	@%p386 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7144;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4962, %r1202, %r389;
	mul.wide.s32 	%rd469, %r4962, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;

$L__BB0_671:
	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7144;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4964, %r1202, %r390;
	mul.wide.s32 	%rd471, %r4964, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;

$L__BB0_673:
	@%p15 bra 	$L__BB0_678;

	not.pred 	%p389, %p12;
	@%p389 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7143;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4966, %r1202, %r403;
	mul.wide.s32 	%rd473, %r4966, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;

$L__BB0_676:
	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7143;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4968, %r1202, %r404;
	mul.wide.s32 	%rd475, %r4968, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_678:
	add.s32 	%r4969, %r1190, %r1194;
	mul.lo.s32 	%r4970, %r4969, %r48;
	sub.s32 	%r1203, %r4970, %r1568;
	@%p15 bra 	$L__BB0_683;

	not.pred 	%p392, %p11;
	@%p392 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1150;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4972, %r1203, %r389;
	mul.wide.s32 	%rd477, %r4972, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;

$L__BB0_681:
	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1150;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4974, %r1203, %r390;
	mul.wide.s32 	%rd479, %r4974, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;

$L__BB0_683:
	@%p15 bra 	$L__BB0_688;

	not.pred 	%p395, %p12;
	@%p395 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1151;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4976, %r1203, %r403;
	mul.wide.s32 	%rd481, %r4976, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;

$L__BB0_686:
	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1151;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4978, %r1203, %r404;
	mul.wide.s32 	%rd483, %r4978, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_688:
	sub.s32 	%r6890, %r646, %r1564;
	add.s32 	%r1204, %r6890, 1;
	add.s32 	%r4979, %r1204, %r1172;
	mad.lo.s32 	%r4981, %r4979, %r1592, %r1168;
	mul.lo.s32 	%r4982, %r4981, %r48;
	sub.s32 	%r1205, %r4982, %r1568;
	@%p15 bra 	$L__BB0_693;

	not.pred 	%p398, %p11;
	@%p398 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7142;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4984, %r1205, %r389;
	mul.wide.s32 	%rd485, %r4984, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;

$L__BB0_691:
	not.pred 	%p399, %p13;
	@%p399 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7142;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4986, %r1205, %r390;
	mul.wide.s32 	%rd487, %r4986, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;

$L__BB0_693:
	@%p15 bra 	$L__BB0_698;

	not.pred 	%p401, %p12;
	@%p401 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7141;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4988, %r1205, %r403;
	mul.wide.s32 	%rd489, %r4988, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;

$L__BB0_696:
	not.pred 	%p402, %p14;
	@%p402 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7141;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4990, %r1205, %r404;
	mul.wide.s32 	%rd491, %r4990, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_698:
	add.s32 	%r4992, %r1204, %r1184;
	mul.lo.s32 	%r1206, %r4992, %r1592;
	add.s32 	%r4993, %r1168, %r1206;
	mul.lo.s32 	%r4994, %r4993, %r48;
	sub.s32 	%r1207, %r4994, %r1568;
	@%p15 bra 	$L__BB0_703;

	not.pred 	%p404, %p11;
	@%p404 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7140;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4996, %r1207, %r389;
	mul.wide.s32 	%rd493, %r4996, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;

$L__BB0_701:
	not.pred 	%p405, %p13;
	@%p405 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7140;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4998, %r1207, %r390;
	mul.wide.s32 	%rd495, %r4998, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;

$L__BB0_703:
	@%p15 bra 	$L__BB0_708;

	not.pred 	%p407, %p12;
	@%p407 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7139;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5000, %r1207, %r403;
	mul.wide.s32 	%rd497, %r5000, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;

$L__BB0_706:
	not.pred 	%p408, %p14;
	@%p408 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7139;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5002, %r1207, %r404;
	mul.wide.s32 	%rd499, %r5002, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_708:
	add.s32 	%r6897, %r1168, 1;
	add.s32 	%r5003, %r6897, %r1206;
	mul.lo.s32 	%r5004, %r5003, %r48;
	sub.s32 	%r1208, %r5004, %r1568;
	@%p15 bra 	$L__BB0_713;

	not.pred 	%p410, %p11;
	@%p410 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7138;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5006, %r1208, %r389;
	mul.wide.s32 	%rd501, %r5006, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;

$L__BB0_711:
	not.pred 	%p411, %p13;
	@%p411 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7138;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5008, %r1208, %r390;
	mul.wide.s32 	%rd503, %r5008, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;

$L__BB0_713:
	@%p15 bra 	$L__BB0_718;

	not.pred 	%p413, %p12;
	@%p413 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7137;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5010, %r1208, %r403;
	mul.wide.s32 	%rd505, %r5010, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;

$L__BB0_716:
	not.pred 	%p414, %p14;
	@%p414 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7137;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5012, %r1208, %r404;
	mul.wide.s32 	%rd507, %r5012, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_718:
	setp.ne.s32 	%p415, %r31, %r1962;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p415 bra 	$L__BB0_720;

	mad.lo.s32 	%r5014, %r644, %r1553, %r34;
	mul.lo.s32 	%r5015, %r1551, %r5014;
	mul.lo.s32 	%r5016, %r5015, 768;
	mad.lo.s32 	%r5018, %r32, 384, %r5016;
	add.s32 	%r5019, %r5018, -64;
	mul.wide.s32 	%rd510, %r5019, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3539, %r3616, %r1095, %r1101};
	st.global.v4.u32 	[%rd513+1024], {%r3306, %r3383, %r1041, %r1053};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3582, %r3648};
	st.global.v2.u32 	[%rd515+1536], {%r3349, %r3415};

$L__BB0_720:
	setp.ne.s32 	%p416, %r32, %r1967;
	@%p416 bra 	$L__BB0_725;

	ld.param.u64 	%rd552, [%rd1+80];
	cvta.to.global.u64 	%rd551, %rd552;
	not.b32 	%r6887, %r31;
	add.s32 	%r6886, %r1550, %r6887;
	setp.eq.s32 	%p417, %r31, %r1962;
	mad.lo.s32 	%r5022, %r645, %r1552, %r33;
	mul.lo.s32 	%r5026, %r5022, %r1613;
	mad.lo.s32 	%r5029, %r6886, 384, %r5026;
	add.s32 	%r5030, %r5029, -64;
	mad.lo.s32 	%r5033, %r1615, %r59, %r5030;
	mul.wide.s32 	%rd516, %r5033, 4;
	add.s64 	%rd517, %rd551, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3460, %r3494, %r1065, %r1077};
	st.global.v4.u32 	[%rd519+1024], {%r4061, %r4095, %r1150, %r1151};
	add.s64 	%rd35, %rd517, %rd277;
	@%p417 bra 	$L__BB0_723;

	st.global.v2.u32 	[%rd35], {%r3349, %r3415};

$L__BB0_723:
	st.global.v2.u32 	[%rd35+768], {%r3920, %r4001};
	@%p208 bra 	$L__BB0_725;

	st.global.v2.u32 	[%rd35+1536], {%r7265, %r7264};

$L__BB0_725:
	setp.ge.s32 	%p419, %r31, %r1962;
	@%p419 bra 	$L__BB0_727;

	add.s32 	%r6885, %r60, %r60;
	mul.lo.s32 	%r5034, %r1551, 320;
	mul.lo.s32 	%r5036, %r32, 320;
	mad.lo.s32 	%r5037, %r5034, %r31, %r5036;
	add.s32 	%r5040, %r6885, -64;
	mad.lo.s32 	%r5045, %r5040, %r1967, %r1964;
	add.s32 	%r5046, %r5037, %r5045;
	shl.b32 	%r5047, %r5046, 2;
	mov.u32 	%r5048, _ZN6kernel5shmemE;
	add.s32 	%r5049, %r5048, %r5047;
	shl.b32 	%r5050, %r36, 4;
	add.s32 	%r5051, %r5049, %r5050;
	st.shared.v4.u32 	[%r5051], {%r7313, %r7312, %r7308, %r7306};
	shl.b32 	%r5052, %r36, 3;
	add.s32 	%r5053, %r5049, %r5052;
	st.shared.v2.u32 	[%r5053+512], {%r7112, %r7107};
	st.shared.v4.u32 	[%r5051+768], {%r7136, %r7127, %r7099, %r7095};

$L__BB0_727:
	setp.ge.s32 	%p420, %r32, %r1967;
	@%p420 bra 	$L__BB0_731;

	not.b32 	%r6884, %r31;
	add.s32 	%r6883, %r1550, %r6884;
	mad.lo.s32 	%r5059, %r6883, 384, %r1970;
	mad.lo.s32 	%r5063, %r1965, %r32, %r5059;
	add.s32 	%r5069, %r5063, %r1968;
	shl.b32 	%r5070, %r5069, 2;
	mov.u32 	%r5071, _ZN6kernel5shmemE;
	add.s32 	%r5072, %r5071, %r5070;
	shl.b32 	%r5073, %r36, 3;
	add.s32 	%r5074, %r5072, %r5073;
	@%p419 bra 	$L__BB0_730;

	add.s32 	%r6868, %r5074, -256;
	st.shared.v2.u32 	[%r6868], {%r7131, %r7124};

$L__BB0_730:
	shl.b32 	%r5094, %r36, 4;
	add.s32 	%r5095, %r5072, %r5094;
	st.shared.v4.u32 	[%r5095], {%r7122, %r7118, %r7087, %r7083};
	add.s32 	%r6869, %r5074, -256;
	st.shared.v2.u32 	[%r6869+768], {%r7090, %r7084};
	st.shared.v4.u32 	[%r5095+768], {%r7311, %r7310, %r7299, %r7298};

$L__BB0_731:
	bar.sync 	0;
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7370, %r7035;
	mov.u32 	%r7371, %r7036;
	mov.u32 	%r7356, %r7037;
	mov.u32 	%r7357, %r7038;
	mov.u32 	%r7358, %r7039;
	mov.u32 	%r7359, %r7040;
	mov.u32 	%r7372, %r7041;
	mov.u32 	%r7374, %r7043;
	mov.u32 	%r7362, %r7047;
	mov.u32 	%r7363, %r7048;
	mov.u32 	%r7364, %r7049;
	mov.u32 	%r7365, %r7050;
	@%p208 bra 	$L__BB0_735;

	setp.eq.s32 	%p423, %r32, 0;
	mad.lo.s32 	%r5098, %r644, %r1553, %r34;
	mad.lo.s32 	%r5099, %r5098, 768, 384;
	mul.lo.s32 	%r5100, %r5099, %r1551;
	mad.lo.s32 	%r5101, %r32, 384, %r5100;
	add.s32 	%r5102, %r5101, -128;
	mul.wide.s32 	%rd522, %r5102, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7370, %r7035;
	mov.u32 	%r7371, %r7036;
	mov.u32 	%r7372, %r7041;
	mov.u32 	%r7374, %r7043;
	@%p423 bra 	$L__BB0_734;

	ld.global.v4.u32 	{%r7371, %r7370, %r7374, %r7372}, [%rd37+-512];

$L__BB0_734:
	ld.global.v4.u32 	{%r7358, %r7356, %r7359, %r7357}, [%rd37];
	ld.global.v4.u32 	{%r7365, %r7364, %r7363, %r7362}, [%rd37+512];
	ld.global.v4.u32 	{%r7367, %r7366, %r7369, %r7368}, [%rd37+1024];

$L__BB0_735:
	mov.u32 	%r7373, %r7042;
	mov.u32 	%r7375, %r7044;
	mov.u32 	%r7376, %r7045;
	mov.u32 	%r7377, %r7046;
	mov.u32 	%r7378, %r7051;
	mov.u32 	%r7379, %r7052;
	mov.u32 	%r7380, %r7053;
	mov.u32 	%r7381, %r7054;
	@%p211 bra 	$L__BB0_737;

	not.b32 	%r6882, %r31;
	add.s32 	%r6881, %r1550, %r6882;
	mad.lo.s32 	%r5120, %r645, %r1552, %r33;
	mad.lo.s32 	%r5126, %r6881, 384, %r60;
	mad.lo.s32 	%r5127, %r5120, %r1613, %r5126;
	mad.lo.s32 	%r5130, %r1615, %r59, %r5127;
	mul.wide.s32 	%rd526, %r5130, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7383, %r7382, %r7385, %r7384}, [%rd529];
	ld.global.v4.u32 	{%r7381, %r7379, %r7377, %r7376}, [%rd529+512];
	ld.global.v4.u32 	{%r7380, %r7378, %r7375, %r7373}, [%rd529+1024];
	ld.global.v4.u32 	{%r7371, %r7370, %r7374, %r7372}, [%rd529+1536];

$L__BB0_737:
	neg.s32 	%r6875, %r1555;
	not.b32 	%r6874, %r34;
	add.s32 	%r6873, %r1553, %r6874;
	mul.lo.s32 	%r6872, %r6873, %r1554;
	not.b32 	%r6871, %r33;
	add.s32 	%r6870, %r1552, %r6871;
	mad.lo.s32 	%r5154, %r6870, %r1554, %r6872;
	add.s32 	%r5155, %r5154, %r1555;
	add.s32 	%r5164, %r5155, %r2374;
	add.s32 	%r1287, %r7163, 1;
	add.s32 	%r5165, %r1287, %r5164;
	div.s32 	%r5166, %r5165, %r1555;
	mad.lo.s32 	%r1288, %r5166, %r6875, %r5165;
	mad.lo.s32 	%r5173, %r5166, %r38, %r2385;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5174, %r5173, %r1556;
	shr.u32 	%r5175, %r5174, 31;
	add.s32 	%r5176, %r5174, %r5175;
	shr.s32 	%r5177, %r5176, 1;
	mad.lo.s32 	%r5178, %r5177, %r1555, %r1288;
	shl.b32 	%r5179, %r5178, 5;
	add.s32 	%r5180, %r5179, %r36;
	cvt.s64.s32 	%rd38, %r5180;
	mul.wide.s32 	%rd532, %r5180, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7165, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p74 bra 	$L__BB0_739;
	bra.uni 	$L__BB0_738;

$L__BB0_739:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7164, [%rd538];
	bra.uni 	$L__BB0_740;

$L__BB0_738:
	shl.b32 	%r5181, %r1288, 5;
	add.s32 	%r5182, %r5181, %r36;
	mul.wide.s32 	%rd535, %r5182, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5183, %r5184, %r5185, %r5186}, [%rd536];
	mov.u32 	%r6995, %r6999;
	mov.u32 	%r6996, %r7000;
	mov.u32 	%r6997, %r7001;
	mov.u32 	%r6998, %r7002;
	mov.u32 	%r6999, %r7003;
	mov.u32 	%r7000, %r7004;
	mov.u32 	%r7001, %r7005;
	mov.u32 	%r7002, %r7006;
	mov.u32 	%r7003, %r5186;
	mov.u32 	%r7004, %r5185;
	mov.u32 	%r7005, %r5184;
	mov.u32 	%r7006, %r5183;

$L__BB0_740:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5187, {low,high};}

	// end inline asm
	selp.b32 	%r5189, %r6990, %r5187, %p15;
	// begin inline asm
	{mul.f16x2 %r5188,%r5189,%r7133;
}
	// end inline asm
	selp.b32 	%r5192, %r6994, %r5187, %p15;
	// begin inline asm
	{mul.f16x2 %r5191,%r5192,%r7126;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5194, {low,high};}

	// end inline asm
	selp.b32 	%r5196, %r6990, %r5194, %p15;
	// begin inline asm
	{mul.f16x2 %r5195,%r5196,%r7114;
}
	// end inline asm
	selp.b32 	%r5199, %r6994, %r5194, %p15;
	// begin inline asm
	{mul.f16x2 %r5198,%r5199,%r7109;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5201, {low,high};}

	// end inline asm
	selp.b32 	%r5203, %r6990, %r5201, %p15;
	// begin inline asm
	{mul.f16x2 %r5202,%r5203,%r7101;
}
	// end inline asm
	selp.b32 	%r5206, %r6994, %r5201, %p15;
	// begin inline asm
	{mul.f16x2 %r5205,%r5206,%r7100;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5208, {low,high};}

	// end inline asm
	selp.b32 	%r5210, %r6990, %r5208, %p15;
	// begin inline asm
	{mul.f16x2 %r5209,%r5210,%r7105;
}
	// end inline asm
	selp.b32 	%r5213, %r6994, %r5208, %p15;
	// begin inline asm
	{mul.f16x2 %r5212,%r5213,%r7104;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5215, {low,high};}

	// end inline asm
	selp.b32 	%r5217, %r6990, %r5215, %p15;
	// begin inline asm
	{mul.f16x2 %r5216,%r5217,%r7103;
}
	// end inline asm
	selp.b32 	%r5220, %r6994, %r5215, %p15;
	// begin inline asm
	{mul.f16x2 %r5219,%r5220,%r7097;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5222, {low,high};}

	// end inline asm
	selp.b32 	%r5224, %r6990, %r5222, %p15;
	// begin inline asm
	{mul.f16x2 %r5223,%r5224,%r7093;
}
	// end inline asm
	selp.b32 	%r5227, %r6994, %r5222, %p15;
	// begin inline asm
	{mul.f16x2 %r5226,%r5227,%r7092;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5229, {low,high};}

	// end inline asm
	selp.b32 	%r5231, %r6990, %r5229, %p15;
	// begin inline asm
	{mul.f16x2 %r5230,%r5231,%r7091;
}
	// end inline asm
	selp.b32 	%r5234, %r6994, %r5229, %p15;
	// begin inline asm
	{mul.f16x2 %r5233,%r5234,%r7085;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5236, {low,high};}

	// end inline asm
	selp.b32 	%r5238, %r6990, %r5236, %p15;
	// begin inline asm
	{mul.f16x2 %r5237,%r5238,%r7078;
}
	// end inline asm
	selp.b32 	%r5241, %r6994, %r5236, %p15;
	// begin inline asm
	{mul.f16x2 %r5240,%r5241,%r7077;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5243, {low,high};}

	// end inline asm
	selp.b32 	%r5245, %r6990, %r5243, %p15;
	// begin inline asm
	{mul.f16x2 %r5244,%r5245,%r7054;
}
	// end inline asm
	selp.b32 	%r5248, %r6994, %r5243, %p15;
	// begin inline asm
	{mul.f16x2 %r5247,%r5248,%r7052;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5250, {low,high};}

	// end inline asm
	selp.b32 	%r5252, %r6990, %r5250, %p15;
	// begin inline asm
	{mul.f16x2 %r5251,%r5252,%r7053;
}
	// end inline asm
	selp.b32 	%r5255, %r6994, %r5250, %p15;
	// begin inline asm
	{mul.f16x2 %r5254,%r5255,%r7051;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5257, {low,high};}

	// end inline asm
	selp.b32 	%r5259, %r6990, %r5257, %p15;
	// begin inline asm
	{mul.f16x2 %r5258,%r5259,%r7070;
}
	// end inline asm
	selp.b32 	%r5262, %r6994, %r5257, %p15;
	// begin inline asm
	{mul.f16x2 %r5261,%r5262,%r7069;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5264, {low,high};}

	// end inline asm
	selp.b32 	%r5266, %r6990, %r5264, %p15;
	// begin inline asm
	{mul.f16x2 %r5265,%r5266,%r7074;
}
	// end inline asm
	selp.b32 	%r5269, %r6994, %r5264, %p15;
	// begin inline asm
	{mul.f16x2 %r5268,%r5269,%r7073;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5271, {low,high};}

	// end inline asm
	selp.b32 	%r5273, %r6990, %r5271, %p15;
	// begin inline asm
	{mul.f16x2 %r5272,%r5273,%r7072;
}
	// end inline asm
	selp.b32 	%r5276, %r6994, %r5271, %p15;
	// begin inline asm
	{mul.f16x2 %r5275,%r5276,%r7067;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5278, {low,high};}

	// end inline asm
	selp.b32 	%r5280, %r6990, %r5278, %p15;
	// begin inline asm
	{mul.f16x2 %r5279,%r5280,%r7062;
}
	// end inline asm
	selp.b32 	%r5283, %r6994, %r5278, %p15;
	// begin inline asm
	{mul.f16x2 %r5282,%r5283,%r7061;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5285, {low,high};}

	// end inline asm
	selp.b32 	%r5287, %r6990, %r5285, %p15;
	// begin inline asm
	{mul.f16x2 %r5286,%r5287,%r7064;
}
	// end inline asm
	selp.b32 	%r5290, %r6994, %r5285, %p15;
	// begin inline asm
	{mul.f16x2 %r5289,%r5290,%r7063;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5292, {low,high};}

	// end inline asm
	selp.b32 	%r5294, %r6990, %r5292, %p15;
	// begin inline asm
	{mul.f16x2 %r5293,%r5294,%r7050;
}
	// end inline asm
	selp.b32 	%r5297, %r6994, %r5292, %p15;
	// begin inline asm
	{mul.f16x2 %r5296,%r5297,%r7049;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5299, {low,high};}

	// end inline asm
	selp.b32 	%r5301, %r6990, %r5299, %p15;
	// begin inline asm
	{mul.f16x2 %r5300,%r5301,%r7048;
}
	// end inline asm
	selp.b32 	%r5304, %r6994, %r5299, %p15;
	// begin inline asm
	{mul.f16x2 %r5303,%r5304,%r7047;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5306, {low,high};}

	// end inline asm
	selp.b32 	%r5308, %r6990, %r5306, %p15;
	// begin inline asm
	{mul.f16x2 %r5307,%r5308,%r7046;
}
	// end inline asm
	selp.b32 	%r5311, %r6994, %r5306, %p15;
	// begin inline asm
	{mul.f16x2 %r5310,%r5311,%r7045;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5313, {low,high};}

	// end inline asm
	selp.b32 	%r5315, %r6990, %r5313, %p15;
	// begin inline asm
	{mul.f16x2 %r5314,%r5315,%r7056;
}
	// end inline asm
	selp.b32 	%r5318, %r6994, %r5313, %p15;
	// begin inline asm
	{mul.f16x2 %r5317,%r5318,%r7055;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5320, {low,high};}

	// end inline asm
	selp.b32 	%r5322, %r6990, %r5320, %p15;
	// begin inline asm
	{mul.f16x2 %r5321,%r5322,%r7044;
}
	// end inline asm
	selp.b32 	%r5325, %r6994, %r5320, %p15;
	// begin inline asm
	{mul.f16x2 %r5324,%r5325,%r7042;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5327, {low,high};}

	// end inline asm
	selp.b32 	%r5329, %r6990, %r5327, %p15;
	// begin inline asm
	{mul.f16x2 %r5328,%r5329,%r7043;
}
	// end inline asm
	selp.b32 	%r5332, %r6994, %r5327, %p15;
	// begin inline asm
	{mul.f16x2 %r5331,%r5332,%r7041;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5334, {low,high};}

	// end inline asm
	selp.b32 	%r5336, %r6990, %r5334, %p15;
	// begin inline asm
	{mul.f16x2 %r5335,%r5336,%r7040;
}
	// end inline asm
	selp.b32 	%r5339, %r6994, %r5334, %p15;
	// begin inline asm
	{mul.f16x2 %r5338,%r5339,%r7038;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5341, {low,high};}

	// end inline asm
	selp.b32 	%r5343, %r6990, %r5341, %p15;
	// begin inline asm
	{mul.f16x2 %r5342,%r5343,%r7039;
}
	// end inline asm
	selp.b32 	%r5346, %r6994, %r5341, %p15;
	// begin inline asm
	{mul.f16x2 %r5345,%r5346,%r7037;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5348, {low,high};}

	// end inline asm
	selp.b32 	%r5350, %r6990, %r5348, %p15;
	// begin inline asm
	{mul.f16x2 %r5349,%r5350,%r7036;
}
	// end inline asm
	selp.b32 	%r5353, %r6994, %r5348, %p15;
	// begin inline asm
	{mul.f16x2 %r5352,%r5353,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5355,%r7160,%r3349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5358,%r3460,%r3306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5361,%r5355,%r5358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5364,%r6898,%r5361;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5367,%r5188,%r5364;
}
	// end inline asm
	selp.b32 	%r7128, %r5188, %r5367, %p15;
	// begin inline asm
	{sub.f16x2 %r5370,%r7159,%r3415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5373,%r3494,%r3383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5376,%r5370,%r5373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5379,%r6898,%r5376;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5382,%r5191,%r5379;
}
	// end inline asm
	selp.b32 	%r7123, %r5191, %r5382, %p15;
	// begin inline asm
	{sub.f16x2 %r5385,%r7156,%r3582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5388,%r7162,%r3539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5391,%r5385,%r5388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5394,%r6898,%r5391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5397,%r5195,%r5394;
}
	// end inline asm
	selp.b32 	%r7132, %r5195, %r5397, %p15;
	// begin inline asm
	{sub.f16x2 %r5400,%r7155,%r3648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5403,%r7161,%r3616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5406,%r5400,%r5403;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5409,%r6898,%r5406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5412,%r5198,%r5409;
}
	// end inline asm
	selp.b32 	%r7125, %r5198, %r5412, %p15;
	// begin inline asm
	{sub.f16x2 %r5415,%r7159,%r7160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5418,%r6989,%r5415;
}
	// end inline asm
	@%p15 bra 	$L__BB0_742;
	bra.uni 	$L__BB0_741;

$L__BB0_742:
	// begin inline asm
	{neg.f16x2 %r7399,%r5202;
}
	// end inline asm
	bra.uni 	$L__BB0_743;

$L__BB0_741:
	// begin inline asm
	{mul.f16x2 %r7399,%r6990,%r5415;
}
	// end inline asm

$L__BB0_743:
	mov.u32 	%r5429, 31;
	mov.u32 	%r5431, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5427,%r7399,%r5429,%r2070,%r5431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5432,%r5418,%r5427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5435,%r1065,%r1041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5438,%r5435,%r5432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5441,%r6898,%r5438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7130,%r5202,%r5441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5447,%r7161,%r7162;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5450,%r6989,%r5447;
}
	// end inline asm
	mov.u32 	%r7400, %r5209;
	@%p15 bra 	$L__BB0_745;

	// begin inline asm
	{mul.f16x2 %r7400,%r6990,%r5447;
}
	// end inline asm

$L__BB0_745:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5459,%r7400,%r5429,%r2070,%r5431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5464,%r5450,%r5459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5467,%r7150,%r1041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5470,%r5464,%r5467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5473,%r6898,%r5470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7135,%r5209,%r5473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5479,%r7152,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5482,%r7158,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5485,%r5479,%r5482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5488,%r6898,%r5485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5491,%r5216,%r5488;
}
	// end inline asm
	selp.b32 	%r7133, %r5216, %r5491, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7160;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5496,%r7160,%r424,%r2070,%r5431;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5496;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5502, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5503,%r5502,%r7159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5506,%r6993,%r5503;
}
	// end inline asm
	@%p15 bra 	$L__BB0_747;
	bra.uni 	$L__BB0_746;

$L__BB0_747:
	// begin inline asm
	{neg.f16x2 %r7401,%r5205;
}
	// end inline asm
	bra.uni 	$L__BB0_748;

$L__BB0_746:
	// begin inline asm
	{mul.f16x2 %r7401,%r6994,%r5503;
}
	// end inline asm

$L__BB0_748:
	mov.u32 	%r5521, 31;
	mov.u32 	%r5545, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5519,%r7401,%r5521,%r2070,%r5545;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5524,%r5506,%r5519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5527,%r1077,%r1053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5530,%r5527,%r5524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5533,%r6898,%r5530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r5205,%r5533;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7162;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5541,%r7162,%r424,%r2070,%r5545;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5541;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5547, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5548,%r5547,%r7161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5551,%r6993,%r5548;
}
	// end inline asm
	mov.u32 	%r7402, %r5212;
	@%p15 bra 	$L__BB0_750;

	// begin inline asm
	{mul.f16x2 %r7402,%r6994,%r5548;
}
	// end inline asm

$L__BB0_750:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5562,%r7402,%r5521,%r2070,%r5545;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5567,%r5551,%r5562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5570,%r7149,%r1053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5573,%r5567,%r5570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5576,%r6898,%r5573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7134,%r5212,%r5576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5582,%r7151,%r7159;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5585,%r7157,%r7161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5588,%r5582,%r5585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5591,%r6898,%r5588;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5594,%r5219,%r5591;
}
	// end inline asm
	selp.b32 	%r7126, %r5219, %r5594, %p15;
	// begin inline asm
	{sub.f16x2 %r5597,%r7157,%r7158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5600,%r6989,%r5597;
}
	// end inline asm
	mov.u32 	%r7403, %r5223;
	@%p15 bra 	$L__BB0_752;

	// begin inline asm
	{mul.f16x2 %r7403,%r6990,%r5597;
}
	// end inline asm

$L__BB0_752:
	mov.u32 	%r5611, 31;
	mov.u32 	%r5650, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5609,%r7403,%r5611,%r2070,%r5650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5614,%r5600,%r5609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5617,%r7144,%r1065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5620,%r5614,%r5617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5623,%r6898,%r5620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7121,%r5223,%r5623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5629,%r7146,%r3920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5632,%r4061,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5635,%r5629,%r5632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5638,%r6898,%r5635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5641,%r5230,%r5638;
}
	// end inline asm
	selp.b32 	%r7119, %r5230, %r5641, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7158;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5646,%r7158,%r424,%r2070,%r5650;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5646;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5652, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5653,%r5652,%r7157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5656,%r6993,%r5653;
}
	// end inline asm
	mov.u32 	%r7404, %r5226;
	@%p15 bra 	$L__BB0_754;

	// begin inline asm
	{mul.f16x2 %r7404,%r6994,%r5653;
}
	// end inline asm

$L__BB0_754:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5667,%r7404,%r5611,%r2070,%r5650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5672,%r5656,%r5667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5675,%r7143,%r1077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5678,%r5672,%r5675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5681,%r6898,%r5678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7120,%r5226,%r5681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5687,%r7145,%r4001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5690,%r4095,%r7157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5693,%r5687,%r5690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5696,%r6898,%r5693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5699,%r5233,%r5696;
}
	// end inline asm
	selp.b32 	%r7117, %r5233, %r5699, %p15;
	// begin inline asm
	{sub.f16x2 %r5702,%r7155,%r7156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5705,%r6989,%r5702;
}
	// end inline asm
	@%p15 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r7405,%r5237;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r7405,%r6990,%r5702;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5718, 31;
	mov.u32 	%r5720, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5716,%r7405,%r5718,%r2070,%r5720;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5721,%r5705,%r5716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5724,%r7150,%r1095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5727,%r5724,%r5721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5730,%r6898,%r5727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r5237,%r5730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5736,%r7276,%r7277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5739,%r6989,%r5736;
}
	// end inline asm
	mov.u32 	%r7406, %r5244;
	@%p15 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r7406,%r6990,%r5736;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5748,%r7406,%r5718,%r2070,%r5720;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5753,%r5739,%r5748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5756,%r7274,%r1095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5759,%r5753,%r5756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5762,%r6898,%r5759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7116,%r5244,%r5762;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r7275,%r7156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r7154,%r7277;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5774,%r5768,%r5771;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5777,%r6898,%r5774;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5780,%r5251,%r5777;
}
	// end inline asm
	selp.b32 	%r7114, %r5251, %r5780, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7156;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5785,%r7156,%r424,%r2070,%r5720;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5785;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5791, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5792,%r5791,%r7155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5795,%r6993,%r5792;
}
	// end inline asm
	@%p15 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r7407,%r5240;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r7407,%r6994,%r5792;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5810, 31;
	mov.u32 	%r5834, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5808,%r7407,%r5810,%r2070,%r5834;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5813,%r5795,%r5808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5816,%r7149,%r1101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5819,%r5816,%r5813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5822,%r6898,%r5819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7110,%r5240,%r5822;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7277;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5830,%r7277,%r424,%r2070,%r5834;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5830;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5836, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5837,%r5836,%r7276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5840,%r6993,%r5837;
}
	// end inline asm
	mov.u32 	%r7408, %r5247;
	@%p15 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r7408,%r6994,%r5837;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5851,%r7408,%r5810,%r2070,%r5834;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5856,%r5840,%r5851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r7272,%r1101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5856,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r6898,%r5862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7115,%r5247,%r5865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r7273,%r7155;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r7153,%r7276;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5877,%r5871,%r5874;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5880,%r6898,%r5877;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5883,%r5254,%r5880;
}
	// end inline asm
	selp.b32 	%r7109, %r5254, %r5883, %p15;
	// begin inline asm
	{sub.f16x2 %r5886,%r7151,%r7152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5889,%r6989,%r5886;
}
	// end inline asm
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r7409,%r5258;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r7409,%r6990,%r5886;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5902, 31;
	mov.u32 	%r5904, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5900,%r7409,%r5902,%r2070,%r5904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5905,%r5889,%r5900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5908,%r7144,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5911,%r5908,%r5905;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5914,%r6898,%r5911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7101,%r5258,%r5914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5920,%r7153,%r7154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5923,%r6989,%r5920;
}
	// end inline asm
	mov.u32 	%r7410, %r5265;
	@%p15 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r7410,%r6990,%r5920;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5932,%r7410,%r5902,%r2070,%r5904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5937,%r5923,%r5932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5940,%r7140,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5943,%r5937,%r5940;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5946,%r6898,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7105,%r5265,%r5946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r7142,%r7152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5955,%r7148,%r7154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5958,%r5952,%r5955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5961,%r6898,%r5958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5964,%r5272,%r5961;
}
	// end inline asm
	selp.b32 	%r7103, %r5272, %r5964, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7152;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5969,%r7152,%r424,%r2070,%r5904;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5969;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5975, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5976,%r5975,%r7151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5979,%r6993,%r5976;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r7411,%r5261;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r7411,%r6994,%r5976;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r5994, 31;
	mov.u32 	%r6018, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5992,%r7411,%r5994,%r2070,%r6018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5997,%r5979,%r5992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6000,%r7143,%r7149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6003,%r6000,%r5997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6006,%r6898,%r6003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7100,%r5261,%r6006;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7154;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6014,%r7154,%r424,%r2070,%r6018;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6014;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6020, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r6020,%r7153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6024,%r6993,%r6021;
}
	// end inline asm
	mov.u32 	%r7412, %r5268;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r7412,%r6994,%r6021;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6035,%r7412,%r5994,%r2070,%r6018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6040,%r6024,%r6035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6043,%r7139,%r7149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6046,%r6040,%r6043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6049,%r6898,%r6046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7104,%r5268,%r6049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r7141,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6058,%r7147,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6061,%r6055,%r6058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6064,%r6898,%r6061;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6067,%r5275,%r6064;
}
	// end inline asm
	selp.b32 	%r7097, %r5275, %r6067, %p15;
	// begin inline asm
	{sub.f16x2 %r6070,%r7145,%r7146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6073,%r6989,%r6070;
}
	// end inline asm
	@%p15 bra 	$L__BB0_776;
	bra.uni 	$L__BB0_775;

$L__BB0_776:
	// begin inline asm
	{neg.f16x2 %r7413,%r5279;
}
	// end inline asm
	bra.uni 	$L__BB0_777;

$L__BB0_775:
	// begin inline asm
	{mul.f16x2 %r7413,%r6990,%r6070;
}
	// end inline asm

$L__BB0_777:
	mov.u32 	%r6086, 31;
	mov.u32 	%r6088, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6084,%r7413,%r6086,%r2070,%r6088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6089,%r6073,%r6084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r1150,%r7144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6095,%r6092,%r6089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6098,%r6898,%r6095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7089,%r5279,%r6098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6104,%r7147,%r7148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6107,%r6989,%r6104;
}
	// end inline asm
	mov.u32 	%r7414, %r5286;
	@%p15 bra 	$L__BB0_779;

	// begin inline asm
	{mul.f16x2 %r7414,%r6990,%r6104;
}
	// end inline asm

$L__BB0_779:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6116,%r7414,%r6086,%r2070,%r6088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6121,%r6107,%r6116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6124,%r7138,%r7144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6127,%r6121,%r6124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6130,%r6898,%r6127;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7093,%r5286,%r6130;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r7260,%r7146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6139,%r7263,%r7148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6142,%r6136,%r6139;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6145,%r6898,%r6142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6148,%r5293,%r6145;
}
	// end inline asm
	selp.b32 	%r7091, %r5293, %r6148, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7146;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6153,%r7146,%r424,%r2070,%r6088;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6153;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6159, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6160,%r6159,%r7145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6163,%r6993,%r6160;
}
	// end inline asm
	@%p15 bra 	$L__BB0_781;
	bra.uni 	$L__BB0_780;

$L__BB0_781:
	// begin inline asm
	{neg.f16x2 %r7415,%r5282;
}
	// end inline asm
	bra.uni 	$L__BB0_782;

$L__BB0_780:
	// begin inline asm
	{mul.f16x2 %r7415,%r6994,%r6160;
}
	// end inline asm

$L__BB0_782:
	mov.u32 	%r6178, 31;
	mov.u32 	%r6202, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6176,%r7415,%r6178,%r2070,%r6202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6181,%r6163,%r6176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r1151,%r7143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r6184,%r6181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r6898,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7088,%r5282,%r6190;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7148;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6198,%r7148,%r424,%r2070,%r6202;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6198;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6204, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6205,%r6204,%r7147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6208,%r6993,%r6205;
}
	// end inline asm
	mov.u32 	%r7416, %r5289;
	@%p15 bra 	$L__BB0_784;

	// begin inline asm
	{mul.f16x2 %r7416,%r6994,%r6205;
}
	// end inline asm

$L__BB0_784:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6219,%r7416,%r6178,%r2070,%r6202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6224,%r6208,%r6219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r7137,%r7143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6230,%r6224,%r6227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6233,%r6898,%r6230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r5289,%r6233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r7258,%r7145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6242,%r7262,%r7147;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6245,%r6239,%r6242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6248,%r6898,%r6245;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6251,%r5296,%r6248;
}
	// end inline asm
	selp.b32 	%r7085, %r5296, %r6251, %p15;
	// begin inline asm
	{sub.f16x2 %r6254,%r7262,%r7263;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6257,%r6989,%r6254;
}
	// end inline asm
	mov.u32 	%r7417, %r5300;
	@%p15 bra 	$L__BB0_786;

	// begin inline asm
	{mul.f16x2 %r7417,%r6990,%r6254;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6268, 31;
	mov.u32 	%r6292, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6266,%r7417,%r6268,%r2070,%r6292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6271,%r6257,%r6266;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6274,%r7257,%r1150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r6271,%r6274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6280,%r6898,%r6277;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7082,%r5300,%r6280;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7263;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6288,%r7263,%r424,%r2070,%r6292;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6288;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6294, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6295,%r6294,%r7262;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6298,%r6993,%r6295;
}
	// end inline asm
	mov.u32 	%r7418, %r5303;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7418,%r6994,%r6295;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6309,%r7418,%r6268,%r2070,%r6292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6314,%r6298,%r6309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6317,%r7256,%r1151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r6314,%r6317;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6323,%r6898,%r6320;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r5303,%r6323;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6329,%r7273,%r7275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6332,%r6989,%r6329;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7419,%r5307;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7419,%r6990,%r6329;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6345, 31;
	mov.u32 	%r6369, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6343,%r7419,%r6345,%r2070,%r6369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6348,%r6332,%r6343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6351,%r7140,%r7274;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6354,%r6351,%r6348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6357,%r6898,%r6354;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7078,%r5307,%r6357;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7275;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6365,%r7275,%r424,%r2070,%r6369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6365;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6371, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6372,%r6371,%r7273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6375,%r6993,%r6372;
}
	// end inline asm
	@%p15 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	// begin inline asm
	{neg.f16x2 %r7420,%r5310;
}
	// end inline asm
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	// begin inline asm
	{mul.f16x2 %r7420,%r6994,%r6372;
}
	// end inline asm

$L__BB0_794:
	mov.u32 	%r6390, 31;
	mov.u32 	%r6392, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6388,%r7420,%r6390,%r2070,%r6392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6393,%r6375,%r6388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6396,%r7139,%r7272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6399,%r6396,%r6393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6402,%r6898,%r6399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7077,%r5310,%r6402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r7141,%r7142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6411,%r6989,%r6408;
}
	// end inline asm
	@%p15 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7421,%r5314;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7421,%r6990,%r6408;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r6424, 31;
	mov.u32 	%r6426, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6422,%r7421,%r6424,%r2070,%r6426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6427,%r6411,%r6422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6430,%r7138,%r7140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6433,%r6430,%r6427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6436,%r6898,%r6433;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7070,%r5314,%r6436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6442,%r7270,%r7271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6445,%r6989,%r6442;
}
	// end inline asm
	mov.u32 	%r7422, %r5321;
	@%p15 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7422,%r6990,%r6442;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6454,%r7422,%r6424,%r2070,%r6426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6459,%r6445,%r6454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6462,%r7268,%r7140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6465,%r6459,%r6462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6468,%r6898,%r6465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7074,%r5321,%r6468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6474,%r7255,%r7142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6477,%r7261,%r7271;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6480,%r6474,%r6477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6483,%r6898,%r6480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6486,%r5328,%r6483;
}
	// end inline asm
	selp.b32 	%r7072, %r5328, %r6486, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7142;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6491,%r7142,%r424,%r2070,%r6426;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6491;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6497, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6498,%r6497,%r7141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6501,%r6993,%r6498;
}
	// end inline asm
	@%p15 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7423,%r5317;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7423,%r6994,%r6498;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6516, 31;
	mov.u32 	%r6540, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6514,%r7423,%r6516,%r2070,%r6540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r6501,%r6514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r7137,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6525,%r6522,%r6519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6528,%r6898,%r6525;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7069,%r5317,%r6528;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7271;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6536,%r7271,%r424,%r2070,%r6540;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6536;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6542, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6543,%r6542,%r7270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6546,%r6993,%r6543;
}
	// end inline asm
	mov.u32 	%r7424, %r5324;
	@%p15 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7424,%r6994,%r6543;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6557,%r7424,%r6516,%r2070,%r6540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6562,%r6546,%r6557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6565,%r7266,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6568,%r6562,%r6565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6571,%r6898,%r6568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7073,%r5324,%r6571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6577,%r7254,%r7141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6580,%r7259,%r7270;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6583,%r6577,%r6580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6586,%r6898,%r6583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6589,%r5331,%r6586;
}
	// end inline asm
	selp.b32 	%r7067, %r5331, %r6589, %p15;
	// begin inline asm
	{sub.f16x2 %r6592,%r7258,%r7260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6595,%r6989,%r6592;
}
	// end inline asm
	@%p15 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r7425,%r5335;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	// begin inline asm
	{mul.f16x2 %r7425,%r6990,%r6592;
}
	// end inline asm

$L__BB0_807:
	mov.u32 	%r6608, 31;
	mov.u32 	%r6610, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6606,%r7425,%r6608,%r2070,%r6610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6611,%r6595,%r6606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6614,%r7257,%r7138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6617,%r6614,%r6611;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6620,%r6898,%r6617;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r5335,%r6620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6626,%r7259,%r7261;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6629,%r6989,%r6626;
}
	// end inline asm
	mov.u32 	%r7426, %r5342;
	@%p15 bra 	$L__BB0_809;

	// begin inline asm
	{mul.f16x2 %r7426,%r6990,%r6626;
}
	// end inline asm

$L__BB0_809:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6638,%r7426,%r6608,%r2070,%r6610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6643,%r6629,%r6638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6646,%r7253,%r7138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6649,%r6643,%r6646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6652,%r6898,%r6649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7064,%r5342,%r6652;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7260;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6660,%r7260,%r424,%r2070,%r6610;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6660;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6666, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6667,%r6666,%r7258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6670,%r6993,%r6667;
}
	// end inline asm
	@%p15 bra 	$L__BB0_811;
	bra.uni 	$L__BB0_810;

$L__BB0_811:
	// begin inline asm
	{neg.f16x2 %r7427,%r5338;
}
	// end inline asm
	bra.uni 	$L__BB0_812;

$L__BB0_810:
	// begin inline asm
	{mul.f16x2 %r7427,%r6994,%r6667;
}
	// end inline asm

$L__BB0_812:
	mov.u32 	%r6685, 31;
	mov.u32 	%r6709, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6683,%r7427,%r6685,%r2070,%r6709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6688,%r6670,%r6683;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6691,%r7256,%r7137;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6694,%r6691,%r6688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6697,%r6898,%r6694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7061,%r5338,%r6697;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7261;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6705,%r7261,%r424,%r2070,%r6709;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6705;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6711, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6712,%r6711,%r7259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6715,%r6993,%r6712;
}
	// end inline asm
	mov.u32 	%r7428, %r5345;
	@%p15 bra 	$L__BB0_814;

	// begin inline asm
	{mul.f16x2 %r7428,%r6994,%r6712;
}
	// end inline asm

$L__BB0_814:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6726,%r7428,%r6685,%r2070,%r6709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6731,%r6715,%r6726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6734,%r7252,%r7137;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6737,%r6731,%r6734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6740,%r6898,%r6737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7063,%r5345,%r6740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6746,%r7254,%r7255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6749,%r6989,%r6746;
}
	// end inline asm
	@%p15 bra 	$L__BB0_816;
	bra.uni 	$L__BB0_815;

$L__BB0_816:
	// begin inline asm
	{neg.f16x2 %r7429,%r5349;
}
	// end inline asm
	bra.uni 	$L__BB0_817;

$L__BB0_815:
	// begin inline asm
	{mul.f16x2 %r7429,%r6990,%r6746;
}
	// end inline asm

$L__BB0_817:
	mov.u32 	%r6762, 31;
	mov.u32 	%r6786, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6760,%r7429,%r6762,%r2070,%r6786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6765,%r6749,%r6760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6768,%r7253,%r7268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6771,%r6768,%r6765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6774,%r6898,%r6771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7056,%r5349,%r6774;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7255;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6782,%r7255,%r424,%r2070,%r6786;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6782;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6788, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6789,%r6788,%r7254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6792,%r6993,%r6789;
}
	// end inline asm
	@%p15 bra 	$L__BB0_819;
	bra.uni 	$L__BB0_818;

$L__BB0_819:
	// begin inline asm
	{neg.f16x2 %r7430,%r5352;
}
	// end inline asm
	bra.uni 	$L__BB0_820;

$L__BB0_818:
	// begin inline asm
	{mul.f16x2 %r7430,%r6994,%r6789;
}
	// end inline asm

$L__BB0_820:
	setp.ne.s32 	%p467, %r31, %r1962;
	mov.u32 	%r6807, 31;
	mov.u32 	%r6809, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6805,%r7430,%r6807,%r2070,%r6809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6810,%r6792,%r6805;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6813,%r7252,%r7266;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6816,%r6813,%r6810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6819,%r6898,%r6816;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7055,%r5352,%r6819;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p467 bra 	$L__BB0_822;

	mad.lo.s32 	%r6828, %r644, %r1553, %r34;
	mad.lo.s32 	%r6829, %r6828, 768, 384;
	mul.lo.s32 	%r6830, %r6829, %r1551;
	mad.lo.s32 	%r6832, %r32, 384, %r6830;
	add.s32 	%r6833, %r6832, -128;
	mul.wide.s32 	%rd540, %r6833, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7116, %r7115, %r7111, %r7110};
	st.global.v4.u32 	[%rd543+1024], {%r7132, %r7125, %r7135, %r7134};
	st.global.v4.u32 	[%rd543+1536], {%r7130, %r7129, %r7128, %r7123};

$L__BB0_822:
	setp.ne.s32 	%p468, %r32, %r1967;
	@%p468 bra 	$L__BB0_825;

	not.b32 	%r6880, %r31;
	add.s32 	%r6879, %r1550, %r6880;
	mad.lo.s32 	%r6835, %r645, %r1552, %r33;
	mad.lo.s32 	%r6841, %r6879, 384, %r60;
	mad.lo.s32 	%r6842, %r6835, %r1613, %r6841;
	mad.lo.s32 	%r6845, %r1615, %r59, %r6842;
	mul.wide.s32 	%rd544, %r6845, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7130, %r7129, %r7128, %r7123};
	st.global.v4.u32 	[%rd41+512], {%r7121, %r7120, %r7089, %r7088};
	st.global.v4.u32 	[%rd41+1024], {%r7119, %r7117, %r7082, %r7081};
	@%p208 bra 	$L__BB0_825;

	st.global.v4.u32 	[%rd41+1536], {%r7367, %r7366, %r7369, %r7368};

$L__BB0_825:
	rem.s32 	%r6846, %r7163, %r1554;
	setp.eq.s32 	%p461, %r6846, 0;
	@%p461 bra 	$L__BB0_827;

	bar.sync 	0;
	bra.uni 	$L__BB0_834;

$L__BB0_827:
	@%p150 bra 	$L__BB0_829;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_829:
	bar.sync 	0;
	@%p151 bra 	$L__BB0_833;

	membar.gl;
	setp.eq.s32 	%p464, %r418, %r419;
	mov.u32 	%r6862, -2147483647;
	sub.s32 	%r6863, %r6862, %r417;
	selp.b32 	%r6851, %r6863, 1, %p464;
	// begin inline asm
	atom.add.release.gpu.u32 %r6850,[%rd25],%r6851;
	// end inline asm

$L__BB0_831:
	ld.volatile.u32 	%r6864, [%rd25];
	xor.b32  	%r6865, %r6864, %r6850;
	setp.gt.s32 	%p465, %r6865, -1;
	@%p465 bra 	$L__BB0_831;

	// begin inline asm
	ld.acquire.gpu.u32 %r6866,[%rd25];
	// end inline asm

$L__BB0_833:
	bar.sync 	0;

$L__BB0_834:
	setp.lt.s32 	%p466, %r1287, %r39;
	mov.u32 	%r7035, %r7370;
	mov.u32 	%r7036, %r7371;
	mov.u32 	%r7037, %r7356;
	mov.u32 	%r7038, %r7357;
	mov.u32 	%r7039, %r7358;
	mov.u32 	%r7040, %r7359;
	mov.u32 	%r7041, %r7372;
	mov.u32 	%r7042, %r7373;
	mov.u32 	%r7043, %r7374;
	mov.u32 	%r7044, %r7375;
	mov.u32 	%r7045, %r7376;
	mov.u32 	%r7046, %r7377;
	mov.u32 	%r7047, %r7362;
	mov.u32 	%r7048, %r7363;
	mov.u32 	%r7049, %r7364;
	mov.u32 	%r7050, %r7365;
	mov.u32 	%r7051, %r7378;
	mov.u32 	%r7052, %r7379;
	mov.u32 	%r7053, %r7380;
	mov.u32 	%r7054, %r7381;
	mov.u32 	%r7083, %r489;
	mov.u32 	%r7084, %r7300;
	mov.u32 	%r7087, %r490;
	mov.u32 	%r7090, %r7302;
	mov.u32 	%r7095, %r495;
	mov.u32 	%r7099, %r498;
	mov.u32 	%r7107, %r7307;
	mov.u32 	%r7112, %r7309;
	mov.u32 	%r7118, %r516;
	mov.u32 	%r7122, %r524;
	mov.u32 	%r7124, %r526;
	mov.u32 	%r7127, %r528;
	mov.u32 	%r7131, %r532;
	mov.u32 	%r7136, %r536;
	mov.u32 	%r7163, %r1287;
	@%p466 bra 	$L__BB0_302;

$L__BB0_835:
	ret;

}

