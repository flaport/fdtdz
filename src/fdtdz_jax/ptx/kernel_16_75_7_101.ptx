//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<481>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7460>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<556>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1560, %r1561}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1562, %r1563}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1564, %r1565}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1566, %r1567}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1568, %r1569}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1570, %r1571}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1572, %r1573}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1574, %r1575}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1576, %r1577}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1578, %r1579}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1580, 32;
	sub.s32 	%r39, %r1580, %r1567;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p15, %r39, %r40;
	add.s32 	%r1581, %r1573, -1;
	mad.lo.s32 	%r1582, %r1581, %r1572, %r1571;
	add.s32 	%r1583, %r1566, %r1565;
	add.s32 	%r1584, %r1583, %r1582;
	add.s32 	%r1585, %r1584, 1;
	mul.lo.s32 	%r1586, %r1560, %r1562;
	shl.b32 	%r41, %r1586, 1;
	shl.b32 	%r1587, %r1586, 2;
	div.s32 	%r1588, %r1585, %r1587;
	add.s32 	%r1589, %r1588, 1;
	mul.lo.s32 	%r1590, %r1589, %r1566;
	mul.lo.s32 	%r1591, %r1561, %r1563;
	shl.b32 	%r42, %r1591, 1;
	div.s32 	%r1592, %r1590, %r42;
	add.s32 	%r1593, %r1592, 1;
	mul.lo.s32 	%r43, %r1593, %r1565;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6923, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6923, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1596, %r1562, %r38, %r37;
	mad.lo.s32 	%r1597, %r1596, %r1561, %r36;
	mad.lo.s32 	%r1598, %r1597, %r1560, %r35;
	shl.b32 	%r47, %r1598, 5;
	add.s32 	%r6928, %r47, %r40;
	mul.lo.s32 	%r1599, %r1591, %r1586;
	shl.b32 	%r51, %r1599, 5;
	sub.s32 	%r52, %r1575, %r1574;
	mul.lo.s32 	%r1600, %r1573, %r52;
	sub.s32 	%r53, %r1577, %r1576;
	mul.lo.s32 	%r1601, %r1600, %r53;
	sub.s32 	%r54, %r1579, %r1578;
	mul.lo.s32 	%r1602, %r1601, %r54;
	mul.lo.s32 	%r55, %r1602, 3;
	setp.ge.s32 	%p16, %r6928, %r55;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1603, %r40;
	add.s32 	%r1604, %r55, %r1603;
	sub.s32 	%r1605, %r1604, %r47;
	mul.lo.s32 	%r1606, %r1591, %r1560;
	mul.lo.s32 	%r1607, %r1606, %r1562;
	shl.b32 	%r1608, %r1607, 5;
	div.u32 	%r56, %r1605, %r1608;
	add.s32 	%r1609, %r56, 1;
	and.b32  	%r6925, %r1609, 3;
	setp.eq.s32 	%p17, %r6925, 0;
	mov.u32 	%r6926, %r6928;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6926, %r6928;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r6926, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1610, 0;
	st.global.u32 	[%rd45], %r1610;
	add.s32 	%r6926, %r6926, %r51;
	add.s32 	%r6925, %r6925, -1;
	setp.ne.s32 	%p18, %r6925, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r56, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r6926, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1611, 0;
	st.global.u32 	[%rd47], %r1611;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1611;
	add.s32 	%r1612, %r6926, %r51;
	add.s32 	%r1613, %r1612, %r51;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1611;
	add.s32 	%r1614, %r1613, %r51;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1611;
	add.s32 	%r6926, %r1614, %r51;
	setp.lt.s32 	%p20, %r6926, %r55;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1615, %r1566, %r41;
	div.s32 	%r1616, %r1615, %r42;
	mul.lo.s32 	%r1617, %r1616, %r1565;
	sub.s32 	%r65, %r1617, %r41;
	sub.s32 	%r1618, %r1565, %r42;
	mul.lo.s32 	%r1619, %r1618, %r1562;
	mul.lo.s32 	%r66, %r1560, 384;
	add.s32 	%r1620, %r66, %r66;
	add.s32 	%r1621, %r1620, 128;
	mul.lo.s32 	%r1623, %r1591, 768;
	mul.lo.s32 	%r1624, %r1619, %r1621;
	mad.lo.s32 	%r67, %r1623, %r65, %r1624;
	bra.uni 	$L__BB0_11;

$L__BB0_836:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6892, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r6928, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r6892;
	add.s32 	%r6928, %r6928, %r51;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6928, %r67;
	@%p21 bra 	$L__BB0_836;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r6970, %r1560, %r37, %r35;
	mul.lo.s32 	%r71, %r1561, %r38;
	add.s32 	%r72, %r71, %r36;
	setp.ge.s32 	%p22, %r6970, %r1565;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r39, %r40;
	mov.u32 	%r1625, 31;
	sub.s32 	%r1626, %r1625, %r40;
	selp.b32 	%r1627, %r40, %r1626, %p23;
	shl.b32 	%r1628, %r1627, 2;
	mov.u32 	%r1629, 2;
	sub.s32 	%r73, %r1628, %r1568;
	shl.b32 	%r1630, %r1567, 2;
	mov.u32 	%r1631, 128;
	sub.s32 	%r74, %r1631, %r1630;
	add.s32 	%r75, %r1575, -1;
	add.s32 	%r76, %r1577, -1;
	add.s32 	%r77, %r1579, -1;
	sub.s32 	%r1632, %r1629, %r1568;
	add.s32 	%r78, %r1632, %r1628;
	mul.lo.s32 	%r1633, %r1566, %r1565;
	shl.b32 	%r79, %r1633, 6;
	add.s32 	%r80, %r1565, -1;
	add.s32 	%r81, %r73, 1;
	add.s32 	%r82, %r78, 1;
	shl.b32 	%r83, %r40, 1;
	or.b32  	%r84, %r83, 1;
	shr.u32 	%r1634, %r84, 31;
	add.s32 	%r1635, %r84, %r1634;
	shr.s32 	%r86, %r1635, 1;
	and.b32  	%r1636, %r1635, -2;
	sub.s32 	%r1637, %r84, %r1636;
	add.s32 	%r85, %r1637, %r79;
	rem.s32 	%r1683, %r81, %r74;
	add.s32 	%r1684, %r1683, %r74;
	rem.s32 	%r1685, %r1684, %r74;
	rem.s32 	%r1688, %r82, %r74;
	add.s32 	%r1689, %r1688, %r74;
	rem.s32 	%r1690, %r1689, %r74;
	mov.u32 	%r6929, %r6970;

$L__BB0_14:
	setp.ge.s32 	%p24, %r72, %r1566;
	@%p24 bra 	$L__BB0_35;

	setp.gt.s32 	%p25, %r1574, %r6929;
	setp.gt.s32 	%p26, %r1575, %r6929;
	selp.b32 	%r1638, %r6929, %r75, %p26;
	selp.b32 	%r1639, %r1574, %r1638, %p25;
	sub.s32 	%r1640, %r1639, %r1574;
	add.s32 	%r88, %r80, %r6929;
	rem.s32 	%r1641, %r73, %r74;
	add.s32 	%r1642, %r1641, %r74;
	rem.s32 	%r1643, %r1642, %r74;
	setp.gt.s32 	%p27, %r1578, %r1643;
	setp.gt.s32 	%p28, %r1579, %r1643;
	selp.b32 	%r1644, %r1643, %r77, %p28;
	selp.b32 	%r1645, %r1578, %r1644, %p27;
	rem.s32 	%r1646, %r78, %r74;
	add.s32 	%r1647, %r1646, %r74;
	rem.s32 	%r1648, %r1647, %r74;
	setp.gt.s32 	%p29, %r1578, %r1648;
	setp.gt.s32 	%p30, %r1579, %r1648;
	selp.b32 	%r1649, %r1648, %r77, %p30;
	selp.b32 	%r1650, %r1578, %r1649, %p29;
	sub.s32 	%r89, %r1645, %r1578;
	sub.s32 	%r90, %r1650, %r1578;
	mul.lo.s32 	%r91, %r1640, %r53;
	add.s32 	%r1651, %r1640, %r52;
	mul.lo.s32 	%r92, %r1651, %r53;
	add.s32 	%r1652, %r1651, %r52;
	mul.lo.s32 	%r93, %r1652, %r53;
	mov.u32 	%r6930, %r72;

$L__BB0_16:
	setp.gt.s32 	%p31, %r1577, %r6930;
	selp.b32 	%r1653, %r6930, %r76, %p31;
	setp.gt.s32 	%p32, %r1576, %r6930;
	selp.b32 	%r1654, %r1576, %r1653, %p32;
	sub.s32 	%r95, %r1654, %r1576;
	mul.lo.s32 	%r96, %r6930, %r1565;
	add.s32 	%r97, %r96, %r6929;
	shl.b32 	%r98, %r97, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1657, %r95, %r91;
	mul.lo.s32 	%r1658, %r1657, %r54;
	add.s32 	%r1659, %r89, %r1658;
	mul.wide.s32 	%rd55, %r1659, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1660, %r90, %r1658;
	mul.wide.s32 	%rd57, %r1660, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6931, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6931, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r102, %r97, 5;
	add.s32 	%r1661, %r102, %r40;
	shl.b32 	%r1662, %r1661, 2;
	add.s32 	%r1663, %r79, %r1662;
	mul.wide.s32 	%rd59, %r1663, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r6931;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1666, %r95, %r92;
	mul.lo.s32 	%r1667, %r1666, %r54;
	add.s32 	%r1668, %r89, %r1667;
	mul.wide.s32 	%rd61, %r1668, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1669, %r90, %r1667;
	mul.wide.s32 	%rd63, %r1669, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6932, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6932, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1670, %r83, %r98;
	mul.wide.s32 	%rd65, %r1670, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r6932;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1673, %r95, %r93;
	mul.lo.s32 	%r1674, %r1673, %r54;
	add.s32 	%r1675, %r89, %r1674;
	mul.wide.s32 	%rd67, %r1675, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1676, %r90, %r1674;
	mul.wide.s32 	%rd69, %r1676, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6933, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1677, %r88, %r1565;
	add.s32 	%r1678, %r1677, %r96;
	shl.b32 	%r109, %r1678, 5;
	add.s32 	%r1679, %r109, %r40;
	shl.b32 	%r1680, %r1679, 2;
	add.s32 	%r1681, %r79, %r1680;
	add.s32 	%r1682, %r1681, 2;
	mul.wide.s32 	%rd71, %r1682, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r6933;
	setp.gt.s32 	%p36, %r1578, %r1685;
	setp.gt.s32 	%p37, %r1579, %r1685;
	selp.b32 	%r1686, %r1685, %r77, %p37;
	selp.b32 	%r1687, %r1578, %r1686, %p36;
	setp.gt.s32 	%p38, %r1578, %r1690;
	setp.gt.s32 	%p39, %r1579, %r1690;
	selp.b32 	%r1691, %r1690, %r77, %p39;
	selp.b32 	%r1692, %r1578, %r1691, %p38;
	sub.s32 	%r110, %r1687, %r1578;
	sub.s32 	%r111, %r1692, %r1578;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1695, %r95, %r91;
	mul.lo.s32 	%r1696, %r1695, %r54;
	add.s32 	%r1697, %r110, %r1696;
	mul.wide.s32 	%rd73, %r1697, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1698, %r111, %r1696;
	mul.wide.s32 	%rd75, %r1698, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6934, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6934, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1699, %r102, %r86;
	shl.b32 	%r1700, %r1699, 2;
	add.s32 	%r1701, %r85, %r1700;
	mul.wide.s32 	%rd77, %r1701, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r6934;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1704, %r95, %r92;
	mul.lo.s32 	%r1705, %r1704, %r54;
	add.s32 	%r1706, %r110, %r1705;
	mul.wide.s32 	%rd79, %r1706, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1707, %r111, %r1705;
	mul.wide.s32 	%rd81, %r1707, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6935, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6935, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1708, %r84, %r98;
	mul.wide.s32 	%rd83, %r1708, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r6935;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1711, %r95, %r93;
	mul.lo.s32 	%r1712, %r1711, %r54;
	add.s32 	%r1713, %r110, %r1712;
	mul.wide.s32 	%rd85, %r1713, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1714, %r111, %r1712;
	mul.wide.s32 	%rd87, %r1714, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6936, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1715, %r109, %r86;
	shl.b32 	%r1716, %r1715, 2;
	add.s32 	%r1717, %r85, %r1716;
	add.s32 	%r1718, %r1717, 2;
	mul.wide.s32 	%rd89, %r1718, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r6936;
	add.s32 	%r6930, %r6930, %r1591;
	setp.lt.s32 	%p43, %r6930, %r1566;
	@%p43 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6929, %r6929, %r1586;
	setp.lt.s32 	%p44, %r6929, %r1565;
	@%p44 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r123, %r72, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6937, %r6970;

$L__BB0_38:
	setp.ge.s32 	%p46, %r123, %r1566;
	@%p46 bra 	$L__BB0_119;

	mov.u32 	%r6938, %r123;

$L__BB0_40:
	setp.ne.s32 	%p47, %r40, 0;
	@%p47 bra 	$L__BB0_118;

	shr.u32 	%r1720, %r6938, 31;
	add.s32 	%r1721, %r6938, %r1720;
	shr.s32 	%r1722, %r1721, 1;
	mad.lo.s32 	%r1723, %r1722, %r1565, %r6937;
	shl.b32 	%r127, %r1723, 5;
	add.s32 	%r128, %r6938, -2;
	mul.lo.s32 	%r129, %r128, %r1565;
	add.s32 	%r1724, %r1566, %r128;
	mul.lo.s32 	%r130, %r1724, %r1565;
	add.s32 	%r1725, %r1724, %r1566;
	mul.lo.s32 	%r131, %r1725, %r1565;
	add.s32 	%r132, %r129, %r1565;
	add.s32 	%r133, %r6938, -1;
	add.s32 	%r1726, %r1566, %r133;
	mul.lo.s32 	%r134, %r1726, %r1565;
	add.s32 	%r1727, %r1726, %r1566;
	mul.lo.s32 	%r135, %r1727, %r1565;
	add.s32 	%r1728, %r1566, %r6938;
	mul.lo.s32 	%r136, %r1728, %r1565;
	add.s32 	%r1729, %r1728, %r1566;
	mul.lo.s32 	%r137, %r1729, %r1565;
	mul.lo.s32 	%r138, %r6938, %r1565;
	add.s32 	%r139, %r138, %r1565;
	add.s32 	%r140, %r6938, 1;
	add.s32 	%r1730, %r1566, %r140;
	mul.lo.s32 	%r141, %r1730, %r1565;
	add.s32 	%r1731, %r1730, %r1566;
	mul.lo.s32 	%r142, %r1731, %r1565;
	add.s32 	%r143, %r139, %r1565;
	add.s32 	%r144, %r6938, 2;
	add.s32 	%r1732, %r1566, %r144;
	mul.lo.s32 	%r145, %r1732, %r1565;
	add.s32 	%r1733, %r1732, %r1566;
	mul.lo.s32 	%r146, %r1733, %r1565;
	mov.u32 	%r6941, 0;
	mov.u64 	%rd553, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1734, [%rd553];
	cvt.rn.f64.s32 	%fd1, %r1734;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r148, %r1734, %r6937;
	setp.lt.s32 	%p48, %r148, %r1565;
	or.b32  	%r1735, %r128, %r148;
	setp.gt.s32 	%p49, %r1735, -1;
	and.pred  	%p50, %p48, %p49;
	setp.lt.s32 	%p51, %r128, %r1566;
	and.pred  	%p1, %p51, %p50;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p52, %f65, 0f40000000;
	@%p52 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1738, %r129, %r148;
	mul.wide.s32 	%rd94, %r1738, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6940, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6940, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1739, %r6941, %r127;
	mul.wide.s32 	%rd96, %r1739, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r6940;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p53, %f3, 0f40000000;
	@%p53 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1742, %r130, %r148;
	mul.wide.s32 	%rd98, %r1742, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6942, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6942, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1743, %r6941, %r127;
	mul.wide.s32 	%rd100, %r1743, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r6942;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p54, %f74, 0f40000000;
	@%p54 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1746, %r131, %r148;
	mul.wide.s32 	%rd102, %r1746, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6944, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6944, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1747, %r6941, %r127;
	mul.wide.s32 	%rd104, %r1747, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r6944;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_57:
	or.b32  	%r1748, %r133, %r148;
	setp.gt.s32 	%p55, %r1748, -1;
	and.pred  	%p57, %p48, %p55;
	setp.le.s32 	%p58, %r6938, %r1566;
	and.pred  	%p2, %p58, %p57;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p59, %f4, 0f40000000;
	@%p59 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1751, %r132, %r148;
	mul.wide.s32 	%rd106, %r1751, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6946, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6946, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1752, %r6941, %r127;
	mul.wide.s32 	%rd108, %r1752, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r6946;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p60, %f5, 0f40000000;
	@%p60 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1755, %r134, %r148;
	mul.wide.s32 	%rd110, %r1755, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6948, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6948, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1756, %r6941, %r127;
	mul.wide.s32 	%rd112, %r1756, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r6948;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p61, %f6, 0f40000000;
	@%p61 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1759, %r135, %r148;
	mul.wide.s32 	%rd114, %r1759, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6950, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6950, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1760, %r6941, %r127;
	mul.wide.s32 	%rd116, %r1760, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r6950;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_72:
	or.b32  	%r1761, %r6938, %r148;
	setp.gt.s32 	%p62, %r1761, -1;
	and.pred  	%p64, %p48, %p62;
	setp.lt.s32 	%p65, %r6938, %r1566;
	and.pred  	%p3, %p65, %p64;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p66, %f7, 0f40000000;
	@%p66 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1764, %r138, %r148;
	mul.wide.s32 	%rd118, %r1764, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6952, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6952, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1765, %r6941, %r127;
	mul.wide.s32 	%rd120, %r1765, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r6952;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p67, %f90, 0f40000000;
	@%p67 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1768, %r136, %r148;
	mul.wide.s32 	%rd122, %r1768, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6954, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6954, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1769, %r6941, %r127;
	mul.wide.s32 	%rd124, %r1769, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r6954;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p68, %f8, 0f40000000;
	@%p68 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1772, %r137, %r148;
	mul.wide.s32 	%rd126, %r1772, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6956, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6956, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1773, %r6941, %r127;
	mul.wide.s32 	%rd128, %r1773, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r6956;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_87:
	or.b32  	%r1774, %r140, %r148;
	setp.gt.s32 	%p69, %r1774, -1;
	and.pred  	%p71, %p48, %p69;
	setp.lt.s32 	%p72, %r140, %r1566;
	and.pred  	%p4, %p72, %p71;
	@%p66 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1777, %r139, %r148;
	mul.wide.s32 	%rd130, %r1777, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6958, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6958, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1778, %r6941, %r127;
	mul.wide.s32 	%rd132, %r1778, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r6958;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_92:
	@%p60 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1781, %r141, %r148;
	mul.wide.s32 	%rd134, %r1781, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6960, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6960, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1782, %r6941, %r127;
	mul.wide.s32 	%rd136, %r1782, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r6960;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_97:
	@%p68 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1785, %r142, %r148;
	mul.wide.s32 	%rd138, %r1785, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6962, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6962, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1786, %r6941, %r127;
	mul.wide.s32 	%rd140, %r1786, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r6962;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_102:
	or.b32  	%r1787, %r144, %r148;
	setp.gt.s32 	%p76, %r1787, -1;
	and.pred  	%p78, %p48, %p76;
	setp.lt.s32 	%p79, %r144, %r1566;
	and.pred  	%p5, %p79, %p78;
	@%p59 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1790, %r143, %r148;
	mul.wide.s32 	%rd142, %r1790, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6964, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6964, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1791, %r6941, %r127;
	mul.wide.s32 	%rd144, %r1791, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r6964;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_107:
	@%p53 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1794, %r145, %r148;
	mul.wide.s32 	%rd146, %r1794, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6966, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6966, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1795, %r6941, %r127;
	mul.wide.s32 	%rd148, %r1795, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r6966;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_112:
	@%p61 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1798, %r146, %r148;
	mul.wide.s32 	%rd150, %r1798, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6968, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6968, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1799, %r6941, %r127;
	mul.wide.s32 	%rd152, %r1799, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r6968;
	add.s32 	%r6941, %r6941, 1;

$L__BB0_117:
	add.s64 	%rd553, %rd553, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p83, %rd553, %rd155;
	@%p83 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6938, %r6938, %r42;
	setp.lt.s32 	%p84, %r6938, %r1566;
	@%p84 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6937, %r6937, %r1586;
	setp.lt.s32 	%p85, %r6937, %r1565;
	@%p85 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p86, %r1569, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p86 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r252, %r72, 1;
	shr.u32 	%r1847, %r1570, 31;
	add.s32 	%r1848, %r1570, %r1847;
	shr.u32 	%r1849, %r1848, 1;
	and.b32  	%r253, %r1849, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p96, %r252, %r1566;
	@%p96 bra 	$L__BB0_266;

	mov.u32 	%r6976, %r252;

$L__BB0_142:
	setp.ne.s32 	%p97, %r40, 0;
	@%p97 bra 	$L__BB0_265;

	shr.u32 	%r1851, %r6976, 31;
	add.s32 	%r1852, %r6976, %r1851;
	shr.s32 	%r1853, %r1852, 1;
	mad.lo.s32 	%r1854, %r1853, %r1565, %r6970;
	shl.b32 	%r257, %r1854, 5;
	add.s32 	%r258, %r6976, -2;
	mul.lo.s32 	%r259, %r258, %r1565;
	add.s32 	%r1855, %r1566, %r258;
	mul.lo.s32 	%r260, %r1855, %r1565;
	add.s32 	%r261, %r259, %r1565;
	add.s32 	%r262, %r6976, -1;
	add.s32 	%r1856, %r1566, %r262;
	mul.lo.s32 	%r263, %r1856, %r1565;
	add.s32 	%r1857, %r1566, %r6976;
	mul.lo.s32 	%r264, %r1857, %r1565;
	mul.lo.s32 	%r265, %r6976, %r1565;
	add.s32 	%r266, %r265, %r1565;
	add.s32 	%r267, %r6976, 1;
	add.s32 	%r1858, %r1566, %r267;
	mul.lo.s32 	%r268, %r1858, %r1565;
	add.s32 	%r269, %r266, %r1565;
	add.s32 	%r270, %r6976, 2;
	add.s32 	%r1859, %r1566, %r270;
	mul.lo.s32 	%r271, %r1859, %r1565;
	mov.u32 	%r6980, 0;
	mov.u64 	%rd554, 24;
	mov.u64 	%rd555, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1860, [%rd555];
	cvt.rn.f64.s32 	%fd2, %r1860;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r273, %r1860, %r6970;
	setp.lt.s32 	%p98, %r273, %r1565;
	or.b32  	%r1861, %r258, %r273;
	setp.gt.s32 	%p99, %r1861, -1;
	and.pred  	%p100, %p98, %p99;
	setp.lt.s32 	%p101, %r258, %r1566;
	and.pred  	%p6, %p101, %p100;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p102, %f133, 0f40000000;
	@%p102 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p103, %r253, 0;
	add.s32 	%r1863, %r259, %r273;
	shl.b32 	%r1864, %r1863, 1;
	mul.wide.s32 	%rd178, %r1864, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p103 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6978, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6978, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6978, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r278, %r6980, %r257;
	mul.wide.s32 	%rd180, %r278, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r6978;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p104, %r253, 0;
	add.s32 	%r1868, %r260, %r273;
	shl.b32 	%r1869, %r1868, 1;
	mul.wide.s32 	%rd182, %r1869, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p104 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6979, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6979, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6979, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1872, %r278, 1;
	mul.wide.s32 	%rd184, %r1872, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r6979;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p105, %f13, 0f40000000;
	@%p105 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p106, %r253, 0;
	add.s32 	%r1874, %r259, %r273;
	shl.b32 	%r1875, %r1874, 1;
	or.b32  	%r1876, %r1875, 1;
	mul.wide.s32 	%rd186, %r1876, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p106 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6981, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6981, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6981, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r289, %r6980, %r257;
	mul.wide.s32 	%rd188, %r289, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r6981;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p107, %r253, 0;
	add.s32 	%r1880, %r260, %r273;
	shl.b32 	%r1881, %r1880, 1;
	or.b32  	%r1882, %r1881, 1;
	mul.wide.s32 	%rd190, %r1882, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p107 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6982, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6982, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6982, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1885, %r289, 1;
	mul.wide.s32 	%rd192, %r1885, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r6982;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_168:
	or.b32  	%r1886, %r262, %r273;
	setp.gt.s32 	%p108, %r1886, -1;
	and.pred  	%p110, %p98, %p108;
	setp.le.s32 	%p111, %r6976, %r1566;
	and.pred  	%p7, %p111, %p110;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p112, %f16, 0f40000000;
	@%p112 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p113, %r253, 0;
	add.s32 	%r1888, %r261, %r273;
	shl.b32 	%r1889, %r1888, 1;
	mul.wide.s32 	%rd194, %r1889, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p113 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6984, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6984, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6984, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r300, %r6980, %r257;
	mul.wide.s32 	%rd196, %r300, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r6984;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p114, %r253, 0;
	add.s32 	%r1893, %r263, %r273;
	shl.b32 	%r1894, %r1893, 1;
	mul.wide.s32 	%rd198, %r1894, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p114 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6985, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6985, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6985, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1897, %r300, 1;
	mul.wide.s32 	%rd200, %r1897, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r6985;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p115, %f19, 0f40000000;
	@%p115 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p116, %r253, 0;
	add.s32 	%r1899, %r261, %r273;
	shl.b32 	%r1900, %r1899, 1;
	or.b32  	%r1901, %r1900, 1;
	mul.wide.s32 	%rd202, %r1901, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p116 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6987, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6987, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6987, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r311, %r6980, %r257;
	mul.wide.s32 	%rd204, %r311, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r6987;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p117, %r253, 0;
	add.s32 	%r1905, %r263, %r273;
	shl.b32 	%r1906, %r1905, 1;
	or.b32  	%r1907, %r1906, 1;
	mul.wide.s32 	%rd206, %r1907, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p117 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6988, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6988, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6988, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1910, %r311, 1;
	mul.wide.s32 	%rd208, %r1910, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r6988;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_192:
	or.b32  	%r1911, %r6976, %r273;
	setp.gt.s32 	%p118, %r1911, -1;
	and.pred  	%p120, %p98, %p118;
	setp.lt.s32 	%p121, %r6976, %r1566;
	and.pred  	%p8, %p121, %p120;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p122, %f22, 0f40000000;
	@%p122 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p123, %r253, 0;
	add.s32 	%r1913, %r265, %r273;
	shl.b32 	%r1914, %r1913, 1;
	mul.wide.s32 	%rd210, %r1914, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p123 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6990, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6990, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6990, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r322, %r6980, %r257;
	mul.wide.s32 	%rd212, %r322, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r6990;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p124, %r253, 0;
	add.s32 	%r1918, %r264, %r273;
	shl.b32 	%r1919, %r1918, 1;
	mul.wide.s32 	%rd214, %r1919, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p124 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6991, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6991, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6991, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1922, %r322, 1;
	mul.wide.s32 	%rd216, %r1922, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r6991;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p125, %f196, 0f40000000;
	@%p125 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p126, %r253, 0;
	add.s32 	%r1924, %r265, %r273;
	shl.b32 	%r1925, %r1924, 1;
	or.b32  	%r1926, %r1925, 1;
	mul.wide.s32 	%rd218, %r1926, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p126 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6993, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6993, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6993, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r333, %r6980, %r257;
	mul.wide.s32 	%rd220, %r333, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r6993;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p127, %r253, 0;
	add.s32 	%r1930, %r264, %r273;
	shl.b32 	%r1931, %r1930, 1;
	or.b32  	%r1932, %r1931, 1;
	mul.wide.s32 	%rd222, %r1932, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p127 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6994, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6994, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6994, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1935, %r333, 1;
	mul.wide.s32 	%rd224, %r1935, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r6994;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_216:
	or.b32  	%r1936, %r267, %r273;
	setp.gt.s32 	%p128, %r1936, -1;
	and.pred  	%p130, %p98, %p128;
	setp.lt.s32 	%p131, %r267, %r1566;
	and.pred  	%p9, %p131, %p130;
	@%p122 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p133, %r253, 0;
	add.s32 	%r1938, %r266, %r273;
	shl.b32 	%r1939, %r1938, 1;
	mul.wide.s32 	%rd226, %r1939, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p133 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6996, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6996, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6996, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r344, %r6980, %r257;
	mul.wide.s32 	%rd228, %r344, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r6996;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p134, %r253, 0;
	add.s32 	%r1943, %r268, %r273;
	shl.b32 	%r1944, %r1943, 1;
	mul.wide.s32 	%rd230, %r1944, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p134 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6997, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6997, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6997, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1947, %r344, 1;
	mul.wide.s32 	%rd232, %r1947, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r6997;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_228:
	@%p115 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p136, %r253, 0;
	add.s32 	%r1949, %r266, %r273;
	shl.b32 	%r1950, %r1949, 1;
	or.b32  	%r1951, %r1950, 1;
	mul.wide.s32 	%rd234, %r1951, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p136 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6999, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6999, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6999, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r355, %r6980, %r257;
	mul.wide.s32 	%rd236, %r355, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r6999;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p137, %r253, 0;
	add.s32 	%r1955, %r268, %r273;
	shl.b32 	%r1956, %r1955, 1;
	or.b32  	%r1957, %r1956, 1;
	mul.wide.s32 	%rd238, %r1957, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p137 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7000, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7000, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7000, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1960, %r355, 1;
	mul.wide.s32 	%rd240, %r1960, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r7000;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_240:
	or.b32  	%r1961, %r270, %r273;
	setp.gt.s32 	%p138, %r1961, -1;
	and.pred  	%p140, %p98, %p138;
	setp.lt.s32 	%p141, %r270, %r1566;
	and.pred  	%p10, %p141, %p140;
	@%p112 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p143, %r253, 0;
	add.s32 	%r1963, %r269, %r273;
	shl.b32 	%r1964, %r1963, 1;
	mul.wide.s32 	%rd242, %r1964, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p143 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7002, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7002, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7002, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r366, %r6980, %r257;
	mul.wide.s32 	%rd244, %r366, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r7002;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p144, %r253, 0;
	add.s32 	%r1968, %r271, %r273;
	shl.b32 	%r1969, %r1968, 1;
	mul.wide.s32 	%rd246, %r1969, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p144 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7003, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7003, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7003, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1972, %r366, 1;
	mul.wide.s32 	%rd248, %r1972, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r7003;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_252:
	@%p105 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p146, %r253, 0;
	add.s32 	%r1974, %r269, %r273;
	shl.b32 	%r1975, %r1974, 1;
	or.b32  	%r1976, %r1975, 1;
	mul.wide.s32 	%rd250, %r1976, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p146 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7005, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7005, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7005, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r377, %r6980, %r257;
	mul.wide.s32 	%rd252, %r377, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r7005;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p147, %r253, 0;
	add.s32 	%r1980, %r271, %r273;
	shl.b32 	%r1981, %r1980, 1;
	or.b32  	%r1982, %r1981, 1;
	mul.wide.s32 	%rd254, %r1982, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p147 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7006, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7006, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7006, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1985, %r377, 1;
	mul.wide.s32 	%rd256, %r1985, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r7006;
	add.s32 	%r6980, %r6980, 2;

$L__BB0_264:
	add.s64 	%rd555, %rd555, 4;
	add.s64 	%rd554, %rd554, -4;
	setp.ne.s64 	%p148, %rd554, 0;
	@%p148 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6976, %r6976, %r42;
	setp.lt.s32 	%p149, %r6976, %r1566;
	@%p149 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6970, %r6970, %r1586;
	setp.lt.s32 	%p150, %r6970, %r1565;
	@%p150 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r226, %r71;
	mov.u32 	%r1800, 31;
	sub.s32 	%r1801, %r1800, %r40;
	setp.gt.s32 	%p88, %r39, %r40;
	selp.b32 	%r1802, %r40, %r1801, %p88;
	shl.b32 	%r1803, %r1802, 2;
	mov.u32 	%r1804, 2;
	sub.s32 	%r227, %r1803, %r1568;
	shl.b32 	%r1805, %r1567, 2;
	mov.u32 	%r1806, 128;
	sub.s32 	%r228, %r1806, %r1805;
	sub.s32 	%r1807, %r1804, %r1568;
	add.s32 	%r229, %r1807, %r1803;
	add.s32 	%r230, %r1565, -1;
	add.s32 	%r231, %r227, 1;
	add.s32 	%r232, %r229, 1;
	rem.s32 	%r1832, %r231, %r228;
	add.s32 	%r1833, %r1832, %r228;
	rem.s32 	%r243, %r1833, %r228;
	rem.s32 	%r1834, %r232, %r228;
	add.s32 	%r1835, %r1834, %r228;
	rem.s32 	%r244, %r1835, %r228;

$L__BB0_123:
	setp.ne.s32 	%p89, %r36, %r226;
	@%p89 bra 	$L__BB0_137;

	shl.b32 	%r234, %r6970, 1;
	rem.s32 	%r1808, %r227, %r228;
	add.s32 	%r1809, %r1808, %r228;
	rem.s32 	%r235, %r1809, %r228;
	rem.s32 	%r1810, %r229, %r228;
	add.s32 	%r1811, %r1810, %r228;
	rem.s32 	%r236, %r1811, %r228;
	@%p88 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1814, %r234, %r228;
	add.s32 	%r1815, %r1814, %r235;
	mul.wide.s32 	%rd158, %r1815, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1816, %r1814, %r236;
	mul.wide.s32 	%rd160, %r1816, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6971, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6971, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1817, %r6970, 5;
	add.s32 	%r1818, %r1817, %r40;
	shl.b32 	%r1819, %r1818, 2;
	mul.wide.s32 	%rd162, %r1819, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r6971;
	@%p88 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1822, %r234, 1;
	mul.lo.s32 	%r1823, %r1822, %r228;
	add.s32 	%r1824, %r1823, %r235;
	mul.wide.s32 	%rd163, %r1824, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1825, %r1823, %r236;
	mul.wide.s32 	%rd165, %r1825, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6972, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6972, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1826, %r230, %r6970;
	rem.s32 	%r1827, %r1826, %r1565;
	shl.b32 	%r1828, %r1827, 5;
	add.s32 	%r1829, %r1828, %r40;
	shl.b32 	%r1830, %r1829, 2;
	or.b32  	%r1831, %r1830, 2;
	mul.wide.s32 	%rd167, %r1831, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r6972;
	@%p88 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1838, %r234, %r228;
	add.s32 	%r1839, %r1838, %r243;
	mul.wide.s32 	%rd168, %r1839, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1840, %r1838, %r244;
	mul.wide.s32 	%rd170, %r1840, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6973, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6973, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6973;
	@%p88 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1843, %r234, 1;
	mul.lo.s32 	%r1844, %r1843, %r228;
	add.s32 	%r1845, %r1844, %r243;
	mul.wide.s32 	%rd172, %r1845, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1846, %r1844, %r244;
	mul.wide.s32 	%rd174, %r1846, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6974, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6974, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6974;

$L__BB0_137:
	add.s32 	%r6970, %r6970, %r1586;
	setp.lt.s32 	%p94, %r6970, %r1565;
	@%p94 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1987, %r1560, -1;
	mad.lo.s32 	%r1988, %r1561, 576, 128;
	mul.lo.s32 	%r1989, %r1988, %r1987;
	add.s32 	%r1990, %r66, -64;
	add.s32 	%r1991, %r1990, %r66;
	add.s32 	%r1992, %r1561, -1;
	mad.lo.s32 	%r1993, %r1991, %r1992, %r1989;
	mul.lo.s32 	%r1994, %r1987, %r1561;
	mul.lo.s32 	%r1995, %r1994, 320;
	mad.lo.s32 	%r1996, %r1990, %r1992, %r1995;
	add.s32 	%r386, %r1996, %r1993;
	setp.lt.s32 	%p151, %r386, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7189, {low,high};}

	// end inline asm
	@%p151 bra 	$L__BB0_270;

	mov.u32 	%r7010, 0;
	mov.u32 	%r7008, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7008], %r7189;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1999, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7008+4], %r1999;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2000, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7008+8], %r2000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2001, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7008+12], %r2001;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7189, {low,high};}

	// end inline asm
	add.s32 	%r7008, %r7008, 16;
	add.s32 	%r7010, %r7010, 4;
	setp.lt.s32 	%p152, %r7010, %r386;
	@%p152 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7190, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2004, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r2005, 31;
	sub.s32 	%r2006, %r2005, %r40;
	setp.gt.s32 	%p153, %r39, %r40;
	selp.b32 	%r2007, %r40, %r2006, %p153;
	shl.b32 	%r2008, %r2007, 2;
	sub.s32 	%r397, %r2008, %r1568;
	shl.b32 	%r2009, %r1567, 2;
	mov.u32 	%r2010, 128;
	sub.s32 	%r398, %r2010, %r2009;
	rem.s32 	%r2011, %r397, %r398;
	add.s32 	%r2012, %r2011, %r398;
	rem.s32 	%r399, %r2012, %r398;
	add.s32 	%r2013, %r397, 2;
	rem.s32 	%r2014, %r2013, %r398;
	add.s32 	%r2015, %r2014, %r398;
	rem.s32 	%r400, %r2015, %r398;
	mul.lo.s32 	%r2016, %r399, 6;
	mul.lo.s32 	%r2017, %r400, 6;
	mul.wide.s32 	%rd259, %r2016, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r2017, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7012, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7012, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7013, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7013, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7014, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7014, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7015, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7015, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2026, %r397, 1;
	rem.s32 	%r2027, %r2026, %r398;
	add.s32 	%r2028, %r2027, %r398;
	rem.s32 	%r413, %r2028, %r398;
	add.s32 	%r2029, %r397, 3;
	rem.s32 	%r2030, %r2029, %r398;
	add.s32 	%r2031, %r2030, %r398;
	rem.s32 	%r414, %r2031, %r398;
	mul.lo.s32 	%r2032, %r413, 6;
	mul.lo.s32 	%r2033, %r414, 6;
	mul.wide.s32 	%rd261, %r2032, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r2033, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7016, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7016, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7017, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7017, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7018, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7018, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7019, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7019, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2042, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2042;
	// begin inline asm
	mov.u32 %r2043, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r2043;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p162, %rd24, 0;
	@%p162 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2044, %nctaid.y;
	mov.u32 	%r2045, %nctaid.x;
	mul.lo.s32 	%r2046, %r2045, %r2044;
	mov.u32 	%r2047, %nctaid.z;
	mul.lo.s32 	%r427, %r2046, %r2047;
	neg.s32 	%r2048, %r36;
	add.s32 	%r2049, %r40, %r35;
	setp.ne.s32 	%p163, %r2049, %r2048;
	mov.u32 	%r2050, %ctaid.x;
	add.s32 	%r428, %r2050, %r37;
	neg.s32 	%r429, %r38;
	bar.sync 	0;
	@%p163 bra 	$L__BB0_300;

	setp.eq.s32 	%p164, %r428, %r429;
	mov.u32 	%r2053, -2147483647;
	sub.s32 	%r2054, %r2053, %r427;
	selp.b32 	%r2052, %r2054, 1, %p164;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2051,[%rd25],%r2052;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2055, [%rd25];
	xor.b32  	%r2056, %r2055, %r2051;
	setp.gt.s32 	%p165, %r2056, -1;
	@%p165 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2057,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p166, %r43, 1;
	@%p166 bra 	$L__BB0_835;

	shr.s32 	%r2071, %r1570, 31;
	shr.u32 	%r2072, %r2071, 30;
	add.s32 	%r2073, %r1570, %r2072;
	shr.s32 	%r431, %r2073, 2;
	add.s32 	%r2074, %r40, 24;
	mul.hi.s32 	%r2075, %r2074, 1374389535;
	shr.u32 	%r2076, %r2075, 31;
	shr.s32 	%r2077, %r2075, 3;
	add.s32 	%r2078, %r2077, %r2076;
	mul.lo.s32 	%r2079, %r2078, 25;
	sub.s32 	%r2080, %r2074, %r2079;
	add.s32 	%r2081, %r40, 26;
	mul.hi.s32 	%r2082, %r2081, 1374389535;
	shr.u32 	%r2083, %r2082, 31;
	shr.s32 	%r2084, %r2082, 3;
	add.s32 	%r2085, %r2084, %r2083;
	mul.lo.s32 	%r2086, %r2085, 25;
	sub.s32 	%r2087, %r2081, %r2086;
	shr.u32 	%r2088, %r1570, 31;
	add.s32 	%r2089, %r1570, %r2088;
	and.b32  	%r2090, %r2089, -2;
	sub.s32 	%r432, %r1570, %r2090;
	setp.lt.s32 	%p167, %r40, 25;
	selp.b32 	%r433, %r2080, %r40, %p167;
	setp.lt.s32 	%p168, %r399, %r1579;
	setp.ge.s32 	%p169, %r399, %r1578;
	and.pred  	%p11, %p168, %p169;
	setp.lt.s32 	%p170, %r413, %r1579;
	setp.ge.s32 	%p171, %r413, %r1578;
	and.pred  	%p12, %p170, %p171;
	setp.lt.s32 	%p172, %r400, %r1579;
	setp.ge.s32 	%p173, %r400, %r1578;
	and.pred  	%p13, %p172, %p173;
	setp.lt.s32 	%p174, %r414, %r1579;
	setp.ge.s32 	%p175, %r414, %r1578;
	and.pred  	%p14, %p174, %p175;
	selp.b32 	%r434, %r2087, %r40, %p167;
	mov.u32 	%r2070, 0;
	// begin inline asm
	{mov.u32 %r2091, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2418, %r2091, 8;
	add.s32 	%r2419, %r2418, -8192;
	or.b32  	%r2095, %r2419, 31;
	mul.wide.s32 	%rd275, %r40, 16;
	mul.wide.s32 	%rd277, %r40, 8;
	mov.u32 	%r7020, %r2070;
	mov.u32 	%r7021, %r2070;
	mov.u32 	%r7022, %r2070;
	mov.u32 	%r7023, %r2070;
	mov.u32 	%r7024, %r2070;
	mov.u32 	%r7025, %r2070;
	mov.u32 	%r7026, %r2070;
	mov.u32 	%r7027, %r2070;
	mov.u32 	%r7028, %r2070;
	mov.u32 	%r7029, %r2070;
	mov.u32 	%r7030, %r2070;
	mov.u32 	%r7031, %r2070;
	mov.u32 	%r7393, %r2004;
	mov.u32 	%r7394, %r2004;
	mov.u32 	%r7391, %r2004;
	mov.u32 	%r7392, %r2004;
	mov.u32 	%r7277, %r2004;
	mov.u32 	%r7278, %r2004;
	mov.u32 	%r7291, %r2004;
	mov.u32 	%r7279, %r2004;
	mov.u32 	%r7293, %r2004;
	mov.u32 	%r7280, %r2004;
	mov.u32 	%r7281, %r2004;
	mov.u32 	%r7282, %r2004;
	mov.u32 	%r7283, %r2004;
	mov.u32 	%r7284, %r2004;
	mov.u32 	%r7285, %r2004;
	mov.u32 	%r7286, %r2004;
	mov.u32 	%r7295, %r2004;
	mov.u32 	%r7296, %r2004;
	mov.u32 	%r7297, %r2004;
	mov.u32 	%r7298, %r2004;
	mov.u32 	%r7299, %r2004;
	mov.u32 	%r7300, %r2004;
	mov.u32 	%r7287, %r2004;
	mov.u32 	%r7288, %r2004;
	mov.u32 	%r7301, %r2004;
	mov.u32 	%r7302, %r2004;
	mov.u32 	%r7289, %r2004;
	mov.u32 	%r7290, %r2004;
	mov.u32 	%r7060, %r2004;
	mov.u32 	%r7061, %r2004;
	mov.u32 	%r7062, %r2004;
	mov.u32 	%r7063, %r2004;
	mov.u32 	%r7064, %r2004;
	mov.u32 	%r7065, %r2004;
	mov.u32 	%r7066, %r2004;
	mov.u32 	%r7067, %r2004;
	mov.u32 	%r7068, %r2004;
	mov.u32 	%r7069, %r2004;
	mov.u32 	%r7070, %r2004;
	mov.u32 	%r7071, %r2004;
	mov.u32 	%r7072, %r2004;
	mov.u32 	%r7073, %r2004;
	mov.u32 	%r7074, %r2004;
	mov.u32 	%r7075, %r2004;
	mov.u32 	%r7076, %r2004;
	mov.u32 	%r7077, %r2004;
	mov.u32 	%r7078, %r2004;
	mov.u32 	%r7079, %r2004;
	mov.u32 	%r7080, %r2004;
	mov.u32 	%r7081, %r2004;
	mov.u32 	%r7317, %r2004;
	mov.u32 	%r7318, %r2004;
	mov.u32 	%r7086, %r2004;
	mov.u32 	%r7087, %r2004;
	mov.u32 	%r7088, %r2004;
	mov.u32 	%r7089, %r2004;
	mov.u32 	%r7319, %r2004;
	mov.u32 	%r7320, %r2004;
	mov.u32 	%r7092, %r2004;
	mov.u32 	%r7321, %r2004;
	mov.u32 	%r7094, %r2004;
	mov.u32 	%r7095, %r2004;
	mov.u32 	%r7322, %r2004;
	mov.u32 	%r7097, %r2004;
	mov.u32 	%r7098, %r2004;
	mov.u32 	%r7099, %r2004;
	mov.u32 	%r7407, %r2004;
	mov.u32 	%r7408, %r2004;
	mov.u32 	%r7102, %r2004;
	mov.u32 	%r7103, %r2004;
	mov.u32 	%r7106, %r2004;
	mov.u32 	%r7107, %r2004;
	mov.u32 	%r7108, %r2004;
	mov.u32 	%r7109, %r2004;
	mov.u32 	%r7110, %r2004;
	mov.u32 	%r7326, %r2004;
	mov.u32 	%r7112, %r2004;
	mov.u32 	%r7113, %r2004;
	mov.u32 	%r7114, %r2004;
	mov.u32 	%r7115, %r2004;
	mov.u32 	%r7116, %r2004;
	mov.u32 	%r7117, %r2004;
	mov.u32 	%r7118, %r2004;
	mov.u32 	%r7328, %r2004;
	mov.u32 	%r7120, %r2004;
	mov.u32 	%r7121, %r2004;
	mov.u32 	%r7122, %r2004;
	mov.u32 	%r7329, %r2004;
	mov.u32 	%r7124, %r2004;
	mov.u32 	%r7125, %r2004;
	mov.u32 	%r7126, %r2004;
	mov.u32 	%r7127, %r2004;
	mov.u32 	%r7128, %r2004;
	mov.u32 	%r7129, %r2004;
	mov.u32 	%r7130, %r2004;
	mov.u32 	%r7330, %r2004;
	mov.u32 	%r7132, %r2004;
	mov.u32 	%r7409, %r2004;
	mov.u32 	%r7134, %r2004;
	mov.u32 	%r7135, %r2004;
	mov.u32 	%r7136, %r2004;
	mov.u32 	%r7137, %r2004;
	mov.u32 	%r7410, %r2004;
	mov.u32 	%r7139, %r2004;
	mov.u32 	%r7140, %r2004;
	mov.u32 	%r7141, %r2004;
	mov.u32 	%r7142, %r2004;
	mov.u32 	%r7143, %r2004;
	mov.u32 	%r7144, %r2004;
	mov.u32 	%r7145, %r2004;
	mov.u32 	%r7146, %r2004;
	mov.u32 	%r7147, %r2004;
	mov.u32 	%r7148, %r2004;
	mov.u32 	%r7149, %r2004;
	mov.u32 	%r7150, %r2004;
	mov.u32 	%r7151, %r2004;
	mov.u32 	%r7152, %r2004;
	mov.u32 	%r7153, %r2004;
	mov.u32 	%r7154, %r2004;
	mov.u32 	%r7155, %r2004;
	mov.u32 	%r7156, %r2004;
	mov.u32 	%r7157, %r2004;
	mov.u32 	%r7158, %r2004;
	mov.u32 	%r7159, %r2004;
	mov.u32 	%r7160, %r2004;
	mov.u32 	%r7161, %r2004;
	mov.u32 	%r7162, %r2004;
	mov.u32 	%r7163, %r2004;
	mov.u32 	%r7164, %r2004;
	mov.u32 	%r7165, %r2004;
	mov.u32 	%r7166, %r2004;
	mov.u32 	%r7167, %r2004;
	mov.u32 	%r7168, %r2004;
	mov.u32 	%r7169, %r2004;
	mov.u32 	%r7170, %r2004;
	mov.u32 	%r7171, %r2004;
	mov.u32 	%r7172, %r2004;
	mov.u32 	%r7173, %r2004;
	mov.u32 	%r7174, %r2004;
	mov.u32 	%r7175, %r2004;
	mov.u32 	%r7176, %r2004;
	mov.u32 	%r7177, %r2004;
	mov.u32 	%r7178, %r2004;
	mov.u32 	%r7179, %r2004;
	mov.u32 	%r7180, %r2004;
	mov.u32 	%r7181, %r2004;
	mov.u32 	%r7182, %r2004;
	mov.u32 	%r7183, %r2004;
	mov.u32 	%r7184, %r2004;
	mov.u32 	%r7185, %r2004;
	mov.u32 	%r7186, %r2004;
	mov.u32 	%r7187, %r2004;
	mov.u32 	%r7188, %r2070;

$L__BB0_302:
	mov.u32 	%r546, %r7330;
	mov.u32 	%r542, %r7127;
	mov.u32 	%r538, %r7329;
	mov.u32 	%r536, %r7121;
	mov.u32 	%r534, %r7328;
	mov.u32 	%r526, %r7326;
	mov.u32 	%r7127, %r7322;
	mov.u32 	%r508, %r7321;
	mov.u32 	%r7121, %r7320;
	mov.u32 	%r505, %r7319;
	mov.u32 	%r500, %r7318;
	mov.u32 	%r499, %r7317;
	sub.s32 	%r6901, %r1565, %r42;
	mov.u32 	%r2106, 1;
	not.b32 	%r2380, %r37;
	mov.u32 	%r2372, -1;
	add.s32 	%r2381, %r1562, %r2380;
	mul.lo.s32 	%r2382, %r2381, %r1564;
	add.s32 	%r2383, %r7188, %r2382;
	not.b32 	%r2385, %r38;
	add.s32 	%r2386, %r1563, %r2385;
	mul.lo.s32 	%r2387, %r2386, %r1564;
	add.s32 	%r2388, %r7188, %r2387;
	add.s32 	%r2389, %r2382, %r2387;
	add.s32 	%r2390, %r2389, %r1565;
	not.b32 	%r2391, %r35;
	add.s32 	%r2392, %r1560, %r2391;
	mad.lo.s32 	%r2393, %r2381, %r1560, %r2392;
	not.b32 	%r2395, %r36;
	add.s32 	%r2396, %r1561, %r2395;
	mad.lo.s32 	%r2397, %r2386, %r1561, %r2396;
	add.s32 	%r2398, %r2393, %r2397;
	shl.b32 	%r2399, %r2398, 1;
	add.s32 	%r2400, %r2390, %r2399;
	add.s32 	%r2401, %r7188, %r2400;
	add.s32 	%r2402, %r7188, %r2389;
	div.s32 	%r2403, %r2401, %r1565;
	neg.s32 	%r2404, %r1565;
	sub.s32 	%r2407, %r42, %r1565;
	sub.s32 	%r2408, %r2393, %r2397;
	shl.b32 	%r2409, %r2408, 1;
	add.s32 	%r2410, %r2409, %r1566;
	mad.lo.s32 	%r2411, %r2403, %r42, %r2410;
	mad.lo.s32 	%r2412, %r2403, %r2407, %r2402;
	div.s32 	%r2413, %r2411, %r1566;
	mul.lo.s32 	%r2414, %r2413, %r1566;
	sub.s32 	%r2417, %r1587, %r1566;
	mov.u32 	%r2190, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2092,%r7190,%r2070,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2098, %r7013, %r2092, %p15;
	// begin inline asm
	{mul.f16x2 %r7274,%r2098,%r7187;
}
	// end inline asm
	selp.b32 	%r2101, %r7017, %r2092, %p15;
	// begin inline asm
	{mul.f16x2 %r7272,%r2101,%r7186;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2104,%r7190,%r2106,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2110, %r7013, %r2104, %p15;
	// begin inline asm
	{mul.f16x2 %r7273,%r2110,%r7185;
}
	// end inline asm
	selp.b32 	%r2113, %r7017, %r2104, %p15;
	// begin inline asm
	{mul.f16x2 %r7271,%r2113,%r7184;
}
	// end inline asm
	mov.u32 	%r2118, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2116,%r7190,%r2118,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2122, %r7013, %r2116, %p15;
	// begin inline asm
	{mul.f16x2 %r7270,%r2122,%r7183;
}
	// end inline asm
	selp.b32 	%r2125, %r7017, %r2116, %p15;
	// begin inline asm
	{mul.f16x2 %r7269,%r2125,%r7182;
}
	// end inline asm
	mov.u32 	%r2130, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2128,%r7190,%r2130,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2134, %r7013, %r2128, %p15;
	// begin inline asm
	{mul.f16x2 %r7268,%r2134,%r7302;
}
	// end inline asm
	selp.b32 	%r2137, %r7017, %r2128, %p15;
	// begin inline asm
	{mul.f16x2 %r7266,%r2137,%r7301;
}
	// end inline asm
	mov.u32 	%r2142, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2140,%r7190,%r2142,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2146, %r7013, %r2140, %p15;
	// begin inline asm
	{mul.f16x2 %r7267,%r2146,%r7181;
}
	// end inline asm
	selp.b32 	%r2149, %r7017, %r2140, %p15;
	// begin inline asm
	{mul.f16x2 %r7265,%r2149,%r7180;
}
	// end inline asm
	mov.u32 	%r2154, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2152,%r7190,%r2154,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2158, %r7013, %r2152, %p15;
	// begin inline asm
	{mul.f16x2 %r7264,%r2158,%r7179;
}
	// end inline asm
	selp.b32 	%r2161, %r7017, %r2152, %p15;
	// begin inline asm
	{mul.f16x2 %r7261,%r2161,%r7178;
}
	// end inline asm
	mov.u32 	%r2166, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2164,%r7190,%r2166,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2170, %r7013, %r2164, %p15;
	// begin inline asm
	{mul.f16x2 %r7263,%r2170,%r7177;
}
	// end inline asm
	selp.b32 	%r2173, %r7017, %r2164, %p15;
	// begin inline asm
	{mul.f16x2 %r7260,%r2173,%r7176;
}
	// end inline asm
	mov.u32 	%r2178, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2176,%r7190,%r2178,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2182, %r7013, %r2176, %p15;
	// begin inline asm
	{mul.f16x2 %r7262,%r2182,%r7175;
}
	// end inline asm
	selp.b32 	%r2185, %r7017, %r2176, %p15;
	// begin inline asm
	{mul.f16x2 %r7259,%r2185,%r7174;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2188,%r7190,%r2190,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2194, %r7013, %r2188, %p15;
	// begin inline asm
	{mul.f16x2 %r7258,%r2194,%r7173;
}
	// end inline asm
	selp.b32 	%r2197, %r7017, %r2188, %p15;
	// begin inline asm
	{mul.f16x2 %r7255,%r2197,%r7172;
}
	// end inline asm
	mov.u32 	%r2202, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2200,%r7190,%r2202,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2206, %r7013, %r2200, %p15;
	// begin inline asm
	{mul.f16x2 %r7257,%r2206,%r7171;
}
	// end inline asm
	selp.b32 	%r2209, %r7017, %r2200, %p15;
	// begin inline asm
	{mul.f16x2 %r7254,%r2209,%r7170;
}
	// end inline asm
	mov.u32 	%r2214, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2212,%r7190,%r2214,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2218, %r7013, %r2212, %p15;
	// begin inline asm
	{mul.f16x2 %r7256,%r2218,%r7169;
}
	// end inline asm
	selp.b32 	%r2221, %r7017, %r2212, %p15;
	// begin inline asm
	{mul.f16x2 %r7253,%r2221,%r7168;
}
	// end inline asm
	mov.u32 	%r2226, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2224,%r7190,%r2226,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2230, %r7013, %r2224, %p15;
	// begin inline asm
	{mul.f16x2 %r7252,%r2230,%r7288;
}
	// end inline asm
	selp.b32 	%r2233, %r7017, %r2224, %p15;
	// begin inline asm
	{mul.f16x2 %r7251,%r2233,%r7287;
}
	// end inline asm
	mov.u32 	%r2238, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2236,%r7190,%r2238,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2242, %r7013, %r2236, %p15;
	// begin inline asm
	{mul.f16x2 %r7250,%r2242,%r7300;
}
	// end inline asm
	selp.b32 	%r2245, %r7017, %r2236, %p15;
	// begin inline asm
	{mul.f16x2 %r7248,%r2245,%r7298;
}
	// end inline asm
	mov.u32 	%r2250, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2248,%r7190,%r2250,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2254, %r7013, %r2248, %p15;
	// begin inline asm
	{mul.f16x2 %r7249,%r2254,%r7299;
}
	// end inline asm
	selp.b32 	%r2257, %r7017, %r2248, %p15;
	// begin inline asm
	{mul.f16x2 %r7247,%r2257,%r7297;
}
	// end inline asm
	mov.u32 	%r2262, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2260,%r7190,%r2262,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2266, %r7013, %r2260, %p15;
	// begin inline asm
	{mul.f16x2 %r7246,%r2266,%r7296;
}
	// end inline asm
	selp.b32 	%r2269, %r7017, %r2260, %p15;
	// begin inline asm
	{mul.f16x2 %r7243,%r2269,%r7295;
}
	// end inline asm
	mov.u32 	%r2274, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2272,%r7190,%r2274,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2278, %r7013, %r2272, %p15;
	// begin inline asm
	{mul.f16x2 %r7245,%r2278,%r7167;
}
	// end inline asm
	selp.b32 	%r2281, %r7017, %r2272, %p15;
	// begin inline asm
	{mul.f16x2 %r7242,%r2281,%r7166;
}
	// end inline asm
	mov.u32 	%r2286, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2284,%r7190,%r2286,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2290, %r7013, %r2284, %p15;
	// begin inline asm
	{mul.f16x2 %r7244,%r2290,%r7165;
}
	// end inline asm
	selp.b32 	%r2293, %r7017, %r2284, %p15;
	// begin inline asm
	{mul.f16x2 %r7241,%r2293,%r7164;
}
	// end inline asm
	mov.u32 	%r2298, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2296,%r7190,%r2298,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2302, %r7013, %r2296, %p15;
	// begin inline asm
	{mul.f16x2 %r7240,%r2302,%r7286;
}
	// end inline asm
	selp.b32 	%r2305, %r7017, %r2296, %p15;
	// begin inline asm
	{mul.f16x2 %r7237,%r2305,%r7284;
}
	// end inline asm
	mov.u32 	%r2310, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2308,%r7190,%r2310,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2314, %r7013, %r2308, %p15;
	// begin inline asm
	{mul.f16x2 %r7239,%r2314,%r7285;
}
	// end inline asm
	selp.b32 	%r2317, %r7017, %r2308, %p15;
	// begin inline asm
	{mul.f16x2 %r7236,%r2317,%r7283;
}
	// end inline asm
	mov.u32 	%r2322, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2320,%r7190,%r2322,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2326, %r7013, %r2320, %p15;
	// begin inline asm
	{mul.f16x2 %r7238,%r2326,%r7163;
}
	// end inline asm
	selp.b32 	%r2329, %r7017, %r2320, %p15;
	// begin inline asm
	{mul.f16x2 %r7235,%r2329,%r7162;
}
	// end inline asm
	mov.u32 	%r2334, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2332,%r7190,%r2334,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2338, %r7013, %r2332, %p15;
	// begin inline asm
	{mul.f16x2 %r7234,%r2338,%r7282;
}
	// end inline asm
	selp.b32 	%r2341, %r7017, %r2332, %p15;
	// begin inline asm
	{mul.f16x2 %r7233,%r2341,%r7281;
}
	// end inline asm
	mov.u32 	%r2346, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2344,%r7190,%r2346,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2350, %r7013, %r2344, %p15;
	// begin inline asm
	{mul.f16x2 %r7232,%r2350,%r7280;
}
	// end inline asm
	selp.b32 	%r2353, %r7017, %r2344, %p15;
	// begin inline asm
	{mul.f16x2 %r7230,%r2353,%r7279;
}
	// end inline asm
	mov.u32 	%r2358, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2356,%r7190,%r2358,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2362, %r7013, %r2356, %p15;
	// begin inline asm
	{mul.f16x2 %r7231,%r2362,%r7293;
}
	// end inline asm
	selp.b32 	%r2365, %r7017, %r2356, %p15;
	// begin inline asm
	{mul.f16x2 %r7229,%r2365,%r7291;
}
	// end inline asm
	mov.u32 	%r2370, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2368,%r7190,%r2370,%r2095,%r2372;
}
	// end inline asm
	selp.b32 	%r2374, %r7013, %r2368, %p15;
	// begin inline asm
	{mul.f16x2 %r7228,%r2374,%r7278;
}
	// end inline asm
	selp.b32 	%r2377, %r7017, %r2368, %p15;
	// begin inline asm
	{mul.f16x2 %r7227,%r2377,%r7277;
}
	// end inline asm
	rem.s32 	%r654, %r2383, %r65;
	rem.s32 	%r655, %r2388, %r6901;
	mad.lo.s32 	%r656, %r2403, %r2404, %r2401;
	sub.s32 	%r657, %r2411, %r2414;
	mad.lo.s32 	%r658, %r2413, %r2417, %r2412;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2467, %r658, 1;
	mul.wide.s32 	%rd270, %r2467, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p86 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2670, %r1582, 1;
	setp.lt.s32 	%p183, %r658, %r2670;
	setp.eq.s32 	%p184, %r431, %r40;
	setp.gt.s32 	%p185, %r658, -1;
	and.pred  	%p186, %p184, %p185;
	and.pred  	%p187, %p183, %p186;
	@%p187 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7193, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7194, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2470, %r1582, 1;
	setp.lt.s32 	%p178, %r658, %r2470;
	setp.gt.s32 	%p179, %r658, -1;
	and.pred  	%p180, %p179, %p178;
	@%p180 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7191, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7192, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7193, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7194, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2678, 0;
	mov.u32 	%r2689, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2676,%r7189,%r2678,%r2095,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2681,%r7193,%r2676;
}
	// end inline asm
	mov.u32 	%r2687, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2685,%r7189,%r2687,%r2095,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2690,%r7194,%r2685;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7196,%r2681,%r2690;
}
	// end inline asm
	setp.eq.s32 	%p188, %r432, 0;
	mov.u32 	%r7195, %r7196;
	@%p188 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7195, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7274,%r7274,%r7195;
}
	// end inline asm
	setp.eq.s32 	%p189, %r432, 1;
	@%p189 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7196, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7272,%r7272,%r7196;
}
	// end inline asm
	mov.u32 	%r2711, 2;
	mov.u32 	%r2722, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2709,%r7189,%r2711,%r2095,%r2722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2714,%r7193,%r2709;
}
	// end inline asm
	mov.u32 	%r2720, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2718,%r7189,%r2720,%r2095,%r2722;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2723,%r7194,%r2718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7198,%r2714,%r2723;
}
	// end inline asm
	mov.u32 	%r7197, %r7198;
	@%p188 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7197, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7273,%r7273,%r7197;
}
	// end inline asm
	@%p189 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7198, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7271,%r7271,%r7198;
}
	// end inline asm
	mov.u32 	%r2744, 4;
	mov.u32 	%r2755, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2742,%r7189,%r2744,%r2095,%r2755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2747,%r7193,%r2742;
}
	// end inline asm
	mov.u32 	%r2753, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2751,%r7189,%r2753,%r2095,%r2755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2756,%r7194,%r2751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7200,%r2747,%r2756;
}
	// end inline asm
	mov.u32 	%r7199, %r7200;
	@%p188 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7199, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7270,%r7270,%r7199;
}
	// end inline asm
	@%p189 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7200, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7269,%r7269,%r7200;
}
	// end inline asm
	mov.u32 	%r2777, 6;
	mov.u32 	%r2788, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2775,%r7189,%r2777,%r2095,%r2788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2780,%r7193,%r2775;
}
	// end inline asm
	mov.u32 	%r2786, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2784,%r7189,%r2786,%r2095,%r2788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2789,%r7194,%r2784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7202,%r2780,%r2789;
}
	// end inline asm
	mov.u32 	%r7201, %r7202;
	@%p188 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7201, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7268,%r7268,%r7201;
}
	// end inline asm
	@%p189 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7202, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7266,%r7266,%r7202;
}
	// end inline asm
	mov.u32 	%r2810, 8;
	mov.u32 	%r2821, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2808,%r7189,%r2810,%r2095,%r2821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2813,%r7193,%r2808;
}
	// end inline asm
	mov.u32 	%r2819, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2817,%r7189,%r2819,%r2095,%r2821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2822,%r7194,%r2817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7204,%r2813,%r2822;
}
	// end inline asm
	mov.u32 	%r7203, %r7204;
	@%p188 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7203, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7267,%r7267,%r7203;
}
	// end inline asm
	@%p189 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7204, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7265,%r7265,%r7204;
}
	// end inline asm
	mov.u32 	%r2843, 10;
	mov.u32 	%r2854, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2841,%r7189,%r2843,%r2095,%r2854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2846,%r7193,%r2841;
}
	// end inline asm
	mov.u32 	%r2852, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2850,%r7189,%r2852,%r2095,%r2854;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2855,%r7194,%r2850;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7206,%r2846,%r2855;
}
	// end inline asm
	mov.u32 	%r7205, %r7206;
	@%p188 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7205, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7264,%r7264,%r7205;
}
	// end inline asm
	@%p189 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7206, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7261,%r7261,%r7206;
}
	// end inline asm
	mov.u32 	%r2876, 12;
	mov.u32 	%r2887, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2874,%r7189,%r2876,%r2095,%r2887;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2879,%r7193,%r2874;
}
	// end inline asm
	mov.u32 	%r2885, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2883,%r7189,%r2885,%r2095,%r2887;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2888,%r7194,%r2883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r2879,%r2888;
}
	// end inline asm
	mov.u32 	%r7207, %r7208;
	@%p188 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7207, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7263,%r7263,%r7207;
}
	// end inline asm
	@%p189 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7208, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7260,%r7260,%r7208;
}
	// end inline asm
	mov.u32 	%r2909, 14;
	mov.u32 	%r2920, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2907,%r7189,%r2909,%r2095,%r2920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2912,%r7193,%r2907;
}
	// end inline asm
	mov.u32 	%r2918, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2916,%r7189,%r2918,%r2095,%r2920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2921,%r7194,%r2916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7210,%r2912,%r2921;
}
	// end inline asm
	mov.u32 	%r7209, %r7210;
	@%p188 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7209, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7258,%r7258,%r7209;
}
	// end inline asm
	@%p189 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7210, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7255,%r7255,%r7210;
}
	// end inline asm
	mov.u32 	%r2942, 16;
	mov.u32 	%r2953, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2940,%r7189,%r2942,%r2095,%r2953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2945,%r7193,%r2940;
}
	// end inline asm
	mov.u32 	%r2951, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2949,%r7189,%r2951,%r2095,%r2953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2954,%r7194,%r2949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7212,%r2945,%r2954;
}
	// end inline asm
	mov.u32 	%r7211, %r7212;
	@%p188 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7211, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7257,%r7257,%r7211;
}
	// end inline asm
	@%p189 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7212, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7254,%r7254,%r7212;
}
	// end inline asm
	mov.u32 	%r2975, 18;
	mov.u32 	%r2986, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2973,%r7189,%r2975,%r2095,%r2986;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2978,%r7193,%r2973;
}
	// end inline asm
	mov.u32 	%r2984, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2982,%r7189,%r2984,%r2095,%r2986;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2987,%r7194,%r2982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7214,%r2978,%r2987;
}
	// end inline asm
	mov.u32 	%r7213, %r7214;
	@%p188 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7213, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7252,%r7252,%r7213;
}
	// end inline asm
	@%p189 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7214, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7251,%r7251,%r7214;
}
	// end inline asm
	mov.u32 	%r3008, 20;
	mov.u32 	%r3019, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3006,%r7189,%r3008,%r2095,%r3019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3011,%r7193,%r3006;
}
	// end inline asm
	mov.u32 	%r3017, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3015,%r7189,%r3017,%r2095,%r3019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3020,%r7194,%r3015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7216,%r3011,%r3020;
}
	// end inline asm
	mov.u32 	%r7215, %r7216;
	@%p188 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7215, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7250,%r7250,%r7215;
}
	// end inline asm
	@%p189 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7216, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7248,%r7248,%r7216;
}
	// end inline asm
	mov.u32 	%r3041, 22;
	mov.u32 	%r3052, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3039,%r7189,%r3041,%r2095,%r3052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3044,%r7193,%r3039;
}
	// end inline asm
	mov.u32 	%r3050, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3048,%r7189,%r3050,%r2095,%r3052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3053,%r7194,%r3048;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7218,%r3044,%r3053;
}
	// end inline asm
	mov.u32 	%r7217, %r7218;
	@%p188 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7217, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7246,%r7246,%r7217;
}
	// end inline asm
	@%p189 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7218, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7243,%r7243,%r7218;
}
	// end inline asm
	mov.u32 	%r3074, 24;
	mov.u32 	%r3085, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3072,%r7189,%r3074,%r2095,%r3085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3077,%r7193,%r3072;
}
	// end inline asm
	mov.u32 	%r3083, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3081,%r7189,%r3083,%r2095,%r3085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3086,%r7194,%r3081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7220,%r3077,%r3086;
}
	// end inline asm
	mov.u32 	%r7219, %r7220;
	@%p188 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7219, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7245,%r7245,%r7219;
}
	// end inline asm
	@%p189 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7220, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7242,%r7242,%r7220;
}
	// end inline asm
	mov.u32 	%r3107, 26;
	mov.u32 	%r3118, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3105,%r7189,%r3107,%r2095,%r3118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3110,%r7193,%r3105;
}
	// end inline asm
	mov.u32 	%r3116, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3114,%r7189,%r3116,%r2095,%r3118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3119,%r7194,%r3114;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7222,%r3110,%r3119;
}
	// end inline asm
	mov.u32 	%r7221, %r7222;
	@%p188 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7221, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7240,%r7240,%r7221;
}
	// end inline asm
	@%p189 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7222, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7237,%r7237,%r7222;
}
	// end inline asm
	mov.u32 	%r3140, 28;
	mov.u32 	%r3151, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3138,%r7189,%r3140,%r2095,%r3151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3143,%r7193,%r3138;
}
	// end inline asm
	mov.u32 	%r3149, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3147,%r7189,%r3149,%r2095,%r3151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3152,%r7194,%r3147;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7224,%r3143,%r3152;
}
	// end inline asm
	mov.u32 	%r7223, %r7224;
	@%p188 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7223, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7239,%r7239,%r7223;
}
	// end inline asm
	@%p189 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7224, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7236,%r7236,%r7224;
}
	// end inline asm
	mov.u32 	%r3182, 31;
	mov.u32 	%r3173, 30;
	mov.u32 	%r3184, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3171,%r7189,%r3173,%r2095,%r3184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3176,%r7193,%r3171;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3180,%r7189,%r3182,%r2095,%r3184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3185,%r7194,%r3180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7226,%r3176,%r3185;
}
	// end inline asm
	mov.u32 	%r7225, %r7226;
	@%p188 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7225, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7232,%r7232,%r7225;
}
	// end inline asm
	@%p189 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7226, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7230,%r7230,%r7226;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7191, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7192, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p181, %r657, %r1570;
	@%p181 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2572,%r7191,%r7023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7274,%r7274,%r2572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2578,%r7191,%r7021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7262,%r7262,%r2578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2584,%r7191,%r7027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7264,%r7264,%r2584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2590,%r7191,%r7025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7244,%r7244,%r2590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2596,%r7191,%r7031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7246,%r7246,%r2596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2602,%r7191,%r7029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7231,%r7231,%r2602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2608,%r7192,%r7027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7268,%r7268,%r2608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2614,%r7192,%r7025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7249,%r7249,%r2614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2620,%r7191,%r7022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7272,%r7272,%r2620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2626,%r7191,%r7020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7259,%r7259,%r2626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2632,%r7191,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7261,%r7261,%r2632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2638,%r7191,%r7024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7241,%r7241,%r2638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2644,%r7191,%r7030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7243,%r7243,%r2644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2650,%r7191,%r7028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7229,%r7229,%r2650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2656,%r7192,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7266,%r7266,%r2656;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2662,%r7192,%r7024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7247,%r7247,%r2662;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2475, %r1570, -2;
	setp.ne.s32 	%p182, %r657, %r2475;
	@%p182 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2476,%r7191,%r7027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7252,%r7252,%r2476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2482,%r7191,%r7025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7234,%r7234,%r2482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2488,%r7192,%r7023;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7270,%r7270,%r2488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2494,%r7192,%r7021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7256,%r7256,%r2494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2500,%r7192,%r7027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7258,%r7258,%r2500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2506,%r7192,%r7025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7238,%r7238,%r2506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2512,%r7192,%r7031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7240,%r7240,%r2512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2518,%r7192,%r7029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7228,%r7228,%r2518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2524,%r7191,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7251,%r7251,%r2524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2530,%r7191,%r7024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7233,%r7233,%r2530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2536,%r7192,%r7022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7269,%r7269,%r2536;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2542,%r7192,%r7020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7253,%r7253,%r2542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2548,%r7192,%r7026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7255,%r7255,%r2548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2554,%r7192,%r7024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7235,%r7235,%r2554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2560,%r7192,%r7030;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7237,%r7237,%r2560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2566,%r7192,%r7028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7227,%r7227,%r2566;
}
	// end inline asm

$L__BB0_378:
	ld.param.u64 	%rd272, [%rd1+80];
	cvta.to.global.u64 	%rd27, %rd272;
	setp.ne.s32 	%p220, %r35, 0;
	@%p220 bra 	$L__BB0_383;

	setp.eq.s32 	%p221, %r36, 0;
	mad.lo.s32 	%r3205, %r654, %r1563, %r38;
	mul.lo.s32 	%r3206, %r1561, %r3205;
	mul.lo.s32 	%r3207, %r3206, 768;
	mad.lo.s32 	%r3208, %r36, 384, %r3207;
	add.s32 	%r3209, %r3208, -64;
	mul.wide.s32 	%rd273, %r3209, 4;
	add.s64 	%rd274, %rd27, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7286, %r7284, %r7278, %r7277}, [%rd276+256];
	ld.global.v4.u32 	{%r7288, %r7287, %r7282, %r7281}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p221 bra 	$L__BB0_381;

	ld.global.v2.u32 	{%r7280, %r7279}, [%rd28];

$L__BB0_381:
	setp.ne.s32 	%p222, %r36, %r1992;
	ld.global.v2.u32 	{%r7285, %r7283}, [%rd28+768];
	@%p222 bra 	$L__BB0_383;

	ld.global.v2.u32 	{%r7290, %r7289}, [%rd28+1536];

$L__BB0_383:
	setp.ne.s32 	%p223, %r36, 0;
	@%p223 bra 	$L__BB0_385;

	not.b32 	%r6903, %r35;
	add.s32 	%r6902, %r1560, %r6903;
	mad.lo.s32 	%r3228, %r655, %r1562, %r37;
	mul.lo.s32 	%r3232, %r3228, %r1621;
	mad.lo.s32 	%r3235, %r6902, 384, %r3232;
	add.s32 	%r3236, %r3235, -64;
	mad.lo.s32 	%r3239, %r1623, %r65, %r3236;
	mul.wide.s32 	%rd278, %r3239, 4;
	add.s64 	%rd279, %rd27, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7302, %r7301, %r7299, %r7297}, [%rd281+256];
	ld.global.v4.u32 	{%r7296, %r7295, %r7293, %r7291}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7300, %r7298}, [%rd283+768];
	ld.global.v2.u32 	{%r7280, %r7279}, [%rd283+1536];

$L__BB0_385:
	ld.param.u64 	%rd285, [%rd1+88];
	cvta.to.global.u64 	%rd29, %rd285;
	add.s32 	%r3252, %r1565, -1;
	setp.ge.s32 	%p224, %r656, %r3252;
	setp.lt.s32 	%p225, %r656, 2;
	or.pred  	%p226, %p225, %p224;
	setp.lt.s32 	%p227, %r657, 2;
	or.pred  	%p228, %p226, %p227;
	add.s32 	%r3253, %r1566, -2;
	setp.ge.s32 	%p229, %r657, %r3253;
	or.pred  	%p230, %p229, %p228;
	mov.u32 	%r7317, %r2004;
	mov.u32 	%r7318, %r2004;
	mov.u32 	%r7319, %r2004;
	mov.u32 	%r7320, %r2004;
	mov.u32 	%r7321, %r2004;
	mov.u32 	%r7322, %r2004;
	mov.u32 	%r7323, %r2004;
	mov.u32 	%r7324, %r2004;
	mov.u32 	%r7325, %r2004;
	mov.u32 	%r7326, %r2004;
	mov.u32 	%r7327, %r2004;
	mov.u32 	%r7328, %r2004;
	mov.u32 	%r7329, %r2004;
	mov.u32 	%r7330, %r2004;
	mov.u32 	%r7331, %r2004;
	mov.u32 	%r7332, %r2004;
	mov.u32 	%r7333, %r2004;
	mov.u32 	%r7334, %r2004;
	mov.u32 	%r7335, %r2004;
	mov.u32 	%r7336, %r2004;
	mov.u32 	%r7337, %r2004;
	mov.u32 	%r7338, %r2004;
	@%p230 bra 	$L__BB0_396;

	mad.lo.s32 	%r925, %r657, %r1565, %r656;
	shl.b32 	%r3254, %r925, 6;
	mul.wide.s32 	%rd286, %r3254, 4;
	add.s64 	%rd30, %rd29, %rd286;
	and.pred  	%p233, %p220, %p223;
	mov.u32 	%r7320, %r2004;
	mov.u32 	%r7322, %r2004;
	@%p233 bra 	$L__BB0_388;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7322, %r7320}, [%rd288+256];

$L__BB0_388:
	mov.u32 	%r7325, %r2004;
	mov.u32 	%r7327, %r2004;
	@%p220 bra 	$L__BB0_390;

	shl.b32 	%r3258, %r1565, 5;
	cvt.s64.s32 	%rd289, %r3258;
	cvt.s64.s32 	%rd290, %r40;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7327, %r7325}, [%rd293];

$L__BB0_390:
	mov.u32 	%r7332, %r2004;
	mov.u32 	%r7334, %r2004;
	@%p223 bra 	$L__BB0_392;

	shl.b32 	%r3262, %r1565, 5;
	neg.s32 	%r3263, %r3262;
	cvt.s64.s32 	%rd294, %r3263;
	cvt.s64.s32 	%rd295, %r40;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7334, %r7332}, [%rd298];

$L__BB0_392:
	shl.b32 	%r3266, %r1566, 6;
	shl.b32 	%r3267, %r925, 7;
	mad.lo.s32 	%r3268, %r3266, %r1565, %r3267;
	mul.wide.s32 	%rd299, %r3268, 4;
	add.s64 	%rd31, %rd29, %rd299;
	mov.u32 	%r7317, %r2004;
	mov.u32 	%r7318, %r2004;
	mov.u32 	%r7323, %r2004;
	mov.u32 	%r7324, %r2004;
	mov.u32 	%r7326, %r2004;
	mov.u32 	%r7328, %r2004;
	mov.u32 	%r7335, %r2004;
	mov.u32 	%r7336, %r2004;
	@%p220 bra 	$L__BB0_394;

	shl.b32 	%r3269, %r1565, 5;
	cvt.s64.s32 	%rd300, %r3269;
	cvt.s64.s32 	%rd301, %r40;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7328, %r7326, %r7318, %r7317}, [%rd304];
	shl.b32 	%r3274, %r1565, 6;
	add.s32 	%r3275, %r3274, -32;
	cvt.s64.s32 	%rd305, %r3275;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7336, %r7335, %r7324, %r7323}, [%rd308];

$L__BB0_394:
	mov.u32 	%r7319, %r2004;
	mov.u32 	%r7321, %r2004;
	mov.u32 	%r7329, %r2004;
	mov.u32 	%r7330, %r2004;
	mov.u32 	%r7331, %r2004;
	mov.u32 	%r7333, %r2004;
	mov.u32 	%r7337, %r2004;
	mov.u32 	%r7338, %r2004;
	@%p223 bra 	$L__BB0_396;

	shl.b32 	%r3281, %r1565, 5;
	xor.b32  	%r3282, %r3281, -32;
	cvt.s64.s32 	%rd309, %r3282;
	cvt.s64.s32 	%rd310, %r40;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7338, %r7337, %r7333, %r7331}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7330, %r7329, %r7321, %r7319}, [%rd315];

$L__BB0_396:
	mov.u32 	%r3296, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3292,%r7159,%r433,%r2095,%r3296;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3292;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7159;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3299, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3300,%r7160,%r3299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3303,%r7012,%r3300;
}
	// end inline asm
	@%p15 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7339,%r7274;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7339,%r7013,%r3300;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3316, 31;
	mov.u32 	%r3339, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3314,%r7339,%r3316,%r2095,%r3339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3319,%r3303,%r3314;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3322,%r7158,%r7157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3325,%r3322,%r3319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3328,%r7161,%r3325;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3331,%r7274,%r3328;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3335,%r7154,%r433,%r2095,%r3339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3335;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7154;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3342, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3343,%r7155,%r3342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3346,%r7012,%r3343;
}
	// end inline asm
	mov.u32 	%r7340, %r7273;
	@%p15 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7340,%r7013,%r3343;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3357,%r7340,%r3316,%r2095,%r3339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3362,%r3346,%r3357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3365,%r7158,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3368,%r3362,%r3365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3371,%r7156,%r3368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3374,%r7273,%r3371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3377,%r7159,%r7160;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3380,%r7016,%r3377;
}
	// end inline asm
	@%p15 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7341,%r7272;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7341,%r7017,%r3377;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3393, 31;
	mov.u32 	%r3395, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3391,%r7341,%r3393,%r2095,%r3395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3396,%r3380,%r3391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3399,%r7151,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3402,%r3399,%r3396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3405,%r7152,%r3402;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3408,%r7272,%r3405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3411,%r7154,%r7155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3414,%r7016,%r3411;
}
	// end inline asm
	mov.u32 	%r7342, %r7271;
	@%p15 bra 	$L__BB0_406;

	// begin inline asm
	{mul.f16x2 %r7342,%r7017,%r3411;
}
	// end inline asm

$L__BB0_406:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3423,%r7342,%r3393,%r2095,%r3395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3428,%r3414,%r3423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3431,%r7151,%r7148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3434,%r3428,%r3431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3437,%r7149,%r3434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3440,%r7271,%r3437;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3444,%r7145,%r433,%r2095,%r3395;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3444;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7145;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3451, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3452,%r7146,%r3451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3455,%r7012,%r3452;
}
	// end inline asm
	@%p15 bra 	$L__BB0_408;
	bra.uni 	$L__BB0_407;

$L__BB0_408:
	// begin inline asm
	{neg.f16x2 %r7343,%r7270;
}
	// end inline asm
	bra.uni 	$L__BB0_409;

$L__BB0_407:
	// begin inline asm
	{mul.f16x2 %r7343,%r7013,%r3452;
}
	// end inline asm

$L__BB0_409:
	mov.u32 	%r3470, 31;
	mov.u32 	%r3472, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3468,%r7343,%r3470,%r2095,%r3472;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3473,%r3455,%r3468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3476,%r7144,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3479,%r3476,%r3473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3482,%r7147,%r3479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3485,%r7270,%r3482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3488,%r7145,%r7146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3491,%r7016,%r3488;
}
	// end inline asm
	@%p15 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7344,%r7269;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7344,%r7017,%r3488;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3504, 31;
	mov.u32 	%r3527, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3502,%r7344,%r3504,%r2095,%r3527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3507,%r3491,%r3502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3510,%r7142,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3513,%r3510,%r3507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3516,%r7143,%r3513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3519,%r7269,%r3516;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3523,%r7140,%r433,%r2095,%r3527;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3523;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7140;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3530, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3531,%r7141,%r3530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3534,%r7012,%r3531;
}
	// end inline asm
	@%p15 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7345,%r7268;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7345,%r7013,%r3531;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3549, 31;
	mov.u32 	%r3572, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3547,%r7345,%r3549,%r2095,%r3572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3552,%r3534,%r3547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3555,%r7139,%r7410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3558,%r3555,%r3552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3561,%r7338,%r3558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3564,%r7268,%r3561;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3568,%r7135,%r433,%r2095,%r3572;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3568;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7135;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3575, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3576,%r7136,%r3575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3579,%r7012,%r3576;
}
	// end inline asm
	mov.u32 	%r7346, %r7267;
	@%p15 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7346,%r7013,%r3576;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3590,%r7346,%r3549,%r2095,%r3572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3595,%r3579,%r3590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r7139,%r7157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3601,%r3595,%r3598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3604,%r7137,%r3601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3607,%r7267,%r3604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3610,%r7140,%r7141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3613,%r7016,%r3610;
}
	// end inline asm
	@%p15 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7347,%r7266;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7347,%r7017,%r3610;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3626, 31;
	mov.u32 	%r3628, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3624,%r7347,%r3626,%r2095,%r3628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3629,%r3613,%r3624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3632,%r7134,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3635,%r3632,%r3629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3638,%r7337,%r3635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3641,%r7266,%r3638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3644,%r7135,%r7136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3647,%r7016,%r3644;
}
	// end inline asm
	mov.u32 	%r7348, %r7265;
	@%p15 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7348,%r7017,%r3644;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3656,%r7348,%r3626,%r2095,%r3628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3661,%r3647,%r3656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3664,%r7134,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3667,%r3661,%r3664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3670,%r7132,%r3667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3673,%r7265,%r3670;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3677,%r7129,%r433,%r2095,%r3628;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3677;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7129;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3684, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3685,%r7130,%r3684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3688,%r7012,%r3685;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7349,%r7264;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7349,%r7013,%r3685;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3703, 31;
	mov.u32 	%r3726, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3701,%r7349,%r3703,%r2095,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3706,%r3688,%r3701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3709,%r7128,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3712,%r3709,%r3706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3715,%r546,%r3712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r7264,%r3715;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3722,%r7125,%r433,%r2095,%r3726;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3722;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7125;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3729, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3730,%r7126,%r3729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3733,%r7012,%r3730;
}
	// end inline asm
	mov.u32 	%r7350, %r7263;
	@%p15 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7350,%r7013,%r3730;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3744,%r7350,%r3703,%r2095,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3749,%r3733,%r3744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r7128,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3755,%r3749,%r3752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3758,%r542,%r3755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r7263,%r3758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3764,%r7130,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3767,%r7126,%r7136;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3770,%r3764,%r3767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3773,%r7124,%r3770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3776,%r7262,%r3773;
}
	// end inline asm
	selp.b32 	%r1051, %r7262, %r3776, %p15;
	// begin inline asm
	{sub.f16x2 %r3779,%r7129,%r7130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3782,%r7016,%r3779;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7351,%r7261;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7351,%r7017,%r3779;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3795, 31;
	mov.u32 	%r3797, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3793,%r7351,%r3795,%r2095,%r3797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3798,%r3782,%r3793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3801,%r7122,%r7134;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r3801,%r3798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3807,%r538,%r3804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7186,%r7261,%r3807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3813,%r7125,%r7126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3816,%r7016,%r3813;
}
	// end inline asm
	mov.u32 	%r7352, %r7260;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7352,%r7017,%r3813;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3825,%r7352,%r3795,%r2095,%r3797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3830,%r3816,%r3825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r7122,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3836,%r3830,%r3833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3839,%r536,%r3836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7184,%r7260,%r3839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3845,%r7129,%r7159;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3848,%r7125,%r7135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3851,%r3845,%r3848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3854,%r7120,%r3851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3857,%r7259,%r3854;
}
	// end inline asm
	selp.b32 	%r1063, %r7259, %r3857, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3861,%r7117,%r433,%r2095,%r3797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3861;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7117;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3868, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3869,%r7118,%r3868;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3872,%r7012,%r3869;
}
	// end inline asm
	@%p15 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7353,%r7258;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7353,%r7013,%r3869;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3887, 31;
	mov.u32 	%r3910, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3885,%r7353,%r3887,%r2095,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3890,%r3872,%r3885;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3893,%r7116,%r7128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3896,%r3893,%r3890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3899,%r534,%r3896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7183,%r7258,%r3899;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3906,%r7113,%r433,%r2095,%r3910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3906;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7113;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3913, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r7114,%r3913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3917,%r7012,%r3914;
}
	// end inline asm
	mov.u32 	%r7354, %r7257;
	@%p15 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7354,%r7013,%r3914;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3928,%r7354,%r3887,%r2095,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3933,%r3917,%r3928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r7116,%r7144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r3933,%r3936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3942,%r7115,%r3939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3945,%r7257,%r3942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3948,%r7118,%r7146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3951,%r7114,%r7126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3954,%r3948,%r3951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3957,%r7112,%r3954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3960,%r7256,%r3957;
}
	// end inline asm
	selp.b32 	%r1075, %r7256, %r3960, %p15;
	// begin inline asm
	{sub.f16x2 %r3963,%r7117,%r7118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3966,%r7016,%r3963;
}
	// end inline asm
	@%p15 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7355,%r7255;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7355,%r7017,%r3963;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3979, 31;
	mov.u32 	%r3981, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3977,%r7355,%r3979,%r2095,%r3981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3982,%r3966,%r3977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3985,%r7110,%r7122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3988,%r3985,%r3982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3991,%r526,%r3988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7182,%r7255,%r3991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3997,%r7113,%r7114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4000,%r7016,%r3997;
}
	// end inline asm
	mov.u32 	%r7356, %r7254;
	@%p15 bra 	$L__BB0_442;

	// begin inline asm
	{mul.f16x2 %r7356,%r7017,%r3997;
}
	// end inline asm

$L__BB0_442:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4009,%r7356,%r3979,%r2095,%r3981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4014,%r4000,%r4009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4017,%r7110,%r7142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4020,%r4014,%r4017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4023,%r7109,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4026,%r7254,%r4023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4029,%r7117,%r7145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r7113,%r7125;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4035,%r4029,%r4032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4038,%r7108,%r4035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4041,%r7253,%r4038;
}
	// end inline asm
	selp.b32 	%r1087, %r7253, %r4041, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4045,%r7106,%r433,%r2095,%r3981;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4045;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7106;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4052, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4053,%r7107,%r4052;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4056,%r7012,%r4053;
}
	// end inline asm
	@%p15 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7357,%r7252;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7357,%r7013,%r4053;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4071, 31;
	mov.u32 	%r4073, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4069,%r7357,%r4071,%r2095,%r4073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4074,%r4056,%r4069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4077,%r7394,%r7116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4080,%r4077,%r4074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4083,%r7336,%r4080;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4086,%r7252,%r4083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4089,%r7106,%r7107;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4092,%r7016,%r4089;
}
	// end inline asm
	@%p15 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7358,%r7251;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7358,%r7017,%r4089;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4105, 31;
	mov.u32 	%r4128, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4103,%r7358,%r4105,%r2095,%r4128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4108,%r4092,%r4103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4111,%r7393,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4114,%r4111,%r4108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4117,%r7335,%r4114;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4120,%r7251,%r4117;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4124,%r7102,%r433,%r2095,%r4128;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4124;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7102;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4131, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4132,%r7103,%r4131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4135,%r7012,%r4132;
}
	// end inline asm
	mov.u32 	%r7359, %r7250;
	@%p15 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7359,%r7013,%r4132;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4146,%r7359,%r4105,%r2095,%r4128;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4151,%r4135,%r4146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4154,%r7078,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4157,%r4151,%r4154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4160,%r7334,%r4157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r7250,%r4160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r7079,%r7141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r7103,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4172,%r4166,%r4169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4175,%r7333,%r4172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4178,%r7249,%r4175;
}
	// end inline asm
	selp.b32 	%r1105, %r7249, %r4178, %p15;
	// begin inline asm
	{sub.f16x2 %r4181,%r7102,%r7103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4184,%r7016,%r4181;
}
	// end inline asm
	mov.u32 	%r7360, %r7248;
	@%p15 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7360,%r7017,%r4181;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4195, 31;
	mov.u32 	%r4233, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4193,%r7360,%r4195,%r2095,%r4233;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4198,%r4184,%r4193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4201,%r7076,%r7134;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4204,%r4198,%r4201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4207,%r7332,%r4204;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7180,%r7248,%r4207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4213,%r7077,%r7140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r7102,%r7407;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r4213,%r4216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4222,%r7331,%r4219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4225,%r7247,%r4222;
}
	// end inline asm
	selp.b32 	%r1111, %r7247, %r4225, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4229,%r7098,%r433,%r2095,%r4233;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4229;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7098;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4236, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4237,%r7099,%r4236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4240,%r7012,%r4237;
}
	// end inline asm
	@%p15 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7361,%r7246;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7361,%r7013,%r4237;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4255, 31;
	mov.u32 	%r4278, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4253,%r7361,%r4255,%r2095,%r4278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4258,%r4240,%r4253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4261,%r7097,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4264,%r4261,%r4258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4267,%r7330,%r4264;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7179,%r7246,%r4267;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4274,%r7094,%r433,%r2095,%r4278;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4274;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7094;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4281, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4282,%r7095,%r4281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4285,%r7012,%r4282;
}
	// end inline asm
	mov.u32 	%r7362, %r7245;
	@%p15 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7362,%r7013,%r4282;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4296,%r7362,%r4255,%r2095,%r4278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4301,%r4285,%r4296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r7097,%r7128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r4301,%r4304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4310,%r7127,%r4307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7177,%r7245,%r4310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4316,%r7099,%r7130;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4319,%r7095,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r4316,%r4319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4325,%r508,%r4322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4328,%r7244,%r4325;
}
	// end inline asm
	selp.b32 	%r7175, %r7244, %r4328, %p15;
	// begin inline asm
	{sub.f16x2 %r4331,%r7098,%r7099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4334,%r7016,%r4331;
}
	// end inline asm
	@%p15 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7363,%r7243;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7363,%r7017,%r4331;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4347, 31;
	mov.u32 	%r4349, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4345,%r7363,%r4347,%r2095,%r4349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4350,%r4334,%r4345;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4353,%r7092,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4356,%r4353,%r4350;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4359,%r7329,%r4356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r7243,%r4359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4365,%r7094,%r7095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4368,%r7016,%r4365;
}
	// end inline asm
	mov.u32 	%r7364, %r7242;
	@%p15 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7364,%r7017,%r4365;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4377,%r7364,%r4347,%r2095,%r4349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4382,%r4368,%r4377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4385,%r7092,%r7122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4388,%r4382,%r4385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4391,%r7121,%r4388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7176,%r7242,%r4391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4397,%r7098,%r7129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4400,%r7094,%r7102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4403,%r4397,%r4400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4406,%r505,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4409,%r7241,%r4406;
}
	// end inline asm
	selp.b32 	%r7174, %r7241, %r4409, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4413,%r7088,%r433,%r2095,%r4349;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4413;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7088;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4420, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4421,%r7089,%r4420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4424,%r7012,%r4421;
}
	// end inline asm
	@%p15 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7365,%r7240;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7365,%r7013,%r4421;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4439, 31;
	mov.u32 	%r4462, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4437,%r7365,%r4439,%r2095,%r4462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4442,%r4424,%r4437;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4445,%r7075,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4448,%r4445,%r4442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4451,%r7328,%r4448;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7173,%r7240,%r4451;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4458,%r7086,%r433,%r2095,%r4462;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4458;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7086;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4465, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4466,%r7087,%r4465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4469,%r7012,%r4466;
}
	// end inline asm
	mov.u32 	%r7366, %r7239;
	@%p15 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7366,%r7013,%r4466;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4480,%r7366,%r4439,%r2095,%r4462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4485,%r4469,%r4480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r7075,%r7116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r4485,%r4488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4494,%r7327,%r4491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r7239,%r4494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4500,%r7089,%r7118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4503,%r7087,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4506,%r4500,%r4503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4509,%r500,%r4506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4512,%r7238,%r4509;
}
	// end inline asm
	selp.b32 	%r7169, %r7238, %r4512, %p15;
	// begin inline asm
	{sub.f16x2 %r4515,%r7088,%r7089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4518,%r7016,%r4515;
}
	// end inline asm
	@%p15 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7367,%r7237;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7367,%r7017,%r4515;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4531, 31;
	mov.u32 	%r4533, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4529,%r7367,%r4531,%r2095,%r4533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4534,%r4518,%r4529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4537,%r7074,%r7092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4540,%r4537,%r4534;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4543,%r7326,%r4540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7172,%r7237,%r4543;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r7086,%r7087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4552,%r7016,%r4549;
}
	// end inline asm
	mov.u32 	%r7368, %r7236;
	@%p15 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r7368,%r7017,%r4549;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4561,%r7368,%r4531,%r2095,%r4533;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4566,%r4552,%r4561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4569,%r7074,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4572,%r4566,%r4569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4575,%r7325,%r4572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r7236,%r4575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4581,%r7088,%r7117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r7086,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4587,%r4581,%r4584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4590,%r499,%r4587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4593,%r7235,%r4590;
}
	// end inline asm
	selp.b32 	%r7168, %r7235, %r4593, %p15;
	// begin inline asm
	{sub.f16x2 %r4596,%r7073,%r7107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r7392,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4602,%r4596,%r4599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4605,%r7324,%r4602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4608,%r7234,%r4605;
}
	// end inline asm
	selp.b32 	%r1160, %r7234, %r4608, %p15;
	// begin inline asm
	{sub.f16x2 %r4611,%r7072,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4614,%r7391,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4617,%r4611,%r4614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4620,%r7323,%r4617;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4623,%r7233,%r4620;
}
	// end inline asm
	selp.b32 	%r1161, %r7233, %r4623, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4627,%r7080,%r433,%r2095,%r4533;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4627;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7080;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4634, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r7081,%r4634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4638,%r7012,%r4635;
}
	// end inline asm
	mov.u32 	%r7369, %r7232;
	@%p15 bra 	$L__BB0_474;

	// begin inline asm
	{mul.f16x2 %r7369,%r7013,%r4635;
}
	// end inline asm

$L__BB0_474:
	mov.u32 	%r4651, 31;
	mov.u32 	%r4653, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4649,%r7369,%r4651,%r2095,%r4653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4654,%r4638,%r4649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4657,%r7068,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4660,%r4654,%r4657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4663,%r7322,%r4660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r7232,%r4663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4669,%r7069,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4672,%r7081,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r4669,%r4672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4678,%r7321,%r4675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4681,%r7231,%r4678;
}
	// end inline asm
	selp.b32 	%r7165, %r7231, %r4681, %p15;
	// begin inline asm
	{sub.f16x2 %r4684,%r7080,%r7081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4687,%r7016,%r4684;
}
	// end inline asm
	mov.u32 	%r7370, %r7230;
	@%p15 bra 	$L__BB0_476;

	// begin inline asm
	{mul.f16x2 %r7370,%r7017,%r4684;
}
	// end inline asm

$L__BB0_476:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4696,%r7370,%r4651,%r2095,%r4653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4701,%r4687,%r4696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4704,%r7066,%r7092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4707,%r4701,%r4704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4710,%r7320,%r4707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r7230,%r4710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4716,%r7067,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4719,%r7080,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4722,%r4716,%r4719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4725,%r7319,%r4722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4728,%r7229,%r4725;
}
	// end inline asm
	selp.b32 	%r7164, %r7229, %r4728, %p15;
	// begin inline asm
	{sub.f16x2 %r4731,%r7064,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4734,%r7065,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4737,%r4731,%r4734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4740,%r7318,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4743,%r7228,%r4740;
}
	// end inline asm
	selp.b32 	%r7163, %r7228, %r4743, %p15;
	// begin inline asm
	{sub.f16x2 %r4746,%r7062,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4749,%r7063,%r7080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r4746,%r4749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r7317,%r4752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4758,%r7227,%r4755;
}
	// end inline asm
	selp.b32 	%r7162, %r7227, %r4758, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	add.s32 	%r4763, %r1574, 2;
	setp.lt.s32 	%p271, %r656, %r4763;
	add.s32 	%r4764, %r1575, -1;
	setp.ge.s32 	%p272, %r656, %r4764;
	or.pred  	%p273, %p272, %p271;
	add.s32 	%r4765, %r1576, 2;
	setp.lt.s32 	%p274, %r657, %r4765;
	or.pred  	%p275, %p273, %p274;
	add.s32 	%r4766, %r1577, -2;
	setp.ge.s32 	%p276, %r657, %r4766;
	or.pred  	%p277, %p276, %p275;
	setp.lt.s32 	%p278, %r658, %r1571;
	or.pred  	%p279, %p278, %p277;
	mad.lo.s32 	%r4767, %r1573, %r1572, %r1571;
	setp.ge.s32 	%p280, %r658, %r4767;
	or.pred  	%p281, %p279, %p280;
	@%p281 bra 	$L__BB0_718;

	sub.s32 	%r1176, %r658, %r1571;
	rem.s32 	%r4768, %r1176, %r1572;
	setp.ne.s32 	%p282, %r4768, 0;
	@%p282 bra 	$L__BB0_718;

	div.s32 	%r4769, %r1176, %r1572;
	mul.lo.s32 	%r4771, %r4769, %r52;
	sub.s32 	%r1177, %r656, %r1574;
	sub.s32 	%r1178, %r657, %r1576;
	mul.lo.s32 	%r1179, %r4771, 3;
	add.s32 	%r4772, %r1177, %r1179;
	add.s32 	%r4773, %r4772, -2;
	mul.lo.s32 	%r1180, %r4773, %r53;
	add.s32 	%r4775, %r1178, %r1180;
	mul.lo.s32 	%r4776, %r4775, %r54;
	sub.s32 	%r1181, %r4776, %r1578;
	@%p15 bra 	$L__BB0_483;

	not.pred 	%p284, %p11;
	@%p284 bra 	$L__BB0_481;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3331;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4778, %r1181, %r399;
	mul.wide.s32 	%rd317, %r4778, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;

$L__BB0_481:
	not.pred 	%p285, %p13;
	@%p285 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3331;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4780, %r1181, %r400;
	mul.wide.s32 	%rd319, %r4780, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;

$L__BB0_483:
	@%p15 bra 	$L__BB0_488;

	not.pred 	%p287, %p12;
	@%p287 bra 	$L__BB0_486;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3408;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4782, %r1181, %r413;
	mul.wide.s32 	%rd321, %r4782, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;

$L__BB0_486:
	not.pred 	%p288, %p14;
	@%p288 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3408;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4784, %r1181, %r414;
	mul.wide.s32 	%rd323, %r4784, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_488:
	sub.s32 	%r6913, %r656, %r1574;
	add.s32 	%r1182, %r1179, %r52;
	add.s32 	%r4786, %r6913, %r1182;
	add.s32 	%r4787, %r4786, -2;
	mad.lo.s32 	%r4789, %r4787, %r53, %r1178;
	mul.lo.s32 	%r4790, %r4789, %r54;
	sub.s32 	%r1183, %r4790, %r1578;
	@%p15 bra 	$L__BB0_493;

	not.pred 	%p290, %p11;
	@%p290 bra 	$L__BB0_491;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3374;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4792, %r1183, %r399;
	mul.wide.s32 	%rd325, %r4792, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;

$L__BB0_491:
	not.pred 	%p291, %p13;
	@%p291 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3374;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4794, %r1183, %r400;
	mul.wide.s32 	%rd327, %r4794, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;

$L__BB0_493:
	@%p15 bra 	$L__BB0_498;

	not.pred 	%p293, %p12;
	@%p293 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3440;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4796, %r1183, %r413;
	mul.wide.s32 	%rd329, %r4796, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;

$L__BB0_496:
	not.pred 	%p294, %p14;
	@%p294 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3440;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4798, %r1183, %r414;
	mul.wide.s32 	%rd331, %r4798, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_498:
	add.s32 	%r1184, %r1178, 1;
	add.s32 	%r4799, %r1184, %r1180;
	mul.lo.s32 	%r4800, %r4799, %r54;
	sub.s32 	%r1185, %r4800, %r1578;
	@%p15 bra 	$L__BB0_503;

	not.pred 	%p296, %p11;
	@%p296 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3485;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4802, %r1185, %r399;
	mul.wide.s32 	%rd333, %r4802, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;

$L__BB0_501:
	not.pred 	%p297, %p13;
	@%p297 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3485;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4804, %r1185, %r400;
	mul.wide.s32 	%rd335, %r4804, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;

$L__BB0_503:
	@%p15 bra 	$L__BB0_508;

	not.pred 	%p299, %p12;
	@%p299 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3519;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4806, %r1185, %r413;
	mul.wide.s32 	%rd337, %r4806, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;

$L__BB0_506:
	not.pred 	%p300, %p14;
	@%p300 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3519;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4808, %r1185, %r414;
	mul.wide.s32 	%rd339, %r4808, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_508:
	not.b32 	%r4809, %r1574;
	add.s32 	%r1186, %r656, %r4809;
	not.b32 	%r4810, %r1576;
	add.s32 	%r1187, %r657, %r4810;
	add.s32 	%r4811, %r1186, %r1179;
	mul.lo.s32 	%r1188, %r4811, %r53;
	add.s32 	%r4813, %r1187, %r1188;
	mul.lo.s32 	%r4814, %r4813, %r54;
	sub.s32 	%r1189, %r4814, %r1578;
	@%p15 bra 	$L__BB0_513;

	not.pred 	%p302, %p11;
	@%p302 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3564;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4816, %r1189, %r399;
	mul.wide.s32 	%rd341, %r4816, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;

$L__BB0_511:
	not.pred 	%p303, %p13;
	@%p303 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3564;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4818, %r1189, %r400;
	mul.wide.s32 	%rd343, %r4818, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;

$L__BB0_513:
	@%p15 bra 	$L__BB0_518;

	not.pred 	%p305, %p12;
	@%p305 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3641;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4820, %r1189, %r413;
	mul.wide.s32 	%rd345, %r4820, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;

$L__BB0_516:
	not.pred 	%p306, %p14;
	@%p306 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3641;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4822, %r1189, %r414;
	mul.wide.s32 	%rd347, %r4822, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_518:
	add.s32 	%r4824, %r1186, %r1182;
	mul.lo.s32 	%r1190, %r4824, %r53;
	add.s32 	%r4825, %r1187, %r1190;
	mul.lo.s32 	%r4826, %r4825, %r54;
	sub.s32 	%r1191, %r4826, %r1578;
	@%p15 bra 	$L__BB0_523;

	not.pred 	%p308, %p11;
	@%p308 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3607;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4828, %r1191, %r399;
	mul.wide.s32 	%rd349, %r4828, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;

$L__BB0_521:
	not.pred 	%p309, %p13;
	@%p309 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3607;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4830, %r1191, %r400;
	mul.wide.s32 	%rd351, %r4830, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;

$L__BB0_523:
	@%p15 bra 	$L__BB0_528;

	not.pred 	%p311, %p12;
	@%p311 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3673;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4832, %r1191, %r413;
	mul.wide.s32 	%rd353, %r4832, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;

$L__BB0_526:
	not.pred 	%p312, %p14;
	@%p312 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3673;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4834, %r1191, %r414;
	mul.wide.s32 	%rd355, %r4834, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_528:
	add.s32 	%r4835, %r1178, %r1188;
	mul.lo.s32 	%r4836, %r4835, %r54;
	sub.s32 	%r1192, %r4836, %r1578;
	@%p15 bra 	$L__BB0_533;

	not.pred 	%p314, %p11;
	@%p314 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7187;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4838, %r1192, %r399;
	mul.wide.s32 	%rd357, %r4838, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;

$L__BB0_531:
	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7187;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4840, %r1192, %r400;
	mul.wide.s32 	%rd359, %r4840, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;

$L__BB0_533:
	@%p15 bra 	$L__BB0_538;

	not.pred 	%p317, %p12;
	@%p317 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7186;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4842, %r1192, %r413;
	mul.wide.s32 	%rd361, %r4842, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;

$L__BB0_536:
	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7186;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4844, %r1192, %r414;
	mul.wide.s32 	%rd363, %r4844, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_538:
	add.s32 	%r4845, %r1178, %r1190;
	mul.lo.s32 	%r4846, %r4845, %r54;
	sub.s32 	%r1193, %r4846, %r1578;
	@%p15 bra 	$L__BB0_543;

	not.pred 	%p320, %p11;
	@%p320 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7185;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4848, %r1193, %r399;
	mul.wide.s32 	%rd365, %r4848, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;

$L__BB0_541:
	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7185;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4850, %r1193, %r400;
	mul.wide.s32 	%rd367, %r4850, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;

$L__BB0_543:
	@%p15 bra 	$L__BB0_548;

	not.pred 	%p323, %p12;
	@%p323 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7184;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4852, %r1193, %r413;
	mul.wide.s32 	%rd369, %r4852, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;

$L__BB0_546:
	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7184;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4854, %r1193, %r414;
	mul.wide.s32 	%rd371, %r4854, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_548:
	add.s32 	%r1194, %r1182, %r52;
	add.s32 	%r4856, %r1186, %r1194;
	mul.lo.s32 	%r1195, %r4856, %r53;
	add.s32 	%r4858, %r1178, %r1195;
	mul.lo.s32 	%r4859, %r4858, %r54;
	sub.s32 	%r1196, %r4859, %r1578;
	@%p15 bra 	$L__BB0_553;

	not.pred 	%p326, %p11;
	@%p326 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1051;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4861, %r1196, %r399;
	mul.wide.s32 	%rd373, %r4861, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;

$L__BB0_551:
	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1051;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4863, %r1196, %r400;
	mul.wide.s32 	%rd375, %r4863, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;

$L__BB0_553:
	@%p15 bra 	$L__BB0_558;

	not.pred 	%p329, %p12;
	@%p329 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1063;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4865, %r1196, %r413;
	mul.wide.s32 	%rd377, %r4865, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;

$L__BB0_556:
	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1063;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4867, %r1196, %r414;
	mul.wide.s32 	%rd379, %r4867, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_558:
	add.s32 	%r6916, %r1178, 1;
	add.s32 	%r4868, %r6916, %r1188;
	mul.lo.s32 	%r4869, %r4868, %r54;
	sub.s32 	%r1197, %r4869, %r1578;
	@%p15 bra 	$L__BB0_563;

	not.pred 	%p332, %p11;
	@%p332 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7183;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4871, %r1197, %r399;
	mul.wide.s32 	%rd381, %r4871, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;

$L__BB0_561:
	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7183;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4873, %r1197, %r400;
	mul.wide.s32 	%rd383, %r4873, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;

$L__BB0_563:
	@%p15 bra 	$L__BB0_568;

	not.pred 	%p335, %p12;
	@%p335 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7182;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4875, %r1197, %r413;
	mul.wide.s32 	%rd385, %r4875, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;

$L__BB0_566:
	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7182;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4877, %r1197, %r414;
	mul.wide.s32 	%rd387, %r4877, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_568:
	add.s32 	%r6917, %r1178, 1;
	add.s32 	%r4878, %r6917, %r1190;
	mul.lo.s32 	%r4879, %r4878, %r54;
	sub.s32 	%r1198, %r4879, %r1578;
	@%p15 bra 	$L__BB0_573;

	not.pred 	%p338, %p11;
	@%p338 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3945;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4881, %r1198, %r399;
	mul.wide.s32 	%rd389, %r4881, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;

$L__BB0_571:
	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3945;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4883, %r1198, %r400;
	mul.wide.s32 	%rd391, %r4883, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;

$L__BB0_573:
	@%p15 bra 	$L__BB0_578;

	not.pred 	%p341, %p12;
	@%p341 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4026;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4885, %r1198, %r413;
	mul.wide.s32 	%rd393, %r4885, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;

$L__BB0_576:
	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4026;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4887, %r1198, %r414;
	mul.wide.s32 	%rd395, %r4887, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_578:
	add.s32 	%r6918, %r1178, 1;
	add.s32 	%r4888, %r6918, %r1195;
	mul.lo.s32 	%r4889, %r4888, %r54;
	sub.s32 	%r1199, %r4889, %r1578;
	@%p15 bra 	$L__BB0_583;

	not.pred 	%p344, %p11;
	@%p344 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1075;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4891, %r1199, %r399;
	mul.wide.s32 	%rd397, %r4891, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;

$L__BB0_581:
	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1075;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4893, %r1199, %r400;
	mul.wide.s32 	%rd399, %r4893, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;

$L__BB0_583:
	@%p15 bra 	$L__BB0_588;

	not.pred 	%p347, %p12;
	@%p347 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1087;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4895, %r1199, %r413;
	mul.wide.s32 	%rd401, %r4895, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;

$L__BB0_586:
	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1087;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4897, %r1199, %r414;
	mul.wide.s32 	%rd403, %r4897, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_588:
	add.s32 	%r1200, %r1178, 2;
	add.s32 	%r4898, %r1200, %r1188;
	mul.lo.s32 	%r4899, %r4898, %r54;
	sub.s32 	%r1201, %r4899, %r1578;
	@%p15 bra 	$L__BB0_593;

	not.pred 	%p350, %p11;
	@%p350 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4086;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4901, %r1201, %r399;
	mul.wide.s32 	%rd405, %r4901, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;

$L__BB0_591:
	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4086;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4903, %r1201, %r400;
	mul.wide.s32 	%rd407, %r4903, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;

$L__BB0_593:
	@%p15 bra 	$L__BB0_598;

	not.pred 	%p353, %p12;
	@%p353 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4120;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4905, %r1201, %r413;
	mul.wide.s32 	%rd409, %r4905, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;

$L__BB0_596:
	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4120;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4907, %r1201, %r414;
	mul.wide.s32 	%rd411, %r4907, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_598:
	mul.lo.s32 	%r1202, %r4786, %r53;
	add.s32 	%r4910, %r1187, %r1202;
	mul.lo.s32 	%r4911, %r4910, %r54;
	sub.s32 	%r1203, %r4911, %r1578;
	@%p15 bra 	$L__BB0_603;

	not.pred 	%p356, %p11;
	@%p356 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7181;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4913, %r1203, %r399;
	mul.wide.s32 	%rd413, %r4913, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;

$L__BB0_601:
	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7181;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4915, %r1203, %r400;
	mul.wide.s32 	%rd415, %r4915, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;

$L__BB0_603:
	@%p15 bra 	$L__BB0_608;

	not.pred 	%p359, %p12;
	@%p359 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7180;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4917, %r1203, %r413;
	mul.wide.s32 	%rd417, %r4917, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;

$L__BB0_606:
	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7180;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4919, %r1203, %r414;
	mul.wide.s32 	%rd419, %r4919, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_608:
	sub.s32 	%r6914, %r656, %r1574;
	add.s32 	%r4921, %r6914, %r1194;
	mul.lo.s32 	%r1204, %r4921, %r53;
	add.s32 	%r4922, %r1187, %r1204;
	mul.lo.s32 	%r4923, %r4922, %r54;
	sub.s32 	%r1205, %r4923, %r1578;
	@%p15 bra 	$L__BB0_613;

	not.pred 	%p362, %p11;
	@%p362 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1105;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4925, %r1205, %r399;
	mul.wide.s32 	%rd421, %r4925, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;

$L__BB0_611:
	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1105;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4927, %r1205, %r400;
	mul.wide.s32 	%rd423, %r4927, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;

$L__BB0_613:
	@%p15 bra 	$L__BB0_618;

	not.pred 	%p365, %p12;
	@%p365 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1111;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4929, %r1205, %r413;
	mul.wide.s32 	%rd425, %r4929, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;

$L__BB0_616:
	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1111;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4931, %r1205, %r414;
	mul.wide.s32 	%rd427, %r4931, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_618:
	mul.lo.s32 	%r1206, %r4772, %r53;
	add.s32 	%r4934, %r1178, %r1206;
	mul.lo.s32 	%r4935, %r4934, %r54;
	sub.s32 	%r1207, %r4935, %r1578;
	@%p15 bra 	$L__BB0_623;

	not.pred 	%p368, %p11;
	@%p368 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7179;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4937, %r1207, %r399;
	mul.wide.s32 	%rd429, %r4937, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;

$L__BB0_621:
	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7179;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4939, %r1207, %r400;
	mul.wide.s32 	%rd431, %r4939, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;

$L__BB0_623:
	@%p15 bra 	$L__BB0_628;

	not.pred 	%p371, %p12;
	@%p371 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7178;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4941, %r1207, %r413;
	mul.wide.s32 	%rd433, %r4941, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;

$L__BB0_626:
	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7178;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4943, %r1207, %r414;
	mul.wide.s32 	%rd435, %r4943, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_628:
	add.s32 	%r4944, %r1178, %r1202;
	mul.lo.s32 	%r4945, %r4944, %r54;
	sub.s32 	%r1208, %r4945, %r1578;
	@%p15 bra 	$L__BB0_633;

	not.pred 	%p374, %p11;
	@%p374 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7177;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4947, %r1208, %r399;
	mul.wide.s32 	%rd437, %r4947, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;

$L__BB0_631:
	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7177;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4949, %r1208, %r400;
	mul.wide.s32 	%rd439, %r4949, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;

$L__BB0_633:
	@%p15 bra 	$L__BB0_638;

	not.pred 	%p377, %p12;
	@%p377 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7176;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4951, %r1208, %r413;
	mul.wide.s32 	%rd441, %r4951, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;

$L__BB0_636:
	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7176;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4953, %r1208, %r414;
	mul.wide.s32 	%rd443, %r4953, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_638:
	add.s32 	%r4954, %r1178, %r1204;
	mul.lo.s32 	%r4955, %r4954, %r54;
	sub.s32 	%r1209, %r4955, %r1578;
	@%p15 bra 	$L__BB0_643;

	not.pred 	%p380, %p11;
	@%p380 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7175;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4957, %r1209, %r399;
	mul.wide.s32 	%rd445, %r4957, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;

$L__BB0_641:
	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7175;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4959, %r1209, %r400;
	mul.wide.s32 	%rd447, %r4959, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;

$L__BB0_643:
	@%p15 bra 	$L__BB0_648;

	not.pred 	%p383, %p12;
	@%p383 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7174;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4961, %r1209, %r413;
	mul.wide.s32 	%rd449, %r4961, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;

$L__BB0_646:
	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7174;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4963, %r1209, %r414;
	mul.wide.s32 	%rd451, %r4963, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_648:
	add.s32 	%r6919, %r1178, 1;
	add.s32 	%r4964, %r6919, %r1206;
	mul.lo.s32 	%r4965, %r4964, %r54;
	sub.s32 	%r1210, %r4965, %r1578;
	@%p15 bra 	$L__BB0_653;

	not.pred 	%p386, %p11;
	@%p386 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7173;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4967, %r1210, %r399;
	mul.wide.s32 	%rd453, %r4967, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;

$L__BB0_651:
	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7173;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4969, %r1210, %r400;
	mul.wide.s32 	%rd455, %r4969, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;

$L__BB0_653:
	@%p15 bra 	$L__BB0_658;

	not.pred 	%p389, %p12;
	@%p389 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7172;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4971, %r1210, %r413;
	mul.wide.s32 	%rd457, %r4971, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;

$L__BB0_656:
	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7172;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4973, %r1210, %r414;
	mul.wide.s32 	%rd459, %r4973, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_658:
	add.s32 	%r6920, %r1178, 1;
	add.s32 	%r4974, %r6920, %r1202;
	mul.lo.s32 	%r4975, %r4974, %r54;
	sub.s32 	%r1211, %r4975, %r1578;
	@%p15 bra 	$L__BB0_663;

	not.pred 	%p392, %p11;
	@%p392 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7171;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4977, %r1211, %r399;
	mul.wide.s32 	%rd461, %r4977, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;

$L__BB0_661:
	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7171;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4979, %r1211, %r400;
	mul.wide.s32 	%rd463, %r4979, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;

$L__BB0_663:
	@%p15 bra 	$L__BB0_668;

	not.pred 	%p395, %p12;
	@%p395 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7170;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4981, %r1211, %r413;
	mul.wide.s32 	%rd465, %r4981, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;

$L__BB0_666:
	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7170;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4983, %r1211, %r414;
	mul.wide.s32 	%rd467, %r4983, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_668:
	add.s32 	%r6921, %r1178, 1;
	add.s32 	%r4984, %r6921, %r1204;
	mul.lo.s32 	%r4985, %r4984, %r54;
	sub.s32 	%r1212, %r4985, %r1578;
	@%p15 bra 	$L__BB0_673;

	not.pred 	%p398, %p11;
	@%p398 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7169;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4987, %r1212, %r399;
	mul.wide.s32 	%rd469, %r4987, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;

$L__BB0_671:
	not.pred 	%p399, %p13;
	@%p399 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7169;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4989, %r1212, %r400;
	mul.wide.s32 	%rd471, %r4989, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;

$L__BB0_673:
	@%p15 bra 	$L__BB0_678;

	not.pred 	%p401, %p12;
	@%p401 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7168;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4991, %r1212, %r413;
	mul.wide.s32 	%rd473, %r4991, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;

$L__BB0_676:
	not.pred 	%p402, %p14;
	@%p402 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7168;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4993, %r1212, %r414;
	mul.wide.s32 	%rd475, %r4993, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_678:
	add.s32 	%r4994, %r1200, %r1204;
	mul.lo.s32 	%r4995, %r4994, %r54;
	sub.s32 	%r1213, %r4995, %r1578;
	@%p15 bra 	$L__BB0_683;

	not.pred 	%p404, %p11;
	@%p404 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1160;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4997, %r1213, %r399;
	mul.wide.s32 	%rd477, %r4997, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;

$L__BB0_681:
	not.pred 	%p405, %p13;
	@%p405 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1160;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4999, %r1213, %r400;
	mul.wide.s32 	%rd479, %r4999, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;

$L__BB0_683:
	@%p15 bra 	$L__BB0_688;

	not.pred 	%p407, %p12;
	@%p407 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5001, %r1213, %r413;
	mul.wide.s32 	%rd481, %r5001, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;

$L__BB0_686:
	not.pred 	%p408, %p14;
	@%p408 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5003, %r1213, %r414;
	mul.wide.s32 	%rd483, %r5003, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_688:
	sub.s32 	%r6915, %r656, %r1574;
	add.s32 	%r1214, %r6915, 1;
	add.s32 	%r5004, %r1214, %r1182;
	mad.lo.s32 	%r5006, %r5004, %r53, %r1178;
	mul.lo.s32 	%r5007, %r5006, %r54;
	sub.s32 	%r1215, %r5007, %r1578;
	@%p15 bra 	$L__BB0_693;

	not.pred 	%p410, %p11;
	@%p410 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7167;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5009, %r1215, %r399;
	mul.wide.s32 	%rd485, %r5009, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;

$L__BB0_691:
	not.pred 	%p411, %p13;
	@%p411 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7167;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5011, %r1215, %r400;
	mul.wide.s32 	%rd487, %r5011, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;

$L__BB0_693:
	@%p15 bra 	$L__BB0_698;

	not.pred 	%p413, %p12;
	@%p413 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7166;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5013, %r1215, %r413;
	mul.wide.s32 	%rd489, %r5013, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;

$L__BB0_696:
	not.pred 	%p414, %p14;
	@%p414 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7166;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5015, %r1215, %r414;
	mul.wide.s32 	%rd491, %r5015, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_698:
	add.s32 	%r5017, %r1214, %r1194;
	mul.lo.s32 	%r1216, %r5017, %r53;
	add.s32 	%r5018, %r1178, %r1216;
	mul.lo.s32 	%r5019, %r5018, %r54;
	sub.s32 	%r1217, %r5019, %r1578;
	@%p15 bra 	$L__BB0_703;

	not.pred 	%p416, %p11;
	@%p416 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7165;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5021, %r1217, %r399;
	mul.wide.s32 	%rd493, %r5021, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;

$L__BB0_701:
	not.pred 	%p417, %p13;
	@%p417 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7165;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5023, %r1217, %r400;
	mul.wide.s32 	%rd495, %r5023, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;

$L__BB0_703:
	@%p15 bra 	$L__BB0_708;

	not.pred 	%p419, %p12;
	@%p419 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7164;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5025, %r1217, %r413;
	mul.wide.s32 	%rd497, %r5025, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;

$L__BB0_706:
	not.pred 	%p420, %p14;
	@%p420 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7164;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5027, %r1217, %r414;
	mul.wide.s32 	%rd499, %r5027, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_708:
	add.s32 	%r6922, %r1178, 1;
	add.s32 	%r5028, %r6922, %r1216;
	mul.lo.s32 	%r5029, %r5028, %r54;
	sub.s32 	%r1218, %r5029, %r1578;
	@%p15 bra 	$L__BB0_713;

	not.pred 	%p422, %p11;
	@%p422 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7163;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5031, %r1218, %r399;
	mul.wide.s32 	%rd501, %r5031, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;

$L__BB0_711:
	not.pred 	%p423, %p13;
	@%p423 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7163;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5033, %r1218, %r400;
	mul.wide.s32 	%rd503, %r5033, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;

$L__BB0_713:
	@%p15 bra 	$L__BB0_718;

	not.pred 	%p425, %p12;
	@%p425 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7162;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5035, %r1218, %r413;
	mul.wide.s32 	%rd505, %r5035, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;

$L__BB0_716:
	not.pred 	%p426, %p14;
	@%p426 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7162;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5037, %r1218, %r414;
	mul.wide.s32 	%rd507, %r5037, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_718:
	setp.ne.s32 	%p427, %r35, %r1987;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p427 bra 	$L__BB0_720;

	mad.lo.s32 	%r5039, %r654, %r1563, %r38;
	mul.lo.s32 	%r5040, %r1561, %r5039;
	mul.lo.s32 	%r5041, %r5040, 768;
	mad.lo.s32 	%r5043, %r36, 384, %r5041;
	add.s32 	%r5044, %r5043, -64;
	mul.wide.s32 	%rd510, %r5044, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3564, %r3641, %r1105, %r1111};
	st.global.v4.u32 	[%rd513+1024], {%r3331, %r3408, %r1051, %r1063};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3607, %r3673};
	st.global.v2.u32 	[%rd515+1536], {%r3374, %r3440};

$L__BB0_720:
	setp.ne.s32 	%p428, %r36, %r1992;
	@%p428 bra 	$L__BB0_725;

	ld.param.u64 	%rd552, [%rd1+80];
	cvta.to.global.u64 	%rd551, %rd552;
	not.b32 	%r6912, %r35;
	add.s32 	%r6911, %r1560, %r6912;
	setp.eq.s32 	%p429, %r35, %r1987;
	mad.lo.s32 	%r5047, %r655, %r1562, %r37;
	mul.lo.s32 	%r5051, %r5047, %r1621;
	mad.lo.s32 	%r5054, %r6911, 384, %r5051;
	add.s32 	%r5055, %r5054, -64;
	mad.lo.s32 	%r5058, %r1623, %r65, %r5055;
	mul.wide.s32 	%rd516, %r5058, 4;
	add.s64 	%rd517, %rd551, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3485, %r3519, %r1075, %r1087};
	st.global.v4.u32 	[%rd519+1024], {%r4086, %r4120, %r1160, %r1161};
	add.s64 	%rd35, %rd517, %rd277;
	@%p429 bra 	$L__BB0_723;

	st.global.v2.u32 	[%rd35], {%r3374, %r3440};

$L__BB0_723:
	st.global.v2.u32 	[%rd35+768], {%r3945, %r4026};
	@%p220 bra 	$L__BB0_725;

	st.global.v2.u32 	[%rd35+1536], {%r7290, %r7289};

$L__BB0_725:
	setp.ge.s32 	%p431, %r35, %r1987;
	@%p431 bra 	$L__BB0_727;

	add.s32 	%r6910, %r66, %r66;
	mul.lo.s32 	%r5059, %r1561, 320;
	mul.lo.s32 	%r5061, %r36, 320;
	mad.lo.s32 	%r5062, %r5059, %r35, %r5061;
	add.s32 	%r5065, %r6910, -64;
	mad.lo.s32 	%r5070, %r5065, %r1992, %r1989;
	add.s32 	%r5071, %r5062, %r5070;
	shl.b32 	%r5072, %r5071, 2;
	mov.u32 	%r5073, _ZN6kernel5shmemE;
	add.s32 	%r5074, %r5073, %r5072;
	shl.b32 	%r5075, %r40, 4;
	add.s32 	%r5076, %r5074, %r5075;
	st.shared.v4.u32 	[%r5076], {%r7338, %r7337, %r7333, %r7331};
	shl.b32 	%r5077, %r40, 3;
	add.s32 	%r5078, %r5074, %r5077;
	st.shared.v2.u32 	[%r5078+512], {%r7137, %r7132};
	st.shared.v4.u32 	[%r5076+768], {%r7161, %r7152, %r7124, %r7120};

$L__BB0_727:
	setp.ge.s32 	%p432, %r36, %r1992;
	@%p432 bra 	$L__BB0_731;

	not.b32 	%r6909, %r35;
	add.s32 	%r6908, %r1560, %r6909;
	mad.lo.s32 	%r5084, %r6908, 384, %r1995;
	mad.lo.s32 	%r5088, %r1990, %r36, %r5084;
	add.s32 	%r5094, %r5088, %r1993;
	shl.b32 	%r5095, %r5094, 2;
	mov.u32 	%r5096, _ZN6kernel5shmemE;
	add.s32 	%r5097, %r5096, %r5095;
	shl.b32 	%r5098, %r40, 3;
	add.s32 	%r5099, %r5097, %r5098;
	@%p431 bra 	$L__BB0_730;

	add.s32 	%r6893, %r5099, -256;
	st.shared.v2.u32 	[%r6893], {%r7156, %r7149};

$L__BB0_730:
	shl.b32 	%r5119, %r40, 4;
	add.s32 	%r5120, %r5097, %r5119;
	st.shared.v4.u32 	[%r5120], {%r7147, %r7143, %r7112, %r7108};
	add.s32 	%r6894, %r5099, -256;
	st.shared.v2.u32 	[%r6894+768], {%r7115, %r7109};
	st.shared.v4.u32 	[%r5120+768], {%r7336, %r7335, %r7324, %r7323};

$L__BB0_731:
	bar.sync 	0;
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7395, %r7060;
	mov.u32 	%r7396, %r7061;
	mov.u32 	%r7381, %r7062;
	mov.u32 	%r7382, %r7063;
	mov.u32 	%r7383, %r7064;
	mov.u32 	%r7384, %r7065;
	mov.u32 	%r7397, %r7066;
	mov.u32 	%r7399, %r7068;
	mov.u32 	%r7387, %r7072;
	mov.u32 	%r7388, %r7073;
	mov.u32 	%r7389, %r7074;
	mov.u32 	%r7390, %r7075;
	@%p220 bra 	$L__BB0_735;

	setp.eq.s32 	%p435, %r36, 0;
	mad.lo.s32 	%r5123, %r654, %r1563, %r38;
	mad.lo.s32 	%r5124, %r5123, 768, 384;
	mul.lo.s32 	%r5125, %r5124, %r1561;
	mad.lo.s32 	%r5126, %r36, 384, %r5125;
	add.s32 	%r5127, %r5126, -128;
	mul.wide.s32 	%rd522, %r5127, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7395, %r7060;
	mov.u32 	%r7396, %r7061;
	mov.u32 	%r7397, %r7066;
	mov.u32 	%r7399, %r7068;
	@%p435 bra 	$L__BB0_734;

	ld.global.v4.u32 	{%r7396, %r7395, %r7399, %r7397}, [%rd37+-512];

$L__BB0_734:
	ld.global.v4.u32 	{%r7383, %r7381, %r7384, %r7382}, [%rd37];
	ld.global.v4.u32 	{%r7390, %r7389, %r7388, %r7387}, [%rd37+512];
	ld.global.v4.u32 	{%r7392, %r7391, %r7394, %r7393}, [%rd37+1024];

$L__BB0_735:
	mov.u32 	%r7398, %r7067;
	mov.u32 	%r7400, %r7069;
	mov.u32 	%r7401, %r7070;
	mov.u32 	%r7402, %r7071;
	mov.u32 	%r7403, %r7076;
	mov.u32 	%r7404, %r7077;
	mov.u32 	%r7405, %r7078;
	mov.u32 	%r7406, %r7079;
	@%p223 bra 	$L__BB0_737;

	not.b32 	%r6907, %r35;
	add.s32 	%r6906, %r1560, %r6907;
	mad.lo.s32 	%r5145, %r655, %r1562, %r37;
	mad.lo.s32 	%r5151, %r6906, 384, %r66;
	mad.lo.s32 	%r5152, %r5145, %r1621, %r5151;
	mad.lo.s32 	%r5155, %r1623, %r65, %r5152;
	mul.wide.s32 	%rd526, %r5155, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7408, %r7407, %r7410, %r7409}, [%rd529];
	ld.global.v4.u32 	{%r7406, %r7404, %r7402, %r7401}, [%rd529+512];
	ld.global.v4.u32 	{%r7405, %r7403, %r7400, %r7398}, [%rd529+1024];
	ld.global.v4.u32 	{%r7396, %r7395, %r7399, %r7397}, [%rd529+1536];

$L__BB0_737:
	neg.s32 	%r6900, %r1565;
	not.b32 	%r6899, %r38;
	add.s32 	%r6898, %r1563, %r6899;
	mul.lo.s32 	%r6897, %r6898, %r1564;
	not.b32 	%r6896, %r37;
	add.s32 	%r6895, %r1562, %r6896;
	mad.lo.s32 	%r5179, %r6895, %r1564, %r6897;
	add.s32 	%r5180, %r5179, %r1565;
	add.s32 	%r5189, %r5180, %r2399;
	add.s32 	%r1297, %r7188, 1;
	add.s32 	%r5190, %r1297, %r5189;
	div.s32 	%r5191, %r5190, %r1565;
	mad.lo.s32 	%r1298, %r5191, %r6900, %r5190;
	mad.lo.s32 	%r5198, %r5191, %r42, %r2410;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5199, %r5198, %r1566;
	shr.u32 	%r5200, %r5199, 31;
	add.s32 	%r5201, %r5199, %r5200;
	shr.s32 	%r5202, %r5201, 1;
	mad.lo.s32 	%r5203, %r5202, %r1565, %r1298;
	shl.b32 	%r5204, %r5203, 5;
	add.s32 	%r5205, %r5204, %r40;
	cvt.s64.s32 	%rd38, %r5205;
	mul.wide.s32 	%rd532, %r5205, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7190, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p86 bra 	$L__BB0_739;
	bra.uni 	$L__BB0_738;

$L__BB0_739:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7189, [%rd538];
	bra.uni 	$L__BB0_740;

$L__BB0_738:
	shl.b32 	%r5206, %r1298, 5;
	add.s32 	%r5207, %r5206, %r40;
	mul.wide.s32 	%rd535, %r5207, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5208, %r5209, %r5210, %r5211}, [%rd536];
	mov.u32 	%r7020, %r7024;
	mov.u32 	%r7021, %r7025;
	mov.u32 	%r7022, %r7026;
	mov.u32 	%r7023, %r7027;
	mov.u32 	%r7024, %r7028;
	mov.u32 	%r7025, %r7029;
	mov.u32 	%r7026, %r7030;
	mov.u32 	%r7027, %r7031;
	mov.u32 	%r7028, %r5211;
	mov.u32 	%r7029, %r5210;
	mov.u32 	%r7030, %r5209;
	mov.u32 	%r7031, %r5208;

$L__BB0_740:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5212, {low,high};}

	// end inline asm
	selp.b32 	%r5214, %r7015, %r5212, %p15;
	// begin inline asm
	{mul.f16x2 %r5213,%r5214,%r7158;
}
	// end inline asm
	selp.b32 	%r5217, %r7019, %r5212, %p15;
	// begin inline asm
	{mul.f16x2 %r5216,%r5217,%r7151;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5219, {low,high};}

	// end inline asm
	selp.b32 	%r5221, %r7015, %r5219, %p15;
	// begin inline asm
	{mul.f16x2 %r5220,%r5221,%r7139;
}
	// end inline asm
	selp.b32 	%r5224, %r7019, %r5219, %p15;
	// begin inline asm
	{mul.f16x2 %r5223,%r5224,%r7134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5226, {low,high};}

	// end inline asm
	selp.b32 	%r5228, %r7015, %r5226, %p15;
	// begin inline asm
	{mul.f16x2 %r5227,%r5228,%r7126;
}
	// end inline asm
	selp.b32 	%r5231, %r7019, %r5226, %p15;
	// begin inline asm
	{mul.f16x2 %r5230,%r5231,%r7125;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5233, {low,high};}

	// end inline asm
	selp.b32 	%r5235, %r7015, %r5233, %p15;
	// begin inline asm
	{mul.f16x2 %r5234,%r5235,%r7130;
}
	// end inline asm
	selp.b32 	%r5238, %r7019, %r5233, %p15;
	// begin inline asm
	{mul.f16x2 %r5237,%r5238,%r7129;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5240, {low,high};}

	// end inline asm
	selp.b32 	%r5242, %r7015, %r5240, %p15;
	// begin inline asm
	{mul.f16x2 %r5241,%r5242,%r7128;
}
	// end inline asm
	selp.b32 	%r5245, %r7019, %r5240, %p15;
	// begin inline asm
	{mul.f16x2 %r5244,%r5245,%r7122;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5247, {low,high};}

	// end inline asm
	selp.b32 	%r5249, %r7015, %r5247, %p15;
	// begin inline asm
	{mul.f16x2 %r5248,%r5249,%r7118;
}
	// end inline asm
	selp.b32 	%r5252, %r7019, %r5247, %p15;
	// begin inline asm
	{mul.f16x2 %r5251,%r5252,%r7117;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5254, {low,high};}

	// end inline asm
	selp.b32 	%r5256, %r7015, %r5254, %p15;
	// begin inline asm
	{mul.f16x2 %r5255,%r5256,%r7116;
}
	// end inline asm
	selp.b32 	%r5259, %r7019, %r5254, %p15;
	// begin inline asm
	{mul.f16x2 %r5258,%r5259,%r7110;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5261, {low,high};}

	// end inline asm
	selp.b32 	%r5263, %r7015, %r5261, %p15;
	// begin inline asm
	{mul.f16x2 %r5262,%r5263,%r7103;
}
	// end inline asm
	selp.b32 	%r5266, %r7019, %r5261, %p15;
	// begin inline asm
	{mul.f16x2 %r5265,%r5266,%r7102;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5268, {low,high};}

	// end inline asm
	selp.b32 	%r5270, %r7015, %r5268, %p15;
	// begin inline asm
	{mul.f16x2 %r5269,%r5270,%r7079;
}
	// end inline asm
	selp.b32 	%r5273, %r7019, %r5268, %p15;
	// begin inline asm
	{mul.f16x2 %r5272,%r5273,%r7077;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5275, {low,high};}

	// end inline asm
	selp.b32 	%r5277, %r7015, %r5275, %p15;
	// begin inline asm
	{mul.f16x2 %r5276,%r5277,%r7078;
}
	// end inline asm
	selp.b32 	%r5280, %r7019, %r5275, %p15;
	// begin inline asm
	{mul.f16x2 %r5279,%r5280,%r7076;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5282, {low,high};}

	// end inline asm
	selp.b32 	%r5284, %r7015, %r5282, %p15;
	// begin inline asm
	{mul.f16x2 %r5283,%r5284,%r7095;
}
	// end inline asm
	selp.b32 	%r5287, %r7019, %r5282, %p15;
	// begin inline asm
	{mul.f16x2 %r5286,%r5287,%r7094;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5289, {low,high};}

	// end inline asm
	selp.b32 	%r5291, %r7015, %r5289, %p15;
	// begin inline asm
	{mul.f16x2 %r5290,%r5291,%r7099;
}
	// end inline asm
	selp.b32 	%r5294, %r7019, %r5289, %p15;
	// begin inline asm
	{mul.f16x2 %r5293,%r5294,%r7098;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5296, {low,high};}

	// end inline asm
	selp.b32 	%r5298, %r7015, %r5296, %p15;
	// begin inline asm
	{mul.f16x2 %r5297,%r5298,%r7097;
}
	// end inline asm
	selp.b32 	%r5301, %r7019, %r5296, %p15;
	// begin inline asm
	{mul.f16x2 %r5300,%r5301,%r7092;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5303, {low,high};}

	// end inline asm
	selp.b32 	%r5305, %r7015, %r5303, %p15;
	// begin inline asm
	{mul.f16x2 %r5304,%r5305,%r7087;
}
	// end inline asm
	selp.b32 	%r5308, %r7019, %r5303, %p15;
	// begin inline asm
	{mul.f16x2 %r5307,%r5308,%r7086;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5310, {low,high};}

	// end inline asm
	selp.b32 	%r5312, %r7015, %r5310, %p15;
	// begin inline asm
	{mul.f16x2 %r5311,%r5312,%r7089;
}
	// end inline asm
	selp.b32 	%r5315, %r7019, %r5310, %p15;
	// begin inline asm
	{mul.f16x2 %r5314,%r5315,%r7088;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5317, {low,high};}

	// end inline asm
	selp.b32 	%r5319, %r7015, %r5317, %p15;
	// begin inline asm
	{mul.f16x2 %r5318,%r5319,%r7075;
}
	// end inline asm
	selp.b32 	%r5322, %r7019, %r5317, %p15;
	// begin inline asm
	{mul.f16x2 %r5321,%r5322,%r7074;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5324, {low,high};}

	// end inline asm
	selp.b32 	%r5326, %r7015, %r5324, %p15;
	// begin inline asm
	{mul.f16x2 %r5325,%r5326,%r7073;
}
	// end inline asm
	selp.b32 	%r5329, %r7019, %r5324, %p15;
	// begin inline asm
	{mul.f16x2 %r5328,%r5329,%r7072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5331, {low,high};}

	// end inline asm
	selp.b32 	%r5333, %r7015, %r5331, %p15;
	// begin inline asm
	{mul.f16x2 %r5332,%r5333,%r7071;
}
	// end inline asm
	selp.b32 	%r5336, %r7019, %r5331, %p15;
	// begin inline asm
	{mul.f16x2 %r5335,%r5336,%r7070;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5338, {low,high};}

	// end inline asm
	selp.b32 	%r5340, %r7015, %r5338, %p15;
	// begin inline asm
	{mul.f16x2 %r5339,%r5340,%r7081;
}
	// end inline asm
	selp.b32 	%r5343, %r7019, %r5338, %p15;
	// begin inline asm
	{mul.f16x2 %r5342,%r5343,%r7080;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5345, {low,high};}

	// end inline asm
	selp.b32 	%r5347, %r7015, %r5345, %p15;
	// begin inline asm
	{mul.f16x2 %r5346,%r5347,%r7069;
}
	// end inline asm
	selp.b32 	%r5350, %r7019, %r5345, %p15;
	// begin inline asm
	{mul.f16x2 %r5349,%r5350,%r7067;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5352, {low,high};}

	// end inline asm
	selp.b32 	%r5354, %r7015, %r5352, %p15;
	// begin inline asm
	{mul.f16x2 %r5353,%r5354,%r7068;
}
	// end inline asm
	selp.b32 	%r5357, %r7019, %r5352, %p15;
	// begin inline asm
	{mul.f16x2 %r5356,%r5357,%r7066;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5359, {low,high};}

	// end inline asm
	selp.b32 	%r5361, %r7015, %r5359, %p15;
	// begin inline asm
	{mul.f16x2 %r5360,%r5361,%r7065;
}
	// end inline asm
	selp.b32 	%r5364, %r7019, %r5359, %p15;
	// begin inline asm
	{mul.f16x2 %r5363,%r5364,%r7063;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5366, {low,high};}

	// end inline asm
	selp.b32 	%r5368, %r7015, %r5366, %p15;
	// begin inline asm
	{mul.f16x2 %r5367,%r5368,%r7064;
}
	// end inline asm
	selp.b32 	%r5371, %r7019, %r5366, %p15;
	// begin inline asm
	{mul.f16x2 %r5370,%r5371,%r7062;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5373, {low,high};}

	// end inline asm
	selp.b32 	%r5375, %r7015, %r5373, %p15;
	// begin inline asm
	{mul.f16x2 %r5374,%r5375,%r7061;
}
	// end inline asm
	selp.b32 	%r5378, %r7019, %r5373, %p15;
	// begin inline asm
	{mul.f16x2 %r5377,%r5378,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5380,%r7185,%r3374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5383,%r3485,%r3331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5386,%r5380,%r5383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5389,%r6923,%r5386;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5392,%r5213,%r5389;
}
	// end inline asm
	selp.b32 	%r7153, %r5213, %r5392, %p15;
	// begin inline asm
	{sub.f16x2 %r5395,%r7184,%r3440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5398,%r3519,%r3408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5401,%r5395,%r5398;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5404,%r6923,%r5401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5407,%r5216,%r5404;
}
	// end inline asm
	selp.b32 	%r7148, %r5216, %r5407, %p15;
	// begin inline asm
	{sub.f16x2 %r5410,%r7181,%r3607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5413,%r7187,%r3564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5416,%r5410,%r5413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5419,%r6923,%r5416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5422,%r5220,%r5419;
}
	// end inline asm
	selp.b32 	%r7157, %r5220, %r5422, %p15;
	// begin inline asm
	{sub.f16x2 %r5425,%r7180,%r3673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5428,%r7186,%r3641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5431,%r5425,%r5428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5434,%r6923,%r5431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5437,%r5223,%r5434;
}
	// end inline asm
	selp.b32 	%r7150, %r5223, %r5437, %p15;
	// begin inline asm
	{sub.f16x2 %r5440,%r7184,%r7185;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5443,%r7014,%r5440;
}
	// end inline asm
	@%p15 bra 	$L__BB0_742;
	bra.uni 	$L__BB0_741;

$L__BB0_742:
	// begin inline asm
	{neg.f16x2 %r7424,%r5227;
}
	// end inline asm
	bra.uni 	$L__BB0_743;

$L__BB0_741:
	// begin inline asm
	{mul.f16x2 %r7424,%r7015,%r5440;
}
	// end inline asm

$L__BB0_743:
	mov.u32 	%r5454, 31;
	mov.u32 	%r5456, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5452,%r7424,%r5454,%r2095,%r5456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5457,%r5443,%r5452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5460,%r1075,%r1051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5463,%r5460,%r5457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5466,%r6923,%r5463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7155,%r5227,%r5466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5472,%r7186,%r7187;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5475,%r7014,%r5472;
}
	// end inline asm
	mov.u32 	%r7425, %r5234;
	@%p15 bra 	$L__BB0_745;

	// begin inline asm
	{mul.f16x2 %r7425,%r7015,%r5472;
}
	// end inline asm

$L__BB0_745:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5484,%r7425,%r5454,%r2095,%r5456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5489,%r5475,%r5484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5492,%r7175,%r1051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5495,%r5489,%r5492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5498,%r6923,%r5495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r5234,%r5498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5504,%r7177,%r7185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5507,%r7183,%r7187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5510,%r5504,%r5507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5513,%r6923,%r5510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5516,%r5241,%r5513;
}
	// end inline asm
	selp.b32 	%r7158, %r5241, %r5516, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7185;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5521,%r7185,%r434,%r2095,%r5456;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5521;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5527, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5528,%r5527,%r7184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5531,%r7018,%r5528;
}
	// end inline asm
	@%p15 bra 	$L__BB0_747;
	bra.uni 	$L__BB0_746;

$L__BB0_747:
	// begin inline asm
	{neg.f16x2 %r7426,%r5230;
}
	// end inline asm
	bra.uni 	$L__BB0_748;

$L__BB0_746:
	// begin inline asm
	{mul.f16x2 %r7426,%r7019,%r5528;
}
	// end inline asm

$L__BB0_748:
	mov.u32 	%r5546, 31;
	mov.u32 	%r5570, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5544,%r7426,%r5546,%r2095,%r5570;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5549,%r5531,%r5544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5552,%r1087,%r1063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5555,%r5552,%r5549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5558,%r6923,%r5555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r5230,%r5558;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7187;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5566,%r7187,%r434,%r2095,%r5570;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5566;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5572, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5573,%r5572,%r7186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5576,%r7018,%r5573;
}
	// end inline asm
	mov.u32 	%r7427, %r5237;
	@%p15 bra 	$L__BB0_750;

	// begin inline asm
	{mul.f16x2 %r7427,%r7019,%r5573;
}
	// end inline asm

$L__BB0_750:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5587,%r7427,%r5546,%r2095,%r5570;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5592,%r5576,%r5587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5595,%r7174,%r1063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5598,%r5592,%r5595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5601,%r6923,%r5598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7159,%r5237,%r5601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5607,%r7176,%r7184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5610,%r7182,%r7186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5613,%r5607,%r5610;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5616,%r6923,%r5613;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5619,%r5244,%r5616;
}
	// end inline asm
	selp.b32 	%r7151, %r5244, %r5619, %p15;
	// begin inline asm
	{sub.f16x2 %r5622,%r7182,%r7183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5625,%r7014,%r5622;
}
	// end inline asm
	mov.u32 	%r7428, %r5248;
	@%p15 bra 	$L__BB0_752;

	// begin inline asm
	{mul.f16x2 %r7428,%r7015,%r5622;
}
	// end inline asm

$L__BB0_752:
	mov.u32 	%r5636, 31;
	mov.u32 	%r5675, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5634,%r7428,%r5636,%r2095,%r5675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5639,%r5625,%r5634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5642,%r7169,%r1075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5645,%r5639,%r5642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5648,%r6923,%r5645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7146,%r5248,%r5648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5654,%r7171,%r3945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5657,%r4086,%r7183;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5660,%r5654,%r5657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5663,%r6923,%r5660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5666,%r5255,%r5663;
}
	// end inline asm
	selp.b32 	%r7144, %r5255, %r5666, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7183;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5671,%r7183,%r434,%r2095,%r5675;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5671;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5677, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5678,%r5677,%r7182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5681,%r7018,%r5678;
}
	// end inline asm
	mov.u32 	%r7429, %r5251;
	@%p15 bra 	$L__BB0_754;

	// begin inline asm
	{mul.f16x2 %r7429,%r7019,%r5678;
}
	// end inline asm

$L__BB0_754:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5692,%r7429,%r5636,%r2095,%r5675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5697,%r5681,%r5692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5700,%r7168,%r1087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5703,%r5697,%r5700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5706,%r6923,%r5703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r5251,%r5706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5712,%r7170,%r4026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5715,%r4120,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5718,%r5712,%r5715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5721,%r6923,%r5718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5724,%r5258,%r5721;
}
	// end inline asm
	selp.b32 	%r7142, %r5258, %r5724, %p15;
	// begin inline asm
	{sub.f16x2 %r5727,%r7180,%r7181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5730,%r7014,%r5727;
}
	// end inline asm
	@%p15 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r7430,%r5262;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r7430,%r7015,%r5727;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5743, 31;
	mov.u32 	%r5745, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5741,%r7430,%r5743,%r2095,%r5745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5746,%r5730,%r5741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5749,%r7175,%r1105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5752,%r5749,%r5746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5755,%r6923,%r5752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7136,%r5262,%r5755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5761,%r7301,%r7302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5764,%r7014,%r5761;
}
	// end inline asm
	mov.u32 	%r7431, %r5269;
	@%p15 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r7431,%r7015,%r5761;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5773,%r7431,%r5743,%r2095,%r5745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5778,%r5764,%r5773;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5781,%r7299,%r1105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5784,%r5778,%r5781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5787,%r6923,%r5784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7141,%r5269,%r5787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r7300,%r7181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5796,%r7179,%r7302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5799,%r5793,%r5796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5802,%r6923,%r5799;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5805,%r5276,%r5802;
}
	// end inline asm
	selp.b32 	%r7139, %r5276, %r5805, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7181;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5810,%r7181,%r434,%r2095,%r5745;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5810;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5816, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5817,%r5816,%r7180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5820,%r7018,%r5817;
}
	// end inline asm
	@%p15 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r7432,%r5265;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r7432,%r7019,%r5817;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5835, 31;
	mov.u32 	%r5859, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5833,%r7432,%r5835,%r2095,%r5859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5838,%r5820,%r5833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5841,%r7174,%r1111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r5841,%r5838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5847,%r6923,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7135,%r5265,%r5847;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7302;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5855,%r7302,%r434,%r2095,%r5859;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5855;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5861, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5861,%r7301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r7018,%r5862;
}
	// end inline asm
	mov.u32 	%r7433, %r5272;
	@%p15 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r7433,%r7019,%r5862;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5876,%r7433,%r5835,%r2095,%r5859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5881,%r5865,%r5876;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r7297,%r1111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5887,%r5881,%r5884;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5890,%r6923,%r5887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7140,%r5272,%r5890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5896,%r7298,%r7180;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5899,%r7178,%r7301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5902,%r5896,%r5899;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5905,%r6923,%r5902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5908,%r5279,%r5905;
}
	// end inline asm
	selp.b32 	%r7134, %r5279, %r5908, %p15;
	// begin inline asm
	{sub.f16x2 %r5911,%r7176,%r7177;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5914,%r7014,%r5911;
}
	// end inline asm
	@%p15 bra 	$L__BB0_766;
	bra.uni 	$L__BB0_765;

$L__BB0_766:
	// begin inline asm
	{neg.f16x2 %r7434,%r5283;
}
	// end inline asm
	bra.uni 	$L__BB0_767;

$L__BB0_765:
	// begin inline asm
	{mul.f16x2 %r7434,%r7015,%r5911;
}
	// end inline asm

$L__BB0_767:
	mov.u32 	%r5927, 31;
	mov.u32 	%r5929, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5925,%r7434,%r5927,%r2095,%r5929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5930,%r5914,%r5925;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5933,%r7169,%r7175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5936,%r5933,%r5930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5939,%r6923,%r5936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7126,%r5283,%r5939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5945,%r7178,%r7179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5948,%r7014,%r5945;
}
	// end inline asm
	mov.u32 	%r7435, %r5290;
	@%p15 bra 	$L__BB0_769;

	// begin inline asm
	{mul.f16x2 %r7435,%r7015,%r5945;
}
	// end inline asm

$L__BB0_769:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5957,%r7435,%r5927,%r2095,%r5929;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5962,%r5948,%r5957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r7165,%r7175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r5962,%r5965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5971,%r6923,%r5968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7130,%r5290,%r5971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r7167,%r7177;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5980,%r7173,%r7179;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5983,%r5977,%r5980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5986,%r6923,%r5983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5989,%r5297,%r5986;
}
	// end inline asm
	selp.b32 	%r7128, %r5297, %r5989, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7177;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5994,%r7177,%r434,%r2095,%r5929;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5994;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6000, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6001,%r6000,%r7176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6004,%r7018,%r6001;
}
	// end inline asm
	@%p15 bra 	$L__BB0_771;
	bra.uni 	$L__BB0_770;

$L__BB0_771:
	// begin inline asm
	{neg.f16x2 %r7436,%r5286;
}
	// end inline asm
	bra.uni 	$L__BB0_772;

$L__BB0_770:
	// begin inline asm
	{mul.f16x2 %r7436,%r7019,%r6001;
}
	// end inline asm

$L__BB0_772:
	mov.u32 	%r6019, 31;
	mov.u32 	%r6043, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6017,%r7436,%r6019,%r2095,%r6043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6022,%r6004,%r6017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6025,%r7168,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r6025,%r6022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6031,%r6923,%r6028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7125,%r5286,%r6031;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7179;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6039,%r7179,%r434,%r2095,%r6043;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6039;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6045, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6046,%r6045,%r7178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6049,%r7018,%r6046;
}
	// end inline asm
	mov.u32 	%r7437, %r5293;
	@%p15 bra 	$L__BB0_774;

	// begin inline asm
	{mul.f16x2 %r7437,%r7019,%r6046;
}
	// end inline asm

$L__BB0_774:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6060,%r7437,%r6019,%r2095,%r6043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6065,%r6049,%r6060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r7164,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6071,%r6065,%r6068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6074,%r6923,%r6071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r5293,%r6074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6080,%r7166,%r7176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6083,%r7172,%r7178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6086,%r6080,%r6083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6089,%r6923,%r6086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6092,%r5300,%r6089;
}
	// end inline asm
	selp.b32 	%r7122, %r5300, %r6092, %p15;
	// begin inline asm
	{sub.f16x2 %r6095,%r7170,%r7171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6098,%r7014,%r6095;
}
	// end inline asm
	@%p15 bra 	$L__BB0_776;
	bra.uni 	$L__BB0_775;

$L__BB0_776:
	// begin inline asm
	{neg.f16x2 %r7438,%r5304;
}
	// end inline asm
	bra.uni 	$L__BB0_777;

$L__BB0_775:
	// begin inline asm
	{mul.f16x2 %r7438,%r7015,%r6095;
}
	// end inline asm

$L__BB0_777:
	mov.u32 	%r6111, 31;
	mov.u32 	%r6113, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6109,%r7438,%r6111,%r2095,%r6113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6114,%r6098,%r6109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6117,%r1160,%r7169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6120,%r6117,%r6114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6123,%r6923,%r6120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7114,%r5304,%r6123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6129,%r7172,%r7173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6132,%r7014,%r6129;
}
	// end inline asm
	mov.u32 	%r7439, %r5311;
	@%p15 bra 	$L__BB0_779;

	// begin inline asm
	{mul.f16x2 %r7439,%r7015,%r6129;
}
	// end inline asm

$L__BB0_779:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6141,%r7439,%r6111,%r2095,%r6113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6146,%r6132,%r6141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6149,%r7163,%r7169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6152,%r6146,%r6149;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6155,%r6923,%r6152;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7118,%r5311,%r6155;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r7285,%r7171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6164,%r7288,%r7173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6167,%r6161,%r6164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6170,%r6923,%r6167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6173,%r5318,%r6170;
}
	// end inline asm
	selp.b32 	%r7116, %r5318, %r6173, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7171;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6178,%r7171,%r434,%r2095,%r6113;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6178;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6184, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6185,%r6184,%r7170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6188,%r7018,%r6185;
}
	// end inline asm
	@%p15 bra 	$L__BB0_781;
	bra.uni 	$L__BB0_780;

$L__BB0_781:
	// begin inline asm
	{neg.f16x2 %r7440,%r5307;
}
	// end inline asm
	bra.uni 	$L__BB0_782;

$L__BB0_780:
	// begin inline asm
	{mul.f16x2 %r7440,%r7019,%r6185;
}
	// end inline asm

$L__BB0_782:
	mov.u32 	%r6203, 31;
	mov.u32 	%r6227, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6201,%r7440,%r6203,%r2095,%r6227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6206,%r6188,%r6201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6209,%r1161,%r7168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6212,%r6209,%r6206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6215,%r6923,%r6212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7113,%r5307,%r6215;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7173;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6223,%r7173,%r434,%r2095,%r6227;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6223;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6229, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6230,%r6229,%r7172;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6233,%r7018,%r6230;
}
	// end inline asm
	mov.u32 	%r7441, %r5314;
	@%p15 bra 	$L__BB0_784;

	// begin inline asm
	{mul.f16x2 %r7441,%r7019,%r6230;
}
	// end inline asm

$L__BB0_784:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6244,%r7441,%r6203,%r2095,%r6227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6249,%r6233,%r6244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6252,%r7162,%r7168;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6255,%r6249,%r6252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6258,%r6923,%r6255;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7117,%r5314,%r6258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6264,%r7283,%r7170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6267,%r7287,%r7172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6270,%r6264,%r6267;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6273,%r6923,%r6270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6276,%r5321,%r6273;
}
	// end inline asm
	selp.b32 	%r7110, %r5321, %r6276, %p15;
	// begin inline asm
	{sub.f16x2 %r6279,%r7287,%r7288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r7014,%r6279;
}
	// end inline asm
	mov.u32 	%r7442, %r5325;
	@%p15 bra 	$L__BB0_786;

	// begin inline asm
	{mul.f16x2 %r7442,%r7015,%r6279;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6293, 31;
	mov.u32 	%r6317, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6291,%r7442,%r6293,%r2095,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6296,%r6282,%r6291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6299,%r7282,%r1160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6302,%r6296,%r6299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6305,%r6923,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7107,%r5325,%r6305;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7288;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6313,%r7288,%r434,%r2095,%r6317;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6313;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6319, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r6319,%r7287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6323,%r7018,%r6320;
}
	// end inline asm
	mov.u32 	%r7443, %r5328;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7443,%r7019,%r6320;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6334,%r7443,%r6293,%r2095,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6339,%r6323,%r6334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r7281,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6345,%r6339,%r6342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6348,%r6923,%r6345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r5328,%r6348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6354,%r7298,%r7300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6357,%r7014,%r6354;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7444,%r5332;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7444,%r7015,%r6354;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6370, 31;
	mov.u32 	%r6394, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6368,%r7444,%r6370,%r2095,%r6394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6373,%r6357,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6376,%r7165,%r7299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6379,%r6376,%r6373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6382,%r6923,%r6379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r5332,%r6382;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7300;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6390,%r7300,%r434,%r2095,%r6394;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6390;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6396, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6397,%r6396,%r7298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6400,%r7018,%r6397;
}
	// end inline asm
	@%p15 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	// begin inline asm
	{neg.f16x2 %r7445,%r5335;
}
	// end inline asm
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	// begin inline asm
	{mul.f16x2 %r7445,%r7019,%r6397;
}
	// end inline asm

$L__BB0_794:
	mov.u32 	%r6415, 31;
	mov.u32 	%r6417, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6413,%r7445,%r6415,%r2095,%r6417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6418,%r6400,%r6413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6421,%r7164,%r7297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6424,%r6421,%r6418;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6427,%r6923,%r6424;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r5335,%r6427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6433,%r7166,%r7167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6436,%r7014,%r6433;
}
	// end inline asm
	@%p15 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7446,%r5339;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7446,%r7015,%r6433;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r6449, 31;
	mov.u32 	%r6451, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6447,%r7446,%r6449,%r2095,%r6451;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6452,%r6436,%r6447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6455,%r7163,%r7165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6458,%r6455,%r6452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6461,%r6923,%r6458;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7095,%r5339,%r6461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6467,%r7295,%r7296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6470,%r7014,%r6467;
}
	// end inline asm
	mov.u32 	%r7447, %r5346;
	@%p15 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7447,%r7015,%r6467;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6479,%r7447,%r6449,%r2095,%r6451;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6484,%r6470,%r6479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r7293,%r7165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6490,%r6484,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6493,%r6923,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7099,%r5346,%r6493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6499,%r7280,%r7167;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6502,%r7286,%r7296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6505,%r6499,%r6502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6508,%r6923,%r6505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6511,%r5353,%r6508;
}
	// end inline asm
	selp.b32 	%r7097, %r5353, %r6511, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7167;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6516,%r7167,%r434,%r2095,%r6451;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6516;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6522, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6523,%r6522,%r7166;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6526,%r7018,%r6523;
}
	// end inline asm
	@%p15 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7448,%r5342;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7448,%r7019,%r6523;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6541, 31;
	mov.u32 	%r6565, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6539,%r7448,%r6541,%r2095,%r6565;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6544,%r6526,%r6539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6547,%r7162,%r7164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6550,%r6547,%r6544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6553,%r6923,%r6550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7094,%r5342,%r6553;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7296;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6561,%r7296,%r434,%r2095,%r6565;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6561;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6567, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6568,%r6567,%r7295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6571,%r7018,%r6568;
}
	// end inline asm
	mov.u32 	%r7449, %r5349;
	@%p15 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7449,%r7019,%r6568;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6582,%r7449,%r6541,%r2095,%r6565;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6587,%r6571,%r6582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6590,%r7291,%r7164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6593,%r6587,%r6590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6596,%r6923,%r6593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r5349,%r6596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6602,%r7279,%r7166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6605,%r7284,%r7295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6608,%r6602,%r6605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6611,%r6923,%r6608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6614,%r5356,%r6611;
}
	// end inline asm
	selp.b32 	%r7092, %r5356, %r6614, %p15;
	// begin inline asm
	{sub.f16x2 %r6617,%r7283,%r7285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6620,%r7014,%r6617;
}
	// end inline asm
	@%p15 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r7450,%r5360;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	// begin inline asm
	{mul.f16x2 %r7450,%r7015,%r6617;
}
	// end inline asm

$L__BB0_807:
	mov.u32 	%r6633, 31;
	mov.u32 	%r6635, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6631,%r7450,%r6633,%r2095,%r6635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6636,%r6620,%r6631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6639,%r7282,%r7163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6642,%r6639,%r6636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6645,%r6923,%r6642;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7087,%r5360,%r6645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6651,%r7284,%r7286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6654,%r7014,%r6651;
}
	// end inline asm
	mov.u32 	%r7451, %r5367;
	@%p15 bra 	$L__BB0_809;

	// begin inline asm
	{mul.f16x2 %r7451,%r7015,%r6651;
}
	// end inline asm

$L__BB0_809:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6663,%r7451,%r6633,%r2095,%r6635;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6668,%r6654,%r6663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6671,%r7278,%r7163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6674,%r6668,%r6671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6677,%r6923,%r6674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7089,%r5367,%r6677;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7285;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6685,%r7285,%r434,%r2095,%r6635;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6685;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6691, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6692,%r6691,%r7283;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6695,%r7018,%r6692;
}
	// end inline asm
	@%p15 bra 	$L__BB0_811;
	bra.uni 	$L__BB0_810;

$L__BB0_811:
	// begin inline asm
	{neg.f16x2 %r7452,%r5363;
}
	// end inline asm
	bra.uni 	$L__BB0_812;

$L__BB0_810:
	// begin inline asm
	{mul.f16x2 %r7452,%r7019,%r6692;
}
	// end inline asm

$L__BB0_812:
	mov.u32 	%r6710, 31;
	mov.u32 	%r6734, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6708,%r7452,%r6710,%r2095,%r6734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6713,%r6695,%r6708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6716,%r7281,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6719,%r6716,%r6713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6722,%r6923,%r6719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7086,%r5363,%r6722;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7286;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6730,%r7286,%r434,%r2095,%r6734;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6730;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6736, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6737,%r6736,%r7284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6740,%r7018,%r6737;
}
	// end inline asm
	mov.u32 	%r7453, %r5370;
	@%p15 bra 	$L__BB0_814;

	// begin inline asm
	{mul.f16x2 %r7453,%r7019,%r6737;
}
	// end inline asm

$L__BB0_814:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6751,%r7453,%r6710,%r2095,%r6734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6756,%r6740,%r6751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6759,%r7277,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6762,%r6756,%r6759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6765,%r6923,%r6762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7088,%r5370,%r6765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6771,%r7279,%r7280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6774,%r7014,%r6771;
}
	// end inline asm
	@%p15 bra 	$L__BB0_816;
	bra.uni 	$L__BB0_815;

$L__BB0_816:
	// begin inline asm
	{neg.f16x2 %r7454,%r5374;
}
	// end inline asm
	bra.uni 	$L__BB0_817;

$L__BB0_815:
	// begin inline asm
	{mul.f16x2 %r7454,%r7015,%r6771;
}
	// end inline asm

$L__BB0_817:
	mov.u32 	%r6787, 31;
	mov.u32 	%r6811, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6785,%r7454,%r6787,%r2095,%r6811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6790,%r6774,%r6785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6793,%r7278,%r7293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6796,%r6793,%r6790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6799,%r6923,%r6796;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r5374,%r6799;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7280;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6807,%r7280,%r434,%r2095,%r6811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6807;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6813, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6814,%r6813,%r7279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6817,%r7018,%r6814;
}
	// end inline asm
	@%p15 bra 	$L__BB0_819;
	bra.uni 	$L__BB0_818;

$L__BB0_819:
	// begin inline asm
	{neg.f16x2 %r7455,%r5377;
}
	// end inline asm
	bra.uni 	$L__BB0_820;

$L__BB0_818:
	// begin inline asm
	{mul.f16x2 %r7455,%r7019,%r6814;
}
	// end inline asm

$L__BB0_820:
	setp.ne.s32 	%p479, %r35, %r1987;
	mov.u32 	%r6832, 31;
	mov.u32 	%r6834, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6830,%r7455,%r6832,%r2095,%r6834;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6835,%r6817,%r6830;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6838,%r7277,%r7291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6841,%r6838,%r6835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6844,%r6923,%r6841;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r5377,%r6844;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p479 bra 	$L__BB0_822;

	mad.lo.s32 	%r6853, %r654, %r1563, %r38;
	mad.lo.s32 	%r6854, %r6853, 768, 384;
	mul.lo.s32 	%r6855, %r6854, %r1561;
	mad.lo.s32 	%r6857, %r36, 384, %r6855;
	add.s32 	%r6858, %r6857, -128;
	mul.wide.s32 	%rd540, %r6858, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7141, %r7140, %r7136, %r7135};
	st.global.v4.u32 	[%rd543+1024], {%r7157, %r7150, %r7160, %r7159};
	st.global.v4.u32 	[%rd543+1536], {%r7155, %r7154, %r7153, %r7148};

$L__BB0_822:
	setp.ne.s32 	%p480, %r36, %r1992;
	@%p480 bra 	$L__BB0_825;

	not.b32 	%r6905, %r35;
	add.s32 	%r6904, %r1560, %r6905;
	mad.lo.s32 	%r6860, %r655, %r1562, %r37;
	mad.lo.s32 	%r6866, %r6904, 384, %r66;
	mad.lo.s32 	%r6867, %r6860, %r1621, %r6866;
	mad.lo.s32 	%r6870, %r1623, %r65, %r6867;
	mul.wide.s32 	%rd544, %r6870, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7155, %r7154, %r7153, %r7148};
	st.global.v4.u32 	[%rd41+512], {%r7146, %r7145, %r7114, %r7113};
	st.global.v4.u32 	[%rd41+1024], {%r7144, %r7142, %r7107, %r7106};
	@%p220 bra 	$L__BB0_825;

	st.global.v4.u32 	[%rd41+1536], {%r7392, %r7391, %r7394, %r7393};

$L__BB0_825:
	rem.s32 	%r6871, %r7188, %r1564;
	setp.eq.s32 	%p473, %r6871, 0;
	@%p473 bra 	$L__BB0_827;

	bar.sync 	0;
	bra.uni 	$L__BB0_834;

$L__BB0_827:
	@%p162 bra 	$L__BB0_829;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_829:
	bar.sync 	0;
	@%p163 bra 	$L__BB0_833;

	membar.gl;
	setp.eq.s32 	%p476, %r428, %r429;
	mov.u32 	%r6887, -2147483647;
	sub.s32 	%r6888, %r6887, %r427;
	selp.b32 	%r6876, %r6888, 1, %p476;
	// begin inline asm
	atom.add.release.gpu.u32 %r6875,[%rd25],%r6876;
	// end inline asm

$L__BB0_831:
	ld.volatile.u32 	%r6889, [%rd25];
	xor.b32  	%r6890, %r6889, %r6875;
	setp.gt.s32 	%p477, %r6890, -1;
	@%p477 bra 	$L__BB0_831;

	// begin inline asm
	ld.acquire.gpu.u32 %r6891,[%rd25];
	// end inline asm

$L__BB0_833:
	bar.sync 	0;

$L__BB0_834:
	setp.lt.s32 	%p478, %r1297, %r43;
	mov.u32 	%r7060, %r7395;
	mov.u32 	%r7061, %r7396;
	mov.u32 	%r7062, %r7381;
	mov.u32 	%r7063, %r7382;
	mov.u32 	%r7064, %r7383;
	mov.u32 	%r7065, %r7384;
	mov.u32 	%r7066, %r7397;
	mov.u32 	%r7067, %r7398;
	mov.u32 	%r7068, %r7399;
	mov.u32 	%r7069, %r7400;
	mov.u32 	%r7070, %r7401;
	mov.u32 	%r7071, %r7402;
	mov.u32 	%r7072, %r7387;
	mov.u32 	%r7073, %r7388;
	mov.u32 	%r7074, %r7389;
	mov.u32 	%r7075, %r7390;
	mov.u32 	%r7076, %r7403;
	mov.u32 	%r7077, %r7404;
	mov.u32 	%r7078, %r7405;
	mov.u32 	%r7079, %r7406;
	mov.u32 	%r7108, %r499;
	mov.u32 	%r7109, %r7325;
	mov.u32 	%r7112, %r500;
	mov.u32 	%r7115, %r7327;
	mov.u32 	%r7120, %r505;
	mov.u32 	%r7124, %r508;
	mov.u32 	%r7132, %r7332;
	mov.u32 	%r7137, %r7334;
	mov.u32 	%r7143, %r526;
	mov.u32 	%r7147, %r534;
	mov.u32 	%r7149, %r536;
	mov.u32 	%r7152, %r538;
	mov.u32 	%r7156, %r542;
	mov.u32 	%r7161, %r546;
	mov.u32 	%r7188, %r1297;
	@%p478 bra 	$L__BB0_302;

$L__BB0_835:
	ret;

}

