//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<332>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7356>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<554>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1516, %r1517}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1518, %r1519}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1520, %r1521}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1522, %r1523}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1524, %r1525}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1526, %r1527}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1528, %r1529}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1530, 32;
	sub.s32 	%r27, %r1530, %r1523;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1531, %r1529, -1;
	mad.lo.s32 	%r1532, %r1531, %r1528, %r1527;
	add.s32 	%r1533, %r1522, %r1521;
	add.s32 	%r1534, %r1533, %r1532;
	add.s32 	%r1535, %r1534, 1;
	mul.lo.s32 	%r1536, %r1516, %r1518;
	shl.b32 	%r29, %r1536, 1;
	shl.b32 	%r1537, %r1536, 2;
	div.s32 	%r1538, %r1535, %r1537;
	add.s32 	%r1539, %r1538, 1;
	mul.lo.s32 	%r1540, %r1539, %r1522;
	mul.lo.s32 	%r1541, %r1517, %r1519;
	shl.b32 	%r30, %r1541, 1;
	div.s32 	%r1542, %r1540, %r30;
	add.s32 	%r1543, %r1542, 1;
	mul.lo.s32 	%r31, %r1543, %r1521;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6819, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6819, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1546, %r1518, %r26, %r25;
	mad.lo.s32 	%r1547, %r1546, %r1517, %r24;
	mad.lo.s32 	%r1548, %r1547, %r1516, %r23;
	shl.b32 	%r35, %r1548, 5;
	add.s32 	%r6824, %r35, %r28;
	mul.lo.s32 	%r1549, %r1541, %r1536;
	shl.b32 	%r39, %r1549, 5;
	shl.b32 	%r1550, %r1523, 2;
	mov.u32 	%r1551, 128;
	sub.s32 	%r40, %r1551, %r1550;
	mul.lo.s32 	%r1552, %r1522, %r1521;
	mul.lo.s32 	%r1553, %r1552, %r1529;
	mul.lo.s32 	%r1554, %r1553, %r40;
	mul.lo.s32 	%r41, %r1554, 3;
	setp.ge.s32 	%p13, %r6824, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1555, %r28;
	add.s32 	%r1556, %r41, %r1555;
	sub.s32 	%r1557, %r1556, %r35;
	mul.lo.s32 	%r1558, %r1541, %r1516;
	mul.lo.s32 	%r1559, %r1558, %r1518;
	shl.b32 	%r1560, %r1559, 5;
	div.u32 	%r42, %r1557, %r1560;
	add.s32 	%r1561, %r42, 1;
	and.b32  	%r6821, %r1561, 3;
	setp.eq.s32 	%p14, %r6821, 0;
	mov.u32 	%r6822, %r6824;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r6822, %r6824;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r6822, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1562, 0;
	st.global.u32 	[%rd45], %r1562;
	add.s32 	%r6822, %r6822, %r39;
	add.s32 	%r6821, %r6821, -1;
	setp.ne.s32 	%p15, %r6821, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r6822, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1563, 0;
	st.global.u32 	[%rd47], %r1563;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1563;
	add.s32 	%r1564, %r6822, %r39;
	add.s32 	%r1565, %r1564, %r39;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1563;
	add.s32 	%r1566, %r1565, %r39;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1563;
	add.s32 	%r6822, %r1566, %r39;
	setp.lt.s32 	%p17, %r6822, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1567, %r1522, %r29;
	div.s32 	%r1568, %r1567, %r30;
	mul.lo.s32 	%r1569, %r1568, %r1521;
	sub.s32 	%r51, %r1569, %r29;
	sub.s32 	%r1570, %r1521, %r30;
	mul.lo.s32 	%r1571, %r1570, %r1518;
	mul.lo.s32 	%r52, %r1516, 384;
	add.s32 	%r1572, %r52, %r52;
	add.s32 	%r1573, %r1572, 128;
	mul.lo.s32 	%r1575, %r1541, 768;
	mul.lo.s32 	%r1576, %r1571, %r1573;
	mad.lo.s32 	%r53, %r1575, %r51, %r1576;
	bra.uni 	$L__BB0_11;

$L__BB0_644:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6798, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r6824, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r6798;
	add.s32 	%r6824, %r6824, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r6824, %r53;
	@%p18 bra 	$L__BB0_644;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r6866, %r1516, %r25, %r23;
	mul.lo.s32 	%r57, %r1517, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r6866, %r1521;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1577, 31;
	sub.s32 	%r1578, %r1577, %r28;
	selp.b32 	%r1579, %r28, %r1578, %p20;
	shl.b32 	%r1580, %r1579, 2;
	mov.u32 	%r1581, 2;
	sub.s32 	%r59, %r1580, %r1524;
	sub.s32 	%r1582, %r1581, %r1524;
	add.s32 	%r60, %r1582, %r1580;
	shl.b32 	%r61, %r1552, 6;
	add.s32 	%r62, %r1521, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1584, %r66, 31;
	add.s32 	%r1585, %r66, %r1584;
	shr.s32 	%r68, %r1585, 1;
	and.b32  	%r1586, %r1585, -2;
	sub.s32 	%r1587, %r66, %r1586;
	add.s32 	%r67, %r1587, %r61;
	rem.s32 	%r1622, %r63, %r40;
	add.s32 	%r1623, %r1622, %r40;
	rem.s32 	%r91, %r1623, %r40;
	rem.s32 	%r1624, %r64, %r40;
	add.s32 	%r1625, %r1624, %r40;
	rem.s32 	%r92, %r1625, %r40;
	mov.u32 	%r6825, %r6866;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1522;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r6825;
	rem.s32 	%r1588, %r59, %r40;
	add.s32 	%r1589, %r1588, %r40;
	rem.s32 	%r71, %r1589, %r40;
	rem.s32 	%r1590, %r60, %r40;
	add.s32 	%r1591, %r1590, %r40;
	rem.s32 	%r72, %r1591, %r40;
	mul.lo.s32 	%r73, %r6825, %r1522;
	add.s32 	%r1592, %r1521, %r6825;
	mul.lo.s32 	%r74, %r1592, %r1522;
	add.s32 	%r1593, %r1592, %r1521;
	mul.lo.s32 	%r75, %r1593, %r1522;
	mov.u32 	%r6826, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r6826, %r1521;
	add.s32 	%r78, %r77, %r6825;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1596, %r73, %r6826;
	mul.lo.s32 	%r1597, %r1596, %r40;
	add.s32 	%r1598, %r1597, %r71;
	mul.wide.s32 	%rd55, %r1598, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1599, %r1597, %r72;
	mul.wide.s32 	%rd57, %r1599, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6827, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6827, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1600, %r83, %r28;
	shl.b32 	%r1601, %r1600, 2;
	add.s32 	%r1602, %r61, %r1601;
	mul.wide.s32 	%rd59, %r1602, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r6827;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1605, %r74, %r6826;
	mul.lo.s32 	%r1606, %r1605, %r40;
	add.s32 	%r1607, %r1606, %r71;
	mul.wide.s32 	%rd61, %r1607, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1608, %r1606, %r72;
	mul.wide.s32 	%rd63, %r1608, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6828, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6828, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1609, %r65, %r79;
	mul.wide.s32 	%rd65, %r1609, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r6828;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1612, %r75, %r6826;
	mul.lo.s32 	%r1613, %r1612, %r40;
	add.s32 	%r1614, %r1613, %r71;
	mul.wide.s32 	%rd67, %r1614, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1615, %r1613, %r72;
	mul.wide.s32 	%rd69, %r1615, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6829, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6829, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1616, %r70, %r1521;
	add.s32 	%r1617, %r1616, %r77;
	shl.b32 	%r90, %r1617, 5;
	add.s32 	%r1618, %r90, %r28;
	shl.b32 	%r1619, %r1618, 2;
	add.s32 	%r1620, %r61, %r1619;
	add.s32 	%r1621, %r1620, 2;
	mul.wide.s32 	%rd71, %r1621, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r6829;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1628, %r73, %r6826;
	mul.lo.s32 	%r1629, %r1628, %r40;
	add.s32 	%r1630, %r1629, %r91;
	mul.wide.s32 	%rd73, %r1630, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1631, %r1629, %r92;
	mul.wide.s32 	%rd75, %r1631, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6830, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6830, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1632, %r83, %r68;
	shl.b32 	%r1633, %r1632, 2;
	add.s32 	%r1634, %r67, %r1633;
	mul.wide.s32 	%rd77, %r1634, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r6830;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1637, %r74, %r6826;
	mul.lo.s32 	%r1638, %r1637, %r40;
	add.s32 	%r1639, %r1638, %r91;
	mul.wide.s32 	%rd79, %r1639, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1640, %r1638, %r92;
	mul.wide.s32 	%rd81, %r1640, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6831, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6831, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1641, %r66, %r79;
	mul.wide.s32 	%rd83, %r1641, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r6831;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1644, %r75, %r6826;
	mul.lo.s32 	%r1645, %r1644, %r40;
	add.s32 	%r1646, %r1645, %r91;
	mul.wide.s32 	%rd85, %r1646, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1647, %r1645, %r92;
	mul.wide.s32 	%rd87, %r1647, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6832, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6832, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1648, %r90, %r68;
	shl.b32 	%r1649, %r1648, 2;
	add.s32 	%r1650, %r67, %r1649;
	add.s32 	%r1651, %r1650, 2;
	mul.wide.s32 	%rd89, %r1651, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r6832;
	add.s32 	%r6826, %r6826, %r1541;
	setp.lt.s32 	%p28, %r6826, %r1522;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6825, %r6825, %r1536;
	setp.lt.s32 	%p29, %r6825, %r1521;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6833, %r6866;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1522;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r6834, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1653, %r6834, 31;
	add.s32 	%r1654, %r6834, %r1653;
	shr.s32 	%r1655, %r1654, 1;
	mad.lo.s32 	%r1656, %r1655, %r1521, %r6833;
	shl.b32 	%r108, %r1656, 5;
	add.s32 	%r109, %r6834, -2;
	mul.lo.s32 	%r110, %r109, %r1521;
	add.s32 	%r1657, %r1522, %r109;
	mul.lo.s32 	%r111, %r1657, %r1521;
	add.s32 	%r1658, %r1657, %r1522;
	mul.lo.s32 	%r112, %r1658, %r1521;
	add.s32 	%r113, %r110, %r1521;
	add.s32 	%r114, %r6834, -1;
	add.s32 	%r1659, %r1522, %r114;
	mul.lo.s32 	%r115, %r1659, %r1521;
	add.s32 	%r1660, %r1659, %r1522;
	mul.lo.s32 	%r116, %r1660, %r1521;
	add.s32 	%r1661, %r1522, %r6834;
	mul.lo.s32 	%r117, %r1661, %r1521;
	add.s32 	%r1662, %r1661, %r1522;
	mul.lo.s32 	%r118, %r1662, %r1521;
	mul.lo.s32 	%r119, %r6834, %r1521;
	add.s32 	%r120, %r119, %r1521;
	add.s32 	%r121, %r6834, 1;
	add.s32 	%r1663, %r1522, %r121;
	mul.lo.s32 	%r122, %r1663, %r1521;
	add.s32 	%r1664, %r1663, %r1522;
	mul.lo.s32 	%r123, %r1664, %r1521;
	add.s32 	%r124, %r120, %r1521;
	add.s32 	%r125, %r6834, 2;
	add.s32 	%r1665, %r1522, %r125;
	mul.lo.s32 	%r126, %r1665, %r1521;
	add.s32 	%r1666, %r1665, %r1522;
	mul.lo.s32 	%r127, %r1666, %r1521;
	mov.u32 	%r6837, 0;
	mov.u64 	%rd551, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1667, [%rd551];
	cvt.rn.f64.s32 	%fd1, %r1667;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1667, %r6833;
	setp.lt.s32 	%p33, %r129, %r1521;
	or.b32  	%r1668, %r109, %r129;
	setp.gt.s32 	%p34, %r1668, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1522;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1671, %r110, %r129;
	mul.wide.s32 	%rd94, %r1671, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6836, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6836, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1672, %r6837, %r108;
	mul.wide.s32 	%rd96, %r1672, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r6836;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1675, %r111, %r129;
	mul.wide.s32 	%rd98, %r1675, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6838, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6838, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1676, %r6837, %r108;
	mul.wide.s32 	%rd100, %r1676, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r6838;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1679, %r112, %r129;
	mul.wide.s32 	%rd102, %r1679, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6840, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6840, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1680, %r6837, %r108;
	mul.wide.s32 	%rd104, %r1680, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r6840;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_57:
	or.b32  	%r1681, %r114, %r129;
	setp.gt.s32 	%p40, %r1681, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r6834, %r1522;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1684, %r113, %r129;
	mul.wide.s32 	%rd106, %r1684, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6842, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6842, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1685, %r6837, %r108;
	mul.wide.s32 	%rd108, %r1685, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r6842;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1688, %r115, %r129;
	mul.wide.s32 	%rd110, %r1688, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6844, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6844, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1689, %r6837, %r108;
	mul.wide.s32 	%rd112, %r1689, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r6844;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1692, %r116, %r129;
	mul.wide.s32 	%rd114, %r1692, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6846, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6846, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1693, %r6837, %r108;
	mul.wide.s32 	%rd116, %r1693, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r6846;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_72:
	or.b32  	%r1694, %r6834, %r129;
	setp.gt.s32 	%p47, %r1694, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r6834, %r1522;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1697, %r119, %r129;
	mul.wide.s32 	%rd118, %r1697, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6848, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6848, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1698, %r6837, %r108;
	mul.wide.s32 	%rd120, %r1698, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r6848;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1701, %r117, %r129;
	mul.wide.s32 	%rd122, %r1701, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6850, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6850, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1702, %r6837, %r108;
	mul.wide.s32 	%rd124, %r1702, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r6850;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1705, %r118, %r129;
	mul.wide.s32 	%rd126, %r1705, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6852, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6852, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1706, %r6837, %r108;
	mul.wide.s32 	%rd128, %r1706, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r6852;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_87:
	or.b32  	%r1707, %r121, %r129;
	setp.gt.s32 	%p54, %r1707, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1522;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1710, %r120, %r129;
	mul.wide.s32 	%rd130, %r1710, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6854, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6854, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1711, %r6837, %r108;
	mul.wide.s32 	%rd132, %r1711, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r6854;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1714, %r122, %r129;
	mul.wide.s32 	%rd134, %r1714, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6856, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6856, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1715, %r6837, %r108;
	mul.wide.s32 	%rd136, %r1715, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r6856;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1718, %r123, %r129;
	mul.wide.s32 	%rd138, %r1718, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6858, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6858, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1719, %r6837, %r108;
	mul.wide.s32 	%rd140, %r1719, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r6858;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_102:
	or.b32  	%r1720, %r125, %r129;
	setp.gt.s32 	%p61, %r1720, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1522;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1723, %r124, %r129;
	mul.wide.s32 	%rd142, %r1723, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6860, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6860, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1724, %r6837, %r108;
	mul.wide.s32 	%rd144, %r1724, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r6860;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1727, %r126, %r129;
	mul.wide.s32 	%rd146, %r1727, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6862, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6862, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1728, %r6837, %r108;
	mul.wide.s32 	%rd148, %r1728, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r6862;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1731, %r127, %r129;
	mul.wide.s32 	%rd150, %r1731, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6864, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6864, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1732, %r6837, %r108;
	mul.wide.s32 	%rd152, %r1732, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r6864;
	add.s32 	%r6837, %r6837, 1;

$L__BB0_117:
	add.s64 	%rd551, %rd551, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p68, %rd551, %rd155;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6834, %r6834, %r30;
	setp.lt.s32 	%p69, %r6834, %r1522;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6833, %r6833, %r1536;
	setp.lt.s32 	%p70, %r6833, %r1521;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1525, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1778, %r1526, 31;
	add.s32 	%r1779, %r1526, %r1778;
	shr.u32 	%r1780, %r1779, 1;
	and.b32  	%r233, %r1780, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1522;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r6872, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1782, %r6872, 31;
	add.s32 	%r1783, %r6872, %r1782;
	shr.s32 	%r1784, %r1783, 1;
	mad.lo.s32 	%r1785, %r1784, %r1521, %r6866;
	shl.b32 	%r237, %r1785, 5;
	add.s32 	%r238, %r6872, -2;
	mul.lo.s32 	%r239, %r238, %r1521;
	add.s32 	%r1786, %r1522, %r238;
	mul.lo.s32 	%r240, %r1786, %r1521;
	add.s32 	%r241, %r239, %r1521;
	add.s32 	%r242, %r6872, -1;
	add.s32 	%r1787, %r1522, %r242;
	mul.lo.s32 	%r243, %r1787, %r1521;
	add.s32 	%r1788, %r1522, %r6872;
	mul.lo.s32 	%r244, %r1788, %r1521;
	mul.lo.s32 	%r245, %r6872, %r1521;
	add.s32 	%r246, %r245, %r1521;
	add.s32 	%r247, %r6872, 1;
	add.s32 	%r1789, %r1522, %r247;
	mul.lo.s32 	%r248, %r1789, %r1521;
	add.s32 	%r249, %r246, %r1521;
	add.s32 	%r250, %r6872, 2;
	add.s32 	%r1790, %r1522, %r250;
	mul.lo.s32 	%r251, %r1790, %r1521;
	mov.u32 	%r6876, 0;
	mov.u64 	%rd552, 24;
	mov.u64 	%rd553, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1791, [%rd553];
	cvt.rn.f64.s32 	%fd2, %r1791;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r1791, %r6866;
	setp.lt.s32 	%p83, %r253, %r1521;
	or.b32  	%r1792, %r238, %r253;
	setp.gt.s32 	%p84, %r1792, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1522;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r1794, %r239, %r253;
	shl.b32 	%r1795, %r1794, 1;
	mul.wide.s32 	%rd178, %r1795, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6874, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6874, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6874, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r6876, %r237;
	mul.wide.s32 	%rd180, %r258, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r6874;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r1799, %r240, %r253;
	shl.b32 	%r1800, %r1799, 1;
	mul.wide.s32 	%rd182, %r1800, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6875, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6875, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6875, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1803, %r258, 1;
	mul.wide.s32 	%rd184, %r1803, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r6875;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r1805, %r239, %r253;
	shl.b32 	%r1806, %r1805, 1;
	or.b32  	%r1807, %r1806, 1;
	mul.wide.s32 	%rd186, %r1807, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6877, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6877, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6877, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r6876, %r237;
	mul.wide.s32 	%rd188, %r269, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r6877;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r1811, %r240, %r253;
	shl.b32 	%r1812, %r1811, 1;
	or.b32  	%r1813, %r1812, 1;
	mul.wide.s32 	%rd190, %r1813, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6878, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6878, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6878, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1816, %r269, 1;
	mul.wide.s32 	%rd192, %r1816, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r6878;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_168:
	or.b32  	%r1817, %r242, %r253;
	setp.gt.s32 	%p93, %r1817, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r6872, %r1522;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r1819, %r241, %r253;
	shl.b32 	%r1820, %r1819, 1;
	mul.wide.s32 	%rd194, %r1820, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6880, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6880, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6880, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r6876, %r237;
	mul.wide.s32 	%rd196, %r280, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r6880;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r1824, %r243, %r253;
	shl.b32 	%r1825, %r1824, 1;
	mul.wide.s32 	%rd198, %r1825, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6881, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6881, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6881, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1828, %r280, 1;
	mul.wide.s32 	%rd200, %r1828, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r6881;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r1830, %r241, %r253;
	shl.b32 	%r1831, %r1830, 1;
	or.b32  	%r1832, %r1831, 1;
	mul.wide.s32 	%rd202, %r1832, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6883, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6883, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6883, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r6876, %r237;
	mul.wide.s32 	%rd204, %r291, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r6883;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r1836, %r243, %r253;
	shl.b32 	%r1837, %r1836, 1;
	or.b32  	%r1838, %r1837, 1;
	mul.wide.s32 	%rd206, %r1838, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6884, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6884, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6884, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1841, %r291, 1;
	mul.wide.s32 	%rd208, %r1841, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r6884;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_192:
	or.b32  	%r1842, %r6872, %r253;
	setp.gt.s32 	%p103, %r1842, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r6872, %r1522;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r1844, %r245, %r253;
	shl.b32 	%r1845, %r1844, 1;
	mul.wide.s32 	%rd210, %r1845, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6886, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6886, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6886, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r6876, %r237;
	mul.wide.s32 	%rd212, %r302, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r6886;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r1849, %r244, %r253;
	shl.b32 	%r1850, %r1849, 1;
	mul.wide.s32 	%rd214, %r1850, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6887, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6887, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6887, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1853, %r302, 1;
	mul.wide.s32 	%rd216, %r1853, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r6887;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r1855, %r245, %r253;
	shl.b32 	%r1856, %r1855, 1;
	or.b32  	%r1857, %r1856, 1;
	mul.wide.s32 	%rd218, %r1857, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6889, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6889, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6889, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r6876, %r237;
	mul.wide.s32 	%rd220, %r313, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r6889;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r1861, %r244, %r253;
	shl.b32 	%r1862, %r1861, 1;
	or.b32  	%r1863, %r1862, 1;
	mul.wide.s32 	%rd222, %r1863, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6890, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6890, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6890, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1866, %r313, 1;
	mul.wide.s32 	%rd224, %r1866, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r6890;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_216:
	or.b32  	%r1867, %r247, %r253;
	setp.gt.s32 	%p113, %r1867, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1522;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r1869, %r246, %r253;
	shl.b32 	%r1870, %r1869, 1;
	mul.wide.s32 	%rd226, %r1870, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6892, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6892, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6892, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r6876, %r237;
	mul.wide.s32 	%rd228, %r324, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r6892;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r1874, %r248, %r253;
	shl.b32 	%r1875, %r1874, 1;
	mul.wide.s32 	%rd230, %r1875, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6893, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6893, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6893, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1878, %r324, 1;
	mul.wide.s32 	%rd232, %r1878, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r6893;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r1880, %r246, %r253;
	shl.b32 	%r1881, %r1880, 1;
	or.b32  	%r1882, %r1881, 1;
	mul.wide.s32 	%rd234, %r1882, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6895, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6895, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6895, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r6876, %r237;
	mul.wide.s32 	%rd236, %r335, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r6895;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r1886, %r248, %r253;
	shl.b32 	%r1887, %r1886, 1;
	or.b32  	%r1888, %r1887, 1;
	mul.wide.s32 	%rd238, %r1888, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6896, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6896, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6896, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1891, %r335, 1;
	mul.wide.s32 	%rd240, %r1891, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r6896;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_240:
	or.b32  	%r1892, %r250, %r253;
	setp.gt.s32 	%p123, %r1892, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1522;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r1894, %r249, %r253;
	shl.b32 	%r1895, %r1894, 1;
	mul.wide.s32 	%rd242, %r1895, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6898, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6898, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6898, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r6876, %r237;
	mul.wide.s32 	%rd244, %r346, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r6898;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r1899, %r251, %r253;
	shl.b32 	%r1900, %r1899, 1;
	mul.wide.s32 	%rd246, %r1900, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6899, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6899, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6899, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1903, %r346, 1;
	mul.wide.s32 	%rd248, %r1903, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r6899;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r1905, %r249, %r253;
	shl.b32 	%r1906, %r1905, 1;
	or.b32  	%r1907, %r1906, 1;
	mul.wide.s32 	%rd250, %r1907, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6901, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6901, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6901, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r6876, %r237;
	mul.wide.s32 	%rd252, %r357, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r6901;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r1911, %r251, %r253;
	shl.b32 	%r1912, %r1911, 1;
	or.b32  	%r1913, %r1912, 1;
	mul.wide.s32 	%rd254, %r1913, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6902, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6902, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6902, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1916, %r357, 1;
	mul.wide.s32 	%rd256, %r1916, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r6902;
	add.s32 	%r6876, %r6876, 2;

$L__BB0_264:
	add.s64 	%rd553, %rd553, 4;
	add.s64 	%rd552, %rd552, -4;
	setp.ne.s64 	%p133, %rd552, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6872, %r6872, %r30;
	setp.lt.s32 	%p134, %r6872, %r1522;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6866, %r6866, %r1536;
	setp.lt.s32 	%p135, %r6866, %r1521;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1733, 31;
	sub.s32 	%r1734, %r1733, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1735, %r28, %r1734, %p73;
	shl.b32 	%r1736, %r1735, 2;
	mov.u32 	%r1737, 2;
	sub.s32 	%r208, %r1736, %r1524;
	sub.s32 	%r1738, %r1737, %r1524;
	add.s32 	%r209, %r1738, %r1736;
	add.s32 	%r210, %r1521, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1763, %r211, %r40;
	add.s32 	%r1764, %r1763, %r40;
	rem.s32 	%r223, %r1764, %r40;
	rem.s32 	%r1765, %r212, %r40;
	add.s32 	%r1766, %r1765, %r40;
	rem.s32 	%r224, %r1766, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r6866, 1;
	rem.s32 	%r1739, %r208, %r40;
	add.s32 	%r1740, %r1739, %r40;
	rem.s32 	%r215, %r1740, %r40;
	rem.s32 	%r1741, %r209, %r40;
	add.s32 	%r1742, %r1741, %r40;
	rem.s32 	%r216, %r1742, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1745, %r214, %r40;
	add.s32 	%r1746, %r1745, %r215;
	mul.wide.s32 	%rd158, %r1746, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1747, %r1745, %r216;
	mul.wide.s32 	%rd160, %r1747, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6867, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6867, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1748, %r6866, 5;
	add.s32 	%r1749, %r1748, %r28;
	shl.b32 	%r1750, %r1749, 2;
	mul.wide.s32 	%rd162, %r1750, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r6867;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1753, %r214, 1;
	mul.lo.s32 	%r1754, %r1753, %r40;
	add.s32 	%r1755, %r1754, %r215;
	mul.wide.s32 	%rd163, %r1755, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1756, %r1754, %r216;
	mul.wide.s32 	%rd165, %r1756, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6868, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6868, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1757, %r210, %r6866;
	rem.s32 	%r1758, %r1757, %r1521;
	shl.b32 	%r1759, %r1758, 5;
	add.s32 	%r1760, %r1759, %r28;
	shl.b32 	%r1761, %r1760, 2;
	or.b32  	%r1762, %r1761, 2;
	mul.wide.s32 	%rd167, %r1762, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r6868;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1769, %r214, %r40;
	add.s32 	%r1770, %r1769, %r223;
	mul.wide.s32 	%rd168, %r1770, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1771, %r1769, %r224;
	mul.wide.s32 	%rd170, %r1771, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6869, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6869, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6869;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1774, %r214, 1;
	mul.lo.s32 	%r1775, %r1774, %r40;
	add.s32 	%r1776, %r1775, %r223;
	mul.wide.s32 	%rd172, %r1776, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1777, %r1775, %r224;
	mul.wide.s32 	%rd174, %r1777, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6870, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6870, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6870;

$L__BB0_137:
	add.s32 	%r6866, %r6866, %r1536;
	setp.lt.s32 	%p79, %r6866, %r1521;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1918, %r1516, -1;
	mad.lo.s32 	%r1919, %r1517, 576, 128;
	mul.lo.s32 	%r1920, %r1919, %r1918;
	add.s32 	%r1921, %r52, -64;
	add.s32 	%r1922, %r1921, %r52;
	add.s32 	%r1923, %r1517, -1;
	mad.lo.s32 	%r1924, %r1922, %r1923, %r1920;
	mul.lo.s32 	%r1925, %r1918, %r1517;
	mul.lo.s32 	%r1926, %r1925, 320;
	mad.lo.s32 	%r1927, %r1921, %r1923, %r1926;
	add.s32 	%r366, %r1927, %r1924;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7085, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r6906, 0;
	mov.u32 	%r6904, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6904], %r7085;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1930, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6904+4], %r1930;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1931, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6904+8], %r1931;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1932, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6904+12], %r1932;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7085, {low,high};}

	// end inline asm
	add.s32 	%r6904, %r6904, 16;
	add.s32 	%r6906, %r6906, 4;
	setp.lt.s32 	%p137, %r6906, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7086, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1935, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r1936, 31;
	sub.s32 	%r1937, %r1936, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r1938, %r28, %r1937, %p138;
	shl.b32 	%r1939, %r1938, 2;
	sub.s32 	%r377, %r1939, %r1524;
	rem.s32 	%r1940, %r377, %r40;
	add.s32 	%r1941, %r1940, %r40;
	rem.s32 	%r378, %r1941, %r40;
	add.s32 	%r1942, %r377, 2;
	rem.s32 	%r1943, %r1942, %r40;
	add.s32 	%r1944, %r1943, %r40;
	rem.s32 	%r379, %r1944, %r40;
	mul.lo.s32 	%r1945, %r378, 6;
	mul.lo.s32 	%r1946, %r379, 6;
	mul.wide.s32 	%rd259, %r1945, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r1946, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6908, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6908, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6909, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6909, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6910, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6910, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6911, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6911, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1955, %r377, 1;
	rem.s32 	%r1956, %r1955, %r40;
	add.s32 	%r1957, %r1956, %r40;
	rem.s32 	%r392, %r1957, %r40;
	add.s32 	%r1958, %r377, 3;
	rem.s32 	%r1959, %r1958, %r40;
	add.s32 	%r1960, %r1959, %r40;
	rem.s32 	%r393, %r1960, %r40;
	mul.lo.s32 	%r1961, %r392, 6;
	mul.lo.s32 	%r1962, %r393, 6;
	mul.wide.s32 	%rd261, %r1961, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r1962, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6912, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6912, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6913, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6913, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6914, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6914, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6915, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6915, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1971, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r1971;
	// begin inline asm
	mov.u32 %r1972, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r1972;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1973, %nctaid.y;
	mov.u32 	%r1974, %nctaid.x;
	mul.lo.s32 	%r1975, %r1974, %r1973;
	mov.u32 	%r1976, %nctaid.z;
	mul.lo.s32 	%r406, %r1975, %r1976;
	neg.s32 	%r1977, %r24;
	add.s32 	%r1978, %r28, %r23;
	setp.ne.s32 	%p148, %r1978, %r1977;
	mov.u32 	%r1979, %ctaid.x;
	add.s32 	%r407, %r1979, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r1982, -2147483647;
	sub.s32 	%r1983, %r1982, %r406;
	selp.b32 	%r1981, %r1983, 1, %p149;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1980,[%rd25],%r1981;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1984, [%rd25];
	xor.b32  	%r1985, %r1984, %r1980;
	setp.gt.s32 	%p150, %r1985, -1;
	@%p150 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1986,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_643;

	shr.s32 	%r2000, %r1526, 31;
	shr.u32 	%r2001, %r2000, 30;
	add.s32 	%r2002, %r1526, %r2001;
	shr.s32 	%r410, %r2002, 2;
	add.s32 	%r2003, %r28, 24;
	mul.hi.s32 	%r2004, %r2003, 1374389535;
	shr.u32 	%r2005, %r2004, 31;
	shr.s32 	%r2006, %r2004, 3;
	add.s32 	%r2007, %r2006, %r2005;
	mul.lo.s32 	%r2008, %r2007, 25;
	sub.s32 	%r2009, %r2003, %r2008;
	add.s32 	%r2010, %r28, 26;
	mul.hi.s32 	%r2011, %r2010, 1374389535;
	shr.u32 	%r2012, %r2011, 31;
	shr.s32 	%r2013, %r2011, 3;
	add.s32 	%r2014, %r2013, %r2012;
	mul.lo.s32 	%r2015, %r2014, 25;
	sub.s32 	%r2016, %r2010, %r2015;
	shr.u32 	%r2017, %r1526, 31;
	add.s32 	%r2018, %r1526, %r2017;
	and.b32  	%r2019, %r2018, -2;
	sub.s32 	%r411, %r1526, %r2019;
	setp.lt.s32 	%p152, %r28, 25;
	selp.b32 	%r412, %r2009, %r28, %p152;
	selp.b32 	%r413, %r2016, %r28, %p152;
	mov.u32 	%r1999, 0;
	// begin inline asm
	{mov.u32 %r2020, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2347, %r2020, 8;
	add.s32 	%r2348, %r2347, -8192;
	or.b32  	%r2024, %r2348, 31;
	mul.wide.s32 	%rd275, %r28, 16;
	mul.wide.s32 	%rd277, %r28, 8;
	mov.u32 	%r6916, %r1999;
	mov.u32 	%r6917, %r1999;
	mov.u32 	%r6918, %r1999;
	mov.u32 	%r6919, %r1999;
	mov.u32 	%r6920, %r1999;
	mov.u32 	%r6921, %r1999;
	mov.u32 	%r6922, %r1999;
	mov.u32 	%r6923, %r1999;
	mov.u32 	%r6924, %r1999;
	mov.u32 	%r6925, %r1999;
	mov.u32 	%r6926, %r1999;
	mov.u32 	%r6927, %r1999;
	mov.u32 	%r7289, %r1935;
	mov.u32 	%r7290, %r1935;
	mov.u32 	%r7287, %r1935;
	mov.u32 	%r7288, %r1935;
	mov.u32 	%r7173, %r1935;
	mov.u32 	%r7174, %r1935;
	mov.u32 	%r7187, %r1935;
	mov.u32 	%r7175, %r1935;
	mov.u32 	%r7189, %r1935;
	mov.u32 	%r7176, %r1935;
	mov.u32 	%r7177, %r1935;
	mov.u32 	%r7178, %r1935;
	mov.u32 	%r7179, %r1935;
	mov.u32 	%r7180, %r1935;
	mov.u32 	%r7181, %r1935;
	mov.u32 	%r7182, %r1935;
	mov.u32 	%r7191, %r1935;
	mov.u32 	%r7192, %r1935;
	mov.u32 	%r7193, %r1935;
	mov.u32 	%r7194, %r1935;
	mov.u32 	%r7195, %r1935;
	mov.u32 	%r7196, %r1935;
	mov.u32 	%r7183, %r1935;
	mov.u32 	%r7184, %r1935;
	mov.u32 	%r7197, %r1935;
	mov.u32 	%r7198, %r1935;
	mov.u32 	%r7185, %r1935;
	mov.u32 	%r7186, %r1935;
	mov.u32 	%r6956, %r1935;
	mov.u32 	%r6957, %r1935;
	mov.u32 	%r6958, %r1935;
	mov.u32 	%r6959, %r1935;
	mov.u32 	%r6960, %r1935;
	mov.u32 	%r6961, %r1935;
	mov.u32 	%r6962, %r1935;
	mov.u32 	%r6963, %r1935;
	mov.u32 	%r6964, %r1935;
	mov.u32 	%r6965, %r1935;
	mov.u32 	%r6966, %r1935;
	mov.u32 	%r6967, %r1935;
	mov.u32 	%r6968, %r1935;
	mov.u32 	%r6969, %r1935;
	mov.u32 	%r6970, %r1935;
	mov.u32 	%r6971, %r1935;
	mov.u32 	%r6972, %r1935;
	mov.u32 	%r6973, %r1935;
	mov.u32 	%r6974, %r1935;
	mov.u32 	%r6975, %r1935;
	mov.u32 	%r6976, %r1935;
	mov.u32 	%r6977, %r1935;
	mov.u32 	%r7213, %r1935;
	mov.u32 	%r7214, %r1935;
	mov.u32 	%r6982, %r1935;
	mov.u32 	%r6983, %r1935;
	mov.u32 	%r6984, %r1935;
	mov.u32 	%r6985, %r1935;
	mov.u32 	%r7215, %r1935;
	mov.u32 	%r7216, %r1935;
	mov.u32 	%r6988, %r1935;
	mov.u32 	%r7217, %r1935;
	mov.u32 	%r6990, %r1935;
	mov.u32 	%r6991, %r1935;
	mov.u32 	%r7218, %r1935;
	mov.u32 	%r6993, %r1935;
	mov.u32 	%r6994, %r1935;
	mov.u32 	%r6995, %r1935;
	mov.u32 	%r7303, %r1935;
	mov.u32 	%r7304, %r1935;
	mov.u32 	%r6998, %r1935;
	mov.u32 	%r6999, %r1935;
	mov.u32 	%r7002, %r1935;
	mov.u32 	%r7003, %r1935;
	mov.u32 	%r7004, %r1935;
	mov.u32 	%r7005, %r1935;
	mov.u32 	%r7006, %r1935;
	mov.u32 	%r7222, %r1935;
	mov.u32 	%r7008, %r1935;
	mov.u32 	%r7009, %r1935;
	mov.u32 	%r7010, %r1935;
	mov.u32 	%r7011, %r1935;
	mov.u32 	%r7012, %r1935;
	mov.u32 	%r7013, %r1935;
	mov.u32 	%r7014, %r1935;
	mov.u32 	%r7224, %r1935;
	mov.u32 	%r7016, %r1935;
	mov.u32 	%r7017, %r1935;
	mov.u32 	%r7018, %r1935;
	mov.u32 	%r7225, %r1935;
	mov.u32 	%r7020, %r1935;
	mov.u32 	%r7021, %r1935;
	mov.u32 	%r7022, %r1935;
	mov.u32 	%r7023, %r1935;
	mov.u32 	%r7024, %r1935;
	mov.u32 	%r7025, %r1935;
	mov.u32 	%r7026, %r1935;
	mov.u32 	%r7226, %r1935;
	mov.u32 	%r7028, %r1935;
	mov.u32 	%r7305, %r1935;
	mov.u32 	%r7030, %r1935;
	mov.u32 	%r7031, %r1935;
	mov.u32 	%r7032, %r1935;
	mov.u32 	%r7033, %r1935;
	mov.u32 	%r7306, %r1935;
	mov.u32 	%r7035, %r1935;
	mov.u32 	%r7036, %r1935;
	mov.u32 	%r7037, %r1935;
	mov.u32 	%r7038, %r1935;
	mov.u32 	%r7039, %r1935;
	mov.u32 	%r7040, %r1935;
	mov.u32 	%r7041, %r1935;
	mov.u32 	%r7042, %r1935;
	mov.u32 	%r7043, %r1935;
	mov.u32 	%r7044, %r1935;
	mov.u32 	%r7045, %r1935;
	mov.u32 	%r7046, %r1935;
	mov.u32 	%r7047, %r1935;
	mov.u32 	%r7048, %r1935;
	mov.u32 	%r7049, %r1935;
	mov.u32 	%r7050, %r1935;
	mov.u32 	%r7051, %r1935;
	mov.u32 	%r7052, %r1935;
	mov.u32 	%r7053, %r1935;
	mov.u32 	%r7054, %r1935;
	mov.u32 	%r7055, %r1935;
	mov.u32 	%r7056, %r1935;
	mov.u32 	%r7057, %r1935;
	mov.u32 	%r7058, %r1935;
	mov.u32 	%r7059, %r1935;
	mov.u32 	%r7060, %r1935;
	mov.u32 	%r7061, %r1935;
	mov.u32 	%r7062, %r1935;
	mov.u32 	%r7063, %r1935;
	mov.u32 	%r7064, %r1935;
	mov.u32 	%r7065, %r1935;
	mov.u32 	%r7066, %r1935;
	mov.u32 	%r7067, %r1935;
	mov.u32 	%r7068, %r1935;
	mov.u32 	%r7069, %r1935;
	mov.u32 	%r7070, %r1935;
	mov.u32 	%r7071, %r1935;
	mov.u32 	%r7072, %r1935;
	mov.u32 	%r7073, %r1935;
	mov.u32 	%r7074, %r1935;
	mov.u32 	%r7075, %r1935;
	mov.u32 	%r7076, %r1935;
	mov.u32 	%r7077, %r1935;
	mov.u32 	%r7078, %r1935;
	mov.u32 	%r7079, %r1935;
	mov.u32 	%r7080, %r1935;
	mov.u32 	%r7081, %r1935;
	mov.u32 	%r7082, %r1935;
	mov.u32 	%r7083, %r1935;
	mov.u32 	%r7084, %r1999;

$L__BB0_302:
	mov.u32 	%r525, %r7226;
	mov.u32 	%r521, %r7023;
	mov.u32 	%r517, %r7225;
	mov.u32 	%r515, %r7017;
	mov.u32 	%r513, %r7224;
	mov.u32 	%r505, %r7222;
	mov.u32 	%r7023, %r7218;
	mov.u32 	%r487, %r7217;
	mov.u32 	%r7017, %r7216;
	mov.u32 	%r484, %r7215;
	mov.u32 	%r479, %r7214;
	mov.u32 	%r478, %r7213;
	sub.s32 	%r6807, %r1521, %r30;
	mov.u32 	%r2035, 1;
	not.b32 	%r2309, %r25;
	mov.u32 	%r2301, -1;
	add.s32 	%r2310, %r1518, %r2309;
	mul.lo.s32 	%r2311, %r2310, %r1520;
	add.s32 	%r2312, %r7084, %r2311;
	not.b32 	%r2314, %r26;
	add.s32 	%r2315, %r1519, %r2314;
	mul.lo.s32 	%r2316, %r2315, %r1520;
	add.s32 	%r2317, %r7084, %r2316;
	add.s32 	%r2318, %r2311, %r2316;
	add.s32 	%r2319, %r2318, %r1521;
	not.b32 	%r2320, %r23;
	add.s32 	%r2321, %r1516, %r2320;
	mad.lo.s32 	%r2322, %r2310, %r1516, %r2321;
	not.b32 	%r2324, %r24;
	add.s32 	%r2325, %r1517, %r2324;
	mad.lo.s32 	%r2326, %r2315, %r1517, %r2325;
	add.s32 	%r2327, %r2322, %r2326;
	shl.b32 	%r2328, %r2327, 1;
	add.s32 	%r2329, %r2319, %r2328;
	add.s32 	%r2330, %r7084, %r2329;
	add.s32 	%r2331, %r7084, %r2318;
	div.s32 	%r2332, %r2330, %r1521;
	neg.s32 	%r2333, %r1521;
	sub.s32 	%r2336, %r30, %r1521;
	sub.s32 	%r2337, %r2322, %r2326;
	shl.b32 	%r2338, %r2337, 1;
	add.s32 	%r2339, %r2338, %r1522;
	mad.lo.s32 	%r2340, %r2332, %r30, %r2339;
	mad.lo.s32 	%r2341, %r2332, %r2336, %r2331;
	div.s32 	%r2342, %r2340, %r1522;
	mul.lo.s32 	%r2343, %r2342, %r1522;
	sub.s32 	%r2346, %r1537, %r1522;
	mov.u32 	%r2119, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2021,%r7086,%r1999,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2027, %r6909, %r2021, %p12;
	// begin inline asm
	{mul.f16x2 %r7170,%r2027,%r7083;
}
	// end inline asm
	selp.b32 	%r2030, %r6913, %r2021, %p12;
	// begin inline asm
	{mul.f16x2 %r7168,%r2030,%r7082;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2033,%r7086,%r2035,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2039, %r6909, %r2033, %p12;
	// begin inline asm
	{mul.f16x2 %r7169,%r2039,%r7081;
}
	// end inline asm
	selp.b32 	%r2042, %r6913, %r2033, %p12;
	// begin inline asm
	{mul.f16x2 %r7167,%r2042,%r7080;
}
	// end inline asm
	mov.u32 	%r2047, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2045,%r7086,%r2047,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2051, %r6909, %r2045, %p12;
	// begin inline asm
	{mul.f16x2 %r7166,%r2051,%r7079;
}
	// end inline asm
	selp.b32 	%r2054, %r6913, %r2045, %p12;
	// begin inline asm
	{mul.f16x2 %r7165,%r2054,%r7078;
}
	// end inline asm
	mov.u32 	%r2059, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2057,%r7086,%r2059,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2063, %r6909, %r2057, %p12;
	// begin inline asm
	{mul.f16x2 %r7164,%r2063,%r7198;
}
	// end inline asm
	selp.b32 	%r2066, %r6913, %r2057, %p12;
	// begin inline asm
	{mul.f16x2 %r7162,%r2066,%r7197;
}
	// end inline asm
	mov.u32 	%r2071, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2069,%r7086,%r2071,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2075, %r6909, %r2069, %p12;
	// begin inline asm
	{mul.f16x2 %r7163,%r2075,%r7077;
}
	// end inline asm
	selp.b32 	%r2078, %r6913, %r2069, %p12;
	// begin inline asm
	{mul.f16x2 %r7161,%r2078,%r7076;
}
	// end inline asm
	mov.u32 	%r2083, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2081,%r7086,%r2083,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2087, %r6909, %r2081, %p12;
	// begin inline asm
	{mul.f16x2 %r7160,%r2087,%r7075;
}
	// end inline asm
	selp.b32 	%r2090, %r6913, %r2081, %p12;
	// begin inline asm
	{mul.f16x2 %r7157,%r2090,%r7074;
}
	// end inline asm
	mov.u32 	%r2095, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2093,%r7086,%r2095,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2099, %r6909, %r2093, %p12;
	// begin inline asm
	{mul.f16x2 %r7159,%r2099,%r7073;
}
	// end inline asm
	selp.b32 	%r2102, %r6913, %r2093, %p12;
	// begin inline asm
	{mul.f16x2 %r7156,%r2102,%r7072;
}
	// end inline asm
	mov.u32 	%r2107, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2105,%r7086,%r2107,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2111, %r6909, %r2105, %p12;
	// begin inline asm
	{mul.f16x2 %r7158,%r2111,%r7071;
}
	// end inline asm
	selp.b32 	%r2114, %r6913, %r2105, %p12;
	// begin inline asm
	{mul.f16x2 %r7155,%r2114,%r7070;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2117,%r7086,%r2119,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2123, %r6909, %r2117, %p12;
	// begin inline asm
	{mul.f16x2 %r7154,%r2123,%r7069;
}
	// end inline asm
	selp.b32 	%r2126, %r6913, %r2117, %p12;
	// begin inline asm
	{mul.f16x2 %r7151,%r2126,%r7068;
}
	// end inline asm
	mov.u32 	%r2131, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2129,%r7086,%r2131,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2135, %r6909, %r2129, %p12;
	// begin inline asm
	{mul.f16x2 %r7153,%r2135,%r7067;
}
	// end inline asm
	selp.b32 	%r2138, %r6913, %r2129, %p12;
	// begin inline asm
	{mul.f16x2 %r7150,%r2138,%r7066;
}
	// end inline asm
	mov.u32 	%r2143, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2141,%r7086,%r2143,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2147, %r6909, %r2141, %p12;
	// begin inline asm
	{mul.f16x2 %r7152,%r2147,%r7065;
}
	// end inline asm
	selp.b32 	%r2150, %r6913, %r2141, %p12;
	// begin inline asm
	{mul.f16x2 %r7149,%r2150,%r7064;
}
	// end inline asm
	mov.u32 	%r2155, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2153,%r7086,%r2155,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2159, %r6909, %r2153, %p12;
	// begin inline asm
	{mul.f16x2 %r7148,%r2159,%r7184;
}
	// end inline asm
	selp.b32 	%r2162, %r6913, %r2153, %p12;
	// begin inline asm
	{mul.f16x2 %r7147,%r2162,%r7183;
}
	// end inline asm
	mov.u32 	%r2167, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2165,%r7086,%r2167,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2171, %r6909, %r2165, %p12;
	// begin inline asm
	{mul.f16x2 %r7146,%r2171,%r7196;
}
	// end inline asm
	selp.b32 	%r2174, %r6913, %r2165, %p12;
	// begin inline asm
	{mul.f16x2 %r7144,%r2174,%r7194;
}
	// end inline asm
	mov.u32 	%r2179, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2177,%r7086,%r2179,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2183, %r6909, %r2177, %p12;
	// begin inline asm
	{mul.f16x2 %r7145,%r2183,%r7195;
}
	// end inline asm
	selp.b32 	%r2186, %r6913, %r2177, %p12;
	// begin inline asm
	{mul.f16x2 %r7143,%r2186,%r7193;
}
	// end inline asm
	mov.u32 	%r2191, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2189,%r7086,%r2191,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2195, %r6909, %r2189, %p12;
	// begin inline asm
	{mul.f16x2 %r7142,%r2195,%r7192;
}
	// end inline asm
	selp.b32 	%r2198, %r6913, %r2189, %p12;
	// begin inline asm
	{mul.f16x2 %r7139,%r2198,%r7191;
}
	// end inline asm
	mov.u32 	%r2203, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2201,%r7086,%r2203,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2207, %r6909, %r2201, %p12;
	// begin inline asm
	{mul.f16x2 %r7141,%r2207,%r7063;
}
	// end inline asm
	selp.b32 	%r2210, %r6913, %r2201, %p12;
	// begin inline asm
	{mul.f16x2 %r7138,%r2210,%r7062;
}
	// end inline asm
	mov.u32 	%r2215, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2213,%r7086,%r2215,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2219, %r6909, %r2213, %p12;
	// begin inline asm
	{mul.f16x2 %r7140,%r2219,%r7061;
}
	// end inline asm
	selp.b32 	%r2222, %r6913, %r2213, %p12;
	// begin inline asm
	{mul.f16x2 %r7137,%r2222,%r7060;
}
	// end inline asm
	mov.u32 	%r2227, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2225,%r7086,%r2227,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2231, %r6909, %r2225, %p12;
	// begin inline asm
	{mul.f16x2 %r7136,%r2231,%r7182;
}
	// end inline asm
	selp.b32 	%r2234, %r6913, %r2225, %p12;
	// begin inline asm
	{mul.f16x2 %r7133,%r2234,%r7180;
}
	// end inline asm
	mov.u32 	%r2239, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2237,%r7086,%r2239,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2243, %r6909, %r2237, %p12;
	// begin inline asm
	{mul.f16x2 %r7135,%r2243,%r7181;
}
	// end inline asm
	selp.b32 	%r2246, %r6913, %r2237, %p12;
	// begin inline asm
	{mul.f16x2 %r7132,%r2246,%r7179;
}
	// end inline asm
	mov.u32 	%r2251, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2249,%r7086,%r2251,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2255, %r6909, %r2249, %p12;
	// begin inline asm
	{mul.f16x2 %r7134,%r2255,%r7059;
}
	// end inline asm
	selp.b32 	%r2258, %r6913, %r2249, %p12;
	// begin inline asm
	{mul.f16x2 %r7131,%r2258,%r7058;
}
	// end inline asm
	mov.u32 	%r2263, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2261,%r7086,%r2263,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2267, %r6909, %r2261, %p12;
	// begin inline asm
	{mul.f16x2 %r7130,%r2267,%r7178;
}
	// end inline asm
	selp.b32 	%r2270, %r6913, %r2261, %p12;
	// begin inline asm
	{mul.f16x2 %r7129,%r2270,%r7177;
}
	// end inline asm
	mov.u32 	%r2275, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2273,%r7086,%r2275,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2279, %r6909, %r2273, %p12;
	// begin inline asm
	{mul.f16x2 %r7128,%r2279,%r7176;
}
	// end inline asm
	selp.b32 	%r2282, %r6913, %r2273, %p12;
	// begin inline asm
	{mul.f16x2 %r7126,%r2282,%r7175;
}
	// end inline asm
	mov.u32 	%r2287, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2285,%r7086,%r2287,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2291, %r6909, %r2285, %p12;
	// begin inline asm
	{mul.f16x2 %r7127,%r2291,%r7189;
}
	// end inline asm
	selp.b32 	%r2294, %r6913, %r2285, %p12;
	// begin inline asm
	{mul.f16x2 %r7125,%r2294,%r7187;
}
	// end inline asm
	mov.u32 	%r2299, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2297,%r7086,%r2299,%r2024,%r2301;
}
	// end inline asm
	selp.b32 	%r2303, %r6909, %r2297, %p12;
	// begin inline asm
	{mul.f16x2 %r7124,%r2303,%r7174;
}
	// end inline asm
	selp.b32 	%r2306, %r6913, %r2297, %p12;
	// begin inline asm
	{mul.f16x2 %r7123,%r2306,%r7173;
}
	// end inline asm
	rem.s32 	%r633, %r2312, %r51;
	rem.s32 	%r634, %r2317, %r6807;
	mad.lo.s32 	%r635, %r2332, %r2333, %r2330;
	sub.s32 	%r636, %r2340, %r2343;
	mad.lo.s32 	%r637, %r2342, %r2346, %r2341;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2396, %r637, 1;
	mul.wide.s32 	%rd270, %r2396, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2599, %r1532, 1;
	setp.lt.s32 	%p160, %r637, %r2599;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r637, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7089, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7090, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2399, %r1532, 1;
	setp.lt.s32 	%p155, %r637, %r2399;
	setp.gt.s32 	%p156, %r637, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7087, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7088, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7089, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7090, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2607, 0;
	mov.u32 	%r2618, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2605,%r7085,%r2607,%r2024,%r2618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2610,%r7089,%r2605;
}
	// end inline asm
	mov.u32 	%r2616, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2614,%r7085,%r2616,%r2024,%r2618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2619,%r7090,%r2614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r2610,%r2619;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7091, %r7092;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7091, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r7091;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7092, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7168,%r7168,%r7092;
}
	// end inline asm
	mov.u32 	%r2640, 2;
	mov.u32 	%r2651, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2638,%r7085,%r2640,%r2024,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2643,%r7089,%r2638;
}
	// end inline asm
	mov.u32 	%r2649, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2647,%r7085,%r2649,%r2024,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2652,%r7090,%r2647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7094,%r2643,%r2652;
}
	// end inline asm
	mov.u32 	%r7093, %r7094;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7093, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7169,%r7169,%r7093;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7094, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7167,%r7167,%r7094;
}
	// end inline asm
	mov.u32 	%r2673, 4;
	mov.u32 	%r2684, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2671,%r7085,%r2673,%r2024,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r7089,%r2671;
}
	// end inline asm
	mov.u32 	%r2682, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2680,%r7085,%r2682,%r2024,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2685,%r7090,%r2680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r2676,%r2685;
}
	// end inline asm
	mov.u32 	%r7095, %r7096;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7095, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r7095;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7096, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r7096;
}
	// end inline asm
	mov.u32 	%r2706, 6;
	mov.u32 	%r2717, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2704,%r7085,%r2706,%r2024,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2709,%r7089,%r2704;
}
	// end inline asm
	mov.u32 	%r2715, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2713,%r7085,%r2715,%r2024,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r7090,%r2713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r2709,%r2718;
}
	// end inline asm
	mov.u32 	%r7097, %r7098;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7097, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7164,%r7164,%r7097;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7098, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r7098;
}
	// end inline asm
	mov.u32 	%r2739, 8;
	mov.u32 	%r2750, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2737,%r7085,%r2739,%r2024,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2742,%r7089,%r2737;
}
	// end inline asm
	mov.u32 	%r2748, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2746,%r7085,%r2748,%r2024,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2751,%r7090,%r2746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7100,%r2742,%r2751;
}
	// end inline asm
	mov.u32 	%r7099, %r7100;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7099, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7163,%r7163,%r7099;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7100, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7161,%r7161,%r7100;
}
	// end inline asm
	mov.u32 	%r2772, 10;
	mov.u32 	%r2783, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2770,%r7085,%r2772,%r2024,%r2783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2775,%r7089,%r2770;
}
	// end inline asm
	mov.u32 	%r2781, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2779,%r7085,%r2781,%r2024,%r2783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2784,%r7090,%r2779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r2775,%r2784;
}
	// end inline asm
	mov.u32 	%r7101, %r7102;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7101, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7160,%r7160,%r7101;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7102, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7157,%r7157,%r7102;
}
	// end inline asm
	mov.u32 	%r2805, 12;
	mov.u32 	%r2816, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2803,%r7085,%r2805,%r2024,%r2816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2808,%r7089,%r2803;
}
	// end inline asm
	mov.u32 	%r2814, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2812,%r7085,%r2814,%r2024,%r2816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2817,%r7090,%r2812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7104,%r2808,%r2817;
}
	// end inline asm
	mov.u32 	%r7103, %r7104;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7103, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7159,%r7159,%r7103;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7104, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7156,%r7156,%r7104;
}
	// end inline asm
	mov.u32 	%r2838, 14;
	mov.u32 	%r2849, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2836,%r7085,%r2838,%r2024,%r2849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2841,%r7089,%r2836;
}
	// end inline asm
	mov.u32 	%r2847, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2845,%r7085,%r2847,%r2024,%r2849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2850,%r7090,%r2845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r2841,%r2850;
}
	// end inline asm
	mov.u32 	%r7105, %r7106;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7105, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7154,%r7154,%r7105;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7106, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7151,%r7151,%r7106;
}
	// end inline asm
	mov.u32 	%r2871, 16;
	mov.u32 	%r2882, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2869,%r7085,%r2871,%r2024,%r2882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2874,%r7089,%r2869;
}
	// end inline asm
	mov.u32 	%r2880, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2878,%r7085,%r2880,%r2024,%r2882;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2883,%r7090,%r2878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r2874,%r2883;
}
	// end inline asm
	mov.u32 	%r7107, %r7108;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7107, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7153,%r7153,%r7107;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7108, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7150,%r7150,%r7108;
}
	// end inline asm
	mov.u32 	%r2904, 18;
	mov.u32 	%r2915, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2902,%r7085,%r2904,%r2024,%r2915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2907,%r7089,%r2902;
}
	// end inline asm
	mov.u32 	%r2913, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2911,%r7085,%r2913,%r2024,%r2915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2916,%r7090,%r2911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7110,%r2907,%r2916;
}
	// end inline asm
	mov.u32 	%r7109, %r7110;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7109, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7148,%r7148,%r7109;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7110, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7147,%r7147,%r7110;
}
	// end inline asm
	mov.u32 	%r2937, 20;
	mov.u32 	%r2948, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2935,%r7085,%r2937,%r2024,%r2948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2940,%r7089,%r2935;
}
	// end inline asm
	mov.u32 	%r2946, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2944,%r7085,%r2946,%r2024,%r2948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2949,%r7090,%r2944;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7112,%r2940,%r2949;
}
	// end inline asm
	mov.u32 	%r7111, %r7112;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7111, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7146,%r7146,%r7111;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7112, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7144,%r7144,%r7112;
}
	// end inline asm
	mov.u32 	%r2970, 22;
	mov.u32 	%r2981, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2968,%r7085,%r2970,%r2024,%r2981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2973,%r7089,%r2968;
}
	// end inline asm
	mov.u32 	%r2979, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2977,%r7085,%r2979,%r2024,%r2981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2982,%r7090,%r2977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7114,%r2973,%r2982;
}
	// end inline asm
	mov.u32 	%r7113, %r7114;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7113, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7142,%r7142,%r7113;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7114, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7139,%r7139,%r7114;
}
	// end inline asm
	mov.u32 	%r3003, 24;
	mov.u32 	%r3014, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3001,%r7085,%r3003,%r2024,%r3014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3006,%r7089,%r3001;
}
	// end inline asm
	mov.u32 	%r3012, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3010,%r7085,%r3012,%r2024,%r3014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3015,%r7090,%r3010;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7116,%r3006,%r3015;
}
	// end inline asm
	mov.u32 	%r7115, %r7116;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7115, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7141,%r7141,%r7115;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7116, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7138,%r7138,%r7116;
}
	// end inline asm
	mov.u32 	%r3036, 26;
	mov.u32 	%r3047, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3034,%r7085,%r3036,%r2024,%r3047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3039,%r7089,%r3034;
}
	// end inline asm
	mov.u32 	%r3045, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3043,%r7085,%r3045,%r2024,%r3047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3048,%r7090,%r3043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7118,%r3039,%r3048;
}
	// end inline asm
	mov.u32 	%r7117, %r7118;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7117, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7136,%r7136,%r7117;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7118, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7133,%r7133,%r7118;
}
	// end inline asm
	mov.u32 	%r3069, 28;
	mov.u32 	%r3080, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3067,%r7085,%r3069,%r2024,%r3080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3072,%r7089,%r3067;
}
	// end inline asm
	mov.u32 	%r3078, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3076,%r7085,%r3078,%r2024,%r3080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3081,%r7090,%r3076;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7120,%r3072,%r3081;
}
	// end inline asm
	mov.u32 	%r7119, %r7120;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7119, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7135,%r7135,%r7119;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7120, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7132,%r7132,%r7120;
}
	// end inline asm
	mov.u32 	%r3111, 31;
	mov.u32 	%r3102, 30;
	mov.u32 	%r3113, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3100,%r7085,%r3102,%r2024,%r3113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3105,%r7089,%r3100;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3109,%r7085,%r3111,%r2024,%r3113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3114,%r7090,%r3109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7122,%r3105,%r3114;
}
	// end inline asm
	mov.u32 	%r7121, %r7122;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7121, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7128,%r7128,%r7121;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7122, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7126,%r7126,%r7122;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7087, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7088, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r636, %r1526;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2501,%r7087,%r6919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r2501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2507,%r7087,%r6917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r7158,%r2507;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2513,%r7087,%r6923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r7160,%r2513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2519,%r7087,%r6921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7140,%r7140,%r2519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2525,%r7087,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7142,%r7142,%r2525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2531,%r7087,%r6925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7127,%r7127,%r2531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2537,%r7088,%r6923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7164,%r7164,%r2537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2543,%r7088,%r6921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r7145,%r2543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2549,%r7087,%r6918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7168,%r7168,%r2549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2555,%r7087,%r6916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7155,%r7155,%r2555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2561,%r7087,%r6922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7157,%r7157,%r2561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2567,%r7087,%r6920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7137,%r7137,%r2567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2573,%r7087,%r6926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7139,%r7139,%r2573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2579,%r7087,%r6924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7125,%r7125,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2585,%r7088,%r6922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2591,%r7088,%r6920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7143,%r7143,%r2591;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2404, %r1526, -2;
	setp.ne.s32 	%p159, %r636, %r2404;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2405,%r7087,%r6923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r7148,%r2405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2411,%r7087,%r6921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7130,%r7130,%r2411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2417,%r7088,%r6919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r2417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2423,%r7088,%r6917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r7152,%r2423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2429,%r7088,%r6923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r7154,%r2429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2435,%r7088,%r6921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7134,%r7134,%r2435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2441,%r7088,%r6927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7136,%r7136,%r2441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2447,%r7088,%r6925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7124,%r7124,%r2447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2453,%r7087,%r6922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7147,%r7147,%r2453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2459,%r7087,%r6920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r7129,%r2459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2465,%r7088,%r6918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r2465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2471,%r7088,%r6916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7149,%r7149,%r2471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2477,%r7088,%r6922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7151,%r7151,%r2477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2483,%r7088,%r6920;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7131,%r7131,%r2483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2489,%r7088,%r6926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7133,%r7133,%r2489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2495,%r7088,%r6924;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7123,%r7123,%r2495;
}
	// end inline asm

$L__BB0_378:
	ld.param.u64 	%rd272, [%rd1+80];
	cvta.to.global.u64 	%rd27, %rd272;
	setp.ne.s32 	%p197, %r23, 0;
	@%p197 bra 	$L__BB0_383;

	setp.eq.s32 	%p198, %r24, 0;
	mad.lo.s32 	%r3134, %r633, %r1519, %r26;
	mul.lo.s32 	%r3135, %r1517, %r3134;
	mul.lo.s32 	%r3136, %r3135, 768;
	mad.lo.s32 	%r3137, %r24, 384, %r3136;
	add.s32 	%r3138, %r3137, -64;
	mul.wide.s32 	%rd273, %r3138, 4;
	add.s64 	%rd274, %rd27, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7182, %r7180, %r7174, %r7173}, [%rd276+256];
	ld.global.v4.u32 	{%r7184, %r7183, %r7178, %r7177}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p198 bra 	$L__BB0_381;

	ld.global.v2.u32 	{%r7176, %r7175}, [%rd28];

$L__BB0_381:
	setp.ne.s32 	%p199, %r24, %r1923;
	ld.global.v2.u32 	{%r7181, %r7179}, [%rd28+768];
	@%p199 bra 	$L__BB0_383;

	ld.global.v2.u32 	{%r7186, %r7185}, [%rd28+1536];

$L__BB0_383:
	setp.ne.s32 	%p200, %r24, 0;
	@%p200 bra 	$L__BB0_385;

	not.b32 	%r6809, %r23;
	add.s32 	%r6808, %r1516, %r6809;
	mad.lo.s32 	%r3157, %r634, %r1518, %r25;
	mul.lo.s32 	%r3161, %r3157, %r1573;
	mad.lo.s32 	%r3164, %r6808, 384, %r3161;
	add.s32 	%r3165, %r3164, -64;
	mad.lo.s32 	%r3168, %r1575, %r51, %r3165;
	mul.wide.s32 	%rd278, %r3168, 4;
	add.s64 	%rd279, %rd27, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7198, %r7197, %r7195, %r7193}, [%rd281+256];
	ld.global.v4.u32 	{%r7192, %r7191, %r7189, %r7187}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7196, %r7194}, [%rd283+768];
	ld.global.v2.u32 	{%r7176, %r7175}, [%rd283+1536];

$L__BB0_385:
	ld.param.u64 	%rd285, [%rd1+88];
	cvta.to.global.u64 	%rd29, %rd285;
	add.s32 	%r3181, %r1521, -1;
	setp.lt.s32 	%p201, %r635, %r3181;
	setp.gt.s32 	%p202, %r635, 1;
	and.pred  	%p203, %p202, %p201;
	setp.gt.s32 	%p204, %r636, 1;
	and.pred  	%p205, %p203, %p204;
	add.s32 	%r3182, %r1522, -2;
	setp.lt.s32 	%p206, %r636, %r3182;
	and.pred  	%p11, %p206, %p205;
	not.pred 	%p207, %p11;
	mov.u32 	%r7213, %r1935;
	mov.u32 	%r7214, %r1935;
	mov.u32 	%r7215, %r1935;
	mov.u32 	%r7216, %r1935;
	mov.u32 	%r7217, %r1935;
	mov.u32 	%r7218, %r1935;
	mov.u32 	%r7219, %r1935;
	mov.u32 	%r7220, %r1935;
	mov.u32 	%r7221, %r1935;
	mov.u32 	%r7222, %r1935;
	mov.u32 	%r7223, %r1935;
	mov.u32 	%r7224, %r1935;
	mov.u32 	%r7225, %r1935;
	mov.u32 	%r7226, %r1935;
	mov.u32 	%r7227, %r1935;
	mov.u32 	%r7228, %r1935;
	mov.u32 	%r7229, %r1935;
	mov.u32 	%r7230, %r1935;
	mov.u32 	%r7231, %r1935;
	mov.u32 	%r7232, %r1935;
	mov.u32 	%r7233, %r1935;
	mov.u32 	%r7234, %r1935;
	@%p207 bra 	$L__BB0_396;

	mad.lo.s32 	%r904, %r636, %r1521, %r635;
	shl.b32 	%r3183, %r904, 6;
	mul.wide.s32 	%rd286, %r3183, 4;
	add.s64 	%rd30, %rd29, %rd286;
	and.pred  	%p210, %p197, %p200;
	mov.u32 	%r7216, %r1935;
	mov.u32 	%r7218, %r1935;
	@%p210 bra 	$L__BB0_388;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7218, %r7216}, [%rd288+256];

$L__BB0_388:
	mov.u32 	%r7221, %r1935;
	mov.u32 	%r7223, %r1935;
	@%p197 bra 	$L__BB0_390;

	shl.b32 	%r3187, %r1521, 5;
	cvt.s64.s32 	%rd289, %r3187;
	cvt.s64.s32 	%rd290, %r28;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7223, %r7221}, [%rd293];

$L__BB0_390:
	mov.u32 	%r7228, %r1935;
	mov.u32 	%r7230, %r1935;
	@%p200 bra 	$L__BB0_392;

	shl.b32 	%r3191, %r1521, 5;
	neg.s32 	%r3192, %r3191;
	cvt.s64.s32 	%rd294, %r3192;
	cvt.s64.s32 	%rd295, %r28;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7230, %r7228}, [%rd298];

$L__BB0_392:
	shl.b32 	%r3195, %r1522, 6;
	shl.b32 	%r3196, %r904, 7;
	mad.lo.s32 	%r3197, %r3195, %r1521, %r3196;
	mul.wide.s32 	%rd299, %r3197, 4;
	add.s64 	%rd31, %rd29, %rd299;
	mov.u32 	%r7213, %r1935;
	mov.u32 	%r7214, %r1935;
	mov.u32 	%r7219, %r1935;
	mov.u32 	%r7220, %r1935;
	mov.u32 	%r7222, %r1935;
	mov.u32 	%r7224, %r1935;
	mov.u32 	%r7231, %r1935;
	mov.u32 	%r7232, %r1935;
	@%p197 bra 	$L__BB0_394;

	shl.b32 	%r3198, %r1521, 5;
	cvt.s64.s32 	%rd300, %r3198;
	cvt.s64.s32 	%rd301, %r28;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7224, %r7222, %r7214, %r7213}, [%rd304];
	shl.b32 	%r3203, %r1521, 6;
	add.s32 	%r3204, %r3203, -32;
	cvt.s64.s32 	%rd305, %r3204;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7232, %r7231, %r7220, %r7219}, [%rd308];

$L__BB0_394:
	mov.u32 	%r7215, %r1935;
	mov.u32 	%r7217, %r1935;
	mov.u32 	%r7225, %r1935;
	mov.u32 	%r7226, %r1935;
	mov.u32 	%r7227, %r1935;
	mov.u32 	%r7229, %r1935;
	mov.u32 	%r7233, %r1935;
	mov.u32 	%r7234, %r1935;
	@%p200 bra 	$L__BB0_396;

	shl.b32 	%r3210, %r1521, 5;
	xor.b32  	%r3211, %r3210, -32;
	cvt.s64.s32 	%rd309, %r3211;
	cvt.s64.s32 	%rd310, %r28;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7234, %r7233, %r7229, %r7227}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7226, %r7225, %r7217, %r7215}, [%rd315];

$L__BB0_396:
	mov.u32 	%r3225, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3221,%r7055,%r412,%r2024,%r3225;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3221;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7055;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3228, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3229,%r7056,%r3228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3232,%r6908,%r3229;
}
	// end inline asm
	@%p12 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7235,%r7170;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7235,%r6909,%r3229;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3245, 31;
	mov.u32 	%r3268, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3243,%r7235,%r3245,%r2024,%r3268;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3248,%r3232,%r3243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3251,%r7054,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3254,%r3251,%r3248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7057,%r3254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3260,%r7170,%r3257;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3264,%r7050,%r412,%r2024,%r3268;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3264;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7050;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3271, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3272,%r7051,%r3271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3275,%r6908,%r3272;
}
	// end inline asm
	mov.u32 	%r7236, %r7169;
	@%p12 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7236,%r6909,%r3272;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3286,%r7236,%r3245,%r2024,%r3268;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3291,%r3275,%r3286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3294,%r7054,%r7049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3297,%r3291,%r3294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3300,%r7052,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3303,%r7169,%r3300;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3306,%r7055,%r7056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3309,%r6912,%r3306;
}
	// end inline asm
	@%p12 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7237,%r7168;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7237,%r6913,%r3306;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3322, 31;
	mov.u32 	%r3324, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3320,%r7237,%r3322,%r2024,%r3324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3325,%r3309,%r3320;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3328,%r7047,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3331,%r3328,%r3325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3334,%r7048,%r3331;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3337,%r7168,%r3334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r7050,%r7051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r6912,%r3340;
}
	// end inline asm
	mov.u32 	%r7238, %r7167;
	@%p12 bra 	$L__BB0_406;

	// begin inline asm
	{mul.f16x2 %r7238,%r6913,%r3340;
}
	// end inline asm

$L__BB0_406:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3352,%r7238,%r3322,%r2024,%r3324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3357,%r3343,%r3352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3360,%r7047,%r7044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3363,%r3357,%r3360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3366,%r7045,%r3363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3369,%r7167,%r3366;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3373,%r7041,%r412,%r2024,%r3324;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3373;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7041;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3380, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3381,%r7042,%r3380;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3384,%r6908,%r3381;
}
	// end inline asm
	@%p12 bra 	$L__BB0_408;
	bra.uni 	$L__BB0_407;

$L__BB0_408:
	// begin inline asm
	{neg.f16x2 %r7239,%r7166;
}
	// end inline asm
	bra.uni 	$L__BB0_409;

$L__BB0_407:
	// begin inline asm
	{mul.f16x2 %r7239,%r6909,%r3381;
}
	// end inline asm

$L__BB0_409:
	mov.u32 	%r3399, 31;
	mov.u32 	%r3401, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3397,%r7239,%r3399,%r2024,%r3401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3402,%r3384,%r3397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3405,%r7040,%r7054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3408,%r3405,%r3402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3411,%r7043,%r3408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3414,%r7166,%r3411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3417,%r7041,%r7042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3420,%r6912,%r3417;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7240,%r7165;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7240,%r6913,%r3417;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3433, 31;
	mov.u32 	%r3456, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3431,%r7240,%r3433,%r2024,%r3456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3436,%r3420,%r3431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3439,%r7038,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3442,%r3439,%r3436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3445,%r7039,%r3442;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3448,%r7165,%r3445;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3452,%r7036,%r412,%r2024,%r3456;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3452;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7036;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3459, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3460,%r7037,%r3459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3463,%r6908,%r3460;
}
	// end inline asm
	@%p12 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7241,%r7164;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7241,%r6909,%r3460;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3478, 31;
	mov.u32 	%r3501, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3476,%r7241,%r3478,%r2024,%r3501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3481,%r3463,%r3476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3484,%r7035,%r7306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3487,%r3484,%r3481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3490,%r7234,%r3487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3493,%r7164,%r3490;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3497,%r7031,%r412,%r2024,%r3501;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3497;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7031;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3504, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3505,%r7032,%r3504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3508,%r6908,%r3505;
}
	// end inline asm
	mov.u32 	%r7242, %r7163;
	@%p12 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7242,%r6909,%r3505;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3519,%r7242,%r3478,%r2024,%r3501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3524,%r3508,%r3519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3527,%r7035,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3530,%r3524,%r3527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3533,%r7033,%r3530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3536,%r7163,%r3533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3539,%r7036,%r7037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3542,%r6912,%r3539;
}
	// end inline asm
	@%p12 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7243,%r7162;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7243,%r6913,%r3539;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3555, 31;
	mov.u32 	%r3557, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3553,%r7243,%r3555,%r2024,%r3557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3558,%r3542,%r3553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3561,%r7030,%r7305;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3564,%r3561,%r3558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3567,%r7233,%r3564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3570,%r7162,%r3567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r7031,%r7032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r6912,%r3573;
}
	// end inline asm
	mov.u32 	%r7244, %r7161;
	@%p12 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7244,%r6913,%r3573;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3585,%r7244,%r3555,%r2024,%r3557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3590,%r3576,%r3585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3593,%r7030,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3596,%r3590,%r3593;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3599,%r7028,%r3596;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3602,%r7161,%r3599;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3606,%r7025,%r412,%r2024,%r3557;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3606;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7025;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3613, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3614,%r7026,%r3613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3617,%r6908,%r3614;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7245,%r7160;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7245,%r6909,%r3614;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3632, 31;
	mov.u32 	%r3655, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3630,%r7245,%r3632,%r2024,%r3655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3635,%r3617,%r3630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3638,%r7024,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r3638,%r3635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3644,%r525,%r3641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7083,%r7160,%r3644;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3651,%r7021,%r412,%r2024,%r3655;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3651;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7021;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3658, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3659,%r7022,%r3658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3662,%r6908,%r3659;
}
	// end inline asm
	mov.u32 	%r7246, %r7159;
	@%p12 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7246,%r6909,%r3659;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3673,%r7246,%r3632,%r2024,%r3655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3678,%r3662,%r3673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3681,%r7024,%r7054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r3678,%r3681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r521,%r3684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r7159,%r3687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3693,%r7026,%r7056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3696,%r7022,%r7032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3699,%r3693,%r3696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3702,%r7020,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3705,%r7158,%r3702;
}
	// end inline asm
	selp.b32 	%r1030, %r7158, %r3705, %p12;
	// begin inline asm
	{sub.f16x2 %r3708,%r7025,%r7026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3711,%r6912,%r3708;
}
	// end inline asm
	@%p12 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7247,%r7157;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7247,%r6913,%r3708;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3724, 31;
	mov.u32 	%r3726, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3722,%r7247,%r3724,%r2024,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3727,%r3711,%r3722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3730,%r7018,%r7030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3733,%r3730,%r3727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3736,%r517,%r3733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7082,%r7157,%r3736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r7021,%r7022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3745,%r6912,%r3742;
}
	// end inline asm
	mov.u32 	%r7248, %r7156;
	@%p12 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7248,%r6913,%r3742;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3754,%r7248,%r3724,%r2024,%r3726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3759,%r3745,%r3754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3762,%r7018,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3765,%r3759,%r3762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3768,%r515,%r3765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r7156,%r3768;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3774,%r7025,%r7055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3777,%r7021,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r3774,%r3777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3783,%r7016,%r3780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3786,%r7155,%r3783;
}
	// end inline asm
	selp.b32 	%r1042, %r7155, %r3786, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r3790,%r7013,%r412,%r2024,%r3726;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3790;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7013;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3797, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r7014,%r3797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r6908,%r3798;
}
	// end inline asm
	@%p12 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7249,%r7154;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7249,%r6909,%r3798;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3816, 31;
	mov.u32 	%r3839, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3814,%r7249,%r3816,%r2024,%r3839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3819,%r3801,%r3814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3822,%r7012,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3825,%r3822,%r3819;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3828,%r513,%r3825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7079,%r7154,%r3828;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3835,%r7009,%r412,%r2024,%r3839;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3835;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7009;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3842, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3843,%r7010,%r3842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3846,%r6908,%r3843;
}
	// end inline asm
	mov.u32 	%r7250, %r7153;
	@%p12 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7250,%r6909,%r3843;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3857,%r7250,%r3816,%r2024,%r3839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3862,%r3846,%r3857;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3865,%r7012,%r7040;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3868,%r3862,%r3865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3871,%r7011,%r3868;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3874,%r7153,%r3871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3877,%r7014,%r7042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3880,%r7010,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3883,%r3877,%r3880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3886,%r7008,%r3883;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3889,%r7152,%r3886;
}
	// end inline asm
	selp.b32 	%r1054, %r7152, %r3889, %p12;
	// begin inline asm
	{sub.f16x2 %r3892,%r7013,%r7014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3895,%r6912,%r3892;
}
	// end inline asm
	@%p12 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7251,%r7151;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7251,%r6913,%r3892;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3908, 31;
	mov.u32 	%r3910, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3906,%r7251,%r3908,%r2024,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3911,%r3895,%r3906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3914,%r7006,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3917,%r3914,%r3911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3920,%r505,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7078,%r7151,%r3920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3926,%r7009,%r7010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3929,%r6912,%r3926;
}
	// end inline asm
	mov.u32 	%r7252, %r7150;
	@%p12 bra 	$L__BB0_442;

	// begin inline asm
	{mul.f16x2 %r7252,%r6913,%r3926;
}
	// end inline asm

$L__BB0_442:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3938,%r7252,%r3908,%r2024,%r3910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3943,%r3929,%r3938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3946,%r7006,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3949,%r3943,%r3946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3952,%r7005,%r3949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3955,%r7150,%r3952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3958,%r7013,%r7041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3961,%r7009,%r7021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3964,%r3958,%r3961;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3967,%r7004,%r3964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3970,%r7149,%r3967;
}
	// end inline asm
	selp.b32 	%r1066, %r7149, %r3970, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r3974,%r7002,%r412,%r2024,%r3910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3974;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7002;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3981, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r7003,%r3981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3985,%r6908,%r3982;
}
	// end inline asm
	@%p12 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7253,%r7148;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7253,%r6909,%r3982;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r4000, 31;
	mov.u32 	%r4002, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3998,%r7253,%r4000,%r2024,%r4002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4003,%r3985,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4006,%r7290,%r7012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4009,%r4006,%r4003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4012,%r7232,%r4009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4015,%r7148,%r4012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4018,%r7002,%r7003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4021,%r6912,%r4018;
}
	// end inline asm
	@%p12 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7254,%r7147;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7254,%r6913,%r4018;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4034, 31;
	mov.u32 	%r4057, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4032,%r7254,%r4034,%r2024,%r4057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4037,%r4021,%r4032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r7289,%r7006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4043,%r4040,%r4037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4046,%r7231,%r4043;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4049,%r7147,%r4046;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4053,%r6998,%r412,%r2024,%r4057;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4053;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6998;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4060, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4061,%r6999,%r4060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4064,%r6908,%r4061;
}
	// end inline asm
	mov.u32 	%r7255, %r7146;
	@%p12 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7255,%r6909,%r4061;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4075,%r7255,%r4034,%r2024,%r4057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r4064,%r4075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r6974,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r4080,%r4083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r7230,%r4086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7077,%r7146,%r4089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4095,%r6975,%r7037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4098,%r6999,%r7304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4101,%r4095,%r4098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4104,%r7229,%r4101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4107,%r7145,%r4104;
}
	// end inline asm
	selp.b32 	%r1084, %r7145, %r4107, %p12;
	// begin inline asm
	{sub.f16x2 %r4110,%r6998,%r6999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4113,%r6912,%r4110;
}
	// end inline asm
	mov.u32 	%r7256, %r7144;
	@%p12 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7256,%r6913,%r4110;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4124, 31;
	mov.u32 	%r4162, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4122,%r7256,%r4124,%r2024,%r4162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4127,%r4113,%r4122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4130,%r6972,%r7030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4133,%r4127,%r4130;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4136,%r7228,%r4133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7076,%r7144,%r4136;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4142,%r6973,%r7036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4145,%r6998,%r7303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r4142,%r4145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4151,%r7227,%r4148;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4154,%r7143,%r4151;
}
	// end inline asm
	selp.b32 	%r1090, %r7143, %r4154, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4158,%r6994,%r412,%r2024,%r4162;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4158;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6994;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4165, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r6995,%r4165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4169,%r6908,%r4166;
}
	// end inline asm
	@%p12 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7257,%r7142;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7257,%r6909,%r4166;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4184, 31;
	mov.u32 	%r4207, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4182,%r7257,%r4184,%r2024,%r4207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4187,%r4169,%r4182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4190,%r6993,%r6974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4193,%r4190,%r4187;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4196,%r7226,%r4193;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7075,%r7142,%r4196;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4203,%r6990,%r412,%r2024,%r4207;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4203;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6990;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4210, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r6991,%r4210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4214,%r6908,%r4211;
}
	// end inline asm
	mov.u32 	%r7258, %r7141;
	@%p12 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7258,%r6909,%r4211;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4225,%r7258,%r4184,%r2024,%r4207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4230,%r4214,%r4225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4233,%r6993,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4236,%r4230,%r4233;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4239,%r7023,%r4236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7073,%r7141,%r4239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4245,%r6995,%r7026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4248,%r6991,%r6999;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4251,%r4245,%r4248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4254,%r487,%r4251;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4257,%r7140,%r4254;
}
	// end inline asm
	selp.b32 	%r7071, %r7140, %r4257, %p12;
	// begin inline asm
	{sub.f16x2 %r4260,%r6994,%r6995;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4263,%r6912,%r4260;
}
	// end inline asm
	@%p12 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7259,%r7139;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7259,%r6913,%r4260;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4276, 31;
	mov.u32 	%r4278, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4274,%r7259,%r4276,%r2024,%r4278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4279,%r4263,%r4274;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4282,%r6988,%r6972;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4285,%r4282,%r4279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4288,%r7225,%r4285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7074,%r7139,%r4288;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4294,%r6990,%r6991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4297,%r6912,%r4294;
}
	// end inline asm
	mov.u32 	%r7260, %r7138;
	@%p12 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7260,%r6913,%r4294;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4306,%r7260,%r4276,%r2024,%r4278;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4311,%r4297,%r4306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4314,%r6988,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4317,%r4311,%r4314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4320,%r7017,%r4317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7072,%r7138,%r4320;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4326,%r6994,%r7025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4329,%r6990,%r6998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r4326,%r4329;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4335,%r484,%r4332;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4338,%r7137,%r4335;
}
	// end inline asm
	selp.b32 	%r7070, %r7137, %r4338, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4342,%r6984,%r412,%r2024,%r4278;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4342;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6984;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4349, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r6985,%r4349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4353,%r6908,%r4350;
}
	// end inline asm
	@%p12 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7261,%r7136;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7261,%r6909,%r4350;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4368, 31;
	mov.u32 	%r4391, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4366,%r7261,%r4368,%r2024,%r4391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4371,%r4353,%r4366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4374,%r6971,%r6993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4377,%r4374,%r4371;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4380,%r7224,%r4377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7069,%r7136,%r4380;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4387,%r6982,%r412,%r2024,%r4391;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4387;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6982;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4394, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4395,%r6983,%r4394;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4398,%r6908,%r4395;
}
	// end inline asm
	mov.u32 	%r7262, %r7135;
	@%p12 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7262,%r6909,%r4395;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4409,%r7262,%r4368,%r2024,%r4391;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4414,%r4398,%r4409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4417,%r6971,%r7012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4420,%r4414,%r4417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4423,%r7223,%r4420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7067,%r7135,%r4423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4429,%r6985,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4432,%r6983,%r6991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4435,%r4429,%r4432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4438,%r479,%r4435;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4441,%r7134,%r4438;
}
	// end inline asm
	selp.b32 	%r7065, %r7134, %r4441, %p12;
	// begin inline asm
	{sub.f16x2 %r4444,%r6984,%r6985;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4447,%r6912,%r4444;
}
	// end inline asm
	@%p12 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7263,%r7133;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7263,%r6913,%r4444;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4460, 31;
	mov.u32 	%r4462, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4458,%r7263,%r4460,%r2024,%r4462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4463,%r4447,%r4458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4466,%r6970,%r6988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4469,%r4466,%r4463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4472,%r7222,%r4469;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7068,%r7133,%r4472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4478,%r6982,%r6983;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4481,%r6912,%r4478;
}
	// end inline asm
	mov.u32 	%r7264, %r7132;
	@%p12 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r7264,%r6913,%r4478;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4490,%r7264,%r4460,%r2024,%r4462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4495,%r4481,%r4490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4498,%r6970,%r7006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4501,%r4495,%r4498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4504,%r7221,%r4501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r7132,%r4504;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4510,%r6984,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4513,%r6982,%r6990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r4510,%r4513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4519,%r478,%r4516;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4522,%r7131,%r4519;
}
	// end inline asm
	selp.b32 	%r7064, %r7131, %r4522, %p12;
	// begin inline asm
	{sub.f16x2 %r4525,%r6969,%r7003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4528,%r7288,%r6983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4531,%r4525,%r4528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4534,%r7220,%r4531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4537,%r7130,%r4534;
}
	// end inline asm
	selp.b32 	%r1139, %r7130, %r4537, %p12;
	// begin inline asm
	{sub.f16x2 %r4540,%r6968,%r7002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4543,%r7287,%r6982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r4540,%r4543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4549,%r7219,%r4546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4552,%r7129,%r4549;
}
	// end inline asm
	selp.b32 	%r1140, %r7129, %r4552, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4556,%r6976,%r412,%r2024,%r4462;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4556;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6976;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4563, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4564,%r6977,%r4563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4567,%r6908,%r4564;
}
	// end inline asm
	mov.u32 	%r7265, %r7128;
	@%p12 bra 	$L__BB0_474;

	// begin inline asm
	{mul.f16x2 %r7265,%r6909,%r4564;
}
	// end inline asm

$L__BB0_474:
	mov.u32 	%r4580, 31;
	mov.u32 	%r4582, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4578,%r7265,%r4580,%r2024,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4583,%r4567,%r4578;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r6964,%r6993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r4583,%r4586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4592,%r7218,%r4589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7063,%r7128,%r4592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4598,%r6965,%r6995;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4601,%r6977,%r6967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4604,%r4598,%r4601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4607,%r7217,%r4604;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4610,%r7127,%r4607;
}
	// end inline asm
	selp.b32 	%r7061, %r7127, %r4610, %p12;
	// begin inline asm
	{sub.f16x2 %r4613,%r6976,%r6977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4616,%r6912,%r4613;
}
	// end inline asm
	mov.u32 	%r7266, %r7126;
	@%p12 bra 	$L__BB0_476;

	// begin inline asm
	{mul.f16x2 %r7266,%r6913,%r4613;
}
	// end inline asm

$L__BB0_476:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4625,%r7266,%r4580,%r2024,%r4582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4630,%r4616,%r4625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4633,%r6962,%r6988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4636,%r4630,%r4633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4639,%r7216,%r4636;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r7126,%r4639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4645,%r6963,%r6994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4648,%r6976,%r6966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4651,%r4645,%r4648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4654,%r7215,%r4651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4657,%r7125,%r4654;
}
	// end inline asm
	selp.b32 	%r7060, %r7125, %r4657, %p12;
	// begin inline asm
	{sub.f16x2 %r4660,%r6960,%r6985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4663,%r6961,%r6977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4666,%r4660,%r4663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4669,%r7214,%r4666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4672,%r7124,%r4669;
}
	// end inline asm
	selp.b32 	%r7059, %r7124, %r4672, %p12;
	// begin inline asm
	{sub.f16x2 %r4675,%r6958,%r6984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r6959,%r6976;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4681,%r4675,%r4678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4684,%r7213,%r4681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4687,%r7123,%r4684;
}
	// end inline asm
	selp.b32 	%r7058, %r7123, %r4687, %p12;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	setp.lt.s32 	%p248, %r637, %r1527;
	or.pred  	%p250, %p248, %p207;
	mad.lo.s32 	%r4692, %r1529, %r1528, %r1527;
	setp.ge.s32 	%p251, %r637, %r4692;
	or.pred  	%p252, %p250, %p251;
	@%p252 bra 	$L__BB0_526;

	sub.s32 	%r1155, %r637, %r1527;
	rem.s32 	%r4693, %r1155, %r1528;
	setp.ne.s32 	%p253, %r4693, 0;
	@%p253 bra 	$L__BB0_526;

	div.s32 	%r4694, %r1155, %r1528;
	mul.lo.s32 	%r4695, %r4694, %r1521;
	mul.lo.s32 	%r1156, %r4695, 3;
	add.s32 	%r1157, %r635, -2;
	add.s32 	%r4696, %r1156, %r1157;
	mul.lo.s32 	%r1158, %r4696, %r1522;
	@%p12 bra 	$L__BB0_480;

	add.s32 	%r4701, %r1158, %r636;
	mul.lo.s32 	%r4702, %r4701, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3260;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4703, %r378, %r4702;
	mul.wide.s32 	%rd317, %r4703, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3260;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4704, %r379, %r4702;
	mul.wide.s32 	%rd319, %r4704, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3337;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4705, %r392, %r4702;
	mul.wide.s32 	%rd321, %r4705, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3337;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4706, %r393, %r4702;
	mul.wide.s32 	%rd323, %r4706, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_480:
	add.s32 	%r1159, %r1156, %r1521;
	@%p12 bra 	$L__BB0_482;

	add.s32 	%r4711, %r1159, %r1157;
	mad.lo.s32 	%r4712, %r4711, %r1522, %r636;
	mul.lo.s32 	%r4713, %r4712, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3303;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4714, %r378, %r4713;
	mul.wide.s32 	%rd325, %r4714, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3303;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4715, %r379, %r4713;
	mul.wide.s32 	%rd327, %r4715, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3369;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4716, %r392, %r4713;
	mul.wide.s32 	%rd329, %r4716, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3369;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4717, %r393, %r4713;
	mul.wide.s32 	%rd331, %r4717, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_482:
	add.s32 	%r1160, %r636, 1;
	@%p12 bra 	$L__BB0_484;

	add.s32 	%r4722, %r1158, %r1160;
	mul.lo.s32 	%r4723, %r4722, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3414;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4724, %r378, %r4723;
	mul.wide.s32 	%rd333, %r4724, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3414;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4725, %r379, %r4723;
	mul.wide.s32 	%rd335, %r4725, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3448;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4726, %r392, %r4723;
	mul.wide.s32 	%rd337, %r4726, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3448;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4727, %r393, %r4723;
	mul.wide.s32 	%rd339, %r4727, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_484:
	add.s32 	%r1161, %r635, -1;
	add.s32 	%r4728, %r1156, %r1161;
	mul.lo.s32 	%r1162, %r4728, %r1522;
	add.s32 	%r1163, %r636, -1;
	@%p12 bra 	$L__BB0_486;

	add.s32 	%r4733, %r1162, %r1163;
	mul.lo.s32 	%r4734, %r4733, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3493;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4735, %r378, %r4734;
	mul.wide.s32 	%rd341, %r4735, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3493;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4736, %r379, %r4734;
	mul.wide.s32 	%rd343, %r4736, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3570;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4737, %r392, %r4734;
	mul.wide.s32 	%rd345, %r4737, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3570;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4738, %r393, %r4734;
	mul.wide.s32 	%rd347, %r4738, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_486:
	add.s32 	%r4739, %r1159, %r1161;
	mul.lo.s32 	%r1164, %r4739, %r1522;
	@%p12 bra 	$L__BB0_488;

	add.s32 	%r4744, %r1164, %r1163;
	mul.lo.s32 	%r4745, %r4744, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3536;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4746, %r378, %r4745;
	mul.wide.s32 	%rd349, %r4746, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3536;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4747, %r379, %r4745;
	mul.wide.s32 	%rd351, %r4747, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3602;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4748, %r392, %r4745;
	mul.wide.s32 	%rd353, %r4748, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3602;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4749, %r393, %r4745;
	mul.wide.s32 	%rd355, %r4749, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_488:
	@%p12 bra 	$L__BB0_490;

	add.s32 	%r4754, %r1162, %r636;
	mul.lo.s32 	%r4755, %r4754, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7083;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4756, %r378, %r4755;
	mul.wide.s32 	%rd357, %r4756, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7083;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4757, %r379, %r4755;
	mul.wide.s32 	%rd359, %r4757, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7082;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4758, %r392, %r4755;
	mul.wide.s32 	%rd361, %r4758, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7082;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4759, %r393, %r4755;
	mul.wide.s32 	%rd363, %r4759, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_490:
	@%p12 bra 	$L__BB0_492;

	add.s32 	%r4764, %r1164, %r636;
	mul.lo.s32 	%r4765, %r4764, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7081;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4766, %r378, %r4765;
	mul.wide.s32 	%rd365, %r4766, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7081;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4767, %r379, %r4765;
	mul.wide.s32 	%rd367, %r4767, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7080;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4768, %r392, %r4765;
	mul.wide.s32 	%rd369, %r4768, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7080;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4769, %r393, %r4765;
	mul.wide.s32 	%rd371, %r4769, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_492:
	add.s32 	%r1165, %r1159, %r1521;
	add.s32 	%r4770, %r1165, %r1161;
	mul.lo.s32 	%r1166, %r4770, %r1522;
	@%p12 bra 	$L__BB0_494;

	add.s32 	%r4775, %r1166, %r636;
	mul.lo.s32 	%r4776, %r4775, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1030;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4777, %r378, %r4776;
	mul.wide.s32 	%rd373, %r4777, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1030;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4778, %r379, %r4776;
	mul.wide.s32 	%rd375, %r4778, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1042;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4779, %r392, %r4776;
	mul.wide.s32 	%rd377, %r4779, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1042;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4780, %r393, %r4776;
	mul.wide.s32 	%rd379, %r4780, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_494:
	@%p12 bra 	$L__BB0_496;

	add.s32 	%r4785, %r1162, %r1160;
	mul.lo.s32 	%r4786, %r4785, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7079;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4787, %r378, %r4786;
	mul.wide.s32 	%rd381, %r4787, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7079;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4788, %r379, %r4786;
	mul.wide.s32 	%rd383, %r4788, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7078;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4789, %r392, %r4786;
	mul.wide.s32 	%rd385, %r4789, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7078;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4790, %r393, %r4786;
	mul.wide.s32 	%rd387, %r4790, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_496:
	@%p12 bra 	$L__BB0_498;

	add.s32 	%r4795, %r1164, %r1160;
	mul.lo.s32 	%r4796, %r4795, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3874;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4797, %r378, %r4796;
	mul.wide.s32 	%rd389, %r4797, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3874;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4798, %r379, %r4796;
	mul.wide.s32 	%rd391, %r4798, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3955;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4799, %r392, %r4796;
	mul.wide.s32 	%rd393, %r4799, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3955;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4800, %r393, %r4796;
	mul.wide.s32 	%rd395, %r4800, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_498:
	@%p12 bra 	$L__BB0_500;

	add.s32 	%r4805, %r1166, %r1160;
	mul.lo.s32 	%r4806, %r4805, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4807, %r378, %r4806;
	mul.wide.s32 	%rd397, %r4807, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4808, %r379, %r4806;
	mul.wide.s32 	%rd399, %r4808, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1066;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4809, %r392, %r4806;
	mul.wide.s32 	%rd401, %r4809, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1066;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4810, %r393, %r4806;
	mul.wide.s32 	%rd403, %r4810, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_500:
	add.s32 	%r1167, %r636, 2;
	@%p12 bra 	$L__BB0_502;

	add.s32 	%r4815, %r1162, %r1167;
	mul.lo.s32 	%r4816, %r4815, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4015;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4817, %r378, %r4816;
	mul.wide.s32 	%rd405, %r4817, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4015;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4818, %r379, %r4816;
	mul.wide.s32 	%rd407, %r4818, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4049;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4819, %r392, %r4816;
	mul.wide.s32 	%rd409, %r4819, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4049;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4820, %r393, %r4816;
	mul.wide.s32 	%rd411, %r4820, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_502:
	add.s32 	%r4821, %r1159, %r635;
	mul.lo.s32 	%r1168, %r4821, %r1522;
	@%p12 bra 	$L__BB0_504;

	add.s32 	%r4826, %r1168, %r1163;
	mul.lo.s32 	%r4827, %r4826, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7077;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4828, %r378, %r4827;
	mul.wide.s32 	%rd413, %r4828, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7077;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4829, %r379, %r4827;
	mul.wide.s32 	%rd415, %r4829, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7076;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4830, %r392, %r4827;
	mul.wide.s32 	%rd417, %r4830, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7076;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4831, %r393, %r4827;
	mul.wide.s32 	%rd419, %r4831, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_504:
	add.s32 	%r4832, %r1165, %r635;
	mul.lo.s32 	%r1169, %r4832, %r1522;
	@%p12 bra 	$L__BB0_506;

	add.s32 	%r4837, %r1169, %r1163;
	mul.lo.s32 	%r4838, %r4837, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1084;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4839, %r378, %r4838;
	mul.wide.s32 	%rd421, %r4839, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1084;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4840, %r379, %r4838;
	mul.wide.s32 	%rd423, %r4840, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1090;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4841, %r392, %r4838;
	mul.wide.s32 	%rd425, %r4841, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1090;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4842, %r393, %r4838;
	mul.wide.s32 	%rd427, %r4842, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_506:
	add.s32 	%r4843, %r1156, %r635;
	mul.lo.s32 	%r1170, %r4843, %r1522;
	@%p12 bra 	$L__BB0_508;

	add.s32 	%r4848, %r1170, %r636;
	mul.lo.s32 	%r4849, %r4848, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7075;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4850, %r378, %r4849;
	mul.wide.s32 	%rd429, %r4850, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7075;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4851, %r379, %r4849;
	mul.wide.s32 	%rd431, %r4851, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7074;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4852, %r392, %r4849;
	mul.wide.s32 	%rd433, %r4852, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7074;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4853, %r393, %r4849;
	mul.wide.s32 	%rd435, %r4853, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_508:
	@%p12 bra 	$L__BB0_510;

	add.s32 	%r4858, %r1168, %r636;
	mul.lo.s32 	%r4859, %r4858, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7073;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4860, %r378, %r4859;
	mul.wide.s32 	%rd437, %r4860, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7073;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4861, %r379, %r4859;
	mul.wide.s32 	%rd439, %r4861, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7072;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4862, %r392, %r4859;
	mul.wide.s32 	%rd441, %r4862, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7072;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4863, %r393, %r4859;
	mul.wide.s32 	%rd443, %r4863, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_510:
	@%p12 bra 	$L__BB0_512;

	add.s32 	%r4868, %r1169, %r636;
	mul.lo.s32 	%r4869, %r4868, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7071;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4870, %r378, %r4869;
	mul.wide.s32 	%rd445, %r4870, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7071;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4871, %r379, %r4869;
	mul.wide.s32 	%rd447, %r4871, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7070;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4872, %r392, %r4869;
	mul.wide.s32 	%rd449, %r4872, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7070;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4873, %r393, %r4869;
	mul.wide.s32 	%rd451, %r4873, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_512:
	@%p12 bra 	$L__BB0_514;

	add.s32 	%r4878, %r1170, %r1160;
	mul.lo.s32 	%r4879, %r4878, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7069;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4880, %r378, %r4879;
	mul.wide.s32 	%rd453, %r4880, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7069;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4881, %r379, %r4879;
	mul.wide.s32 	%rd455, %r4881, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7068;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4882, %r392, %r4879;
	mul.wide.s32 	%rd457, %r4882, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7068;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4883, %r393, %r4879;
	mul.wide.s32 	%rd459, %r4883, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_514:
	@%p12 bra 	$L__BB0_516;

	add.s32 	%r4888, %r1168, %r1160;
	mul.lo.s32 	%r4889, %r4888, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7067;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4890, %r378, %r4889;
	mul.wide.s32 	%rd461, %r4890, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7067;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4891, %r379, %r4889;
	mul.wide.s32 	%rd463, %r4891, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7066;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4892, %r392, %r4889;
	mul.wide.s32 	%rd465, %r4892, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7066;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4893, %r393, %r4889;
	mul.wide.s32 	%rd467, %r4893, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_516:
	@%p12 bra 	$L__BB0_518;

	add.s32 	%r4898, %r1169, %r1160;
	mul.lo.s32 	%r4899, %r4898, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7065;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4900, %r378, %r4899;
	mul.wide.s32 	%rd469, %r4900, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7065;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4901, %r379, %r4899;
	mul.wide.s32 	%rd471, %r4901, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7064;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4902, %r392, %r4899;
	mul.wide.s32 	%rd473, %r4902, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7064;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4903, %r393, %r4899;
	mul.wide.s32 	%rd475, %r4903, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_518:
	add.s32 	%r1171, %r1169, %r1167;
	@%p12 bra 	$L__BB0_520;

	mul.lo.s32 	%r4908, %r1171, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1139;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4909, %r378, %r4908;
	mul.wide.s32 	%rd477, %r4909, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1139;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4910, %r379, %r4908;
	mul.wide.s32 	%rd479, %r4910, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1140;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4911, %r392, %r4908;
	mul.wide.s32 	%rd481, %r4911, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1140;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4912, %r393, %r4908;
	mul.wide.s32 	%rd483, %r4912, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_520:
	add.s32 	%r1172, %r635, 1;
	@%p12 bra 	$L__BB0_522;

	add.s32 	%r4917, %r1159, %r1172;
	mad.lo.s32 	%r4918, %r4917, %r1522, %r636;
	mul.lo.s32 	%r4919, %r4918, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7063;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4920, %r378, %r4919;
	mul.wide.s32 	%rd485, %r4920, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7063;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4921, %r379, %r4919;
	mul.wide.s32 	%rd487, %r4921, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7062;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4922, %r392, %r4919;
	mul.wide.s32 	%rd489, %r4922, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7062;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4923, %r393, %r4919;
	mul.wide.s32 	%rd491, %r4923, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_522:
	add.s32 	%r4924, %r1165, %r1172;
	mul.lo.s32 	%r1173, %r4924, %r1522;
	@%p12 bra 	$L__BB0_524;

	add.s32 	%r4929, %r1173, %r636;
	mul.lo.s32 	%r4930, %r4929, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7061;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4931, %r378, %r4930;
	mul.wide.s32 	%rd493, %r4931, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7061;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4932, %r379, %r4930;
	mul.wide.s32 	%rd495, %r4932, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7060;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4933, %r392, %r4930;
	mul.wide.s32 	%rd497, %r4933, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7060;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4934, %r393, %r4930;
	mul.wide.s32 	%rd499, %r4934, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_524:
	add.s32 	%r1174, %r1173, %r1160;
	@%p12 bra 	$L__BB0_526;

	mul.lo.s32 	%r4939, %r1174, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7059;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4940, %r378, %r4939;
	mul.wide.s32 	%rd501, %r4940, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7059;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4941, %r379, %r4939;
	mul.wide.s32 	%rd503, %r4941, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7058;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4942, %r392, %r4939;
	mul.wide.s32 	%rd505, %r4942, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7058;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4943, %r393, %r4939;
	mul.wide.s32 	%rd507, %r4943, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_526:
	setp.ne.s32 	%p278, %r23, %r1918;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p278 bra 	$L__BB0_528;

	mad.lo.s32 	%r4945, %r633, %r1519, %r26;
	mul.lo.s32 	%r4946, %r1517, %r4945;
	mul.lo.s32 	%r4947, %r4946, 768;
	mad.lo.s32 	%r4949, %r24, 384, %r4947;
	add.s32 	%r4950, %r4949, -64;
	mul.wide.s32 	%rd510, %r4950, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3493, %r3570, %r1084, %r1090};
	st.global.v4.u32 	[%rd513+1024], {%r3260, %r3337, %r1030, %r1042};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3536, %r3602};
	st.global.v2.u32 	[%rd515+1536], {%r3303, %r3369};

$L__BB0_528:
	setp.ne.s32 	%p279, %r24, %r1923;
	@%p279 bra 	$L__BB0_533;

	not.b32 	%r6818, %r23;
	add.s32 	%r6817, %r1516, %r6818;
	setp.eq.s32 	%p280, %r23, %r1918;
	mad.lo.s32 	%r4953, %r634, %r1518, %r25;
	mul.lo.s32 	%r4957, %r4953, %r1573;
	mad.lo.s32 	%r4960, %r6817, 384, %r4957;
	add.s32 	%r4961, %r4960, -64;
	mad.lo.s32 	%r4964, %r1575, %r51, %r4961;
	mul.wide.s32 	%rd516, %r4964, 4;
	add.s64 	%rd517, %rd34, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3414, %r3448, %r1054, %r1066};
	st.global.v4.u32 	[%rd519+1024], {%r4015, %r4049, %r1139, %r1140};
	add.s64 	%rd35, %rd517, %rd277;
	@%p280 bra 	$L__BB0_531;

	st.global.v2.u32 	[%rd35], {%r3303, %r3369};

$L__BB0_531:
	st.global.v2.u32 	[%rd35+768], {%r3874, %r3955};
	@%p197 bra 	$L__BB0_533;

	st.global.v2.u32 	[%rd35+1536], {%r7186, %r7185};

$L__BB0_533:
	setp.ge.s32 	%p282, %r23, %r1918;
	@%p282 bra 	$L__BB0_535;

	add.s32 	%r6816, %r52, %r52;
	mul.lo.s32 	%r4965, %r1517, 320;
	mul.lo.s32 	%r4967, %r24, 320;
	mad.lo.s32 	%r4968, %r4965, %r23, %r4967;
	add.s32 	%r4971, %r6816, -64;
	mad.lo.s32 	%r4976, %r4971, %r1923, %r1920;
	add.s32 	%r4977, %r4968, %r4976;
	shl.b32 	%r4978, %r4977, 2;
	mov.u32 	%r4979, _ZN6kernel5shmemE;
	add.s32 	%r4980, %r4979, %r4978;
	shl.b32 	%r4981, %r28, 4;
	add.s32 	%r4982, %r4980, %r4981;
	st.shared.v4.u32 	[%r4982], {%r7234, %r7233, %r7229, %r7227};
	shl.b32 	%r4983, %r28, 3;
	add.s32 	%r4984, %r4980, %r4983;
	st.shared.v2.u32 	[%r4984+512], {%r7033, %r7028};
	st.shared.v4.u32 	[%r4982+768], {%r7057, %r7048, %r7020, %r7016};

$L__BB0_535:
	setp.ge.s32 	%p283, %r24, %r1923;
	@%p283 bra 	$L__BB0_539;

	not.b32 	%r6815, %r23;
	add.s32 	%r6814, %r1516, %r6815;
	mad.lo.s32 	%r4990, %r6814, 384, %r1926;
	mad.lo.s32 	%r4994, %r1921, %r24, %r4990;
	add.s32 	%r5000, %r4994, %r1924;
	shl.b32 	%r5001, %r5000, 2;
	mov.u32 	%r5002, _ZN6kernel5shmemE;
	add.s32 	%r5003, %r5002, %r5001;
	shl.b32 	%r5004, %r28, 3;
	add.s32 	%r5005, %r5003, %r5004;
	@%p282 bra 	$L__BB0_538;

	add.s32 	%r6799, %r5005, -256;
	st.shared.v2.u32 	[%r6799], {%r7052, %r7045};

$L__BB0_538:
	shl.b32 	%r5025, %r28, 4;
	add.s32 	%r5026, %r5003, %r5025;
	st.shared.v4.u32 	[%r5026], {%r7043, %r7039, %r7008, %r7004};
	add.s32 	%r6800, %r5005, -256;
	st.shared.v2.u32 	[%r6800+768], {%r7011, %r7005};
	st.shared.v4.u32 	[%r5026+768], {%r7232, %r7231, %r7220, %r7219};

$L__BB0_539:
	bar.sync 	0;
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7291, %r6956;
	mov.u32 	%r7292, %r6957;
	mov.u32 	%r7277, %r6958;
	mov.u32 	%r7278, %r6959;
	mov.u32 	%r7279, %r6960;
	mov.u32 	%r7280, %r6961;
	mov.u32 	%r7293, %r6962;
	mov.u32 	%r7295, %r6964;
	mov.u32 	%r7283, %r6968;
	mov.u32 	%r7284, %r6969;
	mov.u32 	%r7285, %r6970;
	mov.u32 	%r7286, %r6971;
	@%p197 bra 	$L__BB0_543;

	setp.eq.s32 	%p286, %r24, 0;
	mad.lo.s32 	%r5029, %r633, %r1519, %r26;
	mad.lo.s32 	%r5030, %r5029, 768, 384;
	mul.lo.s32 	%r5031, %r5030, %r1517;
	mad.lo.s32 	%r5032, %r24, 384, %r5031;
	add.s32 	%r5033, %r5032, -128;
	mul.wide.s32 	%rd522, %r5033, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7291, %r6956;
	mov.u32 	%r7292, %r6957;
	mov.u32 	%r7293, %r6962;
	mov.u32 	%r7295, %r6964;
	@%p286 bra 	$L__BB0_542;

	ld.global.v4.u32 	{%r7292, %r7291, %r7295, %r7293}, [%rd37+-512];

$L__BB0_542:
	ld.global.v4.u32 	{%r7279, %r7277, %r7280, %r7278}, [%rd37];
	ld.global.v4.u32 	{%r7286, %r7285, %r7284, %r7283}, [%rd37+512];
	ld.global.v4.u32 	{%r7288, %r7287, %r7290, %r7289}, [%rd37+1024];

$L__BB0_543:
	mov.u32 	%r7294, %r6963;
	mov.u32 	%r7296, %r6965;
	mov.u32 	%r7297, %r6966;
	mov.u32 	%r7298, %r6967;
	mov.u32 	%r7299, %r6972;
	mov.u32 	%r7300, %r6973;
	mov.u32 	%r7301, %r6974;
	mov.u32 	%r7302, %r6975;
	@%p200 bra 	$L__BB0_545;

	not.b32 	%r6813, %r23;
	add.s32 	%r6812, %r1516, %r6813;
	mad.lo.s32 	%r5051, %r634, %r1518, %r25;
	mad.lo.s32 	%r5057, %r6812, 384, %r52;
	mad.lo.s32 	%r5058, %r5051, %r1573, %r5057;
	mad.lo.s32 	%r5061, %r1575, %r51, %r5058;
	mul.wide.s32 	%rd526, %r5061, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7304, %r7303, %r7306, %r7305}, [%rd529];
	ld.global.v4.u32 	{%r7302, %r7300, %r7298, %r7297}, [%rd529+512];
	ld.global.v4.u32 	{%r7301, %r7299, %r7296, %r7294}, [%rd529+1024];
	ld.global.v4.u32 	{%r7292, %r7291, %r7295, %r7293}, [%rd529+1536];

$L__BB0_545:
	neg.s32 	%r6806, %r1521;
	not.b32 	%r6805, %r26;
	add.s32 	%r6804, %r1519, %r6805;
	mul.lo.s32 	%r6803, %r6804, %r1520;
	not.b32 	%r6802, %r25;
	add.s32 	%r6801, %r1518, %r6802;
	mad.lo.s32 	%r5085, %r6801, %r1520, %r6803;
	add.s32 	%r5086, %r5085, %r1521;
	add.s32 	%r5095, %r5086, %r2328;
	add.s32 	%r1253, %r7084, 1;
	add.s32 	%r5096, %r1253, %r5095;
	div.s32 	%r5097, %r5096, %r1521;
	mad.lo.s32 	%r1254, %r5097, %r6806, %r5096;
	mad.lo.s32 	%r5104, %r5097, %r30, %r2339;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5105, %r5104, %r1522;
	shr.u32 	%r5106, %r5105, 31;
	add.s32 	%r5107, %r5105, %r5106;
	shr.s32 	%r5108, %r5107, 1;
	mad.lo.s32 	%r5109, %r5108, %r1521, %r1254;
	shl.b32 	%r5110, %r5109, 5;
	add.s32 	%r5111, %r5110, %r28;
	cvt.s64.s32 	%rd38, %r5111;
	mul.wide.s32 	%rd532, %r5111, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7086, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p71 bra 	$L__BB0_547;
	bra.uni 	$L__BB0_546;

$L__BB0_547:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7085, [%rd538];
	bra.uni 	$L__BB0_548;

$L__BB0_546:
	shl.b32 	%r5112, %r1254, 5;
	add.s32 	%r5113, %r5112, %r28;
	mul.wide.s32 	%rd535, %r5113, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5114, %r5115, %r5116, %r5117}, [%rd536];
	mov.u32 	%r6916, %r6920;
	mov.u32 	%r6917, %r6921;
	mov.u32 	%r6918, %r6922;
	mov.u32 	%r6919, %r6923;
	mov.u32 	%r6920, %r6924;
	mov.u32 	%r6921, %r6925;
	mov.u32 	%r6922, %r6926;
	mov.u32 	%r6923, %r6927;
	mov.u32 	%r6924, %r5117;
	mov.u32 	%r6925, %r5116;
	mov.u32 	%r6926, %r5115;
	mov.u32 	%r6927, %r5114;

$L__BB0_548:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5118, {low,high};}

	// end inline asm
	selp.b32 	%r5120, %r6911, %r5118, %p12;
	// begin inline asm
	{mul.f16x2 %r5119,%r5120,%r7054;
}
	// end inline asm
	selp.b32 	%r5123, %r6915, %r5118, %p12;
	// begin inline asm
	{mul.f16x2 %r5122,%r5123,%r7047;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5125, {low,high};}

	// end inline asm
	selp.b32 	%r5127, %r6911, %r5125, %p12;
	// begin inline asm
	{mul.f16x2 %r5126,%r5127,%r7035;
}
	// end inline asm
	selp.b32 	%r5130, %r6915, %r5125, %p12;
	// begin inline asm
	{mul.f16x2 %r5129,%r5130,%r7030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5132, {low,high};}

	// end inline asm
	selp.b32 	%r5134, %r6911, %r5132, %p12;
	// begin inline asm
	{mul.f16x2 %r5133,%r5134,%r7022;
}
	// end inline asm
	selp.b32 	%r5137, %r6915, %r5132, %p12;
	// begin inline asm
	{mul.f16x2 %r5136,%r5137,%r7021;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5139, {low,high};}

	// end inline asm
	selp.b32 	%r5141, %r6911, %r5139, %p12;
	// begin inline asm
	{mul.f16x2 %r5140,%r5141,%r7026;
}
	// end inline asm
	selp.b32 	%r5144, %r6915, %r5139, %p12;
	// begin inline asm
	{mul.f16x2 %r5143,%r5144,%r7025;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5146, {low,high};}

	// end inline asm
	selp.b32 	%r5148, %r6911, %r5146, %p12;
	// begin inline asm
	{mul.f16x2 %r5147,%r5148,%r7024;
}
	// end inline asm
	selp.b32 	%r5151, %r6915, %r5146, %p12;
	// begin inline asm
	{mul.f16x2 %r5150,%r5151,%r7018;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5153, {low,high};}

	// end inline asm
	selp.b32 	%r5155, %r6911, %r5153, %p12;
	// begin inline asm
	{mul.f16x2 %r5154,%r5155,%r7014;
}
	// end inline asm
	selp.b32 	%r5158, %r6915, %r5153, %p12;
	// begin inline asm
	{mul.f16x2 %r5157,%r5158,%r7013;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5160, {low,high};}

	// end inline asm
	selp.b32 	%r5162, %r6911, %r5160, %p12;
	// begin inline asm
	{mul.f16x2 %r5161,%r5162,%r7012;
}
	// end inline asm
	selp.b32 	%r5165, %r6915, %r5160, %p12;
	// begin inline asm
	{mul.f16x2 %r5164,%r5165,%r7006;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5167, {low,high};}

	// end inline asm
	selp.b32 	%r5169, %r6911, %r5167, %p12;
	// begin inline asm
	{mul.f16x2 %r5168,%r5169,%r6999;
}
	// end inline asm
	selp.b32 	%r5172, %r6915, %r5167, %p12;
	// begin inline asm
	{mul.f16x2 %r5171,%r5172,%r6998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5174, {low,high};}

	// end inline asm
	selp.b32 	%r5176, %r6911, %r5174, %p12;
	// begin inline asm
	{mul.f16x2 %r5175,%r5176,%r6975;
}
	// end inline asm
	selp.b32 	%r5179, %r6915, %r5174, %p12;
	// begin inline asm
	{mul.f16x2 %r5178,%r5179,%r6973;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5181, {low,high};}

	// end inline asm
	selp.b32 	%r5183, %r6911, %r5181, %p12;
	// begin inline asm
	{mul.f16x2 %r5182,%r5183,%r6974;
}
	// end inline asm
	selp.b32 	%r5186, %r6915, %r5181, %p12;
	// begin inline asm
	{mul.f16x2 %r5185,%r5186,%r6972;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5188, {low,high};}

	// end inline asm
	selp.b32 	%r5190, %r6911, %r5188, %p12;
	// begin inline asm
	{mul.f16x2 %r5189,%r5190,%r6991;
}
	// end inline asm
	selp.b32 	%r5193, %r6915, %r5188, %p12;
	// begin inline asm
	{mul.f16x2 %r5192,%r5193,%r6990;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5195, {low,high};}

	// end inline asm
	selp.b32 	%r5197, %r6911, %r5195, %p12;
	// begin inline asm
	{mul.f16x2 %r5196,%r5197,%r6995;
}
	// end inline asm
	selp.b32 	%r5200, %r6915, %r5195, %p12;
	// begin inline asm
	{mul.f16x2 %r5199,%r5200,%r6994;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5202, {low,high};}

	// end inline asm
	selp.b32 	%r5204, %r6911, %r5202, %p12;
	// begin inline asm
	{mul.f16x2 %r5203,%r5204,%r6993;
}
	// end inline asm
	selp.b32 	%r5207, %r6915, %r5202, %p12;
	// begin inline asm
	{mul.f16x2 %r5206,%r5207,%r6988;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5209, {low,high};}

	// end inline asm
	selp.b32 	%r5211, %r6911, %r5209, %p12;
	// begin inline asm
	{mul.f16x2 %r5210,%r5211,%r6983;
}
	// end inline asm
	selp.b32 	%r5214, %r6915, %r5209, %p12;
	// begin inline asm
	{mul.f16x2 %r5213,%r5214,%r6982;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5216, {low,high};}

	// end inline asm
	selp.b32 	%r5218, %r6911, %r5216, %p12;
	// begin inline asm
	{mul.f16x2 %r5217,%r5218,%r6985;
}
	// end inline asm
	selp.b32 	%r5221, %r6915, %r5216, %p12;
	// begin inline asm
	{mul.f16x2 %r5220,%r5221,%r6984;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5223, {low,high};}

	// end inline asm
	selp.b32 	%r5225, %r6911, %r5223, %p12;
	// begin inline asm
	{mul.f16x2 %r5224,%r5225,%r6971;
}
	// end inline asm
	selp.b32 	%r5228, %r6915, %r5223, %p12;
	// begin inline asm
	{mul.f16x2 %r5227,%r5228,%r6970;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5230, {low,high};}

	// end inline asm
	selp.b32 	%r5232, %r6911, %r5230, %p12;
	// begin inline asm
	{mul.f16x2 %r5231,%r5232,%r6969;
}
	// end inline asm
	selp.b32 	%r5235, %r6915, %r5230, %p12;
	// begin inline asm
	{mul.f16x2 %r5234,%r5235,%r6968;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5237, {low,high};}

	// end inline asm
	selp.b32 	%r5239, %r6911, %r5237, %p12;
	// begin inline asm
	{mul.f16x2 %r5238,%r5239,%r6967;
}
	// end inline asm
	selp.b32 	%r5242, %r6915, %r5237, %p12;
	// begin inline asm
	{mul.f16x2 %r5241,%r5242,%r6966;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5244, {low,high};}

	// end inline asm
	selp.b32 	%r5246, %r6911, %r5244, %p12;
	// begin inline asm
	{mul.f16x2 %r5245,%r5246,%r6977;
}
	// end inline asm
	selp.b32 	%r5249, %r6915, %r5244, %p12;
	// begin inline asm
	{mul.f16x2 %r5248,%r5249,%r6976;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5251, {low,high};}

	// end inline asm
	selp.b32 	%r5253, %r6911, %r5251, %p12;
	// begin inline asm
	{mul.f16x2 %r5252,%r5253,%r6965;
}
	// end inline asm
	selp.b32 	%r5256, %r6915, %r5251, %p12;
	// begin inline asm
	{mul.f16x2 %r5255,%r5256,%r6963;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5258, {low,high};}

	// end inline asm
	selp.b32 	%r5260, %r6911, %r5258, %p12;
	// begin inline asm
	{mul.f16x2 %r5259,%r5260,%r6964;
}
	// end inline asm
	selp.b32 	%r5263, %r6915, %r5258, %p12;
	// begin inline asm
	{mul.f16x2 %r5262,%r5263,%r6962;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5265, {low,high};}

	// end inline asm
	selp.b32 	%r5267, %r6911, %r5265, %p12;
	// begin inline asm
	{mul.f16x2 %r5266,%r5267,%r6961;
}
	// end inline asm
	selp.b32 	%r5270, %r6915, %r5265, %p12;
	// begin inline asm
	{mul.f16x2 %r5269,%r5270,%r6959;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5272, {low,high};}

	// end inline asm
	selp.b32 	%r5274, %r6911, %r5272, %p12;
	// begin inline asm
	{mul.f16x2 %r5273,%r5274,%r6960;
}
	// end inline asm
	selp.b32 	%r5277, %r6915, %r5272, %p12;
	// begin inline asm
	{mul.f16x2 %r5276,%r5277,%r6958;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5279, {low,high};}

	// end inline asm
	selp.b32 	%r5281, %r6911, %r5279, %p12;
	// begin inline asm
	{mul.f16x2 %r5280,%r5281,%r6957;
}
	// end inline asm
	selp.b32 	%r5284, %r6915, %r5279, %p12;
	// begin inline asm
	{mul.f16x2 %r5283,%r5284,%r6956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5286,%r7081,%r3303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5289,%r3414,%r3260;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5292,%r5286,%r5289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5295,%r6819,%r5292;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5298,%r5119,%r5295;
}
	// end inline asm
	selp.b32 	%r7049, %r5119, %r5298, %p12;
	// begin inline asm
	{sub.f16x2 %r5301,%r7080,%r3369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5304,%r3448,%r3337;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5307,%r5301,%r5304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5310,%r6819,%r5307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5313,%r5122,%r5310;
}
	// end inline asm
	selp.b32 	%r7044, %r5122, %r5313, %p12;
	// begin inline asm
	{sub.f16x2 %r5316,%r7077,%r3536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5319,%r7083,%r3493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5322,%r5316,%r5319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5325,%r6819,%r5322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5328,%r5126,%r5325;
}
	// end inline asm
	selp.b32 	%r7053, %r5126, %r5328, %p12;
	// begin inline asm
	{sub.f16x2 %r5331,%r7076,%r3602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5334,%r7082,%r3570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5337,%r5331,%r5334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5340,%r6819,%r5337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5343,%r5129,%r5340;
}
	// end inline asm
	selp.b32 	%r7046, %r5129, %r5343, %p12;
	// begin inline asm
	{sub.f16x2 %r5346,%r7080,%r7081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5349,%r6910,%r5346;
}
	// end inline asm
	@%p12 bra 	$L__BB0_550;
	bra.uni 	$L__BB0_549;

$L__BB0_550:
	// begin inline asm
	{neg.f16x2 %r7320,%r5133;
}
	// end inline asm
	bra.uni 	$L__BB0_551;

$L__BB0_549:
	// begin inline asm
	{mul.f16x2 %r7320,%r6911,%r5346;
}
	// end inline asm

$L__BB0_551:
	mov.u32 	%r5360, 31;
	mov.u32 	%r5362, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5358,%r7320,%r5360,%r2024,%r5362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5363,%r5349,%r5358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5366,%r1054,%r1030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5369,%r5366,%r5363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5372,%r6819,%r5369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7051,%r5133,%r5372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5378,%r7082,%r7083;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5381,%r6910,%r5378;
}
	// end inline asm
	mov.u32 	%r7321, %r5140;
	@%p12 bra 	$L__BB0_553;

	// begin inline asm
	{mul.f16x2 %r7321,%r6911,%r5378;
}
	// end inline asm

$L__BB0_553:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5390,%r7321,%r5360,%r2024,%r5362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5395,%r5381,%r5390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5398,%r7071,%r1030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5401,%r5395,%r5398;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5404,%r6819,%r5401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7056,%r5140,%r5404;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5410,%r7073,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5413,%r7079,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5416,%r5410,%r5413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5419,%r6819,%r5416;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5422,%r5147,%r5419;
}
	// end inline asm
	selp.b32 	%r7054, %r5147, %r5422, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7081;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5427,%r7081,%r413,%r2024,%r5362;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5427;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5433, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5434,%r5433,%r7080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5437,%r6914,%r5434;
}
	// end inline asm
	@%p12 bra 	$L__BB0_555;
	bra.uni 	$L__BB0_554;

$L__BB0_555:
	// begin inline asm
	{neg.f16x2 %r7322,%r5136;
}
	// end inline asm
	bra.uni 	$L__BB0_556;

$L__BB0_554:
	// begin inline asm
	{mul.f16x2 %r7322,%r6915,%r5434;
}
	// end inline asm

$L__BB0_556:
	mov.u32 	%r5452, 31;
	mov.u32 	%r5476, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5450,%r7322,%r5452,%r2024,%r5476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5455,%r5437,%r5450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5458,%r1066,%r1042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5461,%r5458,%r5455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5464,%r6819,%r5461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7050,%r5136,%r5464;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7083;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5472,%r7083,%r413,%r2024,%r5476;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5472;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5478, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5479,%r5478,%r7082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5482,%r6914,%r5479;
}
	// end inline asm
	mov.u32 	%r7323, %r5143;
	@%p12 bra 	$L__BB0_558;

	// begin inline asm
	{mul.f16x2 %r7323,%r6915,%r5479;
}
	// end inline asm

$L__BB0_558:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5493,%r7323,%r5452,%r2024,%r5476;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5498,%r5482,%r5493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5501,%r7070,%r1042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5504,%r5498,%r5501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5507,%r6819,%r5504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7055,%r5143,%r5507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5513,%r7072,%r7080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5516,%r7078,%r7082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5519,%r5513,%r5516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5522,%r6819,%r5519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5525,%r5150,%r5522;
}
	// end inline asm
	selp.b32 	%r7047, %r5150, %r5525, %p12;
	// begin inline asm
	{sub.f16x2 %r5528,%r7078,%r7079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5531,%r6910,%r5528;
}
	// end inline asm
	mov.u32 	%r7324, %r5154;
	@%p12 bra 	$L__BB0_560;

	// begin inline asm
	{mul.f16x2 %r7324,%r6911,%r5528;
}
	// end inline asm

$L__BB0_560:
	mov.u32 	%r5542, 31;
	mov.u32 	%r5581, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5540,%r7324,%r5542,%r2024,%r5581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5545,%r5531,%r5540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5548,%r7065,%r1054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5551,%r5545,%r5548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5554,%r6819,%r5551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7042,%r5154,%r5554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r7067,%r3874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5563,%r4015,%r7079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5566,%r5560,%r5563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5569,%r6819,%r5566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5572,%r5161,%r5569;
}
	// end inline asm
	selp.b32 	%r7040, %r5161, %r5572, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7079;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5577,%r7079,%r413,%r2024,%r5581;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5577;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5583, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5584,%r5583,%r7078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5587,%r6914,%r5584;
}
	// end inline asm
	mov.u32 	%r7325, %r5157;
	@%p12 bra 	$L__BB0_562;

	// begin inline asm
	{mul.f16x2 %r7325,%r6915,%r5584;
}
	// end inline asm

$L__BB0_562:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5598,%r7325,%r5542,%r2024,%r5581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5603,%r5587,%r5598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5606,%r7064,%r1066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5609,%r5603,%r5606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5612,%r6819,%r5609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7041,%r5157,%r5612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5618,%r7066,%r3955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5621,%r4049,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5624,%r5618,%r5621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5627,%r6819,%r5624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5630,%r5164,%r5627;
}
	// end inline asm
	selp.b32 	%r7038, %r5164, %r5630, %p12;
	// begin inline asm
	{sub.f16x2 %r5633,%r7076,%r7077;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5636,%r6910,%r5633;
}
	// end inline asm
	@%p12 bra 	$L__BB0_564;
	bra.uni 	$L__BB0_563;

$L__BB0_564:
	// begin inline asm
	{neg.f16x2 %r7326,%r5168;
}
	// end inline asm
	bra.uni 	$L__BB0_565;

$L__BB0_563:
	// begin inline asm
	{mul.f16x2 %r7326,%r6911,%r5633;
}
	// end inline asm

$L__BB0_565:
	mov.u32 	%r5649, 31;
	mov.u32 	%r5651, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5647,%r7326,%r5649,%r2024,%r5651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5652,%r5636,%r5647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5655,%r7071,%r1084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5658,%r5655,%r5652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5661,%r6819,%r5658;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7032,%r5168,%r5661;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5667,%r7197,%r7198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5670,%r6910,%r5667;
}
	// end inline asm
	mov.u32 	%r7327, %r5175;
	@%p12 bra 	$L__BB0_567;

	// begin inline asm
	{mul.f16x2 %r7327,%r6911,%r5667;
}
	// end inline asm

$L__BB0_567:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5679,%r7327,%r5649,%r2024,%r5651;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5684,%r5670,%r5679;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5687,%r7195,%r1084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5690,%r5684,%r5687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5693,%r6819,%r5690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7037,%r5175,%r5693;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5699,%r7196,%r7077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5702,%r7075,%r7198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5705,%r5699,%r5702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5708,%r6819,%r5705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5711,%r5182,%r5708;
}
	// end inline asm
	selp.b32 	%r7035, %r5182, %r5711, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7077;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5716,%r7077,%r413,%r2024,%r5651;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5716;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5722, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5723,%r5722,%r7076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5726,%r6914,%r5723;
}
	// end inline asm
	@%p12 bra 	$L__BB0_569;
	bra.uni 	$L__BB0_568;

$L__BB0_569:
	// begin inline asm
	{neg.f16x2 %r7328,%r5171;
}
	// end inline asm
	bra.uni 	$L__BB0_570;

$L__BB0_568:
	// begin inline asm
	{mul.f16x2 %r7328,%r6915,%r5723;
}
	// end inline asm

$L__BB0_570:
	mov.u32 	%r5741, 31;
	mov.u32 	%r5765, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5739,%r7328,%r5741,%r2024,%r5765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5744,%r5726,%r5739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5747,%r7070,%r1090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5750,%r5747,%r5744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5753,%r6819,%r5750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7031,%r5171,%r5753;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7198;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5761,%r7198,%r413,%r2024,%r5765;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5761;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5767, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r5767,%r7197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5771,%r6914,%r5768;
}
	// end inline asm
	mov.u32 	%r7329, %r5178;
	@%p12 bra 	$L__BB0_572;

	// begin inline asm
	{mul.f16x2 %r7329,%r6915,%r5768;
}
	// end inline asm

$L__BB0_572:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5782,%r7329,%r5741,%r2024,%r5765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5787,%r5771,%r5782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5790,%r7193,%r1090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r5787,%r5790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r6819,%r5793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7036,%r5178,%r5796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5802,%r7194,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5805,%r7074,%r7197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5808,%r5802,%r5805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5811,%r6819,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5814,%r5185,%r5811;
}
	// end inline asm
	selp.b32 	%r7030, %r5185, %r5814, %p12;
	// begin inline asm
	{sub.f16x2 %r5817,%r7072,%r7073;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5820,%r6910,%r5817;
}
	// end inline asm
	@%p12 bra 	$L__BB0_574;
	bra.uni 	$L__BB0_573;

$L__BB0_574:
	// begin inline asm
	{neg.f16x2 %r7330,%r5189;
}
	// end inline asm
	bra.uni 	$L__BB0_575;

$L__BB0_573:
	// begin inline asm
	{mul.f16x2 %r7330,%r6911,%r5817;
}
	// end inline asm

$L__BB0_575:
	mov.u32 	%r5833, 31;
	mov.u32 	%r5835, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5831,%r7330,%r5833,%r2024,%r5835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5836,%r5820,%r5831;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5839,%r7065,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5842,%r5839,%r5836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5845,%r6819,%r5842;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7022,%r5189,%r5845;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r7074,%r7075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r6910,%r5851;
}
	// end inline asm
	mov.u32 	%r7331, %r5196;
	@%p12 bra 	$L__BB0_577;

	// begin inline asm
	{mul.f16x2 %r7331,%r6911,%r5851;
}
	// end inline asm

$L__BB0_577:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5863,%r7331,%r5833,%r2024,%r5835;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r5854,%r5863;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r7061,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r5868,%r5871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5877,%r6819,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7026,%r5196,%r5877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r7063,%r7073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5886,%r7069,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5889,%r5883,%r5886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5892,%r6819,%r5889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5895,%r5203,%r5892;
}
	// end inline asm
	selp.b32 	%r7024, %r5203, %r5895, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7073;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5900,%r7073,%r413,%r2024,%r5835;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5900;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5906, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r5906,%r7072;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5910,%r6914,%r5907;
}
	// end inline asm
	@%p12 bra 	$L__BB0_579;
	bra.uni 	$L__BB0_578;

$L__BB0_579:
	// begin inline asm
	{neg.f16x2 %r7332,%r5192;
}
	// end inline asm
	bra.uni 	$L__BB0_580;

$L__BB0_578:
	// begin inline asm
	{mul.f16x2 %r7332,%r6915,%r5907;
}
	// end inline asm

$L__BB0_580:
	mov.u32 	%r5925, 31;
	mov.u32 	%r5949, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5923,%r7332,%r5925,%r2024,%r5949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5928,%r5910,%r5923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5931,%r7064,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5934,%r5931,%r5928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5937,%r6819,%r5934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7021,%r5192,%r5937;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7075;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5945,%r7075,%r413,%r2024,%r5949;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5945;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5951, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r5951,%r7074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5955,%r6914,%r5952;
}
	// end inline asm
	mov.u32 	%r7333, %r5199;
	@%p12 bra 	$L__BB0_582;

	// begin inline asm
	{mul.f16x2 %r7333,%r6915,%r5952;
}
	// end inline asm

$L__BB0_582:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5966,%r7333,%r5925,%r2024,%r5949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5955,%r5966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5974,%r7060,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r5971,%r5974;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5980,%r6819,%r5977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7025,%r5199,%r5980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r7062,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5989,%r7068,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5992,%r5986,%r5989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5995,%r6819,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5998,%r5206,%r5995;
}
	// end inline asm
	selp.b32 	%r7018, %r5206, %r5998, %p12;
	// begin inline asm
	{sub.f16x2 %r6001,%r7066,%r7067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6004,%r6910,%r6001;
}
	// end inline asm
	@%p12 bra 	$L__BB0_584;
	bra.uni 	$L__BB0_583;

$L__BB0_584:
	// begin inline asm
	{neg.f16x2 %r7334,%r5210;
}
	// end inline asm
	bra.uni 	$L__BB0_585;

$L__BB0_583:
	// begin inline asm
	{mul.f16x2 %r7334,%r6911,%r6001;
}
	// end inline asm

$L__BB0_585:
	mov.u32 	%r6017, 31;
	mov.u32 	%r6019, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6015,%r7334,%r6017,%r2024,%r6019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6020,%r6004,%r6015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6023,%r1139,%r7065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6026,%r6023,%r6020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6029,%r6819,%r6026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7010,%r5210,%r6029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r7068,%r7069;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r6910,%r6035;
}
	// end inline asm
	mov.u32 	%r7335, %r5217;
	@%p12 bra 	$L__BB0_587;

	// begin inline asm
	{mul.f16x2 %r7335,%r6911,%r6035;
}
	// end inline asm

$L__BB0_587:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6047,%r7335,%r6017,%r2024,%r6019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6052,%r6038,%r6047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r7059,%r7065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6058,%r6052,%r6055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6061,%r6819,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7014,%r5217,%r6061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r7181,%r7067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6070,%r7184,%r7069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r6067,%r6070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6076,%r6819,%r6073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6079,%r5224,%r6076;
}
	// end inline asm
	selp.b32 	%r7012, %r5224, %r6079, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7067;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6084,%r7067,%r413,%r2024,%r6019;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6084;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6090, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6090,%r7066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r6914,%r6091;
}
	// end inline asm
	@%p12 bra 	$L__BB0_589;
	bra.uni 	$L__BB0_588;

$L__BB0_589:
	// begin inline asm
	{neg.f16x2 %r7336,%r5213;
}
	// end inline asm
	bra.uni 	$L__BB0_590;

$L__BB0_588:
	// begin inline asm
	{mul.f16x2 %r7336,%r6915,%r6091;
}
	// end inline asm

$L__BB0_590:
	mov.u32 	%r6109, 31;
	mov.u32 	%r6133, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6107,%r7336,%r6109,%r2024,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6112,%r6094,%r6107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6115,%r1140,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6118,%r6115,%r6112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6121,%r6819,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7009,%r5213,%r6121;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7069;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6129,%r7069,%r413,%r2024,%r6133;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6129;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6135, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r6135,%r7068;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6139,%r6914,%r6136;
}
	// end inline asm
	mov.u32 	%r7337, %r5220;
	@%p12 bra 	$L__BB0_592;

	// begin inline asm
	{mul.f16x2 %r7337,%r6915,%r6136;
}
	// end inline asm

$L__BB0_592:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6150,%r7337,%r6109,%r2024,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6155,%r6139,%r6150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r7058,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r6155,%r6158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r6819,%r6161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7013,%r5220,%r6164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6170,%r7179,%r7066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6173,%r7183,%r7068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6176,%r6170,%r6173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6179,%r6819,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6182,%r5227,%r6179;
}
	// end inline asm
	selp.b32 	%r7006, %r5227, %r6182, %p12;
	// begin inline asm
	{sub.f16x2 %r6185,%r7183,%r7184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6188,%r6910,%r6185;
}
	// end inline asm
	mov.u32 	%r7338, %r5231;
	@%p12 bra 	$L__BB0_594;

	// begin inline asm
	{mul.f16x2 %r7338,%r6911,%r6185;
}
	// end inline asm

$L__BB0_594:
	mov.u32 	%r6199, 31;
	mov.u32 	%r6223, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6197,%r7338,%r6199,%r2024,%r6223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6202,%r6188,%r6197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6205,%r7178,%r1139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6208,%r6202,%r6205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6211,%r6819,%r6208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7003,%r5231,%r6211;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7184;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6219,%r7184,%r413,%r2024,%r6223;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6219;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6225, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6226,%r6225,%r7183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6229,%r6914,%r6226;
}
	// end inline asm
	mov.u32 	%r7339, %r5234;
	@%p12 bra 	$L__BB0_596;

	// begin inline asm
	{mul.f16x2 %r7339,%r6915,%r6226;
}
	// end inline asm

$L__BB0_596:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6240,%r7339,%r6199,%r2024,%r6223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6245,%r6229,%r6240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6248,%r7177,%r1140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6251,%r6245,%r6248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6254,%r6819,%r6251;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7002,%r5234,%r6254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6260,%r7194,%r7196;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6263,%r6910,%r6260;
}
	// end inline asm
	@%p12 bra 	$L__BB0_598;
	bra.uni 	$L__BB0_597;

$L__BB0_598:
	// begin inline asm
	{neg.f16x2 %r7340,%r5238;
}
	// end inline asm
	bra.uni 	$L__BB0_599;

$L__BB0_597:
	// begin inline asm
	{mul.f16x2 %r7340,%r6911,%r6260;
}
	// end inline asm

$L__BB0_599:
	mov.u32 	%r6276, 31;
	mov.u32 	%r6300, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6274,%r7340,%r6276,%r2024,%r6300;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6279,%r6263,%r6274;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6282,%r7061,%r7195;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6285,%r6282,%r6279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6288,%r6819,%r6285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6999,%r5238,%r6288;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7196;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6296,%r7196,%r413,%r2024,%r6300;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6296;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6302, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r6302,%r7194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6306,%r6914,%r6303;
}
	// end inline asm
	@%p12 bra 	$L__BB0_601;
	bra.uni 	$L__BB0_600;

$L__BB0_601:
	// begin inline asm
	{neg.f16x2 %r7341,%r5241;
}
	// end inline asm
	bra.uni 	$L__BB0_602;

$L__BB0_600:
	// begin inline asm
	{mul.f16x2 %r7341,%r6915,%r6303;
}
	// end inline asm

$L__BB0_602:
	mov.u32 	%r6321, 31;
	mov.u32 	%r6323, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6319,%r7341,%r6321,%r2024,%r6323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6324,%r6306,%r6319;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6327,%r7060,%r7193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6330,%r6327,%r6324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6333,%r6819,%r6330;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6998,%r5241,%r6333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6339,%r7062,%r7063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6342,%r6910,%r6339;
}
	// end inline asm
	@%p12 bra 	$L__BB0_604;
	bra.uni 	$L__BB0_603;

$L__BB0_604:
	// begin inline asm
	{neg.f16x2 %r7342,%r5245;
}
	// end inline asm
	bra.uni 	$L__BB0_605;

$L__BB0_603:
	// begin inline asm
	{mul.f16x2 %r7342,%r6911,%r6339;
}
	// end inline asm

$L__BB0_605:
	mov.u32 	%r6355, 31;
	mov.u32 	%r6357, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6353,%r7342,%r6355,%r2024,%r6357;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6358,%r6342,%r6353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6361,%r7059,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6364,%r6361,%r6358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6367,%r6819,%r6364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6991,%r5245,%r6367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6373,%r7191,%r7192;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6376,%r6910,%r6373;
}
	// end inline asm
	mov.u32 	%r7343, %r5252;
	@%p12 bra 	$L__BB0_607;

	// begin inline asm
	{mul.f16x2 %r7343,%r6911,%r6373;
}
	// end inline asm

$L__BB0_607:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6385,%r7343,%r6355,%r2024,%r6357;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6390,%r6376,%r6385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6393,%r7189,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6396,%r6390,%r6393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6399,%r6819,%r6396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6995,%r5252,%r6399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r7176,%r7063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r7182,%r7192;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6411,%r6405,%r6408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6414,%r6819,%r6411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6417,%r5259,%r6414;
}
	// end inline asm
	selp.b32 	%r6993, %r5259, %r6417, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7063;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6422,%r7063,%r413,%r2024,%r6357;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6422;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6428, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6429,%r6428,%r7062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6432,%r6914,%r6429;
}
	// end inline asm
	@%p12 bra 	$L__BB0_609;
	bra.uni 	$L__BB0_608;

$L__BB0_609:
	// begin inline asm
	{neg.f16x2 %r7344,%r5248;
}
	// end inline asm
	bra.uni 	$L__BB0_610;

$L__BB0_608:
	// begin inline asm
	{mul.f16x2 %r7344,%r6915,%r6429;
}
	// end inline asm

$L__BB0_610:
	mov.u32 	%r6447, 31;
	mov.u32 	%r6471, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6445,%r7344,%r6447,%r2024,%r6471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6450,%r6432,%r6445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6453,%r7058,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6456,%r6453,%r6450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6459,%r6819,%r6456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6990,%r5248,%r6459;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7192;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6467,%r7192,%r413,%r2024,%r6471;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6467;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6473, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6474,%r6473,%r7191;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6477,%r6914,%r6474;
}
	// end inline asm
	mov.u32 	%r7345, %r5255;
	@%p12 bra 	$L__BB0_612;

	// begin inline asm
	{mul.f16x2 %r7345,%r6915,%r6474;
}
	// end inline asm

$L__BB0_612:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6488,%r7345,%r6447,%r2024,%r6471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6477,%r6488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6496,%r7187,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6499,%r6493,%r6496;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6502,%r6819,%r6499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6994,%r5255,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r7175,%r7062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6511,%r7180,%r7191;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6514,%r6508,%r6511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6517,%r6819,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6520,%r5262,%r6517;
}
	// end inline asm
	selp.b32 	%r6988, %r5262, %r6520, %p12;
	// begin inline asm
	{sub.f16x2 %r6523,%r7179,%r7181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6526,%r6910,%r6523;
}
	// end inline asm
	@%p12 bra 	$L__BB0_614;
	bra.uni 	$L__BB0_613;

$L__BB0_614:
	// begin inline asm
	{neg.f16x2 %r7346,%r5266;
}
	// end inline asm
	bra.uni 	$L__BB0_615;

$L__BB0_613:
	// begin inline asm
	{mul.f16x2 %r7346,%r6911,%r6523;
}
	// end inline asm

$L__BB0_615:
	mov.u32 	%r6539, 31;
	mov.u32 	%r6541, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6537,%r7346,%r6539,%r2024,%r6541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6542,%r6526,%r6537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6545,%r7178,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6548,%r6545,%r6542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6551,%r6819,%r6548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6983,%r5266,%r6551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6557,%r7180,%r7182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6560,%r6910,%r6557;
}
	// end inline asm
	mov.u32 	%r7347, %r5273;
	@%p12 bra 	$L__BB0_617;

	// begin inline asm
	{mul.f16x2 %r7347,%r6911,%r6557;
}
	// end inline asm

$L__BB0_617:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6569,%r7347,%r6539,%r2024,%r6541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r6560,%r6569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6577,%r7174,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6580,%r6574,%r6577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6583,%r6819,%r6580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6985,%r5273,%r6583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7181;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6591,%r7181,%r413,%r2024,%r6541;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6591;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6597, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6598,%r6597,%r7179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6601,%r6914,%r6598;
}
	// end inline asm
	@%p12 bra 	$L__BB0_619;
	bra.uni 	$L__BB0_618;

$L__BB0_619:
	// begin inline asm
	{neg.f16x2 %r7348,%r5269;
}
	// end inline asm
	bra.uni 	$L__BB0_620;

$L__BB0_618:
	// begin inline asm
	{mul.f16x2 %r7348,%r6915,%r6598;
}
	// end inline asm

$L__BB0_620:
	mov.u32 	%r6616, 31;
	mov.u32 	%r6640, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6614,%r7348,%r6616,%r2024,%r6640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6619,%r6601,%r6614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6622,%r7177,%r7058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6625,%r6622,%r6619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6628,%r6819,%r6625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6982,%r5269,%r6628;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7182;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6636,%r7182,%r413,%r2024,%r6640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6636;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6642, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6643,%r6642,%r7180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6646,%r6914,%r6643;
}
	// end inline asm
	mov.u32 	%r7349, %r5276;
	@%p12 bra 	$L__BB0_622;

	// begin inline asm
	{mul.f16x2 %r7349,%r6915,%r6643;
}
	// end inline asm

$L__BB0_622:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6657,%r7349,%r6616,%r2024,%r6640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6662,%r6646,%r6657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6665,%r7173,%r7058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6668,%r6662,%r6665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6671,%r6819,%r6668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6984,%r5276,%r6671;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6677,%r7175,%r7176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6680,%r6910,%r6677;
}
	// end inline asm
	@%p12 bra 	$L__BB0_624;
	bra.uni 	$L__BB0_623;

$L__BB0_624:
	// begin inline asm
	{neg.f16x2 %r7350,%r5280;
}
	// end inline asm
	bra.uni 	$L__BB0_625;

$L__BB0_623:
	// begin inline asm
	{mul.f16x2 %r7350,%r6911,%r6677;
}
	// end inline asm

$L__BB0_625:
	mov.u32 	%r6693, 31;
	mov.u32 	%r6717, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6691,%r7350,%r6693,%r2024,%r6717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6696,%r6680,%r6691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6699,%r7174,%r7189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6702,%r6699,%r6696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6705,%r6819,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6977,%r5280,%r6705;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7176;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6713,%r7176,%r413,%r2024,%r6717;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6713;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6719, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6720,%r6719,%r7175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6723,%r6914,%r6720;
}
	// end inline asm
	@%p12 bra 	$L__BB0_627;
	bra.uni 	$L__BB0_626;

$L__BB0_627:
	// begin inline asm
	{neg.f16x2 %r7351,%r5283;
}
	// end inline asm
	bra.uni 	$L__BB0_628;

$L__BB0_626:
	// begin inline asm
	{mul.f16x2 %r7351,%r6915,%r6720;
}
	// end inline asm

$L__BB0_628:
	setp.ne.s32 	%p330, %r23, %r1918;
	mov.u32 	%r6738, 31;
	mov.u32 	%r6740, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6736,%r7351,%r6738,%r2024,%r6740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6741,%r6723,%r6736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6744,%r7173,%r7187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6747,%r6744,%r6741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6750,%r6819,%r6747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6976,%r5283,%r6750;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p330 bra 	$L__BB0_630;

	mad.lo.s32 	%r6759, %r633, %r1519, %r26;
	mad.lo.s32 	%r6760, %r6759, 768, 384;
	mul.lo.s32 	%r6761, %r6760, %r1517;
	mad.lo.s32 	%r6763, %r24, 384, %r6761;
	add.s32 	%r6764, %r6763, -128;
	mul.wide.s32 	%rd540, %r6764, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7037, %r7036, %r7032, %r7031};
	st.global.v4.u32 	[%rd543+1024], {%r7053, %r7046, %r7056, %r7055};
	st.global.v4.u32 	[%rd543+1536], {%r7051, %r7050, %r7049, %r7044};

$L__BB0_630:
	setp.ne.s32 	%p331, %r24, %r1923;
	@%p331 bra 	$L__BB0_633;

	not.b32 	%r6811, %r23;
	add.s32 	%r6810, %r1516, %r6811;
	mad.lo.s32 	%r6766, %r634, %r1518, %r25;
	mad.lo.s32 	%r6772, %r6810, 384, %r52;
	mad.lo.s32 	%r6773, %r6766, %r1573, %r6772;
	mad.lo.s32 	%r6776, %r1575, %r51, %r6773;
	mul.wide.s32 	%rd544, %r6776, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7051, %r7050, %r7049, %r7044};
	st.global.v4.u32 	[%rd41+512], {%r7042, %r7041, %r7010, %r7009};
	st.global.v4.u32 	[%rd41+1024], {%r7040, %r7038, %r7003, %r7002};
	@%p197 bra 	$L__BB0_633;

	st.global.v4.u32 	[%rd41+1536], {%r7288, %r7287, %r7290, %r7289};

$L__BB0_633:
	rem.s32 	%r6777, %r7084, %r1520;
	setp.eq.s32 	%p324, %r6777, 0;
	@%p324 bra 	$L__BB0_635;

	bar.sync 	0;
	bra.uni 	$L__BB0_642;

$L__BB0_635:
	@%p147 bra 	$L__BB0_637;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_637:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_641;

	membar.gl;
	setp.eq.s32 	%p327, %r407, %r408;
	mov.u32 	%r6793, -2147483647;
	sub.s32 	%r6794, %r6793, %r406;
	selp.b32 	%r6782, %r6794, 1, %p327;
	// begin inline asm
	atom.add.release.gpu.u32 %r6781,[%rd25],%r6782;
	// end inline asm

$L__BB0_639:
	ld.volatile.u32 	%r6795, [%rd25];
	xor.b32  	%r6796, %r6795, %r6781;
	setp.gt.s32 	%p328, %r6796, -1;
	@%p328 bra 	$L__BB0_639;

	// begin inline asm
	ld.acquire.gpu.u32 %r6797,[%rd25];
	// end inline asm

$L__BB0_641:
	bar.sync 	0;

$L__BB0_642:
	setp.lt.s32 	%p329, %r1253, %r31;
	mov.u32 	%r6956, %r7291;
	mov.u32 	%r6957, %r7292;
	mov.u32 	%r6958, %r7277;
	mov.u32 	%r6959, %r7278;
	mov.u32 	%r6960, %r7279;
	mov.u32 	%r6961, %r7280;
	mov.u32 	%r6962, %r7293;
	mov.u32 	%r6963, %r7294;
	mov.u32 	%r6964, %r7295;
	mov.u32 	%r6965, %r7296;
	mov.u32 	%r6966, %r7297;
	mov.u32 	%r6967, %r7298;
	mov.u32 	%r6968, %r7283;
	mov.u32 	%r6969, %r7284;
	mov.u32 	%r6970, %r7285;
	mov.u32 	%r6971, %r7286;
	mov.u32 	%r6972, %r7299;
	mov.u32 	%r6973, %r7300;
	mov.u32 	%r6974, %r7301;
	mov.u32 	%r6975, %r7302;
	mov.u32 	%r7004, %r478;
	mov.u32 	%r7005, %r7221;
	mov.u32 	%r7008, %r479;
	mov.u32 	%r7011, %r7223;
	mov.u32 	%r7016, %r484;
	mov.u32 	%r7020, %r487;
	mov.u32 	%r7028, %r7228;
	mov.u32 	%r7033, %r7230;
	mov.u32 	%r7039, %r505;
	mov.u32 	%r7043, %r513;
	mov.u32 	%r7045, %r515;
	mov.u32 	%r7048, %r517;
	mov.u32 	%r7052, %r521;
	mov.u32 	%r7057, %r525;
	mov.u32 	%r7084, %r1253;
	@%p329 bra 	$L__BB0_302;

$L__BB0_643:
	ret;

}

