//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<504>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<553>;
	.reg .b32 	%r<7532>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<560>;


	mov.b64 	%rd46, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd46;
	ld.param.v2.u32 	{%r1556, %r1557}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1558, %r1559}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1560, %r1561}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1562, %r1563}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1564, %r1565}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1566, %r1567}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1568, %r1569}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1570, %r1571}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1572, %r1573}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1574, %r1575}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1576, 32;
	sub.s32 	%r39, %r1576, %r1563;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p17, %r39, %r40;
	add.s32 	%r1577, %r1569, -1;
	mad.lo.s32 	%r1578, %r1577, %r1568, %r1567;
	add.s32 	%r1579, %r1562, %r1561;
	add.s32 	%r1580, %r1579, %r1578;
	add.s32 	%r1581, %r1580, 1;
	mul.lo.s32 	%r1582, %r1556, %r1558;
	shl.b32 	%r41, %r1582, 1;
	shl.b32 	%r1583, %r1582, 2;
	div.s32 	%r1584, %r1581, %r1583;
	add.s32 	%r1585, %r1584, 1;
	mul.lo.s32 	%r1586, %r1585, %r1562;
	mul.lo.s32 	%r1587, %r1557, %r1559;
	shl.b32 	%r42, %r1587, 1;
	div.s32 	%r1588, %r1586, %r42;
	add.s32 	%r1589, %r1588, 1;
	mul.lo.s32 	%r43, %r1589, %r1561;
	@%p17 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6999, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6999, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd47, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd47;
	mad.lo.s32 	%r1592, %r1558, %r38, %r37;
	mad.lo.s32 	%r1593, %r1592, %r1557, %r36;
	mad.lo.s32 	%r1594, %r1593, %r1556, %r35;
	shl.b32 	%r47, %r1594, 5;
	add.s32 	%r7004, %r47, %r40;
	mul.lo.s32 	%r1595, %r1587, %r1582;
	shl.b32 	%r51, %r1595, 5;
	sub.s32 	%r52, %r1571, %r1570;
	mul.lo.s32 	%r1596, %r1569, %r52;
	sub.s32 	%r53, %r1573, %r1572;
	mul.lo.s32 	%r1597, %r1596, %r53;
	sub.s32 	%r54, %r1575, %r1574;
	mul.lo.s32 	%r1598, %r1597, %r54;
	mul.lo.s32 	%r55, %r1598, 3;
	setp.ge.s32 	%p18, %r7004, %r55;
	@%p18 bra 	$L__BB0_10;

	not.b32 	%r1599, %r40;
	add.s32 	%r1600, %r55, %r1599;
	sub.s32 	%r1601, %r1600, %r47;
	mul.lo.s32 	%r1602, %r1587, %r1556;
	mul.lo.s32 	%r1603, %r1602, %r1558;
	shl.b32 	%r1604, %r1603, 5;
	div.u32 	%r56, %r1601, %r1604;
	add.s32 	%r1605, %r56, 1;
	and.b32  	%r7001, %r1605, 3;
	setp.eq.s32 	%p19, %r7001, 0;
	mov.u32 	%r7002, %r7004;
	@%p19 bra 	$L__BB0_7;

	mov.u32 	%r7002, %r7004;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd48, %r7002, 4;
	add.s64 	%rd49, %rd2, %rd48;
	mov.u32 	%r1606, 0;
	st.global.u32 	[%rd49], %r1606;
	add.s32 	%r7002, %r7002, %r51;
	add.s32 	%r7001, %r7001, -1;
	setp.ne.s32 	%p20, %r7001, 0;
	@%p20 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p21, %r56, 3;
	@%p21 bra 	$L__BB0_10;

	mul.wide.s32 	%rd52, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd50, %r7002, 4;
	add.s64 	%rd51, %rd2, %rd50;
	mov.u32 	%r1607, 0;
	st.global.u32 	[%rd51], %r1607;
	add.s64 	%rd53, %rd51, %rd52;
	st.global.u32 	[%rd53], %r1607;
	add.s32 	%r1608, %r7002, %r51;
	add.s32 	%r1609, %r1608, %r51;
	add.s64 	%rd54, %rd53, %rd52;
	st.global.u32 	[%rd54], %r1607;
	add.s32 	%r1610, %r1609, %r51;
	add.s64 	%rd55, %rd54, %rd52;
	st.global.u32 	[%rd55], %r1607;
	add.s32 	%r7002, %r1610, %r51;
	setp.lt.s32 	%p22, %r7002, %r55;
	@%p22 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd56, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd56;
	sub.s32 	%r1611, %r1562, %r41;
	div.s32 	%r1612, %r1611, %r42;
	mul.lo.s32 	%r1613, %r1612, %r1561;
	sub.s32 	%r65, %r1613, %r41;
	sub.s32 	%r1614, %r1561, %r42;
	mul.lo.s32 	%r1615, %r1614, %r1558;
	mul.lo.s32 	%r66, %r1556, 384;
	add.s32 	%r1616, %r66, %r66;
	add.s32 	%r1617, %r1616, 128;
	mul.lo.s32 	%r1619, %r1587, 768;
	mul.lo.s32 	%r1620, %r1615, %r1617;
	mad.lo.s32 	%r67, %r1619, %r65, %r1620;
	bra.uni 	$L__BB0_11;

$L__BB0_850:
	mov.f32 	%f552, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f552;
  cvt.rn.f16.f32 high, %f552;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd553, %r7004, 4;
	add.s64 	%rd554, %rd3, %rd553;
	st.global.u32 	[%rd554], %r6960;
	add.s32 	%r7004, %r7004, %r51;

$L__BB0_11:
	setp.lt.s32 	%p23, %r7004, %r67;
	@%p23 bra 	$L__BB0_850;

	ld.param.u64 	%rd57, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd57;
	ld.param.u64 	%rd58, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd58;
	mad.lo.s32 	%r7042, %r1556, %r37, %r35;
	mul.lo.s32 	%r71, %r1557, %r38;
	add.s32 	%r72, %r71, %r36;
	setp.ge.s32 	%p24, %r7042, %r1561;
	@%p24 bra 	$L__BB0_50;

	setp.gt.s32 	%p25, %r39, %r40;
	add.s32 	%r73, %r1561, -4;
	add.s32 	%r74, %r1562, -4;
	mov.u32 	%r1621, 31;
	sub.s32 	%r1622, %r1621, %r40;
	selp.b32 	%r1623, %r40, %r1622, %p25;
	shl.b32 	%r1624, %r1623, 2;
	mov.u32 	%r1625, 2;
	sub.s32 	%r75, %r1624, %r1564;
	shl.b32 	%r1626, %r1563, 2;
	mov.u32 	%r1627, 128;
	sub.s32 	%r76, %r1627, %r1626;
	add.s32 	%r77, %r1571, -1;
	add.s32 	%r78, %r1573, -1;
	add.s32 	%r79, %r1575, -1;
	sub.s32 	%r1628, %r1625, %r1564;
	add.s32 	%r80, %r1628, %r1624;
	mul.lo.s32 	%r1629, %r1562, %r1561;
	shl.b32 	%r81, %r1629, 6;
	add.s32 	%r82, %r1561, -1;
	shl.b32 	%r83, %r40, 1;
	or.b32  	%r84, %r83, 1;
	add.s32 	%r85, %r75, 1;
	add.s32 	%r86, %r80, 1;
	shr.u32 	%r1630, %r84, 31;
	add.s32 	%r1631, %r84, %r1630;
	shr.s32 	%r88, %r1631, 1;
	and.b32  	%r1632, %r1631, -2;
	sub.s32 	%r1633, %r84, %r1632;
	add.s32 	%r87, %r1633, %r81;
	mov.u32 	%r7005, %r7042;

$L__BB0_14:
	setp.ge.s32 	%p26, %r72, %r1562;
	@%p26 bra 	$L__BB0_49;

	setp.lt.s32 	%p27, %r7005, 4;
	setp.ge.s32 	%p28, %r7005, %r73;
	or.pred  	%p1, %p27, %p28;
	setp.gt.s32 	%p29, %r1571, %r7005;
	selp.b32 	%r1634, %r7005, %r77, %p29;
	setp.gt.s32 	%p30, %r1570, %r7005;
	selp.b32 	%r1635, %r1570, %r1634, %p30;
	sub.s32 	%r1636, %r1635, %r1570;
	add.s32 	%r90, %r82, %r7005;
	mul.lo.s32 	%r91, %r1636, %r53;
	add.s32 	%r1637, %r1636, %r52;
	mul.lo.s32 	%r92, %r1637, %r53;
	add.s32 	%r1638, %r1637, %r52;
	mul.lo.s32 	%r93, %r1638, %r53;
	mov.u32 	%r7006, %r72;

$L__BB0_16:
	setp.lt.s32 	%p31, %r7006, 4;
	or.pred  	%p32, %p1, %p31;
	setp.ge.s32 	%p33, %r7006, %r74;
	or.pred  	%p2, %p33, %p32;
	setp.gt.s32 	%p34, %r1573, %r7006;
	selp.b32 	%r1639, %r7006, %r78, %p34;
	setp.gt.s32 	%p35, %r1572, %r7006;
	selp.b32 	%r1640, %r1572, %r1639, %p35;
	mul.lo.s32 	%r95, %r7006, %r1561;
	add.s32 	%r96, %r95, %r7005;
	shl.b32 	%r97, %r96, 6;
	sub.s32 	%r98, %r1640, %r1572;
	shl.b32 	%r1641, %r96, 5;
	add.s32 	%r1642, %r1641, %r40;
	shl.b32 	%r1643, %r1642, 2;
	add.s32 	%r1644, %r81, %r1643;
	mul.wide.s32 	%rd59, %r1644, 4;
	add.s64 	%rd7, %rd6, %rd59;
	@%p2 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_17;

$L__BB0_20:
	mov.f32 	%f44, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r1662, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1662;
	bra.uni 	$L__BB0_21;

$L__BB0_17:
	@%p25 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	rem.s32 	%r1647, %r75, %r76;
	add.s32 	%r1648, %r1647, %r76;
	rem.s32 	%r1649, %r1648, %r76;
	rem.s32 	%r1650, %r80, %r76;
	add.s32 	%r1651, %r1650, %r76;
	rem.s32 	%r1652, %r1651, %r76;
	add.s32 	%r1653, %r98, %r91;
	mul.lo.s32 	%r1654, %r1653, %r54;
	sub.s32 	%r1655, %r1654, %r1574;
	setp.gt.s32 	%p37, %r1575, %r1649;
	selp.b32 	%r1656, %r1649, %r79, %p37;
	setp.gt.s32 	%p38, %r1574, %r1649;
	selp.b32 	%r1657, %r1574, %r1656, %p38;
	add.s32 	%r1658, %r1655, %r1657;
	mul.wide.s32 	%rd60, %r1658, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f41, [%rd61];
	setp.gt.s32 	%p39, %r1575, %r1652;
	selp.b32 	%r1659, %r1652, %r79, %p39;
	setp.gt.s32 	%p40, %r1574, %r1652;
	selp.b32 	%r1660, %r1574, %r1659, %p40;
	add.s32 	%r1661, %r1655, %r1660;
	mul.wide.s32 	%rd62, %r1661, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f42, [%rd63];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r1646, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1646;
	bra.uni 	$L__BB0_21;

$L__BB0_18:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r1645, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1645;

$L__BB0_21:
	add.s32 	%r1663, %r83, %r97;
	mul.wide.s32 	%rd64, %r1663, 4;
	add.s64 	%rd8, %rd6, %rd64;
	@%p2 bra 	$L__BB0_25;
	bra.uni 	$L__BB0_22;

$L__BB0_25:
	mov.f32 	%f50, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f50;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r1681, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1681;
	bra.uni 	$L__BB0_26;

$L__BB0_22:
	@%p25 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	rem.s32 	%r1666, %r75, %r76;
	add.s32 	%r1667, %r1666, %r76;
	rem.s32 	%r1668, %r1667, %r76;
	rem.s32 	%r1669, %r80, %r76;
	add.s32 	%r1670, %r1669, %r76;
	rem.s32 	%r1671, %r1670, %r76;
	add.s32 	%r1672, %r98, %r92;
	mul.lo.s32 	%r1673, %r1672, %r54;
	sub.s32 	%r1674, %r1673, %r1574;
	setp.gt.s32 	%p42, %r1575, %r1668;
	selp.b32 	%r1675, %r1668, %r79, %p42;
	setp.gt.s32 	%p43, %r1574, %r1668;
	selp.b32 	%r1676, %r1574, %r1675, %p43;
	add.s32 	%r1677, %r1674, %r1676;
	mul.wide.s32 	%rd65, %r1677, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f47, [%rd66];
	setp.gt.s32 	%p44, %r1575, %r1671;
	selp.b32 	%r1678, %r1671, %r79, %p44;
	setp.gt.s32 	%p45, %r1574, %r1671;
	selp.b32 	%r1679, %r1574, %r1678, %p45;
	add.s32 	%r1680, %r1674, %r1679;
	mul.wide.s32 	%rd67, %r1680, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f48, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r1665, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1665;
	bra.uni 	$L__BB0_26;

$L__BB0_23:
	mov.f32 	%f46, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f46;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r1664, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1664;

$L__BB0_26:
	@%p2 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_27;

$L__BB0_31:
	mov.f32 	%f56, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r1706, {low,high};}

	// end inline asm
	rem.s32 	%r1707, %r90, %r1561;
	add.s32 	%r1708, %r1707, %r95;
	shl.b32 	%r1709, %r1708, 5;
	add.s32 	%r1710, %r1709, %r40;
	shl.b32 	%r1711, %r1710, 2;
	add.s32 	%r1712, %r81, %r1711;
	add.s32 	%r1713, %r1712, 2;
	mul.wide.s32 	%rd75, %r1713, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r1706;
	bra.uni 	$L__BB0_32;

$L__BB0_27:
	@%p25 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_29:
	rem.s32 	%r1684, %r75, %r76;
	add.s32 	%r1685, %r1684, %r76;
	rem.s32 	%r1686, %r1685, %r76;
	rem.s32 	%r1687, %r80, %r76;
	add.s32 	%r1688, %r1687, %r76;
	rem.s32 	%r1689, %r1688, %r76;
	add.s32 	%r1690, %r98, %r93;
	mul.lo.s32 	%r1691, %r1690, %r54;
	sub.s32 	%r1692, %r1691, %r1574;
	setp.gt.s32 	%p47, %r1575, %r1686;
	selp.b32 	%r1693, %r1686, %r79, %p47;
	setp.gt.s32 	%p48, %r1574, %r1686;
	selp.b32 	%r1694, %r1574, %r1693, %p48;
	add.s32 	%r1695, %r1692, %r1694;
	mul.wide.s32 	%rd69, %r1695, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f53, [%rd70];
	setp.gt.s32 	%p49, %r1575, %r1689;
	selp.b32 	%r1696, %r1689, %r79, %p49;
	setp.gt.s32 	%p50, %r1574, %r1689;
	selp.b32 	%r1697, %r1574, %r1696, %p50;
	add.s32 	%r1698, %r1692, %r1697;
	mul.wide.s32 	%rd71, %r1698, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f54, [%rd72];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7007, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_30;

$L__BB0_28:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7007, {low,high};}

	// end inline asm

$L__BB0_30:
	rem.s32 	%r1699, %r90, %r1561;
	add.s32 	%r1700, %r1699, %r95;
	shl.b32 	%r1701, %r1700, 5;
	add.s32 	%r1702, %r1701, %r40;
	shl.b32 	%r1703, %r1702, 2;
	add.s32 	%r1704, %r81, %r1703;
	add.s32 	%r1705, %r1704, 2;
	mul.wide.s32 	%rd73, %r1705, 4;
	add.s64 	%rd74, %rd6, %rd73;
	st.global.u32 	[%rd74], %r7007;

$L__BB0_32:
	add.s32 	%r1715, %r1641, %r88;
	shl.b32 	%r1716, %r1715, 2;
	add.s32 	%r1717, %r87, %r1716;
	mul.wide.s32 	%rd77, %r1717, 4;
	add.s64 	%rd9, %rd6, %rd77;
	@%p2 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_33;

$L__BB0_36:
	mov.f32 	%f62, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r1735, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1735;
	bra.uni 	$L__BB0_37;

$L__BB0_33:
	@%p25 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	rem.s32 	%r1720, %r85, %r76;
	add.s32 	%r1721, %r1720, %r76;
	rem.s32 	%r1722, %r1721, %r76;
	rem.s32 	%r1723, %r86, %r76;
	add.s32 	%r1724, %r1723, %r76;
	rem.s32 	%r1725, %r1724, %r76;
	add.s32 	%r1726, %r98, %r91;
	mul.lo.s32 	%r1727, %r1726, %r54;
	sub.s32 	%r1728, %r1727, %r1574;
	setp.gt.s32 	%p52, %r1575, %r1722;
	selp.b32 	%r1729, %r1722, %r79, %p52;
	setp.gt.s32 	%p53, %r1574, %r1722;
	selp.b32 	%r1730, %r1574, %r1729, %p53;
	add.s32 	%r1731, %r1728, %r1730;
	mul.wide.s32 	%rd78, %r1731, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f59, [%rd79];
	setp.gt.s32 	%p54, %r1575, %r1725;
	selp.b32 	%r1732, %r1725, %r79, %p54;
	setp.gt.s32 	%p55, %r1574, %r1725;
	selp.b32 	%r1733, %r1574, %r1732, %p55;
	add.s32 	%r1734, %r1728, %r1733;
	mul.wide.s32 	%rd80, %r1734, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f60, [%rd81];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r1719, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1719;
	bra.uni 	$L__BB0_37;

$L__BB0_34:
	mov.f32 	%f58, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r1718, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1718;

$L__BB0_37:
	add.s32 	%r1736, %r84, %r97;
	mul.wide.s32 	%rd82, %r1736, 4;
	add.s64 	%rd10, %rd6, %rd82;
	@%p2 bra 	$L__BB0_41;
	bra.uni 	$L__BB0_38;

$L__BB0_41:
	mov.f32 	%f68, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r1754, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1754;
	bra.uni 	$L__BB0_42;

$L__BB0_38:
	@%p25 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_39;

$L__BB0_40:
	rem.s32 	%r1739, %r85, %r76;
	add.s32 	%r1740, %r1739, %r76;
	rem.s32 	%r1741, %r1740, %r76;
	rem.s32 	%r1742, %r86, %r76;
	add.s32 	%r1743, %r1742, %r76;
	rem.s32 	%r1744, %r1743, %r76;
	add.s32 	%r1745, %r98, %r92;
	mul.lo.s32 	%r1746, %r1745, %r54;
	sub.s32 	%r1747, %r1746, %r1574;
	setp.gt.s32 	%p57, %r1575, %r1741;
	selp.b32 	%r1748, %r1741, %r79, %p57;
	setp.gt.s32 	%p58, %r1574, %r1741;
	selp.b32 	%r1749, %r1574, %r1748, %p58;
	add.s32 	%r1750, %r1747, %r1749;
	mul.wide.s32 	%rd83, %r1750, 4;
	add.s64 	%rd84, %rd5, %rd83;
	ld.global.f32 	%f65, [%rd84];
	setp.gt.s32 	%p59, %r1575, %r1744;
	selp.b32 	%r1751, %r1744, %r79, %p59;
	setp.gt.s32 	%p60, %r1574, %r1744;
	selp.b32 	%r1752, %r1574, %r1751, %p60;
	add.s32 	%r1753, %r1747, %r1752;
	mul.wide.s32 	%rd85, %r1753, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f66, [%rd86];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r1738, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1738;
	bra.uni 	$L__BB0_42;

$L__BB0_39:
	mov.f32 	%f64, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r1737, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1737;

$L__BB0_42:
	@%p2 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_43;

$L__BB0_47:
	mov.f32 	%f74, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r1779, {low,high};}

	// end inline asm
	rem.s32 	%r1780, %r90, %r1561;
	add.s32 	%r1781, %r1780, %r95;
	shl.b32 	%r1782, %r1781, 5;
	add.s32 	%r1783, %r1782, %r88;
	shl.b32 	%r1784, %r1783, 2;
	add.s32 	%r1785, %r87, %r1784;
	add.s32 	%r1786, %r1785, 2;
	mul.wide.s32 	%rd93, %r1786, 4;
	add.s64 	%rd94, %rd6, %rd93;
	st.global.u32 	[%rd94], %r1779;
	bra.uni 	$L__BB0_48;

$L__BB0_43:
	@%p25 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	rem.s32 	%r1757, %r85, %r76;
	add.s32 	%r1758, %r1757, %r76;
	rem.s32 	%r1759, %r1758, %r76;
	rem.s32 	%r1760, %r86, %r76;
	add.s32 	%r1761, %r1760, %r76;
	rem.s32 	%r1762, %r1761, %r76;
	add.s32 	%r1763, %r98, %r93;
	mul.lo.s32 	%r1764, %r1763, %r54;
	sub.s32 	%r1765, %r1764, %r1574;
	setp.gt.s32 	%p62, %r1575, %r1759;
	selp.b32 	%r1766, %r1759, %r79, %p62;
	setp.gt.s32 	%p63, %r1574, %r1759;
	selp.b32 	%r1767, %r1574, %r1766, %p63;
	add.s32 	%r1768, %r1765, %r1767;
	mul.wide.s32 	%rd87, %r1768, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f71, [%rd88];
	setp.gt.s32 	%p64, %r1575, %r1762;
	selp.b32 	%r1769, %r1762, %r79, %p64;
	setp.gt.s32 	%p65, %r1574, %r1762;
	selp.b32 	%r1770, %r1574, %r1769, %p65;
	add.s32 	%r1771, %r1765, %r1770;
	mul.wide.s32 	%rd89, %r1771, 4;
	add.s64 	%rd90, %rd5, %rd89;
	ld.global.f32 	%f72, [%rd90];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7008, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f70, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7008, {low,high};}

	// end inline asm

$L__BB0_46:
	rem.s32 	%r1772, %r90, %r1561;
	add.s32 	%r1773, %r1772, %r95;
	shl.b32 	%r1774, %r1773, 5;
	add.s32 	%r1775, %r1774, %r88;
	shl.b32 	%r1776, %r1775, 2;
	add.s32 	%r1777, %r87, %r1776;
	add.s32 	%r1778, %r1777, 2;
	mul.wide.s32 	%rd91, %r1778, 4;
	add.s64 	%rd92, %rd6, %rd91;
	st.global.u32 	[%rd92], %r7008;

$L__BB0_48:
	add.s32 	%r7006, %r7006, %r1587;
	setp.lt.s32 	%p66, %r7006, %r1562;
	@%p66 bra 	$L__BB0_16;

$L__BB0_49:
	add.s32 	%r7005, %r7005, %r1582;
	setp.lt.s32 	%p67, %r7005, %r1561;
	@%p67 bra 	$L__BB0_14;

$L__BB0_50:
	ld.param.u64 	%rd95, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd95;
	ld.param.u64 	%rd96, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd96;
	@%p24 bra 	$L__BB0_134;

	shl.b32 	%r119, %r72, 1;
	mov.u64 	%rd97, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7009, %r7042;

$L__BB0_52:
	setp.ge.s32 	%p69, %r119, %r1562;
	@%p69 bra 	$L__BB0_133;

	mov.u32 	%r7010, %r119;

$L__BB0_54:
	setp.ne.s32 	%p70, %r40, 0;
	@%p70 bra 	$L__BB0_132;

	shr.u32 	%r1788, %r7010, 31;
	add.s32 	%r1789, %r7010, %r1788;
	shr.s32 	%r1790, %r1789, 1;
	mad.lo.s32 	%r1791, %r1790, %r1561, %r7009;
	shl.b32 	%r123, %r1791, 5;
	add.s32 	%r124, %r7010, -2;
	mul.lo.s32 	%r125, %r124, %r1561;
	add.s32 	%r1792, %r1562, %r124;
	mul.lo.s32 	%r126, %r1792, %r1561;
	add.s32 	%r1793, %r1792, %r1562;
	mul.lo.s32 	%r127, %r1793, %r1561;
	add.s32 	%r128, %r125, %r1561;
	add.s32 	%r129, %r7010, -1;
	add.s32 	%r1794, %r1562, %r129;
	mul.lo.s32 	%r130, %r1794, %r1561;
	add.s32 	%r1795, %r1794, %r1562;
	mul.lo.s32 	%r131, %r1795, %r1561;
	add.s32 	%r1796, %r1562, %r7010;
	mul.lo.s32 	%r132, %r1796, %r1561;
	add.s32 	%r1797, %r1796, %r1562;
	mul.lo.s32 	%r133, %r1797, %r1561;
	mul.lo.s32 	%r134, %r7010, %r1561;
	add.s32 	%r135, %r134, %r1561;
	add.s32 	%r136, %r7010, 1;
	add.s32 	%r1798, %r1562, %r136;
	mul.lo.s32 	%r137, %r1798, %r1561;
	add.s32 	%r1799, %r1798, %r1562;
	mul.lo.s32 	%r138, %r1799, %r1561;
	add.s32 	%r139, %r135, %r1561;
	add.s32 	%r140, %r7010, 2;
	add.s32 	%r1800, %r1562, %r140;
	mul.lo.s32 	%r141, %r1800, %r1561;
	add.s32 	%r1801, %r1800, %r1562;
	mul.lo.s32 	%r142, %r1801, %r1561;
	mov.u32 	%r7013, 0;
	mov.u64 	%rd557, %rd97;

$L__BB0_56:
	ld.global.nc.u32 	%r1802, [%rd557];
	cvt.rn.f64.s32 	%fd1, %r1802;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r144, %r1802, %r7009;
	setp.lt.s32 	%p71, %r144, %r1561;
	or.b32  	%r1803, %r124, %r144;
	setp.gt.s32 	%p72, %r1803, -1;
	and.pred  	%p73, %p71, %p72;
	setp.lt.s32 	%p74, %r124, %r1562;
	and.pred  	%p3, %p74, %p73;
	cvt.rn.f32.f64 	%f75, %fd3;
	add.f32 	%f76, %f75, 0f3E800000;
	abs.f32 	%f1, %f76;
	add.f32 	%f77, %f1, 0f40200000;
	setp.geu.f32 	%p75, %f77, 0f40000000;
	@%p75 bra 	$L__BB0_61;

	@%p3 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1806, %r125, %r144;
	mul.wide.s32 	%rd98, %r1806, 4;
	add.s64 	%rd99, %rd11, %rd98;
	ld.global.f32 	%f80, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7012, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7012, {low,high};}

	// end inline asm

$L__BB0_60:
	add.s32 	%r1807, %r7013, %r123;
	mul.wide.s32 	%rd100, %r1807, 4;
	add.s64 	%rd101, %rd12, %rd100;
	st.global.u32 	[%rd101], %r7012;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_61:
	cvt.rn.f32.f64 	%f81, %fd1;
	add.f32 	%f82, %f81, 0f3E800000;
	abs.f32 	%f2, %f82;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p76, %f3, 0f40000000;
	@%p76 bra 	$L__BB0_66;

	@%p3 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_63;

$L__BB0_64:
	add.s32 	%r1810, %r126, %r144;
	mul.wide.s32 	%rd102, %r1810, 4;
	add.s64 	%rd103, %rd11, %rd102;
	ld.global.f32 	%f85, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f85;
  mov.b32 %r7014, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_65;

$L__BB0_63:
	mov.f32 	%f84, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f84;
  cvt.rn.f16.f32 high, %f84;
  mov.b32 %r7014, {low,high};}

	// end inline asm

$L__BB0_65:
	add.s32 	%r1811, %r7013, %r123;
	mul.wide.s32 	%rd104, %r1811, 4;
	add.s64 	%rd105, %rd12, %rd104;
	st.global.u32 	[%rd105], %r7014;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_66:
	add.f32 	%f86, %f2, 0f40200000;
	setp.geu.f32 	%p77, %f86, 0f40000000;
	@%p77 bra 	$L__BB0_71;

	@%p3 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_68;

$L__BB0_69:
	add.s32 	%r1814, %r127, %r144;
	mul.wide.s32 	%rd106, %r1814, 4;
	add.s64 	%rd107, %rd11, %rd106;
	ld.global.f32 	%f89, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7016, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_70;

$L__BB0_68:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7016, {low,high};}

	// end inline asm

$L__BB0_70:
	add.s32 	%r1815, %r7013, %r123;
	mul.wide.s32 	%rd108, %r1815, 4;
	add.s64 	%rd109, %rd12, %rd108;
	st.global.u32 	[%rd109], %r7016;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_71:
	or.b32  	%r1816, %r129, %r144;
	setp.gt.s32 	%p78, %r1816, -1;
	and.pred  	%p80, %p71, %p78;
	setp.le.s32 	%p81, %r7010, %r1562;
	and.pred  	%p4, %p81, %p80;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p82, %f4, 0f40000000;
	@%p82 bra 	$L__BB0_76;

	@%p4 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_73;

$L__BB0_74:
	add.s32 	%r1819, %r128, %r144;
	mul.wide.s32 	%rd110, %r1819, 4;
	add.s64 	%rd111, %rd11, %rd110;
	ld.global.f32 	%f92, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f92;
  mov.b32 %r7018, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_75;

$L__BB0_73:
	mov.f32 	%f91, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f91;
  cvt.rn.f16.f32 high, %f91;
  mov.b32 %r7018, {low,high};}

	// end inline asm

$L__BB0_75:
	add.s32 	%r1820, %r7013, %r123;
	mul.wide.s32 	%rd112, %r1820, 4;
	add.s64 	%rd113, %rd12, %rd112;
	st.global.u32 	[%rd113], %r7018;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_76:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p83, %f5, 0f40000000;
	@%p83 bra 	$L__BB0_81;

	@%p4 bra 	$L__BB0_79;
	bra.uni 	$L__BB0_78;

$L__BB0_79:
	add.s32 	%r1823, %r130, %r144;
	mul.wide.s32 	%rd114, %r1823, 4;
	add.s64 	%rd115, %rd11, %rd114;
	ld.global.f32 	%f95, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f95;
  mov.b32 %r7020, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_80;

$L__BB0_78:
	mov.f32 	%f94, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f94;
  cvt.rn.f16.f32 high, %f94;
  mov.b32 %r7020, {low,high};}

	// end inline asm

$L__BB0_80:
	add.s32 	%r1824, %r7013, %r123;
	mul.wide.s32 	%rd116, %r1824, 4;
	add.s64 	%rd117, %rd12, %rd116;
	st.global.u32 	[%rd117], %r7020;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_81:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p84, %f6, 0f40000000;
	@%p84 bra 	$L__BB0_86;

	@%p4 bra 	$L__BB0_84;
	bra.uni 	$L__BB0_83;

$L__BB0_84:
	add.s32 	%r1827, %r131, %r144;
	mul.wide.s32 	%rd118, %r1827, 4;
	add.s64 	%rd119, %rd11, %rd118;
	ld.global.f32 	%f98, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7022, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_85;

$L__BB0_83:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7022, {low,high};}

	// end inline asm

$L__BB0_85:
	add.s32 	%r1828, %r7013, %r123;
	mul.wide.s32 	%rd120, %r1828, 4;
	add.s64 	%rd121, %rd12, %rd120;
	st.global.u32 	[%rd121], %r7022;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_86:
	or.b32  	%r1829, %r7010, %r144;
	setp.gt.s32 	%p85, %r1829, -1;
	and.pred  	%p87, %p71, %p85;
	setp.lt.s32 	%p88, %r7010, %r1562;
	and.pred  	%p5, %p88, %p87;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p89, %f7, 0f40000000;
	@%p89 bra 	$L__BB0_91;

	@%p5 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_88;

$L__BB0_89:
	add.s32 	%r1832, %r134, %r144;
	mul.wide.s32 	%rd122, %r1832, 4;
	add.s64 	%rd123, %rd11, %rd122;
	ld.global.f32 	%f101, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f101;
  mov.b32 %r7024, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_90;

$L__BB0_88:
	mov.f32 	%f100, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f100;
  cvt.rn.f16.f32 high, %f100;
  mov.b32 %r7024, {low,high};}

	// end inline asm

$L__BB0_90:
	add.s32 	%r1833, %r7013, %r123;
	mul.wide.s32 	%rd124, %r1833, 4;
	add.s64 	%rd125, %rd12, %rd124;
	st.global.u32 	[%rd125], %r7024;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_91:
	add.f32 	%f102, %f2, 0f00000000;
	setp.geu.f32 	%p90, %f102, 0f40000000;
	@%p90 bra 	$L__BB0_96;

	@%p5 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_93;

$L__BB0_94:
	add.s32 	%r1836, %r132, %r144;
	mul.wide.s32 	%rd126, %r1836, 4;
	add.s64 	%rd127, %rd11, %rd126;
	ld.global.f32 	%f105, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7026, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_95;

$L__BB0_93:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7026, {low,high};}

	// end inline asm

$L__BB0_95:
	add.s32 	%r1837, %r7013, %r123;
	mul.wide.s32 	%rd128, %r1837, 4;
	add.s64 	%rd129, %rd12, %rd128;
	st.global.u32 	[%rd129], %r7026;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_96:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p91, %f8, 0f40000000;
	@%p91 bra 	$L__BB0_101;

	@%p5 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;

$L__BB0_99:
	add.s32 	%r1840, %r133, %r144;
	mul.wide.s32 	%rd130, %r1840, 4;
	add.s64 	%rd131, %rd11, %rd130;
	ld.global.f32 	%f108, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7028, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_100;

$L__BB0_98:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7028, {low,high};}

	// end inline asm

$L__BB0_100:
	add.s32 	%r1841, %r7013, %r123;
	mul.wide.s32 	%rd132, %r1841, 4;
	add.s64 	%rd133, %rd12, %rd132;
	st.global.u32 	[%rd133], %r7028;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_101:
	or.b32  	%r1842, %r136, %r144;
	setp.gt.s32 	%p92, %r1842, -1;
	and.pred  	%p94, %p71, %p92;
	setp.lt.s32 	%p95, %r136, %r1562;
	and.pred  	%p6, %p95, %p94;
	@%p89 bra 	$L__BB0_106;

	@%p6 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_103;

$L__BB0_104:
	add.s32 	%r1845, %r135, %r144;
	mul.wide.s32 	%rd134, %r1845, 4;
	add.s64 	%rd135, %rd11, %rd134;
	ld.global.f32 	%f111, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7030, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_105;

$L__BB0_103:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7030, {low,high};}

	// end inline asm

$L__BB0_105:
	add.s32 	%r1846, %r7013, %r123;
	mul.wide.s32 	%rd136, %r1846, 4;
	add.s64 	%rd137, %rd12, %rd136;
	st.global.u32 	[%rd137], %r7030;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_106:
	@%p83 bra 	$L__BB0_111;

	@%p6 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_108;

$L__BB0_109:
	add.s32 	%r1849, %r137, %r144;
	mul.wide.s32 	%rd138, %r1849, 4;
	add.s64 	%rd139, %rd11, %rd138;
	ld.global.f32 	%f114, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7032, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_110;

$L__BB0_108:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7032, {low,high};}

	// end inline asm

$L__BB0_110:
	add.s32 	%r1850, %r7013, %r123;
	mul.wide.s32 	%rd140, %r1850, 4;
	add.s64 	%rd141, %rd12, %rd140;
	st.global.u32 	[%rd141], %r7032;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_111:
	@%p91 bra 	$L__BB0_116;

	@%p6 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_113;

$L__BB0_114:
	add.s32 	%r1853, %r138, %r144;
	mul.wide.s32 	%rd142, %r1853, 4;
	add.s64 	%rd143, %rd11, %rd142;
	ld.global.f32 	%f117, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f117;
  mov.b32 %r7034, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_115;

$L__BB0_113:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7034, {low,high};}

	// end inline asm

$L__BB0_115:
	add.s32 	%r1854, %r7013, %r123;
	mul.wide.s32 	%rd144, %r1854, 4;
	add.s64 	%rd145, %rd12, %rd144;
	st.global.u32 	[%rd145], %r7034;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_116:
	or.b32  	%r1855, %r140, %r144;
	setp.gt.s32 	%p99, %r1855, -1;
	and.pred  	%p101, %p71, %p99;
	setp.lt.s32 	%p102, %r140, %r1562;
	and.pred  	%p7, %p102, %p101;
	@%p82 bra 	$L__BB0_121;

	@%p7 bra 	$L__BB0_119;
	bra.uni 	$L__BB0_118;

$L__BB0_119:
	add.s32 	%r1858, %r139, %r144;
	mul.wide.s32 	%rd146, %r1858, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f120, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f120;
  mov.b32 %r7036, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_120;

$L__BB0_118:
	mov.f32 	%f119, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f119;
  cvt.rn.f16.f32 high, %f119;
  mov.b32 %r7036, {low,high};}

	// end inline asm

$L__BB0_120:
	add.s32 	%r1859, %r7013, %r123;
	mul.wide.s32 	%rd148, %r1859, 4;
	add.s64 	%rd149, %rd12, %rd148;
	st.global.u32 	[%rd149], %r7036;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_121:
	@%p76 bra 	$L__BB0_126;

	@%p7 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_123;

$L__BB0_124:
	add.s32 	%r1862, %r141, %r144;
	mul.wide.s32 	%rd150, %r1862, 4;
	add.s64 	%rd151, %rd11, %rd150;
	ld.global.f32 	%f123, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f123;
  mov.b32 %r7038, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_125;

$L__BB0_123:
	mov.f32 	%f122, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f122;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7038, {low,high};}

	// end inline asm

$L__BB0_125:
	add.s32 	%r1863, %r7013, %r123;
	mul.wide.s32 	%rd152, %r1863, 4;
	add.s64 	%rd153, %rd12, %rd152;
	st.global.u32 	[%rd153], %r7038;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_126:
	@%p84 bra 	$L__BB0_131;

	@%p7 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1866, %r142, %r144;
	mul.wide.s32 	%rd154, %r1866, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f126, [%rd155];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7040, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r7040, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1867, %r7013, %r123;
	mul.wide.s32 	%rd156, %r1867, 4;
	add.s64 	%rd157, %rd12, %rd156;
	st.global.u32 	[%rd157], %r7040;
	add.s32 	%r7013, %r7013, 1;

$L__BB0_131:
	add.s64 	%rd557, %rd557, 4;
	mov.u64 	%rd158, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd159, %rd158, 24;
	setp.ne.s64 	%p106, %rd557, %rd159;
	@%p106 bra 	$L__BB0_56;

$L__BB0_132:
	add.s32 	%r7010, %r7010, %r42;
	setp.lt.s32 	%p107, %r7010, %r1562;
	@%p107 bra 	$L__BB0_54;

$L__BB0_133:
	add.s32 	%r7009, %r7009, %r1582;
	setp.lt.s32 	%p108, %r7009, %r1561;
	@%p108 bra 	$L__BB0_52;

$L__BB0_134:
	setp.eq.s32 	%p109, %r1565, 1;
	ld.param.u64 	%rd160, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd160;
	ld.param.u64 	%rd161, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd161;
	@%p109 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_135;

$L__BB0_152:
	@%p24 bra 	$L__BB0_281;

	shl.b32 	%r248, %r72, 1;
	shr.u32 	%r1915, %r1566, 31;
	add.s32 	%r1916, %r1566, %r1915;
	shr.u32 	%r1917, %r1916, 1;
	and.b32  	%r249, %r1917, 1;
	mov.u64 	%rd181, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_154:
	setp.ge.s32 	%p119, %r248, %r1562;
	@%p119 bra 	$L__BB0_280;

	mov.u32 	%r7048, %r248;

$L__BB0_156:
	setp.ne.s32 	%p120, %r40, 0;
	@%p120 bra 	$L__BB0_279;

	shr.u32 	%r1919, %r7048, 31;
	add.s32 	%r1920, %r7048, %r1919;
	shr.s32 	%r1921, %r1920, 1;
	mad.lo.s32 	%r1922, %r1921, %r1561, %r7042;
	shl.b32 	%r253, %r1922, 5;
	add.s32 	%r254, %r7048, -2;
	mul.lo.s32 	%r255, %r254, %r1561;
	add.s32 	%r1923, %r1562, %r254;
	mul.lo.s32 	%r256, %r1923, %r1561;
	add.s32 	%r257, %r255, %r1561;
	add.s32 	%r258, %r7048, -1;
	add.s32 	%r1924, %r1562, %r258;
	mul.lo.s32 	%r259, %r1924, %r1561;
	add.s32 	%r1925, %r1562, %r7048;
	mul.lo.s32 	%r260, %r1925, %r1561;
	mul.lo.s32 	%r261, %r7048, %r1561;
	add.s32 	%r262, %r261, %r1561;
	add.s32 	%r263, %r7048, 1;
	add.s32 	%r1926, %r1562, %r263;
	mul.lo.s32 	%r264, %r1926, %r1561;
	add.s32 	%r265, %r262, %r1561;
	add.s32 	%r266, %r7048, 2;
	add.s32 	%r1927, %r1562, %r266;
	mul.lo.s32 	%r267, %r1927, %r1561;
	mov.u32 	%r7052, 0;
	mov.u64 	%rd558, 24;
	mov.u64 	%rd559, %rd181;

$L__BB0_158:
	ld.global.nc.u32 	%r1928, [%rd559];
	cvt.rn.f64.s32 	%fd2, %r1928;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r269, %r1928, %r7042;
	setp.lt.s32 	%p121, %r269, %r1561;
	or.b32  	%r1929, %r254, %r269;
	setp.gt.s32 	%p122, %r1929, -1;
	and.pred  	%p123, %p121, %p122;
	setp.lt.s32 	%p124, %r254, %r1562;
	and.pred  	%p8, %p124, %p123;
	cvt.rn.f32.f64 	%f143, %fd4;
	add.f32 	%f144, %f143, 0f3E800000;
	abs.f32 	%f9, %f144;
	add.f32 	%f145, %f9, 0f40200000;
	setp.geu.f32 	%p125, %f145, 0f40000000;
	@%p125 bra 	$L__BB0_170;

	@%p8 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	setp.eq.s32 	%p126, %r249, 0;
	add.s32 	%r1931, %r255, %r269;
	shl.b32 	%r1932, %r1931, 1;
	mul.wide.s32 	%rd182, %r1932, 4;
	add.s64 	%rd183, %rd15, %rd182;
	ld.global.f32 	%f10, [%rd183];
	@%p126 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_162;

$L__BB0_163:
	mov.f32 	%f151, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7050, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_160:
	mov.f32 	%f147, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f147;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7050, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_162:
	mov.f32 	%f148, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f148;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7050, {low,high};}

	// end inline asm

$L__BB0_164:
	add.s32 	%r274, %r7052, %r253;
	mul.wide.s32 	%rd184, %r274, 4;
	add.s64 	%rd185, %rd16, %rd184;
	st.global.u32 	[%rd185], %r7050;
	@%p8 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	setp.eq.s32 	%p127, %r249, 0;
	add.s32 	%r1936, %r256, %r269;
	shl.b32 	%r1937, %r1936, 1;
	mul.wide.s32 	%rd186, %r1937, 4;
	add.s64 	%rd187, %rd15, %rd186;
	ld.global.f32 	%f11, [%rd187];
	@%p127 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_167;

$L__BB0_168:
	mov.f32 	%f157, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f157;
  mov.b32 %r7051, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_165:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7051, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_167:
	mov.f32 	%f154, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7051, {low,high};}

	// end inline asm

$L__BB0_169:
	add.s32 	%r1940, %r274, 1;
	mul.wide.s32 	%rd188, %r1940, 4;
	add.s64 	%rd189, %rd16, %rd188;
	st.global.u32 	[%rd189], %r7051;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_170:
	cvt.rn.f32.f64 	%f158, %fd2;
	add.f32 	%f159, %f158, 0f3E800000;
	abs.f32 	%f12, %f159;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p128, %f13, 0f40000000;
	@%p128 bra 	$L__BB0_182;

	@%p8 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	setp.eq.s32 	%p129, %r249, 0;
	add.s32 	%r1942, %r255, %r269;
	shl.b32 	%r1943, %r1942, 1;
	or.b32  	%r1944, %r1943, 1;
	mul.wide.s32 	%rd190, %r1944, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f14, [%rd191];
	@%p129 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_174;

$L__BB0_175:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7053, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_172:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7053, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_174:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7053, {low,high};}

	// end inline asm

$L__BB0_176:
	add.s32 	%r285, %r7052, %r253;
	mul.wide.s32 	%rd192, %r285, 4;
	add.s64 	%rd193, %rd16, %rd192;
	st.global.u32 	[%rd193], %r7053;
	@%p8 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	setp.eq.s32 	%p130, %r249, 0;
	add.s32 	%r1948, %r256, %r269;
	shl.b32 	%r1949, %r1948, 1;
	or.b32  	%r1950, %r1949, 1;
	mul.wide.s32 	%rd194, %r1950, 4;
	add.s64 	%rd195, %rd15, %rd194;
	ld.global.f32 	%f15, [%rd195];
	@%p130 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_179;

$L__BB0_180:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7054, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_177:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7054, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_179:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7054, {low,high};}

	// end inline asm

$L__BB0_181:
	add.s32 	%r1953, %r285, 1;
	mul.wide.s32 	%rd196, %r1953, 4;
	add.s64 	%rd197, %rd16, %rd196;
	st.global.u32 	[%rd197], %r7054;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_182:
	or.b32  	%r1954, %r258, %r269;
	setp.gt.s32 	%p131, %r1954, -1;
	and.pred  	%p133, %p121, %p131;
	setp.le.s32 	%p134, %r7048, %r1562;
	and.pred  	%p9, %p134, %p133;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p135, %f16, 0f40000000;
	@%p135 bra 	$L__BB0_194;

	@%p9 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	setp.eq.s32 	%p136, %r249, 0;
	add.s32 	%r1956, %r257, %r269;
	shl.b32 	%r1957, %r1956, 1;
	mul.wide.s32 	%rd198, %r1957, 4;
	add.s64 	%rd199, %rd15, %rd198;
	ld.global.f32 	%f17, [%rd199];
	@%p136 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_186;

$L__BB0_187:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7056, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_184:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7056, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_186:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7056, {low,high};}

	// end inline asm

$L__BB0_188:
	add.s32 	%r296, %r7052, %r253;
	mul.wide.s32 	%rd200, %r296, 4;
	add.s64 	%rd201, %rd16, %rd200;
	st.global.u32 	[%rd201], %r7056;
	@%p9 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	setp.eq.s32 	%p137, %r249, 0;
	add.s32 	%r1961, %r259, %r269;
	shl.b32 	%r1962, %r1961, 1;
	mul.wide.s32 	%rd202, %r1962, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f18, [%rd203];
	@%p137 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_191;

$L__BB0_192:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7057, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_189:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7057, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_191:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7057, {low,high};}

	// end inline asm

$L__BB0_193:
	add.s32 	%r1965, %r296, 1;
	mul.wide.s32 	%rd204, %r1965, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7057;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_194:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p138, %f19, 0f40000000;
	@%p138 bra 	$L__BB0_206;

	@%p9 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	setp.eq.s32 	%p139, %r249, 0;
	add.s32 	%r1967, %r257, %r269;
	shl.b32 	%r1968, %r1967, 1;
	or.b32  	%r1969, %r1968, 1;
	mul.wide.s32 	%rd206, %r1969, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f20, [%rd207];
	@%p139 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;

$L__BB0_199:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7059, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_196:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7059, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_198:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7059, {low,high};}

	// end inline asm

$L__BB0_200:
	add.s32 	%r307, %r7052, %r253;
	mul.wide.s32 	%rd208, %r307, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7059;
	@%p9 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	setp.eq.s32 	%p140, %r249, 0;
	add.s32 	%r1973, %r259, %r269;
	shl.b32 	%r1974, %r1973, 1;
	or.b32  	%r1975, %r1974, 1;
	mul.wide.s32 	%rd210, %r1975, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f21, [%rd211];
	@%p140 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;

$L__BB0_204:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7060, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_201:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7060, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_203:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7060, {low,high};}

	// end inline asm

$L__BB0_205:
	add.s32 	%r1978, %r307, 1;
	mul.wide.s32 	%rd212, %r1978, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7060;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_206:
	or.b32  	%r1979, %r7048, %r269;
	setp.gt.s32 	%p141, %r1979, -1;
	and.pred  	%p143, %p121, %p141;
	setp.lt.s32 	%p144, %r7048, %r1562;
	and.pred  	%p10, %p144, %p143;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p145, %f22, 0f40000000;
	@%p145 bra 	$L__BB0_218;

	@%p10 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	setp.eq.s32 	%p146, %r249, 0;
	add.s32 	%r1981, %r261, %r269;
	shl.b32 	%r1982, %r1981, 1;
	mul.wide.s32 	%rd214, %r1982, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f23, [%rd215];
	@%p146 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;

$L__BB0_211:
	mov.f32 	%f201, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f201;
  mov.b32 %r7062, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_208:
	mov.f32 	%f197, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f197;
  cvt.rn.f16.f32 high, %f197;
  mov.b32 %r7062, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_210:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7062, {low,high};}

	// end inline asm

$L__BB0_212:
	add.s32 	%r318, %r7052, %r253;
	mul.wide.s32 	%rd216, %r318, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7062;
	@%p10 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	setp.eq.s32 	%p147, %r249, 0;
	add.s32 	%r1986, %r260, %r269;
	shl.b32 	%r1987, %r1986, 1;
	mul.wide.s32 	%rd218, %r1987, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f24, [%rd219];
	@%p147 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_215;

$L__BB0_216:
	mov.f32 	%f207, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f207;
  mov.b32 %r7063, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_213:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r7063, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_215:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7063, {low,high};}

	// end inline asm

$L__BB0_217:
	add.s32 	%r1990, %r318, 1;
	mul.wide.s32 	%rd220, %r1990, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7063;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_218:
	add.f32 	%f208, %f12, 0f00000000;
	setp.geu.f32 	%p148, %f208, 0f40000000;
	@%p148 bra 	$L__BB0_230;

	@%p10 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	setp.eq.s32 	%p149, %r249, 0;
	add.s32 	%r1992, %r261, %r269;
	shl.b32 	%r1993, %r1992, 1;
	or.b32  	%r1994, %r1993, 1;
	mul.wide.s32 	%rd222, %r1994, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f25, [%rd223];
	@%p149 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;

$L__BB0_223:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7065, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_220:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7065, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_222:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7065, {low,high};}

	// end inline asm

$L__BB0_224:
	add.s32 	%r329, %r7052, %r253;
	mul.wide.s32 	%rd224, %r329, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7065;
	@%p10 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	setp.eq.s32 	%p150, %r249, 0;
	add.s32 	%r1998, %r260, %r269;
	shl.b32 	%r1999, %r1998, 1;
	or.b32  	%r2000, %r1999, 1;
	mul.wide.s32 	%rd226, %r2000, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f26, [%rd227];
	@%p150 bra 	$L__BB0_228;
	bra.uni 	$L__BB0_227;

$L__BB0_228:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7066, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_225:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7066, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_227:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7066, {low,high};}

	// end inline asm

$L__BB0_229:
	add.s32 	%r2003, %r329, 1;
	mul.wide.s32 	%rd228, %r2003, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7066;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_230:
	or.b32  	%r2004, %r263, %r269;
	setp.gt.s32 	%p151, %r2004, -1;
	and.pred  	%p153, %p121, %p151;
	setp.lt.s32 	%p154, %r263, %r1562;
	and.pred  	%p11, %p154, %p153;
	@%p145 bra 	$L__BB0_242;

	@%p11 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	setp.eq.s32 	%p156, %r249, 0;
	add.s32 	%r2006, %r262, %r269;
	shl.b32 	%r2007, %r2006, 1;
	mul.wide.s32 	%rd230, %r2007, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f27, [%rd231];
	@%p156 bra 	$L__BB0_235;
	bra.uni 	$L__BB0_234;

$L__BB0_235:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7068, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_232:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7068, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_234:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7068, {low,high};}

	// end inline asm

$L__BB0_236:
	add.s32 	%r340, %r7052, %r253;
	mul.wide.s32 	%rd232, %r340, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7068;
	@%p11 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	setp.eq.s32 	%p157, %r249, 0;
	add.s32 	%r2011, %r264, %r269;
	shl.b32 	%r2012, %r2011, 1;
	mul.wide.s32 	%rd234, %r2012, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f28, [%rd235];
	@%p157 bra 	$L__BB0_240;
	bra.uni 	$L__BB0_239;

$L__BB0_240:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7069, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_237:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7069, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_239:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7069, {low,high};}

	// end inline asm

$L__BB0_241:
	add.s32 	%r2015, %r340, 1;
	mul.wide.s32 	%rd236, %r2015, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7069;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_242:
	@%p138 bra 	$L__BB0_254;

	@%p11 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	setp.eq.s32 	%p159, %r249, 0;
	add.s32 	%r2017, %r262, %r269;
	shl.b32 	%r2018, %r2017, 1;
	or.b32  	%r2019, %r2018, 1;
	mul.wide.s32 	%rd238, %r2019, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f29, [%rd239];
	@%p159 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_246;

$L__BB0_247:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7071, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_244:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7071, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_246:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7071, {low,high};}

	// end inline asm

$L__BB0_248:
	add.s32 	%r351, %r7052, %r253;
	mul.wide.s32 	%rd240, %r351, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7071;
	@%p11 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	setp.eq.s32 	%p160, %r249, 0;
	add.s32 	%r2023, %r264, %r269;
	shl.b32 	%r2024, %r2023, 1;
	or.b32  	%r2025, %r2024, 1;
	mul.wide.s32 	%rd242, %r2025, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f30, [%rd243];
	@%p160 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_251;

$L__BB0_252:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7072, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_249:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7072, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_251:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7072, {low,high};}

	// end inline asm

$L__BB0_253:
	add.s32 	%r2028, %r351, 1;
	mul.wide.s32 	%rd244, %r2028, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7072;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_254:
	or.b32  	%r2029, %r266, %r269;
	setp.gt.s32 	%p161, %r2029, -1;
	and.pred  	%p163, %p121, %p161;
	setp.lt.s32 	%p164, %r266, %r1562;
	and.pred  	%p12, %p164, %p163;
	@%p135 bra 	$L__BB0_266;

	@%p12 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	setp.eq.s32 	%p166, %r249, 0;
	add.s32 	%r2031, %r265, %r269;
	shl.b32 	%r2032, %r2031, 1;
	mul.wide.s32 	%rd246, %r2032, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f31, [%rd247];
	@%p166 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_258;

$L__BB0_259:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7074, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_256:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7074, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_258:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7074, {low,high};}

	// end inline asm

$L__BB0_260:
	add.s32 	%r362, %r7052, %r253;
	mul.wide.s32 	%rd248, %r362, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7074;
	@%p12 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	setp.eq.s32 	%p167, %r249, 0;
	add.s32 	%r2036, %r267, %r269;
	shl.b32 	%r2037, %r2036, 1;
	mul.wide.s32 	%rd250, %r2037, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f32, [%rd251];
	@%p167 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_263;

$L__BB0_264:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7075, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_261:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7075, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_263:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7075, {low,high};}

	// end inline asm

$L__BB0_265:
	add.s32 	%r2040, %r362, 1;
	mul.wide.s32 	%rd252, %r2040, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7075;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_266:
	@%p128 bra 	$L__BB0_278;

	@%p12 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_268;

$L__BB0_269:
	setp.eq.s32 	%p169, %r249, 0;
	add.s32 	%r2042, %r265, %r269;
	shl.b32 	%r2043, %r2042, 1;
	or.b32  	%r2044, %r2043, 1;
	mul.wide.s32 	%rd254, %r2044, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f33, [%rd255];
	@%p169 bra 	$L__BB0_271;
	bra.uni 	$L__BB0_270;

$L__BB0_271:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r7077, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_268:
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7077, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_270:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7077, {low,high};}

	// end inline asm

$L__BB0_272:
	add.s32 	%r373, %r7052, %r253;
	mul.wide.s32 	%rd256, %r373, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7077;
	@%p12 bra 	$L__BB0_274;
	bra.uni 	$L__BB0_273;

$L__BB0_274:
	setp.eq.s32 	%p170, %r249, 0;
	add.s32 	%r2048, %r267, %r269;
	shl.b32 	%r2049, %r2048, 1;
	or.b32  	%r2050, %r2049, 1;
	mul.wide.s32 	%rd258, %r2050, 4;
	add.s64 	%rd259, %rd15, %rd258;
	ld.global.f32 	%f34, [%rd259];
	@%p170 bra 	$L__BB0_276;
	bra.uni 	$L__BB0_275;

$L__BB0_276:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r7078, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_273:
	mov.f32 	%f264, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f264;
  cvt.rn.f16.f32 high, %f264;
  mov.b32 %r7078, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_275:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7078, {low,high};}

	// end inline asm

$L__BB0_277:
	add.s32 	%r2053, %r373, 1;
	mul.wide.s32 	%rd260, %r2053, 4;
	add.s64 	%rd261, %rd16, %rd260;
	st.global.u32 	[%rd261], %r7078;
	add.s32 	%r7052, %r7052, 2;

$L__BB0_278:
	add.s64 	%rd559, %rd559, 4;
	add.s64 	%rd558, %rd558, -4;
	setp.ne.s64 	%p171, %rd558, 0;
	@%p171 bra 	$L__BB0_158;

$L__BB0_279:
	add.s32 	%r7048, %r7048, %r42;
	setp.lt.s32 	%p172, %r7048, %r1562;
	@%p172 bra 	$L__BB0_156;

$L__BB0_280:
	add.s32 	%r7042, %r7042, %r1582;
	setp.lt.s32 	%p173, %r7042, %r1561;
	@%p173 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_281;

$L__BB0_135:
	@%p24 bra 	$L__BB0_281;

	neg.s32 	%r222, %r71;
	mov.u32 	%r1868, 31;
	sub.s32 	%r1869, %r1868, %r40;
	setp.gt.s32 	%p111, %r39, %r40;
	selp.b32 	%r1870, %r40, %r1869, %p111;
	shl.b32 	%r1871, %r1870, 2;
	mov.u32 	%r1872, 2;
	sub.s32 	%r223, %r1871, %r1564;
	shl.b32 	%r1873, %r1563, 2;
	mov.u32 	%r1874, 128;
	sub.s32 	%r224, %r1874, %r1873;
	sub.s32 	%r1875, %r1872, %r1564;
	add.s32 	%r225, %r1875, %r1871;
	add.s32 	%r226, %r1561, -1;
	add.s32 	%r227, %r223, 1;
	add.s32 	%r228, %r225, 1;
	rem.s32 	%r1900, %r227, %r224;
	add.s32 	%r1901, %r1900, %r224;
	rem.s32 	%r239, %r1901, %r224;
	rem.s32 	%r1902, %r228, %r224;
	add.s32 	%r1903, %r1902, %r224;
	rem.s32 	%r240, %r1903, %r224;

$L__BB0_137:
	setp.ne.s32 	%p112, %r36, %r222;
	@%p112 bra 	$L__BB0_151;

	shl.b32 	%r230, %r7042, 1;
	rem.s32 	%r1876, %r223, %r224;
	add.s32 	%r1877, %r1876, %r224;
	rem.s32 	%r231, %r1877, %r224;
	rem.s32 	%r1878, %r225, %r224;
	add.s32 	%r1879, %r1878, %r224;
	rem.s32 	%r232, %r1879, %r224;
	@%p111 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	mul.lo.s32 	%r1882, %r230, %r224;
	add.s32 	%r1883, %r1882, %r231;
	mul.wide.s32 	%rd162, %r1883, 4;
	add.s64 	%rd163, %rd15, %rd162;
	ld.global.f32 	%f129, [%rd163];
	add.s32 	%r1884, %r1882, %r232;
	mul.wide.s32 	%rd164, %r1884, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f130, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7043, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7043, {low,high};}

	// end inline asm

$L__BB0_141:
	shl.b32 	%r1885, %r7042, 5;
	add.s32 	%r1886, %r1885, %r40;
	shl.b32 	%r1887, %r1886, 2;
	mul.wide.s32 	%rd166, %r1887, 4;
	add.s64 	%rd17, %rd16, %rd166;
	st.global.u32 	[%rd17], %r7043;
	@%p111 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_142;

$L__BB0_143:
	add.s32 	%r1890, %r230, 1;
	mul.lo.s32 	%r1891, %r1890, %r224;
	add.s32 	%r1892, %r1891, %r231;
	mul.wide.s32 	%rd167, %r1892, 4;
	add.s64 	%rd168, %rd15, %rd167;
	ld.global.f32 	%f133, [%rd168];
	add.s32 	%r1893, %r1891, %r232;
	mul.wide.s32 	%rd169, %r1893, 4;
	add.s64 	%rd170, %rd15, %rd169;
	ld.global.f32 	%f134, [%rd170];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f133;
  cvt.rn.f16.f32 high, %f134;
  mov.b32 %r7044, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_144;

$L__BB0_142:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7044, {low,high};}

	// end inline asm

$L__BB0_144:
	add.s32 	%r1894, %r226, %r7042;
	rem.s32 	%r1895, %r1894, %r1561;
	shl.b32 	%r1896, %r1895, 5;
	add.s32 	%r1897, %r1896, %r40;
	shl.b32 	%r1898, %r1897, 2;
	or.b32  	%r1899, %r1898, 2;
	mul.wide.s32 	%rd171, %r1899, 4;
	add.s64 	%rd18, %rd16, %rd171;
	st.global.u32 	[%rd18], %r7044;
	@%p111 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_145;

$L__BB0_146:
	mul.lo.s32 	%r1906, %r230, %r224;
	add.s32 	%r1907, %r1906, %r239;
	mul.wide.s32 	%rd172, %r1907, 4;
	add.s64 	%rd173, %rd15, %rd172;
	ld.global.f32 	%f137, [%rd173];
	add.s32 	%r1908, %r1906, %r240;
	mul.wide.s32 	%rd174, %r1908, 4;
	add.s64 	%rd175, %rd15, %rd174;
	ld.global.f32 	%f138, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f137;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7045, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_147;

$L__BB0_145:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f136;
  mov.b32 %r7045, {low,high};}

	// end inline asm

$L__BB0_147:
	st.global.u32 	[%rd17+4], %r7045;
	@%p111 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	add.s32 	%r1911, %r230, 1;
	mul.lo.s32 	%r1912, %r1911, %r224;
	add.s32 	%r1913, %r1912, %r239;
	mul.wide.s32 	%rd176, %r1913, 4;
	add.s64 	%rd177, %rd15, %rd176;
	ld.global.f32 	%f141, [%rd177];
	add.s32 	%r1914, %r1912, %r240;
	mul.wide.s32 	%rd178, %r1914, 4;
	add.s64 	%rd179, %rd15, %rd178;
	ld.global.f32 	%f142, [%rd179];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f142;
  mov.b32 %r7046, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f140, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f140;
  cvt.rn.f16.f32 high, %f140;
  mov.b32 %r7046, {low,high};}

	// end inline asm

$L__BB0_150:
	st.global.u32 	[%rd18+4], %r7046;

$L__BB0_151:
	add.s32 	%r7042, %r7042, %r1582;
	setp.lt.s32 	%p117, %r7042, %r1561;
	@%p117 bra 	$L__BB0_137;

$L__BB0_281:
	add.s32 	%r2055, %r1556, -1;
	mad.lo.s32 	%r2056, %r1557, 576, 128;
	mul.lo.s32 	%r2057, %r2056, %r2055;
	add.s32 	%r2058, %r66, -64;
	add.s32 	%r2059, %r2058, %r66;
	add.s32 	%r2060, %r1557, -1;
	mad.lo.s32 	%r2061, %r2059, %r2060, %r2057;
	mul.lo.s32 	%r2062, %r2055, %r1557;
	mul.lo.s32 	%r2063, %r2062, 320;
	mad.lo.s32 	%r2064, %r2058, %r2060, %r2063;
	add.s32 	%r382, %r2064, %r2061;
	setp.lt.s32 	%p174, %r382, 1;
	mov.f32 	%f270, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	@%p174 bra 	$L__BB0_284;

	mov.u32 	%r7082, 0;
	mov.u32 	%r7080, _ZN6kernel5shmemE;

$L__BB0_283:
	st.shared.u32 	[%r7080], %r7261;
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2067, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7080+4], %r2067;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2068, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7080+8], %r2068;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2069, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7080+12], %r2069;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	add.s32 	%r7080, %r7080, 16;
	add.s32 	%r7082, %r7082, 4;
	setp.lt.s32 	%p175, %r7082, %r382;
	@%p175 bra 	$L__BB0_283;

$L__BB0_284:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r7262, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r2072, {low,high};}

	// end inline asm
	ld.param.u64 	%rd262, [%rd1+152];
	cvta.to.global.u64 	%rd23, %rd262;
	mov.u32 	%r2073, 31;
	sub.s32 	%r2074, %r2073, %r40;
	setp.gt.s32 	%p176, %r39, %r40;
	selp.b32 	%r2075, %r40, %r2074, %p176;
	shl.b32 	%r2076, %r2075, 2;
	sub.s32 	%r393, %r2076, %r1564;
	shl.b32 	%r2077, %r1563, 2;
	mov.u32 	%r2078, 128;
	sub.s32 	%r394, %r2078, %r2077;
	rem.s32 	%r2079, %r393, %r394;
	add.s32 	%r2080, %r2079, %r394;
	rem.s32 	%r395, %r2080, %r394;
	add.s32 	%r2081, %r393, 2;
	rem.s32 	%r2082, %r2081, %r394;
	add.s32 	%r2083, %r2082, %r394;
	rem.s32 	%r396, %r2083, %r394;
	mul.lo.s32 	%r2084, %r395, 6;
	mul.lo.s32 	%r2085, %r396, 6;
	mul.wide.s32 	%rd263, %r2084, 4;
	add.s64 	%rd24, %rd23, %rd263;
	mul.wide.s32 	%rd264, %r2085, 4;
	add.s64 	%rd25, %rd23, %rd264;
	@%p17 bra 	$L__BB0_286;
	bra.uni 	$L__BB0_285;

$L__BB0_286:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7084, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_287;

$L__BB0_285:
	ld.global.f32 	%f285, [%rd24];
	ld.global.f32 	%f286, [%rd24+8];
	add.f32 	%f283, %f285, %f286;
	ld.global.f32 	%f287, [%rd25+8];
	ld.global.f32 	%f288, [%rd25];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7084, {low,high};}

	// end inline asm

$L__BB0_287:
	@%p17 bra 	$L__BB0_289;
	bra.uni 	$L__BB0_288;

$L__BB0_289:
	ld.global.f32 	%f293, [%rd24+4];
	ld.global.f32 	%f294, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7085, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_290;

$L__BB0_288:
	ld.global.f32 	%f291, [%rd24];
	ld.global.f32 	%f292, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7085, {low,high};}

	// end inline asm

$L__BB0_290:
	@%p17 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7086, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	ld.global.f32 	%f297, [%rd24+20];
	ld.global.f32 	%f298, [%rd24+12];
	add.f32 	%f295, %f298, %f297;
	ld.global.f32 	%f299, [%rd25+20];
	ld.global.f32 	%f300, [%rd25+12];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7086, {low,high};}

	// end inline asm

$L__BB0_293:
	@%p17 bra 	$L__BB0_295;
	bra.uni 	$L__BB0_294;

$L__BB0_295:
	ld.global.f32 	%f305, [%rd24+16];
	ld.global.f32 	%f306, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7087, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_296;

$L__BB0_294:
	ld.global.f32 	%f303, [%rd24+12];
	ld.global.f32 	%f304, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7087, {low,high};}

	// end inline asm

$L__BB0_296:
	add.s32 	%r2094, %r393, 1;
	rem.s32 	%r2095, %r2094, %r394;
	add.s32 	%r2096, %r2095, %r394;
	rem.s32 	%r409, %r2096, %r394;
	add.s32 	%r2097, %r393, 3;
	rem.s32 	%r2098, %r2097, %r394;
	add.s32 	%r2099, %r2098, %r394;
	rem.s32 	%r410, %r2099, %r394;
	mul.lo.s32 	%r2100, %r409, 6;
	mul.lo.s32 	%r2101, %r410, 6;
	mul.wide.s32 	%rd265, %r2100, 4;
	add.s64 	%rd26, %rd23, %rd265;
	mul.wide.s32 	%rd266, %r2101, 4;
	add.s64 	%rd27, %rd23, %rd266;
	@%p17 bra 	$L__BB0_298;
	bra.uni 	$L__BB0_297;

$L__BB0_298:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7088, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_299;

$L__BB0_297:
	ld.global.f32 	%f309, [%rd26];
	ld.global.f32 	%f310, [%rd26+8];
	add.f32 	%f307, %f309, %f310;
	ld.global.f32 	%f311, [%rd27+8];
	ld.global.f32 	%f312, [%rd27];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7088, {low,high};}

	// end inline asm

$L__BB0_299:
	@%p17 bra 	$L__BB0_301;
	bra.uni 	$L__BB0_300;

$L__BB0_301:
	ld.global.f32 	%f317, [%rd26+4];
	ld.global.f32 	%f318, [%rd27+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7089, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_302;

$L__BB0_300:
	ld.global.f32 	%f315, [%rd26];
	ld.global.f32 	%f316, [%rd27];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7089, {low,high};}

	// end inline asm

$L__BB0_302:
	@%p17 bra 	$L__BB0_304;
	bra.uni 	$L__BB0_303;

$L__BB0_304:
	mov.f32 	%f326, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f326;
  cvt.rn.f16.f32 high, %f326;
  mov.b32 %r7090, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_305;

$L__BB0_303:
	ld.global.f32 	%f321, [%rd26+20];
	ld.global.f32 	%f322, [%rd26+12];
	add.f32 	%f319, %f322, %f321;
	ld.global.f32 	%f323, [%rd27+20];
	ld.global.f32 	%f324, [%rd27+12];
	add.f32 	%f320, %f324, %f323;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f319;
  cvt.rn.f16.f32 high, %f320;
  mov.b32 %r7090, {low,high};}

	// end inline asm

$L__BB0_305:
	@%p17 bra 	$L__BB0_307;
	bra.uni 	$L__BB0_306;

$L__BB0_307:
	ld.global.f32 	%f329, [%rd26+16];
	ld.global.f32 	%f330, [%rd27+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f330;
  mov.b32 %r7091, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_308;

$L__BB0_306:
	ld.global.f32 	%f327, [%rd26+12];
	ld.global.f32 	%f328, [%rd27+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7091, {low,high};}

	// end inline asm

$L__BB0_308:
	// begin inline asm
	mov.u32 %r2110, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd267, %r2110;
	// begin inline asm
	mov.u32 %r2111, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd268, %r2111;
	bfi.b64 	%rd28, %rd268, %rd267, 32, 32;
	setp.ne.s64 	%p185, %rd28, 0;
	@%p185 bra 	$L__BB0_310;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_310:
	add.s64 	%rd29, %rd28, 4;
	mov.u32 	%r2112, %nctaid.y;
	mov.u32 	%r2113, %nctaid.x;
	mul.lo.s32 	%r2114, %r2113, %r2112;
	mov.u32 	%r2115, %nctaid.z;
	mul.lo.s32 	%r423, %r2114, %r2115;
	neg.s32 	%r2116, %r36;
	add.s32 	%r2117, %r40, %r35;
	setp.ne.s32 	%p186, %r2117, %r2116;
	mov.u32 	%r2118, %ctaid.x;
	add.s32 	%r424, %r2118, %r37;
	neg.s32 	%r425, %r38;
	bar.sync 	0;
	@%p186 bra 	$L__BB0_314;

	setp.eq.s32 	%p187, %r424, %r425;
	mov.u32 	%r2121, -2147483647;
	sub.s32 	%r2122, %r2121, %r423;
	selp.b32 	%r2120, %r2122, 1, %p187;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2119,[%rd29],%r2120;
	// end inline asm

$L__BB0_312:
	ld.volatile.u32 	%r2123, [%rd29];
	xor.b32  	%r2124, %r2123, %r2119;
	setp.gt.s32 	%p188, %r2124, -1;
	@%p188 bra 	$L__BB0_312;

	// begin inline asm
	ld.acquire.gpu.u32 %r2125,[%rd29];
	// end inline asm

$L__BB0_314:
	bar.sync 	0;
	setp.lt.s32 	%p189, %r43, 1;
	@%p189 bra 	$L__BB0_849;

	shr.s32 	%r2139, %r1566, 31;
	shr.u32 	%r2140, %r2139, 30;
	add.s32 	%r2141, %r1566, %r2140;
	shr.s32 	%r427, %r2141, 2;
	add.s32 	%r2142, %r40, 24;
	mul.hi.s32 	%r2143, %r2142, 1374389535;
	shr.u32 	%r2144, %r2143, 31;
	shr.s32 	%r2145, %r2143, 3;
	add.s32 	%r2146, %r2145, %r2144;
	mul.lo.s32 	%r2147, %r2146, 25;
	sub.s32 	%r2148, %r2142, %r2147;
	add.s32 	%r2149, %r40, 26;
	mul.hi.s32 	%r2150, %r2149, 1374389535;
	shr.u32 	%r2151, %r2150, 31;
	shr.s32 	%r2152, %r2150, 3;
	add.s32 	%r2153, %r2152, %r2151;
	mul.lo.s32 	%r2154, %r2153, 25;
	sub.s32 	%r2155, %r2149, %r2154;
	shr.u32 	%r2156, %r1566, 31;
	add.s32 	%r2157, %r1566, %r2156;
	and.b32  	%r2158, %r2157, -2;
	sub.s32 	%r428, %r1566, %r2158;
	setp.lt.s32 	%p190, %r40, 25;
	selp.b32 	%r429, %r2148, %r40, %p190;
	setp.lt.s32 	%p191, %r395, %r1575;
	setp.ge.s32 	%p192, %r395, %r1574;
	and.pred  	%p13, %p191, %p192;
	setp.lt.s32 	%p193, %r409, %r1575;
	setp.ge.s32 	%p194, %r409, %r1574;
	and.pred  	%p14, %p193, %p194;
	setp.lt.s32 	%p195, %r396, %r1575;
	setp.ge.s32 	%p196, %r396, %r1574;
	and.pred  	%p15, %p195, %p196;
	setp.lt.s32 	%p197, %r410, %r1575;
	setp.ge.s32 	%p198, %r410, %r1574;
	and.pred  	%p16, %p197, %p198;
	selp.b32 	%r430, %r2155, %r40, %p190;
	mov.u32 	%r2138, 0;
	// begin inline asm
	{mov.u32 %r2159, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2486, %r2159, 8;
	add.s32 	%r2487, %r2486, -8192;
	or.b32  	%r2163, %r2487, 31;
	mul.wide.s32 	%rd279, %r40, 16;
	mul.wide.s32 	%rd281, %r40, 8;
	mov.u32 	%r7092, %r2138;
	mov.u32 	%r7093, %r2138;
	mov.u32 	%r7094, %r2138;
	mov.u32 	%r7095, %r2138;
	mov.u32 	%r7096, %r2138;
	mov.u32 	%r7097, %r2138;
	mov.u32 	%r7098, %r2138;
	mov.u32 	%r7099, %r2138;
	mov.u32 	%r7100, %r2138;
	mov.u32 	%r7101, %r2138;
	mov.u32 	%r7102, %r2138;
	mov.u32 	%r7103, %r2138;
	mov.u32 	%r7465, %r2072;
	mov.u32 	%r7466, %r2072;
	mov.u32 	%r7463, %r2072;
	mov.u32 	%r7464, %r2072;
	mov.u32 	%r7349, %r2072;
	mov.u32 	%r7350, %r2072;
	mov.u32 	%r7363, %r2072;
	mov.u32 	%r7351, %r2072;
	mov.u32 	%r7365, %r2072;
	mov.u32 	%r7352, %r2072;
	mov.u32 	%r7353, %r2072;
	mov.u32 	%r7354, %r2072;
	mov.u32 	%r7355, %r2072;
	mov.u32 	%r7356, %r2072;
	mov.u32 	%r7357, %r2072;
	mov.u32 	%r7358, %r2072;
	mov.u32 	%r7367, %r2072;
	mov.u32 	%r7368, %r2072;
	mov.u32 	%r7369, %r2072;
	mov.u32 	%r7370, %r2072;
	mov.u32 	%r7371, %r2072;
	mov.u32 	%r7372, %r2072;
	mov.u32 	%r7359, %r2072;
	mov.u32 	%r7360, %r2072;
	mov.u32 	%r7373, %r2072;
	mov.u32 	%r7374, %r2072;
	mov.u32 	%r7361, %r2072;
	mov.u32 	%r7362, %r2072;
	mov.u32 	%r7132, %r2072;
	mov.u32 	%r7133, %r2072;
	mov.u32 	%r7134, %r2072;
	mov.u32 	%r7135, %r2072;
	mov.u32 	%r7136, %r2072;
	mov.u32 	%r7137, %r2072;
	mov.u32 	%r7138, %r2072;
	mov.u32 	%r7139, %r2072;
	mov.u32 	%r7140, %r2072;
	mov.u32 	%r7141, %r2072;
	mov.u32 	%r7142, %r2072;
	mov.u32 	%r7143, %r2072;
	mov.u32 	%r7144, %r2072;
	mov.u32 	%r7145, %r2072;
	mov.u32 	%r7146, %r2072;
	mov.u32 	%r7147, %r2072;
	mov.u32 	%r7148, %r2072;
	mov.u32 	%r7149, %r2072;
	mov.u32 	%r7150, %r2072;
	mov.u32 	%r7151, %r2072;
	mov.u32 	%r7152, %r2072;
	mov.u32 	%r7153, %r2072;
	mov.u32 	%r7389, %r2072;
	mov.u32 	%r7390, %r2072;
	mov.u32 	%r7158, %r2072;
	mov.u32 	%r7159, %r2072;
	mov.u32 	%r7160, %r2072;
	mov.u32 	%r7161, %r2072;
	mov.u32 	%r7391, %r2072;
	mov.u32 	%r7392, %r2072;
	mov.u32 	%r7164, %r2072;
	mov.u32 	%r7393, %r2072;
	mov.u32 	%r7166, %r2072;
	mov.u32 	%r7167, %r2072;
	mov.u32 	%r7394, %r2072;
	mov.u32 	%r7169, %r2072;
	mov.u32 	%r7170, %r2072;
	mov.u32 	%r7171, %r2072;
	mov.u32 	%r7479, %r2072;
	mov.u32 	%r7480, %r2072;
	mov.u32 	%r7174, %r2072;
	mov.u32 	%r7175, %r2072;
	mov.u32 	%r7178, %r2072;
	mov.u32 	%r7179, %r2072;
	mov.u32 	%r7180, %r2072;
	mov.u32 	%r7181, %r2072;
	mov.u32 	%r7182, %r2072;
	mov.u32 	%r7398, %r2072;
	mov.u32 	%r7184, %r2072;
	mov.u32 	%r7185, %r2072;
	mov.u32 	%r7186, %r2072;
	mov.u32 	%r7187, %r2072;
	mov.u32 	%r7188, %r2072;
	mov.u32 	%r7189, %r2072;
	mov.u32 	%r7190, %r2072;
	mov.u32 	%r7400, %r2072;
	mov.u32 	%r7192, %r2072;
	mov.u32 	%r7193, %r2072;
	mov.u32 	%r7194, %r2072;
	mov.u32 	%r7401, %r2072;
	mov.u32 	%r7196, %r2072;
	mov.u32 	%r7197, %r2072;
	mov.u32 	%r7198, %r2072;
	mov.u32 	%r7199, %r2072;
	mov.u32 	%r7200, %r2072;
	mov.u32 	%r7201, %r2072;
	mov.u32 	%r7202, %r2072;
	mov.u32 	%r7402, %r2072;
	mov.u32 	%r7204, %r2072;
	mov.u32 	%r7481, %r2072;
	mov.u32 	%r7206, %r2072;
	mov.u32 	%r7207, %r2072;
	mov.u32 	%r7208, %r2072;
	mov.u32 	%r7209, %r2072;
	mov.u32 	%r7482, %r2072;
	mov.u32 	%r7211, %r2072;
	mov.u32 	%r7212, %r2072;
	mov.u32 	%r7213, %r2072;
	mov.u32 	%r7214, %r2072;
	mov.u32 	%r7215, %r2072;
	mov.u32 	%r7216, %r2072;
	mov.u32 	%r7217, %r2072;
	mov.u32 	%r7218, %r2072;
	mov.u32 	%r7219, %r2072;
	mov.u32 	%r7220, %r2072;
	mov.u32 	%r7221, %r2072;
	mov.u32 	%r7222, %r2072;
	mov.u32 	%r7223, %r2072;
	mov.u32 	%r7224, %r2072;
	mov.u32 	%r7225, %r2072;
	mov.u32 	%r7226, %r2072;
	mov.u32 	%r7227, %r2072;
	mov.u32 	%r7228, %r2072;
	mov.u32 	%r7229, %r2072;
	mov.u32 	%r7230, %r2072;
	mov.u32 	%r7231, %r2072;
	mov.u32 	%r7232, %r2072;
	mov.u32 	%r7233, %r2072;
	mov.u32 	%r7234, %r2072;
	mov.u32 	%r7235, %r2072;
	mov.u32 	%r7236, %r2072;
	mov.u32 	%r7237, %r2072;
	mov.u32 	%r7238, %r2072;
	mov.u32 	%r7239, %r2072;
	mov.u32 	%r7240, %r2072;
	mov.u32 	%r7241, %r2072;
	mov.u32 	%r7242, %r2072;
	mov.u32 	%r7243, %r2072;
	mov.u32 	%r7244, %r2072;
	mov.u32 	%r7245, %r2072;
	mov.u32 	%r7246, %r2072;
	mov.u32 	%r7247, %r2072;
	mov.u32 	%r7248, %r2072;
	mov.u32 	%r7249, %r2072;
	mov.u32 	%r7250, %r2072;
	mov.u32 	%r7251, %r2072;
	mov.u32 	%r7252, %r2072;
	mov.u32 	%r7253, %r2072;
	mov.u32 	%r7254, %r2072;
	mov.u32 	%r7255, %r2072;
	mov.u32 	%r7256, %r2072;
	mov.u32 	%r7257, %r2072;
	mov.u32 	%r7258, %r2072;
	mov.u32 	%r7259, %r2072;
	mov.u32 	%r7260, %r2138;

$L__BB0_316:
	mov.u32 	%r542, %r7402;
	mov.u32 	%r538, %r7199;
	mov.u32 	%r534, %r7401;
	mov.u32 	%r532, %r7193;
	mov.u32 	%r530, %r7400;
	mov.u32 	%r522, %r7398;
	mov.u32 	%r7199, %r7394;
	mov.u32 	%r504, %r7393;
	mov.u32 	%r7193, %r7392;
	mov.u32 	%r501, %r7391;
	mov.u32 	%r496, %r7390;
	mov.u32 	%r495, %r7389;
	sub.s32 	%r6977, %r1561, %r42;
	mov.u32 	%r2174, 1;
	not.b32 	%r2448, %r37;
	mov.u32 	%r2440, -1;
	add.s32 	%r2449, %r1558, %r2448;
	mul.lo.s32 	%r2450, %r2449, %r1560;
	add.s32 	%r2451, %r7260, %r2450;
	not.b32 	%r2453, %r38;
	add.s32 	%r2454, %r1559, %r2453;
	mul.lo.s32 	%r2455, %r2454, %r1560;
	add.s32 	%r2456, %r7260, %r2455;
	add.s32 	%r2457, %r2450, %r2455;
	add.s32 	%r2458, %r2457, %r1561;
	not.b32 	%r2459, %r35;
	add.s32 	%r2460, %r1556, %r2459;
	mad.lo.s32 	%r2461, %r2449, %r1556, %r2460;
	not.b32 	%r2463, %r36;
	add.s32 	%r2464, %r1557, %r2463;
	mad.lo.s32 	%r2465, %r2454, %r1557, %r2464;
	add.s32 	%r2466, %r2461, %r2465;
	shl.b32 	%r2467, %r2466, 1;
	add.s32 	%r2468, %r2458, %r2467;
	add.s32 	%r2469, %r7260, %r2468;
	add.s32 	%r2470, %r7260, %r2457;
	div.s32 	%r2471, %r2469, %r1561;
	neg.s32 	%r2472, %r1561;
	sub.s32 	%r2475, %r42, %r1561;
	sub.s32 	%r2476, %r2461, %r2465;
	shl.b32 	%r2477, %r2476, 1;
	add.s32 	%r2478, %r2477, %r1562;
	mad.lo.s32 	%r2479, %r2471, %r42, %r2478;
	mad.lo.s32 	%r2480, %r2471, %r2475, %r2470;
	div.s32 	%r2481, %r2479, %r1562;
	mul.lo.s32 	%r2482, %r2481, %r1562;
	sub.s32 	%r2485, %r1583, %r1562;
	mov.u32 	%r2258, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2160,%r7262,%r2138,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2166, %r7085, %r2160, %p17;
	// begin inline asm
	{mul.f16x2 %r7346,%r2166,%r7259;
}
	// end inline asm
	selp.b32 	%r2169, %r7089, %r2160, %p17;
	// begin inline asm
	{mul.f16x2 %r7344,%r2169,%r7258;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2172,%r7262,%r2174,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2178, %r7085, %r2172, %p17;
	// begin inline asm
	{mul.f16x2 %r7345,%r2178,%r7257;
}
	// end inline asm
	selp.b32 	%r2181, %r7089, %r2172, %p17;
	// begin inline asm
	{mul.f16x2 %r7343,%r2181,%r7256;
}
	// end inline asm
	mov.u32 	%r2186, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2184,%r7262,%r2186,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2190, %r7085, %r2184, %p17;
	// begin inline asm
	{mul.f16x2 %r7342,%r2190,%r7255;
}
	// end inline asm
	selp.b32 	%r2193, %r7089, %r2184, %p17;
	// begin inline asm
	{mul.f16x2 %r7341,%r2193,%r7254;
}
	// end inline asm
	mov.u32 	%r2198, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2196,%r7262,%r2198,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2202, %r7085, %r2196, %p17;
	// begin inline asm
	{mul.f16x2 %r7340,%r2202,%r7374;
}
	// end inline asm
	selp.b32 	%r2205, %r7089, %r2196, %p17;
	// begin inline asm
	{mul.f16x2 %r7338,%r2205,%r7373;
}
	// end inline asm
	mov.u32 	%r2210, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2208,%r7262,%r2210,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2214, %r7085, %r2208, %p17;
	// begin inline asm
	{mul.f16x2 %r7339,%r2214,%r7253;
}
	// end inline asm
	selp.b32 	%r2217, %r7089, %r2208, %p17;
	// begin inline asm
	{mul.f16x2 %r7337,%r2217,%r7252;
}
	// end inline asm
	mov.u32 	%r2222, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2220,%r7262,%r2222,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2226, %r7085, %r2220, %p17;
	// begin inline asm
	{mul.f16x2 %r7336,%r2226,%r7251;
}
	// end inline asm
	selp.b32 	%r2229, %r7089, %r2220, %p17;
	// begin inline asm
	{mul.f16x2 %r7333,%r2229,%r7250;
}
	// end inline asm
	mov.u32 	%r2234, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2232,%r7262,%r2234,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2238, %r7085, %r2232, %p17;
	// begin inline asm
	{mul.f16x2 %r7335,%r2238,%r7249;
}
	// end inline asm
	selp.b32 	%r2241, %r7089, %r2232, %p17;
	// begin inline asm
	{mul.f16x2 %r7332,%r2241,%r7248;
}
	// end inline asm
	mov.u32 	%r2246, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2244,%r7262,%r2246,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2250, %r7085, %r2244, %p17;
	// begin inline asm
	{mul.f16x2 %r7334,%r2250,%r7247;
}
	// end inline asm
	selp.b32 	%r2253, %r7089, %r2244, %p17;
	// begin inline asm
	{mul.f16x2 %r7331,%r2253,%r7246;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2256,%r7262,%r2258,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2262, %r7085, %r2256, %p17;
	// begin inline asm
	{mul.f16x2 %r7330,%r2262,%r7245;
}
	// end inline asm
	selp.b32 	%r2265, %r7089, %r2256, %p17;
	// begin inline asm
	{mul.f16x2 %r7327,%r2265,%r7244;
}
	// end inline asm
	mov.u32 	%r2270, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2268,%r7262,%r2270,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2274, %r7085, %r2268, %p17;
	// begin inline asm
	{mul.f16x2 %r7329,%r2274,%r7243;
}
	// end inline asm
	selp.b32 	%r2277, %r7089, %r2268, %p17;
	// begin inline asm
	{mul.f16x2 %r7326,%r2277,%r7242;
}
	// end inline asm
	mov.u32 	%r2282, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2280,%r7262,%r2282,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2286, %r7085, %r2280, %p17;
	// begin inline asm
	{mul.f16x2 %r7328,%r2286,%r7241;
}
	// end inline asm
	selp.b32 	%r2289, %r7089, %r2280, %p17;
	// begin inline asm
	{mul.f16x2 %r7325,%r2289,%r7240;
}
	// end inline asm
	mov.u32 	%r2294, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2292,%r7262,%r2294,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2298, %r7085, %r2292, %p17;
	// begin inline asm
	{mul.f16x2 %r7324,%r2298,%r7360;
}
	// end inline asm
	selp.b32 	%r2301, %r7089, %r2292, %p17;
	// begin inline asm
	{mul.f16x2 %r7323,%r2301,%r7359;
}
	// end inline asm
	mov.u32 	%r2306, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2304,%r7262,%r2306,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2310, %r7085, %r2304, %p17;
	// begin inline asm
	{mul.f16x2 %r7322,%r2310,%r7372;
}
	// end inline asm
	selp.b32 	%r2313, %r7089, %r2304, %p17;
	// begin inline asm
	{mul.f16x2 %r7320,%r2313,%r7370;
}
	// end inline asm
	mov.u32 	%r2318, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2316,%r7262,%r2318,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2322, %r7085, %r2316, %p17;
	// begin inline asm
	{mul.f16x2 %r7321,%r2322,%r7371;
}
	// end inline asm
	selp.b32 	%r2325, %r7089, %r2316, %p17;
	// begin inline asm
	{mul.f16x2 %r7319,%r2325,%r7369;
}
	// end inline asm
	mov.u32 	%r2330, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2328,%r7262,%r2330,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2334, %r7085, %r2328, %p17;
	// begin inline asm
	{mul.f16x2 %r7318,%r2334,%r7368;
}
	// end inline asm
	selp.b32 	%r2337, %r7089, %r2328, %p17;
	// begin inline asm
	{mul.f16x2 %r7315,%r2337,%r7367;
}
	// end inline asm
	mov.u32 	%r2342, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2340,%r7262,%r2342,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2346, %r7085, %r2340, %p17;
	// begin inline asm
	{mul.f16x2 %r7317,%r2346,%r7239;
}
	// end inline asm
	selp.b32 	%r2349, %r7089, %r2340, %p17;
	// begin inline asm
	{mul.f16x2 %r7314,%r2349,%r7238;
}
	// end inline asm
	mov.u32 	%r2354, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2352,%r7262,%r2354,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2358, %r7085, %r2352, %p17;
	// begin inline asm
	{mul.f16x2 %r7316,%r2358,%r7237;
}
	// end inline asm
	selp.b32 	%r2361, %r7089, %r2352, %p17;
	// begin inline asm
	{mul.f16x2 %r7313,%r2361,%r7236;
}
	// end inline asm
	mov.u32 	%r2366, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2364,%r7262,%r2366,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2370, %r7085, %r2364, %p17;
	// begin inline asm
	{mul.f16x2 %r7312,%r2370,%r7358;
}
	// end inline asm
	selp.b32 	%r2373, %r7089, %r2364, %p17;
	// begin inline asm
	{mul.f16x2 %r7309,%r2373,%r7356;
}
	// end inline asm
	mov.u32 	%r2378, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2376,%r7262,%r2378,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2382, %r7085, %r2376, %p17;
	// begin inline asm
	{mul.f16x2 %r7311,%r2382,%r7357;
}
	// end inline asm
	selp.b32 	%r2385, %r7089, %r2376, %p17;
	// begin inline asm
	{mul.f16x2 %r7308,%r2385,%r7355;
}
	// end inline asm
	mov.u32 	%r2390, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2388,%r7262,%r2390,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2394, %r7085, %r2388, %p17;
	// begin inline asm
	{mul.f16x2 %r7310,%r2394,%r7235;
}
	// end inline asm
	selp.b32 	%r2397, %r7089, %r2388, %p17;
	// begin inline asm
	{mul.f16x2 %r7307,%r2397,%r7234;
}
	// end inline asm
	mov.u32 	%r2402, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2400,%r7262,%r2402,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2406, %r7085, %r2400, %p17;
	// begin inline asm
	{mul.f16x2 %r7306,%r2406,%r7354;
}
	// end inline asm
	selp.b32 	%r2409, %r7089, %r2400, %p17;
	// begin inline asm
	{mul.f16x2 %r7305,%r2409,%r7353;
}
	// end inline asm
	mov.u32 	%r2414, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2412,%r7262,%r2414,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2418, %r7085, %r2412, %p17;
	// begin inline asm
	{mul.f16x2 %r7304,%r2418,%r7352;
}
	// end inline asm
	selp.b32 	%r2421, %r7089, %r2412, %p17;
	// begin inline asm
	{mul.f16x2 %r7302,%r2421,%r7351;
}
	// end inline asm
	mov.u32 	%r2426, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2424,%r7262,%r2426,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2430, %r7085, %r2424, %p17;
	// begin inline asm
	{mul.f16x2 %r7303,%r2430,%r7365;
}
	// end inline asm
	selp.b32 	%r2433, %r7089, %r2424, %p17;
	// begin inline asm
	{mul.f16x2 %r7301,%r2433,%r7363;
}
	// end inline asm
	mov.u32 	%r2438, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2436,%r7262,%r2438,%r2163,%r2440;
}
	// end inline asm
	selp.b32 	%r2442, %r7085, %r2436, %p17;
	// begin inline asm
	{mul.f16x2 %r7300,%r2442,%r7350;
}
	// end inline asm
	selp.b32 	%r2445, %r7089, %r2436, %p17;
	// begin inline asm
	{mul.f16x2 %r7299,%r2445,%r7349;
}
	// end inline asm
	rem.s32 	%r650, %r2451, %r65;
	rem.s32 	%r651, %r2456, %r6977;
	mad.lo.s32 	%r652, %r2471, %r2472, %r2469;
	sub.s32 	%r653, %r2479, %r2482;
	mad.lo.s32 	%r654, %r2481, %r2485, %r2480;
	ld.param.u64 	%rd272, [%rd1+144];
	cvta.to.global.u64 	%rd273, %rd272;
	shl.b32 	%r2535, %r654, 1;
	mul.wide.s32 	%rd274, %r2535, 4;
	add.s64 	%rd30, %rd273, %rd274;
	@%p109 bra 	$L__BB0_324;
	bra.uni 	$L__BB0_317;

$L__BB0_324:
	add.s32 	%r2738, %r1578, 1;
	setp.lt.s32 	%p206, %r654, %r2738;
	setp.eq.s32 	%p207, %r427, %r40;
	setp.gt.s32 	%p208, %r654, -1;
	and.pred  	%p209, %p207, %p208;
	and.pred  	%p210, %p206, %p209;
	@%p210 bra 	$L__BB0_326;
	bra.uni 	$L__BB0_325;

$L__BB0_326:
	ld.global.f32 	%f341, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f341;
  mov.b32 %r7265, {low,low};}

	// end inline asm
	ld.global.f32 	%f342, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f342;
  mov.b32 %r7266, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_327;

$L__BB0_317:
	add.s32 	%r2538, %r1578, 1;
	setp.lt.s32 	%p201, %r654, %r2538;
	setp.gt.s32 	%p202, %r654, -1;
	and.pred  	%p203, %p202, %p201;
	@%p203 bra 	$L__BB0_319;
	bra.uni 	$L__BB0_318;

$L__BB0_319:
	ld.global.f32 	%f335, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f335;
  mov.b32 %r7263, {low,low};}

	// end inline asm
	ld.global.f32 	%f336, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f336;
  mov.b32 %r7264, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_320;

$L__BB0_325:
	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_327:
	mov.u32 	%r2746, 0;
	mov.u32 	%r2757, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2744,%r7261,%r2746,%r2163,%r2757;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2749,%r7265,%r2744;
}
	// end inline asm
	mov.u32 	%r2755, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2753,%r7261,%r2755,%r2163,%r2757;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2758,%r7266,%r2753;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7268,%r2749,%r2758;
}
	// end inline asm
	setp.eq.s32 	%p211, %r428, 0;
	mov.u32 	%r7267, %r7268;
	@%p211 bra 	$L__BB0_329;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7346,%r7346,%r7267;
}
	// end inline asm
	setp.eq.s32 	%p212, %r428, 1;
	@%p212 bra 	$L__BB0_331;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7344,%r7344,%r7268;
}
	// end inline asm
	mov.u32 	%r2779, 2;
	mov.u32 	%r2790, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2777,%r7261,%r2779,%r2163,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2782,%r7265,%r2777;
}
	// end inline asm
	mov.u32 	%r2788, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2786,%r7261,%r2788,%r2163,%r2790;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2791,%r7266,%r2786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7270,%r2782,%r2791;
}
	// end inline asm
	mov.u32 	%r7269, %r7270;
	@%p211 bra 	$L__BB0_333;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7345,%r7345,%r7269;
}
	// end inline asm
	@%p212 bra 	$L__BB0_335;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7343,%r7343,%r7270;
}
	// end inline asm
	mov.u32 	%r2812, 4;
	mov.u32 	%r2823, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2810,%r7261,%r2812,%r2163,%r2823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2815,%r7265,%r2810;
}
	// end inline asm
	mov.u32 	%r2821, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2819,%r7261,%r2821,%r2163,%r2823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2824,%r7266,%r2819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7272,%r2815,%r2824;
}
	// end inline asm
	mov.u32 	%r7271, %r7272;
	@%p211 bra 	$L__BB0_337;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7342,%r7342,%r7271;
}
	// end inline asm
	@%p212 bra 	$L__BB0_339;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7341,%r7341,%r7272;
}
	// end inline asm
	mov.u32 	%r2845, 6;
	mov.u32 	%r2856, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2843,%r7261,%r2845,%r2163,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2848,%r7265,%r2843;
}
	// end inline asm
	mov.u32 	%r2854, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2852,%r7261,%r2854,%r2163,%r2856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2857,%r7266,%r2852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7274,%r2848,%r2857;
}
	// end inline asm
	mov.u32 	%r7273, %r7274;
	@%p211 bra 	$L__BB0_341;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7340,%r7340,%r7273;
}
	// end inline asm
	@%p212 bra 	$L__BB0_343;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r7274;
}
	// end inline asm
	mov.u32 	%r2878, 8;
	mov.u32 	%r2889, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2876,%r7261,%r2878,%r2163,%r2889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2881,%r7265,%r2876;
}
	// end inline asm
	mov.u32 	%r2887, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2885,%r7261,%r2887,%r2163,%r2889;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2890,%r7266,%r2885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7276,%r2881,%r2890;
}
	// end inline asm
	mov.u32 	%r7275, %r7276;
	@%p211 bra 	$L__BB0_345;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7339,%r7339,%r7275;
}
	// end inline asm
	@%p212 bra 	$L__BB0_347;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7337,%r7337,%r7276;
}
	// end inline asm
	mov.u32 	%r2911, 10;
	mov.u32 	%r2922, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2909,%r7261,%r2911,%r2163,%r2922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2914,%r7265,%r2909;
}
	// end inline asm
	mov.u32 	%r2920, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2918,%r7261,%r2920,%r2163,%r2922;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2923,%r7266,%r2918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7278,%r2914,%r2923;
}
	// end inline asm
	mov.u32 	%r7277, %r7278;
	@%p211 bra 	$L__BB0_349;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r7277;
}
	// end inline asm
	@%p212 bra 	$L__BB0_351;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7333,%r7333,%r7278;
}
	// end inline asm
	mov.u32 	%r2944, 12;
	mov.u32 	%r2955, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2942,%r7261,%r2944,%r2163,%r2955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2947,%r7265,%r2942;
}
	// end inline asm
	mov.u32 	%r2953, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2951,%r7261,%r2953,%r2163,%r2955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2956,%r7266,%r2951;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7280,%r2947,%r2956;
}
	// end inline asm
	mov.u32 	%r7279, %r7280;
	@%p211 bra 	$L__BB0_353;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7335,%r7335,%r7279;
}
	// end inline asm
	@%p212 bra 	$L__BB0_355;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7332,%r7332,%r7280;
}
	// end inline asm
	mov.u32 	%r2977, 14;
	mov.u32 	%r2988, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2975,%r7261,%r2977,%r2163,%r2988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2980,%r7265,%r2975;
}
	// end inline asm
	mov.u32 	%r2986, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2984,%r7261,%r2986,%r2163,%r2988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2989,%r7266,%r2984;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7282,%r2980,%r2989;
}
	// end inline asm
	mov.u32 	%r7281, %r7282;
	@%p211 bra 	$L__BB0_357;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7330,%r7330,%r7281;
}
	// end inline asm
	@%p212 bra 	$L__BB0_359;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7327,%r7327,%r7282;
}
	// end inline asm
	mov.u32 	%r3010, 16;
	mov.u32 	%r3021, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3008,%r7261,%r3010,%r2163,%r3021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3013,%r7265,%r3008;
}
	// end inline asm
	mov.u32 	%r3019, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3017,%r7261,%r3019,%r2163,%r3021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3022,%r7266,%r3017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7284,%r3013,%r3022;
}
	// end inline asm
	mov.u32 	%r7283, %r7284;
	@%p211 bra 	$L__BB0_361;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7329,%r7329,%r7283;
}
	// end inline asm
	@%p212 bra 	$L__BB0_363;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7326,%r7326,%r7284;
}
	// end inline asm
	mov.u32 	%r3043, 18;
	mov.u32 	%r3054, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3041,%r7261,%r3043,%r2163,%r3054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3046,%r7265,%r3041;
}
	// end inline asm
	mov.u32 	%r3052, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3050,%r7261,%r3052,%r2163,%r3054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3055,%r7266,%r3050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7286,%r3046,%r3055;
}
	// end inline asm
	mov.u32 	%r7285, %r7286;
	@%p211 bra 	$L__BB0_365;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7324,%r7324,%r7285;
}
	// end inline asm
	@%p212 bra 	$L__BB0_367;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7323,%r7323,%r7286;
}
	// end inline asm
	mov.u32 	%r3076, 20;
	mov.u32 	%r3087, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3074,%r7261,%r3076,%r2163,%r3087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3079,%r7265,%r3074;
}
	// end inline asm
	mov.u32 	%r3085, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3083,%r7261,%r3085,%r2163,%r3087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3088,%r7266,%r3083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7288,%r3079,%r3088;
}
	// end inline asm
	mov.u32 	%r7287, %r7288;
	@%p211 bra 	$L__BB0_369;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7322,%r7322,%r7287;
}
	// end inline asm
	@%p212 bra 	$L__BB0_371;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7320,%r7320,%r7288;
}
	// end inline asm
	mov.u32 	%r3109, 22;
	mov.u32 	%r3120, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3107,%r7261,%r3109,%r2163,%r3120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3112,%r7265,%r3107;
}
	// end inline asm
	mov.u32 	%r3118, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3116,%r7261,%r3118,%r2163,%r3120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3121,%r7266,%r3116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7290,%r3112,%r3121;
}
	// end inline asm
	mov.u32 	%r7289, %r7290;
	@%p211 bra 	$L__BB0_373;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7318,%r7318,%r7289;
}
	// end inline asm
	@%p212 bra 	$L__BB0_375;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7315,%r7315,%r7290;
}
	// end inline asm
	mov.u32 	%r3142, 24;
	mov.u32 	%r3153, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3140,%r7261,%r3142,%r2163,%r3153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3145,%r7265,%r3140;
}
	// end inline asm
	mov.u32 	%r3151, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3149,%r7261,%r3151,%r2163,%r3153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3154,%r7266,%r3149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7292,%r3145,%r3154;
}
	// end inline asm
	mov.u32 	%r7291, %r7292;
	@%p211 bra 	$L__BB0_377;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7291, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7317,%r7317,%r7291;
}
	// end inline asm
	@%p212 bra 	$L__BB0_379;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7314,%r7314,%r7292;
}
	// end inline asm
	mov.u32 	%r3175, 26;
	mov.u32 	%r3186, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3173,%r7261,%r3175,%r2163,%r3186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3178,%r7265,%r3173;
}
	// end inline asm
	mov.u32 	%r3184, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3182,%r7261,%r3184,%r2163,%r3186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3187,%r7266,%r3182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7294,%r3178,%r3187;
}
	// end inline asm
	mov.u32 	%r7293, %r7294;
	@%p211 bra 	$L__BB0_381;

	mov.f32 	%f396, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f396;
  mov.b32 %r7293, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7312,%r7312,%r7293;
}
	// end inline asm
	@%p212 bra 	$L__BB0_383;

	mov.f32 	%f398, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f398;
  cvt.rn.f16.f32 high, %f398;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7309,%r7309,%r7294;
}
	// end inline asm
	mov.u32 	%r3208, 28;
	mov.u32 	%r3219, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3206,%r7261,%r3208,%r2163,%r3219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3211,%r7265,%r3206;
}
	// end inline asm
	mov.u32 	%r3217, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3215,%r7261,%r3217,%r2163,%r3219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3220,%r7266,%r3215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7296,%r3211,%r3220;
}
	// end inline asm
	mov.u32 	%r7295, %r7296;
	@%p211 bra 	$L__BB0_385;

	mov.f32 	%f400, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f400;
  cvt.rn.f16.f32 high, %f400;
  mov.b32 %r7295, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7311,%r7311,%r7295;
}
	// end inline asm
	@%p212 bra 	$L__BB0_387;

	mov.f32 	%f402, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f402;
  cvt.rn.f16.f32 high, %f402;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7308,%r7308,%r7296;
}
	// end inline asm
	mov.u32 	%r3250, 31;
	mov.u32 	%r3241, 30;
	mov.u32 	%r3252, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3239,%r7261,%r3241,%r2163,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3244,%r7265,%r3239;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3248,%r7261,%r3250,%r2163,%r3252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3253,%r7266,%r3248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7298,%r3244,%r3253;
}
	// end inline asm
	mov.u32 	%r7297, %r7298;
	@%p211 bra 	$L__BB0_389;

	mov.f32 	%f404, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f404;
  mov.b32 %r7297, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7304,%r7304,%r7297;
}
	// end inline asm
	@%p212 bra 	$L__BB0_391;

	mov.f32 	%f406, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f406;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7302,%r7302,%r7298;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_318:
	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7263, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_320:
	setp.eq.s32 	%p204, %r653, %r1566;
	@%p204 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_321;

$L__BB0_323:
	// begin inline asm
	{mul.f16x2 %r2640,%r7263,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7346,%r7346,%r2640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2646,%r7263,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7334,%r7334,%r2646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2652,%r7263,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r2652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2658,%r7263,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7316,%r7316,%r2658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2664,%r7263,%r7103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7318,%r7318,%r2664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2670,%r7263,%r7101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7303,%r7303,%r2670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2676,%r7264,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7340,%r7340,%r2676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2682,%r7264,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7321,%r7321,%r2682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2688,%r7263,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7344,%r7344,%r2688;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2694,%r7263,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7331,%r7331,%r2694;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2700,%r7263,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7333,%r7333,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2706,%r7263,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7313,%r7313,%r2706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2712,%r7263,%r7102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7315,%r7315,%r2712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2718,%r7263,%r7100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7301,%r7301,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7264,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r2724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7264,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7319,%r7319,%r2730;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_321:
	add.s32 	%r2543, %r1566, -2;
	setp.ne.s32 	%p205, %r653, %r2543;
	@%p205 bra 	$L__BB0_392;

	// begin inline asm
	{mul.f16x2 %r2544,%r7263,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7324,%r7324,%r2544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2550,%r7263,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7306,%r7306,%r2550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2556,%r7264,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7342,%r7342,%r2556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2562,%r7264,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7328,%r7328,%r2562;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2568,%r7264,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7330,%r7330,%r2568;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2574,%r7264,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7310,%r7310,%r2574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2580,%r7264,%r7103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7312,%r7312,%r2580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2586,%r7264,%r7101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7300,%r7300,%r2586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2592,%r7263,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7323,%r7323,%r2592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2598,%r7263,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7305,%r7305,%r2598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2604,%r7264,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7341,%r7341,%r2604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2610,%r7264,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7325,%r7325,%r2610;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2616,%r7264,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7327,%r7327,%r2616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2622,%r7264,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7307,%r7307,%r2622;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2628,%r7264,%r7102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7309,%r7309,%r2628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2634,%r7264,%r7100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7299,%r7299,%r2634;
}
	// end inline asm

$L__BB0_392:
	ld.param.u64 	%rd276, [%rd1+80];
	cvta.to.global.u64 	%rd31, %rd276;
	setp.ne.s32 	%p243, %r35, 0;
	@%p243 bra 	$L__BB0_397;

	setp.eq.s32 	%p244, %r36, 0;
	mad.lo.s32 	%r3273, %r650, %r1559, %r38;
	mul.lo.s32 	%r3274, %r1557, %r3273;
	mul.lo.s32 	%r3275, %r3274, 768;
	mad.lo.s32 	%r3276, %r36, 384, %r3275;
	add.s32 	%r3277, %r3276, -64;
	mul.wide.s32 	%rd277, %r3277, 4;
	add.s64 	%rd278, %rd31, %rd277;
	add.s64 	%rd280, %rd278, %rd279;
	ld.global.v4.u32 	{%r7358, %r7356, %r7350, %r7349}, [%rd280+256];
	ld.global.v4.u32 	{%r7360, %r7359, %r7354, %r7353}, [%rd280+1024];
	add.s64 	%rd32, %rd278, %rd281;
	@%p244 bra 	$L__BB0_395;

	ld.global.v2.u32 	{%r7352, %r7351}, [%rd32];

$L__BB0_395:
	setp.ne.s32 	%p245, %r36, %r2060;
	ld.global.v2.u32 	{%r7357, %r7355}, [%rd32+768];
	@%p245 bra 	$L__BB0_397;

	ld.global.v2.u32 	{%r7362, %r7361}, [%rd32+1536];

$L__BB0_397:
	setp.ne.s32 	%p246, %r36, 0;
	@%p246 bra 	$L__BB0_399;

	not.b32 	%r6979, %r35;
	add.s32 	%r6978, %r1556, %r6979;
	mad.lo.s32 	%r3296, %r651, %r1558, %r37;
	mul.lo.s32 	%r3300, %r3296, %r1617;
	mad.lo.s32 	%r3303, %r6978, 384, %r3300;
	add.s32 	%r3304, %r3303, -64;
	mad.lo.s32 	%r3307, %r1619, %r65, %r3304;
	mul.wide.s32 	%rd282, %r3307, 4;
	add.s64 	%rd283, %rd31, %rd282;
	add.s64 	%rd285, %rd283, %rd279;
	ld.global.v4.u32 	{%r7374, %r7373, %r7371, %r7369}, [%rd285+256];
	ld.global.v4.u32 	{%r7368, %r7367, %r7365, %r7363}, [%rd285+1024];
	add.s64 	%rd287, %rd283, %rd281;
	ld.global.v2.u32 	{%r7372, %r7370}, [%rd287+768];
	ld.global.v2.u32 	{%r7352, %r7351}, [%rd287+1536];

$L__BB0_399:
	ld.param.u64 	%rd289, [%rd1+88];
	cvta.to.global.u64 	%rd33, %rd289;
	add.s32 	%r3320, %r1561, -1;
	setp.ge.s32 	%p247, %r652, %r3320;
	setp.lt.s32 	%p248, %r652, 2;
	or.pred  	%p249, %p248, %p247;
	setp.lt.s32 	%p250, %r653, 2;
	or.pred  	%p251, %p249, %p250;
	add.s32 	%r3321, %r1562, -2;
	setp.ge.s32 	%p252, %r653, %r3321;
	or.pred  	%p253, %p252, %p251;
	mov.u32 	%r7389, %r2072;
	mov.u32 	%r7390, %r2072;
	mov.u32 	%r7391, %r2072;
	mov.u32 	%r7392, %r2072;
	mov.u32 	%r7393, %r2072;
	mov.u32 	%r7394, %r2072;
	mov.u32 	%r7395, %r2072;
	mov.u32 	%r7396, %r2072;
	mov.u32 	%r7397, %r2072;
	mov.u32 	%r7398, %r2072;
	mov.u32 	%r7399, %r2072;
	mov.u32 	%r7400, %r2072;
	mov.u32 	%r7401, %r2072;
	mov.u32 	%r7402, %r2072;
	mov.u32 	%r7403, %r2072;
	mov.u32 	%r7404, %r2072;
	mov.u32 	%r7405, %r2072;
	mov.u32 	%r7406, %r2072;
	mov.u32 	%r7407, %r2072;
	mov.u32 	%r7408, %r2072;
	mov.u32 	%r7409, %r2072;
	mov.u32 	%r7410, %r2072;
	@%p253 bra 	$L__BB0_410;

	mad.lo.s32 	%r921, %r653, %r1561, %r652;
	shl.b32 	%r3322, %r921, 6;
	mul.wide.s32 	%rd290, %r3322, 4;
	add.s64 	%rd34, %rd33, %rd290;
	and.pred  	%p256, %p243, %p246;
	mov.u32 	%r7392, %r2072;
	mov.u32 	%r7394, %r2072;
	@%p256 bra 	$L__BB0_402;

	add.s64 	%rd292, %rd34, %rd281;
	ld.global.v2.u32 	{%r7394, %r7392}, [%rd292+256];

$L__BB0_402:
	mov.u32 	%r7397, %r2072;
	mov.u32 	%r7399, %r2072;
	@%p243 bra 	$L__BB0_404;

	shl.b32 	%r3326, %r1561, 5;
	cvt.s64.s32 	%rd293, %r3326;
	cvt.s64.s32 	%rd294, %r40;
	add.s64 	%rd295, %rd293, %rd294;
	shl.b64 	%rd296, %rd295, 3;
	add.s64 	%rd297, %rd34, %rd296;
	ld.global.v2.u32 	{%r7399, %r7397}, [%rd297];

$L__BB0_404:
	mov.u32 	%r7404, %r2072;
	mov.u32 	%r7406, %r2072;
	@%p246 bra 	$L__BB0_406;

	shl.b32 	%r3330, %r1561, 5;
	neg.s32 	%r3331, %r3330;
	cvt.s64.s32 	%rd298, %r3331;
	cvt.s64.s32 	%rd299, %r40;
	add.s64 	%rd300, %rd298, %rd299;
	shl.b64 	%rd301, %rd300, 3;
	add.s64 	%rd302, %rd34, %rd301;
	ld.global.v2.u32 	{%r7406, %r7404}, [%rd302];

$L__BB0_406:
	shl.b32 	%r3334, %r1562, 6;
	shl.b32 	%r3335, %r921, 7;
	mad.lo.s32 	%r3336, %r3334, %r1561, %r3335;
	mul.wide.s32 	%rd303, %r3336, 4;
	add.s64 	%rd35, %rd33, %rd303;
	mov.u32 	%r7389, %r2072;
	mov.u32 	%r7390, %r2072;
	mov.u32 	%r7395, %r2072;
	mov.u32 	%r7396, %r2072;
	mov.u32 	%r7398, %r2072;
	mov.u32 	%r7400, %r2072;
	mov.u32 	%r7407, %r2072;
	mov.u32 	%r7408, %r2072;
	@%p243 bra 	$L__BB0_408;

	shl.b32 	%r3337, %r1561, 5;
	cvt.s64.s32 	%rd304, %r3337;
	cvt.s64.s32 	%rd305, %r40;
	add.s64 	%rd306, %rd304, %rd305;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd35, %rd307;
	ld.global.v4.u32 	{%r7400, %r7398, %r7390, %r7389}, [%rd308];
	shl.b32 	%r3342, %r1561, 6;
	add.s32 	%r3343, %r3342, -32;
	cvt.s64.s32 	%rd309, %r3343;
	add.s64 	%rd310, %rd309, %rd305;
	shl.b64 	%rd311, %rd310, 4;
	add.s64 	%rd312, %rd35, %rd311;
	ld.global.v4.u32 	{%r7408, %r7407, %r7396, %r7395}, [%rd312];

$L__BB0_408:
	mov.u32 	%r7391, %r2072;
	mov.u32 	%r7393, %r2072;
	mov.u32 	%r7401, %r2072;
	mov.u32 	%r7402, %r2072;
	mov.u32 	%r7403, %r2072;
	mov.u32 	%r7405, %r2072;
	mov.u32 	%r7409, %r2072;
	mov.u32 	%r7410, %r2072;
	@%p246 bra 	$L__BB0_410;

	shl.b32 	%r3349, %r1561, 5;
	xor.b32  	%r3350, %r3349, -32;
	cvt.s64.s32 	%rd313, %r3350;
	cvt.s64.s32 	%rd314, %r40;
	add.s64 	%rd315, %rd313, %rd314;
	shl.b64 	%rd316, %rd315, 4;
	add.s64 	%rd317, %rd35, %rd316;
	ld.global.v4.u32 	{%r7410, %r7409, %r7405, %r7403}, [%rd317];
	add.s64 	%rd319, %rd35, %rd279;
	ld.global.v4.u32 	{%r7402, %r7401, %r7393, %r7391}, [%rd319];

$L__BB0_410:
	mov.u32 	%r3364, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3360,%r7231,%r429,%r2163,%r3364;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3360;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7231;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3367, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3368,%r7232,%r3367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3371,%r7084,%r3368;
}
	// end inline asm
	@%p17 bra 	$L__BB0_412;
	bra.uni 	$L__BB0_411;

$L__BB0_412:
	// begin inline asm
	{neg.f16x2 %r7411,%r7346;
}
	// end inline asm
	bra.uni 	$L__BB0_413;

$L__BB0_411:
	// begin inline asm
	{mul.f16x2 %r7411,%r7085,%r3368;
}
	// end inline asm

$L__BB0_413:
	mov.u32 	%r3384, 31;
	mov.u32 	%r3407, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3382,%r7411,%r3384,%r2163,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3387,%r3371,%r3382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3390,%r7230,%r7229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3393,%r3390,%r3387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3396,%r7233,%r3393;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3399,%r7346,%r3396;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3403,%r7226,%r429,%r2163,%r3407;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3403;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7226;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3410, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3411,%r7227,%r3410;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3414,%r7084,%r3411;
}
	// end inline asm
	mov.u32 	%r7412, %r7345;
	@%p17 bra 	$L__BB0_415;

	// begin inline asm
	{mul.f16x2 %r7412,%r7085,%r3411;
}
	// end inline asm

$L__BB0_415:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3425,%r7412,%r3384,%r2163,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3430,%r3414,%r3425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3433,%r7230,%r7225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3436,%r3430,%r3433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3439,%r7228,%r3436;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3442,%r7345,%r3439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3445,%r7231,%r7232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3448,%r7088,%r3445;
}
	// end inline asm
	@%p17 bra 	$L__BB0_417;
	bra.uni 	$L__BB0_416;

$L__BB0_417:
	// begin inline asm
	{neg.f16x2 %r7413,%r7344;
}
	// end inline asm
	bra.uni 	$L__BB0_418;

$L__BB0_416:
	// begin inline asm
	{mul.f16x2 %r7413,%r7089,%r3445;
}
	// end inline asm

$L__BB0_418:
	mov.u32 	%r3461, 31;
	mov.u32 	%r3463, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3459,%r7413,%r3461,%r2163,%r3463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3464,%r3448,%r3459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3467,%r7223,%r7222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3470,%r3467,%r3464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3473,%r7224,%r3470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3476,%r7344,%r3473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3479,%r7226,%r7227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3482,%r7088,%r3479;
}
	// end inline asm
	mov.u32 	%r7414, %r7343;
	@%p17 bra 	$L__BB0_420;

	// begin inline asm
	{mul.f16x2 %r7414,%r7089,%r3479;
}
	// end inline asm

$L__BB0_420:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3491,%r7414,%r3461,%r2163,%r3463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3496,%r3482,%r3491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3499,%r7223,%r7220;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3502,%r3496,%r3499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3505,%r7221,%r3502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3508,%r7343,%r3505;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3512,%r7217,%r429,%r2163,%r3463;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3512;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7217;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3519, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3520,%r7218,%r3519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3523,%r7084,%r3520;
}
	// end inline asm
	@%p17 bra 	$L__BB0_422;
	bra.uni 	$L__BB0_421;

$L__BB0_422:
	// begin inline asm
	{neg.f16x2 %r7415,%r7342;
}
	// end inline asm
	bra.uni 	$L__BB0_423;

$L__BB0_421:
	// begin inline asm
	{mul.f16x2 %r7415,%r7085,%r3520;
}
	// end inline asm

$L__BB0_423:
	mov.u32 	%r3538, 31;
	mov.u32 	%r3540, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3536,%r7415,%r3538,%r2163,%r3540;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3541,%r3523,%r3536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3544,%r7216,%r7230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3547,%r3544,%r3541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3550,%r7219,%r3547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3553,%r7342,%r3550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3556,%r7217,%r7218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3559,%r7088,%r3556;
}
	// end inline asm
	@%p17 bra 	$L__BB0_425;
	bra.uni 	$L__BB0_424;

$L__BB0_425:
	// begin inline asm
	{neg.f16x2 %r7416,%r7341;
}
	// end inline asm
	bra.uni 	$L__BB0_426;

$L__BB0_424:
	// begin inline asm
	{mul.f16x2 %r7416,%r7089,%r3556;
}
	// end inline asm

$L__BB0_426:
	mov.u32 	%r3572, 31;
	mov.u32 	%r3595, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3570,%r7416,%r3572,%r2163,%r3595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3575,%r3559,%r3570;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3578,%r7214,%r7223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3581,%r3578,%r3575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3584,%r7215,%r3581;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3587,%r7341,%r3584;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3591,%r7212,%r429,%r2163,%r3595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3591;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7212;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3598, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3599,%r7213,%r3598;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3602,%r7084,%r3599;
}
	// end inline asm
	@%p17 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7417,%r7340;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7417,%r7085,%r3599;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3617, 31;
	mov.u32 	%r3640, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3615,%r7417,%r3617,%r2163,%r3640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3620,%r3602,%r3615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3623,%r7211,%r7482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3626,%r3623,%r3620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3629,%r7410,%r3626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3632,%r7340,%r3629;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3636,%r7207,%r429,%r2163,%r3640;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3636;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7207;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3643, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3644,%r7208,%r3643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3647,%r7084,%r3644;
}
	// end inline asm
	mov.u32 	%r7418, %r7339;
	@%p17 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7418,%r7085,%r3644;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3658,%r7418,%r3617,%r2163,%r3640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3663,%r3647,%r3658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3666,%r7211,%r7229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3669,%r3663,%r3666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3672,%r7209,%r3669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3675,%r7339,%r3672;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3678,%r7212,%r7213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3681,%r7088,%r3678;
}
	// end inline asm
	@%p17 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7419,%r7338;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7419,%r7089,%r3678;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3694, 31;
	mov.u32 	%r3696, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3692,%r7419,%r3694,%r2163,%r3696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3697,%r3681,%r3692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3700,%r7206,%r7481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r3700,%r3697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3706,%r7409,%r3703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3709,%r7338,%r3706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3712,%r7207,%r7208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3715,%r7088,%r3712;
}
	// end inline asm
	mov.u32 	%r7420, %r7337;
	@%p17 bra 	$L__BB0_436;

	// begin inline asm
	{mul.f16x2 %r7420,%r7089,%r3712;
}
	// end inline asm

$L__BB0_436:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3724,%r7420,%r3694,%r2163,%r3696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3729,%r3715,%r3724;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3732,%r7206,%r7222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3735,%r3729,%r3732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3738,%r7204,%r3735;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3741,%r7337,%r3738;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3745,%r7201,%r429,%r2163,%r3696;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3745;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7201;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3752, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3753,%r7202,%r3752;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3756,%r7084,%r3753;
}
	// end inline asm
	@%p17 bra 	$L__BB0_438;
	bra.uni 	$L__BB0_437;

$L__BB0_438:
	// begin inline asm
	{neg.f16x2 %r7421,%r7336;
}
	// end inline asm
	bra.uni 	$L__BB0_439;

$L__BB0_437:
	// begin inline asm
	{mul.f16x2 %r7421,%r7085,%r3753;
}
	// end inline asm

$L__BB0_439:
	mov.u32 	%r3771, 31;
	mov.u32 	%r3794, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3769,%r7421,%r3771,%r2163,%r3794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3774,%r3756,%r3769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3777,%r7200,%r7211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r3777,%r3774;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3783,%r542,%r3780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7259,%r7336,%r3783;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3790,%r7197,%r429,%r2163,%r3794;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3790;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7197;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3797, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r7198,%r3797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r7084,%r3798;
}
	// end inline asm
	mov.u32 	%r7422, %r7335;
	@%p17 bra 	$L__BB0_441;

	// begin inline asm
	{mul.f16x2 %r7422,%r7085,%r3798;
}
	// end inline asm

$L__BB0_441:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3812,%r7422,%r3771,%r2163,%r3794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3817,%r3801,%r3812;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3820,%r7200,%r7230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3823,%r3817,%r3820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3826,%r538,%r3823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7257,%r7335,%r3826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3832,%r7202,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3835,%r7198,%r7208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3838,%r3832,%r3835;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3841,%r7196,%r3838;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3844,%r7334,%r3841;
}
	// end inline asm
	selp.b32 	%r1047, %r7334, %r3844, %p17;
	// begin inline asm
	{sub.f16x2 %r3847,%r7201,%r7202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3850,%r7088,%r3847;
}
	// end inline asm
	@%p17 bra 	$L__BB0_443;
	bra.uni 	$L__BB0_442;

$L__BB0_443:
	// begin inline asm
	{neg.f16x2 %r7423,%r7333;
}
	// end inline asm
	bra.uni 	$L__BB0_444;

$L__BB0_442:
	// begin inline asm
	{mul.f16x2 %r7423,%r7089,%r3847;
}
	// end inline asm

$L__BB0_444:
	mov.u32 	%r3863, 31;
	mov.u32 	%r3865, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3861,%r7423,%r3863,%r2163,%r3865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3866,%r3850,%r3861;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3869,%r7194,%r7206;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3872,%r3869,%r3866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3875,%r534,%r3872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7258,%r7333,%r3875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3881,%r7197,%r7198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3884,%r7088,%r3881;
}
	// end inline asm
	mov.u32 	%r7424, %r7332;
	@%p17 bra 	$L__BB0_446;

	// begin inline asm
	{mul.f16x2 %r7424,%r7089,%r3881;
}
	// end inline asm

$L__BB0_446:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3893,%r7424,%r3863,%r2163,%r3865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3898,%r3884,%r3893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3901,%r7194,%r7223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3904,%r3898,%r3901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3907,%r532,%r3904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7256,%r7332,%r3907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3913,%r7201,%r7231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3916,%r7197,%r7207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3919,%r3913,%r3916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3922,%r7192,%r3919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3925,%r7331,%r3922;
}
	// end inline asm
	selp.b32 	%r1059, %r7331, %r3925, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3929,%r7189,%r429,%r2163,%r3865;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3929;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7189;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3936, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3937,%r7190,%r3936;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3940,%r7084,%r3937;
}
	// end inline asm
	@%p17 bra 	$L__BB0_448;
	bra.uni 	$L__BB0_447;

$L__BB0_448:
	// begin inline asm
	{neg.f16x2 %r7425,%r7330;
}
	// end inline asm
	bra.uni 	$L__BB0_449;

$L__BB0_447:
	// begin inline asm
	{mul.f16x2 %r7425,%r7085,%r3937;
}
	// end inline asm

$L__BB0_449:
	mov.u32 	%r3955, 31;
	mov.u32 	%r3978, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3953,%r7425,%r3955,%r2163,%r3978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3958,%r3940,%r3953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3961,%r7188,%r7200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3964,%r3961,%r3958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3967,%r530,%r3964;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7255,%r7330,%r3967;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3974,%r7185,%r429,%r2163,%r3978;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3974;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7185;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3981, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r7186,%r3981;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3985,%r7084,%r3982;
}
	// end inline asm
	mov.u32 	%r7426, %r7329;
	@%p17 bra 	$L__BB0_451;

	// begin inline asm
	{mul.f16x2 %r7426,%r7085,%r3982;
}
	// end inline asm

$L__BB0_451:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3996,%r7426,%r3955,%r2163,%r3978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4001,%r3985,%r3996;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4004,%r7188,%r7216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r4001,%r4004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4010,%r7187,%r4007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4013,%r7329,%r4010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4016,%r7190,%r7218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4019,%r7186,%r7198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4022,%r4016,%r4019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4025,%r7184,%r4022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4028,%r7328,%r4025;
}
	// end inline asm
	selp.b32 	%r1071, %r7328, %r4028, %p17;
	// begin inline asm
	{sub.f16x2 %r4031,%r7189,%r7190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r7088,%r4031;
}
	// end inline asm
	@%p17 bra 	$L__BB0_453;
	bra.uni 	$L__BB0_452;

$L__BB0_453:
	// begin inline asm
	{neg.f16x2 %r7427,%r7327;
}
	// end inline asm
	bra.uni 	$L__BB0_454;

$L__BB0_452:
	// begin inline asm
	{mul.f16x2 %r7427,%r7089,%r4031;
}
	// end inline asm

$L__BB0_454:
	mov.u32 	%r4047, 31;
	mov.u32 	%r4049, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4045,%r7427,%r4047,%r2163,%r4049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4050,%r4034,%r4045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4053,%r7182,%r7194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4056,%r4053,%r4050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4059,%r522,%r4056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7254,%r7327,%r4059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4065,%r7185,%r7186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4068,%r7088,%r4065;
}
	// end inline asm
	mov.u32 	%r7428, %r7326;
	@%p17 bra 	$L__BB0_456;

	// begin inline asm
	{mul.f16x2 %r7428,%r7089,%r4065;
}
	// end inline asm

$L__BB0_456:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4077,%r7428,%r4047,%r2163,%r4049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4082,%r4068,%r4077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4085,%r7182,%r7214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4088,%r4082,%r4085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4091,%r7181,%r4088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4094,%r7326,%r4091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4097,%r7189,%r7217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4100,%r7185,%r7197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4103,%r4097,%r4100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4106,%r7180,%r4103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4109,%r7325,%r4106;
}
	// end inline asm
	selp.b32 	%r1083, %r7325, %r4109, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4113,%r7178,%r429,%r2163,%r4049;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4113;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7178;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4120, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7179,%r4120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4124,%r7084,%r4121;
}
	// end inline asm
	@%p17 bra 	$L__BB0_458;
	bra.uni 	$L__BB0_457;

$L__BB0_458:
	// begin inline asm
	{neg.f16x2 %r7429,%r7324;
}
	// end inline asm
	bra.uni 	$L__BB0_459;

$L__BB0_457:
	// begin inline asm
	{mul.f16x2 %r7429,%r7085,%r4121;
}
	// end inline asm

$L__BB0_459:
	mov.u32 	%r4139, 31;
	mov.u32 	%r4141, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4137,%r7429,%r4139,%r2163,%r4141;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4142,%r4124,%r4137;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4145,%r7466,%r7188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r4145,%r4142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4151,%r7408,%r4148;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4154,%r7324,%r4151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4157,%r7178,%r7179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4160,%r7088,%r4157;
}
	// end inline asm
	@%p17 bra 	$L__BB0_461;
	bra.uni 	$L__BB0_460;

$L__BB0_461:
	// begin inline asm
	{neg.f16x2 %r7430,%r7323;
}
	// end inline asm
	bra.uni 	$L__BB0_462;

$L__BB0_460:
	// begin inline asm
	{mul.f16x2 %r7430,%r7089,%r4157;
}
	// end inline asm

$L__BB0_462:
	mov.u32 	%r4173, 31;
	mov.u32 	%r4196, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4171,%r7430,%r4173,%r2163,%r4196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4176,%r4160,%r4171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r7465,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4182,%r4179,%r4176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4185,%r7407,%r4182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4188,%r7323,%r4185;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4192,%r7174,%r429,%r2163,%r4196;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4192;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7174;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4199, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4200,%r7175,%r4199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4203,%r7084,%r4200;
}
	// end inline asm
	mov.u32 	%r7431, %r7322;
	@%p17 bra 	$L__BB0_464;

	// begin inline asm
	{mul.f16x2 %r7431,%r7085,%r4200;
}
	// end inline asm

$L__BB0_464:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4214,%r7431,%r4173,%r2163,%r4196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4219,%r4203,%r4214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4222,%r7150,%r7211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4225,%r4219,%r4222;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4228,%r7406,%r4225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7253,%r7322,%r4228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4234,%r7151,%r7213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4237,%r7175,%r7480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4240,%r4234,%r4237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4243,%r7405,%r4240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4246,%r7321,%r4243;
}
	// end inline asm
	selp.b32 	%r1101, %r7321, %r4246, %p17;
	// begin inline asm
	{sub.f16x2 %r4249,%r7174,%r7175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4252,%r7088,%r4249;
}
	// end inline asm
	mov.u32 	%r7432, %r7320;
	@%p17 bra 	$L__BB0_466;

	// begin inline asm
	{mul.f16x2 %r7432,%r7089,%r4249;
}
	// end inline asm

$L__BB0_466:
	mov.u32 	%r4263, 31;
	mov.u32 	%r4301, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4261,%r7432,%r4263,%r2163,%r4301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4266,%r4252,%r4261;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4269,%r7148,%r7206;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4272,%r4266,%r4269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4275,%r7404,%r4272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7252,%r7320,%r4275;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4281,%r7149,%r7212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4284,%r7174,%r7479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4287,%r4281,%r4284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4290,%r7403,%r4287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4293,%r7319,%r4290;
}
	// end inline asm
	selp.b32 	%r1107, %r7319, %r4293, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4297,%r7170,%r429,%r2163,%r4301;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4297;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7170;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4304, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7171,%r4304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4308,%r7084,%r4305;
}
	// end inline asm
	@%p17 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7433,%r7318;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7433,%r7085,%r4305;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4323, 31;
	mov.u32 	%r4346, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4321,%r7433,%r4323,%r2163,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4326,%r4308,%r4321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4329,%r7169,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r4329,%r4326;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4335,%r7402,%r4332;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7251,%r7318,%r4335;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4342,%r7166,%r429,%r2163,%r4346;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4342;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7166;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4349, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r7167,%r4349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4353,%r7084,%r4350;
}
	// end inline asm
	mov.u32 	%r7434, %r7317;
	@%p17 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7434,%r7085,%r4350;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4364,%r7434,%r4323,%r2163,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4369,%r4353,%r4364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4372,%r7169,%r7200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4375,%r4369,%r4372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4378,%r7199,%r4375;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7249,%r7317,%r4378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4384,%r7171,%r7202;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4387,%r7167,%r7175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4390,%r4384,%r4387;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4393,%r504,%r4390;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4396,%r7316,%r4393;
}
	// end inline asm
	selp.b32 	%r7247, %r7316, %r4396, %p17;
	// begin inline asm
	{sub.f16x2 %r4399,%r7170,%r7171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4402,%r7088,%r4399;
}
	// end inline asm
	@%p17 bra 	$L__BB0_473;
	bra.uni 	$L__BB0_472;

$L__BB0_473:
	// begin inline asm
	{neg.f16x2 %r7435,%r7315;
}
	// end inline asm
	bra.uni 	$L__BB0_474;

$L__BB0_472:
	// begin inline asm
	{mul.f16x2 %r7435,%r7089,%r4399;
}
	// end inline asm

$L__BB0_474:
	mov.u32 	%r4415, 31;
	mov.u32 	%r4417, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4413,%r7435,%r4415,%r2163,%r4417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4418,%r4402,%r4413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4421,%r7164,%r7148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4424,%r4421,%r4418;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4427,%r7401,%r4424;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7250,%r7315,%r4427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4433,%r7166,%r7167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4436,%r7088,%r4433;
}
	// end inline asm
	mov.u32 	%r7436, %r7314;
	@%p17 bra 	$L__BB0_476;

	// begin inline asm
	{mul.f16x2 %r7436,%r7089,%r4433;
}
	// end inline asm

$L__BB0_476:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4445,%r7436,%r4415,%r2163,%r4417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4450,%r4436,%r4445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4453,%r7164,%r7194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4456,%r4450,%r4453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4459,%r7193,%r4456;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7248,%r7314,%r4459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4465,%r7170,%r7201;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4468,%r7166,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4471,%r4465,%r4468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4474,%r501,%r4471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4477,%r7313,%r4474;
}
	// end inline asm
	selp.b32 	%r7246, %r7313, %r4477, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4481,%r7160,%r429,%r2163,%r4417;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4481;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7160;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4488, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4489,%r7161,%r4488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4492,%r7084,%r4489;
}
	// end inline asm
	@%p17 bra 	$L__BB0_478;
	bra.uni 	$L__BB0_477;

$L__BB0_478:
	// begin inline asm
	{neg.f16x2 %r7437,%r7312;
}
	// end inline asm
	bra.uni 	$L__BB0_479;

$L__BB0_477:
	// begin inline asm
	{mul.f16x2 %r7437,%r7085,%r4489;
}
	// end inline asm

$L__BB0_479:
	mov.u32 	%r4507, 31;
	mov.u32 	%r4530, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4505,%r7437,%r4507,%r2163,%r4530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4510,%r4492,%r4505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4513,%r7147,%r7169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r4513,%r4510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4519,%r7400,%r4516;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7245,%r7312,%r4519;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4526,%r7158,%r429,%r2163,%r4530;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4526;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7158;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4533, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r7159,%r4533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4537,%r7084,%r4534;
}
	// end inline asm
	mov.u32 	%r7438, %r7311;
	@%p17 bra 	$L__BB0_481;

	// begin inline asm
	{mul.f16x2 %r7438,%r7085,%r4534;
}
	// end inline asm

$L__BB0_481:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4548,%r7438,%r4507,%r2163,%r4530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4553,%r4537,%r4548;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4556,%r7147,%r7188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r4553,%r4556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r7399,%r4559;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7243,%r7311,%r4562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4568,%r7161,%r7190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4571,%r7159,%r7167;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4574,%r4568,%r4571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4577,%r496,%r4574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4580,%r7310,%r4577;
}
	// end inline asm
	selp.b32 	%r7241, %r7310, %r4580, %p17;
	// begin inline asm
	{sub.f16x2 %r4583,%r7160,%r7161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4586,%r7088,%r4583;
}
	// end inline asm
	@%p17 bra 	$L__BB0_483;
	bra.uni 	$L__BB0_482;

$L__BB0_483:
	// begin inline asm
	{neg.f16x2 %r7439,%r7309;
}
	// end inline asm
	bra.uni 	$L__BB0_484;

$L__BB0_482:
	// begin inline asm
	{mul.f16x2 %r7439,%r7089,%r4583;
}
	// end inline asm

$L__BB0_484:
	mov.u32 	%r4599, 31;
	mov.u32 	%r4601, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4597,%r7439,%r4599,%r2163,%r4601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4602,%r4586,%r4597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4605,%r7146,%r7164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4608,%r4605,%r4602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4611,%r7398,%r4608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7244,%r7309,%r4611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4617,%r7158,%r7159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4620,%r7088,%r4617;
}
	// end inline asm
	mov.u32 	%r7440, %r7308;
	@%p17 bra 	$L__BB0_486;

	// begin inline asm
	{mul.f16x2 %r7440,%r7089,%r4617;
}
	// end inline asm

$L__BB0_486:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4629,%r7440,%r4599,%r2163,%r4601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4634,%r4620,%r4629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4637,%r7146,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4640,%r4634,%r4637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4643,%r7397,%r4640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7242,%r7308,%r4643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4649,%r7160,%r7189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4652,%r7158,%r7166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4655,%r4649,%r4652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4658,%r495,%r4655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4661,%r7307,%r4658;
}
	// end inline asm
	selp.b32 	%r7240, %r7307, %r4661, %p17;
	// begin inline asm
	{sub.f16x2 %r4664,%r7145,%r7179;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4667,%r7464,%r7159;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4670,%r4664,%r4667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4673,%r7396,%r4670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4676,%r7306,%r4673;
}
	// end inline asm
	selp.b32 	%r1156, %r7306, %r4676, %p17;
	// begin inline asm
	{sub.f16x2 %r4679,%r7144,%r7178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4682,%r7463,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4685,%r4679,%r4682;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4688,%r7395,%r4685;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4691,%r7305,%r4688;
}
	// end inline asm
	selp.b32 	%r1157, %r7305, %r4691, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4695,%r7152,%r429,%r2163,%r4601;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4695;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7152;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4702, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4703,%r7153,%r4702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4706,%r7084,%r4703;
}
	// end inline asm
	mov.u32 	%r7441, %r7304;
	@%p17 bra 	$L__BB0_488;

	// begin inline asm
	{mul.f16x2 %r7441,%r7085,%r4703;
}
	// end inline asm

$L__BB0_488:
	mov.u32 	%r4719, 31;
	mov.u32 	%r4721, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4717,%r7441,%r4719,%r2163,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4722,%r4706,%r4717;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4725,%r7140,%r7169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4728,%r4722,%r4725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4731,%r7394,%r4728;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7239,%r7304,%r4731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4737,%r7141,%r7171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4740,%r7153,%r7143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4743,%r4737,%r4740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4746,%r7393,%r4743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4749,%r7303,%r4746;
}
	// end inline asm
	selp.b32 	%r7237, %r7303, %r4749, %p17;
	// begin inline asm
	{sub.f16x2 %r4752,%r7152,%r7153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r7088,%r4752;
}
	// end inline asm
	mov.u32 	%r7442, %r7302;
	@%p17 bra 	$L__BB0_490;

	// begin inline asm
	{mul.f16x2 %r7442,%r7089,%r4752;
}
	// end inline asm

$L__BB0_490:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4764,%r7442,%r4719,%r2163,%r4721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4769,%r4755,%r4764;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4772,%r7138,%r7164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4775,%r4769,%r4772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4778,%r7392,%r4775;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7238,%r7302,%r4778;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4784,%r7139,%r7170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4787,%r7152,%r7142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4790,%r4784,%r4787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4793,%r7391,%r4790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4796,%r7301,%r4793;
}
	// end inline asm
	selp.b32 	%r7236, %r7301, %r4796, %p17;
	// begin inline asm
	{sub.f16x2 %r4799,%r7136,%r7161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4802,%r7137,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4805,%r4799,%r4802;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4808,%r7390,%r4805;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4811,%r7300,%r4808;
}
	// end inline asm
	selp.b32 	%r7235, %r7300, %r4811, %p17;
	// begin inline asm
	{sub.f16x2 %r4814,%r7134,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4817,%r7135,%r7152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4820,%r4814,%r4817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4823,%r7389,%r4820;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4826,%r7299,%r4823;
}
	// end inline asm
	selp.b32 	%r7234, %r7299, %r4826, %p17;
	bar.sync 	0;
	ld.param.u64 	%rd320, [%rd1+160];
	cvta.to.global.u64 	%rd37, %rd320;
	add.s32 	%r4831, %r1570, 2;
	setp.lt.s32 	%p294, %r652, %r4831;
	add.s32 	%r4832, %r1571, -1;
	setp.ge.s32 	%p295, %r652, %r4832;
	or.pred  	%p296, %p295, %p294;
	add.s32 	%r4833, %r1572, 2;
	setp.lt.s32 	%p297, %r653, %r4833;
	or.pred  	%p298, %p296, %p297;
	add.s32 	%r4834, %r1573, -2;
	setp.ge.s32 	%p299, %r653, %r4834;
	or.pred  	%p300, %p299, %p298;
	setp.lt.s32 	%p301, %r654, %r1567;
	or.pred  	%p302, %p301, %p300;
	mad.lo.s32 	%r4835, %r1569, %r1568, %r1567;
	setp.ge.s32 	%p303, %r654, %r4835;
	or.pred  	%p304, %p302, %p303;
	@%p304 bra 	$L__BB0_732;

	sub.s32 	%r1172, %r654, %r1567;
	rem.s32 	%r4836, %r1172, %r1568;
	setp.ne.s32 	%p305, %r4836, 0;
	@%p305 bra 	$L__BB0_732;

	div.s32 	%r4837, %r1172, %r1568;
	mul.lo.s32 	%r4839, %r4837, %r52;
	sub.s32 	%r1173, %r652, %r1570;
	sub.s32 	%r1174, %r653, %r1572;
	mul.lo.s32 	%r1175, %r4839, 3;
	add.s32 	%r4840, %r1173, %r1175;
	add.s32 	%r4841, %r4840, -2;
	mul.lo.s32 	%r1176, %r4841, %r53;
	add.s32 	%r4843, %r1174, %r1176;
	mul.lo.s32 	%r4844, %r4843, %r54;
	sub.s32 	%r1177, %r4844, %r1574;
	@%p17 bra 	$L__BB0_497;

	not.pred 	%p307, %p13;
	@%p307 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3399;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4846, %r1177, %r395;
	mul.wide.s32 	%rd321, %r4846, 4;
	add.s64 	%rd322, %rd37, %rd321;
	st.global.f32 	[%rd322], %f407;

$L__BB0_495:
	not.pred 	%p308, %p15;
	@%p308 bra 	$L__BB0_497;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3399;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4848, %r1177, %r396;
	mul.wide.s32 	%rd323, %r4848, 4;
	add.s64 	%rd324, %rd37, %rd323;
	st.global.f32 	[%rd324], %f408;

$L__BB0_497:
	@%p17 bra 	$L__BB0_502;

	not.pred 	%p310, %p14;
	@%p310 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3476;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4850, %r1177, %r409;
	mul.wide.s32 	%rd325, %r4850, 4;
	add.s64 	%rd326, %rd37, %rd325;
	st.global.f32 	[%rd326], %f409;

$L__BB0_500:
	not.pred 	%p311, %p16;
	@%p311 bra 	$L__BB0_502;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3476;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4852, %r1177, %r410;
	mul.wide.s32 	%rd327, %r4852, 4;
	add.s64 	%rd328, %rd37, %rd327;
	st.global.f32 	[%rd328], %f410;

$L__BB0_502:
	sub.s32 	%r6989, %r652, %r1570;
	add.s32 	%r1178, %r1175, %r52;
	add.s32 	%r4854, %r6989, %r1178;
	add.s32 	%r4855, %r4854, -2;
	mad.lo.s32 	%r4857, %r4855, %r53, %r1174;
	mul.lo.s32 	%r4858, %r4857, %r54;
	sub.s32 	%r1179, %r4858, %r1574;
	@%p17 bra 	$L__BB0_507;

	not.pred 	%p313, %p13;
	@%p313 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3442;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4860, %r1179, %r395;
	mul.wide.s32 	%rd329, %r4860, 4;
	add.s64 	%rd330, %rd37, %rd329;
	st.global.f32 	[%rd330], %f411;

$L__BB0_505:
	not.pred 	%p314, %p15;
	@%p314 bra 	$L__BB0_507;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3442;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4862, %r1179, %r396;
	mul.wide.s32 	%rd331, %r4862, 4;
	add.s64 	%rd332, %rd37, %rd331;
	st.global.f32 	[%rd332], %f412;

$L__BB0_507:
	@%p17 bra 	$L__BB0_512;

	not.pred 	%p316, %p14;
	@%p316 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3508;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4864, %r1179, %r409;
	mul.wide.s32 	%rd333, %r4864, 4;
	add.s64 	%rd334, %rd37, %rd333;
	st.global.f32 	[%rd334], %f413;

$L__BB0_510:
	not.pred 	%p317, %p16;
	@%p317 bra 	$L__BB0_512;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3508;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4866, %r1179, %r410;
	mul.wide.s32 	%rd335, %r4866, 4;
	add.s64 	%rd336, %rd37, %rd335;
	st.global.f32 	[%rd336], %f414;

$L__BB0_512:
	add.s32 	%r1180, %r1174, 1;
	add.s32 	%r4867, %r1180, %r1176;
	mul.lo.s32 	%r4868, %r4867, %r54;
	sub.s32 	%r1181, %r4868, %r1574;
	@%p17 bra 	$L__BB0_517;

	not.pred 	%p319, %p13;
	@%p319 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3553;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4870, %r1181, %r395;
	mul.wide.s32 	%rd337, %r4870, 4;
	add.s64 	%rd338, %rd37, %rd337;
	st.global.f32 	[%rd338], %f415;

$L__BB0_515:
	not.pred 	%p320, %p15;
	@%p320 bra 	$L__BB0_517;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3553;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4872, %r1181, %r396;
	mul.wide.s32 	%rd339, %r4872, 4;
	add.s64 	%rd340, %rd37, %rd339;
	st.global.f32 	[%rd340], %f416;

$L__BB0_517:
	@%p17 bra 	$L__BB0_522;

	not.pred 	%p322, %p14;
	@%p322 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3587;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4874, %r1181, %r409;
	mul.wide.s32 	%rd341, %r4874, 4;
	add.s64 	%rd342, %rd37, %rd341;
	st.global.f32 	[%rd342], %f417;

$L__BB0_520:
	not.pred 	%p323, %p16;
	@%p323 bra 	$L__BB0_522;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3587;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4876, %r1181, %r410;
	mul.wide.s32 	%rd343, %r4876, 4;
	add.s64 	%rd344, %rd37, %rd343;
	st.global.f32 	[%rd344], %f418;

$L__BB0_522:
	not.b32 	%r4877, %r1570;
	add.s32 	%r1182, %r652, %r4877;
	not.b32 	%r4878, %r1572;
	add.s32 	%r1183, %r653, %r4878;
	add.s32 	%r4879, %r1182, %r1175;
	mul.lo.s32 	%r1184, %r4879, %r53;
	add.s32 	%r4881, %r1183, %r1184;
	mul.lo.s32 	%r4882, %r4881, %r54;
	sub.s32 	%r1185, %r4882, %r1574;
	@%p17 bra 	$L__BB0_527;

	not.pred 	%p325, %p13;
	@%p325 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3632;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4884, %r1185, %r395;
	mul.wide.s32 	%rd345, %r4884, 4;
	add.s64 	%rd346, %rd37, %rd345;
	st.global.f32 	[%rd346], %f419;

$L__BB0_525:
	not.pred 	%p326, %p15;
	@%p326 bra 	$L__BB0_527;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3632;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4886, %r1185, %r396;
	mul.wide.s32 	%rd347, %r4886, 4;
	add.s64 	%rd348, %rd37, %rd347;
	st.global.f32 	[%rd348], %f420;

$L__BB0_527:
	@%p17 bra 	$L__BB0_532;

	not.pred 	%p328, %p14;
	@%p328 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3709;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4888, %r1185, %r409;
	mul.wide.s32 	%rd349, %r4888, 4;
	add.s64 	%rd350, %rd37, %rd349;
	st.global.f32 	[%rd350], %f421;

$L__BB0_530:
	not.pred 	%p329, %p16;
	@%p329 bra 	$L__BB0_532;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3709;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4890, %r1185, %r410;
	mul.wide.s32 	%rd351, %r4890, 4;
	add.s64 	%rd352, %rd37, %rd351;
	st.global.f32 	[%rd352], %f422;

$L__BB0_532:
	add.s32 	%r4892, %r1182, %r1178;
	mul.lo.s32 	%r1186, %r4892, %r53;
	add.s32 	%r4893, %r1183, %r1186;
	mul.lo.s32 	%r4894, %r4893, %r54;
	sub.s32 	%r1187, %r4894, %r1574;
	@%p17 bra 	$L__BB0_537;

	not.pred 	%p331, %p13;
	@%p331 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3675;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4896, %r1187, %r395;
	mul.wide.s32 	%rd353, %r4896, 4;
	add.s64 	%rd354, %rd37, %rd353;
	st.global.f32 	[%rd354], %f423;

$L__BB0_535:
	not.pred 	%p332, %p15;
	@%p332 bra 	$L__BB0_537;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3675;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4898, %r1187, %r396;
	mul.wide.s32 	%rd355, %r4898, 4;
	add.s64 	%rd356, %rd37, %rd355;
	st.global.f32 	[%rd356], %f424;

$L__BB0_537:
	@%p17 bra 	$L__BB0_542;

	not.pred 	%p334, %p14;
	@%p334 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3741;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4900, %r1187, %r409;
	mul.wide.s32 	%rd357, %r4900, 4;
	add.s64 	%rd358, %rd37, %rd357;
	st.global.f32 	[%rd358], %f425;

$L__BB0_540:
	not.pred 	%p335, %p16;
	@%p335 bra 	$L__BB0_542;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3741;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4902, %r1187, %r410;
	mul.wide.s32 	%rd359, %r4902, 4;
	add.s64 	%rd360, %rd37, %rd359;
	st.global.f32 	[%rd360], %f426;

$L__BB0_542:
	add.s32 	%r4903, %r1174, %r1184;
	mul.lo.s32 	%r4904, %r4903, %r54;
	sub.s32 	%r1188, %r4904, %r1574;
	@%p17 bra 	$L__BB0_547;

	not.pred 	%p337, %p13;
	@%p337 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7259;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4906, %r1188, %r395;
	mul.wide.s32 	%rd361, %r4906, 4;
	add.s64 	%rd362, %rd37, %rd361;
	st.global.f32 	[%rd362], %f427;

$L__BB0_545:
	not.pred 	%p338, %p15;
	@%p338 bra 	$L__BB0_547;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7259;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4908, %r1188, %r396;
	mul.wide.s32 	%rd363, %r4908, 4;
	add.s64 	%rd364, %rd37, %rd363;
	st.global.f32 	[%rd364], %f428;

$L__BB0_547:
	@%p17 bra 	$L__BB0_552;

	not.pred 	%p340, %p14;
	@%p340 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7258;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4910, %r1188, %r409;
	mul.wide.s32 	%rd365, %r4910, 4;
	add.s64 	%rd366, %rd37, %rd365;
	st.global.f32 	[%rd366], %f429;

$L__BB0_550:
	not.pred 	%p341, %p16;
	@%p341 bra 	$L__BB0_552;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7258;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4912, %r1188, %r410;
	mul.wide.s32 	%rd367, %r4912, 4;
	add.s64 	%rd368, %rd37, %rd367;
	st.global.f32 	[%rd368], %f430;

$L__BB0_552:
	add.s32 	%r4913, %r1174, %r1186;
	mul.lo.s32 	%r4914, %r4913, %r54;
	sub.s32 	%r1189, %r4914, %r1574;
	@%p17 bra 	$L__BB0_557;

	not.pred 	%p343, %p13;
	@%p343 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7257;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4916, %r1189, %r395;
	mul.wide.s32 	%rd369, %r4916, 4;
	add.s64 	%rd370, %rd37, %rd369;
	st.global.f32 	[%rd370], %f431;

$L__BB0_555:
	not.pred 	%p344, %p15;
	@%p344 bra 	$L__BB0_557;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7257;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4918, %r1189, %r396;
	mul.wide.s32 	%rd371, %r4918, 4;
	add.s64 	%rd372, %rd37, %rd371;
	st.global.f32 	[%rd372], %f432;

$L__BB0_557:
	@%p17 bra 	$L__BB0_562;

	not.pred 	%p346, %p14;
	@%p346 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7256;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4920, %r1189, %r409;
	mul.wide.s32 	%rd373, %r4920, 4;
	add.s64 	%rd374, %rd37, %rd373;
	st.global.f32 	[%rd374], %f433;

$L__BB0_560:
	not.pred 	%p347, %p16;
	@%p347 bra 	$L__BB0_562;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7256;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4922, %r1189, %r410;
	mul.wide.s32 	%rd375, %r4922, 4;
	add.s64 	%rd376, %rd37, %rd375;
	st.global.f32 	[%rd376], %f434;

$L__BB0_562:
	add.s32 	%r1190, %r1178, %r52;
	add.s32 	%r4924, %r1182, %r1190;
	mul.lo.s32 	%r1191, %r4924, %r53;
	add.s32 	%r4926, %r1174, %r1191;
	mul.lo.s32 	%r4927, %r4926, %r54;
	sub.s32 	%r1192, %r4927, %r1574;
	@%p17 bra 	$L__BB0_567;

	not.pred 	%p349, %p13;
	@%p349 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1047;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4929, %r1192, %r395;
	mul.wide.s32 	%rd377, %r4929, 4;
	add.s64 	%rd378, %rd37, %rd377;
	st.global.f32 	[%rd378], %f435;

$L__BB0_565:
	not.pred 	%p350, %p15;
	@%p350 bra 	$L__BB0_567;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1047;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4931, %r1192, %r396;
	mul.wide.s32 	%rd379, %r4931, 4;
	add.s64 	%rd380, %rd37, %rd379;
	st.global.f32 	[%rd380], %f436;

$L__BB0_567:
	@%p17 bra 	$L__BB0_572;

	not.pred 	%p352, %p14;
	@%p352 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1059;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4933, %r1192, %r409;
	mul.wide.s32 	%rd381, %r4933, 4;
	add.s64 	%rd382, %rd37, %rd381;
	st.global.f32 	[%rd382], %f437;

$L__BB0_570:
	not.pred 	%p353, %p16;
	@%p353 bra 	$L__BB0_572;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1059;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4935, %r1192, %r410;
	mul.wide.s32 	%rd383, %r4935, 4;
	add.s64 	%rd384, %rd37, %rd383;
	st.global.f32 	[%rd384], %f438;

$L__BB0_572:
	add.s32 	%r6992, %r1174, 1;
	add.s32 	%r4936, %r6992, %r1184;
	mul.lo.s32 	%r4937, %r4936, %r54;
	sub.s32 	%r1193, %r4937, %r1574;
	@%p17 bra 	$L__BB0_577;

	not.pred 	%p355, %p13;
	@%p355 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7255;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4939, %r1193, %r395;
	mul.wide.s32 	%rd385, %r4939, 4;
	add.s64 	%rd386, %rd37, %rd385;
	st.global.f32 	[%rd386], %f439;

$L__BB0_575:
	not.pred 	%p356, %p15;
	@%p356 bra 	$L__BB0_577;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7255;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4941, %r1193, %r396;
	mul.wide.s32 	%rd387, %r4941, 4;
	add.s64 	%rd388, %rd37, %rd387;
	st.global.f32 	[%rd388], %f440;

$L__BB0_577:
	@%p17 bra 	$L__BB0_582;

	not.pred 	%p358, %p14;
	@%p358 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7254;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4943, %r1193, %r409;
	mul.wide.s32 	%rd389, %r4943, 4;
	add.s64 	%rd390, %rd37, %rd389;
	st.global.f32 	[%rd390], %f441;

$L__BB0_580:
	not.pred 	%p359, %p16;
	@%p359 bra 	$L__BB0_582;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7254;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4945, %r1193, %r410;
	mul.wide.s32 	%rd391, %r4945, 4;
	add.s64 	%rd392, %rd37, %rd391;
	st.global.f32 	[%rd392], %f442;

$L__BB0_582:
	add.s32 	%r6993, %r1174, 1;
	add.s32 	%r4946, %r6993, %r1186;
	mul.lo.s32 	%r4947, %r4946, %r54;
	sub.s32 	%r1194, %r4947, %r1574;
	@%p17 bra 	$L__BB0_587;

	not.pred 	%p361, %p13;
	@%p361 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4013;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4949, %r1194, %r395;
	mul.wide.s32 	%rd393, %r4949, 4;
	add.s64 	%rd394, %rd37, %rd393;
	st.global.f32 	[%rd394], %f443;

$L__BB0_585:
	not.pred 	%p362, %p15;
	@%p362 bra 	$L__BB0_587;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4013;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4951, %r1194, %r396;
	mul.wide.s32 	%rd395, %r4951, 4;
	add.s64 	%rd396, %rd37, %rd395;
	st.global.f32 	[%rd396], %f444;

$L__BB0_587:
	@%p17 bra 	$L__BB0_592;

	not.pred 	%p364, %p14;
	@%p364 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4094;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4953, %r1194, %r409;
	mul.wide.s32 	%rd397, %r4953, 4;
	add.s64 	%rd398, %rd37, %rd397;
	st.global.f32 	[%rd398], %f445;

$L__BB0_590:
	not.pred 	%p365, %p16;
	@%p365 bra 	$L__BB0_592;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4094;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4955, %r1194, %r410;
	mul.wide.s32 	%rd399, %r4955, 4;
	add.s64 	%rd400, %rd37, %rd399;
	st.global.f32 	[%rd400], %f446;

$L__BB0_592:
	add.s32 	%r6994, %r1174, 1;
	add.s32 	%r4956, %r6994, %r1191;
	mul.lo.s32 	%r4957, %r4956, %r54;
	sub.s32 	%r1195, %r4957, %r1574;
	@%p17 bra 	$L__BB0_597;

	not.pred 	%p367, %p13;
	@%p367 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1071;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4959, %r1195, %r395;
	mul.wide.s32 	%rd401, %r4959, 4;
	add.s64 	%rd402, %rd37, %rd401;
	st.global.f32 	[%rd402], %f447;

$L__BB0_595:
	not.pred 	%p368, %p15;
	@%p368 bra 	$L__BB0_597;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1071;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4961, %r1195, %r396;
	mul.wide.s32 	%rd403, %r4961, 4;
	add.s64 	%rd404, %rd37, %rd403;
	st.global.f32 	[%rd404], %f448;

$L__BB0_597:
	@%p17 bra 	$L__BB0_602;

	not.pred 	%p370, %p14;
	@%p370 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1083;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4963, %r1195, %r409;
	mul.wide.s32 	%rd405, %r4963, 4;
	add.s64 	%rd406, %rd37, %rd405;
	st.global.f32 	[%rd406], %f449;

$L__BB0_600:
	not.pred 	%p371, %p16;
	@%p371 bra 	$L__BB0_602;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1083;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4965, %r1195, %r410;
	mul.wide.s32 	%rd407, %r4965, 4;
	add.s64 	%rd408, %rd37, %rd407;
	st.global.f32 	[%rd408], %f450;

$L__BB0_602:
	add.s32 	%r1196, %r1174, 2;
	add.s32 	%r4966, %r1196, %r1184;
	mul.lo.s32 	%r4967, %r4966, %r54;
	sub.s32 	%r1197, %r4967, %r1574;
	@%p17 bra 	$L__BB0_607;

	not.pred 	%p373, %p13;
	@%p373 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4154;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4969, %r1197, %r395;
	mul.wide.s32 	%rd409, %r4969, 4;
	add.s64 	%rd410, %rd37, %rd409;
	st.global.f32 	[%rd410], %f451;

$L__BB0_605:
	not.pred 	%p374, %p15;
	@%p374 bra 	$L__BB0_607;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4154;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4971, %r1197, %r396;
	mul.wide.s32 	%rd411, %r4971, 4;
	add.s64 	%rd412, %rd37, %rd411;
	st.global.f32 	[%rd412], %f452;

$L__BB0_607:
	@%p17 bra 	$L__BB0_612;

	not.pred 	%p376, %p14;
	@%p376 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4188;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4973, %r1197, %r409;
	mul.wide.s32 	%rd413, %r4973, 4;
	add.s64 	%rd414, %rd37, %rd413;
	st.global.f32 	[%rd414], %f453;

$L__BB0_610:
	not.pred 	%p377, %p16;
	@%p377 bra 	$L__BB0_612;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4188;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4975, %r1197, %r410;
	mul.wide.s32 	%rd415, %r4975, 4;
	add.s64 	%rd416, %rd37, %rd415;
	st.global.f32 	[%rd416], %f454;

$L__BB0_612:
	mul.lo.s32 	%r1198, %r4854, %r53;
	add.s32 	%r4978, %r1183, %r1198;
	mul.lo.s32 	%r4979, %r4978, %r54;
	sub.s32 	%r1199, %r4979, %r1574;
	@%p17 bra 	$L__BB0_617;

	not.pred 	%p379, %p13;
	@%p379 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7253;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4981, %r1199, %r395;
	mul.wide.s32 	%rd417, %r4981, 4;
	add.s64 	%rd418, %rd37, %rd417;
	st.global.f32 	[%rd418], %f455;

$L__BB0_615:
	not.pred 	%p380, %p15;
	@%p380 bra 	$L__BB0_617;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7253;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4983, %r1199, %r396;
	mul.wide.s32 	%rd419, %r4983, 4;
	add.s64 	%rd420, %rd37, %rd419;
	st.global.f32 	[%rd420], %f456;

$L__BB0_617:
	@%p17 bra 	$L__BB0_622;

	not.pred 	%p382, %p14;
	@%p382 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7252;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4985, %r1199, %r409;
	mul.wide.s32 	%rd421, %r4985, 4;
	add.s64 	%rd422, %rd37, %rd421;
	st.global.f32 	[%rd422], %f457;

$L__BB0_620:
	not.pred 	%p383, %p16;
	@%p383 bra 	$L__BB0_622;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7252;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4987, %r1199, %r410;
	mul.wide.s32 	%rd423, %r4987, 4;
	add.s64 	%rd424, %rd37, %rd423;
	st.global.f32 	[%rd424], %f458;

$L__BB0_622:
	sub.s32 	%r6990, %r652, %r1570;
	add.s32 	%r4989, %r6990, %r1190;
	mul.lo.s32 	%r1200, %r4989, %r53;
	add.s32 	%r4990, %r1183, %r1200;
	mul.lo.s32 	%r4991, %r4990, %r54;
	sub.s32 	%r1201, %r4991, %r1574;
	@%p17 bra 	$L__BB0_627;

	not.pred 	%p385, %p13;
	@%p385 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1101;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4993, %r1201, %r395;
	mul.wide.s32 	%rd425, %r4993, 4;
	add.s64 	%rd426, %rd37, %rd425;
	st.global.f32 	[%rd426], %f459;

$L__BB0_625:
	not.pred 	%p386, %p15;
	@%p386 bra 	$L__BB0_627;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1101;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4995, %r1201, %r396;
	mul.wide.s32 	%rd427, %r4995, 4;
	add.s64 	%rd428, %rd37, %rd427;
	st.global.f32 	[%rd428], %f460;

$L__BB0_627:
	@%p17 bra 	$L__BB0_632;

	not.pred 	%p388, %p14;
	@%p388 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4997, %r1201, %r409;
	mul.wide.s32 	%rd429, %r4997, 4;
	add.s64 	%rd430, %rd37, %rd429;
	st.global.f32 	[%rd430], %f461;

$L__BB0_630:
	not.pred 	%p389, %p16;
	@%p389 bra 	$L__BB0_632;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4999, %r1201, %r410;
	mul.wide.s32 	%rd431, %r4999, 4;
	add.s64 	%rd432, %rd37, %rd431;
	st.global.f32 	[%rd432], %f462;

$L__BB0_632:
	mul.lo.s32 	%r1202, %r4840, %r53;
	add.s32 	%r5002, %r1174, %r1202;
	mul.lo.s32 	%r5003, %r5002, %r54;
	sub.s32 	%r1203, %r5003, %r1574;
	@%p17 bra 	$L__BB0_637;

	not.pred 	%p391, %p13;
	@%p391 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5005, %r1203, %r395;
	mul.wide.s32 	%rd433, %r5005, 4;
	add.s64 	%rd434, %rd37, %rd433;
	st.global.f32 	[%rd434], %f463;

$L__BB0_635:
	not.pred 	%p392, %p15;
	@%p392 bra 	$L__BB0_637;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5007, %r1203, %r396;
	mul.wide.s32 	%rd435, %r5007, 4;
	add.s64 	%rd436, %rd37, %rd435;
	st.global.f32 	[%rd436], %f464;

$L__BB0_637:
	@%p17 bra 	$L__BB0_642;

	not.pred 	%p394, %p14;
	@%p394 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5009, %r1203, %r409;
	mul.wide.s32 	%rd437, %r5009, 4;
	add.s64 	%rd438, %rd37, %rd437;
	st.global.f32 	[%rd438], %f465;

$L__BB0_640:
	not.pred 	%p395, %p16;
	@%p395 bra 	$L__BB0_642;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5011, %r1203, %r410;
	mul.wide.s32 	%rd439, %r5011, 4;
	add.s64 	%rd440, %rd37, %rd439;
	st.global.f32 	[%rd440], %f466;

$L__BB0_642:
	add.s32 	%r5012, %r1174, %r1198;
	mul.lo.s32 	%r5013, %r5012, %r54;
	sub.s32 	%r1204, %r5013, %r1574;
	@%p17 bra 	$L__BB0_647;

	not.pred 	%p397, %p13;
	@%p397 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5015, %r1204, %r395;
	mul.wide.s32 	%rd441, %r5015, 4;
	add.s64 	%rd442, %rd37, %rd441;
	st.global.f32 	[%rd442], %f467;

$L__BB0_645:
	not.pred 	%p398, %p15;
	@%p398 bra 	$L__BB0_647;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5017, %r1204, %r396;
	mul.wide.s32 	%rd443, %r5017, 4;
	add.s64 	%rd444, %rd37, %rd443;
	st.global.f32 	[%rd444], %f468;

$L__BB0_647:
	@%p17 bra 	$L__BB0_652;

	not.pred 	%p400, %p14;
	@%p400 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5019, %r1204, %r409;
	mul.wide.s32 	%rd445, %r5019, 4;
	add.s64 	%rd446, %rd37, %rd445;
	st.global.f32 	[%rd446], %f469;

$L__BB0_650:
	not.pred 	%p401, %p16;
	@%p401 bra 	$L__BB0_652;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5021, %r1204, %r410;
	mul.wide.s32 	%rd447, %r5021, 4;
	add.s64 	%rd448, %rd37, %rd447;
	st.global.f32 	[%rd448], %f470;

$L__BB0_652:
	add.s32 	%r5022, %r1174, %r1200;
	mul.lo.s32 	%r5023, %r5022, %r54;
	sub.s32 	%r1205, %r5023, %r1574;
	@%p17 bra 	$L__BB0_657;

	not.pred 	%p403, %p13;
	@%p403 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5025, %r1205, %r395;
	mul.wide.s32 	%rd449, %r5025, 4;
	add.s64 	%rd450, %rd37, %rd449;
	st.global.f32 	[%rd450], %f471;

$L__BB0_655:
	not.pred 	%p404, %p15;
	@%p404 bra 	$L__BB0_657;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5027, %r1205, %r396;
	mul.wide.s32 	%rd451, %r5027, 4;
	add.s64 	%rd452, %rd37, %rd451;
	st.global.f32 	[%rd452], %f472;

$L__BB0_657:
	@%p17 bra 	$L__BB0_662;

	not.pred 	%p406, %p14;
	@%p406 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5029, %r1205, %r409;
	mul.wide.s32 	%rd453, %r5029, 4;
	add.s64 	%rd454, %rd37, %rd453;
	st.global.f32 	[%rd454], %f473;

$L__BB0_660:
	not.pred 	%p407, %p16;
	@%p407 bra 	$L__BB0_662;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5031, %r1205, %r410;
	mul.wide.s32 	%rd455, %r5031, 4;
	add.s64 	%rd456, %rd37, %rd455;
	st.global.f32 	[%rd456], %f474;

$L__BB0_662:
	add.s32 	%r6995, %r1174, 1;
	add.s32 	%r5032, %r6995, %r1202;
	mul.lo.s32 	%r5033, %r5032, %r54;
	sub.s32 	%r1206, %r5033, %r1574;
	@%p17 bra 	$L__BB0_667;

	not.pred 	%p409, %p13;
	@%p409 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5035, %r1206, %r395;
	mul.wide.s32 	%rd457, %r5035, 4;
	add.s64 	%rd458, %rd37, %rd457;
	st.global.f32 	[%rd458], %f475;

$L__BB0_665:
	not.pred 	%p410, %p15;
	@%p410 bra 	$L__BB0_667;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5037, %r1206, %r396;
	mul.wide.s32 	%rd459, %r5037, 4;
	add.s64 	%rd460, %rd37, %rd459;
	st.global.f32 	[%rd460], %f476;

$L__BB0_667:
	@%p17 bra 	$L__BB0_672;

	not.pred 	%p412, %p14;
	@%p412 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5039, %r1206, %r409;
	mul.wide.s32 	%rd461, %r5039, 4;
	add.s64 	%rd462, %rd37, %rd461;
	st.global.f32 	[%rd462], %f477;

$L__BB0_670:
	not.pred 	%p413, %p16;
	@%p413 bra 	$L__BB0_672;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5041, %r1206, %r410;
	mul.wide.s32 	%rd463, %r5041, 4;
	add.s64 	%rd464, %rd37, %rd463;
	st.global.f32 	[%rd464], %f478;

$L__BB0_672:
	add.s32 	%r6996, %r1174, 1;
	add.s32 	%r5042, %r6996, %r1198;
	mul.lo.s32 	%r5043, %r5042, %r54;
	sub.s32 	%r1207, %r5043, %r1574;
	@%p17 bra 	$L__BB0_677;

	not.pred 	%p415, %p13;
	@%p415 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5045, %r1207, %r395;
	mul.wide.s32 	%rd465, %r5045, 4;
	add.s64 	%rd466, %rd37, %rd465;
	st.global.f32 	[%rd466], %f479;

$L__BB0_675:
	not.pred 	%p416, %p15;
	@%p416 bra 	$L__BB0_677;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5047, %r1207, %r396;
	mul.wide.s32 	%rd467, %r5047, 4;
	add.s64 	%rd468, %rd37, %rd467;
	st.global.f32 	[%rd468], %f480;

$L__BB0_677:
	@%p17 bra 	$L__BB0_682;

	not.pred 	%p418, %p14;
	@%p418 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5049, %r1207, %r409;
	mul.wide.s32 	%rd469, %r5049, 4;
	add.s64 	%rd470, %rd37, %rd469;
	st.global.f32 	[%rd470], %f481;

$L__BB0_680:
	not.pred 	%p419, %p16;
	@%p419 bra 	$L__BB0_682;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5051, %r1207, %r410;
	mul.wide.s32 	%rd471, %r5051, 4;
	add.s64 	%rd472, %rd37, %rd471;
	st.global.f32 	[%rd472], %f482;

$L__BB0_682:
	add.s32 	%r6997, %r1174, 1;
	add.s32 	%r5052, %r6997, %r1200;
	mul.lo.s32 	%r5053, %r5052, %r54;
	sub.s32 	%r1208, %r5053, %r1574;
	@%p17 bra 	$L__BB0_687;

	not.pred 	%p421, %p13;
	@%p421 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5055, %r1208, %r395;
	mul.wide.s32 	%rd473, %r5055, 4;
	add.s64 	%rd474, %rd37, %rd473;
	st.global.f32 	[%rd474], %f483;

$L__BB0_685:
	not.pred 	%p422, %p15;
	@%p422 bra 	$L__BB0_687;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5057, %r1208, %r396;
	mul.wide.s32 	%rd475, %r5057, 4;
	add.s64 	%rd476, %rd37, %rd475;
	st.global.f32 	[%rd476], %f484;

$L__BB0_687:
	@%p17 bra 	$L__BB0_692;

	not.pred 	%p424, %p14;
	@%p424 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5059, %r1208, %r409;
	mul.wide.s32 	%rd477, %r5059, 4;
	add.s64 	%rd478, %rd37, %rd477;
	st.global.f32 	[%rd478], %f485;

$L__BB0_690:
	not.pred 	%p425, %p16;
	@%p425 bra 	$L__BB0_692;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5061, %r1208, %r410;
	mul.wide.s32 	%rd479, %r5061, 4;
	add.s64 	%rd480, %rd37, %rd479;
	st.global.f32 	[%rd480], %f486;

$L__BB0_692:
	add.s32 	%r5062, %r1196, %r1200;
	mul.lo.s32 	%r5063, %r5062, %r54;
	sub.s32 	%r1209, %r5063, %r1574;
	@%p17 bra 	$L__BB0_697;

	not.pred 	%p427, %p13;
	@%p427 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1156;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5065, %r1209, %r395;
	mul.wide.s32 	%rd481, %r5065, 4;
	add.s64 	%rd482, %rd37, %rd481;
	st.global.f32 	[%rd482], %f487;

$L__BB0_695:
	not.pred 	%p428, %p15;
	@%p428 bra 	$L__BB0_697;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1156;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5067, %r1209, %r396;
	mul.wide.s32 	%rd483, %r5067, 4;
	add.s64 	%rd484, %rd37, %rd483;
	st.global.f32 	[%rd484], %f488;

$L__BB0_697:
	@%p17 bra 	$L__BB0_702;

	not.pred 	%p430, %p14;
	@%p430 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1157;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5069, %r1209, %r409;
	mul.wide.s32 	%rd485, %r5069, 4;
	add.s64 	%rd486, %rd37, %rd485;
	st.global.f32 	[%rd486], %f489;

$L__BB0_700:
	not.pred 	%p431, %p16;
	@%p431 bra 	$L__BB0_702;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1157;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5071, %r1209, %r410;
	mul.wide.s32 	%rd487, %r5071, 4;
	add.s64 	%rd488, %rd37, %rd487;
	st.global.f32 	[%rd488], %f490;

$L__BB0_702:
	sub.s32 	%r6991, %r652, %r1570;
	add.s32 	%r1210, %r6991, 1;
	add.s32 	%r5072, %r1210, %r1178;
	mad.lo.s32 	%r5074, %r5072, %r53, %r1174;
	mul.lo.s32 	%r5075, %r5074, %r54;
	sub.s32 	%r1211, %r5075, %r1574;
	@%p17 bra 	$L__BB0_707;

	not.pred 	%p433, %p13;
	@%p433 bra 	$L__BB0_705;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f491, low;}

	// end inline asm
	add.s32 	%r5077, %r1211, %r395;
	mul.wide.s32 	%rd489, %r5077, 4;
	add.s64 	%rd490, %rd37, %rd489;
	st.global.f32 	[%rd490], %f491;

$L__BB0_705:
	not.pred 	%p434, %p15;
	@%p434 bra 	$L__BB0_707;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f492, high;}

	// end inline asm
	add.s32 	%r5079, %r1211, %r396;
	mul.wide.s32 	%rd491, %r5079, 4;
	add.s64 	%rd492, %rd37, %rd491;
	st.global.f32 	[%rd492], %f492;

$L__BB0_707:
	@%p17 bra 	$L__BB0_712;

	not.pred 	%p436, %p14;
	@%p436 bra 	$L__BB0_710;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f493, low;}

	// end inline asm
	add.s32 	%r5081, %r1211, %r409;
	mul.wide.s32 	%rd493, %r5081, 4;
	add.s64 	%rd494, %rd37, %rd493;
	st.global.f32 	[%rd494], %f493;

$L__BB0_710:
	not.pred 	%p437, %p16;
	@%p437 bra 	$L__BB0_712;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f494, high;}

	// end inline asm
	add.s32 	%r5083, %r1211, %r410;
	mul.wide.s32 	%rd495, %r5083, 4;
	add.s64 	%rd496, %rd37, %rd495;
	st.global.f32 	[%rd496], %f494;

$L__BB0_712:
	add.s32 	%r5085, %r1210, %r1190;
	mul.lo.s32 	%r1212, %r5085, %r53;
	add.s32 	%r5086, %r1174, %r1212;
	mul.lo.s32 	%r5087, %r5086, %r54;
	sub.s32 	%r1213, %r5087, %r1574;
	@%p17 bra 	$L__BB0_717;

	not.pred 	%p439, %p13;
	@%p439 bra 	$L__BB0_715;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f495, low;}

	// end inline asm
	add.s32 	%r5089, %r1213, %r395;
	mul.wide.s32 	%rd497, %r5089, 4;
	add.s64 	%rd498, %rd37, %rd497;
	st.global.f32 	[%rd498], %f495;

$L__BB0_715:
	not.pred 	%p440, %p15;
	@%p440 bra 	$L__BB0_717;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f496, high;}

	// end inline asm
	add.s32 	%r5091, %r1213, %r396;
	mul.wide.s32 	%rd499, %r5091, 4;
	add.s64 	%rd500, %rd37, %rd499;
	st.global.f32 	[%rd500], %f496;

$L__BB0_717:
	@%p17 bra 	$L__BB0_722;

	not.pred 	%p442, %p14;
	@%p442 bra 	$L__BB0_720;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f497, low;}

	// end inline asm
	add.s32 	%r5093, %r1213, %r409;
	mul.wide.s32 	%rd501, %r5093, 4;
	add.s64 	%rd502, %rd37, %rd501;
	st.global.f32 	[%rd502], %f497;

$L__BB0_720:
	not.pred 	%p443, %p16;
	@%p443 bra 	$L__BB0_722;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f498, high;}

	// end inline asm
	add.s32 	%r5095, %r1213, %r410;
	mul.wide.s32 	%rd503, %r5095, 4;
	add.s64 	%rd504, %rd37, %rd503;
	st.global.f32 	[%rd504], %f498;

$L__BB0_722:
	add.s32 	%r6998, %r1174, 1;
	add.s32 	%r5096, %r6998, %r1212;
	mul.lo.s32 	%r5097, %r5096, %r54;
	sub.s32 	%r1214, %r5097, %r1574;
	@%p17 bra 	$L__BB0_727;

	not.pred 	%p445, %p13;
	@%p445 bra 	$L__BB0_725;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f499, low;}

	// end inline asm
	add.s32 	%r5099, %r1214, %r395;
	mul.wide.s32 	%rd505, %r5099, 4;
	add.s64 	%rd506, %rd37, %rd505;
	st.global.f32 	[%rd506], %f499;

$L__BB0_725:
	not.pred 	%p446, %p15;
	@%p446 bra 	$L__BB0_727;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f500, high;}

	// end inline asm
	add.s32 	%r5101, %r1214, %r396;
	mul.wide.s32 	%rd507, %r5101, 4;
	add.s64 	%rd508, %rd37, %rd507;
	st.global.f32 	[%rd508], %f500;

$L__BB0_727:
	@%p17 bra 	$L__BB0_732;

	not.pred 	%p448, %p14;
	@%p448 bra 	$L__BB0_730;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f501, low;}

	// end inline asm
	add.s32 	%r5103, %r1214, %r409;
	mul.wide.s32 	%rd509, %r5103, 4;
	add.s64 	%rd510, %rd37, %rd509;
	st.global.f32 	[%rd510], %f501;

$L__BB0_730:
	not.pred 	%p449, %p16;
	@%p449 bra 	$L__BB0_732;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f502, high;}

	// end inline asm
	add.s32 	%r5105, %r1214, %r410;
	mul.wide.s32 	%rd511, %r5105, 4;
	add.s64 	%rd512, %rd37, %rd511;
	st.global.f32 	[%rd512], %f502;

$L__BB0_732:
	setp.ne.s32 	%p450, %r35, %r2055;
	ld.param.u64 	%rd513, [%rd1+80];
	cvta.to.global.u64 	%rd38, %rd513;
	@%p450 bra 	$L__BB0_734;

	mad.lo.s32 	%r5107, %r650, %r1559, %r38;
	mul.lo.s32 	%r5108, %r1557, %r5107;
	mul.lo.s32 	%r5109, %r5108, 768;
	mad.lo.s32 	%r5111, %r36, 384, %r5109;
	add.s32 	%r5112, %r5111, -64;
	mul.wide.s32 	%rd514, %r5112, 4;
	add.s64 	%rd515, %rd38, %rd514;
	add.s64 	%rd517, %rd515, %rd279;
	st.global.v4.u32 	[%rd517+256], {%r3632, %r3709, %r1101, %r1107};
	st.global.v4.u32 	[%rd517+1024], {%r3399, %r3476, %r1047, %r1059};
	add.s64 	%rd519, %rd515, %rd281;
	st.global.v2.u32 	[%rd519+768], {%r3675, %r3741};
	st.global.v2.u32 	[%rd519+1536], {%r3442, %r3508};

$L__BB0_734:
	setp.ne.s32 	%p451, %r36, %r2060;
	@%p451 bra 	$L__BB0_739;

	ld.param.u64 	%rd556, [%rd1+80];
	cvta.to.global.u64 	%rd555, %rd556;
	not.b32 	%r6988, %r35;
	add.s32 	%r6987, %r1556, %r6988;
	setp.eq.s32 	%p452, %r35, %r2055;
	mad.lo.s32 	%r5115, %r651, %r1558, %r37;
	mul.lo.s32 	%r5119, %r5115, %r1617;
	mad.lo.s32 	%r5122, %r6987, 384, %r5119;
	add.s32 	%r5123, %r5122, -64;
	mad.lo.s32 	%r5126, %r1619, %r65, %r5123;
	mul.wide.s32 	%rd520, %r5126, 4;
	add.s64 	%rd521, %rd555, %rd520;
	add.s64 	%rd523, %rd521, %rd279;
	st.global.v4.u32 	[%rd523+256], {%r3553, %r3587, %r1071, %r1083};
	st.global.v4.u32 	[%rd523+1024], {%r4154, %r4188, %r1156, %r1157};
	add.s64 	%rd39, %rd521, %rd281;
	@%p452 bra 	$L__BB0_737;

	st.global.v2.u32 	[%rd39], {%r3442, %r3508};

$L__BB0_737:
	st.global.v2.u32 	[%rd39+768], {%r4013, %r4094};
	@%p243 bra 	$L__BB0_739;

	st.global.v2.u32 	[%rd39+1536], {%r7362, %r7361};

$L__BB0_739:
	setp.ge.s32 	%p454, %r35, %r2055;
	@%p454 bra 	$L__BB0_741;

	add.s32 	%r6986, %r66, %r66;
	mul.lo.s32 	%r5127, %r1557, 320;
	mul.lo.s32 	%r5129, %r36, 320;
	mad.lo.s32 	%r5130, %r5127, %r35, %r5129;
	add.s32 	%r5133, %r6986, -64;
	mad.lo.s32 	%r5138, %r5133, %r2060, %r2057;
	add.s32 	%r5139, %r5130, %r5138;
	shl.b32 	%r5140, %r5139, 2;
	mov.u32 	%r5141, _ZN6kernel5shmemE;
	add.s32 	%r5142, %r5141, %r5140;
	shl.b32 	%r5143, %r40, 4;
	add.s32 	%r5144, %r5142, %r5143;
	st.shared.v4.u32 	[%r5144], {%r7410, %r7409, %r7405, %r7403};
	shl.b32 	%r5145, %r40, 3;
	add.s32 	%r5146, %r5142, %r5145;
	st.shared.v2.u32 	[%r5146+512], {%r7209, %r7204};
	st.shared.v4.u32 	[%r5144+768], {%r7233, %r7224, %r7196, %r7192};

$L__BB0_741:
	setp.ge.s32 	%p455, %r36, %r2060;
	@%p455 bra 	$L__BB0_745;

	not.b32 	%r6985, %r35;
	add.s32 	%r6984, %r1556, %r6985;
	mad.lo.s32 	%r5152, %r6984, 384, %r2063;
	mad.lo.s32 	%r5156, %r2058, %r36, %r5152;
	add.s32 	%r5162, %r5156, %r2061;
	shl.b32 	%r5163, %r5162, 2;
	mov.u32 	%r5164, _ZN6kernel5shmemE;
	add.s32 	%r5165, %r5164, %r5163;
	shl.b32 	%r5166, %r40, 3;
	add.s32 	%r5167, %r5165, %r5166;
	@%p454 bra 	$L__BB0_744;

	add.s32 	%r6969, %r5167, -256;
	st.shared.v2.u32 	[%r6969], {%r7228, %r7221};

$L__BB0_744:
	shl.b32 	%r5187, %r40, 4;
	add.s32 	%r5188, %r5165, %r5187;
	st.shared.v4.u32 	[%r5188], {%r7219, %r7215, %r7184, %r7180};
	add.s32 	%r6970, %r5167, -256;
	st.shared.v2.u32 	[%r6970+768], {%r7187, %r7181};
	st.shared.v4.u32 	[%r5188+768], {%r7408, %r7407, %r7396, %r7395};

$L__BB0_745:
	bar.sync 	0;
	ld.param.u64 	%rd525, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd525;
	mov.u32 	%r7467, %r7132;
	mov.u32 	%r7468, %r7133;
	mov.u32 	%r7453, %r7134;
	mov.u32 	%r7454, %r7135;
	mov.u32 	%r7455, %r7136;
	mov.u32 	%r7456, %r7137;
	mov.u32 	%r7469, %r7138;
	mov.u32 	%r7471, %r7140;
	mov.u32 	%r7459, %r7144;
	mov.u32 	%r7460, %r7145;
	mov.u32 	%r7461, %r7146;
	mov.u32 	%r7462, %r7147;
	@%p243 bra 	$L__BB0_749;

	setp.eq.s32 	%p458, %r36, 0;
	mad.lo.s32 	%r5191, %r650, %r1559, %r38;
	mad.lo.s32 	%r5192, %r5191, 768, 384;
	mul.lo.s32 	%r5193, %r5192, %r1557;
	mad.lo.s32 	%r5194, %r36, 384, %r5193;
	add.s32 	%r5195, %r5194, -128;
	mul.wide.s32 	%rd526, %r5195, 4;
	add.s64 	%rd527, %rd40, %rd526;
	add.s64 	%rd529, %rd527, %rd279;
	add.s64 	%rd41, %rd529, 512;
	mov.u32 	%r7467, %r7132;
	mov.u32 	%r7468, %r7133;
	mov.u32 	%r7469, %r7138;
	mov.u32 	%r7471, %r7140;
	@%p458 bra 	$L__BB0_748;

	ld.global.v4.u32 	{%r7468, %r7467, %r7471, %r7469}, [%rd41+-512];

$L__BB0_748:
	ld.global.v4.u32 	{%r7455, %r7453, %r7456, %r7454}, [%rd41];
	ld.global.v4.u32 	{%r7462, %r7461, %r7460, %r7459}, [%rd41+512];
	ld.global.v4.u32 	{%r7464, %r7463, %r7466, %r7465}, [%rd41+1024];

$L__BB0_749:
	mov.u32 	%r7470, %r7139;
	mov.u32 	%r7472, %r7141;
	mov.u32 	%r7473, %r7142;
	mov.u32 	%r7474, %r7143;
	mov.u32 	%r7475, %r7148;
	mov.u32 	%r7476, %r7149;
	mov.u32 	%r7477, %r7150;
	mov.u32 	%r7478, %r7151;
	@%p246 bra 	$L__BB0_751;

	not.b32 	%r6983, %r35;
	add.s32 	%r6982, %r1556, %r6983;
	mad.lo.s32 	%r5213, %r651, %r1558, %r37;
	mad.lo.s32 	%r5219, %r6982, 384, %r66;
	mad.lo.s32 	%r5220, %r5213, %r1617, %r5219;
	mad.lo.s32 	%r5223, %r1619, %r65, %r5220;
	mul.wide.s32 	%rd530, %r5223, 4;
	add.s64 	%rd531, %rd40, %rd530;
	add.s64 	%rd533, %rd531, %rd279;
	ld.global.v4.u32 	{%r7480, %r7479, %r7482, %r7481}, [%rd533];
	ld.global.v4.u32 	{%r7478, %r7476, %r7474, %r7473}, [%rd533+512];
	ld.global.v4.u32 	{%r7477, %r7475, %r7472, %r7470}, [%rd533+1024];
	ld.global.v4.u32 	{%r7468, %r7467, %r7471, %r7469}, [%rd533+1536];

$L__BB0_751:
	neg.s32 	%r6976, %r1561;
	not.b32 	%r6975, %r38;
	add.s32 	%r6974, %r1559, %r6975;
	mul.lo.s32 	%r6973, %r6974, %r1560;
	not.b32 	%r6972, %r37;
	add.s32 	%r6971, %r1558, %r6972;
	mad.lo.s32 	%r5247, %r6971, %r1560, %r6973;
	add.s32 	%r5248, %r5247, %r1561;
	add.s32 	%r5257, %r5248, %r2467;
	add.s32 	%r1293, %r7260, 1;
	add.s32 	%r5258, %r1293, %r5257;
	div.s32 	%r5259, %r5258, %r1561;
	mad.lo.s32 	%r1294, %r5259, %r6976, %r5258;
	mad.lo.s32 	%r5266, %r5259, %r42, %r2478;
	ld.param.u64 	%rd534, [%rd1+96];
	cvta.to.global.u64 	%rd535, %rd534;
	rem.s32 	%r5267, %r5266, %r1562;
	shr.u32 	%r5268, %r5267, 31;
	add.s32 	%r5269, %r5267, %r5268;
	shr.s32 	%r5270, %r5269, 1;
	mad.lo.s32 	%r5271, %r5270, %r1561, %r1294;
	shl.b32 	%r5272, %r5271, 5;
	add.s32 	%r5273, %r5272, %r40;
	cvt.s64.s32 	%rd42, %r5273;
	mul.wide.s32 	%rd536, %r5273, 4;
	add.s64 	%rd537, %rd535, %rd536;
	ld.global.u32 	%r7262, [%rd537];
	ld.param.u64 	%rd538, [%rd1+104];
	cvta.to.global.u64 	%rd43, %rd538;
	@%p109 bra 	$L__BB0_753;
	bra.uni 	$L__BB0_752;

$L__BB0_753:
	shl.b64 	%rd541, %rd42, 2;
	add.s64 	%rd542, %rd43, %rd541;
	ld.global.u32 	%r7261, [%rd542];
	bra.uni 	$L__BB0_754;

$L__BB0_752:
	shl.b32 	%r5274, %r1294, 5;
	add.s32 	%r5275, %r5274, %r40;
	mul.wide.s32 	%rd539, %r5275, 16;
	add.s64 	%rd540, %rd43, %rd539;
	ld.global.v4.u32 	{%r5276, %r5277, %r5278, %r5279}, [%rd540];
	mov.u32 	%r7092, %r7096;
	mov.u32 	%r7093, %r7097;
	mov.u32 	%r7094, %r7098;
	mov.u32 	%r7095, %r7099;
	mov.u32 	%r7096, %r7100;
	mov.u32 	%r7097, %r7101;
	mov.u32 	%r7098, %r7102;
	mov.u32 	%r7099, %r7103;
	mov.u32 	%r7100, %r5279;
	mov.u32 	%r7101, %r5278;
	mov.u32 	%r7102, %r5277;
	mov.u32 	%r7103, %r5276;

$L__BB0_754:
	mov.f32 	%f550, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5280, {low,high};}

	// end inline asm
	selp.b32 	%r5282, %r7087, %r5280, %p17;
	// begin inline asm
	{mul.f16x2 %r5281,%r5282,%r7230;
}
	// end inline asm
	selp.b32 	%r5285, %r7091, %r5280, %p17;
	// begin inline asm
	{mul.f16x2 %r5284,%r5285,%r7223;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5287, {low,high};}

	// end inline asm
	selp.b32 	%r5289, %r7087, %r5287, %p17;
	// begin inline asm
	{mul.f16x2 %r5288,%r5289,%r7211;
}
	// end inline asm
	selp.b32 	%r5292, %r7091, %r5287, %p17;
	// begin inline asm
	{mul.f16x2 %r5291,%r5292,%r7206;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5294, {low,high};}

	// end inline asm
	selp.b32 	%r5296, %r7087, %r5294, %p17;
	// begin inline asm
	{mul.f16x2 %r5295,%r5296,%r7198;
}
	// end inline asm
	selp.b32 	%r5299, %r7091, %r5294, %p17;
	// begin inline asm
	{mul.f16x2 %r5298,%r5299,%r7197;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5301, {low,high};}

	// end inline asm
	selp.b32 	%r5303, %r7087, %r5301, %p17;
	// begin inline asm
	{mul.f16x2 %r5302,%r5303,%r7202;
}
	// end inline asm
	selp.b32 	%r5306, %r7091, %r5301, %p17;
	// begin inline asm
	{mul.f16x2 %r5305,%r5306,%r7201;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5308, {low,high};}

	// end inline asm
	selp.b32 	%r5310, %r7087, %r5308, %p17;
	// begin inline asm
	{mul.f16x2 %r5309,%r5310,%r7200;
}
	// end inline asm
	selp.b32 	%r5313, %r7091, %r5308, %p17;
	// begin inline asm
	{mul.f16x2 %r5312,%r5313,%r7194;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5315, {low,high};}

	// end inline asm
	selp.b32 	%r5317, %r7087, %r5315, %p17;
	// begin inline asm
	{mul.f16x2 %r5316,%r5317,%r7190;
}
	// end inline asm
	selp.b32 	%r5320, %r7091, %r5315, %p17;
	// begin inline asm
	{mul.f16x2 %r5319,%r5320,%r7189;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5322, {low,high};}

	// end inline asm
	selp.b32 	%r5324, %r7087, %r5322, %p17;
	// begin inline asm
	{mul.f16x2 %r5323,%r5324,%r7188;
}
	// end inline asm
	selp.b32 	%r5327, %r7091, %r5322, %p17;
	// begin inline asm
	{mul.f16x2 %r5326,%r5327,%r7182;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5329, {low,high};}

	// end inline asm
	selp.b32 	%r5331, %r7087, %r5329, %p17;
	// begin inline asm
	{mul.f16x2 %r5330,%r5331,%r7175;
}
	// end inline asm
	selp.b32 	%r5334, %r7091, %r5329, %p17;
	// begin inline asm
	{mul.f16x2 %r5333,%r5334,%r7174;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5336, {low,high};}

	// end inline asm
	selp.b32 	%r5338, %r7087, %r5336, %p17;
	// begin inline asm
	{mul.f16x2 %r5337,%r5338,%r7151;
}
	// end inline asm
	selp.b32 	%r5341, %r7091, %r5336, %p17;
	// begin inline asm
	{mul.f16x2 %r5340,%r5341,%r7149;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5343, {low,high};}

	// end inline asm
	selp.b32 	%r5345, %r7087, %r5343, %p17;
	// begin inline asm
	{mul.f16x2 %r5344,%r5345,%r7150;
}
	// end inline asm
	selp.b32 	%r5348, %r7091, %r5343, %p17;
	// begin inline asm
	{mul.f16x2 %r5347,%r5348,%r7148;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5350, {low,high};}

	// end inline asm
	selp.b32 	%r5352, %r7087, %r5350, %p17;
	// begin inline asm
	{mul.f16x2 %r5351,%r5352,%r7167;
}
	// end inline asm
	selp.b32 	%r5355, %r7091, %r5350, %p17;
	// begin inline asm
	{mul.f16x2 %r5354,%r5355,%r7166;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5357, {low,high};}

	// end inline asm
	selp.b32 	%r5359, %r7087, %r5357, %p17;
	// begin inline asm
	{mul.f16x2 %r5358,%r5359,%r7171;
}
	// end inline asm
	selp.b32 	%r5362, %r7091, %r5357, %p17;
	// begin inline asm
	{mul.f16x2 %r5361,%r5362,%r7170;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5364, {low,high};}

	// end inline asm
	selp.b32 	%r5366, %r7087, %r5364, %p17;
	// begin inline asm
	{mul.f16x2 %r5365,%r5366,%r7169;
}
	// end inline asm
	selp.b32 	%r5369, %r7091, %r5364, %p17;
	// begin inline asm
	{mul.f16x2 %r5368,%r5369,%r7164;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5371, {low,high};}

	// end inline asm
	selp.b32 	%r5373, %r7087, %r5371, %p17;
	// begin inline asm
	{mul.f16x2 %r5372,%r5373,%r7159;
}
	// end inline asm
	selp.b32 	%r5376, %r7091, %r5371, %p17;
	// begin inline asm
	{mul.f16x2 %r5375,%r5376,%r7158;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5378, {low,high};}

	// end inline asm
	selp.b32 	%r5380, %r7087, %r5378, %p17;
	// begin inline asm
	{mul.f16x2 %r5379,%r5380,%r7161;
}
	// end inline asm
	selp.b32 	%r5383, %r7091, %r5378, %p17;
	// begin inline asm
	{mul.f16x2 %r5382,%r5383,%r7160;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5385, {low,high};}

	// end inline asm
	selp.b32 	%r5387, %r7087, %r5385, %p17;
	// begin inline asm
	{mul.f16x2 %r5386,%r5387,%r7147;
}
	// end inline asm
	selp.b32 	%r5390, %r7091, %r5385, %p17;
	// begin inline asm
	{mul.f16x2 %r5389,%r5390,%r7146;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5392, {low,high};}

	// end inline asm
	selp.b32 	%r5394, %r7087, %r5392, %p17;
	// begin inline asm
	{mul.f16x2 %r5393,%r5394,%r7145;
}
	// end inline asm
	selp.b32 	%r5397, %r7091, %r5392, %p17;
	// begin inline asm
	{mul.f16x2 %r5396,%r5397,%r7144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5399, {low,high};}

	// end inline asm
	selp.b32 	%r5401, %r7087, %r5399, %p17;
	// begin inline asm
	{mul.f16x2 %r5400,%r5401,%r7143;
}
	// end inline asm
	selp.b32 	%r5404, %r7091, %r5399, %p17;
	// begin inline asm
	{mul.f16x2 %r5403,%r5404,%r7142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5406, {low,high};}

	// end inline asm
	selp.b32 	%r5408, %r7087, %r5406, %p17;
	// begin inline asm
	{mul.f16x2 %r5407,%r5408,%r7153;
}
	// end inline asm
	selp.b32 	%r5411, %r7091, %r5406, %p17;
	// begin inline asm
	{mul.f16x2 %r5410,%r5411,%r7152;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5413, {low,high};}

	// end inline asm
	selp.b32 	%r5415, %r7087, %r5413, %p17;
	// begin inline asm
	{mul.f16x2 %r5414,%r5415,%r7141;
}
	// end inline asm
	selp.b32 	%r5418, %r7091, %r5413, %p17;
	// begin inline asm
	{mul.f16x2 %r5417,%r5418,%r7139;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5420, {low,high};}

	// end inline asm
	selp.b32 	%r5422, %r7087, %r5420, %p17;
	// begin inline asm
	{mul.f16x2 %r5421,%r5422,%r7140;
}
	// end inline asm
	selp.b32 	%r5425, %r7091, %r5420, %p17;
	// begin inline asm
	{mul.f16x2 %r5424,%r5425,%r7138;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5427, {low,high};}

	// end inline asm
	selp.b32 	%r5429, %r7087, %r5427, %p17;
	// begin inline asm
	{mul.f16x2 %r5428,%r5429,%r7137;
}
	// end inline asm
	selp.b32 	%r5432, %r7091, %r5427, %p17;
	// begin inline asm
	{mul.f16x2 %r5431,%r5432,%r7135;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5434, {low,high};}

	// end inline asm
	selp.b32 	%r5436, %r7087, %r5434, %p17;
	// begin inline asm
	{mul.f16x2 %r5435,%r5436,%r7136;
}
	// end inline asm
	selp.b32 	%r5439, %r7091, %r5434, %p17;
	// begin inline asm
	{mul.f16x2 %r5438,%r5439,%r7134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5441, {low,high};}

	// end inline asm
	selp.b32 	%r5443, %r7087, %r5441, %p17;
	// begin inline asm
	{mul.f16x2 %r5442,%r5443,%r7133;
}
	// end inline asm
	selp.b32 	%r5446, %r7091, %r5441, %p17;
	// begin inline asm
	{mul.f16x2 %r5445,%r5446,%r7132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5448,%r7257,%r3442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5451,%r3553,%r3399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5454,%r5448,%r5451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5457,%r6999,%r5454;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5460,%r5281,%r5457;
}
	// end inline asm
	selp.b32 	%r7225, %r5281, %r5460, %p17;
	// begin inline asm
	{sub.f16x2 %r5463,%r7256,%r3508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5466,%r3587,%r3476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5469,%r5463,%r5466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5472,%r6999,%r5469;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5475,%r5284,%r5472;
}
	// end inline asm
	selp.b32 	%r7220, %r5284, %r5475, %p17;
	// begin inline asm
	{sub.f16x2 %r5478,%r7253,%r3675;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5481,%r7259,%r3632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5484,%r5478,%r5481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5487,%r6999,%r5484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5490,%r5288,%r5487;
}
	// end inline asm
	selp.b32 	%r7229, %r5288, %r5490, %p17;
	// begin inline asm
	{sub.f16x2 %r5493,%r7252,%r3741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5496,%r7258,%r3709;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5499,%r5493,%r5496;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5502,%r6999,%r5499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5505,%r5291,%r5502;
}
	// end inline asm
	selp.b32 	%r7222, %r5291, %r5505, %p17;
	// begin inline asm
	{sub.f16x2 %r5508,%r7256,%r7257;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5511,%r7086,%r5508;
}
	// end inline asm
	@%p17 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r7496,%r5295;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r7496,%r7087,%r5508;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5522, 31;
	mov.u32 	%r5524, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5520,%r7496,%r5522,%r2163,%r5524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5525,%r5511,%r5520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5528,%r1071,%r1047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5531,%r5528,%r5525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5534,%r6999,%r5531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7227,%r5295,%r5534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5540,%r7258,%r7259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5543,%r7086,%r5540;
}
	// end inline asm
	mov.u32 	%r7497, %r5302;
	@%p17 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r7497,%r7087,%r5540;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5552,%r7497,%r5522,%r2163,%r5524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5557,%r5543,%r5552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r7247,%r1047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5563,%r5557,%r5560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5566,%r6999,%r5563;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7232,%r5302,%r5566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5572,%r7249,%r7257;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5575,%r7255,%r7259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5578,%r5572,%r5575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5581,%r6999,%r5578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5584,%r5309,%r5581;
}
	// end inline asm
	selp.b32 	%r7230, %r5309, %r5584, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7257;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5589,%r7257,%r430,%r2163,%r5524;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5589;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5595, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5596,%r5595,%r7256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5599,%r7090,%r5596;
}
	// end inline asm
	@%p17 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r7498,%r5298;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r7498,%r7091,%r5596;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5614, 31;
	mov.u32 	%r5638, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5612,%r7498,%r5614,%r2163,%r5638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5617,%r5599,%r5612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5620,%r1083,%r1059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5623,%r5620,%r5617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5626,%r6999,%r5623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7226,%r5298,%r5626;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7259;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5634,%r7259,%r430,%r2163,%r5638;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5634;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5640, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5641,%r5640,%r7258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5644,%r7090,%r5641;
}
	// end inline asm
	mov.u32 	%r7499, %r5305;
	@%p17 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r7499,%r7091,%r5641;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5655,%r7499,%r5614,%r2163,%r5638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5660,%r5644,%r5655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5663,%r7246,%r1059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5666,%r5660,%r5663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5669,%r6999,%r5666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7231,%r5305,%r5669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5675,%r7248,%r7256;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5678,%r7254,%r7258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5681,%r5675,%r5678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5684,%r6999,%r5681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5687,%r5312,%r5684;
}
	// end inline asm
	selp.b32 	%r7223, %r5312, %r5687, %p17;
	// begin inline asm
	{sub.f16x2 %r5690,%r7254,%r7255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5693,%r7086,%r5690;
}
	// end inline asm
	mov.u32 	%r7500, %r5316;
	@%p17 bra 	$L__BB0_766;

	// begin inline asm
	{mul.f16x2 %r7500,%r7087,%r5690;
}
	// end inline asm

$L__BB0_766:
	mov.u32 	%r5704, 31;
	mov.u32 	%r5743, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5702,%r7500,%r5704,%r2163,%r5743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5707,%r5693,%r5702;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5710,%r7241,%r1071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5713,%r5707,%r5710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5716,%r6999,%r5713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7218,%r5316,%r5716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5722,%r7243,%r4013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5725,%r4154,%r7255;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5728,%r5722,%r5725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5731,%r6999,%r5728;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5734,%r5323,%r5731;
}
	// end inline asm
	selp.b32 	%r7216, %r5323, %r5734, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7255;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5739,%r7255,%r430,%r2163,%r5743;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5739;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5745, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5746,%r5745,%r7254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5749,%r7090,%r5746;
}
	// end inline asm
	mov.u32 	%r7501, %r5319;
	@%p17 bra 	$L__BB0_768;

	// begin inline asm
	{mul.f16x2 %r7501,%r7091,%r5746;
}
	// end inline asm

$L__BB0_768:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5760,%r7501,%r5704,%r2163,%r5743;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5765,%r5749,%r5760;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5768,%r7240,%r1083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5771,%r5765,%r5768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5774,%r6999,%r5771;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7217,%r5319,%r5774;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5780,%r7242,%r4094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5783,%r4188,%r7254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r5780,%r5783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5789,%r6999,%r5786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5792,%r5326,%r5789;
}
	// end inline asm
	selp.b32 	%r7214, %r5326, %r5792, %p17;
	// begin inline asm
	{sub.f16x2 %r5795,%r7252,%r7253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5798,%r7086,%r5795;
}
	// end inline asm
	@%p17 bra 	$L__BB0_770;
	bra.uni 	$L__BB0_769;

$L__BB0_770:
	// begin inline asm
	{neg.f16x2 %r7502,%r5330;
}
	// end inline asm
	bra.uni 	$L__BB0_771;

$L__BB0_769:
	// begin inline asm
	{mul.f16x2 %r7502,%r7087,%r5795;
}
	// end inline asm

$L__BB0_771:
	mov.u32 	%r5811, 31;
	mov.u32 	%r5813, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5809,%r7502,%r5811,%r2163,%r5813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5814,%r5798,%r5809;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5817,%r7247,%r1101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5820,%r5817,%r5814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5823,%r6999,%r5820;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r5330,%r5823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5829,%r7373,%r7374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5832,%r7086,%r5829;
}
	// end inline asm
	mov.u32 	%r7503, %r5337;
	@%p17 bra 	$L__BB0_773;

	// begin inline asm
	{mul.f16x2 %r7503,%r7087,%r5829;
}
	// end inline asm

$L__BB0_773:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5841,%r7503,%r5811,%r2163,%r5813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5846,%r5832,%r5841;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5849,%r7371,%r1101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5852,%r5846,%r5849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5855,%r6999,%r5852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7213,%r5337,%r5855;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5861,%r7372,%r7253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5864,%r7251,%r7374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5867,%r5861,%r5864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5870,%r6999,%r5867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5873,%r5344,%r5870;
}
	// end inline asm
	selp.b32 	%r7211, %r5344, %r5873, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7253;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5878,%r7253,%r430,%r2163,%r5813;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5878;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5884, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r5884,%r7252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5888,%r7090,%r5885;
}
	// end inline asm
	@%p17 bra 	$L__BB0_775;
	bra.uni 	$L__BB0_774;

$L__BB0_775:
	// begin inline asm
	{neg.f16x2 %r7504,%r5333;
}
	// end inline asm
	bra.uni 	$L__BB0_776;

$L__BB0_774:
	// begin inline asm
	{mul.f16x2 %r7504,%r7091,%r5885;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r5903, 31;
	mov.u32 	%r5927, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5901,%r7504,%r5903,%r2163,%r5927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5906,%r5888,%r5901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5909,%r7246,%r1107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5912,%r5909,%r5906;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5915,%r6999,%r5912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7207,%r5333,%r5915;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7374;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5923,%r7374,%r430,%r2163,%r5927;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5923;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5929, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5930,%r5929,%r7373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5933,%r7090,%r5930;
}
	// end inline asm
	mov.u32 	%r7505, %r5340;
	@%p17 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7505,%r7091,%r5930;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5944,%r7505,%r5903,%r2163,%r5927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5949,%r5933,%r5944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r7369,%r1107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5955,%r5949,%r5952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5958,%r6999,%r5955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7212,%r5340,%r5958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5964,%r7370,%r7252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5967,%r7250,%r7373;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r5964,%r5967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5973,%r6999,%r5970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5976,%r5347,%r5973;
}
	// end inline asm
	selp.b32 	%r7206, %r5347, %r5976, %p17;
	// begin inline asm
	{sub.f16x2 %r5979,%r7248,%r7249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5982,%r7086,%r5979;
}
	// end inline asm
	@%p17 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7506,%r5351;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7506,%r7087,%r5979;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r5995, 31;
	mov.u32 	%r5997, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5993,%r7506,%r5995,%r2163,%r5997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5998,%r5982,%r5993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6001,%r7241,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6004,%r6001,%r5998;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6007,%r6999,%r6004;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7198,%r5351,%r6007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6013,%r7250,%r7251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6016,%r7086,%r6013;
}
	// end inline asm
	mov.u32 	%r7507, %r5358;
	@%p17 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7507,%r7087,%r6013;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6025,%r7507,%r5995,%r2163,%r5997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6030,%r6016,%r6025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r7237,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r6030,%r6033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6039,%r6999,%r6036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7202,%r5358,%r6039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6045,%r7239,%r7249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6048,%r7245,%r7251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6051,%r6045,%r6048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6054,%r6999,%r6051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6057,%r5365,%r6054;
}
	// end inline asm
	selp.b32 	%r7200, %r5365, %r6057, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7249;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6062,%r7249,%r430,%r2163,%r5997;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6062;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6068, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6069,%r6068,%r7248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6072,%r7090,%r6069;
}
	// end inline asm
	@%p17 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7508,%r5354;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7508,%r7091,%r6069;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6087, 31;
	mov.u32 	%r6111, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6085,%r7508,%r6087,%r2163,%r6111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6090,%r6072,%r6085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6093,%r7240,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6096,%r6093,%r6090;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6099,%r6999,%r6096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7197,%r5354,%r6099;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7251;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6107,%r7251,%r430,%r2163,%r6111;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6107;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6113, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6114,%r6113,%r7250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6117,%r7090,%r6114;
}
	// end inline asm
	mov.u32 	%r7509, %r5361;
	@%p17 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7509,%r7091,%r6114;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6128,%r7509,%r6087,%r2163,%r6111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6133,%r6117,%r6128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r7236,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6139,%r6133,%r6136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6142,%r6999,%r6139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7201,%r5361,%r6142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6148,%r7238,%r7248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6151,%r7244,%r7250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6154,%r6148,%r6151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6157,%r6999,%r6154;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6160,%r5368,%r6157;
}
	// end inline asm
	selp.b32 	%r7194, %r5368, %r6160, %p17;
	// begin inline asm
	{sub.f16x2 %r6163,%r7242,%r7243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6166,%r7086,%r6163;
}
	// end inline asm
	@%p17 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7510,%r5372;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7510,%r7087,%r6163;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6179, 31;
	mov.u32 	%r6181, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6177,%r7510,%r6179,%r2163,%r6181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6182,%r6166,%r6177;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6185,%r1156,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6188,%r6185,%r6182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6191,%r6999,%r6188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7186,%r5372,%r6191;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6197,%r7244,%r7245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6200,%r7086,%r6197;
}
	// end inline asm
	mov.u32 	%r7511, %r5379;
	@%p17 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7511,%r7087,%r6197;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6209,%r7511,%r6179,%r2163,%r6181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6214,%r6200,%r6209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6217,%r7235,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6220,%r6214,%r6217;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6223,%r6999,%r6220;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7190,%r5379,%r6223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6229,%r7357,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6232,%r7360,%r7245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6235,%r6229,%r6232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6238,%r6999,%r6235;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6241,%r5386,%r6238;
}
	// end inline asm
	selp.b32 	%r7188, %r5386, %r6241, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7243;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6246,%r7243,%r430,%r2163,%r6181;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6246;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6252, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6253,%r6252,%r7242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6256,%r7090,%r6253;
}
	// end inline asm
	@%p17 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7512,%r5375;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7512,%r7091,%r6253;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6271, 31;
	mov.u32 	%r6295, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6269,%r7512,%r6271,%r2163,%r6295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6274,%r6256,%r6269;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r1157,%r7240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6280,%r6277,%r6274;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6283,%r6999,%r6280;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r5375,%r6283;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7245;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6291,%r7245,%r430,%r2163,%r6295;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6291;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6297, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6298,%r6297,%r7244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6301,%r7090,%r6298;
}
	// end inline asm
	mov.u32 	%r7513, %r5382;
	@%p17 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7513,%r7091,%r6298;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6312,%r7513,%r6271,%r2163,%r6295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6317,%r6301,%r6312;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r7234,%r7240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6323,%r6317,%r6320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6326,%r6999,%r6323;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r5382,%r6326;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6332,%r7355,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6335,%r7359,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6338,%r6332,%r6335;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6341,%r6999,%r6338;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6344,%r5389,%r6341;
}
	// end inline asm
	selp.b32 	%r7182, %r5389, %r6344, %p17;
	// begin inline asm
	{sub.f16x2 %r6347,%r7359,%r7360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6350,%r7086,%r6347;
}
	// end inline asm
	mov.u32 	%r7514, %r5393;
	@%p17 bra 	$L__BB0_800;

	// begin inline asm
	{mul.f16x2 %r7514,%r7087,%r6347;
}
	// end inline asm

$L__BB0_800:
	mov.u32 	%r6361, 31;
	mov.u32 	%r6385, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6359,%r7514,%r6361,%r2163,%r6385;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6364,%r6350,%r6359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6367,%r7354,%r1156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6370,%r6364,%r6367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6373,%r6999,%r6370;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7179,%r5393,%r6373;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7360;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6381,%r7360,%r430,%r2163,%r6385;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6381;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6387, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6388,%r6387,%r7359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6391,%r7090,%r6388;
}
	// end inline asm
	mov.u32 	%r7515, %r5396;
	@%p17 bra 	$L__BB0_802;

	// begin inline asm
	{mul.f16x2 %r7515,%r7091,%r6388;
}
	// end inline asm

$L__BB0_802:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6402,%r7515,%r6361,%r2163,%r6385;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6407,%r6391,%r6402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6410,%r7353,%r1157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6413,%r6407,%r6410;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6416,%r6999,%r6413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r5396,%r6416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6422,%r7370,%r7372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6425,%r7086,%r6422;
}
	// end inline asm
	@%p17 bra 	$L__BB0_804;
	bra.uni 	$L__BB0_803;

$L__BB0_804:
	// begin inline asm
	{neg.f16x2 %r7516,%r5400;
}
	// end inline asm
	bra.uni 	$L__BB0_805;

$L__BB0_803:
	// begin inline asm
	{mul.f16x2 %r7516,%r7087,%r6422;
}
	// end inline asm

$L__BB0_805:
	mov.u32 	%r6438, 31;
	mov.u32 	%r6462, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6436,%r7516,%r6438,%r2163,%r6462;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6441,%r6425,%r6436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6444,%r7237,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6447,%r6444,%r6441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6450,%r6999,%r6447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r5400,%r6450;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7372;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6458,%r7372,%r430,%r2163,%r6462;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6458;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6464, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6465,%r6464,%r7370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6468,%r7090,%r6465;
}
	// end inline asm
	@%p17 bra 	$L__BB0_807;
	bra.uni 	$L__BB0_806;

$L__BB0_807:
	// begin inline asm
	{neg.f16x2 %r7517,%r5403;
}
	// end inline asm
	bra.uni 	$L__BB0_808;

$L__BB0_806:
	// begin inline asm
	{mul.f16x2 %r7517,%r7091,%r6465;
}
	// end inline asm

$L__BB0_808:
	mov.u32 	%r6483, 31;
	mov.u32 	%r6485, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6481,%r7517,%r6483,%r2163,%r6485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6486,%r6468,%r6481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6489,%r7236,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6492,%r6489,%r6486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6495,%r6999,%r6492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7174,%r5403,%r6495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6501,%r7238,%r7239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6504,%r7086,%r6501;
}
	// end inline asm
	@%p17 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7518,%r5407;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7518,%r7087,%r6501;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6517, 31;
	mov.u32 	%r6519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6515,%r7518,%r6517,%r2163,%r6519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6520,%r6504,%r6515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6523,%r7235,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r6523,%r6520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6529,%r6999,%r6526;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r5407,%r6529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6535,%r7367,%r7368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6538,%r7086,%r6535;
}
	// end inline asm
	mov.u32 	%r7519, %r5414;
	@%p17 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7519,%r7087,%r6535;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6547,%r7519,%r6517,%r2163,%r6519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r6538,%r6547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6555,%r7365,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r6552,%r6555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6561,%r6999,%r6558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r5414,%r6561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6567,%r7352,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6570,%r7358,%r7368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6573,%r6567,%r6570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6576,%r6999,%r6573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6579,%r5421,%r6576;
}
	// end inline asm
	selp.b32 	%r7169, %r5421, %r6579, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7239;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6584,%r7239,%r430,%r2163,%r6519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6584;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6590, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6591,%r6590,%r7238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6594,%r7090,%r6591;
}
	// end inline asm
	@%p17 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7520,%r5410;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7520,%r7091,%r6591;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6609, 31;
	mov.u32 	%r6633, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6607,%r7520,%r6609,%r2163,%r6633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6612,%r6594,%r6607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6615,%r7234,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6618,%r6615,%r6612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6621,%r6999,%r6618;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r5410,%r6621;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7368;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6629,%r7368,%r430,%r2163,%r6633;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6629;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6635, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6636,%r6635,%r7367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6639,%r7090,%r6636;
}
	// end inline asm
	mov.u32 	%r7521, %r5417;
	@%p17 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7521,%r7091,%r6636;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6650,%r7521,%r6609,%r2163,%r6633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6655,%r6639,%r6650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6658,%r7363,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6661,%r6655,%r6658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6664,%r6999,%r6661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r5417,%r6664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6670,%r7351,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6673,%r7356,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6676,%r6670,%r6673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6679,%r6999,%r6676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6682,%r5424,%r6679;
}
	// end inline asm
	selp.b32 	%r7164, %r5424, %r6682, %p17;
	// begin inline asm
	{sub.f16x2 %r6685,%r7355,%r7357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6688,%r7086,%r6685;
}
	// end inline asm
	@%p17 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7522,%r5428;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7522,%r7087,%r6685;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6701, 31;
	mov.u32 	%r6703, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6699,%r7522,%r6701,%r2163,%r6703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6704,%r6688,%r6699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r7354,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6710,%r6707,%r6704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6713,%r6999,%r6710;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7159,%r5428,%r6713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6719,%r7356,%r7358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6722,%r7086,%r6719;
}
	// end inline asm
	mov.u32 	%r7523, %r5435;
	@%p17 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7523,%r7087,%r6719;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6731,%r7523,%r6701,%r2163,%r6703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6736,%r6722,%r6731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6739,%r7350,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r6736,%r6739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6745,%r6999,%r6742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7161,%r5435,%r6745;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7357;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6753,%r7357,%r430,%r2163,%r6703;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6753;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6759, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6760,%r6759,%r7355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6763,%r7090,%r6760;
}
	// end inline asm
	@%p17 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7524,%r5431;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7524,%r7091,%r6760;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6778, 31;
	mov.u32 	%r6802, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6776,%r7524,%r6778,%r2163,%r6802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6781,%r6763,%r6776;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6784,%r7353,%r7234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6787,%r6784,%r6781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6790,%r6999,%r6787;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r5431,%r6790;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7358;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6798,%r7358,%r430,%r2163,%r6802;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6798;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6804, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6805,%r6804,%r7356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6808,%r7090,%r6805;
}
	// end inline asm
	mov.u32 	%r7525, %r5438;
	@%p17 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7525,%r7091,%r6805;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6819,%r7525,%r6778,%r2163,%r6802;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6824,%r6808,%r6819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6827,%r7349,%r7234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6830,%r6824,%r6827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6833,%r6999,%r6830;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r5438,%r6833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6839,%r7351,%r7352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6842,%r7086,%r6839;
}
	// end inline asm
	@%p17 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7526,%r5442;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7526,%r7087,%r6839;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6855, 31;
	mov.u32 	%r6879, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6853,%r7526,%r6855,%r2163,%r6879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6858,%r6842,%r6853;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6861,%r7350,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6864,%r6861,%r6858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6867,%r6999,%r6864;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7153,%r5442,%r6867;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7352;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6875,%r7352,%r430,%r2163,%r6879;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6875;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6881, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6882,%r6881,%r7351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6885,%r7090,%r6882;
}
	// end inline asm
	@%p17 bra 	$L__BB0_833;
	bra.uni 	$L__BB0_832;

$L__BB0_833:
	// begin inline asm
	{neg.f16x2 %r7527,%r5445;
}
	// end inline asm
	bra.uni 	$L__BB0_834;

$L__BB0_832:
	// begin inline asm
	{mul.f16x2 %r7527,%r7091,%r6882;
}
	// end inline asm

$L__BB0_834:
	setp.ne.s32 	%p502, %r35, %r2055;
	mov.u32 	%r6900, 31;
	mov.u32 	%r6902, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6898,%r7527,%r6900,%r2163,%r6902;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6903,%r6885,%r6898;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6906,%r7349,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6909,%r6906,%r6903;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6912,%r6999,%r6909;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r5445,%r6912;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd543, [%rd1+80];
	cvta.to.global.u64 	%rd44, %rd543;
	@%p502 bra 	$L__BB0_836;

	mad.lo.s32 	%r6921, %r650, %r1559, %r38;
	mad.lo.s32 	%r6922, %r6921, 768, 384;
	mul.lo.s32 	%r6923, %r6922, %r1557;
	mad.lo.s32 	%r6925, %r36, 384, %r6923;
	add.s32 	%r6926, %r6925, -128;
	mul.wide.s32 	%rd544, %r6926, 4;
	add.s64 	%rd545, %rd44, %rd544;
	add.s64 	%rd547, %rd545, %rd279;
	st.global.v4.u32 	[%rd547+512], {%r7213, %r7212, %r7208, %r7207};
	st.global.v4.u32 	[%rd547+1024], {%r7229, %r7222, %r7232, %r7231};
	st.global.v4.u32 	[%rd547+1536], {%r7227, %r7226, %r7225, %r7220};

$L__BB0_836:
	setp.ne.s32 	%p503, %r36, %r2060;
	@%p503 bra 	$L__BB0_839;

	not.b32 	%r6981, %r35;
	add.s32 	%r6980, %r1556, %r6981;
	mad.lo.s32 	%r6928, %r651, %r1558, %r37;
	mad.lo.s32 	%r6934, %r6980, 384, %r66;
	mad.lo.s32 	%r6935, %r6928, %r1617, %r6934;
	mad.lo.s32 	%r6938, %r1619, %r65, %r6935;
	mul.wide.s32 	%rd548, %r6938, 4;
	add.s64 	%rd549, %rd44, %rd548;
	add.s64 	%rd45, %rd549, %rd279;
	st.global.v4.u32 	[%rd45], {%r7227, %r7226, %r7225, %r7220};
	st.global.v4.u32 	[%rd45+512], {%r7218, %r7217, %r7186, %r7185};
	st.global.v4.u32 	[%rd45+1024], {%r7216, %r7214, %r7179, %r7178};
	@%p243 bra 	$L__BB0_839;

	st.global.v4.u32 	[%rd45+1536], {%r7464, %r7463, %r7466, %r7465};

$L__BB0_839:
	rem.s32 	%r6939, %r7260, %r1560;
	setp.eq.s32 	%p496, %r6939, 0;
	@%p496 bra 	$L__BB0_841;

	bar.sync 	0;
	bra.uni 	$L__BB0_848;

$L__BB0_841:
	@%p185 bra 	$L__BB0_843;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_843:
	bar.sync 	0;
	@%p186 bra 	$L__BB0_847;

	membar.gl;
	setp.eq.s32 	%p499, %r424, %r425;
	mov.u32 	%r6955, -2147483647;
	sub.s32 	%r6956, %r6955, %r423;
	selp.b32 	%r6944, %r6956, 1, %p499;
	// begin inline asm
	atom.add.release.gpu.u32 %r6943,[%rd29],%r6944;
	// end inline asm

$L__BB0_845:
	ld.volatile.u32 	%r6957, [%rd29];
	xor.b32  	%r6958, %r6957, %r6943;
	setp.gt.s32 	%p500, %r6958, -1;
	@%p500 bra 	$L__BB0_845;

	// begin inline asm
	ld.acquire.gpu.u32 %r6959,[%rd29];
	// end inline asm

$L__BB0_847:
	bar.sync 	0;

$L__BB0_848:
	setp.lt.s32 	%p501, %r1293, %r43;
	mov.u32 	%r7132, %r7467;
	mov.u32 	%r7133, %r7468;
	mov.u32 	%r7134, %r7453;
	mov.u32 	%r7135, %r7454;
	mov.u32 	%r7136, %r7455;
	mov.u32 	%r7137, %r7456;
	mov.u32 	%r7138, %r7469;
	mov.u32 	%r7139, %r7470;
	mov.u32 	%r7140, %r7471;
	mov.u32 	%r7141, %r7472;
	mov.u32 	%r7142, %r7473;
	mov.u32 	%r7143, %r7474;
	mov.u32 	%r7144, %r7459;
	mov.u32 	%r7145, %r7460;
	mov.u32 	%r7146, %r7461;
	mov.u32 	%r7147, %r7462;
	mov.u32 	%r7148, %r7475;
	mov.u32 	%r7149, %r7476;
	mov.u32 	%r7150, %r7477;
	mov.u32 	%r7151, %r7478;
	mov.u32 	%r7180, %r495;
	mov.u32 	%r7181, %r7397;
	mov.u32 	%r7184, %r496;
	mov.u32 	%r7187, %r7399;
	mov.u32 	%r7192, %r501;
	mov.u32 	%r7196, %r504;
	mov.u32 	%r7204, %r7404;
	mov.u32 	%r7209, %r7406;
	mov.u32 	%r7215, %r522;
	mov.u32 	%r7219, %r530;
	mov.u32 	%r7221, %r532;
	mov.u32 	%r7224, %r534;
	mov.u32 	%r7228, %r538;
	mov.u32 	%r7233, %r542;
	mov.u32 	%r7260, %r1293;
	@%p501 bra 	$L__BB0_316;

$L__BB0_849:
	ret;

}

