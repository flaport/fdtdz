//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<537>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<578>;
	.reg .b32 	%r<7524>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<580>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1562, %r1563}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1564, %r1565}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1566, %r1567}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1568, %r1569}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1570, %r1571}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1572, %r1573}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1574, %r1575}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1576, %r1577}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1578, %r1579}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1580, %r1581}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1582, %r1583}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1584, %r1585}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1586, %r1587}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1588, 32;
	sub.s32 	%r45, %r1588, %r1569;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1589, %r1575, -1;
	mad.lo.s32 	%r1590, %r1589, %r1574, %r1573;
	add.s32 	%r1591, %r1568, %r1567;
	add.s32 	%r1592, %r1591, %r1590;
	add.s32 	%r1593, %r1592, 1;
	mul.lo.s32 	%r1594, %r1562, %r1564;
	shl.b32 	%r47, %r1594, 1;
	shl.b32 	%r1595, %r1594, 2;
	div.s32 	%r1596, %r1593, %r1595;
	add.s32 	%r1597, %r1596, 1;
	mul.lo.s32 	%r1598, %r1597, %r1568;
	mul.lo.s32 	%r1599, %r1563, %r1565;
	shl.b32 	%r48, %r1599, 1;
	div.s32 	%r1600, %r1598, %r48;
	add.s32 	%r1601, %r1600, 1;
	mul.lo.s32 	%r49, %r1601, %r1567;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r6993, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r6993, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1604, %r1564, %r44, %r43;
	mad.lo.s32 	%r1605, %r1604, %r1563, %r42;
	mad.lo.s32 	%r1606, %r1605, %r1562, %r41;
	shl.b32 	%r53, %r1606, 5;
	add.s32 	%r6998, %r53, %r46;
	mul.lo.s32 	%r1607, %r1599, %r1594;
	shl.b32 	%r57, %r1607, 5;
	mov.u32 	%r1608, 8;
	sub.s32 	%r1609, %r1608, %r1576;
	add.s32 	%r1610, %r1609, %r1577;
	sub.s32 	%r1611, %r1608, %r1578;
	add.s32 	%r1612, %r1611, %r1579;
	sub.s32 	%r58, %r1581, %r1580;
	mul.lo.s32 	%r1613, %r1575, %r58;
	mul.lo.s32 	%r1614, %r1613, %r1612;
	mul.lo.s32 	%r1615, %r1614, %r1610;
	mul.lo.s32 	%r59, %r1615, 3;
	setp.ge.s32 	%p29, %r6998, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1616, %r1579, 8;
	sub.s32 	%r1617, %r1616, %r1578;
	mul.lo.s32 	%r1618, %r1575, %r1617;
	add.s32 	%r1619, %r1577, 8;
	sub.s32 	%r1620, %r1619, %r1576;
	mul.lo.s32 	%r1621, %r1618, %r1620;
	mul.lo.s32 	%r1622, %r1621, %r58;
	not.b32 	%r1623, %r46;
	mad.lo.s32 	%r1624, %r1622, 3, %r1623;
	sub.s32 	%r1625, %r1624, %r53;
	mul.lo.s32 	%r1626, %r1599, %r1562;
	mul.lo.s32 	%r1627, %r1626, %r1564;
	shl.b32 	%r1628, %r1627, 5;
	div.u32 	%r60, %r1625, %r1628;
	add.s32 	%r1629, %r60, 1;
	and.b32  	%r6995, %r1629, 3;
	setp.eq.s32 	%p30, %r6995, 0;
	mov.u32 	%r6996, %r6998;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r6996, %r6998;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r6996, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1630, 0;
	st.global.u32 	[%rd45], %r1630;
	add.s32 	%r6996, %r6996, %r57;
	add.s32 	%r6995, %r6995, -1;
	setp.ne.s32 	%p31, %r6995, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r6996, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1631, 0;
	st.global.u32 	[%rd47], %r1631;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1631;
	add.s32 	%r1632, %r6996, %r57;
	add.s32 	%r1633, %r1632, %r57;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1631;
	add.s32 	%r1634, %r1633, %r57;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1631;
	add.s32 	%r6996, %r1634, %r57;
	setp.lt.s32 	%p33, %r6996, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1635, %r1568, %r47;
	div.s32 	%r1636, %r1635, %r48;
	mul.lo.s32 	%r1637, %r1636, %r1567;
	sub.s32 	%r69, %r1637, %r47;
	sub.s32 	%r1638, %r1567, %r48;
	mul.lo.s32 	%r1639, %r1638, %r1564;
	mul.lo.s32 	%r70, %r1562, 384;
	add.s32 	%r1640, %r70, %r70;
	add.s32 	%r1641, %r1640, 128;
	mul.lo.s32 	%r1643, %r1599, 768;
	mul.lo.s32 	%r1644, %r1639, %r1641;
	mad.lo.s32 	%r71, %r1643, %r69, %r1644;
	bra.uni 	$L__BB0_11;

$L__BB0_866:
	mov.f32 	%f565, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f565;
  cvt.rn.f16.f32 high, %f565;
  mov.b32 %r6955, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd573, %r6998, 4;
	add.s64 	%rd574, %rd3, %rd573;
	st.global.u32 	[%rd574], %r6955;
	add.s32 	%r6998, %r6998, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r6998, %r71;
	@%p34 bra 	$L__BB0_866;

	ld.param.u64 	%rd53, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r7034, %r1562, %r43, %r41;
	mul.lo.s32 	%r79, %r1563, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7034, %r1567;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1645, 31;
	sub.s32 	%r1646, %r1645, %r46;
	selp.b32 	%r1647, %r46, %r1646, %p36;
	shl.b32 	%r1648, %r1647, 2;
	mov.u32 	%r1649, 2;
	sub.s32 	%r81, %r1648, %r1570;
	shl.b32 	%r1650, %r1569, 2;
	mov.u32 	%r1651, 128;
	sub.s32 	%r82, %r1651, %r1650;
	sub.s32 	%r1652, %r1649, %r1570;
	add.s32 	%r83, %r1652, %r1648;
	sub.s32 	%r84, %r1577, %r1576;
	sub.s32 	%r85, %r1579, %r1578;
	add.s32 	%r86, %r1577, -1;
	add.s32 	%r87, %r1579, -1;
	add.s32 	%r88, %r1581, -1;
	mul.lo.s32 	%r1653, %r1568, %r1567;
	shl.b32 	%r89, %r1653, 6;
	add.s32 	%r90, %r1567, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1654, %r94, 31;
	add.s32 	%r1655, %r94, %r1654;
	shr.s32 	%r96, %r1655, 1;
	and.b32  	%r1656, %r1655, -2;
	sub.s32 	%r1657, %r94, %r1656;
	add.s32 	%r95, %r1657, %r89;
	rem.s32 	%r1713, %r91, %r82;
	add.s32 	%r1714, %r1713, %r82;
	rem.s32 	%r1715, %r1714, %r82;
	rem.s32 	%r1716, %r92, %r82;
	add.s32 	%r1717, %r1716, %r82;
	rem.s32 	%r1718, %r1717, %r82;
	mov.u32 	%r6999, %r7034;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1568;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r6999, %r1582;
	setp.lt.s32 	%p39, %r6999, %r1583;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r6999, %r1577;
	setp.ge.s32 	%p41, %r6999, %r1576;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1658, %r6999, %r86, %p40;
	setp.lt.s32 	%p42, %r6999, %r1576;
	selp.b32 	%r1659, %r1576, %r1658, %p42;
	sub.s32 	%r1660, %r1659, %r1576;
	add.s32 	%r98, %r90, %r6999;
	rem.s32 	%r1661, %r81, %r82;
	add.s32 	%r1662, %r1661, %r82;
	rem.s32 	%r99, %r1662, %r82;
	rem.s32 	%r1663, %r83, %r82;
	add.s32 	%r1664, %r1663, %r82;
	rem.s32 	%r100, %r1664, %r82;
	setp.lt.s32 	%p43, %r99, %r1581;
	sub.s32 	%r101, %r99, %r1580;
	setp.lt.s32 	%p44, %r99, %r1580;
	selp.b32 	%r1665, %r99, %r88, %p43;
	selp.b32 	%r1666, %r1580, %r1665, %p44;
	sub.s32 	%r102, %r1666, %r1580;
	setp.lt.s32 	%p45, %r100, %r1581;
	sub.s32 	%r103, %r100, %r1580;
	setp.lt.s32 	%p46, %r100, %r1580;
	selp.b32 	%r1667, %r100, %r88, %p45;
	selp.b32 	%r1668, %r1580, %r1667, %p46;
	sub.s32 	%r104, %r1668, %r1580;
	sub.s32 	%r1669, %r6999, %r1576;
	mul.lo.s32 	%r105, %r1669, %r85;
	mul.lo.s32 	%r106, %r1660, %r85;
	add.s32 	%r1670, %r1669, %r84;
	mul.lo.s32 	%r107, %r1670, %r85;
	add.s32 	%r1671, %r1660, %r84;
	mul.lo.s32 	%r108, %r1671, %r85;
	add.s32 	%r1672, %r1670, %r84;
	mul.lo.s32 	%r109, %r1672, %r85;
	add.s32 	%r1673, %r1671, %r84;
	mul.lo.s32 	%r110, %r1673, %r85;
	mov.u32 	%r7000, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7000, %r1584;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7000, %r1585;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7000, %r1578;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7000, %r1579;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7000, %r1578;
	selp.b32 	%r1674, %r7000, %r87, %p52;
	setp.lt.s32 	%p53, %r7000, %r1578;
	selp.b32 	%r1675, %r1578, %r1674, %p53;
	sub.s32 	%r113, %r1675, %r1578;
	mul.lo.s32 	%r114, %r7000, %r1567;
	add.s32 	%r115, %r114, %r6999;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1586;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1587;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1580;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1580;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f566, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1678, %r112, %r105;
	mad.lo.s32 	%r1679, %r1678, %r58, %r101;
	mul.wide.s32 	%rd57, %r1679, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f566, [%rd58];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1676, %r113, %r106;
	mad.lo.s32 	%r1677, %r1676, %r58, %r102;
	mul.wide.s32 	%rd55, %r1677, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f566, [%rd56];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1587;
	setp.ge.s32 	%p68, %r100, %r1586;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f567, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1682, %r112, %r105;
	mad.lo.s32 	%r1683, %r1682, %r58, %r103;
	mul.wide.s32 	%rd61, %r1683, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f567, [%rd62];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1680, %r113, %r106;
	mad.lo.s32 	%r1681, %r1680, %r58, %r104;
	mul.wide.s32 	%rd59, %r1681, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f567, [%rd60];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f566;
  cvt.rn.f16.f32 high, %f567;
  mov.b32 %r1684, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1685, %r117, %r46;
	shl.b32 	%r1686, %r1685, 2;
	add.s32 	%r1687, %r89, %r1686;
	mul.wide.s32 	%rd63, %r1687, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r1684;
	mov.f32 	%f568, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1690, %r112, %r107;
	mad.lo.s32 	%r1691, %r1690, %r58, %r101;
	mul.wide.s32 	%rd67, %r1691, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f568, [%rd68];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1688, %r113, %r108;
	mad.lo.s32 	%r1689, %r1688, %r58, %r102;
	mul.wide.s32 	%rd65, %r1689, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f568, [%rd66];

$L__BB0_28:
	mov.f32 	%f569, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1694, %r112, %r107;
	mad.lo.s32 	%r1695, %r1694, %r58, %r103;
	mul.wide.s32 	%rd71, %r1695, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f569, [%rd72];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1692, %r113, %r108;
	mad.lo.s32 	%r1693, %r1692, %r58, %r104;
	mul.wide.s32 	%rd69, %r1693, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f569, [%rd70];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f568;
  cvt.rn.f16.f32 high, %f569;
  mov.b32 %r1696, {low,high};}

	// end inline asm
	add.s32 	%r1697, %r93, %r116;
	mul.wide.s32 	%rd73, %r1697, 4;
	add.s64 	%rd74, %rd6, %rd73;
	st.global.u32 	[%rd74], %r1696;
	mov.f32 	%f570, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1700, %r112, %r109;
	mad.lo.s32 	%r1701, %r1700, %r58, %r101;
	mul.wide.s32 	%rd77, %r1701, 4;
	add.s64 	%rd78, %rd5, %rd77;
	ld.global.f32 	%f570, [%rd78];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1698, %r113, %r110;
	mad.lo.s32 	%r1699, %r1698, %r58, %r102;
	mul.wide.s32 	%rd75, %r1699, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f570, [%rd76];

$L__BB0_36:
	mov.f32 	%f571, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1704, %r112, %r109;
	mad.lo.s32 	%r1705, %r1704, %r58, %r103;
	mul.wide.s32 	%rd81, %r1705, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f571, [%rd82];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1702, %r113, %r110;
	mad.lo.s32 	%r1703, %r1702, %r58, %r104;
	mul.wide.s32 	%rd79, %r1703, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f571, [%rd80];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f570;
  cvt.rn.f16.f32 high, %f571;
  mov.b32 %r1706, {low,high};}

	// end inline asm
	rem.s32 	%r1707, %r98, %r1567;
	add.s32 	%r1708, %r1707, %r114;
	shl.b32 	%r118, %r1708, 5;
	add.s32 	%r1709, %r118, %r46;
	shl.b32 	%r1710, %r1709, 2;
	add.s32 	%r1711, %r89, %r1710;
	add.s32 	%r1712, %r1711, 2;
	mul.wide.s32 	%rd83, %r1712, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r1706;
	setp.ge.s32 	%p76, %r1715, %r1586;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1715, %r1587;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1715, %r1580;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1715, %r1581;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1718, %r1586;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1718, %r1587;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r119, %r1715, %r1580;
	setp.lt.s32 	%p86, %r1715, %r1580;
	selp.b32 	%r1719, %r1715, %r88, %p82;
	selp.b32 	%r1720, %r1580, %r1719, %p86;
	sub.s32 	%r120, %r1720, %r1580;
	setp.ge.s32 	%p87, %r1718, %r1580;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1718, %r1581;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r121, %r1718, %r1580;
	setp.lt.s32 	%p90, %r1718, %r1580;
	selp.b32 	%r1721, %r1718, %r88, %p89;
	selp.b32 	%r1722, %r1580, %r1721, %p90;
	sub.s32 	%r122, %r1722, %r1580;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f572, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1725, %r112, %r105;
	mad.lo.s32 	%r1726, %r1725, %r58, %r119;
	mul.wide.s32 	%rd87, %r1726, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f572, [%rd88];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1723, %r113, %r106;
	mad.lo.s32 	%r1724, %r1723, %r58, %r120;
	mul.wide.s32 	%rd85, %r1724, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f572, [%rd86];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f573, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1729, %r112, %r105;
	mad.lo.s32 	%r1730, %r1729, %r58, %r121;
	mul.wide.s32 	%rd91, %r1730, 4;
	add.s64 	%rd92, %rd5, %rd91;
	ld.global.f32 	%f573, [%rd92];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1727, %r113, %r106;
	mad.lo.s32 	%r1728, %r1727, %r58, %r122;
	mul.wide.s32 	%rd89, %r1728, 4;
	add.s64 	%rd90, %rd5, %rd89;
	ld.global.f32 	%f573, [%rd90];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f572;
  cvt.rn.f16.f32 high, %f573;
  mov.b32 %r1731, {low,high};}

	// end inline asm
	add.s32 	%r1732, %r117, %r96;
	shl.b32 	%r1733, %r1732, 2;
	add.s32 	%r1734, %r95, %r1733;
	mul.wide.s32 	%rd93, %r1734, 4;
	add.s64 	%rd94, %rd6, %rd93;
	st.global.u32 	[%rd94], %r1731;
	mov.f32 	%f574, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1737, %r112, %r107;
	mad.lo.s32 	%r1738, %r1737, %r58, %r119;
	mul.wide.s32 	%rd97, %r1738, 4;
	add.s64 	%rd98, %rd5, %rd97;
	ld.global.f32 	%f574, [%rd98];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1735, %r113, %r108;
	mad.lo.s32 	%r1736, %r1735, %r58, %r120;
	mul.wide.s32 	%rd95, %r1736, 4;
	add.s64 	%rd96, %rd5, %rd95;
	ld.global.f32 	%f574, [%rd96];

$L__BB0_52:
	mov.f32 	%f575, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1741, %r112, %r107;
	mad.lo.s32 	%r1742, %r1741, %r58, %r121;
	mul.wide.s32 	%rd101, %r1742, 4;
	add.s64 	%rd102, %rd5, %rd101;
	ld.global.f32 	%f575, [%rd102];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1739, %r113, %r108;
	mad.lo.s32 	%r1740, %r1739, %r58, %r122;
	mul.wide.s32 	%rd99, %r1740, 4;
	add.s64 	%rd100, %rd5, %rd99;
	ld.global.f32 	%f575, [%rd100];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f574;
  cvt.rn.f16.f32 high, %f575;
  mov.b32 %r1743, {low,high};}

	// end inline asm
	add.s32 	%r1744, %r94, %r116;
	mul.wide.s32 	%rd103, %r1744, 4;
	add.s64 	%rd104, %rd6, %rd103;
	st.global.u32 	[%rd104], %r1743;
	mov.f32 	%f576, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1747, %r112, %r109;
	mad.lo.s32 	%r1748, %r1747, %r58, %r119;
	mul.wide.s32 	%rd107, %r1748, 4;
	add.s64 	%rd108, %rd5, %rd107;
	ld.global.f32 	%f576, [%rd108];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1745, %r113, %r110;
	mad.lo.s32 	%r1746, %r1745, %r58, %r120;
	mul.wide.s32 	%rd105, %r1746, 4;
	add.s64 	%rd106, %rd5, %rd105;
	ld.global.f32 	%f576, [%rd106];

$L__BB0_60:
	mov.f32 	%f577, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1751, %r112, %r109;
	mad.lo.s32 	%r1752, %r1751, %r58, %r121;
	mul.wide.s32 	%rd111, %r1752, 4;
	add.s64 	%rd112, %rd5, %rd111;
	ld.global.f32 	%f577, [%rd112];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1749, %r113, %r110;
	mad.lo.s32 	%r1750, %r1749, %r58, %r122;
	mul.wide.s32 	%rd109, %r1750, 4;
	add.s64 	%rd110, %rd5, %rd109;
	ld.global.f32 	%f577, [%rd110];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f576;
  cvt.rn.f16.f32 high, %f577;
  mov.b32 %r1753, {low,high};}

	// end inline asm
	add.s32 	%r1754, %r118, %r96;
	shl.b32 	%r1755, %r1754, 2;
	add.s32 	%r1756, %r95, %r1755;
	add.s32 	%r1757, %r1756, 2;
	mul.wide.s32 	%rd113, %r1757, 4;
	add.s64 	%rd114, %rd6, %rd113;
	st.global.u32 	[%rd114], %r1753;
	add.s32 	%r7000, %r7000, %r1599;
	setp.lt.s32 	%p99, %r7000, %r1568;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r6999, %r6999, %r1594;
	setp.lt.s32 	%p100, %r6999, %r1567;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd115, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd115;
	ld.param.u64 	%rd116, [%rd1+120];
	cvta.to.global.u64 	%rd8, %rd116;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r125, %r80, 1;
	mov.u64 	%rd117, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7001, %r7034;

$L__BB0_68:
	setp.ge.s32 	%p102, %r125, %r1568;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7002, %r125;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1759, %r7002, 31;
	add.s32 	%r1760, %r7002, %r1759;
	shr.s32 	%r1761, %r1760, 1;
	mad.lo.s32 	%r1762, %r1761, %r1567, %r7001;
	shl.b32 	%r129, %r1762, 5;
	add.s32 	%r130, %r7002, -2;
	mul.lo.s32 	%r131, %r130, %r1567;
	add.s32 	%r1763, %r1568, %r130;
	mul.lo.s32 	%r132, %r1763, %r1567;
	add.s32 	%r1764, %r1763, %r1568;
	mul.lo.s32 	%r133, %r1764, %r1567;
	add.s32 	%r134, %r131, %r1567;
	add.s32 	%r135, %r7002, -1;
	add.s32 	%r1765, %r1568, %r135;
	mul.lo.s32 	%r136, %r1765, %r1567;
	add.s32 	%r1766, %r1765, %r1568;
	mul.lo.s32 	%r137, %r1766, %r1567;
	add.s32 	%r1767, %r1568, %r7002;
	mul.lo.s32 	%r138, %r1767, %r1567;
	add.s32 	%r1768, %r1767, %r1568;
	mul.lo.s32 	%r139, %r1768, %r1567;
	mul.lo.s32 	%r140, %r7002, %r1567;
	add.s32 	%r141, %r140, %r1567;
	add.s32 	%r142, %r7002, 1;
	add.s32 	%r1769, %r1568, %r142;
	mul.lo.s32 	%r143, %r1769, %r1567;
	add.s32 	%r1770, %r1769, %r1568;
	mul.lo.s32 	%r144, %r1770, %r1567;
	add.s32 	%r145, %r141, %r1567;
	add.s32 	%r146, %r7002, 2;
	add.s32 	%r1771, %r1568, %r146;
	mul.lo.s32 	%r147, %r1771, %r1567;
	add.s32 	%r1772, %r1771, %r1568;
	mul.lo.s32 	%r148, %r1772, %r1567;
	mov.u32 	%r7005, 0;
	mov.u64 	%rd577, %rd117;

$L__BB0_72:
	ld.global.nc.u32 	%r1773, [%rd577];
	cvt.rn.f64.s32 	%fd1, %r1773;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r150, %r1773, %r7001;
	setp.lt.s32 	%p104, %r150, %r1567;
	or.b32  	%r1774, %r130, %r150;
	setp.gt.s32 	%p105, %r1774, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r130, %r1568;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1777, %r131, %r150;
	mul.wide.s32 	%rd118, %r1777, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f93, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7004, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7004, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1778, %r7005, %r129;
	mul.wide.s32 	%rd120, %r1778, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r7004;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1781, %r132, %r150;
	mul.wide.s32 	%rd122, %r1781, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f98, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7006, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7006, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1782, %r7005, %r129;
	mul.wide.s32 	%rd124, %r1782, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r7006;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1785, %r133, %r150;
	mul.wide.s32 	%rd126, %r1785, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f102, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7008, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7008, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1786, %r7005, %r129;
	mul.wide.s32 	%rd128, %r1786, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r7008;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_87:
	or.b32  	%r1787, %r135, %r150;
	setp.gt.s32 	%p111, %r1787, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7002, %r1568;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1790, %r134, %r150;
	mul.wide.s32 	%rd130, %r1790, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f105, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7010, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7010, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1791, %r7005, %r129;
	mul.wide.s32 	%rd132, %r1791, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r7010;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1794, %r136, %r150;
	mul.wide.s32 	%rd134, %r1794, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f108, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7012, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7012, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1795, %r7005, %r129;
	mul.wide.s32 	%rd136, %r1795, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r7012;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1798, %r137, %r150;
	mul.wide.s32 	%rd138, %r1798, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f111, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7014, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7014, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1799, %r7005, %r129;
	mul.wide.s32 	%rd140, %r1799, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r7014;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_102:
	or.b32  	%r1800, %r7002, %r150;
	setp.gt.s32 	%p118, %r1800, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7002, %r1568;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1803, %r140, %r150;
	mul.wide.s32 	%rd142, %r1803, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f114, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7016, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7016, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1804, %r7005, %r129;
	mul.wide.s32 	%rd144, %r1804, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r7016;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1807, %r138, %r150;
	mul.wide.s32 	%rd146, %r1807, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7018, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7018, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1808, %r7005, %r129;
	mul.wide.s32 	%rd148, %r1808, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r7018;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1811, %r139, %r150;
	mul.wide.s32 	%rd150, %r1811, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f121, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r7020, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7020, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1812, %r7005, %r129;
	mul.wide.s32 	%rd152, %r1812, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r7020;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_117:
	or.b32  	%r1813, %r142, %r150;
	setp.gt.s32 	%p125, %r1813, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r142, %r1568;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1816, %r141, %r150;
	mul.wide.s32 	%rd154, %r1816, 4;
	add.s64 	%rd155, %rd7, %rd154;
	ld.global.f32 	%f124, [%rd155];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r7022, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r7022, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1817, %r7005, %r129;
	mul.wide.s32 	%rd156, %r1817, 4;
	add.s64 	%rd157, %rd8, %rd156;
	st.global.u32 	[%rd157], %r7022;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1820, %r143, %r150;
	mul.wide.s32 	%rd158, %r1820, 4;
	add.s64 	%rd159, %rd7, %rd158;
	ld.global.f32 	%f127, [%rd159];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r7024, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7024, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1821, %r7005, %r129;
	mul.wide.s32 	%rd160, %r1821, 4;
	add.s64 	%rd161, %rd8, %rd160;
	st.global.u32 	[%rd161], %r7024;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1824, %r144, %r150;
	mul.wide.s32 	%rd162, %r1824, 4;
	add.s64 	%rd163, %rd7, %rd162;
	ld.global.f32 	%f130, [%rd163];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r7026, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r7026, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1825, %r7005, %r129;
	mul.wide.s32 	%rd164, %r1825, 4;
	add.s64 	%rd165, %rd8, %rd164;
	st.global.u32 	[%rd165], %r7026;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_132:
	or.b32  	%r1826, %r146, %r150;
	setp.gt.s32 	%p132, %r1826, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r146, %r1568;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1829, %r145, %r150;
	mul.wide.s32 	%rd166, %r1829, 4;
	add.s64 	%rd167, %rd7, %rd166;
	ld.global.f32 	%f133, [%rd167];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7028, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7028, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1830, %r7005, %r129;
	mul.wide.s32 	%rd168, %r1830, 4;
	add.s64 	%rd169, %rd8, %rd168;
	st.global.u32 	[%rd169], %r7028;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1833, %r147, %r150;
	mul.wide.s32 	%rd170, %r1833, 4;
	add.s64 	%rd171, %rd7, %rd170;
	ld.global.f32 	%f136, [%rd171];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r7030, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7030, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1834, %r7005, %r129;
	mul.wide.s32 	%rd172, %r1834, 4;
	add.s64 	%rd173, %rd8, %rd172;
	st.global.u32 	[%rd173], %r7030;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1837, %r148, %r150;
	mul.wide.s32 	%rd174, %r1837, 4;
	add.s64 	%rd175, %rd7, %rd174;
	ld.global.f32 	%f139, [%rd175];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r7032, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7032, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1838, %r7005, %r129;
	mul.wide.s32 	%rd176, %r1838, 4;
	add.s64 	%rd177, %rd8, %rd176;
	st.global.u32 	[%rd177], %r7032;
	add.s32 	%r7005, %r7005, 1;

$L__BB0_147:
	add.s64 	%rd577, %rd577, 4;
	mov.u64 	%rd178, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd179, %rd178, 24;
	setp.ne.s64 	%p139, %rd577, %rd179;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7002, %r7002, %r48;
	setp.lt.s32 	%p140, %r7002, %r1568;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7001, %r7001, %r1594;
	setp.lt.s32 	%p141, %r7001, %r1567;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1571, 1;
	ld.param.u64 	%rd180, [%rd1+160];
	cvta.to.global.u64 	%rd11, %rd180;
	ld.param.u64 	%rd181, [%rd1+128];
	cvta.to.global.u64 	%rd12, %rd181;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r254, %r80, 1;
	shr.u32 	%r1886, %r1572, 31;
	add.s32 	%r1887, %r1572, %r1886;
	shr.u32 	%r1888, %r1887, 1;
	and.b32  	%r255, %r1888, 1;
	mov.u64 	%rd201, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r254, %r1568;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7040, %r254;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1890, %r7040, 31;
	add.s32 	%r1891, %r7040, %r1890;
	shr.s32 	%r1892, %r1891, 1;
	mad.lo.s32 	%r1893, %r1892, %r1567, %r7034;
	shl.b32 	%r259, %r1893, 5;
	add.s32 	%r260, %r7040, -2;
	mul.lo.s32 	%r261, %r260, %r1567;
	add.s32 	%r1894, %r1568, %r260;
	mul.lo.s32 	%r262, %r1894, %r1567;
	add.s32 	%r263, %r261, %r1567;
	add.s32 	%r264, %r7040, -1;
	add.s32 	%r1895, %r1568, %r264;
	mul.lo.s32 	%r265, %r1895, %r1567;
	add.s32 	%r1896, %r1568, %r7040;
	mul.lo.s32 	%r266, %r1896, %r1567;
	mul.lo.s32 	%r267, %r7040, %r1567;
	add.s32 	%r268, %r267, %r1567;
	add.s32 	%r269, %r7040, 1;
	add.s32 	%r1897, %r1568, %r269;
	mul.lo.s32 	%r270, %r1897, %r1567;
	add.s32 	%r271, %r268, %r1567;
	add.s32 	%r272, %r7040, 2;
	add.s32 	%r1898, %r1568, %r272;
	mul.lo.s32 	%r273, %r1898, %r1567;
	mov.u32 	%r7044, 0;
	mov.u64 	%rd578, 24;
	mov.u64 	%rd579, %rd201;

$L__BB0_174:
	ld.global.nc.u32 	%r1899, [%rd579];
	cvt.rn.f64.s32 	%fd2, %r1899;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r275, %r1899, %r7034;
	setp.lt.s32 	%p154, %r275, %r1567;
	or.b32  	%r1900, %r260, %r275;
	setp.gt.s32 	%p155, %r1900, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r260, %r1568;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r255, 0;
	add.s32 	%r1902, %r261, %r275;
	shl.b32 	%r1903, %r1902, 1;
	mul.wide.s32 	%rd202, %r1903, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f47, [%rd203];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r7042, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r7042, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r7042, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r280, %r7044, %r259;
	mul.wide.s32 	%rd204, %r280, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r7042;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r255, 0;
	add.s32 	%r1907, %r262, %r275;
	shl.b32 	%r1908, %r1907, 1;
	mul.wide.s32 	%rd206, %r1908, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f48, [%rd207];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r7043, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r7043, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7043, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1911, %r280, 1;
	mul.wide.s32 	%rd208, %r1911, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r7043;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r255, 0;
	add.s32 	%r1913, %r261, %r275;
	shl.b32 	%r1914, %r1913, 1;
	or.b32  	%r1915, %r1914, 1;
	mul.wide.s32 	%rd210, %r1915, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f51, [%rd211];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r7045, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r7045, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r7045, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r291, %r7044, %r259;
	mul.wide.s32 	%rd212, %r291, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r7045;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r255, 0;
	add.s32 	%r1919, %r262, %r275;
	shl.b32 	%r1920, %r1919, 1;
	or.b32  	%r1921, %r1920, 1;
	mul.wide.s32 	%rd214, %r1921, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f52, [%rd215];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r7046, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r7046, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7046, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1924, %r291, 1;
	mul.wide.s32 	%rd216, %r1924, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r7046;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_198:
	or.b32  	%r1925, %r264, %r275;
	setp.gt.s32 	%p164, %r1925, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7040, %r1568;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r255, 0;
	add.s32 	%r1927, %r263, %r275;
	shl.b32 	%r1928, %r1927, 1;
	mul.wide.s32 	%rd218, %r1928, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f54, [%rd219];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r7048, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r7048, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7048, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r302, %r7044, %r259;
	mul.wide.s32 	%rd220, %r302, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r7048;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r255, 0;
	add.s32 	%r1932, %r265, %r275;
	shl.b32 	%r1933, %r1932, 1;
	mul.wide.s32 	%rd222, %r1933, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f55, [%rd223];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7049, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r7049, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7049, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1936, %r302, 1;
	mul.wide.s32 	%rd224, %r1936, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r7049;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r255, 0;
	add.s32 	%r1938, %r263, %r275;
	shl.b32 	%r1939, %r1938, 1;
	or.b32  	%r1940, %r1939, 1;
	mul.wide.s32 	%rd226, %r1940, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f57, [%rd227];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7051, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7051, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r7051, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r313, %r7044, %r259;
	mul.wide.s32 	%rd228, %r313, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r7051;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r255, 0;
	add.s32 	%r1944, %r265, %r275;
	shl.b32 	%r1945, %r1944, 1;
	or.b32  	%r1946, %r1945, 1;
	mul.wide.s32 	%rd230, %r1946, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f58, [%rd231];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7052, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7052, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7052, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1949, %r313, 1;
	mul.wide.s32 	%rd232, %r1949, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r7052;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_222:
	or.b32  	%r1950, %r7040, %r275;
	setp.gt.s32 	%p174, %r1950, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7040, %r1568;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r255, 0;
	add.s32 	%r1952, %r267, %r275;
	shl.b32 	%r1953, %r1952, 1;
	mul.wide.s32 	%rd234, %r1953, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f60, [%rd235];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7054, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7054, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7054, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r324, %r7044, %r259;
	mul.wide.s32 	%rd236, %r324, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r7054;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r255, 0;
	add.s32 	%r1957, %r266, %r275;
	shl.b32 	%r1958, %r1957, 1;
	mul.wide.s32 	%rd238, %r1958, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f61, [%rd239];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7055, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7055, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r7055, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1961, %r324, 1;
	mul.wide.s32 	%rd240, %r1961, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r7055;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r255, 0;
	add.s32 	%r1963, %r267, %r275;
	shl.b32 	%r1964, %r1963, 1;
	or.b32  	%r1965, %r1964, 1;
	mul.wide.s32 	%rd242, %r1965, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f62, [%rd243];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7057, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7057, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7057, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r335, %r7044, %r259;
	mul.wide.s32 	%rd244, %r335, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r7057;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r255, 0;
	add.s32 	%r1969, %r266, %r275;
	shl.b32 	%r1970, %r1969, 1;
	or.b32  	%r1971, %r1970, 1;
	mul.wide.s32 	%rd246, %r1971, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f63, [%rd247];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r7058, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7058, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7058, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1974, %r335, 1;
	mul.wide.s32 	%rd248, %r1974, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r7058;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_246:
	or.b32  	%r1975, %r269, %r275;
	setp.gt.s32 	%p184, %r1975, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r269, %r1568;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r255, 0;
	add.s32 	%r1977, %r268, %r275;
	shl.b32 	%r1978, %r1977, 1;
	mul.wide.s32 	%rd250, %r1978, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f64, [%rd251];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r7060, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r7060, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r7060, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r346, %r7044, %r259;
	mul.wide.s32 	%rd252, %r346, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r7060;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r255, 0;
	add.s32 	%r1982, %r270, %r275;
	shl.b32 	%r1983, %r1982, 1;
	mul.wide.s32 	%rd254, %r1983, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f65, [%rd255];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r7061, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r7061, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7061, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1986, %r346, 1;
	mul.wide.s32 	%rd256, %r1986, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r7061;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r255, 0;
	add.s32 	%r1988, %r268, %r275;
	shl.b32 	%r1989, %r1988, 1;
	or.b32  	%r1990, %r1989, 1;
	mul.wide.s32 	%rd258, %r1990, 4;
	add.s64 	%rd259, %rd11, %rd258;
	ld.global.f32 	%f66, [%rd259];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r7063, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r7063, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7063, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r357, %r7044, %r259;
	mul.wide.s32 	%rd260, %r357, 4;
	add.s64 	%rd261, %rd12, %rd260;
	st.global.u32 	[%rd261], %r7063;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r255, 0;
	add.s32 	%r1994, %r270, %r275;
	shl.b32 	%r1995, %r1994, 1;
	or.b32  	%r1996, %r1995, 1;
	mul.wide.s32 	%rd262, %r1996, 4;
	add.s64 	%rd263, %rd11, %rd262;
	ld.global.f32 	%f67, [%rd263];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r7064, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r7064, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7064, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r1999, %r357, 1;
	mul.wide.s32 	%rd264, %r1999, 4;
	add.s64 	%rd265, %rd12, %rd264;
	st.global.u32 	[%rd265], %r7064;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_270:
	or.b32  	%r2000, %r272, %r275;
	setp.gt.s32 	%p194, %r2000, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r272, %r1568;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r255, 0;
	add.s32 	%r2002, %r271, %r275;
	shl.b32 	%r2003, %r2002, 1;
	mul.wide.s32 	%rd266, %r2003, 4;
	add.s64 	%rd267, %rd11, %rd266;
	ld.global.f32 	%f68, [%rd267];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r7066, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r7066, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7066, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r368, %r7044, %r259;
	mul.wide.s32 	%rd268, %r368, 4;
	add.s64 	%rd269, %rd12, %rd268;
	st.global.u32 	[%rd269], %r7066;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r255, 0;
	add.s32 	%r2007, %r273, %r275;
	shl.b32 	%r2008, %r2007, 1;
	mul.wide.s32 	%rd270, %r2008, 4;
	add.s64 	%rd271, %rd11, %rd270;
	ld.global.f32 	%f69, [%rd271];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r7067, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r7067, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7067, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2011, %r368, 1;
	mul.wide.s32 	%rd272, %r2011, 4;
	add.s64 	%rd273, %rd12, %rd272;
	st.global.u32 	[%rd273], %r7067;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r255, 0;
	add.s32 	%r2013, %r271, %r275;
	shl.b32 	%r2014, %r2013, 1;
	or.b32  	%r2015, %r2014, 1;
	mul.wide.s32 	%rd274, %r2015, 4;
	add.s64 	%rd275, %rd11, %rd274;
	ld.global.f32 	%f70, [%rd275];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r7069, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r7069, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7069, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r379, %r7044, %r259;
	mul.wide.s32 	%rd276, %r379, 4;
	add.s64 	%rd277, %rd12, %rd276;
	st.global.u32 	[%rd277], %r7069;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r255, 0;
	add.s32 	%r2019, %r273, %r275;
	shl.b32 	%r2020, %r2019, 1;
	or.b32  	%r2021, %r2020, 1;
	mul.wide.s32 	%rd278, %r2021, 4;
	add.s64 	%rd279, %rd11, %rd278;
	ld.global.f32 	%f71, [%rd279];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r7070, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r7070, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7070, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2024, %r379, 1;
	mul.wide.s32 	%rd280, %r2024, 4;
	add.s64 	%rd281, %rd12, %rd280;
	st.global.u32 	[%rd281], %r7070;
	add.s32 	%r7044, %r7044, 2;

$L__BB0_294:
	add.s64 	%rd579, %rd579, 4;
	add.s64 	%rd578, %rd578, -4;
	setp.ne.s64 	%p204, %rd578, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7040, %r7040, %r48;
	setp.lt.s32 	%p205, %r7040, %r1568;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7034, %r7034, %r1594;
	setp.lt.s32 	%p206, %r7034, %r1567;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r228, %r79;
	mov.u32 	%r1839, 31;
	sub.s32 	%r1840, %r1839, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1841, %r46, %r1840, %p144;
	shl.b32 	%r1842, %r1841, 2;
	mov.u32 	%r1843, 2;
	sub.s32 	%r229, %r1842, %r1570;
	shl.b32 	%r1844, %r1569, 2;
	mov.u32 	%r1845, 128;
	sub.s32 	%r230, %r1845, %r1844;
	sub.s32 	%r1846, %r1843, %r1570;
	add.s32 	%r231, %r1846, %r1842;
	add.s32 	%r232, %r1567, -1;
	add.s32 	%r233, %r229, 1;
	add.s32 	%r234, %r231, 1;
	rem.s32 	%r1871, %r233, %r230;
	add.s32 	%r1872, %r1871, %r230;
	rem.s32 	%r245, %r1872, %r230;
	rem.s32 	%r1873, %r234, %r230;
	add.s32 	%r1874, %r1873, %r230;
	rem.s32 	%r246, %r1874, %r230;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r228;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r236, %r7034, 1;
	rem.s32 	%r1847, %r229, %r230;
	add.s32 	%r1848, %r1847, %r230;
	rem.s32 	%r237, %r1848, %r230;
	rem.s32 	%r1849, %r231, %r230;
	add.s32 	%r1850, %r1849, %r230;
	rem.s32 	%r238, %r1850, %r230;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1853, %r236, %r230;
	add.s32 	%r1854, %r1853, %r237;
	mul.wide.s32 	%rd182, %r1854, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f142, [%rd183];
	add.s32 	%r1855, %r1853, %r238;
	mul.wide.s32 	%rd184, %r1855, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f143, [%rd185];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r7035, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7035, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1856, %r7034, 5;
	add.s32 	%r1857, %r1856, %r46;
	shl.b32 	%r1858, %r1857, 2;
	mul.wide.s32 	%rd186, %r1858, 4;
	add.s64 	%rd13, %rd12, %rd186;
	st.global.u32 	[%rd13], %r7035;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1861, %r236, 1;
	mul.lo.s32 	%r1862, %r1861, %r230;
	add.s32 	%r1863, %r1862, %r237;
	mul.wide.s32 	%rd187, %r1863, 4;
	add.s64 	%rd188, %rd11, %rd187;
	ld.global.f32 	%f146, [%rd188];
	add.s32 	%r1864, %r1862, %r238;
	mul.wide.s32 	%rd189, %r1864, 4;
	add.s64 	%rd190, %rd11, %rd189;
	ld.global.f32 	%f147, [%rd190];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7036, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7036, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1865, %r232, %r7034;
	rem.s32 	%r1866, %r1865, %r1567;
	shl.b32 	%r1867, %r1866, 5;
	add.s32 	%r1868, %r1867, %r46;
	shl.b32 	%r1869, %r1868, 2;
	or.b32  	%r1870, %r1869, 2;
	mul.wide.s32 	%rd191, %r1870, 4;
	add.s64 	%rd14, %rd12, %rd191;
	st.global.u32 	[%rd14], %r7036;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1877, %r236, %r230;
	add.s32 	%r1878, %r1877, %r245;
	mul.wide.s32 	%rd192, %r1878, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f150, [%rd193];
	add.s32 	%r1879, %r1877, %r246;
	mul.wide.s32 	%rd194, %r1879, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f151, [%rd195];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7037, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7037, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd13+4], %r7037;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1882, %r236, 1;
	mul.lo.s32 	%r1883, %r1882, %r230;
	add.s32 	%r1884, %r1883, %r245;
	mul.wide.s32 	%rd196, %r1884, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f154, [%rd197];
	add.s32 	%r1885, %r1883, %r246;
	mul.wide.s32 	%rd198, %r1885, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f155, [%rd199];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7038, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7038, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd14+4], %r7038;

$L__BB0_167:
	add.s32 	%r7034, %r7034, %r1594;
	setp.lt.s32 	%p150, %r7034, %r1567;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2026, %r1562, -1;
	mad.lo.s32 	%r2027, %r1563, 576, 128;
	mul.lo.s32 	%r2028, %r2027, %r2026;
	add.s32 	%r2029, %r70, -64;
	add.s32 	%r2030, %r2029, %r70;
	add.s32 	%r2031, %r1563, -1;
	mad.lo.s32 	%r2032, %r2030, %r2031, %r2028;
	mul.lo.s32 	%r2033, %r2026, %r1563;
	mul.lo.s32 	%r2034, %r2033, 320;
	mad.lo.s32 	%r2035, %r2029, %r2031, %r2034;
	add.s32 	%r388, %r2035, %r2032;
	setp.lt.s32 	%p207, %r388, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7253, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7074, 0;
	mov.u32 	%r7072, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7072], %r7253;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2038, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7072+4], %r2038;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2039, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7072+8], %r2039;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2040, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7072+12], %r2040;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r7253, {low,high};}

	// end inline asm
	add.s32 	%r7072, %r7072, 16;
	add.s32 	%r7074, %r7074, 4;
	setp.lt.s32 	%p208, %r7074, %r388;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7254, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r2043, {low,high};}

	// end inline asm
	ld.param.u64 	%rd282, [%rd1+176];
	cvta.to.global.u64 	%rd19, %rd282;
	mov.u32 	%r2044, 31;
	sub.s32 	%r2045, %r2044, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2046, %r46, %r2045, %p209;
	shl.b32 	%r2047, %r2046, 2;
	sub.s32 	%r399, %r2047, %r1570;
	shl.b32 	%r2048, %r1569, 2;
	mov.u32 	%r2049, 128;
	sub.s32 	%r400, %r2049, %r2048;
	rem.s32 	%r2050, %r399, %r400;
	add.s32 	%r2051, %r2050, %r400;
	rem.s32 	%r401, %r2051, %r400;
	add.s32 	%r2052, %r399, 2;
	rem.s32 	%r2053, %r2052, %r400;
	add.s32 	%r2054, %r2053, %r400;
	rem.s32 	%r402, %r2054, %r400;
	mul.lo.s32 	%r2055, %r401, 6;
	mul.lo.s32 	%r2056, %r402, 6;
	mul.wide.s32 	%rd283, %r2055, 4;
	add.s64 	%rd20, %rd19, %rd283;
	mul.wide.s32 	%rd284, %r2056, 4;
	add.s64 	%rd21, %rd19, %rd284;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7076, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd20];
	ld.global.f32 	%f299, [%rd20+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd21+8];
	ld.global.f32 	%f301, [%rd21];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r7076, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd20+4];
	ld.global.f32 	%f307, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r7077, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd20];
	ld.global.f32 	%f305, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7077, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7078, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd20+20];
	ld.global.f32 	%f311, [%rd20+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd21+20];
	ld.global.f32 	%f313, [%rd21+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7078, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd20+16];
	ld.global.f32 	%f319, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r7079, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd20+12];
	ld.global.f32 	%f317, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7079, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2065, %r399, 1;
	rem.s32 	%r2066, %r2065, %r400;
	add.s32 	%r2067, %r2066, %r400;
	rem.s32 	%r415, %r2067, %r400;
	add.s32 	%r2068, %r399, 3;
	rem.s32 	%r2069, %r2068, %r400;
	add.s32 	%r2070, %r2069, %r400;
	rem.s32 	%r416, %r2070, %r400;
	mul.lo.s32 	%r2071, %r415, 6;
	mul.lo.s32 	%r2072, %r416, 6;
	mul.wide.s32 	%rd285, %r2071, 4;
	add.s64 	%rd22, %rd19, %rd285;
	mul.wide.s32 	%rd286, %r2072, 4;
	add.s64 	%rd23, %rd19, %rd286;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7080, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd22];
	ld.global.f32 	%f323, [%rd22+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd23+8];
	ld.global.f32 	%f325, [%rd23];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7080, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd22+4];
	ld.global.f32 	%f331, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r7081, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd22];
	ld.global.f32 	%f329, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7081, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7082, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd22+20];
	ld.global.f32 	%f335, [%rd22+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd23+20];
	ld.global.f32 	%f337, [%rd23+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7082, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd22+16];
	ld.global.f32 	%f343, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r7083, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd22+12];
	ld.global.f32 	%f341, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7083, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2081, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd287, %r2081;
	// begin inline asm
	mov.u32 %r2082, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd288, %r2082;
	bfi.b64 	%rd24, %rd288, %rd287, 32, 32;
	setp.ne.s64 	%p218, %rd24, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2083, %nctaid.y;
	mov.u32 	%r2084, %nctaid.x;
	mul.lo.s32 	%r2085, %r2084, %r2083;
	mov.u32 	%r2086, %nctaid.z;
	mul.lo.s32 	%r429, %r2085, %r2086;
	neg.s32 	%r2087, %r42;
	add.s32 	%r2088, %r46, %r41;
	setp.ne.s32 	%p219, %r2088, %r2087;
	mov.u32 	%r2089, %ctaid.x;
	add.s32 	%r430, %r2089, %r43;
	neg.s32 	%r431, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r430, %r431;
	mov.u32 	%r2092, -2147483647;
	sub.s32 	%r2093, %r2092, %r429;
	selp.b32 	%r2091, %r2093, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2090,[%rd25],%r2091;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2094, [%rd25];
	xor.b32  	%r2095, %r2094, %r2090;
	setp.gt.s32 	%p221, %r2095, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2096,[%rd25];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_865;

	shr.s32 	%r2110, %r1572, 31;
	shr.u32 	%r2111, %r2110, 30;
	add.s32 	%r2112, %r1572, %r2111;
	shr.s32 	%r433, %r2112, 2;
	add.s32 	%r2113, %r46, 24;
	mul.hi.s32 	%r2114, %r2113, 1374389535;
	shr.u32 	%r2115, %r2114, 31;
	shr.s32 	%r2116, %r2114, 3;
	add.s32 	%r2117, %r2116, %r2115;
	mul.lo.s32 	%r2118, %r2117, 25;
	sub.s32 	%r2119, %r2113, %r2118;
	add.s32 	%r2120, %r46, 26;
	mul.hi.s32 	%r2121, %r2120, 1374389535;
	shr.u32 	%r2122, %r2121, 31;
	shr.s32 	%r2123, %r2121, 3;
	add.s32 	%r2124, %r2123, %r2122;
	mul.lo.s32 	%r2125, %r2124, 25;
	sub.s32 	%r2126, %r2120, %r2125;
	shr.u32 	%r2127, %r1572, 31;
	add.s32 	%r2128, %r1572, %r2127;
	and.b32  	%r2129, %r2128, -2;
	sub.s32 	%r434, %r1572, %r2129;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r435, %r2119, %r46, %p223;
	setp.lt.s32 	%p224, %r401, %r1581;
	setp.ge.s32 	%p225, %r401, %r1580;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r415, %r1581;
	setp.ge.s32 	%p227, %r415, %r1580;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r402, %r1581;
	setp.ge.s32 	%p229, %r402, %r1580;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r416, %r1581;
	setp.ge.s32 	%p231, %r416, %r1580;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r436, %r2126, %r46, %p223;
	mov.u32 	%r2109, 0;
	// begin inline asm
	{mov.u32 %r2130, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2457, %r2130, 8;
	add.s32 	%r2458, %r2457, -8192;
	or.b32  	%r2134, %r2458, 31;
	mul.wide.s32 	%rd299, %r46, 16;
	mul.wide.s32 	%rd301, %r46, 8;
	mov.u32 	%r7084, %r2109;
	mov.u32 	%r7085, %r2109;
	mov.u32 	%r7086, %r2109;
	mov.u32 	%r7087, %r2109;
	mov.u32 	%r7088, %r2109;
	mov.u32 	%r7089, %r2109;
	mov.u32 	%r7090, %r2109;
	mov.u32 	%r7091, %r2109;
	mov.u32 	%r7092, %r2109;
	mov.u32 	%r7093, %r2109;
	mov.u32 	%r7094, %r2109;
	mov.u32 	%r7095, %r2109;
	mov.u32 	%r7457, %r2043;
	mov.u32 	%r7458, %r2043;
	mov.u32 	%r7455, %r2043;
	mov.u32 	%r7456, %r2043;
	mov.u32 	%r7341, %r2043;
	mov.u32 	%r7342, %r2043;
	mov.u32 	%r7355, %r2043;
	mov.u32 	%r7343, %r2043;
	mov.u32 	%r7357, %r2043;
	mov.u32 	%r7344, %r2043;
	mov.u32 	%r7345, %r2043;
	mov.u32 	%r7346, %r2043;
	mov.u32 	%r7347, %r2043;
	mov.u32 	%r7348, %r2043;
	mov.u32 	%r7349, %r2043;
	mov.u32 	%r7350, %r2043;
	mov.u32 	%r7359, %r2043;
	mov.u32 	%r7360, %r2043;
	mov.u32 	%r7361, %r2043;
	mov.u32 	%r7362, %r2043;
	mov.u32 	%r7363, %r2043;
	mov.u32 	%r7364, %r2043;
	mov.u32 	%r7351, %r2043;
	mov.u32 	%r7352, %r2043;
	mov.u32 	%r7365, %r2043;
	mov.u32 	%r7366, %r2043;
	mov.u32 	%r7353, %r2043;
	mov.u32 	%r7354, %r2043;
	mov.u32 	%r7124, %r2043;
	mov.u32 	%r7125, %r2043;
	mov.u32 	%r7126, %r2043;
	mov.u32 	%r7127, %r2043;
	mov.u32 	%r7128, %r2043;
	mov.u32 	%r7129, %r2043;
	mov.u32 	%r7130, %r2043;
	mov.u32 	%r7131, %r2043;
	mov.u32 	%r7132, %r2043;
	mov.u32 	%r7133, %r2043;
	mov.u32 	%r7134, %r2043;
	mov.u32 	%r7135, %r2043;
	mov.u32 	%r7136, %r2043;
	mov.u32 	%r7137, %r2043;
	mov.u32 	%r7138, %r2043;
	mov.u32 	%r7139, %r2043;
	mov.u32 	%r7140, %r2043;
	mov.u32 	%r7141, %r2043;
	mov.u32 	%r7142, %r2043;
	mov.u32 	%r7143, %r2043;
	mov.u32 	%r7144, %r2043;
	mov.u32 	%r7145, %r2043;
	mov.u32 	%r7381, %r2043;
	mov.u32 	%r7382, %r2043;
	mov.u32 	%r7150, %r2043;
	mov.u32 	%r7151, %r2043;
	mov.u32 	%r7152, %r2043;
	mov.u32 	%r7153, %r2043;
	mov.u32 	%r7383, %r2043;
	mov.u32 	%r7384, %r2043;
	mov.u32 	%r7156, %r2043;
	mov.u32 	%r7385, %r2043;
	mov.u32 	%r7158, %r2043;
	mov.u32 	%r7159, %r2043;
	mov.u32 	%r7386, %r2043;
	mov.u32 	%r7161, %r2043;
	mov.u32 	%r7162, %r2043;
	mov.u32 	%r7163, %r2043;
	mov.u32 	%r7471, %r2043;
	mov.u32 	%r7472, %r2043;
	mov.u32 	%r7166, %r2043;
	mov.u32 	%r7167, %r2043;
	mov.u32 	%r7170, %r2043;
	mov.u32 	%r7171, %r2043;
	mov.u32 	%r7172, %r2043;
	mov.u32 	%r7173, %r2043;
	mov.u32 	%r7174, %r2043;
	mov.u32 	%r7390, %r2043;
	mov.u32 	%r7176, %r2043;
	mov.u32 	%r7177, %r2043;
	mov.u32 	%r7178, %r2043;
	mov.u32 	%r7179, %r2043;
	mov.u32 	%r7180, %r2043;
	mov.u32 	%r7181, %r2043;
	mov.u32 	%r7182, %r2043;
	mov.u32 	%r7392, %r2043;
	mov.u32 	%r7184, %r2043;
	mov.u32 	%r7185, %r2043;
	mov.u32 	%r7186, %r2043;
	mov.u32 	%r7393, %r2043;
	mov.u32 	%r7188, %r2043;
	mov.u32 	%r7189, %r2043;
	mov.u32 	%r7190, %r2043;
	mov.u32 	%r7191, %r2043;
	mov.u32 	%r7192, %r2043;
	mov.u32 	%r7193, %r2043;
	mov.u32 	%r7194, %r2043;
	mov.u32 	%r7394, %r2043;
	mov.u32 	%r7196, %r2043;
	mov.u32 	%r7473, %r2043;
	mov.u32 	%r7198, %r2043;
	mov.u32 	%r7199, %r2043;
	mov.u32 	%r7200, %r2043;
	mov.u32 	%r7201, %r2043;
	mov.u32 	%r7474, %r2043;
	mov.u32 	%r7203, %r2043;
	mov.u32 	%r7204, %r2043;
	mov.u32 	%r7205, %r2043;
	mov.u32 	%r7206, %r2043;
	mov.u32 	%r7207, %r2043;
	mov.u32 	%r7208, %r2043;
	mov.u32 	%r7209, %r2043;
	mov.u32 	%r7210, %r2043;
	mov.u32 	%r7211, %r2043;
	mov.u32 	%r7212, %r2043;
	mov.u32 	%r7213, %r2043;
	mov.u32 	%r7214, %r2043;
	mov.u32 	%r7215, %r2043;
	mov.u32 	%r7216, %r2043;
	mov.u32 	%r7217, %r2043;
	mov.u32 	%r7218, %r2043;
	mov.u32 	%r7219, %r2043;
	mov.u32 	%r7220, %r2043;
	mov.u32 	%r7221, %r2043;
	mov.u32 	%r7222, %r2043;
	mov.u32 	%r7223, %r2043;
	mov.u32 	%r7224, %r2043;
	mov.u32 	%r7225, %r2043;
	mov.u32 	%r7226, %r2043;
	mov.u32 	%r7227, %r2043;
	mov.u32 	%r7228, %r2043;
	mov.u32 	%r7229, %r2043;
	mov.u32 	%r7230, %r2043;
	mov.u32 	%r7231, %r2043;
	mov.u32 	%r7232, %r2043;
	mov.u32 	%r7233, %r2043;
	mov.u32 	%r7234, %r2043;
	mov.u32 	%r7235, %r2043;
	mov.u32 	%r7236, %r2043;
	mov.u32 	%r7237, %r2043;
	mov.u32 	%r7238, %r2043;
	mov.u32 	%r7239, %r2043;
	mov.u32 	%r7240, %r2043;
	mov.u32 	%r7241, %r2043;
	mov.u32 	%r7242, %r2043;
	mov.u32 	%r7243, %r2043;
	mov.u32 	%r7244, %r2043;
	mov.u32 	%r7245, %r2043;
	mov.u32 	%r7246, %r2043;
	mov.u32 	%r7247, %r2043;
	mov.u32 	%r7248, %r2043;
	mov.u32 	%r7249, %r2043;
	mov.u32 	%r7250, %r2043;
	mov.u32 	%r7251, %r2043;
	mov.u32 	%r7252, %r2109;

$L__BB0_332:
	mov.u32 	%r548, %r7394;
	mov.u32 	%r544, %r7191;
	mov.u32 	%r540, %r7393;
	mov.u32 	%r538, %r7185;
	mov.u32 	%r536, %r7392;
	mov.u32 	%r528, %r7390;
	mov.u32 	%r7191, %r7386;
	mov.u32 	%r510, %r7385;
	mov.u32 	%r7185, %r7384;
	mov.u32 	%r507, %r7383;
	mov.u32 	%r502, %r7382;
	mov.u32 	%r501, %r7381;
	sub.s32 	%r6964, %r1567, %r48;
	mov.u32 	%r2145, 1;
	not.b32 	%r2419, %r43;
	mov.u32 	%r2411, -1;
	add.s32 	%r2420, %r1564, %r2419;
	mul.lo.s32 	%r2421, %r2420, %r1566;
	add.s32 	%r2422, %r7252, %r2421;
	not.b32 	%r2424, %r44;
	add.s32 	%r2425, %r1565, %r2424;
	mul.lo.s32 	%r2426, %r2425, %r1566;
	add.s32 	%r2427, %r7252, %r2426;
	add.s32 	%r2428, %r2421, %r2426;
	add.s32 	%r2429, %r2428, %r1567;
	not.b32 	%r2430, %r41;
	add.s32 	%r2431, %r1562, %r2430;
	mad.lo.s32 	%r2432, %r2420, %r1562, %r2431;
	not.b32 	%r2434, %r42;
	add.s32 	%r2435, %r1563, %r2434;
	mad.lo.s32 	%r2436, %r2425, %r1563, %r2435;
	add.s32 	%r2437, %r2432, %r2436;
	shl.b32 	%r2438, %r2437, 1;
	add.s32 	%r2439, %r2429, %r2438;
	add.s32 	%r2440, %r7252, %r2439;
	add.s32 	%r2441, %r7252, %r2428;
	div.s32 	%r2442, %r2440, %r1567;
	neg.s32 	%r2443, %r1567;
	sub.s32 	%r2446, %r48, %r1567;
	sub.s32 	%r2447, %r2432, %r2436;
	shl.b32 	%r2448, %r2447, 1;
	add.s32 	%r2449, %r2448, %r1568;
	mad.lo.s32 	%r2450, %r2442, %r48, %r2449;
	mad.lo.s32 	%r2451, %r2442, %r2446, %r2441;
	div.s32 	%r2452, %r2450, %r1568;
	mul.lo.s32 	%r2453, %r2452, %r1568;
	sub.s32 	%r2456, %r1595, %r1568;
	mov.u32 	%r2229, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2131,%r7254,%r2109,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2137, %r7077, %r2131, %p28;
	// begin inline asm
	{mul.f16x2 %r7338,%r2137,%r7251;
}
	// end inline asm
	selp.b32 	%r2140, %r7081, %r2131, %p28;
	// begin inline asm
	{mul.f16x2 %r7336,%r2140,%r7250;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2143,%r7254,%r2145,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2149, %r7077, %r2143, %p28;
	// begin inline asm
	{mul.f16x2 %r7337,%r2149,%r7249;
}
	// end inline asm
	selp.b32 	%r2152, %r7081, %r2143, %p28;
	// begin inline asm
	{mul.f16x2 %r7335,%r2152,%r7248;
}
	// end inline asm
	mov.u32 	%r2157, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2155,%r7254,%r2157,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2161, %r7077, %r2155, %p28;
	// begin inline asm
	{mul.f16x2 %r7334,%r2161,%r7247;
}
	// end inline asm
	selp.b32 	%r2164, %r7081, %r2155, %p28;
	// begin inline asm
	{mul.f16x2 %r7333,%r2164,%r7246;
}
	// end inline asm
	mov.u32 	%r2169, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2167,%r7254,%r2169,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2173, %r7077, %r2167, %p28;
	// begin inline asm
	{mul.f16x2 %r7332,%r2173,%r7366;
}
	// end inline asm
	selp.b32 	%r2176, %r7081, %r2167, %p28;
	// begin inline asm
	{mul.f16x2 %r7330,%r2176,%r7365;
}
	// end inline asm
	mov.u32 	%r2181, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2179,%r7254,%r2181,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2185, %r7077, %r2179, %p28;
	// begin inline asm
	{mul.f16x2 %r7331,%r2185,%r7245;
}
	// end inline asm
	selp.b32 	%r2188, %r7081, %r2179, %p28;
	// begin inline asm
	{mul.f16x2 %r7329,%r2188,%r7244;
}
	// end inline asm
	mov.u32 	%r2193, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2191,%r7254,%r2193,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2197, %r7077, %r2191, %p28;
	// begin inline asm
	{mul.f16x2 %r7328,%r2197,%r7243;
}
	// end inline asm
	selp.b32 	%r2200, %r7081, %r2191, %p28;
	// begin inline asm
	{mul.f16x2 %r7325,%r2200,%r7242;
}
	// end inline asm
	mov.u32 	%r2205, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2203,%r7254,%r2205,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2209, %r7077, %r2203, %p28;
	// begin inline asm
	{mul.f16x2 %r7327,%r2209,%r7241;
}
	// end inline asm
	selp.b32 	%r2212, %r7081, %r2203, %p28;
	// begin inline asm
	{mul.f16x2 %r7324,%r2212,%r7240;
}
	// end inline asm
	mov.u32 	%r2217, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2215,%r7254,%r2217,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2221, %r7077, %r2215, %p28;
	// begin inline asm
	{mul.f16x2 %r7326,%r2221,%r7239;
}
	// end inline asm
	selp.b32 	%r2224, %r7081, %r2215, %p28;
	// begin inline asm
	{mul.f16x2 %r7323,%r2224,%r7238;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2227,%r7254,%r2229,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2233, %r7077, %r2227, %p28;
	// begin inline asm
	{mul.f16x2 %r7322,%r2233,%r7237;
}
	// end inline asm
	selp.b32 	%r2236, %r7081, %r2227, %p28;
	// begin inline asm
	{mul.f16x2 %r7319,%r2236,%r7236;
}
	// end inline asm
	mov.u32 	%r2241, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2239,%r7254,%r2241,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2245, %r7077, %r2239, %p28;
	// begin inline asm
	{mul.f16x2 %r7321,%r2245,%r7235;
}
	// end inline asm
	selp.b32 	%r2248, %r7081, %r2239, %p28;
	// begin inline asm
	{mul.f16x2 %r7318,%r2248,%r7234;
}
	// end inline asm
	mov.u32 	%r2253, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2251,%r7254,%r2253,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2257, %r7077, %r2251, %p28;
	// begin inline asm
	{mul.f16x2 %r7320,%r2257,%r7233;
}
	// end inline asm
	selp.b32 	%r2260, %r7081, %r2251, %p28;
	// begin inline asm
	{mul.f16x2 %r7317,%r2260,%r7232;
}
	// end inline asm
	mov.u32 	%r2265, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2263,%r7254,%r2265,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2269, %r7077, %r2263, %p28;
	// begin inline asm
	{mul.f16x2 %r7316,%r2269,%r7352;
}
	// end inline asm
	selp.b32 	%r2272, %r7081, %r2263, %p28;
	// begin inline asm
	{mul.f16x2 %r7315,%r2272,%r7351;
}
	// end inline asm
	mov.u32 	%r2277, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2275,%r7254,%r2277,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2281, %r7077, %r2275, %p28;
	// begin inline asm
	{mul.f16x2 %r7314,%r2281,%r7364;
}
	// end inline asm
	selp.b32 	%r2284, %r7081, %r2275, %p28;
	// begin inline asm
	{mul.f16x2 %r7312,%r2284,%r7362;
}
	// end inline asm
	mov.u32 	%r2289, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2287,%r7254,%r2289,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2293, %r7077, %r2287, %p28;
	// begin inline asm
	{mul.f16x2 %r7313,%r2293,%r7363;
}
	// end inline asm
	selp.b32 	%r2296, %r7081, %r2287, %p28;
	// begin inline asm
	{mul.f16x2 %r7311,%r2296,%r7361;
}
	// end inline asm
	mov.u32 	%r2301, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2299,%r7254,%r2301,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2305, %r7077, %r2299, %p28;
	// begin inline asm
	{mul.f16x2 %r7310,%r2305,%r7360;
}
	// end inline asm
	selp.b32 	%r2308, %r7081, %r2299, %p28;
	// begin inline asm
	{mul.f16x2 %r7307,%r2308,%r7359;
}
	// end inline asm
	mov.u32 	%r2313, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2311,%r7254,%r2313,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2317, %r7077, %r2311, %p28;
	// begin inline asm
	{mul.f16x2 %r7309,%r2317,%r7231;
}
	// end inline asm
	selp.b32 	%r2320, %r7081, %r2311, %p28;
	// begin inline asm
	{mul.f16x2 %r7306,%r2320,%r7230;
}
	// end inline asm
	mov.u32 	%r2325, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2323,%r7254,%r2325,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2329, %r7077, %r2323, %p28;
	// begin inline asm
	{mul.f16x2 %r7308,%r2329,%r7229;
}
	// end inline asm
	selp.b32 	%r2332, %r7081, %r2323, %p28;
	// begin inline asm
	{mul.f16x2 %r7305,%r2332,%r7228;
}
	// end inline asm
	mov.u32 	%r2337, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2335,%r7254,%r2337,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2341, %r7077, %r2335, %p28;
	// begin inline asm
	{mul.f16x2 %r7304,%r2341,%r7350;
}
	// end inline asm
	selp.b32 	%r2344, %r7081, %r2335, %p28;
	// begin inline asm
	{mul.f16x2 %r7301,%r2344,%r7348;
}
	// end inline asm
	mov.u32 	%r2349, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2347,%r7254,%r2349,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2353, %r7077, %r2347, %p28;
	// begin inline asm
	{mul.f16x2 %r7303,%r2353,%r7349;
}
	// end inline asm
	selp.b32 	%r2356, %r7081, %r2347, %p28;
	// begin inline asm
	{mul.f16x2 %r7300,%r2356,%r7347;
}
	// end inline asm
	mov.u32 	%r2361, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2359,%r7254,%r2361,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2365, %r7077, %r2359, %p28;
	// begin inline asm
	{mul.f16x2 %r7302,%r2365,%r7227;
}
	// end inline asm
	selp.b32 	%r2368, %r7081, %r2359, %p28;
	// begin inline asm
	{mul.f16x2 %r7299,%r2368,%r7226;
}
	// end inline asm
	mov.u32 	%r2373, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2371,%r7254,%r2373,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2377, %r7077, %r2371, %p28;
	// begin inline asm
	{mul.f16x2 %r7298,%r2377,%r7346;
}
	// end inline asm
	selp.b32 	%r2380, %r7081, %r2371, %p28;
	// begin inline asm
	{mul.f16x2 %r7297,%r2380,%r7345;
}
	// end inline asm
	mov.u32 	%r2385, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2383,%r7254,%r2385,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2389, %r7077, %r2383, %p28;
	// begin inline asm
	{mul.f16x2 %r7296,%r2389,%r7344;
}
	// end inline asm
	selp.b32 	%r2392, %r7081, %r2383, %p28;
	// begin inline asm
	{mul.f16x2 %r7294,%r2392,%r7343;
}
	// end inline asm
	mov.u32 	%r2397, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2395,%r7254,%r2397,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2401, %r7077, %r2395, %p28;
	// begin inline asm
	{mul.f16x2 %r7295,%r2401,%r7357;
}
	// end inline asm
	selp.b32 	%r2404, %r7081, %r2395, %p28;
	// begin inline asm
	{mul.f16x2 %r7293,%r2404,%r7355;
}
	// end inline asm
	mov.u32 	%r2409, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2407,%r7254,%r2409,%r2134,%r2411;
}
	// end inline asm
	selp.b32 	%r2413, %r7077, %r2407, %p28;
	// begin inline asm
	{mul.f16x2 %r7292,%r2413,%r7342;
}
	// end inline asm
	selp.b32 	%r2416, %r7081, %r2407, %p28;
	// begin inline asm
	{mul.f16x2 %r7291,%r2416,%r7341;
}
	// end inline asm
	rem.s32 	%r656, %r2422, %r69;
	rem.s32 	%r657, %r2427, %r6964;
	mad.lo.s32 	%r658, %r2442, %r2443, %r2440;
	sub.s32 	%r659, %r2450, %r2453;
	mad.lo.s32 	%r660, %r2452, %r2456, %r2451;
	ld.param.u64 	%rd292, [%rd1+168];
	cvta.to.global.u64 	%rd293, %rd292;
	shl.b32 	%r2506, %r660, 1;
	mul.wide.s32 	%rd294, %r2506, 4;
	add.s64 	%rd26, %rd293, %rd294;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2709, %r1590, 1;
	setp.lt.s32 	%p239, %r660, %r2709;
	setp.eq.s32 	%p240, %r433, %r46;
	setp.gt.s32 	%p241, %r660, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7257, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7258, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2509, %r1590, 1;
	setp.lt.s32 	%p234, %r660, %r2509;
	setp.gt.s32 	%p235, %r660, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7255, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7256, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7257, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7258, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2717, 0;
	mov.u32 	%r2728, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2715,%r7253,%r2717,%r2134,%r2728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2720,%r7257,%r2715;
}
	// end inline asm
	mov.u32 	%r2726, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2724,%r7253,%r2726,%r2134,%r2728;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2729,%r7258,%r2724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7260,%r2720,%r2729;
}
	// end inline asm
	setp.eq.s32 	%p244, %r434, 0;
	mov.u32 	%r7259, %r7260;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7259, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r7259;
}
	// end inline asm
	setp.eq.s32 	%p245, %r434, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7260, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r7260;
}
	// end inline asm
	mov.u32 	%r2750, 2;
	mov.u32 	%r2761, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2748,%r7253,%r2750,%r2134,%r2761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2753,%r7257,%r2748;
}
	// end inline asm
	mov.u32 	%r2759, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2757,%r7253,%r2759,%r2134,%r2761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2762,%r7258,%r2757;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7262,%r2753,%r2762;
}
	// end inline asm
	mov.u32 	%r7261, %r7262;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7337,%r7337,%r7261;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7262, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7335,%r7335,%r7262;
}
	// end inline asm
	mov.u32 	%r2783, 4;
	mov.u32 	%r2794, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2781,%r7253,%r2783,%r2134,%r2794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2786,%r7257,%r2781;
}
	// end inline asm
	mov.u32 	%r2792, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2790,%r7253,%r2792,%r2134,%r2794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2795,%r7258,%r2790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7264,%r2786,%r2795;
}
	// end inline asm
	mov.u32 	%r7263, %r7264;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7334,%r7334,%r7263;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7333,%r7333,%r7264;
}
	// end inline asm
	mov.u32 	%r2816, 6;
	mov.u32 	%r2827, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2814,%r7253,%r2816,%r2134,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2819,%r7257,%r2814;
}
	// end inline asm
	mov.u32 	%r2825, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2823,%r7253,%r2825,%r2134,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r7258,%r2823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7266,%r2819,%r2828;
}
	// end inline asm
	mov.u32 	%r7265, %r7266;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7332,%r7332,%r7265;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7330,%r7330,%r7266;
}
	// end inline asm
	mov.u32 	%r2849, 8;
	mov.u32 	%r2860, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2847,%r7253,%r2849,%r2134,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2852,%r7257,%r2847;
}
	// end inline asm
	mov.u32 	%r2858, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2856,%r7253,%r2858,%r2134,%r2860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2861,%r7258,%r2856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7268,%r2852,%r2861;
}
	// end inline asm
	mov.u32 	%r7267, %r7268;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7331,%r7331,%r7267;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7329,%r7329,%r7268;
}
	// end inline asm
	mov.u32 	%r2882, 10;
	mov.u32 	%r2893, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2880,%r7253,%r2882,%r2134,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2885,%r7257,%r2880;
}
	// end inline asm
	mov.u32 	%r2891, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2889,%r7253,%r2891,%r2134,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2894,%r7258,%r2889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7270,%r2885,%r2894;
}
	// end inline asm
	mov.u32 	%r7269, %r7270;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7328,%r7328,%r7269;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7325,%r7325,%r7270;
}
	// end inline asm
	mov.u32 	%r2915, 12;
	mov.u32 	%r2926, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2913,%r7253,%r2915,%r2134,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2918,%r7257,%r2913;
}
	// end inline asm
	mov.u32 	%r2924, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7253,%r2924,%r2134,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7258,%r2922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7272,%r2918,%r2927;
}
	// end inline asm
	mov.u32 	%r7271, %r7272;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7327,%r7327,%r7271;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7324,%r7324,%r7272;
}
	// end inline asm
	mov.u32 	%r2948, 14;
	mov.u32 	%r2959, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2946,%r7253,%r2948,%r2134,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r7257,%r2946;
}
	// end inline asm
	mov.u32 	%r2957, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7253,%r2957,%r2134,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7258,%r2955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7274,%r2951,%r2960;
}
	// end inline asm
	mov.u32 	%r7273, %r7274;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7322,%r7322,%r7273;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7319,%r7319,%r7274;
}
	// end inline asm
	mov.u32 	%r2981, 16;
	mov.u32 	%r2992, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2979,%r7253,%r2981,%r2134,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2984,%r7257,%r2979;
}
	// end inline asm
	mov.u32 	%r2990, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7253,%r2990,%r2134,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7258,%r2988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7276,%r2984,%r2993;
}
	// end inline asm
	mov.u32 	%r7275, %r7276;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7321,%r7321,%r7275;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7318,%r7318,%r7276;
}
	// end inline asm
	mov.u32 	%r3014, 18;
	mov.u32 	%r3025, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3012,%r7253,%r3014,%r2134,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3017,%r7257,%r3012;
}
	// end inline asm
	mov.u32 	%r3023, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7253,%r3023,%r2134,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7258,%r3021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7278,%r3017,%r3026;
}
	// end inline asm
	mov.u32 	%r7277, %r7278;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7316,%r7316,%r7277;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7315,%r7315,%r7278;
}
	// end inline asm
	mov.u32 	%r3047, 20;
	mov.u32 	%r3058, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3045,%r7253,%r3047,%r2134,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3050,%r7257,%r3045;
}
	// end inline asm
	mov.u32 	%r3056, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7253,%r3056,%r2134,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7258,%r3054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7280,%r3050,%r3059;
}
	// end inline asm
	mov.u32 	%r7279, %r7280;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7314,%r7314,%r7279;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7312,%r7312,%r7280;
}
	// end inline asm
	mov.u32 	%r3080, 22;
	mov.u32 	%r3091, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3078,%r7253,%r3080,%r2134,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3083,%r7257,%r3078;
}
	// end inline asm
	mov.u32 	%r3089, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7253,%r3089,%r2134,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7258,%r3087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7282,%r3083,%r3092;
}
	// end inline asm
	mov.u32 	%r7281, %r7282;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7310,%r7310,%r7281;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7307,%r7307,%r7282;
}
	// end inline asm
	mov.u32 	%r3113, 24;
	mov.u32 	%r3124, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3111,%r7253,%r3113,%r2134,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3116,%r7257,%r3111;
}
	// end inline asm
	mov.u32 	%r3122, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7253,%r3122,%r2134,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7258,%r3120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7284,%r3116,%r3125;
}
	// end inline asm
	mov.u32 	%r7283, %r7284;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7309,%r7309,%r7283;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7306,%r7306,%r7284;
}
	// end inline asm
	mov.u32 	%r3146, 26;
	mov.u32 	%r3157, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3144,%r7253,%r3146,%r2134,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3149,%r7257,%r3144;
}
	// end inline asm
	mov.u32 	%r3155, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7253,%r3155,%r2134,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7258,%r3153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7286,%r3149,%r3158;
}
	// end inline asm
	mov.u32 	%r7285, %r7286;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7304,%r7304,%r7285;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7301,%r7301,%r7286;
}
	// end inline asm
	mov.u32 	%r3179, 28;
	mov.u32 	%r3190, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3177,%r7253,%r3179,%r2134,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3182,%r7257,%r3177;
}
	// end inline asm
	mov.u32 	%r3188, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7253,%r3188,%r2134,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7258,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7288,%r3182,%r3191;
}
	// end inline asm
	mov.u32 	%r7287, %r7288;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7303,%r7303,%r7287;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7300,%r7300,%r7288;
}
	// end inline asm
	mov.u32 	%r3221, 31;
	mov.u32 	%r3212, 30;
	mov.u32 	%r3223, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3210,%r7253,%r3212,%r2134,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3215,%r7257,%r3210;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7253,%r3221,%r2134,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7258,%r3219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7290,%r3215,%r3224;
}
	// end inline asm
	mov.u32 	%r7289, %r7290;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7296,%r7296,%r7289;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7294,%r7294,%r7290;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7255, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7256, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r659, %r1572;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2611,%r7255,%r7087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r2611;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2617,%r7255,%r7085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7326,%r7326,%r2617;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2623,%r7255,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7328,%r7328,%r2623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2629,%r7255,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7308,%r7308,%r2629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2635,%r7255,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7310,%r7310,%r2635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2641,%r7255,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7295,%r7295,%r2641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2647,%r7256,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7332,%r7332,%r2647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2653,%r7256,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7313,%r7313,%r2653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2659,%r7255,%r7086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r2659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2665,%r7255,%r7084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7323,%r7323,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2671,%r7255,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7325,%r7325,%r2671;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2677,%r7255,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7305,%r7305,%r2677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2683,%r7255,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7307,%r7307,%r2683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2689,%r7255,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7293,%r7293,%r2689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2695,%r7256,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7330,%r7330,%r2695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2701,%r7256,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7311,%r7311,%r2701;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2514, %r1572, -2;
	setp.ne.s32 	%p238, %r659, %r2514;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2515,%r7255,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7316,%r7316,%r2515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2521,%r7255,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7298,%r7298,%r2521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2527,%r7256,%r7087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7334,%r7334,%r2527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2533,%r7256,%r7085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7320,%r7320,%r2533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2539,%r7256,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7322,%r7322,%r2539;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2545,%r7256,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7302,%r7302,%r2545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2551,%r7256,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7304,%r7304,%r2551;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2557,%r7256,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7292,%r7292,%r2557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2563,%r7255,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7315,%r7315,%r2563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2569,%r7255,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7297,%r7297,%r2569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2575,%r7256,%r7086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7333,%r7333,%r2575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2581,%r7256,%r7084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7317,%r7317,%r2581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2587,%r7256,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7319,%r7319,%r2587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2593,%r7256,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7299,%r7299,%r2593;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2599,%r7256,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7301,%r7301,%r2599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2605,%r7256,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7291,%r7291,%r2605;
}
	// end inline asm

$L__BB0_408:
	ld.param.u64 	%rd296, [%rd1+104];
	cvta.to.global.u64 	%rd27, %rd296;
	setp.ne.s32 	%p276, %r41, 0;
	@%p276 bra 	$L__BB0_413;

	setp.eq.s32 	%p277, %r42, 0;
	mad.lo.s32 	%r3244, %r656, %r1565, %r44;
	mul.lo.s32 	%r3245, %r1563, %r3244;
	mul.lo.s32 	%r3246, %r3245, 768;
	mad.lo.s32 	%r3247, %r42, 384, %r3246;
	add.s32 	%r3248, %r3247, -64;
	mul.wide.s32 	%rd297, %r3248, 4;
	add.s64 	%rd298, %rd27, %rd297;
	add.s64 	%rd300, %rd298, %rd299;
	ld.global.v4.u32 	{%r7350, %r7348, %r7342, %r7341}, [%rd300+256];
	ld.global.v4.u32 	{%r7352, %r7351, %r7346, %r7345}, [%rd300+1024];
	add.s64 	%rd28, %rd298, %rd301;
	@%p277 bra 	$L__BB0_411;

	ld.global.v2.u32 	{%r7344, %r7343}, [%rd28];

$L__BB0_411:
	setp.ne.s32 	%p278, %r42, %r2031;
	ld.global.v2.u32 	{%r7349, %r7347}, [%rd28+768];
	@%p278 bra 	$L__BB0_413;

	ld.global.v2.u32 	{%r7354, %r7353}, [%rd28+1536];

$L__BB0_413:
	setp.ne.s32 	%p279, %r42, 0;
	@%p279 bra 	$L__BB0_415;

	not.b32 	%r6966, %r41;
	add.s32 	%r6965, %r1562, %r6966;
	mad.lo.s32 	%r3267, %r657, %r1564, %r43;
	mul.lo.s32 	%r3271, %r3267, %r1641;
	mad.lo.s32 	%r3274, %r6965, 384, %r3271;
	add.s32 	%r3275, %r3274, -64;
	mad.lo.s32 	%r3278, %r1643, %r69, %r3275;
	mul.wide.s32 	%rd302, %r3278, 4;
	add.s64 	%rd303, %rd27, %rd302;
	add.s64 	%rd305, %rd303, %rd299;
	ld.global.v4.u32 	{%r7366, %r7365, %r7363, %r7361}, [%rd305+256];
	ld.global.v4.u32 	{%r7360, %r7359, %r7357, %r7355}, [%rd305+1024];
	add.s64 	%rd307, %rd303, %rd301;
	ld.global.v2.u32 	{%r7364, %r7362}, [%rd307+768];
	ld.global.v2.u32 	{%r7344, %r7343}, [%rd307+1536];

$L__BB0_415:
	ld.param.u64 	%rd309, [%rd1+112];
	cvta.to.global.u64 	%rd29, %rd309;
	add.s32 	%r3291, %r1567, -1;
	setp.ge.s32 	%p280, %r658, %r3291;
	setp.lt.s32 	%p281, %r658, 2;
	or.pred  	%p282, %p281, %p280;
	setp.lt.s32 	%p283, %r659, 2;
	or.pred  	%p284, %p282, %p283;
	add.s32 	%r3292, %r1568, -2;
	setp.ge.s32 	%p285, %r659, %r3292;
	or.pred  	%p286, %p285, %p284;
	mov.u32 	%r7381, %r2043;
	mov.u32 	%r7382, %r2043;
	mov.u32 	%r7383, %r2043;
	mov.u32 	%r7384, %r2043;
	mov.u32 	%r7385, %r2043;
	mov.u32 	%r7386, %r2043;
	mov.u32 	%r7387, %r2043;
	mov.u32 	%r7388, %r2043;
	mov.u32 	%r7389, %r2043;
	mov.u32 	%r7390, %r2043;
	mov.u32 	%r7391, %r2043;
	mov.u32 	%r7392, %r2043;
	mov.u32 	%r7393, %r2043;
	mov.u32 	%r7394, %r2043;
	mov.u32 	%r7395, %r2043;
	mov.u32 	%r7396, %r2043;
	mov.u32 	%r7397, %r2043;
	mov.u32 	%r7398, %r2043;
	mov.u32 	%r7399, %r2043;
	mov.u32 	%r7400, %r2043;
	mov.u32 	%r7401, %r2043;
	mov.u32 	%r7402, %r2043;
	@%p286 bra 	$L__BB0_426;

	mad.lo.s32 	%r927, %r659, %r1567, %r658;
	shl.b32 	%r3293, %r927, 6;
	mul.wide.s32 	%rd310, %r3293, 4;
	add.s64 	%rd30, %rd29, %rd310;
	and.pred  	%p289, %p276, %p279;
	mov.u32 	%r7384, %r2043;
	mov.u32 	%r7386, %r2043;
	@%p289 bra 	$L__BB0_418;

	add.s64 	%rd312, %rd30, %rd301;
	ld.global.v2.u32 	{%r7386, %r7384}, [%rd312+256];

$L__BB0_418:
	mov.u32 	%r7389, %r2043;
	mov.u32 	%r7391, %r2043;
	@%p276 bra 	$L__BB0_420;

	shl.b32 	%r3297, %r1567, 5;
	cvt.s64.s32 	%rd313, %r3297;
	cvt.s64.s32 	%rd314, %r46;
	add.s64 	%rd315, %rd313, %rd314;
	shl.b64 	%rd316, %rd315, 3;
	add.s64 	%rd317, %rd30, %rd316;
	ld.global.v2.u32 	{%r7391, %r7389}, [%rd317];

$L__BB0_420:
	mov.u32 	%r7396, %r2043;
	mov.u32 	%r7398, %r2043;
	@%p279 bra 	$L__BB0_422;

	shl.b32 	%r3301, %r1567, 5;
	neg.s32 	%r3302, %r3301;
	cvt.s64.s32 	%rd318, %r3302;
	cvt.s64.s32 	%rd319, %r46;
	add.s64 	%rd320, %rd318, %rd319;
	shl.b64 	%rd321, %rd320, 3;
	add.s64 	%rd322, %rd30, %rd321;
	ld.global.v2.u32 	{%r7398, %r7396}, [%rd322];

$L__BB0_422:
	shl.b32 	%r3305, %r1568, 6;
	shl.b32 	%r3306, %r927, 7;
	mad.lo.s32 	%r3307, %r3305, %r1567, %r3306;
	mul.wide.s32 	%rd323, %r3307, 4;
	add.s64 	%rd31, %rd29, %rd323;
	mov.u32 	%r7381, %r2043;
	mov.u32 	%r7382, %r2043;
	mov.u32 	%r7387, %r2043;
	mov.u32 	%r7388, %r2043;
	mov.u32 	%r7390, %r2043;
	mov.u32 	%r7392, %r2043;
	mov.u32 	%r7399, %r2043;
	mov.u32 	%r7400, %r2043;
	@%p276 bra 	$L__BB0_424;

	shl.b32 	%r3308, %r1567, 5;
	cvt.s64.s32 	%rd324, %r3308;
	cvt.s64.s32 	%rd325, %r46;
	add.s64 	%rd326, %rd324, %rd325;
	shl.b64 	%rd327, %rd326, 4;
	add.s64 	%rd328, %rd31, %rd327;
	ld.global.v4.u32 	{%r7392, %r7390, %r7382, %r7381}, [%rd328];
	shl.b32 	%r3313, %r1567, 6;
	add.s32 	%r3314, %r3313, -32;
	cvt.s64.s32 	%rd329, %r3314;
	add.s64 	%rd330, %rd329, %rd325;
	shl.b64 	%rd331, %rd330, 4;
	add.s64 	%rd332, %rd31, %rd331;
	ld.global.v4.u32 	{%r7400, %r7399, %r7388, %r7387}, [%rd332];

$L__BB0_424:
	mov.u32 	%r7383, %r2043;
	mov.u32 	%r7385, %r2043;
	mov.u32 	%r7393, %r2043;
	mov.u32 	%r7394, %r2043;
	mov.u32 	%r7395, %r2043;
	mov.u32 	%r7397, %r2043;
	mov.u32 	%r7401, %r2043;
	mov.u32 	%r7402, %r2043;
	@%p279 bra 	$L__BB0_426;

	shl.b32 	%r3320, %r1567, 5;
	xor.b32  	%r3321, %r3320, -32;
	cvt.s64.s32 	%rd333, %r3321;
	cvt.s64.s32 	%rd334, %r46;
	add.s64 	%rd335, %rd333, %rd334;
	shl.b64 	%rd336, %rd335, 4;
	add.s64 	%rd337, %rd31, %rd336;
	ld.global.v4.u32 	{%r7402, %r7401, %r7397, %r7395}, [%rd337];
	add.s64 	%rd339, %rd31, %rd299;
	ld.global.v4.u32 	{%r7394, %r7393, %r7385, %r7383}, [%rd339];

$L__BB0_426:
	mov.u32 	%r3335, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3331,%r7223,%r435,%r2134,%r3335;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3331;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7223;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3338, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3339,%r7224,%r3338;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3342,%r7076,%r3339;
}
	// end inline asm
	@%p28 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7403,%r7338;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7403,%r7077,%r3339;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3355, 31;
	mov.u32 	%r3378, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3353,%r7403,%r3355,%r2134,%r3378;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3358,%r3342,%r3353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3361,%r7222,%r7221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3364,%r3361,%r3358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3367,%r7225,%r3364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3370,%r7338,%r3367;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3374,%r7218,%r435,%r2134,%r3378;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3374;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7218;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3381, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3382,%r7219,%r3381;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3385,%r7076,%r3382;
}
	// end inline asm
	mov.u32 	%r7404, %r7337;
	@%p28 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7404,%r7077,%r3382;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3396,%r7404,%r3355,%r2134,%r3378;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3401,%r3385,%r3396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3404,%r7222,%r7217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3407,%r3401,%r3404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3410,%r7220,%r3407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3413,%r7337,%r3410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3416,%r7223,%r7224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3419,%r7080,%r3416;
}
	// end inline asm
	@%p28 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7405,%r7336;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7405,%r7081,%r3416;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3432, 31;
	mov.u32 	%r3434, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3430,%r7405,%r3432,%r2134,%r3434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3435,%r3419,%r3430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3438,%r7215,%r7214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3441,%r3438,%r3435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3444,%r7216,%r3441;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3447,%r7336,%r3444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3450,%r7218,%r7219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3453,%r7080,%r3450;
}
	// end inline asm
	mov.u32 	%r7406, %r7335;
	@%p28 bra 	$L__BB0_436;

	// begin inline asm
	{mul.f16x2 %r7406,%r7081,%r3450;
}
	// end inline asm

$L__BB0_436:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3462,%r7406,%r3432,%r2134,%r3434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3467,%r3453,%r3462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3470,%r7215,%r7212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3473,%r3467,%r3470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3476,%r7213,%r3473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3479,%r7335,%r3476;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3483,%r7209,%r435,%r2134,%r3434;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3483;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7209;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3490, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3491,%r7210,%r3490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3494,%r7076,%r3491;
}
	// end inline asm
	@%p28 bra 	$L__BB0_438;
	bra.uni 	$L__BB0_437;

$L__BB0_438:
	// begin inline asm
	{neg.f16x2 %r7407,%r7334;
}
	// end inline asm
	bra.uni 	$L__BB0_439;

$L__BB0_437:
	// begin inline asm
	{mul.f16x2 %r7407,%r7077,%r3491;
}
	// end inline asm

$L__BB0_439:
	mov.u32 	%r3509, 31;
	mov.u32 	%r3511, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3507,%r7407,%r3509,%r2134,%r3511;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3512,%r3494,%r3507;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3515,%r7208,%r7222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3518,%r3515,%r3512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3521,%r7211,%r3518;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3524,%r7334,%r3521;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3527,%r7209,%r7210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3530,%r7080,%r3527;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7408,%r7333;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7408,%r7081,%r3527;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3543, 31;
	mov.u32 	%r3566, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3541,%r7408,%r3543,%r2134,%r3566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3546,%r3530,%r3541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3549,%r7206,%r7215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3552,%r3549,%r3546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3555,%r7207,%r3552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3558,%r7333,%r3555;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3562,%r7204,%r435,%r2134,%r3566;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3562;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7204;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3569, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3570,%r7205,%r3569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3573,%r7076,%r3570;
}
	// end inline asm
	@%p28 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7409,%r7332;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7409,%r7077,%r3570;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r3588, 31;
	mov.u32 	%r3611, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3586,%r7409,%r3588,%r2134,%r3611;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3591,%r3573,%r3586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3594,%r7203,%r7474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3597,%r3594,%r3591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3600,%r7402,%r3597;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3603,%r7332,%r3600;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3607,%r7199,%r435,%r2134,%r3611;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3607;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7199;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3614, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3615,%r7200,%r3614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3618,%r7076,%r3615;
}
	// end inline asm
	mov.u32 	%r7410, %r7331;
	@%p28 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7410,%r7077,%r3615;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3629,%r7410,%r3588,%r2134,%r3611;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3634,%r3618,%r3629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3637,%r7203,%r7221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3640,%r3634,%r3637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3643,%r7201,%r3640;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3646,%r7331,%r3643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3649,%r7204,%r7205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3652,%r7080,%r3649;
}
	// end inline asm
	@%p28 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7411,%r7330;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7411,%r7081,%r3649;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r3665, 31;
	mov.u32 	%r3667, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3663,%r7411,%r3665,%r2134,%r3667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3668,%r3652,%r3663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3671,%r7198,%r7473;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r3671,%r3668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3677,%r7401,%r3674;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3680,%r7330,%r3677;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3683,%r7199,%r7200;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3686,%r7080,%r3683;
}
	// end inline asm
	mov.u32 	%r7412, %r7329;
	@%p28 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7412,%r7081,%r3683;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3695,%r7412,%r3665,%r2134,%r3667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3700,%r3686,%r3695;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3703,%r7198,%r7214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3706,%r3700,%r3703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3709,%r7196,%r3706;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3712,%r7329,%r3709;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3716,%r7193,%r435,%r2134,%r3667;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3716;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7193;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3723, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3724,%r7194,%r3723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3727,%r7076,%r3724;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7413,%r7328;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7413,%r7077,%r3724;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3742, 31;
	mov.u32 	%r3765, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3740,%r7413,%r3742,%r2134,%r3765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3745,%r3727,%r3740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3748,%r7192,%r7203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r3748,%r3745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r548,%r3751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7251,%r7328,%r3754;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3761,%r7189,%r435,%r2134,%r3765;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3761;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7189;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3768, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3769,%r7190,%r3768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3772,%r7076,%r3769;
}
	// end inline asm
	mov.u32 	%r7414, %r7327;
	@%p28 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7414,%r7077,%r3769;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3783,%r7414,%r3742,%r2134,%r3765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3788,%r3772,%r3783;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3791,%r7192,%r7222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3794,%r3788,%r3791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3797,%r544,%r3794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7249,%r7327,%r3797;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3803,%r7194,%r7224;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3806,%r7190,%r7200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3809,%r3803,%r3806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3812,%r7188,%r3809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3815,%r7326,%r3812;
}
	// end inline asm
	selp.b32 	%r1053, %r7326, %r3815, %p28;
	// begin inline asm
	{sub.f16x2 %r3818,%r7193,%r7194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3821,%r7080,%r3818;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7415,%r7325;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7415,%r7081,%r3818;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3834, 31;
	mov.u32 	%r3836, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3832,%r7415,%r3834,%r2134,%r3836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r3821,%r3832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3840,%r7186,%r7198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3843,%r3840,%r3837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3846,%r540,%r3843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7250,%r7325,%r3846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3852,%r7189,%r7190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3855,%r7080,%r3852;
}
	// end inline asm
	mov.u32 	%r7416, %r7324;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7416,%r7081,%r3852;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3864,%r7416,%r3834,%r2134,%r3836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3869,%r3855,%r3864;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3872,%r7186,%r7215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3875,%r3869,%r3872;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3878,%r538,%r3875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7248,%r7324,%r3878;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3884,%r7193,%r7223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3887,%r7189,%r7199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3890,%r3884,%r3887;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3893,%r7184,%r3890;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3896,%r7323,%r3893;
}
	// end inline asm
	selp.b32 	%r1065, %r7323, %r3896, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3900,%r7181,%r435,%r2134,%r3836;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3900;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7181;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3907, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3908,%r7182,%r3907;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3911,%r7076,%r3908;
}
	// end inline asm
	@%p28 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7417,%r7322;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7417,%r7077,%r3908;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r3926, 31;
	mov.u32 	%r3949, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3924,%r7417,%r3926,%r2134,%r3949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3929,%r3911,%r3924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3932,%r7180,%r7192;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3935,%r3932,%r3929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3938,%r536,%r3935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7247,%r7322,%r3938;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3945,%r7177,%r435,%r2134,%r3949;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3945;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7177;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3952, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3953,%r7178,%r3952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3956,%r7076,%r3953;
}
	// end inline asm
	mov.u32 	%r7418, %r7321;
	@%p28 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7418,%r7077,%r3953;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3967,%r7418,%r3926,%r2134,%r3949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3972,%r3956,%r3967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3975,%r7180,%r7208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3978,%r3972,%r3975;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3981,%r7179,%r3978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3984,%r7321,%r3981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3987,%r7182,%r7210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3990,%r7178,%r7190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3993,%r3987,%r3990;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3996,%r7176,%r3993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3999,%r7320,%r3996;
}
	// end inline asm
	selp.b32 	%r1077, %r7320, %r3999, %p28;
	// begin inline asm
	{sub.f16x2 %r4002,%r7181,%r7182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4005,%r7080,%r4002;
}
	// end inline asm
	@%p28 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7419,%r7319;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7419,%r7081,%r4002;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4018, 31;
	mov.u32 	%r4020, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4016,%r7419,%r4018,%r2134,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4021,%r4005,%r4016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4024,%r7174,%r7186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r4024,%r4021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4030,%r528,%r4027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7246,%r7319,%r4030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4036,%r7177,%r7178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4039,%r7080,%r4036;
}
	// end inline asm
	mov.u32 	%r7420, %r7318;
	@%p28 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r7420,%r7081,%r4036;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4048,%r7420,%r4018,%r2134,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4053,%r4039,%r4048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4056,%r7174,%r7206;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r4053,%r4056;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4062,%r7173,%r4059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4065,%r7318,%r4062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4068,%r7181,%r7209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4071,%r7177,%r7189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4074,%r4068,%r4071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4077,%r7172,%r4074;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r7317,%r4077;
}
	// end inline asm
	selp.b32 	%r1089, %r7317, %r4080, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4084,%r7170,%r435,%r2134,%r4020;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4084;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7170;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4091, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4092,%r7171,%r4091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4095,%r7076,%r4092;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7421,%r7316;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7421,%r7077,%r4092;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4110, 31;
	mov.u32 	%r4112, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4108,%r7421,%r4110,%r2134,%r4112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4113,%r4095,%r4108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4116,%r7458,%r7180;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4119,%r4116,%r4113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4122,%r7400,%r4119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4125,%r7316,%r4122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4128,%r7170,%r7171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r7080,%r4128;
}
	// end inline asm
	@%p28 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7422,%r7315;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7422,%r7081,%r4128;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4144, 31;
	mov.u32 	%r4167, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4142,%r7422,%r4144,%r2134,%r4167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4147,%r4131,%r4142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4150,%r7457,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4153,%r4150,%r4147;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4156,%r7399,%r4153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4159,%r7315,%r4156;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4163,%r7166,%r435,%r2134,%r4167;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4163;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7166;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4170, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4171,%r7167,%r4170;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4174,%r7076,%r4171;
}
	// end inline asm
	mov.u32 	%r7423, %r7314;
	@%p28 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7423,%r7077,%r4171;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4185,%r7423,%r4144,%r2134,%r4167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4190,%r4174,%r4185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4193,%r7142,%r7203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4196,%r4190,%r4193;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4199,%r7398,%r4196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7245,%r7314,%r4199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4205,%r7143,%r7205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4208,%r7167,%r7472;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r4205,%r4208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4214,%r7397,%r4211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4217,%r7313,%r4214;
}
	// end inline asm
	selp.b32 	%r1107, %r7313, %r4217, %p28;
	// begin inline asm
	{sub.f16x2 %r4220,%r7166,%r7167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4223,%r7080,%r4220;
}
	// end inline asm
	mov.u32 	%r7424, %r7312;
	@%p28 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7424,%r7081,%r4220;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4234, 31;
	mov.u32 	%r4272, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4232,%r7424,%r4234,%r2134,%r4272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4237,%r4223,%r4232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4240,%r7140,%r7198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4243,%r4237,%r4240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4246,%r7396,%r4243;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7244,%r7312,%r4246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4252,%r7141,%r7204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4255,%r7166,%r7471;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4258,%r4252,%r4255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4261,%r7395,%r4258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4264,%r7311,%r4261;
}
	// end inline asm
	selp.b32 	%r1113, %r7311, %r4264, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4268,%r7162,%r435,%r2134,%r4272;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4268;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7162;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4275, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4276,%r7163,%r4275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4279,%r7076,%r4276;
}
	// end inline asm
	@%p28 bra 	$L__BB0_484;
	bra.uni 	$L__BB0_483;

$L__BB0_484:
	// begin inline asm
	{neg.f16x2 %r7425,%r7310;
}
	// end inline asm
	bra.uni 	$L__BB0_485;

$L__BB0_483:
	// begin inline asm
	{mul.f16x2 %r7425,%r7077,%r4276;
}
	// end inline asm

$L__BB0_485:
	mov.u32 	%r4294, 31;
	mov.u32 	%r4317, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4292,%r7425,%r4294,%r2134,%r4317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4297,%r4279,%r4292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4300,%r7161,%r7142;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4303,%r4300,%r4297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4306,%r7394,%r4303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7243,%r7310,%r4306;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4313,%r7158,%r435,%r2134,%r4317;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4313;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7158;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4320, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4321,%r7159,%r4320;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4324,%r7076,%r4321;
}
	// end inline asm
	mov.u32 	%r7426, %r7309;
	@%p28 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7426,%r7077,%r4321;
}
	// end inline asm

$L__BB0_487:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4335,%r7426,%r4294,%r2134,%r4317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4340,%r4324,%r4335;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4343,%r7161,%r7192;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4346,%r4340,%r4343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4349,%r7191,%r4346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7241,%r7309,%r4349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4355,%r7163,%r7194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4358,%r7159,%r7167;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4361,%r4355,%r4358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4364,%r510,%r4361;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4367,%r7308,%r4364;
}
	// end inline asm
	selp.b32 	%r7239, %r7308, %r4367, %p28;
	// begin inline asm
	{sub.f16x2 %r4370,%r7162,%r7163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4373,%r7080,%r4370;
}
	// end inline asm
	@%p28 bra 	$L__BB0_489;
	bra.uni 	$L__BB0_488;

$L__BB0_489:
	// begin inline asm
	{neg.f16x2 %r7427,%r7307;
}
	// end inline asm
	bra.uni 	$L__BB0_490;

$L__BB0_488:
	// begin inline asm
	{mul.f16x2 %r7427,%r7081,%r4370;
}
	// end inline asm

$L__BB0_490:
	mov.u32 	%r4386, 31;
	mov.u32 	%r4388, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4384,%r7427,%r4386,%r2134,%r4388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4389,%r4373,%r4384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4392,%r7156,%r7140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4395,%r4392,%r4389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4398,%r7393,%r4395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7242,%r7307,%r4398;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4404,%r7158,%r7159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4407,%r7080,%r4404;
}
	// end inline asm
	mov.u32 	%r7428, %r7306;
	@%p28 bra 	$L__BB0_492;

	// begin inline asm
	{mul.f16x2 %r7428,%r7081,%r4404;
}
	// end inline asm

$L__BB0_492:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4416,%r7428,%r4386,%r2134,%r4388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4421,%r4407,%r4416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4424,%r7156,%r7186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4427,%r4421,%r4424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4430,%r7185,%r4427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7240,%r7306,%r4430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4436,%r7162,%r7193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4439,%r7158,%r7166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4442,%r4436,%r4439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4445,%r507,%r4442;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4448,%r7305,%r4445;
}
	// end inline asm
	selp.b32 	%r7238, %r7305, %r4448, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4452,%r7152,%r435,%r2134,%r4388;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4452;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7152;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4459, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4460,%r7153,%r4459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4463,%r7076,%r4460;
}
	// end inline asm
	@%p28 bra 	$L__BB0_494;
	bra.uni 	$L__BB0_493;

$L__BB0_494:
	// begin inline asm
	{neg.f16x2 %r7429,%r7304;
}
	// end inline asm
	bra.uni 	$L__BB0_495;

$L__BB0_493:
	// begin inline asm
	{mul.f16x2 %r7429,%r7077,%r4460;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4478, 31;
	mov.u32 	%r4501, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4476,%r7429,%r4478,%r2134,%r4501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4481,%r4463,%r4476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4484,%r7139,%r7161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4487,%r4484,%r4481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4490,%r7392,%r4487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7237,%r7304,%r4490;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4497,%r7150,%r435,%r2134,%r4501;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4497;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7150;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4504, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4505,%r7151,%r4504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4508,%r7076,%r4505;
}
	// end inline asm
	mov.u32 	%r7430, %r7303;
	@%p28 bra 	$L__BB0_497;

	// begin inline asm
	{mul.f16x2 %r7430,%r7077,%r4505;
}
	// end inline asm

$L__BB0_497:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4519,%r7430,%r4478,%r2134,%r4501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4524,%r4508,%r4519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4527,%r7139,%r7180;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4530,%r4524,%r4527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4533,%r7391,%r4530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7235,%r7303,%r4533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4539,%r7153,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4542,%r7151,%r7159;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4545,%r4539,%r4542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4548,%r502,%r4545;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4551,%r7302,%r4548;
}
	// end inline asm
	selp.b32 	%r7233, %r7302, %r4551, %p28;
	// begin inline asm
	{sub.f16x2 %r4554,%r7152,%r7153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4557,%r7080,%r4554;
}
	// end inline asm
	@%p28 bra 	$L__BB0_499;
	bra.uni 	$L__BB0_498;

$L__BB0_499:
	// begin inline asm
	{neg.f16x2 %r7431,%r7301;
}
	// end inline asm
	bra.uni 	$L__BB0_500;

$L__BB0_498:
	// begin inline asm
	{mul.f16x2 %r7431,%r7081,%r4554;
}
	// end inline asm

$L__BB0_500:
	mov.u32 	%r4570, 31;
	mov.u32 	%r4572, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4568,%r7431,%r4570,%r2134,%r4572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4573,%r4557,%r4568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4576,%r7138,%r7156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4579,%r4576,%r4573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4582,%r7390,%r4579;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7236,%r7301,%r4582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4588,%r7150,%r7151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4591,%r7080,%r4588;
}
	// end inline asm
	mov.u32 	%r7432, %r7300;
	@%p28 bra 	$L__BB0_502;

	// begin inline asm
	{mul.f16x2 %r7432,%r7081,%r4588;
}
	// end inline asm

$L__BB0_502:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4600,%r7432,%r4570,%r2134,%r4572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4605,%r4591,%r4600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4608,%r7138,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4611,%r4605,%r4608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4614,%r7389,%r4611;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7234,%r7300,%r4614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4620,%r7152,%r7181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4623,%r7150,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4626,%r4620,%r4623;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4629,%r501,%r4626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4632,%r7299,%r4629;
}
	// end inline asm
	selp.b32 	%r7232, %r7299, %r4632, %p28;
	// begin inline asm
	{sub.f16x2 %r4635,%r7137,%r7171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r7456,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4641,%r4635,%r4638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4644,%r7388,%r4641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4647,%r7298,%r4644;
}
	// end inline asm
	selp.b32 	%r1162, %r7298, %r4647, %p28;
	// begin inline asm
	{sub.f16x2 %r4650,%r7136,%r7170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4653,%r7455,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4656,%r4650,%r4653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4659,%r7387,%r4656;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4662,%r7297,%r4659;
}
	// end inline asm
	selp.b32 	%r1163, %r7297, %r4662, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4666,%r7144,%r435,%r2134,%r4572;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4666;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7144;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4673, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4674,%r7145,%r4673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4677,%r7076,%r4674;
}
	// end inline asm
	mov.u32 	%r7433, %r7296;
	@%p28 bra 	$L__BB0_504;

	// begin inline asm
	{mul.f16x2 %r7433,%r7077,%r4674;
}
	// end inline asm

$L__BB0_504:
	mov.u32 	%r4690, 31;
	mov.u32 	%r4692, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4688,%r7433,%r4690,%r2134,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4693,%r4677,%r4688;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r7132,%r7161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4699,%r4693,%r4696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4702,%r7386,%r4699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7231,%r7296,%r4702;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4708,%r7133,%r7163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4711,%r7145,%r7135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4714,%r4708,%r4711;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4717,%r7385,%r4714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4720,%r7295,%r4717;
}
	// end inline asm
	selp.b32 	%r7229, %r7295, %r4720, %p28;
	// begin inline asm
	{sub.f16x2 %r4723,%r7144,%r7145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4726,%r7080,%r4723;
}
	// end inline asm
	mov.u32 	%r7434, %r7294;
	@%p28 bra 	$L__BB0_506;

	// begin inline asm
	{mul.f16x2 %r7434,%r7081,%r4723;
}
	// end inline asm

$L__BB0_506:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4735,%r7434,%r4690,%r2134,%r4692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4740,%r4726,%r4735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4743,%r7130,%r7156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4746,%r4740,%r4743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4749,%r7384,%r4746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7230,%r7294,%r4749;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4755,%r7131,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4758,%r7144,%r7134;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4761,%r4755,%r4758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4764,%r7383,%r4761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4767,%r7293,%r4764;
}
	// end inline asm
	selp.b32 	%r7228, %r7293, %r4767, %p28;
	// begin inline asm
	{sub.f16x2 %r4770,%r7128,%r7153;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4773,%r7129,%r7145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4776,%r4770,%r4773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4779,%r7382,%r4776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4782,%r7292,%r4779;
}
	// end inline asm
	selp.b32 	%r7227, %r7292, %r4782, %p28;
	// begin inline asm
	{sub.f16x2 %r4785,%r7126,%r7152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4788,%r7127,%r7144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4791,%r4785,%r4788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4794,%r7381,%r4791;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4797,%r7291,%r4794;
}
	// end inline asm
	selp.b32 	%r7226, %r7291, %r4797, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd340, [%rd1+184];
	cvta.to.global.u64 	%rd33, %rd340;
	add.s32 	%r4802, %r1576, -2;
	setp.lt.s32 	%p327, %r658, %r4802;
	add.s32 	%r4803, %r1577, 3;
	setp.ge.s32 	%p328, %r658, %r4803;
	or.pred  	%p329, %p327, %p328;
	add.s32 	%r4804, %r1578, -2;
	setp.lt.s32 	%p330, %r659, %r4804;
	or.pred  	%p331, %p329, %p330;
	add.s32 	%r4805, %r1579, 2;
	setp.ge.s32 	%p332, %r659, %r4805;
	or.pred  	%p333, %p332, %p331;
	setp.lt.s32 	%p334, %r660, %r1573;
	or.pred  	%p335, %p334, %p333;
	mad.lo.s32 	%r4806, %r1575, %r1574, %r1573;
	setp.ge.s32 	%p336, %r660, %r4806;
	or.pred  	%p337, %p335, %p336;
	@%p337 bra 	$L__BB0_748;

	sub.s32 	%r1178, %r660, %r1573;
	rem.s32 	%r4807, %r1178, %r1574;
	setp.ne.s32 	%p338, %r4807, 0;
	@%p338 bra 	$L__BB0_748;

	div.s32 	%r4808, %r1178, %r1574;
	mov.u32 	%r4809, 8;
	sub.s32 	%r4810, %r4809, %r1576;
	add.s32 	%r4811, %r4810, %r1577;
	mul.lo.s32 	%r4812, %r4808, %r4811;
	mov.u32 	%r4813, 4;
	sub.s32 	%r4814, %r4813, %r1576;
	add.s32 	%r1179, %r4814, %r658;
	sub.s32 	%r4815, %r4813, %r1578;
	add.s32 	%r1180, %r4815, %r659;
	mul.lo.s32 	%r1181, %r4812, 3;
	add.s32 	%r4816, %r1179, %r1181;
	add.s32 	%r4817, %r4816, -2;
	sub.s32 	%r4818, %r4809, %r1578;
	add.s32 	%r4819, %r4818, %r1579;
	mul.lo.s32 	%r1182, %r4817, %r4819;
	add.s32 	%r4820, %r1180, %r1182;
	mul.lo.s32 	%r4821, %r4820, %r58;
	sub.s32 	%r1183, %r4821, %r1580;
	@%p28 bra 	$L__BB0_513;

	not.pred 	%p340, %p24;
	@%p340 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3370;
  cvt.f32.f16 %f420, low;}

	// end inline asm
	add.s32 	%r4823, %r1183, %r401;
	mul.wide.s32 	%rd341, %r4823, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f420;

$L__BB0_511:
	not.pred 	%p341, %p26;
	@%p341 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3370;
  cvt.f32.f16 %f421, high;}

	// end inline asm
	add.s32 	%r4825, %r1183, %r402;
	mul.wide.s32 	%rd343, %r4825, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f421;

$L__BB0_513:
	@%p28 bra 	$L__BB0_518;

	not.pred 	%p343, %p25;
	@%p343 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3447;
  cvt.f32.f16 %f422, low;}

	// end inline asm
	add.s32 	%r4827, %r1183, %r415;
	mul.wide.s32 	%rd345, %r4827, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f422;

$L__BB0_516:
	not.pred 	%p344, %p27;
	@%p344 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3447;
  cvt.f32.f16 %f423, high;}

	// end inline asm
	add.s32 	%r4829, %r1183, %r416;
	mul.wide.s32 	%rd347, %r4829, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f423;

$L__BB0_518:
	mov.u32 	%r4830, 8;
	sub.s32 	%r4831, %r4830, %r1576;
	add.s32 	%r4832, %r4831, %r1577;
	add.s32 	%r1184, %r1181, %r4832;
	add.s32 	%r4833, %r1179, %r1184;
	add.s32 	%r4834, %r4833, -2;
	sub.s32 	%r4835, %r4830, %r1578;
	add.s32 	%r4836, %r4835, %r1579;
	mad.lo.s32 	%r4837, %r4834, %r4836, %r1180;
	mul.lo.s32 	%r4838, %r4837, %r58;
	sub.s32 	%r1185, %r4838, %r1580;
	@%p28 bra 	$L__BB0_523;

	not.pred 	%p346, %p24;
	@%p346 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3413;
  cvt.f32.f16 %f424, low;}

	// end inline asm
	add.s32 	%r4840, %r1185, %r401;
	mul.wide.s32 	%rd349, %r4840, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f424;

$L__BB0_521:
	not.pred 	%p347, %p26;
	@%p347 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3413;
  cvt.f32.f16 %f425, high;}

	// end inline asm
	add.s32 	%r4842, %r1185, %r402;
	mul.wide.s32 	%rd351, %r4842, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f425;

$L__BB0_523:
	@%p28 bra 	$L__BB0_528;

	not.pred 	%p349, %p25;
	@%p349 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3479;
  cvt.f32.f16 %f426, low;}

	// end inline asm
	add.s32 	%r4844, %r1185, %r415;
	mul.wide.s32 	%rd353, %r4844, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f426;

$L__BB0_526:
	not.pred 	%p350, %p27;
	@%p350 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3479;
  cvt.f32.f16 %f427, high;}

	// end inline asm
	add.s32 	%r4846, %r1185, %r416;
	mul.wide.s32 	%rd355, %r4846, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f427;

$L__BB0_528:
	add.s32 	%r1186, %r1180, 1;
	add.s32 	%r4847, %r1186, %r1182;
	mul.lo.s32 	%r4848, %r4847, %r58;
	sub.s32 	%r1187, %r4848, %r1580;
	@%p28 bra 	$L__BB0_533;

	not.pred 	%p352, %p24;
	@%p352 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3524;
  cvt.f32.f16 %f428, low;}

	// end inline asm
	add.s32 	%r4850, %r1187, %r401;
	mul.wide.s32 	%rd357, %r4850, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f428;

$L__BB0_531:
	not.pred 	%p353, %p26;
	@%p353 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3524;
  cvt.f32.f16 %f429, high;}

	// end inline asm
	add.s32 	%r4852, %r1187, %r402;
	mul.wide.s32 	%rd359, %r4852, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f429;

$L__BB0_533:
	@%p28 bra 	$L__BB0_538;

	not.pred 	%p355, %p25;
	@%p355 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3558;
  cvt.f32.f16 %f430, low;}

	// end inline asm
	add.s32 	%r4854, %r1187, %r415;
	mul.wide.s32 	%rd361, %r4854, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f430;

$L__BB0_536:
	not.pred 	%p356, %p27;
	@%p356 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3558;
  cvt.f32.f16 %f431, high;}

	// end inline asm
	add.s32 	%r4856, %r1187, %r416;
	mul.wide.s32 	%rd363, %r4856, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f431;

$L__BB0_538:
	add.s32 	%r1188, %r1179, -1;
	add.s32 	%r4857, %r1188, %r1181;
	mov.u32 	%r4858, 8;
	sub.s32 	%r4859, %r4858, %r1578;
	add.s32 	%r4860, %r4859, %r1579;
	mul.lo.s32 	%r1189, %r4857, %r4860;
	add.s32 	%r1190, %r1180, -1;
	add.s32 	%r4861, %r1190, %r1189;
	mul.lo.s32 	%r4862, %r4861, %r58;
	sub.s32 	%r1191, %r4862, %r1580;
	@%p28 bra 	$L__BB0_543;

	not.pred 	%p358, %p24;
	@%p358 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3603;
  cvt.f32.f16 %f432, low;}

	// end inline asm
	add.s32 	%r4864, %r1191, %r401;
	mul.wide.s32 	%rd365, %r4864, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f432;

$L__BB0_541:
	not.pred 	%p359, %p26;
	@%p359 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3603;
  cvt.f32.f16 %f433, high;}

	// end inline asm
	add.s32 	%r4866, %r1191, %r402;
	mul.wide.s32 	%rd367, %r4866, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f433;

$L__BB0_543:
	@%p28 bra 	$L__BB0_548;

	not.pred 	%p361, %p25;
	@%p361 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3680;
  cvt.f32.f16 %f434, low;}

	// end inline asm
	add.s32 	%r4868, %r1191, %r415;
	mul.wide.s32 	%rd369, %r4868, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f434;

$L__BB0_546:
	not.pred 	%p362, %p27;
	@%p362 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3680;
  cvt.f32.f16 %f435, high;}

	// end inline asm
	add.s32 	%r4870, %r1191, %r416;
	mul.wide.s32 	%rd371, %r4870, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f435;

$L__BB0_548:
	mov.u32 	%r4871, 8;
	sub.s32 	%r4872, %r4871, %r1578;
	add.s32 	%r4873, %r4872, %r1579;
	add.s32 	%r4874, %r1188, %r1184;
	mul.lo.s32 	%r1192, %r4874, %r4873;
	add.s32 	%r4875, %r1190, %r1192;
	mul.lo.s32 	%r4876, %r4875, %r58;
	sub.s32 	%r1193, %r4876, %r1580;
	@%p28 bra 	$L__BB0_553;

	not.pred 	%p364, %p24;
	@%p364 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3646;
  cvt.f32.f16 %f436, low;}

	// end inline asm
	add.s32 	%r4878, %r1193, %r401;
	mul.wide.s32 	%rd373, %r4878, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f436;

$L__BB0_551:
	not.pred 	%p365, %p26;
	@%p365 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3646;
  cvt.f32.f16 %f437, high;}

	// end inline asm
	add.s32 	%r4880, %r1193, %r402;
	mul.wide.s32 	%rd375, %r4880, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f437;

$L__BB0_553:
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p367, %p25;
	@%p367 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3712;
  cvt.f32.f16 %f438, low;}

	// end inline asm
	add.s32 	%r4882, %r1193, %r415;
	mul.wide.s32 	%rd377, %r4882, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f438;

$L__BB0_556:
	not.pred 	%p368, %p27;
	@%p368 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3712;
  cvt.f32.f16 %f439, high;}

	// end inline asm
	add.s32 	%r4884, %r1193, %r416;
	mul.wide.s32 	%rd379, %r4884, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f439;

$L__BB0_558:
	add.s32 	%r4885, %r1180, %r1189;
	mul.lo.s32 	%r4886, %r4885, %r58;
	sub.s32 	%r1194, %r4886, %r1580;
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p370, %p24;
	@%p370 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f440, low;}

	// end inline asm
	add.s32 	%r4888, %r1194, %r401;
	mul.wide.s32 	%rd381, %r4888, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f440;

$L__BB0_561:
	not.pred 	%p371, %p26;
	@%p371 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f441, high;}

	// end inline asm
	add.s32 	%r4890, %r1194, %r402;
	mul.wide.s32 	%rd383, %r4890, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f441;

$L__BB0_563:
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p373, %p25;
	@%p373 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f442, low;}

	// end inline asm
	add.s32 	%r4892, %r1194, %r415;
	mul.wide.s32 	%rd385, %r4892, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f442;

$L__BB0_566:
	not.pred 	%p374, %p27;
	@%p374 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f443, high;}

	// end inline asm
	add.s32 	%r4894, %r1194, %r416;
	mul.wide.s32 	%rd387, %r4894, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f443;

$L__BB0_568:
	add.s32 	%r4895, %r1180, %r1192;
	mul.lo.s32 	%r4896, %r4895, %r58;
	sub.s32 	%r1195, %r4896, %r1580;
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p376, %p24;
	@%p376 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f444, low;}

	// end inline asm
	add.s32 	%r4898, %r1195, %r401;
	mul.wide.s32 	%rd389, %r4898, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f444;

$L__BB0_571:
	not.pred 	%p377, %p26;
	@%p377 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f445, high;}

	// end inline asm
	add.s32 	%r4900, %r1195, %r402;
	mul.wide.s32 	%rd391, %r4900, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f445;

$L__BB0_573:
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p379, %p25;
	@%p379 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f446, low;}

	// end inline asm
	add.s32 	%r4902, %r1195, %r415;
	mul.wide.s32 	%rd393, %r4902, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f446;

$L__BB0_576:
	not.pred 	%p380, %p27;
	@%p380 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f447, high;}

	// end inline asm
	add.s32 	%r4904, %r1195, %r416;
	mul.wide.s32 	%rd395, %r4904, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f447;

$L__BB0_578:
	mov.u32 	%r4905, 8;
	sub.s32 	%r4906, %r4905, %r1576;
	add.s32 	%r4907, %r4906, %r1577;
	add.s32 	%r1196, %r1184, %r4907;
	add.s32 	%r4908, %r1188, %r1196;
	sub.s32 	%r4909, %r4905, %r1578;
	add.s32 	%r4910, %r4909, %r1579;
	mul.lo.s32 	%r1197, %r4908, %r4910;
	add.s32 	%r4911, %r1180, %r1197;
	mul.lo.s32 	%r4912, %r4911, %r58;
	sub.s32 	%r1198, %r4912, %r1580;
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p382, %p24;
	@%p382 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1053;
  cvt.f32.f16 %f448, low;}

	// end inline asm
	add.s32 	%r4914, %r1198, %r401;
	mul.wide.s32 	%rd397, %r4914, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f448;

$L__BB0_581:
	not.pred 	%p383, %p26;
	@%p383 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1053;
  cvt.f32.f16 %f449, high;}

	// end inline asm
	add.s32 	%r4916, %r1198, %r402;
	mul.wide.s32 	%rd399, %r4916, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f449;

$L__BB0_583:
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p385, %p25;
	@%p385 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1065;
  cvt.f32.f16 %f450, low;}

	// end inline asm
	add.s32 	%r4918, %r1198, %r415;
	mul.wide.s32 	%rd401, %r4918, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f450;

$L__BB0_586:
	not.pred 	%p386, %p27;
	@%p386 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1065;
  cvt.f32.f16 %f451, high;}

	// end inline asm
	add.s32 	%r4920, %r1198, %r416;
	mul.wide.s32 	%rd403, %r4920, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f451;

$L__BB0_588:
	add.s32 	%r6976, %r1180, 1;
	add.s32 	%r4921, %r6976, %r1189;
	mul.lo.s32 	%r4922, %r4921, %r58;
	sub.s32 	%r1199, %r4922, %r1580;
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p388, %p24;
	@%p388 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f452, low;}

	// end inline asm
	add.s32 	%r4924, %r1199, %r401;
	mul.wide.s32 	%rd405, %r4924, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f452;

$L__BB0_591:
	not.pred 	%p389, %p26;
	@%p389 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f453, high;}

	// end inline asm
	add.s32 	%r4926, %r1199, %r402;
	mul.wide.s32 	%rd407, %r4926, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f453;

$L__BB0_593:
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p391, %p25;
	@%p391 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f454, low;}

	// end inline asm
	add.s32 	%r4928, %r1199, %r415;
	mul.wide.s32 	%rd409, %r4928, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f454;

$L__BB0_596:
	not.pred 	%p392, %p27;
	@%p392 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f455, high;}

	// end inline asm
	add.s32 	%r4930, %r1199, %r416;
	mul.wide.s32 	%rd411, %r4930, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f455;

$L__BB0_598:
	add.s32 	%r6977, %r1180, 1;
	add.s32 	%r4931, %r6977, %r1192;
	mul.lo.s32 	%r4932, %r4931, %r58;
	sub.s32 	%r1200, %r4932, %r1580;
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p394, %p24;
	@%p394 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3984;
  cvt.f32.f16 %f456, low;}

	// end inline asm
	add.s32 	%r4934, %r1200, %r401;
	mul.wide.s32 	%rd413, %r4934, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f456;

$L__BB0_601:
	not.pred 	%p395, %p26;
	@%p395 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3984;
  cvt.f32.f16 %f457, high;}

	// end inline asm
	add.s32 	%r4936, %r1200, %r402;
	mul.wide.s32 	%rd415, %r4936, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f457;

$L__BB0_603:
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p397, %p25;
	@%p397 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4065;
  cvt.f32.f16 %f458, low;}

	// end inline asm
	add.s32 	%r4938, %r1200, %r415;
	mul.wide.s32 	%rd417, %r4938, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f458;

$L__BB0_606:
	not.pred 	%p398, %p27;
	@%p398 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4065;
  cvt.f32.f16 %f459, high;}

	// end inline asm
	add.s32 	%r4940, %r1200, %r416;
	mul.wide.s32 	%rd419, %r4940, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f459;

$L__BB0_608:
	add.s32 	%r6978, %r1180, 1;
	add.s32 	%r4941, %r6978, %r1197;
	mul.lo.s32 	%r4942, %r4941, %r58;
	sub.s32 	%r1201, %r4942, %r1580;
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p400, %p24;
	@%p400 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1077;
  cvt.f32.f16 %f460, low;}

	// end inline asm
	add.s32 	%r4944, %r1201, %r401;
	mul.wide.s32 	%rd421, %r4944, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f460;

$L__BB0_611:
	not.pred 	%p401, %p26;
	@%p401 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1077;
  cvt.f32.f16 %f461, high;}

	// end inline asm
	add.s32 	%r4946, %r1201, %r402;
	mul.wide.s32 	%rd423, %r4946, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f461;

$L__BB0_613:
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p403, %p25;
	@%p403 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1089;
  cvt.f32.f16 %f462, low;}

	// end inline asm
	add.s32 	%r4948, %r1201, %r415;
	mul.wide.s32 	%rd425, %r4948, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f462;

$L__BB0_616:
	not.pred 	%p404, %p27;
	@%p404 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1089;
  cvt.f32.f16 %f463, high;}

	// end inline asm
	add.s32 	%r4950, %r1201, %r416;
	mul.wide.s32 	%rd427, %r4950, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f463;

$L__BB0_618:
	add.s32 	%r1202, %r1180, 2;
	add.s32 	%r4951, %r1202, %r1189;
	mul.lo.s32 	%r4952, %r4951, %r58;
	sub.s32 	%r1203, %r4952, %r1580;
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p406, %p24;
	@%p406 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4125;
  cvt.f32.f16 %f464, low;}

	// end inline asm
	add.s32 	%r4954, %r1203, %r401;
	mul.wide.s32 	%rd429, %r4954, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f464;

$L__BB0_621:
	not.pred 	%p407, %p26;
	@%p407 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4125;
  cvt.f32.f16 %f465, high;}

	// end inline asm
	add.s32 	%r4956, %r1203, %r402;
	mul.wide.s32 	%rd431, %r4956, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f465;

$L__BB0_623:
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p409, %p25;
	@%p409 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4159;
  cvt.f32.f16 %f466, low;}

	// end inline asm
	add.s32 	%r4958, %r1203, %r415;
	mul.wide.s32 	%rd433, %r4958, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f466;

$L__BB0_626:
	not.pred 	%p410, %p27;
	@%p410 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4159;
  cvt.f32.f16 %f467, high;}

	// end inline asm
	add.s32 	%r4960, %r1203, %r416;
	mul.wide.s32 	%rd435, %r4960, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f467;

$L__BB0_628:
	add.s32 	%r6979, %r1180, -1;
	mov.u32 	%r4961, 8;
	sub.s32 	%r4962, %r4961, %r1578;
	add.s32 	%r4963, %r4962, %r1579;
	mul.lo.s32 	%r1204, %r4833, %r4963;
	add.s32 	%r4965, %r6979, %r1204;
	mul.lo.s32 	%r4966, %r4965, %r58;
	sub.s32 	%r1205, %r4966, %r1580;
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p412, %p24;
	@%p412 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f468, low;}

	// end inline asm
	add.s32 	%r4968, %r1205, %r401;
	mul.wide.s32 	%rd437, %r4968, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f468;

$L__BB0_631:
	not.pred 	%p413, %p26;
	@%p413 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f469, high;}

	// end inline asm
	add.s32 	%r4970, %r1205, %r402;
	mul.wide.s32 	%rd439, %r4970, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f469;

$L__BB0_633:
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p415, %p25;
	@%p415 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f470, low;}

	// end inline asm
	add.s32 	%r4972, %r1205, %r415;
	mul.wide.s32 	%rd441, %r4972, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f470;

$L__BB0_636:
	not.pred 	%p416, %p27;
	@%p416 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f471, high;}

	// end inline asm
	add.s32 	%r4974, %r1205, %r416;
	mul.wide.s32 	%rd443, %r4974, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f471;

$L__BB0_638:
	mov.u32 	%r6984, 8;
	sub.s32 	%r6983, %r6984, %r1576;
	add.s32 	%r6982, %r6983, %r1577;
	add.s32 	%r6981, %r1184, %r6982;
	add.s32 	%r6980, %r1180, -1;
	mov.u32 	%r4975, 8;
	sub.s32 	%r4976, %r4975, %r1578;
	add.s32 	%r4977, %r4976, %r1579;
	add.s32 	%r4978, %r1179, %r6981;
	mul.lo.s32 	%r1206, %r4978, %r4977;
	add.s32 	%r4979, %r6980, %r1206;
	mul.lo.s32 	%r4980, %r4979, %r58;
	sub.s32 	%r1207, %r4980, %r1580;
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p418, %p24;
	@%p418 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f472, low;}

	// end inline asm
	add.s32 	%r4982, %r1207, %r401;
	mul.wide.s32 	%rd445, %r4982, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f472;

$L__BB0_641:
	not.pred 	%p419, %p26;
	@%p419 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f473, high;}

	// end inline asm
	add.s32 	%r4984, %r1207, %r402;
	mul.wide.s32 	%rd447, %r4984, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f473;

$L__BB0_643:
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p421, %p25;
	@%p421 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1113;
  cvt.f32.f16 %f474, low;}

	// end inline asm
	add.s32 	%r4986, %r1207, %r415;
	mul.wide.s32 	%rd449, %r4986, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f474;

$L__BB0_646:
	not.pred 	%p422, %p27;
	@%p422 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1113;
  cvt.f32.f16 %f475, high;}

	// end inline asm
	add.s32 	%r4988, %r1207, %r416;
	mul.wide.s32 	%rd451, %r4988, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f475;

$L__BB0_648:
	mov.u32 	%r4989, 8;
	sub.s32 	%r4990, %r4989, %r1578;
	add.s32 	%r4991, %r4990, %r1579;
	mul.lo.s32 	%r1208, %r4816, %r4991;
	add.s32 	%r4993, %r1180, %r1208;
	mul.lo.s32 	%r4994, %r4993, %r58;
	sub.s32 	%r1209, %r4994, %r1580;
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p424, %p24;
	@%p424 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f476, low;}

	// end inline asm
	add.s32 	%r4996, %r1209, %r401;
	mul.wide.s32 	%rd453, %r4996, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f476;

$L__BB0_651:
	not.pred 	%p425, %p26;
	@%p425 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f477, high;}

	// end inline asm
	add.s32 	%r4998, %r1209, %r402;
	mul.wide.s32 	%rd455, %r4998, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f477;

$L__BB0_653:
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p427, %p25;
	@%p427 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f478, low;}

	// end inline asm
	add.s32 	%r5000, %r1209, %r415;
	mul.wide.s32 	%rd457, %r5000, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f478;

$L__BB0_656:
	not.pred 	%p428, %p27;
	@%p428 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f479, high;}

	// end inline asm
	add.s32 	%r5002, %r1209, %r416;
	mul.wide.s32 	%rd459, %r5002, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f479;

$L__BB0_658:
	add.s32 	%r5003, %r1180, %r1204;
	mul.lo.s32 	%r5004, %r5003, %r58;
	sub.s32 	%r1210, %r5004, %r1580;
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p430, %p24;
	@%p430 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f480, low;}

	// end inline asm
	add.s32 	%r5006, %r1210, %r401;
	mul.wide.s32 	%rd461, %r5006, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f480;

$L__BB0_661:
	not.pred 	%p431, %p26;
	@%p431 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f481, high;}

	// end inline asm
	add.s32 	%r5008, %r1210, %r402;
	mul.wide.s32 	%rd463, %r5008, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f481;

$L__BB0_663:
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p433, %p25;
	@%p433 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f482, low;}

	// end inline asm
	add.s32 	%r5010, %r1210, %r415;
	mul.wide.s32 	%rd465, %r5010, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f482;

$L__BB0_666:
	not.pred 	%p434, %p27;
	@%p434 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f483, high;}

	// end inline asm
	add.s32 	%r5012, %r1210, %r416;
	mul.wide.s32 	%rd467, %r5012, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f483;

$L__BB0_668:
	add.s32 	%r5013, %r1180, %r1206;
	mul.lo.s32 	%r5014, %r5013, %r58;
	sub.s32 	%r1211, %r5014, %r1580;
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p436, %p24;
	@%p436 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f484, low;}

	// end inline asm
	add.s32 	%r5016, %r1211, %r401;
	mul.wide.s32 	%rd469, %r5016, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f484;

$L__BB0_671:
	not.pred 	%p437, %p26;
	@%p437 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f485, high;}

	// end inline asm
	add.s32 	%r5018, %r1211, %r402;
	mul.wide.s32 	%rd471, %r5018, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f485;

$L__BB0_673:
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p439, %p25;
	@%p439 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f486, low;}

	// end inline asm
	add.s32 	%r5020, %r1211, %r415;
	mul.wide.s32 	%rd473, %r5020, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f486;

$L__BB0_676:
	not.pred 	%p440, %p27;
	@%p440 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f487, high;}

	// end inline asm
	add.s32 	%r5022, %r1211, %r416;
	mul.wide.s32 	%rd475, %r5022, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f487;

$L__BB0_678:
	add.s32 	%r6985, %r1180, 1;
	add.s32 	%r5023, %r6985, %r1208;
	mul.lo.s32 	%r5024, %r5023, %r58;
	sub.s32 	%r1212, %r5024, %r1580;
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p442, %p24;
	@%p442 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f488, low;}

	// end inline asm
	add.s32 	%r5026, %r1212, %r401;
	mul.wide.s32 	%rd477, %r5026, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f488;

$L__BB0_681:
	not.pred 	%p443, %p26;
	@%p443 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f489, high;}

	// end inline asm
	add.s32 	%r5028, %r1212, %r402;
	mul.wide.s32 	%rd479, %r5028, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f489;

$L__BB0_683:
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p445, %p25;
	@%p445 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f490, low;}

	// end inline asm
	add.s32 	%r5030, %r1212, %r415;
	mul.wide.s32 	%rd481, %r5030, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f490;

$L__BB0_686:
	not.pred 	%p446, %p27;
	@%p446 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f491, high;}

	// end inline asm
	add.s32 	%r5032, %r1212, %r416;
	mul.wide.s32 	%rd483, %r5032, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f491;

$L__BB0_688:
	add.s32 	%r6986, %r1180, 1;
	add.s32 	%r5033, %r6986, %r1204;
	mul.lo.s32 	%r5034, %r5033, %r58;
	sub.s32 	%r1213, %r5034, %r1580;
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p448, %p24;
	@%p448 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f492, low;}

	// end inline asm
	add.s32 	%r5036, %r1213, %r401;
	mul.wide.s32 	%rd485, %r5036, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f492;

$L__BB0_691:
	not.pred 	%p449, %p26;
	@%p449 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f493, high;}

	// end inline asm
	add.s32 	%r5038, %r1213, %r402;
	mul.wide.s32 	%rd487, %r5038, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f493;

$L__BB0_693:
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p451, %p25;
	@%p451 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f494, low;}

	// end inline asm
	add.s32 	%r5040, %r1213, %r415;
	mul.wide.s32 	%rd489, %r5040, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f494;

$L__BB0_696:
	not.pred 	%p452, %p27;
	@%p452 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f495, high;}

	// end inline asm
	add.s32 	%r5042, %r1213, %r416;
	mul.wide.s32 	%rd491, %r5042, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f495;

$L__BB0_698:
	add.s32 	%r6987, %r1180, 1;
	add.s32 	%r5043, %r6987, %r1206;
	mul.lo.s32 	%r5044, %r5043, %r58;
	sub.s32 	%r1214, %r5044, %r1580;
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p454, %p24;
	@%p454 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7233;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5046, %r1214, %r401;
	mul.wide.s32 	%rd493, %r5046, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f496;

$L__BB0_701:
	not.pred 	%p455, %p26;
	@%p455 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7233;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5048, %r1214, %r402;
	mul.wide.s32 	%rd495, %r5048, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f497;

$L__BB0_703:
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p457, %p25;
	@%p457 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7232;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5050, %r1214, %r415;
	mul.wide.s32 	%rd497, %r5050, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f498;

$L__BB0_706:
	not.pred 	%p458, %p27;
	@%p458 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7232;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5052, %r1214, %r416;
	mul.wide.s32 	%rd499, %r5052, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f499;

$L__BB0_708:
	add.s32 	%r5053, %r1202, %r1206;
	mul.lo.s32 	%r5054, %r5053, %r58;
	sub.s32 	%r1215, %r5054, %r1580;
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p460, %p24;
	@%p460 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1162;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5056, %r1215, %r401;
	mul.wide.s32 	%rd501, %r5056, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f500;

$L__BB0_711:
	not.pred 	%p461, %p26;
	@%p461 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1162;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5058, %r1215, %r402;
	mul.wide.s32 	%rd503, %r5058, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f501;

$L__BB0_713:
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p463, %p25;
	@%p463 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5060, %r1215, %r415;
	mul.wide.s32 	%rd505, %r5060, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f502;

$L__BB0_716:
	not.pred 	%p464, %p27;
	@%p464 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5062, %r1215, %r416;
	mul.wide.s32 	%rd507, %r5062, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f503;

$L__BB0_718:
	add.s32 	%r1216, %r1179, 1;
	add.s32 	%r5063, %r1216, %r1184;
	mov.u32 	%r5064, 8;
	sub.s32 	%r5065, %r5064, %r1578;
	add.s32 	%r5066, %r5065, %r1579;
	mad.lo.s32 	%r5067, %r5063, %r5066, %r1180;
	mul.lo.s32 	%r5068, %r5067, %r58;
	sub.s32 	%r1217, %r5068, %r1580;
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p466, %p24;
	@%p466 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7231;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5070, %r1217, %r401;
	mul.wide.s32 	%rd509, %r5070, 4;
	add.s64 	%rd510, %rd33, %rd509;
	st.global.f32 	[%rd510], %f504;

$L__BB0_721:
	not.pred 	%p467, %p26;
	@%p467 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7231;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5072, %r1217, %r402;
	mul.wide.s32 	%rd511, %r5072, 4;
	add.s64 	%rd512, %rd33, %rd511;
	st.global.f32 	[%rd512], %f505;

$L__BB0_723:
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p469, %p25;
	@%p469 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7230;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5074, %r1217, %r415;
	mul.wide.s32 	%rd513, %r5074, 4;
	add.s64 	%rd514, %rd33, %rd513;
	st.global.f32 	[%rd514], %f506;

$L__BB0_726:
	not.pred 	%p470, %p27;
	@%p470 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7230;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5076, %r1217, %r416;
	mul.wide.s32 	%rd515, %r5076, 4;
	add.s64 	%rd516, %rd33, %rd515;
	st.global.f32 	[%rd516], %f507;

$L__BB0_728:
	mov.u32 	%r6991, 8;
	sub.s32 	%r6990, %r6991, %r1576;
	add.s32 	%r6989, %r6990, %r1577;
	add.s32 	%r6988, %r1184, %r6989;
	mov.u32 	%r5077, 8;
	sub.s32 	%r5078, %r5077, %r1578;
	add.s32 	%r5079, %r5078, %r1579;
	add.s32 	%r5080, %r1216, %r6988;
	mul.lo.s32 	%r1218, %r5080, %r5079;
	add.s32 	%r5081, %r1180, %r1218;
	mul.lo.s32 	%r5082, %r5081, %r58;
	sub.s32 	%r1219, %r5082, %r1580;
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p472, %p24;
	@%p472 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7229;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5084, %r1219, %r401;
	mul.wide.s32 	%rd517, %r5084, 4;
	add.s64 	%rd518, %rd33, %rd517;
	st.global.f32 	[%rd518], %f508;

$L__BB0_731:
	not.pred 	%p473, %p26;
	@%p473 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7229;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5086, %r1219, %r402;
	mul.wide.s32 	%rd519, %r5086, 4;
	add.s64 	%rd520, %rd33, %rd519;
	st.global.f32 	[%rd520], %f509;

$L__BB0_733:
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p475, %p25;
	@%p475 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7228;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5088, %r1219, %r415;
	mul.wide.s32 	%rd521, %r5088, 4;
	add.s64 	%rd522, %rd33, %rd521;
	st.global.f32 	[%rd522], %f510;

$L__BB0_736:
	not.pred 	%p476, %p27;
	@%p476 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7228;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5090, %r1219, %r416;
	mul.wide.s32 	%rd523, %r5090, 4;
	add.s64 	%rd524, %rd33, %rd523;
	st.global.f32 	[%rd524], %f511;

$L__BB0_738:
	add.s32 	%r6992, %r1180, 1;
	add.s32 	%r5091, %r6992, %r1218;
	mul.lo.s32 	%r5092, %r5091, %r58;
	sub.s32 	%r1220, %r5092, %r1580;
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p478, %p24;
	@%p478 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7227;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5094, %r1220, %r401;
	mul.wide.s32 	%rd525, %r5094, 4;
	add.s64 	%rd526, %rd33, %rd525;
	st.global.f32 	[%rd526], %f512;

$L__BB0_741:
	not.pred 	%p479, %p26;
	@%p479 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7227;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5096, %r1220, %r402;
	mul.wide.s32 	%rd527, %r5096, 4;
	add.s64 	%rd528, %rd33, %rd527;
	st.global.f32 	[%rd528], %f513;

$L__BB0_743:
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p481, %p25;
	@%p481 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7226;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5098, %r1220, %r415;
	mul.wide.s32 	%rd529, %r5098, 4;
	add.s64 	%rd530, %rd33, %rd529;
	st.global.f32 	[%rd530], %f514;

$L__BB0_746:
	not.pred 	%p482, %p27;
	@%p482 bra 	$L__BB0_748;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7226;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5100, %r1220, %r416;
	mul.wide.s32 	%rd531, %r5100, 4;
	add.s64 	%rd532, %rd33, %rd531;
	st.global.f32 	[%rd532], %f515;

$L__BB0_748:
	setp.ne.s32 	%p483, %r41, %r2026;
	ld.param.u64 	%rd533, [%rd1+104];
	cvta.to.global.u64 	%rd34, %rd533;
	@%p483 bra 	$L__BB0_750;

	mad.lo.s32 	%r5102, %r656, %r1565, %r44;
	mul.lo.s32 	%r5103, %r1563, %r5102;
	mul.lo.s32 	%r5104, %r5103, 768;
	mad.lo.s32 	%r5106, %r42, 384, %r5104;
	add.s32 	%r5107, %r5106, -64;
	mul.wide.s32 	%rd534, %r5107, 4;
	add.s64 	%rd535, %rd34, %rd534;
	add.s64 	%rd537, %rd535, %rd299;
	st.global.v4.u32 	[%rd537+256], {%r3603, %r3680, %r1107, %r1113};
	st.global.v4.u32 	[%rd537+1024], {%r3370, %r3447, %r1053, %r1065};
	add.s64 	%rd539, %rd535, %rd301;
	st.global.v2.u32 	[%rd539+768], {%r3646, %r3712};
	st.global.v2.u32 	[%rd539+1536], {%r3413, %r3479};

$L__BB0_750:
	setp.ne.s32 	%p484, %r42, %r2031;
	@%p484 bra 	$L__BB0_755;

	ld.param.u64 	%rd576, [%rd1+104];
	cvta.to.global.u64 	%rd575, %rd576;
	not.b32 	%r6975, %r41;
	add.s32 	%r6974, %r1562, %r6975;
	setp.eq.s32 	%p485, %r41, %r2026;
	mad.lo.s32 	%r5110, %r657, %r1564, %r43;
	mul.lo.s32 	%r5114, %r5110, %r1641;
	mad.lo.s32 	%r5117, %r6974, 384, %r5114;
	add.s32 	%r5118, %r5117, -64;
	mad.lo.s32 	%r5121, %r1643, %r69, %r5118;
	mul.wide.s32 	%rd540, %r5121, 4;
	add.s64 	%rd541, %rd575, %rd540;
	add.s64 	%rd543, %rd541, %rd299;
	st.global.v4.u32 	[%rd543+256], {%r3524, %r3558, %r1077, %r1089};
	st.global.v4.u32 	[%rd543+1024], {%r4125, %r4159, %r1162, %r1163};
	add.s64 	%rd35, %rd541, %rd301;
	@%p485 bra 	$L__BB0_753;

	st.global.v2.u32 	[%rd35], {%r3413, %r3479};

$L__BB0_753:
	st.global.v2.u32 	[%rd35+768], {%r3984, %r4065};
	@%p276 bra 	$L__BB0_755;

	st.global.v2.u32 	[%rd35+1536], {%r7354, %r7353};

$L__BB0_755:
	setp.ge.s32 	%p487, %r41, %r2026;
	@%p487 bra 	$L__BB0_757;

	add.s32 	%r6973, %r70, %r70;
	mul.lo.s32 	%r5122, %r1563, 320;
	mul.lo.s32 	%r5124, %r42, 320;
	mad.lo.s32 	%r5125, %r5122, %r41, %r5124;
	add.s32 	%r5128, %r6973, -64;
	mad.lo.s32 	%r5133, %r5128, %r2031, %r2028;
	add.s32 	%r5134, %r5125, %r5133;
	shl.b32 	%r5135, %r5134, 2;
	mov.u32 	%r5136, _ZN6kernel5shmemE;
	add.s32 	%r5137, %r5136, %r5135;
	shl.b32 	%r5138, %r46, 4;
	add.s32 	%r5139, %r5137, %r5138;
	st.shared.v4.u32 	[%r5139], {%r7402, %r7401, %r7397, %r7395};
	shl.b32 	%r5140, %r46, 3;
	add.s32 	%r5141, %r5137, %r5140;
	st.shared.v2.u32 	[%r5141+512], {%r7201, %r7196};
	st.shared.v4.u32 	[%r5139+768], {%r7225, %r7216, %r7188, %r7184};

$L__BB0_757:
	setp.ge.s32 	%p488, %r42, %r2031;
	@%p488 bra 	$L__BB0_761;

	not.b32 	%r6972, %r41;
	add.s32 	%r6971, %r1562, %r6972;
	mad.lo.s32 	%r5147, %r6971, 384, %r2034;
	mad.lo.s32 	%r5151, %r2029, %r42, %r5147;
	add.s32 	%r5157, %r5151, %r2032;
	shl.b32 	%r5158, %r5157, 2;
	mov.u32 	%r5159, _ZN6kernel5shmemE;
	add.s32 	%r5160, %r5159, %r5158;
	shl.b32 	%r5161, %r46, 3;
	add.s32 	%r5162, %r5160, %r5161;
	@%p487 bra 	$L__BB0_760;

	add.s32 	%r6956, %r5162, -256;
	st.shared.v2.u32 	[%r6956], {%r7220, %r7213};

$L__BB0_760:
	shl.b32 	%r5182, %r46, 4;
	add.s32 	%r5183, %r5160, %r5182;
	st.shared.v4.u32 	[%r5183], {%r7211, %r7207, %r7176, %r7172};
	add.s32 	%r6957, %r5162, -256;
	st.shared.v2.u32 	[%r6957+768], {%r7179, %r7173};
	st.shared.v4.u32 	[%r5183+768], {%r7400, %r7399, %r7388, %r7387};

$L__BB0_761:
	bar.sync 	0;
	ld.param.u64 	%rd545, [%rd1+104];
	cvta.to.global.u64 	%rd36, %rd545;
	mov.u32 	%r7459, %r7124;
	mov.u32 	%r7460, %r7125;
	mov.u32 	%r7445, %r7126;
	mov.u32 	%r7446, %r7127;
	mov.u32 	%r7447, %r7128;
	mov.u32 	%r7448, %r7129;
	mov.u32 	%r7461, %r7130;
	mov.u32 	%r7463, %r7132;
	mov.u32 	%r7451, %r7136;
	mov.u32 	%r7452, %r7137;
	mov.u32 	%r7453, %r7138;
	mov.u32 	%r7454, %r7139;
	@%p276 bra 	$L__BB0_765;

	setp.eq.s32 	%p491, %r42, 0;
	mad.lo.s32 	%r5186, %r656, %r1565, %r44;
	mad.lo.s32 	%r5187, %r5186, 768, 384;
	mul.lo.s32 	%r5188, %r5187, %r1563;
	mad.lo.s32 	%r5189, %r42, 384, %r5188;
	add.s32 	%r5190, %r5189, -128;
	mul.wide.s32 	%rd546, %r5190, 4;
	add.s64 	%rd547, %rd36, %rd546;
	add.s64 	%rd549, %rd547, %rd299;
	add.s64 	%rd37, %rd549, 512;
	mov.u32 	%r7459, %r7124;
	mov.u32 	%r7460, %r7125;
	mov.u32 	%r7461, %r7130;
	mov.u32 	%r7463, %r7132;
	@%p491 bra 	$L__BB0_764;

	ld.global.v4.u32 	{%r7460, %r7459, %r7463, %r7461}, [%rd37+-512];

$L__BB0_764:
	ld.global.v4.u32 	{%r7447, %r7445, %r7448, %r7446}, [%rd37];
	ld.global.v4.u32 	{%r7454, %r7453, %r7452, %r7451}, [%rd37+512];
	ld.global.v4.u32 	{%r7456, %r7455, %r7458, %r7457}, [%rd37+1024];

$L__BB0_765:
	mov.u32 	%r7462, %r7131;
	mov.u32 	%r7464, %r7133;
	mov.u32 	%r7465, %r7134;
	mov.u32 	%r7466, %r7135;
	mov.u32 	%r7467, %r7140;
	mov.u32 	%r7468, %r7141;
	mov.u32 	%r7469, %r7142;
	mov.u32 	%r7470, %r7143;
	@%p279 bra 	$L__BB0_767;

	not.b32 	%r6970, %r41;
	add.s32 	%r6969, %r1562, %r6970;
	mad.lo.s32 	%r5208, %r657, %r1564, %r43;
	mad.lo.s32 	%r5214, %r6969, 384, %r70;
	mad.lo.s32 	%r5215, %r5208, %r1641, %r5214;
	mad.lo.s32 	%r5218, %r1643, %r69, %r5215;
	mul.wide.s32 	%rd550, %r5218, 4;
	add.s64 	%rd551, %rd36, %rd550;
	add.s64 	%rd553, %rd551, %rd299;
	ld.global.v4.u32 	{%r7472, %r7471, %r7474, %r7473}, [%rd553];
	ld.global.v4.u32 	{%r7470, %r7468, %r7466, %r7465}, [%rd553+512];
	ld.global.v4.u32 	{%r7469, %r7467, %r7464, %r7462}, [%rd553+1024];
	ld.global.v4.u32 	{%r7460, %r7459, %r7463, %r7461}, [%rd553+1536];

$L__BB0_767:
	neg.s32 	%r6963, %r1567;
	not.b32 	%r6962, %r44;
	add.s32 	%r6961, %r1565, %r6962;
	mul.lo.s32 	%r6960, %r6961, %r1566;
	not.b32 	%r6959, %r43;
	add.s32 	%r6958, %r1564, %r6959;
	mad.lo.s32 	%r5242, %r6958, %r1566, %r6960;
	add.s32 	%r5243, %r5242, %r1567;
	add.s32 	%r5252, %r5243, %r2438;
	add.s32 	%r1299, %r7252, 1;
	add.s32 	%r5253, %r1299, %r5252;
	div.s32 	%r5254, %r5253, %r1567;
	mad.lo.s32 	%r1300, %r5254, %r6963, %r5253;
	mad.lo.s32 	%r5261, %r5254, %r48, %r2449;
	ld.param.u64 	%rd554, [%rd1+120];
	cvta.to.global.u64 	%rd555, %rd554;
	rem.s32 	%r5262, %r5261, %r1568;
	shr.u32 	%r5263, %r5262, 31;
	add.s32 	%r5264, %r5262, %r5263;
	shr.s32 	%r5265, %r5264, 1;
	mad.lo.s32 	%r5266, %r5265, %r1567, %r1300;
	shl.b32 	%r5267, %r5266, 5;
	add.s32 	%r5268, %r5267, %r46;
	cvt.s64.s32 	%rd38, %r5268;
	mul.wide.s32 	%rd556, %r5268, 4;
	add.s64 	%rd557, %rd555, %rd556;
	ld.global.u32 	%r7254, [%rd557];
	ld.param.u64 	%rd558, [%rd1+128];
	cvta.to.global.u64 	%rd39, %rd558;
	@%p142 bra 	$L__BB0_769;
	bra.uni 	$L__BB0_768;

$L__BB0_769:
	shl.b64 	%rd561, %rd38, 2;
	add.s64 	%rd562, %rd39, %rd561;
	ld.global.u32 	%r7253, [%rd562];
	bra.uni 	$L__BB0_770;

$L__BB0_768:
	shl.b32 	%r5269, %r1300, 5;
	add.s32 	%r5270, %r5269, %r46;
	mul.wide.s32 	%rd559, %r5270, 16;
	add.s64 	%rd560, %rd39, %rd559;
	ld.global.v4.u32 	{%r5271, %r5272, %r5273, %r5274}, [%rd560];
	mov.u32 	%r7084, %r7088;
	mov.u32 	%r7085, %r7089;
	mov.u32 	%r7086, %r7090;
	mov.u32 	%r7087, %r7091;
	mov.u32 	%r7088, %r7092;
	mov.u32 	%r7089, %r7093;
	mov.u32 	%r7090, %r7094;
	mov.u32 	%r7091, %r7095;
	mov.u32 	%r7092, %r5274;
	mov.u32 	%r7093, %r5273;
	mov.u32 	%r7094, %r5272;
	mov.u32 	%r7095, %r5271;

$L__BB0_770:
	mov.f32 	%f563, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5275, {low,high};}

	// end inline asm
	selp.b32 	%r5277, %r7079, %r5275, %p28;
	// begin inline asm
	{mul.f16x2 %r5276,%r5277,%r7222;
}
	// end inline asm
	selp.b32 	%r5280, %r7083, %r5275, %p28;
	// begin inline asm
	{mul.f16x2 %r5279,%r5280,%r7215;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5282, {low,high};}

	// end inline asm
	selp.b32 	%r5284, %r7079, %r5282, %p28;
	// begin inline asm
	{mul.f16x2 %r5283,%r5284,%r7203;
}
	// end inline asm
	selp.b32 	%r5287, %r7083, %r5282, %p28;
	// begin inline asm
	{mul.f16x2 %r5286,%r5287,%r7198;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5289, {low,high};}

	// end inline asm
	selp.b32 	%r5291, %r7079, %r5289, %p28;
	// begin inline asm
	{mul.f16x2 %r5290,%r5291,%r7190;
}
	// end inline asm
	selp.b32 	%r5294, %r7083, %r5289, %p28;
	// begin inline asm
	{mul.f16x2 %r5293,%r5294,%r7189;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5296, {low,high};}

	// end inline asm
	selp.b32 	%r5298, %r7079, %r5296, %p28;
	// begin inline asm
	{mul.f16x2 %r5297,%r5298,%r7194;
}
	// end inline asm
	selp.b32 	%r5301, %r7083, %r5296, %p28;
	// begin inline asm
	{mul.f16x2 %r5300,%r5301,%r7193;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5303, {low,high};}

	// end inline asm
	selp.b32 	%r5305, %r7079, %r5303, %p28;
	// begin inline asm
	{mul.f16x2 %r5304,%r5305,%r7192;
}
	// end inline asm
	selp.b32 	%r5308, %r7083, %r5303, %p28;
	// begin inline asm
	{mul.f16x2 %r5307,%r5308,%r7186;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5310, {low,high};}

	// end inline asm
	selp.b32 	%r5312, %r7079, %r5310, %p28;
	// begin inline asm
	{mul.f16x2 %r5311,%r5312,%r7182;
}
	// end inline asm
	selp.b32 	%r5315, %r7083, %r5310, %p28;
	// begin inline asm
	{mul.f16x2 %r5314,%r5315,%r7181;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5317, {low,high};}

	// end inline asm
	selp.b32 	%r5319, %r7079, %r5317, %p28;
	// begin inline asm
	{mul.f16x2 %r5318,%r5319,%r7180;
}
	// end inline asm
	selp.b32 	%r5322, %r7083, %r5317, %p28;
	// begin inline asm
	{mul.f16x2 %r5321,%r5322,%r7174;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5324, {low,high};}

	// end inline asm
	selp.b32 	%r5326, %r7079, %r5324, %p28;
	// begin inline asm
	{mul.f16x2 %r5325,%r5326,%r7167;
}
	// end inline asm
	selp.b32 	%r5329, %r7083, %r5324, %p28;
	// begin inline asm
	{mul.f16x2 %r5328,%r5329,%r7166;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5331, {low,high};}

	// end inline asm
	selp.b32 	%r5333, %r7079, %r5331, %p28;
	// begin inline asm
	{mul.f16x2 %r5332,%r5333,%r7143;
}
	// end inline asm
	selp.b32 	%r5336, %r7083, %r5331, %p28;
	// begin inline asm
	{mul.f16x2 %r5335,%r5336,%r7141;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5338, {low,high};}

	// end inline asm
	selp.b32 	%r5340, %r7079, %r5338, %p28;
	// begin inline asm
	{mul.f16x2 %r5339,%r5340,%r7142;
}
	// end inline asm
	selp.b32 	%r5343, %r7083, %r5338, %p28;
	// begin inline asm
	{mul.f16x2 %r5342,%r5343,%r7140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5345, {low,high};}

	// end inline asm
	selp.b32 	%r5347, %r7079, %r5345, %p28;
	// begin inline asm
	{mul.f16x2 %r5346,%r5347,%r7159;
}
	// end inline asm
	selp.b32 	%r5350, %r7083, %r5345, %p28;
	// begin inline asm
	{mul.f16x2 %r5349,%r5350,%r7158;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5352, {low,high};}

	// end inline asm
	selp.b32 	%r5354, %r7079, %r5352, %p28;
	// begin inline asm
	{mul.f16x2 %r5353,%r5354,%r7163;
}
	// end inline asm
	selp.b32 	%r5357, %r7083, %r5352, %p28;
	// begin inline asm
	{mul.f16x2 %r5356,%r5357,%r7162;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5359, {low,high};}

	// end inline asm
	selp.b32 	%r5361, %r7079, %r5359, %p28;
	// begin inline asm
	{mul.f16x2 %r5360,%r5361,%r7161;
}
	// end inline asm
	selp.b32 	%r5364, %r7083, %r5359, %p28;
	// begin inline asm
	{mul.f16x2 %r5363,%r5364,%r7156;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5366, {low,high};}

	// end inline asm
	selp.b32 	%r5368, %r7079, %r5366, %p28;
	// begin inline asm
	{mul.f16x2 %r5367,%r5368,%r7151;
}
	// end inline asm
	selp.b32 	%r5371, %r7083, %r5366, %p28;
	// begin inline asm
	{mul.f16x2 %r5370,%r5371,%r7150;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5373, {low,high};}

	// end inline asm
	selp.b32 	%r5375, %r7079, %r5373, %p28;
	// begin inline asm
	{mul.f16x2 %r5374,%r5375,%r7153;
}
	// end inline asm
	selp.b32 	%r5378, %r7083, %r5373, %p28;
	// begin inline asm
	{mul.f16x2 %r5377,%r5378,%r7152;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5380, {low,high};}

	// end inline asm
	selp.b32 	%r5382, %r7079, %r5380, %p28;
	// begin inline asm
	{mul.f16x2 %r5381,%r5382,%r7139;
}
	// end inline asm
	selp.b32 	%r5385, %r7083, %r5380, %p28;
	// begin inline asm
	{mul.f16x2 %r5384,%r5385,%r7138;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5387, {low,high};}

	// end inline asm
	selp.b32 	%r5389, %r7079, %r5387, %p28;
	// begin inline asm
	{mul.f16x2 %r5388,%r5389,%r7137;
}
	// end inline asm
	selp.b32 	%r5392, %r7083, %r5387, %p28;
	// begin inline asm
	{mul.f16x2 %r5391,%r5392,%r7136;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5394, {low,high};}

	// end inline asm
	selp.b32 	%r5396, %r7079, %r5394, %p28;
	// begin inline asm
	{mul.f16x2 %r5395,%r5396,%r7135;
}
	// end inline asm
	selp.b32 	%r5399, %r7083, %r5394, %p28;
	// begin inline asm
	{mul.f16x2 %r5398,%r5399,%r7134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5401, {low,high};}

	// end inline asm
	selp.b32 	%r5403, %r7079, %r5401, %p28;
	// begin inline asm
	{mul.f16x2 %r5402,%r5403,%r7145;
}
	// end inline asm
	selp.b32 	%r5406, %r7083, %r5401, %p28;
	// begin inline asm
	{mul.f16x2 %r5405,%r5406,%r7144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5408, {low,high};}

	// end inline asm
	selp.b32 	%r5410, %r7079, %r5408, %p28;
	// begin inline asm
	{mul.f16x2 %r5409,%r5410,%r7133;
}
	// end inline asm
	selp.b32 	%r5413, %r7083, %r5408, %p28;
	// begin inline asm
	{mul.f16x2 %r5412,%r5413,%r7131;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5415, {low,high};}

	// end inline asm
	selp.b32 	%r5417, %r7079, %r5415, %p28;
	// begin inline asm
	{mul.f16x2 %r5416,%r5417,%r7132;
}
	// end inline asm
	selp.b32 	%r5420, %r7083, %r5415, %p28;
	// begin inline asm
	{mul.f16x2 %r5419,%r5420,%r7130;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5422, {low,high};}

	// end inline asm
	selp.b32 	%r5424, %r7079, %r5422, %p28;
	// begin inline asm
	{mul.f16x2 %r5423,%r5424,%r7129;
}
	// end inline asm
	selp.b32 	%r5427, %r7083, %r5422, %p28;
	// begin inline asm
	{mul.f16x2 %r5426,%r5427,%r7127;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5429, {low,high};}

	// end inline asm
	selp.b32 	%r5431, %r7079, %r5429, %p28;
	// begin inline asm
	{mul.f16x2 %r5430,%r5431,%r7128;
}
	// end inline asm
	selp.b32 	%r5434, %r7083, %r5429, %p28;
	// begin inline asm
	{mul.f16x2 %r5433,%r5434,%r7126;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5436, {low,high};}

	// end inline asm
	selp.b32 	%r5438, %r7079, %r5436, %p28;
	// begin inline asm
	{mul.f16x2 %r5437,%r5438,%r7125;
}
	// end inline asm
	selp.b32 	%r5441, %r7083, %r5436, %p28;
	// begin inline asm
	{mul.f16x2 %r5440,%r5441,%r7124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5443,%r7249,%r3413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5446,%r3524,%r3370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5449,%r5443,%r5446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5452,%r6993,%r5449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5455,%r5276,%r5452;
}
	// end inline asm
	selp.b32 	%r7217, %r5276, %r5455, %p28;
	// begin inline asm
	{sub.f16x2 %r5458,%r7248,%r3479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5461,%r3558,%r3447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5464,%r5458,%r5461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5467,%r6993,%r5464;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5470,%r5279,%r5467;
}
	// end inline asm
	selp.b32 	%r7212, %r5279, %r5470, %p28;
	// begin inline asm
	{sub.f16x2 %r5473,%r7245,%r3646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5476,%r7251,%r3603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5479,%r5473,%r5476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5482,%r6993,%r5479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5485,%r5283,%r5482;
}
	// end inline asm
	selp.b32 	%r7221, %r5283, %r5485, %p28;
	// begin inline asm
	{sub.f16x2 %r5488,%r7244,%r3712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5491,%r7250,%r3680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5494,%r5488,%r5491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5497,%r6993,%r5494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5500,%r5286,%r5497;
}
	// end inline asm
	selp.b32 	%r7214, %r5286, %r5500, %p28;
	// begin inline asm
	{sub.f16x2 %r5503,%r7248,%r7249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5506,%r7078,%r5503;
}
	// end inline asm
	@%p28 bra 	$L__BB0_772;
	bra.uni 	$L__BB0_771;

$L__BB0_772:
	// begin inline asm
	{neg.f16x2 %r7488,%r5290;
}
	// end inline asm
	bra.uni 	$L__BB0_773;

$L__BB0_771:
	// begin inline asm
	{mul.f16x2 %r7488,%r7079,%r5503;
}
	// end inline asm

$L__BB0_773:
	mov.u32 	%r5517, 31;
	mov.u32 	%r5519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5515,%r7488,%r5517,%r2134,%r5519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5520,%r5506,%r5515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5523,%r1077,%r1053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5526,%r5523,%r5520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5529,%r6993,%r5526;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7219,%r5290,%r5529;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5535,%r7250,%r7251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5538,%r7078,%r5535;
}
	// end inline asm
	mov.u32 	%r7489, %r5297;
	@%p28 bra 	$L__BB0_775;

	// begin inline asm
	{mul.f16x2 %r7489,%r7079,%r5535;
}
	// end inline asm

$L__BB0_775:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5547,%r7489,%r5517,%r2134,%r5519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5552,%r5538,%r5547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5555,%r7239,%r1053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5558,%r5552,%r5555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5561,%r6993,%r5558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7224,%r5297,%r5561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5567,%r7241,%r7249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5570,%r7247,%r7251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5573,%r5567,%r5570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5576,%r6993,%r5573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5579,%r5304,%r5576;
}
	// end inline asm
	selp.b32 	%r7222, %r5304, %r5579, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7249;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5584,%r7249,%r436,%r2134,%r5519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5584;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5590, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5591,%r5590,%r7248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5594,%r7082,%r5591;
}
	// end inline asm
	@%p28 bra 	$L__BB0_777;
	bra.uni 	$L__BB0_776;

$L__BB0_777:
	// begin inline asm
	{neg.f16x2 %r7490,%r5293;
}
	// end inline asm
	bra.uni 	$L__BB0_778;

$L__BB0_776:
	// begin inline asm
	{mul.f16x2 %r7490,%r7083,%r5591;
}
	// end inline asm

$L__BB0_778:
	mov.u32 	%r5609, 31;
	mov.u32 	%r5633, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5607,%r7490,%r5609,%r2134,%r5633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5612,%r5594,%r5607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5615,%r1089,%r1065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5618,%r5615,%r5612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5621,%r6993,%r5618;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7218,%r5293,%r5621;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7251;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5629,%r7251,%r436,%r2134,%r5633;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5629;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5635, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5636,%r5635,%r7250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5639,%r7082,%r5636;
}
	// end inline asm
	mov.u32 	%r7491, %r5300;
	@%p28 bra 	$L__BB0_780;

	// begin inline asm
	{mul.f16x2 %r7491,%r7083,%r5636;
}
	// end inline asm

$L__BB0_780:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5650,%r7491,%r5609,%r2134,%r5633;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5655,%r5639,%r5650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5658,%r7238,%r1065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5661,%r5655,%r5658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5664,%r6993,%r5661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7223,%r5300,%r5664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5670,%r7240,%r7248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5673,%r7246,%r7250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5676,%r5670,%r5673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5679,%r6993,%r5676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5682,%r5307,%r5679;
}
	// end inline asm
	selp.b32 	%r7215, %r5307, %r5682, %p28;
	// begin inline asm
	{sub.f16x2 %r5685,%r7246,%r7247;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5688,%r7078,%r5685;
}
	// end inline asm
	mov.u32 	%r7492, %r5311;
	@%p28 bra 	$L__BB0_782;

	// begin inline asm
	{mul.f16x2 %r7492,%r7079,%r5685;
}
	// end inline asm

$L__BB0_782:
	mov.u32 	%r5699, 31;
	mov.u32 	%r5738, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5697,%r7492,%r5699,%r2134,%r5738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5702,%r5688,%r5697;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5705,%r7233,%r1077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5708,%r5702,%r5705;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5711,%r6993,%r5708;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7210,%r5311,%r5711;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5717,%r7235,%r3984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5720,%r4125,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5723,%r5717,%r5720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5726,%r6993,%r5723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5729,%r5318,%r5726;
}
	// end inline asm
	selp.b32 	%r7208, %r5318, %r5729, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7247;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5734,%r7247,%r436,%r2134,%r5738;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5734;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5740, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5741,%r5740,%r7246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5744,%r7082,%r5741;
}
	// end inline asm
	mov.u32 	%r7493, %r5314;
	@%p28 bra 	$L__BB0_784;

	// begin inline asm
	{mul.f16x2 %r7493,%r7083,%r5741;
}
	// end inline asm

$L__BB0_784:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5755,%r7493,%r5699,%r2134,%r5738;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5760,%r5744,%r5755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5763,%r7232,%r1089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r5760,%r5763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5769,%r6993,%r5766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7209,%r5314,%r5769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5775,%r7234,%r4065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5778,%r4159,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5781,%r5775,%r5778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5784,%r6993,%r5781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5787,%r5321,%r5784;
}
	// end inline asm
	selp.b32 	%r7206, %r5321, %r5787, %p28;
	// begin inline asm
	{sub.f16x2 %r5790,%r7244,%r7245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5793,%r7078,%r5790;
}
	// end inline asm
	@%p28 bra 	$L__BB0_786;
	bra.uni 	$L__BB0_785;

$L__BB0_786:
	// begin inline asm
	{neg.f16x2 %r7494,%r5325;
}
	// end inline asm
	bra.uni 	$L__BB0_787;

$L__BB0_785:
	// begin inline asm
	{mul.f16x2 %r7494,%r7079,%r5790;
}
	// end inline asm

$L__BB0_787:
	mov.u32 	%r5806, 31;
	mov.u32 	%r5808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5804,%r7494,%r5806,%r2134,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5809,%r5793,%r5804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5812,%r7239,%r1107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r5812,%r5809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5818,%r6993,%r5815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7200,%r5325,%r5818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5824,%r7365,%r7366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5827,%r7078,%r5824;
}
	// end inline asm
	mov.u32 	%r7495, %r5332;
	@%p28 bra 	$L__BB0_789;

	// begin inline asm
	{mul.f16x2 %r7495,%r7079,%r5824;
}
	// end inline asm

$L__BB0_789:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5836,%r7495,%r5806,%r2134,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5841,%r5827,%r5836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r7363,%r1107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5847,%r5841,%r5844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5850,%r6993,%r5847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7205,%r5332,%r5850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5856,%r7364,%r7245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r7243,%r7366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r5856,%r5859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5865,%r6993,%r5862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5868,%r5339,%r5865;
}
	// end inline asm
	selp.b32 	%r7203, %r5339, %r5868, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7245;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5873,%r7245,%r436,%r2134,%r5808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5873;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5879, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5880,%r5879,%r7244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5883,%r7082,%r5880;
}
	// end inline asm
	@%p28 bra 	$L__BB0_791;
	bra.uni 	$L__BB0_790;

$L__BB0_791:
	// begin inline asm
	{neg.f16x2 %r7496,%r5328;
}
	// end inline asm
	bra.uni 	$L__BB0_792;

$L__BB0_790:
	// begin inline asm
	{mul.f16x2 %r7496,%r7083,%r5880;
}
	// end inline asm

$L__BB0_792:
	mov.u32 	%r5898, 31;
	mov.u32 	%r5922, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5896,%r7496,%r5898,%r2134,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5901,%r5883,%r5896;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5904,%r7238,%r1113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r5904,%r5901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5910,%r6993,%r5907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7199,%r5328,%r5910;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7366;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5918,%r7366,%r436,%r2134,%r5922;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5918;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5924, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5925,%r5924,%r7365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5928,%r7082,%r5925;
}
	// end inline asm
	mov.u32 	%r7497, %r5335;
	@%p28 bra 	$L__BB0_794;

	// begin inline asm
	{mul.f16x2 %r7497,%r7083,%r5925;
}
	// end inline asm

$L__BB0_794:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5939,%r7497,%r5898,%r2134,%r5922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5944,%r5928,%r5939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r7361,%r1113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5944,%r5947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r6993,%r5950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7204,%r5335,%r5953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5959,%r7362,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5962,%r7242,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r5959,%r5962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5968,%r6993,%r5965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5342,%r5968;
}
	// end inline asm
	selp.b32 	%r7198, %r5342, %r5971, %p28;
	// begin inline asm
	{sub.f16x2 %r5974,%r7240,%r7241;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5977,%r7078,%r5974;
}
	// end inline asm
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7498,%r5346;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7498,%r7079,%r5974;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r5990, 31;
	mov.u32 	%r5992, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5988,%r7498,%r5990,%r2134,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5993,%r5977,%r5988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5996,%r7233,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5999,%r5996,%r5993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6002,%r6993,%r5999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7190,%r5346,%r6002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6008,%r7242,%r7243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6011,%r7078,%r6008;
}
	// end inline asm
	mov.u32 	%r7499, %r5353;
	@%p28 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7499,%r7079,%r6008;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6020,%r7499,%r5990,%r2134,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6025,%r6011,%r6020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r7229,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r6025,%r6028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6034,%r6993,%r6031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7194,%r5353,%r6034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6040,%r7231,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6043,%r7237,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6046,%r6040,%r6043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6049,%r6993,%r6046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6052,%r5360,%r6049;
}
	// end inline asm
	selp.b32 	%r7192, %r5360, %r6052, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7241;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6057,%r7241,%r436,%r2134,%r5992;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6057;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6063, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6064,%r6063,%r7240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6067,%r7082,%r6064;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7500,%r5349;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7500,%r7083,%r6064;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6082, 31;
	mov.u32 	%r6106, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6080,%r7500,%r6082,%r2134,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6085,%r6067,%r6080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r7232,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6088,%r6085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r6993,%r6091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r5349,%r6094;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7243;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6102,%r7243,%r436,%r2134,%r6106;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6102;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6108, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6109,%r6108,%r7242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6112,%r7082,%r6109;
}
	// end inline asm
	mov.u32 	%r7501, %r5356;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7501,%r7083,%r6109;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6123,%r7501,%r6082,%r2134,%r6106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6128,%r6112,%r6123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6131,%r7228,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r6128,%r6131;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r6993,%r6134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r5356,%r6137;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6143,%r7230,%r7240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6146,%r7236,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6149,%r6143,%r6146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6152,%r6993,%r6149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6155,%r5363,%r6152;
}
	// end inline asm
	selp.b32 	%r7186, %r5363, %r6155, %p28;
	// begin inline asm
	{sub.f16x2 %r6158,%r7234,%r7235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6161,%r7078,%r6158;
}
	// end inline asm
	@%p28 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r7502,%r5367;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	// begin inline asm
	{mul.f16x2 %r7502,%r7079,%r6158;
}
	// end inline asm

$L__BB0_807:
	mov.u32 	%r6174, 31;
	mov.u32 	%r6176, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6172,%r7502,%r6174,%r2134,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6177,%r6161,%r6172;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6180,%r1162,%r7233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6183,%r6180,%r6177;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6186,%r6993,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r5367,%r6186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6192,%r7236,%r7237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6195,%r7078,%r6192;
}
	// end inline asm
	mov.u32 	%r7503, %r5374;
	@%p28 bra 	$L__BB0_809;

	// begin inline asm
	{mul.f16x2 %r7503,%r7079,%r6192;
}
	// end inline asm

$L__BB0_809:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6204,%r7503,%r6174,%r2134,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6209,%r6195,%r6204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6212,%r7227,%r7233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6215,%r6209,%r6212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6218,%r6993,%r6215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7182,%r5374,%r6218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6224,%r7349,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r7352,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6230,%r6224,%r6227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6233,%r6993,%r6230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6236,%r5381,%r6233;
}
	// end inline asm
	selp.b32 	%r7180, %r5381, %r6236, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7235;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6241,%r7235,%r436,%r2134,%r6176;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6241;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6247, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6248,%r6247,%r7234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6251,%r7082,%r6248;
}
	// end inline asm
	@%p28 bra 	$L__BB0_811;
	bra.uni 	$L__BB0_810;

$L__BB0_811:
	// begin inline asm
	{neg.f16x2 %r7504,%r5370;
}
	// end inline asm
	bra.uni 	$L__BB0_812;

$L__BB0_810:
	// begin inline asm
	{mul.f16x2 %r7504,%r7083,%r6248;
}
	// end inline asm

$L__BB0_812:
	mov.u32 	%r6266, 31;
	mov.u32 	%r6290, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6264,%r7504,%r6266,%r2134,%r6290;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6269,%r6251,%r6264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6272,%r1163,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r6272,%r6269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6278,%r6993,%r6275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7177,%r5370,%r6278;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7237;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6286,%r7237,%r436,%r2134,%r6290;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6286;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6292, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6293,%r6292,%r7236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6296,%r7082,%r6293;
}
	// end inline asm
	mov.u32 	%r7505, %r5377;
	@%p28 bra 	$L__BB0_814;

	// begin inline asm
	{mul.f16x2 %r7505,%r7083,%r6293;
}
	// end inline asm

$L__BB0_814:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6307,%r7505,%r6266,%r2134,%r6290;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6312,%r6296,%r6307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6315,%r7226,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6318,%r6312,%r6315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6321,%r6993,%r6318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r5377,%r6321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6327,%r7347,%r7234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6330,%r7351,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6333,%r6327,%r6330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6336,%r6993,%r6333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6339,%r5384,%r6336;
}
	// end inline asm
	selp.b32 	%r7174, %r5384, %r6339, %p28;
	// begin inline asm
	{sub.f16x2 %r6342,%r7351,%r7352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6345,%r7078,%r6342;
}
	// end inline asm
	mov.u32 	%r7506, %r5388;
	@%p28 bra 	$L__BB0_816;

	// begin inline asm
	{mul.f16x2 %r7506,%r7079,%r6342;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6356, 31;
	mov.u32 	%r6380, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6354,%r7506,%r6356,%r2134,%r6380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6359,%r6345,%r6354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6362,%r7346,%r1162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6365,%r6359,%r6362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6368,%r6993,%r6365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r5388,%r6368;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7352;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6376,%r7352,%r436,%r2134,%r6380;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6376;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6382, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6383,%r6382,%r7351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6386,%r7082,%r6383;
}
	// end inline asm
	mov.u32 	%r7507, %r5391;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7507,%r7083,%r6383;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6397,%r7507,%r6356,%r2134,%r6380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6402,%r6386,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r7345,%r1163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r6402,%r6405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6411,%r6993,%r6408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r5391,%r6411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6417,%r7362,%r7364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6420,%r7078,%r6417;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7508,%r5395;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7508,%r7079,%r6417;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6433, 31;
	mov.u32 	%r6457, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6431,%r7508,%r6433,%r2134,%r6457;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6436,%r6420,%r6431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r7229,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6442,%r6439,%r6436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6445,%r6993,%r6442;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r5395,%r6445;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7364;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6453,%r7364,%r436,%r2134,%r6457;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6453;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6459, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6460,%r6459,%r7362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6463,%r7082,%r6460;
}
	// end inline asm
	@%p28 bra 	$L__BB0_823;
	bra.uni 	$L__BB0_822;

$L__BB0_823:
	// begin inline asm
	{neg.f16x2 %r7509,%r5398;
}
	// end inline asm
	bra.uni 	$L__BB0_824;

$L__BB0_822:
	// begin inline asm
	{mul.f16x2 %r7509,%r7083,%r6460;
}
	// end inline asm

$L__BB0_824:
	mov.u32 	%r6478, 31;
	mov.u32 	%r6480, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6476,%r7509,%r6478,%r2134,%r6480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6481,%r6463,%r6476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6484,%r7228,%r7361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r6484,%r6481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6490,%r6993,%r6487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r5398,%r6490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6496,%r7230,%r7231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6499,%r7078,%r6496;
}
	// end inline asm
	@%p28 bra 	$L__BB0_826;
	bra.uni 	$L__BB0_825;

$L__BB0_826:
	// begin inline asm
	{neg.f16x2 %r7510,%r5402;
}
	// end inline asm
	bra.uni 	$L__BB0_827;

$L__BB0_825:
	// begin inline asm
	{mul.f16x2 %r7510,%r7079,%r6496;
}
	// end inline asm

$L__BB0_827:
	mov.u32 	%r6512, 31;
	mov.u32 	%r6514, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6510,%r7510,%r6512,%r2134,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6515,%r6499,%r6510;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6518,%r7227,%r7229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6521,%r6518,%r6515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6524,%r6993,%r6521;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7159,%r5402,%r6524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6530,%r7359,%r7360;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6533,%r7078,%r6530;
}
	// end inline asm
	mov.u32 	%r7511, %r5409;
	@%p28 bra 	$L__BB0_829;

	// begin inline asm
	{mul.f16x2 %r7511,%r7079,%r6530;
}
	// end inline asm

$L__BB0_829:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6542,%r7511,%r6512,%r2134,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6547,%r6533,%r6542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6550,%r7357,%r7229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6553,%r6547,%r6550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6556,%r6993,%r6553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r5409,%r6556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6562,%r7344,%r7231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6565,%r7350,%r7360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6568,%r6562,%r6565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6571,%r6993,%r6568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6574,%r5416,%r6571;
}
	// end inline asm
	selp.b32 	%r7161, %r5416, %r6574, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7231;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6579,%r7231,%r436,%r2134,%r6514;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6579;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6585, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6586,%r6585,%r7230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6589,%r7082,%r6586;
}
	// end inline asm
	@%p28 bra 	$L__BB0_831;
	bra.uni 	$L__BB0_830;

$L__BB0_831:
	// begin inline asm
	{neg.f16x2 %r7512,%r5405;
}
	// end inline asm
	bra.uni 	$L__BB0_832;

$L__BB0_830:
	// begin inline asm
	{mul.f16x2 %r7512,%r7083,%r6586;
}
	// end inline asm

$L__BB0_832:
	mov.u32 	%r6604, 31;
	mov.u32 	%r6628, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6602,%r7512,%r6604,%r2134,%r6628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6607,%r6589,%r6602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6610,%r7226,%r7228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6613,%r6610,%r6607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6616,%r6993,%r6613;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r5405,%r6616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7360;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6624,%r7360,%r436,%r2134,%r6628;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6624;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6630, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6631,%r6630,%r7359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6634,%r7082,%r6631;
}
	// end inline asm
	mov.u32 	%r7513, %r5412;
	@%p28 bra 	$L__BB0_834;

	// begin inline asm
	{mul.f16x2 %r7513,%r7083,%r6631;
}
	// end inline asm

$L__BB0_834:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6645,%r7513,%r6604,%r2134,%r6628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6650,%r6634,%r6645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6653,%r7355,%r7228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6656,%r6650,%r6653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6659,%r6993,%r6656;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r5412,%r6659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6665,%r7343,%r7230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6668,%r7348,%r7359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6671,%r6665,%r6668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6674,%r6993,%r6671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6677,%r5419,%r6674;
}
	// end inline asm
	selp.b32 	%r7156, %r5419, %r6677, %p28;
	// begin inline asm
	{sub.f16x2 %r6680,%r7347,%r7349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6683,%r7078,%r6680;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r7514,%r5423;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r7514,%r7079,%r6680;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r6696, 31;
	mov.u32 	%r6698, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6694,%r7514,%r6696,%r2134,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6699,%r6683,%r6694;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6702,%r7346,%r7227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6705,%r6702,%r6699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6708,%r6993,%r6705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7151,%r5423,%r6708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6714,%r7348,%r7350;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6717,%r7078,%r6714;
}
	// end inline asm
	mov.u32 	%r7515, %r5430;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r7515,%r7079,%r6714;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6726,%r7515,%r6696,%r2134,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6731,%r6717,%r6726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6734,%r7342,%r7227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6737,%r6731,%r6734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6740,%r6993,%r6737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7153,%r5430,%r6740;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7349;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6748,%r7349,%r436,%r2134,%r6698;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6748;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6754, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6755,%r6754,%r7347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6758,%r7082,%r6755;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;
	bra.uni 	$L__BB0_840;

$L__BB0_841:
	// begin inline asm
	{neg.f16x2 %r7516,%r5426;
}
	// end inline asm
	bra.uni 	$L__BB0_842;

$L__BB0_840:
	// begin inline asm
	{mul.f16x2 %r7516,%r7083,%r6755;
}
	// end inline asm

$L__BB0_842:
	mov.u32 	%r6773, 31;
	mov.u32 	%r6797, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6771,%r7516,%r6773,%r2134,%r6797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6776,%r6758,%r6771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6779,%r7345,%r7226;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6782,%r6779,%r6776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6785,%r6993,%r6782;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7150,%r5426,%r6785;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7350;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6793,%r7350,%r436,%r2134,%r6797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6793;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6799, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6800,%r6799,%r7348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6803,%r7082,%r6800;
}
	// end inline asm
	mov.u32 	%r7517, %r5433;
	@%p28 bra 	$L__BB0_844;

	// begin inline asm
	{mul.f16x2 %r7517,%r7083,%r6800;
}
	// end inline asm

$L__BB0_844:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6814,%r7517,%r6773,%r2134,%r6797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6819,%r6803,%r6814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6822,%r7341,%r7226;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6825,%r6819,%r6822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6828,%r6993,%r6825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r5433,%r6828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6834,%r7343,%r7344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6837,%r7078,%r6834;
}
	// end inline asm
	@%p28 bra 	$L__BB0_846;
	bra.uni 	$L__BB0_845;

$L__BB0_846:
	// begin inline asm
	{neg.f16x2 %r7518,%r5437;
}
	// end inline asm
	bra.uni 	$L__BB0_847;

$L__BB0_845:
	// begin inline asm
	{mul.f16x2 %r7518,%r7079,%r6834;
}
	// end inline asm

$L__BB0_847:
	mov.u32 	%r6850, 31;
	mov.u32 	%r6874, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6848,%r7518,%r6850,%r2134,%r6874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6853,%r6837,%r6848;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6856,%r7342,%r7357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6859,%r6856,%r6853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6862,%r6993,%r6859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r5437,%r6862;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7344;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6870,%r7344,%r436,%r2134,%r6874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6870;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6876, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6877,%r6876,%r7343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6880,%r7082,%r6877;
}
	// end inline asm
	@%p28 bra 	$L__BB0_849;
	bra.uni 	$L__BB0_848;

$L__BB0_849:
	// begin inline asm
	{neg.f16x2 %r7519,%r5440;
}
	// end inline asm
	bra.uni 	$L__BB0_850;

$L__BB0_848:
	// begin inline asm
	{mul.f16x2 %r7519,%r7083,%r6877;
}
	// end inline asm

$L__BB0_850:
	setp.ne.s32 	%p535, %r41, %r2026;
	mov.u32 	%r6895, 31;
	mov.u32 	%r6897, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6893,%r7519,%r6895,%r2134,%r6897;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6898,%r6880,%r6893;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6901,%r7341,%r7355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6904,%r6901,%r6898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6907,%r6993,%r6904;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7144,%r5440,%r6907;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd563, [%rd1+104];
	cvta.to.global.u64 	%rd40, %rd563;
	@%p535 bra 	$L__BB0_852;

	mad.lo.s32 	%r6916, %r656, %r1565, %r44;
	mad.lo.s32 	%r6917, %r6916, 768, 384;
	mul.lo.s32 	%r6918, %r6917, %r1563;
	mad.lo.s32 	%r6920, %r42, 384, %r6918;
	add.s32 	%r6921, %r6920, -128;
	mul.wide.s32 	%rd564, %r6921, 4;
	add.s64 	%rd565, %rd40, %rd564;
	add.s64 	%rd567, %rd565, %rd299;
	st.global.v4.u32 	[%rd567+512], {%r7205, %r7204, %r7200, %r7199};
	st.global.v4.u32 	[%rd567+1024], {%r7221, %r7214, %r7224, %r7223};
	st.global.v4.u32 	[%rd567+1536], {%r7219, %r7218, %r7217, %r7212};

$L__BB0_852:
	setp.ne.s32 	%p536, %r42, %r2031;
	@%p536 bra 	$L__BB0_855;

	not.b32 	%r6968, %r41;
	add.s32 	%r6967, %r1562, %r6968;
	mad.lo.s32 	%r6923, %r657, %r1564, %r43;
	mad.lo.s32 	%r6929, %r6967, 384, %r70;
	mad.lo.s32 	%r6930, %r6923, %r1641, %r6929;
	mad.lo.s32 	%r6933, %r1643, %r69, %r6930;
	mul.wide.s32 	%rd568, %r6933, 4;
	add.s64 	%rd569, %rd40, %rd568;
	add.s64 	%rd41, %rd569, %rd299;
	st.global.v4.u32 	[%rd41], {%r7219, %r7218, %r7217, %r7212};
	st.global.v4.u32 	[%rd41+512], {%r7210, %r7209, %r7178, %r7177};
	st.global.v4.u32 	[%rd41+1024], {%r7208, %r7206, %r7171, %r7170};
	@%p276 bra 	$L__BB0_855;

	st.global.v4.u32 	[%rd41+1536], {%r7456, %r7455, %r7458, %r7457};

$L__BB0_855:
	rem.s32 	%r6934, %r7252, %r1566;
	setp.eq.s32 	%p529, %r6934, 0;
	@%p529 bra 	$L__BB0_857;

	bar.sync 	0;
	bra.uni 	$L__BB0_864;

$L__BB0_857:
	@%p218 bra 	$L__BB0_859;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_859:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_863;

	membar.gl;
	setp.eq.s32 	%p532, %r430, %r431;
	mov.u32 	%r6950, -2147483647;
	sub.s32 	%r6951, %r6950, %r429;
	selp.b32 	%r6939, %r6951, 1, %p532;
	// begin inline asm
	atom.add.release.gpu.u32 %r6938,[%rd25],%r6939;
	// end inline asm

$L__BB0_861:
	ld.volatile.u32 	%r6952, [%rd25];
	xor.b32  	%r6953, %r6952, %r6938;
	setp.gt.s32 	%p533, %r6953, -1;
	@%p533 bra 	$L__BB0_861;

	// begin inline asm
	ld.acquire.gpu.u32 %r6954,[%rd25];
	// end inline asm

$L__BB0_863:
	bar.sync 	0;

$L__BB0_864:
	setp.lt.s32 	%p534, %r1299, %r49;
	mov.u32 	%r7124, %r7459;
	mov.u32 	%r7125, %r7460;
	mov.u32 	%r7126, %r7445;
	mov.u32 	%r7127, %r7446;
	mov.u32 	%r7128, %r7447;
	mov.u32 	%r7129, %r7448;
	mov.u32 	%r7130, %r7461;
	mov.u32 	%r7131, %r7462;
	mov.u32 	%r7132, %r7463;
	mov.u32 	%r7133, %r7464;
	mov.u32 	%r7134, %r7465;
	mov.u32 	%r7135, %r7466;
	mov.u32 	%r7136, %r7451;
	mov.u32 	%r7137, %r7452;
	mov.u32 	%r7138, %r7453;
	mov.u32 	%r7139, %r7454;
	mov.u32 	%r7140, %r7467;
	mov.u32 	%r7141, %r7468;
	mov.u32 	%r7142, %r7469;
	mov.u32 	%r7143, %r7470;
	mov.u32 	%r7172, %r501;
	mov.u32 	%r7173, %r7389;
	mov.u32 	%r7176, %r502;
	mov.u32 	%r7179, %r7391;
	mov.u32 	%r7184, %r507;
	mov.u32 	%r7188, %r510;
	mov.u32 	%r7196, %r7396;
	mov.u32 	%r7201, %r7398;
	mov.u32 	%r7207, %r528;
	mov.u32 	%r7211, %r536;
	mov.u32 	%r7213, %r538;
	mov.u32 	%r7216, %r540;
	mov.u32 	%r7220, %r544;
	mov.u32 	%r7225, %r548;
	mov.u32 	%r7252, %r1299;
	@%p534 bra 	$L__BB0_332;

$L__BB0_865:
	ret;

}

