//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<537>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<7528>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<586>;


	mov.b64 	%rd45, _ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd45;
	ld.param.v2.u32 	{%r1563, %r1564}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1565, %r1566}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1567, %r1568}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1569, %r1570}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1571, %r1572}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1573, %r1574}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1575, %r1576}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1577, %r1578}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1579, %r1580}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1581, %r1582}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1583, %r1584}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1585, %r1586}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1587, %r1588}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb1ELb0ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1589, 32;
	sub.s32 	%r45, %r1589, %r1570;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1590, %r1576, -1;
	mad.lo.s32 	%r1591, %r1590, %r1575, %r1574;
	add.s32 	%r1592, %r1569, %r1568;
	add.s32 	%r1593, %r1592, %r1591;
	add.s32 	%r1594, %r1593, 1;
	mul.lo.s32 	%r1595, %r1563, %r1565;
	shl.b32 	%r47, %r1595, 1;
	shl.b32 	%r1596, %r1595, 2;
	div.s32 	%r1597, %r1594, %r1596;
	add.s32 	%r1598, %r1597, 1;
	mul.lo.s32 	%r1599, %r1598, %r1569;
	mul.lo.s32 	%r1600, %r1564, %r1566;
	shl.b32 	%r48, %r1600, 1;
	div.s32 	%r1601, %r1599, %r48;
	add.s32 	%r1602, %r1601, 1;
	mul.lo.s32 	%r49, %r1602, %r1568;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f83;
  cvt.rn.f16.f32 high, %f83;
  mov.b32 %r6997, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6997, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd46, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd46;
	mad.lo.s32 	%r1605, %r1565, %r44, %r43;
	mad.lo.s32 	%r1606, %r1605, %r1564, %r42;
	mad.lo.s32 	%r1607, %r1606, %r1563, %r41;
	shl.b32 	%r53, %r1607, 5;
	add.s32 	%r7002, %r53, %r46;
	mul.lo.s32 	%r1608, %r1600, %r1595;
	shl.b32 	%r57, %r1608, 5;
	mov.u32 	%r1609, 8;
	sub.s32 	%r1610, %r1609, %r1577;
	add.s32 	%r1611, %r1610, %r1578;
	sub.s32 	%r1612, %r1609, %r1579;
	add.s32 	%r1613, %r1612, %r1580;
	sub.s32 	%r58, %r1582, %r1581;
	mul.lo.s32 	%r1614, %r1576, %r58;
	mul.lo.s32 	%r1615, %r1614, %r1613;
	mul.lo.s32 	%r1616, %r1615, %r1611;
	mul.lo.s32 	%r59, %r1616, 3;
	setp.ge.s32 	%p29, %r7002, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1617, %r1580, 8;
	sub.s32 	%r1618, %r1617, %r1579;
	mul.lo.s32 	%r1619, %r1576, %r1618;
	add.s32 	%r1620, %r1578, 8;
	sub.s32 	%r1621, %r1620, %r1577;
	mul.lo.s32 	%r1622, %r1619, %r1621;
	mul.lo.s32 	%r1623, %r1622, %r58;
	not.b32 	%r1624, %r46;
	mad.lo.s32 	%r1625, %r1623, 3, %r1624;
	sub.s32 	%r1626, %r1625, %r53;
	mul.lo.s32 	%r1627, %r1600, %r1563;
	mul.lo.s32 	%r1628, %r1627, %r1565;
	shl.b32 	%r1629, %r1628, 5;
	div.u32 	%r60, %r1626, %r1629;
	add.s32 	%r1630, %r60, 1;
	and.b32  	%r6999, %r1630, 3;
	setp.eq.s32 	%p30, %r6999, 0;
	mov.u32 	%r7000, %r7002;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r7000, %r7002;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd47, %r7000, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1631, 0;
	st.global.u32 	[%rd48], %r1631;
	add.s32 	%r7000, %r7000, %r57;
	add.s32 	%r6999, %r6999, -1;
	setp.ne.s32 	%p31, %r6999, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd51, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd49, %r7000, 4;
	add.s64 	%rd50, %rd2, %rd49;
	mov.u32 	%r1632, 0;
	st.global.u32 	[%rd50], %r1632;
	add.s64 	%rd52, %rd50, %rd51;
	st.global.u32 	[%rd52], %r1632;
	add.s32 	%r1633, %r7000, %r57;
	add.s32 	%r1634, %r1633, %r57;
	add.s64 	%rd53, %rd52, %rd51;
	st.global.u32 	[%rd53], %r1632;
	add.s32 	%r1635, %r1634, %r57;
	add.s64 	%rd54, %rd53, %rd51;
	st.global.u32 	[%rd54], %r1632;
	add.s32 	%r7000, %r1635, %r57;
	setp.lt.s32 	%p33, %r7000, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd55, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd55;
	sub.s32 	%r1636, %r1569, %r47;
	div.s32 	%r1637, %r1636, %r48;
	mul.lo.s32 	%r1638, %r1637, %r1568;
	sub.s32 	%r69, %r1638, %r47;
	sub.s32 	%r1639, %r1568, %r48;
	mul.lo.s32 	%r1640, %r1639, %r1565;
	mul.lo.s32 	%r70, %r1563, 384;
	add.s32 	%r1641, %r70, %r70;
	add.s32 	%r1642, %r1641, 128;
	mul.lo.s32 	%r1644, %r1600, 768;
	mul.lo.s32 	%r1645, %r1640, %r1642;
	mad.lo.s32 	%r71, %r1644, %r69, %r1645;
	bra.uni 	$L__BB0_11;

$L__BB0_866:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f641;
  cvt.rn.f16.f32 high, %f641;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd579, %r7002, 4;
	add.s64 	%rd580, %rd3, %rd579;
	st.global.u32 	[%rd580], %r6959;
	add.s32 	%r7002, %r7002, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7002, %r71;
	@%p34 bra 	$L__BB0_866;

	ld.param.u64 	%rd56, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd56;
	ld.param.u64 	%rd57, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd57;
	ld.param.u64 	%rd58, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd58;
	mad.lo.s32 	%r7038, %r1563, %r43, %r41;
	mul.lo.s32 	%r79, %r1564, %r44;
	add.s32 	%r80, %r79, %r42;
	setp.ge.s32 	%p35, %r7038, %r1568;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1646, 31;
	sub.s32 	%r1647, %r1646, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1648, %r46, %r1647, %p36;
	shl.b32 	%r1649, %r1648, 2;
	mov.u32 	%r1650, 2;
	sub.s32 	%r81, %r1649, %r1571;
	shl.b32 	%r1651, %r1570, 2;
	mov.u32 	%r1652, 128;
	sub.s32 	%r82, %r1652, %r1651;
	sub.s32 	%r1653, %r1650, %r1571;
	add.s32 	%r83, %r1653, %r1649;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r84, %r1578, %r1577;
	sub.s32 	%r85, %r1580, %r1579;
	add.s32 	%r86, %r1578, -1;
	add.s32 	%r87, %r1580, -1;
	add.s32 	%r88, %r1582, -1;
	mul.lo.s32 	%r1654, %r1569, %r1568;
	shl.b32 	%r89, %r1654, 6;
	add.s32 	%r90, %r1568, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r91, %r81, 1;
	add.s32 	%r92, %r83, 1;
	shl.b32 	%r93, %r46, 1;
	or.b32  	%r94, %r93, 1;
	shr.u32 	%r1655, %r94, 31;
	add.s32 	%r1656, %r94, %r1655;
	shr.s32 	%r96, %r1656, 1;
	and.b32  	%r1657, %r1656, -2;
	sub.s32 	%r1658, %r94, %r1657;
	add.s32 	%r95, %r1658, %r89;
	rem.s32 	%r1717, %r91, %r82;
	add.s32 	%r1718, %r1717, %r82;
	rem.s32 	%r1719, %r1718, %r82;
	rem.s32 	%r1720, %r92, %r82;
	add.s32 	%r1721, %r1720, %r82;
	rem.s32 	%r1722, %r1721, %r82;
	mov.u32 	%r7003, %r7038;

$L__BB0_14:
	setp.ge.s32 	%p37, %r80, %r1569;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7003, %r1583;
	setp.lt.s32 	%p39, %r7003, %r1584;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7003, %r1578;
	setp.ge.s32 	%p41, %r7003, %r1577;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1659, %r7003, %r86, %p40;
	setp.lt.s32 	%p42, %r7003, %r1577;
	selp.b32 	%r1660, %r1577, %r1659, %p42;
	sub.s32 	%r1661, %r1660, %r1577;
	add.s32 	%r98, %r90, %r7003;
	rem.s32 	%r1662, %r81, %r82;
	add.s32 	%r1663, %r1662, %r82;
	rem.s32 	%r99, %r1663, %r82;
	rem.s32 	%r1664, %r83, %r82;
	add.s32 	%r1665, %r1664, %r82;
	rem.s32 	%r100, %r1665, %r82;
	setp.lt.s32 	%p43, %r99, %r1582;
	sub.s32 	%r101, %r99, %r1581;
	setp.lt.s32 	%p44, %r99, %r1581;
	selp.b32 	%r1666, %r99, %r88, %p43;
	selp.b32 	%r1667, %r1581, %r1666, %p44;
	sub.s32 	%r102, %r1667, %r1581;
	setp.lt.s32 	%p45, %r100, %r1582;
	sub.s32 	%r103, %r100, %r1581;
	setp.lt.s32 	%p46, %r100, %r1581;
	selp.b32 	%r1668, %r100, %r88, %p45;
	selp.b32 	%r1669, %r1581, %r1668, %p46;
	sub.s32 	%r104, %r1669, %r1581;
	sub.s32 	%r1670, %r7003, %r1577;
	mul.lo.s32 	%r105, %r1670, %r85;
	mul.lo.s32 	%r106, %r1661, %r85;
	add.s32 	%r1671, %r1670, %r84;
	mul.lo.s32 	%r107, %r1671, %r85;
	add.s32 	%r1672, %r1661, %r84;
	mul.lo.s32 	%r108, %r1672, %r85;
	add.s32 	%r1673, %r1671, %r84;
	mul.lo.s32 	%r109, %r1673, %r85;
	add.s32 	%r1674, %r1672, %r84;
	mul.lo.s32 	%r110, %r1674, %r85;
	mov.u32 	%r7004, %r80;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7004, %r1585;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7004, %r1586;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7004, %r1579;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7004, %r1580;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r112, %r7004, %r1579;
	selp.b32 	%r1675, %r7004, %r87, %p52;
	setp.lt.s32 	%p53, %r7004, %r1579;
	selp.b32 	%r1676, %r1579, %r1675, %p53;
	sub.s32 	%r113, %r1676, %r1579;
	mul.lo.s32 	%r114, %r7004, %r1568;
	add.s32 	%r115, %r114, %r7003;
	shl.b32 	%r116, %r115, 6;
	setp.ge.s32 	%p54, %r99, %r1587;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r99, %r1588;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r99, %r1581;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r100, %r1581;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd59, %r115, 4;
	add.s64 	%rd8, %rd7, %rd59;
	ld.global.f32 	%f85, [%rd8];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1679, %r112, %r105;
	mad.lo.s32 	%r1680, %r1679, %r58, %r101;
	mul.wide.s32 	%rd62, %r1680, 4;
	add.s64 	%rd63, %rd5, %rd62;
	ld.global.f32 	%f642, [%rd63];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1677, %r113, %r106;
	mad.lo.s32 	%r1678, %r1677, %r58, %r102;
	mul.wide.s32 	%rd60, %r1678, 4;
	add.s64 	%rd61, %rd5, %rd60;
	ld.global.f32 	%f642, [%rd61];

$L__BB0_20:
	setp.lt.s32 	%p67, %r100, %r1588;
	setp.ge.s32 	%p68, %r100, %r1587;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1683, %r112, %r105;
	mad.lo.s32 	%r1684, %r1683, %r58, %r103;
	mul.wide.s32 	%rd66, %r1684, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f643, [%rd67];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1681, %r113, %r106;
	mad.lo.s32 	%r1682, %r1681, %r58, %r104;
	mul.wide.s32 	%rd64, %r1682, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f643, [%rd65];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f86;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1685, {low,high};}

	// end inline asm
	shl.b32 	%r117, %r115, 5;
	add.s32 	%r1686, %r117, %r46;
	shl.b32 	%r1687, %r1686, 2;
	add.s32 	%r1688, %r89, %r1687;
	mul.wide.s32 	%rd68, %r1688, 4;
	add.s64 	%rd69, %rd6, %rd68;
	st.global.u32 	[%rd69], %r1685;
	add.s32 	%r118, %r1569, %r7004;
	mad.lo.s32 	%r1689, %r118, %r1568, %r7003;
	mul.wide.s32 	%rd70, %r1689, 4;
	add.s64 	%rd9, %rd7, %rd70;
	ld.global.f32 	%f88, [%rd9];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1692, %r112, %r107;
	mad.lo.s32 	%r1693, %r1692, %r58, %r101;
	mul.wide.s32 	%rd73, %r1693, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f644, [%rd74];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1690, %r113, %r108;
	mad.lo.s32 	%r1691, %r1690, %r58, %r102;
	mul.wide.s32 	%rd71, %r1691, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f644, [%rd72];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1696, %r112, %r107;
	mad.lo.s32 	%r1697, %r1696, %r58, %r103;
	mul.wide.s32 	%rd77, %r1697, 4;
	add.s64 	%rd78, %rd5, %rd77;
	ld.global.f32 	%f645, [%rd78];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1694, %r113, %r108;
	mad.lo.s32 	%r1695, %r1694, %r58, %r104;
	mul.wide.s32 	%rd75, %r1695, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f645, [%rd76];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f89;
  cvt.rn.f16.f32 high, %f90;
  mov.b32 %r1698, {low,high};}

	// end inline asm
	add.s32 	%r1699, %r93, %r116;
	mul.wide.s32 	%rd79, %r1699, 4;
	add.s64 	%rd80, %rd6, %rd79;
	st.global.u32 	[%rd80], %r1698;
	add.s32 	%r1700, %r118, %r1569;
	mad.lo.s32 	%r1701, %r1700, %r1568, %r7003;
	mul.wide.s32 	%rd81, %r1701, 4;
	add.s64 	%rd10, %rd7, %rd81;
	ld.global.f32 	%f91, [%rd10];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1704, %r112, %r109;
	mad.lo.s32 	%r1705, %r1704, %r58, %r101;
	mul.wide.s32 	%rd84, %r1705, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f646, [%rd85];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1702, %r113, %r110;
	mad.lo.s32 	%r1703, %r1702, %r58, %r102;
	mul.wide.s32 	%rd82, %r1703, 4;
	add.s64 	%rd83, %rd5, %rd82;
	ld.global.f32 	%f646, [%rd83];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1708, %r112, %r109;
	mad.lo.s32 	%r1709, %r1708, %r58, %r103;
	mul.wide.s32 	%rd88, %r1709, 4;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.f32 	%f647, [%rd89];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1706, %r113, %r110;
	mad.lo.s32 	%r1707, %r1706, %r58, %r104;
	mul.wide.s32 	%rd86, %r1707, 4;
	add.s64 	%rd87, %rd5, %rd86;
	ld.global.f32 	%f647, [%rd87];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f93;
  mov.b32 %r1710, {low,high};}

	// end inline asm
	rem.s32 	%r1711, %r98, %r1568;
	add.s32 	%r1712, %r1711, %r114;
	shl.b32 	%r119, %r1712, 5;
	add.s32 	%r1713, %r119, %r46;
	shl.b32 	%r1714, %r1713, 2;
	add.s32 	%r1715, %r89, %r1714;
	add.s32 	%r1716, %r1715, 2;
	mul.wide.s32 	%rd90, %r1716, 4;
	add.s64 	%rd91, %rd6, %rd90;
	st.global.u32 	[%rd91], %r1710;
	setp.ge.s32 	%p76, %r1719, %r1587;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1719, %r1588;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1719, %r1581;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1719, %r1582;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1722, %r1587;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1722, %r1588;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r120, %r1719, %r1581;
	setp.lt.s32 	%p86, %r1719, %r1581;
	selp.b32 	%r1723, %r1719, %r88, %p82;
	selp.b32 	%r1724, %r1581, %r1723, %p86;
	sub.s32 	%r121, %r1724, %r1581;
	setp.ge.s32 	%p87, %r1722, %r1581;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1722, %r1582;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r122, %r1722, %r1581;
	setp.lt.s32 	%p90, %r1722, %r1581;
	selp.b32 	%r1725, %r1722, %r88, %p89;
	selp.b32 	%r1726, %r1581, %r1725, %p90;
	sub.s32 	%r123, %r1726, %r1581;
	ld.global.f32 	%f94, [%rd8];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1729, %r112, %r105;
	mad.lo.s32 	%r1730, %r1729, %r58, %r120;
	mul.wide.s32 	%rd94, %r1730, 4;
	add.s64 	%rd95, %rd5, %rd94;
	ld.global.f32 	%f648, [%rd95];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1727, %r113, %r106;
	mad.lo.s32 	%r1728, %r1727, %r58, %r121;
	mul.wide.s32 	%rd92, %r1728, 4;
	add.s64 	%rd93, %rd5, %rd92;
	ld.global.f32 	%f648, [%rd93];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1733, %r112, %r105;
	mad.lo.s32 	%r1734, %r1733, %r58, %r122;
	mul.wide.s32 	%rd98, %r1734, 4;
	add.s64 	%rd99, %rd5, %rd98;
	ld.global.f32 	%f649, [%rd99];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1731, %r113, %r106;
	mad.lo.s32 	%r1732, %r1731, %r58, %r123;
	mul.wide.s32 	%rd96, %r1732, 4;
	add.s64 	%rd97, %rd5, %rd96;
	ld.global.f32 	%f649, [%rd97];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f96;
  mov.b32 %r1735, {low,high};}

	// end inline asm
	add.s32 	%r1736, %r117, %r96;
	shl.b32 	%r1737, %r1736, 2;
	add.s32 	%r1738, %r95, %r1737;
	mul.wide.s32 	%rd100, %r1738, 4;
	add.s64 	%rd101, %rd6, %rd100;
	st.global.u32 	[%rd101], %r1735;
	ld.global.f32 	%f97, [%rd9];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1741, %r112, %r107;
	mad.lo.s32 	%r1742, %r1741, %r58, %r120;
	mul.wide.s32 	%rd104, %r1742, 4;
	add.s64 	%rd105, %rd5, %rd104;
	ld.global.f32 	%f650, [%rd105];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1739, %r113, %r108;
	mad.lo.s32 	%r1740, %r1739, %r58, %r121;
	mul.wide.s32 	%rd102, %r1740, 4;
	add.s64 	%rd103, %rd5, %rd102;
	ld.global.f32 	%f650, [%rd103];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1745, %r112, %r107;
	mad.lo.s32 	%r1746, %r1745, %r58, %r122;
	mul.wide.s32 	%rd108, %r1746, 4;
	add.s64 	%rd109, %rd5, %rd108;
	ld.global.f32 	%f651, [%rd109];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1743, %r113, %r108;
	mad.lo.s32 	%r1744, %r1743, %r58, %r123;
	mul.wide.s32 	%rd106, %r1744, 4;
	add.s64 	%rd107, %rd5, %rd106;
	ld.global.f32 	%f651, [%rd107];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f99;
  mov.b32 %r1747, {low,high};}

	// end inline asm
	add.s32 	%r1748, %r94, %r116;
	mul.wide.s32 	%rd110, %r1748, 4;
	add.s64 	%rd111, %rd6, %rd110;
	st.global.u32 	[%rd111], %r1747;
	ld.global.f32 	%f100, [%rd10];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1751, %r112, %r109;
	mad.lo.s32 	%r1752, %r1751, %r58, %r120;
	mul.wide.s32 	%rd114, %r1752, 4;
	add.s64 	%rd115, %rd5, %rd114;
	ld.global.f32 	%f652, [%rd115];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1749, %r113, %r110;
	mad.lo.s32 	%r1750, %r1749, %r58, %r121;
	mul.wide.s32 	%rd112, %r1750, 4;
	add.s64 	%rd113, %rd5, %rd112;
	ld.global.f32 	%f652, [%rd113];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1755, %r112, %r109;
	mad.lo.s32 	%r1756, %r1755, %r58, %r122;
	mul.wide.s32 	%rd118, %r1756, 4;
	add.s64 	%rd119, %rd5, %rd118;
	ld.global.f32 	%f653, [%rd119];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1753, %r113, %r110;
	mad.lo.s32 	%r1754, %r1753, %r58, %r123;
	mul.wide.s32 	%rd116, %r1754, 4;
	add.s64 	%rd117, %rd5, %rd116;
	ld.global.f32 	%f653, [%rd117];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f102;
  mov.b32 %r1757, {low,high};}

	// end inline asm
	add.s32 	%r1758, %r119, %r96;
	shl.b32 	%r1759, %r1758, 2;
	add.s32 	%r1760, %r95, %r1759;
	add.s32 	%r1761, %r1760, 2;
	mul.wide.s32 	%rd120, %r1761, 4;
	add.s64 	%rd121, %rd6, %rd120;
	st.global.u32 	[%rd121], %r1757;
	add.s32 	%r7004, %r7004, %r1600;
	setp.lt.s32 	%p99, %r7004, %r1569;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7003, %r7003, %r1595;
	setp.lt.s32 	%p100, %r7003, %r1568;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd122, [%rd1+120];
	cvta.to.global.u64 	%rd11, %rd122;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r126, %r80, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd123, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd185, %rd123, 24;
	mov.u32 	%r7005, %r7038;

$L__BB0_68:
	setp.ge.s32 	%p102, %r126, %r1569;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7006, %r126;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1763, %r7006, 31;
	add.s32 	%r1764, %r7006, %r1763;
	shr.s32 	%r1765, %r1764, 1;
	mad.lo.s32 	%r1766, %r1765, %r1568, %r7005;
	shl.b32 	%r130, %r1766, 5;
	add.s32 	%r131, %r7006, -2;
	mul.lo.s32 	%r132, %r131, %r1568;
	add.s32 	%r1767, %r1569, %r131;
	mul.lo.s32 	%r133, %r1767, %r1568;
	add.s32 	%r1768, %r1767, %r1569;
	mul.lo.s32 	%r134, %r1768, %r1568;
	add.s32 	%r135, %r132, %r1568;
	add.s32 	%r136, %r7006, -1;
	add.s32 	%r1769, %r1569, %r136;
	mul.lo.s32 	%r137, %r1769, %r1568;
	add.s32 	%r1770, %r1769, %r1569;
	mul.lo.s32 	%r138, %r1770, %r1568;
	add.s32 	%r1771, %r1569, %r7006;
	mul.lo.s32 	%r139, %r1771, %r1568;
	add.s32 	%r1772, %r1771, %r1569;
	mul.lo.s32 	%r140, %r1772, %r1568;
	mul.lo.s32 	%r141, %r7006, %r1568;
	add.s32 	%r142, %r141, %r1568;
	add.s32 	%r143, %r7006, 1;
	add.s32 	%r1773, %r1569, %r143;
	mul.lo.s32 	%r144, %r1773, %r1568;
	add.s32 	%r1774, %r1773, %r1569;
	mul.lo.s32 	%r145, %r1774, %r1568;
	add.s32 	%r146, %r142, %r1568;
	add.s32 	%r147, %r7006, 2;
	add.s32 	%r1775, %r1569, %r147;
	mul.lo.s32 	%r148, %r1775, %r1568;
	add.s32 	%r1776, %r1775, %r1569;
	mul.lo.s32 	%r149, %r1776, %r1568;
	mov.u32 	%r7009, 0;
	mov.u64 	%rd583, %rd123;

$L__BB0_72:
	ld.global.nc.u32 	%r1777, [%rd583];
	cvt.rn.f64.s32 	%fd1, %r1777;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r151, %r1777, %r7005;
	setp.lt.s32 	%p104, %r151, %r1568;
	or.b32  	%r1778, %r131, %r151;
	setp.gt.s32 	%p105, %r1778, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r131, %r1569;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1781, %r132, %r151;
	mul.wide.s32 	%rd124, %r1781, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f110, [%rd125];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r7008, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f108;
  cvt.rn.f16.f32 high, %f108;
  mov.b32 %r7008, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1782, %r7009, %r130;
	mul.wide.s32 	%rd126, %r1782, 4;
	add.s64 	%rd127, %rd11, %rd126;
	st.global.u32 	[%rd127], %r7008;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1785, %r133, %r151;
	mul.wide.s32 	%rd128, %r1785, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f119, [%rd129];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7010, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7010, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1786, %r7009, %r130;
	mul.wide.s32 	%rd130, %r1786, 4;
	add.s64 	%rd131, %rd11, %rd130;
	st.global.u32 	[%rd131], %r7010;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1789, %r134, %r151;
	mul.wide.s32 	%rd132, %r1789, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f127, [%rd133];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7012, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r7012, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1790, %r7009, %r130;
	mul.wide.s32 	%rd134, %r1790, 4;
	add.s64 	%rd135, %rd11, %rd134;
	st.global.u32 	[%rd135], %r7012;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_87:
	or.b32  	%r1791, %r136, %r151;
	setp.gt.s32 	%p111, %r1791, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7006, %r1569;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1794, %r135, %r151;
	mul.wide.s32 	%rd136, %r1794, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f134, [%rd137];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7014, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7014, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1795, %r7009, %r130;
	mul.wide.s32 	%rd138, %r1795, 4;
	add.s64 	%rd139, %rd11, %rd138;
	st.global.u32 	[%rd139], %r7014;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1798, %r137, %r151;
	mul.wide.s32 	%rd140, %r1798, 4;
	add.s64 	%rd141, %rd7, %rd140;
	ld.global.f32 	%f141, [%rd141];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r7016, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f139;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7016, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1799, %r7009, %r130;
	mul.wide.s32 	%rd142, %r1799, 4;
	add.s64 	%rd143, %rd11, %rd142;
	st.global.u32 	[%rd143], %r7016;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1802, %r138, %r151;
	mul.wide.s32 	%rd144, %r1802, 4;
	add.s64 	%rd145, %rd7, %rd144;
	ld.global.f32 	%f148, [%rd145];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r7018, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f146;
  mov.b32 %r7018, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1803, %r7009, %r130;
	mul.wide.s32 	%rd146, %r1803, 4;
	add.s64 	%rd147, %rd11, %rd146;
	st.global.u32 	[%rd147], %r7018;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_102:
	or.b32  	%r1804, %r7006, %r151;
	setp.gt.s32 	%p118, %r1804, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7006, %r1569;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1807, %r141, %r151;
	mul.wide.s32 	%rd148, %r1807, 4;
	add.s64 	%rd149, %rd7, %rd148;
	ld.global.f32 	%f155, [%rd149];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r7020, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7020, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1808, %r7009, %r130;
	mul.wide.s32 	%rd150, %r1808, 4;
	add.s64 	%rd151, %rd11, %rd150;
	st.global.u32 	[%rd151], %r7020;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1811, %r139, %r151;
	mul.wide.s32 	%rd152, %r1811, 4;
	add.s64 	%rd153, %rd7, %rd152;
	ld.global.f32 	%f163, [%rd153];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r7022, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7022, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1812, %r7009, %r130;
	mul.wide.s32 	%rd154, %r1812, 4;
	add.s64 	%rd155, %rd11, %rd154;
	st.global.u32 	[%rd155], %r7022;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1815, %r140, %r151;
	mul.wide.s32 	%rd156, %r1815, 4;
	add.s64 	%rd157, %rd7, %rd156;
	ld.global.f32 	%f170, [%rd157];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r7024, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f168;
  mov.b32 %r7024, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1816, %r7009, %r130;
	mul.wide.s32 	%rd158, %r1816, 4;
	add.s64 	%rd159, %rd11, %rd158;
	st.global.u32 	[%rd159], %r7024;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_117:
	or.b32  	%r1817, %r143, %r151;
	setp.gt.s32 	%p125, %r1817, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r143, %r1569;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1820, %r142, %r151;
	mul.wide.s32 	%rd160, %r1820, 4;
	add.s64 	%rd161, %rd7, %rd160;
	ld.global.f32 	%f177, [%rd161];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r7026, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f175;
  mov.b32 %r7026, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1821, %r7009, %r130;
	mul.wide.s32 	%rd162, %r1821, 4;
	add.s64 	%rd163, %rd11, %rd162;
	st.global.u32 	[%rd163], %r7026;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1824, %r144, %r151;
	mul.wide.s32 	%rd164, %r1824, 4;
	add.s64 	%rd165, %rd7, %rd164;
	ld.global.f32 	%f184, [%rd165];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r7028, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f182;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r7028, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1825, %r7009, %r130;
	mul.wide.s32 	%rd166, %r1825, 4;
	add.s64 	%rd167, %rd11, %rd166;
	st.global.u32 	[%rd167], %r7028;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1828, %r145, %r151;
	mul.wide.s32 	%rd168, %r1828, 4;
	add.s64 	%rd169, %rd7, %rd168;
	ld.global.f32 	%f191, [%rd169];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r7030, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f189;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7030, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1829, %r7009, %r130;
	mul.wide.s32 	%rd170, %r1829, 4;
	add.s64 	%rd171, %rd11, %rd170;
	st.global.u32 	[%rd171], %r7030;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_132:
	or.b32  	%r1830, %r147, %r151;
	setp.gt.s32 	%p132, %r1830, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r147, %r1569;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1833, %r146, %r151;
	mul.wide.s32 	%rd172, %r1833, 4;
	add.s64 	%rd173, %rd7, %rd172;
	ld.global.f32 	%f198, [%rd173];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r7032, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f196;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7032, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1834, %r7009, %r130;
	mul.wide.s32 	%rd174, %r1834, 4;
	add.s64 	%rd175, %rd11, %rd174;
	st.global.u32 	[%rd175], %r7032;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1837, %r148, %r151;
	mul.wide.s32 	%rd176, %r1837, 4;
	add.s64 	%rd177, %rd7, %rd176;
	ld.global.f32 	%f205, [%rd177];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r7034, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r7034, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1838, %r7009, %r130;
	mul.wide.s32 	%rd178, %r1838, 4;
	add.s64 	%rd179, %rd11, %rd178;
	st.global.u32 	[%rd179], %r7034;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1841, %r149, %r151;
	mul.wide.s32 	%rd180, %r1841, 4;
	add.s64 	%rd181, %rd7, %rd180;
	ld.global.f32 	%f212, [%rd181];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r7036, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7036, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1842, %r7009, %r130;
	mul.wide.s32 	%rd182, %r1842, 4;
	add.s64 	%rd183, %rd11, %rd182;
	st.global.u32 	[%rd183], %r7036;
	add.s32 	%r7009, %r7009, 1;

$L__BB0_147:
	add.s64 	%rd583, %rd583, 4;
	setp.ne.s64 	%p139, %rd583, %rd185;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7006, %r7006, %r48;
	setp.lt.s32 	%p140, %r7006, %r1569;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7005, %r7005, %r1595;
	setp.lt.s32 	%p141, %r7005, %r1568;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1572, 1;
	ld.param.u64 	%rd186, [%rd1+160];
	cvta.to.global.u64 	%rd14, %rd186;
	ld.param.u64 	%rd187, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd187;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r255, %r80, 1;
	shr.u32 	%r1890, %r1573, 31;
	add.s32 	%r1891, %r1573, %r1890;
	shr.u32 	%r1892, %r1891, 1;
	and.b32  	%r256, %r1892, 1;
	mov.u64 	%rd207, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r255, %r1569;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7044, %r255;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1894, %r7044, 31;
	add.s32 	%r1895, %r7044, %r1894;
	shr.s32 	%r1896, %r1895, 1;
	mad.lo.s32 	%r1897, %r1896, %r1568, %r7038;
	shl.b32 	%r260, %r1897, 5;
	add.s32 	%r261, %r7044, -2;
	mul.lo.s32 	%r262, %r261, %r1568;
	add.s32 	%r1898, %r1569, %r261;
	mul.lo.s32 	%r263, %r1898, %r1568;
	add.s32 	%r264, %r262, %r1568;
	add.s32 	%r265, %r7044, -1;
	add.s32 	%r1899, %r1569, %r265;
	mul.lo.s32 	%r266, %r1899, %r1568;
	add.s32 	%r1900, %r1569, %r7044;
	mul.lo.s32 	%r267, %r1900, %r1568;
	mul.lo.s32 	%r268, %r7044, %r1568;
	add.s32 	%r269, %r268, %r1568;
	add.s32 	%r270, %r7044, 1;
	add.s32 	%r1901, %r1569, %r270;
	mul.lo.s32 	%r271, %r1901, %r1568;
	add.s32 	%r272, %r269, %r1568;
	add.s32 	%r273, %r7044, 2;
	add.s32 	%r1902, %r1569, %r273;
	mul.lo.s32 	%r274, %r1902, %r1568;
	mov.u32 	%r7048, 0;
	mov.u64 	%rd584, 24;
	mov.u64 	%rd585, %rd207;

$L__BB0_174:
	ld.global.nc.u32 	%r1903, [%rd585];
	cvt.rn.f64.s32 	%fd2, %r1903;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r276, %r1903, %r7038;
	setp.lt.s32 	%p154, %r276, %r1568;
	or.b32  	%r1904, %r261, %r276;
	setp.gt.s32 	%p155, %r1904, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r261, %r1569;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r256, 0;
	add.s32 	%r1906, %r262, %r276;
	shl.b32 	%r1907, %r1906, 1;
	mul.wide.s32 	%rd208, %r1907, 4;
	add.s64 	%rd209, %rd14, %rd208;
	ld.global.f32 	%f55, [%rd209];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7046, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f236;
  mov.b32 %r7046, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f237;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7046, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r281, %r7048, %r260;
	mul.wide.s32 	%rd210, %r281, 4;
	add.s64 	%rd211, %rd15, %rd210;
	st.global.u32 	[%rd211], %r7046;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r256, 0;
	add.s32 	%r1911, %r263, %r276;
	shl.b32 	%r1912, %r1911, 1;
	mul.wide.s32 	%rd212, %r1912, 4;
	add.s64 	%rd213, %rd14, %rd212;
	ld.global.f32 	%f56, [%rd213];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7047, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f242;
  mov.b32 %r7047, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f243;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7047, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1915, %r281, 1;
	mul.wide.s32 	%rd214, %r1915, 4;
	add.s64 	%rd215, %rd15, %rd214;
	st.global.u32 	[%rd215], %r7047;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r256, 0;
	add.s32 	%r1917, %r262, %r276;
	shl.b32 	%r1918, %r1917, 1;
	or.b32  	%r1919, %r1918, 1;
	mul.wide.s32 	%rd216, %r1919, 4;
	add.s64 	%rd217, %rd14, %rd216;
	ld.global.f32 	%f59, [%rd217];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f254;
  mov.b32 %r7049, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f250;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7049, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r7049, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r292, %r7048, %r260;
	mul.wide.s32 	%rd218, %r292, 4;
	add.s64 	%rd219, %rd15, %rd218;
	st.global.u32 	[%rd219], %r7049;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r256, 0;
	add.s32 	%r1923, %r263, %r276;
	shl.b32 	%r1924, %r1923, 1;
	or.b32  	%r1925, %r1924, 1;
	mul.wide.s32 	%rd220, %r1925, 4;
	add.s64 	%rd221, %rd14, %rd220;
	ld.global.f32 	%f60, [%rd221];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f260;
  mov.b32 %r7050, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f256;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7050, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7050, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1928, %r292, 1;
	mul.wide.s32 	%rd222, %r1928, 4;
	add.s64 	%rd223, %rd15, %rd222;
	st.global.u32 	[%rd223], %r7050;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_198:
	or.b32  	%r1929, %r265, %r276;
	setp.gt.s32 	%p164, %r1929, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7044, %r1569;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r256, 0;
	add.s32 	%r1931, %r264, %r276;
	shl.b32 	%r1932, %r1931, 1;
	mul.wide.s32 	%rd224, %r1932, 4;
	add.s64 	%rd225, %rd14, %rd224;
	ld.global.f32 	%f62, [%rd225];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7052, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f262;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r7052, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f263;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7052, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r303, %r7048, %r260;
	mul.wide.s32 	%rd226, %r303, 4;
	add.s64 	%rd227, %rd15, %rd226;
	st.global.u32 	[%rd227], %r7052;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r256, 0;
	add.s32 	%r1936, %r266, %r276;
	shl.b32 	%r1937, %r1936, 1;
	mul.wide.s32 	%rd228, %r1937, 4;
	add.s64 	%rd229, %rd14, %rd228;
	ld.global.f32 	%f63, [%rd229];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7053, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f268;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r7053, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f269;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7053, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1940, %r303, 1;
	mul.wide.s32 	%rd230, %r1940, 4;
	add.s64 	%rd231, %rd15, %rd230;
	st.global.u32 	[%rd231], %r7053;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r256, 0;
	add.s32 	%r1942, %r264, %r276;
	shl.b32 	%r1943, %r1942, 1;
	or.b32  	%r1944, %r1943, 1;
	mul.wide.s32 	%rd232, %r1944, 4;
	add.s64 	%rd233, %rd14, %rd232;
	ld.global.f32 	%f65, [%rd233];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7055, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f274;
  cvt.rn.f16.f32 high, %f274;
  mov.b32 %r7055, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f275;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7055, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r314, %r7048, %r260;
	mul.wide.s32 	%rd234, %r314, 4;
	add.s64 	%rd235, %rd15, %rd234;
	st.global.u32 	[%rd235], %r7055;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r256, 0;
	add.s32 	%r1948, %r266, %r276;
	shl.b32 	%r1949, %r1948, 1;
	or.b32  	%r1950, %r1949, 1;
	mul.wide.s32 	%rd236, %r1950, 4;
	add.s64 	%rd237, %rd14, %rd236;
	ld.global.f32 	%f66, [%rd237];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7056, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f280;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7056, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7056, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1953, %r314, 1;
	mul.wide.s32 	%rd238, %r1953, 4;
	add.s64 	%rd239, %rd15, %rd238;
	st.global.u32 	[%rd239], %r7056;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_222:
	or.b32  	%r1954, %r7044, %r276;
	setp.gt.s32 	%p174, %r1954, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7044, %r1569;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r256, 0;
	add.s32 	%r1956, %r268, %r276;
	shl.b32 	%r1957, %r1956, 1;
	mul.wide.s32 	%rd240, %r1957, 4;
	add.s64 	%rd241, %rd14, %rd240;
	ld.global.f32 	%f68, [%rd241];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7058, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f286;
  cvt.rn.f16.f32 high, %f286;
  mov.b32 %r7058, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f287;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7058, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r325, %r7048, %r260;
	mul.wide.s32 	%rd242, %r325, 4;
	add.s64 	%rd243, %rd15, %rd242;
	st.global.u32 	[%rd243], %r7058;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r256, 0;
	add.s32 	%r1961, %r267, %r276;
	shl.b32 	%r1962, %r1961, 1;
	mul.wide.s32 	%rd244, %r1962, 4;
	add.s64 	%rd245, %rd14, %rd244;
	ld.global.f32 	%f69, [%rd245];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7059, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f292;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7059, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7059, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1965, %r325, 1;
	mul.wide.s32 	%rd246, %r1965, 4;
	add.s64 	%rd247, %rd15, %rd246;
	st.global.u32 	[%rd247], %r7059;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r256, 0;
	add.s32 	%r1967, %r268, %r276;
	shl.b32 	%r1968, %r1967, 1;
	or.b32  	%r1969, %r1968, 1;
	mul.wide.s32 	%rd248, %r1969, 4;
	add.s64 	%rd249, %rd14, %rd248;
	ld.global.f32 	%f70, [%rd249];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7061, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f299;
  cvt.rn.f16.f32 high, %f299;
  mov.b32 %r7061, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f300;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7061, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r336, %r7048, %r260;
	mul.wide.s32 	%rd250, %r336, 4;
	add.s64 	%rd251, %rd15, %rd250;
	st.global.u32 	[%rd251], %r7061;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r256, 0;
	add.s32 	%r1973, %r267, %r276;
	shl.b32 	%r1974, %r1973, 1;
	or.b32  	%r1975, %r1974, 1;
	mul.wide.s32 	%rd252, %r1975, 4;
	add.s64 	%rd253, %rd14, %rd252;
	ld.global.f32 	%f71, [%rd253];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7062, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7062, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7062, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1978, %r336, 1;
	mul.wide.s32 	%rd254, %r1978, 4;
	add.s64 	%rd255, %rd15, %rd254;
	st.global.u32 	[%rd255], %r7062;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_246:
	or.b32  	%r1979, %r270, %r276;
	setp.gt.s32 	%p184, %r1979, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r270, %r1569;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r256, 0;
	add.s32 	%r1981, %r269, %r276;
	shl.b32 	%r1982, %r1981, 1;
	mul.wide.s32 	%rd256, %r1982, 4;
	add.s64 	%rd257, %rd14, %rd256;
	ld.global.f32 	%f72, [%rd257];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7064, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f311;
  cvt.rn.f16.f32 high, %f311;
  mov.b32 %r7064, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f312;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7064, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r347, %r7048, %r260;
	mul.wide.s32 	%rd258, %r347, 4;
	add.s64 	%rd259, %rd15, %rd258;
	st.global.u32 	[%rd259], %r7064;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r256, 0;
	add.s32 	%r1986, %r271, %r276;
	shl.b32 	%r1987, %r1986, 1;
	mul.wide.s32 	%rd260, %r1987, 4;
	add.s64 	%rd261, %rd14, %rd260;
	ld.global.f32 	%f73, [%rd261];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f73;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7065, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7065, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f73;
  mov.b32 %r7065, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1990, %r347, 1;
	mul.wide.s32 	%rd262, %r1990, 4;
	add.s64 	%rd263, %rd15, %rd262;
	st.global.u32 	[%rd263], %r7065;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r256, 0;
	add.s32 	%r1992, %r269, %r276;
	shl.b32 	%r1993, %r1992, 1;
	or.b32  	%r1994, %r1993, 1;
	mul.wide.s32 	%rd264, %r1994, 4;
	add.s64 	%rd265, %rd14, %rd264;
	ld.global.f32 	%f74, [%rd265];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7067, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f323;
  cvt.rn.f16.f32 high, %f323;
  mov.b32 %r7067, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f324;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r7067, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r358, %r7048, %r260;
	mul.wide.s32 	%rd266, %r358, 4;
	add.s64 	%rd267, %rd15, %rd266;
	st.global.u32 	[%rd267], %r7067;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r256, 0;
	add.s32 	%r1998, %r271, %r276;
	shl.b32 	%r1999, %r1998, 1;
	or.b32  	%r2000, %r1999, 1;
	mul.wide.s32 	%rd268, %r2000, 4;
	add.s64 	%rd269, %rd14, %rd268;
	ld.global.f32 	%f75, [%rd269];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7068, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7068, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7068, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2003, %r358, 1;
	mul.wide.s32 	%rd270, %r2003, 4;
	add.s64 	%rd271, %rd15, %rd270;
	st.global.u32 	[%rd271], %r7068;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_270:
	or.b32  	%r2004, %r273, %r276;
	setp.gt.s32 	%p194, %r2004, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r273, %r1569;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r256, 0;
	add.s32 	%r2006, %r272, %r276;
	shl.b32 	%r2007, %r2006, 1;
	mul.wide.s32 	%rd272, %r2007, 4;
	add.s64 	%rd273, %rd14, %rd272;
	ld.global.f32 	%f76, [%rd273];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7070, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f335;
  cvt.rn.f16.f32 high, %f335;
  mov.b32 %r7070, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7070, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r369, %r7048, %r260;
	mul.wide.s32 	%rd274, %r369, 4;
	add.s64 	%rd275, %rd15, %rd274;
	st.global.u32 	[%rd275], %r7070;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r256, 0;
	add.s32 	%r2011, %r274, %r276;
	shl.b32 	%r2012, %r2011, 1;
	mul.wide.s32 	%rd276, %r2012, 4;
	add.s64 	%rd277, %rd14, %rd276;
	ld.global.f32 	%f77, [%rd277];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f77;
  cvt.rn.f16.f32 high, %f345;
  mov.b32 %r7071, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f341;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7071, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f77;
  mov.b32 %r7071, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2015, %r369, 1;
	mul.wide.s32 	%rd278, %r2015, 4;
	add.s64 	%rd279, %rd15, %rd278;
	st.global.u32 	[%rd279], %r7071;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r256, 0;
	add.s32 	%r2017, %r272, %r276;
	shl.b32 	%r2018, %r2017, 1;
	or.b32  	%r2019, %r2018, 1;
	mul.wide.s32 	%rd280, %r2019, 4;
	add.s64 	%rd281, %rd14, %rd280;
	ld.global.f32 	%f78, [%rd281];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f351;
  mov.b32 %r7073, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7073, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r7073, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r380, %r7048, %r260;
	mul.wide.s32 	%rd282, %r380, 4;
	add.s64 	%rd283, %rd15, %rd282;
	st.global.u32 	[%rd283], %r7073;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r256, 0;
	add.s32 	%r2023, %r274, %r276;
	shl.b32 	%r2024, %r2023, 1;
	or.b32  	%r2025, %r2024, 1;
	mul.wide.s32 	%rd284, %r2025, 4;
	add.s64 	%rd285, %rd14, %rd284;
	ld.global.f32 	%f79, [%rd285];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7074, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7074, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7074, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2028, %r380, 1;
	mul.wide.s32 	%rd286, %r2028, 4;
	add.s64 	%rd287, %rd15, %rd286;
	st.global.u32 	[%rd287], %r7074;
	add.s32 	%r7048, %r7048, 2;

$L__BB0_294:
	add.s64 	%rd585, %rd585, 4;
	add.s64 	%rd584, %rd584, -4;
	setp.ne.s64 	%p204, %rd584, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7044, %r7044, %r48;
	setp.lt.s32 	%p205, %r7044, %r1569;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7038, %r7038, %r1595;
	setp.lt.s32 	%p206, %r7038, %r1568;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r229, %r79;
	mov.u32 	%r1843, 31;
	sub.s32 	%r1844, %r1843, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1845, %r46, %r1844, %p144;
	shl.b32 	%r1846, %r1845, 2;
	mov.u32 	%r1847, 2;
	sub.s32 	%r230, %r1846, %r1571;
	shl.b32 	%r1848, %r1570, 2;
	mov.u32 	%r1849, 128;
	sub.s32 	%r231, %r1849, %r1848;
	sub.s32 	%r1850, %r1847, %r1571;
	add.s32 	%r232, %r1850, %r1846;
	add.s32 	%r233, %r1568, -1;
	add.s32 	%r234, %r230, 1;
	add.s32 	%r235, %r232, 1;
	rem.s32 	%r1875, %r234, %r231;
	add.s32 	%r1876, %r1875, %r231;
	rem.s32 	%r246, %r1876, %r231;
	rem.s32 	%r1877, %r235, %r231;
	add.s32 	%r1878, %r1877, %r231;
	rem.s32 	%r247, %r1878, %r231;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r229;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r237, %r7038, 1;
	rem.s32 	%r1851, %r230, %r231;
	add.s32 	%r1852, %r1851, %r231;
	rem.s32 	%r238, %r1852, %r231;
	rem.s32 	%r1853, %r232, %r231;
	add.s32 	%r1854, %r1853, %r231;
	rem.s32 	%r239, %r1854, %r231;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1857, %r237, %r231;
	add.s32 	%r1858, %r1857, %r238;
	mul.wide.s32 	%rd188, %r1858, 4;
	add.s64 	%rd189, %rd14, %rd188;
	ld.global.f32 	%f218, [%rd189];
	add.s32 	%r1859, %r1857, %r239;
	mul.wide.s32 	%rd190, %r1859, 4;
	add.s64 	%rd191, %rd14, %rd190;
	ld.global.f32 	%f219, [%rd191];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f218;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r7039, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f217;
  mov.b32 %r7039, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1860, %r7038, 5;
	add.s32 	%r1861, %r1860, %r46;
	shl.b32 	%r1862, %r1861, 2;
	mul.wide.s32 	%rd192, %r1862, 4;
	add.s64 	%rd16, %rd15, %rd192;
	st.global.u32 	[%rd16], %r7039;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1865, %r237, 1;
	mul.lo.s32 	%r1866, %r1865, %r231;
	add.s32 	%r1867, %r1866, %r238;
	mul.wide.s32 	%rd193, %r1867, 4;
	add.s64 	%rd194, %rd14, %rd193;
	ld.global.f32 	%f222, [%rd194];
	add.s32 	%r1868, %r1866, %r239;
	mul.wide.s32 	%rd195, %r1868, 4;
	add.s64 	%rd196, %rd14, %rd195;
	ld.global.f32 	%f223, [%rd196];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7040, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r7040, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1869, %r233, %r7038;
	rem.s32 	%r1870, %r1869, %r1568;
	shl.b32 	%r1871, %r1870, 5;
	add.s32 	%r1872, %r1871, %r46;
	shl.b32 	%r1873, %r1872, 2;
	or.b32  	%r1874, %r1873, 2;
	mul.wide.s32 	%rd197, %r1874, 4;
	add.s64 	%rd17, %rd15, %rd197;
	st.global.u32 	[%rd17], %r7040;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1881, %r237, %r231;
	add.s32 	%r1882, %r1881, %r246;
	mul.wide.s32 	%rd198, %r1882, 4;
	add.s64 	%rd199, %rd14, %rd198;
	ld.global.f32 	%f226, [%rd199];
	add.s32 	%r1883, %r1881, %r247;
	mul.wide.s32 	%rd200, %r1883, 4;
	add.s64 	%rd201, %rd14, %rd200;
	ld.global.f32 	%f227, [%rd201];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f226;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7041, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f225;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r7041, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd16+4], %r7041;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1886, %r237, 1;
	mul.lo.s32 	%r1887, %r1886, %r231;
	add.s32 	%r1888, %r1887, %r246;
	mul.wide.s32 	%rd202, %r1888, 4;
	add.s64 	%rd203, %rd14, %rd202;
	ld.global.f32 	%f230, [%rd203];
	add.s32 	%r1889, %r1887, %r247;
	mul.wide.s32 	%rd204, %r1889, 4;
	add.s64 	%rd205, %rd14, %rd204;
	ld.global.f32 	%f231, [%rd205];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r7042, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7042, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd17+4], %r7042;

$L__BB0_167:
	add.s32 	%r7038, %r7038, %r1595;
	setp.lt.s32 	%p150, %r7038, %r1568;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2030, %r1563, -1;
	mad.lo.s32 	%r2031, %r1564, 576, 128;
	mul.lo.s32 	%r2032, %r2031, %r2030;
	add.s32 	%r2033, %r70, -64;
	add.s32 	%r2034, %r2033, %r70;
	add.s32 	%r2035, %r1564, -1;
	mad.lo.s32 	%r2036, %r2034, %r2035, %r2032;
	mul.lo.s32 	%r2037, %r2030, %r1564;
	mul.lo.s32 	%r2038, %r2037, 320;
	mad.lo.s32 	%r2039, %r2033, %r2035, %r2038;
	add.s32 	%r389, %r2039, %r2036;
	setp.lt.s32 	%p207, %r389, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7257, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7078, 0;
	mov.u32 	%r7076, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7076], %r7257;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2042, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7076+4], %r2042;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2043, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7076+8], %r2043;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r2044, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7076+12], %r2044;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7257, {low,high};}

	// end inline asm
	add.s32 	%r7076, %r7076, 16;
	add.s32 	%r7078, %r7078, 4;
	setp.lt.s32 	%p208, %r7078, %r389;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7258, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r2047, {low,high};}

	// end inline asm
	ld.param.u64 	%rd288, [%rd1+176];
	cvta.to.global.u64 	%rd22, %rd288;
	mov.u32 	%r2048, 31;
	sub.s32 	%r2049, %r2048, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2050, %r46, %r2049, %p209;
	shl.b32 	%r2051, %r2050, 2;
	sub.s32 	%r400, %r2051, %r1571;
	shl.b32 	%r2052, %r1570, 2;
	mov.u32 	%r2053, 128;
	sub.s32 	%r401, %r2053, %r2052;
	rem.s32 	%r2054, %r400, %r401;
	add.s32 	%r2055, %r2054, %r401;
	rem.s32 	%r402, %r2055, %r401;
	add.s32 	%r2056, %r400, 2;
	rem.s32 	%r2057, %r2056, %r401;
	add.s32 	%r2058, %r2057, %r401;
	rem.s32 	%r403, %r2058, %r401;
	mul.lo.s32 	%r2059, %r402, 6;
	mul.lo.s32 	%r2060, %r403, 6;
	mul.wide.s32 	%rd289, %r2059, 4;
	add.s64 	%rd23, %rd22, %rd289;
	mul.wide.s32 	%rd290, %r2060, 4;
	add.s64 	%rd24, %rd22, %rd290;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7080, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd23];
	ld.global.f32 	%f375, [%rd23+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd24+8];
	ld.global.f32 	%f377, [%rd24];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7080, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd23+4];
	ld.global.f32 	%f383, [%rd24+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7081, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd23];
	ld.global.f32 	%f381, [%rd24];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7081, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7082, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd23+20];
	ld.global.f32 	%f387, [%rd23+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd24+20];
	ld.global.f32 	%f389, [%rd24+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7082, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd23+16];
	ld.global.f32 	%f395, [%rd24+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7083, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd23+12];
	ld.global.f32 	%f393, [%rd24+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7083, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2069, %r400, 1;
	rem.s32 	%r2070, %r2069, %r401;
	add.s32 	%r2071, %r2070, %r401;
	rem.s32 	%r416, %r2071, %r401;
	add.s32 	%r2072, %r400, 3;
	rem.s32 	%r2073, %r2072, %r401;
	add.s32 	%r2074, %r2073, %r401;
	rem.s32 	%r417, %r2074, %r401;
	mul.lo.s32 	%r2075, %r416, 6;
	mul.lo.s32 	%r2076, %r417, 6;
	mul.wide.s32 	%rd291, %r2075, 4;
	add.s64 	%rd25, %rd22, %rd291;
	mul.wide.s32 	%rd292, %r2076, 4;
	add.s64 	%rd26, %rd22, %rd292;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7084, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd25];
	ld.global.f32 	%f399, [%rd25+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd26+8];
	ld.global.f32 	%f401, [%rd26];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7084, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd25+4];
	ld.global.f32 	%f407, [%rd26+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7085, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd25];
	ld.global.f32 	%f405, [%rd26];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7085, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7086, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd25+20];
	ld.global.f32 	%f411, [%rd25+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd26+20];
	ld.global.f32 	%f413, [%rd26+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f408;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7086, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd25+16];
	ld.global.f32 	%f419, [%rd26+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f418;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7087, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd25+12];
	ld.global.f32 	%f417, [%rd26+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f416;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7087, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2085, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd293, %r2085;
	// begin inline asm
	mov.u32 %r2086, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd294, %r2086;
	bfi.b64 	%rd27, %rd294, %rd293, 32, 32;
	setp.ne.s64 	%p218, %rd27, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd28, %rd27, 4;
	mov.u32 	%r2087, %nctaid.y;
	mov.u32 	%r2088, %nctaid.x;
	mul.lo.s32 	%r2089, %r2088, %r2087;
	mov.u32 	%r2090, %nctaid.z;
	mul.lo.s32 	%r430, %r2089, %r2090;
	neg.s32 	%r2091, %r42;
	add.s32 	%r2092, %r46, %r41;
	setp.ne.s32 	%p219, %r2092, %r2091;
	mov.u32 	%r2093, %ctaid.x;
	add.s32 	%r431, %r2093, %r43;
	neg.s32 	%r432, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r431, %r432;
	mov.u32 	%r2096, -2147483647;
	sub.s32 	%r2097, %r2096, %r430;
	selp.b32 	%r2095, %r2097, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2094,[%rd28],%r2095;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2098, [%rd28];
	xor.b32  	%r2099, %r2098, %r2094;
	setp.gt.s32 	%p221, %r2099, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2100,[%rd28];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_865;

	shr.s32 	%r2114, %r1573, 31;
	shr.u32 	%r2115, %r2114, 30;
	add.s32 	%r2116, %r1573, %r2115;
	shr.s32 	%r434, %r2116, 2;
	add.s32 	%r2117, %r46, 24;
	mul.hi.s32 	%r2118, %r2117, 1374389535;
	shr.u32 	%r2119, %r2118, 31;
	shr.s32 	%r2120, %r2118, 3;
	add.s32 	%r2121, %r2120, %r2119;
	mul.lo.s32 	%r2122, %r2121, 25;
	sub.s32 	%r2123, %r2117, %r2122;
	add.s32 	%r2124, %r46, 26;
	mul.hi.s32 	%r2125, %r2124, 1374389535;
	shr.u32 	%r2126, %r2125, 31;
	shr.s32 	%r2127, %r2125, 3;
	add.s32 	%r2128, %r2127, %r2126;
	mul.lo.s32 	%r2129, %r2128, 25;
	sub.s32 	%r2130, %r2124, %r2129;
	shr.u32 	%r2131, %r1573, 31;
	add.s32 	%r2132, %r1573, %r2131;
	and.b32  	%r2133, %r2132, -2;
	sub.s32 	%r435, %r1573, %r2133;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r436, %r2123, %r46, %p223;
	setp.lt.s32 	%p224, %r402, %r1582;
	setp.ge.s32 	%p225, %r402, %r1581;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r416, %r1582;
	setp.ge.s32 	%p227, %r416, %r1581;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r403, %r1582;
	setp.ge.s32 	%p229, %r403, %r1581;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r417, %r1582;
	setp.ge.s32 	%p231, %r417, %r1581;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r437, %r2130, %r46, %p223;
	mov.u32 	%r2113, 0;
	// begin inline asm
	{mov.u32 %r2134, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2461, %r2134, 8;
	add.s32 	%r2462, %r2461, -8192;
	or.b32  	%r2138, %r2462, 31;
	mul.wide.s32 	%rd305, %r46, 16;
	mul.wide.s32 	%rd307, %r46, 8;
	mov.u32 	%r7088, %r2113;
	mov.u32 	%r7089, %r2113;
	mov.u32 	%r7090, %r2113;
	mov.u32 	%r7091, %r2113;
	mov.u32 	%r7092, %r2113;
	mov.u32 	%r7093, %r2113;
	mov.u32 	%r7094, %r2113;
	mov.u32 	%r7095, %r2113;
	mov.u32 	%r7096, %r2113;
	mov.u32 	%r7097, %r2113;
	mov.u32 	%r7098, %r2113;
	mov.u32 	%r7099, %r2113;
	mov.u32 	%r7461, %r2047;
	mov.u32 	%r7462, %r2047;
	mov.u32 	%r7459, %r2047;
	mov.u32 	%r7460, %r2047;
	mov.u32 	%r7345, %r2047;
	mov.u32 	%r7346, %r2047;
	mov.u32 	%r7359, %r2047;
	mov.u32 	%r7347, %r2047;
	mov.u32 	%r7361, %r2047;
	mov.u32 	%r7348, %r2047;
	mov.u32 	%r7349, %r2047;
	mov.u32 	%r7350, %r2047;
	mov.u32 	%r7351, %r2047;
	mov.u32 	%r7352, %r2047;
	mov.u32 	%r7353, %r2047;
	mov.u32 	%r7354, %r2047;
	mov.u32 	%r7363, %r2047;
	mov.u32 	%r7364, %r2047;
	mov.u32 	%r7365, %r2047;
	mov.u32 	%r7366, %r2047;
	mov.u32 	%r7367, %r2047;
	mov.u32 	%r7368, %r2047;
	mov.u32 	%r7355, %r2047;
	mov.u32 	%r7356, %r2047;
	mov.u32 	%r7369, %r2047;
	mov.u32 	%r7370, %r2047;
	mov.u32 	%r7357, %r2047;
	mov.u32 	%r7358, %r2047;
	mov.u32 	%r7128, %r2047;
	mov.u32 	%r7129, %r2047;
	mov.u32 	%r7130, %r2047;
	mov.u32 	%r7131, %r2047;
	mov.u32 	%r7132, %r2047;
	mov.u32 	%r7133, %r2047;
	mov.u32 	%r7134, %r2047;
	mov.u32 	%r7135, %r2047;
	mov.u32 	%r7136, %r2047;
	mov.u32 	%r7137, %r2047;
	mov.u32 	%r7138, %r2047;
	mov.u32 	%r7139, %r2047;
	mov.u32 	%r7140, %r2047;
	mov.u32 	%r7141, %r2047;
	mov.u32 	%r7142, %r2047;
	mov.u32 	%r7143, %r2047;
	mov.u32 	%r7144, %r2047;
	mov.u32 	%r7145, %r2047;
	mov.u32 	%r7146, %r2047;
	mov.u32 	%r7147, %r2047;
	mov.u32 	%r7148, %r2047;
	mov.u32 	%r7149, %r2047;
	mov.u32 	%r7385, %r2047;
	mov.u32 	%r7386, %r2047;
	mov.u32 	%r7154, %r2047;
	mov.u32 	%r7155, %r2047;
	mov.u32 	%r7156, %r2047;
	mov.u32 	%r7157, %r2047;
	mov.u32 	%r7387, %r2047;
	mov.u32 	%r7388, %r2047;
	mov.u32 	%r7160, %r2047;
	mov.u32 	%r7389, %r2047;
	mov.u32 	%r7162, %r2047;
	mov.u32 	%r7163, %r2047;
	mov.u32 	%r7390, %r2047;
	mov.u32 	%r7165, %r2047;
	mov.u32 	%r7166, %r2047;
	mov.u32 	%r7167, %r2047;
	mov.u32 	%r7475, %r2047;
	mov.u32 	%r7476, %r2047;
	mov.u32 	%r7170, %r2047;
	mov.u32 	%r7171, %r2047;
	mov.u32 	%r7174, %r2047;
	mov.u32 	%r7175, %r2047;
	mov.u32 	%r7176, %r2047;
	mov.u32 	%r7177, %r2047;
	mov.u32 	%r7178, %r2047;
	mov.u32 	%r7394, %r2047;
	mov.u32 	%r7180, %r2047;
	mov.u32 	%r7181, %r2047;
	mov.u32 	%r7182, %r2047;
	mov.u32 	%r7183, %r2047;
	mov.u32 	%r7184, %r2047;
	mov.u32 	%r7185, %r2047;
	mov.u32 	%r7186, %r2047;
	mov.u32 	%r7396, %r2047;
	mov.u32 	%r7188, %r2047;
	mov.u32 	%r7189, %r2047;
	mov.u32 	%r7190, %r2047;
	mov.u32 	%r7397, %r2047;
	mov.u32 	%r7192, %r2047;
	mov.u32 	%r7193, %r2047;
	mov.u32 	%r7194, %r2047;
	mov.u32 	%r7195, %r2047;
	mov.u32 	%r7196, %r2047;
	mov.u32 	%r7197, %r2047;
	mov.u32 	%r7198, %r2047;
	mov.u32 	%r7398, %r2047;
	mov.u32 	%r7200, %r2047;
	mov.u32 	%r7477, %r2047;
	mov.u32 	%r7202, %r2047;
	mov.u32 	%r7203, %r2047;
	mov.u32 	%r7204, %r2047;
	mov.u32 	%r7205, %r2047;
	mov.u32 	%r7478, %r2047;
	mov.u32 	%r7207, %r2047;
	mov.u32 	%r7208, %r2047;
	mov.u32 	%r7209, %r2047;
	mov.u32 	%r7210, %r2047;
	mov.u32 	%r7211, %r2047;
	mov.u32 	%r7212, %r2047;
	mov.u32 	%r7213, %r2047;
	mov.u32 	%r7214, %r2047;
	mov.u32 	%r7215, %r2047;
	mov.u32 	%r7216, %r2047;
	mov.u32 	%r7217, %r2047;
	mov.u32 	%r7218, %r2047;
	mov.u32 	%r7219, %r2047;
	mov.u32 	%r7220, %r2047;
	mov.u32 	%r7221, %r2047;
	mov.u32 	%r7222, %r2047;
	mov.u32 	%r7223, %r2047;
	mov.u32 	%r7224, %r2047;
	mov.u32 	%r7225, %r2047;
	mov.u32 	%r7226, %r2047;
	mov.u32 	%r7227, %r2047;
	mov.u32 	%r7228, %r2047;
	mov.u32 	%r7229, %r2047;
	mov.u32 	%r7230, %r2047;
	mov.u32 	%r7231, %r2047;
	mov.u32 	%r7232, %r2047;
	mov.u32 	%r7233, %r2047;
	mov.u32 	%r7234, %r2047;
	mov.u32 	%r7235, %r2047;
	mov.u32 	%r7236, %r2047;
	mov.u32 	%r7237, %r2047;
	mov.u32 	%r7238, %r2047;
	mov.u32 	%r7239, %r2047;
	mov.u32 	%r7240, %r2047;
	mov.u32 	%r7241, %r2047;
	mov.u32 	%r7242, %r2047;
	mov.u32 	%r7243, %r2047;
	mov.u32 	%r7244, %r2047;
	mov.u32 	%r7245, %r2047;
	mov.u32 	%r7246, %r2047;
	mov.u32 	%r7247, %r2047;
	mov.u32 	%r7248, %r2047;
	mov.u32 	%r7249, %r2047;
	mov.u32 	%r7250, %r2047;
	mov.u32 	%r7251, %r2047;
	mov.u32 	%r7252, %r2047;
	mov.u32 	%r7253, %r2047;
	mov.u32 	%r7254, %r2047;
	mov.u32 	%r7255, %r2047;
	mov.u32 	%r7256, %r2113;

$L__BB0_332:
	mov.u32 	%r549, %r7398;
	mov.u32 	%r545, %r7195;
	mov.u32 	%r541, %r7397;
	mov.u32 	%r539, %r7189;
	mov.u32 	%r537, %r7396;
	mov.u32 	%r529, %r7394;
	mov.u32 	%r7195, %r7390;
	mov.u32 	%r511, %r7389;
	mov.u32 	%r7189, %r7388;
	mov.u32 	%r508, %r7387;
	mov.u32 	%r503, %r7386;
	mov.u32 	%r502, %r7385;
	sub.s32 	%r6968, %r1568, %r48;
	mov.u32 	%r2149, 1;
	not.b32 	%r2423, %r43;
	mov.u32 	%r2415, -1;
	add.s32 	%r2424, %r1565, %r2423;
	mul.lo.s32 	%r2425, %r2424, %r1567;
	add.s32 	%r2426, %r7256, %r2425;
	not.b32 	%r2428, %r44;
	add.s32 	%r2429, %r1566, %r2428;
	mul.lo.s32 	%r2430, %r2429, %r1567;
	add.s32 	%r2431, %r7256, %r2430;
	add.s32 	%r2432, %r2425, %r2430;
	add.s32 	%r2433, %r2432, %r1568;
	not.b32 	%r2434, %r41;
	add.s32 	%r2435, %r1563, %r2434;
	mad.lo.s32 	%r2436, %r2424, %r1563, %r2435;
	not.b32 	%r2438, %r42;
	add.s32 	%r2439, %r1564, %r2438;
	mad.lo.s32 	%r2440, %r2429, %r1564, %r2439;
	add.s32 	%r2441, %r2436, %r2440;
	shl.b32 	%r2442, %r2441, 1;
	add.s32 	%r2443, %r2433, %r2442;
	add.s32 	%r2444, %r7256, %r2443;
	add.s32 	%r2445, %r7256, %r2432;
	div.s32 	%r2446, %r2444, %r1568;
	neg.s32 	%r2447, %r1568;
	sub.s32 	%r2450, %r48, %r1568;
	sub.s32 	%r2451, %r2436, %r2440;
	shl.b32 	%r2452, %r2451, 1;
	add.s32 	%r2453, %r2452, %r1569;
	mad.lo.s32 	%r2454, %r2446, %r48, %r2453;
	mad.lo.s32 	%r2455, %r2446, %r2450, %r2445;
	div.s32 	%r2456, %r2454, %r1569;
	mul.lo.s32 	%r2457, %r2456, %r1569;
	sub.s32 	%r2460, %r1596, %r1569;
	mov.u32 	%r2233, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2135,%r7258,%r2113,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2141, %r7081, %r2135, %p28;
	// begin inline asm
	{mul.f16x2 %r7342,%r2141,%r7255;
}
	// end inline asm
	selp.b32 	%r2144, %r7085, %r2135, %p28;
	// begin inline asm
	{mul.f16x2 %r7340,%r2144,%r7254;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2147,%r7258,%r2149,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2153, %r7081, %r2147, %p28;
	// begin inline asm
	{mul.f16x2 %r7341,%r2153,%r7253;
}
	// end inline asm
	selp.b32 	%r2156, %r7085, %r2147, %p28;
	// begin inline asm
	{mul.f16x2 %r7339,%r2156,%r7252;
}
	// end inline asm
	mov.u32 	%r2161, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2159,%r7258,%r2161,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2165, %r7081, %r2159, %p28;
	// begin inline asm
	{mul.f16x2 %r7338,%r2165,%r7251;
}
	// end inline asm
	selp.b32 	%r2168, %r7085, %r2159, %p28;
	// begin inline asm
	{mul.f16x2 %r7337,%r2168,%r7250;
}
	// end inline asm
	mov.u32 	%r2173, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2171,%r7258,%r2173,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2177, %r7081, %r2171, %p28;
	// begin inline asm
	{mul.f16x2 %r7336,%r2177,%r7370;
}
	// end inline asm
	selp.b32 	%r2180, %r7085, %r2171, %p28;
	// begin inline asm
	{mul.f16x2 %r7334,%r2180,%r7369;
}
	// end inline asm
	mov.u32 	%r2185, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2183,%r7258,%r2185,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2189, %r7081, %r2183, %p28;
	// begin inline asm
	{mul.f16x2 %r7335,%r2189,%r7249;
}
	// end inline asm
	selp.b32 	%r2192, %r7085, %r2183, %p28;
	// begin inline asm
	{mul.f16x2 %r7333,%r2192,%r7248;
}
	// end inline asm
	mov.u32 	%r2197, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2195,%r7258,%r2197,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2201, %r7081, %r2195, %p28;
	// begin inline asm
	{mul.f16x2 %r7332,%r2201,%r7247;
}
	// end inline asm
	selp.b32 	%r2204, %r7085, %r2195, %p28;
	// begin inline asm
	{mul.f16x2 %r7329,%r2204,%r7246;
}
	// end inline asm
	mov.u32 	%r2209, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2207,%r7258,%r2209,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2213, %r7081, %r2207, %p28;
	// begin inline asm
	{mul.f16x2 %r7331,%r2213,%r7245;
}
	// end inline asm
	selp.b32 	%r2216, %r7085, %r2207, %p28;
	// begin inline asm
	{mul.f16x2 %r7328,%r2216,%r7244;
}
	// end inline asm
	mov.u32 	%r2221, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2219,%r7258,%r2221,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2225, %r7081, %r2219, %p28;
	// begin inline asm
	{mul.f16x2 %r7330,%r2225,%r7243;
}
	// end inline asm
	selp.b32 	%r2228, %r7085, %r2219, %p28;
	// begin inline asm
	{mul.f16x2 %r7327,%r2228,%r7242;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2231,%r7258,%r2233,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2237, %r7081, %r2231, %p28;
	// begin inline asm
	{mul.f16x2 %r7326,%r2237,%r7241;
}
	// end inline asm
	selp.b32 	%r2240, %r7085, %r2231, %p28;
	// begin inline asm
	{mul.f16x2 %r7323,%r2240,%r7240;
}
	// end inline asm
	mov.u32 	%r2245, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2243,%r7258,%r2245,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2249, %r7081, %r2243, %p28;
	// begin inline asm
	{mul.f16x2 %r7325,%r2249,%r7239;
}
	// end inline asm
	selp.b32 	%r2252, %r7085, %r2243, %p28;
	// begin inline asm
	{mul.f16x2 %r7322,%r2252,%r7238;
}
	// end inline asm
	mov.u32 	%r2257, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2255,%r7258,%r2257,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2261, %r7081, %r2255, %p28;
	// begin inline asm
	{mul.f16x2 %r7324,%r2261,%r7237;
}
	// end inline asm
	selp.b32 	%r2264, %r7085, %r2255, %p28;
	// begin inline asm
	{mul.f16x2 %r7321,%r2264,%r7236;
}
	// end inline asm
	mov.u32 	%r2269, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2267,%r7258,%r2269,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2273, %r7081, %r2267, %p28;
	// begin inline asm
	{mul.f16x2 %r7320,%r2273,%r7356;
}
	// end inline asm
	selp.b32 	%r2276, %r7085, %r2267, %p28;
	// begin inline asm
	{mul.f16x2 %r7319,%r2276,%r7355;
}
	// end inline asm
	mov.u32 	%r2281, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2279,%r7258,%r2281,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2285, %r7081, %r2279, %p28;
	// begin inline asm
	{mul.f16x2 %r7318,%r2285,%r7368;
}
	// end inline asm
	selp.b32 	%r2288, %r7085, %r2279, %p28;
	// begin inline asm
	{mul.f16x2 %r7316,%r2288,%r7366;
}
	// end inline asm
	mov.u32 	%r2293, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2291,%r7258,%r2293,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2297, %r7081, %r2291, %p28;
	// begin inline asm
	{mul.f16x2 %r7317,%r2297,%r7367;
}
	// end inline asm
	selp.b32 	%r2300, %r7085, %r2291, %p28;
	// begin inline asm
	{mul.f16x2 %r7315,%r2300,%r7365;
}
	// end inline asm
	mov.u32 	%r2305, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2303,%r7258,%r2305,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2309, %r7081, %r2303, %p28;
	// begin inline asm
	{mul.f16x2 %r7314,%r2309,%r7364;
}
	// end inline asm
	selp.b32 	%r2312, %r7085, %r2303, %p28;
	// begin inline asm
	{mul.f16x2 %r7311,%r2312,%r7363;
}
	// end inline asm
	mov.u32 	%r2317, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2315,%r7258,%r2317,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2321, %r7081, %r2315, %p28;
	// begin inline asm
	{mul.f16x2 %r7313,%r2321,%r7235;
}
	// end inline asm
	selp.b32 	%r2324, %r7085, %r2315, %p28;
	// begin inline asm
	{mul.f16x2 %r7310,%r2324,%r7234;
}
	// end inline asm
	mov.u32 	%r2329, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2327,%r7258,%r2329,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2333, %r7081, %r2327, %p28;
	// begin inline asm
	{mul.f16x2 %r7312,%r2333,%r7233;
}
	// end inline asm
	selp.b32 	%r2336, %r7085, %r2327, %p28;
	// begin inline asm
	{mul.f16x2 %r7309,%r2336,%r7232;
}
	// end inline asm
	mov.u32 	%r2341, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2339,%r7258,%r2341,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2345, %r7081, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7308,%r2345,%r7354;
}
	// end inline asm
	selp.b32 	%r2348, %r7085, %r2339, %p28;
	// begin inline asm
	{mul.f16x2 %r7305,%r2348,%r7352;
}
	// end inline asm
	mov.u32 	%r2353, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2351,%r7258,%r2353,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2357, %r7081, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7307,%r2357,%r7353;
}
	// end inline asm
	selp.b32 	%r2360, %r7085, %r2351, %p28;
	// begin inline asm
	{mul.f16x2 %r7304,%r2360,%r7351;
}
	// end inline asm
	mov.u32 	%r2365, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2363,%r7258,%r2365,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2369, %r7081, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7306,%r2369,%r7231;
}
	// end inline asm
	selp.b32 	%r2372, %r7085, %r2363, %p28;
	// begin inline asm
	{mul.f16x2 %r7303,%r2372,%r7230;
}
	// end inline asm
	mov.u32 	%r2377, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2375,%r7258,%r2377,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2381, %r7081, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7302,%r2381,%r7350;
}
	// end inline asm
	selp.b32 	%r2384, %r7085, %r2375, %p28;
	// begin inline asm
	{mul.f16x2 %r7301,%r2384,%r7349;
}
	// end inline asm
	mov.u32 	%r2389, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2387,%r7258,%r2389,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2393, %r7081, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7300,%r2393,%r7348;
}
	// end inline asm
	selp.b32 	%r2396, %r7085, %r2387, %p28;
	// begin inline asm
	{mul.f16x2 %r7298,%r2396,%r7347;
}
	// end inline asm
	mov.u32 	%r2401, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2399,%r7258,%r2401,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2405, %r7081, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7299,%r2405,%r7361;
}
	// end inline asm
	selp.b32 	%r2408, %r7085, %r2399, %p28;
	// begin inline asm
	{mul.f16x2 %r7297,%r2408,%r7359;
}
	// end inline asm
	mov.u32 	%r2413, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2411,%r7258,%r2413,%r2138,%r2415;
}
	// end inline asm
	selp.b32 	%r2417, %r7081, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7296,%r2417,%r7346;
}
	// end inline asm
	selp.b32 	%r2420, %r7085, %r2411, %p28;
	// begin inline asm
	{mul.f16x2 %r7295,%r2420,%r7345;
}
	// end inline asm
	rem.s32 	%r657, %r2426, %r69;
	rem.s32 	%r658, %r2431, %r6968;
	mad.lo.s32 	%r659, %r2446, %r2447, %r2444;
	sub.s32 	%r660, %r2454, %r2457;
	mad.lo.s32 	%r661, %r2456, %r2460, %r2455;
	ld.param.u64 	%rd298, [%rd1+168];
	cvta.to.global.u64 	%rd299, %rd298;
	shl.b32 	%r2510, %r661, 1;
	mul.wide.s32 	%rd300, %r2510, 4;
	add.s64 	%rd29, %rd299, %rd300;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2713, %r1591, 1;
	setp.lt.s32 	%p239, %r661, %r2713;
	setp.eq.s32 	%p240, %r434, %r46;
	setp.gt.s32 	%p241, %r661, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r7261, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r7262, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2513, %r1591, 1;
	setp.lt.s32 	%p234, %r661, %r2513;
	setp.gt.s32 	%p235, %r661, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r7259, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r7260, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7262, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2721, 0;
	mov.u32 	%r2732, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2719,%r7257,%r2721,%r2138,%r2732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7261,%r2719;
}
	// end inline asm
	mov.u32 	%r2730, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2728,%r7257,%r2730,%r2138,%r2732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2733,%r7262,%r2728;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7264,%r2724,%r2733;
}
	// end inline asm
	setp.eq.s32 	%p244, %r435, 0;
	mov.u32 	%r7263, %r7264;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f433;
  cvt.rn.f16.f32 high, %f433;
  mov.b32 %r7263, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7342,%r7342,%r7263;
}
	// end inline asm
	setp.eq.s32 	%p245, %r435, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f435;
  cvt.rn.f16.f32 high, %f435;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7340,%r7340,%r7264;
}
	// end inline asm
	mov.u32 	%r2754, 2;
	mov.u32 	%r2765, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2752,%r7257,%r2754,%r2138,%r2765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2757,%r7261,%r2752;
}
	// end inline asm
	mov.u32 	%r2763, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2761,%r7257,%r2763,%r2138,%r2765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2766,%r7262,%r2761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7266,%r2757,%r2766;
}
	// end inline asm
	mov.u32 	%r7265, %r7266;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f437;
  cvt.rn.f16.f32 high, %f437;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7341,%r7341,%r7265;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f439;
  cvt.rn.f16.f32 high, %f439;
  mov.b32 %r7266, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7339,%r7339,%r7266;
}
	// end inline asm
	mov.u32 	%r2787, 4;
	mov.u32 	%r2798, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2785,%r7257,%r2787,%r2138,%r2798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7261,%r2785;
}
	// end inline asm
	mov.u32 	%r2796, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2794,%r7257,%r2796,%r2138,%r2798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2799,%r7262,%r2794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7268,%r2790,%r2799;
}
	// end inline asm
	mov.u32 	%r7267, %r7268;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f441;
  cvt.rn.f16.f32 high, %f441;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r7267;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f443;
  cvt.rn.f16.f32 high, %f443;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7337,%r7337,%r7268;
}
	// end inline asm
	mov.u32 	%r2820, 6;
	mov.u32 	%r2831, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2818,%r7257,%r2820,%r2138,%r2831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2823,%r7261,%r2818;
}
	// end inline asm
	mov.u32 	%r2829, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2827,%r7257,%r2829,%r2138,%r2831;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2832,%r7262,%r2827;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7270,%r2823,%r2832;
}
	// end inline asm
	mov.u32 	%r7269, %r7270;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f445;
  cvt.rn.f16.f32 high, %f445;
  mov.b32 %r7269, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r7269;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f447;
  cvt.rn.f16.f32 high, %f447;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7334,%r7334,%r7270;
}
	// end inline asm
	mov.u32 	%r2853, 8;
	mov.u32 	%r2864, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2851,%r7257,%r2853,%r2138,%r2864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2856,%r7261,%r2851;
}
	// end inline asm
	mov.u32 	%r2862, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2860,%r7257,%r2862,%r2138,%r2864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2865,%r7262,%r2860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7272,%r2856,%r2865;
}
	// end inline asm
	mov.u32 	%r7271, %r7272;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f449;
  cvt.rn.f16.f32 high, %f449;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7335,%r7335,%r7271;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f451;
  cvt.rn.f16.f32 high, %f451;
  mov.b32 %r7272, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7333,%r7333,%r7272;
}
	// end inline asm
	mov.u32 	%r2886, 10;
	mov.u32 	%r2897, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2884,%r7257,%r2886,%r2138,%r2897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2889,%r7261,%r2884;
}
	// end inline asm
	mov.u32 	%r2895, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2893,%r7257,%r2895,%r2138,%r2897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2898,%r7262,%r2893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7274,%r2889,%r2898;
}
	// end inline asm
	mov.u32 	%r7273, %r7274;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f453;
  cvt.rn.f16.f32 high, %f453;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7332,%r7332,%r7273;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f455;
  cvt.rn.f16.f32 high, %f455;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7329,%r7329,%r7274;
}
	// end inline asm
	mov.u32 	%r2919, 12;
	mov.u32 	%r2930, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2917,%r7257,%r2919,%r2138,%r2930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2922,%r7261,%r2917;
}
	// end inline asm
	mov.u32 	%r2928, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2926,%r7257,%r2928,%r2138,%r2930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2931,%r7262,%r2926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7276,%r2922,%r2931;
}
	// end inline asm
	mov.u32 	%r7275, %r7276;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f457;
  cvt.rn.f16.f32 high, %f457;
  mov.b32 %r7275, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7331,%r7331,%r7275;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f459;
  cvt.rn.f16.f32 high, %f459;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7328,%r7328,%r7276;
}
	// end inline asm
	mov.u32 	%r2952, 14;
	mov.u32 	%r2963, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2950,%r7257,%r2952,%r2138,%r2963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2955,%r7261,%r2950;
}
	// end inline asm
	mov.u32 	%r2961, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2959,%r7257,%r2961,%r2138,%r2963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2964,%r7262,%r2959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7278,%r2955,%r2964;
}
	// end inline asm
	mov.u32 	%r7277, %r7278;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f461;
  cvt.rn.f16.f32 high, %f461;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7326,%r7326,%r7277;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f463;
  cvt.rn.f16.f32 high, %f463;
  mov.b32 %r7278, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7323,%r7323,%r7278;
}
	// end inline asm
	mov.u32 	%r2985, 16;
	mov.u32 	%r2996, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2983,%r7257,%r2985,%r2138,%r2996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2988,%r7261,%r2983;
}
	// end inline asm
	mov.u32 	%r2994, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2992,%r7257,%r2994,%r2138,%r2996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2997,%r7262,%r2992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7280,%r2988,%r2997;
}
	// end inline asm
	mov.u32 	%r7279, %r7280;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f465;
  cvt.rn.f16.f32 high, %f465;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7325,%r7325,%r7279;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7322,%r7322,%r7280;
}
	// end inline asm
	mov.u32 	%r3018, 18;
	mov.u32 	%r3029, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3016,%r7257,%r3018,%r2138,%r3029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3021,%r7261,%r3016;
}
	// end inline asm
	mov.u32 	%r3027, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3025,%r7257,%r3027,%r2138,%r3029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3030,%r7262,%r3025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7282,%r3021,%r3030;
}
	// end inline asm
	mov.u32 	%r7281, %r7282;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7281, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7320,%r7320,%r7281;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f471;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7319,%r7319,%r7282;
}
	// end inline asm
	mov.u32 	%r3051, 20;
	mov.u32 	%r3062, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3049,%r7257,%r3051,%r2138,%r3062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3054,%r7261,%r3049;
}
	// end inline asm
	mov.u32 	%r3060, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3058,%r7257,%r3060,%r2138,%r3062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3063,%r7262,%r3058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7284,%r3054,%r3063;
}
	// end inline asm
	mov.u32 	%r7283, %r7284;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f473;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7318,%r7318,%r7283;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f475;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r7284, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7316,%r7316,%r7284;
}
	// end inline asm
	mov.u32 	%r3084, 22;
	mov.u32 	%r3095, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3082,%r7257,%r3084,%r2138,%r3095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3087,%r7261,%r3082;
}
	// end inline asm
	mov.u32 	%r3093, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3091,%r7257,%r3093,%r2138,%r3095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3096,%r7262,%r3091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7286,%r3087,%r3096;
}
	// end inline asm
	mov.u32 	%r7285, %r7286;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f477;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7314,%r7314,%r7285;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f479;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7311,%r7311,%r7286;
}
	// end inline asm
	mov.u32 	%r3117, 24;
	mov.u32 	%r3128, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3115,%r7257,%r3117,%r2138,%r3128;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3120,%r7261,%r3115;
}
	// end inline asm
	mov.u32 	%r3126, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3124,%r7257,%r3126,%r2138,%r3128;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3129,%r7262,%r3124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7288,%r3120,%r3129;
}
	// end inline asm
	mov.u32 	%r7287, %r7288;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f481;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r7287, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7313,%r7313,%r7287;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f483;
  cvt.rn.f16.f32 high, %f483;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7310,%r7310,%r7288;
}
	// end inline asm
	mov.u32 	%r3150, 26;
	mov.u32 	%r3161, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3148,%r7257,%r3150,%r2138,%r3161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3153,%r7261,%r3148;
}
	// end inline asm
	mov.u32 	%r3159, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3157,%r7257,%r3159,%r2138,%r3161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3162,%r7262,%r3157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7290,%r3153,%r3162;
}
	// end inline asm
	mov.u32 	%r7289, %r7290;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f485;
  cvt.rn.f16.f32 high, %f485;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7308,%r7308,%r7289;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f487;
  cvt.rn.f16.f32 high, %f487;
  mov.b32 %r7290, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7305,%r7305,%r7290;
}
	// end inline asm
	mov.u32 	%r3183, 28;
	mov.u32 	%r3194, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3181,%r7257,%r3183,%r2138,%r3194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3186,%r7261,%r3181;
}
	// end inline asm
	mov.u32 	%r3192, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3190,%r7257,%r3192,%r2138,%r3194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3195,%r7262,%r3190;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7292,%r3186,%r3195;
}
	// end inline asm
	mov.u32 	%r7291, %r7292;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f489;
  cvt.rn.f16.f32 high, %f489;
  mov.b32 %r7291, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7307,%r7307,%r7291;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f491;
  cvt.rn.f16.f32 high, %f491;
  mov.b32 %r7292, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7304,%r7304,%r7292;
}
	// end inline asm
	mov.u32 	%r3225, 31;
	mov.u32 	%r3216, 30;
	mov.u32 	%r3227, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3214,%r7257,%r3216,%r2138,%r3227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3219,%r7261,%r3214;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3223,%r7257,%r3225,%r2138,%r3227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3228,%r7262,%r3223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7294,%r3219,%r3228;
}
	// end inline asm
	mov.u32 	%r7293, %r7294;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f493;
  cvt.rn.f16.f32 high, %f493;
  mov.b32 %r7293, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7300,%r7300,%r7293;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f495;
  cvt.rn.f16.f32 high, %f495;
  mov.b32 %r7294, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7298,%r7298,%r7294;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7259, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7260, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r660, %r1573;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2615,%r7259,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7342,%r7342,%r2615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2621,%r7259,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7330,%r7330,%r2621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2627,%r7259,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7332,%r7332,%r2627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2633,%r7259,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7312,%r7312,%r2633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2639,%r7259,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7314,%r7314,%r2639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2645,%r7259,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7299,%r7299,%r2645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2651,%r7260,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7336,%r7336,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2657,%r7260,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7317,%r7317,%r2657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2663,%r7259,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7340,%r7340,%r2663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2669,%r7259,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7327,%r7327,%r2669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2675,%r7259,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7329,%r7329,%r2675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2681,%r7259,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7309,%r7309,%r2681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2687,%r7259,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7311,%r7311,%r2687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2693,%r7259,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7297,%r7297,%r2693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2699,%r7260,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7334,%r7334,%r2699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2705,%r7260,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7315,%r7315,%r2705;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2518, %r1573, -2;
	setp.ne.s32 	%p238, %r660, %r2518;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2519,%r7259,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7320,%r7320,%r2519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2525,%r7259,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7302,%r7302,%r2525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2531,%r7260,%r7091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7338,%r7338,%r2531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2537,%r7260,%r7089;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7324,%r7324,%r2537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2543,%r7260,%r7095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7326,%r7326,%r2543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2549,%r7260,%r7093;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7306,%r7306,%r2549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2555,%r7260,%r7099;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7308,%r7308,%r2555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2561,%r7260,%r7097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7296,%r7296,%r2561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2567,%r7259,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7319,%r7319,%r2567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2573,%r7259,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7301,%r7301,%r2573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2579,%r7260,%r7090;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7337,%r7337,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2585,%r7260,%r7088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7321,%r7321,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2591,%r7260,%r7094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7323,%r7323,%r2591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2597,%r7260,%r7092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7303,%r7303,%r2597;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2603,%r7260,%r7098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7305,%r7305,%r2603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2609,%r7260,%r7096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7295,%r7295,%r2609;
}
	// end inline asm

$L__BB0_408:
	ld.param.u64 	%rd302, [%rd1+104];
	cvta.to.global.u64 	%rd30, %rd302;
	setp.ne.s32 	%p276, %r41, 0;
	@%p276 bra 	$L__BB0_413;

	setp.eq.s32 	%p277, %r42, 0;
	mad.lo.s32 	%r3248, %r657, %r1566, %r44;
	mul.lo.s32 	%r3249, %r1564, %r3248;
	mul.lo.s32 	%r3250, %r3249, 768;
	mad.lo.s32 	%r3251, %r42, 384, %r3250;
	add.s32 	%r3252, %r3251, -64;
	mul.wide.s32 	%rd303, %r3252, 4;
	add.s64 	%rd304, %rd30, %rd303;
	add.s64 	%rd306, %rd304, %rd305;
	ld.global.v4.u32 	{%r7354, %r7352, %r7346, %r7345}, [%rd306+256];
	ld.global.v4.u32 	{%r7356, %r7355, %r7350, %r7349}, [%rd306+1024];
	add.s64 	%rd31, %rd304, %rd307;
	@%p277 bra 	$L__BB0_411;

	ld.global.v2.u32 	{%r7348, %r7347}, [%rd31];

$L__BB0_411:
	setp.ne.s32 	%p278, %r42, %r2035;
	ld.global.v2.u32 	{%r7353, %r7351}, [%rd31+768];
	@%p278 bra 	$L__BB0_413;

	ld.global.v2.u32 	{%r7358, %r7357}, [%rd31+1536];

$L__BB0_413:
	setp.ne.s32 	%p279, %r42, 0;
	@%p279 bra 	$L__BB0_415;

	not.b32 	%r6970, %r41;
	add.s32 	%r6969, %r1563, %r6970;
	mad.lo.s32 	%r3271, %r658, %r1565, %r43;
	mul.lo.s32 	%r3275, %r3271, %r1642;
	mad.lo.s32 	%r3278, %r6969, 384, %r3275;
	add.s32 	%r3279, %r3278, -64;
	mad.lo.s32 	%r3282, %r1644, %r69, %r3279;
	mul.wide.s32 	%rd308, %r3282, 4;
	add.s64 	%rd309, %rd30, %rd308;
	add.s64 	%rd311, %rd309, %rd305;
	ld.global.v4.u32 	{%r7370, %r7369, %r7367, %r7365}, [%rd311+256];
	ld.global.v4.u32 	{%r7364, %r7363, %r7361, %r7359}, [%rd311+1024];
	add.s64 	%rd313, %rd309, %rd307;
	ld.global.v2.u32 	{%r7368, %r7366}, [%rd313+768];
	ld.global.v2.u32 	{%r7348, %r7347}, [%rd313+1536];

$L__BB0_415:
	ld.param.u64 	%rd315, [%rd1+112];
	cvta.to.global.u64 	%rd32, %rd315;
	add.s32 	%r3295, %r1568, -1;
	setp.ge.s32 	%p280, %r659, %r3295;
	setp.lt.s32 	%p281, %r659, 2;
	or.pred  	%p282, %p281, %p280;
	setp.lt.s32 	%p283, %r660, 2;
	or.pred  	%p284, %p282, %p283;
	add.s32 	%r3296, %r1569, -2;
	setp.ge.s32 	%p285, %r660, %r3296;
	or.pred  	%p286, %p285, %p284;
	mov.u32 	%r7385, %r2047;
	mov.u32 	%r7386, %r2047;
	mov.u32 	%r7387, %r2047;
	mov.u32 	%r7388, %r2047;
	mov.u32 	%r7389, %r2047;
	mov.u32 	%r7390, %r2047;
	mov.u32 	%r7391, %r2047;
	mov.u32 	%r7392, %r2047;
	mov.u32 	%r7393, %r2047;
	mov.u32 	%r7394, %r2047;
	mov.u32 	%r7395, %r2047;
	mov.u32 	%r7396, %r2047;
	mov.u32 	%r7397, %r2047;
	mov.u32 	%r7398, %r2047;
	mov.u32 	%r7399, %r2047;
	mov.u32 	%r7400, %r2047;
	mov.u32 	%r7401, %r2047;
	mov.u32 	%r7402, %r2047;
	mov.u32 	%r7403, %r2047;
	mov.u32 	%r7404, %r2047;
	mov.u32 	%r7405, %r2047;
	mov.u32 	%r7406, %r2047;
	@%p286 bra 	$L__BB0_426;

	mad.lo.s32 	%r928, %r660, %r1568, %r659;
	shl.b32 	%r3297, %r928, 6;
	mul.wide.s32 	%rd316, %r3297, 4;
	add.s64 	%rd33, %rd32, %rd316;
	and.pred  	%p289, %p276, %p279;
	mov.u32 	%r7388, %r2047;
	mov.u32 	%r7390, %r2047;
	@%p289 bra 	$L__BB0_418;

	add.s64 	%rd318, %rd33, %rd307;
	ld.global.v2.u32 	{%r7390, %r7388}, [%rd318+256];

$L__BB0_418:
	mov.u32 	%r7393, %r2047;
	mov.u32 	%r7395, %r2047;
	@%p276 bra 	$L__BB0_420;

	shl.b32 	%r3301, %r1568, 5;
	cvt.s64.s32 	%rd319, %r3301;
	cvt.s64.s32 	%rd320, %r46;
	add.s64 	%rd321, %rd319, %rd320;
	shl.b64 	%rd322, %rd321, 3;
	add.s64 	%rd323, %rd33, %rd322;
	ld.global.v2.u32 	{%r7395, %r7393}, [%rd323];

$L__BB0_420:
	mov.u32 	%r7400, %r2047;
	mov.u32 	%r7402, %r2047;
	@%p279 bra 	$L__BB0_422;

	shl.b32 	%r3305, %r1568, 5;
	neg.s32 	%r3306, %r3305;
	cvt.s64.s32 	%rd324, %r3306;
	cvt.s64.s32 	%rd325, %r46;
	add.s64 	%rd326, %rd324, %rd325;
	shl.b64 	%rd327, %rd326, 3;
	add.s64 	%rd328, %rd33, %rd327;
	ld.global.v2.u32 	{%r7402, %r7400}, [%rd328];

$L__BB0_422:
	shl.b32 	%r3309, %r1569, 6;
	shl.b32 	%r3310, %r928, 7;
	mad.lo.s32 	%r3311, %r3309, %r1568, %r3310;
	mul.wide.s32 	%rd329, %r3311, 4;
	add.s64 	%rd34, %rd32, %rd329;
	mov.u32 	%r7385, %r2047;
	mov.u32 	%r7386, %r2047;
	mov.u32 	%r7391, %r2047;
	mov.u32 	%r7392, %r2047;
	mov.u32 	%r7394, %r2047;
	mov.u32 	%r7396, %r2047;
	mov.u32 	%r7403, %r2047;
	mov.u32 	%r7404, %r2047;
	@%p276 bra 	$L__BB0_424;

	shl.b32 	%r3312, %r1568, 5;
	cvt.s64.s32 	%rd330, %r3312;
	cvt.s64.s32 	%rd331, %r46;
	add.s64 	%rd332, %rd330, %rd331;
	shl.b64 	%rd333, %rd332, 4;
	add.s64 	%rd334, %rd34, %rd333;
	ld.global.v4.u32 	{%r7396, %r7394, %r7386, %r7385}, [%rd334];
	shl.b32 	%r3317, %r1568, 6;
	add.s32 	%r3318, %r3317, -32;
	cvt.s64.s32 	%rd335, %r3318;
	add.s64 	%rd336, %rd335, %rd331;
	shl.b64 	%rd337, %rd336, 4;
	add.s64 	%rd338, %rd34, %rd337;
	ld.global.v4.u32 	{%r7404, %r7403, %r7392, %r7391}, [%rd338];

$L__BB0_424:
	mov.u32 	%r7387, %r2047;
	mov.u32 	%r7389, %r2047;
	mov.u32 	%r7397, %r2047;
	mov.u32 	%r7398, %r2047;
	mov.u32 	%r7399, %r2047;
	mov.u32 	%r7401, %r2047;
	mov.u32 	%r7405, %r2047;
	mov.u32 	%r7406, %r2047;
	@%p279 bra 	$L__BB0_426;

	shl.b32 	%r3324, %r1568, 5;
	xor.b32  	%r3325, %r3324, -32;
	cvt.s64.s32 	%rd339, %r3325;
	cvt.s64.s32 	%rd340, %r46;
	add.s64 	%rd341, %rd339, %rd340;
	shl.b64 	%rd342, %rd341, 4;
	add.s64 	%rd343, %rd34, %rd342;
	ld.global.v4.u32 	{%r7406, %r7405, %r7401, %r7399}, [%rd343];
	add.s64 	%rd345, %rd34, %rd305;
	ld.global.v4.u32 	{%r7398, %r7397, %r7389, %r7387}, [%rd345];

$L__BB0_426:
	mov.u32 	%r3339, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3335,%r7227,%r436,%r2138,%r3339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3335;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7227;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3342, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3343,%r7228,%r3342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3346,%r7080,%r3343;
}
	// end inline asm
	@%p28 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7407,%r7342;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7407,%r7081,%r3343;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3359, 31;
	mov.u32 	%r3382, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3357,%r7407,%r3359,%r2138,%r3382;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3362,%r3346,%r3357;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3365,%r7226,%r7225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3368,%r3365,%r3362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3371,%r7229,%r3368;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3374,%r7342,%r3371;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3378,%r7222,%r436,%r2138,%r3382;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3378;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7222;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3385, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3386,%r7223,%r3385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3389,%r7080,%r3386;
}
	// end inline asm
	mov.u32 	%r7408, %r7341;
	@%p28 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7408,%r7081,%r3386;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3400,%r7408,%r3359,%r2138,%r3382;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3405,%r3389,%r3400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3408,%r7226,%r7221;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3411,%r3405,%r3408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3414,%r7224,%r3411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3417,%r7341,%r3414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3420,%r7227,%r7228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3423,%r7084,%r3420;
}
	// end inline asm
	@%p28 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7409,%r7340;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7409,%r7085,%r3420;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3436, 31;
	mov.u32 	%r3438, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3434,%r7409,%r3436,%r2138,%r3438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3439,%r3423,%r3434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3442,%r7219,%r7218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3445,%r3442,%r3439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3448,%r7220,%r3445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3451,%r7340,%r3448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3454,%r7222,%r7223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3457,%r7084,%r3454;
}
	// end inline asm
	mov.u32 	%r7410, %r7339;
	@%p28 bra 	$L__BB0_436;

	// begin inline asm
	{mul.f16x2 %r7410,%r7085,%r3454;
}
	// end inline asm

$L__BB0_436:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3466,%r7410,%r3436,%r2138,%r3438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3471,%r3457,%r3466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3474,%r7219,%r7216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3477,%r3471,%r3474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3480,%r7217,%r3477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3483,%r7339,%r3480;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3487,%r7213,%r436,%r2138,%r3438;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3487;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7213;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3494, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3495,%r7214,%r3494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3498,%r7080,%r3495;
}
	// end inline asm
	@%p28 bra 	$L__BB0_438;
	bra.uni 	$L__BB0_437;

$L__BB0_438:
	// begin inline asm
	{neg.f16x2 %r7411,%r7338;
}
	// end inline asm
	bra.uni 	$L__BB0_439;

$L__BB0_437:
	// begin inline asm
	{mul.f16x2 %r7411,%r7081,%r3495;
}
	// end inline asm

$L__BB0_439:
	mov.u32 	%r3513, 31;
	mov.u32 	%r3515, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3511,%r7411,%r3513,%r2138,%r3515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3516,%r3498,%r3511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3519,%r7212,%r7226;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3522,%r3519,%r3516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3525,%r7215,%r3522;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3528,%r7338,%r3525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3531,%r7213,%r7214;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3534,%r7084,%r3531;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7412,%r7337;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7412,%r7085,%r3531;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3547, 31;
	mov.u32 	%r3570, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3545,%r7412,%r3547,%r2138,%r3570;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3550,%r3534,%r3545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r7210,%r7219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3556,%r3553,%r3550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3559,%r7211,%r3556;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3562,%r7337,%r3559;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3566,%r7208,%r436,%r2138,%r3570;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3566;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7208;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3573, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3574,%r7209,%r3573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3577,%r7080,%r3574;
}
	// end inline asm
	@%p28 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7413,%r7336;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7413,%r7081,%r3574;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r3592, 31;
	mov.u32 	%r3615, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3590,%r7413,%r3592,%r2138,%r3615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3595,%r3577,%r3590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r7207,%r7478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3601,%r3598,%r3595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3604,%r7406,%r3601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3607,%r7336,%r3604;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3611,%r7203,%r436,%r2138,%r3615;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3611;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7203;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3618, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3619,%r7204,%r3618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3622,%r7080,%r3619;
}
	// end inline asm
	mov.u32 	%r7414, %r7335;
	@%p28 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7414,%r7081,%r3619;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3633,%r7414,%r3592,%r2138,%r3615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3638,%r3622,%r3633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r7207,%r7225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3644,%r3638,%r3641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3647,%r7205,%r3644;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3650,%r7335,%r3647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3653,%r7208,%r7209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3656,%r7084,%r3653;
}
	// end inline asm
	@%p28 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7415,%r7334;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7415,%r7085,%r3653;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r3669, 31;
	mov.u32 	%r3671, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3667,%r7415,%r3669,%r2138,%r3671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3672,%r3656,%r3667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3675,%r7202,%r7477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3678,%r3675,%r3672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3681,%r7405,%r3678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3684,%r7334,%r3681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3687,%r7203,%r7204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3690,%r7084,%r3687;
}
	// end inline asm
	mov.u32 	%r7416, %r7333;
	@%p28 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7416,%r7085,%r3687;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3699,%r7416,%r3669,%r2138,%r3671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3704,%r3690,%r3699;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r7202,%r7218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3710,%r3704,%r3707;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3713,%r7200,%r3710;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3716,%r7333,%r3713;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3720,%r7197,%r436,%r2138,%r3671;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3720;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7197;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3727, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3728,%r7198,%r3727;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3731,%r7080,%r3728;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7417,%r7332;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7417,%r7081,%r3728;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3746, 31;
	mov.u32 	%r3769, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3744,%r7417,%r3746,%r2138,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3749,%r3731,%r3744;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r7196,%r7207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3755,%r3752,%r3749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3758,%r549,%r3755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7255,%r7332,%r3758;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3765,%r7193,%r436,%r2138,%r3769;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3765;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7193;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3772, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3773,%r7194,%r3772;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3776,%r7080,%r3773;
}
	// end inline asm
	mov.u32 	%r7418, %r7331;
	@%p28 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7418,%r7081,%r3773;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3787,%r7418,%r3746,%r2138,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r3776,%r3787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3795,%r7196,%r7226;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r3792,%r3795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r545,%r3798;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7253,%r7331,%r3801;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3807,%r7198,%r7228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3810,%r7194,%r7204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3813,%r3807,%r3810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3816,%r7192,%r3813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3819,%r7330,%r3816;
}
	// end inline asm
	selp.b32 	%r1054, %r7330, %r3819, %p28;
	// begin inline asm
	{sub.f16x2 %r3822,%r7197,%r7198;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3825,%r7084,%r3822;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7419,%r7329;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7419,%r7085,%r3822;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3838, 31;
	mov.u32 	%r3840, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3836,%r7419,%r3838,%r2138,%r3840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3841,%r3825,%r3836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3844,%r7190,%r7202;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3847,%r3844,%r3841;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3850,%r541,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7254,%r7329,%r3850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3856,%r7193,%r7194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3859,%r7084,%r3856;
}
	// end inline asm
	mov.u32 	%r7420, %r7328;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7420,%r7085,%r3856;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3868,%r7420,%r3838,%r2138,%r3840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3873,%r3859,%r3868;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r7190,%r7219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3879,%r3873,%r3876;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3882,%r539,%r3879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7252,%r7328,%r3882;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3888,%r7197,%r7227;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3891,%r7193,%r7203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3894,%r3888,%r3891;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3897,%r7188,%r3894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3900,%r7327,%r3897;
}
	// end inline asm
	selp.b32 	%r1066, %r7327, %r3900, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3904,%r7185,%r436,%r2138,%r3840;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3904;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7185;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3911, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3912,%r7186,%r3911;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3915,%r7080,%r3912;
}
	// end inline asm
	@%p28 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7421,%r7326;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7421,%r7081,%r3912;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r3930, 31;
	mov.u32 	%r3953, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3928,%r7421,%r3930,%r2138,%r3953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3933,%r3915,%r3928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r7184,%r7196;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3939,%r3936,%r3933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3942,%r537,%r3939;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7251,%r7326,%r3942;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3949,%r7181,%r436,%r2138,%r3953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3949;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7181;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3956, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3957,%r7182,%r3956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3960,%r7080,%r3957;
}
	// end inline asm
	mov.u32 	%r7422, %r7325;
	@%p28 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7422,%r7081,%r3957;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3971,%r7422,%r3930,%r2138,%r3953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3976,%r3960,%r3971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3979,%r7184,%r7212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r3976,%r3979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3985,%r7183,%r3982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3988,%r7325,%r3985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3991,%r7186,%r7214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3994,%r7182,%r7194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3997,%r3991,%r3994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4000,%r7180,%r3997;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4003,%r7324,%r4000;
}
	// end inline asm
	selp.b32 	%r1078, %r7324, %r4003, %p28;
	// begin inline asm
	{sub.f16x2 %r4006,%r7185,%r7186;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4009,%r7084,%r4006;
}
	// end inline asm
	@%p28 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7423,%r7323;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7423,%r7085,%r4006;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4022, 31;
	mov.u32 	%r4024, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4020,%r7423,%r4022,%r2138,%r4024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4025,%r4009,%r4020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r7178,%r7190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r4028,%r4025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r529,%r4031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7250,%r7323,%r4034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r7181,%r7182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4043,%r7084,%r4040;
}
	// end inline asm
	mov.u32 	%r7424, %r7322;
	@%p28 bra 	$L__BB0_472;

	// begin inline asm
	{mul.f16x2 %r7424,%r7085,%r4040;
}
	// end inline asm

$L__BB0_472:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4052,%r7424,%r4022,%r2138,%r4024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4057,%r4043,%r4052;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4060,%r7178,%r7210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4063,%r4057,%r4060;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4066,%r7177,%r4063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4069,%r7322,%r4066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4072,%r7185,%r7213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4075,%r7181,%r7193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4078,%r4072,%r4075;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4081,%r7176,%r4078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4084,%r7321,%r4081;
}
	// end inline asm
	selp.b32 	%r1090, %r7321, %r4084, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4088,%r7174,%r436,%r2138,%r4024;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4088;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7174;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4095, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4096,%r7175,%r4095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4099,%r7080,%r4096;
}
	// end inline asm
	@%p28 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7425,%r7320;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7425,%r7081,%r4096;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4114, 31;
	mov.u32 	%r4116, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4112,%r7425,%r4114,%r2138,%r4116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4117,%r4099,%r4112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r7462,%r7184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4123,%r4120,%r4117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4126,%r7404,%r4123;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4129,%r7320,%r4126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4132,%r7174,%r7175;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4135,%r7084,%r4132;
}
	// end inline asm
	@%p28 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7426,%r7319;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7426,%r7085,%r4132;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4148, 31;
	mov.u32 	%r4171, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4146,%r7426,%r4148,%r2138,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4151,%r4135,%r4146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4154,%r7461,%r7178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4157,%r4154,%r4151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4160,%r7403,%r4157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4163,%r7319,%r4160;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4167,%r7170,%r436,%r2138,%r4171;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4167;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7170;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4174, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4175,%r7171,%r4174;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4178,%r7080,%r4175;
}
	// end inline asm
	mov.u32 	%r7427, %r7318;
	@%p28 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7427,%r7081,%r4175;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4189,%r7427,%r4148,%r2138,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4194,%r4178,%r4189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r7146,%r7207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4200,%r4194,%r4197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4203,%r7402,%r4200;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7249,%r7318,%r4203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r7147,%r7209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r7171,%r7476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4215,%r4209,%r4212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4218,%r7401,%r4215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4221,%r7317,%r4218;
}
	// end inline asm
	selp.b32 	%r1108, %r7317, %r4221, %p28;
	// begin inline asm
	{sub.f16x2 %r4224,%r7170,%r7171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4227,%r7084,%r4224;
}
	// end inline asm
	mov.u32 	%r7428, %r7316;
	@%p28 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7428,%r7085,%r4224;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4238, 31;
	mov.u32 	%r4276, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4236,%r7428,%r4238,%r2138,%r4276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4241,%r4227,%r4236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4244,%r7144,%r7202;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4247,%r4241,%r4244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4250,%r7400,%r4247;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7248,%r7316,%r4250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4256,%r7145,%r7208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4259,%r7170,%r7475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4262,%r4256,%r4259;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4265,%r7399,%r4262;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4268,%r7315,%r4265;
}
	// end inline asm
	selp.b32 	%r1114, %r7315, %r4268, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4272,%r7166,%r436,%r2138,%r4276;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4272;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7166;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4279, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4280,%r7167,%r4279;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4283,%r7080,%r4280;
}
	// end inline asm
	@%p28 bra 	$L__BB0_484;
	bra.uni 	$L__BB0_483;

$L__BB0_484:
	// begin inline asm
	{neg.f16x2 %r7429,%r7314;
}
	// end inline asm
	bra.uni 	$L__BB0_485;

$L__BB0_483:
	// begin inline asm
	{mul.f16x2 %r7429,%r7081,%r4280;
}
	// end inline asm

$L__BB0_485:
	mov.u32 	%r4298, 31;
	mov.u32 	%r4321, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4296,%r7429,%r4298,%r2138,%r4321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4301,%r4283,%r4296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r7165,%r7146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4307,%r4304,%r4301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4310,%r7398,%r4307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7247,%r7314,%r4310;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4317,%r7162,%r436,%r2138,%r4321;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4317;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7162;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4324, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4325,%r7163,%r4324;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4328,%r7080,%r4325;
}
	// end inline asm
	mov.u32 	%r7430, %r7313;
	@%p28 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7430,%r7081,%r4325;
}
	// end inline asm

$L__BB0_487:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4339,%r7430,%r4298,%r2138,%r4321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4344,%r4328,%r4339;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4347,%r7165,%r7196;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r4344,%r4347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4353,%r7195,%r4350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7245,%r7313,%r4353;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4359,%r7167,%r7198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r7163,%r7171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4365,%r4359,%r4362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4368,%r511,%r4365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4371,%r7312,%r4368;
}
	// end inline asm
	selp.b32 	%r7243, %r7312, %r4371, %p28;
	// begin inline asm
	{sub.f16x2 %r4374,%r7166,%r7167;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4377,%r7084,%r4374;
}
	// end inline asm
	@%p28 bra 	$L__BB0_489;
	bra.uni 	$L__BB0_488;

$L__BB0_489:
	// begin inline asm
	{neg.f16x2 %r7431,%r7311;
}
	// end inline asm
	bra.uni 	$L__BB0_490;

$L__BB0_488:
	// begin inline asm
	{mul.f16x2 %r7431,%r7085,%r4374;
}
	// end inline asm

$L__BB0_490:
	mov.u32 	%r4390, 31;
	mov.u32 	%r4392, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4388,%r7431,%r4390,%r2138,%r4392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4393,%r4377,%r4388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r7160,%r7144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4399,%r4396,%r4393;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4402,%r7397,%r4399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7246,%r7311,%r4402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4408,%r7162,%r7163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4411,%r7084,%r4408;
}
	// end inline asm
	mov.u32 	%r7432, %r7310;
	@%p28 bra 	$L__BB0_492;

	// begin inline asm
	{mul.f16x2 %r7432,%r7085,%r4408;
}
	// end inline asm

$L__BB0_492:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4420,%r7432,%r4390,%r2138,%r4392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4425,%r4411,%r4420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4428,%r7160,%r7190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4431,%r4425,%r4428;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4434,%r7189,%r4431;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7244,%r7310,%r4434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4440,%r7166,%r7197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4443,%r7162,%r7170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4446,%r4440,%r4443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4449,%r508,%r4446;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4452,%r7309,%r4449;
}
	// end inline asm
	selp.b32 	%r7242, %r7309, %r4452, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4456,%r7156,%r436,%r2138,%r4392;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4456;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7156;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4463, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4464,%r7157,%r4463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4467,%r7080,%r4464;
}
	// end inline asm
	@%p28 bra 	$L__BB0_494;
	bra.uni 	$L__BB0_493;

$L__BB0_494:
	// begin inline asm
	{neg.f16x2 %r7433,%r7308;
}
	// end inline asm
	bra.uni 	$L__BB0_495;

$L__BB0_493:
	// begin inline asm
	{mul.f16x2 %r7433,%r7081,%r4464;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4482, 31;
	mov.u32 	%r4505, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4480,%r7433,%r4482,%r2138,%r4505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4485,%r4467,%r4480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r7143,%r7165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4491,%r4488,%r4485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4494,%r7396,%r4491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7241,%r7308,%r4494;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4501,%r7154,%r436,%r2138,%r4505;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4501;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7154;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4508, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4509,%r7155,%r4508;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4512,%r7080,%r4509;
}
	// end inline asm
	mov.u32 	%r7434, %r7307;
	@%p28 bra 	$L__BB0_497;

	// begin inline asm
	{mul.f16x2 %r7434,%r7081,%r4509;
}
	// end inline asm

$L__BB0_497:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4523,%r7434,%r4482,%r2138,%r4505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4528,%r4512,%r4523;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4531,%r7143,%r7184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r4528,%r4531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4537,%r7395,%r4534;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7239,%r7307,%r4537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4543,%r7157,%r7186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r7155,%r7163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r4543,%r4546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4552,%r503,%r4549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4555,%r7306,%r4552;
}
	// end inline asm
	selp.b32 	%r7237, %r7306, %r4555, %p28;
	// begin inline asm
	{sub.f16x2 %r4558,%r7156,%r7157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4561,%r7084,%r4558;
}
	// end inline asm
	@%p28 bra 	$L__BB0_499;
	bra.uni 	$L__BB0_498;

$L__BB0_499:
	// begin inline asm
	{neg.f16x2 %r7435,%r7305;
}
	// end inline asm
	bra.uni 	$L__BB0_500;

$L__BB0_498:
	// begin inline asm
	{mul.f16x2 %r7435,%r7085,%r4558;
}
	// end inline asm

$L__BB0_500:
	mov.u32 	%r4574, 31;
	mov.u32 	%r4576, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4572,%r7435,%r4574,%r2138,%r4576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4577,%r4561,%r4572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r7142,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4583,%r4580,%r4577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4586,%r7394,%r4583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7240,%r7305,%r4586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r7154,%r7155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4595,%r7084,%r4592;
}
	// end inline asm
	mov.u32 	%r7436, %r7304;
	@%p28 bra 	$L__BB0_502;

	// begin inline asm
	{mul.f16x2 %r7436,%r7085,%r4592;
}
	// end inline asm

$L__BB0_502:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4604,%r7436,%r4574,%r2138,%r4576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4609,%r4595,%r4604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4612,%r7142,%r7178;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4615,%r4609,%r4612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4618,%r7393,%r4615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7238,%r7304,%r4618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4624,%r7156,%r7185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4627,%r7154,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4630,%r4624,%r4627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4633,%r502,%r4630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4636,%r7303,%r4633;
}
	// end inline asm
	selp.b32 	%r7236, %r7303, %r4636, %p28;
	// begin inline asm
	{sub.f16x2 %r4639,%r7141,%r7175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4642,%r7460,%r7155;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4645,%r4639,%r4642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4648,%r7392,%r4645;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4651,%r7302,%r4648;
}
	// end inline asm
	selp.b32 	%r1163, %r7302, %r4651, %p28;
	// begin inline asm
	{sub.f16x2 %r4654,%r7140,%r7174;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4657,%r7459,%r7154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4660,%r4654,%r4657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4663,%r7391,%r4660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4666,%r7301,%r4663;
}
	// end inline asm
	selp.b32 	%r1164, %r7301, %r4666, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4670,%r7148,%r436,%r2138,%r4576;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4670;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7148;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4677, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r7149,%r4677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4681,%r7080,%r4678;
}
	// end inline asm
	mov.u32 	%r7437, %r7300;
	@%p28 bra 	$L__BB0_504;

	// begin inline asm
	{mul.f16x2 %r7437,%r7081,%r4678;
}
	// end inline asm

$L__BB0_504:
	mov.u32 	%r4694, 31;
	mov.u32 	%r4696, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4692,%r7437,%r4694,%r2138,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4697,%r4681,%r4692;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4700,%r7136,%r7165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4703,%r4697,%r4700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4706,%r7390,%r4703;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7235,%r7300,%r4706;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4712,%r7137,%r7167;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4715,%r7149,%r7139;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r4712,%r4715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4721,%r7389,%r4718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4724,%r7299,%r4721;
}
	// end inline asm
	selp.b32 	%r7233, %r7299, %r4724, %p28;
	// begin inline asm
	{sub.f16x2 %r4727,%r7148,%r7149;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4730,%r7084,%r4727;
}
	// end inline asm
	mov.u32 	%r7438, %r7298;
	@%p28 bra 	$L__BB0_506;

	// begin inline asm
	{mul.f16x2 %r7438,%r7085,%r4727;
}
	// end inline asm

$L__BB0_506:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4739,%r7438,%r4694,%r2138,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4744,%r4730,%r4739;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4747,%r7134,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4750,%r4744,%r4747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4753,%r7388,%r4750;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7234,%r7298,%r4753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4759,%r7135,%r7166;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4762,%r7148,%r7138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4765,%r4759,%r4762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4768,%r7387,%r4765;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4771,%r7297,%r4768;
}
	// end inline asm
	selp.b32 	%r7232, %r7297, %r4771, %p28;
	// begin inline asm
	{sub.f16x2 %r4774,%r7132,%r7157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r7133,%r7149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4780,%r4774,%r4777;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4783,%r7386,%r4780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4786,%r7296,%r4783;
}
	// end inline asm
	selp.b32 	%r7231, %r7296, %r4786, %p28;
	// begin inline asm
	{sub.f16x2 %r4789,%r7130,%r7156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4792,%r7131,%r7148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4795,%r4789,%r4792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4798,%r7385,%r4795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4801,%r7295,%r4798;
}
	// end inline asm
	selp.b32 	%r7230, %r7295, %r4801, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd346, [%rd1+184];
	cvta.to.global.u64 	%rd36, %rd346;
	add.s32 	%r4806, %r1577, -2;
	setp.lt.s32 	%p327, %r659, %r4806;
	add.s32 	%r4807, %r1578, 3;
	setp.ge.s32 	%p328, %r659, %r4807;
	or.pred  	%p329, %p327, %p328;
	add.s32 	%r4808, %r1579, -2;
	setp.lt.s32 	%p330, %r660, %r4808;
	or.pred  	%p331, %p329, %p330;
	add.s32 	%r4809, %r1580, 2;
	setp.ge.s32 	%p332, %r660, %r4809;
	or.pred  	%p333, %p332, %p331;
	setp.lt.s32 	%p334, %r661, %r1574;
	or.pred  	%p335, %p334, %p333;
	mad.lo.s32 	%r4810, %r1576, %r1575, %r1574;
	setp.ge.s32 	%p336, %r661, %r4810;
	or.pred  	%p337, %p335, %p336;
	@%p337 bra 	$L__BB0_748;

	sub.s32 	%r1179, %r661, %r1574;
	rem.s32 	%r4811, %r1179, %r1575;
	setp.ne.s32 	%p338, %r4811, 0;
	@%p338 bra 	$L__BB0_748;

	div.s32 	%r4812, %r1179, %r1575;
	mov.u32 	%r4813, 8;
	sub.s32 	%r4814, %r4813, %r1577;
	add.s32 	%r4815, %r4814, %r1578;
	mul.lo.s32 	%r4816, %r4812, %r4815;
	mov.u32 	%r4817, 4;
	sub.s32 	%r4818, %r4817, %r1577;
	add.s32 	%r1180, %r4818, %r659;
	sub.s32 	%r4819, %r4817, %r1579;
	add.s32 	%r1181, %r4819, %r660;
	mul.lo.s32 	%r1182, %r4816, 3;
	add.s32 	%r4820, %r1180, %r1182;
	add.s32 	%r4821, %r4820, -2;
	sub.s32 	%r4822, %r4813, %r1579;
	add.s32 	%r4823, %r4822, %r1580;
	mul.lo.s32 	%r1183, %r4821, %r4823;
	add.s32 	%r4824, %r1181, %r1183;
	mul.lo.s32 	%r4825, %r4824, %r58;
	sub.s32 	%r1184, %r4825, %r1581;
	@%p28 bra 	$L__BB0_513;

	not.pred 	%p340, %p24;
	@%p340 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3374;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r4827, %r1184, %r402;
	mul.wide.s32 	%rd347, %r4827, 4;
	add.s64 	%rd348, %rd36, %rd347;
	st.global.f32 	[%rd348], %f496;

$L__BB0_511:
	not.pred 	%p341, %p26;
	@%p341 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3374;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r4829, %r1184, %r403;
	mul.wide.s32 	%rd349, %r4829, 4;
	add.s64 	%rd350, %rd36, %rd349;
	st.global.f32 	[%rd350], %f497;

$L__BB0_513:
	@%p28 bra 	$L__BB0_518;

	not.pred 	%p343, %p25;
	@%p343 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3451;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r4831, %r1184, %r416;
	mul.wide.s32 	%rd351, %r4831, 4;
	add.s64 	%rd352, %rd36, %rd351;
	st.global.f32 	[%rd352], %f498;

$L__BB0_516:
	not.pred 	%p344, %p27;
	@%p344 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3451;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r4833, %r1184, %r417;
	mul.wide.s32 	%rd353, %r4833, 4;
	add.s64 	%rd354, %rd36, %rd353;
	st.global.f32 	[%rd354], %f499;

$L__BB0_518:
	mov.u32 	%r4834, 8;
	sub.s32 	%r4835, %r4834, %r1577;
	add.s32 	%r4836, %r4835, %r1578;
	add.s32 	%r1185, %r1182, %r4836;
	add.s32 	%r4837, %r1180, %r1185;
	add.s32 	%r4838, %r4837, -2;
	sub.s32 	%r4839, %r4834, %r1579;
	add.s32 	%r4840, %r4839, %r1580;
	mad.lo.s32 	%r4841, %r4838, %r4840, %r1181;
	mul.lo.s32 	%r4842, %r4841, %r58;
	sub.s32 	%r1186, %r4842, %r1581;
	@%p28 bra 	$L__BB0_523;

	not.pred 	%p346, %p24;
	@%p346 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3417;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r4844, %r1186, %r402;
	mul.wide.s32 	%rd355, %r4844, 4;
	add.s64 	%rd356, %rd36, %rd355;
	st.global.f32 	[%rd356], %f500;

$L__BB0_521:
	not.pred 	%p347, %p26;
	@%p347 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3417;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r4846, %r1186, %r403;
	mul.wide.s32 	%rd357, %r4846, 4;
	add.s64 	%rd358, %rd36, %rd357;
	st.global.f32 	[%rd358], %f501;

$L__BB0_523:
	@%p28 bra 	$L__BB0_528;

	not.pred 	%p349, %p25;
	@%p349 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3483;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r4848, %r1186, %r416;
	mul.wide.s32 	%rd359, %r4848, 4;
	add.s64 	%rd360, %rd36, %rd359;
	st.global.f32 	[%rd360], %f502;

$L__BB0_526:
	not.pred 	%p350, %p27;
	@%p350 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3483;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r4850, %r1186, %r417;
	mul.wide.s32 	%rd361, %r4850, 4;
	add.s64 	%rd362, %rd36, %rd361;
	st.global.f32 	[%rd362], %f503;

$L__BB0_528:
	add.s32 	%r1187, %r1181, 1;
	add.s32 	%r4851, %r1187, %r1183;
	mul.lo.s32 	%r4852, %r4851, %r58;
	sub.s32 	%r1188, %r4852, %r1581;
	@%p28 bra 	$L__BB0_533;

	not.pred 	%p352, %p24;
	@%p352 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3528;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r4854, %r1188, %r402;
	mul.wide.s32 	%rd363, %r4854, 4;
	add.s64 	%rd364, %rd36, %rd363;
	st.global.f32 	[%rd364], %f504;

$L__BB0_531:
	not.pred 	%p353, %p26;
	@%p353 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3528;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r4856, %r1188, %r403;
	mul.wide.s32 	%rd365, %r4856, 4;
	add.s64 	%rd366, %rd36, %rd365;
	st.global.f32 	[%rd366], %f505;

$L__BB0_533:
	@%p28 bra 	$L__BB0_538;

	not.pred 	%p355, %p25;
	@%p355 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3562;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r4858, %r1188, %r416;
	mul.wide.s32 	%rd367, %r4858, 4;
	add.s64 	%rd368, %rd36, %rd367;
	st.global.f32 	[%rd368], %f506;

$L__BB0_536:
	not.pred 	%p356, %p27;
	@%p356 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3562;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r4860, %r1188, %r417;
	mul.wide.s32 	%rd369, %r4860, 4;
	add.s64 	%rd370, %rd36, %rd369;
	st.global.f32 	[%rd370], %f507;

$L__BB0_538:
	add.s32 	%r1189, %r1180, -1;
	add.s32 	%r4861, %r1189, %r1182;
	mov.u32 	%r4862, 8;
	sub.s32 	%r4863, %r4862, %r1579;
	add.s32 	%r4864, %r4863, %r1580;
	mul.lo.s32 	%r1190, %r4861, %r4864;
	add.s32 	%r1191, %r1181, -1;
	add.s32 	%r4865, %r1191, %r1190;
	mul.lo.s32 	%r4866, %r4865, %r58;
	sub.s32 	%r1192, %r4866, %r1581;
	@%p28 bra 	$L__BB0_543;

	not.pred 	%p358, %p24;
	@%p358 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3607;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r4868, %r1192, %r402;
	mul.wide.s32 	%rd371, %r4868, 4;
	add.s64 	%rd372, %rd36, %rd371;
	st.global.f32 	[%rd372], %f508;

$L__BB0_541:
	not.pred 	%p359, %p26;
	@%p359 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3607;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r4870, %r1192, %r403;
	mul.wide.s32 	%rd373, %r4870, 4;
	add.s64 	%rd374, %rd36, %rd373;
	st.global.f32 	[%rd374], %f509;

$L__BB0_543:
	@%p28 bra 	$L__BB0_548;

	not.pred 	%p361, %p25;
	@%p361 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3684;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r4872, %r1192, %r416;
	mul.wide.s32 	%rd375, %r4872, 4;
	add.s64 	%rd376, %rd36, %rd375;
	st.global.f32 	[%rd376], %f510;

$L__BB0_546:
	not.pred 	%p362, %p27;
	@%p362 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3684;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r4874, %r1192, %r417;
	mul.wide.s32 	%rd377, %r4874, 4;
	add.s64 	%rd378, %rd36, %rd377;
	st.global.f32 	[%rd378], %f511;

$L__BB0_548:
	mov.u32 	%r4875, 8;
	sub.s32 	%r4876, %r4875, %r1579;
	add.s32 	%r4877, %r4876, %r1580;
	add.s32 	%r4878, %r1189, %r1185;
	mul.lo.s32 	%r1193, %r4878, %r4877;
	add.s32 	%r4879, %r1191, %r1193;
	mul.lo.s32 	%r4880, %r4879, %r58;
	sub.s32 	%r1194, %r4880, %r1581;
	@%p28 bra 	$L__BB0_553;

	not.pred 	%p364, %p24;
	@%p364 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3650;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r4882, %r1194, %r402;
	mul.wide.s32 	%rd379, %r4882, 4;
	add.s64 	%rd380, %rd36, %rd379;
	st.global.f32 	[%rd380], %f512;

$L__BB0_551:
	not.pred 	%p365, %p26;
	@%p365 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3650;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r4884, %r1194, %r403;
	mul.wide.s32 	%rd381, %r4884, 4;
	add.s64 	%rd382, %rd36, %rd381;
	st.global.f32 	[%rd382], %f513;

$L__BB0_553:
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p367, %p25;
	@%p367 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3716;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r4886, %r1194, %r416;
	mul.wide.s32 	%rd383, %r4886, 4;
	add.s64 	%rd384, %rd36, %rd383;
	st.global.f32 	[%rd384], %f514;

$L__BB0_556:
	not.pred 	%p368, %p27;
	@%p368 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3716;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r4888, %r1194, %r417;
	mul.wide.s32 	%rd385, %r4888, 4;
	add.s64 	%rd386, %rd36, %rd385;
	st.global.f32 	[%rd386], %f515;

$L__BB0_558:
	add.s32 	%r4889, %r1181, %r1190;
	mul.lo.s32 	%r4890, %r4889, %r58;
	sub.s32 	%r1195, %r4890, %r1581;
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p370, %p24;
	@%p370 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7255;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r4892, %r1195, %r402;
	mul.wide.s32 	%rd387, %r4892, 4;
	add.s64 	%rd388, %rd36, %rd387;
	st.global.f32 	[%rd388], %f516;

$L__BB0_561:
	not.pred 	%p371, %p26;
	@%p371 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7255;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r4894, %r1195, %r403;
	mul.wide.s32 	%rd389, %r4894, 4;
	add.s64 	%rd390, %rd36, %rd389;
	st.global.f32 	[%rd390], %f517;

$L__BB0_563:
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p373, %p25;
	@%p373 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7254;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r4896, %r1195, %r416;
	mul.wide.s32 	%rd391, %r4896, 4;
	add.s64 	%rd392, %rd36, %rd391;
	st.global.f32 	[%rd392], %f518;

$L__BB0_566:
	not.pred 	%p374, %p27;
	@%p374 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7254;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r4898, %r1195, %r417;
	mul.wide.s32 	%rd393, %r4898, 4;
	add.s64 	%rd394, %rd36, %rd393;
	st.global.f32 	[%rd394], %f519;

$L__BB0_568:
	add.s32 	%r4899, %r1181, %r1193;
	mul.lo.s32 	%r4900, %r4899, %r58;
	sub.s32 	%r1196, %r4900, %r1581;
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p376, %p24;
	@%p376 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7253;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r4902, %r1196, %r402;
	mul.wide.s32 	%rd395, %r4902, 4;
	add.s64 	%rd396, %rd36, %rd395;
	st.global.f32 	[%rd396], %f520;

$L__BB0_571:
	not.pred 	%p377, %p26;
	@%p377 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7253;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r4904, %r1196, %r403;
	mul.wide.s32 	%rd397, %r4904, 4;
	add.s64 	%rd398, %rd36, %rd397;
	st.global.f32 	[%rd398], %f521;

$L__BB0_573:
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p379, %p25;
	@%p379 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7252;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r4906, %r1196, %r416;
	mul.wide.s32 	%rd399, %r4906, 4;
	add.s64 	%rd400, %rd36, %rd399;
	st.global.f32 	[%rd400], %f522;

$L__BB0_576:
	not.pred 	%p380, %p27;
	@%p380 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7252;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r4908, %r1196, %r417;
	mul.wide.s32 	%rd401, %r4908, 4;
	add.s64 	%rd402, %rd36, %rd401;
	st.global.f32 	[%rd402], %f523;

$L__BB0_578:
	mov.u32 	%r4909, 8;
	sub.s32 	%r4910, %r4909, %r1577;
	add.s32 	%r4911, %r4910, %r1578;
	add.s32 	%r1197, %r1185, %r4911;
	add.s32 	%r4912, %r1189, %r1197;
	sub.s32 	%r4913, %r4909, %r1579;
	add.s32 	%r4914, %r4913, %r1580;
	mul.lo.s32 	%r1198, %r4912, %r4914;
	add.s32 	%r4915, %r1181, %r1198;
	mul.lo.s32 	%r4916, %r4915, %r58;
	sub.s32 	%r1199, %r4916, %r1581;
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p382, %p24;
	@%p382 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r4918, %r1199, %r402;
	mul.wide.s32 	%rd403, %r4918, 4;
	add.s64 	%rd404, %rd36, %rd403;
	st.global.f32 	[%rd404], %f524;

$L__BB0_581:
	not.pred 	%p383, %p26;
	@%p383 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r4920, %r1199, %r403;
	mul.wide.s32 	%rd405, %r4920, 4;
	add.s64 	%rd406, %rd36, %rd405;
	st.global.f32 	[%rd406], %f525;

$L__BB0_583:
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p385, %p25;
	@%p385 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1066;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r4922, %r1199, %r416;
	mul.wide.s32 	%rd407, %r4922, 4;
	add.s64 	%rd408, %rd36, %rd407;
	st.global.f32 	[%rd408], %f526;

$L__BB0_586:
	not.pred 	%p386, %p27;
	@%p386 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1066;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r4924, %r1199, %r417;
	mul.wide.s32 	%rd409, %r4924, 4;
	add.s64 	%rd410, %rd36, %rd409;
	st.global.f32 	[%rd410], %f527;

$L__BB0_588:
	add.s32 	%r6980, %r1181, 1;
	add.s32 	%r4925, %r6980, %r1190;
	mul.lo.s32 	%r4926, %r4925, %r58;
	sub.s32 	%r1200, %r4926, %r1581;
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p388, %p24;
	@%p388 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r4928, %r1200, %r402;
	mul.wide.s32 	%rd411, %r4928, 4;
	add.s64 	%rd412, %rd36, %rd411;
	st.global.f32 	[%rd412], %f528;

$L__BB0_591:
	not.pred 	%p389, %p26;
	@%p389 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7251;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r4930, %r1200, %r403;
	mul.wide.s32 	%rd413, %r4930, 4;
	add.s64 	%rd414, %rd36, %rd413;
	st.global.f32 	[%rd414], %f529;

$L__BB0_593:
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p391, %p25;
	@%p391 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r4932, %r1200, %r416;
	mul.wide.s32 	%rd415, %r4932, 4;
	add.s64 	%rd416, %rd36, %rd415;
	st.global.f32 	[%rd416], %f530;

$L__BB0_596:
	not.pred 	%p392, %p27;
	@%p392 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7250;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r4934, %r1200, %r417;
	mul.wide.s32 	%rd417, %r4934, 4;
	add.s64 	%rd418, %rd36, %rd417;
	st.global.f32 	[%rd418], %f531;

$L__BB0_598:
	add.s32 	%r6981, %r1181, 1;
	add.s32 	%r4935, %r6981, %r1193;
	mul.lo.s32 	%r4936, %r4935, %r58;
	sub.s32 	%r1201, %r4936, %r1581;
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p394, %p24;
	@%p394 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3988;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r4938, %r1201, %r402;
	mul.wide.s32 	%rd419, %r4938, 4;
	add.s64 	%rd420, %rd36, %rd419;
	st.global.f32 	[%rd420], %f532;

$L__BB0_601:
	not.pred 	%p395, %p26;
	@%p395 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3988;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r4940, %r1201, %r403;
	mul.wide.s32 	%rd421, %r4940, 4;
	add.s64 	%rd422, %rd36, %rd421;
	st.global.f32 	[%rd422], %f533;

$L__BB0_603:
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p397, %p25;
	@%p397 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4069;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r4942, %r1201, %r416;
	mul.wide.s32 	%rd423, %r4942, 4;
	add.s64 	%rd424, %rd36, %rd423;
	st.global.f32 	[%rd424], %f534;

$L__BB0_606:
	not.pred 	%p398, %p27;
	@%p398 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4069;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r4944, %r1201, %r417;
	mul.wide.s32 	%rd425, %r4944, 4;
	add.s64 	%rd426, %rd36, %rd425;
	st.global.f32 	[%rd426], %f535;

$L__BB0_608:
	add.s32 	%r6982, %r1181, 1;
	add.s32 	%r4945, %r6982, %r1198;
	mul.lo.s32 	%r4946, %r4945, %r58;
	sub.s32 	%r1202, %r4946, %r1581;
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p400, %p24;
	@%p400 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1078;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r4948, %r1202, %r402;
	mul.wide.s32 	%rd427, %r4948, 4;
	add.s64 	%rd428, %rd36, %rd427;
	st.global.f32 	[%rd428], %f536;

$L__BB0_611:
	not.pred 	%p401, %p26;
	@%p401 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1078;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r4950, %r1202, %r403;
	mul.wide.s32 	%rd429, %r4950, 4;
	add.s64 	%rd430, %rd36, %rd429;
	st.global.f32 	[%rd430], %f537;

$L__BB0_613:
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p403, %p25;
	@%p403 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1090;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r4952, %r1202, %r416;
	mul.wide.s32 	%rd431, %r4952, 4;
	add.s64 	%rd432, %rd36, %rd431;
	st.global.f32 	[%rd432], %f538;

$L__BB0_616:
	not.pred 	%p404, %p27;
	@%p404 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1090;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r4954, %r1202, %r417;
	mul.wide.s32 	%rd433, %r4954, 4;
	add.s64 	%rd434, %rd36, %rd433;
	st.global.f32 	[%rd434], %f539;

$L__BB0_618:
	add.s32 	%r1203, %r1181, 2;
	add.s32 	%r4955, %r1203, %r1190;
	mul.lo.s32 	%r4956, %r4955, %r58;
	sub.s32 	%r1204, %r4956, %r1581;
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p406, %p24;
	@%p406 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4129;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r4958, %r1204, %r402;
	mul.wide.s32 	%rd435, %r4958, 4;
	add.s64 	%rd436, %rd36, %rd435;
	st.global.f32 	[%rd436], %f540;

$L__BB0_621:
	not.pred 	%p407, %p26;
	@%p407 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4129;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r4960, %r1204, %r403;
	mul.wide.s32 	%rd437, %r4960, 4;
	add.s64 	%rd438, %rd36, %rd437;
	st.global.f32 	[%rd438], %f541;

$L__BB0_623:
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p409, %p25;
	@%p409 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4163;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r4962, %r1204, %r416;
	mul.wide.s32 	%rd439, %r4962, 4;
	add.s64 	%rd440, %rd36, %rd439;
	st.global.f32 	[%rd440], %f542;

$L__BB0_626:
	not.pred 	%p410, %p27;
	@%p410 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4163;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r4964, %r1204, %r417;
	mul.wide.s32 	%rd441, %r4964, 4;
	add.s64 	%rd442, %rd36, %rd441;
	st.global.f32 	[%rd442], %f543;

$L__BB0_628:
	add.s32 	%r6983, %r1181, -1;
	mov.u32 	%r4965, 8;
	sub.s32 	%r4966, %r4965, %r1579;
	add.s32 	%r4967, %r4966, %r1580;
	mul.lo.s32 	%r1205, %r4837, %r4967;
	add.s32 	%r4969, %r6983, %r1205;
	mul.lo.s32 	%r4970, %r4969, %r58;
	sub.s32 	%r1206, %r4970, %r1581;
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p412, %p24;
	@%p412 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r4972, %r1206, %r402;
	mul.wide.s32 	%rd443, %r4972, 4;
	add.s64 	%rd444, %rd36, %rd443;
	st.global.f32 	[%rd444], %f544;

$L__BB0_631:
	not.pred 	%p413, %p26;
	@%p413 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7249;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r4974, %r1206, %r403;
	mul.wide.s32 	%rd445, %r4974, 4;
	add.s64 	%rd446, %rd36, %rd445;
	st.global.f32 	[%rd446], %f545;

$L__BB0_633:
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p415, %p25;
	@%p415 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r4976, %r1206, %r416;
	mul.wide.s32 	%rd447, %r4976, 4;
	add.s64 	%rd448, %rd36, %rd447;
	st.global.f32 	[%rd448], %f546;

$L__BB0_636:
	not.pred 	%p416, %p27;
	@%p416 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7248;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r4978, %r1206, %r417;
	mul.wide.s32 	%rd449, %r4978, 4;
	add.s64 	%rd450, %rd36, %rd449;
	st.global.f32 	[%rd450], %f547;

$L__BB0_638:
	mov.u32 	%r6988, 8;
	sub.s32 	%r6987, %r6988, %r1577;
	add.s32 	%r6986, %r6987, %r1578;
	add.s32 	%r6985, %r1185, %r6986;
	add.s32 	%r6984, %r1181, -1;
	mov.u32 	%r4979, 8;
	sub.s32 	%r4980, %r4979, %r1579;
	add.s32 	%r4981, %r4980, %r1580;
	add.s32 	%r4982, %r1180, %r6985;
	mul.lo.s32 	%r1207, %r4982, %r4981;
	add.s32 	%r4983, %r6984, %r1207;
	mul.lo.s32 	%r4984, %r4983, %r58;
	sub.s32 	%r1208, %r4984, %r1581;
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p418, %p24;
	@%p418 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1108;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r4986, %r1208, %r402;
	mul.wide.s32 	%rd451, %r4986, 4;
	add.s64 	%rd452, %rd36, %rd451;
	st.global.f32 	[%rd452], %f548;

$L__BB0_641:
	not.pred 	%p419, %p26;
	@%p419 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1108;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r4988, %r1208, %r403;
	mul.wide.s32 	%rd453, %r4988, 4;
	add.s64 	%rd454, %rd36, %rd453;
	st.global.f32 	[%rd454], %f549;

$L__BB0_643:
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p421, %p25;
	@%p421 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1114;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r4990, %r1208, %r416;
	mul.wide.s32 	%rd455, %r4990, 4;
	add.s64 	%rd456, %rd36, %rd455;
	st.global.f32 	[%rd456], %f550;

$L__BB0_646:
	not.pred 	%p422, %p27;
	@%p422 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1114;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r4992, %r1208, %r417;
	mul.wide.s32 	%rd457, %r4992, 4;
	add.s64 	%rd458, %rd36, %rd457;
	st.global.f32 	[%rd458], %f551;

$L__BB0_648:
	mov.u32 	%r4993, 8;
	sub.s32 	%r4994, %r4993, %r1579;
	add.s32 	%r4995, %r4994, %r1580;
	mul.lo.s32 	%r1209, %r4820, %r4995;
	add.s32 	%r4997, %r1181, %r1209;
	mul.lo.s32 	%r4998, %r4997, %r58;
	sub.s32 	%r1210, %r4998, %r1581;
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p424, %p24;
	@%p424 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r5000, %r1210, %r402;
	mul.wide.s32 	%rd459, %r5000, 4;
	add.s64 	%rd460, %rd36, %rd459;
	st.global.f32 	[%rd460], %f552;

$L__BB0_651:
	not.pred 	%p425, %p26;
	@%p425 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7247;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r5002, %r1210, %r403;
	mul.wide.s32 	%rd461, %r5002, 4;
	add.s64 	%rd462, %rd36, %rd461;
	st.global.f32 	[%rd462], %f553;

$L__BB0_653:
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p427, %p25;
	@%p427 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r5004, %r1210, %r416;
	mul.wide.s32 	%rd463, %r5004, 4;
	add.s64 	%rd464, %rd36, %rd463;
	st.global.f32 	[%rd464], %f554;

$L__BB0_656:
	not.pred 	%p428, %p27;
	@%p428 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7246;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r5006, %r1210, %r417;
	mul.wide.s32 	%rd465, %r5006, 4;
	add.s64 	%rd466, %rd36, %rd465;
	st.global.f32 	[%rd466], %f555;

$L__BB0_658:
	add.s32 	%r5007, %r1181, %r1205;
	mul.lo.s32 	%r5008, %r5007, %r58;
	sub.s32 	%r1211, %r5008, %r1581;
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p430, %p24;
	@%p430 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r5010, %r1211, %r402;
	mul.wide.s32 	%rd467, %r5010, 4;
	add.s64 	%rd468, %rd36, %rd467;
	st.global.f32 	[%rd468], %f556;

$L__BB0_661:
	not.pred 	%p431, %p26;
	@%p431 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7245;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r5012, %r1211, %r403;
	mul.wide.s32 	%rd469, %r5012, 4;
	add.s64 	%rd470, %rd36, %rd469;
	st.global.f32 	[%rd470], %f557;

$L__BB0_663:
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p433, %p25;
	@%p433 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r5014, %r1211, %r416;
	mul.wide.s32 	%rd471, %r5014, 4;
	add.s64 	%rd472, %rd36, %rd471;
	st.global.f32 	[%rd472], %f558;

$L__BB0_666:
	not.pred 	%p434, %p27;
	@%p434 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7244;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r5016, %r1211, %r417;
	mul.wide.s32 	%rd473, %r5016, 4;
	add.s64 	%rd474, %rd36, %rd473;
	st.global.f32 	[%rd474], %f559;

$L__BB0_668:
	add.s32 	%r5017, %r1181, %r1207;
	mul.lo.s32 	%r5018, %r5017, %r58;
	sub.s32 	%r1212, %r5018, %r1581;
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p436, %p24;
	@%p436 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r5020, %r1212, %r402;
	mul.wide.s32 	%rd475, %r5020, 4;
	add.s64 	%rd476, %rd36, %rd475;
	st.global.f32 	[%rd476], %f560;

$L__BB0_671:
	not.pred 	%p437, %p26;
	@%p437 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7243;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r5022, %r1212, %r403;
	mul.wide.s32 	%rd477, %r5022, 4;
	add.s64 	%rd478, %rd36, %rd477;
	st.global.f32 	[%rd478], %f561;

$L__BB0_673:
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p439, %p25;
	@%p439 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r5024, %r1212, %r416;
	mul.wide.s32 	%rd479, %r5024, 4;
	add.s64 	%rd480, %rd36, %rd479;
	st.global.f32 	[%rd480], %f562;

$L__BB0_676:
	not.pred 	%p440, %p27;
	@%p440 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7242;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r5026, %r1212, %r417;
	mul.wide.s32 	%rd481, %r5026, 4;
	add.s64 	%rd482, %rd36, %rd481;
	st.global.f32 	[%rd482], %f563;

$L__BB0_678:
	add.s32 	%r6989, %r1181, 1;
	add.s32 	%r5027, %r6989, %r1209;
	mul.lo.s32 	%r5028, %r5027, %r58;
	sub.s32 	%r1213, %r5028, %r1581;
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p442, %p24;
	@%p442 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r5030, %r1213, %r402;
	mul.wide.s32 	%rd483, %r5030, 4;
	add.s64 	%rd484, %rd36, %rd483;
	st.global.f32 	[%rd484], %f564;

$L__BB0_681:
	not.pred 	%p443, %p26;
	@%p443 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7241;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r5032, %r1213, %r403;
	mul.wide.s32 	%rd485, %r5032, 4;
	add.s64 	%rd486, %rd36, %rd485;
	st.global.f32 	[%rd486], %f565;

$L__BB0_683:
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p445, %p25;
	@%p445 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r5034, %r1213, %r416;
	mul.wide.s32 	%rd487, %r5034, 4;
	add.s64 	%rd488, %rd36, %rd487;
	st.global.f32 	[%rd488], %f566;

$L__BB0_686:
	not.pred 	%p446, %p27;
	@%p446 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7240;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r5036, %r1213, %r417;
	mul.wide.s32 	%rd489, %r5036, 4;
	add.s64 	%rd490, %rd36, %rd489;
	st.global.f32 	[%rd490], %f567;

$L__BB0_688:
	add.s32 	%r6990, %r1181, 1;
	add.s32 	%r5037, %r6990, %r1205;
	mul.lo.s32 	%r5038, %r5037, %r58;
	sub.s32 	%r1214, %r5038, %r1581;
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p448, %p24;
	@%p448 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r5040, %r1214, %r402;
	mul.wide.s32 	%rd491, %r5040, 4;
	add.s64 	%rd492, %rd36, %rd491;
	st.global.f32 	[%rd492], %f568;

$L__BB0_691:
	not.pred 	%p449, %p26;
	@%p449 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7239;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r5042, %r1214, %r403;
	mul.wide.s32 	%rd493, %r5042, 4;
	add.s64 	%rd494, %rd36, %rd493;
	st.global.f32 	[%rd494], %f569;

$L__BB0_693:
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p451, %p25;
	@%p451 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r5044, %r1214, %r416;
	mul.wide.s32 	%rd495, %r5044, 4;
	add.s64 	%rd496, %rd36, %rd495;
	st.global.f32 	[%rd496], %f570;

$L__BB0_696:
	not.pred 	%p452, %p27;
	@%p452 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7238;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r5046, %r1214, %r417;
	mul.wide.s32 	%rd497, %r5046, 4;
	add.s64 	%rd498, %rd36, %rd497;
	st.global.f32 	[%rd498], %f571;

$L__BB0_698:
	add.s32 	%r6991, %r1181, 1;
	add.s32 	%r5047, %r6991, %r1207;
	mul.lo.s32 	%r5048, %r5047, %r58;
	sub.s32 	%r1215, %r5048, %r1581;
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p454, %p24;
	@%p454 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r5050, %r1215, %r402;
	mul.wide.s32 	%rd499, %r5050, 4;
	add.s64 	%rd500, %rd36, %rd499;
	st.global.f32 	[%rd500], %f572;

$L__BB0_701:
	not.pred 	%p455, %p26;
	@%p455 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7237;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r5052, %r1215, %r403;
	mul.wide.s32 	%rd501, %r5052, 4;
	add.s64 	%rd502, %rd36, %rd501;
	st.global.f32 	[%rd502], %f573;

$L__BB0_703:
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p457, %p25;
	@%p457 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r5054, %r1215, %r416;
	mul.wide.s32 	%rd503, %r5054, 4;
	add.s64 	%rd504, %rd36, %rd503;
	st.global.f32 	[%rd504], %f574;

$L__BB0_706:
	not.pred 	%p458, %p27;
	@%p458 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7236;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r5056, %r1215, %r417;
	mul.wide.s32 	%rd505, %r5056, 4;
	add.s64 	%rd506, %rd36, %rd505;
	st.global.f32 	[%rd506], %f575;

$L__BB0_708:
	add.s32 	%r5057, %r1203, %r1207;
	mul.lo.s32 	%r5058, %r5057, %r58;
	sub.s32 	%r1216, %r5058, %r1581;
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p460, %p24;
	@%p460 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r5060, %r1216, %r402;
	mul.wide.s32 	%rd507, %r5060, 4;
	add.s64 	%rd508, %rd36, %rd507;
	st.global.f32 	[%rd508], %f576;

$L__BB0_711:
	not.pred 	%p461, %p26;
	@%p461 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1163;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r5062, %r1216, %r403;
	mul.wide.s32 	%rd509, %r5062, 4;
	add.s64 	%rd510, %rd36, %rd509;
	st.global.f32 	[%rd510], %f577;

$L__BB0_713:
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p463, %p25;
	@%p463 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1164;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r5064, %r1216, %r416;
	mul.wide.s32 	%rd511, %r5064, 4;
	add.s64 	%rd512, %rd36, %rd511;
	st.global.f32 	[%rd512], %f578;

$L__BB0_716:
	not.pred 	%p464, %p27;
	@%p464 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1164;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r5066, %r1216, %r417;
	mul.wide.s32 	%rd513, %r5066, 4;
	add.s64 	%rd514, %rd36, %rd513;
	st.global.f32 	[%rd514], %f579;

$L__BB0_718:
	add.s32 	%r1217, %r1180, 1;
	add.s32 	%r5067, %r1217, %r1185;
	mov.u32 	%r5068, 8;
	sub.s32 	%r5069, %r5068, %r1579;
	add.s32 	%r5070, %r5069, %r1580;
	mad.lo.s32 	%r5071, %r5067, %r5070, %r1181;
	mul.lo.s32 	%r5072, %r5071, %r58;
	sub.s32 	%r1218, %r5072, %r1581;
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p466, %p24;
	@%p466 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r5074, %r1218, %r402;
	mul.wide.s32 	%rd515, %r5074, 4;
	add.s64 	%rd516, %rd36, %rd515;
	st.global.f32 	[%rd516], %f580;

$L__BB0_721:
	not.pred 	%p467, %p26;
	@%p467 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7235;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r5076, %r1218, %r403;
	mul.wide.s32 	%rd517, %r5076, 4;
	add.s64 	%rd518, %rd36, %rd517;
	st.global.f32 	[%rd518], %f581;

$L__BB0_723:
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p469, %p25;
	@%p469 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r5078, %r1218, %r416;
	mul.wide.s32 	%rd519, %r5078, 4;
	add.s64 	%rd520, %rd36, %rd519;
	st.global.f32 	[%rd520], %f582;

$L__BB0_726:
	not.pred 	%p470, %p27;
	@%p470 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7234;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r5080, %r1218, %r417;
	mul.wide.s32 	%rd521, %r5080, 4;
	add.s64 	%rd522, %rd36, %rd521;
	st.global.f32 	[%rd522], %f583;

$L__BB0_728:
	mov.u32 	%r6995, 8;
	sub.s32 	%r6994, %r6995, %r1577;
	add.s32 	%r6993, %r6994, %r1578;
	add.s32 	%r6992, %r1185, %r6993;
	mov.u32 	%r5081, 8;
	sub.s32 	%r5082, %r5081, %r1579;
	add.s32 	%r5083, %r5082, %r1580;
	add.s32 	%r5084, %r1217, %r6992;
	mul.lo.s32 	%r1219, %r5084, %r5083;
	add.s32 	%r5085, %r1181, %r1219;
	mul.lo.s32 	%r5086, %r5085, %r58;
	sub.s32 	%r1220, %r5086, %r1581;
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p472, %p24;
	@%p472 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7233;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r5088, %r1220, %r402;
	mul.wide.s32 	%rd523, %r5088, 4;
	add.s64 	%rd524, %rd36, %rd523;
	st.global.f32 	[%rd524], %f584;

$L__BB0_731:
	not.pred 	%p473, %p26;
	@%p473 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7233;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r5090, %r1220, %r403;
	mul.wide.s32 	%rd525, %r5090, 4;
	add.s64 	%rd526, %rd36, %rd525;
	st.global.f32 	[%rd526], %f585;

$L__BB0_733:
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p475, %p25;
	@%p475 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7232;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r5092, %r1220, %r416;
	mul.wide.s32 	%rd527, %r5092, 4;
	add.s64 	%rd528, %rd36, %rd527;
	st.global.f32 	[%rd528], %f586;

$L__BB0_736:
	not.pred 	%p476, %p27;
	@%p476 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7232;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r5094, %r1220, %r417;
	mul.wide.s32 	%rd529, %r5094, 4;
	add.s64 	%rd530, %rd36, %rd529;
	st.global.f32 	[%rd530], %f587;

$L__BB0_738:
	add.s32 	%r6996, %r1181, 1;
	add.s32 	%r5095, %r6996, %r1219;
	mul.lo.s32 	%r5096, %r5095, %r58;
	sub.s32 	%r1221, %r5096, %r1581;
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p478, %p24;
	@%p478 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7231;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r5098, %r1221, %r402;
	mul.wide.s32 	%rd531, %r5098, 4;
	add.s64 	%rd532, %rd36, %rd531;
	st.global.f32 	[%rd532], %f588;

$L__BB0_741:
	not.pred 	%p479, %p26;
	@%p479 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7231;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r5100, %r1221, %r403;
	mul.wide.s32 	%rd533, %r5100, 4;
	add.s64 	%rd534, %rd36, %rd533;
	st.global.f32 	[%rd534], %f589;

$L__BB0_743:
	@%p28 bra 	$L__BB0_748;

	not.pred 	%p481, %p25;
	@%p481 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7230;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r5102, %r1221, %r416;
	mul.wide.s32 	%rd535, %r5102, 4;
	add.s64 	%rd536, %rd36, %rd535;
	st.global.f32 	[%rd536], %f590;

$L__BB0_746:
	not.pred 	%p482, %p27;
	@%p482 bra 	$L__BB0_748;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7230;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r5104, %r1221, %r417;
	mul.wide.s32 	%rd537, %r5104, 4;
	add.s64 	%rd538, %rd36, %rd537;
	st.global.f32 	[%rd538], %f591;

$L__BB0_748:
	setp.ne.s32 	%p483, %r41, %r2030;
	ld.param.u64 	%rd539, [%rd1+104];
	cvta.to.global.u64 	%rd37, %rd539;
	@%p483 bra 	$L__BB0_750;

	mad.lo.s32 	%r5106, %r657, %r1566, %r44;
	mul.lo.s32 	%r5107, %r1564, %r5106;
	mul.lo.s32 	%r5108, %r5107, 768;
	mad.lo.s32 	%r5110, %r42, 384, %r5108;
	add.s32 	%r5111, %r5110, -64;
	mul.wide.s32 	%rd540, %r5111, 4;
	add.s64 	%rd541, %rd37, %rd540;
	add.s64 	%rd543, %rd541, %rd305;
	st.global.v4.u32 	[%rd543+256], {%r3607, %r3684, %r1108, %r1114};
	st.global.v4.u32 	[%rd543+1024], {%r3374, %r3451, %r1054, %r1066};
	add.s64 	%rd545, %rd541, %rd307;
	st.global.v2.u32 	[%rd545+768], {%r3650, %r3716};
	st.global.v2.u32 	[%rd545+1536], {%r3417, %r3483};

$L__BB0_750:
	setp.ne.s32 	%p484, %r42, %r2035;
	@%p484 bra 	$L__BB0_755;

	ld.param.u64 	%rd582, [%rd1+104];
	cvta.to.global.u64 	%rd581, %rd582;
	not.b32 	%r6979, %r41;
	add.s32 	%r6978, %r1563, %r6979;
	setp.eq.s32 	%p485, %r41, %r2030;
	mad.lo.s32 	%r5114, %r658, %r1565, %r43;
	mul.lo.s32 	%r5118, %r5114, %r1642;
	mad.lo.s32 	%r5121, %r6978, 384, %r5118;
	add.s32 	%r5122, %r5121, -64;
	mad.lo.s32 	%r5125, %r1644, %r69, %r5122;
	mul.wide.s32 	%rd546, %r5125, 4;
	add.s64 	%rd547, %rd581, %rd546;
	add.s64 	%rd549, %rd547, %rd305;
	st.global.v4.u32 	[%rd549+256], {%r3528, %r3562, %r1078, %r1090};
	st.global.v4.u32 	[%rd549+1024], {%r4129, %r4163, %r1163, %r1164};
	add.s64 	%rd38, %rd547, %rd307;
	@%p485 bra 	$L__BB0_753;

	st.global.v2.u32 	[%rd38], {%r3417, %r3483};

$L__BB0_753:
	st.global.v2.u32 	[%rd38+768], {%r3988, %r4069};
	@%p276 bra 	$L__BB0_755;

	st.global.v2.u32 	[%rd38+1536], {%r7358, %r7357};

$L__BB0_755:
	setp.ge.s32 	%p487, %r41, %r2030;
	@%p487 bra 	$L__BB0_757;

	add.s32 	%r6977, %r70, %r70;
	mul.lo.s32 	%r5126, %r1564, 320;
	mul.lo.s32 	%r5128, %r42, 320;
	mad.lo.s32 	%r5129, %r5126, %r41, %r5128;
	add.s32 	%r5132, %r6977, -64;
	mad.lo.s32 	%r5137, %r5132, %r2035, %r2032;
	add.s32 	%r5138, %r5129, %r5137;
	shl.b32 	%r5139, %r5138, 2;
	mov.u32 	%r5140, _ZN6kernel5shmemE;
	add.s32 	%r5141, %r5140, %r5139;
	shl.b32 	%r5142, %r46, 4;
	add.s32 	%r5143, %r5141, %r5142;
	st.shared.v4.u32 	[%r5143], {%r7406, %r7405, %r7401, %r7399};
	shl.b32 	%r5144, %r46, 3;
	add.s32 	%r5145, %r5141, %r5144;
	st.shared.v2.u32 	[%r5145+512], {%r7205, %r7200};
	st.shared.v4.u32 	[%r5143+768], {%r7229, %r7220, %r7192, %r7188};

$L__BB0_757:
	setp.ge.s32 	%p488, %r42, %r2035;
	@%p488 bra 	$L__BB0_761;

	not.b32 	%r6976, %r41;
	add.s32 	%r6975, %r1563, %r6976;
	mad.lo.s32 	%r5151, %r6975, 384, %r2038;
	mad.lo.s32 	%r5155, %r2033, %r42, %r5151;
	add.s32 	%r5161, %r5155, %r2036;
	shl.b32 	%r5162, %r5161, 2;
	mov.u32 	%r5163, _ZN6kernel5shmemE;
	add.s32 	%r5164, %r5163, %r5162;
	shl.b32 	%r5165, %r46, 3;
	add.s32 	%r5166, %r5164, %r5165;
	@%p487 bra 	$L__BB0_760;

	add.s32 	%r6960, %r5166, -256;
	st.shared.v2.u32 	[%r6960], {%r7224, %r7217};

$L__BB0_760:
	shl.b32 	%r5186, %r46, 4;
	add.s32 	%r5187, %r5164, %r5186;
	st.shared.v4.u32 	[%r5187], {%r7215, %r7211, %r7180, %r7176};
	add.s32 	%r6961, %r5166, -256;
	st.shared.v2.u32 	[%r6961+768], {%r7183, %r7177};
	st.shared.v4.u32 	[%r5187+768], {%r7404, %r7403, %r7392, %r7391};

$L__BB0_761:
	bar.sync 	0;
	ld.param.u64 	%rd551, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd551;
	mov.u32 	%r7463, %r7128;
	mov.u32 	%r7464, %r7129;
	mov.u32 	%r7449, %r7130;
	mov.u32 	%r7450, %r7131;
	mov.u32 	%r7451, %r7132;
	mov.u32 	%r7452, %r7133;
	mov.u32 	%r7465, %r7134;
	mov.u32 	%r7467, %r7136;
	mov.u32 	%r7455, %r7140;
	mov.u32 	%r7456, %r7141;
	mov.u32 	%r7457, %r7142;
	mov.u32 	%r7458, %r7143;
	@%p276 bra 	$L__BB0_765;

	setp.eq.s32 	%p491, %r42, 0;
	mad.lo.s32 	%r5190, %r657, %r1566, %r44;
	mad.lo.s32 	%r5191, %r5190, 768, 384;
	mul.lo.s32 	%r5192, %r5191, %r1564;
	mad.lo.s32 	%r5193, %r42, 384, %r5192;
	add.s32 	%r5194, %r5193, -128;
	mul.wide.s32 	%rd552, %r5194, 4;
	add.s64 	%rd553, %rd39, %rd552;
	add.s64 	%rd555, %rd553, %rd305;
	add.s64 	%rd40, %rd555, 512;
	mov.u32 	%r7463, %r7128;
	mov.u32 	%r7464, %r7129;
	mov.u32 	%r7465, %r7134;
	mov.u32 	%r7467, %r7136;
	@%p491 bra 	$L__BB0_764;

	ld.global.v4.u32 	{%r7464, %r7463, %r7467, %r7465}, [%rd40+-512];

$L__BB0_764:
	ld.global.v4.u32 	{%r7451, %r7449, %r7452, %r7450}, [%rd40];
	ld.global.v4.u32 	{%r7458, %r7457, %r7456, %r7455}, [%rd40+512];
	ld.global.v4.u32 	{%r7460, %r7459, %r7462, %r7461}, [%rd40+1024];

$L__BB0_765:
	mov.u32 	%r7466, %r7135;
	mov.u32 	%r7468, %r7137;
	mov.u32 	%r7469, %r7138;
	mov.u32 	%r7470, %r7139;
	mov.u32 	%r7471, %r7144;
	mov.u32 	%r7472, %r7145;
	mov.u32 	%r7473, %r7146;
	mov.u32 	%r7474, %r7147;
	@%p279 bra 	$L__BB0_767;

	not.b32 	%r6974, %r41;
	add.s32 	%r6973, %r1563, %r6974;
	mad.lo.s32 	%r5212, %r658, %r1565, %r43;
	mad.lo.s32 	%r5218, %r6973, 384, %r70;
	mad.lo.s32 	%r5219, %r5212, %r1642, %r5218;
	mad.lo.s32 	%r5222, %r1644, %r69, %r5219;
	mul.wide.s32 	%rd556, %r5222, 4;
	add.s64 	%rd557, %rd39, %rd556;
	add.s64 	%rd559, %rd557, %rd305;
	ld.global.v4.u32 	{%r7476, %r7475, %r7478, %r7477}, [%rd559];
	ld.global.v4.u32 	{%r7474, %r7472, %r7470, %r7469}, [%rd559+512];
	ld.global.v4.u32 	{%r7473, %r7471, %r7468, %r7466}, [%rd559+1024];
	ld.global.v4.u32 	{%r7464, %r7463, %r7467, %r7465}, [%rd559+1536];

$L__BB0_767:
	neg.s32 	%r6967, %r1568;
	not.b32 	%r6966, %r44;
	add.s32 	%r6965, %r1566, %r6966;
	mul.lo.s32 	%r6964, %r6965, %r1567;
	not.b32 	%r6963, %r43;
	add.s32 	%r6962, %r1565, %r6963;
	mad.lo.s32 	%r5246, %r6962, %r1567, %r6964;
	add.s32 	%r5247, %r5246, %r1568;
	add.s32 	%r5256, %r5247, %r2442;
	add.s32 	%r1300, %r7256, 1;
	add.s32 	%r5257, %r1300, %r5256;
	div.s32 	%r5258, %r5257, %r1568;
	mad.lo.s32 	%r1301, %r5258, %r6967, %r5257;
	mad.lo.s32 	%r5265, %r5258, %r48, %r2453;
	ld.param.u64 	%rd560, [%rd1+120];
	cvta.to.global.u64 	%rd561, %rd560;
	rem.s32 	%r5266, %r5265, %r1569;
	shr.u32 	%r5267, %r5266, 31;
	add.s32 	%r5268, %r5266, %r5267;
	shr.s32 	%r5269, %r5268, 1;
	mad.lo.s32 	%r5270, %r5269, %r1568, %r1301;
	shl.b32 	%r5271, %r5270, 5;
	add.s32 	%r5272, %r5271, %r46;
	cvt.s64.s32 	%rd41, %r5272;
	mul.wide.s32 	%rd562, %r5272, 4;
	add.s64 	%rd563, %rd561, %rd562;
	ld.global.u32 	%r7258, [%rd563];
	ld.param.u64 	%rd564, [%rd1+128];
	cvta.to.global.u64 	%rd42, %rd564;
	@%p142 bra 	$L__BB0_769;
	bra.uni 	$L__BB0_768;

$L__BB0_769:
	shl.b64 	%rd567, %rd41, 2;
	add.s64 	%rd568, %rd42, %rd567;
	ld.global.u32 	%r7257, [%rd568];
	bra.uni 	$L__BB0_770;

$L__BB0_768:
	shl.b32 	%r5273, %r1301, 5;
	add.s32 	%r5274, %r5273, %r46;
	mul.wide.s32 	%rd565, %r5274, 16;
	add.s64 	%rd566, %rd42, %rd565;
	ld.global.v4.u32 	{%r5275, %r5276, %r5277, %r5278}, [%rd566];
	mov.u32 	%r7088, %r7092;
	mov.u32 	%r7089, %r7093;
	mov.u32 	%r7090, %r7094;
	mov.u32 	%r7091, %r7095;
	mov.u32 	%r7092, %r7096;
	mov.u32 	%r7093, %r7097;
	mov.u32 	%r7094, %r7098;
	mov.u32 	%r7095, %r7099;
	mov.u32 	%r7096, %r5278;
	mov.u32 	%r7097, %r5277;
	mov.u32 	%r7098, %r5276;
	mov.u32 	%r7099, %r5275;

$L__BB0_770:
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5279, {low,high};}

	// end inline asm
	selp.b32 	%r5281, %r7083, %r5279, %p28;
	// begin inline asm
	{mul.f16x2 %r5280,%r5281,%r7226;
}
	// end inline asm
	selp.b32 	%r5284, %r7087, %r5279, %p28;
	// begin inline asm
	{mul.f16x2 %r5283,%r5284,%r7219;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5286, {low,high};}

	// end inline asm
	selp.b32 	%r5288, %r7083, %r5286, %p28;
	// begin inline asm
	{mul.f16x2 %r5287,%r5288,%r7207;
}
	// end inline asm
	selp.b32 	%r5291, %r7087, %r5286, %p28;
	// begin inline asm
	{mul.f16x2 %r5290,%r5291,%r7202;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5293, {low,high};}

	// end inline asm
	selp.b32 	%r5295, %r7083, %r5293, %p28;
	// begin inline asm
	{mul.f16x2 %r5294,%r5295,%r7194;
}
	// end inline asm
	selp.b32 	%r5298, %r7087, %r5293, %p28;
	// begin inline asm
	{mul.f16x2 %r5297,%r5298,%r7193;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5300, {low,high};}

	// end inline asm
	selp.b32 	%r5302, %r7083, %r5300, %p28;
	// begin inline asm
	{mul.f16x2 %r5301,%r5302,%r7198;
}
	// end inline asm
	selp.b32 	%r5305, %r7087, %r5300, %p28;
	// begin inline asm
	{mul.f16x2 %r5304,%r5305,%r7197;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5307, {low,high};}

	// end inline asm
	selp.b32 	%r5309, %r7083, %r5307, %p28;
	// begin inline asm
	{mul.f16x2 %r5308,%r5309,%r7196;
}
	// end inline asm
	selp.b32 	%r5312, %r7087, %r5307, %p28;
	// begin inline asm
	{mul.f16x2 %r5311,%r5312,%r7190;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5314, {low,high};}

	// end inline asm
	selp.b32 	%r5316, %r7083, %r5314, %p28;
	// begin inline asm
	{mul.f16x2 %r5315,%r5316,%r7186;
}
	// end inline asm
	selp.b32 	%r5319, %r7087, %r5314, %p28;
	// begin inline asm
	{mul.f16x2 %r5318,%r5319,%r7185;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5321, {low,high};}

	// end inline asm
	selp.b32 	%r5323, %r7083, %r5321, %p28;
	// begin inline asm
	{mul.f16x2 %r5322,%r5323,%r7184;
}
	// end inline asm
	selp.b32 	%r5326, %r7087, %r5321, %p28;
	// begin inline asm
	{mul.f16x2 %r5325,%r5326,%r7178;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5328, {low,high};}

	// end inline asm
	selp.b32 	%r5330, %r7083, %r5328, %p28;
	// begin inline asm
	{mul.f16x2 %r5329,%r5330,%r7171;
}
	// end inline asm
	selp.b32 	%r5333, %r7087, %r5328, %p28;
	// begin inline asm
	{mul.f16x2 %r5332,%r5333,%r7170;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5335, {low,high};}

	// end inline asm
	selp.b32 	%r5337, %r7083, %r5335, %p28;
	// begin inline asm
	{mul.f16x2 %r5336,%r5337,%r7147;
}
	// end inline asm
	selp.b32 	%r5340, %r7087, %r5335, %p28;
	// begin inline asm
	{mul.f16x2 %r5339,%r5340,%r7145;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5342, {low,high};}

	// end inline asm
	selp.b32 	%r5344, %r7083, %r5342, %p28;
	// begin inline asm
	{mul.f16x2 %r5343,%r5344,%r7146;
}
	// end inline asm
	selp.b32 	%r5347, %r7087, %r5342, %p28;
	// begin inline asm
	{mul.f16x2 %r5346,%r5347,%r7144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5349, {low,high};}

	// end inline asm
	selp.b32 	%r5351, %r7083, %r5349, %p28;
	// begin inline asm
	{mul.f16x2 %r5350,%r5351,%r7163;
}
	// end inline asm
	selp.b32 	%r5354, %r7087, %r5349, %p28;
	// begin inline asm
	{mul.f16x2 %r5353,%r5354,%r7162;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5356, {low,high};}

	// end inline asm
	selp.b32 	%r5358, %r7083, %r5356, %p28;
	// begin inline asm
	{mul.f16x2 %r5357,%r5358,%r7167;
}
	// end inline asm
	selp.b32 	%r5361, %r7087, %r5356, %p28;
	// begin inline asm
	{mul.f16x2 %r5360,%r5361,%r7166;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5363, {low,high};}

	// end inline asm
	selp.b32 	%r5365, %r7083, %r5363, %p28;
	// begin inline asm
	{mul.f16x2 %r5364,%r5365,%r7165;
}
	// end inline asm
	selp.b32 	%r5368, %r7087, %r5363, %p28;
	// begin inline asm
	{mul.f16x2 %r5367,%r5368,%r7160;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5370, {low,high};}

	// end inline asm
	selp.b32 	%r5372, %r7083, %r5370, %p28;
	// begin inline asm
	{mul.f16x2 %r5371,%r5372,%r7155;
}
	// end inline asm
	selp.b32 	%r5375, %r7087, %r5370, %p28;
	// begin inline asm
	{mul.f16x2 %r5374,%r5375,%r7154;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5377, {low,high};}

	// end inline asm
	selp.b32 	%r5379, %r7083, %r5377, %p28;
	// begin inline asm
	{mul.f16x2 %r5378,%r5379,%r7157;
}
	// end inline asm
	selp.b32 	%r5382, %r7087, %r5377, %p28;
	// begin inline asm
	{mul.f16x2 %r5381,%r5382,%r7156;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5384, {low,high};}

	// end inline asm
	selp.b32 	%r5386, %r7083, %r5384, %p28;
	// begin inline asm
	{mul.f16x2 %r5385,%r5386,%r7143;
}
	// end inline asm
	selp.b32 	%r5389, %r7087, %r5384, %p28;
	// begin inline asm
	{mul.f16x2 %r5388,%r5389,%r7142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5391, {low,high};}

	// end inline asm
	selp.b32 	%r5393, %r7083, %r5391, %p28;
	// begin inline asm
	{mul.f16x2 %r5392,%r5393,%r7141;
}
	// end inline asm
	selp.b32 	%r5396, %r7087, %r5391, %p28;
	// begin inline asm
	{mul.f16x2 %r5395,%r5396,%r7140;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5398, {low,high};}

	// end inline asm
	selp.b32 	%r5400, %r7083, %r5398, %p28;
	// begin inline asm
	{mul.f16x2 %r5399,%r5400,%r7139;
}
	// end inline asm
	selp.b32 	%r5403, %r7087, %r5398, %p28;
	// begin inline asm
	{mul.f16x2 %r5402,%r5403,%r7138;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5405, {low,high};}

	// end inline asm
	selp.b32 	%r5407, %r7083, %r5405, %p28;
	// begin inline asm
	{mul.f16x2 %r5406,%r5407,%r7149;
}
	// end inline asm
	selp.b32 	%r5410, %r7087, %r5405, %p28;
	// begin inline asm
	{mul.f16x2 %r5409,%r5410,%r7148;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5412, {low,high};}

	// end inline asm
	selp.b32 	%r5414, %r7083, %r5412, %p28;
	// begin inline asm
	{mul.f16x2 %r5413,%r5414,%r7137;
}
	// end inline asm
	selp.b32 	%r5417, %r7087, %r5412, %p28;
	// begin inline asm
	{mul.f16x2 %r5416,%r5417,%r7135;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5419, {low,high};}

	// end inline asm
	selp.b32 	%r5421, %r7083, %r5419, %p28;
	// begin inline asm
	{mul.f16x2 %r5420,%r5421,%r7136;
}
	// end inline asm
	selp.b32 	%r5424, %r7087, %r5419, %p28;
	// begin inline asm
	{mul.f16x2 %r5423,%r5424,%r7134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5426, {low,high};}

	// end inline asm
	selp.b32 	%r5428, %r7083, %r5426, %p28;
	// begin inline asm
	{mul.f16x2 %r5427,%r5428,%r7133;
}
	// end inline asm
	selp.b32 	%r5431, %r7087, %r5426, %p28;
	// begin inline asm
	{mul.f16x2 %r5430,%r5431,%r7131;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5433, {low,high};}

	// end inline asm
	selp.b32 	%r5435, %r7083, %r5433, %p28;
	// begin inline asm
	{mul.f16x2 %r5434,%r5435,%r7132;
}
	// end inline asm
	selp.b32 	%r5438, %r7087, %r5433, %p28;
	// begin inline asm
	{mul.f16x2 %r5437,%r5438,%r7130;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5440, {low,high};}

	// end inline asm
	selp.b32 	%r5442, %r7083, %r5440, %p28;
	// begin inline asm
	{mul.f16x2 %r5441,%r5442,%r7129;
}
	// end inline asm
	selp.b32 	%r5445, %r7087, %r5440, %p28;
	// begin inline asm
	{mul.f16x2 %r5444,%r5445,%r7128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5447,%r7253,%r3417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5450,%r3528,%r3374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5453,%r5447,%r5450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5456,%r6997,%r5453;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5459,%r5280,%r5456;
}
	// end inline asm
	selp.b32 	%r7221, %r5280, %r5459, %p28;
	// begin inline asm
	{sub.f16x2 %r5462,%r7252,%r3483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5465,%r3562,%r3451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5468,%r5462,%r5465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5471,%r6997,%r5468;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5474,%r5283,%r5471;
}
	// end inline asm
	selp.b32 	%r7216, %r5283, %r5474, %p28;
	// begin inline asm
	{sub.f16x2 %r5477,%r7249,%r3650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5480,%r7255,%r3607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5483,%r5477,%r5480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5486,%r6997,%r5483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5489,%r5287,%r5486;
}
	// end inline asm
	selp.b32 	%r7225, %r5287, %r5489, %p28;
	// begin inline asm
	{sub.f16x2 %r5492,%r7248,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5495,%r7254,%r3684;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5498,%r5492,%r5495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5501,%r6997,%r5498;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5504,%r5290,%r5501;
}
	// end inline asm
	selp.b32 	%r7218, %r5290, %r5504, %p28;
	// begin inline asm
	{sub.f16x2 %r5507,%r7252,%r7253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5510,%r7082,%r5507;
}
	// end inline asm
	@%p28 bra 	$L__BB0_772;
	bra.uni 	$L__BB0_771;

$L__BB0_772:
	// begin inline asm
	{neg.f16x2 %r7492,%r5294;
}
	// end inline asm
	bra.uni 	$L__BB0_773;

$L__BB0_771:
	// begin inline asm
	{mul.f16x2 %r7492,%r7083,%r5507;
}
	// end inline asm

$L__BB0_773:
	mov.u32 	%r5521, 31;
	mov.u32 	%r5523, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5519,%r7492,%r5521,%r2138,%r5523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5524,%r5510,%r5519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5527,%r1078,%r1054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5530,%r5527,%r5524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5533,%r6997,%r5530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7223,%r5294,%r5533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5539,%r7254,%r7255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5542,%r7082,%r5539;
}
	// end inline asm
	mov.u32 	%r7493, %r5301;
	@%p28 bra 	$L__BB0_775;

	// begin inline asm
	{mul.f16x2 %r7493,%r7083,%r5539;
}
	// end inline asm

$L__BB0_775:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5551,%r7493,%r5521,%r2138,%r5523;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5556,%r5542,%r5551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5559,%r7243,%r1054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5562,%r5556,%r5559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5565,%r6997,%r5562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7228,%r5301,%r5565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5571,%r7245,%r7253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5574,%r7251,%r7255;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5577,%r5571,%r5574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5580,%r6997,%r5577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5583,%r5308,%r5580;
}
	// end inline asm
	selp.b32 	%r7226, %r5308, %r5583, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7253;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5588,%r7253,%r437,%r2138,%r5523;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5588;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5594, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5595,%r5594,%r7252;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5598,%r7086,%r5595;
}
	// end inline asm
	@%p28 bra 	$L__BB0_777;
	bra.uni 	$L__BB0_776;

$L__BB0_777:
	// begin inline asm
	{neg.f16x2 %r7494,%r5297;
}
	// end inline asm
	bra.uni 	$L__BB0_778;

$L__BB0_776:
	// begin inline asm
	{mul.f16x2 %r7494,%r7087,%r5595;
}
	// end inline asm

$L__BB0_778:
	mov.u32 	%r5613, 31;
	mov.u32 	%r5637, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5611,%r7494,%r5613,%r2138,%r5637;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5616,%r5598,%r5611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5619,%r1090,%r1066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5622,%r5619,%r5616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5625,%r6997,%r5622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7222,%r5297,%r5625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7255;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5633,%r7255,%r437,%r2138,%r5637;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5633;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5639, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5640,%r5639,%r7254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5643,%r7086,%r5640;
}
	// end inline asm
	mov.u32 	%r7495, %r5304;
	@%p28 bra 	$L__BB0_780;

	// begin inline asm
	{mul.f16x2 %r7495,%r7087,%r5640;
}
	// end inline asm

$L__BB0_780:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5654,%r7495,%r5613,%r2138,%r5637;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5659,%r5643,%r5654;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5662,%r7242,%r1066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5665,%r5659,%r5662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5668,%r6997,%r5665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7227,%r5304,%r5668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r7244,%r7252;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5677,%r7250,%r7254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5680,%r5674,%r5677;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5683,%r6997,%r5680;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5686,%r5311,%r5683;
}
	// end inline asm
	selp.b32 	%r7219, %r5311, %r5686, %p28;
	// begin inline asm
	{sub.f16x2 %r5689,%r7250,%r7251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5692,%r7082,%r5689;
}
	// end inline asm
	mov.u32 	%r7496, %r5315;
	@%p28 bra 	$L__BB0_782;

	// begin inline asm
	{mul.f16x2 %r7496,%r7083,%r5689;
}
	// end inline asm

$L__BB0_782:
	mov.u32 	%r5703, 31;
	mov.u32 	%r5742, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5701,%r7496,%r5703,%r2138,%r5742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5706,%r5692,%r5701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5709,%r7237,%r1078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5712,%r5706,%r5709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5715,%r6997,%r5712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7214,%r5315,%r5715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5721,%r7239,%r3988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5724,%r4129,%r7251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5727,%r5721,%r5724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5730,%r6997,%r5727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5733,%r5322,%r5730;
}
	// end inline asm
	selp.b32 	%r7212, %r5322, %r5733, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7251;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5738,%r7251,%r437,%r2138,%r5742;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5738;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5744, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5745,%r5744,%r7250;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5748,%r7086,%r5745;
}
	// end inline asm
	mov.u32 	%r7497, %r5318;
	@%p28 bra 	$L__BB0_784;

	// begin inline asm
	{mul.f16x2 %r7497,%r7087,%r5745;
}
	// end inline asm

$L__BB0_784:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5759,%r7497,%r5703,%r2138,%r5742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5764,%r5748,%r5759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5767,%r7236,%r1090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5770,%r5764,%r5767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5773,%r6997,%r5770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7213,%r5318,%r5773;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5779,%r7238,%r4069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5782,%r4163,%r7250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5785,%r5779,%r5782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5788,%r6997,%r5785;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5791,%r5325,%r5788;
}
	// end inline asm
	selp.b32 	%r7210, %r5325, %r5791, %p28;
	// begin inline asm
	{sub.f16x2 %r5794,%r7248,%r7249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5797,%r7082,%r5794;
}
	// end inline asm
	@%p28 bra 	$L__BB0_786;
	bra.uni 	$L__BB0_785;

$L__BB0_786:
	// begin inline asm
	{neg.f16x2 %r7498,%r5329;
}
	// end inline asm
	bra.uni 	$L__BB0_787;

$L__BB0_785:
	// begin inline asm
	{mul.f16x2 %r7498,%r7083,%r5794;
}
	// end inline asm

$L__BB0_787:
	mov.u32 	%r5810, 31;
	mov.u32 	%r5812, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5808,%r7498,%r5810,%r2138,%r5812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5813,%r5797,%r5808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5816,%r7243,%r1108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5819,%r5816,%r5813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5822,%r6997,%r5819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7204,%r5329,%r5822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5828,%r7369,%r7370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5831,%r7082,%r5828;
}
	// end inline asm
	mov.u32 	%r7499, %r5336;
	@%p28 bra 	$L__BB0_789;

	// begin inline asm
	{mul.f16x2 %r7499,%r7083,%r5828;
}
	// end inline asm

$L__BB0_789:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5840,%r7499,%r5810,%r2138,%r5812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5845,%r5831,%r5840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5848,%r7367,%r1108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r5845,%r5848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r6997,%r5851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7209,%r5336,%r5854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5860,%r7368,%r7249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5863,%r7247,%r7370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5866,%r5860,%r5863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5869,%r6997,%r5866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5872,%r5343,%r5869;
}
	// end inline asm
	selp.b32 	%r7207, %r5343, %r5872, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7249;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5877,%r7249,%r437,%r2138,%r5812;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5877;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5883, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r5883,%r7248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5887,%r7086,%r5884;
}
	// end inline asm
	@%p28 bra 	$L__BB0_791;
	bra.uni 	$L__BB0_790;

$L__BB0_791:
	// begin inline asm
	{neg.f16x2 %r7500,%r5332;
}
	// end inline asm
	bra.uni 	$L__BB0_792;

$L__BB0_790:
	// begin inline asm
	{mul.f16x2 %r7500,%r7087,%r5884;
}
	// end inline asm

$L__BB0_792:
	mov.u32 	%r5902, 31;
	mov.u32 	%r5926, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5900,%r7500,%r5902,%r2138,%r5926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5905,%r5887,%r5900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5908,%r7242,%r1114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5911,%r5908,%r5905;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5914,%r6997,%r5911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7203,%r5332,%r5914;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7370;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5922,%r7370,%r437,%r2138,%r5926;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5922;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5928, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5929,%r5928,%r7369;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5932,%r7086,%r5929;
}
	// end inline asm
	mov.u32 	%r7501, %r5339;
	@%p28 bra 	$L__BB0_794;

	// begin inline asm
	{mul.f16x2 %r7501,%r7087,%r5929;
}
	// end inline asm

$L__BB0_794:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5943,%r7501,%r5902,%r2138,%r5926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5948,%r5932,%r5943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5951,%r7365,%r1114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5954,%r5948,%r5951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5957,%r6997,%r5954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r5339,%r5957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5963,%r7366,%r7248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5966,%r7246,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5969,%r5963,%r5966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5972,%r6997,%r5969;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5975,%r5346,%r5972;
}
	// end inline asm
	selp.b32 	%r7202, %r5346, %r5975, %p28;
	// begin inline asm
	{sub.f16x2 %r5978,%r7244,%r7245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5981,%r7082,%r5978;
}
	// end inline asm
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7502,%r5350;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7502,%r7083,%r5978;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r5994, 31;
	mov.u32 	%r5996, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5992,%r7502,%r5994,%r2138,%r5996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5997,%r5981,%r5992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6000,%r7237,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6003,%r6000,%r5997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6006,%r6997,%r6003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7194,%r5350,%r6006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6012,%r7246,%r7247;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6015,%r7082,%r6012;
}
	// end inline asm
	mov.u32 	%r7503, %r5357;
	@%p28 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7503,%r7083,%r6012;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6024,%r7503,%r5994,%r2138,%r5996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6029,%r6015,%r6024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6032,%r7233,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r6029,%r6032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r6997,%r6035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7198,%r5357,%r6038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6044,%r7235,%r7245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6047,%r7241,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6050,%r6044,%r6047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6053,%r6997,%r6050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6056,%r5364,%r6053;
}
	// end inline asm
	selp.b32 	%r7196, %r5364, %r6056, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7245;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6061,%r7245,%r437,%r2138,%r5996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6061;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6067, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6068,%r6067,%r7244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6071,%r7086,%r6068;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7504,%r5353;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7504,%r7087,%r6068;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r6086, 31;
	mov.u32 	%r6110, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6084,%r7504,%r6086,%r2138,%r6110;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6089,%r6071,%r6084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r7236,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6095,%r6092,%r6089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6098,%r6997,%r6095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r5353,%r6098;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7247;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6106,%r7247,%r437,%r2138,%r6110;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6106;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6112, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6113,%r6112,%r7246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6116,%r7086,%r6113;
}
	// end inline asm
	mov.u32 	%r7505, %r5360;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7505,%r7087,%r6113;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6127,%r7505,%r6086,%r2138,%r6110;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6132,%r6116,%r6127;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6135,%r7232,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r6132,%r6135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6141,%r6997,%r6138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7197,%r5360,%r6141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6147,%r7234,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6150,%r7240,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6153,%r6147,%r6150;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6156,%r6997,%r6153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6159,%r5367,%r6156;
}
	// end inline asm
	selp.b32 	%r7190, %r5367, %r6159, %p28;
	// begin inline asm
	{sub.f16x2 %r6162,%r7238,%r7239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6165,%r7082,%r6162;
}
	// end inline asm
	@%p28 bra 	$L__BB0_806;
	bra.uni 	$L__BB0_805;

$L__BB0_806:
	// begin inline asm
	{neg.f16x2 %r7506,%r5371;
}
	// end inline asm
	bra.uni 	$L__BB0_807;

$L__BB0_805:
	// begin inline asm
	{mul.f16x2 %r7506,%r7083,%r6162;
}
	// end inline asm

$L__BB0_807:
	mov.u32 	%r6178, 31;
	mov.u32 	%r6180, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6176,%r7506,%r6178,%r2138,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6181,%r6165,%r6176;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r1163,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r6184,%r6181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r6997,%r6187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7182,%r5371,%r6190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6196,%r7240,%r7241;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6199,%r7082,%r6196;
}
	// end inline asm
	mov.u32 	%r7507, %r5378;
	@%p28 bra 	$L__BB0_809;

	// begin inline asm
	{mul.f16x2 %r7507,%r7083,%r6196;
}
	// end inline asm

$L__BB0_809:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6208,%r7507,%r6178,%r2138,%r6180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6213,%r6199,%r6208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6216,%r7231,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r6213,%r6216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6222,%r6997,%r6219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7186,%r5378,%r6222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6228,%r7353,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6231,%r7356,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6234,%r6228,%r6231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6237,%r6997,%r6234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6240,%r5385,%r6237;
}
	// end inline asm
	selp.b32 	%r7184, %r5385, %r6240, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7239;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6245,%r7239,%r437,%r2138,%r6180;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6245;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6251, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6252,%r6251,%r7238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6255,%r7086,%r6252;
}
	// end inline asm
	@%p28 bra 	$L__BB0_811;
	bra.uni 	$L__BB0_810;

$L__BB0_811:
	// begin inline asm
	{neg.f16x2 %r7508,%r5374;
}
	// end inline asm
	bra.uni 	$L__BB0_812;

$L__BB0_810:
	// begin inline asm
	{mul.f16x2 %r7508,%r7087,%r6252;
}
	// end inline asm

$L__BB0_812:
	mov.u32 	%r6270, 31;
	mov.u32 	%r6294, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6268,%r7508,%r6270,%r2138,%r6294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6273,%r6255,%r6268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6276,%r1164,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6276,%r6273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r6997,%r6279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r5374,%r6282;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7241;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6290,%r7241,%r437,%r2138,%r6294;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6290;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6296, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6297,%r6296,%r7240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6300,%r7086,%r6297;
}
	// end inline asm
	mov.u32 	%r7509, %r5381;
	@%p28 bra 	$L__BB0_814;

	// begin inline asm
	{mul.f16x2 %r7509,%r7087,%r6297;
}
	// end inline asm

$L__BB0_814:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6311,%r7509,%r6270,%r2138,%r6294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6316,%r6300,%r6311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6319,%r7230,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r6316,%r6319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6325,%r6997,%r6322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r5381,%r6325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6331,%r7351,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6334,%r7355,%r7240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6337,%r6331,%r6334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6340,%r6997,%r6337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6343,%r5388,%r6340;
}
	// end inline asm
	selp.b32 	%r7178, %r5388, %r6343, %p28;
	// begin inline asm
	{sub.f16x2 %r6346,%r7355,%r7356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6349,%r7082,%r6346;
}
	// end inline asm
	mov.u32 	%r7510, %r5392;
	@%p28 bra 	$L__BB0_816;

	// begin inline asm
	{mul.f16x2 %r7510,%r7083,%r6346;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6360, 31;
	mov.u32 	%r6384, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6358,%r7510,%r6360,%r2138,%r6384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6363,%r6349,%r6358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6366,%r7350,%r1163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6369,%r6363,%r6366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6372,%r6997,%r6369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r5392,%r6372;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7356;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6380,%r7356,%r437,%r2138,%r6384;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6380;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6386, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6387,%r6386,%r7355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6390,%r7086,%r6387;
}
	// end inline asm
	mov.u32 	%r7511, %r5395;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7511,%r7087,%r6387;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6401,%r7511,%r6360,%r2138,%r6384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6406,%r6390,%r6401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6409,%r7349,%r1164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6412,%r6406,%r6409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6415,%r6997,%r6412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7174,%r5395,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6421,%r7366,%r7368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6424,%r7082,%r6421;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7512,%r5399;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7512,%r7083,%r6421;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6437, 31;
	mov.u32 	%r6461, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6435,%r7512,%r6437,%r2138,%r6461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6440,%r6424,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6443,%r7233,%r7367;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6446,%r6443,%r6440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6449,%r6997,%r6446;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r5399,%r6449;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7368;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6457,%r7368,%r437,%r2138,%r6461;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6457;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6463, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6464,%r6463,%r7366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6467,%r7086,%r6464;
}
	// end inline asm
	@%p28 bra 	$L__BB0_823;
	bra.uni 	$L__BB0_822;

$L__BB0_823:
	// begin inline asm
	{neg.f16x2 %r7513,%r5402;
}
	// end inline asm
	bra.uni 	$L__BB0_824;

$L__BB0_822:
	// begin inline asm
	{mul.f16x2 %r7513,%r7087,%r6464;
}
	// end inline asm

$L__BB0_824:
	mov.u32 	%r6482, 31;
	mov.u32 	%r6484, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6480,%r7513,%r6482,%r2138,%r6484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6485,%r6467,%r6480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6488,%r7232,%r7365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6491,%r6488,%r6485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6494,%r6997,%r6491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r5402,%r6494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6500,%r7234,%r7235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6503,%r7082,%r6500;
}
	// end inline asm
	@%p28 bra 	$L__BB0_826;
	bra.uni 	$L__BB0_825;

$L__BB0_826:
	// begin inline asm
	{neg.f16x2 %r7514,%r5406;
}
	// end inline asm
	bra.uni 	$L__BB0_827;

$L__BB0_825:
	// begin inline asm
	{mul.f16x2 %r7514,%r7083,%r6500;
}
	// end inline asm

$L__BB0_827:
	mov.u32 	%r6516, 31;
	mov.u32 	%r6518, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6514,%r7514,%r6516,%r2138,%r6518;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6519,%r6503,%r6514;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6522,%r7231,%r7233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6525,%r6522,%r6519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6528,%r6997,%r6525;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r5406,%r6528;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6534,%r7363,%r7364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6537,%r7082,%r6534;
}
	// end inline asm
	mov.u32 	%r7515, %r5413;
	@%p28 bra 	$L__BB0_829;

	// begin inline asm
	{mul.f16x2 %r7515,%r7083,%r6534;
}
	// end inline asm

$L__BB0_829:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6546,%r7515,%r6516,%r2138,%r6518;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6551,%r6537,%r6546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6554,%r7361,%r7233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6557,%r6551,%r6554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6560,%r6997,%r6557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r5413,%r6560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6566,%r7348,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6569,%r7354,%r7364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6572,%r6566,%r6569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6575,%r6997,%r6572;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6578,%r5420,%r6575;
}
	// end inline asm
	selp.b32 	%r7165, %r5420, %r6578, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7235;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6583,%r7235,%r437,%r2138,%r6518;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6583;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6589, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6590,%r6589,%r7234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6593,%r7086,%r6590;
}
	// end inline asm
	@%p28 bra 	$L__BB0_831;
	bra.uni 	$L__BB0_830;

$L__BB0_831:
	// begin inline asm
	{neg.f16x2 %r7516,%r5409;
}
	// end inline asm
	bra.uni 	$L__BB0_832;

$L__BB0_830:
	// begin inline asm
	{mul.f16x2 %r7516,%r7087,%r6590;
}
	// end inline asm

$L__BB0_832:
	mov.u32 	%r6608, 31;
	mov.u32 	%r6632, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6606,%r7516,%r6608,%r2138,%r6632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6611,%r6593,%r6606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6614,%r7230,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6617,%r6614,%r6611;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6620,%r6997,%r6617;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r5409,%r6620;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7364;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6628,%r7364,%r437,%r2138,%r6632;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6628;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6634, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6635,%r6634,%r7363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6638,%r7086,%r6635;
}
	// end inline asm
	mov.u32 	%r7517, %r5416;
	@%p28 bra 	$L__BB0_834;

	// begin inline asm
	{mul.f16x2 %r7517,%r7087,%r6635;
}
	// end inline asm

$L__BB0_834:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6649,%r7517,%r6608,%r2138,%r6632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6654,%r6638,%r6649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6657,%r7359,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6660,%r6654,%r6657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6663,%r6997,%r6660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r5416,%r6663;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6669,%r7347,%r7234;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6672,%r7352,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6675,%r6669,%r6672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6678,%r6997,%r6675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6681,%r5423,%r6678;
}
	// end inline asm
	selp.b32 	%r7160, %r5423, %r6681, %p28;
	// begin inline asm
	{sub.f16x2 %r6684,%r7351,%r7353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6687,%r7082,%r6684;
}
	// end inline asm
	@%p28 bra 	$L__BB0_836;
	bra.uni 	$L__BB0_835;

$L__BB0_836:
	// begin inline asm
	{neg.f16x2 %r7518,%r5427;
}
	// end inline asm
	bra.uni 	$L__BB0_837;

$L__BB0_835:
	// begin inline asm
	{mul.f16x2 %r7518,%r7083,%r6684;
}
	// end inline asm

$L__BB0_837:
	mov.u32 	%r6700, 31;
	mov.u32 	%r6702, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6698,%r7518,%r6700,%r2138,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6703,%r6687,%r6698;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6706,%r7350,%r7231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6709,%r6706,%r6703;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6712,%r6997,%r6709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7155,%r5427,%r6712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6718,%r7352,%r7354;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6721,%r7082,%r6718;
}
	// end inline asm
	mov.u32 	%r7519, %r5434;
	@%p28 bra 	$L__BB0_839;

	// begin inline asm
	{mul.f16x2 %r7519,%r7083,%r6718;
}
	// end inline asm

$L__BB0_839:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6730,%r7519,%r6700,%r2138,%r6702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6735,%r6721,%r6730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6738,%r7346,%r7231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6741,%r6735,%r6738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6744,%r6997,%r6741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7157,%r5434,%r6744;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7353;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6752,%r7353,%r437,%r2138,%r6702;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6752;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6758, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6759,%r6758,%r7351;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6762,%r7086,%r6759;
}
	// end inline asm
	@%p28 bra 	$L__BB0_841;
	bra.uni 	$L__BB0_840;

$L__BB0_841:
	// begin inline asm
	{neg.f16x2 %r7520,%r5430;
}
	// end inline asm
	bra.uni 	$L__BB0_842;

$L__BB0_840:
	// begin inline asm
	{mul.f16x2 %r7520,%r7087,%r6759;
}
	// end inline asm

$L__BB0_842:
	mov.u32 	%r6777, 31;
	mov.u32 	%r6801, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6775,%r7520,%r6777,%r2138,%r6801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6780,%r6762,%r6775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6783,%r7349,%r7230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6786,%r6783,%r6780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6789,%r6997,%r6786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r5430,%r6789;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7354;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6797,%r7354,%r437,%r2138,%r6801;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6797;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6803, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6804,%r6803,%r7352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6807,%r7086,%r6804;
}
	// end inline asm
	mov.u32 	%r7521, %r5437;
	@%p28 bra 	$L__BB0_844;

	// begin inline asm
	{mul.f16x2 %r7521,%r7087,%r6804;
}
	// end inline asm

$L__BB0_844:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6818,%r7521,%r6777,%r2138,%r6801;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6823,%r6807,%r6818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6826,%r7345,%r7230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6829,%r6823,%r6826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6832,%r6997,%r6829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r5437,%r6832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6838,%r7347,%r7348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6841,%r7082,%r6838;
}
	// end inline asm
	@%p28 bra 	$L__BB0_846;
	bra.uni 	$L__BB0_845;

$L__BB0_846:
	// begin inline asm
	{neg.f16x2 %r7522,%r5441;
}
	// end inline asm
	bra.uni 	$L__BB0_847;

$L__BB0_845:
	// begin inline asm
	{mul.f16x2 %r7522,%r7083,%r6838;
}
	// end inline asm

$L__BB0_847:
	mov.u32 	%r6854, 31;
	mov.u32 	%r6878, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6852,%r7522,%r6854,%r2138,%r6878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6857,%r6841,%r6852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6860,%r7346,%r7361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6863,%r6860,%r6857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6866,%r6997,%r6863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7149,%r5441,%r6866;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7348;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6874,%r7348,%r437,%r2138,%r6878;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6874;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6880, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6881,%r6880,%r7347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6884,%r7086,%r6881;
}
	// end inline asm
	@%p28 bra 	$L__BB0_849;
	bra.uni 	$L__BB0_848;

$L__BB0_849:
	// begin inline asm
	{neg.f16x2 %r7523,%r5444;
}
	// end inline asm
	bra.uni 	$L__BB0_850;

$L__BB0_848:
	// begin inline asm
	{mul.f16x2 %r7523,%r7087,%r6881;
}
	// end inline asm

$L__BB0_850:
	setp.ne.s32 	%p535, %r41, %r2030;
	mov.u32 	%r6899, 31;
	mov.u32 	%r6901, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6897,%r7523,%r6899,%r2138,%r6901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6902,%r6884,%r6897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6905,%r7345,%r7359;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6908,%r6905,%r6902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6911,%r6997,%r6908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r5444,%r6911;
}
	// end inline asm
	bar.sync 	0;
	ld.param.u64 	%rd569, [%rd1+104];
	cvta.to.global.u64 	%rd43, %rd569;
	@%p535 bra 	$L__BB0_852;

	mad.lo.s32 	%r6920, %r657, %r1566, %r44;
	mad.lo.s32 	%r6921, %r6920, 768, 384;
	mul.lo.s32 	%r6922, %r6921, %r1564;
	mad.lo.s32 	%r6924, %r42, 384, %r6922;
	add.s32 	%r6925, %r6924, -128;
	mul.wide.s32 	%rd570, %r6925, 4;
	add.s64 	%rd571, %rd43, %rd570;
	add.s64 	%rd573, %rd571, %rd305;
	st.global.v4.u32 	[%rd573+512], {%r7209, %r7208, %r7204, %r7203};
	st.global.v4.u32 	[%rd573+1024], {%r7225, %r7218, %r7228, %r7227};
	st.global.v4.u32 	[%rd573+1536], {%r7223, %r7222, %r7221, %r7216};

$L__BB0_852:
	setp.ne.s32 	%p536, %r42, %r2035;
	@%p536 bra 	$L__BB0_855;

	not.b32 	%r6972, %r41;
	add.s32 	%r6971, %r1563, %r6972;
	mad.lo.s32 	%r6927, %r658, %r1565, %r43;
	mad.lo.s32 	%r6933, %r6971, 384, %r70;
	mad.lo.s32 	%r6934, %r6927, %r1642, %r6933;
	mad.lo.s32 	%r6937, %r1644, %r69, %r6934;
	mul.wide.s32 	%rd574, %r6937, 4;
	add.s64 	%rd575, %rd43, %rd574;
	add.s64 	%rd44, %rd575, %rd305;
	st.global.v4.u32 	[%rd44], {%r7223, %r7222, %r7221, %r7216};
	st.global.v4.u32 	[%rd44+512], {%r7214, %r7213, %r7182, %r7181};
	st.global.v4.u32 	[%rd44+1024], {%r7212, %r7210, %r7175, %r7174};
	@%p276 bra 	$L__BB0_855;

	st.global.v4.u32 	[%rd44+1536], {%r7460, %r7459, %r7462, %r7461};

$L__BB0_855:
	rem.s32 	%r6938, %r7256, %r1567;
	setp.eq.s32 	%p529, %r6938, 0;
	@%p529 bra 	$L__BB0_857;

	bar.sync 	0;
	bra.uni 	$L__BB0_864;

$L__BB0_857:
	@%p218 bra 	$L__BB0_859;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_859:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_863;

	membar.gl;
	setp.eq.s32 	%p532, %r431, %r432;
	mov.u32 	%r6954, -2147483647;
	sub.s32 	%r6955, %r6954, %r430;
	selp.b32 	%r6943, %r6955, 1, %p532;
	// begin inline asm
	atom.add.release.gpu.u32 %r6942,[%rd28],%r6943;
	// end inline asm

$L__BB0_861:
	ld.volatile.u32 	%r6956, [%rd28];
	xor.b32  	%r6957, %r6956, %r6942;
	setp.gt.s32 	%p533, %r6957, -1;
	@%p533 bra 	$L__BB0_861;

	// begin inline asm
	ld.acquire.gpu.u32 %r6958,[%rd28];
	// end inline asm

$L__BB0_863:
	bar.sync 	0;

$L__BB0_864:
	setp.lt.s32 	%p534, %r1300, %r49;
	mov.u32 	%r7128, %r7463;
	mov.u32 	%r7129, %r7464;
	mov.u32 	%r7130, %r7449;
	mov.u32 	%r7131, %r7450;
	mov.u32 	%r7132, %r7451;
	mov.u32 	%r7133, %r7452;
	mov.u32 	%r7134, %r7465;
	mov.u32 	%r7135, %r7466;
	mov.u32 	%r7136, %r7467;
	mov.u32 	%r7137, %r7468;
	mov.u32 	%r7138, %r7469;
	mov.u32 	%r7139, %r7470;
	mov.u32 	%r7140, %r7455;
	mov.u32 	%r7141, %r7456;
	mov.u32 	%r7142, %r7457;
	mov.u32 	%r7143, %r7458;
	mov.u32 	%r7144, %r7471;
	mov.u32 	%r7145, %r7472;
	mov.u32 	%r7146, %r7473;
	mov.u32 	%r7147, %r7474;
	mov.u32 	%r7176, %r502;
	mov.u32 	%r7177, %r7393;
	mov.u32 	%r7180, %r503;
	mov.u32 	%r7183, %r7395;
	mov.u32 	%r7188, %r508;
	mov.u32 	%r7192, %r511;
	mov.u32 	%r7200, %r7400;
	mov.u32 	%r7205, %r7402;
	mov.u32 	%r7211, %r529;
	mov.u32 	%r7215, %r537;
	mov.u32 	%r7217, %r539;
	mov.u32 	%r7220, %r541;
	mov.u32 	%r7224, %r545;
	mov.u32 	%r7229, %r549;
	mov.u32 	%r7256, %r1300;
	@%p534 bra 	$L__BB0_332;

$L__BB0_865:
	ret;

}

