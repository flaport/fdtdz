//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_70
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<351>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7827>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<564>;


	mov.b64 	%rd42, _ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd42;
	ld.param.v2.u32 	{%r1681, %r1682}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1683, %r1684}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1685, %r1686}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1687, %r1688}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1689, %r1690}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1691, %r1692}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1693, %r1694}, [_ZN6kernel16SimulationKernelI7__half2fLi0ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1695, 32;
	sub.s32 	%r27, %r1695, %r1688;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p12, %r27, %r28;
	add.s32 	%r1696, %r1694, -1;
	mad.lo.s32 	%r1697, %r1696, %r1693, %r1692;
	add.s32 	%r1698, %r1687, %r1686;
	add.s32 	%r1699, %r1698, %r1697;
	add.s32 	%r1700, %r1699, 1;
	mul.lo.s32 	%r1701, %r1681, %r1683;
	shl.b32 	%r29, %r1701, 1;
	shl.b32 	%r1702, %r1701, 2;
	div.s32 	%r1703, %r1700, %r1702;
	add.s32 	%r1704, %r1703, 1;
	mul.lo.s32 	%r1705, %r1704, %r1687;
	mul.lo.s32 	%r1706, %r1682, %r1684;
	shl.b32 	%r30, %r1706, 1;
	div.s32 	%r1707, %r1705, %r30;
	add.s32 	%r1708, %r1707, 1;
	mul.lo.s32 	%r31, %r1708, %r1686;
	@%p12 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7206, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7206, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd43, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd43;
	mad.lo.s32 	%r1711, %r1683, %r26, %r25;
	mad.lo.s32 	%r1712, %r1711, %r1682, %r24;
	mad.lo.s32 	%r1713, %r1712, %r1681, %r23;
	shl.b32 	%r35, %r1713, 5;
	add.s32 	%r7211, %r35, %r28;
	mul.lo.s32 	%r1714, %r1706, %r1701;
	shl.b32 	%r39, %r1714, 5;
	shl.b32 	%r1715, %r1688, 2;
	mov.u32 	%r1716, 128;
	sub.s32 	%r40, %r1716, %r1715;
	mul.lo.s32 	%r1717, %r1687, %r1686;
	mul.lo.s32 	%r1718, %r1717, %r1694;
	mul.lo.s32 	%r1719, %r1718, %r40;
	mul.lo.s32 	%r41, %r1719, 3;
	setp.ge.s32 	%p13, %r7211, %r41;
	@%p13 bra 	$L__BB0_10;

	not.b32 	%r1720, %r28;
	add.s32 	%r1721, %r41, %r1720;
	sub.s32 	%r1722, %r1721, %r35;
	mul.lo.s32 	%r1723, %r1706, %r1681;
	mul.lo.s32 	%r1724, %r1723, %r1683;
	shl.b32 	%r1725, %r1724, 5;
	div.u32 	%r42, %r1722, %r1725;
	add.s32 	%r1726, %r42, 1;
	and.b32  	%r7208, %r1726, 3;
	setp.eq.s32 	%p14, %r7208, 0;
	mov.u32 	%r7209, %r7211;
	@%p14 bra 	$L__BB0_7;

	mov.u32 	%r7209, %r7211;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd44, %r7209, 4;
	add.s64 	%rd45, %rd2, %rd44;
	mov.u32 	%r1727, 0;
	st.global.u32 	[%rd45], %r1727;
	add.s32 	%r7209, %r7209, %r39;
	add.s32 	%r7208, %r7208, -1;
	setp.ne.s32 	%p15, %r7208, 0;
	@%p15 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p16, %r42, 3;
	@%p16 bra 	$L__BB0_10;

	mul.wide.s32 	%rd48, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd46, %r7209, 4;
	add.s64 	%rd47, %rd2, %rd46;
	mov.u32 	%r1728, 0;
	st.global.u32 	[%rd47], %r1728;
	add.s64 	%rd49, %rd47, %rd48;
	st.global.u32 	[%rd49], %r1728;
	add.s32 	%r1729, %r7209, %r39;
	add.s32 	%r1730, %r1729, %r39;
	add.s64 	%rd50, %rd49, %rd48;
	st.global.u32 	[%rd50], %r1728;
	add.s32 	%r1731, %r1730, %r39;
	add.s64 	%rd51, %rd50, %rd48;
	st.global.u32 	[%rd51], %r1728;
	add.s32 	%r7209, %r1731, %r39;
	setp.lt.s32 	%p17, %r7209, %r41;
	@%p17 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd52, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd52;
	sub.s32 	%r1732, %r1687, %r29;
	div.s32 	%r1733, %r1732, %r30;
	mul.lo.s32 	%r1734, %r1733, %r1686;
	sub.s32 	%r51, %r1734, %r29;
	sub.s32 	%r1735, %r1686, %r30;
	mul.lo.s32 	%r1736, %r1735, %r1683;
	mul.lo.s32 	%r52, %r1681, 384;
	add.s32 	%r1737, %r52, %r52;
	add.s32 	%r1738, %r1737, 128;
	mul.lo.s32 	%r1740, %r1706, 768;
	mul.lo.s32 	%r1741, %r1736, %r1738;
	mad.lo.s32 	%r53, %r1740, %r51, %r1741;
	bra.uni 	$L__BB0_11;

$L__BB0_673:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r7193, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd549, %r7211, 4;
	add.s64 	%rd550, %rd3, %rd549;
	st.global.u32 	[%rd550], %r7193;
	add.s32 	%r7211, %r7211, %r39;

$L__BB0_11:
	setp.lt.s32 	%p18, %r7211, %r53;
	@%p18 bra 	$L__BB0_673;

	ld.param.u64 	%rd53, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd53;
	ld.param.u64 	%rd54, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd54;
	mad.lo.s32 	%r7253, %r1681, %r25, %r23;
	mul.lo.s32 	%r57, %r1682, %r26;
	add.s32 	%r58, %r57, %r24;
	setp.ge.s32 	%p19, %r7253, %r1686;
	@%p19 bra 	$L__BB0_36;

	setp.gt.s32 	%p20, %r27, %r28;
	mov.u32 	%r1742, 31;
	sub.s32 	%r1743, %r1742, %r28;
	selp.b32 	%r1744, %r28, %r1743, %p20;
	shl.b32 	%r1745, %r1744, 2;
	mov.u32 	%r1746, 2;
	sub.s32 	%r59, %r1745, %r1689;
	sub.s32 	%r1747, %r1746, %r1689;
	add.s32 	%r60, %r1747, %r1745;
	shl.b32 	%r61, %r1717, 6;
	add.s32 	%r62, %r1686, -1;
	add.s32 	%r63, %r59, 1;
	add.s32 	%r64, %r60, 1;
	shl.b32 	%r65, %r28, 1;
	or.b32  	%r66, %r65, 1;
	shr.u32 	%r1749, %r66, 31;
	add.s32 	%r1750, %r66, %r1749;
	shr.s32 	%r68, %r1750, 1;
	and.b32  	%r1751, %r1750, -2;
	sub.s32 	%r1752, %r66, %r1751;
	add.s32 	%r67, %r1752, %r61;
	rem.s32 	%r1787, %r63, %r40;
	add.s32 	%r1788, %r1787, %r40;
	rem.s32 	%r91, %r1788, %r40;
	rem.s32 	%r1789, %r64, %r40;
	add.s32 	%r1790, %r1789, %r40;
	rem.s32 	%r92, %r1790, %r40;
	mov.u32 	%r7212, %r7253;

$L__BB0_14:
	setp.ge.s32 	%p21, %r58, %r1687;
	@%p21 bra 	$L__BB0_35;

	add.s32 	%r70, %r62, %r7212;
	rem.s32 	%r1753, %r59, %r40;
	add.s32 	%r1754, %r1753, %r40;
	rem.s32 	%r71, %r1754, %r40;
	rem.s32 	%r1755, %r60, %r40;
	add.s32 	%r1756, %r1755, %r40;
	rem.s32 	%r72, %r1756, %r40;
	mul.lo.s32 	%r73, %r7212, %r1687;
	add.s32 	%r1757, %r1686, %r7212;
	mul.lo.s32 	%r74, %r1757, %r1687;
	add.s32 	%r1758, %r1757, %r1686;
	mul.lo.s32 	%r75, %r1758, %r1687;
	mov.u32 	%r7213, %r58;

$L__BB0_16:
	mul.lo.s32 	%r77, %r7213, %r1686;
	add.s32 	%r78, %r77, %r7212;
	shl.b32 	%r79, %r78, 6;
	@%p20 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1761, %r73, %r7213;
	mul.lo.s32 	%r1762, %r1761, %r40;
	add.s32 	%r1763, %r1762, %r71;
	mul.wide.s32 	%rd55, %r1763, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f41, [%rd56];
	add.s32 	%r1764, %r1762, %r72;
	mul.wide.s32 	%rd57, %r1764, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f42, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r7214, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r7214, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r83, %r78, 5;
	add.s32 	%r1765, %r83, %r28;
	shl.b32 	%r1766, %r1765, 2;
	add.s32 	%r1767, %r61, %r1766;
	mul.wide.s32 	%rd59, %r1767, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r7214;
	@%p20 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1770, %r74, %r7213;
	mul.lo.s32 	%r1771, %r1770, %r40;
	add.s32 	%r1772, %r1771, %r71;
	mul.wide.s32 	%rd61, %r1772, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f45, [%rd62];
	add.s32 	%r1773, %r1771, %r72;
	mul.wide.s32 	%rd63, %r1773, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f46, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r7215, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r7215, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1774, %r65, %r79;
	mul.wide.s32 	%rd65, %r1774, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r7215;
	@%p20 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1777, %r75, %r7213;
	mul.lo.s32 	%r1778, %r1777, %r40;
	add.s32 	%r1779, %r1778, %r71;
	mul.wide.s32 	%rd67, %r1779, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f49, [%rd68];
	add.s32 	%r1780, %r1778, %r72;
	mul.wide.s32 	%rd69, %r1780, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f50, [%rd70];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r7216, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7216, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1781, %r70, %r1686;
	add.s32 	%r1782, %r1781, %r77;
	shl.b32 	%r90, %r1782, 5;
	add.s32 	%r1783, %r90, %r28;
	shl.b32 	%r1784, %r1783, 2;
	add.s32 	%r1785, %r61, %r1784;
	add.s32 	%r1786, %r1785, 2;
	mul.wide.s32 	%rd71, %r1786, 4;
	add.s64 	%rd72, %rd6, %rd71;
	st.global.u32 	[%rd72], %r7216;
	@%p20 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1793, %r73, %r7213;
	mul.lo.s32 	%r1794, %r1793, %r40;
	add.s32 	%r1795, %r1794, %r91;
	mul.wide.s32 	%rd73, %r1795, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f53, [%rd74];
	add.s32 	%r1796, %r1794, %r92;
	mul.wide.s32 	%rd75, %r1796, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f54, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7217, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7217, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1797, %r83, %r68;
	shl.b32 	%r1798, %r1797, 2;
	add.s32 	%r1799, %r67, %r1798;
	mul.wide.s32 	%rd77, %r1799, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r7217;
	@%p20 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1802, %r74, %r7213;
	mul.lo.s32 	%r1803, %r1802, %r40;
	add.s32 	%r1804, %r1803, %r91;
	mul.wide.s32 	%rd79, %r1804, 4;
	add.s64 	%rd80, %rd5, %rd79;
	ld.global.f32 	%f57, [%rd80];
	add.s32 	%r1805, %r1803, %r92;
	mul.wide.s32 	%rd81, %r1805, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f58, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7218, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r7218, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1806, %r66, %r79;
	mul.wide.s32 	%rd83, %r1806, 4;
	add.s64 	%rd84, %rd6, %rd83;
	st.global.u32 	[%rd84], %r7218;
	@%p20 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1809, %r75, %r7213;
	mul.lo.s32 	%r1810, %r1809, %r40;
	add.s32 	%r1811, %r1810, %r91;
	mul.wide.s32 	%rd85, %r1811, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f61, [%rd86];
	add.s32 	%r1812, %r1810, %r92;
	mul.wide.s32 	%rd87, %r1812, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f62, [%rd88];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7219, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7219, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1813, %r90, %r68;
	shl.b32 	%r1814, %r1813, 2;
	add.s32 	%r1815, %r67, %r1814;
	add.s32 	%r1816, %r1815, 2;
	mul.wide.s32 	%rd89, %r1816, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r7219;
	add.s32 	%r7213, %r7213, %r1706;
	setp.lt.s32 	%p28, %r7213, %r1687;
	@%p28 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r7212, %r7212, %r1701;
	setp.lt.s32 	%p29, %r7212, %r1686;
	@%p29 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd91, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd91;
	ld.param.u64 	%rd92, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd92;
	@%p19 bra 	$L__BB0_120;

	shl.b32 	%r104, %r58, 1;
	mov.u64 	%rd93, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7220, %r7253;

$L__BB0_38:
	setp.ge.s32 	%p31, %r104, %r1687;
	@%p31 bra 	$L__BB0_119;

	mov.u32 	%r7221, %r104;

$L__BB0_40:
	setp.ne.s32 	%p32, %r28, 0;
	@%p32 bra 	$L__BB0_118;

	shr.u32 	%r1818, %r7221, 31;
	add.s32 	%r1819, %r7221, %r1818;
	shr.s32 	%r1820, %r1819, 1;
	mad.lo.s32 	%r1821, %r1820, %r1686, %r7220;
	shl.b32 	%r108, %r1821, 5;
	add.s32 	%r109, %r7221, -2;
	mul.lo.s32 	%r110, %r109, %r1686;
	add.s32 	%r1822, %r1687, %r109;
	mul.lo.s32 	%r111, %r1822, %r1686;
	add.s32 	%r1823, %r1822, %r1687;
	mul.lo.s32 	%r112, %r1823, %r1686;
	add.s32 	%r113, %r110, %r1686;
	add.s32 	%r114, %r7221, -1;
	add.s32 	%r1824, %r1687, %r114;
	mul.lo.s32 	%r115, %r1824, %r1686;
	add.s32 	%r1825, %r1824, %r1687;
	mul.lo.s32 	%r116, %r1825, %r1686;
	add.s32 	%r1826, %r1687, %r7221;
	mul.lo.s32 	%r117, %r1826, %r1686;
	add.s32 	%r1827, %r1826, %r1687;
	mul.lo.s32 	%r118, %r1827, %r1686;
	mul.lo.s32 	%r119, %r7221, %r1686;
	add.s32 	%r120, %r119, %r1686;
	add.s32 	%r121, %r7221, 1;
	add.s32 	%r1828, %r1687, %r121;
	mul.lo.s32 	%r122, %r1828, %r1686;
	add.s32 	%r1829, %r1828, %r1687;
	mul.lo.s32 	%r123, %r1829, %r1686;
	add.s32 	%r124, %r120, %r1686;
	add.s32 	%r125, %r7221, 2;
	add.s32 	%r1830, %r1687, %r125;
	mul.lo.s32 	%r126, %r1830, %r1686;
	add.s32 	%r1831, %r1830, %r1687;
	mul.lo.s32 	%r127, %r1831, %r1686;
	mov.u32 	%r7224, 0;
	mov.u64 	%rd561, %rd93;

$L__BB0_42:
	ld.global.nc.u32 	%r1832, [%rd561];
	cvt.rn.f64.s32 	%fd1, %r1832;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r129, %r1832, %r7220;
	setp.lt.s32 	%p33, %r129, %r1686;
	or.b32  	%r1833, %r109, %r129;
	setp.gt.s32 	%p34, %r1833, -1;
	and.pred  	%p35, %p33, %p34;
	setp.lt.s32 	%p36, %r109, %r1687;
	and.pred  	%p1, %p36, %p35;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p37, %f65, 0f40000000;
	@%p37 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1836, %r110, %r129;
	mul.wide.s32 	%rd94, %r1836, 4;
	add.s64 	%rd95, %rd7, %rd94;
	ld.global.f32 	%f68, [%rd95];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r7223, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7223, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1837, %r7224, %r108;
	mul.wide.s32 	%rd96, %r1837, 4;
	add.s64 	%rd97, %rd8, %rd96;
	st.global.u32 	[%rd97], %r7223;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p38, %f3, 0f40000000;
	@%p38 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1840, %r111, %r129;
	mul.wide.s32 	%rd98, %r1840, 4;
	add.s64 	%rd99, %rd7, %rd98;
	ld.global.f32 	%f73, [%rd99];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r7225, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7225, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1841, %r7224, %r108;
	mul.wide.s32 	%rd100, %r1841, 4;
	add.s64 	%rd101, %rd8, %rd100;
	st.global.u32 	[%rd101], %r7225;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p39, %f74, 0f40000000;
	@%p39 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1844, %r112, %r129;
	mul.wide.s32 	%rd102, %r1844, 4;
	add.s64 	%rd103, %rd7, %rd102;
	ld.global.f32 	%f77, [%rd103];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r7227, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r7227, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1845, %r7224, %r108;
	mul.wide.s32 	%rd104, %r1845, 4;
	add.s64 	%rd105, %rd8, %rd104;
	st.global.u32 	[%rd105], %r7227;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_57:
	or.b32  	%r1846, %r114, %r129;
	setp.gt.s32 	%p40, %r1846, -1;
	and.pred  	%p42, %p33, %p40;
	setp.le.s32 	%p43, %r7221, %r1687;
	and.pred  	%p2, %p43, %p42;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p44, %f4, 0f40000000;
	@%p44 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1849, %r113, %r129;
	mul.wide.s32 	%rd106, %r1849, 4;
	add.s64 	%rd107, %rd7, %rd106;
	ld.global.f32 	%f80, [%rd107];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7229, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7229, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1850, %r7224, %r108;
	mul.wide.s32 	%rd108, %r1850, 4;
	add.s64 	%rd109, %rd8, %rd108;
	st.global.u32 	[%rd109], %r7229;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p45, %f5, 0f40000000;
	@%p45 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1853, %r115, %r129;
	mul.wide.s32 	%rd110, %r1853, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f83, [%rd111];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r7231, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r7231, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1854, %r7224, %r108;
	mul.wide.s32 	%rd112, %r1854, 4;
	add.s64 	%rd113, %rd8, %rd112;
	st.global.u32 	[%rd113], %r7231;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p46, %f6, 0f40000000;
	@%p46 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1857, %r116, %r129;
	mul.wide.s32 	%rd114, %r1857, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f86, [%rd115];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r7233, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r7233, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1858, %r7224, %r108;
	mul.wide.s32 	%rd116, %r1858, 4;
	add.s64 	%rd117, %rd8, %rd116;
	st.global.u32 	[%rd117], %r7233;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_72:
	or.b32  	%r1859, %r7221, %r129;
	setp.gt.s32 	%p47, %r1859, -1;
	and.pred  	%p49, %p33, %p47;
	setp.lt.s32 	%p50, %r7221, %r1687;
	and.pred  	%p3, %p50, %p49;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p51, %f7, 0f40000000;
	@%p51 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1862, %r119, %r129;
	mul.wide.s32 	%rd118, %r1862, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f89, [%rd119];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7235, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7235, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1863, %r7224, %r108;
	mul.wide.s32 	%rd120, %r1863, 4;
	add.s64 	%rd121, %rd8, %rd120;
	st.global.u32 	[%rd121], %r7235;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p52, %f90, 0f40000000;
	@%p52 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1866, %r117, %r129;
	mul.wide.s32 	%rd122, %r1866, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f93, [%rd123];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7237, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7237, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1867, %r7224, %r108;
	mul.wide.s32 	%rd124, %r1867, 4;
	add.s64 	%rd125, %rd8, %rd124;
	st.global.u32 	[%rd125], %r7237;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p53, %f8, 0f40000000;
	@%p53 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1870, %r118, %r129;
	mul.wide.s32 	%rd126, %r1870, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f96, [%rd127];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r7239, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r7239, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1871, %r7224, %r108;
	mul.wide.s32 	%rd128, %r1871, 4;
	add.s64 	%rd129, %rd8, %rd128;
	st.global.u32 	[%rd129], %r7239;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_87:
	or.b32  	%r1872, %r121, %r129;
	setp.gt.s32 	%p54, %r1872, -1;
	and.pred  	%p56, %p33, %p54;
	setp.lt.s32 	%p57, %r121, %r1687;
	and.pred  	%p4, %p57, %p56;
	@%p51 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1875, %r120, %r129;
	mul.wide.s32 	%rd130, %r1875, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f99, [%rd131];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r7241, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r7241, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1876, %r7224, %r108;
	mul.wide.s32 	%rd132, %r1876, 4;
	add.s64 	%rd133, %rd8, %rd132;
	st.global.u32 	[%rd133], %r7241;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_92:
	@%p45 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1879, %r122, %r129;
	mul.wide.s32 	%rd134, %r1879, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f102, [%rd135];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7243, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7243, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1880, %r7224, %r108;
	mul.wide.s32 	%rd136, %r1880, 4;
	add.s64 	%rd137, %rd8, %rd136;
	st.global.u32 	[%rd137], %r7243;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_97:
	@%p53 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1883, %r123, %r129;
	mul.wide.s32 	%rd138, %r1883, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f105, [%rd139];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7245, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7245, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1884, %r7224, %r108;
	mul.wide.s32 	%rd140, %r1884, 4;
	add.s64 	%rd141, %rd8, %rd140;
	st.global.u32 	[%rd141], %r7245;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_102:
	or.b32  	%r1885, %r125, %r129;
	setp.gt.s32 	%p61, %r1885, -1;
	and.pred  	%p63, %p33, %p61;
	setp.lt.s32 	%p64, %r125, %r1687;
	and.pred  	%p5, %p64, %p63;
	@%p44 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1888, %r124, %r129;
	mul.wide.s32 	%rd142, %r1888, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f108, [%rd143];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7247, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7247, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1889, %r7224, %r108;
	mul.wide.s32 	%rd144, %r1889, 4;
	add.s64 	%rd145, %rd8, %rd144;
	st.global.u32 	[%rd145], %r7247;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_107:
	@%p38 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1892, %r126, %r129;
	mul.wide.s32 	%rd146, %r1892, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f111, [%rd147];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7249, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7249, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1893, %r7224, %r108;
	mul.wide.s32 	%rd148, %r1893, 4;
	add.s64 	%rd149, %rd8, %rd148;
	st.global.u32 	[%rd149], %r7249;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_112:
	@%p46 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1896, %r127, %r129;
	mul.wide.s32 	%rd150, %r1896, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f114, [%rd151];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7251, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7251, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1897, %r7224, %r108;
	mul.wide.s32 	%rd152, %r1897, 4;
	add.s64 	%rd153, %rd8, %rd152;
	st.global.u32 	[%rd153], %r7251;
	add.s32 	%r7224, %r7224, 1;

$L__BB0_117:
	add.s64 	%rd561, %rd561, 4;
	mov.u64 	%rd154, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd155, %rd154, 24;
	setp.ne.s64 	%p68, %rd561, %rd155;
	@%p68 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r7221, %r7221, %r30;
	setp.lt.s32 	%p69, %r7221, %r1687;
	@%p69 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r7220, %r7220, %r1701;
	setp.lt.s32 	%p70, %r7220, %r1686;
	@%p70 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p71, %r1690, 1;
	ld.param.u64 	%rd156, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd156;
	ld.param.u64 	%rd157, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd157;
	@%p71 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p19 bra 	$L__BB0_267;

	shl.b32 	%r232, %r58, 1;
	shr.u32 	%r1943, %r1691, 31;
	add.s32 	%r1944, %r1691, %r1943;
	shr.u32 	%r1945, %r1944, 1;
	and.b32  	%r233, %r1945, 1;
	mov.u64 	%rd177, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p81, %r232, %r1687;
	@%p81 bra 	$L__BB0_266;

	mov.u32 	%r7259, %r232;

$L__BB0_142:
	setp.ne.s32 	%p82, %r28, 0;
	@%p82 bra 	$L__BB0_265;

	shr.u32 	%r1947, %r7259, 31;
	add.s32 	%r1948, %r7259, %r1947;
	shr.s32 	%r1949, %r1948, 1;
	mad.lo.s32 	%r1950, %r1949, %r1686, %r7253;
	shl.b32 	%r237, %r1950, 5;
	add.s32 	%r238, %r7259, -2;
	mul.lo.s32 	%r239, %r238, %r1686;
	add.s32 	%r1951, %r1687, %r238;
	mul.lo.s32 	%r240, %r1951, %r1686;
	add.s32 	%r241, %r239, %r1686;
	add.s32 	%r242, %r7259, -1;
	add.s32 	%r1952, %r1687, %r242;
	mul.lo.s32 	%r243, %r1952, %r1686;
	add.s32 	%r1953, %r1687, %r7259;
	mul.lo.s32 	%r244, %r1953, %r1686;
	mul.lo.s32 	%r245, %r7259, %r1686;
	add.s32 	%r246, %r245, %r1686;
	add.s32 	%r247, %r7259, 1;
	add.s32 	%r1954, %r1687, %r247;
	mul.lo.s32 	%r248, %r1954, %r1686;
	add.s32 	%r249, %r246, %r1686;
	add.s32 	%r250, %r7259, 2;
	add.s32 	%r1955, %r1687, %r250;
	mul.lo.s32 	%r251, %r1955, %r1686;
	mov.u32 	%r7263, 0;
	mov.u64 	%rd562, 24;
	mov.u64 	%rd563, %rd177;

$L__BB0_144:
	ld.global.nc.u32 	%r1956, [%rd563];
	cvt.rn.f64.s32 	%fd2, %r1956;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r253, %r1956, %r7253;
	setp.lt.s32 	%p83, %r253, %r1686;
	or.b32  	%r1957, %r238, %r253;
	setp.gt.s32 	%p84, %r1957, -1;
	and.pred  	%p85, %p83, %p84;
	setp.lt.s32 	%p86, %r238, %r1687;
	and.pred  	%p6, %p86, %p85;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p87, %f133, 0f40000000;
	@%p87 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p88, %r233, 0;
	add.s32 	%r1959, %r239, %r253;
	shl.b32 	%r1960, %r1959, 1;
	mul.wide.s32 	%rd178, %r1960, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f10, [%rd179];
	@%p88 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7261, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7261, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r258, %r7263, %r237;
	mul.wide.s32 	%rd180, %r258, 4;
	add.s64 	%rd181, %rd12, %rd180;
	st.global.u32 	[%rd181], %r7261;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p89, %r233, 0;
	add.s32 	%r1964, %r240, %r253;
	shl.b32 	%r1965, %r1964, 1;
	mul.wide.s32 	%rd182, %r1965, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f11, [%rd183];
	@%p89 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7262, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7262, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1968, %r258, 1;
	mul.wide.s32 	%rd184, %r1968, 4;
	add.s64 	%rd185, %rd12, %rd184;
	st.global.u32 	[%rd185], %r7262;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p90, %f13, 0f40000000;
	@%p90 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p91, %r233, 0;
	add.s32 	%r1970, %r239, %r253;
	shl.b32 	%r1971, %r1970, 1;
	or.b32  	%r1972, %r1971, 1;
	mul.wide.s32 	%rd186, %r1972, 4;
	add.s64 	%rd187, %rd11, %rd186;
	ld.global.f32 	%f14, [%rd187];
	@%p91 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7264, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7264, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r269, %r7263, %r237;
	mul.wide.s32 	%rd188, %r269, 4;
	add.s64 	%rd189, %rd12, %rd188;
	st.global.u32 	[%rd189], %r7264;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p92, %r233, 0;
	add.s32 	%r1976, %r240, %r253;
	shl.b32 	%r1977, %r1976, 1;
	or.b32  	%r1978, %r1977, 1;
	mul.wide.s32 	%rd190, %r1978, 4;
	add.s64 	%rd191, %rd11, %rd190;
	ld.global.f32 	%f15, [%rd191];
	@%p92 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7265, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7265, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1981, %r269, 1;
	mul.wide.s32 	%rd192, %r1981, 4;
	add.s64 	%rd193, %rd12, %rd192;
	st.global.u32 	[%rd193], %r7265;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_168:
	or.b32  	%r1982, %r242, %r253;
	setp.gt.s32 	%p93, %r1982, -1;
	and.pred  	%p95, %p83, %p93;
	setp.le.s32 	%p96, %r7259, %r1687;
	and.pred  	%p7, %p96, %p95;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p97, %f16, 0f40000000;
	@%p97 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p98, %r233, 0;
	add.s32 	%r1984, %r241, %r253;
	shl.b32 	%r1985, %r1984, 1;
	mul.wide.s32 	%rd194, %r1985, 4;
	add.s64 	%rd195, %rd11, %rd194;
	ld.global.f32 	%f17, [%rd195];
	@%p98 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7267, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7267, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r280, %r7263, %r237;
	mul.wide.s32 	%rd196, %r280, 4;
	add.s64 	%rd197, %rd12, %rd196;
	st.global.u32 	[%rd197], %r7267;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p99, %r233, 0;
	add.s32 	%r1989, %r243, %r253;
	shl.b32 	%r1990, %r1989, 1;
	mul.wide.s32 	%rd198, %r1990, 4;
	add.s64 	%rd199, %rd11, %rd198;
	ld.global.f32 	%f18, [%rd199];
	@%p99 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7268, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7268, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1993, %r280, 1;
	mul.wide.s32 	%rd200, %r1993, 4;
	add.s64 	%rd201, %rd12, %rd200;
	st.global.u32 	[%rd201], %r7268;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p100, %f19, 0f40000000;
	@%p100 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p101, %r233, 0;
	add.s32 	%r1995, %r241, %r253;
	shl.b32 	%r1996, %r1995, 1;
	or.b32  	%r1997, %r1996, 1;
	mul.wide.s32 	%rd202, %r1997, 4;
	add.s64 	%rd203, %rd11, %rd202;
	ld.global.f32 	%f20, [%rd203];
	@%p101 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7270, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7270, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7270, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r291, %r7263, %r237;
	mul.wide.s32 	%rd204, %r291, 4;
	add.s64 	%rd205, %rd12, %rd204;
	st.global.u32 	[%rd205], %r7270;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p102, %r233, 0;
	add.s32 	%r2001, %r243, %r253;
	shl.b32 	%r2002, %r2001, 1;
	or.b32  	%r2003, %r2002, 1;
	mul.wide.s32 	%rd206, %r2003, 4;
	add.s64 	%rd207, %rd11, %rd206;
	ld.global.f32 	%f21, [%rd207];
	@%p102 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7271, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7271, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7271, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r2006, %r291, 1;
	mul.wide.s32 	%rd208, %r2006, 4;
	add.s64 	%rd209, %rd12, %rd208;
	st.global.u32 	[%rd209], %r7271;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_192:
	or.b32  	%r2007, %r7259, %r253;
	setp.gt.s32 	%p103, %r2007, -1;
	and.pred  	%p105, %p83, %p103;
	setp.lt.s32 	%p106, %r7259, %r1687;
	and.pred  	%p8, %p106, %p105;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p107, %f22, 0f40000000;
	@%p107 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p108, %r233, 0;
	add.s32 	%r2009, %r245, %r253;
	shl.b32 	%r2010, %r2009, 1;
	mul.wide.s32 	%rd210, %r2010, 4;
	add.s64 	%rd211, %rd11, %rd210;
	ld.global.f32 	%f23, [%rd211];
	@%p108 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7273, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7273, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7273, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r302, %r7263, %r237;
	mul.wide.s32 	%rd212, %r302, 4;
	add.s64 	%rd213, %rd12, %rd212;
	st.global.u32 	[%rd213], %r7273;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p109, %r233, 0;
	add.s32 	%r2014, %r244, %r253;
	shl.b32 	%r2015, %r2014, 1;
	mul.wide.s32 	%rd214, %r2015, 4;
	add.s64 	%rd215, %rd11, %rd214;
	ld.global.f32 	%f24, [%rd215];
	@%p109 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7274, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7274, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7274, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r2018, %r302, 1;
	mul.wide.s32 	%rd216, %r2018, 4;
	add.s64 	%rd217, %rd12, %rd216;
	st.global.u32 	[%rd217], %r7274;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p110, %f196, 0f40000000;
	@%p110 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p111, %r233, 0;
	add.s32 	%r2020, %r245, %r253;
	shl.b32 	%r2021, %r2020, 1;
	or.b32  	%r2022, %r2021, 1;
	mul.wide.s32 	%rd218, %r2022, 4;
	add.s64 	%rd219, %rd11, %rd218;
	ld.global.f32 	%f25, [%rd219];
	@%p111 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7276, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7276, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7276, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r313, %r7263, %r237;
	mul.wide.s32 	%rd220, %r313, 4;
	add.s64 	%rd221, %rd12, %rd220;
	st.global.u32 	[%rd221], %r7276;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p112, %r233, 0;
	add.s32 	%r2026, %r244, %r253;
	shl.b32 	%r2027, %r2026, 1;
	or.b32  	%r2028, %r2027, 1;
	mul.wide.s32 	%rd222, %r2028, 4;
	add.s64 	%rd223, %rd11, %rd222;
	ld.global.f32 	%f26, [%rd223];
	@%p112 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7277, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7277, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r2031, %r313, 1;
	mul.wide.s32 	%rd224, %r2031, 4;
	add.s64 	%rd225, %rd12, %rd224;
	st.global.u32 	[%rd225], %r7277;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_216:
	or.b32  	%r2032, %r247, %r253;
	setp.gt.s32 	%p113, %r2032, -1;
	and.pred  	%p115, %p83, %p113;
	setp.lt.s32 	%p116, %r247, %r1687;
	and.pred  	%p9, %p116, %p115;
	@%p107 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p118, %r233, 0;
	add.s32 	%r2034, %r246, %r253;
	shl.b32 	%r2035, %r2034, 1;
	mul.wide.s32 	%rd226, %r2035, 4;
	add.s64 	%rd227, %rd11, %rd226;
	ld.global.f32 	%f27, [%rd227];
	@%p118 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7279, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7279, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7279, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r324, %r7263, %r237;
	mul.wide.s32 	%rd228, %r324, 4;
	add.s64 	%rd229, %rd12, %rd228;
	st.global.u32 	[%rd229], %r7279;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p119, %r233, 0;
	add.s32 	%r2039, %r248, %r253;
	shl.b32 	%r2040, %r2039, 1;
	mul.wide.s32 	%rd230, %r2040, 4;
	add.s64 	%rd231, %rd11, %rd230;
	ld.global.f32 	%f28, [%rd231];
	@%p119 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7280, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7280, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r2043, %r324, 1;
	mul.wide.s32 	%rd232, %r2043, 4;
	add.s64 	%rd233, %rd12, %rd232;
	st.global.u32 	[%rd233], %r7280;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_228:
	@%p100 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p121, %r233, 0;
	add.s32 	%r2045, %r246, %r253;
	shl.b32 	%r2046, %r2045, 1;
	or.b32  	%r2047, %r2046, 1;
	mul.wide.s32 	%rd234, %r2047, 4;
	add.s64 	%rd235, %rd11, %rd234;
	ld.global.f32 	%f29, [%rd235];
	@%p121 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7282, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7282, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r335, %r7263, %r237;
	mul.wide.s32 	%rd236, %r335, 4;
	add.s64 	%rd237, %rd12, %rd236;
	st.global.u32 	[%rd237], %r7282;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p122, %r233, 0;
	add.s32 	%r2051, %r248, %r253;
	shl.b32 	%r2052, %r2051, 1;
	or.b32  	%r2053, %r2052, 1;
	mul.wide.s32 	%rd238, %r2053, 4;
	add.s64 	%rd239, %rd11, %rd238;
	ld.global.f32 	%f30, [%rd239];
	@%p122 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7283, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7283, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r2056, %r335, 1;
	mul.wide.s32 	%rd240, %r2056, 4;
	add.s64 	%rd241, %rd12, %rd240;
	st.global.u32 	[%rd241], %r7283;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_240:
	or.b32  	%r2057, %r250, %r253;
	setp.gt.s32 	%p123, %r2057, -1;
	and.pred  	%p125, %p83, %p123;
	setp.lt.s32 	%p126, %r250, %r1687;
	and.pred  	%p10, %p126, %p125;
	@%p97 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p128, %r233, 0;
	add.s32 	%r2059, %r249, %r253;
	shl.b32 	%r2060, %r2059, 1;
	mul.wide.s32 	%rd242, %r2060, 4;
	add.s64 	%rd243, %rd11, %rd242;
	ld.global.f32 	%f31, [%rd243];
	@%p128 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7285, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7285, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r346, %r7263, %r237;
	mul.wide.s32 	%rd244, %r346, 4;
	add.s64 	%rd245, %rd12, %rd244;
	st.global.u32 	[%rd245], %r7285;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p129, %r233, 0;
	add.s32 	%r2064, %r251, %r253;
	shl.b32 	%r2065, %r2064, 1;
	mul.wide.s32 	%rd246, %r2065, 4;
	add.s64 	%rd247, %rd11, %rd246;
	ld.global.f32 	%f32, [%rd247];
	@%p129 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7286, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7286, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r2068, %r346, 1;
	mul.wide.s32 	%rd248, %r2068, 4;
	add.s64 	%rd249, %rd12, %rd248;
	st.global.u32 	[%rd249], %r7286;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_252:
	@%p90 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p131, %r233, 0;
	add.s32 	%r2070, %r249, %r253;
	shl.b32 	%r2071, %r2070, 1;
	or.b32  	%r2072, %r2071, 1;
	mul.wide.s32 	%rd250, %r2072, 4;
	add.s64 	%rd251, %rd11, %rd250;
	ld.global.f32 	%f33, [%rd251];
	@%p131 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7288, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7288, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r357, %r7263, %r237;
	mul.wide.s32 	%rd252, %r357, 4;
	add.s64 	%rd253, %rd12, %rd252;
	st.global.u32 	[%rd253], %r7288;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p132, %r233, 0;
	add.s32 	%r2076, %r251, %r253;
	shl.b32 	%r2077, %r2076, 1;
	or.b32  	%r2078, %r2077, 1;
	mul.wide.s32 	%rd254, %r2078, 4;
	add.s64 	%rd255, %rd11, %rd254;
	ld.global.f32 	%f34, [%rd255];
	@%p132 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7289, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7289, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r2081, %r357, 1;
	mul.wide.s32 	%rd256, %r2081, 4;
	add.s64 	%rd257, %rd12, %rd256;
	st.global.u32 	[%rd257], %r7289;
	add.s32 	%r7263, %r7263, 2;

$L__BB0_264:
	add.s64 	%rd563, %rd563, 4;
	add.s64 	%rd562, %rd562, -4;
	setp.ne.s64 	%p133, %rd562, 0;
	@%p133 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r7259, %r7259, %r30;
	setp.lt.s32 	%p134, %r7259, %r1687;
	@%p134 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r7253, %r7253, %r1701;
	setp.lt.s32 	%p135, %r7253, %r1686;
	@%p135 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p19 bra 	$L__BB0_267;

	neg.s32 	%r207, %r57;
	mov.u32 	%r1898, 31;
	sub.s32 	%r1899, %r1898, %r28;
	setp.gt.s32 	%p73, %r27, %r28;
	selp.b32 	%r1900, %r28, %r1899, %p73;
	shl.b32 	%r1901, %r1900, 2;
	mov.u32 	%r1902, 2;
	sub.s32 	%r208, %r1901, %r1689;
	sub.s32 	%r1903, %r1902, %r1689;
	add.s32 	%r209, %r1903, %r1901;
	add.s32 	%r210, %r1686, -1;
	add.s32 	%r211, %r208, 1;
	add.s32 	%r212, %r209, 1;
	rem.s32 	%r1928, %r211, %r40;
	add.s32 	%r1929, %r1928, %r40;
	rem.s32 	%r223, %r1929, %r40;
	rem.s32 	%r1930, %r212, %r40;
	add.s32 	%r1931, %r1930, %r40;
	rem.s32 	%r224, %r1931, %r40;

$L__BB0_123:
	setp.ne.s32 	%p74, %r24, %r207;
	@%p74 bra 	$L__BB0_137;

	shl.b32 	%r214, %r7253, 1;
	rem.s32 	%r1904, %r208, %r40;
	add.s32 	%r1905, %r1904, %r40;
	rem.s32 	%r215, %r1905, %r40;
	rem.s32 	%r1906, %r209, %r40;
	add.s32 	%r1907, %r1906, %r40;
	rem.s32 	%r216, %r1907, %r40;
	@%p73 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1910, %r214, %r40;
	add.s32 	%r1911, %r1910, %r215;
	mul.wide.s32 	%rd158, %r1911, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f117, [%rd159];
	add.s32 	%r1912, %r1910, %r216;
	mul.wide.s32 	%rd160, %r1912, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f118, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r7254, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7254, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1913, %r7253, 5;
	add.s32 	%r1914, %r1913, %r28;
	shl.b32 	%r1915, %r1914, 2;
	mul.wide.s32 	%rd162, %r1915, 4;
	add.s64 	%rd13, %rd12, %rd162;
	st.global.u32 	[%rd13], %r7254;
	@%p73 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1918, %r214, 1;
	mul.lo.s32 	%r1919, %r1918, %r40;
	add.s32 	%r1920, %r1919, %r215;
	mul.wide.s32 	%rd163, %r1920, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f121, [%rd164];
	add.s32 	%r1921, %r1919, %r216;
	mul.wide.s32 	%rd165, %r1921, 4;
	add.s64 	%rd166, %rd11, %rd165;
	ld.global.f32 	%f122, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7255, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7255, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1922, %r210, %r7253;
	rem.s32 	%r1923, %r1922, %r1686;
	shl.b32 	%r1924, %r1923, 5;
	add.s32 	%r1925, %r1924, %r28;
	shl.b32 	%r1926, %r1925, 2;
	or.b32  	%r1927, %r1926, 2;
	mul.wide.s32 	%rd167, %r1927, 4;
	add.s64 	%rd14, %rd12, %rd167;
	st.global.u32 	[%rd14], %r7255;
	@%p73 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1934, %r214, %r40;
	add.s32 	%r1935, %r1934, %r223;
	mul.wide.s32 	%rd168, %r1935, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f125, [%rd169];
	add.s32 	%r1936, %r1934, %r224;
	mul.wide.s32 	%rd170, %r1936, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f126, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7256, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r7256, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r7256;
	@%p73 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1939, %r214, 1;
	mul.lo.s32 	%r1940, %r1939, %r40;
	add.s32 	%r1941, %r1940, %r223;
	mul.wide.s32 	%rd172, %r1941, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f129, [%rd173];
	add.s32 	%r1942, %r1940, %r224;
	mul.wide.s32 	%rd174, %r1942, 4;
	add.s64 	%rd175, %rd11, %rd174;
	ld.global.f32 	%f130, [%rd175];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7257, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7257, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r7257;

$L__BB0_137:
	add.s32 	%r7253, %r7253, %r1701;
	setp.lt.s32 	%p79, %r7253, %r1686;
	@%p79 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r2083, %r1681, -1;
	mad.lo.s32 	%r2084, %r1682, 576, 128;
	mul.lo.s32 	%r2085, %r2084, %r2083;
	add.s32 	%r2086, %r52, -64;
	add.s32 	%r2087, %r2086, %r52;
	add.s32 	%r2088, %r1682, -1;
	mad.lo.s32 	%r2089, %r2087, %r2088, %r2085;
	mul.lo.s32 	%r2090, %r2083, %r1682;
	mul.lo.s32 	%r2091, %r2090, 320;
	mad.lo.s32 	%r2092, %r2086, %r2088, %r2091;
	add.s32 	%r366, %r2092, %r2089;
	setp.lt.s32 	%p136, %r366, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	@%p136 bra 	$L__BB0_270;

	mov.u32 	%r7293, 0;
	mov.u32 	%r7291, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r7291], %r7472;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2095, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7291+4], %r2095;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2096, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7291+8], %r2096;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r2097, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7291+12], %r2097;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	add.s32 	%r7291, %r7291, 16;
	add.s32 	%r7293, %r7293, 4;
	setp.lt.s32 	%p137, %r7293, %r366;
	@%p137 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7473, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r2100, {low,high};}

	// end inline asm
	ld.param.u64 	%rd258, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd258;
	mov.u32 	%r2101, 31;
	sub.s32 	%r2102, %r2101, %r28;
	setp.gt.s32 	%p138, %r27, %r28;
	selp.b32 	%r2103, %r28, %r2102, %p138;
	shl.b32 	%r2104, %r2103, 2;
	sub.s32 	%r377, %r2104, %r1689;
	rem.s32 	%r2105, %r377, %r40;
	add.s32 	%r2106, %r2105, %r40;
	rem.s32 	%r378, %r2106, %r40;
	add.s32 	%r2107, %r377, 2;
	rem.s32 	%r2108, %r2107, %r40;
	add.s32 	%r2109, %r2108, %r40;
	rem.s32 	%r379, %r2109, %r40;
	mul.lo.s32 	%r2110, %r378, 6;
	mul.lo.s32 	%r2111, %r379, 6;
	mul.wide.s32 	%rd259, %r2110, 4;
	add.s64 	%rd20, %rd19, %rd259;
	mul.wide.s32 	%rd260, %r2111, 4;
	add.s64 	%rd21, %rd19, %rd260;
	@%p12 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7295, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r7295, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p12 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r7296, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r7296, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p12 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7297, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7297, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p12 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7298, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7298, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r2120, %r377, 1;
	rem.s32 	%r2121, %r2120, %r40;
	add.s32 	%r2122, %r2121, %r40;
	rem.s32 	%r392, %r2122, %r40;
	add.s32 	%r2123, %r377, 3;
	rem.s32 	%r2124, %r2123, %r40;
	add.s32 	%r2125, %r2124, %r40;
	rem.s32 	%r393, %r2125, %r40;
	mul.lo.s32 	%r2126, %r392, 6;
	mul.lo.s32 	%r2127, %r393, 6;
	mul.wide.s32 	%rd261, %r2126, 4;
	add.s64 	%rd22, %rd19, %rd261;
	mul.wide.s32 	%rd262, %r2127, 4;
	add.s64 	%rd23, %rd19, %rd262;
	@%p12 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7299, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7299, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p12 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7300, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7300, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p12 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7301, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7301, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p12 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7302, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7302, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r2136, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd263, %r2136;
	// begin inline asm
	mov.u32 %r2137, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd264, %r2137;
	bfi.b64 	%rd24, %rd264, %rd263, 32, 32;
	setp.ne.s64 	%p147, %rd24, 0;
	@%p147 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2138, %nctaid.y;
	mov.u32 	%r2139, %nctaid.x;
	mul.lo.s32 	%r2140, %r2139, %r2138;
	mov.u32 	%r2141, %nctaid.z;
	mul.lo.s32 	%r406, %r2140, %r2141;
	neg.s32 	%r2142, %r24;
	add.s32 	%r2143, %r28, %r23;
	setp.ne.s32 	%p148, %r2143, %r2142;
	mov.u32 	%r2144, %ctaid.x;
	add.s32 	%r407, %r2144, %r25;
	neg.s32 	%r408, %r26;
	bar.sync 	0;
	@%p148 bra 	$L__BB0_300;

	setp.eq.s32 	%p149, %r407, %r408;
	mov.u32 	%r2147, -2147483647;
	sub.s32 	%r2148, %r2147, %r406;
	selp.b32 	%r2146, %r2148, 1, %p149;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2145,[%rd25],%r2146;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r2149, [%rd25];
	xor.b32  	%r2150, %r2149, %r2145;
	setp.gt.s32 	%p150, %r2150, -1;
	@%p150 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r2151,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p151, %r31, 1;
	@%p151 bra 	$L__BB0_672;

	shr.s32 	%r2165, %r1691, 31;
	shr.u32 	%r2166, %r2165, 30;
	add.s32 	%r2167, %r1691, %r2166;
	shr.s32 	%r410, %r2167, 2;
	add.s32 	%r2168, %r28, 31;
	shr.s32 	%r2169, %r2168, 31;
	shr.u32 	%r2170, %r2169, 27;
	add.s32 	%r2171, %r2168, %r2170;
	and.b32  	%r2172, %r2171, -32;
	sub.s32 	%r2173, %r2168, %r2172;
	add.s32 	%r2174, %r28, 33;
	shr.s32 	%r2175, %r2174, 31;
	shr.u32 	%r2176, %r2175, 27;
	add.s32 	%r2177, %r2174, %r2176;
	and.b32  	%r2178, %r2177, -32;
	sub.s32 	%r2179, %r2174, %r2178;
	shr.u32 	%r2180, %r1691, 31;
	add.s32 	%r2181, %r1691, %r2180;
	and.b32  	%r2182, %r2181, -2;
	sub.s32 	%r411, %r1691, %r2182;
	setp.lt.s32 	%p152, %r28, 32;
	selp.b32 	%r412, %r2173, %r28, %p152;
	selp.b32 	%r413, %r2179, %r28, %p152;
	mov.u32 	%r2164, 0;
	// begin inline asm
	{mov.u32 %r2183, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2509, %r2183, 8;
	add.s32 	%r2510, %r2509, -8192;
	or.b32  	%r2187, %r2510, 31;
	mul.wide.s32 	%rd275, %r28, 16;
	mul.wide.s32 	%rd277, %r28, 8;
	mov.u32 	%r7303, %r2164;
	mov.u32 	%r7304, %r2164;
	mov.u32 	%r7305, %r2164;
	mov.u32 	%r7306, %r2164;
	mov.u32 	%r7307, %r2164;
	mov.u32 	%r7308, %r2164;
	mov.u32 	%r7309, %r2164;
	mov.u32 	%r7310, %r2164;
	mov.u32 	%r7311, %r2164;
	mov.u32 	%r7312, %r2164;
	mov.u32 	%r7313, %r2164;
	mov.u32 	%r7314, %r2164;
	mov.u32 	%r7602, %r2100;
	mov.u32 	%r7603, %r2100;
	mov.u32 	%r7600, %r2100;
	mov.u32 	%r7601, %r2100;
	mov.u32 	%r7622, %r2100;
	mov.u32 	%r7623, %r2100;
	mov.u32 	%r7636, %r2100;
	mov.u32 	%r7624, %r2100;
	mov.u32 	%r7638, %r2100;
	mov.u32 	%r7625, %r2100;
	mov.u32 	%r7626, %r2100;
	mov.u32 	%r7627, %r2100;
	mov.u32 	%r7628, %r2100;
	mov.u32 	%r7629, %r2100;
	mov.u32 	%r7630, %r2100;
	mov.u32 	%r7631, %r2100;
	mov.u32 	%r7640, %r2100;
	mov.u32 	%r7641, %r2100;
	mov.u32 	%r7642, %r2100;
	mov.u32 	%r7643, %r2100;
	mov.u32 	%r7644, %r2100;
	mov.u32 	%r7645, %r2100;
	mov.u32 	%r7632, %r2100;
	mov.u32 	%r7633, %r2100;
	mov.u32 	%r7646, %r2100;
	mov.u32 	%r7647, %r2100;
	mov.u32 	%r7634, %r2100;
	mov.u32 	%r7635, %r2100;
	mov.u32 	%r7604, %r2100;
	mov.u32 	%r7605, %r2100;
	mov.u32 	%r7592, %r2100;
	mov.u32 	%r7593, %r2100;
	mov.u32 	%r7594, %r2100;
	mov.u32 	%r7595, %r2100;
	mov.u32 	%r7606, %r2100;
	mov.u32 	%r7607, %r2100;
	mov.u32 	%r7608, %r2100;
	mov.u32 	%r7609, %r2100;
	mov.u32 	%r7610, %r2100;
	mov.u32 	%r7611, %r2100;
	mov.u32 	%r7596, %r2100;
	mov.u32 	%r7597, %r2100;
	mov.u32 	%r7598, %r2100;
	mov.u32 	%r7599, %r2100;
	mov.u32 	%r7612, %r2100;
	mov.u32 	%r7613, %r2100;
	mov.u32 	%r7614, %r2100;
	mov.u32 	%r7615, %r2100;
	mov.u32 	%r7363, %r2100;
	mov.u32 	%r7364, %r2100;
	mov.u32 	%r7662, %r2100;
	mov.u32 	%r7663, %r2100;
	mov.u32 	%r7369, %r2100;
	mov.u32 	%r7370, %r2100;
	mov.u32 	%r7371, %r2100;
	mov.u32 	%r7372, %r2100;
	mov.u32 	%r7664, %r2100;
	mov.u32 	%r7665, %r2100;
	mov.u32 	%r7375, %r2100;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7377, %r2100;
	mov.u32 	%r7378, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7380, %r2100;
	mov.u32 	%r7381, %r2100;
	mov.u32 	%r7382, %r2100;
	mov.u32 	%r7616, %r2100;
	mov.u32 	%r7617, %r2100;
	mov.u32 	%r7385, %r2100;
	mov.u32 	%r7386, %r2100;
	mov.u32 	%r7389, %r2100;
	mov.u32 	%r7390, %r2100;
	mov.u32 	%r7391, %r2100;
	mov.u32 	%r7392, %r2100;
	mov.u32 	%r7393, %r2100;
	mov.u32 	%r7671, %r2100;
	mov.u32 	%r7395, %r2100;
	mov.u32 	%r7396, %r2100;
	mov.u32 	%r7397, %r2100;
	mov.u32 	%r7398, %r2100;
	mov.u32 	%r7399, %r2100;
	mov.u32 	%r7400, %r2100;
	mov.u32 	%r7401, %r2100;
	mov.u32 	%r7673, %r2100;
	mov.u32 	%r7403, %r2100;
	mov.u32 	%r7404, %r2100;
	mov.u32 	%r7405, %r2100;
	mov.u32 	%r7674, %r2100;
	mov.u32 	%r7407, %r2100;
	mov.u32 	%r7408, %r2100;
	mov.u32 	%r7409, %r2100;
	mov.u32 	%r7410, %r2100;
	mov.u32 	%r7411, %r2100;
	mov.u32 	%r7412, %r2100;
	mov.u32 	%r7413, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7415, %r2100;
	mov.u32 	%r7618, %r2100;
	mov.u32 	%r7417, %r2100;
	mov.u32 	%r7418, %r2100;
	mov.u32 	%r7419, %r2100;
	mov.u32 	%r7420, %r2100;
	mov.u32 	%r7619, %r2100;
	mov.u32 	%r7422, %r2100;
	mov.u32 	%r7423, %r2100;
	mov.u32 	%r7424, %r2100;
	mov.u32 	%r7425, %r2100;
	mov.u32 	%r7426, %r2100;
	mov.u32 	%r7427, %r2100;
	mov.u32 	%r7428, %r2100;
	mov.u32 	%r7429, %r2100;
	mov.u32 	%r7430, %r2100;
	mov.u32 	%r7431, %r2100;
	mov.u32 	%r7432, %r2100;
	mov.u32 	%r7433, %r2100;
	mov.u32 	%r7434, %r2100;
	mov.u32 	%r7435, %r2100;
	mov.u32 	%r7436, %r2100;
	mov.u32 	%r7437, %r2100;
	mov.u32 	%r7438, %r2100;
	mov.u32 	%r7439, %r2100;
	mov.u32 	%r7440, %r2100;
	mov.u32 	%r7441, %r2100;
	mov.u32 	%r7442, %r2100;
	mov.u32 	%r7443, %r2100;
	mov.u32 	%r7444, %r2100;
	mov.u32 	%r7445, %r2100;
	mov.u32 	%r7446, %r2100;
	mov.u32 	%r7447, %r2100;
	mov.u32 	%r7448, %r2100;
	mov.u32 	%r7449, %r2100;
	mov.u32 	%r7450, %r2100;
	mov.u32 	%r7451, %r2100;
	mov.u32 	%r7452, %r2100;
	mov.u32 	%r7453, %r2100;
	mov.u32 	%r7454, %r2100;
	mov.u32 	%r7455, %r2100;
	mov.u32 	%r7456, %r2100;
	mov.u32 	%r7457, %r2100;
	mov.u32 	%r7458, %r2100;
	mov.u32 	%r7459, %r2100;
	mov.u32 	%r7460, %r2100;
	mov.u32 	%r7461, %r2100;
	mov.u32 	%r7462, %r2100;
	mov.u32 	%r7463, %r2100;
	mov.u32 	%r7464, %r2100;
	mov.u32 	%r7465, %r2100;
	mov.u32 	%r7466, %r2100;
	mov.u32 	%r7467, %r2100;
	mov.u32 	%r7468, %r2100;
	mov.u32 	%r7469, %r2100;
	mov.u32 	%r7470, %r2100;
	mov.u32 	%r7471, %r2164;

$L__BB0_302:
	mov.u32 	%r525, %r7675;
	mov.u32 	%r521, %r7410;
	mov.u32 	%r517, %r7674;
	mov.u32 	%r515, %r7404;
	mov.u32 	%r513, %r7673;
	mov.u32 	%r505, %r7671;
	mov.u32 	%r7410, %r7667;
	mov.u32 	%r487, %r7666;
	mov.u32 	%r7404, %r7665;
	mov.u32 	%r484, %r7664;
	mov.u32 	%r479, %r7663;
	mov.u32 	%r478, %r7662;
	sub.s32 	%r7204, %r1686, %r30;
	mov.u32 	%r2198, 1;
	not.b32 	%r2472, %r25;
	mov.u32 	%r2464, -1;
	add.s32 	%r2473, %r1683, %r2472;
	mul.lo.s32 	%r2474, %r2473, %r1685;
	add.s32 	%r2475, %r7471, %r2474;
	not.b32 	%r2477, %r26;
	add.s32 	%r2478, %r1684, %r2477;
	mul.lo.s32 	%r2479, %r2478, %r1685;
	add.s32 	%r2480, %r7471, %r2479;
	add.s32 	%r2481, %r2474, %r2479;
	add.s32 	%r2482, %r2481, %r1686;
	not.b32 	%r2483, %r23;
	add.s32 	%r2484, %r1681, %r2483;
	mad.lo.s32 	%r2485, %r2473, %r1681, %r2484;
	not.b32 	%r2486, %r24;
	add.s32 	%r2487, %r1682, %r2486;
	mad.lo.s32 	%r2488, %r2478, %r1682, %r2487;
	add.s32 	%r2489, %r2485, %r2488;
	shl.b32 	%r2490, %r2489, 1;
	add.s32 	%r2491, %r2482, %r2490;
	add.s32 	%r2492, %r7471, %r2491;
	add.s32 	%r2493, %r7471, %r2481;
	div.s32 	%r2494, %r2492, %r1686;
	neg.s32 	%r2495, %r1686;
	sub.s32 	%r2498, %r30, %r1686;
	sub.s32 	%r2499, %r2485, %r2488;
	shl.b32 	%r2500, %r2499, 1;
	add.s32 	%r2501, %r2500, %r1687;
	mad.lo.s32 	%r2502, %r2494, %r30, %r2501;
	mad.lo.s32 	%r2503, %r2494, %r2498, %r2493;
	div.s32 	%r2504, %r2502, %r1687;
	mul.lo.s32 	%r2505, %r2504, %r1687;
	sub.s32 	%r2508, %r1702, %r1687;
	mov.u32 	%r2282, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2184,%r7473,%r2164,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2190, %r7296, %r2184, %p12;
	// begin inline asm
	{mul.f16x2 %r7557,%r2190,%r7470;
}
	// end inline asm
	selp.b32 	%r2193, %r7300, %r2184, %p12;
	// begin inline asm
	{mul.f16x2 %r7555,%r2193,%r7469;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2196,%r7473,%r2198,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2202, %r7296, %r2196, %p12;
	// begin inline asm
	{mul.f16x2 %r7556,%r2202,%r7468;
}
	// end inline asm
	selp.b32 	%r2205, %r7300, %r2196, %p12;
	// begin inline asm
	{mul.f16x2 %r7554,%r2205,%r7467;
}
	// end inline asm
	mov.u32 	%r2210, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2208,%r7473,%r2210,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2214, %r7296, %r2208, %p12;
	// begin inline asm
	{mul.f16x2 %r7553,%r2214,%r7466;
}
	// end inline asm
	selp.b32 	%r2217, %r7300, %r2208, %p12;
	// begin inline asm
	{mul.f16x2 %r7552,%r2217,%r7465;
}
	// end inline asm
	mov.u32 	%r2222, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2220,%r7473,%r2222,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2226, %r7296, %r2220, %p12;
	// begin inline asm
	{mul.f16x2 %r7551,%r2226,%r7647;
}
	// end inline asm
	selp.b32 	%r2229, %r7300, %r2220, %p12;
	// begin inline asm
	{mul.f16x2 %r7549,%r2229,%r7646;
}
	// end inline asm
	mov.u32 	%r2234, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2232,%r7473,%r2234,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2238, %r7296, %r2232, %p12;
	// begin inline asm
	{mul.f16x2 %r7550,%r2238,%r7464;
}
	// end inline asm
	selp.b32 	%r2241, %r7300, %r2232, %p12;
	// begin inline asm
	{mul.f16x2 %r7548,%r2241,%r7463;
}
	// end inline asm
	mov.u32 	%r2246, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2244,%r7473,%r2246,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2250, %r7296, %r2244, %p12;
	// begin inline asm
	{mul.f16x2 %r7547,%r2250,%r7462;
}
	// end inline asm
	selp.b32 	%r2253, %r7300, %r2244, %p12;
	// begin inline asm
	{mul.f16x2 %r7544,%r2253,%r7461;
}
	// end inline asm
	mov.u32 	%r2258, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2256,%r7473,%r2258,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2262, %r7296, %r2256, %p12;
	// begin inline asm
	{mul.f16x2 %r7546,%r2262,%r7460;
}
	// end inline asm
	selp.b32 	%r2265, %r7300, %r2256, %p12;
	// begin inline asm
	{mul.f16x2 %r7543,%r2265,%r7459;
}
	// end inline asm
	mov.u32 	%r2270, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2268,%r7473,%r2270,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2274, %r7296, %r2268, %p12;
	// begin inline asm
	{mul.f16x2 %r7545,%r2274,%r7458;
}
	// end inline asm
	selp.b32 	%r2277, %r7300, %r2268, %p12;
	// begin inline asm
	{mul.f16x2 %r7542,%r2277,%r7457;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2280,%r7473,%r2282,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2286, %r7296, %r2280, %p12;
	// begin inline asm
	{mul.f16x2 %r7541,%r2286,%r7456;
}
	// end inline asm
	selp.b32 	%r2289, %r7300, %r2280, %p12;
	// begin inline asm
	{mul.f16x2 %r7538,%r2289,%r7455;
}
	// end inline asm
	mov.u32 	%r2294, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2292,%r7473,%r2294,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2298, %r7296, %r2292, %p12;
	// begin inline asm
	{mul.f16x2 %r7540,%r2298,%r7454;
}
	// end inline asm
	selp.b32 	%r2301, %r7300, %r2292, %p12;
	// begin inline asm
	{mul.f16x2 %r7537,%r2301,%r7453;
}
	// end inline asm
	mov.u32 	%r2306, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2304,%r7473,%r2306,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2310, %r7296, %r2304, %p12;
	// begin inline asm
	{mul.f16x2 %r7539,%r2310,%r7452;
}
	// end inline asm
	selp.b32 	%r2313, %r7300, %r2304, %p12;
	// begin inline asm
	{mul.f16x2 %r7536,%r2313,%r7451;
}
	// end inline asm
	mov.u32 	%r2318, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2316,%r7473,%r2318,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2322, %r7296, %r2316, %p12;
	// begin inline asm
	{mul.f16x2 %r7535,%r2322,%r7633;
}
	// end inline asm
	selp.b32 	%r2325, %r7300, %r2316, %p12;
	// begin inline asm
	{mul.f16x2 %r7534,%r2325,%r7632;
}
	// end inline asm
	mov.u32 	%r2330, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2328,%r7473,%r2330,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2334, %r7296, %r2328, %p12;
	// begin inline asm
	{mul.f16x2 %r7533,%r2334,%r7645;
}
	// end inline asm
	selp.b32 	%r2337, %r7300, %r2328, %p12;
	// begin inline asm
	{mul.f16x2 %r7531,%r2337,%r7643;
}
	// end inline asm
	mov.u32 	%r2342, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2340,%r7473,%r2342,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2346, %r7296, %r2340, %p12;
	// begin inline asm
	{mul.f16x2 %r7532,%r2346,%r7644;
}
	// end inline asm
	selp.b32 	%r2349, %r7300, %r2340, %p12;
	// begin inline asm
	{mul.f16x2 %r7530,%r2349,%r7642;
}
	// end inline asm
	mov.u32 	%r2354, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2352,%r7473,%r2354,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2358, %r7296, %r2352, %p12;
	// begin inline asm
	{mul.f16x2 %r7529,%r2358,%r7641;
}
	// end inline asm
	selp.b32 	%r2361, %r7300, %r2352, %p12;
	// begin inline asm
	{mul.f16x2 %r7526,%r2361,%r7640;
}
	// end inline asm
	mov.u32 	%r2366, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2364,%r7473,%r2366,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2370, %r7296, %r2364, %p12;
	// begin inline asm
	{mul.f16x2 %r7528,%r2370,%r7450;
}
	// end inline asm
	selp.b32 	%r2373, %r7300, %r2364, %p12;
	// begin inline asm
	{mul.f16x2 %r7525,%r2373,%r7449;
}
	// end inline asm
	mov.u32 	%r2378, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2376,%r7473,%r2378,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2382, %r7296, %r2376, %p12;
	// begin inline asm
	{mul.f16x2 %r7527,%r2382,%r7448;
}
	// end inline asm
	selp.b32 	%r2385, %r7300, %r2376, %p12;
	// begin inline asm
	{mul.f16x2 %r7524,%r2385,%r7447;
}
	// end inline asm
	mov.u32 	%r2390, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2388,%r7473,%r2390,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2394, %r7296, %r2388, %p12;
	// begin inline asm
	{mul.f16x2 %r7523,%r2394,%r7631;
}
	// end inline asm
	selp.b32 	%r2397, %r7300, %r2388, %p12;
	// begin inline asm
	{mul.f16x2 %r7520,%r2397,%r7629;
}
	// end inline asm
	mov.u32 	%r2402, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2400,%r7473,%r2402,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2406, %r7296, %r2400, %p12;
	// begin inline asm
	{mul.f16x2 %r7522,%r2406,%r7630;
}
	// end inline asm
	selp.b32 	%r2409, %r7300, %r2400, %p12;
	// begin inline asm
	{mul.f16x2 %r7519,%r2409,%r7628;
}
	// end inline asm
	mov.u32 	%r2414, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2412,%r7473,%r2414,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2418, %r7296, %r2412, %p12;
	// begin inline asm
	{mul.f16x2 %r7521,%r2418,%r7446;
}
	// end inline asm
	selp.b32 	%r2421, %r7300, %r2412, %p12;
	// begin inline asm
	{mul.f16x2 %r7518,%r2421,%r7445;
}
	// end inline asm
	mov.u32 	%r2426, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2424,%r7473,%r2426,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2430, %r7296, %r2424, %p12;
	// begin inline asm
	{mul.f16x2 %r7517,%r2430,%r7627;
}
	// end inline asm
	selp.b32 	%r2433, %r7300, %r2424, %p12;
	// begin inline asm
	{mul.f16x2 %r7516,%r2433,%r7626;
}
	// end inline asm
	mov.u32 	%r2438, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2436,%r7473,%r2438,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2442, %r7296, %r2436, %p12;
	// begin inline asm
	{mul.f16x2 %r7515,%r2442,%r7625;
}
	// end inline asm
	selp.b32 	%r2445, %r7300, %r2436, %p12;
	// begin inline asm
	{mul.f16x2 %r7513,%r2445,%r7624;
}
	// end inline asm
	mov.u32 	%r2450, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2448,%r7473,%r2450,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2454, %r7296, %r2448, %p12;
	// begin inline asm
	{mul.f16x2 %r7514,%r2454,%r7638;
}
	// end inline asm
	selp.b32 	%r2457, %r7300, %r2448, %p12;
	// begin inline asm
	{mul.f16x2 %r7512,%r2457,%r7636;
}
	// end inline asm
	mov.u32 	%r2462, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2460,%r7473,%r2462,%r2187,%r2464;
}
	// end inline asm
	selp.b32 	%r2466, %r7296, %r2460, %p12;
	// begin inline asm
	{mul.f16x2 %r7511,%r2466,%r7623;
}
	// end inline asm
	selp.b32 	%r2469, %r7300, %r2460, %p12;
	// begin inline asm
	{mul.f16x2 %r7510,%r2469,%r7622;
}
	// end inline asm
	rem.s32 	%r633, %r2475, %r51;
	rem.s32 	%r634, %r2480, %r7204;
	mad.lo.s32 	%r635, %r2494, %r2495, %r2492;
	sub.s32 	%r636, %r2502, %r2505;
	mad.lo.s32 	%r637, %r2504, %r2508, %r2503;
	ld.param.u64 	%rd268, [%rd1+144];
	cvta.to.global.u64 	%rd269, %rd268;
	shl.b32 	%r2558, %r637, 1;
	mul.wide.s32 	%rd270, %r2558, 4;
	add.s64 	%rd26, %rd269, %rd270;
	@%p71 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2761, %r1697, 1;
	setp.lt.s32 	%p160, %r637, %r2761;
	setp.eq.s32 	%p161, %r410, %r28;
	setp.gt.s32 	%p162, %r637, -1;
	and.pred  	%p163, %p161, %p162;
	and.pred  	%p164, %p160, %p163;
	@%p164 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7476, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7477, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2561, %r1697, 1;
	setp.lt.s32 	%p155, %r637, %r2561;
	setp.gt.s32 	%p156, %r637, -1;
	and.pred  	%p157, %p156, %p155;
	@%p157 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7474, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7475, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2769, 0;
	mov.u32 	%r2780, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2767,%r7472,%r2769,%r2187,%r2780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2772,%r7476,%r2767;
}
	// end inline asm
	mov.u32 	%r2778, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2776,%r7472,%r2778,%r2187,%r2780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2781,%r7477,%r2776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7479,%r2772,%r2781;
}
	// end inline asm
	setp.eq.s32 	%p165, %r411, 0;
	mov.u32 	%r7478, %r7479;
	@%p165 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r7478;
}
	// end inline asm
	setp.eq.s32 	%p166, %r411, 1;
	@%p166 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r7479;
}
	// end inline asm
	mov.u32 	%r2802, 2;
	mov.u32 	%r2813, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2800,%r7472,%r2802,%r2187,%r2813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2805,%r7476,%r2800;
}
	// end inline asm
	mov.u32 	%r2811, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2809,%r7472,%r2811,%r2187,%r2813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7477,%r2809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7481,%r2805,%r2814;
}
	// end inline asm
	mov.u32 	%r7480, %r7481;
	@%p165 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7480, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7556,%r7556,%r7480;
}
	// end inline asm
	@%p166 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7554,%r7554,%r7481;
}
	// end inline asm
	mov.u32 	%r2835, 4;
	mov.u32 	%r2846, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2833,%r7472,%r2835,%r2187,%r2846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2838,%r7476,%r2833;
}
	// end inline asm
	mov.u32 	%r2844, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2842,%r7472,%r2844,%r2187,%r2846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2847,%r7477,%r2842;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7483,%r2838,%r2847;
}
	// end inline asm
	mov.u32 	%r7482, %r7483;
	@%p165 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r7482;
}
	// end inline asm
	@%p166 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r7483;
}
	// end inline asm
	mov.u32 	%r2868, 6;
	mov.u32 	%r2879, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2866,%r7472,%r2868,%r2187,%r2879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2871,%r7476,%r2866;
}
	// end inline asm
	mov.u32 	%r2877, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2875,%r7472,%r2877,%r2187,%r2879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2880,%r7477,%r2875;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7485,%r2871,%r2880;
}
	// end inline asm
	mov.u32 	%r7484, %r7485;
	@%p165 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r7484;
}
	// end inline asm
	@%p166 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r7485;
}
	// end inline asm
	mov.u32 	%r2901, 8;
	mov.u32 	%r2912, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2899,%r7472,%r2901,%r2187,%r2912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2904,%r7476,%r2899;
}
	// end inline asm
	mov.u32 	%r2910, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2908,%r7472,%r2910,%r2187,%r2912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2913,%r7477,%r2908;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7487,%r2904,%r2913;
}
	// end inline asm
	mov.u32 	%r7486, %r7487;
	@%p165 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7486, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7550,%r7550,%r7486;
}
	// end inline asm
	@%p166 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7487, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7548,%r7548,%r7487;
}
	// end inline asm
	mov.u32 	%r2934, 10;
	mov.u32 	%r2945, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2932,%r7472,%r2934,%r2187,%r2945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2937,%r7476,%r2932;
}
	// end inline asm
	mov.u32 	%r2943, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2941,%r7472,%r2943,%r2187,%r2945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2946,%r7477,%r2941;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7489,%r2937,%r2946;
}
	// end inline asm
	mov.u32 	%r7488, %r7489;
	@%p165 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7488, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r7488;
}
	// end inline asm
	@%p166 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7489, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r7489;
}
	// end inline asm
	mov.u32 	%r2967, 12;
	mov.u32 	%r2978, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2965,%r7472,%r2967,%r2187,%r2978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2970,%r7476,%r2965;
}
	// end inline asm
	mov.u32 	%r2976, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2974,%r7472,%r2976,%r2187,%r2978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2979,%r7477,%r2974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7491,%r2970,%r2979;
}
	// end inline asm
	mov.u32 	%r7490, %r7491;
	@%p165 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7490, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7546,%r7546,%r7490;
}
	// end inline asm
	@%p166 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7491, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7543,%r7543,%r7491;
}
	// end inline asm
	mov.u32 	%r3000, 14;
	mov.u32 	%r3011, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2998,%r7472,%r3000,%r2187,%r3011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3003,%r7476,%r2998;
}
	// end inline asm
	mov.u32 	%r3009, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3007,%r7472,%r3009,%r2187,%r3011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3012,%r7477,%r3007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7493,%r3003,%r3012;
}
	// end inline asm
	mov.u32 	%r7492, %r7493;
	@%p165 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7492, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r7492;
}
	// end inline asm
	@%p166 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7493, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r7493;
}
	// end inline asm
	mov.u32 	%r3033, 16;
	mov.u32 	%r3044, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3031,%r7472,%r3033,%r2187,%r3044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3036,%r7476,%r3031;
}
	// end inline asm
	mov.u32 	%r3042, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3040,%r7472,%r3042,%r2187,%r3044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3045,%r7477,%r3040;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7495,%r3036,%r3045;
}
	// end inline asm
	mov.u32 	%r7494, %r7495;
	@%p165 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7494, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7540,%r7540,%r7494;
}
	// end inline asm
	@%p166 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7495, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7537,%r7537,%r7495;
}
	// end inline asm
	mov.u32 	%r3066, 18;
	mov.u32 	%r3077, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3064,%r7472,%r3066,%r2187,%r3077;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3069,%r7476,%r3064;
}
	// end inline asm
	mov.u32 	%r3075, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3073,%r7472,%r3075,%r2187,%r3077;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3078,%r7477,%r3073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7497,%r3069,%r3078;
}
	// end inline asm
	mov.u32 	%r7496, %r7497;
	@%p165 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7496, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r7496;
}
	// end inline asm
	@%p166 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7497, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r7497;
}
	// end inline asm
	mov.u32 	%r3099, 20;
	mov.u32 	%r3110, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3097,%r7472,%r3099,%r2187,%r3110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3102,%r7476,%r3097;
}
	// end inline asm
	mov.u32 	%r3108, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3106,%r7472,%r3108,%r2187,%r3110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3111,%r7477,%r3106;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7499,%r3102,%r3111;
}
	// end inline asm
	mov.u32 	%r7498, %r7499;
	@%p165 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7498, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7533,%r7533,%r7498;
}
	// end inline asm
	@%p166 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7499, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7531,%r7531,%r7499;
}
	// end inline asm
	mov.u32 	%r3132, 22;
	mov.u32 	%r3143, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3130,%r7472,%r3132,%r2187,%r3143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3135,%r7476,%r3130;
}
	// end inline asm
	mov.u32 	%r3141, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3139,%r7472,%r3141,%r2187,%r3143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3144,%r7477,%r3139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7501,%r3135,%r3144;
}
	// end inline asm
	mov.u32 	%r7500, %r7501;
	@%p165 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7500, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7529,%r7529,%r7500;
}
	// end inline asm
	@%p166 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7501, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7526,%r7526,%r7501;
}
	// end inline asm
	mov.u32 	%r3165, 24;
	mov.u32 	%r3176, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3163,%r7472,%r3165,%r2187,%r3176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3168,%r7476,%r3163;
}
	// end inline asm
	mov.u32 	%r3174, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3172,%r7472,%r3174,%r2187,%r3176;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3177,%r7477,%r3172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7503,%r3168,%r3177;
}
	// end inline asm
	mov.u32 	%r7502, %r7503;
	@%p165 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7502, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7528,%r7528,%r7502;
}
	// end inline asm
	@%p166 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7503, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7525,%r7525,%r7503;
}
	// end inline asm
	mov.u32 	%r3198, 26;
	mov.u32 	%r3209, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3196,%r7472,%r3198,%r2187,%r3209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3201,%r7476,%r3196;
}
	// end inline asm
	mov.u32 	%r3207, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3205,%r7472,%r3207,%r2187,%r3209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3210,%r7477,%r3205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7505,%r3201,%r3210;
}
	// end inline asm
	mov.u32 	%r7504, %r7505;
	@%p165 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7504, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7523,%r7523,%r7504;
}
	// end inline asm
	@%p166 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7505, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7520,%r7520,%r7505;
}
	// end inline asm
	mov.u32 	%r3231, 28;
	mov.u32 	%r3242, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3229,%r7472,%r3231,%r2187,%r3242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3234,%r7476,%r3229;
}
	// end inline asm
	mov.u32 	%r3240, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3238,%r7472,%r3240,%r2187,%r3242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3243,%r7477,%r3238;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7507,%r3234,%r3243;
}
	// end inline asm
	mov.u32 	%r7506, %r7507;
	@%p165 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7506, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7522,%r7522,%r7506;
}
	// end inline asm
	@%p166 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7507, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7519,%r7519,%r7507;
}
	// end inline asm
	mov.u32 	%r3273, 31;
	mov.u32 	%r3264, 30;
	mov.u32 	%r3275, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3262,%r7472,%r3264,%r2187,%r3275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3267,%r7476,%r3262;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3271,%r7472,%r3273,%r2187,%r3275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3276,%r7477,%r3271;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7509,%r3267,%r3276;
}
	// end inline asm
	mov.u32 	%r7508, %r7509;
	@%p165 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7508, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7515,%r7515,%r7508;
}
	// end inline asm
	@%p166 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7509, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7513,%r7513,%r7509;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7475, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p158, %r636, %r1691;
	@%p158 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	// begin inline asm
	{mul.f16x2 %r2663,%r7474,%r7306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r7557,%r2663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2669,%r7474,%r7304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r7545,%r2669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2675,%r7474,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r7547,%r2675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2681,%r7474,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7527,%r7527,%r2681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2687,%r7474,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7529,%r7529,%r2687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2693,%r7474,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7514,%r7514,%r2693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2699,%r7475,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7551,%r7551,%r2699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2705,%r7475,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7532,%r7532,%r2705;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2711,%r7474,%r7305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r7555,%r2711;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2717,%r7474,%r7303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7542,%r7542,%r2717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2723,%r7474,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r7544,%r2723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2729,%r7474,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7524,%r7524,%r2729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2735,%r7474,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7526,%r7526,%r2735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2741,%r7474,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7512,%r7512,%r2741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2747,%r7475,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7549,%r7549,%r2747;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2753,%r7475,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7530,%r7530,%r2753;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2566, %r1691, -2;
	setp.ne.s32 	%p159, %r636, %r2566;
	@%p159 bra 	$L__BB0_378;

	// begin inline asm
	{mul.f16x2 %r2567,%r7474,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7535,%r7535,%r2567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2573,%r7474,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7517,%r7517,%r2573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2579,%r7475,%r7306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r7553,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2585,%r7475,%r7304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r7539,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2591,%r7475,%r7310;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7541,%r7541,%r2591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2597,%r7475,%r7308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7521,%r7521,%r2597;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2603,%r7475,%r7314;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7523,%r7523,%r2603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2609,%r7475,%r7312;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7511,%r7511,%r2609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2615,%r7474,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7534,%r7534,%r2615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2621,%r7474,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7516,%r7516,%r2621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2627,%r7475,%r7305;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r7552,%r2627;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2633,%r7475,%r7303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7536,%r7536,%r2633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2639,%r7475,%r7309;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r7538,%r2639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2645,%r7475,%r7307;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7518,%r7518,%r2645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2651,%r7475,%r7313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7520,%r7520,%r2651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2657,%r7475,%r7311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7510,%r7510,%r2657;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p197, %r23, 1;
	mov.u32 	%r7662, %r2100;
	mov.u32 	%r7663, %r2100;
	mov.u32 	%r7668, %r2100;
	mov.u32 	%r7669, %r2100;
	mov.u32 	%r7670, %r2100;
	mov.u32 	%r7671, %r2100;
	mov.u32 	%r7672, %r2100;
	mov.u32 	%r7673, %r2100;
	mov.u32 	%r7680, %r2100;
	mov.u32 	%r7681, %r2100;
	@%p197 bra 	$L__BB0_380;

	mul.lo.s32 	%r3294, %r1682, 320;
	add.s32 	%r3295, %r23, -1;
	mul.lo.s32 	%r3296, %r24, 320;
	mad.lo.s32 	%r3297, %r3294, %r3295, %r3296;
	add.s32 	%r3300, %r1737, -64;
	mad.lo.s32 	%r3305, %r3300, %r2088, %r2085;
	add.s32 	%r3306, %r3297, %r3305;
	shl.b32 	%r3307, %r3306, 2;
	mov.u32 	%r3308, _ZN6kernel5shmemE;
	add.s32 	%r3309, %r3308, %r3307;
	shl.b32 	%r3310, %r28, 4;
	add.s32 	%r3311, %r3309, %r3310;
	ld.shared.v4.u32 	{%r7673, %r7671, %r7663, %r7662}, [%r3311];
	shl.b32 	%r3316, %r28, 3;
	add.s32 	%r3317, %r3309, %r3316;
	ld.shared.v2.u32 	{%r7672, %r7670}, [%r3317+512];
	ld.shared.v4.u32 	{%r7681, %r7680, %r7669, %r7668}, [%r3311+768];

$L__BB0_380:
	setp.lt.s32 	%p198, %r24, 1;
	mov.u32 	%r7664, %r2100;
	mov.u32 	%r7665, %r2100;
	mov.u32 	%r7666, %r2100;
	mov.u32 	%r7667, %r2100;
	mov.u32 	%r7674, %r2100;
	mov.u32 	%r7675, %r2100;
	mov.u32 	%r7676, %r2100;
	mov.u32 	%r7677, %r2100;
	mov.u32 	%r7678, %r2100;
	mov.u32 	%r7679, %r2100;
	mov.u32 	%r7682, %r2100;
	mov.u32 	%r7683, %r2100;
	@%p198 bra 	$L__BB0_383;

	mad.lo.s32 	%r3329, %r2484, 384, %r2091;
	add.s32 	%r3332, %r24, -1;
	mad.lo.s32 	%r3333, %r2086, %r3332, %r3329;
	add.s32 	%r3339, %r3333, %r2089;
	shl.b32 	%r3340, %r3339, 2;
	mov.u32 	%r3341, _ZN6kernel5shmemE;
	add.s32 	%r3342, %r3341, %r3340;
	shl.b32 	%r3343, %r28, 4;
	add.s32 	%r3344, %r3342, %r3343;
	ld.shared.v4.u32 	{%r7683, %r7682, %r7678, %r7676}, [%r3344];
	shl.b32 	%r3349, %r28, 3;
	add.s32 	%r3350, %r3342, %r3349;
	ld.shared.v2.u32 	{%r7679, %r7677}, [%r3350+512];
	ld.shared.v4.u32 	{%r7675, %r7674, %r7666, %r7664}, [%r3344+768];
	mov.u32 	%r7665, %r2100;
	mov.u32 	%r7667, %r2100;
	@%p197 bra 	$L__BB0_383;

	add.s32 	%r7194, %r3350, 512;
	ld.shared.v2.u32 	{%r7667, %r7665}, [%r7194+768];

$L__BB0_383:
	setp.eq.s32 	%p200, %r23, 0;
	@%p200 bra 	$L__BB0_388;

	setp.eq.s32 	%p201, %r24, %r2088;
	@%p201 bra 	$L__BB0_386;

	sub.s32 	%r3360, %r1681, %r23;
	mul.lo.s32 	%r3362, %r52, %r24;
	mad.lo.s32 	%r3363, %r3360, 384, %r3362;
	mad.lo.s32 	%r3366, %r2086, %r2088, %r3363;
	mad.lo.s32 	%r3369, %r2084, %r2083, %r3366;
	shl.b32 	%r3370, %r3369, 2;
	mov.u32 	%r3371, _ZN6kernel5shmemE;
	add.s32 	%r3372, %r3371, %r3370;
	shl.b32 	%r3373, %r28, 4;
	add.s32 	%r3374, %r3372, %r3373;
	ld.shared.v4.u32 	{%r7601, %r7600, %r7603, %r7602}, [%r3374];

$L__BB0_386:
	shl.b32 	%r3379, %r24, 8;
	shl.b32 	%r3383, %r1682, 8;
	or.b32  	%r3384, %r3383, 128;
	add.s32 	%r3385, %r23, -1;
	mad.lo.s32 	%r3386, %r3384, %r3385, %r2091;
	add.s32 	%r3387, %r3386, %r3379;
	shl.b32 	%r3388, %r3387, 2;
	mov.u32 	%r3389, _ZN6kernel5shmemE;
	add.s32 	%r3390, %r3389, %r3388;
	setp.ne.s32 	%p202, %r24, %r2088;
	shl.b32 	%r3392, %r28, 4;
	add.s32 	%r899, %r3390, %r3392;
	ld.shared.v4.u32 	{%r7594, %r7592, %r7595, %r7593}, [%r899];
	ld.shared.v4.u32 	{%r7599, %r7598, %r7597, %r7596}, [%r899+512];
	@%p202 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7601, %r7600, %r7603, %r7602}, [%r899+1024];

$L__BB0_388:
	setp.eq.s32 	%p203, %r24, 0;
	@%p203 bra 	$L__BB0_391;

	mul.lo.s32 	%r3406, %r52, %r24;
	sub.s32 	%r3407, %r3406, %r52;
	mad.lo.s32 	%r3410, %r2484, 384, %r3407;
	mad.lo.s32 	%r3413, %r2086, %r2088, %r3410;
	mad.lo.s32 	%r3416, %r2084, %r2083, %r3413;
	shl.b32 	%r3417, %r3416, 2;
	mov.u32 	%r3418, _ZN6kernel5shmemE;
	add.s32 	%r3419, %r3418, %r3417;
	shl.b32 	%r3420, %r28, 4;
	add.s32 	%r928, %r3419, %r3420;
	ld.shared.v4.u32 	{%r7617, %r7616, %r7619, %r7618}, [%r928];
	ld.shared.v4.u32 	{%r7615, %r7613, %r7611, %r7610}, [%r928+512];
	ld.shared.v4.u32 	{%r7614, %r7612, %r7609, %r7607}, [%r928+1024];
	@%p200 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7605, %r7604, %r7608, %r7606}, [%r928+1536];

$L__BB0_391:
	setp.ne.s32 	%p205, %r23, 0;
	@%p205 bra 	$L__BB0_396;

	ld.param.u64 	%rd552, [%rd1+80];
	cvta.to.global.u64 	%rd551, %rd552;
	mad.lo.s32 	%r3438, %r633, %r1684, %r26;
	mul.lo.s32 	%r3439, %r1682, %r3438;
	mul.lo.s32 	%r3440, %r3439, 768;
	mad.lo.s32 	%r3441, %r24, 384, %r3440;
	add.s32 	%r3442, %r3441, -64;
	mul.wide.s32 	%rd273, %r3442, 4;
	add.s64 	%rd274, %rd551, %rd273;
	add.s64 	%rd276, %rd274, %rd275;
	ld.global.v4.u32 	{%r7631, %r7629, %r7623, %r7622}, [%rd276+256];
	ld.global.v4.u32 	{%r7633, %r7632, %r7627, %r7626}, [%rd276+1024];
	add.s64 	%rd28, %rd274, %rd277;
	@%p203 bra 	$L__BB0_394;

	ld.global.v2.u32 	{%r7625, %r7624}, [%rd28];

$L__BB0_394:
	setp.ne.s32 	%p207, %r24, %r2088;
	ld.global.v2.u32 	{%r7630, %r7628}, [%rd28+768];
	@%p207 bra 	$L__BB0_396;

	ld.global.v2.u32 	{%r7635, %r7634}, [%rd28+1536];

$L__BB0_396:
	setp.ne.s32 	%p208, %r24, 0;
	@%p208 bra 	$L__BB0_398;

	ld.param.u64 	%rd554, [%rd1+80];
	cvta.to.global.u64 	%rd553, %rd554;
	mad.lo.s32 	%r3459, %r634, %r1683, %r25;
	mul.lo.s32 	%r3463, %r3459, %r1738;
	mad.lo.s32 	%r3466, %r2484, 384, %r3463;
	add.s32 	%r3467, %r3466, -64;
	mad.lo.s32 	%r3470, %r1740, %r51, %r3467;
	mul.wide.s32 	%rd278, %r3470, 4;
	add.s64 	%rd279, %rd553, %rd278;
	add.s64 	%rd281, %rd279, %rd275;
	ld.global.v4.u32 	{%r7647, %r7646, %r7644, %r7642}, [%rd281+256];
	ld.global.v4.u32 	{%r7641, %r7640, %r7638, %r7636}, [%rd281+1024];
	add.s64 	%rd283, %rd279, %rd277;
	ld.global.v2.u32 	{%r7645, %r7643}, [%rd283+768];
	ld.global.v2.u32 	{%r7625, %r7624}, [%rd283+1536];

$L__BB0_398:
	add.s32 	%r3483, %r1686, -1;
	setp.lt.s32 	%p209, %r635, %r3483;
	setp.gt.s32 	%p210, %r635, 1;
	and.pred  	%p211, %p210, %p209;
	setp.gt.s32 	%p212, %r636, 1;
	and.pred  	%p213, %p211, %p212;
	add.s32 	%r3484, %r1687, -2;
	setp.lt.s32 	%p214, %r636, %r3484;
	and.pred  	%p11, %p214, %p213;
	not.pred 	%p215, %p11;
	@%p215 bra 	$L__BB0_409;

	ld.param.u64 	%rd556, [%rd1+88];
	cvta.to.global.u64 	%rd555, %rd556;
	mad.lo.s32 	%r1023, %r636, %r1686, %r635;
	shl.b32 	%r3485, %r1023, 6;
	mul.wide.s32 	%rd286, %r3485, 4;
	add.s64 	%rd30, %rd555, %rd286;
	and.pred  	%p218, %p205, %p208;
	@%p218 bra 	$L__BB0_401;

	add.s64 	%rd288, %rd30, %rd277;
	ld.global.v2.u32 	{%r7667, %r7665}, [%rd288+256];

$L__BB0_401:
	@%p205 bra 	$L__BB0_403;

	shl.b32 	%r3488, %r1686, 5;
	cvt.s64.s32 	%rd289, %r3488;
	cvt.s64.s32 	%rd290, %r28;
	add.s64 	%rd291, %rd289, %rd290;
	shl.b64 	%rd292, %rd291, 3;
	add.s64 	%rd293, %rd30, %rd292;
	ld.global.v2.u32 	{%r7672, %r7670}, [%rd293];

$L__BB0_403:
	@%p208 bra 	$L__BB0_405;

	shl.b32 	%r3491, %r1686, 5;
	neg.s32 	%r3492, %r3491;
	cvt.s64.s32 	%rd294, %r3492;
	cvt.s64.s32 	%rd295, %r28;
	add.s64 	%rd296, %rd294, %rd295;
	shl.b64 	%rd297, %rd296, 3;
	add.s64 	%rd298, %rd30, %rd297;
	ld.global.v2.u32 	{%r7679, %r7677}, [%rd298];

$L__BB0_405:
	mad.lo.s32 	%r7205, %r636, %r1686, %r635;
	ld.param.u64 	%rd558, [%rd1+88];
	cvta.to.global.u64 	%rd557, %rd558;
	shl.b32 	%r3495, %r1687, 6;
	shl.b32 	%r3496, %r7205, 7;
	mad.lo.s32 	%r3497, %r3495, %r1686, %r3496;
	mul.wide.s32 	%rd299, %r3497, 4;
	add.s64 	%rd31, %rd557, %rd299;
	@%p205 bra 	$L__BB0_407;

	shl.b32 	%r3498, %r1686, 5;
	cvt.s64.s32 	%rd300, %r3498;
	cvt.s64.s32 	%rd301, %r28;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 4;
	add.s64 	%rd304, %rd31, %rd303;
	ld.global.v4.u32 	{%r7673, %r7671, %r7663, %r7662}, [%rd304];
	shl.b32 	%r3503, %r1686, 6;
	add.s32 	%r3504, %r3503, -32;
	cvt.s64.s32 	%rd305, %r3504;
	add.s64 	%rd306, %rd305, %rd301;
	shl.b64 	%rd307, %rd306, 4;
	add.s64 	%rd308, %rd31, %rd307;
	ld.global.v4.u32 	{%r7681, %r7680, %r7669, %r7668}, [%rd308];

$L__BB0_407:
	@%p208 bra 	$L__BB0_409;

	shl.b32 	%r3509, %r1686, 5;
	xor.b32  	%r3510, %r3509, -32;
	cvt.s64.s32 	%rd309, %r3510;
	cvt.s64.s32 	%rd310, %r28;
	add.s64 	%rd311, %rd309, %rd310;
	shl.b64 	%rd312, %rd311, 4;
	add.s64 	%rd313, %rd31, %rd312;
	ld.global.v4.u32 	{%r7683, %r7682, %r7678, %r7676}, [%rd313];
	add.s64 	%rd315, %rd31, %rd275;
	ld.global.v4.u32 	{%r7675, %r7674, %r7666, %r7664}, [%rd315];

$L__BB0_409:
	mov.u32 	%r3524, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3520,%r7442,%r412,%r2187,%r3524;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3520;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7442;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3527, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3528,%r7443,%r3527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3531,%r7295,%r3528;
}
	// end inline asm
	@%p12 bra 	$L__BB0_411;
	bra.uni 	$L__BB0_410;

$L__BB0_411:
	// begin inline asm
	{neg.f16x2 %r7684,%r7557;
}
	// end inline asm
	bra.uni 	$L__BB0_412;

$L__BB0_410:
	// begin inline asm
	{mul.f16x2 %r7684,%r7296,%r3528;
}
	// end inline asm

$L__BB0_412:
	mov.u32 	%r3544, 31;
	mov.u32 	%r3567, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3542,%r7684,%r3544,%r2187,%r3567;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3547,%r3531,%r3542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3550,%r7441,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r3550,%r3547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3556,%r7444,%r3553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3559,%r7557,%r3556;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3563,%r7437,%r412,%r2187,%r3567;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3563;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7437;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3570, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3571,%r7438,%r3570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3574,%r7295,%r3571;
}
	// end inline asm
	mov.u32 	%r7685, %r7556;
	@%p12 bra 	$L__BB0_414;

	// begin inline asm
	{mul.f16x2 %r7685,%r7296,%r3571;
}
	// end inline asm

$L__BB0_414:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3585,%r7685,%r3544,%r2187,%r3567;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3590,%r3574,%r3585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3593,%r7441,%r7436;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3596,%r3590,%r3593;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3599,%r7439,%r3596;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3602,%r7556,%r3599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3605,%r7442,%r7443;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3608,%r7299,%r3605;
}
	// end inline asm
	@%p12 bra 	$L__BB0_416;
	bra.uni 	$L__BB0_415;

$L__BB0_416:
	// begin inline asm
	{neg.f16x2 %r7686,%r7555;
}
	// end inline asm
	bra.uni 	$L__BB0_417;

$L__BB0_415:
	// begin inline asm
	{mul.f16x2 %r7686,%r7300,%r3605;
}
	// end inline asm

$L__BB0_417:
	mov.u32 	%r3621, 31;
	mov.u32 	%r3623, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3619,%r7686,%r3621,%r2187,%r3623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3624,%r3608,%r3619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3627,%r7434,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3630,%r3627,%r3624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3633,%r7435,%r3630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3636,%r7555,%r3633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3639,%r7437,%r7438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3642,%r7299,%r3639;
}
	// end inline asm
	mov.u32 	%r7687, %r7554;
	@%p12 bra 	$L__BB0_419;

	// begin inline asm
	{mul.f16x2 %r7687,%r7300,%r3639;
}
	// end inline asm

$L__BB0_419:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3651,%r7687,%r3621,%r2187,%r3623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3656,%r3642,%r3651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3659,%r7434,%r7431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3662,%r3656,%r3659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3665,%r7432,%r3662;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3668,%r7554,%r3665;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3672,%r7428,%r412,%r2187,%r3623;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3672;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7428;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3679, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3680,%r7429,%r3679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3683,%r7295,%r3680;
}
	// end inline asm
	@%p12 bra 	$L__BB0_421;
	bra.uni 	$L__BB0_420;

$L__BB0_421:
	// begin inline asm
	{neg.f16x2 %r7688,%r7553;
}
	// end inline asm
	bra.uni 	$L__BB0_422;

$L__BB0_420:
	// begin inline asm
	{mul.f16x2 %r7688,%r7296,%r3680;
}
	// end inline asm

$L__BB0_422:
	mov.u32 	%r3698, 31;
	mov.u32 	%r3700, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3696,%r7688,%r3698,%r2187,%r3700;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3701,%r3683,%r3696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3704,%r7427,%r7441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r3704,%r3701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3710,%r7430,%r3707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3713,%r7553,%r3710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3716,%r7428,%r7429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3719,%r7299,%r3716;
}
	// end inline asm
	@%p12 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7689,%r7552;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7689,%r7300,%r3716;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3732, 31;
	mov.u32 	%r3755, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3730,%r7689,%r3732,%r2187,%r3755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3735,%r3719,%r3730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3738,%r7425,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3741,%r3738,%r3735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3744,%r7426,%r3741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3747,%r7552,%r3744;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3751,%r7423,%r412,%r2187,%r3755;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3751;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7423;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3758, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3759,%r7424,%r3758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3762,%r7295,%r3759;
}
	// end inline asm
	@%p12 bra 	$L__BB0_427;
	bra.uni 	$L__BB0_426;

$L__BB0_427:
	// begin inline asm
	{neg.f16x2 %r7690,%r7551;
}
	// end inline asm
	bra.uni 	$L__BB0_428;

$L__BB0_426:
	// begin inline asm
	{mul.f16x2 %r7690,%r7296,%r3759;
}
	// end inline asm

$L__BB0_428:
	mov.u32 	%r3777, 31;
	mov.u32 	%r3800, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3775,%r7690,%r3777,%r2187,%r3800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3780,%r3762,%r3775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r7422,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3786,%r3783,%r3780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3789,%r7683,%r3786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3792,%r7551,%r3789;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3796,%r7418,%r412,%r2187,%r3800;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3796;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7418;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3803, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r7419,%r3803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3807,%r7295,%r3804;
}
	// end inline asm
	mov.u32 	%r7691, %r7550;
	@%p12 bra 	$L__BB0_430;

	// begin inline asm
	{mul.f16x2 %r7691,%r7296,%r3804;
}
	// end inline asm

$L__BB0_430:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3818,%r7691,%r3777,%r2187,%r3800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3823,%r3807,%r3818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3826,%r7422,%r7440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3829,%r3823,%r3826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3832,%r7420,%r3829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3835,%r7550,%r3832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3838,%r7423,%r7424;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3841,%r7299,%r3838;
}
	// end inline asm
	@%p12 bra 	$L__BB0_432;
	bra.uni 	$L__BB0_431;

$L__BB0_432:
	// begin inline asm
	{neg.f16x2 %r7692,%r7549;
}
	// end inline asm
	bra.uni 	$L__BB0_433;

$L__BB0_431:
	// begin inline asm
	{mul.f16x2 %r7692,%r7300,%r3838;
}
	// end inline asm

$L__BB0_433:
	mov.u32 	%r3854, 31;
	mov.u32 	%r3856, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3852,%r7692,%r3854,%r2187,%r3856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3857,%r3841,%r3852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3860,%r7417,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3863,%r3860,%r3857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3866,%r7682,%r3863;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3869,%r7549,%r3866;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3872,%r7418,%r7419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3875,%r7299,%r3872;
}
	// end inline asm
	mov.u32 	%r7693, %r7548;
	@%p12 bra 	$L__BB0_435;

	// begin inline asm
	{mul.f16x2 %r7693,%r7300,%r3872;
}
	// end inline asm

$L__BB0_435:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3884,%r7693,%r3854,%r2187,%r3856;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3889,%r3875,%r3884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3892,%r7417,%r7433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3895,%r3889,%r3892;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3898,%r7415,%r3895;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3901,%r7548,%r3898;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3905,%r7412,%r412,%r2187,%r3856;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3905;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7412;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3912, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3913,%r7413,%r3912;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3916,%r7295,%r3913;
}
	// end inline asm
	@%p12 bra 	$L__BB0_437;
	bra.uni 	$L__BB0_436;

$L__BB0_437:
	// begin inline asm
	{neg.f16x2 %r7694,%r7547;
}
	// end inline asm
	bra.uni 	$L__BB0_438;

$L__BB0_436:
	// begin inline asm
	{mul.f16x2 %r7694,%r7296,%r3913;
}
	// end inline asm

$L__BB0_438:
	mov.u32 	%r3931, 31;
	mov.u32 	%r3954, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3929,%r7694,%r3931,%r2187,%r3954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3934,%r3916,%r3929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3937,%r7411,%r7422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3940,%r3937,%r3934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3943,%r525,%r3940;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7470,%r7547,%r3943;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3950,%r7408,%r412,%r2187,%r3954;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3950;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7408;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3957, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3958,%r7409,%r3957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3961,%r7295,%r3958;
}
	// end inline asm
	mov.u32 	%r7695, %r7546;
	@%p12 bra 	$L__BB0_440;

	// begin inline asm
	{mul.f16x2 %r7695,%r7296,%r3958;
}
	// end inline asm

$L__BB0_440:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3972,%r7695,%r3931,%r2187,%r3954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3977,%r3961,%r3972;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3980,%r7411,%r7441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3983,%r3977,%r3980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3986,%r521,%r3983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7468,%r7546,%r3986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r7413,%r7443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3995,%r7409,%r7419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3998,%r3992,%r3995;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4001,%r7407,%r3998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4004,%r7545,%r4001;
}
	// end inline asm
	selp.b32 	%r1149, %r7545, %r4004, %p12;
	// begin inline asm
	{sub.f16x2 %r4007,%r7412,%r7413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4010,%r7299,%r4007;
}
	// end inline asm
	@%p12 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7696,%r7544;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7696,%r7300,%r4007;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4023, 31;
	mov.u32 	%r4025, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4021,%r7696,%r4023,%r2187,%r4025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4026,%r4010,%r4021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4029,%r7405,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r4029,%r4026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4035,%r517,%r4032;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7469,%r7544,%r4035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4041,%r7408,%r7409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4044,%r7299,%r4041;
}
	// end inline asm
	mov.u32 	%r7697, %r7543;
	@%p12 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7697,%r7300,%r4041;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4053,%r7697,%r4023,%r2187,%r4025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4058,%r4044,%r4053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4061,%r7405,%r7434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4064,%r4058,%r4061;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4067,%r515,%r4064;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7467,%r7543,%r4067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4073,%r7412,%r7442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4076,%r7408,%r7418;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4079,%r4073,%r4076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4082,%r7403,%r4079;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4085,%r7542,%r4082;
}
	// end inline asm
	selp.b32 	%r1161, %r7542, %r4085, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4089,%r7400,%r412,%r2187,%r4025;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4089;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7400;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4096, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4097,%r7401,%r4096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4100,%r7295,%r4097;
}
	// end inline asm
	@%p12 bra 	$L__BB0_447;
	bra.uni 	$L__BB0_446;

$L__BB0_447:
	// begin inline asm
	{neg.f16x2 %r7698,%r7541;
}
	// end inline asm
	bra.uni 	$L__BB0_448;

$L__BB0_446:
	// begin inline asm
	{mul.f16x2 %r7698,%r7296,%r4097;
}
	// end inline asm

$L__BB0_448:
	mov.u32 	%r4115, 31;
	mov.u32 	%r4138, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4113,%r7698,%r4115,%r2187,%r4138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4118,%r4100,%r4113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4121,%r7399,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4124,%r4121,%r4118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4127,%r513,%r4124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7466,%r7541,%r4127;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4134,%r7396,%r412,%r2187,%r4138;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4134;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7396;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4141, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4142,%r7397,%r4141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4145,%r7295,%r4142;
}
	// end inline asm
	mov.u32 	%r7699, %r7540;
	@%p12 bra 	$L__BB0_450;

	// begin inline asm
	{mul.f16x2 %r7699,%r7296,%r4142;
}
	// end inline asm

$L__BB0_450:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4156,%r7699,%r4115,%r2187,%r4138;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4161,%r4145,%r4156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4164,%r7399,%r7427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4167,%r4161,%r4164;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4170,%r7398,%r4167;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4173,%r7540,%r4170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4176,%r7401,%r7429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4179,%r7397,%r7409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4182,%r4176,%r4179;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4185,%r7395,%r4182;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4188,%r7539,%r4185;
}
	// end inline asm
	selp.b32 	%r1173, %r7539, %r4188, %p12;
	// begin inline asm
	{sub.f16x2 %r4191,%r7400,%r7401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4194,%r7299,%r4191;
}
	// end inline asm
	@%p12 bra 	$L__BB0_452;
	bra.uni 	$L__BB0_451;

$L__BB0_452:
	// begin inline asm
	{neg.f16x2 %r7700,%r7538;
}
	// end inline asm
	bra.uni 	$L__BB0_453;

$L__BB0_451:
	// begin inline asm
	{mul.f16x2 %r7700,%r7300,%r4191;
}
	// end inline asm

$L__BB0_453:
	mov.u32 	%r4207, 31;
	mov.u32 	%r4209, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4205,%r7700,%r4207,%r2187,%r4209;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4210,%r4194,%r4205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4213,%r7393,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r4213,%r4210;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4219,%r505,%r4216;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7465,%r7538,%r4219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4225,%r7396,%r7397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4228,%r7299,%r4225;
}
	// end inline asm
	mov.u32 	%r7701, %r7537;
	@%p12 bra 	$L__BB0_455;

	// begin inline asm
	{mul.f16x2 %r7701,%r7300,%r4225;
}
	// end inline asm

$L__BB0_455:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4237,%r7701,%r4207,%r2187,%r4209;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4242,%r4228,%r4237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4245,%r7393,%r7425;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4248,%r4242,%r4245;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4251,%r7392,%r4248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4254,%r7537,%r4251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4257,%r7400,%r7428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4260,%r7396,%r7408;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4263,%r4257,%r4260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4266,%r7391,%r4263;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4269,%r7536,%r4266;
}
	// end inline asm
	selp.b32 	%r1185, %r7536, %r4269, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4273,%r7389,%r412,%r2187,%r4209;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4273;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7389;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4280, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4281,%r7390,%r4280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4284,%r7295,%r4281;
}
	// end inline asm
	@%p12 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7702,%r7535;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7702,%r7296,%r4281;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r4299, 31;
	mov.u32 	%r4301, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4297,%r7702,%r4299,%r2187,%r4301;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4302,%r4284,%r4297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4305,%r7603,%r7399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4308,%r4305,%r4302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4311,%r7681,%r4308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4314,%r7535,%r4311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4317,%r7389,%r7390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4320,%r7299,%r4317;
}
	// end inline asm
	@%p12 bra 	$L__BB0_460;
	bra.uni 	$L__BB0_459;

$L__BB0_460:
	// begin inline asm
	{neg.f16x2 %r7703,%r7534;
}
	// end inline asm
	bra.uni 	$L__BB0_461;

$L__BB0_459:
	// begin inline asm
	{mul.f16x2 %r7703,%r7300,%r4317;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4333, 31;
	mov.u32 	%r4356, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4331,%r7703,%r4333,%r2187,%r4356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4336,%r4320,%r4331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4339,%r7602,%r7393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4342,%r4339,%r4336;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4345,%r7680,%r4342;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4348,%r7534,%r4345;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4352,%r7385,%r412,%r2187,%r4356;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4352;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7385;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4359, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4360,%r7386,%r4359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4363,%r7295,%r4360;
}
	// end inline asm
	mov.u32 	%r7704, %r7533;
	@%p12 bra 	$L__BB0_463;

	// begin inline asm
	{mul.f16x2 %r7704,%r7296,%r4360;
}
	// end inline asm

$L__BB0_463:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4374,%r7704,%r4333,%r2187,%r4356;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4379,%r4363,%r4374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4382,%r7614,%r7422;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4385,%r4379,%r4382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4388,%r7679,%r4385;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7464,%r7533,%r4388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4394,%r7615,%r7424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4397,%r7386,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4400,%r4394,%r4397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4403,%r7678,%r4400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4406,%r7532,%r4403;
}
	// end inline asm
	selp.b32 	%r1203, %r7532, %r4406, %p12;
	// begin inline asm
	{sub.f16x2 %r4409,%r7385,%r7386;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4412,%r7299,%r4409;
}
	// end inline asm
	mov.u32 	%r7705, %r7531;
	@%p12 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7705,%r7300,%r4409;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4423, 31;
	mov.u32 	%r4461, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4421,%r7705,%r4423,%r2187,%r4461;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4426,%r4412,%r4421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4429,%r7612,%r7417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4432,%r4426,%r4429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4435,%r7677,%r4432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7463,%r7531,%r4435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4441,%r7613,%r7423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4444,%r7385,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4447,%r4441,%r4444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4450,%r7676,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4453,%r7530,%r4450;
}
	// end inline asm
	selp.b32 	%r1209, %r7530, %r4453, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4457,%r7381,%r412,%r2187,%r4461;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4457;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7381;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4464, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4465,%r7382,%r4464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4468,%r7295,%r4465;
}
	// end inline asm
	@%p12 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7706,%r7529;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7706,%r7296,%r4465;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4483, 31;
	mov.u32 	%r4506, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4481,%r7706,%r4483,%r2187,%r4506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4486,%r4468,%r4481;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4489,%r7380,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4492,%r4489,%r4486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4495,%r7675,%r4492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7462,%r7529,%r4495;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4502,%r7377,%r412,%r2187,%r4506;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4502;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7377;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4509, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4510,%r7378,%r4509;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4513,%r7295,%r4510;
}
	// end inline asm
	mov.u32 	%r7707, %r7528;
	@%p12 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7707,%r7296,%r4510;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4524,%r7707,%r4483,%r2187,%r4506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4529,%r4513,%r4524;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4532,%r7380,%r7411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4535,%r4529,%r4532;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4538,%r7410,%r4535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7460,%r7528,%r4538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4544,%r7382,%r7413;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4547,%r7378,%r7386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4550,%r4544,%r4547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4553,%r487,%r4550;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4556,%r7527,%r4553;
}
	// end inline asm
	selp.b32 	%r7458, %r7527, %r4556, %p12;
	// begin inline asm
	{sub.f16x2 %r4559,%r7381,%r7382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r7299,%r4559;
}
	// end inline asm
	@%p12 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7708,%r7526;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7708,%r7300,%r4559;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4575, 31;
	mov.u32 	%r4577, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4573,%r7708,%r4575,%r2187,%r4577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4578,%r4562,%r4573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4581,%r7375,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r4581,%r4578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4587,%r7674,%r4584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7461,%r7526,%r4587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4593,%r7377,%r7378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4596,%r7299,%r4593;
}
	// end inline asm
	mov.u32 	%r7709, %r7525;
	@%p12 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7709,%r7300,%r4593;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4605,%r7709,%r4575,%r2187,%r4577;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4610,%r4596,%r4605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4613,%r7375,%r7405;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4616,%r4610,%r4613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4619,%r7404,%r4616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7459,%r7525,%r4619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4625,%r7381,%r7412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4628,%r7377,%r7385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4631,%r4625,%r4628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4634,%r484,%r4631;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4637,%r7524,%r4634;
}
	// end inline asm
	selp.b32 	%r7457, %r7524, %r4637, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4641,%r7371,%r412,%r2187,%r4577;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4641;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7371;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4648, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4649,%r7372,%r4648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4652,%r7295,%r4649;
}
	// end inline asm
	@%p12 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7710,%r7523;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7710,%r7296,%r4649;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4667, 31;
	mov.u32 	%r4690, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4665,%r7710,%r4667,%r2187,%r4690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4670,%r4652,%r4665;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4673,%r7599,%r7380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4676,%r4673,%r4670;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4679,%r7673,%r4676;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7456,%r7523,%r4679;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4686,%r7369,%r412,%r2187,%r4690;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4686;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7369;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4693, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4694,%r7370,%r4693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4697,%r7295,%r4694;
}
	// end inline asm
	mov.u32 	%r7711, %r7522;
	@%p12 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7711,%r7296,%r4694;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4708,%r7711,%r4667,%r2187,%r4690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4713,%r4697,%r4708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4716,%r7599,%r7399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4719,%r4713,%r4716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4722,%r7672,%r4719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7454,%r7522,%r4722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4728,%r7372,%r7401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4731,%r7370,%r7378;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4734,%r4728,%r4731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4737,%r479,%r4734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4740,%r7521,%r4737;
}
	// end inline asm
	selp.b32 	%r7452, %r7521, %r4740, %p12;
	// begin inline asm
	{sub.f16x2 %r4743,%r7371,%r7372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4746,%r7299,%r4743;
}
	// end inline asm
	@%p12 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7712,%r7520;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7712,%r7300,%r4743;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4759, 31;
	mov.u32 	%r4761, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4757,%r7712,%r4759,%r2187,%r4761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4762,%r4746,%r4757;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4765,%r7598,%r7375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4768,%r4765,%r4762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4771,%r7671,%r4768;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7455,%r7520,%r4771;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r7369,%r7370;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4780,%r7299,%r4777;
}
	// end inline asm
	mov.u32 	%r7713, %r7519;
	@%p12 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7713,%r7300,%r4777;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4789,%r7713,%r4759,%r2187,%r4761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4794,%r4780,%r4789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4797,%r7598,%r7393;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4800,%r4794,%r4797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4803,%r7670,%r4800;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7453,%r7519,%r4803;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4809,%r7371,%r7400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4812,%r7369,%r7377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4815,%r4809,%r4812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4818,%r478,%r4815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4821,%r7518,%r4818;
}
	// end inline asm
	selp.b32 	%r7451, %r7518, %r4821, %p12;
	// begin inline asm
	{sub.f16x2 %r4824,%r7597,%r7390;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4827,%r7601,%r7370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4830,%r4824,%r4827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4833,%r7669,%r4830;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4836,%r7517,%r4833;
}
	// end inline asm
	selp.b32 	%r1258, %r7517, %r4836, %p12;
	// begin inline asm
	{sub.f16x2 %r4839,%r7596,%r7389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4842,%r7600,%r7369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r4839,%r4842;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4848,%r7668,%r4845;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4851,%r7516,%r4848;
}
	// end inline asm
	selp.b32 	%r1259, %r7516, %r4851, %p12;
	// begin inline asm
	{shfl.sync.idx.b32 %r4855,%r7363,%r412,%r2187,%r4761;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4855;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7363;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4862, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4863,%r7364,%r4862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4866,%r7295,%r4863;
}
	// end inline asm
	mov.u32 	%r7714, %r7515;
	@%p12 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7714,%r7296,%r4863;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4879, 31;
	mov.u32 	%r4881, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4877,%r7714,%r4879,%r2187,%r4881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4882,%r4866,%r4877;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4885,%r7608,%r7380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4888,%r4882,%r4885;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4891,%r7667,%r4888;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7450,%r7515,%r4891;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4897,%r7609,%r7382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4900,%r7364,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4903,%r4897,%r4900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4906,%r7666,%r4903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4909,%r7514,%r4906;
}
	// end inline asm
	selp.b32 	%r7448, %r7514, %r4909, %p12;
	// begin inline asm
	{sub.f16x2 %r4912,%r7363,%r7364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4915,%r7299,%r4912;
}
	// end inline asm
	mov.u32 	%r7715, %r7513;
	@%p12 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7715,%r7300,%r4912;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4924,%r7715,%r4879,%r2187,%r4881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4929,%r4915,%r4924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r7606,%r7375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4935,%r4929,%r4932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4938,%r7665,%r4935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7449,%r7513,%r4938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4944,%r7607,%r7381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4947,%r7363,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4950,%r4944,%r4947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4953,%r7664,%r4950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4956,%r7512,%r4953;
}
	// end inline asm
	selp.b32 	%r7447, %r7512, %r4956, %p12;
	// begin inline asm
	{sub.f16x2 %r4959,%r7594,%r7372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4962,%r7595,%r7364;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4965,%r4959,%r4962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4968,%r7663,%r4965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4971,%r7511,%r4968;
}
	// end inline asm
	selp.b32 	%r7446, %r7511, %r4971, %p12;
	// begin inline asm
	{sub.f16x2 %r4974,%r7592,%r7371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4977,%r7593,%r7363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4980,%r4974,%r4977;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4983,%r7662,%r4980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4986,%r7510,%r4983;
}
	// end inline asm
	selp.b32 	%r7445, %r7510, %r4986, %p12;
	bar.sync 	0;
	ld.param.u64 	%rd316, [%rd1+160];
	cvta.to.global.u64 	%rd33, %rd316;
	setp.lt.s32 	%p256, %r637, %r1692;
	or.pred  	%p258, %p256, %p215;
	mad.lo.s32 	%r4991, %r1694, %r1693, %r1692;
	setp.ge.s32 	%p259, %r637, %r4991;
	or.pred  	%p260, %p258, %p259;
	@%p260 bra 	$L__BB0_539;

	sub.s32 	%r1274, %r637, %r1692;
	rem.s32 	%r4992, %r1274, %r1693;
	setp.ne.s32 	%p261, %r4992, 0;
	@%p261 bra 	$L__BB0_539;

	div.s32 	%r4993, %r1274, %r1693;
	mul.lo.s32 	%r4994, %r4993, %r1686;
	mul.lo.s32 	%r1275, %r4994, 3;
	add.s32 	%r1276, %r635, -2;
	add.s32 	%r4995, %r1275, %r1276;
	mul.lo.s32 	%r1277, %r4995, %r1687;
	@%p12 bra 	$L__BB0_493;

	add.s32 	%r5000, %r1277, %r636;
	mul.lo.s32 	%r5001, %r5000, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r5002, %r378, %r5001;
	mul.wide.s32 	%rd317, %r5002, 4;
	add.s64 	%rd318, %rd33, %rd317;
	st.global.f32 	[%rd318], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r5003, %r379, %r5001;
	mul.wide.s32 	%rd319, %r5003, 4;
	add.s64 	%rd320, %rd33, %rd319;
	st.global.f32 	[%rd320], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3636;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r5004, %r392, %r5001;
	mul.wide.s32 	%rd321, %r5004, 4;
	add.s64 	%rd322, %rd33, %rd321;
	st.global.f32 	[%rd322], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3636;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r5005, %r393, %r5001;
	mul.wide.s32 	%rd323, %r5005, 4;
	add.s64 	%rd324, %rd33, %rd323;
	st.global.f32 	[%rd324], %f398;

$L__BB0_493:
	add.s32 	%r1278, %r1275, %r1686;
	@%p12 bra 	$L__BB0_495;

	add.s32 	%r5010, %r1278, %r1276;
	mad.lo.s32 	%r5011, %r5010, %r1687, %r636;
	mul.lo.s32 	%r5012, %r5011, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3602;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r5013, %r378, %r5012;
	mul.wide.s32 	%rd325, %r5013, 4;
	add.s64 	%rd326, %rd33, %rd325;
	st.global.f32 	[%rd326], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3602;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r5014, %r379, %r5012;
	mul.wide.s32 	%rd327, %r5014, 4;
	add.s64 	%rd328, %rd33, %rd327;
	st.global.f32 	[%rd328], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3668;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r5015, %r392, %r5012;
	mul.wide.s32 	%rd329, %r5015, 4;
	add.s64 	%rd330, %rd33, %rd329;
	st.global.f32 	[%rd330], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3668;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r5016, %r393, %r5012;
	mul.wide.s32 	%rd331, %r5016, 4;
	add.s64 	%rd332, %rd33, %rd331;
	st.global.f32 	[%rd332], %f402;

$L__BB0_495:
	add.s32 	%r1279, %r636, 1;
	@%p12 bra 	$L__BB0_497;

	add.s32 	%r5021, %r1277, %r1279;
	mul.lo.s32 	%r5022, %r5021, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r5023, %r378, %r5022;
	mul.wide.s32 	%rd333, %r5023, 4;
	add.s64 	%rd334, %rd33, %rd333;
	st.global.f32 	[%rd334], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r5024, %r379, %r5022;
	mul.wide.s32 	%rd335, %r5024, 4;
	add.s64 	%rd336, %rd33, %rd335;
	st.global.f32 	[%rd336], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3747;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r5025, %r392, %r5022;
	mul.wide.s32 	%rd337, %r5025, 4;
	add.s64 	%rd338, %rd33, %rd337;
	st.global.f32 	[%rd338], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3747;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r5026, %r393, %r5022;
	mul.wide.s32 	%rd339, %r5026, 4;
	add.s64 	%rd340, %rd33, %rd339;
	st.global.f32 	[%rd340], %f406;

$L__BB0_497:
	add.s32 	%r1280, %r635, -1;
	add.s32 	%r5027, %r1275, %r1280;
	mul.lo.s32 	%r1281, %r5027, %r1687;
	add.s32 	%r1282, %r636, -1;
	@%p12 bra 	$L__BB0_499;

	add.s32 	%r5032, %r1281, %r1282;
	mul.lo.s32 	%r5033, %r5032, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5034, %r378, %r5033;
	mul.wide.s32 	%rd341, %r5034, 4;
	add.s64 	%rd342, %rd33, %rd341;
	st.global.f32 	[%rd342], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3792;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5035, %r379, %r5033;
	mul.wide.s32 	%rd343, %r5035, 4;
	add.s64 	%rd344, %rd33, %rd343;
	st.global.f32 	[%rd344], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3869;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5036, %r392, %r5033;
	mul.wide.s32 	%rd345, %r5036, 4;
	add.s64 	%rd346, %rd33, %rd345;
	st.global.f32 	[%rd346], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3869;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5037, %r393, %r5033;
	mul.wide.s32 	%rd347, %r5037, 4;
	add.s64 	%rd348, %rd33, %rd347;
	st.global.f32 	[%rd348], %f410;

$L__BB0_499:
	add.s32 	%r5038, %r1278, %r1280;
	mul.lo.s32 	%r1283, %r5038, %r1687;
	@%p12 bra 	$L__BB0_501;

	add.s32 	%r5043, %r1283, %r1282;
	mul.lo.s32 	%r5044, %r5043, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3835;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5045, %r378, %r5044;
	mul.wide.s32 	%rd349, %r5045, 4;
	add.s64 	%rd350, %rd33, %rd349;
	st.global.f32 	[%rd350], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3835;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5046, %r379, %r5044;
	mul.wide.s32 	%rd351, %r5046, 4;
	add.s64 	%rd352, %rd33, %rd351;
	st.global.f32 	[%rd352], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3901;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5047, %r392, %r5044;
	mul.wide.s32 	%rd353, %r5047, 4;
	add.s64 	%rd354, %rd33, %rd353;
	st.global.f32 	[%rd354], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3901;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5048, %r393, %r5044;
	mul.wide.s32 	%rd355, %r5048, 4;
	add.s64 	%rd356, %rd33, %rd355;
	st.global.f32 	[%rd356], %f414;

$L__BB0_501:
	@%p12 bra 	$L__BB0_503;

	add.s32 	%r5053, %r1281, %r636;
	mul.lo.s32 	%r5054, %r5053, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5055, %r378, %r5054;
	mul.wide.s32 	%rd357, %r5055, 4;
	add.s64 	%rd358, %rd33, %rd357;
	st.global.f32 	[%rd358], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7470;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5056, %r379, %r5054;
	mul.wide.s32 	%rd359, %r5056, 4;
	add.s64 	%rd360, %rd33, %rd359;
	st.global.f32 	[%rd360], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5057, %r392, %r5054;
	mul.wide.s32 	%rd361, %r5057, 4;
	add.s64 	%rd362, %rd33, %rd361;
	st.global.f32 	[%rd362], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7469;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5058, %r393, %r5054;
	mul.wide.s32 	%rd363, %r5058, 4;
	add.s64 	%rd364, %rd33, %rd363;
	st.global.f32 	[%rd364], %f418;

$L__BB0_503:
	@%p12 bra 	$L__BB0_505;

	add.s32 	%r5063, %r1283, %r636;
	mul.lo.s32 	%r5064, %r5063, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5065, %r378, %r5064;
	mul.wide.s32 	%rd365, %r5065, 4;
	add.s64 	%rd366, %rd33, %rd365;
	st.global.f32 	[%rd366], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7468;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5066, %r379, %r5064;
	mul.wide.s32 	%rd367, %r5066, 4;
	add.s64 	%rd368, %rd33, %rd367;
	st.global.f32 	[%rd368], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5067, %r392, %r5064;
	mul.wide.s32 	%rd369, %r5067, 4;
	add.s64 	%rd370, %rd33, %rd369;
	st.global.f32 	[%rd370], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7467;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5068, %r393, %r5064;
	mul.wide.s32 	%rd371, %r5068, 4;
	add.s64 	%rd372, %rd33, %rd371;
	st.global.f32 	[%rd372], %f422;

$L__BB0_505:
	add.s32 	%r1284, %r1278, %r1686;
	add.s32 	%r5069, %r1284, %r1280;
	mul.lo.s32 	%r1285, %r5069, %r1687;
	@%p12 bra 	$L__BB0_507;

	add.s32 	%r5074, %r1285, %r636;
	mul.lo.s32 	%r5075, %r5074, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5076, %r378, %r5075;
	mul.wide.s32 	%rd373, %r5076, 4;
	add.s64 	%rd374, %rd33, %rd373;
	st.global.f32 	[%rd374], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1149;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5077, %r379, %r5075;
	mul.wide.s32 	%rd375, %r5077, 4;
	add.s64 	%rd376, %rd33, %rd375;
	st.global.f32 	[%rd376], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5078, %r392, %r5075;
	mul.wide.s32 	%rd377, %r5078, 4;
	add.s64 	%rd378, %rd33, %rd377;
	st.global.f32 	[%rd378], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1161;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5079, %r393, %r5075;
	mul.wide.s32 	%rd379, %r5079, 4;
	add.s64 	%rd380, %rd33, %rd379;
	st.global.f32 	[%rd380], %f426;

$L__BB0_507:
	@%p12 bra 	$L__BB0_509;

	add.s32 	%r5084, %r1281, %r1279;
	mul.lo.s32 	%r5085, %r5084, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5086, %r378, %r5085;
	mul.wide.s32 	%rd381, %r5086, 4;
	add.s64 	%rd382, %rd33, %rd381;
	st.global.f32 	[%rd382], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7466;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5087, %r379, %r5085;
	mul.wide.s32 	%rd383, %r5087, 4;
	add.s64 	%rd384, %rd33, %rd383;
	st.global.f32 	[%rd384], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5088, %r392, %r5085;
	mul.wide.s32 	%rd385, %r5088, 4;
	add.s64 	%rd386, %rd33, %rd385;
	st.global.f32 	[%rd386], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7465;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5089, %r393, %r5085;
	mul.wide.s32 	%rd387, %r5089, 4;
	add.s64 	%rd388, %rd33, %rd387;
	st.global.f32 	[%rd388], %f430;

$L__BB0_509:
	@%p12 bra 	$L__BB0_511;

	add.s32 	%r5094, %r1283, %r1279;
	mul.lo.s32 	%r5095, %r5094, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4173;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5096, %r378, %r5095;
	mul.wide.s32 	%rd389, %r5096, 4;
	add.s64 	%rd390, %rd33, %rd389;
	st.global.f32 	[%rd390], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4173;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5097, %r379, %r5095;
	mul.wide.s32 	%rd391, %r5097, 4;
	add.s64 	%rd392, %rd33, %rd391;
	st.global.f32 	[%rd392], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4254;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5098, %r392, %r5095;
	mul.wide.s32 	%rd393, %r5098, 4;
	add.s64 	%rd394, %rd33, %rd393;
	st.global.f32 	[%rd394], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4254;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5099, %r393, %r5095;
	mul.wide.s32 	%rd395, %r5099, 4;
	add.s64 	%rd396, %rd33, %rd395;
	st.global.f32 	[%rd396], %f434;

$L__BB0_511:
	@%p12 bra 	$L__BB0_513;

	add.s32 	%r5104, %r1285, %r1279;
	mul.lo.s32 	%r5105, %r5104, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5106, %r378, %r5105;
	mul.wide.s32 	%rd397, %r5106, 4;
	add.s64 	%rd398, %rd33, %rd397;
	st.global.f32 	[%rd398], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1173;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5107, %r379, %r5105;
	mul.wide.s32 	%rd399, %r5107, 4;
	add.s64 	%rd400, %rd33, %rd399;
	st.global.f32 	[%rd400], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5108, %r392, %r5105;
	mul.wide.s32 	%rd401, %r5108, 4;
	add.s64 	%rd402, %rd33, %rd401;
	st.global.f32 	[%rd402], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1185;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5109, %r393, %r5105;
	mul.wide.s32 	%rd403, %r5109, 4;
	add.s64 	%rd404, %rd33, %rd403;
	st.global.f32 	[%rd404], %f438;

$L__BB0_513:
	add.s32 	%r1286, %r636, 2;
	@%p12 bra 	$L__BB0_515;

	add.s32 	%r5114, %r1281, %r1286;
	mul.lo.s32 	%r5115, %r5114, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4314;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5116, %r378, %r5115;
	mul.wide.s32 	%rd405, %r5116, 4;
	add.s64 	%rd406, %rd33, %rd405;
	st.global.f32 	[%rd406], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4314;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5117, %r379, %r5115;
	mul.wide.s32 	%rd407, %r5117, 4;
	add.s64 	%rd408, %rd33, %rd407;
	st.global.f32 	[%rd408], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4348;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5118, %r392, %r5115;
	mul.wide.s32 	%rd409, %r5118, 4;
	add.s64 	%rd410, %rd33, %rd409;
	st.global.f32 	[%rd410], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4348;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5119, %r393, %r5115;
	mul.wide.s32 	%rd411, %r5119, 4;
	add.s64 	%rd412, %rd33, %rd411;
	st.global.f32 	[%rd412], %f442;

$L__BB0_515:
	add.s32 	%r5120, %r1278, %r635;
	mul.lo.s32 	%r1287, %r5120, %r1687;
	@%p12 bra 	$L__BB0_517;

	add.s32 	%r5125, %r1287, %r1282;
	mul.lo.s32 	%r5126, %r5125, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5127, %r378, %r5126;
	mul.wide.s32 	%rd413, %r5127, 4;
	add.s64 	%rd414, %rd33, %rd413;
	st.global.f32 	[%rd414], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7464;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5128, %r379, %r5126;
	mul.wide.s32 	%rd415, %r5128, 4;
	add.s64 	%rd416, %rd33, %rd415;
	st.global.f32 	[%rd416], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5129, %r392, %r5126;
	mul.wide.s32 	%rd417, %r5129, 4;
	add.s64 	%rd418, %rd33, %rd417;
	st.global.f32 	[%rd418], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7463;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5130, %r393, %r5126;
	mul.wide.s32 	%rd419, %r5130, 4;
	add.s64 	%rd420, %rd33, %rd419;
	st.global.f32 	[%rd420], %f446;

$L__BB0_517:
	add.s32 	%r5131, %r1284, %r635;
	mul.lo.s32 	%r1288, %r5131, %r1687;
	@%p12 bra 	$L__BB0_519;

	add.s32 	%r5136, %r1288, %r1282;
	mul.lo.s32 	%r5137, %r5136, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5138, %r378, %r5137;
	mul.wide.s32 	%rd421, %r5138, 4;
	add.s64 	%rd422, %rd33, %rd421;
	st.global.f32 	[%rd422], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1203;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5139, %r379, %r5137;
	mul.wide.s32 	%rd423, %r5139, 4;
	add.s64 	%rd424, %rd33, %rd423;
	st.global.f32 	[%rd424], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5140, %r392, %r5137;
	mul.wide.s32 	%rd425, %r5140, 4;
	add.s64 	%rd426, %rd33, %rd425;
	st.global.f32 	[%rd426], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1209;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5141, %r393, %r5137;
	mul.wide.s32 	%rd427, %r5141, 4;
	add.s64 	%rd428, %rd33, %rd427;
	st.global.f32 	[%rd428], %f450;

$L__BB0_519:
	add.s32 	%r5142, %r1275, %r635;
	mul.lo.s32 	%r1289, %r5142, %r1687;
	@%p12 bra 	$L__BB0_521;

	add.s32 	%r5147, %r1289, %r636;
	mul.lo.s32 	%r5148, %r5147, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5149, %r378, %r5148;
	mul.wide.s32 	%rd429, %r5149, 4;
	add.s64 	%rd430, %rd33, %rd429;
	st.global.f32 	[%rd430], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7462;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5150, %r379, %r5148;
	mul.wide.s32 	%rd431, %r5150, 4;
	add.s64 	%rd432, %rd33, %rd431;
	st.global.f32 	[%rd432], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5151, %r392, %r5148;
	mul.wide.s32 	%rd433, %r5151, 4;
	add.s64 	%rd434, %rd33, %rd433;
	st.global.f32 	[%rd434], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7461;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5152, %r393, %r5148;
	mul.wide.s32 	%rd435, %r5152, 4;
	add.s64 	%rd436, %rd33, %rd435;
	st.global.f32 	[%rd436], %f454;

$L__BB0_521:
	@%p12 bra 	$L__BB0_523;

	add.s32 	%r5157, %r1287, %r636;
	mul.lo.s32 	%r5158, %r5157, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5159, %r378, %r5158;
	mul.wide.s32 	%rd437, %r5159, 4;
	add.s64 	%rd438, %rd33, %rd437;
	st.global.f32 	[%rd438], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7460;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5160, %r379, %r5158;
	mul.wide.s32 	%rd439, %r5160, 4;
	add.s64 	%rd440, %rd33, %rd439;
	st.global.f32 	[%rd440], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5161, %r392, %r5158;
	mul.wide.s32 	%rd441, %r5161, 4;
	add.s64 	%rd442, %rd33, %rd441;
	st.global.f32 	[%rd442], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7459;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5162, %r393, %r5158;
	mul.wide.s32 	%rd443, %r5162, 4;
	add.s64 	%rd444, %rd33, %rd443;
	st.global.f32 	[%rd444], %f458;

$L__BB0_523:
	@%p12 bra 	$L__BB0_525;

	add.s32 	%r5167, %r1288, %r636;
	mul.lo.s32 	%r5168, %r5167, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5169, %r378, %r5168;
	mul.wide.s32 	%rd445, %r5169, 4;
	add.s64 	%rd446, %rd33, %rd445;
	st.global.f32 	[%rd446], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7458;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5170, %r379, %r5168;
	mul.wide.s32 	%rd447, %r5170, 4;
	add.s64 	%rd448, %rd33, %rd447;
	st.global.f32 	[%rd448], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5171, %r392, %r5168;
	mul.wide.s32 	%rd449, %r5171, 4;
	add.s64 	%rd450, %rd33, %rd449;
	st.global.f32 	[%rd450], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7457;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5172, %r393, %r5168;
	mul.wide.s32 	%rd451, %r5172, 4;
	add.s64 	%rd452, %rd33, %rd451;
	st.global.f32 	[%rd452], %f462;

$L__BB0_525:
	@%p12 bra 	$L__BB0_527;

	add.s32 	%r5177, %r1289, %r1279;
	mul.lo.s32 	%r5178, %r5177, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5179, %r378, %r5178;
	mul.wide.s32 	%rd453, %r5179, 4;
	add.s64 	%rd454, %rd33, %rd453;
	st.global.f32 	[%rd454], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7456;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5180, %r379, %r5178;
	mul.wide.s32 	%rd455, %r5180, 4;
	add.s64 	%rd456, %rd33, %rd455;
	st.global.f32 	[%rd456], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5181, %r392, %r5178;
	mul.wide.s32 	%rd457, %r5181, 4;
	add.s64 	%rd458, %rd33, %rd457;
	st.global.f32 	[%rd458], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7455;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5182, %r393, %r5178;
	mul.wide.s32 	%rd459, %r5182, 4;
	add.s64 	%rd460, %rd33, %rd459;
	st.global.f32 	[%rd460], %f466;

$L__BB0_527:
	@%p12 bra 	$L__BB0_529;

	add.s32 	%r5187, %r1287, %r1279;
	mul.lo.s32 	%r5188, %r5187, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5189, %r378, %r5188;
	mul.wide.s32 	%rd461, %r5189, 4;
	add.s64 	%rd462, %rd33, %rd461;
	st.global.f32 	[%rd462], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7454;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5190, %r379, %r5188;
	mul.wide.s32 	%rd463, %r5190, 4;
	add.s64 	%rd464, %rd33, %rd463;
	st.global.f32 	[%rd464], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5191, %r392, %r5188;
	mul.wide.s32 	%rd465, %r5191, 4;
	add.s64 	%rd466, %rd33, %rd465;
	st.global.f32 	[%rd466], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7453;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5192, %r393, %r5188;
	mul.wide.s32 	%rd467, %r5192, 4;
	add.s64 	%rd468, %rd33, %rd467;
	st.global.f32 	[%rd468], %f470;

$L__BB0_529:
	@%p12 bra 	$L__BB0_531;

	add.s32 	%r5197, %r1288, %r1279;
	mul.lo.s32 	%r5198, %r5197, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5199, %r378, %r5198;
	mul.wide.s32 	%rd469, %r5199, 4;
	add.s64 	%rd470, %rd33, %rd469;
	st.global.f32 	[%rd470], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7452;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5200, %r379, %r5198;
	mul.wide.s32 	%rd471, %r5200, 4;
	add.s64 	%rd472, %rd33, %rd471;
	st.global.f32 	[%rd472], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5201, %r392, %r5198;
	mul.wide.s32 	%rd473, %r5201, 4;
	add.s64 	%rd474, %rd33, %rd473;
	st.global.f32 	[%rd474], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7451;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5202, %r393, %r5198;
	mul.wide.s32 	%rd475, %r5202, 4;
	add.s64 	%rd476, %rd33, %rd475;
	st.global.f32 	[%rd476], %f474;

$L__BB0_531:
	add.s32 	%r1290, %r1288, %r1286;
	@%p12 bra 	$L__BB0_533;

	mul.lo.s32 	%r5207, %r1290, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5208, %r378, %r5207;
	mul.wide.s32 	%rd477, %r5208, 4;
	add.s64 	%rd478, %rd33, %rd477;
	st.global.f32 	[%rd478], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1258;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5209, %r379, %r5207;
	mul.wide.s32 	%rd479, %r5209, 4;
	add.s64 	%rd480, %rd33, %rd479;
	st.global.f32 	[%rd480], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5210, %r392, %r5207;
	mul.wide.s32 	%rd481, %r5210, 4;
	add.s64 	%rd482, %rd33, %rd481;
	st.global.f32 	[%rd482], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1259;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5211, %r393, %r5207;
	mul.wide.s32 	%rd483, %r5211, 4;
	add.s64 	%rd484, %rd33, %rd483;
	st.global.f32 	[%rd484], %f478;

$L__BB0_533:
	add.s32 	%r1291, %r635, 1;
	@%p12 bra 	$L__BB0_535;

	add.s32 	%r5216, %r1278, %r1291;
	mad.lo.s32 	%r5217, %r5216, %r1687, %r636;
	mul.lo.s32 	%r5218, %r5217, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5219, %r378, %r5218;
	mul.wide.s32 	%rd485, %r5219, 4;
	add.s64 	%rd486, %rd33, %rd485;
	st.global.f32 	[%rd486], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7450;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5220, %r379, %r5218;
	mul.wide.s32 	%rd487, %r5220, 4;
	add.s64 	%rd488, %rd33, %rd487;
	st.global.f32 	[%rd488], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5221, %r392, %r5218;
	mul.wide.s32 	%rd489, %r5221, 4;
	add.s64 	%rd490, %rd33, %rd489;
	st.global.f32 	[%rd490], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7449;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5222, %r393, %r5218;
	mul.wide.s32 	%rd491, %r5222, 4;
	add.s64 	%rd492, %rd33, %rd491;
	st.global.f32 	[%rd492], %f482;

$L__BB0_535:
	add.s32 	%r5223, %r1284, %r1291;
	mul.lo.s32 	%r1292, %r5223, %r1687;
	@%p12 bra 	$L__BB0_537;

	add.s32 	%r5228, %r1292, %r636;
	mul.lo.s32 	%r5229, %r5228, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5230, %r378, %r5229;
	mul.wide.s32 	%rd493, %r5230, 4;
	add.s64 	%rd494, %rd33, %rd493;
	st.global.f32 	[%rd494], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7448;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5231, %r379, %r5229;
	mul.wide.s32 	%rd495, %r5231, 4;
	add.s64 	%rd496, %rd33, %rd495;
	st.global.f32 	[%rd496], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5232, %r392, %r5229;
	mul.wide.s32 	%rd497, %r5232, 4;
	add.s64 	%rd498, %rd33, %rd497;
	st.global.f32 	[%rd498], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7447;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5233, %r393, %r5229;
	mul.wide.s32 	%rd499, %r5233, 4;
	add.s64 	%rd500, %rd33, %rd499;
	st.global.f32 	[%rd500], %f486;

$L__BB0_537:
	add.s32 	%r1293, %r1292, %r1279;
	@%p12 bra 	$L__BB0_539;

	mul.lo.s32 	%r5238, %r1293, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5239, %r378, %r5238;
	mul.wide.s32 	%rd501, %r5239, 4;
	add.s64 	%rd502, %rd33, %rd501;
	st.global.f32 	[%rd502], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7446;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5240, %r379, %r5238;
	mul.wide.s32 	%rd503, %r5240, 4;
	add.s64 	%rd504, %rd33, %rd503;
	st.global.f32 	[%rd504], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7445;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5241, %r392, %r5238;
	mul.wide.s32 	%rd505, %r5241, 4;
	add.s64 	%rd506, %rd33, %rd505;
	st.global.f32 	[%rd506], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7445;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5242, %r393, %r5238;
	mul.wide.s32 	%rd507, %r5242, 4;
	add.s64 	%rd508, %rd33, %rd507;
	st.global.f32 	[%rd508], %f490;

$L__BB0_539:
	setp.eq.s32 	%p286, %r23, %r2083;
	@%p286 bra 	$L__BB0_541;

	mad.lo.s32 	%r5243, %r1682, %r23, %r24;
	mov.u32 	%r5244, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5245, %r5243, 1280, %r5244;
	add.s32 	%r5246, %r5245, -256;
	shl.b32 	%r5247, %r28, 4;
	add.s32 	%r5248, %r5246, %r5247;
	st.shared.v4.u32 	[%r5248+256], {%r3792, %r3869, %r1203, %r1209};
	st.shared.v4.u32 	[%r5248+1024], {%r3559, %r3636, %r1149, %r1161};
	shl.b32 	%r5249, %r28, 3;
	add.s32 	%r5250, %r5246, %r5249;
	st.shared.v2.u32 	[%r5250+768], {%r3835, %r3901};

$L__BB0_541:
	setp.eq.s32 	%p287, %r24, %r2088;
	@%p287 bra 	$L__BB0_545;

	mad.lo.s32 	%r5254, %r1681, 384, -64;
	mul.lo.s32 	%r5255, %r5254, %r24;
	mad.lo.s32 	%r5257, %r2084, %r2083, %r5255;
	mad.lo.s32 	%r5258, %r2484, 384, %r5257;
	shl.b32 	%r5259, %r5258, 2;
	mov.u32 	%r5260, _ZN6kernel5shmemE;
	add.s32 	%r5261, %r5260, %r5259;
	add.s32 	%r5262, %r5261, -256;
	shl.b32 	%r5263, %r28, 4;
	add.s32 	%r5264, %r5262, %r5263;
	st.shared.v4.u32 	[%r5264+256], {%r3713, %r3747, %r1173, %r1185};
	st.shared.v4.u32 	[%r5264+1024], {%r4314, %r4348, %r1258, %r1259};
	shl.b32 	%r5265, %r28, 3;
	add.s32 	%r1297, %r5262, %r5265;
	@%p286 bra 	$L__BB0_544;

	st.shared.v2.u32 	[%r1297], {%r3602, %r3668};

$L__BB0_544:
	st.shared.v2.u32 	[%r1297+768], {%r4173, %r4254};

$L__BB0_545:
	setp.ne.s32 	%p289, %r23, %r2083;
	ld.param.u64 	%rd509, [%rd1+80];
	cvta.to.global.u64 	%rd34, %rd509;
	@%p289 bra 	$L__BB0_547;

	mad.lo.s32 	%r5267, %r633, %r1684, %r26;
	mul.lo.s32 	%r5268, %r1682, %r5267;
	mul.lo.s32 	%r5269, %r5268, 768;
	mad.lo.s32 	%r5270, %r24, 384, %r5269;
	add.s32 	%r5271, %r5270, -64;
	mul.wide.s32 	%rd510, %r5271, 4;
	add.s64 	%rd511, %rd34, %rd510;
	add.s64 	%rd513, %rd511, %rd275;
	st.global.v4.u32 	[%rd513+256], {%r3792, %r3869, %r1203, %r1209};
	st.global.v4.u32 	[%rd513+1024], {%r3559, %r3636, %r1149, %r1161};
	add.s64 	%rd515, %rd511, %rd277;
	st.global.v2.u32 	[%rd515+768], {%r3835, %r3901};
	st.global.v2.u32 	[%rd515+1536], {%r3602, %r3668};

$L__BB0_547:
	setp.ne.s32 	%p290, %r24, %r2088;
	@%p290 bra 	$L__BB0_552;

	ld.param.u64 	%rd560, [%rd1+80];
	cvta.to.global.u64 	%rd559, %rd560;
	mad.lo.s32 	%r5274, %r634, %r1683, %r25;
	mul.lo.s32 	%r5278, %r5274, %r1738;
	mad.lo.s32 	%r5281, %r2484, 384, %r5278;
	add.s32 	%r5282, %r5281, -64;
	mad.lo.s32 	%r5285, %r1740, %r51, %r5282;
	mul.wide.s32 	%rd516, %r5285, 4;
	add.s64 	%rd517, %rd559, %rd516;
	add.s64 	%rd519, %rd517, %rd275;
	st.global.v4.u32 	[%rd519+256], {%r3713, %r3747, %r1173, %r1185};
	st.global.v4.u32 	[%rd519+1024], {%r4314, %r4348, %r1258, %r1259};
	add.s64 	%rd35, %rd517, %rd277;
	@%p286 bra 	$L__BB0_550;

	st.global.v2.u32 	[%rd35], {%r3602, %r3668};

$L__BB0_550:
	st.global.v2.u32 	[%rd35+768], {%r4173, %r4254};
	@%p205 bra 	$L__BB0_552;

	st.global.v2.u32 	[%rd35+1536], {%r7635, %r7634};

$L__BB0_552:
	setp.ge.s32 	%p293, %r23, %r2083;
	@%p293 bra 	$L__BB0_554;

	mul.lo.s32 	%r5286, %r1682, 320;
	mul.lo.s32 	%r5287, %r24, 320;
	mad.lo.s32 	%r5288, %r5286, %r23, %r5287;
	add.s32 	%r5292, %r1737, -64;
	mad.lo.s32 	%r5296, %r5292, %r2088, %r2085;
	add.s32 	%r5297, %r5288, %r5296;
	shl.b32 	%r5298, %r5297, 2;
	mov.u32 	%r5299, _ZN6kernel5shmemE;
	add.s32 	%r5300, %r5299, %r5298;
	shl.b32 	%r5301, %r28, 4;
	add.s32 	%r5302, %r5300, %r5301;
	st.shared.v4.u32 	[%r5302], {%r7683, %r7682, %r7678, %r7676};
	shl.b32 	%r5303, %r28, 3;
	add.s32 	%r5304, %r5300, %r5303;
	st.shared.v2.u32 	[%r5304+512], {%r7420, %r7415};
	st.shared.v4.u32 	[%r5302+768], {%r7444, %r7435, %r7407, %r7403};

$L__BB0_554:
	setp.ge.s32 	%p294, %r24, %r2088;
	@%p294 bra 	$L__BB0_558;

	mad.lo.s32 	%r5310, %r2484, 384, %r2091;
	mad.lo.s32 	%r5313, %r2086, %r24, %r5310;
	add.s32 	%r5319, %r5313, %r2089;
	shl.b32 	%r5320, %r5319, 2;
	mov.u32 	%r5321, _ZN6kernel5shmemE;
	add.s32 	%r5322, %r5321, %r5320;
	shl.b32 	%r5323, %r28, 3;
	add.s32 	%r5324, %r5322, %r5323;
	@%p293 bra 	$L__BB0_557;

	add.s32 	%r7195, %r5324, -256;
	st.shared.v2.u32 	[%r7195], {%r7439, %r7432};

$L__BB0_557:
	shl.b32 	%r5343, %r28, 4;
	add.s32 	%r5344, %r5322, %r5343;
	st.shared.v4.u32 	[%r5344], {%r7430, %r7426, %r7395, %r7391};
	add.s32 	%r7196, %r5324, -256;
	st.shared.v2.u32 	[%r7196+768], {%r7398, %r7392};
	st.shared.v4.u32 	[%r5344+768], {%r7681, %r7680, %r7669, %r7668};

$L__BB0_558:
	bar.sync 	0;
	@%p200 bra 	$L__BB0_560;

	mul.lo.s32 	%r5345, %r1682, 320;
	add.s32 	%r5346, %r23, -1;
	mul.lo.s32 	%r5347, %r24, 320;
	mad.lo.s32 	%r5348, %r5345, %r5346, %r5347;
	shl.b32 	%r5349, %r5348, 2;
	mov.u32 	%r5350, _ZN6kernel5shmemE;
	add.s32 	%r5351, %r5350, %r5349;
	add.s32 	%r5352, %r5351, -256;
	shl.b32 	%r5353, %r28, 4;
	add.s32 	%r5354, %r5352, %r5353;
	ld.shared.v4.u32 	{%r7631, %r7629, %r7623, %r7622}, [%r5354+256];
	ld.shared.v4.u32 	{%r7633, %r7632, %r7627, %r7626}, [%r5354+1024];
	shl.b32 	%r5363, %r28, 3;
	add.s32 	%r5364, %r5352, %r5363;
	ld.shared.v2.u32 	{%r7630, %r7628}, [%r5364+768];

$L__BB0_560:
	@%p203 bra 	$L__BB0_563;

	mad.lo.s32 	%r5369, %r1681, 384, -64;
	add.s32 	%r5370, %r24, -1;
	mul.lo.s32 	%r5371, %r5369, %r5370;
	mad.lo.s32 	%r5374, %r2084, %r2083, %r5371;
	mad.lo.s32 	%r5375, %r2484, 384, %r5374;
	shl.b32 	%r5376, %r5375, 2;
	mov.u32 	%r5377, _ZN6kernel5shmemE;
	add.s32 	%r5378, %r5377, %r5376;
	add.s32 	%r5379, %r5378, -256;
	shl.b32 	%r5380, %r28, 4;
	add.s32 	%r5381, %r5379, %r5380;
	ld.shared.v4.u32 	{%r7647, %r7646, %r7644, %r7642}, [%r5381+256];
	ld.shared.v4.u32 	{%r7641, %r7640, %r7638, %r7636}, [%r5381+1024];
	shl.b32 	%r5390, %r28, 3;
	add.s32 	%r5391, %r5379, %r5390;
	ld.shared.v2.u32 	{%r7645, %r7643}, [%r5391+768];
	@%p200 bra 	$L__BB0_563;

	add.s32 	%r7197, %r5391, 768;
	ld.shared.v2.u32 	{%r7625, %r7624}, [%r7197+768];

$L__BB0_563:
	ld.param.u64 	%rd521, [%rd1+80];
	cvta.to.global.u64 	%rd36, %rd521;
	mov.u32 	%r7762, %r7604;
	mov.u32 	%r7763, %r7605;
	mov.u32 	%r7748, %r7592;
	mov.u32 	%r7749, %r7593;
	mov.u32 	%r7750, %r7594;
	mov.u32 	%r7751, %r7595;
	mov.u32 	%r7764, %r7606;
	mov.u32 	%r7766, %r7608;
	mov.u32 	%r7754, %r7596;
	mov.u32 	%r7755, %r7597;
	mov.u32 	%r7756, %r7598;
	mov.u32 	%r7757, %r7599;
	@%p205 bra 	$L__BB0_567;

	mad.lo.s32 	%r5397, %r633, %r1684, %r26;
	mad.lo.s32 	%r5398, %r5397, 768, 384;
	mul.lo.s32 	%r5399, %r5398, %r1682;
	mad.lo.s32 	%r5400, %r24, 384, %r5399;
	add.s32 	%r5401, %r5400, -128;
	mul.wide.s32 	%rd522, %r5401, 4;
	add.s64 	%rd523, %rd36, %rd522;
	add.s64 	%rd525, %rd523, %rd275;
	add.s64 	%rd37, %rd525, 512;
	mov.u32 	%r7762, %r7604;
	mov.u32 	%r7763, %r7605;
	mov.u32 	%r7764, %r7606;
	mov.u32 	%r7766, %r7608;
	@%p203 bra 	$L__BB0_566;

	ld.global.v4.u32 	{%r7763, %r7762, %r7766, %r7764}, [%rd37+-512];

$L__BB0_566:
	ld.global.v4.u32 	{%r7750, %r7748, %r7751, %r7749}, [%rd37];
	ld.global.v4.u32 	{%r7757, %r7756, %r7755, %r7754}, [%rd37+512];
	ld.global.v4.u32 	{%r7601, %r7600, %r7603, %r7602}, [%rd37+1024];

$L__BB0_567:
	mov.u32 	%r7765, %r7607;
	mov.u32 	%r7767, %r7609;
	mov.u32 	%r7768, %r7610;
	mov.u32 	%r7769, %r7611;
	mov.u32 	%r7770, %r7612;
	mov.u32 	%r7771, %r7613;
	mov.u32 	%r7772, %r7614;
	mov.u32 	%r7773, %r7615;
	@%p208 bra 	$L__BB0_569;

	mad.lo.s32 	%r5419, %r634, %r1683, %r25;
	mad.lo.s32 	%r5425, %r2484, 384, %r52;
	mad.lo.s32 	%r5426, %r5419, %r1738, %r5425;
	mad.lo.s32 	%r5429, %r1740, %r51, %r5426;
	mul.wide.s32 	%rd526, %r5429, 4;
	add.s64 	%rd527, %rd36, %rd526;
	add.s64 	%rd529, %rd527, %rd275;
	ld.global.v4.u32 	{%r7617, %r7616, %r7619, %r7618}, [%rd529];
	ld.global.v4.u32 	{%r7773, %r7771, %r7769, %r7768}, [%rd529+512];
	ld.global.v4.u32 	{%r7772, %r7770, %r7767, %r7765}, [%rd529+1024];
	ld.global.v4.u32 	{%r7763, %r7762, %r7766, %r7764}, [%rd529+1536];

$L__BB0_569:
	neg.s32 	%r7203, %r1686;
	not.b32 	%r7202, %r26;
	add.s32 	%r7201, %r1684, %r7202;
	mul.lo.s32 	%r7200, %r7201, %r1685;
	not.b32 	%r7199, %r25;
	add.s32 	%r7198, %r1683, %r7199;
	mad.lo.s32 	%r5453, %r7198, %r1685, %r7200;
	add.s32 	%r5454, %r5453, %r1686;
	add.s32 	%r5463, %r5454, %r2490;
	add.s32 	%r1417, %r7471, 1;
	add.s32 	%r5464, %r1417, %r5463;
	div.s32 	%r5465, %r5464, %r1686;
	mad.lo.s32 	%r1418, %r5465, %r7203, %r5464;
	mad.lo.s32 	%r5472, %r5465, %r30, %r2501;
	ld.param.u64 	%rd530, [%rd1+96];
	cvta.to.global.u64 	%rd531, %rd530;
	rem.s32 	%r5473, %r5472, %r1687;
	shr.u32 	%r5474, %r5473, 31;
	add.s32 	%r5475, %r5473, %r5474;
	shr.s32 	%r5476, %r5475, 1;
	mad.lo.s32 	%r5477, %r5476, %r1686, %r1418;
	shl.b32 	%r5478, %r5477, 5;
	add.s32 	%r5479, %r5478, %r28;
	cvt.s64.s32 	%rd38, %r5479;
	mul.wide.s32 	%rd532, %r5479, 4;
	add.s64 	%rd533, %rd531, %rd532;
	ld.global.u32 	%r7473, [%rd533];
	ld.param.u64 	%rd534, [%rd1+104];
	cvta.to.global.u64 	%rd39, %rd534;
	@%p71 bra 	$L__BB0_571;
	bra.uni 	$L__BB0_570;

$L__BB0_571:
	shl.b64 	%rd537, %rd38, 2;
	add.s64 	%rd538, %rd39, %rd537;
	ld.global.u32 	%r7472, [%rd538];
	bra.uni 	$L__BB0_572;

$L__BB0_570:
	shl.b32 	%r5480, %r1418, 5;
	add.s32 	%r5481, %r5480, %r28;
	mul.wide.s32 	%rd535, %r5481, 16;
	add.s64 	%rd536, %rd39, %rd535;
	ld.global.v4.u32 	{%r5482, %r5483, %r5484, %r5485}, [%rd536];
	mov.u32 	%r7303, %r7307;
	mov.u32 	%r7304, %r7308;
	mov.u32 	%r7305, %r7309;
	mov.u32 	%r7306, %r7310;
	mov.u32 	%r7307, %r7311;
	mov.u32 	%r7308, %r7312;
	mov.u32 	%r7309, %r7313;
	mov.u32 	%r7310, %r7314;
	mov.u32 	%r7311, %r5485;
	mov.u32 	%r7312, %r5484;
	mov.u32 	%r7313, %r5483;
	mov.u32 	%r7314, %r5482;

$L__BB0_572:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5486, {low,high};}

	// end inline asm
	selp.b32 	%r5488, %r7298, %r5486, %p12;
	// begin inline asm
	{mul.f16x2 %r5487,%r5488,%r7441;
}
	// end inline asm
	selp.b32 	%r5491, %r7302, %r5486, %p12;
	// begin inline asm
	{mul.f16x2 %r5490,%r5491,%r7434;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5493, {low,high};}

	// end inline asm
	selp.b32 	%r5495, %r7298, %r5493, %p12;
	// begin inline asm
	{mul.f16x2 %r5494,%r5495,%r7422;
}
	// end inline asm
	selp.b32 	%r5498, %r7302, %r5493, %p12;
	// begin inline asm
	{mul.f16x2 %r5497,%r5498,%r7417;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5500, {low,high};}

	// end inline asm
	selp.b32 	%r5502, %r7298, %r5500, %p12;
	// begin inline asm
	{mul.f16x2 %r5501,%r5502,%r7409;
}
	// end inline asm
	selp.b32 	%r5505, %r7302, %r5500, %p12;
	// begin inline asm
	{mul.f16x2 %r5504,%r5505,%r7408;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5507, {low,high};}

	// end inline asm
	selp.b32 	%r5509, %r7298, %r5507, %p12;
	// begin inline asm
	{mul.f16x2 %r5508,%r5509,%r7413;
}
	// end inline asm
	selp.b32 	%r5512, %r7302, %r5507, %p12;
	// begin inline asm
	{mul.f16x2 %r5511,%r5512,%r7412;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5514, {low,high};}

	// end inline asm
	selp.b32 	%r5516, %r7298, %r5514, %p12;
	// begin inline asm
	{mul.f16x2 %r5515,%r5516,%r7411;
}
	// end inline asm
	selp.b32 	%r5519, %r7302, %r5514, %p12;
	// begin inline asm
	{mul.f16x2 %r5518,%r5519,%r7405;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5521, {low,high};}

	// end inline asm
	selp.b32 	%r5523, %r7298, %r5521, %p12;
	// begin inline asm
	{mul.f16x2 %r5522,%r5523,%r7401;
}
	// end inline asm
	selp.b32 	%r5526, %r7302, %r5521, %p12;
	// begin inline asm
	{mul.f16x2 %r5525,%r5526,%r7400;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5528, {low,high};}

	// end inline asm
	selp.b32 	%r5530, %r7298, %r5528, %p12;
	// begin inline asm
	{mul.f16x2 %r5529,%r5530,%r7399;
}
	// end inline asm
	selp.b32 	%r5533, %r7302, %r5528, %p12;
	// begin inline asm
	{mul.f16x2 %r5532,%r5533,%r7393;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5535, {low,high};}

	// end inline asm
	selp.b32 	%r5537, %r7298, %r5535, %p12;
	// begin inline asm
	{mul.f16x2 %r5536,%r5537,%r7386;
}
	// end inline asm
	selp.b32 	%r5540, %r7302, %r5535, %p12;
	// begin inline asm
	{mul.f16x2 %r5539,%r5540,%r7385;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5542, {low,high};}

	// end inline asm
	selp.b32 	%r5544, %r7298, %r5542, %p12;
	// begin inline asm
	{mul.f16x2 %r5543,%r5544,%r7615;
}
	// end inline asm
	selp.b32 	%r5547, %r7302, %r5542, %p12;
	// begin inline asm
	{mul.f16x2 %r5546,%r5547,%r7613;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5549, {low,high};}

	// end inline asm
	selp.b32 	%r5551, %r7298, %r5549, %p12;
	// begin inline asm
	{mul.f16x2 %r5550,%r5551,%r7614;
}
	// end inline asm
	selp.b32 	%r5554, %r7302, %r5549, %p12;
	// begin inline asm
	{mul.f16x2 %r5553,%r5554,%r7612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5556, {low,high};}

	// end inline asm
	selp.b32 	%r5558, %r7298, %r5556, %p12;
	// begin inline asm
	{mul.f16x2 %r5557,%r5558,%r7378;
}
	// end inline asm
	selp.b32 	%r5561, %r7302, %r5556, %p12;
	// begin inline asm
	{mul.f16x2 %r5560,%r5561,%r7377;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5563, {low,high};}

	// end inline asm
	selp.b32 	%r5565, %r7298, %r5563, %p12;
	// begin inline asm
	{mul.f16x2 %r5564,%r5565,%r7382;
}
	// end inline asm
	selp.b32 	%r5568, %r7302, %r5563, %p12;
	// begin inline asm
	{mul.f16x2 %r5567,%r5568,%r7381;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5570, {low,high};}

	// end inline asm
	selp.b32 	%r5572, %r7298, %r5570, %p12;
	// begin inline asm
	{mul.f16x2 %r5571,%r5572,%r7380;
}
	// end inline asm
	selp.b32 	%r5575, %r7302, %r5570, %p12;
	// begin inline asm
	{mul.f16x2 %r5574,%r5575,%r7375;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5577, {low,high};}

	// end inline asm
	selp.b32 	%r5579, %r7298, %r5577, %p12;
	// begin inline asm
	{mul.f16x2 %r5578,%r5579,%r7370;
}
	// end inline asm
	selp.b32 	%r5582, %r7302, %r5577, %p12;
	// begin inline asm
	{mul.f16x2 %r5581,%r5582,%r7369;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5584, {low,high};}

	// end inline asm
	selp.b32 	%r5586, %r7298, %r5584, %p12;
	// begin inline asm
	{mul.f16x2 %r5585,%r5586,%r7372;
}
	// end inline asm
	selp.b32 	%r5589, %r7302, %r5584, %p12;
	// begin inline asm
	{mul.f16x2 %r5588,%r5589,%r7371;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5591, {low,high};}

	// end inline asm
	selp.b32 	%r5593, %r7298, %r5591, %p12;
	// begin inline asm
	{mul.f16x2 %r5592,%r5593,%r7599;
}
	// end inline asm
	selp.b32 	%r5596, %r7302, %r5591, %p12;
	// begin inline asm
	{mul.f16x2 %r5595,%r5596,%r7598;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5598, {low,high};}

	// end inline asm
	selp.b32 	%r5600, %r7298, %r5598, %p12;
	// begin inline asm
	{mul.f16x2 %r5599,%r5600,%r7597;
}
	// end inline asm
	selp.b32 	%r5603, %r7302, %r5598, %p12;
	// begin inline asm
	{mul.f16x2 %r5602,%r5603,%r7596;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5605, {low,high};}

	// end inline asm
	selp.b32 	%r5607, %r7298, %r5605, %p12;
	// begin inline asm
	{mul.f16x2 %r5606,%r5607,%r7611;
}
	// end inline asm
	selp.b32 	%r5610, %r7302, %r5605, %p12;
	// begin inline asm
	{mul.f16x2 %r5609,%r5610,%r7610;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5612, {low,high};}

	// end inline asm
	selp.b32 	%r5614, %r7298, %r5612, %p12;
	// begin inline asm
	{mul.f16x2 %r5613,%r5614,%r7364;
}
	// end inline asm
	selp.b32 	%r5617, %r7302, %r5612, %p12;
	// begin inline asm
	{mul.f16x2 %r5616,%r5617,%r7363;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5619, {low,high};}

	// end inline asm
	selp.b32 	%r5621, %r7298, %r5619, %p12;
	// begin inline asm
	{mul.f16x2 %r5620,%r5621,%r7609;
}
	// end inline asm
	selp.b32 	%r5624, %r7302, %r5619, %p12;
	// begin inline asm
	{mul.f16x2 %r5623,%r5624,%r7607;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5626, {low,high};}

	// end inline asm
	selp.b32 	%r5628, %r7298, %r5626, %p12;
	// begin inline asm
	{mul.f16x2 %r5627,%r5628,%r7608;
}
	// end inline asm
	selp.b32 	%r5631, %r7302, %r5626, %p12;
	// begin inline asm
	{mul.f16x2 %r5630,%r5631,%r7606;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5633, {low,high};}

	// end inline asm
	selp.b32 	%r5635, %r7298, %r5633, %p12;
	// begin inline asm
	{mul.f16x2 %r5634,%r5635,%r7595;
}
	// end inline asm
	selp.b32 	%r5638, %r7302, %r5633, %p12;
	// begin inline asm
	{mul.f16x2 %r5637,%r5638,%r7593;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5640, {low,high};}

	// end inline asm
	selp.b32 	%r5642, %r7298, %r5640, %p12;
	// begin inline asm
	{mul.f16x2 %r5641,%r5642,%r7594;
}
	// end inline asm
	selp.b32 	%r5645, %r7302, %r5640, %p12;
	// begin inline asm
	{mul.f16x2 %r5644,%r5645,%r7592;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5647, {low,high};}

	// end inline asm
	selp.b32 	%r5649, %r7298, %r5647, %p12;
	// begin inline asm
	{mul.f16x2 %r5648,%r5649,%r7605;
}
	// end inline asm
	selp.b32 	%r5652, %r7302, %r5647, %p12;
	// begin inline asm
	{mul.f16x2 %r5651,%r5652,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5654,%r7468,%r3602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5657,%r3713,%r3559;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5660,%r5654,%r5657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5663,%r7206,%r5660;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5666,%r5487,%r5663;
}
	// end inline asm
	selp.b32 	%r7436, %r5487, %r5666, %p12;
	// begin inline asm
	{sub.f16x2 %r5669,%r7467,%r3668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5672,%r3747,%r3636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5675,%r5669,%r5672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5678,%r7206,%r5675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5681,%r5490,%r5678;
}
	// end inline asm
	selp.b32 	%r7431, %r5490, %r5681, %p12;
	// begin inline asm
	{sub.f16x2 %r5684,%r7464,%r3835;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5687,%r7470,%r3792;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5690,%r5684,%r5687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5693,%r7206,%r5690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5696,%r5494,%r5693;
}
	// end inline asm
	selp.b32 	%r7440, %r5494, %r5696, %p12;
	// begin inline asm
	{sub.f16x2 %r5699,%r7463,%r3901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5702,%r7469,%r3869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5705,%r5699,%r5702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5708,%r7206,%r5705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5711,%r5497,%r5708;
}
	// end inline asm
	selp.b32 	%r7433, %r5497, %r5711, %p12;
	// begin inline asm
	{sub.f16x2 %r5714,%r7467,%r7468;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5717,%r7297,%r5714;
}
	// end inline asm
	@%p12 bra 	$L__BB0_574;
	bra.uni 	$L__BB0_573;

$L__BB0_574:
	// begin inline asm
	{neg.f16x2 %r7791,%r5501;
}
	// end inline asm
	bra.uni 	$L__BB0_575;

$L__BB0_573:
	// begin inline asm
	{mul.f16x2 %r7791,%r7298,%r5714;
}
	// end inline asm

$L__BB0_575:
	mov.u32 	%r5728, 31;
	mov.u32 	%r5730, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5726,%r7791,%r5728,%r2187,%r5730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5731,%r5717,%r5726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5734,%r1173,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5737,%r5734,%r5731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5740,%r7206,%r5737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7438,%r5501,%r5740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5746,%r7469,%r7470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5749,%r7297,%r5746;
}
	// end inline asm
	mov.u32 	%r7792, %r5508;
	@%p12 bra 	$L__BB0_577;

	// begin inline asm
	{mul.f16x2 %r7792,%r7298,%r5746;
}
	// end inline asm

$L__BB0_577:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5758,%r7792,%r5728,%r2187,%r5730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5763,%r5749,%r5758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r7458,%r1149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5769,%r5763,%r5766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5772,%r7206,%r5769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7443,%r5508,%r5772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5778,%r7460,%r7468;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5781,%r7466,%r7470;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5784,%r5778,%r5781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5787,%r7206,%r5784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5790,%r5515,%r5787;
}
	// end inline asm
	selp.b32 	%r7441, %r5515, %r5790, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7468;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5795,%r7468,%r413,%r2187,%r5730;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5795;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5801, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5802,%r5801,%r7467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5805,%r7301,%r5802;
}
	// end inline asm
	@%p12 bra 	$L__BB0_579;
	bra.uni 	$L__BB0_578;

$L__BB0_579:
	// begin inline asm
	{neg.f16x2 %r7793,%r5504;
}
	// end inline asm
	bra.uni 	$L__BB0_580;

$L__BB0_578:
	// begin inline asm
	{mul.f16x2 %r7793,%r7302,%r5802;
}
	// end inline asm

$L__BB0_580:
	mov.u32 	%r5820, 31;
	mov.u32 	%r5844, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5818,%r7793,%r5820,%r2187,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5823,%r5805,%r5818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5826,%r1185,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5829,%r5826,%r5823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5832,%r7206,%r5829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7437,%r5504,%r5832;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7470;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5840,%r7470,%r413,%r2187,%r5844;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5840;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5846, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5847,%r5846,%r7469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5850,%r7301,%r5847;
}
	// end inline asm
	mov.u32 	%r7794, %r5511;
	@%p12 bra 	$L__BB0_582;

	// begin inline asm
	{mul.f16x2 %r7794,%r7302,%r5847;
}
	// end inline asm

$L__BB0_582:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5861,%r7794,%r5820,%r2187,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5866,%r5850,%r5861;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5869,%r7457,%r1161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5872,%r5866,%r5869;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5875,%r7206,%r5872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7442,%r5511,%r5875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r7459,%r7467;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5884,%r7465,%r7469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5887,%r5881,%r5884;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5890,%r7206,%r5887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5893,%r5518,%r5890;
}
	// end inline asm
	selp.b32 	%r7434, %r5518, %r5893, %p12;
	// begin inline asm
	{sub.f16x2 %r5896,%r7465,%r7466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5899,%r7297,%r5896;
}
	// end inline asm
	mov.u32 	%r7795, %r5522;
	@%p12 bra 	$L__BB0_584;

	// begin inline asm
	{mul.f16x2 %r7795,%r7298,%r5896;
}
	// end inline asm

$L__BB0_584:
	mov.u32 	%r5910, 31;
	mov.u32 	%r5949, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5908,%r7795,%r5910,%r2187,%r5949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5913,%r5899,%r5908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5916,%r7452,%r1173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r5913,%r5916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5922,%r7206,%r5919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7429,%r5522,%r5922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r7454,%r4173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5931,%r4314,%r7466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5934,%r5928,%r5931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5937,%r7206,%r5934;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5940,%r5529,%r5937;
}
	// end inline asm
	selp.b32 	%r7427, %r5529, %r5940, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7466;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5945,%r7466,%r413,%r2187,%r5949;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5945;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5951, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5952,%r5951,%r7465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5955,%r7301,%r5952;
}
	// end inline asm
	mov.u32 	%r7796, %r5525;
	@%p12 bra 	$L__BB0_586;

	// begin inline asm
	{mul.f16x2 %r7796,%r7302,%r5952;
}
	// end inline asm

$L__BB0_586:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5966,%r7796,%r5910,%r2187,%r5949;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5955,%r5966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5974,%r7451,%r1185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r5971,%r5974;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5980,%r7206,%r5977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7428,%r5525,%r5980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r7453,%r4254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5989,%r4348,%r7465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5992,%r5986,%r5989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5995,%r7206,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5998,%r5532,%r5995;
}
	// end inline asm
	selp.b32 	%r7425, %r5532, %r5998, %p12;
	// begin inline asm
	{sub.f16x2 %r6001,%r7463,%r7464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6004,%r7297,%r6001;
}
	// end inline asm
	@%p12 bra 	$L__BB0_588;
	bra.uni 	$L__BB0_587;

$L__BB0_588:
	// begin inline asm
	{neg.f16x2 %r7797,%r5536;
}
	// end inline asm
	bra.uni 	$L__BB0_589;

$L__BB0_587:
	// begin inline asm
	{mul.f16x2 %r7797,%r7298,%r6001;
}
	// end inline asm

$L__BB0_589:
	mov.u32 	%r6017, 31;
	mov.u32 	%r6019, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6015,%r7797,%r6017,%r2187,%r6019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6020,%r6004,%r6015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6023,%r7458,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6026,%r6023,%r6020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6029,%r7206,%r6026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7419,%r5536,%r6029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r7646,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r7297,%r6035;
}
	// end inline asm
	mov.u32 	%r7798, %r5543;
	@%p12 bra 	$L__BB0_591;

	// begin inline asm
	{mul.f16x2 %r7798,%r7298,%r6035;
}
	// end inline asm

$L__BB0_591:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6047,%r7798,%r6017,%r2187,%r6019;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6052,%r6038,%r6047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6055,%r7644,%r1203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6058,%r6052,%r6055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6061,%r7206,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7424,%r5543,%r6061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r7645,%r7464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6070,%r7462,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6073,%r6067,%r6070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6076,%r7206,%r6073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6079,%r5550,%r6076;
}
	// end inline asm
	selp.b32 	%r7422, %r5550, %r6079, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7464;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6084,%r7464,%r413,%r2187,%r6019;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6084;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6090, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r6090,%r7463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6094,%r7301,%r6091;
}
	// end inline asm
	@%p12 bra 	$L__BB0_593;
	bra.uni 	$L__BB0_592;

$L__BB0_593:
	// begin inline asm
	{neg.f16x2 %r7799,%r5539;
}
	// end inline asm
	bra.uni 	$L__BB0_594;

$L__BB0_592:
	// begin inline asm
	{mul.f16x2 %r7799,%r7302,%r6091;
}
	// end inline asm

$L__BB0_594:
	mov.u32 	%r6109, 31;
	mov.u32 	%r6133, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6107,%r7799,%r6109,%r2187,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6112,%r6094,%r6107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6115,%r7457,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6118,%r6115,%r6112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6121,%r7206,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7418,%r5539,%r6121;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6129,%r7647,%r413,%r2187,%r6133;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6129;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6135, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6136,%r6135,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6139,%r7301,%r6136;
}
	// end inline asm
	mov.u32 	%r7800, %r5546;
	@%p12 bra 	$L__BB0_596;

	// begin inline asm
	{mul.f16x2 %r7800,%r7302,%r6136;
}
	// end inline asm

$L__BB0_596:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6150,%r7800,%r6109,%r2187,%r6133;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6155,%r6139,%r6150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r7642,%r1209;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r6155,%r6158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r7206,%r6161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7423,%r5546,%r6164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6170,%r7643,%r7463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6173,%r7461,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6176,%r6170,%r6173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6179,%r7206,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6182,%r5553,%r6179;
}
	// end inline asm
	selp.b32 	%r7417, %r5553, %r6182, %p12;
	// begin inline asm
	{sub.f16x2 %r6185,%r7459,%r7460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6188,%r7297,%r6185;
}
	// end inline asm
	@%p12 bra 	$L__BB0_598;
	bra.uni 	$L__BB0_597;

$L__BB0_598:
	// begin inline asm
	{neg.f16x2 %r7801,%r5557;
}
	// end inline asm
	bra.uni 	$L__BB0_599;

$L__BB0_597:
	// begin inline asm
	{mul.f16x2 %r7801,%r7298,%r6185;
}
	// end inline asm

$L__BB0_599:
	mov.u32 	%r6201, 31;
	mov.u32 	%r6203, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6199,%r7801,%r6201,%r2187,%r6203;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6204,%r6188,%r6199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6207,%r7452,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6210,%r6207,%r6204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6213,%r7206,%r6210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7409,%r5557,%r6213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r7461,%r7462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6222,%r7297,%r6219;
}
	// end inline asm
	mov.u32 	%r7802, %r5564;
	@%p12 bra 	$L__BB0_601;

	// begin inline asm
	{mul.f16x2 %r7802,%r7298,%r6219;
}
	// end inline asm

$L__BB0_601:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6231,%r7802,%r6201,%r2187,%r6203;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6236,%r6222,%r6231;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r7448,%r7458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6242,%r6236,%r6239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6245,%r7206,%r6242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7413,%r5564,%r6245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6251,%r7450,%r7460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6254,%r7456,%r7462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r6251,%r6254;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6260,%r7206,%r6257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6263,%r5571,%r6260;
}
	// end inline asm
	selp.b32 	%r7411, %r5571, %r6263, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7460;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6268,%r7460,%r413,%r2187,%r6203;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6268;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6274, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6275,%r6274,%r7459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6278,%r7301,%r6275;
}
	// end inline asm
	@%p12 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	// begin inline asm
	{neg.f16x2 %r7803,%r5560;
}
	// end inline asm
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	// begin inline asm
	{mul.f16x2 %r7803,%r7302,%r6275;
}
	// end inline asm

$L__BB0_604:
	mov.u32 	%r6293, 31;
	mov.u32 	%r6317, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6291,%r7803,%r6293,%r2187,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6296,%r6278,%r6291;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6299,%r7451,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6302,%r6299,%r6296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6305,%r7206,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7408,%r5560,%r6305;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7462;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6313,%r7462,%r413,%r2187,%r6317;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6313;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6319, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6320,%r6319,%r7461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6323,%r7301,%r6320;
}
	// end inline asm
	mov.u32 	%r7804, %r5567;
	@%p12 bra 	$L__BB0_606;

	// begin inline asm
	{mul.f16x2 %r7804,%r7302,%r6320;
}
	// end inline asm

$L__BB0_606:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6334,%r7804,%r6293,%r2187,%r6317;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6339,%r6323,%r6334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r7447,%r7457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6345,%r6339,%r6342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6348,%r7206,%r6345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7412,%r5567,%r6348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6354,%r7449,%r7459;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6357,%r7455,%r7461;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6360,%r6354,%r6357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6363,%r7206,%r6360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6366,%r5574,%r6363;
}
	// end inline asm
	selp.b32 	%r7405, %r5574, %r6366, %p12;
	// begin inline asm
	{sub.f16x2 %r6369,%r7453,%r7454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6372,%r7297,%r6369;
}
	// end inline asm
	@%p12 bra 	$L__BB0_608;
	bra.uni 	$L__BB0_607;

$L__BB0_608:
	// begin inline asm
	{neg.f16x2 %r7805,%r5578;
}
	// end inline asm
	bra.uni 	$L__BB0_609;

$L__BB0_607:
	// begin inline asm
	{mul.f16x2 %r7805,%r7298,%r6369;
}
	// end inline asm

$L__BB0_609:
	mov.u32 	%r6385, 31;
	mov.u32 	%r6387, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6383,%r7805,%r6385,%r2187,%r6387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6388,%r6372,%r6383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6391,%r1258,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6394,%r6391,%r6388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6397,%r7206,%r6394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7397,%r5578,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6403,%r7455,%r7456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6406,%r7297,%r6403;
}
	// end inline asm
	mov.u32 	%r7806, %r5585;
	@%p12 bra 	$L__BB0_611;

	// begin inline asm
	{mul.f16x2 %r7806,%r7298,%r6403;
}
	// end inline asm

$L__BB0_611:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6415,%r7806,%r6385,%r2187,%r6387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6420,%r6406,%r6415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r7446,%r7452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6426,%r6420,%r6423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6429,%r7206,%r6426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7401,%r5585,%r6429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6435,%r7630,%r7454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6438,%r7633,%r7456;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r6435,%r6438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6444,%r7206,%r6441;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6447,%r5592,%r6444;
}
	// end inline asm
	selp.b32 	%r7399, %r5592, %r6447, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7454;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6452,%r7454,%r413,%r2187,%r6387;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6452;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6458, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r6458,%r7453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6462,%r7301,%r6459;
}
	// end inline asm
	@%p12 bra 	$L__BB0_613;
	bra.uni 	$L__BB0_612;

$L__BB0_613:
	// begin inline asm
	{neg.f16x2 %r7807,%r5581;
}
	// end inline asm
	bra.uni 	$L__BB0_614;

$L__BB0_612:
	// begin inline asm
	{mul.f16x2 %r7807,%r7302,%r6459;
}
	// end inline asm

$L__BB0_614:
	mov.u32 	%r6477, 31;
	mov.u32 	%r6501, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6475,%r7807,%r6477,%r2187,%r6501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6480,%r6462,%r6475;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6483,%r1259,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6486,%r6483,%r6480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6489,%r7206,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7396,%r5581,%r6489;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7456;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6497,%r7456,%r413,%r2187,%r6501;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6497;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6503, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6504,%r6503,%r7455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6507,%r7301,%r6504;
}
	// end inline asm
	mov.u32 	%r7808, %r5588;
	@%p12 bra 	$L__BB0_616;

	// begin inline asm
	{mul.f16x2 %r7808,%r7302,%r6504;
}
	// end inline asm

$L__BB0_616:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6518,%r7808,%r6477,%r2187,%r6501;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6523,%r6507,%r6518;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r7445,%r7451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6529,%r6523,%r6526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6532,%r7206,%r6529;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7400,%r5588,%r6532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6538,%r7628,%r7453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6541,%r7632,%r7455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6544,%r6538,%r6541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6547,%r7206,%r6544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r5595,%r6547;
}
	// end inline asm
	selp.b32 	%r7393, %r5595, %r6550, %p12;
	// begin inline asm
	{sub.f16x2 %r6553,%r7632,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6556,%r7297,%r6553;
}
	// end inline asm
	mov.u32 	%r7809, %r5599;
	@%p12 bra 	$L__BB0_618;

	// begin inline asm
	{mul.f16x2 %r7809,%r7298,%r6553;
}
	// end inline asm

$L__BB0_618:
	mov.u32 	%r6567, 31;
	mov.u32 	%r6591, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6565,%r7809,%r6567,%r2187,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6556,%r6565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6573,%r7627,%r1258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6576,%r6570,%r6573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6579,%r7206,%r6576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7390,%r5599,%r6579;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6587,%r7633,%r413,%r2187,%r6591;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6587;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6593, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6594,%r6593,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6597,%r7301,%r6594;
}
	// end inline asm
	mov.u32 	%r7810, %r5602;
	@%p12 bra 	$L__BB0_620;

	// begin inline asm
	{mul.f16x2 %r7810,%r7302,%r6594;
}
	// end inline asm

$L__BB0_620:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6608,%r7810,%r6567,%r2187,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6613,%r6597,%r6608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6616,%r7626,%r1259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6619,%r6613,%r6616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6622,%r7206,%r6619;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7389,%r5602,%r6622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r7643,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r7297,%r6628;
}
	// end inline asm
	@%p12 bra 	$L__BB0_622;
	bra.uni 	$L__BB0_621;

$L__BB0_622:
	// begin inline asm
	{neg.f16x2 %r7811,%r5606;
}
	// end inline asm
	bra.uni 	$L__BB0_623;

$L__BB0_621:
	// begin inline asm
	{mul.f16x2 %r7811,%r7298,%r6628;
}
	// end inline asm

$L__BB0_623:
	mov.u32 	%r6644, 31;
	mov.u32 	%r6668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6642,%r7811,%r6644,%r2187,%r6668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6647,%r6631,%r6642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6650,%r7448,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6653,%r6650,%r6647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6656,%r7206,%r6653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7386,%r5606,%r6656;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6664,%r7645,%r413,%r2187,%r6668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6664;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6670, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6671,%r6670,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6674,%r7301,%r6671;
}
	// end inline asm
	@%p12 bra 	$L__BB0_625;
	bra.uni 	$L__BB0_624;

$L__BB0_625:
	// begin inline asm
	{neg.f16x2 %r7812,%r5609;
}
	// end inline asm
	bra.uni 	$L__BB0_626;

$L__BB0_624:
	// begin inline asm
	{mul.f16x2 %r7812,%r7302,%r6671;
}
	// end inline asm

$L__BB0_626:
	mov.u32 	%r6689, 31;
	mov.u32 	%r6691, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6687,%r7812,%r6689,%r2187,%r6691;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6692,%r6674,%r6687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6695,%r7447,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6698,%r6695,%r6692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6701,%r7206,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7385,%r5609,%r6701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r7449,%r7450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6710,%r7297,%r6707;
}
	// end inline asm
	@%p12 bra 	$L__BB0_628;
	bra.uni 	$L__BB0_627;

$L__BB0_628:
	// begin inline asm
	{neg.f16x2 %r7813,%r5613;
}
	// end inline asm
	bra.uni 	$L__BB0_629;

$L__BB0_627:
	// begin inline asm
	{mul.f16x2 %r7813,%r7298,%r6707;
}
	// end inline asm

$L__BB0_629:
	mov.u32 	%r6723, 31;
	mov.u32 	%r6725, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6721,%r7813,%r6723,%r2187,%r6725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6726,%r6710,%r6721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6729,%r7446,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6732,%r6729,%r6726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6735,%r7206,%r6732;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7378,%r5613,%r6735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6741,%r7640,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6744,%r7297,%r6741;
}
	// end inline asm
	mov.u32 	%r7814, %r5620;
	@%p12 bra 	$L__BB0_631;

	// begin inline asm
	{mul.f16x2 %r7814,%r7298,%r6741;
}
	// end inline asm

$L__BB0_631:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6753,%r7814,%r6723,%r2187,%r6725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6758,%r6744,%r6753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6761,%r7638,%r7448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6764,%r6758,%r6761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6767,%r7206,%r6764;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7382,%r5620,%r6767;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6773,%r7625,%r7450;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6776,%r7631,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6779,%r6773,%r6776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6782,%r7206,%r6779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6785,%r5627,%r6782;
}
	// end inline asm
	selp.b32 	%r7380, %r5627, %r6785, %p12;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7450;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6790,%r7450,%r413,%r2187,%r6725;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6790;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6796, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6797,%r6796,%r7449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6800,%r7301,%r6797;
}
	// end inline asm
	@%p12 bra 	$L__BB0_633;
	bra.uni 	$L__BB0_632;

$L__BB0_633:
	// begin inline asm
	{neg.f16x2 %r7815,%r5616;
}
	// end inline asm
	bra.uni 	$L__BB0_634;

$L__BB0_632:
	// begin inline asm
	{mul.f16x2 %r7815,%r7302,%r6797;
}
	// end inline asm

$L__BB0_634:
	mov.u32 	%r6815, 31;
	mov.u32 	%r6839, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6813,%r7815,%r6815,%r2187,%r6839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6818,%r6800,%r6813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6821,%r7445,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6824,%r6821,%r6818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6827,%r7206,%r6824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7377,%r5616,%r6827;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6835,%r7641,%r413,%r2187,%r6839;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6835;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6841, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6842,%r6841,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6845,%r7301,%r6842;
}
	// end inline asm
	mov.u32 	%r7816, %r5623;
	@%p12 bra 	$L__BB0_636;

	// begin inline asm
	{mul.f16x2 %r7816,%r7302,%r6842;
}
	// end inline asm

$L__BB0_636:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6856,%r7816,%r6815,%r2187,%r6839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6861,%r6845,%r6856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6864,%r7636,%r7447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6867,%r6861,%r6864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6870,%r7206,%r6867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7381,%r5623,%r6870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6876,%r7624,%r7449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6879,%r7629,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6882,%r6876,%r6879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6885,%r7206,%r6882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6888,%r5630,%r6885;
}
	// end inline asm
	selp.b32 	%r7375, %r5630, %r6888, %p12;
	// begin inline asm
	{sub.f16x2 %r6891,%r7628,%r7630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6894,%r7297,%r6891;
}
	// end inline asm
	@%p12 bra 	$L__BB0_638;
	bra.uni 	$L__BB0_637;

$L__BB0_638:
	// begin inline asm
	{neg.f16x2 %r7817,%r5634;
}
	// end inline asm
	bra.uni 	$L__BB0_639;

$L__BB0_637:
	// begin inline asm
	{mul.f16x2 %r7817,%r7298,%r6891;
}
	// end inline asm

$L__BB0_639:
	mov.u32 	%r6907, 31;
	mov.u32 	%r6909, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6905,%r7817,%r6907,%r2187,%r6909;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6910,%r6894,%r6905;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6913,%r7627,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6916,%r6913,%r6910;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6919,%r7206,%r6916;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7370,%r5634,%r6919;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6925,%r7629,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6928,%r7297,%r6925;
}
	// end inline asm
	mov.u32 	%r7818, %r5641;
	@%p12 bra 	$L__BB0_641;

	// begin inline asm
	{mul.f16x2 %r7818,%r7298,%r6925;
}
	// end inline asm

$L__BB0_641:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6937,%r7818,%r6907,%r2187,%r6909;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6942,%r6928,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r7623,%r7446;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6948,%r6942,%r6945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6951,%r7206,%r6948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7372,%r5641,%r6951;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7630;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6959,%r7630,%r413,%r2187,%r6909;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6959;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6965, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6966,%r6965,%r7628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6969,%r7301,%r6966;
}
	// end inline asm
	@%p12 bra 	$L__BB0_643;
	bra.uni 	$L__BB0_642;

$L__BB0_643:
	// begin inline asm
	{neg.f16x2 %r7819,%r5637;
}
	// end inline asm
	bra.uni 	$L__BB0_644;

$L__BB0_642:
	// begin inline asm
	{mul.f16x2 %r7819,%r7302,%r6966;
}
	// end inline asm

$L__BB0_644:
	mov.u32 	%r6984, 31;
	mov.u32 	%r7008, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6982,%r7819,%r6984,%r2187,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6987,%r6969,%r6982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6990,%r7626,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6993,%r6990,%r6987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6996,%r7206,%r6993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7369,%r5637,%r6996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7631;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7004,%r7631,%r413,%r2187,%r7008;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7004;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7010, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7011,%r7010,%r7629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7014,%r7301,%r7011;
}
	// end inline asm
	mov.u32 	%r7820, %r5644;
	@%p12 bra 	$L__BB0_646;

	// begin inline asm
	{mul.f16x2 %r7820,%r7302,%r7011;
}
	// end inline asm

$L__BB0_646:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7025,%r7820,%r6984,%r2187,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7030,%r7014,%r7025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7033,%r7622,%r7445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7036,%r7030,%r7033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7039,%r7206,%r7036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7371,%r5644,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7045,%r7624,%r7625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7048,%r7297,%r7045;
}
	// end inline asm
	@%p12 bra 	$L__BB0_648;
	bra.uni 	$L__BB0_647;

$L__BB0_648:
	// begin inline asm
	{neg.f16x2 %r7821,%r5648;
}
	// end inline asm
	bra.uni 	$L__BB0_649;

$L__BB0_647:
	// begin inline asm
	{mul.f16x2 %r7821,%r7298,%r7045;
}
	// end inline asm

$L__BB0_649:
	mov.u32 	%r7061, 31;
	mov.u32 	%r7085, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7059,%r7821,%r7061,%r2187,%r7085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7064,%r7048,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7067,%r7623,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7070,%r7067,%r7064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7073,%r7206,%r7070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7364,%r5648,%r7073;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7625;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7081,%r7625,%r413,%r2187,%r7085;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7081;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7087, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7088,%r7087,%r7624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7091,%r7301,%r7088;
}
	// end inline asm
	@%p12 bra 	$L__BB0_651;
	bra.uni 	$L__BB0_650;

$L__BB0_651:
	// begin inline asm
	{neg.f16x2 %r7822,%r5651;
}
	// end inline asm
	bra.uni 	$L__BB0_652;

$L__BB0_650:
	// begin inline asm
	{mul.f16x2 %r7822,%r7302,%r7088;
}
	// end inline asm

$L__BB0_652:
	mov.u32 	%r7106, 31;
	mov.u32 	%r7108, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7104,%r7822,%r7106,%r2187,%r7108;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7091,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7112,%r7622,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7115,%r7112,%r7109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7118,%r7206,%r7115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7363,%r5651,%r7118;
}
	// end inline asm
	bar.sync 	0;
	@%p286 bra 	$L__BB0_655;

	setp.ne.s32 	%p349, %r24, %r2088;
	shl.b32 	%r7127, %r24, 8;
	shl.b32 	%r7131, %r1682, 8;
	or.b32  	%r7132, %r7131, 128;
	mad.lo.s32 	%r7133, %r7132, %r23, %r2091;
	add.s32 	%r7134, %r7133, %r7127;
	shl.b32 	%r7135, %r7134, 2;
	mov.u32 	%r7136, _ZN6kernel5shmemE;
	add.s32 	%r7137, %r7136, %r7135;
	shl.b32 	%r7138, %r28, 4;
	add.s32 	%r1674, %r7137, %r7138;
	st.shared.v4.u32 	[%r1674], {%r7424, %r7423, %r7419, %r7418};
	st.shared.v4.u32 	[%r1674+512], {%r7440, %r7433, %r7443, %r7442};
	@%p349 bra 	$L__BB0_655;

	st.shared.v4.u32 	[%r1674+1024], {%r7438, %r7437, %r7436, %r7431};

$L__BB0_655:
	setp.eq.s32 	%p347, %r24, %r2088;
	@%p347 bra 	$L__BB0_657;

	mul.lo.s32 	%r7142, %r2484, 384;
	mad.lo.s32 	%r7143, %r52, %r24, %r7142;
	mad.lo.s32 	%r7146, %r2086, %r2088, %r7143;
	mad.lo.s32 	%r7149, %r2084, %r2083, %r7146;
	shl.b32 	%r7150, %r7149, 2;
	mov.u32 	%r7151, _ZN6kernel5shmemE;
	add.s32 	%r7152, %r7151, %r7150;
	shl.b32 	%r7153, %r28, 4;
	add.s32 	%r7154, %r7152, %r7153;
	st.shared.v4.u32 	[%r7154], {%r7438, %r7437, %r7436, %r7431};
	st.shared.v4.u32 	[%r7154+512], {%r7429, %r7428, %r7397, %r7396};
	st.shared.v4.u32 	[%r7154+1024], {%r7427, %r7425, %r7390, %r7389};

$L__BB0_657:
	setp.ne.s32 	%p348, %r23, %r2083;
	ld.param.u64 	%rd539, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd539;
	@%p348 bra 	$L__BB0_659;

	mad.lo.s32 	%r7156, %r633, %r1684, %r26;
	mad.lo.s32 	%r7157, %r7156, 768, 384;
	mul.lo.s32 	%r7158, %r7157, %r1682;
	mad.lo.s32 	%r7159, %r24, 384, %r7158;
	add.s32 	%r7160, %r7159, -128;
	mul.wide.s32 	%rd540, %r7160, 4;
	add.s64 	%rd541, %rd40, %rd540;
	add.s64 	%rd543, %rd541, %rd275;
	st.global.v4.u32 	[%rd543+512], {%r7424, %r7423, %r7419, %r7418};
	st.global.v4.u32 	[%rd543+1024], {%r7440, %r7433, %r7443, %r7442};
	st.global.v4.u32 	[%rd543+1536], {%r7438, %r7437, %r7436, %r7431};

$L__BB0_659:
	setp.ne.s32 	%p350, %r24, %r2088;
	@%p350 bra 	$L__BB0_662;

	mad.lo.s32 	%r7162, %r634, %r1683, %r25;
	mad.lo.s32 	%r7168, %r2484, 384, %r52;
	mad.lo.s32 	%r7169, %r7162, %r1738, %r7168;
	mad.lo.s32 	%r7172, %r1740, %r51, %r7169;
	mul.wide.s32 	%rd544, %r7172, 4;
	add.s64 	%rd545, %rd40, %rd544;
	add.s64 	%rd41, %rd545, %rd275;
	st.global.v4.u32 	[%rd41], {%r7438, %r7437, %r7436, %r7431};
	st.global.v4.u32 	[%rd41+512], {%r7429, %r7428, %r7397, %r7396};
	st.global.v4.u32 	[%rd41+1024], {%r7427, %r7425, %r7390, %r7389};
	@%p205 bra 	$L__BB0_662;

	st.global.v4.u32 	[%rd41+1536], {%r7601, %r7600, %r7603, %r7602};

$L__BB0_662:
	rem.s32 	%r7173, %r7471, %r1685;
	setp.eq.s32 	%p341, %r7173, 0;
	@%p341 bra 	$L__BB0_664;

	bar.sync 	0;
	bra.uni 	$L__BB0_671;

$L__BB0_664:
	@%p147 bra 	$L__BB0_666;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_666:
	bar.sync 	0;
	@%p148 bra 	$L__BB0_670;

	membar.gl;
	setp.eq.s32 	%p344, %r407, %r408;
	mov.u32 	%r7188, -2147483647;
	sub.s32 	%r7189, %r7188, %r406;
	selp.b32 	%r7177, %r7189, 1, %p344;
	// begin inline asm
	atom.add.release.gpu.u32 %r7176,[%rd25],%r7177;
	// end inline asm

$L__BB0_668:
	ld.volatile.u32 	%r7190, [%rd25];
	xor.b32  	%r7191, %r7190, %r7176;
	setp.gt.s32 	%p345, %r7191, -1;
	@%p345 bra 	$L__BB0_668;

	// begin inline asm
	ld.acquire.gpu.u32 %r7192,[%rd25];
	// end inline asm

$L__BB0_670:
	bar.sync 	0;

$L__BB0_671:
	setp.lt.s32 	%p346, %r1417, %r31;
	mov.u32 	%r7604, %r7762;
	mov.u32 	%r7605, %r7763;
	mov.u32 	%r7592, %r7748;
	mov.u32 	%r7593, %r7749;
	mov.u32 	%r7594, %r7750;
	mov.u32 	%r7595, %r7751;
	mov.u32 	%r7606, %r7764;
	mov.u32 	%r7607, %r7765;
	mov.u32 	%r7608, %r7766;
	mov.u32 	%r7609, %r7767;
	mov.u32 	%r7610, %r7768;
	mov.u32 	%r7611, %r7769;
	mov.u32 	%r7596, %r7754;
	mov.u32 	%r7597, %r7755;
	mov.u32 	%r7598, %r7756;
	mov.u32 	%r7599, %r7757;
	mov.u32 	%r7612, %r7770;
	mov.u32 	%r7613, %r7771;
	mov.u32 	%r7614, %r7772;
	mov.u32 	%r7615, %r7773;
	mov.u32 	%r7391, %r478;
	mov.u32 	%r7392, %r7670;
	mov.u32 	%r7395, %r479;
	mov.u32 	%r7398, %r7672;
	mov.u32 	%r7403, %r484;
	mov.u32 	%r7407, %r487;
	mov.u32 	%r7415, %r7677;
	mov.u32 	%r7420, %r7679;
	mov.u32 	%r7426, %r505;
	mov.u32 	%r7430, %r513;
	mov.u32 	%r7432, %r515;
	mov.u32 	%r7435, %r517;
	mov.u32 	%r7439, %r521;
	mov.u32 	%r7444, %r525;
	mov.u32 	%r7471, %r1417;
	@%p346 bra 	$L__BB0_302;

$L__BB0_672:
	ret;

}

