//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<556>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<578>;
	.reg .b32 	%r<8002>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<590>;


	mov.b64 	%rd44, _ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd44;
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1744, %r1745}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1746, %r1747}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1748, %r1749}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1750, %r1751}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1752, %r1753}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1754, %r1755}, [_ZN6kernel16SimulationKernelI7__half2fLi10ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1756, 32;
	sub.s32 	%r45, %r1756, %r1737;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1757, %r1743, -1;
	mad.lo.s32 	%r1758, %r1757, %r1742, %r1741;
	add.s32 	%r1759, %r1736, %r1735;
	add.s32 	%r1760, %r1759, %r1758;
	add.s32 	%r1761, %r1760, 1;
	mul.lo.s32 	%r1762, %r1730, %r1732;
	shl.b32 	%r47, %r1762, 1;
	shl.b32 	%r1763, %r1762, 2;
	div.s32 	%r1764, %r1761, %r1763;
	add.s32 	%r1765, %r1764, 1;
	mul.lo.s32 	%r1766, %r1765, %r1736;
	mul.lo.s32 	%r1767, %r1731, %r1733;
	shl.b32 	%r48, %r1767, 1;
	div.s32 	%r1768, %r1766, %r48;
	add.s32 	%r1769, %r1768, 1;
	mul.lo.s32 	%r49, %r1769, %r1735;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r7387, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r7387, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd45, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd45;
	mad.lo.s32 	%r1772, %r1732, %r44, %r43;
	mad.lo.s32 	%r1773, %r1772, %r1731, %r42;
	mul.lo.s32 	%r53, %r1773, %r1730;
	add.s32 	%r1774, %r53, %r41;
	shl.b32 	%r54, %r1774, 5;
	add.s32 	%r7392, %r54, %r46;
	mul.lo.s32 	%r1775, %r1767, %r1762;
	shl.b32 	%r58, %r1775, 5;
	mov.u32 	%r1776, 8;
	sub.s32 	%r1777, %r1776, %r1744;
	add.s32 	%r1778, %r1777, %r1745;
	sub.s32 	%r1779, %r1776, %r1746;
	add.s32 	%r1780, %r1779, %r1747;
	sub.s32 	%r59, %r1749, %r1748;
	mul.lo.s32 	%r1781, %r1743, %r59;
	mul.lo.s32 	%r1782, %r1781, %r1780;
	mul.lo.s32 	%r1783, %r1782, %r1778;
	mul.lo.s32 	%r60, %r1783, 3;
	setp.ge.s32 	%p29, %r7392, %r60;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1784, %r1747, 8;
	sub.s32 	%r1785, %r1784, %r1746;
	mul.lo.s32 	%r1786, %r1743, %r1785;
	add.s32 	%r1787, %r1745, 8;
	sub.s32 	%r1788, %r1787, %r1744;
	mul.lo.s32 	%r1789, %r1786, %r1788;
	mul.lo.s32 	%r1790, %r1789, %r59;
	not.b32 	%r1791, %r46;
	mad.lo.s32 	%r1792, %r1790, 3, %r1791;
	sub.s32 	%r1793, %r1792, %r54;
	mul.lo.s32 	%r1794, %r1767, %r1730;
	mul.lo.s32 	%r1795, %r1794, %r1732;
	shl.b32 	%r61, %r1795, 5;
	div.u32 	%r62, %r1793, %r61;
	add.s32 	%r1796, %r62, 1;
	and.b32  	%r7389, %r1796, 3;
	setp.eq.s32 	%p30, %r7389, 0;
	mov.u32 	%r7390, %r7392;
	@%p30 bra 	$L__BB0_7;

	shl.b32 	%r1797, %r53, 5;
	add.s32 	%r1798, %r46, %r1797;
	shl.b32 	%r1799, %r41, 5;
	add.s32 	%r7390, %r1798, %r1799;
	mul.wide.s32 	%rd46, %r7392, 4;
	add.s64 	%rd587, %rd2, %rd46;
	mul.wide.s32 	%rd4, %r61, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1800, 0;
	st.global.u32 	[%rd587], %r1800;
	add.s32 	%r7390, %r7390, %r61;
	add.s64 	%rd587, %rd587, %rd4;
	add.s32 	%r7389, %r7389, -1;
	setp.ne.s32 	%p31, %r7389, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r62, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd49, %r58, 4;

$L__BB0_9:
	mul.wide.s32 	%rd47, %r7390, 4;
	add.s64 	%rd48, %rd2, %rd47;
	mov.u32 	%r1801, 0;
	st.global.u32 	[%rd48], %r1801;
	add.s64 	%rd50, %rd48, %rd49;
	st.global.u32 	[%rd50], %r1801;
	add.s32 	%r1802, %r7390, %r58;
	add.s32 	%r1803, %r1802, %r58;
	add.s64 	%rd51, %rd50, %rd49;
	st.global.u32 	[%rd51], %r1801;
	add.s32 	%r1804, %r1803, %r58;
	add.s64 	%rd52, %rd51, %rd49;
	st.global.u32 	[%rd52], %r1801;
	add.s32 	%r7390, %r1804, %r58;
	setp.lt.s32 	%p33, %r7390, %r60;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd53, [%rd1+104];
	cvta.to.global.u64 	%rd7, %rd53;
	sub.s32 	%r1805, %r1736, %r47;
	div.s32 	%r1806, %r1805, %r48;
	mul.lo.s32 	%r1807, %r1806, %r1735;
	sub.s32 	%r72, %r1807, %r47;
	sub.s32 	%r1808, %r1735, %r48;
	mul.lo.s32 	%r1809, %r1808, %r1732;
	mul.lo.s32 	%r73, %r1730, 384;
	add.s32 	%r1810, %r73, %r73;
	add.s32 	%r1811, %r1810, 128;
	mul.lo.s32 	%r1813, %r1767, 768;
	mul.lo.s32 	%r1814, %r1809, %r1811;
	mad.lo.s32 	%r74, %r1813, %r72, %r1814;
	bra.uni 	$L__BB0_11;

$L__BB0_895:
	mov.f32 	%f565, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f565;
  cvt.rn.f16.f32 high, %f565;
  mov.b32 %r7357, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd575, %r7392, 4;
	add.s64 	%rd576, %rd7, %rd575;
	st.global.u32 	[%rd576], %r7357;
	add.s32 	%r7392, %r7392, %r58;

$L__BB0_11:
	setp.lt.s32 	%p34, %r7392, %r74;
	@%p34 bra 	$L__BB0_895;

	ld.param.u64 	%rd54, [%rd1+144];
	cvta.to.global.u64 	%rd9, %rd54;
	ld.param.u64 	%rd55, [%rd1+112];
	cvta.to.global.u64 	%rd10, %rd55;
	mad.lo.s32 	%r7428, %r1730, %r43, %r41;
	mul.lo.s32 	%r82, %r1731, %r44;
	add.s32 	%r83, %r82, %r42;
	setp.ge.s32 	%p35, %r7428, %r1735;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1815, 31;
	sub.s32 	%r1816, %r1815, %r46;
	selp.b32 	%r1817, %r46, %r1816, %p36;
	shl.b32 	%r1818, %r1817, 2;
	mov.u32 	%r1819, 2;
	sub.s32 	%r84, %r1818, %r1738;
	shl.b32 	%r1820, %r1737, 2;
	mov.u32 	%r1821, 128;
	sub.s32 	%r85, %r1821, %r1820;
	sub.s32 	%r1822, %r1819, %r1738;
	add.s32 	%r86, %r1822, %r1818;
	sub.s32 	%r87, %r1745, %r1744;
	sub.s32 	%r88, %r1747, %r1746;
	add.s32 	%r89, %r1745, -1;
	add.s32 	%r90, %r1747, -1;
	add.s32 	%r91, %r1749, -1;
	mul.lo.s32 	%r1823, %r1736, %r1735;
	shl.b32 	%r92, %r1823, 6;
	add.s32 	%r93, %r1735, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r94, %r84, 1;
	add.s32 	%r95, %r86, 1;
	shl.b32 	%r96, %r46, 1;
	or.b32  	%r97, %r96, 1;
	shr.u32 	%r1824, %r97, 31;
	add.s32 	%r1825, %r97, %r1824;
	shr.s32 	%r99, %r1825, 1;
	and.b32  	%r1826, %r1825, -2;
	sub.s32 	%r1827, %r97, %r1826;
	add.s32 	%r98, %r1827, %r92;
	rem.s32 	%r1883, %r94, %r85;
	add.s32 	%r1884, %r1883, %r85;
	rem.s32 	%r1885, %r1884, %r85;
	rem.s32 	%r1886, %r95, %r85;
	add.s32 	%r1887, %r1886, %r85;
	rem.s32 	%r1888, %r1887, %r85;
	mov.u32 	%r7393, %r7428;

$L__BB0_14:
	setp.ge.s32 	%p37, %r83, %r1736;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r7393, %r1750;
	setp.lt.s32 	%p39, %r7393, %r1751;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r7393, %r1745;
	setp.ge.s32 	%p41, %r7393, %r1744;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1828, %r7393, %r89, %p40;
	setp.lt.s32 	%p42, %r7393, %r1744;
	selp.b32 	%r1829, %r1744, %r1828, %p42;
	sub.s32 	%r1830, %r1829, %r1744;
	add.s32 	%r101, %r93, %r7393;
	rem.s32 	%r1831, %r84, %r85;
	add.s32 	%r1832, %r1831, %r85;
	rem.s32 	%r102, %r1832, %r85;
	rem.s32 	%r1833, %r86, %r85;
	add.s32 	%r1834, %r1833, %r85;
	rem.s32 	%r103, %r1834, %r85;
	setp.lt.s32 	%p43, %r102, %r1749;
	sub.s32 	%r104, %r102, %r1748;
	setp.lt.s32 	%p44, %r102, %r1748;
	selp.b32 	%r1835, %r102, %r91, %p43;
	selp.b32 	%r1836, %r1748, %r1835, %p44;
	sub.s32 	%r105, %r1836, %r1748;
	setp.lt.s32 	%p45, %r103, %r1749;
	sub.s32 	%r106, %r103, %r1748;
	setp.lt.s32 	%p46, %r103, %r1748;
	selp.b32 	%r1837, %r103, %r91, %p45;
	selp.b32 	%r1838, %r1748, %r1837, %p46;
	sub.s32 	%r107, %r1838, %r1748;
	sub.s32 	%r1839, %r7393, %r1744;
	mul.lo.s32 	%r108, %r1839, %r88;
	mul.lo.s32 	%r109, %r1830, %r88;
	add.s32 	%r1840, %r1839, %r87;
	mul.lo.s32 	%r110, %r1840, %r88;
	add.s32 	%r1841, %r1830, %r87;
	mul.lo.s32 	%r111, %r1841, %r88;
	add.s32 	%r1842, %r1840, %r87;
	mul.lo.s32 	%r112, %r1842, %r88;
	add.s32 	%r1843, %r1841, %r87;
	mul.lo.s32 	%r113, %r1843, %r88;
	mov.u32 	%r7394, %r83;

$L__BB0_16:
	setp.ge.s32 	%p47, %r7394, %r1752;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r7394, %r1753;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r7394, %r1746;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r7394, %r1747;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r115, %r7394, %r1746;
	selp.b32 	%r1844, %r7394, %r90, %p52;
	setp.lt.s32 	%p53, %r7394, %r1746;
	selp.b32 	%r1845, %r1746, %r1844, %p53;
	sub.s32 	%r116, %r1845, %r1746;
	mul.lo.s32 	%r117, %r7394, %r1735;
	add.s32 	%r118, %r117, %r7393;
	shl.b32 	%r119, %r118, 6;
	setp.ge.s32 	%p54, %r102, %r1754;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r102, %r1755;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r102, %r1748;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r103, %r1748;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f566, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1848, %r115, %r108;
	mad.lo.s32 	%r1849, %r1848, %r59, %r104;
	mul.wide.s32 	%rd58, %r1849, 4;
	add.s64 	%rd59, %rd9, %rd58;
	ld.global.f32 	%f566, [%rd59];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1846, %r116, %r109;
	mad.lo.s32 	%r1847, %r1846, %r59, %r105;
	mul.wide.s32 	%rd56, %r1847, 4;
	add.s64 	%rd57, %rd9, %rd56;
	ld.global.f32 	%f566, [%rd57];

$L__BB0_20:
	setp.lt.s32 	%p67, %r103, %r1755;
	setp.ge.s32 	%p68, %r103, %r1754;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f567, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1852, %r115, %r108;
	mad.lo.s32 	%r1853, %r1852, %r59, %r106;
	mul.wide.s32 	%rd62, %r1853, 4;
	add.s64 	%rd63, %rd9, %rd62;
	ld.global.f32 	%f567, [%rd63];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1850, %r116, %r109;
	mad.lo.s32 	%r1851, %r1850, %r59, %r107;
	mul.wide.s32 	%rd60, %r1851, 4;
	add.s64 	%rd61, %rd9, %rd60;
	ld.global.f32 	%f567, [%rd61];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f566;
  cvt.rn.f16.f32 high, %f567;
  mov.b32 %r1854, {low,high};}

	// end inline asm
	shl.b32 	%r120, %r118, 5;
	add.s32 	%r1855, %r120, %r46;
	shl.b32 	%r1856, %r1855, 2;
	add.s32 	%r1857, %r92, %r1856;
	mul.wide.s32 	%rd64, %r1857, 4;
	add.s64 	%rd65, %rd10, %rd64;
	st.global.u32 	[%rd65], %r1854;
	mov.f32 	%f568, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1860, %r115, %r110;
	mad.lo.s32 	%r1861, %r1860, %r59, %r104;
	mul.wide.s32 	%rd68, %r1861, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f568, [%rd69];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1858, %r116, %r111;
	mad.lo.s32 	%r1859, %r1858, %r59, %r105;
	mul.wide.s32 	%rd66, %r1859, 4;
	add.s64 	%rd67, %rd9, %rd66;
	ld.global.f32 	%f568, [%rd67];

$L__BB0_28:
	mov.f32 	%f569, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1864, %r115, %r110;
	mad.lo.s32 	%r1865, %r1864, %r59, %r106;
	mul.wide.s32 	%rd72, %r1865, 4;
	add.s64 	%rd73, %rd9, %rd72;
	ld.global.f32 	%f569, [%rd73];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1862, %r116, %r111;
	mad.lo.s32 	%r1863, %r1862, %r59, %r107;
	mul.wide.s32 	%rd70, %r1863, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f569, [%rd71];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f568;
  cvt.rn.f16.f32 high, %f569;
  mov.b32 %r1866, {low,high};}

	// end inline asm
	add.s32 	%r1867, %r96, %r119;
	mul.wide.s32 	%rd74, %r1867, 4;
	add.s64 	%rd75, %rd10, %rd74;
	st.global.u32 	[%rd75], %r1866;
	mov.f32 	%f570, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1870, %r115, %r112;
	mad.lo.s32 	%r1871, %r1870, %r59, %r104;
	mul.wide.s32 	%rd78, %r1871, 4;
	add.s64 	%rd79, %rd9, %rd78;
	ld.global.f32 	%f570, [%rd79];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1868, %r116, %r113;
	mad.lo.s32 	%r1869, %r1868, %r59, %r105;
	mul.wide.s32 	%rd76, %r1869, 4;
	add.s64 	%rd77, %rd9, %rd76;
	ld.global.f32 	%f570, [%rd77];

$L__BB0_36:
	mov.f32 	%f571, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1874, %r115, %r112;
	mad.lo.s32 	%r1875, %r1874, %r59, %r106;
	mul.wide.s32 	%rd82, %r1875, 4;
	add.s64 	%rd83, %rd9, %rd82;
	ld.global.f32 	%f571, [%rd83];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1872, %r116, %r113;
	mad.lo.s32 	%r1873, %r1872, %r59, %r107;
	mul.wide.s32 	%rd80, %r1873, 4;
	add.s64 	%rd81, %rd9, %rd80;
	ld.global.f32 	%f571, [%rd81];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f570;
  cvt.rn.f16.f32 high, %f571;
  mov.b32 %r1876, {low,high};}

	// end inline asm
	rem.s32 	%r1877, %r101, %r1735;
	add.s32 	%r1878, %r1877, %r117;
	shl.b32 	%r121, %r1878, 5;
	add.s32 	%r1879, %r121, %r46;
	shl.b32 	%r1880, %r1879, 2;
	add.s32 	%r1881, %r92, %r1880;
	add.s32 	%r1882, %r1881, 2;
	mul.wide.s32 	%rd84, %r1882, 4;
	add.s64 	%rd85, %rd10, %rd84;
	st.global.u32 	[%rd85], %r1876;
	setp.ge.s32 	%p76, %r1885, %r1754;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1885, %r1755;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1885, %r1748;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1885, %r1749;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1888, %r1754;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1888, %r1755;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r122, %r1885, %r1748;
	setp.lt.s32 	%p86, %r1885, %r1748;
	selp.b32 	%r1889, %r1885, %r91, %p82;
	selp.b32 	%r1890, %r1748, %r1889, %p86;
	sub.s32 	%r123, %r1890, %r1748;
	setp.ge.s32 	%p87, %r1888, %r1748;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1888, %r1749;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r124, %r1888, %r1748;
	setp.lt.s32 	%p90, %r1888, %r1748;
	selp.b32 	%r1891, %r1888, %r91, %p89;
	selp.b32 	%r1892, %r1748, %r1891, %p90;
	sub.s32 	%r125, %r1892, %r1748;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f572, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1895, %r115, %r108;
	mad.lo.s32 	%r1896, %r1895, %r59, %r122;
	mul.wide.s32 	%rd88, %r1896, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f572, [%rd89];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1893, %r116, %r109;
	mad.lo.s32 	%r1894, %r1893, %r59, %r123;
	mul.wide.s32 	%rd86, %r1894, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f572, [%rd87];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f573, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1899, %r115, %r108;
	mad.lo.s32 	%r1900, %r1899, %r59, %r124;
	mul.wide.s32 	%rd92, %r1900, 4;
	add.s64 	%rd93, %rd9, %rd92;
	ld.global.f32 	%f573, [%rd93];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1897, %r116, %r109;
	mad.lo.s32 	%r1898, %r1897, %r59, %r125;
	mul.wide.s32 	%rd90, %r1898, 4;
	add.s64 	%rd91, %rd9, %rd90;
	ld.global.f32 	%f573, [%rd91];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f572;
  cvt.rn.f16.f32 high, %f573;
  mov.b32 %r1901, {low,high};}

	// end inline asm
	add.s32 	%r1902, %r120, %r99;
	shl.b32 	%r1903, %r1902, 2;
	add.s32 	%r1904, %r98, %r1903;
	mul.wide.s32 	%rd94, %r1904, 4;
	add.s64 	%rd95, %rd10, %rd94;
	st.global.u32 	[%rd95], %r1901;
	mov.f32 	%f574, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1907, %r115, %r110;
	mad.lo.s32 	%r1908, %r1907, %r59, %r122;
	mul.wide.s32 	%rd98, %r1908, 4;
	add.s64 	%rd99, %rd9, %rd98;
	ld.global.f32 	%f574, [%rd99];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1905, %r116, %r111;
	mad.lo.s32 	%r1906, %r1905, %r59, %r123;
	mul.wide.s32 	%rd96, %r1906, 4;
	add.s64 	%rd97, %rd9, %rd96;
	ld.global.f32 	%f574, [%rd97];

$L__BB0_52:
	mov.f32 	%f575, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1911, %r115, %r110;
	mad.lo.s32 	%r1912, %r1911, %r59, %r124;
	mul.wide.s32 	%rd102, %r1912, 4;
	add.s64 	%rd103, %rd9, %rd102;
	ld.global.f32 	%f575, [%rd103];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1909, %r116, %r111;
	mad.lo.s32 	%r1910, %r1909, %r59, %r125;
	mul.wide.s32 	%rd100, %r1910, 4;
	add.s64 	%rd101, %rd9, %rd100;
	ld.global.f32 	%f575, [%rd101];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f574;
  cvt.rn.f16.f32 high, %f575;
  mov.b32 %r1913, {low,high};}

	// end inline asm
	add.s32 	%r1914, %r97, %r119;
	mul.wide.s32 	%rd104, %r1914, 4;
	add.s64 	%rd105, %rd10, %rd104;
	st.global.u32 	[%rd105], %r1913;
	mov.f32 	%f576, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1917, %r115, %r112;
	mad.lo.s32 	%r1918, %r1917, %r59, %r122;
	mul.wide.s32 	%rd108, %r1918, 4;
	add.s64 	%rd109, %rd9, %rd108;
	ld.global.f32 	%f576, [%rd109];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1915, %r116, %r113;
	mad.lo.s32 	%r1916, %r1915, %r59, %r123;
	mul.wide.s32 	%rd106, %r1916, 4;
	add.s64 	%rd107, %rd9, %rd106;
	ld.global.f32 	%f576, [%rd107];

$L__BB0_60:
	mov.f32 	%f577, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1921, %r115, %r112;
	mad.lo.s32 	%r1922, %r1921, %r59, %r124;
	mul.wide.s32 	%rd112, %r1922, 4;
	add.s64 	%rd113, %rd9, %rd112;
	ld.global.f32 	%f577, [%rd113];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1919, %r116, %r113;
	mad.lo.s32 	%r1920, %r1919, %r59, %r125;
	mul.wide.s32 	%rd110, %r1920, 4;
	add.s64 	%rd111, %rd9, %rd110;
	ld.global.f32 	%f577, [%rd111];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f576;
  cvt.rn.f16.f32 high, %f577;
  mov.b32 %r1923, {low,high};}

	// end inline asm
	add.s32 	%r1924, %r121, %r99;
	shl.b32 	%r1925, %r1924, 2;
	add.s32 	%r1926, %r98, %r1925;
	add.s32 	%r1927, %r1926, 2;
	mul.wide.s32 	%rd114, %r1927, 4;
	add.s64 	%rd115, %rd10, %rd114;
	st.global.u32 	[%rd115], %r1923;
	add.s32 	%r7394, %r7394, %r1767;
	setp.lt.s32 	%p99, %r7394, %r1736;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r7393, %r7393, %r1762;
	setp.lt.s32 	%p100, %r7393, %r1735;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd116, [%rd1+152];
	cvta.to.global.u64 	%rd11, %rd116;
	ld.param.u64 	%rd117, [%rd1+120];
	cvta.to.global.u64 	%rd12, %rd117;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r128, %r83, 1;
	mov.u64 	%rd118, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7395, %r7428;

$L__BB0_68:
	setp.ge.s32 	%p102, %r128, %r1736;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r7396, %r128;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1929, %r7396, 31;
	add.s32 	%r1930, %r7396, %r1929;
	shr.s32 	%r1931, %r1930, 1;
	mad.lo.s32 	%r1932, %r1931, %r1735, %r7395;
	shl.b32 	%r132, %r1932, 5;
	add.s32 	%r133, %r7396, -2;
	mul.lo.s32 	%r134, %r133, %r1735;
	add.s32 	%r1933, %r1736, %r133;
	mul.lo.s32 	%r135, %r1933, %r1735;
	add.s32 	%r1934, %r1933, %r1736;
	mul.lo.s32 	%r136, %r1934, %r1735;
	add.s32 	%r137, %r134, %r1735;
	add.s32 	%r138, %r7396, -1;
	add.s32 	%r1935, %r1736, %r138;
	mul.lo.s32 	%r139, %r1935, %r1735;
	add.s32 	%r1936, %r1935, %r1736;
	mul.lo.s32 	%r140, %r1936, %r1735;
	add.s32 	%r1937, %r1736, %r7396;
	mul.lo.s32 	%r141, %r1937, %r1735;
	add.s32 	%r1938, %r1937, %r1736;
	mul.lo.s32 	%r142, %r1938, %r1735;
	mul.lo.s32 	%r143, %r7396, %r1735;
	add.s32 	%r144, %r143, %r1735;
	add.s32 	%r145, %r7396, 1;
	add.s32 	%r1939, %r1736, %r145;
	mul.lo.s32 	%r146, %r1939, %r1735;
	add.s32 	%r1940, %r1939, %r1736;
	mul.lo.s32 	%r147, %r1940, %r1735;
	add.s32 	%r148, %r144, %r1735;
	add.s32 	%r149, %r7396, 2;
	add.s32 	%r1941, %r1736, %r149;
	mul.lo.s32 	%r150, %r1941, %r1735;
	add.s32 	%r1942, %r1941, %r1736;
	mul.lo.s32 	%r151, %r1942, %r1735;
	mov.u32 	%r7399, 0;
	mov.u64 	%rd588, %rd118;

$L__BB0_72:
	ld.global.nc.u32 	%r1943, [%rd588];
	cvt.rn.f64.s32 	%fd1, %r1943;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r153, %r1943, %r7395;
	setp.lt.s32 	%p104, %r153, %r1735;
	or.b32  	%r1944, %r133, %r153;
	setp.gt.s32 	%p105, %r1944, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r133, %r1736;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1947, %r134, %r153;
	mul.wide.s32 	%rd119, %r1947, 4;
	add.s64 	%rd120, %rd11, %rd119;
	ld.global.f32 	%f93, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r7398, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r7398, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1948, %r7399, %r132;
	mul.wide.s32 	%rd121, %r1948, 4;
	add.s64 	%rd122, %rd12, %rd121;
	st.global.u32 	[%rd122], %r7398;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1951, %r135, %r153;
	mul.wide.s32 	%rd123, %r1951, 4;
	add.s64 	%rd124, %rd11, %rd123;
	ld.global.f32 	%f98, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7400, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7400, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1952, %r7399, %r132;
	mul.wide.s32 	%rd125, %r1952, 4;
	add.s64 	%rd126, %rd12, %rd125;
	st.global.u32 	[%rd126], %r7400;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1955, %r136, %r153;
	mul.wide.s32 	%rd127, %r1955, 4;
	add.s64 	%rd128, %rd11, %rd127;
	ld.global.f32 	%f102, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r7402, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r7402, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1956, %r7399, %r132;
	mul.wide.s32 	%rd129, %r1956, 4;
	add.s64 	%rd130, %rd12, %rd129;
	st.global.u32 	[%rd130], %r7402;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_87:
	or.b32  	%r1957, %r138, %r153;
	setp.gt.s32 	%p111, %r1957, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r7396, %r1736;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1960, %r137, %r153;
	mul.wide.s32 	%rd131, %r1960, 4;
	add.s64 	%rd132, %rd11, %rd131;
	ld.global.f32 	%f105, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7404, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7404, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1961, %r7399, %r132;
	mul.wide.s32 	%rd133, %r1961, 4;
	add.s64 	%rd134, %rd12, %rd133;
	st.global.u32 	[%rd134], %r7404;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1964, %r139, %r153;
	mul.wide.s32 	%rd135, %r1964, 4;
	add.s64 	%rd136, %rd11, %rd135;
	ld.global.f32 	%f108, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7406, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7406, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1965, %r7399, %r132;
	mul.wide.s32 	%rd137, %r1965, 4;
	add.s64 	%rd138, %rd12, %rd137;
	st.global.u32 	[%rd138], %r7406;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1968, %r140, %r153;
	mul.wide.s32 	%rd139, %r1968, 4;
	add.s64 	%rd140, %rd11, %rd139;
	ld.global.f32 	%f111, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7408, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7408, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1969, %r7399, %r132;
	mul.wide.s32 	%rd141, %r1969, 4;
	add.s64 	%rd142, %rd12, %rd141;
	st.global.u32 	[%rd142], %r7408;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_102:
	or.b32  	%r1970, %r7396, %r153;
	setp.gt.s32 	%p118, %r1970, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r7396, %r1736;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1973, %r143, %r153;
	mul.wide.s32 	%rd143, %r1973, 4;
	add.s64 	%rd144, %rd11, %rd143;
	ld.global.f32 	%f114, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7410, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1974, %r7399, %r132;
	mul.wide.s32 	%rd145, %r1974, 4;
	add.s64 	%rd146, %rd12, %rd145;
	st.global.u32 	[%rd146], %r7410;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1977, %r141, %r153;
	mul.wide.s32 	%rd147, %r1977, 4;
	add.s64 	%rd148, %rd11, %rd147;
	ld.global.f32 	%f118, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r7412, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r7412, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1978, %r7399, %r132;
	mul.wide.s32 	%rd149, %r1978, 4;
	add.s64 	%rd150, %rd12, %rd149;
	st.global.u32 	[%rd150], %r7412;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1981, %r142, %r153;
	mul.wide.s32 	%rd151, %r1981, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f121, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r7414, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r7414, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1982, %r7399, %r132;
	mul.wide.s32 	%rd153, %r1982, 4;
	add.s64 	%rd154, %rd12, %rd153;
	st.global.u32 	[%rd154], %r7414;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_117:
	or.b32  	%r1983, %r145, %r153;
	setp.gt.s32 	%p125, %r1983, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r145, %r1736;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1986, %r144, %r153;
	mul.wide.s32 	%rd155, %r1986, 4;
	add.s64 	%rd156, %rd11, %rd155;
	ld.global.f32 	%f124, [%rd156];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r7416, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r7416, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1987, %r7399, %r132;
	mul.wide.s32 	%rd157, %r1987, 4;
	add.s64 	%rd158, %rd12, %rd157;
	st.global.u32 	[%rd158], %r7416;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1990, %r146, %r153;
	mul.wide.s32 	%rd159, %r1990, 4;
	add.s64 	%rd160, %rd11, %rd159;
	ld.global.f32 	%f127, [%rd160];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r7418, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r7418, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1991, %r7399, %r132;
	mul.wide.s32 	%rd161, %r1991, 4;
	add.s64 	%rd162, %rd12, %rd161;
	st.global.u32 	[%rd162], %r7418;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1994, %r147, %r153;
	mul.wide.s32 	%rd163, %r1994, 4;
	add.s64 	%rd164, %rd11, %rd163;
	ld.global.f32 	%f130, [%rd164];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r7420, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r7420, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1995, %r7399, %r132;
	mul.wide.s32 	%rd165, %r1995, 4;
	add.s64 	%rd166, %rd12, %rd165;
	st.global.u32 	[%rd166], %r7420;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_132:
	or.b32  	%r1996, %r149, %r153;
	setp.gt.s32 	%p132, %r1996, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r149, %r1736;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1999, %r148, %r153;
	mul.wide.s32 	%rd167, %r1999, 4;
	add.s64 	%rd168, %rd11, %rd167;
	ld.global.f32 	%f133, [%rd168];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r7422, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7422, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r2000, %r7399, %r132;
	mul.wide.s32 	%rd169, %r2000, 4;
	add.s64 	%rd170, %rd12, %rd169;
	st.global.u32 	[%rd170], %r7422;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r2003, %r150, %r153;
	mul.wide.s32 	%rd171, %r2003, 4;
	add.s64 	%rd172, %rd11, %rd171;
	ld.global.f32 	%f136, [%rd172];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r7424, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r7424, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r2004, %r7399, %r132;
	mul.wide.s32 	%rd173, %r2004, 4;
	add.s64 	%rd174, %rd12, %rd173;
	st.global.u32 	[%rd174], %r7424;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r2007, %r151, %r153;
	mul.wide.s32 	%rd175, %r2007, 4;
	add.s64 	%rd176, %rd11, %rd175;
	ld.global.f32 	%f139, [%rd176];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r7426, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7426, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r2008, %r7399, %r132;
	mul.wide.s32 	%rd177, %r2008, 4;
	add.s64 	%rd178, %rd12, %rd177;
	st.global.u32 	[%rd178], %r7426;
	add.s32 	%r7399, %r7399, 1;

$L__BB0_147:
	add.s64 	%rd588, %rd588, 4;
	mov.u64 	%rd179, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd180, %rd179, 24;
	setp.ne.s64 	%p139, %rd588, %rd180;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r7396, %r7396, %r48;
	setp.lt.s32 	%p140, %r7396, %r1736;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r7395, %r7395, %r1762;
	setp.lt.s32 	%p141, %r7395, %r1735;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1739, 1;
	ld.param.u64 	%rd181, [%rd1+160];
	cvta.to.global.u64 	%rd15, %rd181;
	ld.param.u64 	%rd182, [%rd1+128];
	cvta.to.global.u64 	%rd16, %rd182;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r257, %r83, 1;
	shr.u32 	%r2056, %r1740, 31;
	add.s32 	%r2057, %r1740, %r2056;
	shr.u32 	%r2058, %r2057, 1;
	and.b32  	%r258, %r2058, 1;
	mov.u64 	%rd201, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd283, %rd201, 24;

$L__BB0_170:
	setp.ge.s32 	%p152, %r257, %r1736;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r7434, %r257;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r2060, %r7434, 31;
	add.s32 	%r2061, %r7434, %r2060;
	shr.s32 	%r2062, %r2061, 1;
	mad.lo.s32 	%r2063, %r2062, %r1735, %r7428;
	shl.b32 	%r262, %r2063, 5;
	add.s32 	%r263, %r7434, -2;
	mul.lo.s32 	%r264, %r263, %r1735;
	add.s32 	%r2064, %r1736, %r263;
	mul.lo.s32 	%r265, %r2064, %r1735;
	add.s32 	%r266, %r264, %r1735;
	add.s32 	%r267, %r7434, -1;
	add.s32 	%r2065, %r1736, %r267;
	mul.lo.s32 	%r268, %r2065, %r1735;
	add.s32 	%r2066, %r1736, %r7434;
	mul.lo.s32 	%r269, %r2066, %r1735;
	mul.lo.s32 	%r270, %r7434, %r1735;
	add.s32 	%r271, %r270, %r1735;
	add.s32 	%r272, %r7434, 1;
	add.s32 	%r2067, %r1736, %r272;
	mul.lo.s32 	%r273, %r2067, %r1735;
	add.s32 	%r274, %r271, %r1735;
	add.s32 	%r275, %r7434, 2;
	add.s32 	%r2068, %r1736, %r275;
	mul.lo.s32 	%r276, %r2068, %r1735;
	mov.u32 	%r7438, 0;
	mov.u64 	%rd589, %rd201;

$L__BB0_174:
	ld.global.nc.u32 	%r2069, [%rd589];
	cvt.rn.f64.s32 	%fd2, %r2069;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r278, %r2069, %r7428;
	setp.lt.s32 	%p154, %r278, %r1735;
	or.b32  	%r2070, %r263, %r278;
	setp.gt.s32 	%p155, %r2070, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r263, %r1736;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r258, 0;
	add.s32 	%r2072, %r264, %r278;
	shl.b32 	%r2073, %r2072, 1;
	mul.wide.s32 	%rd202, %r2073, 4;
	add.s64 	%rd203, %rd15, %rd202;
	ld.global.f32 	%f47, [%rd203];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r7436, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r7436, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r7436, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r283, %r7438, %r262;
	mul.wide.s32 	%rd204, %r283, 4;
	add.s64 	%rd205, %rd16, %rd204;
	st.global.u32 	[%rd205], %r7436;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r258, 0;
	add.s32 	%r2077, %r265, %r278;
	shl.b32 	%r2078, %r2077, 1;
	mul.wide.s32 	%rd206, %r2078, 4;
	add.s64 	%rd207, %rd15, %rd206;
	ld.global.f32 	%f48, [%rd207];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r7437, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r7437, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r7437, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r2081, %r283, 1;
	mul.wide.s32 	%rd208, %r2081, 4;
	add.s64 	%rd209, %rd16, %rd208;
	st.global.u32 	[%rd209], %r7437;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r258, 0;
	add.s32 	%r2083, %r264, %r278;
	shl.b32 	%r2084, %r2083, 1;
	or.b32  	%r2085, %r2084, 1;
	mul.wide.s32 	%rd210, %r2085, 4;
	add.s64 	%rd211, %rd15, %rd210;
	ld.global.f32 	%f51, [%rd211];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r7439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r7439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r7439, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r294, %r7438, %r262;
	mul.wide.s32 	%rd212, %r294, 4;
	add.s64 	%rd213, %rd16, %rd212;
	st.global.u32 	[%rd213], %r7439;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r258, 0;
	add.s32 	%r2089, %r265, %r278;
	shl.b32 	%r2090, %r2089, 1;
	or.b32  	%r2091, %r2090, 1;
	mul.wide.s32 	%rd214, %r2091, 4;
	add.s64 	%rd215, %rd15, %rd214;
	ld.global.f32 	%f52, [%rd215];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r7440, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r7440, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7440, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r2094, %r294, 1;
	mul.wide.s32 	%rd216, %r2094, 4;
	add.s64 	%rd217, %rd16, %rd216;
	st.global.u32 	[%rd217], %r7440;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_198:
	or.b32  	%r2095, %r267, %r278;
	setp.gt.s32 	%p164, %r2095, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r7434, %r1736;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r258, 0;
	add.s32 	%r2097, %r266, %r278;
	shl.b32 	%r2098, %r2097, 1;
	mul.wide.s32 	%rd218, %r2098, 4;
	add.s64 	%rd219, %rd15, %rd218;
	ld.global.f32 	%f54, [%rd219];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r7442, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r7442, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7442, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r305, %r7438, %r262;
	mul.wide.s32 	%rd220, %r305, 4;
	add.s64 	%rd221, %rd16, %rd220;
	st.global.u32 	[%rd221], %r7442;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r258, 0;
	add.s32 	%r2102, %r268, %r278;
	shl.b32 	%r2103, %r2102, 1;
	mul.wide.s32 	%rd222, %r2103, 4;
	add.s64 	%rd223, %rd15, %rd222;
	ld.global.f32 	%f55, [%rd223];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r7443, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r7443, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r7443, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r2106, %r305, 1;
	mul.wide.s32 	%rd224, %r2106, 4;
	add.s64 	%rd225, %rd16, %rd224;
	st.global.u32 	[%rd225], %r7443;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r258, 0;
	add.s32 	%r2108, %r266, %r278;
	shl.b32 	%r2109, %r2108, 1;
	or.b32  	%r2110, %r2109, 1;
	mul.wide.s32 	%rd226, %r2110, 4;
	add.s64 	%rd227, %rd15, %rd226;
	ld.global.f32 	%f57, [%rd227];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r7445, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r316, %r7438, %r262;
	mul.wide.s32 	%rd228, %r316, 4;
	add.s64 	%rd229, %rd16, %rd228;
	st.global.u32 	[%rd229], %r7445;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r258, 0;
	add.s32 	%r2114, %r268, %r278;
	shl.b32 	%r2115, %r2114, 1;
	or.b32  	%r2116, %r2115, 1;
	mul.wide.s32 	%rd230, %r2116, 4;
	add.s64 	%rd231, %rd15, %rd230;
	ld.global.f32 	%f58, [%rd231];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r7446, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r7446, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r7446, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r2119, %r316, 1;
	mul.wide.s32 	%rd232, %r2119, 4;
	add.s64 	%rd233, %rd16, %rd232;
	st.global.u32 	[%rd233], %r7446;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_222:
	or.b32  	%r2120, %r7434, %r278;
	setp.gt.s32 	%p174, %r2120, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r7434, %r1736;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r258, 0;
	add.s32 	%r2122, %r270, %r278;
	shl.b32 	%r2123, %r2122, 1;
	mul.wide.s32 	%rd234, %r2123, 4;
	add.s64 	%rd235, %rd15, %rd234;
	ld.global.f32 	%f60, [%rd235];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r327, %r7438, %r262;
	mul.wide.s32 	%rd236, %r327, 4;
	add.s64 	%rd237, %rd16, %rd236;
	st.global.u32 	[%rd237], %r7448;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r258, 0;
	add.s32 	%r2127, %r269, %r278;
	shl.b32 	%r2128, %r2127, 1;
	mul.wide.s32 	%rd238, %r2128, 4;
	add.s64 	%rd239, %rd15, %rd238;
	ld.global.f32 	%f61, [%rd239];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7449, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7449, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r7449, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r2131, %r327, 1;
	mul.wide.s32 	%rd240, %r2131, 4;
	add.s64 	%rd241, %rd16, %rd240;
	st.global.u32 	[%rd241], %r7449;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r258, 0;
	add.s32 	%r2133, %r270, %r278;
	shl.b32 	%r2134, %r2133, 1;
	or.b32  	%r2135, %r2134, 1;
	mul.wide.s32 	%rd242, %r2135, 4;
	add.s64 	%rd243, %rd15, %rd242;
	ld.global.f32 	%f62, [%rd243];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r7451, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r338, %r7438, %r262;
	mul.wide.s32 	%rd244, %r338, 4;
	add.s64 	%rd245, %rd16, %rd244;
	st.global.u32 	[%rd245], %r7451;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r258, 0;
	add.s32 	%r2139, %r269, %r278;
	shl.b32 	%r2140, %r2139, 1;
	or.b32  	%r2141, %r2140, 1;
	mul.wide.s32 	%rd246, %r2141, 4;
	add.s64 	%rd247, %rd15, %rd246;
	ld.global.f32 	%f63, [%rd247];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r7452, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r7452, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r7452, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r2144, %r338, 1;
	mul.wide.s32 	%rd248, %r2144, 4;
	add.s64 	%rd249, %rd16, %rd248;
	st.global.u32 	[%rd249], %r7452;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_246:
	or.b32  	%r2145, %r272, %r278;
	setp.gt.s32 	%p184, %r2145, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r272, %r1736;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r258, 0;
	add.s32 	%r2147, %r271, %r278;
	shl.b32 	%r2148, %r2147, 1;
	mul.wide.s32 	%rd250, %r2148, 4;
	add.s64 	%rd251, %rd15, %rd250;
	ld.global.f32 	%f64, [%rd251];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r349, %r7438, %r262;
	mul.wide.s32 	%rd252, %r349, 4;
	add.s64 	%rd253, %rd16, %rd252;
	st.global.u32 	[%rd253], %r7454;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r258, 0;
	add.s32 	%r2152, %r273, %r278;
	shl.b32 	%r2153, %r2152, 1;
	mul.wide.s32 	%rd254, %r2153, 4;
	add.s64 	%rd255, %rd15, %rd254;
	ld.global.f32 	%f65, [%rd255];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r7455, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r7455, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r7455, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r2156, %r349, 1;
	mul.wide.s32 	%rd256, %r2156, 4;
	add.s64 	%rd257, %rd16, %rd256;
	st.global.u32 	[%rd257], %r7455;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r258, 0;
	add.s32 	%r2158, %r271, %r278;
	shl.b32 	%r2159, %r2158, 1;
	or.b32  	%r2160, %r2159, 1;
	mul.wide.s32 	%rd258, %r2160, 4;
	add.s64 	%rd259, %rd15, %rd258;
	ld.global.f32 	%f66, [%rd259];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r7457, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r360, %r7438, %r262;
	mul.wide.s32 	%rd260, %r360, 4;
	add.s64 	%rd261, %rd16, %rd260;
	st.global.u32 	[%rd261], %r7457;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r258, 0;
	add.s32 	%r2164, %r273, %r278;
	shl.b32 	%r2165, %r2164, 1;
	or.b32  	%r2166, %r2165, 1;
	mul.wide.s32 	%rd262, %r2166, 4;
	add.s64 	%rd263, %rd15, %rd262;
	ld.global.f32 	%f67, [%rd263];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r7458, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r7458, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r7458, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r2169, %r360, 1;
	mul.wide.s32 	%rd264, %r2169, 4;
	add.s64 	%rd265, %rd16, %rd264;
	st.global.u32 	[%rd265], %r7458;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_270:
	or.b32  	%r2170, %r275, %r278;
	setp.gt.s32 	%p194, %r2170, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r275, %r1736;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r258, 0;
	add.s32 	%r2172, %r274, %r278;
	shl.b32 	%r2173, %r2172, 1;
	mul.wide.s32 	%rd266, %r2173, 4;
	add.s64 	%rd267, %rd15, %rd266;
	ld.global.f32 	%f68, [%rd267];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r371, %r7438, %r262;
	mul.wide.s32 	%rd268, %r371, 4;
	add.s64 	%rd269, %rd16, %rd268;
	st.global.u32 	[%rd269], %r7460;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r258, 0;
	add.s32 	%r2177, %r276, %r278;
	shl.b32 	%r2178, %r2177, 1;
	mul.wide.s32 	%rd270, %r2178, 4;
	add.s64 	%rd271, %rd15, %rd270;
	ld.global.f32 	%f69, [%rd271];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r7461, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r7461, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r7461, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r2181, %r371, 1;
	mul.wide.s32 	%rd272, %r2181, 4;
	add.s64 	%rd273, %rd16, %rd272;
	st.global.u32 	[%rd273], %r7461;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r258, 0;
	add.s32 	%r2183, %r274, %r278;
	shl.b32 	%r2184, %r2183, 1;
	or.b32  	%r2185, %r2184, 1;
	mul.wide.s32 	%rd274, %r2185, 4;
	add.s64 	%rd275, %rd15, %rd274;
	ld.global.f32 	%f70, [%rd275];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7463, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r382, %r7438, %r262;
	mul.wide.s32 	%rd276, %r382, 4;
	add.s64 	%rd277, %rd16, %rd276;
	st.global.u32 	[%rd277], %r7463;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r258, 0;
	add.s32 	%r2189, %r276, %r278;
	shl.b32 	%r2190, %r2189, 1;
	or.b32  	%r2191, %r2190, 1;
	mul.wide.s32 	%rd278, %r2191, 4;
	add.s64 	%rd279, %rd15, %rd278;
	ld.global.f32 	%f71, [%rd279];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r7464, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r7464, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r7464, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r2194, %r382, 1;
	mul.wide.s32 	%rd280, %r2194, 4;
	add.s64 	%rd281, %rd16, %rd280;
	st.global.u32 	[%rd281], %r7464;
	add.s32 	%r7438, %r7438, 2;

$L__BB0_294:
	add.s64 	%rd589, %rd589, 4;
	setp.ne.s64 	%p204, %rd589, %rd283;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r7434, %r7434, %r48;
	setp.lt.s32 	%p205, %r7434, %r1736;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r7428, %r7428, %r1762;
	setp.lt.s32 	%p206, %r7428, %r1735;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r231, %r82;
	mov.u32 	%r2009, 31;
	sub.s32 	%r2010, %r2009, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r2011, %r46, %r2010, %p144;
	shl.b32 	%r2012, %r2011, 2;
	mov.u32 	%r2013, 2;
	sub.s32 	%r232, %r2012, %r1738;
	shl.b32 	%r2014, %r1737, 2;
	mov.u32 	%r2015, 128;
	sub.s32 	%r233, %r2015, %r2014;
	sub.s32 	%r2016, %r2013, %r1738;
	add.s32 	%r234, %r2016, %r2012;
	add.s32 	%r235, %r1735, -1;
	add.s32 	%r236, %r232, 1;
	add.s32 	%r237, %r234, 1;
	rem.s32 	%r2041, %r236, %r233;
	add.s32 	%r2042, %r2041, %r233;
	rem.s32 	%r248, %r2042, %r233;
	rem.s32 	%r2043, %r237, %r233;
	add.s32 	%r2044, %r2043, %r233;
	rem.s32 	%r249, %r2044, %r233;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r231;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r239, %r7428, 1;
	rem.s32 	%r2017, %r232, %r233;
	add.s32 	%r2018, %r2017, %r233;
	rem.s32 	%r240, %r2018, %r233;
	rem.s32 	%r2019, %r234, %r233;
	add.s32 	%r2020, %r2019, %r233;
	rem.s32 	%r241, %r2020, %r233;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r2023, %r239, %r233;
	add.s32 	%r2024, %r2023, %r240;
	mul.wide.s32 	%rd183, %r2024, 4;
	add.s64 	%rd184, %rd15, %rd183;
	ld.global.f32 	%f142, [%rd184];
	add.s32 	%r2025, %r2023, %r241;
	mul.wide.s32 	%rd185, %r2025, 4;
	add.s64 	%rd186, %rd15, %rd185;
	ld.global.f32 	%f143, [%rd186];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r7429, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r7429, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r2026, %r7428, 5;
	add.s32 	%r2027, %r2026, %r46;
	shl.b32 	%r2028, %r2027, 2;
	mul.wide.s32 	%rd187, %r2028, 4;
	add.s64 	%rd17, %rd16, %rd187;
	st.global.u32 	[%rd17], %r7429;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r2031, %r239, 1;
	mul.lo.s32 	%r2032, %r2031, %r233;
	add.s32 	%r2033, %r2032, %r240;
	mul.wide.s32 	%rd188, %r2033, 4;
	add.s64 	%rd189, %rd15, %rd188;
	ld.global.f32 	%f146, [%rd189];
	add.s32 	%r2034, %r2032, %r241;
	mul.wide.s32 	%rd190, %r2034, 4;
	add.s64 	%rd191, %rd15, %rd190;
	ld.global.f32 	%f147, [%rd191];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7430, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r7430, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r2035, %r235, %r7428;
	rem.s32 	%r2036, %r2035, %r1735;
	shl.b32 	%r2037, %r2036, 5;
	add.s32 	%r2038, %r2037, %r46;
	shl.b32 	%r2039, %r2038, 2;
	or.b32  	%r2040, %r2039, 2;
	mul.wide.s32 	%rd192, %r2040, 4;
	add.s64 	%rd18, %rd16, %rd192;
	st.global.u32 	[%rd18], %r7430;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r2047, %r239, %r233;
	add.s32 	%r2048, %r2047, %r248;
	mul.wide.s32 	%rd193, %r2048, 4;
	add.s64 	%rd194, %rd15, %rd193;
	ld.global.f32 	%f150, [%rd194];
	add.s32 	%r2049, %r2047, %r249;
	mul.wide.s32 	%rd195, %r2049, 4;
	add.s64 	%rd196, %rd15, %rd195;
	ld.global.f32 	%f151, [%rd196];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7431, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r7431, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd17+4], %r7431;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r2052, %r239, 1;
	mul.lo.s32 	%r2053, %r2052, %r233;
	add.s32 	%r2054, %r2053, %r248;
	mul.wide.s32 	%rd197, %r2054, 4;
	add.s64 	%rd198, %rd15, %rd197;
	ld.global.f32 	%f154, [%rd198];
	add.s32 	%r2055, %r2053, %r249;
	mul.wide.s32 	%rd199, %r2055, 4;
	add.s64 	%rd200, %rd15, %rd199;
	ld.global.f32 	%f155, [%rd200];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r7432, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7432, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd18+4], %r7432;

$L__BB0_167:
	add.s32 	%r7428, %r7428, %r1762;
	setp.lt.s32 	%p150, %r7428, %r1735;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r2196, %r1730, -1;
	mad.lo.s32 	%r2197, %r1731, 576, 128;
	mul.lo.s32 	%r2198, %r2197, %r2196;
	add.s32 	%r2199, %r73, -64;
	add.s32 	%r2200, %r2199, %r73;
	add.s32 	%r2201, %r1731, -1;
	mad.lo.s32 	%r2202, %r2200, %r2201, %r2198;
	mul.lo.s32 	%r2203, %r2196, %r1731;
	mul.lo.s32 	%r2204, %r2203, 320;
	mad.lo.s32 	%r2205, %r2199, %r2201, %r2204;
	add.s32 	%r391, %r2205, %r2202;
	setp.lt.s32 	%p207, %r391, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7647, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r7468, 0;
	mov.u32 	%r7466, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r7466], %r7647;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2208, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7466+4], %r2208;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2209, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7466+8], %r2209;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r2210, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7466+12], %r2210;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r7647, {low,high};}

	// end inline asm
	add.s32 	%r7466, %r7466, 16;
	add.s32 	%r7468, %r7468, 4;
	setp.lt.s32 	%p208, %r7468, %r391;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r7648, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r2213, {low,high};}

	// end inline asm
	ld.param.u64 	%rd284, [%rd1+176];
	cvta.to.global.u64 	%rd21, %rd284;
	mov.u32 	%r2214, 31;
	sub.s32 	%r2215, %r2214, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r2216, %r46, %r2215, %p209;
	shl.b32 	%r2217, %r2216, 2;
	sub.s32 	%r402, %r2217, %r1738;
	shl.b32 	%r2218, %r1737, 2;
	mov.u32 	%r2219, 128;
	sub.s32 	%r403, %r2219, %r2218;
	rem.s32 	%r2220, %r402, %r403;
	add.s32 	%r2221, %r2220, %r403;
	rem.s32 	%r404, %r2221, %r403;
	add.s32 	%r2222, %r402, 2;
	rem.s32 	%r2223, %r2222, %r403;
	add.s32 	%r2224, %r2223, %r403;
	rem.s32 	%r405, %r2224, %r403;
	mul.lo.s32 	%r2225, %r404, 6;
	mul.lo.s32 	%r2226, %r405, 6;
	mul.wide.s32 	%rd285, %r2225, 4;
	add.s64 	%rd22, %rd21, %rd285;
	mul.wide.s32 	%rd286, %r2226, 4;
	add.s64 	%rd23, %rd21, %rd286;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r7470, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd22];
	ld.global.f32 	%f299, [%rd22+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd23+8];
	ld.global.f32 	%f301, [%rd23];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r7470, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd22+4];
	ld.global.f32 	%f307, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r7471, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd22];
	ld.global.f32 	%f305, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r7471, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd22+20];
	ld.global.f32 	%f311, [%rd22+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd23+20];
	ld.global.f32 	%f313, [%rd23+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd22+16];
	ld.global.f32 	%f319, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r7473, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd22+12];
	ld.global.f32 	%f317, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r7473, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r2235, %r402, 1;
	rem.s32 	%r2236, %r2235, %r403;
	add.s32 	%r2237, %r2236, %r403;
	rem.s32 	%r418, %r2237, %r403;
	add.s32 	%r2238, %r402, 3;
	rem.s32 	%r2239, %r2238, %r403;
	add.s32 	%r2240, %r2239, %r403;
	rem.s32 	%r419, %r2240, %r403;
	mul.lo.s32 	%r2241, %r418, 6;
	mul.lo.s32 	%r2242, %r419, 6;
	mul.wide.s32 	%rd287, %r2241, 4;
	add.s64 	%rd24, %rd21, %rd287;
	mul.wide.s32 	%rd288, %r2242, 4;
	add.s64 	%rd25, %rd21, %rd288;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r7474, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd24];
	ld.global.f32 	%f323, [%rd24+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd25+8];
	ld.global.f32 	%f325, [%rd25];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r7474, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd24+4];
	ld.global.f32 	%f331, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r7475, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd24];
	ld.global.f32 	%f329, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r7475, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r7476, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd24+20];
	ld.global.f32 	%f335, [%rd24+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd25+20];
	ld.global.f32 	%f337, [%rd25+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r7476, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd24+16];
	ld.global.f32 	%f343, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r7477, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd24+12];
	ld.global.f32 	%f341, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r7477, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2251, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd289, %r2251;
	// begin inline asm
	mov.u32 %r2252, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd290, %r2252;
	bfi.b64 	%rd26, %rd290, %rd289, 32, 32;
	setp.ne.s64 	%p218, %rd26, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd27, %rd26, 4;
	mov.u32 	%r2253, %nctaid.y;
	mov.u32 	%r2254, %nctaid.x;
	mul.lo.s32 	%r2255, %r2254, %r2253;
	mov.u32 	%r2256, %nctaid.z;
	mul.lo.s32 	%r432, %r2255, %r2256;
	neg.s32 	%r2257, %r42;
	add.s32 	%r2258, %r46, %r41;
	setp.ne.s32 	%p219, %r2258, %r2257;
	mov.u32 	%r2259, %ctaid.x;
	add.s32 	%r433, %r2259, %r43;
	neg.s32 	%r434, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r433, %r434;
	mov.u32 	%r2262, -2147483647;
	sub.s32 	%r2263, %r2262, %r432;
	selp.b32 	%r2261, %r2263, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2260,[%rd27],%r2261;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2264, [%rd27];
	xor.b32  	%r2265, %r2264, %r2260;
	setp.gt.s32 	%p221, %r2265, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2266,[%rd27];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_894;

	shr.s32 	%r2280, %r1740, 31;
	shr.u32 	%r2281, %r2280, 30;
	add.s32 	%r2282, %r1740, %r2281;
	shr.s32 	%r436, %r2282, 2;
	add.s32 	%r2283, %r46, 21;
	mul.hi.s32 	%r2284, %r2283, 780903145;
	shr.u32 	%r2285, %r2284, 31;
	shr.s32 	%r2286, %r2284, 2;
	add.s32 	%r2287, %r2286, %r2285;
	mul.lo.s32 	%r2288, %r2287, 22;
	sub.s32 	%r2289, %r2283, %r2288;
	add.s32 	%r2290, %r46, 23;
	mul.hi.s32 	%r2291, %r2290, 780903145;
	shr.u32 	%r2292, %r2291, 31;
	shr.s32 	%r2293, %r2291, 2;
	add.s32 	%r2294, %r2293, %r2292;
	mul.lo.s32 	%r2295, %r2294, 22;
	sub.s32 	%r2296, %r2290, %r2295;
	shr.u32 	%r2297, %r1740, 31;
	add.s32 	%r2298, %r1740, %r2297;
	and.b32  	%r2299, %r2298, -2;
	sub.s32 	%r437, %r1740, %r2299;
	setp.lt.s32 	%p223, %r46, 22;
	selp.b32 	%r438, %r2289, %r46, %p223;
	setp.lt.s32 	%p224, %r404, %r1749;
	setp.ge.s32 	%p225, %r404, %r1748;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r418, %r1749;
	setp.ge.s32 	%p227, %r418, %r1748;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r405, %r1749;
	setp.ge.s32 	%p229, %r405, %r1748;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r419, %r1749;
	setp.ge.s32 	%p231, %r419, %r1748;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r439, %r2296, %r46, %p223;
	mov.u32 	%r2279, 0;
	// begin inline asm
	{mov.u32 %r2300, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2626, %r2300, 8;
	add.s32 	%r2627, %r2626, -8192;
	or.b32  	%r2304, %r2627, 31;
	mul.wide.s32 	%rd301, %r46, 16;
	mul.wide.s32 	%rd303, %r46, 8;
	mov.u32 	%r7478, %r2279;
	mov.u32 	%r7479, %r2279;
	mov.u32 	%r7480, %r2279;
	mov.u32 	%r7481, %r2279;
	mov.u32 	%r7482, %r2279;
	mov.u32 	%r7483, %r2279;
	mov.u32 	%r7484, %r2279;
	mov.u32 	%r7485, %r2279;
	mov.u32 	%r7486, %r2279;
	mov.u32 	%r7487, %r2279;
	mov.u32 	%r7488, %r2279;
	mov.u32 	%r7489, %r2279;
	mov.u32 	%r7777, %r2213;
	mov.u32 	%r7778, %r2213;
	mov.u32 	%r7775, %r2213;
	mov.u32 	%r7776, %r2213;
	mov.u32 	%r7797, %r2213;
	mov.u32 	%r7798, %r2213;
	mov.u32 	%r7811, %r2213;
	mov.u32 	%r7799, %r2213;
	mov.u32 	%r7813, %r2213;
	mov.u32 	%r7800, %r2213;
	mov.u32 	%r7801, %r2213;
	mov.u32 	%r7802, %r2213;
	mov.u32 	%r7803, %r2213;
	mov.u32 	%r7804, %r2213;
	mov.u32 	%r7805, %r2213;
	mov.u32 	%r7806, %r2213;
	mov.u32 	%r7815, %r2213;
	mov.u32 	%r7816, %r2213;
	mov.u32 	%r7817, %r2213;
	mov.u32 	%r7818, %r2213;
	mov.u32 	%r7819, %r2213;
	mov.u32 	%r7820, %r2213;
	mov.u32 	%r7807, %r2213;
	mov.u32 	%r7808, %r2213;
	mov.u32 	%r7821, %r2213;
	mov.u32 	%r7822, %r2213;
	mov.u32 	%r7809, %r2213;
	mov.u32 	%r7810, %r2213;
	mov.u32 	%r7779, %r2213;
	mov.u32 	%r7780, %r2213;
	mov.u32 	%r7767, %r2213;
	mov.u32 	%r7768, %r2213;
	mov.u32 	%r7769, %r2213;
	mov.u32 	%r7770, %r2213;
	mov.u32 	%r7781, %r2213;
	mov.u32 	%r7782, %r2213;
	mov.u32 	%r7783, %r2213;
	mov.u32 	%r7784, %r2213;
	mov.u32 	%r7785, %r2213;
	mov.u32 	%r7786, %r2213;
	mov.u32 	%r7771, %r2213;
	mov.u32 	%r7772, %r2213;
	mov.u32 	%r7773, %r2213;
	mov.u32 	%r7774, %r2213;
	mov.u32 	%r7787, %r2213;
	mov.u32 	%r7788, %r2213;
	mov.u32 	%r7789, %r2213;
	mov.u32 	%r7790, %r2213;
	mov.u32 	%r7538, %r2213;
	mov.u32 	%r7539, %r2213;
	mov.u32 	%r7837, %r2213;
	mov.u32 	%r7838, %r2213;
	mov.u32 	%r7544, %r2213;
	mov.u32 	%r7545, %r2213;
	mov.u32 	%r7546, %r2213;
	mov.u32 	%r7547, %r2213;
	mov.u32 	%r7839, %r2213;
	mov.u32 	%r7840, %r2213;
	mov.u32 	%r7550, %r2213;
	mov.u32 	%r7841, %r2213;
	mov.u32 	%r7552, %r2213;
	mov.u32 	%r7553, %r2213;
	mov.u32 	%r7842, %r2213;
	mov.u32 	%r7555, %r2213;
	mov.u32 	%r7556, %r2213;
	mov.u32 	%r7557, %r2213;
	mov.u32 	%r7791, %r2213;
	mov.u32 	%r7792, %r2213;
	mov.u32 	%r7560, %r2213;
	mov.u32 	%r7561, %r2213;
	mov.u32 	%r7564, %r2213;
	mov.u32 	%r7565, %r2213;
	mov.u32 	%r7566, %r2213;
	mov.u32 	%r7567, %r2213;
	mov.u32 	%r7568, %r2213;
	mov.u32 	%r7846, %r2213;
	mov.u32 	%r7570, %r2213;
	mov.u32 	%r7571, %r2213;
	mov.u32 	%r7572, %r2213;
	mov.u32 	%r7573, %r2213;
	mov.u32 	%r7574, %r2213;
	mov.u32 	%r7575, %r2213;
	mov.u32 	%r7576, %r2213;
	mov.u32 	%r7848, %r2213;
	mov.u32 	%r7578, %r2213;
	mov.u32 	%r7579, %r2213;
	mov.u32 	%r7580, %r2213;
	mov.u32 	%r7849, %r2213;
	mov.u32 	%r7582, %r2213;
	mov.u32 	%r7583, %r2213;
	mov.u32 	%r7584, %r2213;
	mov.u32 	%r7585, %r2213;
	mov.u32 	%r7586, %r2213;
	mov.u32 	%r7587, %r2213;
	mov.u32 	%r7588, %r2213;
	mov.u32 	%r7850, %r2213;
	mov.u32 	%r7590, %r2213;
	mov.u32 	%r7793, %r2213;
	mov.u32 	%r7592, %r2213;
	mov.u32 	%r7593, %r2213;
	mov.u32 	%r7594, %r2213;
	mov.u32 	%r7595, %r2213;
	mov.u32 	%r7794, %r2213;
	mov.u32 	%r7597, %r2213;
	mov.u32 	%r7598, %r2213;
	mov.u32 	%r7599, %r2213;
	mov.u32 	%r7600, %r2213;
	mov.u32 	%r7601, %r2213;
	mov.u32 	%r7602, %r2213;
	mov.u32 	%r7603, %r2213;
	mov.u32 	%r7604, %r2213;
	mov.u32 	%r7605, %r2213;
	mov.u32 	%r7606, %r2213;
	mov.u32 	%r7607, %r2213;
	mov.u32 	%r7608, %r2213;
	mov.u32 	%r7609, %r2213;
	mov.u32 	%r7610, %r2213;
	mov.u32 	%r7611, %r2213;
	mov.u32 	%r7612, %r2213;
	mov.u32 	%r7613, %r2213;
	mov.u32 	%r7614, %r2213;
	mov.u32 	%r7615, %r2213;
	mov.u32 	%r7616, %r2213;
	mov.u32 	%r7617, %r2213;
	mov.u32 	%r7618, %r2213;
	mov.u32 	%r7619, %r2213;
	mov.u32 	%r7620, %r2213;
	mov.u32 	%r7621, %r2213;
	mov.u32 	%r7622, %r2213;
	mov.u32 	%r7623, %r2213;
	mov.u32 	%r7624, %r2213;
	mov.u32 	%r7625, %r2213;
	mov.u32 	%r7626, %r2213;
	mov.u32 	%r7627, %r2213;
	mov.u32 	%r7628, %r2213;
	mov.u32 	%r7629, %r2213;
	mov.u32 	%r7630, %r2213;
	mov.u32 	%r7631, %r2213;
	mov.u32 	%r7632, %r2213;
	mov.u32 	%r7633, %r2213;
	mov.u32 	%r7634, %r2213;
	mov.u32 	%r7635, %r2213;
	mov.u32 	%r7636, %r2213;
	mov.u32 	%r7637, %r2213;
	mov.u32 	%r7638, %r2213;
	mov.u32 	%r7639, %r2213;
	mov.u32 	%r7640, %r2213;
	mov.u32 	%r7641, %r2213;
	mov.u32 	%r7642, %r2213;
	mov.u32 	%r7643, %r2213;
	mov.u32 	%r7644, %r2213;
	mov.u32 	%r7645, %r2213;
	mov.u32 	%r7646, %r2279;

$L__BB0_332:
	mov.u32 	%r551, %r7850;
	mov.u32 	%r547, %r7585;
	mov.u32 	%r543, %r7849;
	mov.u32 	%r541, %r7579;
	mov.u32 	%r539, %r7848;
	mov.u32 	%r531, %r7846;
	mov.u32 	%r7585, %r7842;
	mov.u32 	%r513, %r7841;
	mov.u32 	%r7579, %r7840;
	mov.u32 	%r510, %r7839;
	mov.u32 	%r505, %r7838;
	mov.u32 	%r504, %r7837;
	sub.s32 	%r7368, %r1735, %r48;
	mov.u32 	%r2315, 1;
	not.b32 	%r2589, %r43;
	mov.u32 	%r2581, -1;
	add.s32 	%r2590, %r1732, %r2589;
	mul.lo.s32 	%r2591, %r2590, %r1734;
	add.s32 	%r2592, %r7646, %r2591;
	not.b32 	%r2594, %r44;
	add.s32 	%r2595, %r1733, %r2594;
	mul.lo.s32 	%r2596, %r2595, %r1734;
	add.s32 	%r2597, %r7646, %r2596;
	add.s32 	%r2598, %r2591, %r2596;
	add.s32 	%r2599, %r2598, %r1735;
	not.b32 	%r2600, %r41;
	add.s32 	%r2601, %r1730, %r2600;
	mad.lo.s32 	%r2602, %r2590, %r1730, %r2601;
	not.b32 	%r2603, %r42;
	add.s32 	%r2604, %r1731, %r2603;
	mad.lo.s32 	%r2605, %r2595, %r1731, %r2604;
	add.s32 	%r2606, %r2602, %r2605;
	shl.b32 	%r2607, %r2606, 1;
	add.s32 	%r2608, %r2599, %r2607;
	add.s32 	%r2609, %r7646, %r2608;
	add.s32 	%r2610, %r7646, %r2598;
	div.s32 	%r2611, %r2609, %r1735;
	neg.s32 	%r2612, %r1735;
	sub.s32 	%r2615, %r48, %r1735;
	sub.s32 	%r2616, %r2602, %r2605;
	shl.b32 	%r2617, %r2616, 1;
	add.s32 	%r2618, %r2617, %r1736;
	mad.lo.s32 	%r2619, %r2611, %r48, %r2618;
	mad.lo.s32 	%r2620, %r2611, %r2615, %r2610;
	div.s32 	%r2621, %r2619, %r1736;
	mul.lo.s32 	%r2622, %r2621, %r1736;
	sub.s32 	%r2625, %r1763, %r1736;
	mov.u32 	%r2399, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2301,%r7648,%r2279,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2307, %r7471, %r2301, %p28;
	// begin inline asm
	{mul.f16x2 %r7732,%r2307,%r7645;
}
	// end inline asm
	selp.b32 	%r2310, %r7475, %r2301, %p28;
	// begin inline asm
	{mul.f16x2 %r7730,%r2310,%r7644;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2313,%r7648,%r2315,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2319, %r7471, %r2313, %p28;
	// begin inline asm
	{mul.f16x2 %r7731,%r2319,%r7643;
}
	// end inline asm
	selp.b32 	%r2322, %r7475, %r2313, %p28;
	// begin inline asm
	{mul.f16x2 %r7729,%r2322,%r7642;
}
	// end inline asm
	mov.u32 	%r2327, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2325,%r7648,%r2327,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2331, %r7471, %r2325, %p28;
	// begin inline asm
	{mul.f16x2 %r7728,%r2331,%r7641;
}
	// end inline asm
	selp.b32 	%r2334, %r7475, %r2325, %p28;
	// begin inline asm
	{mul.f16x2 %r7727,%r2334,%r7640;
}
	// end inline asm
	mov.u32 	%r2339, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2337,%r7648,%r2339,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2343, %r7471, %r2337, %p28;
	// begin inline asm
	{mul.f16x2 %r7726,%r2343,%r7822;
}
	// end inline asm
	selp.b32 	%r2346, %r7475, %r2337, %p28;
	// begin inline asm
	{mul.f16x2 %r7724,%r2346,%r7821;
}
	// end inline asm
	mov.u32 	%r2351, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2349,%r7648,%r2351,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2355, %r7471, %r2349, %p28;
	// begin inline asm
	{mul.f16x2 %r7725,%r2355,%r7639;
}
	// end inline asm
	selp.b32 	%r2358, %r7475, %r2349, %p28;
	// begin inline asm
	{mul.f16x2 %r7723,%r2358,%r7638;
}
	// end inline asm
	mov.u32 	%r2363, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2361,%r7648,%r2363,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2367, %r7471, %r2361, %p28;
	// begin inline asm
	{mul.f16x2 %r7722,%r2367,%r7637;
}
	// end inline asm
	selp.b32 	%r2370, %r7475, %r2361, %p28;
	// begin inline asm
	{mul.f16x2 %r7719,%r2370,%r7636;
}
	// end inline asm
	mov.u32 	%r2375, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2373,%r7648,%r2375,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2379, %r7471, %r2373, %p28;
	// begin inline asm
	{mul.f16x2 %r7721,%r2379,%r7635;
}
	// end inline asm
	selp.b32 	%r2382, %r7475, %r2373, %p28;
	// begin inline asm
	{mul.f16x2 %r7718,%r2382,%r7634;
}
	// end inline asm
	mov.u32 	%r2387, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2385,%r7648,%r2387,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2391, %r7471, %r2385, %p28;
	// begin inline asm
	{mul.f16x2 %r7720,%r2391,%r7633;
}
	// end inline asm
	selp.b32 	%r2394, %r7475, %r2385, %p28;
	// begin inline asm
	{mul.f16x2 %r7717,%r2394,%r7632;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2397,%r7648,%r2399,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2403, %r7471, %r2397, %p28;
	// begin inline asm
	{mul.f16x2 %r7716,%r2403,%r7631;
}
	// end inline asm
	selp.b32 	%r2406, %r7475, %r2397, %p28;
	// begin inline asm
	{mul.f16x2 %r7713,%r2406,%r7630;
}
	// end inline asm
	mov.u32 	%r2411, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2409,%r7648,%r2411,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2415, %r7471, %r2409, %p28;
	// begin inline asm
	{mul.f16x2 %r7715,%r2415,%r7629;
}
	// end inline asm
	selp.b32 	%r2418, %r7475, %r2409, %p28;
	// begin inline asm
	{mul.f16x2 %r7712,%r2418,%r7628;
}
	// end inline asm
	mov.u32 	%r2423, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2421,%r7648,%r2423,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2427, %r7471, %r2421, %p28;
	// begin inline asm
	{mul.f16x2 %r7714,%r2427,%r7627;
}
	// end inline asm
	selp.b32 	%r2430, %r7475, %r2421, %p28;
	// begin inline asm
	{mul.f16x2 %r7711,%r2430,%r7626;
}
	// end inline asm
	mov.u32 	%r2435, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2433,%r7648,%r2435,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2439, %r7471, %r2433, %p28;
	// begin inline asm
	{mul.f16x2 %r7710,%r2439,%r7808;
}
	// end inline asm
	selp.b32 	%r2442, %r7475, %r2433, %p28;
	// begin inline asm
	{mul.f16x2 %r7709,%r2442,%r7807;
}
	// end inline asm
	mov.u32 	%r2447, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2445,%r7648,%r2447,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2451, %r7471, %r2445, %p28;
	// begin inline asm
	{mul.f16x2 %r7708,%r2451,%r7820;
}
	// end inline asm
	selp.b32 	%r2454, %r7475, %r2445, %p28;
	// begin inline asm
	{mul.f16x2 %r7706,%r2454,%r7818;
}
	// end inline asm
	mov.u32 	%r2459, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2457,%r7648,%r2459,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2463, %r7471, %r2457, %p28;
	// begin inline asm
	{mul.f16x2 %r7707,%r2463,%r7819;
}
	// end inline asm
	selp.b32 	%r2466, %r7475, %r2457, %p28;
	// begin inline asm
	{mul.f16x2 %r7705,%r2466,%r7817;
}
	// end inline asm
	mov.u32 	%r2471, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2469,%r7648,%r2471,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2475, %r7471, %r2469, %p28;
	// begin inline asm
	{mul.f16x2 %r7704,%r2475,%r7816;
}
	// end inline asm
	selp.b32 	%r2478, %r7475, %r2469, %p28;
	// begin inline asm
	{mul.f16x2 %r7701,%r2478,%r7815;
}
	// end inline asm
	mov.u32 	%r2483, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2481,%r7648,%r2483,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2487, %r7471, %r2481, %p28;
	// begin inline asm
	{mul.f16x2 %r7703,%r2487,%r7625;
}
	// end inline asm
	selp.b32 	%r2490, %r7475, %r2481, %p28;
	// begin inline asm
	{mul.f16x2 %r7700,%r2490,%r7624;
}
	// end inline asm
	mov.u32 	%r2495, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2493,%r7648,%r2495,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2499, %r7471, %r2493, %p28;
	// begin inline asm
	{mul.f16x2 %r7702,%r2499,%r7623;
}
	// end inline asm
	selp.b32 	%r2502, %r7475, %r2493, %p28;
	// begin inline asm
	{mul.f16x2 %r7699,%r2502,%r7622;
}
	// end inline asm
	mov.u32 	%r2507, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2505,%r7648,%r2507,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2511, %r7471, %r2505, %p28;
	// begin inline asm
	{mul.f16x2 %r7698,%r2511,%r7806;
}
	// end inline asm
	selp.b32 	%r2514, %r7475, %r2505, %p28;
	// begin inline asm
	{mul.f16x2 %r7695,%r2514,%r7804;
}
	// end inline asm
	mov.u32 	%r2519, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2517,%r7648,%r2519,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2523, %r7471, %r2517, %p28;
	// begin inline asm
	{mul.f16x2 %r7697,%r2523,%r7805;
}
	// end inline asm
	selp.b32 	%r2526, %r7475, %r2517, %p28;
	// begin inline asm
	{mul.f16x2 %r7694,%r2526,%r7803;
}
	// end inline asm
	mov.u32 	%r2531, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2529,%r7648,%r2531,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2535, %r7471, %r2529, %p28;
	// begin inline asm
	{mul.f16x2 %r7696,%r2535,%r7621;
}
	// end inline asm
	selp.b32 	%r2538, %r7475, %r2529, %p28;
	// begin inline asm
	{mul.f16x2 %r7693,%r2538,%r7620;
}
	// end inline asm
	mov.u32 	%r2543, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2541,%r7648,%r2543,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2547, %r7471, %r2541, %p28;
	// begin inline asm
	{mul.f16x2 %r7692,%r2547,%r7802;
}
	// end inline asm
	selp.b32 	%r2550, %r7475, %r2541, %p28;
	// begin inline asm
	{mul.f16x2 %r7691,%r2550,%r7801;
}
	// end inline asm
	mov.u32 	%r2555, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2553,%r7648,%r2555,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2559, %r7471, %r2553, %p28;
	// begin inline asm
	{mul.f16x2 %r7690,%r2559,%r7800;
}
	// end inline asm
	selp.b32 	%r2562, %r7475, %r2553, %p28;
	// begin inline asm
	{mul.f16x2 %r7688,%r2562,%r7799;
}
	// end inline asm
	mov.u32 	%r2567, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2565,%r7648,%r2567,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2571, %r7471, %r2565, %p28;
	// begin inline asm
	{mul.f16x2 %r7689,%r2571,%r7813;
}
	// end inline asm
	selp.b32 	%r2574, %r7475, %r2565, %p28;
	// begin inline asm
	{mul.f16x2 %r7687,%r2574,%r7811;
}
	// end inline asm
	mov.u32 	%r2579, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2577,%r7648,%r2579,%r2304,%r2581;
}
	// end inline asm
	selp.b32 	%r2583, %r7471, %r2577, %p28;
	// begin inline asm
	{mul.f16x2 %r7686,%r2583,%r7798;
}
	// end inline asm
	selp.b32 	%r2586, %r7475, %r2577, %p28;
	// begin inline asm
	{mul.f16x2 %r7685,%r2586,%r7797;
}
	// end inline asm
	rem.s32 	%r659, %r2592, %r72;
	rem.s32 	%r660, %r2597, %r7368;
	mad.lo.s32 	%r661, %r2611, %r2612, %r2609;
	sub.s32 	%r662, %r2619, %r2622;
	mad.lo.s32 	%r663, %r2621, %r2625, %r2620;
	ld.param.u64 	%rd294, [%rd1+168];
	cvta.to.global.u64 	%rd295, %rd294;
	shl.b32 	%r2675, %r663, 1;
	mul.wide.s32 	%rd296, %r2675, 4;
	add.s64 	%rd28, %rd295, %rd296;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2878, %r1758, 1;
	setp.lt.s32 	%p239, %r663, %r2878;
	setp.eq.s32 	%p240, %r436, %r46;
	setp.gt.s32 	%p241, %r663, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7651, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7652, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2678, %r1758, 1;
	setp.lt.s32 	%p234, %r663, %r2678;
	setp.gt.s32 	%p235, %r663, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd28];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7649, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd28+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7650, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7651, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7652, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2886, 0;
	mov.u32 	%r2897, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2884,%r7647,%r2886,%r2304,%r2897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2889,%r7651,%r2884;
}
	// end inline asm
	mov.u32 	%r2895, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2893,%r7647,%r2895,%r2304,%r2897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2898,%r7652,%r2893;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7654,%r2889,%r2898;
}
	// end inline asm
	setp.eq.s32 	%p244, %r437, 0;
	mov.u32 	%r7653, %r7654;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7653, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7653;
}
	// end inline asm
	setp.eq.s32 	%p245, %r437, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7654, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7654;
}
	// end inline asm
	mov.u32 	%r2919, 2;
	mov.u32 	%r2930, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2917,%r7647,%r2919,%r2304,%r2930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2922,%r7651,%r2917;
}
	// end inline asm
	mov.u32 	%r2928, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2926,%r7647,%r2928,%r2304,%r2930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2931,%r7652,%r2926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7656,%r2922,%r2931;
}
	// end inline asm
	mov.u32 	%r7655, %r7656;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7655, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7655;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7656, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r7656;
}
	// end inline asm
	mov.u32 	%r2952, 4;
	mov.u32 	%r2963, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2950,%r7647,%r2952,%r2304,%r2963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2955,%r7651,%r2950;
}
	// end inline asm
	mov.u32 	%r2961, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2959,%r7647,%r2961,%r2304,%r2963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2964,%r7652,%r2959;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7658,%r2955,%r2964;
}
	// end inline asm
	mov.u32 	%r7657, %r7658;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7657, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r7657;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7658, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r7658;
}
	// end inline asm
	mov.u32 	%r2985, 6;
	mov.u32 	%r2996, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2983,%r7647,%r2985,%r2304,%r2996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2988,%r7651,%r2983;
}
	// end inline asm
	mov.u32 	%r2994, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2992,%r7647,%r2994,%r2304,%r2996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2997,%r7652,%r2992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7660,%r2988,%r2997;
}
	// end inline asm
	mov.u32 	%r7659, %r7660;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7659, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7659;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7660, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r7660;
}
	// end inline asm
	mov.u32 	%r3018, 8;
	mov.u32 	%r3029, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3016,%r7647,%r3018,%r2304,%r3029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3021,%r7651,%r3016;
}
	// end inline asm
	mov.u32 	%r3027, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3025,%r7647,%r3027,%r2304,%r3029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3030,%r7652,%r3025;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r3021,%r3030;
}
	// end inline asm
	mov.u32 	%r7661, %r7662;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7661, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r7661;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7662, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r7662;
}
	// end inline asm
	mov.u32 	%r3051, 10;
	mov.u32 	%r3062, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3049,%r7647,%r3051,%r2304,%r3062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3054,%r7651,%r3049;
}
	// end inline asm
	mov.u32 	%r3060, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3058,%r7647,%r3060,%r2304,%r3062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3063,%r7652,%r3058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r3054,%r3063;
}
	// end inline asm
	mov.u32 	%r7663, %r7664;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7663, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r7663;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7664, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r7664;
}
	// end inline asm
	mov.u32 	%r3084, 12;
	mov.u32 	%r3095, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3082,%r7647,%r3084,%r2304,%r3095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3087,%r7651,%r3082;
}
	// end inline asm
	mov.u32 	%r3093, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3091,%r7647,%r3093,%r2304,%r3095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3096,%r7652,%r3091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r3087,%r3096;
}
	// end inline asm
	mov.u32 	%r7665, %r7666;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7665, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r7665;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7666, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r7666;
}
	// end inline asm
	mov.u32 	%r3117, 14;
	mov.u32 	%r3128, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3115,%r7647,%r3117,%r2304,%r3128;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3120,%r7651,%r3115;
}
	// end inline asm
	mov.u32 	%r3126, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3124,%r7647,%r3126,%r2304,%r3128;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3129,%r7652,%r3124;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r3120,%r3129;
}
	// end inline asm
	mov.u32 	%r7667, %r7668;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7667, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7716,%r7716,%r7667;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7668, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r7668;
}
	// end inline asm
	mov.u32 	%r3150, 16;
	mov.u32 	%r3161, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3148,%r7647,%r3150,%r2304,%r3161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3153,%r7651,%r3148;
}
	// end inline asm
	mov.u32 	%r3159, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3157,%r7647,%r3159,%r2304,%r3161;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3162,%r7652,%r3157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7670,%r3153,%r3162;
}
	// end inline asm
	mov.u32 	%r7669, %r7670;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7669, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7715,%r7715,%r7669;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7670, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r7670;
}
	// end inline asm
	mov.u32 	%r3183, 18;
	mov.u32 	%r3194, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3181,%r7647,%r3183,%r2304,%r3194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3186,%r7651,%r3181;
}
	// end inline asm
	mov.u32 	%r3192, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3190,%r7647,%r3192,%r2304,%r3194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3195,%r7652,%r3190;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7672,%r3186,%r3195;
}
	// end inline asm
	mov.u32 	%r7671, %r7672;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7671, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7710,%r7710,%r7671;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7672, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r7672;
}
	// end inline asm
	mov.u32 	%r3216, 20;
	mov.u32 	%r3227, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3214,%r7647,%r3216,%r2304,%r3227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3219,%r7651,%r3214;
}
	// end inline asm
	mov.u32 	%r3225, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3223,%r7647,%r3225,%r2304,%r3227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3228,%r7652,%r3223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7674,%r3219,%r3228;
}
	// end inline asm
	mov.u32 	%r7673, %r7674;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7673, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7708,%r7708,%r7673;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7674, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r7674;
}
	// end inline asm
	mov.u32 	%r3249, 22;
	mov.u32 	%r3260, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3247,%r7647,%r3249,%r2304,%r3260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3252,%r7651,%r3247;
}
	// end inline asm
	mov.u32 	%r3258, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3256,%r7647,%r3258,%r2304,%r3260;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3261,%r7652,%r3256;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7676,%r3252,%r3261;
}
	// end inline asm
	mov.u32 	%r7675, %r7676;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7675, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7704,%r7704,%r7675;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7676, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7701,%r7701,%r7676;
}
	// end inline asm
	mov.u32 	%r3282, 24;
	mov.u32 	%r3293, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3280,%r7647,%r3282,%r2304,%r3293;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3285,%r7651,%r3280;
}
	// end inline asm
	mov.u32 	%r3291, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3289,%r7647,%r3291,%r2304,%r3293;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3294,%r7652,%r3289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7678,%r3285,%r3294;
}
	// end inline asm
	mov.u32 	%r7677, %r7678;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7677, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r7677;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7678, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7700,%r7700,%r7678;
}
	// end inline asm
	mov.u32 	%r3315, 26;
	mov.u32 	%r3326, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3313,%r7647,%r3315,%r2304,%r3326;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3318,%r7651,%r3313;
}
	// end inline asm
	mov.u32 	%r3324, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3322,%r7647,%r3324,%r2304,%r3326;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3327,%r7652,%r3322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7680,%r3318,%r3327;
}
	// end inline asm
	mov.u32 	%r7679, %r7680;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7679, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7698,%r7698,%r7679;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7680, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7695,%r7695,%r7680;
}
	// end inline asm
	mov.u32 	%r3348, 28;
	mov.u32 	%r3359, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3346,%r7647,%r3348,%r2304,%r3359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3351,%r7651,%r3346;
}
	// end inline asm
	mov.u32 	%r3357, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3355,%r7647,%r3357,%r2304,%r3359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3360,%r7652,%r3355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7682,%r3351,%r3360;
}
	// end inline asm
	mov.u32 	%r7681, %r7682;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7681, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7697,%r7697,%r7681;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7682, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7694,%r7694,%r7682;
}
	// end inline asm
	mov.u32 	%r3390, 31;
	mov.u32 	%r3381, 30;
	mov.u32 	%r3392, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3379,%r7647,%r3381,%r2304,%r3392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3384,%r7651,%r3379;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3388,%r7647,%r3390,%r2304,%r3392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3393,%r7652,%r3388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7684,%r3384,%r3393;
}
	// end inline asm
	mov.u32 	%r7683, %r7684;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7683, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7690,%r7690,%r7683;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7684, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7688,%r7688,%r7684;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7649, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7650, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r662, %r1740;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	// begin inline asm
	{mul.f16x2 %r2780,%r7649,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2786,%r7649,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r2786;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2792,%r7649,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r2792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2798,%r7649,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7702,%r7702,%r2798;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2804,%r7649,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r7704,%r2804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2810,%r7649,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7689,%r7689,%r2810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2816,%r7650,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r2816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2822,%r7650,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7707,%r7707,%r2822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2828,%r7649,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2834,%r7649,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r2834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2840,%r7649,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r2840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2846,%r7649,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7699,%r7699,%r2846;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2852,%r7649,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7701,%r7701,%r2852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2858,%r7649,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7687,%r7687,%r2858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2864,%r7650,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r2864;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2870,%r7650,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7705,%r7705,%r2870;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2683, %r1740, -2;
	setp.ne.s32 	%p238, %r662, %r2683;
	@%p238 bra 	$L__BB0_408;

	// begin inline asm
	{mul.f16x2 %r2684,%r7649,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r7710,%r2684;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2690,%r7649,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7692,%r7692,%r2690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2696,%r7650,%r7481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2702,%r7650,%r7479;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7714,%r7714,%r2702;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2708,%r7650,%r7485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7716,%r7716,%r2708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2714,%r7650,%r7483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7696,%r7696,%r2714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2720,%r7650,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7698,%r7698,%r2720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2726,%r7650,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7686,%r7686,%r2726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2732,%r7649,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r2732;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2738,%r7649,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7691,%r7691,%r2738;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2744,%r7650,%r7480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2750,%r7650,%r7478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7711,%r7711,%r2750;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2756,%r7650,%r7484;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r2756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2762,%r7650,%r7482;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7693,%r7693,%r2762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2768,%r7650,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7695,%r7695,%r2768;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2774,%r7650,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7685,%r7685,%r2774;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7837, %r2213;
	mov.u32 	%r7838, %r2213;
	mov.u32 	%r7843, %r2213;
	mov.u32 	%r7844, %r2213;
	mov.u32 	%r7845, %r2213;
	mov.u32 	%r7846, %r2213;
	mov.u32 	%r7847, %r2213;
	mov.u32 	%r7848, %r2213;
	mov.u32 	%r7855, %r2213;
	mov.u32 	%r7856, %r2213;
	@%p276 bra 	$L__BB0_410;

	mul.lo.s32 	%r3411, %r1731, 320;
	add.s32 	%r3412, %r41, -1;
	mul.lo.s32 	%r3413, %r42, 320;
	mad.lo.s32 	%r3414, %r3411, %r3412, %r3413;
	add.s32 	%r3417, %r1810, -64;
	mad.lo.s32 	%r3422, %r3417, %r2201, %r2198;
	add.s32 	%r3423, %r3414, %r3422;
	shl.b32 	%r3424, %r3423, 2;
	mov.u32 	%r3425, _ZN6kernel5shmemE;
	add.s32 	%r3426, %r3425, %r3424;
	shl.b32 	%r3427, %r46, 4;
	add.s32 	%r3428, %r3426, %r3427;
	ld.shared.v4.u32 	{%r7848, %r7846, %r7838, %r7837}, [%r3428];
	shl.b32 	%r3433, %r46, 3;
	add.s32 	%r3434, %r3426, %r3433;
	ld.shared.v2.u32 	{%r7847, %r7845}, [%r3434+512];
	ld.shared.v4.u32 	{%r7856, %r7855, %r7844, %r7843}, [%r3428+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7839, %r2213;
	mov.u32 	%r7840, %r2213;
	mov.u32 	%r7841, %r2213;
	mov.u32 	%r7842, %r2213;
	mov.u32 	%r7849, %r2213;
	mov.u32 	%r7850, %r2213;
	mov.u32 	%r7851, %r2213;
	mov.u32 	%r7852, %r2213;
	mov.u32 	%r7853, %r2213;
	mov.u32 	%r7854, %r2213;
	mov.u32 	%r7857, %r2213;
	mov.u32 	%r7858, %r2213;
	@%p277 bra 	$L__BB0_413;

	mad.lo.s32 	%r3446, %r2601, 384, %r2204;
	add.s32 	%r3449, %r42, -1;
	mad.lo.s32 	%r3450, %r2199, %r3449, %r3446;
	add.s32 	%r3456, %r3450, %r2202;
	shl.b32 	%r3457, %r3456, 2;
	mov.u32 	%r3458, _ZN6kernel5shmemE;
	add.s32 	%r3459, %r3458, %r3457;
	shl.b32 	%r3460, %r46, 4;
	add.s32 	%r3461, %r3459, %r3460;
	ld.shared.v4.u32 	{%r7858, %r7857, %r7853, %r7851}, [%r3461];
	shl.b32 	%r3466, %r46, 3;
	add.s32 	%r3467, %r3459, %r3466;
	ld.shared.v2.u32 	{%r7854, %r7852}, [%r3467+512];
	ld.shared.v4.u32 	{%r7850, %r7849, %r7841, %r7839}, [%r3461+768];
	mov.u32 	%r7840, %r2213;
	mov.u32 	%r7842, %r2213;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r7358, %r3467, 512;
	ld.shared.v2.u32 	{%r7842, %r7840}, [%r7358+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r2201;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3477, %r1730, %r41;
	mul.lo.s32 	%r3479, %r73, %r42;
	mad.lo.s32 	%r3480, %r3477, 384, %r3479;
	mad.lo.s32 	%r3483, %r2199, %r2201, %r3480;
	mad.lo.s32 	%r3486, %r2197, %r2196, %r3483;
	shl.b32 	%r3487, %r3486, 2;
	mov.u32 	%r3488, _ZN6kernel5shmemE;
	add.s32 	%r3489, %r3488, %r3487;
	shl.b32 	%r3490, %r46, 4;
	add.s32 	%r3491, %r3489, %r3490;
	ld.shared.v4.u32 	{%r7776, %r7775, %r7778, %r7777}, [%r3491];

$L__BB0_416:
	shl.b32 	%r3496, %r42, 8;
	shl.b32 	%r3500, %r1731, 8;
	or.b32  	%r3501, %r3500, 128;
	add.s32 	%r3502, %r41, -1;
	mad.lo.s32 	%r3503, %r3501, %r3502, %r2204;
	add.s32 	%r3504, %r3503, %r3496;
	shl.b32 	%r3505, %r3504, 2;
	mov.u32 	%r3506, _ZN6kernel5shmemE;
	add.s32 	%r3507, %r3506, %r3505;
	setp.ne.s32 	%p281, %r42, %r2201;
	shl.b32 	%r3509, %r46, 4;
	add.s32 	%r925, %r3507, %r3509;
	ld.shared.v4.u32 	{%r7769, %r7767, %r7770, %r7768}, [%r925];
	ld.shared.v4.u32 	{%r7774, %r7773, %r7772, %r7771}, [%r925+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7776, %r7775, %r7778, %r7777}, [%r925+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	mul.lo.s32 	%r3523, %r73, %r42;
	sub.s32 	%r3524, %r3523, %r73;
	mad.lo.s32 	%r3527, %r2601, 384, %r3524;
	mad.lo.s32 	%r3530, %r2199, %r2201, %r3527;
	mad.lo.s32 	%r3533, %r2197, %r2196, %r3530;
	shl.b32 	%r3534, %r3533, 2;
	mov.u32 	%r3535, _ZN6kernel5shmemE;
	add.s32 	%r3536, %r3535, %r3534;
	shl.b32 	%r3537, %r46, 4;
	add.s32 	%r954, %r3536, %r3537;
	ld.shared.v4.u32 	{%r7792, %r7791, %r7794, %r7793}, [%r954];
	ld.shared.v4.u32 	{%r7790, %r7788, %r7786, %r7785}, [%r954+512];
	ld.shared.v4.u32 	{%r7789, %r7787, %r7784, %r7782}, [%r954+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7780, %r7779, %r7783, %r7781}, [%r954+1536];

$L__BB0_421:
	setp.ne.s32 	%p284, %r41, 0;
	@%p284 bra 	$L__BB0_426;

	ld.param.u64 	%rd578, [%rd1+104];
	cvta.to.global.u64 	%rd577, %rd578;
	mad.lo.s32 	%r3555, %r659, %r1733, %r44;
	mul.lo.s32 	%r3556, %r1731, %r3555;
	mul.lo.s32 	%r3557, %r3556, 768;
	mad.lo.s32 	%r3558, %r42, 384, %r3557;
	add.s32 	%r3559, %r3558, -64;
	mul.wide.s32 	%rd299, %r3559, 4;
	add.s64 	%rd300, %rd577, %rd299;
	add.s64 	%rd302, %rd300, %rd301;
	ld.global.v4.u32 	{%r7806, %r7804, %r7798, %r7797}, [%rd302+256];
	ld.global.v4.u32 	{%r7808, %r7807, %r7802, %r7801}, [%rd302+1024];
	add.s64 	%rd30, %rd300, %rd303;
	@%p282 bra 	$L__BB0_424;

	ld.global.v2.u32 	{%r7800, %r7799}, [%rd30];

$L__BB0_424:
	setp.ne.s32 	%p286, %r42, %r2201;
	ld.global.v2.u32 	{%r7805, %r7803}, [%rd30+768];
	@%p286 bra 	$L__BB0_426;

	ld.global.v2.u32 	{%r7810, %r7809}, [%rd30+1536];

$L__BB0_426:
	setp.ne.s32 	%p287, %r42, 0;
	@%p287 bra 	$L__BB0_428;

	ld.param.u64 	%rd580, [%rd1+104];
	cvta.to.global.u64 	%rd579, %rd580;
	mad.lo.s32 	%r3576, %r660, %r1732, %r43;
	mul.lo.s32 	%r3580, %r3576, %r1811;
	mad.lo.s32 	%r3583, %r2601, 384, %r3580;
	add.s32 	%r3584, %r3583, -64;
	mad.lo.s32 	%r3587, %r1813, %r72, %r3584;
	mul.wide.s32 	%rd304, %r3587, 4;
	add.s64 	%rd305, %rd579, %rd304;
	add.s64 	%rd307, %rd305, %rd301;
	ld.global.v4.u32 	{%r7822, %r7821, %r7819, %r7817}, [%rd307+256];
	ld.global.v4.u32 	{%r7816, %r7815, %r7813, %r7811}, [%rd307+1024];
	add.s64 	%rd309, %rd305, %rd303;
	ld.global.v2.u32 	{%r7820, %r7818}, [%rd309+768];
	ld.global.v2.u32 	{%r7800, %r7799}, [%rd309+1536];

$L__BB0_428:
	add.s32 	%r3600, %r1735, -1;
	setp.ge.s32 	%p288, %r661, %r3600;
	setp.lt.s32 	%p289, %r661, 2;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r662, 2;
	or.pred  	%p292, %p290, %p291;
	add.s32 	%r3601, %r1736, -2;
	setp.ge.s32 	%p293, %r662, %r3601;
	or.pred  	%p294, %p293, %p292;
	@%p294 bra 	$L__BB0_439;

	ld.param.u64 	%rd582, [%rd1+112];
	cvta.to.global.u64 	%rd581, %rd582;
	mad.lo.s32 	%r1049, %r662, %r1735, %r661;
	shl.b32 	%r3602, %r1049, 6;
	mul.wide.s32 	%rd312, %r3602, 4;
	add.s64 	%rd32, %rd581, %rd312;
	and.pred  	%p297, %p284, %p287;
	@%p297 bra 	$L__BB0_431;

	add.s64 	%rd314, %rd32, %rd303;
	ld.global.v2.u32 	{%r7842, %r7840}, [%rd314+256];

$L__BB0_431:
	@%p284 bra 	$L__BB0_433;

	shl.b32 	%r3605, %r1735, 5;
	cvt.s64.s32 	%rd315, %r3605;
	cvt.s64.s32 	%rd316, %r46;
	add.s64 	%rd317, %rd315, %rd316;
	shl.b64 	%rd318, %rd317, 3;
	add.s64 	%rd319, %rd32, %rd318;
	ld.global.v2.u32 	{%r7847, %r7845}, [%rd319];

$L__BB0_433:
	@%p287 bra 	$L__BB0_435;

	shl.b32 	%r3608, %r1735, 5;
	neg.s32 	%r3609, %r3608;
	cvt.s64.s32 	%rd320, %r3609;
	cvt.s64.s32 	%rd321, %r46;
	add.s64 	%rd322, %rd320, %rd321;
	shl.b64 	%rd323, %rd322, 3;
	add.s64 	%rd324, %rd32, %rd323;
	ld.global.v2.u32 	{%r7854, %r7852}, [%rd324];

$L__BB0_435:
	mad.lo.s32 	%r7369, %r662, %r1735, %r661;
	ld.param.u64 	%rd584, [%rd1+112];
	cvta.to.global.u64 	%rd583, %rd584;
	shl.b32 	%r3612, %r1736, 6;
	shl.b32 	%r3613, %r7369, 7;
	mad.lo.s32 	%r3614, %r3612, %r1735, %r3613;
	mul.wide.s32 	%rd325, %r3614, 4;
	add.s64 	%rd33, %rd583, %rd325;
	@%p284 bra 	$L__BB0_437;

	shl.b32 	%r3615, %r1735, 5;
	cvt.s64.s32 	%rd326, %r3615;
	cvt.s64.s32 	%rd327, %r46;
	add.s64 	%rd328, %rd326, %rd327;
	shl.b64 	%rd329, %rd328, 4;
	add.s64 	%rd330, %rd33, %rd329;
	ld.global.v4.u32 	{%r7848, %r7846, %r7838, %r7837}, [%rd330];
	shl.b32 	%r3620, %r1735, 6;
	add.s32 	%r3621, %r3620, -32;
	cvt.s64.s32 	%rd331, %r3621;
	add.s64 	%rd332, %rd331, %rd327;
	shl.b64 	%rd333, %rd332, 4;
	add.s64 	%rd334, %rd33, %rd333;
	ld.global.v4.u32 	{%r7856, %r7855, %r7844, %r7843}, [%rd334];

$L__BB0_437:
	@%p287 bra 	$L__BB0_439;

	shl.b32 	%r3626, %r1735, 5;
	xor.b32  	%r3627, %r3626, -32;
	cvt.s64.s32 	%rd335, %r3627;
	cvt.s64.s32 	%rd336, %r46;
	add.s64 	%rd337, %rd335, %rd336;
	shl.b64 	%rd338, %rd337, 4;
	add.s64 	%rd339, %rd33, %rd338;
	ld.global.v4.u32 	{%r7858, %r7857, %r7853, %r7851}, [%rd339];
	add.s64 	%rd341, %rd33, %rd301;
	ld.global.v4.u32 	{%r7850, %r7849, %r7841, %r7839}, [%rd341];

$L__BB0_439:
	mov.u32 	%r3641, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3637,%r7617,%r438,%r2304,%r3641;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3637;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7617;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3644, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3645,%r7618,%r3644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3648,%r7470,%r3645;
}
	// end inline asm
	@%p28 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7859,%r7732;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7859,%r7471,%r3645;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3661, 31;
	mov.u32 	%r3684, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3659,%r7859,%r3661,%r2304,%r3684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3664,%r3648,%r3659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3667,%r7616,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3670,%r3667,%r3664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3673,%r7619,%r3670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3676,%r7732,%r3673;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3680,%r7612,%r438,%r2304,%r3684;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3680;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7612;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3687, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3688,%r7613,%r3687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3691,%r7470,%r3688;
}
	// end inline asm
	mov.u32 	%r7860, %r7731;
	@%p28 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7860,%r7471,%r3688;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3702,%r7860,%r3661,%r2304,%r3684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3707,%r3691,%r3702;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3710,%r7616,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3713,%r3707,%r3710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3716,%r7614,%r3713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3719,%r7731,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3722,%r7617,%r7618;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3725,%r7474,%r3722;
}
	// end inline asm
	@%p28 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7861,%r7730;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7861,%r7475,%r3722;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r3738, 31;
	mov.u32 	%r3740, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3736,%r7861,%r3738,%r2304,%r3740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3741,%r3725,%r3736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3744,%r7609,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3747,%r3744,%r3741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3750,%r7610,%r3747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3753,%r7730,%r3750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3756,%r7612,%r7613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3759,%r7474,%r3756;
}
	// end inline asm
	mov.u32 	%r7862, %r7729;
	@%p28 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7862,%r7475,%r3756;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3768,%r7862,%r3738,%r2304,%r3740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3773,%r3759,%r3768;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3776,%r7609,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3779,%r3773,%r3776;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3782,%r7607,%r3779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3785,%r7729,%r3782;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3789,%r7603,%r438,%r2304,%r3740;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3789;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7603;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3796, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3797,%r7604,%r3796;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3800,%r7470,%r3797;
}
	// end inline asm
	@%p28 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7863,%r7728;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7863,%r7471,%r3797;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r3815, 31;
	mov.u32 	%r3817, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3813,%r7863,%r3815,%r2304,%r3817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3818,%r3800,%r3813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3821,%r7602,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3824,%r3821,%r3818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3827,%r7605,%r3824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3830,%r7728,%r3827;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3833,%r7603,%r7604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3836,%r7474,%r3833;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7864,%r7727;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7864,%r7475,%r3833;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3849, 31;
	mov.u32 	%r3872, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3847,%r7864,%r3849,%r2304,%r3872;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3852,%r3836,%r3847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3855,%r7600,%r7609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3858,%r3855,%r3852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3861,%r7601,%r3858;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3864,%r7727,%r3861;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3868,%r7598,%r438,%r2304,%r3872;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3868;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7598;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3875, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r7599,%r3875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r7470,%r3876;
}
	// end inline asm
	@%p28 bra 	$L__BB0_457;
	bra.uni 	$L__BB0_456;

$L__BB0_457:
	// begin inline asm
	{neg.f16x2 %r7865,%r7726;
}
	// end inline asm
	bra.uni 	$L__BB0_458;

$L__BB0_456:
	// begin inline asm
	{mul.f16x2 %r7865,%r7471,%r3876;
}
	// end inline asm

$L__BB0_458:
	mov.u32 	%r3894, 31;
	mov.u32 	%r3917, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3892,%r7865,%r3894,%r2304,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3897,%r3879,%r3892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3900,%r7597,%r7794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3903,%r3900,%r3897;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3906,%r7858,%r3903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3909,%r7726,%r3906;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3913,%r7593,%r438,%r2304,%r3917;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3913;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7593;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3920, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r7594,%r3920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r7470,%r3921;
}
	// end inline asm
	mov.u32 	%r7866, %r7725;
	@%p28 bra 	$L__BB0_460;

	// begin inline asm
	{mul.f16x2 %r7866,%r7471,%r3921;
}
	// end inline asm

$L__BB0_460:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3935,%r7866,%r3894,%r2304,%r3917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3940,%r3924,%r3935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3943,%r7597,%r7615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3946,%r3940,%r3943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3949,%r7595,%r3946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3952,%r7725,%r3949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3955,%r7598,%r7599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3958,%r7474,%r3955;
}
	// end inline asm
	@%p28 bra 	$L__BB0_462;
	bra.uni 	$L__BB0_461;

$L__BB0_462:
	// begin inline asm
	{neg.f16x2 %r7867,%r7724;
}
	// end inline asm
	bra.uni 	$L__BB0_463;

$L__BB0_461:
	// begin inline asm
	{mul.f16x2 %r7867,%r7475,%r3955;
}
	// end inline asm

$L__BB0_463:
	mov.u32 	%r3971, 31;
	mov.u32 	%r3973, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3969,%r7867,%r3971,%r2304,%r3973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3974,%r3958,%r3969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3977,%r7592,%r7793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3980,%r3977,%r3974;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3983,%r7857,%r3980;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3986,%r7724,%r3983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r7593,%r7594;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3992,%r7474,%r3989;
}
	// end inline asm
	mov.u32 	%r7868, %r7723;
	@%p28 bra 	$L__BB0_465;

	// begin inline asm
	{mul.f16x2 %r7868,%r7475,%r3989;
}
	// end inline asm

$L__BB0_465:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4001,%r7868,%r3971,%r2304,%r3973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4006,%r3992,%r4001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4009,%r7592,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4012,%r4006,%r4009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4015,%r7590,%r4012;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4018,%r7723,%r4015;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4022,%r7587,%r438,%r2304,%r3973;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4022;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7587;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4029, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4030,%r7588,%r4029;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4033,%r7470,%r4030;
}
	// end inline asm
	@%p28 bra 	$L__BB0_467;
	bra.uni 	$L__BB0_466;

$L__BB0_467:
	// begin inline asm
	{neg.f16x2 %r7869,%r7722;
}
	// end inline asm
	bra.uni 	$L__BB0_468;

$L__BB0_466:
	// begin inline asm
	{mul.f16x2 %r7869,%r7471,%r4030;
}
	// end inline asm

$L__BB0_468:
	mov.u32 	%r4048, 31;
	mov.u32 	%r4071, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4046,%r7869,%r4048,%r2304,%r4071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4051,%r4033,%r4046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4054,%r7586,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4057,%r4054,%r4051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4060,%r551,%r4057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7722,%r4060;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4067,%r7583,%r438,%r2304,%r4071;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4067;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7583;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4074, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4075,%r7584,%r4074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4078,%r7470,%r4075;
}
	// end inline asm
	mov.u32 	%r7870, %r7721;
	@%p28 bra 	$L__BB0_470;

	// begin inline asm
	{mul.f16x2 %r7870,%r7471,%r4075;
}
	// end inline asm

$L__BB0_470:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4089,%r7870,%r4048,%r2304,%r4071;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4094,%r4078,%r4089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4097,%r7586,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4100,%r4094,%r4097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4103,%r547,%r4100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7721,%r4103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4109,%r7588,%r7618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4112,%r7584,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4115,%r4109,%r4112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4118,%r7582,%r4115;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4121,%r7720,%r4118;
}
	// end inline asm
	selp.b32 	%r1175, %r7720, %r4121, %p28;
	// begin inline asm
	{sub.f16x2 %r4124,%r7587,%r7588;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4127,%r7474,%r4124;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7871,%r7719;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7871,%r7475,%r4124;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4140, 31;
	mov.u32 	%r4142, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4138,%r7871,%r4140,%r2304,%r4142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4143,%r4127,%r4138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4146,%r7580,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4149,%r4146,%r4143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4152,%r543,%r4149;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7719,%r4152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4158,%r7583,%r7584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4161,%r7474,%r4158;
}
	// end inline asm
	mov.u32 	%r7872, %r7718;
	@%p28 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7872,%r7475,%r4158;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4170,%r7872,%r4140,%r2304,%r4142;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4175,%r4161,%r4170;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4178,%r7580,%r7609;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4181,%r4175,%r4178;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4184,%r541,%r4181;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7718,%r4184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4190,%r7587,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4193,%r7583,%r7593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4196,%r4190,%r4193;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4199,%r7578,%r4196;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4202,%r7717,%r4199;
}
	// end inline asm
	selp.b32 	%r1187, %r7717, %r4202, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4206,%r7575,%r438,%r2304,%r4142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4206;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7575;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4213, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4214,%r7576,%r4213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4217,%r7470,%r4214;
}
	// end inline asm
	@%p28 bra 	$L__BB0_477;
	bra.uni 	$L__BB0_476;

$L__BB0_477:
	// begin inline asm
	{neg.f16x2 %r7873,%r7716;
}
	// end inline asm
	bra.uni 	$L__BB0_478;

$L__BB0_476:
	// begin inline asm
	{mul.f16x2 %r7873,%r7471,%r4214;
}
	// end inline asm

$L__BB0_478:
	mov.u32 	%r4232, 31;
	mov.u32 	%r4255, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4230,%r7873,%r4232,%r2304,%r4255;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4235,%r4217,%r4230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4238,%r7574,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4241,%r4238,%r4235;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4244,%r539,%r4241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7641,%r7716,%r4244;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4251,%r7571,%r438,%r2304,%r4255;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4251;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7571;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4258, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4259,%r7572,%r4258;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4262,%r7470,%r4259;
}
	// end inline asm
	mov.u32 	%r7874, %r7715;
	@%p28 bra 	$L__BB0_480;

	// begin inline asm
	{mul.f16x2 %r7874,%r7471,%r4259;
}
	// end inline asm

$L__BB0_480:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4273,%r7874,%r4232,%r2304,%r4255;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4278,%r4262,%r4273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4281,%r7574,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4284,%r4278,%r4281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4287,%r7573,%r4284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4290,%r7715,%r4287;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r7576,%r7604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4296,%r7572,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4299,%r4293,%r4296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4302,%r7570,%r4299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4305,%r7714,%r4302;
}
	// end inline asm
	selp.b32 	%r1199, %r7714, %r4305, %p28;
	// begin inline asm
	{sub.f16x2 %r4308,%r7575,%r7576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4311,%r7474,%r4308;
}
	// end inline asm
	@%p28 bra 	$L__BB0_482;
	bra.uni 	$L__BB0_481;

$L__BB0_482:
	// begin inline asm
	{neg.f16x2 %r7875,%r7713;
}
	// end inline asm
	bra.uni 	$L__BB0_483;

$L__BB0_481:
	// begin inline asm
	{mul.f16x2 %r7875,%r7475,%r4308;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4324, 31;
	mov.u32 	%r4326, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4322,%r7875,%r4324,%r2304,%r4326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4327,%r4311,%r4322;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r7568,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4333,%r4330,%r4327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4336,%r531,%r4333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7640,%r7713,%r4336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4342,%r7571,%r7572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4345,%r7474,%r4342;
}
	// end inline asm
	mov.u32 	%r7876, %r7712;
	@%p28 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7876,%r7475,%r4342;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4354,%r7876,%r4324,%r2304,%r4326;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4359,%r4345,%r4354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r7568,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4365,%r4359,%r4362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4368,%r7567,%r4365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4371,%r7712,%r4368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4374,%r7575,%r7603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4377,%r7571,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4380,%r4374,%r4377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4383,%r7566,%r4380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4386,%r7711,%r4383;
}
	// end inline asm
	selp.b32 	%r1211, %r7711, %r4386, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4390,%r7564,%r438,%r2304,%r4326;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4390;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7564;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4397, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4398,%r7565,%r4397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4401,%r7470,%r4398;
}
	// end inline asm
	@%p28 bra 	$L__BB0_487;
	bra.uni 	$L__BB0_486;

$L__BB0_487:
	// begin inline asm
	{neg.f16x2 %r7877,%r7710;
}
	// end inline asm
	bra.uni 	$L__BB0_488;

$L__BB0_486:
	// begin inline asm
	{mul.f16x2 %r7877,%r7471,%r4398;
}
	// end inline asm

$L__BB0_488:
	mov.u32 	%r4416, 31;
	mov.u32 	%r4418, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4414,%r7877,%r4416,%r2304,%r4418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4419,%r4401,%r4414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4422,%r7778,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4425,%r4422,%r4419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4428,%r7856,%r4425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4431,%r7710,%r4428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4434,%r7564,%r7565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4437,%r7474,%r4434;
}
	// end inline asm
	@%p28 bra 	$L__BB0_490;
	bra.uni 	$L__BB0_489;

$L__BB0_490:
	// begin inline asm
	{neg.f16x2 %r7878,%r7709;
}
	// end inline asm
	bra.uni 	$L__BB0_491;

$L__BB0_489:
	// begin inline asm
	{mul.f16x2 %r7878,%r7475,%r4434;
}
	// end inline asm

$L__BB0_491:
	mov.u32 	%r4450, 31;
	mov.u32 	%r4473, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4448,%r7878,%r4450,%r2304,%r4473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4453,%r4437,%r4448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4456,%r7777,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4459,%r4456,%r4453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4462,%r7855,%r4459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4465,%r7709,%r4462;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4469,%r7560,%r438,%r2304,%r4473;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4469;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7560;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4476, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4477,%r7561,%r4476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4480,%r7470,%r4477;
}
	// end inline asm
	mov.u32 	%r7879, %r7708;
	@%p28 bra 	$L__BB0_493;

	// begin inline asm
	{mul.f16x2 %r7879,%r7471,%r4477;
}
	// end inline asm

$L__BB0_493:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4491,%r7879,%r4450,%r2304,%r4473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4496,%r4480,%r4491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4499,%r7789,%r7597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4502,%r4496,%r4499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4505,%r7854,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7708,%r4505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4511,%r7790,%r7599;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4514,%r7561,%r7792;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4517,%r4511,%r4514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4520,%r7853,%r4517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4523,%r7707,%r4520;
}
	// end inline asm
	selp.b32 	%r1229, %r7707, %r4523, %p28;
	// begin inline asm
	{sub.f16x2 %r4526,%r7560,%r7561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4529,%r7474,%r4526;
}
	// end inline asm
	mov.u32 	%r7880, %r7706;
	@%p28 bra 	$L__BB0_495;

	// begin inline asm
	{mul.f16x2 %r7880,%r7475,%r4526;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4540, 31;
	mov.u32 	%r4578, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4538,%r7880,%r4540,%r2304,%r4578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4543,%r4529,%r4538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r7787,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r4543,%r4546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4552,%r7852,%r4549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7706,%r4552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4558,%r7788,%r7598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4561,%r7560,%r7791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4564,%r4558,%r4561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4567,%r7851,%r4564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4570,%r7705,%r4567;
}
	// end inline asm
	selp.b32 	%r1235, %r7705, %r4570, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4574,%r7556,%r438,%r2304,%r4578;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4574;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7556;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4581, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4582,%r7557,%r4581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4585,%r7470,%r4582;
}
	// end inline asm
	@%p28 bra 	$L__BB0_497;
	bra.uni 	$L__BB0_496;

$L__BB0_497:
	// begin inline asm
	{neg.f16x2 %r7881,%r7704;
}
	// end inline asm
	bra.uni 	$L__BB0_498;

$L__BB0_496:
	// begin inline asm
	{mul.f16x2 %r7881,%r7471,%r4582;
}
	// end inline asm

$L__BB0_498:
	mov.u32 	%r4600, 31;
	mov.u32 	%r4623, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4598,%r7881,%r4600,%r2304,%r4623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4603,%r4585,%r4598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4606,%r7555,%r7789;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4609,%r4606,%r4603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4612,%r7850,%r4609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7704,%r4612;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4619,%r7552,%r438,%r2304,%r4623;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4619;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7552;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4626, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4627,%r7553,%r4626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4630,%r7470,%r4627;
}
	// end inline asm
	mov.u32 	%r7882, %r7703;
	@%p28 bra 	$L__BB0_500;

	// begin inline asm
	{mul.f16x2 %r7882,%r7471,%r4627;
}
	// end inline asm

$L__BB0_500:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4641,%r7882,%r4600,%r2304,%r4623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4646,%r4630,%r4641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4649,%r7555,%r7586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4652,%r4646,%r4649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4655,%r7585,%r4652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7635,%r7703,%r4655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4661,%r7557,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4664,%r7553,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4667,%r4661,%r4664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4670,%r513,%r4667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4673,%r7702,%r4670;
}
	// end inline asm
	selp.b32 	%r7633, %r7702, %r4673, %p28;
	// begin inline asm
	{sub.f16x2 %r4676,%r7556,%r7557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4679,%r7474,%r4676;
}
	// end inline asm
	@%p28 bra 	$L__BB0_502;
	bra.uni 	$L__BB0_501;

$L__BB0_502:
	// begin inline asm
	{neg.f16x2 %r7883,%r7701;
}
	// end inline asm
	bra.uni 	$L__BB0_503;

$L__BB0_501:
	// begin inline asm
	{mul.f16x2 %r7883,%r7475,%r4676;
}
	// end inline asm

$L__BB0_503:
	mov.u32 	%r4692, 31;
	mov.u32 	%r4694, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4690,%r7883,%r4692,%r2304,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4695,%r4679,%r4690;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4698,%r7550,%r7787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4701,%r4698,%r4695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4704,%r7849,%r4701;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7701,%r4704;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4710,%r7552,%r7553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4713,%r7474,%r4710;
}
	// end inline asm
	mov.u32 	%r7884, %r7700;
	@%p28 bra 	$L__BB0_505;

	// begin inline asm
	{mul.f16x2 %r7884,%r7475,%r4710;
}
	// end inline asm

$L__BB0_505:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4722,%r7884,%r4692,%r2304,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4727,%r4713,%r4722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4730,%r7550,%r7580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4733,%r4727,%r4730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4736,%r7579,%r4733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7634,%r7700,%r4736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4742,%r7556,%r7587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4745,%r7552,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4748,%r4742,%r4745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4751,%r510,%r4748;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4754,%r7699,%r4751;
}
	// end inline asm
	selp.b32 	%r7632, %r7699, %r4754, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4758,%r7546,%r438,%r2304,%r4694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4758;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7546;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4765, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4766,%r7547,%r4765;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4769,%r7470,%r4766;
}
	// end inline asm
	@%p28 bra 	$L__BB0_507;
	bra.uni 	$L__BB0_506;

$L__BB0_507:
	// begin inline asm
	{neg.f16x2 %r7885,%r7698;
}
	// end inline asm
	bra.uni 	$L__BB0_508;

$L__BB0_506:
	// begin inline asm
	{mul.f16x2 %r7885,%r7471,%r4766;
}
	// end inline asm

$L__BB0_508:
	mov.u32 	%r4784, 31;
	mov.u32 	%r4807, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4782,%r7885,%r4784,%r2304,%r4807;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4787,%r4769,%r4782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4790,%r7774,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4793,%r4790,%r4787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4796,%r7848,%r4793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7631,%r7698,%r4796;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4803,%r7544,%r438,%r2304,%r4807;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4803;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7544;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4810, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4811,%r7545,%r4810;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4814,%r7470,%r4811;
}
	// end inline asm
	mov.u32 	%r7886, %r7697;
	@%p28 bra 	$L__BB0_510;

	// begin inline asm
	{mul.f16x2 %r7886,%r7471,%r4811;
}
	// end inline asm

$L__BB0_510:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4825,%r7886,%r4784,%r2304,%r4807;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4830,%r4814,%r4825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4833,%r7774,%r7574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4836,%r4830,%r4833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4839,%r7847,%r4836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7629,%r7697,%r4839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4845,%r7547,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4848,%r7545,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4851,%r4845,%r4848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4854,%r505,%r4851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4857,%r7696,%r4854;
}
	// end inline asm
	selp.b32 	%r7627, %r7696, %r4857, %p28;
	// begin inline asm
	{sub.f16x2 %r4860,%r7546,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4863,%r7474,%r4860;
}
	// end inline asm
	@%p28 bra 	$L__BB0_512;
	bra.uni 	$L__BB0_511;

$L__BB0_512:
	// begin inline asm
	{neg.f16x2 %r7887,%r7695;
}
	// end inline asm
	bra.uni 	$L__BB0_513;

$L__BB0_511:
	// begin inline asm
	{mul.f16x2 %r7887,%r7475,%r4860;
}
	// end inline asm

$L__BB0_513:
	mov.u32 	%r4876, 31;
	mov.u32 	%r4878, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4874,%r7887,%r4876,%r2304,%r4878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4879,%r4863,%r4874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4882,%r7773,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4885,%r4882,%r4879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4888,%r7846,%r4885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7630,%r7695,%r4888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4894,%r7544,%r7545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4897,%r7474,%r4894;
}
	// end inline asm
	mov.u32 	%r7888, %r7694;
	@%p28 bra 	$L__BB0_515;

	// begin inline asm
	{mul.f16x2 %r7888,%r7475,%r4894;
}
	// end inline asm

$L__BB0_515:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4906,%r7888,%r4876,%r2304,%r4878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4911,%r4897,%r4906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4914,%r7773,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4917,%r4911,%r4914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4920,%r7845,%r4917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7628,%r7694,%r4920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4926,%r7546,%r7575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4929,%r7544,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4932,%r4926,%r4929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4935,%r504,%r4932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4938,%r7693,%r4935;
}
	// end inline asm
	selp.b32 	%r7626, %r7693, %r4938, %p28;
	// begin inline asm
	{sub.f16x2 %r4941,%r7772,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4944,%r7776,%r7545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4947,%r4941,%r4944;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4950,%r7844,%r4947;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4953,%r7692,%r4950;
}
	// end inline asm
	selp.b32 	%r1284, %r7692, %r4953, %p28;
	// begin inline asm
	{sub.f16x2 %r4956,%r7771,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4959,%r7775,%r7544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4962,%r4956,%r4959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4965,%r7843,%r4962;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4968,%r7691,%r4965;
}
	// end inline asm
	selp.b32 	%r1285, %r7691, %r4968, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4972,%r7538,%r438,%r2304,%r4878;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4972;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7538;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4979, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4980,%r7539,%r4979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4983,%r7470,%r4980;
}
	// end inline asm
	mov.u32 	%r7889, %r7690;
	@%p28 bra 	$L__BB0_517;

	// begin inline asm
	{mul.f16x2 %r7889,%r7471,%r4980;
}
	// end inline asm

$L__BB0_517:
	mov.u32 	%r4996, 31;
	mov.u32 	%r4998, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4994,%r7889,%r4996,%r2304,%r4998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4999,%r4983,%r4994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5002,%r7783,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5005,%r4999,%r5002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5008,%r7842,%r5005;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r7690,%r5008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5014,%r7784,%r7557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5017,%r7539,%r7786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5020,%r5014,%r5017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5023,%r7841,%r5020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5026,%r7689,%r5023;
}
	// end inline asm
	selp.b32 	%r7623, %r7689, %r5026, %p28;
	// begin inline asm
	{sub.f16x2 %r5029,%r7538,%r7539;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5032,%r7474,%r5029;
}
	// end inline asm
	mov.u32 	%r7890, %r7688;
	@%p28 bra 	$L__BB0_519;

	// begin inline asm
	{mul.f16x2 %r7890,%r7475,%r5029;
}
	// end inline asm

$L__BB0_519:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5041,%r7890,%r4996,%r2304,%r4998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5046,%r5032,%r5041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5049,%r7781,%r7550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5052,%r5046,%r5049;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5055,%r7840,%r5052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7624,%r7688,%r5055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5061,%r7782,%r7556;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5064,%r7538,%r7785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5067,%r5061,%r5064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5070,%r7839,%r5067;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5073,%r7687,%r5070;
}
	// end inline asm
	selp.b32 	%r7622, %r7687, %r5073, %p28;
	// begin inline asm
	{sub.f16x2 %r5076,%r7769,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5079,%r7770,%r7539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5082,%r5076,%r5079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5085,%r7838,%r5082;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5088,%r7686,%r5085;
}
	// end inline asm
	selp.b32 	%r7621, %r7686, %r5088, %p28;
	// begin inline asm
	{sub.f16x2 %r5091,%r7767,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5094,%r7768,%r7538;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5097,%r5091,%r5094;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5100,%r7837,%r5097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5103,%r7685,%r5100;
}
	// end inline asm
	selp.b32 	%r7620, %r7685, %r5103, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd342, [%rd1+184];
	cvta.to.global.u64 	%rd35, %rd342;
	add.s32 	%r5108, %r1744, -2;
	setp.lt.s32 	%p335, %r661, %r5108;
	add.s32 	%r5109, %r1745, 3;
	setp.ge.s32 	%p336, %r661, %r5109;
	or.pred  	%p337, %p335, %p336;
	add.s32 	%r5110, %r1746, -2;
	setp.lt.s32 	%p338, %r662, %r5110;
	or.pred  	%p339, %p337, %p338;
	add.s32 	%r5111, %r1747, 2;
	setp.ge.s32 	%p340, %r662, %r5111;
	or.pred  	%p341, %p340, %p339;
	setp.lt.s32 	%p342, %r663, %r1741;
	or.pred  	%p343, %p342, %p341;
	mad.lo.s32 	%r5112, %r1743, %r1742, %r1741;
	setp.ge.s32 	%p344, %r663, %r5112;
	or.pred  	%p345, %p343, %p344;
	@%p345 bra 	$L__BB0_761;

	sub.s32 	%r1300, %r663, %r1741;
	rem.s32 	%r5113, %r1300, %r1742;
	setp.ne.s32 	%p346, %r5113, 0;
	@%p346 bra 	$L__BB0_761;

	div.s32 	%r5114, %r1300, %r1742;
	mov.u32 	%r5115, 8;
	sub.s32 	%r5116, %r5115, %r1744;
	add.s32 	%r5117, %r5116, %r1745;
	mul.lo.s32 	%r5118, %r5114, %r5117;
	mov.u32 	%r5119, 4;
	sub.s32 	%r5120, %r5119, %r1744;
	add.s32 	%r1301, %r5120, %r661;
	sub.s32 	%r5121, %r5119, %r1746;
	add.s32 	%r1302, %r5121, %r662;
	mul.lo.s32 	%r1303, %r5118, 3;
	add.s32 	%r5122, %r1301, %r1303;
	add.s32 	%r5123, %r5122, -2;
	sub.s32 	%r5124, %r5115, %r1746;
	add.s32 	%r5125, %r5124, %r1747;
	mul.lo.s32 	%r1304, %r5123, %r5125;
	add.s32 	%r5126, %r1302, %r1304;
	mul.lo.s32 	%r5127, %r5126, %r59;
	sub.s32 	%r1305, %r5127, %r1748;
	@%p28 bra 	$L__BB0_526;

	not.pred 	%p348, %p24;
	@%p348 bra 	$L__BB0_524;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3676;
  cvt.f32.f16 %f420, low;}

	// end inline asm
	add.s32 	%r5129, %r1305, %r404;
	mul.wide.s32 	%rd343, %r5129, 4;
	add.s64 	%rd344, %rd35, %rd343;
	st.global.f32 	[%rd344], %f420;

$L__BB0_524:
	not.pred 	%p349, %p26;
	@%p349 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3676;
  cvt.f32.f16 %f421, high;}

	// end inline asm
	add.s32 	%r5131, %r1305, %r405;
	mul.wide.s32 	%rd345, %r5131, 4;
	add.s64 	%rd346, %rd35, %rd345;
	st.global.f32 	[%rd346], %f421;

$L__BB0_526:
	@%p28 bra 	$L__BB0_531;

	not.pred 	%p351, %p25;
	@%p351 bra 	$L__BB0_529;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3753;
  cvt.f32.f16 %f422, low;}

	// end inline asm
	add.s32 	%r5133, %r1305, %r418;
	mul.wide.s32 	%rd347, %r5133, 4;
	add.s64 	%rd348, %rd35, %rd347;
	st.global.f32 	[%rd348], %f422;

$L__BB0_529:
	not.pred 	%p352, %p27;
	@%p352 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3753;
  cvt.f32.f16 %f423, high;}

	// end inline asm
	add.s32 	%r5135, %r1305, %r419;
	mul.wide.s32 	%rd349, %r5135, 4;
	add.s64 	%rd350, %rd35, %rd349;
	st.global.f32 	[%rd350], %f423;

$L__BB0_531:
	mov.u32 	%r5136, 8;
	sub.s32 	%r5137, %r5136, %r1744;
	add.s32 	%r5138, %r5137, %r1745;
	add.s32 	%r1306, %r1303, %r5138;
	add.s32 	%r5139, %r1301, %r1306;
	add.s32 	%r5140, %r5139, -2;
	sub.s32 	%r5141, %r5136, %r1746;
	add.s32 	%r5142, %r5141, %r1747;
	mad.lo.s32 	%r5143, %r5140, %r5142, %r1302;
	mul.lo.s32 	%r5144, %r5143, %r59;
	sub.s32 	%r1307, %r5144, %r1748;
	@%p28 bra 	$L__BB0_536;

	not.pred 	%p354, %p24;
	@%p354 bra 	$L__BB0_534;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3719;
  cvt.f32.f16 %f424, low;}

	// end inline asm
	add.s32 	%r5146, %r1307, %r404;
	mul.wide.s32 	%rd351, %r5146, 4;
	add.s64 	%rd352, %rd35, %rd351;
	st.global.f32 	[%rd352], %f424;

$L__BB0_534:
	not.pred 	%p355, %p26;
	@%p355 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3719;
  cvt.f32.f16 %f425, high;}

	// end inline asm
	add.s32 	%r5148, %r1307, %r405;
	mul.wide.s32 	%rd353, %r5148, 4;
	add.s64 	%rd354, %rd35, %rd353;
	st.global.f32 	[%rd354], %f425;

$L__BB0_536:
	@%p28 bra 	$L__BB0_541;

	not.pred 	%p357, %p25;
	@%p357 bra 	$L__BB0_539;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3785;
  cvt.f32.f16 %f426, low;}

	// end inline asm
	add.s32 	%r5150, %r1307, %r418;
	mul.wide.s32 	%rd355, %r5150, 4;
	add.s64 	%rd356, %rd35, %rd355;
	st.global.f32 	[%rd356], %f426;

$L__BB0_539:
	not.pred 	%p358, %p27;
	@%p358 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3785;
  cvt.f32.f16 %f427, high;}

	// end inline asm
	add.s32 	%r5152, %r1307, %r419;
	mul.wide.s32 	%rd357, %r5152, 4;
	add.s64 	%rd358, %rd35, %rd357;
	st.global.f32 	[%rd358], %f427;

$L__BB0_541:
	add.s32 	%r1308, %r1302, 1;
	add.s32 	%r5153, %r1308, %r1304;
	mul.lo.s32 	%r5154, %r5153, %r59;
	sub.s32 	%r1309, %r5154, %r1748;
	@%p28 bra 	$L__BB0_546;

	not.pred 	%p360, %p24;
	@%p360 bra 	$L__BB0_544;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3830;
  cvt.f32.f16 %f428, low;}

	// end inline asm
	add.s32 	%r5156, %r1309, %r404;
	mul.wide.s32 	%rd359, %r5156, 4;
	add.s64 	%rd360, %rd35, %rd359;
	st.global.f32 	[%rd360], %f428;

$L__BB0_544:
	not.pred 	%p361, %p26;
	@%p361 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3830;
  cvt.f32.f16 %f429, high;}

	// end inline asm
	add.s32 	%r5158, %r1309, %r405;
	mul.wide.s32 	%rd361, %r5158, 4;
	add.s64 	%rd362, %rd35, %rd361;
	st.global.f32 	[%rd362], %f429;

$L__BB0_546:
	@%p28 bra 	$L__BB0_551;

	not.pred 	%p363, %p25;
	@%p363 bra 	$L__BB0_549;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3864;
  cvt.f32.f16 %f430, low;}

	// end inline asm
	add.s32 	%r5160, %r1309, %r418;
	mul.wide.s32 	%rd363, %r5160, 4;
	add.s64 	%rd364, %rd35, %rd363;
	st.global.f32 	[%rd364], %f430;

$L__BB0_549:
	not.pred 	%p364, %p27;
	@%p364 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3864;
  cvt.f32.f16 %f431, high;}

	// end inline asm
	add.s32 	%r5162, %r1309, %r419;
	mul.wide.s32 	%rd365, %r5162, 4;
	add.s64 	%rd366, %rd35, %rd365;
	st.global.f32 	[%rd366], %f431;

$L__BB0_551:
	add.s32 	%r1310, %r1301, -1;
	add.s32 	%r5163, %r1310, %r1303;
	mov.u32 	%r5164, 8;
	sub.s32 	%r5165, %r5164, %r1746;
	add.s32 	%r5166, %r5165, %r1747;
	mul.lo.s32 	%r1311, %r5163, %r5166;
	add.s32 	%r1312, %r1302, -1;
	add.s32 	%r5167, %r1312, %r1311;
	mul.lo.s32 	%r5168, %r5167, %r59;
	sub.s32 	%r1313, %r5168, %r1748;
	@%p28 bra 	$L__BB0_556;

	not.pred 	%p366, %p24;
	@%p366 bra 	$L__BB0_554;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3909;
  cvt.f32.f16 %f432, low;}

	// end inline asm
	add.s32 	%r5170, %r1313, %r404;
	mul.wide.s32 	%rd367, %r5170, 4;
	add.s64 	%rd368, %rd35, %rd367;
	st.global.f32 	[%rd368], %f432;

$L__BB0_554:
	not.pred 	%p367, %p26;
	@%p367 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3909;
  cvt.f32.f16 %f433, high;}

	// end inline asm
	add.s32 	%r5172, %r1313, %r405;
	mul.wide.s32 	%rd369, %r5172, 4;
	add.s64 	%rd370, %rd35, %rd369;
	st.global.f32 	[%rd370], %f433;

$L__BB0_556:
	@%p28 bra 	$L__BB0_561;

	not.pred 	%p369, %p25;
	@%p369 bra 	$L__BB0_559;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3986;
  cvt.f32.f16 %f434, low;}

	// end inline asm
	add.s32 	%r5174, %r1313, %r418;
	mul.wide.s32 	%rd371, %r5174, 4;
	add.s64 	%rd372, %rd35, %rd371;
	st.global.f32 	[%rd372], %f434;

$L__BB0_559:
	not.pred 	%p370, %p27;
	@%p370 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3986;
  cvt.f32.f16 %f435, high;}

	// end inline asm
	add.s32 	%r5176, %r1313, %r419;
	mul.wide.s32 	%rd373, %r5176, 4;
	add.s64 	%rd374, %rd35, %rd373;
	st.global.f32 	[%rd374], %f435;

$L__BB0_561:
	mov.u32 	%r5177, 8;
	sub.s32 	%r5178, %r5177, %r1746;
	add.s32 	%r5179, %r5178, %r1747;
	add.s32 	%r5180, %r1310, %r1306;
	mul.lo.s32 	%r1314, %r5180, %r5179;
	add.s32 	%r5181, %r1312, %r1314;
	mul.lo.s32 	%r5182, %r5181, %r59;
	sub.s32 	%r1315, %r5182, %r1748;
	@%p28 bra 	$L__BB0_566;

	not.pred 	%p372, %p24;
	@%p372 bra 	$L__BB0_564;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3952;
  cvt.f32.f16 %f436, low;}

	// end inline asm
	add.s32 	%r5184, %r1315, %r404;
	mul.wide.s32 	%rd375, %r5184, 4;
	add.s64 	%rd376, %rd35, %rd375;
	st.global.f32 	[%rd376], %f436;

$L__BB0_564:
	not.pred 	%p373, %p26;
	@%p373 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3952;
  cvt.f32.f16 %f437, high;}

	// end inline asm
	add.s32 	%r5186, %r1315, %r405;
	mul.wide.s32 	%rd377, %r5186, 4;
	add.s64 	%rd378, %rd35, %rd377;
	st.global.f32 	[%rd378], %f437;

$L__BB0_566:
	@%p28 bra 	$L__BB0_571;

	not.pred 	%p375, %p25;
	@%p375 bra 	$L__BB0_569;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4018;
  cvt.f32.f16 %f438, low;}

	// end inline asm
	add.s32 	%r5188, %r1315, %r418;
	mul.wide.s32 	%rd379, %r5188, 4;
	add.s64 	%rd380, %rd35, %rd379;
	st.global.f32 	[%rd380], %f438;

$L__BB0_569:
	not.pred 	%p376, %p27;
	@%p376 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4018;
  cvt.f32.f16 %f439, high;}

	// end inline asm
	add.s32 	%r5190, %r1315, %r419;
	mul.wide.s32 	%rd381, %r5190, 4;
	add.s64 	%rd382, %rd35, %rd381;
	st.global.f32 	[%rd382], %f439;

$L__BB0_571:
	add.s32 	%r5191, %r1302, %r1311;
	mul.lo.s32 	%r5192, %r5191, %r59;
	sub.s32 	%r1316, %r5192, %r1748;
	@%p28 bra 	$L__BB0_576;

	not.pred 	%p378, %p24;
	@%p378 bra 	$L__BB0_574;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f440, low;}

	// end inline asm
	add.s32 	%r5194, %r1316, %r404;
	mul.wide.s32 	%rd383, %r5194, 4;
	add.s64 	%rd384, %rd35, %rd383;
	st.global.f32 	[%rd384], %f440;

$L__BB0_574:
	not.pred 	%p379, %p26;
	@%p379 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f441, high;}

	// end inline asm
	add.s32 	%r5196, %r1316, %r405;
	mul.wide.s32 	%rd385, %r5196, 4;
	add.s64 	%rd386, %rd35, %rd385;
	st.global.f32 	[%rd386], %f441;

$L__BB0_576:
	@%p28 bra 	$L__BB0_581;

	not.pred 	%p381, %p25;
	@%p381 bra 	$L__BB0_579;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f442, low;}

	// end inline asm
	add.s32 	%r5198, %r1316, %r418;
	mul.wide.s32 	%rd387, %r5198, 4;
	add.s64 	%rd388, %rd35, %rd387;
	st.global.f32 	[%rd388], %f442;

$L__BB0_579:
	not.pred 	%p382, %p27;
	@%p382 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f443, high;}

	// end inline asm
	add.s32 	%r5200, %r1316, %r419;
	mul.wide.s32 	%rd389, %r5200, 4;
	add.s64 	%rd390, %rd35, %rd389;
	st.global.f32 	[%rd390], %f443;

$L__BB0_581:
	add.s32 	%r5201, %r1302, %r1314;
	mul.lo.s32 	%r5202, %r5201, %r59;
	sub.s32 	%r1317, %r5202, %r1748;
	@%p28 bra 	$L__BB0_586;

	not.pred 	%p384, %p24;
	@%p384 bra 	$L__BB0_584;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f444, low;}

	// end inline asm
	add.s32 	%r5204, %r1317, %r404;
	mul.wide.s32 	%rd391, %r5204, 4;
	add.s64 	%rd392, %rd35, %rd391;
	st.global.f32 	[%rd392], %f444;

$L__BB0_584:
	not.pred 	%p385, %p26;
	@%p385 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f445, high;}

	// end inline asm
	add.s32 	%r5206, %r1317, %r405;
	mul.wide.s32 	%rd393, %r5206, 4;
	add.s64 	%rd394, %rd35, %rd393;
	st.global.f32 	[%rd394], %f445;

$L__BB0_586:
	@%p28 bra 	$L__BB0_591;

	not.pred 	%p387, %p25;
	@%p387 bra 	$L__BB0_589;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f446, low;}

	// end inline asm
	add.s32 	%r5208, %r1317, %r418;
	mul.wide.s32 	%rd395, %r5208, 4;
	add.s64 	%rd396, %rd35, %rd395;
	st.global.f32 	[%rd396], %f446;

$L__BB0_589:
	not.pred 	%p388, %p27;
	@%p388 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f447, high;}

	// end inline asm
	add.s32 	%r5210, %r1317, %r419;
	mul.wide.s32 	%rd397, %r5210, 4;
	add.s64 	%rd398, %rd35, %rd397;
	st.global.f32 	[%rd398], %f447;

$L__BB0_591:
	mov.u32 	%r5211, 8;
	sub.s32 	%r5212, %r5211, %r1744;
	add.s32 	%r5213, %r5212, %r1745;
	add.s32 	%r1318, %r1306, %r5213;
	add.s32 	%r5214, %r1310, %r1318;
	sub.s32 	%r5215, %r5211, %r1746;
	add.s32 	%r5216, %r5215, %r1747;
	mul.lo.s32 	%r1319, %r5214, %r5216;
	add.s32 	%r5217, %r1302, %r1319;
	mul.lo.s32 	%r5218, %r5217, %r59;
	sub.s32 	%r1320, %r5218, %r1748;
	@%p28 bra 	$L__BB0_596;

	not.pred 	%p390, %p24;
	@%p390 bra 	$L__BB0_594;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1175;
  cvt.f32.f16 %f448, low;}

	// end inline asm
	add.s32 	%r5220, %r1320, %r404;
	mul.wide.s32 	%rd399, %r5220, 4;
	add.s64 	%rd400, %rd35, %rd399;
	st.global.f32 	[%rd400], %f448;

$L__BB0_594:
	not.pred 	%p391, %p26;
	@%p391 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1175;
  cvt.f32.f16 %f449, high;}

	// end inline asm
	add.s32 	%r5222, %r1320, %r405;
	mul.wide.s32 	%rd401, %r5222, 4;
	add.s64 	%rd402, %rd35, %rd401;
	st.global.f32 	[%rd402], %f449;

$L__BB0_596:
	@%p28 bra 	$L__BB0_601;

	not.pred 	%p393, %p25;
	@%p393 bra 	$L__BB0_599;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1187;
  cvt.f32.f16 %f450, low;}

	// end inline asm
	add.s32 	%r5224, %r1320, %r418;
	mul.wide.s32 	%rd403, %r5224, 4;
	add.s64 	%rd404, %rd35, %rd403;
	st.global.f32 	[%rd404], %f450;

$L__BB0_599:
	not.pred 	%p394, %p27;
	@%p394 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1187;
  cvt.f32.f16 %f451, high;}

	// end inline asm
	add.s32 	%r5226, %r1320, %r419;
	mul.wide.s32 	%rd405, %r5226, 4;
	add.s64 	%rd406, %rd35, %rd405;
	st.global.f32 	[%rd406], %f451;

$L__BB0_601:
	add.s32 	%r7370, %r1302, 1;
	add.s32 	%r5227, %r7370, %r1311;
	mul.lo.s32 	%r5228, %r5227, %r59;
	sub.s32 	%r1321, %r5228, %r1748;
	@%p28 bra 	$L__BB0_606;

	not.pred 	%p396, %p24;
	@%p396 bra 	$L__BB0_604;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f452, low;}

	// end inline asm
	add.s32 	%r5230, %r1321, %r404;
	mul.wide.s32 	%rd407, %r5230, 4;
	add.s64 	%rd408, %rd35, %rd407;
	st.global.f32 	[%rd408], %f452;

$L__BB0_604:
	not.pred 	%p397, %p26;
	@%p397 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f453, high;}

	// end inline asm
	add.s32 	%r5232, %r1321, %r405;
	mul.wide.s32 	%rd409, %r5232, 4;
	add.s64 	%rd410, %rd35, %rd409;
	st.global.f32 	[%rd410], %f453;

$L__BB0_606:
	@%p28 bra 	$L__BB0_611;

	not.pred 	%p399, %p25;
	@%p399 bra 	$L__BB0_609;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f454, low;}

	// end inline asm
	add.s32 	%r5234, %r1321, %r418;
	mul.wide.s32 	%rd411, %r5234, 4;
	add.s64 	%rd412, %rd35, %rd411;
	st.global.f32 	[%rd412], %f454;

$L__BB0_609:
	not.pred 	%p400, %p27;
	@%p400 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f455, high;}

	// end inline asm
	add.s32 	%r5236, %r1321, %r419;
	mul.wide.s32 	%rd413, %r5236, 4;
	add.s64 	%rd414, %rd35, %rd413;
	st.global.f32 	[%rd414], %f455;

$L__BB0_611:
	add.s32 	%r7371, %r1302, 1;
	add.s32 	%r5237, %r7371, %r1314;
	mul.lo.s32 	%r5238, %r5237, %r59;
	sub.s32 	%r1322, %r5238, %r1748;
	@%p28 bra 	$L__BB0_616;

	not.pred 	%p402, %p24;
	@%p402 bra 	$L__BB0_614;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4290;
  cvt.f32.f16 %f456, low;}

	// end inline asm
	add.s32 	%r5240, %r1322, %r404;
	mul.wide.s32 	%rd415, %r5240, 4;
	add.s64 	%rd416, %rd35, %rd415;
	st.global.f32 	[%rd416], %f456;

$L__BB0_614:
	not.pred 	%p403, %p26;
	@%p403 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4290;
  cvt.f32.f16 %f457, high;}

	// end inline asm
	add.s32 	%r5242, %r1322, %r405;
	mul.wide.s32 	%rd417, %r5242, 4;
	add.s64 	%rd418, %rd35, %rd417;
	st.global.f32 	[%rd418], %f457;

$L__BB0_616:
	@%p28 bra 	$L__BB0_621;

	not.pred 	%p405, %p25;
	@%p405 bra 	$L__BB0_619;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4371;
  cvt.f32.f16 %f458, low;}

	// end inline asm
	add.s32 	%r5244, %r1322, %r418;
	mul.wide.s32 	%rd419, %r5244, 4;
	add.s64 	%rd420, %rd35, %rd419;
	st.global.f32 	[%rd420], %f458;

$L__BB0_619:
	not.pred 	%p406, %p27;
	@%p406 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4371;
  cvt.f32.f16 %f459, high;}

	// end inline asm
	add.s32 	%r5246, %r1322, %r419;
	mul.wide.s32 	%rd421, %r5246, 4;
	add.s64 	%rd422, %rd35, %rd421;
	st.global.f32 	[%rd422], %f459;

$L__BB0_621:
	add.s32 	%r7372, %r1302, 1;
	add.s32 	%r5247, %r7372, %r1319;
	mul.lo.s32 	%r5248, %r5247, %r59;
	sub.s32 	%r1323, %r5248, %r1748;
	@%p28 bra 	$L__BB0_626;

	not.pred 	%p408, %p24;
	@%p408 bra 	$L__BB0_624;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1199;
  cvt.f32.f16 %f460, low;}

	// end inline asm
	add.s32 	%r5250, %r1323, %r404;
	mul.wide.s32 	%rd423, %r5250, 4;
	add.s64 	%rd424, %rd35, %rd423;
	st.global.f32 	[%rd424], %f460;

$L__BB0_624:
	not.pred 	%p409, %p26;
	@%p409 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1199;
  cvt.f32.f16 %f461, high;}

	// end inline asm
	add.s32 	%r5252, %r1323, %r405;
	mul.wide.s32 	%rd425, %r5252, 4;
	add.s64 	%rd426, %rd35, %rd425;
	st.global.f32 	[%rd426], %f461;

$L__BB0_626:
	@%p28 bra 	$L__BB0_631;

	not.pred 	%p411, %p25;
	@%p411 bra 	$L__BB0_629;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1211;
  cvt.f32.f16 %f462, low;}

	// end inline asm
	add.s32 	%r5254, %r1323, %r418;
	mul.wide.s32 	%rd427, %r5254, 4;
	add.s64 	%rd428, %rd35, %rd427;
	st.global.f32 	[%rd428], %f462;

$L__BB0_629:
	not.pred 	%p412, %p27;
	@%p412 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1211;
  cvt.f32.f16 %f463, high;}

	// end inline asm
	add.s32 	%r5256, %r1323, %r419;
	mul.wide.s32 	%rd429, %r5256, 4;
	add.s64 	%rd430, %rd35, %rd429;
	st.global.f32 	[%rd430], %f463;

$L__BB0_631:
	add.s32 	%r1324, %r1302, 2;
	add.s32 	%r5257, %r1324, %r1311;
	mul.lo.s32 	%r5258, %r5257, %r59;
	sub.s32 	%r1325, %r5258, %r1748;
	@%p28 bra 	$L__BB0_636;

	not.pred 	%p414, %p24;
	@%p414 bra 	$L__BB0_634;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4431;
  cvt.f32.f16 %f464, low;}

	// end inline asm
	add.s32 	%r5260, %r1325, %r404;
	mul.wide.s32 	%rd431, %r5260, 4;
	add.s64 	%rd432, %rd35, %rd431;
	st.global.f32 	[%rd432], %f464;

$L__BB0_634:
	not.pred 	%p415, %p26;
	@%p415 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4431;
  cvt.f32.f16 %f465, high;}

	// end inline asm
	add.s32 	%r5262, %r1325, %r405;
	mul.wide.s32 	%rd433, %r5262, 4;
	add.s64 	%rd434, %rd35, %rd433;
	st.global.f32 	[%rd434], %f465;

$L__BB0_636:
	@%p28 bra 	$L__BB0_641;

	not.pred 	%p417, %p25;
	@%p417 bra 	$L__BB0_639;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4465;
  cvt.f32.f16 %f466, low;}

	// end inline asm
	add.s32 	%r5264, %r1325, %r418;
	mul.wide.s32 	%rd435, %r5264, 4;
	add.s64 	%rd436, %rd35, %rd435;
	st.global.f32 	[%rd436], %f466;

$L__BB0_639:
	not.pred 	%p418, %p27;
	@%p418 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4465;
  cvt.f32.f16 %f467, high;}

	// end inline asm
	add.s32 	%r5266, %r1325, %r419;
	mul.wide.s32 	%rd437, %r5266, 4;
	add.s64 	%rd438, %rd35, %rd437;
	st.global.f32 	[%rd438], %f467;

$L__BB0_641:
	add.s32 	%r7373, %r1302, -1;
	mov.u32 	%r5267, 8;
	sub.s32 	%r5268, %r5267, %r1746;
	add.s32 	%r5269, %r5268, %r1747;
	mul.lo.s32 	%r1326, %r5139, %r5269;
	add.s32 	%r5271, %r7373, %r1326;
	mul.lo.s32 	%r5272, %r5271, %r59;
	sub.s32 	%r1327, %r5272, %r1748;
	@%p28 bra 	$L__BB0_646;

	not.pred 	%p420, %p24;
	@%p420 bra 	$L__BB0_644;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f468, low;}

	// end inline asm
	add.s32 	%r5274, %r1327, %r404;
	mul.wide.s32 	%rd439, %r5274, 4;
	add.s64 	%rd440, %rd35, %rd439;
	st.global.f32 	[%rd440], %f468;

$L__BB0_644:
	not.pred 	%p421, %p26;
	@%p421 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f469, high;}

	// end inline asm
	add.s32 	%r5276, %r1327, %r405;
	mul.wide.s32 	%rd441, %r5276, 4;
	add.s64 	%rd442, %rd35, %rd441;
	st.global.f32 	[%rd442], %f469;

$L__BB0_646:
	@%p28 bra 	$L__BB0_651;

	not.pred 	%p423, %p25;
	@%p423 bra 	$L__BB0_649;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f470, low;}

	// end inline asm
	add.s32 	%r5278, %r1327, %r418;
	mul.wide.s32 	%rd443, %r5278, 4;
	add.s64 	%rd444, %rd35, %rd443;
	st.global.f32 	[%rd444], %f470;

$L__BB0_649:
	not.pred 	%p424, %p27;
	@%p424 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f471, high;}

	// end inline asm
	add.s32 	%r5280, %r1327, %r419;
	mul.wide.s32 	%rd445, %r5280, 4;
	add.s64 	%rd446, %rd35, %rd445;
	st.global.f32 	[%rd446], %f471;

$L__BB0_651:
	mov.u32 	%r7378, 8;
	sub.s32 	%r7377, %r7378, %r1744;
	add.s32 	%r7376, %r7377, %r1745;
	add.s32 	%r7375, %r1306, %r7376;
	add.s32 	%r7374, %r1302, -1;
	mov.u32 	%r5281, 8;
	sub.s32 	%r5282, %r5281, %r1746;
	add.s32 	%r5283, %r5282, %r1747;
	add.s32 	%r5284, %r1301, %r7375;
	mul.lo.s32 	%r1328, %r5284, %r5283;
	add.s32 	%r5285, %r7374, %r1328;
	mul.lo.s32 	%r5286, %r5285, %r59;
	sub.s32 	%r1329, %r5286, %r1748;
	@%p28 bra 	$L__BB0_656;

	not.pred 	%p426, %p24;
	@%p426 bra 	$L__BB0_654;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1229;
  cvt.f32.f16 %f472, low;}

	// end inline asm
	add.s32 	%r5288, %r1329, %r404;
	mul.wide.s32 	%rd447, %r5288, 4;
	add.s64 	%rd448, %rd35, %rd447;
	st.global.f32 	[%rd448], %f472;

$L__BB0_654:
	not.pred 	%p427, %p26;
	@%p427 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1229;
  cvt.f32.f16 %f473, high;}

	// end inline asm
	add.s32 	%r5290, %r1329, %r405;
	mul.wide.s32 	%rd449, %r5290, 4;
	add.s64 	%rd450, %rd35, %rd449;
	st.global.f32 	[%rd450], %f473;

$L__BB0_656:
	@%p28 bra 	$L__BB0_661;

	not.pred 	%p429, %p25;
	@%p429 bra 	$L__BB0_659;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1235;
  cvt.f32.f16 %f474, low;}

	// end inline asm
	add.s32 	%r5292, %r1329, %r418;
	mul.wide.s32 	%rd451, %r5292, 4;
	add.s64 	%rd452, %rd35, %rd451;
	st.global.f32 	[%rd452], %f474;

$L__BB0_659:
	not.pred 	%p430, %p27;
	@%p430 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1235;
  cvt.f32.f16 %f475, high;}

	// end inline asm
	add.s32 	%r5294, %r1329, %r419;
	mul.wide.s32 	%rd453, %r5294, 4;
	add.s64 	%rd454, %rd35, %rd453;
	st.global.f32 	[%rd454], %f475;

$L__BB0_661:
	mov.u32 	%r5295, 8;
	sub.s32 	%r5296, %r5295, %r1746;
	add.s32 	%r5297, %r5296, %r1747;
	mul.lo.s32 	%r1330, %r5122, %r5297;
	add.s32 	%r5299, %r1302, %r1330;
	mul.lo.s32 	%r5300, %r5299, %r59;
	sub.s32 	%r1331, %r5300, %r1748;
	@%p28 bra 	$L__BB0_666;

	not.pred 	%p432, %p24;
	@%p432 bra 	$L__BB0_664;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f476, low;}

	// end inline asm
	add.s32 	%r5302, %r1331, %r404;
	mul.wide.s32 	%rd455, %r5302, 4;
	add.s64 	%rd456, %rd35, %rd455;
	st.global.f32 	[%rd456], %f476;

$L__BB0_664:
	not.pred 	%p433, %p26;
	@%p433 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f477, high;}

	// end inline asm
	add.s32 	%r5304, %r1331, %r405;
	mul.wide.s32 	%rd457, %r5304, 4;
	add.s64 	%rd458, %rd35, %rd457;
	st.global.f32 	[%rd458], %f477;

$L__BB0_666:
	@%p28 bra 	$L__BB0_671;

	not.pred 	%p435, %p25;
	@%p435 bra 	$L__BB0_669;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f478, low;}

	// end inline asm
	add.s32 	%r5306, %r1331, %r418;
	mul.wide.s32 	%rd459, %r5306, 4;
	add.s64 	%rd460, %rd35, %rd459;
	st.global.f32 	[%rd460], %f478;

$L__BB0_669:
	not.pred 	%p436, %p27;
	@%p436 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f479, high;}

	// end inline asm
	add.s32 	%r5308, %r1331, %r419;
	mul.wide.s32 	%rd461, %r5308, 4;
	add.s64 	%rd462, %rd35, %rd461;
	st.global.f32 	[%rd462], %f479;

$L__BB0_671:
	add.s32 	%r5309, %r1302, %r1326;
	mul.lo.s32 	%r5310, %r5309, %r59;
	sub.s32 	%r1332, %r5310, %r1748;
	@%p28 bra 	$L__BB0_676;

	not.pred 	%p438, %p24;
	@%p438 bra 	$L__BB0_674;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f480, low;}

	// end inline asm
	add.s32 	%r5312, %r1332, %r404;
	mul.wide.s32 	%rd463, %r5312, 4;
	add.s64 	%rd464, %rd35, %rd463;
	st.global.f32 	[%rd464], %f480;

$L__BB0_674:
	not.pred 	%p439, %p26;
	@%p439 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f481, high;}

	// end inline asm
	add.s32 	%r5314, %r1332, %r405;
	mul.wide.s32 	%rd465, %r5314, 4;
	add.s64 	%rd466, %rd35, %rd465;
	st.global.f32 	[%rd466], %f481;

$L__BB0_676:
	@%p28 bra 	$L__BB0_681;

	not.pred 	%p441, %p25;
	@%p441 bra 	$L__BB0_679;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f482, low;}

	// end inline asm
	add.s32 	%r5316, %r1332, %r418;
	mul.wide.s32 	%rd467, %r5316, 4;
	add.s64 	%rd468, %rd35, %rd467;
	st.global.f32 	[%rd468], %f482;

$L__BB0_679:
	not.pred 	%p442, %p27;
	@%p442 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f483, high;}

	// end inline asm
	add.s32 	%r5318, %r1332, %r419;
	mul.wide.s32 	%rd469, %r5318, 4;
	add.s64 	%rd470, %rd35, %rd469;
	st.global.f32 	[%rd470], %f483;

$L__BB0_681:
	add.s32 	%r5319, %r1302, %r1328;
	mul.lo.s32 	%r5320, %r5319, %r59;
	sub.s32 	%r1333, %r5320, %r1748;
	@%p28 bra 	$L__BB0_686;

	not.pred 	%p444, %p24;
	@%p444 bra 	$L__BB0_684;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f484, low;}

	// end inline asm
	add.s32 	%r5322, %r1333, %r404;
	mul.wide.s32 	%rd471, %r5322, 4;
	add.s64 	%rd472, %rd35, %rd471;
	st.global.f32 	[%rd472], %f484;

$L__BB0_684:
	not.pred 	%p445, %p26;
	@%p445 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f485, high;}

	// end inline asm
	add.s32 	%r5324, %r1333, %r405;
	mul.wide.s32 	%rd473, %r5324, 4;
	add.s64 	%rd474, %rd35, %rd473;
	st.global.f32 	[%rd474], %f485;

$L__BB0_686:
	@%p28 bra 	$L__BB0_691;

	not.pred 	%p447, %p25;
	@%p447 bra 	$L__BB0_689;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f486, low;}

	// end inline asm
	add.s32 	%r5326, %r1333, %r418;
	mul.wide.s32 	%rd475, %r5326, 4;
	add.s64 	%rd476, %rd35, %rd475;
	st.global.f32 	[%rd476], %f486;

$L__BB0_689:
	not.pred 	%p448, %p27;
	@%p448 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f487, high;}

	// end inline asm
	add.s32 	%r5328, %r1333, %r419;
	mul.wide.s32 	%rd477, %r5328, 4;
	add.s64 	%rd478, %rd35, %rd477;
	st.global.f32 	[%rd478], %f487;

$L__BB0_691:
	add.s32 	%r7379, %r1302, 1;
	add.s32 	%r5329, %r7379, %r1330;
	mul.lo.s32 	%r5330, %r5329, %r59;
	sub.s32 	%r1334, %r5330, %r1748;
	@%p28 bra 	$L__BB0_696;

	not.pred 	%p450, %p24;
	@%p450 bra 	$L__BB0_694;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f488, low;}

	// end inline asm
	add.s32 	%r5332, %r1334, %r404;
	mul.wide.s32 	%rd479, %r5332, 4;
	add.s64 	%rd480, %rd35, %rd479;
	st.global.f32 	[%rd480], %f488;

$L__BB0_694:
	not.pred 	%p451, %p26;
	@%p451 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f489, high;}

	// end inline asm
	add.s32 	%r5334, %r1334, %r405;
	mul.wide.s32 	%rd481, %r5334, 4;
	add.s64 	%rd482, %rd35, %rd481;
	st.global.f32 	[%rd482], %f489;

$L__BB0_696:
	@%p28 bra 	$L__BB0_701;

	not.pred 	%p453, %p25;
	@%p453 bra 	$L__BB0_699;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f490, low;}

	// end inline asm
	add.s32 	%r5336, %r1334, %r418;
	mul.wide.s32 	%rd483, %r5336, 4;
	add.s64 	%rd484, %rd35, %rd483;
	st.global.f32 	[%rd484], %f490;

$L__BB0_699:
	not.pred 	%p454, %p27;
	@%p454 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f491, high;}

	// end inline asm
	add.s32 	%r5338, %r1334, %r419;
	mul.wide.s32 	%rd485, %r5338, 4;
	add.s64 	%rd486, %rd35, %rd485;
	st.global.f32 	[%rd486], %f491;

$L__BB0_701:
	add.s32 	%r7380, %r1302, 1;
	add.s32 	%r5339, %r7380, %r1326;
	mul.lo.s32 	%r5340, %r5339, %r59;
	sub.s32 	%r1335, %r5340, %r1748;
	@%p28 bra 	$L__BB0_706;

	not.pred 	%p456, %p24;
	@%p456 bra 	$L__BB0_704;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f492, low;}

	// end inline asm
	add.s32 	%r5342, %r1335, %r404;
	mul.wide.s32 	%rd487, %r5342, 4;
	add.s64 	%rd488, %rd35, %rd487;
	st.global.f32 	[%rd488], %f492;

$L__BB0_704:
	not.pred 	%p457, %p26;
	@%p457 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f493, high;}

	// end inline asm
	add.s32 	%r5344, %r1335, %r405;
	mul.wide.s32 	%rd489, %r5344, 4;
	add.s64 	%rd490, %rd35, %rd489;
	st.global.f32 	[%rd490], %f493;

$L__BB0_706:
	@%p28 bra 	$L__BB0_711;

	not.pred 	%p459, %p25;
	@%p459 bra 	$L__BB0_709;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f494, low;}

	// end inline asm
	add.s32 	%r5346, %r1335, %r418;
	mul.wide.s32 	%rd491, %r5346, 4;
	add.s64 	%rd492, %rd35, %rd491;
	st.global.f32 	[%rd492], %f494;

$L__BB0_709:
	not.pred 	%p460, %p27;
	@%p460 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f495, high;}

	// end inline asm
	add.s32 	%r5348, %r1335, %r419;
	mul.wide.s32 	%rd493, %r5348, 4;
	add.s64 	%rd494, %rd35, %rd493;
	st.global.f32 	[%rd494], %f495;

$L__BB0_711:
	add.s32 	%r7381, %r1302, 1;
	add.s32 	%r5349, %r7381, %r1328;
	mul.lo.s32 	%r5350, %r5349, %r59;
	sub.s32 	%r1336, %r5350, %r1748;
	@%p28 bra 	$L__BB0_716;

	not.pred 	%p462, %p24;
	@%p462 bra 	$L__BB0_714;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5352, %r1336, %r404;
	mul.wide.s32 	%rd495, %r5352, 4;
	add.s64 	%rd496, %rd35, %rd495;
	st.global.f32 	[%rd496], %f496;

$L__BB0_714:
	not.pred 	%p463, %p26;
	@%p463 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7627;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5354, %r1336, %r405;
	mul.wide.s32 	%rd497, %r5354, 4;
	add.s64 	%rd498, %rd35, %rd497;
	st.global.f32 	[%rd498], %f497;

$L__BB0_716:
	@%p28 bra 	$L__BB0_721;

	not.pred 	%p465, %p25;
	@%p465 bra 	$L__BB0_719;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5356, %r1336, %r418;
	mul.wide.s32 	%rd499, %r5356, 4;
	add.s64 	%rd500, %rd35, %rd499;
	st.global.f32 	[%rd500], %f498;

$L__BB0_719:
	not.pred 	%p466, %p27;
	@%p466 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7626;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5358, %r1336, %r419;
	mul.wide.s32 	%rd501, %r5358, 4;
	add.s64 	%rd502, %rd35, %rd501;
	st.global.f32 	[%rd502], %f499;

$L__BB0_721:
	add.s32 	%r5359, %r1324, %r1328;
	mul.lo.s32 	%r5360, %r5359, %r59;
	sub.s32 	%r1337, %r5360, %r1748;
	@%p28 bra 	$L__BB0_726;

	not.pred 	%p468, %p24;
	@%p468 bra 	$L__BB0_724;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1284;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5362, %r1337, %r404;
	mul.wide.s32 	%rd503, %r5362, 4;
	add.s64 	%rd504, %rd35, %rd503;
	st.global.f32 	[%rd504], %f500;

$L__BB0_724:
	not.pred 	%p469, %p26;
	@%p469 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1284;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5364, %r1337, %r405;
	mul.wide.s32 	%rd505, %r5364, 4;
	add.s64 	%rd506, %rd35, %rd505;
	st.global.f32 	[%rd506], %f501;

$L__BB0_726:
	@%p28 bra 	$L__BB0_731;

	not.pred 	%p471, %p25;
	@%p471 bra 	$L__BB0_729;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1285;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5366, %r1337, %r418;
	mul.wide.s32 	%rd507, %r5366, 4;
	add.s64 	%rd508, %rd35, %rd507;
	st.global.f32 	[%rd508], %f502;

$L__BB0_729:
	not.pred 	%p472, %p27;
	@%p472 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1285;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5368, %r1337, %r419;
	mul.wide.s32 	%rd509, %r5368, 4;
	add.s64 	%rd510, %rd35, %rd509;
	st.global.f32 	[%rd510], %f503;

$L__BB0_731:
	add.s32 	%r1338, %r1301, 1;
	add.s32 	%r5369, %r1338, %r1306;
	mov.u32 	%r5370, 8;
	sub.s32 	%r5371, %r5370, %r1746;
	add.s32 	%r5372, %r5371, %r1747;
	mad.lo.s32 	%r5373, %r5369, %r5372, %r1302;
	mul.lo.s32 	%r5374, %r5373, %r59;
	sub.s32 	%r1339, %r5374, %r1748;
	@%p28 bra 	$L__BB0_736;

	not.pred 	%p474, %p24;
	@%p474 bra 	$L__BB0_734;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7625;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5376, %r1339, %r404;
	mul.wide.s32 	%rd511, %r5376, 4;
	add.s64 	%rd512, %rd35, %rd511;
	st.global.f32 	[%rd512], %f504;

$L__BB0_734:
	not.pred 	%p475, %p26;
	@%p475 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7625;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5378, %r1339, %r405;
	mul.wide.s32 	%rd513, %r5378, 4;
	add.s64 	%rd514, %rd35, %rd513;
	st.global.f32 	[%rd514], %f505;

$L__BB0_736:
	@%p28 bra 	$L__BB0_741;

	not.pred 	%p477, %p25;
	@%p477 bra 	$L__BB0_739;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7624;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5380, %r1339, %r418;
	mul.wide.s32 	%rd515, %r5380, 4;
	add.s64 	%rd516, %rd35, %rd515;
	st.global.f32 	[%rd516], %f506;

$L__BB0_739:
	not.pred 	%p478, %p27;
	@%p478 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7624;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5382, %r1339, %r419;
	mul.wide.s32 	%rd517, %r5382, 4;
	add.s64 	%rd518, %rd35, %rd517;
	st.global.f32 	[%rd518], %f507;

$L__BB0_741:
	mov.u32 	%r7385, 8;
	sub.s32 	%r7384, %r7385, %r1744;
	add.s32 	%r7383, %r7384, %r1745;
	add.s32 	%r7382, %r1306, %r7383;
	mov.u32 	%r5383, 8;
	sub.s32 	%r5384, %r5383, %r1746;
	add.s32 	%r5385, %r5384, %r1747;
	add.s32 	%r5386, %r1338, %r7382;
	mul.lo.s32 	%r1340, %r5386, %r5385;
	add.s32 	%r5387, %r1302, %r1340;
	mul.lo.s32 	%r5388, %r5387, %r59;
	sub.s32 	%r1341, %r5388, %r1748;
	@%p28 bra 	$L__BB0_746;

	not.pred 	%p480, %p24;
	@%p480 bra 	$L__BB0_744;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7623;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5390, %r1341, %r404;
	mul.wide.s32 	%rd519, %r5390, 4;
	add.s64 	%rd520, %rd35, %rd519;
	st.global.f32 	[%rd520], %f508;

$L__BB0_744:
	not.pred 	%p481, %p26;
	@%p481 bra 	$L__BB0_746;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7623;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5392, %r1341, %r405;
	mul.wide.s32 	%rd521, %r5392, 4;
	add.s64 	%rd522, %rd35, %rd521;
	st.global.f32 	[%rd522], %f509;

$L__BB0_746:
	@%p28 bra 	$L__BB0_751;

	not.pred 	%p483, %p25;
	@%p483 bra 	$L__BB0_749;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7622;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5394, %r1341, %r418;
	mul.wide.s32 	%rd523, %r5394, 4;
	add.s64 	%rd524, %rd35, %rd523;
	st.global.f32 	[%rd524], %f510;

$L__BB0_749:
	not.pred 	%p484, %p27;
	@%p484 bra 	$L__BB0_751;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7622;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5396, %r1341, %r419;
	mul.wide.s32 	%rd525, %r5396, 4;
	add.s64 	%rd526, %rd35, %rd525;
	st.global.f32 	[%rd526], %f511;

$L__BB0_751:
	add.s32 	%r7386, %r1302, 1;
	add.s32 	%r5397, %r7386, %r1340;
	mul.lo.s32 	%r5398, %r5397, %r59;
	sub.s32 	%r1342, %r5398, %r1748;
	@%p28 bra 	$L__BB0_756;

	not.pred 	%p486, %p24;
	@%p486 bra 	$L__BB0_754;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7621;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5400, %r1342, %r404;
	mul.wide.s32 	%rd527, %r5400, 4;
	add.s64 	%rd528, %rd35, %rd527;
	st.global.f32 	[%rd528], %f512;

$L__BB0_754:
	not.pred 	%p487, %p26;
	@%p487 bra 	$L__BB0_756;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7621;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5402, %r1342, %r405;
	mul.wide.s32 	%rd529, %r5402, 4;
	add.s64 	%rd530, %rd35, %rd529;
	st.global.f32 	[%rd530], %f513;

$L__BB0_756:
	@%p28 bra 	$L__BB0_761;

	not.pred 	%p489, %p25;
	@%p489 bra 	$L__BB0_759;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7620;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5404, %r1342, %r418;
	mul.wide.s32 	%rd531, %r5404, 4;
	add.s64 	%rd532, %rd35, %rd531;
	st.global.f32 	[%rd532], %f514;

$L__BB0_759:
	not.pred 	%p490, %p27;
	@%p490 bra 	$L__BB0_761;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7620;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5406, %r1342, %r419;
	mul.wide.s32 	%rd533, %r5406, 4;
	add.s64 	%rd534, %rd35, %rd533;
	st.global.f32 	[%rd534], %f515;

$L__BB0_761:
	setp.eq.s32 	%p491, %r41, %r2196;
	@%p491 bra 	$L__BB0_763;

	mad.lo.s32 	%r5407, %r1731, %r41, %r42;
	mov.u32 	%r5408, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5409, %r5407, 1280, %r5408;
	add.s32 	%r5410, %r5409, -256;
	shl.b32 	%r5411, %r46, 4;
	add.s32 	%r5412, %r5410, %r5411;
	st.shared.v4.u32 	[%r5412+256], {%r3909, %r3986, %r1229, %r1235};
	st.shared.v4.u32 	[%r5412+1024], {%r3676, %r3753, %r1175, %r1187};
	shl.b32 	%r5413, %r46, 3;
	add.s32 	%r5414, %r5410, %r5413;
	st.shared.v2.u32 	[%r5414+768], {%r3952, %r4018};

$L__BB0_763:
	setp.eq.s32 	%p492, %r42, %r2201;
	@%p492 bra 	$L__BB0_767;

	mad.lo.s32 	%r5418, %r1730, 384, -64;
	mul.lo.s32 	%r5419, %r5418, %r42;
	mad.lo.s32 	%r5421, %r2197, %r2196, %r5419;
	mad.lo.s32 	%r5422, %r2601, 384, %r5421;
	shl.b32 	%r5423, %r5422, 2;
	mov.u32 	%r5424, _ZN6kernel5shmemE;
	add.s32 	%r5425, %r5424, %r5423;
	add.s32 	%r5426, %r5425, -256;
	shl.b32 	%r5427, %r46, 4;
	add.s32 	%r5428, %r5426, %r5427;
	st.shared.v4.u32 	[%r5428+256], {%r3830, %r3864, %r1199, %r1211};
	st.shared.v4.u32 	[%r5428+1024], {%r4431, %r4465, %r1284, %r1285};
	shl.b32 	%r5429, %r46, 3;
	add.s32 	%r1346, %r5426, %r5429;
	@%p491 bra 	$L__BB0_766;

	st.shared.v2.u32 	[%r1346], {%r3719, %r3785};

$L__BB0_766:
	st.shared.v2.u32 	[%r1346+768], {%r4290, %r4371};

$L__BB0_767:
	setp.ne.s32 	%p494, %r41, %r2196;
	ld.param.u64 	%rd535, [%rd1+104];
	cvta.to.global.u64 	%rd36, %rd535;
	@%p494 bra 	$L__BB0_769;

	mad.lo.s32 	%r5431, %r659, %r1733, %r44;
	mul.lo.s32 	%r5432, %r1731, %r5431;
	mul.lo.s32 	%r5433, %r5432, 768;
	mad.lo.s32 	%r5434, %r42, 384, %r5433;
	add.s32 	%r5435, %r5434, -64;
	mul.wide.s32 	%rd536, %r5435, 4;
	add.s64 	%rd537, %rd36, %rd536;
	add.s64 	%rd539, %rd537, %rd301;
	st.global.v4.u32 	[%rd539+256], {%r3909, %r3986, %r1229, %r1235};
	st.global.v4.u32 	[%rd539+1024], {%r3676, %r3753, %r1175, %r1187};
	add.s64 	%rd541, %rd537, %rd303;
	st.global.v2.u32 	[%rd541+768], {%r3952, %r4018};
	st.global.v2.u32 	[%rd541+1536], {%r3719, %r3785};

$L__BB0_769:
	setp.ne.s32 	%p495, %r42, %r2201;
	@%p495 bra 	$L__BB0_774;

	ld.param.u64 	%rd586, [%rd1+104];
	cvta.to.global.u64 	%rd585, %rd586;
	mad.lo.s32 	%r5438, %r660, %r1732, %r43;
	mul.lo.s32 	%r5442, %r5438, %r1811;
	mad.lo.s32 	%r5445, %r2601, 384, %r5442;
	add.s32 	%r5446, %r5445, -64;
	mad.lo.s32 	%r5449, %r1813, %r72, %r5446;
	mul.wide.s32 	%rd542, %r5449, 4;
	add.s64 	%rd543, %rd585, %rd542;
	add.s64 	%rd545, %rd543, %rd301;
	st.global.v4.u32 	[%rd545+256], {%r3830, %r3864, %r1199, %r1211};
	st.global.v4.u32 	[%rd545+1024], {%r4431, %r4465, %r1284, %r1285};
	add.s64 	%rd37, %rd543, %rd303;
	@%p491 bra 	$L__BB0_772;

	st.global.v2.u32 	[%rd37], {%r3719, %r3785};

$L__BB0_772:
	st.global.v2.u32 	[%rd37+768], {%r4290, %r4371};
	@%p284 bra 	$L__BB0_774;

	st.global.v2.u32 	[%rd37+1536], {%r7810, %r7809};

$L__BB0_774:
	setp.ge.s32 	%p498, %r41, %r2196;
	@%p498 bra 	$L__BB0_776;

	mul.lo.s32 	%r5450, %r1731, 320;
	mul.lo.s32 	%r5451, %r42, 320;
	mad.lo.s32 	%r5452, %r5450, %r41, %r5451;
	add.s32 	%r5456, %r1810, -64;
	mad.lo.s32 	%r5460, %r5456, %r2201, %r2198;
	add.s32 	%r5461, %r5452, %r5460;
	shl.b32 	%r5462, %r5461, 2;
	mov.u32 	%r5463, _ZN6kernel5shmemE;
	add.s32 	%r5464, %r5463, %r5462;
	shl.b32 	%r5465, %r46, 4;
	add.s32 	%r5466, %r5464, %r5465;
	st.shared.v4.u32 	[%r5466], {%r7858, %r7857, %r7853, %r7851};
	shl.b32 	%r5467, %r46, 3;
	add.s32 	%r5468, %r5464, %r5467;
	st.shared.v2.u32 	[%r5468+512], {%r7595, %r7590};
	st.shared.v4.u32 	[%r5466+768], {%r7619, %r7610, %r7582, %r7578};

$L__BB0_776:
	setp.ge.s32 	%p499, %r42, %r2201;
	@%p499 bra 	$L__BB0_780;

	mad.lo.s32 	%r5474, %r2601, 384, %r2204;
	mad.lo.s32 	%r5477, %r2199, %r42, %r5474;
	add.s32 	%r5483, %r5477, %r2202;
	shl.b32 	%r5484, %r5483, 2;
	mov.u32 	%r5485, _ZN6kernel5shmemE;
	add.s32 	%r5486, %r5485, %r5484;
	shl.b32 	%r5487, %r46, 3;
	add.s32 	%r5488, %r5486, %r5487;
	@%p498 bra 	$L__BB0_779;

	add.s32 	%r7359, %r5488, -256;
	st.shared.v2.u32 	[%r7359], {%r7614, %r7607};

$L__BB0_779:
	shl.b32 	%r5507, %r46, 4;
	add.s32 	%r5508, %r5486, %r5507;
	st.shared.v4.u32 	[%r5508], {%r7605, %r7601, %r7570, %r7566};
	add.s32 	%r7360, %r5488, -256;
	st.shared.v2.u32 	[%r7360+768], {%r7573, %r7567};
	st.shared.v4.u32 	[%r5508+768], {%r7856, %r7855, %r7844, %r7843};

$L__BB0_780:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_782;

	mul.lo.s32 	%r5509, %r1731, 320;
	add.s32 	%r5510, %r41, -1;
	mul.lo.s32 	%r5511, %r42, 320;
	mad.lo.s32 	%r5512, %r5509, %r5510, %r5511;
	shl.b32 	%r5513, %r5512, 2;
	mov.u32 	%r5514, _ZN6kernel5shmemE;
	add.s32 	%r5515, %r5514, %r5513;
	add.s32 	%r5516, %r5515, -256;
	shl.b32 	%r5517, %r46, 4;
	add.s32 	%r5518, %r5516, %r5517;
	ld.shared.v4.u32 	{%r7806, %r7804, %r7798, %r7797}, [%r5518+256];
	ld.shared.v4.u32 	{%r7808, %r7807, %r7802, %r7801}, [%r5518+1024];
	shl.b32 	%r5527, %r46, 3;
	add.s32 	%r5528, %r5516, %r5527;
	ld.shared.v2.u32 	{%r7805, %r7803}, [%r5528+768];

$L__BB0_782:
	@%p282 bra 	$L__BB0_785;

	mad.lo.s32 	%r5533, %r1730, 384, -64;
	add.s32 	%r5534, %r42, -1;
	mul.lo.s32 	%r5535, %r5533, %r5534;
	mad.lo.s32 	%r5538, %r2197, %r2196, %r5535;
	mad.lo.s32 	%r5539, %r2601, 384, %r5538;
	shl.b32 	%r5540, %r5539, 2;
	mov.u32 	%r5541, _ZN6kernel5shmemE;
	add.s32 	%r5542, %r5541, %r5540;
	add.s32 	%r5543, %r5542, -256;
	shl.b32 	%r5544, %r46, 4;
	add.s32 	%r5545, %r5543, %r5544;
	ld.shared.v4.u32 	{%r7822, %r7821, %r7819, %r7817}, [%r5545+256];
	ld.shared.v4.u32 	{%r7816, %r7815, %r7813, %r7811}, [%r5545+1024];
	shl.b32 	%r5554, %r46, 3;
	add.s32 	%r5555, %r5543, %r5554;
	ld.shared.v2.u32 	{%r7820, %r7818}, [%r5555+768];
	@%p279 bra 	$L__BB0_785;

	add.s32 	%r7361, %r5555, 768;
	ld.shared.v2.u32 	{%r7800, %r7799}, [%r7361+768];

$L__BB0_785:
	ld.param.u64 	%rd547, [%rd1+104];
	cvta.to.global.u64 	%rd38, %rd547;
	mov.u32 	%r7937, %r7779;
	mov.u32 	%r7938, %r7780;
	mov.u32 	%r7923, %r7767;
	mov.u32 	%r7924, %r7768;
	mov.u32 	%r7925, %r7769;
	mov.u32 	%r7926, %r7770;
	mov.u32 	%r7939, %r7781;
	mov.u32 	%r7941, %r7783;
	mov.u32 	%r7929, %r7771;
	mov.u32 	%r7930, %r7772;
	mov.u32 	%r7931, %r7773;
	mov.u32 	%r7932, %r7774;
	@%p284 bra 	$L__BB0_789;

	mad.lo.s32 	%r5561, %r659, %r1733, %r44;
	mad.lo.s32 	%r5562, %r5561, 768, 384;
	mul.lo.s32 	%r5563, %r5562, %r1731;
	mad.lo.s32 	%r5564, %r42, 384, %r5563;
	add.s32 	%r5565, %r5564, -128;
	mul.wide.s32 	%rd548, %r5565, 4;
	add.s64 	%rd549, %rd38, %rd548;
	add.s64 	%rd551, %rd549, %rd301;
	add.s64 	%rd39, %rd551, 512;
	mov.u32 	%r7937, %r7779;
	mov.u32 	%r7938, %r7780;
	mov.u32 	%r7939, %r7781;
	mov.u32 	%r7941, %r7783;
	@%p282 bra 	$L__BB0_788;

	ld.global.v4.u32 	{%r7938, %r7937, %r7941, %r7939}, [%rd39+-512];

$L__BB0_788:
	ld.global.v4.u32 	{%r7925, %r7923, %r7926, %r7924}, [%rd39];
	ld.global.v4.u32 	{%r7932, %r7931, %r7930, %r7929}, [%rd39+512];
	ld.global.v4.u32 	{%r7776, %r7775, %r7778, %r7777}, [%rd39+1024];

$L__BB0_789:
	mov.u32 	%r7940, %r7782;
	mov.u32 	%r7942, %r7784;
	mov.u32 	%r7943, %r7785;
	mov.u32 	%r7944, %r7786;
	mov.u32 	%r7945, %r7787;
	mov.u32 	%r7946, %r7788;
	mov.u32 	%r7947, %r7789;
	mov.u32 	%r7948, %r7790;
	@%p287 bra 	$L__BB0_791;

	mad.lo.s32 	%r5583, %r660, %r1732, %r43;
	mad.lo.s32 	%r5589, %r2601, 384, %r73;
	mad.lo.s32 	%r5590, %r5583, %r1811, %r5589;
	mad.lo.s32 	%r5593, %r1813, %r72, %r5590;
	mul.wide.s32 	%rd552, %r5593, 4;
	add.s64 	%rd553, %rd38, %rd552;
	add.s64 	%rd555, %rd553, %rd301;
	ld.global.v4.u32 	{%r7792, %r7791, %r7794, %r7793}, [%rd555];
	ld.global.v4.u32 	{%r7948, %r7946, %r7944, %r7943}, [%rd555+512];
	ld.global.v4.u32 	{%r7947, %r7945, %r7942, %r7940}, [%rd555+1024];
	ld.global.v4.u32 	{%r7938, %r7937, %r7941, %r7939}, [%rd555+1536];

$L__BB0_791:
	neg.s32 	%r7367, %r1735;
	not.b32 	%r7366, %r44;
	add.s32 	%r7365, %r1733, %r7366;
	mul.lo.s32 	%r7364, %r7365, %r1734;
	not.b32 	%r7363, %r43;
	add.s32 	%r7362, %r1732, %r7363;
	mad.lo.s32 	%r5617, %r7362, %r1734, %r7364;
	add.s32 	%r5618, %r5617, %r1735;
	add.s32 	%r5627, %r5618, %r2607;
	add.s32 	%r1466, %r7646, 1;
	add.s32 	%r5628, %r1466, %r5627;
	div.s32 	%r5629, %r5628, %r1735;
	mad.lo.s32 	%r1467, %r5629, %r7367, %r5628;
	mad.lo.s32 	%r5636, %r5629, %r48, %r2618;
	ld.param.u64 	%rd556, [%rd1+120];
	cvta.to.global.u64 	%rd557, %rd556;
	rem.s32 	%r5637, %r5636, %r1736;
	shr.u32 	%r5638, %r5637, 31;
	add.s32 	%r5639, %r5637, %r5638;
	shr.s32 	%r5640, %r5639, 1;
	mad.lo.s32 	%r5641, %r5640, %r1735, %r1467;
	shl.b32 	%r5642, %r5641, 5;
	add.s32 	%r5643, %r5642, %r46;
	cvt.s64.s32 	%rd40, %r5643;
	mul.wide.s32 	%rd558, %r5643, 4;
	add.s64 	%rd559, %rd557, %rd558;
	ld.global.u32 	%r7648, [%rd559];
	ld.param.u64 	%rd560, [%rd1+128];
	cvta.to.global.u64 	%rd41, %rd560;
	@%p142 bra 	$L__BB0_793;
	bra.uni 	$L__BB0_792;

$L__BB0_793:
	shl.b64 	%rd563, %rd40, 2;
	add.s64 	%rd564, %rd41, %rd563;
	ld.global.u32 	%r7647, [%rd564];
	bra.uni 	$L__BB0_794;

$L__BB0_792:
	shl.b32 	%r5644, %r1467, 5;
	add.s32 	%r5645, %r5644, %r46;
	mul.wide.s32 	%rd561, %r5645, 16;
	add.s64 	%rd562, %rd41, %rd561;
	ld.global.v4.u32 	{%r5646, %r5647, %r5648, %r5649}, [%rd562];
	mov.u32 	%r7478, %r7482;
	mov.u32 	%r7479, %r7483;
	mov.u32 	%r7480, %r7484;
	mov.u32 	%r7481, %r7485;
	mov.u32 	%r7482, %r7486;
	mov.u32 	%r7483, %r7487;
	mov.u32 	%r7484, %r7488;
	mov.u32 	%r7485, %r7489;
	mov.u32 	%r7486, %r5649;
	mov.u32 	%r7487, %r5648;
	mov.u32 	%r7488, %r5647;
	mov.u32 	%r7489, %r5646;

$L__BB0_794:
	mov.f32 	%f563, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5650, {low,high};}

	// end inline asm
	selp.b32 	%r5652, %r7473, %r5650, %p28;
	// begin inline asm
	{mul.f16x2 %r5651,%r5652,%r7616;
}
	// end inline asm
	selp.b32 	%r5655, %r7477, %r5650, %p28;
	// begin inline asm
	{mul.f16x2 %r5654,%r5655,%r7609;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5657, {low,high};}

	// end inline asm
	selp.b32 	%r5659, %r7473, %r5657, %p28;
	// begin inline asm
	{mul.f16x2 %r5658,%r5659,%r7597;
}
	// end inline asm
	selp.b32 	%r5662, %r7477, %r5657, %p28;
	// begin inline asm
	{mul.f16x2 %r5661,%r5662,%r7592;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5664, {low,high};}

	// end inline asm
	selp.b32 	%r5666, %r7473, %r5664, %p28;
	// begin inline asm
	{mul.f16x2 %r5665,%r5666,%r7584;
}
	// end inline asm
	selp.b32 	%r5669, %r7477, %r5664, %p28;
	// begin inline asm
	{mul.f16x2 %r5668,%r5669,%r7583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5671, {low,high};}

	// end inline asm
	selp.b32 	%r5673, %r7473, %r5671, %p28;
	// begin inline asm
	{mul.f16x2 %r5672,%r5673,%r7588;
}
	// end inline asm
	selp.b32 	%r5676, %r7477, %r5671, %p28;
	// begin inline asm
	{mul.f16x2 %r5675,%r5676,%r7587;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5678, {low,high};}

	// end inline asm
	selp.b32 	%r5680, %r7473, %r5678, %p28;
	// begin inline asm
	{mul.f16x2 %r5679,%r5680,%r7586;
}
	// end inline asm
	selp.b32 	%r5683, %r7477, %r5678, %p28;
	// begin inline asm
	{mul.f16x2 %r5682,%r5683,%r7580;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5685, {low,high};}

	// end inline asm
	selp.b32 	%r5687, %r7473, %r5685, %p28;
	// begin inline asm
	{mul.f16x2 %r5686,%r5687,%r7576;
}
	// end inline asm
	selp.b32 	%r5690, %r7477, %r5685, %p28;
	// begin inline asm
	{mul.f16x2 %r5689,%r5690,%r7575;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5692, {low,high};}

	// end inline asm
	selp.b32 	%r5694, %r7473, %r5692, %p28;
	// begin inline asm
	{mul.f16x2 %r5693,%r5694,%r7574;
}
	// end inline asm
	selp.b32 	%r5697, %r7477, %r5692, %p28;
	// begin inline asm
	{mul.f16x2 %r5696,%r5697,%r7568;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5699, {low,high};}

	// end inline asm
	selp.b32 	%r5701, %r7473, %r5699, %p28;
	// begin inline asm
	{mul.f16x2 %r5700,%r5701,%r7561;
}
	// end inline asm
	selp.b32 	%r5704, %r7477, %r5699, %p28;
	// begin inline asm
	{mul.f16x2 %r5703,%r5704,%r7560;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5706, {low,high};}

	// end inline asm
	selp.b32 	%r5708, %r7473, %r5706, %p28;
	// begin inline asm
	{mul.f16x2 %r5707,%r5708,%r7790;
}
	// end inline asm
	selp.b32 	%r5711, %r7477, %r5706, %p28;
	// begin inline asm
	{mul.f16x2 %r5710,%r5711,%r7788;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5713, {low,high};}

	// end inline asm
	selp.b32 	%r5715, %r7473, %r5713, %p28;
	// begin inline asm
	{mul.f16x2 %r5714,%r5715,%r7789;
}
	// end inline asm
	selp.b32 	%r5718, %r7477, %r5713, %p28;
	// begin inline asm
	{mul.f16x2 %r5717,%r5718,%r7787;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5720, {low,high};}

	// end inline asm
	selp.b32 	%r5722, %r7473, %r5720, %p28;
	// begin inline asm
	{mul.f16x2 %r5721,%r5722,%r7553;
}
	// end inline asm
	selp.b32 	%r5725, %r7477, %r5720, %p28;
	// begin inline asm
	{mul.f16x2 %r5724,%r5725,%r7552;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5727, {low,high};}

	// end inline asm
	selp.b32 	%r5729, %r7473, %r5727, %p28;
	// begin inline asm
	{mul.f16x2 %r5728,%r5729,%r7557;
}
	// end inline asm
	selp.b32 	%r5732, %r7477, %r5727, %p28;
	// begin inline asm
	{mul.f16x2 %r5731,%r5732,%r7556;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5734, {low,high};}

	// end inline asm
	selp.b32 	%r5736, %r7473, %r5734, %p28;
	// begin inline asm
	{mul.f16x2 %r5735,%r5736,%r7555;
}
	// end inline asm
	selp.b32 	%r5739, %r7477, %r5734, %p28;
	// begin inline asm
	{mul.f16x2 %r5738,%r5739,%r7550;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5741, {low,high};}

	// end inline asm
	selp.b32 	%r5743, %r7473, %r5741, %p28;
	// begin inline asm
	{mul.f16x2 %r5742,%r5743,%r7545;
}
	// end inline asm
	selp.b32 	%r5746, %r7477, %r5741, %p28;
	// begin inline asm
	{mul.f16x2 %r5745,%r5746,%r7544;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5748, {low,high};}

	// end inline asm
	selp.b32 	%r5750, %r7473, %r5748, %p28;
	// begin inline asm
	{mul.f16x2 %r5749,%r5750,%r7547;
}
	// end inline asm
	selp.b32 	%r5753, %r7477, %r5748, %p28;
	// begin inline asm
	{mul.f16x2 %r5752,%r5753,%r7546;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5755, {low,high};}

	// end inline asm
	selp.b32 	%r5757, %r7473, %r5755, %p28;
	// begin inline asm
	{mul.f16x2 %r5756,%r5757,%r7774;
}
	// end inline asm
	selp.b32 	%r5760, %r7477, %r5755, %p28;
	// begin inline asm
	{mul.f16x2 %r5759,%r5760,%r7773;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5762, {low,high};}

	// end inline asm
	selp.b32 	%r5764, %r7473, %r5762, %p28;
	// begin inline asm
	{mul.f16x2 %r5763,%r5764,%r7772;
}
	// end inline asm
	selp.b32 	%r5767, %r7477, %r5762, %p28;
	// begin inline asm
	{mul.f16x2 %r5766,%r5767,%r7771;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5769, {low,high};}

	// end inline asm
	selp.b32 	%r5771, %r7473, %r5769, %p28;
	// begin inline asm
	{mul.f16x2 %r5770,%r5771,%r7786;
}
	// end inline asm
	selp.b32 	%r5774, %r7477, %r5769, %p28;
	// begin inline asm
	{mul.f16x2 %r5773,%r5774,%r7785;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5776, {low,high};}

	// end inline asm
	selp.b32 	%r5778, %r7473, %r5776, %p28;
	// begin inline asm
	{mul.f16x2 %r5777,%r5778,%r7539;
}
	// end inline asm
	selp.b32 	%r5781, %r7477, %r5776, %p28;
	// begin inline asm
	{mul.f16x2 %r5780,%r5781,%r7538;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5783, {low,high};}

	// end inline asm
	selp.b32 	%r5785, %r7473, %r5783, %p28;
	// begin inline asm
	{mul.f16x2 %r5784,%r5785,%r7784;
}
	// end inline asm
	selp.b32 	%r5788, %r7477, %r5783, %p28;
	// begin inline asm
	{mul.f16x2 %r5787,%r5788,%r7782;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5790, {low,high};}

	// end inline asm
	selp.b32 	%r5792, %r7473, %r5790, %p28;
	// begin inline asm
	{mul.f16x2 %r5791,%r5792,%r7783;
}
	// end inline asm
	selp.b32 	%r5795, %r7477, %r5790, %p28;
	// begin inline asm
	{mul.f16x2 %r5794,%r5795,%r7781;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5797, {low,high};}

	// end inline asm
	selp.b32 	%r5799, %r7473, %r5797, %p28;
	// begin inline asm
	{mul.f16x2 %r5798,%r5799,%r7770;
}
	// end inline asm
	selp.b32 	%r5802, %r7477, %r5797, %p28;
	// begin inline asm
	{mul.f16x2 %r5801,%r5802,%r7768;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5804, {low,high};}

	// end inline asm
	selp.b32 	%r5806, %r7473, %r5804, %p28;
	// begin inline asm
	{mul.f16x2 %r5805,%r5806,%r7769;
}
	// end inline asm
	selp.b32 	%r5809, %r7477, %r5804, %p28;
	// begin inline asm
	{mul.f16x2 %r5808,%r5809,%r7767;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5811, {low,high};}

	// end inline asm
	selp.b32 	%r5813, %r7473, %r5811, %p28;
	// begin inline asm
	{mul.f16x2 %r5812,%r5813,%r7780;
}
	// end inline asm
	selp.b32 	%r5816, %r7477, %r5811, %p28;
	// begin inline asm
	{mul.f16x2 %r5815,%r5816,%r7779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r7643,%r3719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5821,%r3830,%r3676;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5824,%r5818,%r5821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5827,%r7387,%r5824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5830,%r5651,%r5827;
}
	// end inline asm
	selp.b32 	%r7611, %r5651, %r5830, %p28;
	// begin inline asm
	{sub.f16x2 %r5833,%r7642,%r3785;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r3864,%r3753;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5839,%r5833,%r5836;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5842,%r7387,%r5839;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5845,%r5654,%r5842;
}
	// end inline asm
	selp.b32 	%r7606, %r5654, %r5845, %p28;
	// begin inline asm
	{sub.f16x2 %r5848,%r7639,%r3952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r7645,%r3909;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5854,%r5848,%r5851;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5857,%r7387,%r5854;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5860,%r5658,%r5857;
}
	// end inline asm
	selp.b32 	%r7615, %r5658, %r5860, %p28;
	// begin inline asm
	{sub.f16x2 %r5863,%r7638,%r4018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5866,%r7644,%r3986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5869,%r5863,%r5866;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5872,%r7387,%r5869;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5875,%r5661,%r5872;
}
	// end inline asm
	selp.b32 	%r7608, %r5661, %r5875, %p28;
	// begin inline asm
	{sub.f16x2 %r5878,%r7642,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5881,%r7472,%r5878;
}
	// end inline asm
	@%p28 bra 	$L__BB0_796;
	bra.uni 	$L__BB0_795;

$L__BB0_796:
	// begin inline asm
	{neg.f16x2 %r7966,%r5665;
}
	// end inline asm
	bra.uni 	$L__BB0_797;

$L__BB0_795:
	// begin inline asm
	{mul.f16x2 %r7966,%r7473,%r5878;
}
	// end inline asm

$L__BB0_797:
	mov.u32 	%r5892, 31;
	mov.u32 	%r5894, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5890,%r7966,%r5892,%r2304,%r5894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5895,%r5881,%r5890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5898,%r1199,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5901,%r5898,%r5895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5904,%r7387,%r5901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7613,%r5665,%r5904;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5910,%r7644,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5913,%r7472,%r5910;
}
	// end inline asm
	mov.u32 	%r7967, %r5672;
	@%p28 bra 	$L__BB0_799;

	// begin inline asm
	{mul.f16x2 %r7967,%r7473,%r5910;
}
	// end inline asm

$L__BB0_799:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5922,%r7967,%r5892,%r2304,%r5894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5927,%r5913,%r5922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5930,%r7633,%r1175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5933,%r5927,%r5930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5936,%r7387,%r5933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7618,%r5672,%r5936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5942,%r7635,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5945,%r7641,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5948,%r5942,%r5945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5951,%r7387,%r5948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5954,%r5679,%r5951;
}
	// end inline asm
	selp.b32 	%r7616, %r5679, %r5954, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5959,%r7643,%r439,%r2304,%r5894;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5959;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5965, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5966,%r5965,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5969,%r7476,%r5966;
}
	// end inline asm
	@%p28 bra 	$L__BB0_801;
	bra.uni 	$L__BB0_800;

$L__BB0_801:
	// begin inline asm
	{neg.f16x2 %r7968,%r5668;
}
	// end inline asm
	bra.uni 	$L__BB0_802;

$L__BB0_800:
	// begin inline asm
	{mul.f16x2 %r7968,%r7477,%r5966;
}
	// end inline asm

$L__BB0_802:
	mov.u32 	%r5984, 31;
	mov.u32 	%r6008, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5982,%r7968,%r5984,%r2304,%r6008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5987,%r5969,%r5982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5990,%r1211,%r1187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5993,%r5990,%r5987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5996,%r7387,%r5993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r5668,%r5996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6004,%r7645,%r439,%r2304,%r6008;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6004;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6010, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6011,%r6010,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6014,%r7476,%r6011;
}
	// end inline asm
	mov.u32 	%r7969, %r5675;
	@%p28 bra 	$L__BB0_804;

	// begin inline asm
	{mul.f16x2 %r7969,%r7477,%r6011;
}
	// end inline asm

$L__BB0_804:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6025,%r7969,%r5984,%r2304,%r6008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6030,%r6014,%r6025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r7632,%r1187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r6030,%r6033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6039,%r7387,%r6036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7617,%r5675,%r6039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6045,%r7634,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6048,%r7640,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6051,%r6045,%r6048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6054,%r7387,%r6051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6057,%r5682,%r6054;
}
	// end inline asm
	selp.b32 	%r7609, %r5682, %r6057, %p28;
	// begin inline asm
	{sub.f16x2 %r6060,%r7640,%r7641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6063,%r7472,%r6060;
}
	// end inline asm
	mov.u32 	%r7970, %r5686;
	@%p28 bra 	$L__BB0_806;

	// begin inline asm
	{mul.f16x2 %r7970,%r7473,%r6060;
}
	// end inline asm

$L__BB0_806:
	mov.u32 	%r6074, 31;
	mov.u32 	%r6113, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6072,%r7970,%r6074,%r2304,%r6113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6077,%r6063,%r6072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6080,%r7627,%r1199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6083,%r6077,%r6080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6086,%r7387,%r6083;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7604,%r5686,%r6086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r7629,%r4290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6095,%r4431,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6098,%r6092,%r6095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6101,%r7387,%r6098;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6104,%r5693,%r6101;
}
	// end inline asm
	selp.b32 	%r7602, %r5693, %r6104, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7641;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6109,%r7641,%r439,%r2304,%r6113;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6109;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6115, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6116,%r6115,%r7640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6119,%r7476,%r6116;
}
	// end inline asm
	mov.u32 	%r7971, %r5689;
	@%p28 bra 	$L__BB0_808;

	// begin inline asm
	{mul.f16x2 %r7971,%r7477,%r6116;
}
	// end inline asm

$L__BB0_808:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6130,%r7971,%r6074,%r2304,%r6113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6135,%r6119,%r6130;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6138,%r7626,%r1211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6141,%r6135,%r6138;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6144,%r7387,%r6141;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7603,%r5689,%r6144;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6150,%r7628,%r4371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6153,%r4465,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6156,%r6150,%r6153;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6159,%r7387,%r6156;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6162,%r5696,%r6159;
}
	// end inline asm
	selp.b32 	%r7600, %r5696, %r6162, %p28;
	// begin inline asm
	{sub.f16x2 %r6165,%r7638,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6168,%r7472,%r6165;
}
	// end inline asm
	@%p28 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7972,%r5700;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7972,%r7473,%r6165;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6181, 31;
	mov.u32 	%r6183, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6179,%r7972,%r6181,%r2304,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6184,%r6168,%r6179;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r7633,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6190,%r6187,%r6184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6193,%r7387,%r6190;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7594,%r5700,%r6193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6199,%r7821,%r7822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6202,%r7472,%r6199;
}
	// end inline asm
	mov.u32 	%r7973, %r5707;
	@%p28 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7973,%r7473,%r6199;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6211,%r7973,%r6181,%r2304,%r6183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6216,%r6202,%r6211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r7819,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6222,%r6216,%r6219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6225,%r7387,%r6222;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7599,%r5707,%r6225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6231,%r7820,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6234,%r7637,%r7822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6237,%r6231,%r6234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6240,%r7387,%r6237;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6243,%r5714,%r6240;
}
	// end inline asm
	selp.b32 	%r7597, %r5714, %r6243, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7639;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6248,%r7639,%r439,%r2304,%r6183;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6248;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6254, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6255,%r6254,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6258,%r7476,%r6255;
}
	// end inline asm
	@%p28 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7974,%r5703;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7974,%r7477,%r6255;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6273, 31;
	mov.u32 	%r6297, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6271,%r7974,%r6273,%r2304,%r6297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6276,%r6258,%r6271;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r7632,%r1235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6282,%r6279,%r6276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6285,%r7387,%r6282;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7593,%r5703,%r6285;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7822;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6293,%r7822,%r439,%r2304,%r6297;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6293;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6299, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6300,%r6299,%r7821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6303,%r7476,%r6300;
}
	// end inline asm
	mov.u32 	%r7975, %r5710;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7975,%r7477,%r6300;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6314,%r7975,%r6273,%r2304,%r6297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6319,%r6303,%r6314;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6322,%r7817,%r1235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6325,%r6319,%r6322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6328,%r7387,%r6325;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7598,%r5710,%r6328;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6334,%r7818,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6337,%r7636,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6340,%r6334,%r6337;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6343,%r7387,%r6340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6346,%r5717,%r6343;
}
	// end inline asm
	selp.b32 	%r7592, %r5717, %r6346, %p28;
	// begin inline asm
	{sub.f16x2 %r6349,%r7634,%r7635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6352,%r7472,%r6349;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7976,%r5721;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7976,%r7473,%r6349;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6365, 31;
	mov.u32 	%r6367, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6363,%r7976,%r6365,%r2304,%r6367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6368,%r6352,%r6363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6371,%r7627,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6374,%r6371,%r6368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6377,%r7387,%r6374;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7584,%r5721,%r6377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6383,%r7636,%r7637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6386,%r7472,%r6383;
}
	// end inline asm
	mov.u32 	%r7977, %r5728;
	@%p28 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7977,%r7473,%r6383;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6395,%r7977,%r6365,%r2304,%r6367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6400,%r6386,%r6395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6403,%r7623,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6406,%r6400,%r6403;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6409,%r7387,%r6406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7588,%r5728,%r6409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6415,%r7625,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6418,%r7631,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6421,%r6415,%r6418;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6424,%r7387,%r6421;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6427,%r5735,%r6424;
}
	// end inline asm
	selp.b32 	%r7586, %r5735, %r6427, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7635;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6432,%r7635,%r439,%r2304,%r6367;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6432;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6438, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r6438,%r7634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6442,%r7476,%r6439;
}
	// end inline asm
	@%p28 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7978,%r5724;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7978,%r7477,%r6439;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6457, 31;
	mov.u32 	%r6481, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6455,%r7978,%r6457,%r2304,%r6481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r6442,%r6455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6463,%r7626,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6466,%r6463,%r6460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6469,%r7387,%r6466;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r5724,%r6469;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7637;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6477,%r7637,%r439,%r2304,%r6481;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6477;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6483, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6484,%r6483,%r7636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6487,%r7476,%r6484;
}
	// end inline asm
	mov.u32 	%r7979, %r5731;
	@%p28 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7979,%r7477,%r6484;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6498,%r7979,%r6457,%r2304,%r6481;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6487,%r6498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r7622,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6509,%r6503,%r6506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6512,%r7387,%r6509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7587,%r5731,%r6512;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6518,%r7624,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6521,%r7630,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6524,%r6518,%r6521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6527,%r7387,%r6524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6530,%r5738,%r6527;
}
	// end inline asm
	selp.b32 	%r7580, %r5738, %r6530, %p28;
	// begin inline asm
	{sub.f16x2 %r6533,%r7628,%r7629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6536,%r7472,%r6533;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7980,%r5742;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7980,%r7473,%r6533;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6549, 31;
	mov.u32 	%r6551, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6547,%r7980,%r6549,%r2304,%r6551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6552,%r6536,%r6547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6555,%r1284,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r6555,%r6552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6561,%r7387,%r6558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r5742,%r6561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6567,%r7630,%r7631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6570,%r7472,%r6567;
}
	// end inline asm
	mov.u32 	%r7981, %r5749;
	@%p28 bra 	$L__BB0_833;

	// begin inline asm
	{mul.f16x2 %r7981,%r7473,%r6567;
}
	// end inline asm

$L__BB0_833:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6579,%r7981,%r6549,%r2304,%r6551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6584,%r6570,%r6579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6587,%r7621,%r7627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6590,%r6584,%r6587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6593,%r7387,%r6590;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7576,%r5749,%r6593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6599,%r7805,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6602,%r7808,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6605,%r6599,%r6602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6608,%r7387,%r6605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6611,%r5756,%r6608;
}
	// end inline asm
	selp.b32 	%r7574, %r5756, %r6611, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7629;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6616,%r7629,%r439,%r2304,%r6551;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6616;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6622, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6623,%r6622,%r7628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6626,%r7476,%r6623;
}
	// end inline asm
	@%p28 bra 	$L__BB0_835;
	bra.uni 	$L__BB0_834;

$L__BB0_835:
	// begin inline asm
	{neg.f16x2 %r7982,%r5745;
}
	// end inline asm
	bra.uni 	$L__BB0_836;

$L__BB0_834:
	// begin inline asm
	{mul.f16x2 %r7982,%r7477,%r6623;
}
	// end inline asm

$L__BB0_836:
	mov.u32 	%r6641, 31;
	mov.u32 	%r6665, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6639,%r7982,%r6641,%r2304,%r6665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6644,%r6626,%r6639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6647,%r1285,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6650,%r6647,%r6644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6653,%r7387,%r6650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7571,%r5745,%r6653;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7631;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6661,%r7631,%r439,%r2304,%r6665;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6661;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6667, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6668,%r6667,%r7630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6671,%r7476,%r6668;
}
	// end inline asm
	mov.u32 	%r7983, %r5752;
	@%p28 bra 	$L__BB0_838;

	// begin inline asm
	{mul.f16x2 %r7983,%r7477,%r6668;
}
	// end inline asm

$L__BB0_838:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6682,%r7983,%r6641,%r2304,%r6665;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6687,%r6671,%r6682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6690,%r7620,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6693,%r6687,%r6690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6696,%r7387,%r6693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7575,%r5752,%r6696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6702,%r7803,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6705,%r7807,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6708,%r6702,%r6705;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6711,%r7387,%r6708;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6714,%r5759,%r6711;
}
	// end inline asm
	selp.b32 	%r7568, %r5759, %r6714, %p28;
	// begin inline asm
	{sub.f16x2 %r6717,%r7807,%r7808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6720,%r7472,%r6717;
}
	// end inline asm
	mov.u32 	%r7984, %r5763;
	@%p28 bra 	$L__BB0_840;

	// begin inline asm
	{mul.f16x2 %r7984,%r7473,%r6717;
}
	// end inline asm

$L__BB0_840:
	mov.u32 	%r6731, 31;
	mov.u32 	%r6755, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6729,%r7984,%r6731,%r2304,%r6755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6734,%r6720,%r6729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6737,%r7802,%r1284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6740,%r6734,%r6737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6743,%r7387,%r6740;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r5763,%r6743;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7808;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6751,%r7808,%r439,%r2304,%r6755;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6751;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6757, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6758,%r6757,%r7807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6761,%r7476,%r6758;
}
	// end inline asm
	mov.u32 	%r7985, %r5766;
	@%p28 bra 	$L__BB0_842;

	// begin inline asm
	{mul.f16x2 %r7985,%r7477,%r6758;
}
	// end inline asm

$L__BB0_842:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6772,%r7985,%r6731,%r2304,%r6755;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6777,%r6761,%r6772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6780,%r7801,%r1285;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6783,%r6777,%r6780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6786,%r7387,%r6783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r5766,%r6786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6792,%r7818,%r7820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6795,%r7472,%r6792;
}
	// end inline asm
	@%p28 bra 	$L__BB0_844;
	bra.uni 	$L__BB0_843;

$L__BB0_844:
	// begin inline asm
	{neg.f16x2 %r7986,%r5770;
}
	// end inline asm
	bra.uni 	$L__BB0_845;

$L__BB0_843:
	// begin inline asm
	{mul.f16x2 %r7986,%r7473,%r6792;
}
	// end inline asm

$L__BB0_845:
	mov.u32 	%r6808, 31;
	mov.u32 	%r6832, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6806,%r7986,%r6808,%r2304,%r6832;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6811,%r6795,%r6806;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6814,%r7623,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6817,%r6814,%r6811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6820,%r7387,%r6817;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r5770,%r6820;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7820;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6828,%r7820,%r439,%r2304,%r6832;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6828;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6834, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6835,%r6834,%r7818;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6838,%r7476,%r6835;
}
	// end inline asm
	@%p28 bra 	$L__BB0_847;
	bra.uni 	$L__BB0_846;

$L__BB0_847:
	// begin inline asm
	{neg.f16x2 %r7987,%r5773;
}
	// end inline asm
	bra.uni 	$L__BB0_848;

$L__BB0_846:
	// begin inline asm
	{mul.f16x2 %r7987,%r7477,%r6835;
}
	// end inline asm

$L__BB0_848:
	mov.u32 	%r6853, 31;
	mov.u32 	%r6855, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6851,%r7987,%r6853,%r2304,%r6855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6856,%r6838,%r6851;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6859,%r7622,%r7817;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6862,%r6859,%r6856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6865,%r7387,%r6862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r5773,%r6865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6871,%r7624,%r7625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6874,%r7472,%r6871;
}
	// end inline asm
	@%p28 bra 	$L__BB0_850;
	bra.uni 	$L__BB0_849;

$L__BB0_850:
	// begin inline asm
	{neg.f16x2 %r7988,%r5777;
}
	// end inline asm
	bra.uni 	$L__BB0_851;

$L__BB0_849:
	// begin inline asm
	{mul.f16x2 %r7988,%r7473,%r6871;
}
	// end inline asm

$L__BB0_851:
	mov.u32 	%r6887, 31;
	mov.u32 	%r6889, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6885,%r7988,%r6887,%r2304,%r6889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6890,%r6874,%r6885;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6893,%r7621,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6896,%r6893,%r6890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6899,%r7387,%r6896;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r5777,%r6899;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6905,%r7815,%r7816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6908,%r7472,%r6905;
}
	// end inline asm
	mov.u32 	%r7989, %r5784;
	@%p28 bra 	$L__BB0_853;

	// begin inline asm
	{mul.f16x2 %r7989,%r7473,%r6905;
}
	// end inline asm

$L__BB0_853:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6917,%r7989,%r6887,%r2304,%r6889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6922,%r6908,%r6917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6925,%r7813,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6928,%r6922,%r6925;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6931,%r7387,%r6928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7557,%r5784,%r6931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6937,%r7800,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6940,%r7806,%r7816;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6943,%r6937,%r6940;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6946,%r7387,%r6943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6949,%r5791,%r6946;
}
	// end inline asm
	selp.b32 	%r7555, %r5791, %r6949, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7625;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6954,%r7625,%r439,%r2304,%r6889;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6954;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6960, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6961,%r6960,%r7624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6964,%r7476,%r6961;
}
	// end inline asm
	@%p28 bra 	$L__BB0_855;
	bra.uni 	$L__BB0_854;

$L__BB0_855:
	// begin inline asm
	{neg.f16x2 %r7990,%r5780;
}
	// end inline asm
	bra.uni 	$L__BB0_856;

$L__BB0_854:
	// begin inline asm
	{mul.f16x2 %r7990,%r7477,%r6961;
}
	// end inline asm

$L__BB0_856:
	mov.u32 	%r6979, 31;
	mov.u32 	%r7003, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6977,%r7990,%r6979,%r2304,%r7003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6982,%r6964,%r6977;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6985,%r7620,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6988,%r6985,%r6982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6991,%r7387,%r6988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r5780,%r6991;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7816;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6999,%r7816,%r439,%r2304,%r7003;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6999;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7005, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7006,%r7005,%r7815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7009,%r7476,%r7006;
}
	// end inline asm
	mov.u32 	%r7991, %r5787;
	@%p28 bra 	$L__BB0_858;

	// begin inline asm
	{mul.f16x2 %r7991,%r7477,%r7006;
}
	// end inline asm

$L__BB0_858:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7020,%r7991,%r6979,%r2304,%r7003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7025,%r7009,%r7020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7028,%r7811,%r7622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7031,%r7025,%r7028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7034,%r7387,%r7031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7556,%r5787,%r7034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7040,%r7799,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7043,%r7804,%r7815;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7046,%r7040,%r7043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7049,%r7387,%r7046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7052,%r5794,%r7049;
}
	// end inline asm
	selp.b32 	%r7550, %r5794, %r7052, %p28;
	// begin inline asm
	{sub.f16x2 %r7055,%r7803,%r7805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7058,%r7472,%r7055;
}
	// end inline asm
	@%p28 bra 	$L__BB0_860;
	bra.uni 	$L__BB0_859;

$L__BB0_860:
	// begin inline asm
	{neg.f16x2 %r7992,%r5798;
}
	// end inline asm
	bra.uni 	$L__BB0_861;

$L__BB0_859:
	// begin inline asm
	{mul.f16x2 %r7992,%r7473,%r7055;
}
	// end inline asm

$L__BB0_861:
	mov.u32 	%r7071, 31;
	mov.u32 	%r7073, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7069,%r7992,%r7071,%r2304,%r7073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7074,%r7058,%r7069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7077,%r7802,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7080,%r7077,%r7074;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7083,%r7387,%r7080;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7545,%r5798,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7089,%r7804,%r7806;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7092,%r7472,%r7089;
}
	// end inline asm
	mov.u32 	%r7993, %r5805;
	@%p28 bra 	$L__BB0_863;

	// begin inline asm
	{mul.f16x2 %r7993,%r7473,%r7089;
}
	// end inline asm

$L__BB0_863:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7101,%r7993,%r7071,%r2304,%r7073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7092,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7109,%r7798,%r7621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7112,%r7106,%r7109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7115,%r7387,%r7112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r5805,%r7115;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7805;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7123,%r7805,%r439,%r2304,%r7073;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7123;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7129, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7130,%r7129,%r7803;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7133,%r7476,%r7130;
}
	// end inline asm
	@%p28 bra 	$L__BB0_865;
	bra.uni 	$L__BB0_864;

$L__BB0_865:
	// begin inline asm
	{neg.f16x2 %r7994,%r5801;
}
	// end inline asm
	bra.uni 	$L__BB0_866;

$L__BB0_864:
	// begin inline asm
	{mul.f16x2 %r7994,%r7477,%r7130;
}
	// end inline asm

$L__BB0_866:
	mov.u32 	%r7148, 31;
	mov.u32 	%r7172, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7146,%r7994,%r7148,%r2304,%r7172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7151,%r7133,%r7146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7154,%r7801,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7157,%r7154,%r7151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7160,%r7387,%r7157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7544,%r5801,%r7160;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7806;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7168,%r7806,%r439,%r2304,%r7172;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7168;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7174, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7175,%r7174,%r7804;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7178,%r7476,%r7175;
}
	// end inline asm
	mov.u32 	%r7995, %r5808;
	@%p28 bra 	$L__BB0_868;

	// begin inline asm
	{mul.f16x2 %r7995,%r7477,%r7175;
}
	// end inline asm

$L__BB0_868:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7189,%r7995,%r7148,%r2304,%r7172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7194,%r7178,%r7189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7197,%r7797,%r7620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7200,%r7194,%r7197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7203,%r7387,%r7200;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r5808,%r7203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7209,%r7799,%r7800;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7212,%r7472,%r7209;
}
	// end inline asm
	@%p28 bra 	$L__BB0_870;
	bra.uni 	$L__BB0_869;

$L__BB0_870:
	// begin inline asm
	{neg.f16x2 %r7996,%r5812;
}
	// end inline asm
	bra.uni 	$L__BB0_871;

$L__BB0_869:
	// begin inline asm
	{mul.f16x2 %r7996,%r7473,%r7209;
}
	// end inline asm

$L__BB0_871:
	mov.u32 	%r7225, 31;
	mov.u32 	%r7249, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7223,%r7996,%r7225,%r2304,%r7249;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7228,%r7212,%r7223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7231,%r7798,%r7813;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7234,%r7231,%r7228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7237,%r7387,%r7234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7539,%r5812,%r7237;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7800;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7245,%r7800,%r439,%r2304,%r7249;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7245;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7251, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7252,%r7251,%r7799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7255,%r7476,%r7252;
}
	// end inline asm
	@%p28 bra 	$L__BB0_873;
	bra.uni 	$L__BB0_872;

$L__BB0_873:
	// begin inline asm
	{neg.f16x2 %r7997,%r5815;
}
	// end inline asm
	bra.uni 	$L__BB0_874;

$L__BB0_872:
	// begin inline asm
	{mul.f16x2 %r7997,%r7477,%r7252;
}
	// end inline asm

$L__BB0_874:
	mov.u32 	%r7270, 31;
	mov.u32 	%r7272, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7268,%r7997,%r7270,%r2304,%r7272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7273,%r7255,%r7268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7276,%r7797,%r7811;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7279,%r7276,%r7273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7282,%r7387,%r7279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7538,%r5815,%r7282;
}
	// end inline asm
	bar.sync 	0;
	@%p491 bra 	$L__BB0_877;

	setp.ne.s32 	%p554, %r42, %r2201;
	shl.b32 	%r7291, %r42, 8;
	shl.b32 	%r7295, %r1731, 8;
	or.b32  	%r7296, %r7295, 128;
	mad.lo.s32 	%r7297, %r7296, %r41, %r2204;
	add.s32 	%r7298, %r7297, %r7291;
	shl.b32 	%r7299, %r7298, 2;
	mov.u32 	%r7300, _ZN6kernel5shmemE;
	add.s32 	%r7301, %r7300, %r7299;
	shl.b32 	%r7302, %r46, 4;
	add.s32 	%r1723, %r7301, %r7302;
	st.shared.v4.u32 	[%r1723], {%r7599, %r7598, %r7594, %r7593};
	st.shared.v4.u32 	[%r1723+512], {%r7615, %r7608, %r7618, %r7617};
	@%p554 bra 	$L__BB0_877;

	st.shared.v4.u32 	[%r1723+1024], {%r7613, %r7612, %r7611, %r7606};

$L__BB0_877:
	setp.eq.s32 	%p552, %r42, %r2201;
	@%p552 bra 	$L__BB0_879;

	mul.lo.s32 	%r7306, %r2601, 384;
	mad.lo.s32 	%r7307, %r73, %r42, %r7306;
	mad.lo.s32 	%r7310, %r2199, %r2201, %r7307;
	mad.lo.s32 	%r7313, %r2197, %r2196, %r7310;
	shl.b32 	%r7314, %r7313, 2;
	mov.u32 	%r7315, _ZN6kernel5shmemE;
	add.s32 	%r7316, %r7315, %r7314;
	shl.b32 	%r7317, %r46, 4;
	add.s32 	%r7318, %r7316, %r7317;
	st.shared.v4.u32 	[%r7318], {%r7613, %r7612, %r7611, %r7606};
	st.shared.v4.u32 	[%r7318+512], {%r7604, %r7603, %r7572, %r7571};
	st.shared.v4.u32 	[%r7318+1024], {%r7602, %r7600, %r7565, %r7564};

$L__BB0_879:
	setp.ne.s32 	%p553, %r41, %r2196;
	ld.param.u64 	%rd565, [%rd1+104];
	cvta.to.global.u64 	%rd42, %rd565;
	@%p553 bra 	$L__BB0_881;

	mad.lo.s32 	%r7320, %r659, %r1733, %r44;
	mad.lo.s32 	%r7321, %r7320, 768, 384;
	mul.lo.s32 	%r7322, %r7321, %r1731;
	mad.lo.s32 	%r7323, %r42, 384, %r7322;
	add.s32 	%r7324, %r7323, -128;
	mul.wide.s32 	%rd566, %r7324, 4;
	add.s64 	%rd567, %rd42, %rd566;
	add.s64 	%rd569, %rd567, %rd301;
	st.global.v4.u32 	[%rd569+512], {%r7599, %r7598, %r7594, %r7593};
	st.global.v4.u32 	[%rd569+1024], {%r7615, %r7608, %r7618, %r7617};
	st.global.v4.u32 	[%rd569+1536], {%r7613, %r7612, %r7611, %r7606};

$L__BB0_881:
	setp.ne.s32 	%p555, %r42, %r2201;
	@%p555 bra 	$L__BB0_884;

	mad.lo.s32 	%r7326, %r660, %r1732, %r43;
	mad.lo.s32 	%r7332, %r2601, 384, %r73;
	mad.lo.s32 	%r7333, %r7326, %r1811, %r7332;
	mad.lo.s32 	%r7336, %r1813, %r72, %r7333;
	mul.wide.s32 	%rd570, %r7336, 4;
	add.s64 	%rd571, %rd42, %rd570;
	add.s64 	%rd43, %rd571, %rd301;
	st.global.v4.u32 	[%rd43], {%r7613, %r7612, %r7611, %r7606};
	st.global.v4.u32 	[%rd43+512], {%r7604, %r7603, %r7572, %r7571};
	st.global.v4.u32 	[%rd43+1024], {%r7602, %r7600, %r7565, %r7564};
	@%p284 bra 	$L__BB0_884;

	st.global.v4.u32 	[%rd43+1536], {%r7776, %r7775, %r7778, %r7777};

$L__BB0_884:
	rem.s32 	%r7337, %r7646, %r1734;
	setp.eq.s32 	%p546, %r7337, 0;
	@%p546 bra 	$L__BB0_886;

	bar.sync 	0;
	bra.uni 	$L__BB0_893;

$L__BB0_886:
	@%p218 bra 	$L__BB0_888;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_888:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_892;

	membar.gl;
	setp.eq.s32 	%p549, %r433, %r434;
	mov.u32 	%r7352, -2147483647;
	sub.s32 	%r7353, %r7352, %r432;
	selp.b32 	%r7341, %r7353, 1, %p549;
	// begin inline asm
	atom.add.release.gpu.u32 %r7340,[%rd27],%r7341;
	// end inline asm

$L__BB0_890:
	ld.volatile.u32 	%r7354, [%rd27];
	xor.b32  	%r7355, %r7354, %r7340;
	setp.gt.s32 	%p550, %r7355, -1;
	@%p550 bra 	$L__BB0_890;

	// begin inline asm
	ld.acquire.gpu.u32 %r7356,[%rd27];
	// end inline asm

$L__BB0_892:
	bar.sync 	0;

$L__BB0_893:
	setp.lt.s32 	%p551, %r1466, %r49;
	mov.u32 	%r7779, %r7937;
	mov.u32 	%r7780, %r7938;
	mov.u32 	%r7767, %r7923;
	mov.u32 	%r7768, %r7924;
	mov.u32 	%r7769, %r7925;
	mov.u32 	%r7770, %r7926;
	mov.u32 	%r7781, %r7939;
	mov.u32 	%r7782, %r7940;
	mov.u32 	%r7783, %r7941;
	mov.u32 	%r7784, %r7942;
	mov.u32 	%r7785, %r7943;
	mov.u32 	%r7786, %r7944;
	mov.u32 	%r7771, %r7929;
	mov.u32 	%r7772, %r7930;
	mov.u32 	%r7773, %r7931;
	mov.u32 	%r7774, %r7932;
	mov.u32 	%r7787, %r7945;
	mov.u32 	%r7788, %r7946;
	mov.u32 	%r7789, %r7947;
	mov.u32 	%r7790, %r7948;
	mov.u32 	%r7566, %r504;
	mov.u32 	%r7567, %r7845;
	mov.u32 	%r7570, %r505;
	mov.u32 	%r7573, %r7847;
	mov.u32 	%r7578, %r510;
	mov.u32 	%r7582, %r513;
	mov.u32 	%r7590, %r7852;
	mov.u32 	%r7595, %r7854;
	mov.u32 	%r7601, %r531;
	mov.u32 	%r7605, %r539;
	mov.u32 	%r7607, %r541;
	mov.u32 	%r7610, %r543;
	mov.u32 	%r7614, %r547;
	mov.u32 	%r7619, %r551;
	mov.u32 	%r7646, %r1466;
	@%p551 bra 	$L__BB0_332;

$L__BB0_894:
	ret;

}

