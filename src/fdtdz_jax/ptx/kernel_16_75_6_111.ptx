//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<523>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<553>;
	.reg .b32 	%r<8010>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<570>;


	mov.b64 	%rd48, _ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd48;
	ld.param.v2.u32 	{%r1724, %r1725}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1726, %r1727}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1728, %r1729}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1730, %r1731}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1732, %r1733}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1734, %r1735}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1736, %r1737}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1738, %r1739}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1740, %r1741}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1742, %r1743}, [_ZN6kernel16SimulationKernelI7__half2fLi6ELb1ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1744, 32;
	sub.s32 	%r39, %r1744, %r1731;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p17, %r39, %r40;
	add.s32 	%r1745, %r1737, -1;
	mad.lo.s32 	%r1746, %r1745, %r1736, %r1735;
	add.s32 	%r1747, %r1730, %r1729;
	add.s32 	%r1748, %r1747, %r1746;
	add.s32 	%r1749, %r1748, 1;
	mul.lo.s32 	%r1750, %r1724, %r1726;
	shl.b32 	%r41, %r1750, 1;
	shl.b32 	%r1751, %r1750, 2;
	div.s32 	%r1752, %r1749, %r1751;
	add.s32 	%r1753, %r1752, 1;
	mul.lo.s32 	%r1754, %r1753, %r1730;
	mul.lo.s32 	%r1755, %r1725, %r1727;
	shl.b32 	%r42, %r1755, 1;
	div.s32 	%r1756, %r1754, %r42;
	add.s32 	%r1757, %r1756, 1;
	mul.lo.s32 	%r43, %r1757, %r1729;
	@%p17 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r7393, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r7393, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd49, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd49;
	mad.lo.s32 	%r1760, %r1726, %r38, %r37;
	mad.lo.s32 	%r1761, %r1760, %r1725, %r36;
	mul.lo.s32 	%r47, %r1761, %r1724;
	add.s32 	%r1762, %r47, %r35;
	shl.b32 	%r48, %r1762, 5;
	add.s32 	%r7398, %r48, %r40;
	mul.lo.s32 	%r1763, %r1755, %r1750;
	shl.b32 	%r52, %r1763, 5;
	sub.s32 	%r53, %r1739, %r1738;
	mul.lo.s32 	%r1764, %r1737, %r53;
	sub.s32 	%r54, %r1741, %r1740;
	mul.lo.s32 	%r1765, %r1764, %r54;
	sub.s32 	%r55, %r1743, %r1742;
	mul.lo.s32 	%r1766, %r1765, %r55;
	mul.lo.s32 	%r56, %r1766, 3;
	setp.ge.s32 	%p18, %r7398, %r56;
	@%p18 bra 	$L__BB0_10;

	not.b32 	%r1767, %r40;
	add.s32 	%r1768, %r56, %r1767;
	sub.s32 	%r1769, %r1768, %r48;
	mul.lo.s32 	%r1770, %r1755, %r1724;
	mul.lo.s32 	%r1771, %r1770, %r1726;
	shl.b32 	%r57, %r1771, 5;
	div.u32 	%r58, %r1769, %r57;
	add.s32 	%r1772, %r58, 1;
	and.b32  	%r7395, %r1772, 3;
	setp.eq.s32 	%p19, %r7395, 0;
	mov.u32 	%r7396, %r7398;
	@%p19 bra 	$L__BB0_7;

	shl.b32 	%r1773, %r47, 5;
	add.s32 	%r1774, %r40, %r1773;
	shl.b32 	%r1775, %r35, 5;
	add.s32 	%r7396, %r1774, %r1775;
	mul.wide.s32 	%rd50, %r7398, 4;
	add.s64 	%rd567, %rd2, %rd50;
	mul.wide.s32 	%rd4, %r57, 4;

$L__BB0_6:
	.pragma "nounroll";
	mov.u32 	%r1776, 0;
	st.global.u32 	[%rd567], %r1776;
	add.s32 	%r7396, %r7396, %r57;
	add.s64 	%rd567, %rd567, %rd4;
	add.s32 	%r7395, %r7395, -1;
	setp.ne.s32 	%p20, %r7395, 0;
	@%p20 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p21, %r58, 3;
	@%p21 bra 	$L__BB0_10;

	mul.wide.s32 	%rd53, %r52, 4;

$L__BB0_9:
	mul.wide.s32 	%rd51, %r7396, 4;
	add.s64 	%rd52, %rd2, %rd51;
	mov.u32 	%r1777, 0;
	st.global.u32 	[%rd52], %r1777;
	add.s64 	%rd54, %rd52, %rd53;
	st.global.u32 	[%rd54], %r1777;
	add.s32 	%r1778, %r7396, %r52;
	add.s32 	%r1779, %r1778, %r52;
	add.s64 	%rd55, %rd54, %rd53;
	st.global.u32 	[%rd55], %r1777;
	add.s32 	%r1780, %r1779, %r52;
	add.s64 	%rd56, %rd55, %rd53;
	st.global.u32 	[%rd56], %r1777;
	add.s32 	%r7396, %r1780, %r52;
	setp.lt.s32 	%p22, %r7396, %r56;
	@%p22 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd57, [%rd1+80];
	cvta.to.global.u64 	%rd7, %rd57;
	sub.s32 	%r1781, %r1730, %r41;
	div.s32 	%r1782, %r1781, %r42;
	mul.lo.s32 	%r1783, %r1782, %r1729;
	sub.s32 	%r68, %r1783, %r41;
	sub.s32 	%r1784, %r1729, %r42;
	mul.lo.s32 	%r1785, %r1784, %r1726;
	mul.lo.s32 	%r69, %r1724, 384;
	add.s32 	%r1786, %r69, %r69;
	add.s32 	%r1787, %r1786, 128;
	mul.lo.s32 	%r1789, %r1755, 768;
	mul.lo.s32 	%r1790, %r1785, %r1787;
	mad.lo.s32 	%r70, %r1789, %r68, %r1790;
	bra.uni 	$L__BB0_11;

$L__BB0_879:
	mov.f32 	%f552, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f552;
  cvt.rn.f16.f32 high, %f552;
  mov.b32 %r7362, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd555, %r7398, 4;
	add.s64 	%rd556, %rd7, %rd555;
	st.global.u32 	[%rd556], %r7362;
	add.s32 	%r7398, %r7398, %r52;

$L__BB0_11:
	setp.lt.s32 	%p23, %r7398, %r70;
	@%p23 bra 	$L__BB0_879;

	ld.param.u64 	%rd58, [%rd1+120];
	cvta.to.global.u64 	%rd9, %rd58;
	ld.param.u64 	%rd59, [%rd1+88];
	cvta.to.global.u64 	%rd10, %rd59;
	mad.lo.s32 	%r7436, %r1724, %r37, %r35;
	mul.lo.s32 	%r74, %r1725, %r38;
	add.s32 	%r75, %r74, %r36;
	setp.ge.s32 	%p24, %r7436, %r1729;
	@%p24 bra 	$L__BB0_50;

	setp.gt.s32 	%p25, %r39, %r40;
	add.s32 	%r76, %r1729, -4;
	add.s32 	%r77, %r1730, -4;
	mov.u32 	%r1791, 31;
	sub.s32 	%r1792, %r1791, %r40;
	selp.b32 	%r1793, %r40, %r1792, %p25;
	shl.b32 	%r1794, %r1793, 2;
	mov.u32 	%r1795, 2;
	sub.s32 	%r78, %r1794, %r1732;
	shl.b32 	%r1796, %r1731, 2;
	mov.u32 	%r1797, 128;
	sub.s32 	%r79, %r1797, %r1796;
	add.s32 	%r80, %r1739, -1;
	add.s32 	%r81, %r1741, -1;
	add.s32 	%r82, %r1743, -1;
	sub.s32 	%r1798, %r1795, %r1732;
	add.s32 	%r83, %r1798, %r1794;
	mul.lo.s32 	%r1799, %r1730, %r1729;
	shl.b32 	%r84, %r1799, 6;
	add.s32 	%r85, %r1729, -1;
	shl.b32 	%r86, %r40, 1;
	or.b32  	%r87, %r86, 1;
	add.s32 	%r88, %r78, 1;
	add.s32 	%r89, %r83, 1;
	shr.u32 	%r1800, %r87, 31;
	add.s32 	%r1801, %r87, %r1800;
	shr.s32 	%r91, %r1801, 1;
	and.b32  	%r1802, %r1801, -2;
	sub.s32 	%r1803, %r87, %r1802;
	add.s32 	%r90, %r1803, %r84;
	mov.u32 	%r7399, %r7436;

$L__BB0_14:
	setp.ge.s32 	%p26, %r75, %r1730;
	@%p26 bra 	$L__BB0_49;

	setp.lt.s32 	%p27, %r7399, 4;
	setp.ge.s32 	%p28, %r7399, %r76;
	or.pred  	%p1, %p27, %p28;
	setp.gt.s32 	%p29, %r1739, %r7399;
	selp.b32 	%r1804, %r7399, %r80, %p29;
	setp.gt.s32 	%p30, %r1738, %r7399;
	selp.b32 	%r1805, %r1738, %r1804, %p30;
	sub.s32 	%r1806, %r1805, %r1738;
	add.s32 	%r93, %r85, %r7399;
	mul.lo.s32 	%r94, %r1806, %r54;
	add.s32 	%r1807, %r1806, %r53;
	mul.lo.s32 	%r95, %r1807, %r54;
	add.s32 	%r1808, %r1807, %r53;
	mul.lo.s32 	%r96, %r1808, %r54;
	mov.u32 	%r7400, %r75;

$L__BB0_16:
	setp.lt.s32 	%p31, %r7400, 4;
	or.pred  	%p32, %p1, %p31;
	setp.ge.s32 	%p33, %r7400, %r77;
	or.pred  	%p2, %p33, %p32;
	setp.gt.s32 	%p34, %r1741, %r7400;
	selp.b32 	%r1809, %r7400, %r81, %p34;
	setp.gt.s32 	%p35, %r1740, %r7400;
	selp.b32 	%r1810, %r1740, %r1809, %p35;
	mul.lo.s32 	%r98, %r7400, %r1729;
	add.s32 	%r99, %r98, %r7399;
	shl.b32 	%r100, %r99, 6;
	sub.s32 	%r101, %r1810, %r1740;
	shl.b32 	%r1811, %r99, 5;
	add.s32 	%r1812, %r1811, %r40;
	shl.b32 	%r1813, %r1812, 2;
	add.s32 	%r1814, %r84, %r1813;
	mul.wide.s32 	%rd60, %r1814, 4;
	add.s64 	%rd11, %rd10, %rd60;
	@%p2 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_17;

$L__BB0_20:
	mov.f32 	%f44, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r1832, {low,high};}

	// end inline asm
	st.global.u32 	[%rd11], %r1832;
	bra.uni 	$L__BB0_21;

$L__BB0_17:
	@%p25 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	rem.s32 	%r1817, %r78, %r79;
	add.s32 	%r1818, %r1817, %r79;
	rem.s32 	%r1819, %r1818, %r79;
	rem.s32 	%r1820, %r83, %r79;
	add.s32 	%r1821, %r1820, %r79;
	rem.s32 	%r1822, %r1821, %r79;
	add.s32 	%r1823, %r101, %r94;
	mul.lo.s32 	%r1824, %r1823, %r55;
	sub.s32 	%r1825, %r1824, %r1742;
	setp.gt.s32 	%p37, %r1743, %r1819;
	selp.b32 	%r1826, %r1819, %r82, %p37;
	setp.gt.s32 	%p38, %r1742, %r1819;
	selp.b32 	%r1827, %r1742, %r1826, %p38;
	add.s32 	%r1828, %r1825, %r1827;
	mul.wide.s32 	%rd61, %r1828, 4;
	add.s64 	%rd62, %rd9, %rd61;
	ld.global.f32 	%f41, [%rd62];
	setp.gt.s32 	%p39, %r1743, %r1822;
	selp.b32 	%r1829, %r1822, %r82, %p39;
	setp.gt.s32 	%p40, %r1742, %r1822;
	selp.b32 	%r1830, %r1742, %r1829, %p40;
	add.s32 	%r1831, %r1825, %r1830;
	mul.wide.s32 	%rd63, %r1831, 4;
	add.s64 	%rd64, %rd9, %rd63;
	ld.global.f32 	%f42, [%rd64];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r1816, {low,high};}

	// end inline asm
	st.global.u32 	[%rd11], %r1816;
	bra.uni 	$L__BB0_21;

$L__BB0_18:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r1815, {low,high};}

	// end inline asm
	st.global.u32 	[%rd11], %r1815;

$L__BB0_21:
	add.s32 	%r1833, %r86, %r100;
	mul.wide.s32 	%rd65, %r1833, 4;
	add.s64 	%rd12, %rd10, %rd65;
	@%p2 bra 	$L__BB0_25;
	bra.uni 	$L__BB0_22;

$L__BB0_25:
	mov.f32 	%f50, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f50;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r1851, {low,high};}

	// end inline asm
	st.global.u32 	[%rd12], %r1851;
	bra.uni 	$L__BB0_26;

$L__BB0_22:
	@%p25 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	rem.s32 	%r1836, %r78, %r79;
	add.s32 	%r1837, %r1836, %r79;
	rem.s32 	%r1838, %r1837, %r79;
	rem.s32 	%r1839, %r83, %r79;
	add.s32 	%r1840, %r1839, %r79;
	rem.s32 	%r1841, %r1840, %r79;
	add.s32 	%r1842, %r101, %r95;
	mul.lo.s32 	%r1843, %r1842, %r55;
	sub.s32 	%r1844, %r1843, %r1742;
	setp.gt.s32 	%p42, %r1743, %r1838;
	selp.b32 	%r1845, %r1838, %r82, %p42;
	setp.gt.s32 	%p43, %r1742, %r1838;
	selp.b32 	%r1846, %r1742, %r1845, %p43;
	add.s32 	%r1847, %r1844, %r1846;
	mul.wide.s32 	%rd66, %r1847, 4;
	add.s64 	%rd67, %rd9, %rd66;
	ld.global.f32 	%f47, [%rd67];
	setp.gt.s32 	%p44, %r1743, %r1841;
	selp.b32 	%r1848, %r1841, %r82, %p44;
	setp.gt.s32 	%p45, %r1742, %r1841;
	selp.b32 	%r1849, %r1742, %r1848, %p45;
	add.s32 	%r1850, %r1844, %r1849;
	mul.wide.s32 	%rd68, %r1850, 4;
	add.s64 	%rd69, %rd9, %rd68;
	ld.global.f32 	%f48, [%rd69];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r1835, {low,high};}

	// end inline asm
	st.global.u32 	[%rd12], %r1835;
	bra.uni 	$L__BB0_26;

$L__BB0_23:
	mov.f32 	%f46, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f46;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r1834, {low,high};}

	// end inline asm
	st.global.u32 	[%rd12], %r1834;

$L__BB0_26:
	@%p2 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_27;

$L__BB0_31:
	mov.f32 	%f56, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r1876, {low,high};}

	// end inline asm
	rem.s32 	%r1877, %r93, %r1729;
	add.s32 	%r1878, %r1877, %r98;
	shl.b32 	%r1879, %r1878, 5;
	add.s32 	%r1880, %r1879, %r40;
	shl.b32 	%r1881, %r1880, 2;
	add.s32 	%r1882, %r84, %r1881;
	add.s32 	%r1883, %r1882, 2;
	mul.wide.s32 	%rd76, %r1883, 4;
	add.s64 	%rd77, %rd10, %rd76;
	st.global.u32 	[%rd77], %r1876;
	bra.uni 	$L__BB0_32;

$L__BB0_27:
	@%p25 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_29:
	rem.s32 	%r1854, %r78, %r79;
	add.s32 	%r1855, %r1854, %r79;
	rem.s32 	%r1856, %r1855, %r79;
	rem.s32 	%r1857, %r83, %r79;
	add.s32 	%r1858, %r1857, %r79;
	rem.s32 	%r1859, %r1858, %r79;
	add.s32 	%r1860, %r101, %r96;
	mul.lo.s32 	%r1861, %r1860, %r55;
	sub.s32 	%r1862, %r1861, %r1742;
	setp.gt.s32 	%p47, %r1743, %r1856;
	selp.b32 	%r1863, %r1856, %r82, %p47;
	setp.gt.s32 	%p48, %r1742, %r1856;
	selp.b32 	%r1864, %r1742, %r1863, %p48;
	add.s32 	%r1865, %r1862, %r1864;
	mul.wide.s32 	%rd70, %r1865, 4;
	add.s64 	%rd71, %rd9, %rd70;
	ld.global.f32 	%f53, [%rd71];
	setp.gt.s32 	%p49, %r1743, %r1859;
	selp.b32 	%r1866, %r1859, %r82, %p49;
	setp.gt.s32 	%p50, %r1742, %r1859;
	selp.b32 	%r1867, %r1742, %r1866, %p50;
	add.s32 	%r1868, %r1862, %r1867;
	mul.wide.s32 	%rd72, %r1868, 4;
	add.s64 	%rd73, %rd9, %rd72;
	ld.global.f32 	%f54, [%rd73];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r7401, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_30;

$L__BB0_28:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r7401, {low,high};}

	// end inline asm

$L__BB0_30:
	rem.s32 	%r1869, %r93, %r1729;
	add.s32 	%r1870, %r1869, %r98;
	shl.b32 	%r1871, %r1870, 5;
	add.s32 	%r1872, %r1871, %r40;
	shl.b32 	%r1873, %r1872, 2;
	add.s32 	%r1874, %r84, %r1873;
	add.s32 	%r1875, %r1874, 2;
	mul.wide.s32 	%rd74, %r1875, 4;
	add.s64 	%rd75, %rd10, %rd74;
	st.global.u32 	[%rd75], %r7401;

$L__BB0_32:
	add.s32 	%r1885, %r1811, %r91;
	shl.b32 	%r1886, %r1885, 2;
	add.s32 	%r1887, %r90, %r1886;
	mul.wide.s32 	%rd78, %r1887, 4;
	add.s64 	%rd13, %rd10, %rd78;
	@%p2 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_33;

$L__BB0_36:
	mov.f32 	%f62, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r1905, {low,high};}

	// end inline asm
	st.global.u32 	[%rd13], %r1905;
	bra.uni 	$L__BB0_37;

$L__BB0_33:
	@%p25 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	rem.s32 	%r1890, %r88, %r79;
	add.s32 	%r1891, %r1890, %r79;
	rem.s32 	%r1892, %r1891, %r79;
	rem.s32 	%r1893, %r89, %r79;
	add.s32 	%r1894, %r1893, %r79;
	rem.s32 	%r1895, %r1894, %r79;
	add.s32 	%r1896, %r101, %r94;
	mul.lo.s32 	%r1897, %r1896, %r55;
	sub.s32 	%r1898, %r1897, %r1742;
	setp.gt.s32 	%p52, %r1743, %r1892;
	selp.b32 	%r1899, %r1892, %r82, %p52;
	setp.gt.s32 	%p53, %r1742, %r1892;
	selp.b32 	%r1900, %r1742, %r1899, %p53;
	add.s32 	%r1901, %r1898, %r1900;
	mul.wide.s32 	%rd79, %r1901, 4;
	add.s64 	%rd80, %rd9, %rd79;
	ld.global.f32 	%f59, [%rd80];
	setp.gt.s32 	%p54, %r1743, %r1895;
	selp.b32 	%r1902, %r1895, %r82, %p54;
	setp.gt.s32 	%p55, %r1742, %r1895;
	selp.b32 	%r1903, %r1742, %r1902, %p55;
	add.s32 	%r1904, %r1898, %r1903;
	mul.wide.s32 	%rd81, %r1904, 4;
	add.s64 	%rd82, %rd9, %rd81;
	ld.global.f32 	%f60, [%rd82];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r1889, {low,high};}

	// end inline asm
	st.global.u32 	[%rd13], %r1889;
	bra.uni 	$L__BB0_37;

$L__BB0_34:
	mov.f32 	%f58, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r1888, {low,high};}

	// end inline asm
	st.global.u32 	[%rd13], %r1888;

$L__BB0_37:
	add.s32 	%r1906, %r87, %r100;
	mul.wide.s32 	%rd83, %r1906, 4;
	add.s64 	%rd14, %rd10, %rd83;
	@%p2 bra 	$L__BB0_41;
	bra.uni 	$L__BB0_38;

$L__BB0_41:
	mov.f32 	%f68, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r1924, {low,high};}

	// end inline asm
	st.global.u32 	[%rd14], %r1924;
	bra.uni 	$L__BB0_42;

$L__BB0_38:
	@%p25 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_39;

$L__BB0_40:
	rem.s32 	%r1909, %r88, %r79;
	add.s32 	%r1910, %r1909, %r79;
	rem.s32 	%r1911, %r1910, %r79;
	rem.s32 	%r1912, %r89, %r79;
	add.s32 	%r1913, %r1912, %r79;
	rem.s32 	%r1914, %r1913, %r79;
	add.s32 	%r1915, %r101, %r95;
	mul.lo.s32 	%r1916, %r1915, %r55;
	sub.s32 	%r1917, %r1916, %r1742;
	setp.gt.s32 	%p57, %r1743, %r1911;
	selp.b32 	%r1918, %r1911, %r82, %p57;
	setp.gt.s32 	%p58, %r1742, %r1911;
	selp.b32 	%r1919, %r1742, %r1918, %p58;
	add.s32 	%r1920, %r1917, %r1919;
	mul.wide.s32 	%rd84, %r1920, 4;
	add.s64 	%rd85, %rd9, %rd84;
	ld.global.f32 	%f65, [%rd85];
	setp.gt.s32 	%p59, %r1743, %r1914;
	selp.b32 	%r1921, %r1914, %r82, %p59;
	setp.gt.s32 	%p60, %r1742, %r1914;
	selp.b32 	%r1922, %r1742, %r1921, %p60;
	add.s32 	%r1923, %r1917, %r1922;
	mul.wide.s32 	%rd86, %r1923, 4;
	add.s64 	%rd87, %rd9, %rd86;
	ld.global.f32 	%f66, [%rd87];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r1908, {low,high};}

	// end inline asm
	st.global.u32 	[%rd14], %r1908;
	bra.uni 	$L__BB0_42;

$L__BB0_39:
	mov.f32 	%f64, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r1907, {low,high};}

	// end inline asm
	st.global.u32 	[%rd14], %r1907;

$L__BB0_42:
	@%p2 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_43;

$L__BB0_47:
	mov.f32 	%f74, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r1949, {low,high};}

	// end inline asm
	rem.s32 	%r1950, %r93, %r1729;
	add.s32 	%r1951, %r1950, %r98;
	shl.b32 	%r1952, %r1951, 5;
	add.s32 	%r1953, %r1952, %r91;
	shl.b32 	%r1954, %r1953, 2;
	add.s32 	%r1955, %r90, %r1954;
	add.s32 	%r1956, %r1955, 2;
	mul.wide.s32 	%rd94, %r1956, 4;
	add.s64 	%rd95, %rd10, %rd94;
	st.global.u32 	[%rd95], %r1949;
	bra.uni 	$L__BB0_48;

$L__BB0_43:
	@%p25 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	rem.s32 	%r1927, %r88, %r79;
	add.s32 	%r1928, %r1927, %r79;
	rem.s32 	%r1929, %r1928, %r79;
	rem.s32 	%r1930, %r89, %r79;
	add.s32 	%r1931, %r1930, %r79;
	rem.s32 	%r1932, %r1931, %r79;
	add.s32 	%r1933, %r101, %r96;
	mul.lo.s32 	%r1934, %r1933, %r55;
	sub.s32 	%r1935, %r1934, %r1742;
	setp.gt.s32 	%p62, %r1743, %r1929;
	selp.b32 	%r1936, %r1929, %r82, %p62;
	setp.gt.s32 	%p63, %r1742, %r1929;
	selp.b32 	%r1937, %r1742, %r1936, %p63;
	add.s32 	%r1938, %r1935, %r1937;
	mul.wide.s32 	%rd88, %r1938, 4;
	add.s64 	%rd89, %rd9, %rd88;
	ld.global.f32 	%f71, [%rd89];
	setp.gt.s32 	%p64, %r1743, %r1932;
	selp.b32 	%r1939, %r1932, %r82, %p64;
	setp.gt.s32 	%p65, %r1742, %r1932;
	selp.b32 	%r1940, %r1742, %r1939, %p65;
	add.s32 	%r1941, %r1935, %r1940;
	mul.wide.s32 	%rd90, %r1941, 4;
	add.s64 	%rd91, %rd9, %rd90;
	ld.global.f32 	%f72, [%rd91];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r7402, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f70, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r7402, {low,high};}

	// end inline asm

$L__BB0_46:
	rem.s32 	%r1942, %r93, %r1729;
	add.s32 	%r1943, %r1942, %r98;
	shl.b32 	%r1944, %r1943, 5;
	add.s32 	%r1945, %r1944, %r91;
	shl.b32 	%r1946, %r1945, 2;
	add.s32 	%r1947, %r90, %r1946;
	add.s32 	%r1948, %r1947, 2;
	mul.wide.s32 	%rd92, %r1948, 4;
	add.s64 	%rd93, %rd10, %rd92;
	st.global.u32 	[%rd93], %r7402;

$L__BB0_48:
	add.s32 	%r7400, %r7400, %r1755;
	setp.lt.s32 	%p66, %r7400, %r1730;
	@%p66 bra 	$L__BB0_16;

$L__BB0_49:
	add.s32 	%r7399, %r7399, %r1750;
	setp.lt.s32 	%p67, %r7399, %r1729;
	@%p67 bra 	$L__BB0_14;

$L__BB0_50:
	ld.param.u64 	%rd96, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd96;
	ld.param.u64 	%rd97, [%rd1+96];
	cvta.to.global.u64 	%rd16, %rd97;
	@%p24 bra 	$L__BB0_134;

	shl.b32 	%r122, %r75, 1;
	mov.u64 	%rd98, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r7403, %r7436;

$L__BB0_52:
	setp.ge.s32 	%p69, %r122, %r1730;
	@%p69 bra 	$L__BB0_133;

	mov.u32 	%r7404, %r122;

$L__BB0_54:
	setp.ne.s32 	%p70, %r40, 0;
	@%p70 bra 	$L__BB0_132;

	shr.u32 	%r1958, %r7404, 31;
	add.s32 	%r1959, %r7404, %r1958;
	shr.s32 	%r1960, %r1959, 1;
	mad.lo.s32 	%r1961, %r1960, %r1729, %r7403;
	shl.b32 	%r126, %r1961, 5;
	add.s32 	%r127, %r7404, -2;
	mul.lo.s32 	%r128, %r127, %r1729;
	add.s32 	%r1962, %r1730, %r127;
	mul.lo.s32 	%r129, %r1962, %r1729;
	add.s32 	%r1963, %r1962, %r1730;
	mul.lo.s32 	%r130, %r1963, %r1729;
	add.s32 	%r131, %r128, %r1729;
	add.s32 	%r132, %r7404, -1;
	add.s32 	%r1964, %r1730, %r132;
	mul.lo.s32 	%r133, %r1964, %r1729;
	add.s32 	%r1965, %r1964, %r1730;
	mul.lo.s32 	%r134, %r1965, %r1729;
	add.s32 	%r1966, %r1730, %r7404;
	mul.lo.s32 	%r135, %r1966, %r1729;
	add.s32 	%r1967, %r1966, %r1730;
	mul.lo.s32 	%r136, %r1967, %r1729;
	mul.lo.s32 	%r137, %r7404, %r1729;
	add.s32 	%r138, %r137, %r1729;
	add.s32 	%r139, %r7404, 1;
	add.s32 	%r1968, %r1730, %r139;
	mul.lo.s32 	%r140, %r1968, %r1729;
	add.s32 	%r1969, %r1968, %r1730;
	mul.lo.s32 	%r141, %r1969, %r1729;
	add.s32 	%r142, %r138, %r1729;
	add.s32 	%r143, %r7404, 2;
	add.s32 	%r1970, %r1730, %r143;
	mul.lo.s32 	%r144, %r1970, %r1729;
	add.s32 	%r1971, %r1970, %r1730;
	mul.lo.s32 	%r145, %r1971, %r1729;
	mov.u32 	%r7407, 0;
	mov.u64 	%rd568, %rd98;

$L__BB0_56:
	ld.global.nc.u32 	%r1972, [%rd568];
	cvt.rn.f64.s32 	%fd1, %r1972;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r147, %r1972, %r7403;
	setp.lt.s32 	%p71, %r147, %r1729;
	or.b32  	%r1973, %r127, %r147;
	setp.gt.s32 	%p72, %r1973, -1;
	and.pred  	%p73, %p71, %p72;
	setp.lt.s32 	%p74, %r127, %r1730;
	and.pred  	%p3, %p74, %p73;
	cvt.rn.f32.f64 	%f75, %fd3;
	add.f32 	%f76, %f75, 0f3E800000;
	abs.f32 	%f1, %f76;
	add.f32 	%f77, %f1, 0f40200000;
	setp.geu.f32 	%p75, %f77, 0f40000000;
	@%p75 bra 	$L__BB0_61;

	@%p3 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1976, %r128, %r147;
	mul.wide.s32 	%rd99, %r1976, 4;
	add.s64 	%rd100, %rd15, %rd99;
	ld.global.f32 	%f80, [%rd100];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r7406, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r7406, {low,high};}

	// end inline asm

$L__BB0_60:
	add.s32 	%r1977, %r7407, %r126;
	mul.wide.s32 	%rd101, %r1977, 4;
	add.s64 	%rd102, %rd16, %rd101;
	st.global.u32 	[%rd102], %r7406;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_61:
	cvt.rn.f32.f64 	%f81, %fd1;
	add.f32 	%f82, %f81, 0f3E800000;
	abs.f32 	%f2, %f82;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p76, %f3, 0f40000000;
	@%p76 bra 	$L__BB0_66;

	@%p3 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_63;

$L__BB0_64:
	add.s32 	%r1980, %r129, %r147;
	mul.wide.s32 	%rd103, %r1980, 4;
	add.s64 	%rd104, %rd15, %rd103;
	ld.global.f32 	%f85, [%rd104];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f85;
  mov.b32 %r7408, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_65;

$L__BB0_63:
	mov.f32 	%f84, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f84;
  cvt.rn.f16.f32 high, %f84;
  mov.b32 %r7408, {low,high};}

	// end inline asm

$L__BB0_65:
	add.s32 	%r1981, %r7407, %r126;
	mul.wide.s32 	%rd105, %r1981, 4;
	add.s64 	%rd106, %rd16, %rd105;
	st.global.u32 	[%rd106], %r7408;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_66:
	add.f32 	%f86, %f2, 0f40200000;
	setp.geu.f32 	%p77, %f86, 0f40000000;
	@%p77 bra 	$L__BB0_71;

	@%p3 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_68;

$L__BB0_69:
	add.s32 	%r1984, %r130, %r147;
	mul.wide.s32 	%rd107, %r1984, 4;
	add.s64 	%rd108, %rd15, %rd107;
	ld.global.f32 	%f89, [%rd108];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r7410, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_70;

$L__BB0_68:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r7410, {low,high};}

	// end inline asm

$L__BB0_70:
	add.s32 	%r1985, %r7407, %r126;
	mul.wide.s32 	%rd109, %r1985, 4;
	add.s64 	%rd110, %rd16, %rd109;
	st.global.u32 	[%rd110], %r7410;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_71:
	or.b32  	%r1986, %r132, %r147;
	setp.gt.s32 	%p78, %r1986, -1;
	and.pred  	%p80, %p71, %p78;
	setp.le.s32 	%p81, %r7404, %r1730;
	and.pred  	%p4, %p81, %p80;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p82, %f4, 0f40000000;
	@%p82 bra 	$L__BB0_76;

	@%p4 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_73;

$L__BB0_74:
	add.s32 	%r1989, %r131, %r147;
	mul.wide.s32 	%rd111, %r1989, 4;
	add.s64 	%rd112, %rd15, %rd111;
	ld.global.f32 	%f92, [%rd112];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f92;
  mov.b32 %r7412, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_75;

$L__BB0_73:
	mov.f32 	%f91, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f91;
  cvt.rn.f16.f32 high, %f91;
  mov.b32 %r7412, {low,high};}

	// end inline asm

$L__BB0_75:
	add.s32 	%r1990, %r7407, %r126;
	mul.wide.s32 	%rd113, %r1990, 4;
	add.s64 	%rd114, %rd16, %rd113;
	st.global.u32 	[%rd114], %r7412;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_76:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p83, %f5, 0f40000000;
	@%p83 bra 	$L__BB0_81;

	@%p4 bra 	$L__BB0_79;
	bra.uni 	$L__BB0_78;

$L__BB0_79:
	add.s32 	%r1993, %r133, %r147;
	mul.wide.s32 	%rd115, %r1993, 4;
	add.s64 	%rd116, %rd15, %rd115;
	ld.global.f32 	%f95, [%rd116];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f95;
  mov.b32 %r7414, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_80;

$L__BB0_78:
	mov.f32 	%f94, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f94;
  cvt.rn.f16.f32 high, %f94;
  mov.b32 %r7414, {low,high};}

	// end inline asm

$L__BB0_80:
	add.s32 	%r1994, %r7407, %r126;
	mul.wide.s32 	%rd117, %r1994, 4;
	add.s64 	%rd118, %rd16, %rd117;
	st.global.u32 	[%rd118], %r7414;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_81:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p84, %f6, 0f40000000;
	@%p84 bra 	$L__BB0_86;

	@%p4 bra 	$L__BB0_84;
	bra.uni 	$L__BB0_83;

$L__BB0_84:
	add.s32 	%r1997, %r134, %r147;
	mul.wide.s32 	%rd119, %r1997, 4;
	add.s64 	%rd120, %rd15, %rd119;
	ld.global.f32 	%f98, [%rd120];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r7416, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_85;

$L__BB0_83:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r7416, {low,high};}

	// end inline asm

$L__BB0_85:
	add.s32 	%r1998, %r7407, %r126;
	mul.wide.s32 	%rd121, %r1998, 4;
	add.s64 	%rd122, %rd16, %rd121;
	st.global.u32 	[%rd122], %r7416;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_86:
	or.b32  	%r1999, %r7404, %r147;
	setp.gt.s32 	%p85, %r1999, -1;
	and.pred  	%p87, %p71, %p85;
	setp.lt.s32 	%p88, %r7404, %r1730;
	and.pred  	%p5, %p88, %p87;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p89, %f7, 0f40000000;
	@%p89 bra 	$L__BB0_91;

	@%p5 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_88;

$L__BB0_89:
	add.s32 	%r2002, %r137, %r147;
	mul.wide.s32 	%rd123, %r2002, 4;
	add.s64 	%rd124, %rd15, %rd123;
	ld.global.f32 	%f101, [%rd124];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f101;
  mov.b32 %r7418, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_90;

$L__BB0_88:
	mov.f32 	%f100, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f100;
  cvt.rn.f16.f32 high, %f100;
  mov.b32 %r7418, {low,high};}

	// end inline asm

$L__BB0_90:
	add.s32 	%r2003, %r7407, %r126;
	mul.wide.s32 	%rd125, %r2003, 4;
	add.s64 	%rd126, %rd16, %rd125;
	st.global.u32 	[%rd126], %r7418;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_91:
	add.f32 	%f102, %f2, 0f00000000;
	setp.geu.f32 	%p90, %f102, 0f40000000;
	@%p90 bra 	$L__BB0_96;

	@%p5 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_93;

$L__BB0_94:
	add.s32 	%r2006, %r135, %r147;
	mul.wide.s32 	%rd127, %r2006, 4;
	add.s64 	%rd128, %rd15, %rd127;
	ld.global.f32 	%f105, [%rd128];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r7420, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_95;

$L__BB0_93:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r7420, {low,high};}

	// end inline asm

$L__BB0_95:
	add.s32 	%r2007, %r7407, %r126;
	mul.wide.s32 	%rd129, %r2007, 4;
	add.s64 	%rd130, %rd16, %rd129;
	st.global.u32 	[%rd130], %r7420;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_96:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p91, %f8, 0f40000000;
	@%p91 bra 	$L__BB0_101;

	@%p5 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;

$L__BB0_99:
	add.s32 	%r2010, %r136, %r147;
	mul.wide.s32 	%rd131, %r2010, 4;
	add.s64 	%rd132, %rd15, %rd131;
	ld.global.f32 	%f108, [%rd132];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r7422, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_100;

$L__BB0_98:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r7422, {low,high};}

	// end inline asm

$L__BB0_100:
	add.s32 	%r2011, %r7407, %r126;
	mul.wide.s32 	%rd133, %r2011, 4;
	add.s64 	%rd134, %rd16, %rd133;
	st.global.u32 	[%rd134], %r7422;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_101:
	or.b32  	%r2012, %r139, %r147;
	setp.gt.s32 	%p92, %r2012, -1;
	and.pred  	%p94, %p71, %p92;
	setp.lt.s32 	%p95, %r139, %r1730;
	and.pred  	%p6, %p95, %p94;
	@%p89 bra 	$L__BB0_106;

	@%p6 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_103;

$L__BB0_104:
	add.s32 	%r2015, %r138, %r147;
	mul.wide.s32 	%rd135, %r2015, 4;
	add.s64 	%rd136, %rd15, %rd135;
	ld.global.f32 	%f111, [%rd136];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r7424, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_105;

$L__BB0_103:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r7424, {low,high};}

	// end inline asm

$L__BB0_105:
	add.s32 	%r2016, %r7407, %r126;
	mul.wide.s32 	%rd137, %r2016, 4;
	add.s64 	%rd138, %rd16, %rd137;
	st.global.u32 	[%rd138], %r7424;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_106:
	@%p83 bra 	$L__BB0_111;

	@%p6 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_108;

$L__BB0_109:
	add.s32 	%r2019, %r140, %r147;
	mul.wide.s32 	%rd139, %r2019, 4;
	add.s64 	%rd140, %rd15, %rd139;
	ld.global.f32 	%f114, [%rd140];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r7426, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_110;

$L__BB0_108:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r7426, {low,high};}

	// end inline asm

$L__BB0_110:
	add.s32 	%r2020, %r7407, %r126;
	mul.wide.s32 	%rd141, %r2020, 4;
	add.s64 	%rd142, %rd16, %rd141;
	st.global.u32 	[%rd142], %r7426;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_111:
	@%p91 bra 	$L__BB0_116;

	@%p6 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_113;

$L__BB0_114:
	add.s32 	%r2023, %r141, %r147;
	mul.wide.s32 	%rd143, %r2023, 4;
	add.s64 	%rd144, %rd15, %rd143;
	ld.global.f32 	%f117, [%rd144];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f117;
  mov.b32 %r7428, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_115;

$L__BB0_113:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r7428, {low,high};}

	// end inline asm

$L__BB0_115:
	add.s32 	%r2024, %r7407, %r126;
	mul.wide.s32 	%rd145, %r2024, 4;
	add.s64 	%rd146, %rd16, %rd145;
	st.global.u32 	[%rd146], %r7428;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_116:
	or.b32  	%r2025, %r143, %r147;
	setp.gt.s32 	%p99, %r2025, -1;
	and.pred  	%p101, %p71, %p99;
	setp.lt.s32 	%p102, %r143, %r1730;
	and.pred  	%p7, %p102, %p101;
	@%p82 bra 	$L__BB0_121;

	@%p7 bra 	$L__BB0_119;
	bra.uni 	$L__BB0_118;

$L__BB0_119:
	add.s32 	%r2028, %r142, %r147;
	mul.wide.s32 	%rd147, %r2028, 4;
	add.s64 	%rd148, %rd15, %rd147;
	ld.global.f32 	%f120, [%rd148];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f120;
  mov.b32 %r7430, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_120;

$L__BB0_118:
	mov.f32 	%f119, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f119;
  cvt.rn.f16.f32 high, %f119;
  mov.b32 %r7430, {low,high};}

	// end inline asm

$L__BB0_120:
	add.s32 	%r2029, %r7407, %r126;
	mul.wide.s32 	%rd149, %r2029, 4;
	add.s64 	%rd150, %rd16, %rd149;
	st.global.u32 	[%rd150], %r7430;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_121:
	@%p76 bra 	$L__BB0_126;

	@%p7 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_123;

$L__BB0_124:
	add.s32 	%r2032, %r144, %r147;
	mul.wide.s32 	%rd151, %r2032, 4;
	add.s64 	%rd152, %rd15, %rd151;
	ld.global.f32 	%f123, [%rd152];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f123;
  mov.b32 %r7432, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_125;

$L__BB0_123:
	mov.f32 	%f122, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f122;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r7432, {low,high};}

	// end inline asm

$L__BB0_125:
	add.s32 	%r2033, %r7407, %r126;
	mul.wide.s32 	%rd153, %r2033, 4;
	add.s64 	%rd154, %rd16, %rd153;
	st.global.u32 	[%rd154], %r7432;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_126:
	@%p84 bra 	$L__BB0_131;

	@%p7 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r2036, %r145, %r147;
	mul.wide.s32 	%rd155, %r2036, 4;
	add.s64 	%rd156, %rd15, %rd155;
	ld.global.f32 	%f126, [%rd156];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r7434, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r7434, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r2037, %r7407, %r126;
	mul.wide.s32 	%rd157, %r2037, 4;
	add.s64 	%rd158, %rd16, %rd157;
	st.global.u32 	[%rd158], %r7434;
	add.s32 	%r7407, %r7407, 1;

$L__BB0_131:
	add.s64 	%rd568, %rd568, 4;
	mov.u64 	%rd159, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd160, %rd159, 24;
	setp.ne.s64 	%p106, %rd568, %rd160;
	@%p106 bra 	$L__BB0_56;

$L__BB0_132:
	add.s32 	%r7404, %r7404, %r42;
	setp.lt.s32 	%p107, %r7404, %r1730;
	@%p107 bra 	$L__BB0_54;

$L__BB0_133:
	add.s32 	%r7403, %r7403, %r1750;
	setp.lt.s32 	%p108, %r7403, %r1729;
	@%p108 bra 	$L__BB0_52;

$L__BB0_134:
	setp.eq.s32 	%p109, %r1733, 1;
	ld.param.u64 	%rd161, [%rd1+136];
	cvta.to.global.u64 	%rd19, %rd161;
	ld.param.u64 	%rd162, [%rd1+104];
	cvta.to.global.u64 	%rd20, %rd162;
	@%p109 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_135;

$L__BB0_152:
	@%p24 bra 	$L__BB0_281;

	shl.b32 	%r251, %r75, 1;
	shr.u32 	%r2085, %r1734, 31;
	add.s32 	%r2086, %r1734, %r2085;
	shr.u32 	%r2087, %r2086, 1;
	and.b32  	%r252, %r2087, 1;
	mov.u64 	%rd181, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd263, %rd181, 24;

$L__BB0_154:
	setp.ge.s32 	%p119, %r251, %r1730;
	@%p119 bra 	$L__BB0_280;

	mov.u32 	%r7442, %r251;

$L__BB0_156:
	setp.ne.s32 	%p120, %r40, 0;
	@%p120 bra 	$L__BB0_279;

	shr.u32 	%r2089, %r7442, 31;
	add.s32 	%r2090, %r7442, %r2089;
	shr.s32 	%r2091, %r2090, 1;
	mad.lo.s32 	%r2092, %r2091, %r1729, %r7436;
	shl.b32 	%r256, %r2092, 5;
	add.s32 	%r257, %r7442, -2;
	mul.lo.s32 	%r258, %r257, %r1729;
	add.s32 	%r2093, %r1730, %r257;
	mul.lo.s32 	%r259, %r2093, %r1729;
	add.s32 	%r260, %r258, %r1729;
	add.s32 	%r261, %r7442, -1;
	add.s32 	%r2094, %r1730, %r261;
	mul.lo.s32 	%r262, %r2094, %r1729;
	add.s32 	%r2095, %r1730, %r7442;
	mul.lo.s32 	%r263, %r2095, %r1729;
	mul.lo.s32 	%r264, %r7442, %r1729;
	add.s32 	%r265, %r264, %r1729;
	add.s32 	%r266, %r7442, 1;
	add.s32 	%r2096, %r1730, %r266;
	mul.lo.s32 	%r267, %r2096, %r1729;
	add.s32 	%r268, %r265, %r1729;
	add.s32 	%r269, %r7442, 2;
	add.s32 	%r2097, %r1730, %r269;
	mul.lo.s32 	%r270, %r2097, %r1729;
	mov.u32 	%r7446, 0;
	mov.u64 	%rd569, %rd181;

$L__BB0_158:
	ld.global.nc.u32 	%r2098, [%rd569];
	cvt.rn.f64.s32 	%fd2, %r2098;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r272, %r2098, %r7436;
	setp.lt.s32 	%p121, %r272, %r1729;
	or.b32  	%r2099, %r257, %r272;
	setp.gt.s32 	%p122, %r2099, -1;
	and.pred  	%p123, %p121, %p122;
	setp.lt.s32 	%p124, %r257, %r1730;
	and.pred  	%p8, %p124, %p123;
	cvt.rn.f32.f64 	%f143, %fd4;
	add.f32 	%f144, %f143, 0f3E800000;
	abs.f32 	%f9, %f144;
	add.f32 	%f145, %f9, 0f40200000;
	setp.geu.f32 	%p125, %f145, 0f40000000;
	@%p125 bra 	$L__BB0_170;

	@%p8 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	setp.eq.s32 	%p126, %r252, 0;
	add.s32 	%r2101, %r258, %r272;
	shl.b32 	%r2102, %r2101, 1;
	mul.wide.s32 	%rd182, %r2102, 4;
	add.s64 	%rd183, %rd19, %rd182;
	ld.global.f32 	%f10, [%rd183];
	@%p126 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_162;

$L__BB0_163:
	mov.f32 	%f151, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r7444, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_160:
	mov.f32 	%f147, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f147;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r7444, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_162:
	mov.f32 	%f148, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f148;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r7444, {low,high};}

	// end inline asm

$L__BB0_164:
	add.s32 	%r277, %r7446, %r256;
	mul.wide.s32 	%rd184, %r277, 4;
	add.s64 	%rd185, %rd20, %rd184;
	st.global.u32 	[%rd185], %r7444;
	@%p8 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	setp.eq.s32 	%p127, %r252, 0;
	add.s32 	%r2106, %r259, %r272;
	shl.b32 	%r2107, %r2106, 1;
	mul.wide.s32 	%rd186, %r2107, 4;
	add.s64 	%rd187, %rd19, %rd186;
	ld.global.f32 	%f11, [%rd187];
	@%p127 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_167;

$L__BB0_168:
	mov.f32 	%f157, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f157;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_165:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r7445, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_167:
	mov.f32 	%f154, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r7445, {low,high};}

	// end inline asm

$L__BB0_169:
	add.s32 	%r2110, %r277, 1;
	mul.wide.s32 	%rd188, %r2110, 4;
	add.s64 	%rd189, %rd20, %rd188;
	st.global.u32 	[%rd189], %r7445;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_170:
	cvt.rn.f32.f64 	%f158, %fd2;
	add.f32 	%f159, %f158, 0f3E800000;
	abs.f32 	%f12, %f159;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p128, %f13, 0f40000000;
	@%p128 bra 	$L__BB0_182;

	@%p8 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	setp.eq.s32 	%p129, %r252, 0;
	add.s32 	%r2112, %r258, %r272;
	shl.b32 	%r2113, %r2112, 1;
	or.b32  	%r2114, %r2113, 1;
	mul.wide.s32 	%rd190, %r2114, 4;
	add.s64 	%rd191, %rd19, %rd190;
	ld.global.f32 	%f14, [%rd191];
	@%p129 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_174;

$L__BB0_175:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r7447, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_172:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r7447, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_174:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r7447, {low,high};}

	// end inline asm

$L__BB0_176:
	add.s32 	%r288, %r7446, %r256;
	mul.wide.s32 	%rd192, %r288, 4;
	add.s64 	%rd193, %rd20, %rd192;
	st.global.u32 	[%rd193], %r7447;
	@%p8 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	setp.eq.s32 	%p130, %r252, 0;
	add.s32 	%r2118, %r259, %r272;
	shl.b32 	%r2119, %r2118, 1;
	or.b32  	%r2120, %r2119, 1;
	mul.wide.s32 	%rd194, %r2120, 4;
	add.s64 	%rd195, %rd19, %rd194;
	ld.global.f32 	%f15, [%rd195];
	@%p130 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_179;

$L__BB0_180:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_177:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r7448, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_179:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r7448, {low,high};}

	// end inline asm

$L__BB0_181:
	add.s32 	%r2123, %r288, 1;
	mul.wide.s32 	%rd196, %r2123, 4;
	add.s64 	%rd197, %rd20, %rd196;
	st.global.u32 	[%rd197], %r7448;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_182:
	or.b32  	%r2124, %r261, %r272;
	setp.gt.s32 	%p131, %r2124, -1;
	and.pred  	%p133, %p121, %p131;
	setp.le.s32 	%p134, %r7442, %r1730;
	and.pred  	%p9, %p134, %p133;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p135, %f16, 0f40000000;
	@%p135 bra 	$L__BB0_194;

	@%p9 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	setp.eq.s32 	%p136, %r252, 0;
	add.s32 	%r2126, %r260, %r272;
	shl.b32 	%r2127, %r2126, 1;
	mul.wide.s32 	%rd198, %r2127, 4;
	add.s64 	%rd199, %rd19, %rd198;
	ld.global.f32 	%f17, [%rd199];
	@%p136 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_186;

$L__BB0_187:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r7450, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_184:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r7450, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_186:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r7450, {low,high};}

	// end inline asm

$L__BB0_188:
	add.s32 	%r299, %r7446, %r256;
	mul.wide.s32 	%rd200, %r299, 4;
	add.s64 	%rd201, %rd20, %rd200;
	st.global.u32 	[%rd201], %r7450;
	@%p9 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	setp.eq.s32 	%p137, %r252, 0;
	add.s32 	%r2131, %r262, %r272;
	shl.b32 	%r2132, %r2131, 1;
	mul.wide.s32 	%rd202, %r2132, 4;
	add.s64 	%rd203, %rd19, %rd202;
	ld.global.f32 	%f18, [%rd203];
	@%p137 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_191;

$L__BB0_192:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_189:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r7451, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_191:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r7451, {low,high};}

	// end inline asm

$L__BB0_193:
	add.s32 	%r2135, %r299, 1;
	mul.wide.s32 	%rd204, %r2135, 4;
	add.s64 	%rd205, %rd20, %rd204;
	st.global.u32 	[%rd205], %r7451;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_194:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p138, %f19, 0f40000000;
	@%p138 bra 	$L__BB0_206;

	@%p9 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	setp.eq.s32 	%p139, %r252, 0;
	add.s32 	%r2137, %r260, %r272;
	shl.b32 	%r2138, %r2137, 1;
	or.b32  	%r2139, %r2138, 1;
	mul.wide.s32 	%rd206, %r2139, 4;
	add.s64 	%rd207, %rd19, %rd206;
	ld.global.f32 	%f20, [%rd207];
	@%p139 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;

$L__BB0_199:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r7453, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_196:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r7453, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_198:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r7453, {low,high};}

	// end inline asm

$L__BB0_200:
	add.s32 	%r310, %r7446, %r256;
	mul.wide.s32 	%rd208, %r310, 4;
	add.s64 	%rd209, %rd20, %rd208;
	st.global.u32 	[%rd209], %r7453;
	@%p9 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	setp.eq.s32 	%p140, %r252, 0;
	add.s32 	%r2143, %r262, %r272;
	shl.b32 	%r2144, %r2143, 1;
	or.b32  	%r2145, %r2144, 1;
	mul.wide.s32 	%rd210, %r2145, 4;
	add.s64 	%rd211, %rd19, %rd210;
	ld.global.f32 	%f21, [%rd211];
	@%p140 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;

$L__BB0_204:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_201:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r7454, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_203:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r7454, {low,high};}

	// end inline asm

$L__BB0_205:
	add.s32 	%r2148, %r310, 1;
	mul.wide.s32 	%rd212, %r2148, 4;
	add.s64 	%rd213, %rd20, %rd212;
	st.global.u32 	[%rd213], %r7454;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_206:
	or.b32  	%r2149, %r7442, %r272;
	setp.gt.s32 	%p141, %r2149, -1;
	and.pred  	%p143, %p121, %p141;
	setp.lt.s32 	%p144, %r7442, %r1730;
	and.pred  	%p10, %p144, %p143;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p145, %f22, 0f40000000;
	@%p145 bra 	$L__BB0_218;

	@%p10 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	setp.eq.s32 	%p146, %r252, 0;
	add.s32 	%r2151, %r264, %r272;
	shl.b32 	%r2152, %r2151, 1;
	mul.wide.s32 	%rd214, %r2152, 4;
	add.s64 	%rd215, %rd19, %rd214;
	ld.global.f32 	%f23, [%rd215];
	@%p146 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;

$L__BB0_211:
	mov.f32 	%f201, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f201;
  mov.b32 %r7456, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_208:
	mov.f32 	%f197, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f197;
  cvt.rn.f16.f32 high, %f197;
  mov.b32 %r7456, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_210:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r7456, {low,high};}

	// end inline asm

$L__BB0_212:
	add.s32 	%r321, %r7446, %r256;
	mul.wide.s32 	%rd216, %r321, 4;
	add.s64 	%rd217, %rd20, %rd216;
	st.global.u32 	[%rd217], %r7456;
	@%p10 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	setp.eq.s32 	%p147, %r252, 0;
	add.s32 	%r2156, %r263, %r272;
	shl.b32 	%r2157, %r2156, 1;
	mul.wide.s32 	%rd218, %r2157, 4;
	add.s64 	%rd219, %rd19, %rd218;
	ld.global.f32 	%f24, [%rd219];
	@%p147 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_215;

$L__BB0_216:
	mov.f32 	%f207, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f207;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_213:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r7457, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_215:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r7457, {low,high};}

	// end inline asm

$L__BB0_217:
	add.s32 	%r2160, %r321, 1;
	mul.wide.s32 	%rd220, %r2160, 4;
	add.s64 	%rd221, %rd20, %rd220;
	st.global.u32 	[%rd221], %r7457;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_218:
	add.f32 	%f208, %f12, 0f00000000;
	setp.geu.f32 	%p148, %f208, 0f40000000;
	@%p148 bra 	$L__BB0_230;

	@%p10 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	setp.eq.s32 	%p149, %r252, 0;
	add.s32 	%r2162, %r264, %r272;
	shl.b32 	%r2163, %r2162, 1;
	or.b32  	%r2164, %r2163, 1;
	mul.wide.s32 	%rd222, %r2164, 4;
	add.s64 	%rd223, %rd19, %rd222;
	ld.global.f32 	%f25, [%rd223];
	@%p149 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;

$L__BB0_223:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r7459, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_220:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r7459, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_222:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r7459, {low,high};}

	// end inline asm

$L__BB0_224:
	add.s32 	%r332, %r7446, %r256;
	mul.wide.s32 	%rd224, %r332, 4;
	add.s64 	%rd225, %rd20, %rd224;
	st.global.u32 	[%rd225], %r7459;
	@%p10 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	setp.eq.s32 	%p150, %r252, 0;
	add.s32 	%r2168, %r263, %r272;
	shl.b32 	%r2169, %r2168, 1;
	or.b32  	%r2170, %r2169, 1;
	mul.wide.s32 	%rd226, %r2170, 4;
	add.s64 	%rd227, %rd19, %rd226;
	ld.global.f32 	%f26, [%rd227];
	@%p150 bra 	$L__BB0_228;
	bra.uni 	$L__BB0_227;

$L__BB0_228:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_225:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r7460, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_227:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r7460, {low,high};}

	// end inline asm

$L__BB0_229:
	add.s32 	%r2173, %r332, 1;
	mul.wide.s32 	%rd228, %r2173, 4;
	add.s64 	%rd229, %rd20, %rd228;
	st.global.u32 	[%rd229], %r7460;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_230:
	or.b32  	%r2174, %r266, %r272;
	setp.gt.s32 	%p151, %r2174, -1;
	and.pred  	%p153, %p121, %p151;
	setp.lt.s32 	%p154, %r266, %r1730;
	and.pred  	%p11, %p154, %p153;
	@%p145 bra 	$L__BB0_242;

	@%p11 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	setp.eq.s32 	%p156, %r252, 0;
	add.s32 	%r2176, %r265, %r272;
	shl.b32 	%r2177, %r2176, 1;
	mul.wide.s32 	%rd230, %r2177, 4;
	add.s64 	%rd231, %rd19, %rd230;
	ld.global.f32 	%f27, [%rd231];
	@%p156 bra 	$L__BB0_235;
	bra.uni 	$L__BB0_234;

$L__BB0_235:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r7462, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_232:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r7462, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_234:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r7462, {low,high};}

	// end inline asm

$L__BB0_236:
	add.s32 	%r343, %r7446, %r256;
	mul.wide.s32 	%rd232, %r343, 4;
	add.s64 	%rd233, %rd20, %rd232;
	st.global.u32 	[%rd233], %r7462;
	@%p11 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	setp.eq.s32 	%p157, %r252, 0;
	add.s32 	%r2181, %r267, %r272;
	shl.b32 	%r2182, %r2181, 1;
	mul.wide.s32 	%rd234, %r2182, 4;
	add.s64 	%rd235, %rd19, %rd234;
	ld.global.f32 	%f28, [%rd235];
	@%p157 bra 	$L__BB0_240;
	bra.uni 	$L__BB0_239;

$L__BB0_240:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_237:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r7463, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_239:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r7463, {low,high};}

	// end inline asm

$L__BB0_241:
	add.s32 	%r2185, %r343, 1;
	mul.wide.s32 	%rd236, %r2185, 4;
	add.s64 	%rd237, %rd20, %rd236;
	st.global.u32 	[%rd237], %r7463;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_242:
	@%p138 bra 	$L__BB0_254;

	@%p11 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	setp.eq.s32 	%p159, %r252, 0;
	add.s32 	%r2187, %r265, %r272;
	shl.b32 	%r2188, %r2187, 1;
	or.b32  	%r2189, %r2188, 1;
	mul.wide.s32 	%rd238, %r2189, 4;
	add.s64 	%rd239, %rd19, %rd238;
	ld.global.f32 	%f29, [%rd239];
	@%p159 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_246;

$L__BB0_247:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r7465, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_244:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r7465, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_246:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r7465, {low,high};}

	// end inline asm

$L__BB0_248:
	add.s32 	%r354, %r7446, %r256;
	mul.wide.s32 	%rd240, %r354, 4;
	add.s64 	%rd241, %rd20, %rd240;
	st.global.u32 	[%rd241], %r7465;
	@%p11 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	setp.eq.s32 	%p160, %r252, 0;
	add.s32 	%r2193, %r267, %r272;
	shl.b32 	%r2194, %r2193, 1;
	or.b32  	%r2195, %r2194, 1;
	mul.wide.s32 	%rd242, %r2195, 4;
	add.s64 	%rd243, %rd19, %rd242;
	ld.global.f32 	%f30, [%rd243];
	@%p160 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_251;

$L__BB0_252:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r7466, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_249:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r7466, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_251:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r7466, {low,high};}

	// end inline asm

$L__BB0_253:
	add.s32 	%r2198, %r354, 1;
	mul.wide.s32 	%rd244, %r2198, 4;
	add.s64 	%rd245, %rd20, %rd244;
	st.global.u32 	[%rd245], %r7466;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_254:
	or.b32  	%r2199, %r269, %r272;
	setp.gt.s32 	%p161, %r2199, -1;
	and.pred  	%p163, %p121, %p161;
	setp.lt.s32 	%p164, %r269, %r1730;
	and.pred  	%p12, %p164, %p163;
	@%p135 bra 	$L__BB0_266;

	@%p12 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	setp.eq.s32 	%p166, %r252, 0;
	add.s32 	%r2201, %r268, %r272;
	shl.b32 	%r2202, %r2201, 1;
	mul.wide.s32 	%rd246, %r2202, 4;
	add.s64 	%rd247, %rd19, %rd246;
	ld.global.f32 	%f31, [%rd247];
	@%p166 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_258;

$L__BB0_259:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r7468, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_256:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r7468, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_258:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r7468, {low,high};}

	// end inline asm

$L__BB0_260:
	add.s32 	%r365, %r7446, %r256;
	mul.wide.s32 	%rd248, %r365, 4;
	add.s64 	%rd249, %rd20, %rd248;
	st.global.u32 	[%rd249], %r7468;
	@%p12 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	setp.eq.s32 	%p167, %r252, 0;
	add.s32 	%r2206, %r270, %r272;
	shl.b32 	%r2207, %r2206, 1;
	mul.wide.s32 	%rd250, %r2207, 4;
	add.s64 	%rd251, %rd19, %rd250;
	ld.global.f32 	%f32, [%rd251];
	@%p167 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_263;

$L__BB0_264:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r7469, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_261:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r7469, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_263:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r7469, {low,high};}

	// end inline asm

$L__BB0_265:
	add.s32 	%r2210, %r365, 1;
	mul.wide.s32 	%rd252, %r2210, 4;
	add.s64 	%rd253, %rd20, %rd252;
	st.global.u32 	[%rd253], %r7469;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_266:
	@%p128 bra 	$L__BB0_278;

	@%p12 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_268;

$L__BB0_269:
	setp.eq.s32 	%p169, %r252, 0;
	add.s32 	%r2212, %r268, %r272;
	shl.b32 	%r2213, %r2212, 1;
	or.b32  	%r2214, %r2213, 1;
	mul.wide.s32 	%rd254, %r2214, 4;
	add.s64 	%rd255, %rd19, %rd254;
	ld.global.f32 	%f33, [%rd255];
	@%p169 bra 	$L__BB0_271;
	bra.uni 	$L__BB0_270;

$L__BB0_271:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r7471, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_268:
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r7471, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_270:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r7471, {low,high};}

	// end inline asm

$L__BB0_272:
	add.s32 	%r376, %r7446, %r256;
	mul.wide.s32 	%rd256, %r376, 4;
	add.s64 	%rd257, %rd20, %rd256;
	st.global.u32 	[%rd257], %r7471;
	@%p12 bra 	$L__BB0_274;
	bra.uni 	$L__BB0_273;

$L__BB0_274:
	setp.eq.s32 	%p170, %r252, 0;
	add.s32 	%r2218, %r270, %r272;
	shl.b32 	%r2219, %r2218, 1;
	or.b32  	%r2220, %r2219, 1;
	mul.wide.s32 	%rd258, %r2220, 4;
	add.s64 	%rd259, %rd19, %rd258;
	ld.global.f32 	%f34, [%rd259];
	@%p170 bra 	$L__BB0_276;
	bra.uni 	$L__BB0_275;

$L__BB0_276:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_273:
	mov.f32 	%f264, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f264;
  cvt.rn.f16.f32 high, %f264;
  mov.b32 %r7472, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_275:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r7472, {low,high};}

	// end inline asm

$L__BB0_277:
	add.s32 	%r2223, %r376, 1;
	mul.wide.s32 	%rd260, %r2223, 4;
	add.s64 	%rd261, %rd20, %rd260;
	st.global.u32 	[%rd261], %r7472;
	add.s32 	%r7446, %r7446, 2;

$L__BB0_278:
	add.s64 	%rd569, %rd569, 4;
	setp.ne.s64 	%p171, %rd569, %rd263;
	@%p171 bra 	$L__BB0_158;

$L__BB0_279:
	add.s32 	%r7442, %r7442, %r42;
	setp.lt.s32 	%p172, %r7442, %r1730;
	@%p172 bra 	$L__BB0_156;

$L__BB0_280:
	add.s32 	%r7436, %r7436, %r1750;
	setp.lt.s32 	%p173, %r7436, %r1729;
	@%p173 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_281;

$L__BB0_135:
	@%p24 bra 	$L__BB0_281;

	neg.s32 	%r225, %r74;
	mov.u32 	%r2038, 31;
	sub.s32 	%r2039, %r2038, %r40;
	setp.gt.s32 	%p111, %r39, %r40;
	selp.b32 	%r2040, %r40, %r2039, %p111;
	shl.b32 	%r2041, %r2040, 2;
	mov.u32 	%r2042, 2;
	sub.s32 	%r226, %r2041, %r1732;
	shl.b32 	%r2043, %r1731, 2;
	mov.u32 	%r2044, 128;
	sub.s32 	%r227, %r2044, %r2043;
	sub.s32 	%r2045, %r2042, %r1732;
	add.s32 	%r228, %r2045, %r2041;
	add.s32 	%r229, %r1729, -1;
	add.s32 	%r230, %r226, 1;
	add.s32 	%r231, %r228, 1;
	rem.s32 	%r2070, %r230, %r227;
	add.s32 	%r2071, %r2070, %r227;
	rem.s32 	%r242, %r2071, %r227;
	rem.s32 	%r2072, %r231, %r227;
	add.s32 	%r2073, %r2072, %r227;
	rem.s32 	%r243, %r2073, %r227;

$L__BB0_137:
	setp.ne.s32 	%p112, %r36, %r225;
	@%p112 bra 	$L__BB0_151;

	shl.b32 	%r233, %r7436, 1;
	rem.s32 	%r2046, %r226, %r227;
	add.s32 	%r2047, %r2046, %r227;
	rem.s32 	%r234, %r2047, %r227;
	rem.s32 	%r2048, %r228, %r227;
	add.s32 	%r2049, %r2048, %r227;
	rem.s32 	%r235, %r2049, %r227;
	@%p111 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	mul.lo.s32 	%r2052, %r233, %r227;
	add.s32 	%r2053, %r2052, %r234;
	mul.wide.s32 	%rd163, %r2053, 4;
	add.s64 	%rd164, %rd19, %rd163;
	ld.global.f32 	%f129, [%rd164];
	add.s32 	%r2054, %r2052, %r235;
	mul.wide.s32 	%rd165, %r2054, 4;
	add.s64 	%rd166, %rd19, %rd165;
	ld.global.f32 	%f130, [%rd166];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r7437, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r7437, {low,high};}

	// end inline asm

$L__BB0_141:
	shl.b32 	%r2055, %r7436, 5;
	add.s32 	%r2056, %r2055, %r40;
	shl.b32 	%r2057, %r2056, 2;
	mul.wide.s32 	%rd167, %r2057, 4;
	add.s64 	%rd21, %rd20, %rd167;
	st.global.u32 	[%rd21], %r7437;
	@%p111 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_142;

$L__BB0_143:
	add.s32 	%r2060, %r233, 1;
	mul.lo.s32 	%r2061, %r2060, %r227;
	add.s32 	%r2062, %r2061, %r234;
	mul.wide.s32 	%rd168, %r2062, 4;
	add.s64 	%rd169, %rd19, %rd168;
	ld.global.f32 	%f133, [%rd169];
	add.s32 	%r2063, %r2061, %r235;
	mul.wide.s32 	%rd170, %r2063, 4;
	add.s64 	%rd171, %rd19, %rd170;
	ld.global.f32 	%f134, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f133;
  cvt.rn.f16.f32 high, %f134;
  mov.b32 %r7438, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_144;

$L__BB0_142:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r7438, {low,high};}

	// end inline asm

$L__BB0_144:
	add.s32 	%r2064, %r229, %r7436;
	rem.s32 	%r2065, %r2064, %r1729;
	shl.b32 	%r2066, %r2065, 5;
	add.s32 	%r2067, %r2066, %r40;
	shl.b32 	%r2068, %r2067, 2;
	or.b32  	%r2069, %r2068, 2;
	mul.wide.s32 	%rd172, %r2069, 4;
	add.s64 	%rd22, %rd20, %rd172;
	st.global.u32 	[%rd22], %r7438;
	@%p111 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_145;

$L__BB0_146:
	mul.lo.s32 	%r2076, %r233, %r227;
	add.s32 	%r2077, %r2076, %r242;
	mul.wide.s32 	%rd173, %r2077, 4;
	add.s64 	%rd174, %rd19, %rd173;
	ld.global.f32 	%f137, [%rd174];
	add.s32 	%r2078, %r2076, %r243;
	mul.wide.s32 	%rd175, %r2078, 4;
	add.s64 	%rd176, %rd19, %rd175;
	ld.global.f32 	%f138, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f137;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r7439, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_147;

$L__BB0_145:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f136;
  mov.b32 %r7439, {low,high};}

	// end inline asm

$L__BB0_147:
	st.global.u32 	[%rd21+4], %r7439;
	@%p111 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	add.s32 	%r2081, %r233, 1;
	mul.lo.s32 	%r2082, %r2081, %r227;
	add.s32 	%r2083, %r2082, %r242;
	mul.wide.s32 	%rd177, %r2083, 4;
	add.s64 	%rd178, %rd19, %rd177;
	ld.global.f32 	%f141, [%rd178];
	add.s32 	%r2084, %r2082, %r243;
	mul.wide.s32 	%rd179, %r2084, 4;
	add.s64 	%rd180, %rd19, %rd179;
	ld.global.f32 	%f142, [%rd180];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f142;
  mov.b32 %r7440, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f140, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f140;
  cvt.rn.f16.f32 high, %f140;
  mov.b32 %r7440, {low,high};}

	// end inline asm

$L__BB0_150:
	st.global.u32 	[%rd22+4], %r7440;

$L__BB0_151:
	add.s32 	%r7436, %r7436, %r1750;
	setp.lt.s32 	%p117, %r7436, %r1729;
	@%p117 bra 	$L__BB0_137;

$L__BB0_281:
	add.s32 	%r2225, %r1724, -1;
	mad.lo.s32 	%r2226, %r1725, 576, 128;
	mul.lo.s32 	%r2227, %r2226, %r2225;
	add.s32 	%r2228, %r69, -64;
	add.s32 	%r2229, %r2228, %r69;
	add.s32 	%r2230, %r1725, -1;
	mad.lo.s32 	%r2231, %r2229, %r2230, %r2227;
	mul.lo.s32 	%r2232, %r2225, %r1725;
	mul.lo.s32 	%r2233, %r2232, 320;
	mad.lo.s32 	%r2234, %r2228, %r2230, %r2233;
	add.s32 	%r385, %r2234, %r2231;
	setp.lt.s32 	%p174, %r385, 1;
	mov.f32 	%f270, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r7655, {low,high};}

	// end inline asm
	@%p174 bra 	$L__BB0_284;

	mov.u32 	%r7476, 0;
	mov.u32 	%r7474, _ZN6kernel5shmemE;

$L__BB0_283:
	st.shared.u32 	[%r7474], %r7655;
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2237, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7474+4], %r2237;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2238, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7474+8], %r2238;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r2239, {low,high};}

	// end inline asm
	st.shared.u32 	[%r7474+12], %r2239;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r7655, {low,high};}

	// end inline asm
	add.s32 	%r7474, %r7474, 16;
	add.s32 	%r7476, %r7476, 4;
	setp.lt.s32 	%p175, %r7476, %r385;
	@%p175 bra 	$L__BB0_283;

$L__BB0_284:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r7656, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r2242, {low,high};}

	// end inline asm
	ld.param.u64 	%rd264, [%rd1+152];
	cvta.to.global.u64 	%rd25, %rd264;
	mov.u32 	%r2243, 31;
	sub.s32 	%r2244, %r2243, %r40;
	setp.gt.s32 	%p176, %r39, %r40;
	selp.b32 	%r2245, %r40, %r2244, %p176;
	shl.b32 	%r2246, %r2245, 2;
	sub.s32 	%r396, %r2246, %r1732;
	shl.b32 	%r2247, %r1731, 2;
	mov.u32 	%r2248, 128;
	sub.s32 	%r397, %r2248, %r2247;
	rem.s32 	%r2249, %r396, %r397;
	add.s32 	%r2250, %r2249, %r397;
	rem.s32 	%r398, %r2250, %r397;
	add.s32 	%r2251, %r396, 2;
	rem.s32 	%r2252, %r2251, %r397;
	add.s32 	%r2253, %r2252, %r397;
	rem.s32 	%r399, %r2253, %r397;
	mul.lo.s32 	%r2254, %r398, 6;
	mul.lo.s32 	%r2255, %r399, 6;
	mul.wide.s32 	%rd265, %r2254, 4;
	add.s64 	%rd26, %rd25, %rd265;
	mul.wide.s32 	%rd266, %r2255, 4;
	add.s64 	%rd27, %rd25, %rd266;
	@%p17 bra 	$L__BB0_286;
	bra.uni 	$L__BB0_285;

$L__BB0_286:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r7478, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_287;

$L__BB0_285:
	ld.global.f32 	%f285, [%rd26];
	ld.global.f32 	%f286, [%rd26+8];
	add.f32 	%f283, %f285, %f286;
	ld.global.f32 	%f287, [%rd27+8];
	ld.global.f32 	%f288, [%rd27];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r7478, {low,high};}

	// end inline asm

$L__BB0_287:
	@%p17 bra 	$L__BB0_289;
	bra.uni 	$L__BB0_288;

$L__BB0_289:
	ld.global.f32 	%f293, [%rd26+4];
	ld.global.f32 	%f294, [%rd27+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r7479, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_290;

$L__BB0_288:
	ld.global.f32 	%f291, [%rd26];
	ld.global.f32 	%f292, [%rd27];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r7479, {low,high};}

	// end inline asm

$L__BB0_290:
	@%p17 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r7480, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	ld.global.f32 	%f297, [%rd26+20];
	ld.global.f32 	%f298, [%rd26+12];
	add.f32 	%f295, %f298, %f297;
	ld.global.f32 	%f299, [%rd27+20];
	ld.global.f32 	%f300, [%rd27+12];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r7480, {low,high};}

	// end inline asm

$L__BB0_293:
	@%p17 bra 	$L__BB0_295;
	bra.uni 	$L__BB0_294;

$L__BB0_295:
	ld.global.f32 	%f305, [%rd26+16];
	ld.global.f32 	%f306, [%rd27+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r7481, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_296;

$L__BB0_294:
	ld.global.f32 	%f303, [%rd26+12];
	ld.global.f32 	%f304, [%rd27+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r7481, {low,high};}

	// end inline asm

$L__BB0_296:
	add.s32 	%r2264, %r396, 1;
	rem.s32 	%r2265, %r2264, %r397;
	add.s32 	%r2266, %r2265, %r397;
	rem.s32 	%r412, %r2266, %r397;
	add.s32 	%r2267, %r396, 3;
	rem.s32 	%r2268, %r2267, %r397;
	add.s32 	%r2269, %r2268, %r397;
	rem.s32 	%r413, %r2269, %r397;
	mul.lo.s32 	%r2270, %r412, 6;
	mul.lo.s32 	%r2271, %r413, 6;
	mul.wide.s32 	%rd267, %r2270, 4;
	add.s64 	%rd28, %rd25, %rd267;
	mul.wide.s32 	%rd268, %r2271, 4;
	add.s64 	%rd29, %rd25, %rd268;
	@%p17 bra 	$L__BB0_298;
	bra.uni 	$L__BB0_297;

$L__BB0_298:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r7482, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_299;

$L__BB0_297:
	ld.global.f32 	%f309, [%rd28];
	ld.global.f32 	%f310, [%rd28+8];
	add.f32 	%f307, %f309, %f310;
	ld.global.f32 	%f311, [%rd29+8];
	ld.global.f32 	%f312, [%rd29];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r7482, {low,high};}

	// end inline asm

$L__BB0_299:
	@%p17 bra 	$L__BB0_301;
	bra.uni 	$L__BB0_300;

$L__BB0_301:
	ld.global.f32 	%f317, [%rd28+4];
	ld.global.f32 	%f318, [%rd29+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r7483, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_302;

$L__BB0_300:
	ld.global.f32 	%f315, [%rd28];
	ld.global.f32 	%f316, [%rd29];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r7483, {low,high};}

	// end inline asm

$L__BB0_302:
	@%p17 bra 	$L__BB0_304;
	bra.uni 	$L__BB0_303;

$L__BB0_304:
	mov.f32 	%f326, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f326;
  cvt.rn.f16.f32 high, %f326;
  mov.b32 %r7484, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_305;

$L__BB0_303:
	ld.global.f32 	%f321, [%rd28+20];
	ld.global.f32 	%f322, [%rd28+12];
	add.f32 	%f319, %f322, %f321;
	ld.global.f32 	%f323, [%rd29+20];
	ld.global.f32 	%f324, [%rd29+12];
	add.f32 	%f320, %f324, %f323;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f319;
  cvt.rn.f16.f32 high, %f320;
  mov.b32 %r7484, {low,high};}

	// end inline asm

$L__BB0_305:
	@%p17 bra 	$L__BB0_307;
	bra.uni 	$L__BB0_306;

$L__BB0_307:
	ld.global.f32 	%f329, [%rd28+16];
	ld.global.f32 	%f330, [%rd29+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f330;
  mov.b32 %r7485, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_308;

$L__BB0_306:
	ld.global.f32 	%f327, [%rd28+12];
	ld.global.f32 	%f328, [%rd29+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7485, {low,high};}

	// end inline asm

$L__BB0_308:
	// begin inline asm
	mov.u32 %r2280, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd269, %r2280;
	// begin inline asm
	mov.u32 %r2281, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd270, %r2281;
	bfi.b64 	%rd30, %rd270, %rd269, 32, 32;
	setp.ne.s64 	%p185, %rd30, 0;
	@%p185 bra 	$L__BB0_310;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_310:
	add.s64 	%rd31, %rd30, 4;
	mov.u32 	%r2282, %nctaid.y;
	mov.u32 	%r2283, %nctaid.x;
	mul.lo.s32 	%r2284, %r2283, %r2282;
	mov.u32 	%r2285, %nctaid.z;
	mul.lo.s32 	%r426, %r2284, %r2285;
	neg.s32 	%r2286, %r36;
	add.s32 	%r2287, %r40, %r35;
	setp.ne.s32 	%p186, %r2287, %r2286;
	mov.u32 	%r2288, %ctaid.x;
	add.s32 	%r427, %r2288, %r37;
	neg.s32 	%r428, %r38;
	bar.sync 	0;
	@%p186 bra 	$L__BB0_314;

	setp.eq.s32 	%p187, %r427, %r428;
	mov.u32 	%r2291, -2147483647;
	sub.s32 	%r2292, %r2291, %r426;
	selp.b32 	%r2290, %r2292, 1, %p187;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2289,[%rd31],%r2290;
	// end inline asm

$L__BB0_312:
	ld.volatile.u32 	%r2293, [%rd31];
	xor.b32  	%r2294, %r2293, %r2289;
	setp.gt.s32 	%p188, %r2294, -1;
	@%p188 bra 	$L__BB0_312;

	// begin inline asm
	ld.acquire.gpu.u32 %r2295,[%rd31];
	// end inline asm

$L__BB0_314:
	bar.sync 	0;
	setp.lt.s32 	%p189, %r43, 1;
	@%p189 bra 	$L__BB0_878;

	shr.s32 	%r2309, %r1734, 31;
	shr.u32 	%r2310, %r2309, 30;
	add.s32 	%r2311, %r1734, %r2310;
	shr.s32 	%r430, %r2311, 2;
	add.s32 	%r2312, %r40, 25;
	mul.hi.s32 	%r2313, %r2312, 1321528399;
	shr.u32 	%r2314, %r2313, 31;
	shr.s32 	%r2315, %r2313, 3;
	add.s32 	%r2316, %r2315, %r2314;
	mul.lo.s32 	%r2317, %r2316, 26;
	sub.s32 	%r2318, %r2312, %r2317;
	add.s32 	%r2319, %r40, 27;
	mul.hi.s32 	%r2320, %r2319, 1321528399;
	shr.u32 	%r2321, %r2320, 31;
	shr.s32 	%r2322, %r2320, 3;
	add.s32 	%r2323, %r2322, %r2321;
	mul.lo.s32 	%r2324, %r2323, 26;
	sub.s32 	%r2325, %r2319, %r2324;
	shr.u32 	%r2326, %r1734, 31;
	add.s32 	%r2327, %r1734, %r2326;
	and.b32  	%r2328, %r2327, -2;
	sub.s32 	%r431, %r1734, %r2328;
	setp.lt.s32 	%p190, %r40, 26;
	selp.b32 	%r432, %r2318, %r40, %p190;
	setp.lt.s32 	%p191, %r398, %r1743;
	setp.ge.s32 	%p192, %r398, %r1742;
	and.pred  	%p13, %p191, %p192;
	setp.lt.s32 	%p193, %r412, %r1743;
	setp.ge.s32 	%p194, %r412, %r1742;
	and.pred  	%p14, %p193, %p194;
	setp.lt.s32 	%p195, %r399, %r1743;
	setp.ge.s32 	%p196, %r399, %r1742;
	and.pred  	%p15, %p195, %p196;
	setp.lt.s32 	%p197, %r413, %r1743;
	setp.ge.s32 	%p198, %r413, %r1742;
	and.pred  	%p16, %p197, %p198;
	selp.b32 	%r433, %r2325, %r40, %p190;
	mov.u32 	%r2308, 0;
	// begin inline asm
	{mov.u32 %r2329, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2655, %r2329, 8;
	add.s32 	%r2656, %r2655, -8192;
	or.b32  	%r2333, %r2656, 31;
	mul.wide.s32 	%rd281, %r40, 16;
	mul.wide.s32 	%rd283, %r40, 8;
	mov.u32 	%r7486, %r2308;
	mov.u32 	%r7487, %r2308;
	mov.u32 	%r7488, %r2308;
	mov.u32 	%r7489, %r2308;
	mov.u32 	%r7490, %r2308;
	mov.u32 	%r7491, %r2308;
	mov.u32 	%r7492, %r2308;
	mov.u32 	%r7493, %r2308;
	mov.u32 	%r7494, %r2308;
	mov.u32 	%r7495, %r2308;
	mov.u32 	%r7496, %r2308;
	mov.u32 	%r7497, %r2308;
	mov.u32 	%r7785, %r2242;
	mov.u32 	%r7786, %r2242;
	mov.u32 	%r7783, %r2242;
	mov.u32 	%r7784, %r2242;
	mov.u32 	%r7805, %r2242;
	mov.u32 	%r7806, %r2242;
	mov.u32 	%r7819, %r2242;
	mov.u32 	%r7807, %r2242;
	mov.u32 	%r7821, %r2242;
	mov.u32 	%r7808, %r2242;
	mov.u32 	%r7809, %r2242;
	mov.u32 	%r7810, %r2242;
	mov.u32 	%r7811, %r2242;
	mov.u32 	%r7812, %r2242;
	mov.u32 	%r7813, %r2242;
	mov.u32 	%r7814, %r2242;
	mov.u32 	%r7823, %r2242;
	mov.u32 	%r7824, %r2242;
	mov.u32 	%r7825, %r2242;
	mov.u32 	%r7826, %r2242;
	mov.u32 	%r7827, %r2242;
	mov.u32 	%r7828, %r2242;
	mov.u32 	%r7815, %r2242;
	mov.u32 	%r7816, %r2242;
	mov.u32 	%r7829, %r2242;
	mov.u32 	%r7830, %r2242;
	mov.u32 	%r7817, %r2242;
	mov.u32 	%r7818, %r2242;
	mov.u32 	%r7787, %r2242;
	mov.u32 	%r7788, %r2242;
	mov.u32 	%r7775, %r2242;
	mov.u32 	%r7776, %r2242;
	mov.u32 	%r7777, %r2242;
	mov.u32 	%r7778, %r2242;
	mov.u32 	%r7789, %r2242;
	mov.u32 	%r7790, %r2242;
	mov.u32 	%r7791, %r2242;
	mov.u32 	%r7792, %r2242;
	mov.u32 	%r7793, %r2242;
	mov.u32 	%r7794, %r2242;
	mov.u32 	%r7779, %r2242;
	mov.u32 	%r7780, %r2242;
	mov.u32 	%r7781, %r2242;
	mov.u32 	%r7782, %r2242;
	mov.u32 	%r7795, %r2242;
	mov.u32 	%r7796, %r2242;
	mov.u32 	%r7797, %r2242;
	mov.u32 	%r7798, %r2242;
	mov.u32 	%r7546, %r2242;
	mov.u32 	%r7547, %r2242;
	mov.u32 	%r7845, %r2242;
	mov.u32 	%r7846, %r2242;
	mov.u32 	%r7552, %r2242;
	mov.u32 	%r7553, %r2242;
	mov.u32 	%r7554, %r2242;
	mov.u32 	%r7555, %r2242;
	mov.u32 	%r7847, %r2242;
	mov.u32 	%r7848, %r2242;
	mov.u32 	%r7558, %r2242;
	mov.u32 	%r7849, %r2242;
	mov.u32 	%r7560, %r2242;
	mov.u32 	%r7561, %r2242;
	mov.u32 	%r7850, %r2242;
	mov.u32 	%r7563, %r2242;
	mov.u32 	%r7564, %r2242;
	mov.u32 	%r7565, %r2242;
	mov.u32 	%r7799, %r2242;
	mov.u32 	%r7800, %r2242;
	mov.u32 	%r7568, %r2242;
	mov.u32 	%r7569, %r2242;
	mov.u32 	%r7572, %r2242;
	mov.u32 	%r7573, %r2242;
	mov.u32 	%r7574, %r2242;
	mov.u32 	%r7575, %r2242;
	mov.u32 	%r7576, %r2242;
	mov.u32 	%r7854, %r2242;
	mov.u32 	%r7578, %r2242;
	mov.u32 	%r7579, %r2242;
	mov.u32 	%r7580, %r2242;
	mov.u32 	%r7581, %r2242;
	mov.u32 	%r7582, %r2242;
	mov.u32 	%r7583, %r2242;
	mov.u32 	%r7584, %r2242;
	mov.u32 	%r7856, %r2242;
	mov.u32 	%r7586, %r2242;
	mov.u32 	%r7587, %r2242;
	mov.u32 	%r7588, %r2242;
	mov.u32 	%r7857, %r2242;
	mov.u32 	%r7590, %r2242;
	mov.u32 	%r7591, %r2242;
	mov.u32 	%r7592, %r2242;
	mov.u32 	%r7593, %r2242;
	mov.u32 	%r7594, %r2242;
	mov.u32 	%r7595, %r2242;
	mov.u32 	%r7596, %r2242;
	mov.u32 	%r7858, %r2242;
	mov.u32 	%r7598, %r2242;
	mov.u32 	%r7801, %r2242;
	mov.u32 	%r7600, %r2242;
	mov.u32 	%r7601, %r2242;
	mov.u32 	%r7602, %r2242;
	mov.u32 	%r7603, %r2242;
	mov.u32 	%r7802, %r2242;
	mov.u32 	%r7605, %r2242;
	mov.u32 	%r7606, %r2242;
	mov.u32 	%r7607, %r2242;
	mov.u32 	%r7608, %r2242;
	mov.u32 	%r7609, %r2242;
	mov.u32 	%r7610, %r2242;
	mov.u32 	%r7611, %r2242;
	mov.u32 	%r7612, %r2242;
	mov.u32 	%r7613, %r2242;
	mov.u32 	%r7614, %r2242;
	mov.u32 	%r7615, %r2242;
	mov.u32 	%r7616, %r2242;
	mov.u32 	%r7617, %r2242;
	mov.u32 	%r7618, %r2242;
	mov.u32 	%r7619, %r2242;
	mov.u32 	%r7620, %r2242;
	mov.u32 	%r7621, %r2242;
	mov.u32 	%r7622, %r2242;
	mov.u32 	%r7623, %r2242;
	mov.u32 	%r7624, %r2242;
	mov.u32 	%r7625, %r2242;
	mov.u32 	%r7626, %r2242;
	mov.u32 	%r7627, %r2242;
	mov.u32 	%r7628, %r2242;
	mov.u32 	%r7629, %r2242;
	mov.u32 	%r7630, %r2242;
	mov.u32 	%r7631, %r2242;
	mov.u32 	%r7632, %r2242;
	mov.u32 	%r7633, %r2242;
	mov.u32 	%r7634, %r2242;
	mov.u32 	%r7635, %r2242;
	mov.u32 	%r7636, %r2242;
	mov.u32 	%r7637, %r2242;
	mov.u32 	%r7638, %r2242;
	mov.u32 	%r7639, %r2242;
	mov.u32 	%r7640, %r2242;
	mov.u32 	%r7641, %r2242;
	mov.u32 	%r7642, %r2242;
	mov.u32 	%r7643, %r2242;
	mov.u32 	%r7644, %r2242;
	mov.u32 	%r7645, %r2242;
	mov.u32 	%r7646, %r2242;
	mov.u32 	%r7647, %r2242;
	mov.u32 	%r7648, %r2242;
	mov.u32 	%r7649, %r2242;
	mov.u32 	%r7650, %r2242;
	mov.u32 	%r7651, %r2242;
	mov.u32 	%r7652, %r2242;
	mov.u32 	%r7653, %r2242;
	mov.u32 	%r7654, %r2308;

$L__BB0_316:
	mov.u32 	%r545, %r7858;
	mov.u32 	%r541, %r7593;
	mov.u32 	%r537, %r7857;
	mov.u32 	%r535, %r7587;
	mov.u32 	%r533, %r7856;
	mov.u32 	%r525, %r7854;
	mov.u32 	%r7593, %r7850;
	mov.u32 	%r507, %r7849;
	mov.u32 	%r7587, %r7848;
	mov.u32 	%r504, %r7847;
	mov.u32 	%r499, %r7846;
	mov.u32 	%r498, %r7845;
	sub.s32 	%r7381, %r1729, %r42;
	mov.u32 	%r2344, 1;
	not.b32 	%r2618, %r37;
	mov.u32 	%r2610, -1;
	add.s32 	%r2619, %r1726, %r2618;
	mul.lo.s32 	%r2620, %r2619, %r1728;
	add.s32 	%r2621, %r7654, %r2620;
	not.b32 	%r2623, %r38;
	add.s32 	%r2624, %r1727, %r2623;
	mul.lo.s32 	%r2625, %r2624, %r1728;
	add.s32 	%r2626, %r7654, %r2625;
	add.s32 	%r2627, %r2620, %r2625;
	add.s32 	%r2628, %r2627, %r1729;
	not.b32 	%r2629, %r35;
	add.s32 	%r2630, %r1724, %r2629;
	mad.lo.s32 	%r2631, %r2619, %r1724, %r2630;
	not.b32 	%r2632, %r36;
	add.s32 	%r2633, %r1725, %r2632;
	mad.lo.s32 	%r2634, %r2624, %r1725, %r2633;
	add.s32 	%r2635, %r2631, %r2634;
	shl.b32 	%r2636, %r2635, 1;
	add.s32 	%r2637, %r2628, %r2636;
	add.s32 	%r2638, %r7654, %r2637;
	add.s32 	%r2639, %r7654, %r2627;
	div.s32 	%r2640, %r2638, %r1729;
	neg.s32 	%r2641, %r1729;
	sub.s32 	%r2644, %r42, %r1729;
	sub.s32 	%r2645, %r2631, %r2634;
	shl.b32 	%r2646, %r2645, 1;
	add.s32 	%r2647, %r2646, %r1730;
	mad.lo.s32 	%r2648, %r2640, %r42, %r2647;
	mad.lo.s32 	%r2649, %r2640, %r2644, %r2639;
	div.s32 	%r2650, %r2648, %r1730;
	mul.lo.s32 	%r2651, %r2650, %r1730;
	sub.s32 	%r2654, %r1751, %r1730;
	mov.u32 	%r2428, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2330,%r7656,%r2308,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2336, %r7479, %r2330, %p17;
	// begin inline asm
	{mul.f16x2 %r7740,%r2336,%r7653;
}
	// end inline asm
	selp.b32 	%r2339, %r7483, %r2330, %p17;
	// begin inline asm
	{mul.f16x2 %r7738,%r2339,%r7652;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2342,%r7656,%r2344,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2348, %r7479, %r2342, %p17;
	// begin inline asm
	{mul.f16x2 %r7739,%r2348,%r7651;
}
	// end inline asm
	selp.b32 	%r2351, %r7483, %r2342, %p17;
	// begin inline asm
	{mul.f16x2 %r7737,%r2351,%r7650;
}
	// end inline asm
	mov.u32 	%r2356, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2354,%r7656,%r2356,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2360, %r7479, %r2354, %p17;
	// begin inline asm
	{mul.f16x2 %r7736,%r2360,%r7649;
}
	// end inline asm
	selp.b32 	%r2363, %r7483, %r2354, %p17;
	// begin inline asm
	{mul.f16x2 %r7735,%r2363,%r7648;
}
	// end inline asm
	mov.u32 	%r2368, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2366,%r7656,%r2368,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2372, %r7479, %r2366, %p17;
	// begin inline asm
	{mul.f16x2 %r7734,%r2372,%r7830;
}
	// end inline asm
	selp.b32 	%r2375, %r7483, %r2366, %p17;
	// begin inline asm
	{mul.f16x2 %r7732,%r2375,%r7829;
}
	// end inline asm
	mov.u32 	%r2380, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2378,%r7656,%r2380,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2384, %r7479, %r2378, %p17;
	// begin inline asm
	{mul.f16x2 %r7733,%r2384,%r7647;
}
	// end inline asm
	selp.b32 	%r2387, %r7483, %r2378, %p17;
	// begin inline asm
	{mul.f16x2 %r7731,%r2387,%r7646;
}
	// end inline asm
	mov.u32 	%r2392, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2390,%r7656,%r2392,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2396, %r7479, %r2390, %p17;
	// begin inline asm
	{mul.f16x2 %r7730,%r2396,%r7645;
}
	// end inline asm
	selp.b32 	%r2399, %r7483, %r2390, %p17;
	// begin inline asm
	{mul.f16x2 %r7727,%r2399,%r7644;
}
	// end inline asm
	mov.u32 	%r2404, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2402,%r7656,%r2404,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2408, %r7479, %r2402, %p17;
	// begin inline asm
	{mul.f16x2 %r7729,%r2408,%r7643;
}
	// end inline asm
	selp.b32 	%r2411, %r7483, %r2402, %p17;
	// begin inline asm
	{mul.f16x2 %r7726,%r2411,%r7642;
}
	// end inline asm
	mov.u32 	%r2416, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2414,%r7656,%r2416,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2420, %r7479, %r2414, %p17;
	// begin inline asm
	{mul.f16x2 %r7728,%r2420,%r7641;
}
	// end inline asm
	selp.b32 	%r2423, %r7483, %r2414, %p17;
	// begin inline asm
	{mul.f16x2 %r7725,%r2423,%r7640;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2426,%r7656,%r2428,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2432, %r7479, %r2426, %p17;
	// begin inline asm
	{mul.f16x2 %r7724,%r2432,%r7639;
}
	// end inline asm
	selp.b32 	%r2435, %r7483, %r2426, %p17;
	// begin inline asm
	{mul.f16x2 %r7721,%r2435,%r7638;
}
	// end inline asm
	mov.u32 	%r2440, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2438,%r7656,%r2440,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2444, %r7479, %r2438, %p17;
	// begin inline asm
	{mul.f16x2 %r7723,%r2444,%r7637;
}
	// end inline asm
	selp.b32 	%r2447, %r7483, %r2438, %p17;
	// begin inline asm
	{mul.f16x2 %r7720,%r2447,%r7636;
}
	// end inline asm
	mov.u32 	%r2452, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2450,%r7656,%r2452,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2456, %r7479, %r2450, %p17;
	// begin inline asm
	{mul.f16x2 %r7722,%r2456,%r7635;
}
	// end inline asm
	selp.b32 	%r2459, %r7483, %r2450, %p17;
	// begin inline asm
	{mul.f16x2 %r7719,%r2459,%r7634;
}
	// end inline asm
	mov.u32 	%r2464, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2462,%r7656,%r2464,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2468, %r7479, %r2462, %p17;
	// begin inline asm
	{mul.f16x2 %r7718,%r2468,%r7816;
}
	// end inline asm
	selp.b32 	%r2471, %r7483, %r2462, %p17;
	// begin inline asm
	{mul.f16x2 %r7717,%r2471,%r7815;
}
	// end inline asm
	mov.u32 	%r2476, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2474,%r7656,%r2476,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2480, %r7479, %r2474, %p17;
	// begin inline asm
	{mul.f16x2 %r7716,%r2480,%r7828;
}
	// end inline asm
	selp.b32 	%r2483, %r7483, %r2474, %p17;
	// begin inline asm
	{mul.f16x2 %r7714,%r2483,%r7826;
}
	// end inline asm
	mov.u32 	%r2488, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2486,%r7656,%r2488,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2492, %r7479, %r2486, %p17;
	// begin inline asm
	{mul.f16x2 %r7715,%r2492,%r7827;
}
	// end inline asm
	selp.b32 	%r2495, %r7483, %r2486, %p17;
	// begin inline asm
	{mul.f16x2 %r7713,%r2495,%r7825;
}
	// end inline asm
	mov.u32 	%r2500, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2498,%r7656,%r2500,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2504, %r7479, %r2498, %p17;
	// begin inline asm
	{mul.f16x2 %r7712,%r2504,%r7824;
}
	// end inline asm
	selp.b32 	%r2507, %r7483, %r2498, %p17;
	// begin inline asm
	{mul.f16x2 %r7709,%r2507,%r7823;
}
	// end inline asm
	mov.u32 	%r2512, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2510,%r7656,%r2512,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2516, %r7479, %r2510, %p17;
	// begin inline asm
	{mul.f16x2 %r7711,%r2516,%r7633;
}
	// end inline asm
	selp.b32 	%r2519, %r7483, %r2510, %p17;
	// begin inline asm
	{mul.f16x2 %r7708,%r2519,%r7632;
}
	// end inline asm
	mov.u32 	%r2524, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2522,%r7656,%r2524,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2528, %r7479, %r2522, %p17;
	// begin inline asm
	{mul.f16x2 %r7710,%r2528,%r7631;
}
	// end inline asm
	selp.b32 	%r2531, %r7483, %r2522, %p17;
	// begin inline asm
	{mul.f16x2 %r7707,%r2531,%r7630;
}
	// end inline asm
	mov.u32 	%r2536, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2534,%r7656,%r2536,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2540, %r7479, %r2534, %p17;
	// begin inline asm
	{mul.f16x2 %r7706,%r2540,%r7814;
}
	// end inline asm
	selp.b32 	%r2543, %r7483, %r2534, %p17;
	// begin inline asm
	{mul.f16x2 %r7703,%r2543,%r7812;
}
	// end inline asm
	mov.u32 	%r2548, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2546,%r7656,%r2548,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2552, %r7479, %r2546, %p17;
	// begin inline asm
	{mul.f16x2 %r7705,%r2552,%r7813;
}
	// end inline asm
	selp.b32 	%r2555, %r7483, %r2546, %p17;
	// begin inline asm
	{mul.f16x2 %r7702,%r2555,%r7811;
}
	// end inline asm
	mov.u32 	%r2560, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2558,%r7656,%r2560,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2564, %r7479, %r2558, %p17;
	// begin inline asm
	{mul.f16x2 %r7704,%r2564,%r7629;
}
	// end inline asm
	selp.b32 	%r2567, %r7483, %r2558, %p17;
	// begin inline asm
	{mul.f16x2 %r7701,%r2567,%r7628;
}
	// end inline asm
	mov.u32 	%r2572, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2570,%r7656,%r2572,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2576, %r7479, %r2570, %p17;
	// begin inline asm
	{mul.f16x2 %r7700,%r2576,%r7810;
}
	// end inline asm
	selp.b32 	%r2579, %r7483, %r2570, %p17;
	// begin inline asm
	{mul.f16x2 %r7699,%r2579,%r7809;
}
	// end inline asm
	mov.u32 	%r2584, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2582,%r7656,%r2584,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2588, %r7479, %r2582, %p17;
	// begin inline asm
	{mul.f16x2 %r7698,%r2588,%r7808;
}
	// end inline asm
	selp.b32 	%r2591, %r7483, %r2582, %p17;
	// begin inline asm
	{mul.f16x2 %r7696,%r2591,%r7807;
}
	// end inline asm
	mov.u32 	%r2596, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2594,%r7656,%r2596,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2600, %r7479, %r2594, %p17;
	// begin inline asm
	{mul.f16x2 %r7697,%r2600,%r7821;
}
	// end inline asm
	selp.b32 	%r2603, %r7483, %r2594, %p17;
	// begin inline asm
	{mul.f16x2 %r7695,%r2603,%r7819;
}
	// end inline asm
	mov.u32 	%r2608, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2606,%r7656,%r2608,%r2333,%r2610;
}
	// end inline asm
	selp.b32 	%r2612, %r7479, %r2606, %p17;
	// begin inline asm
	{mul.f16x2 %r7694,%r2612,%r7806;
}
	// end inline asm
	selp.b32 	%r2615, %r7483, %r2606, %p17;
	// begin inline asm
	{mul.f16x2 %r7693,%r2615,%r7805;
}
	// end inline asm
	rem.s32 	%r653, %r2621, %r68;
	rem.s32 	%r654, %r2626, %r7381;
	mad.lo.s32 	%r655, %r2640, %r2641, %r2638;
	sub.s32 	%r656, %r2648, %r2651;
	mad.lo.s32 	%r657, %r2650, %r2654, %r2649;
	ld.param.u64 	%rd274, [%rd1+144];
	cvta.to.global.u64 	%rd275, %rd274;
	shl.b32 	%r2704, %r657, 1;
	mul.wide.s32 	%rd276, %r2704, 4;
	add.s64 	%rd32, %rd275, %rd276;
	@%p109 bra 	$L__BB0_324;
	bra.uni 	$L__BB0_317;

$L__BB0_324:
	add.s32 	%r2907, %r1746, 1;
	setp.lt.s32 	%p206, %r657, %r2907;
	setp.eq.s32 	%p207, %r430, %r40;
	setp.gt.s32 	%p208, %r657, -1;
	and.pred  	%p209, %p207, %p208;
	and.pred  	%p210, %p206, %p209;
	@%p210 bra 	$L__BB0_326;
	bra.uni 	$L__BB0_325;

$L__BB0_326:
	ld.global.f32 	%f341, [%rd32];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f341;
  mov.b32 %r7659, {low,low};}

	// end inline asm
	ld.global.f32 	%f342, [%rd32+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f342;
  mov.b32 %r7660, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_327;

$L__BB0_317:
	add.s32 	%r2707, %r1746, 1;
	setp.lt.s32 	%p201, %r657, %r2707;
	setp.gt.s32 	%p202, %r657, -1;
	and.pred  	%p203, %p202, %p201;
	@%p203 bra 	$L__BB0_319;
	bra.uni 	$L__BB0_318;

$L__BB0_319:
	ld.global.f32 	%f335, [%rd32];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f335;
  mov.b32 %r7657, {low,low};}

	// end inline asm
	ld.global.f32 	%f336, [%rd32+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f336;
  mov.b32 %r7658, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_320;

$L__BB0_325:
	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7659, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7660, {low,high};}

	// end inline asm

$L__BB0_327:
	mov.u32 	%r2915, 0;
	mov.u32 	%r2926, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2913,%r7655,%r2915,%r2333,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2918,%r7659,%r2913;
}
	// end inline asm
	mov.u32 	%r2924, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2922,%r7655,%r2924,%r2333,%r2926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2927,%r7660,%r2922;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7662,%r2918,%r2927;
}
	// end inline asm
	setp.eq.s32 	%p211, %r431, 0;
	mov.u32 	%r7661, %r7662;
	@%p211 bra 	$L__BB0_329;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7661, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r7661;
}
	// end inline asm
	setp.eq.s32 	%p212, %r431, 1;
	@%p212 bra 	$L__BB0_331;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7662, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r7662;
}
	// end inline asm
	mov.u32 	%r2948, 2;
	mov.u32 	%r2959, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2946,%r7655,%r2948,%r2333,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2951,%r7659,%r2946;
}
	// end inline asm
	mov.u32 	%r2957, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2955,%r7655,%r2957,%r2333,%r2959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2960,%r7660,%r2955;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7664,%r2951,%r2960;
}
	// end inline asm
	mov.u32 	%r7663, %r7664;
	@%p211 bra 	$L__BB0_333;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7663, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7739,%r7739,%r7663;
}
	// end inline asm
	@%p212 bra 	$L__BB0_335;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7664, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7737,%r7737,%r7664;
}
	// end inline asm
	mov.u32 	%r2981, 4;
	mov.u32 	%r2992, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2979,%r7655,%r2981,%r2333,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2984,%r7659,%r2979;
}
	// end inline asm
	mov.u32 	%r2990, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2988,%r7655,%r2990,%r2333,%r2992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2993,%r7660,%r2988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7666,%r2984,%r2993;
}
	// end inline asm
	mov.u32 	%r7665, %r7666;
	@%p211 bra 	$L__BB0_337;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7665, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r7665;
}
	// end inline asm
	@%p212 bra 	$L__BB0_339;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7666, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r7666;
}
	// end inline asm
	mov.u32 	%r3014, 6;
	mov.u32 	%r3025, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3012,%r7655,%r3014,%r2333,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3017,%r7659,%r3012;
}
	// end inline asm
	mov.u32 	%r3023, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r3021,%r7655,%r3023,%r2333,%r3025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3026,%r7660,%r3021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7668,%r3017,%r3026;
}
	// end inline asm
	mov.u32 	%r7667, %r7668;
	@%p211 bra 	$L__BB0_341;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7667, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r7667;
}
	// end inline asm
	@%p212 bra 	$L__BB0_343;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7668, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r7668;
}
	// end inline asm
	mov.u32 	%r3047, 8;
	mov.u32 	%r3058, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3045,%r7655,%r3047,%r2333,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3050,%r7659,%r3045;
}
	// end inline asm
	mov.u32 	%r3056, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r3054,%r7655,%r3056,%r2333,%r3058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3059,%r7660,%r3054;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7670,%r3050,%r3059;
}
	// end inline asm
	mov.u32 	%r7669, %r7670;
	@%p211 bra 	$L__BB0_345;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7669, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7733,%r7733,%r7669;
}
	// end inline asm
	@%p212 bra 	$L__BB0_347;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7670, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7731,%r7731,%r7670;
}
	// end inline asm
	mov.u32 	%r3080, 10;
	mov.u32 	%r3091, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3078,%r7655,%r3080,%r2333,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3083,%r7659,%r3078;
}
	// end inline asm
	mov.u32 	%r3089, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3087,%r7655,%r3089,%r2333,%r3091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3092,%r7660,%r3087;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7672,%r3083,%r3092;
}
	// end inline asm
	mov.u32 	%r7671, %r7672;
	@%p211 bra 	$L__BB0_349;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7671, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r7671;
}
	// end inline asm
	@%p212 bra 	$L__BB0_351;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7672, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r7672;
}
	// end inline asm
	mov.u32 	%r3113, 12;
	mov.u32 	%r3124, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3111,%r7655,%r3113,%r2333,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3116,%r7659,%r3111;
}
	// end inline asm
	mov.u32 	%r3122, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r3120,%r7655,%r3122,%r2333,%r3124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3125,%r7660,%r3120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7674,%r3116,%r3125;
}
	// end inline asm
	mov.u32 	%r7673, %r7674;
	@%p211 bra 	$L__BB0_353;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7673, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7729,%r7729,%r7673;
}
	// end inline asm
	@%p212 bra 	$L__BB0_355;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7674, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7726,%r7726,%r7674;
}
	// end inline asm
	mov.u32 	%r3146, 14;
	mov.u32 	%r3157, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3144,%r7655,%r3146,%r2333,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3149,%r7659,%r3144;
}
	// end inline asm
	mov.u32 	%r3155, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3153,%r7655,%r3155,%r2333,%r3157;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3158,%r7660,%r3153;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7676,%r3149,%r3158;
}
	// end inline asm
	mov.u32 	%r7675, %r7676;
	@%p211 bra 	$L__BB0_357;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7675, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r7675;
}
	// end inline asm
	@%p212 bra 	$L__BB0_359;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7676, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r7676;
}
	// end inline asm
	mov.u32 	%r3179, 16;
	mov.u32 	%r3190, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3177,%r7655,%r3179,%r2333,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3182,%r7659,%r3177;
}
	// end inline asm
	mov.u32 	%r3188, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3186,%r7655,%r3188,%r2333,%r3190;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3191,%r7660,%r3186;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7678,%r3182,%r3191;
}
	// end inline asm
	mov.u32 	%r7677, %r7678;
	@%p211 bra 	$L__BB0_361;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7677, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7723,%r7723,%r7677;
}
	// end inline asm
	@%p212 bra 	$L__BB0_363;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7678, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7720,%r7720,%r7678;
}
	// end inline asm
	mov.u32 	%r3212, 18;
	mov.u32 	%r3223, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3210,%r7655,%r3212,%r2333,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3215,%r7659,%r3210;
}
	// end inline asm
	mov.u32 	%r3221, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r3219,%r7655,%r3221,%r2333,%r3223;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3224,%r7660,%r3219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7680,%r3215,%r3224;
}
	// end inline asm
	mov.u32 	%r7679, %r7680;
	@%p211 bra 	$L__BB0_365;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7679, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r7679;
}
	// end inline asm
	@%p212 bra 	$L__BB0_367;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7680, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r7680;
}
	// end inline asm
	mov.u32 	%r3245, 20;
	mov.u32 	%r3256, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3243,%r7655,%r3245,%r2333,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3248,%r7659,%r3243;
}
	// end inline asm
	mov.u32 	%r3254, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r3252,%r7655,%r3254,%r2333,%r3256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3257,%r7660,%r3252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7682,%r3248,%r3257;
}
	// end inline asm
	mov.u32 	%r7681, %r7682;
	@%p211 bra 	$L__BB0_369;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7681, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7716,%r7716,%r7681;
}
	// end inline asm
	@%p212 bra 	$L__BB0_371;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7682, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7714,%r7714,%r7682;
}
	// end inline asm
	mov.u32 	%r3278, 22;
	mov.u32 	%r3289, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3276,%r7655,%r3278,%r2333,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3281,%r7659,%r3276;
}
	// end inline asm
	mov.u32 	%r3287, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3285,%r7655,%r3287,%r2333,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3290,%r7660,%r3285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7684,%r3281,%r3290;
}
	// end inline asm
	mov.u32 	%r7683, %r7684;
	@%p211 bra 	$L__BB0_373;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7683, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r7683;
}
	// end inline asm
	@%p212 bra 	$L__BB0_375;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7684, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r7684;
}
	// end inline asm
	mov.u32 	%r3311, 24;
	mov.u32 	%r3322, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3309,%r7655,%r3311,%r2333,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3314,%r7659,%r3309;
}
	// end inline asm
	mov.u32 	%r3320, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3318,%r7655,%r3320,%r2333,%r3322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3323,%r7660,%r3318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7686,%r3314,%r3323;
}
	// end inline asm
	mov.u32 	%r7685, %r7686;
	@%p211 bra 	$L__BB0_377;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7685, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7711,%r7711,%r7685;
}
	// end inline asm
	@%p212 bra 	$L__BB0_379;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7686, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7708,%r7708,%r7686;
}
	// end inline asm
	mov.u32 	%r3344, 26;
	mov.u32 	%r3355, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3342,%r7655,%r3344,%r2333,%r3355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3347,%r7659,%r3342;
}
	// end inline asm
	mov.u32 	%r3353, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3351,%r7655,%r3353,%r2333,%r3355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3356,%r7660,%r3351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7688,%r3347,%r3356;
}
	// end inline asm
	mov.u32 	%r7687, %r7688;
	@%p211 bra 	$L__BB0_381;

	mov.f32 	%f396, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f396;
  mov.b32 %r7687, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r7687;
}
	// end inline asm
	@%p212 bra 	$L__BB0_383;

	mov.f32 	%f398, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f398;
  cvt.rn.f16.f32 high, %f398;
  mov.b32 %r7688, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r7688;
}
	// end inline asm
	mov.u32 	%r3377, 28;
	mov.u32 	%r3388, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3375,%r7655,%r3377,%r2333,%r3388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3380,%r7659,%r3375;
}
	// end inline asm
	mov.u32 	%r3386, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3384,%r7655,%r3386,%r2333,%r3388;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3389,%r7660,%r3384;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7690,%r3380,%r3389;
}
	// end inline asm
	mov.u32 	%r7689, %r7690;
	@%p211 bra 	$L__BB0_385;

	mov.f32 	%f400, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f400;
  cvt.rn.f16.f32 high, %f400;
  mov.b32 %r7689, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7705,%r7705,%r7689;
}
	// end inline asm
	@%p212 bra 	$L__BB0_387;

	mov.f32 	%f402, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f402;
  cvt.rn.f16.f32 high, %f402;
  mov.b32 %r7690, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7702,%r7702,%r7690;
}
	// end inline asm
	mov.u32 	%r3419, 31;
	mov.u32 	%r3410, 30;
	mov.u32 	%r3421, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3408,%r7655,%r3410,%r2333,%r3421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3413,%r7659,%r3408;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3417,%r7655,%r3419,%r2333,%r3421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3422,%r7660,%r3417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7692,%r3413,%r3422;
}
	// end inline asm
	mov.u32 	%r7691, %r7692;
	@%p211 bra 	$L__BB0_389;

	mov.f32 	%f404, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f404;
  mov.b32 %r7691, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7698,%r7698,%r7691;
}
	// end inline asm
	@%p212 bra 	$L__BB0_391;

	mov.f32 	%f406, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f406;
  mov.b32 %r7692, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7696,%r7696,%r7692;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_318:
	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7657, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7658, {low,high};}

	// end inline asm

$L__BB0_320:
	setp.eq.s32 	%p204, %r656, %r1734;
	@%p204 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_321;

$L__BB0_323:
	// begin inline asm
	{mul.f16x2 %r2809,%r7657,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7740,%r7740,%r2809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2815,%r7657,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7728,%r7728,%r2815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2821,%r7657,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7730,%r7730,%r2821;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2827,%r7657,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7710,%r7710,%r2827;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2833,%r7657,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7712,%r7712,%r2833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2839,%r7657,%r7495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7697,%r7697,%r2839;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2845,%r7658,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7734,%r7734,%r2845;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2851,%r7658,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7715,%r7715,%r2851;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2857,%r7657,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7738,%r7738,%r2857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2863,%r7657,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7725,%r7725,%r2863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2869,%r7657,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7727,%r7727,%r2869;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2875,%r7657,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7707,%r7707,%r2875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2881,%r7657,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7709,%r7709,%r2881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2887,%r7657,%r7494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7695,%r7695,%r2887;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2893,%r7658,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7732,%r7732,%r2893;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2899,%r7658,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7713,%r7713,%r2899;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_321:
	add.s32 	%r2712, %r1734, -2;
	setp.ne.s32 	%p205, %r656, %r2712;
	@%p205 bra 	$L__BB0_392;

	// begin inline asm
	{mul.f16x2 %r2713,%r7657,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7718,%r7718,%r2713;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2719,%r7657,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7700,%r7700,%r2719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2725,%r7658,%r7489;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7736,%r7736,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2731,%r7658,%r7487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7722,%r7722,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2737,%r7658,%r7493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7724,%r7724,%r2737;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2743,%r7658,%r7491;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7704,%r7704,%r2743;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2749,%r7658,%r7497;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7706,%r7706,%r2749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2755,%r7658,%r7495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7694,%r7694,%r2755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2761,%r7657,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7717,%r7717,%r2761;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2767,%r7657,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7699,%r7699,%r2767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2773,%r7658,%r7488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7735,%r7735,%r2773;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2779,%r7658,%r7486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7719,%r7719,%r2779;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2785,%r7658,%r7492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7721,%r7721,%r2785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2791,%r7658,%r7490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7701,%r7701,%r2791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2797,%r7658,%r7496;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7703,%r7703,%r2797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2803,%r7658,%r7494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7693,%r7693,%r2803;
}
	// end inline asm

$L__BB0_392:
	setp.lt.s32 	%p243, %r35, 1;
	mov.u32 	%r7845, %r2242;
	mov.u32 	%r7846, %r2242;
	mov.u32 	%r7851, %r2242;
	mov.u32 	%r7852, %r2242;
	mov.u32 	%r7853, %r2242;
	mov.u32 	%r7854, %r2242;
	mov.u32 	%r7855, %r2242;
	mov.u32 	%r7856, %r2242;
	mov.u32 	%r7863, %r2242;
	mov.u32 	%r7864, %r2242;
	@%p243 bra 	$L__BB0_394;

	mul.lo.s32 	%r3440, %r1725, 320;
	add.s32 	%r3441, %r35, -1;
	mul.lo.s32 	%r3442, %r36, 320;
	mad.lo.s32 	%r3443, %r3440, %r3441, %r3442;
	add.s32 	%r3446, %r1786, -64;
	mad.lo.s32 	%r3451, %r3446, %r2230, %r2227;
	add.s32 	%r3452, %r3443, %r3451;
	shl.b32 	%r3453, %r3452, 2;
	mov.u32 	%r3454, _ZN6kernel5shmemE;
	add.s32 	%r3455, %r3454, %r3453;
	shl.b32 	%r3456, %r40, 4;
	add.s32 	%r3457, %r3455, %r3456;
	ld.shared.v4.u32 	{%r7856, %r7854, %r7846, %r7845}, [%r3457];
	shl.b32 	%r3462, %r40, 3;
	add.s32 	%r3463, %r3455, %r3462;
	ld.shared.v2.u32 	{%r7855, %r7853}, [%r3463+512];
	ld.shared.v4.u32 	{%r7864, %r7863, %r7852, %r7851}, [%r3457+768];

$L__BB0_394:
	setp.lt.s32 	%p244, %r36, 1;
	mov.u32 	%r7847, %r2242;
	mov.u32 	%r7848, %r2242;
	mov.u32 	%r7849, %r2242;
	mov.u32 	%r7850, %r2242;
	mov.u32 	%r7857, %r2242;
	mov.u32 	%r7858, %r2242;
	mov.u32 	%r7859, %r2242;
	mov.u32 	%r7860, %r2242;
	mov.u32 	%r7861, %r2242;
	mov.u32 	%r7862, %r2242;
	mov.u32 	%r7865, %r2242;
	mov.u32 	%r7866, %r2242;
	@%p244 bra 	$L__BB0_397;

	mad.lo.s32 	%r3475, %r2630, 384, %r2233;
	add.s32 	%r3478, %r36, -1;
	mad.lo.s32 	%r3479, %r2228, %r3478, %r3475;
	add.s32 	%r3485, %r3479, %r2231;
	shl.b32 	%r3486, %r3485, 2;
	mov.u32 	%r3487, _ZN6kernel5shmemE;
	add.s32 	%r3488, %r3487, %r3486;
	shl.b32 	%r3489, %r40, 4;
	add.s32 	%r3490, %r3488, %r3489;
	ld.shared.v4.u32 	{%r7866, %r7865, %r7861, %r7859}, [%r3490];
	shl.b32 	%r3495, %r40, 3;
	add.s32 	%r3496, %r3488, %r3495;
	ld.shared.v2.u32 	{%r7862, %r7860}, [%r3496+512];
	ld.shared.v4.u32 	{%r7858, %r7857, %r7849, %r7847}, [%r3490+768];
	mov.u32 	%r7848, %r2242;
	mov.u32 	%r7850, %r2242;
	@%p243 bra 	$L__BB0_397;

	add.s32 	%r7371, %r3496, 512;
	ld.shared.v2.u32 	{%r7850, %r7848}, [%r7371+768];

$L__BB0_397:
	setp.eq.s32 	%p246, %r35, 0;
	@%p246 bra 	$L__BB0_402;

	setp.eq.s32 	%p247, %r36, %r2230;
	@%p247 bra 	$L__BB0_400;

	sub.s32 	%r3506, %r1724, %r35;
	mul.lo.s32 	%r3508, %r69, %r36;
	mad.lo.s32 	%r3509, %r3506, 384, %r3508;
	mad.lo.s32 	%r3512, %r2228, %r2230, %r3509;
	mad.lo.s32 	%r3515, %r2226, %r2225, %r3512;
	shl.b32 	%r3516, %r3515, 2;
	mov.u32 	%r3517, _ZN6kernel5shmemE;
	add.s32 	%r3518, %r3517, %r3516;
	shl.b32 	%r3519, %r40, 4;
	add.s32 	%r3520, %r3518, %r3519;
	ld.shared.v4.u32 	{%r7784, %r7783, %r7786, %r7785}, [%r3520];

$L__BB0_400:
	shl.b32 	%r3525, %r36, 8;
	shl.b32 	%r3529, %r1725, 8;
	or.b32  	%r3530, %r3529, 128;
	add.s32 	%r3531, %r35, -1;
	mad.lo.s32 	%r3532, %r3530, %r3531, %r2233;
	add.s32 	%r3533, %r3532, %r3525;
	shl.b32 	%r3534, %r3533, 2;
	mov.u32 	%r3535, _ZN6kernel5shmemE;
	add.s32 	%r3536, %r3535, %r3534;
	setp.ne.s32 	%p248, %r36, %r2230;
	shl.b32 	%r3538, %r40, 4;
	add.s32 	%r919, %r3536, %r3538;
	ld.shared.v4.u32 	{%r7777, %r7775, %r7778, %r7776}, [%r919];
	ld.shared.v4.u32 	{%r7782, %r7781, %r7780, %r7779}, [%r919+512];
	@%p248 bra 	$L__BB0_402;

	ld.shared.v4.u32 	{%r7784, %r7783, %r7786, %r7785}, [%r919+1024];

$L__BB0_402:
	setp.eq.s32 	%p249, %r36, 0;
	@%p249 bra 	$L__BB0_405;

	mul.lo.s32 	%r3552, %r69, %r36;
	sub.s32 	%r3553, %r3552, %r69;
	mad.lo.s32 	%r3556, %r2630, 384, %r3553;
	mad.lo.s32 	%r3559, %r2228, %r2230, %r3556;
	mad.lo.s32 	%r3562, %r2226, %r2225, %r3559;
	shl.b32 	%r3563, %r3562, 2;
	mov.u32 	%r3564, _ZN6kernel5shmemE;
	add.s32 	%r3565, %r3564, %r3563;
	shl.b32 	%r3566, %r40, 4;
	add.s32 	%r948, %r3565, %r3566;
	ld.shared.v4.u32 	{%r7800, %r7799, %r7802, %r7801}, [%r948];
	ld.shared.v4.u32 	{%r7798, %r7796, %r7794, %r7793}, [%r948+512];
	ld.shared.v4.u32 	{%r7797, %r7795, %r7792, %r7790}, [%r948+1024];
	@%p246 bra 	$L__BB0_405;

	ld.shared.v4.u32 	{%r7788, %r7787, %r7791, %r7789}, [%r948+1536];

$L__BB0_405:
	setp.ne.s32 	%p251, %r35, 0;
	@%p251 bra 	$L__BB0_410;

	ld.param.u64 	%rd558, [%rd1+80];
	cvta.to.global.u64 	%rd557, %rd558;
	mad.lo.s32 	%r3584, %r653, %r1727, %r38;
	mul.lo.s32 	%r3585, %r1725, %r3584;
	mul.lo.s32 	%r3586, %r3585, 768;
	mad.lo.s32 	%r3587, %r36, 384, %r3586;
	add.s32 	%r3588, %r3587, -64;
	mul.wide.s32 	%rd279, %r3588, 4;
	add.s64 	%rd280, %rd557, %rd279;
	add.s64 	%rd282, %rd280, %rd281;
	ld.global.v4.u32 	{%r7814, %r7812, %r7806, %r7805}, [%rd282+256];
	ld.global.v4.u32 	{%r7816, %r7815, %r7810, %r7809}, [%rd282+1024];
	add.s64 	%rd34, %rd280, %rd283;
	@%p249 bra 	$L__BB0_408;

	ld.global.v2.u32 	{%r7808, %r7807}, [%rd34];

$L__BB0_408:
	setp.ne.s32 	%p253, %r36, %r2230;
	ld.global.v2.u32 	{%r7813, %r7811}, [%rd34+768];
	@%p253 bra 	$L__BB0_410;

	ld.global.v2.u32 	{%r7818, %r7817}, [%rd34+1536];

$L__BB0_410:
	setp.ne.s32 	%p254, %r36, 0;
	@%p254 bra 	$L__BB0_412;

	ld.param.u64 	%rd560, [%rd1+80];
	cvta.to.global.u64 	%rd559, %rd560;
	mad.lo.s32 	%r3605, %r654, %r1726, %r37;
	mul.lo.s32 	%r3609, %r3605, %r1787;
	mad.lo.s32 	%r3612, %r2630, 384, %r3609;
	add.s32 	%r3613, %r3612, -64;
	mad.lo.s32 	%r3616, %r1789, %r68, %r3613;
	mul.wide.s32 	%rd284, %r3616, 4;
	add.s64 	%rd285, %rd559, %rd284;
	add.s64 	%rd287, %rd285, %rd281;
	ld.global.v4.u32 	{%r7830, %r7829, %r7827, %r7825}, [%rd287+256];
	ld.global.v4.u32 	{%r7824, %r7823, %r7821, %r7819}, [%rd287+1024];
	add.s64 	%rd289, %rd285, %rd283;
	ld.global.v2.u32 	{%r7828, %r7826}, [%rd289+768];
	ld.global.v2.u32 	{%r7808, %r7807}, [%rd289+1536];

$L__BB0_412:
	add.s32 	%r3629, %r1729, -1;
	setp.ge.s32 	%p255, %r655, %r3629;
	setp.lt.s32 	%p256, %r655, 2;
	or.pred  	%p257, %p256, %p255;
	setp.lt.s32 	%p258, %r656, 2;
	or.pred  	%p259, %p257, %p258;
	add.s32 	%r3630, %r1730, -2;
	setp.ge.s32 	%p260, %r656, %r3630;
	or.pred  	%p261, %p260, %p259;
	@%p261 bra 	$L__BB0_423;

	ld.param.u64 	%rd562, [%rd1+88];
	cvta.to.global.u64 	%rd561, %rd562;
	mad.lo.s32 	%r1043, %r656, %r1729, %r655;
	shl.b32 	%r3631, %r1043, 6;
	mul.wide.s32 	%rd292, %r3631, 4;
	add.s64 	%rd36, %rd561, %rd292;
	and.pred  	%p264, %p251, %p254;
	@%p264 bra 	$L__BB0_415;

	add.s64 	%rd294, %rd36, %rd283;
	ld.global.v2.u32 	{%r7850, %r7848}, [%rd294+256];

$L__BB0_415:
	@%p251 bra 	$L__BB0_417;

	shl.b32 	%r3634, %r1729, 5;
	cvt.s64.s32 	%rd295, %r3634;
	cvt.s64.s32 	%rd296, %r40;
	add.s64 	%rd297, %rd295, %rd296;
	shl.b64 	%rd298, %rd297, 3;
	add.s64 	%rd299, %rd36, %rd298;
	ld.global.v2.u32 	{%r7855, %r7853}, [%rd299];

$L__BB0_417:
	@%p254 bra 	$L__BB0_419;

	shl.b32 	%r3637, %r1729, 5;
	neg.s32 	%r3638, %r3637;
	cvt.s64.s32 	%rd300, %r3638;
	cvt.s64.s32 	%rd301, %r40;
	add.s64 	%rd302, %rd300, %rd301;
	shl.b64 	%rd303, %rd302, 3;
	add.s64 	%rd304, %rd36, %rd303;
	ld.global.v2.u32 	{%r7862, %r7860}, [%rd304];

$L__BB0_419:
	mad.lo.s32 	%r7382, %r656, %r1729, %r655;
	ld.param.u64 	%rd564, [%rd1+88];
	cvta.to.global.u64 	%rd563, %rd564;
	shl.b32 	%r3641, %r1730, 6;
	shl.b32 	%r3642, %r7382, 7;
	mad.lo.s32 	%r3643, %r3641, %r1729, %r3642;
	mul.wide.s32 	%rd305, %r3643, 4;
	add.s64 	%rd37, %rd563, %rd305;
	@%p251 bra 	$L__BB0_421;

	shl.b32 	%r3644, %r1729, 5;
	cvt.s64.s32 	%rd306, %r3644;
	cvt.s64.s32 	%rd307, %r40;
	add.s64 	%rd308, %rd306, %rd307;
	shl.b64 	%rd309, %rd308, 4;
	add.s64 	%rd310, %rd37, %rd309;
	ld.global.v4.u32 	{%r7856, %r7854, %r7846, %r7845}, [%rd310];
	shl.b32 	%r3649, %r1729, 6;
	add.s32 	%r3650, %r3649, -32;
	cvt.s64.s32 	%rd311, %r3650;
	add.s64 	%rd312, %rd311, %rd307;
	shl.b64 	%rd313, %rd312, 4;
	add.s64 	%rd314, %rd37, %rd313;
	ld.global.v4.u32 	{%r7864, %r7863, %r7852, %r7851}, [%rd314];

$L__BB0_421:
	@%p254 bra 	$L__BB0_423;

	shl.b32 	%r3655, %r1729, 5;
	xor.b32  	%r3656, %r3655, -32;
	cvt.s64.s32 	%rd315, %r3656;
	cvt.s64.s32 	%rd316, %r40;
	add.s64 	%rd317, %rd315, %rd316;
	shl.b64 	%rd318, %rd317, 4;
	add.s64 	%rd319, %rd37, %rd318;
	ld.global.v4.u32 	{%r7866, %r7865, %r7861, %r7859}, [%rd319];
	add.s64 	%rd321, %rd37, %rd281;
	ld.global.v4.u32 	{%r7858, %r7857, %r7849, %r7847}, [%rd321];

$L__BB0_423:
	mov.u32 	%r3670, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3666,%r7625,%r432,%r2333,%r3670;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3666;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7625;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3673, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3674,%r7626,%r3673;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3677,%r7478,%r3674;
}
	// end inline asm
	@%p17 bra 	$L__BB0_425;
	bra.uni 	$L__BB0_424;

$L__BB0_425:
	// begin inline asm
	{neg.f16x2 %r7867,%r7740;
}
	// end inline asm
	bra.uni 	$L__BB0_426;

$L__BB0_424:
	// begin inline asm
	{mul.f16x2 %r7867,%r7479,%r3674;
}
	// end inline asm

$L__BB0_426:
	mov.u32 	%r3690, 31;
	mov.u32 	%r3713, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3688,%r7867,%r3690,%r2333,%r3713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3693,%r3677,%r3688;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3696,%r7624,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3699,%r3696,%r3693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3702,%r7627,%r3699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3705,%r7740,%r3702;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3709,%r7620,%r432,%r2333,%r3713;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3709;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7620;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3716, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3717,%r7621,%r3716;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3720,%r7478,%r3717;
}
	// end inline asm
	mov.u32 	%r7868, %r7739;
	@%p17 bra 	$L__BB0_428;

	// begin inline asm
	{mul.f16x2 %r7868,%r7479,%r3717;
}
	// end inline asm

$L__BB0_428:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3731,%r7868,%r3690,%r2333,%r3713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3736,%r3720,%r3731;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3739,%r7624,%r7619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r3736,%r3739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3745,%r7622,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3748,%r7739,%r3745;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r7625,%r7626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r7482,%r3751;
}
	// end inline asm
	@%p17 bra 	$L__BB0_430;
	bra.uni 	$L__BB0_429;

$L__BB0_430:
	// begin inline asm
	{neg.f16x2 %r7869,%r7738;
}
	// end inline asm
	bra.uni 	$L__BB0_431;

$L__BB0_429:
	// begin inline asm
	{mul.f16x2 %r7869,%r7483,%r3751;
}
	// end inline asm

$L__BB0_431:
	mov.u32 	%r3767, 31;
	mov.u32 	%r3769, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3765,%r7869,%r3767,%r2333,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3770,%r3754,%r3765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3773,%r7617,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3776,%r3773,%r3770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3779,%r7618,%r3776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3782,%r7738,%r3779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r7620,%r7621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3788,%r7482,%r3785;
}
	// end inline asm
	mov.u32 	%r7870, %r7737;
	@%p17 bra 	$L__BB0_433;

	// begin inline asm
	{mul.f16x2 %r7870,%r7483,%r3785;
}
	// end inline asm

$L__BB0_433:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3797,%r7870,%r3767,%r2333,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3802,%r3788,%r3797;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3805,%r7617,%r7614;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r3802,%r3805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r7615,%r3808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3814,%r7737,%r3811;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3818,%r7611,%r432,%r2333,%r3769;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3818;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7611;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3825, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3826,%r7612,%r3825;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3829,%r7478,%r3826;
}
	// end inline asm
	@%p17 bra 	$L__BB0_435;
	bra.uni 	$L__BB0_434;

$L__BB0_435:
	// begin inline asm
	{neg.f16x2 %r7871,%r7736;
}
	// end inline asm
	bra.uni 	$L__BB0_436;

$L__BB0_434:
	// begin inline asm
	{mul.f16x2 %r7871,%r7479,%r3826;
}
	// end inline asm

$L__BB0_436:
	mov.u32 	%r3844, 31;
	mov.u32 	%r3846, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3842,%r7871,%r3844,%r2333,%r3846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3847,%r3829,%r3842;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3850,%r7610,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r3850,%r3847;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r7613,%r3853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3859,%r7736,%r3856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r7611,%r7612;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3865,%r7482,%r3862;
}
	// end inline asm
	@%p17 bra 	$L__BB0_438;
	bra.uni 	$L__BB0_437;

$L__BB0_438:
	// begin inline asm
	{neg.f16x2 %r7872,%r7735;
}
	// end inline asm
	bra.uni 	$L__BB0_439;

$L__BB0_437:
	// begin inline asm
	{mul.f16x2 %r7872,%r7483,%r3862;
}
	// end inline asm

$L__BB0_439:
	mov.u32 	%r3878, 31;
	mov.u32 	%r3901, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3876,%r7872,%r3878,%r2333,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3881,%r3865,%r3876;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3884,%r7608,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3887,%r3884,%r3881;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3890,%r7609,%r3887;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3893,%r7735,%r3890;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3897,%r7606,%r432,%r2333,%r3901;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3897;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7606;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3904, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3905,%r7607,%r3904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3908,%r7478,%r3905;
}
	// end inline asm
	@%p17 bra 	$L__BB0_441;
	bra.uni 	$L__BB0_440;

$L__BB0_441:
	// begin inline asm
	{neg.f16x2 %r7873,%r7734;
}
	// end inline asm
	bra.uni 	$L__BB0_442;

$L__BB0_440:
	// begin inline asm
	{mul.f16x2 %r7873,%r7479,%r3905;
}
	// end inline asm

$L__BB0_442:
	mov.u32 	%r3923, 31;
	mov.u32 	%r3946, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3921,%r7873,%r3923,%r2333,%r3946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3926,%r3908,%r3921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3929,%r7605,%r7802;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3932,%r3929,%r3926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3935,%r7866,%r3932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3938,%r7734,%r3935;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3942,%r7601,%r432,%r2333,%r3946;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3942;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7601;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3949, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3950,%r7602,%r3949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3953,%r7478,%r3950;
}
	// end inline asm
	mov.u32 	%r7874, %r7733;
	@%p17 bra 	$L__BB0_444;

	// begin inline asm
	{mul.f16x2 %r7874,%r7479,%r3950;
}
	// end inline asm

$L__BB0_444:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3964,%r7874,%r3923,%r2333,%r3946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3969,%r3953,%r3964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3972,%r7605,%r7623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3975,%r3969,%r3972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3978,%r7603,%r3975;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3981,%r7733,%r3978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3984,%r7606,%r7607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3987,%r7482,%r3984;
}
	// end inline asm
	@%p17 bra 	$L__BB0_446;
	bra.uni 	$L__BB0_445;

$L__BB0_446:
	// begin inline asm
	{neg.f16x2 %r7875,%r7732;
}
	// end inline asm
	bra.uni 	$L__BB0_447;

$L__BB0_445:
	// begin inline asm
	{mul.f16x2 %r7875,%r7483,%r3984;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r4000, 31;
	mov.u32 	%r4002, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3998,%r7875,%r4000,%r2333,%r4002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4003,%r3987,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4006,%r7600,%r7801;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4009,%r4006,%r4003;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4012,%r7865,%r4009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4015,%r7732,%r4012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4018,%r7601,%r7602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4021,%r7482,%r4018;
}
	// end inline asm
	mov.u32 	%r7876, %r7731;
	@%p17 bra 	$L__BB0_449;

	// begin inline asm
	{mul.f16x2 %r7876,%r7483,%r4018;
}
	// end inline asm

$L__BB0_449:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4030,%r7876,%r4000,%r2333,%r4002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4035,%r4021,%r4030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4038,%r7600,%r7616;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4041,%r4035,%r4038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4044,%r7598,%r4041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4047,%r7731,%r4044;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4051,%r7595,%r432,%r2333,%r4002;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4051;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7595;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4058, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4059,%r7596,%r4058;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4062,%r7478,%r4059;
}
	// end inline asm
	@%p17 bra 	$L__BB0_451;
	bra.uni 	$L__BB0_450;

$L__BB0_451:
	// begin inline asm
	{neg.f16x2 %r7877,%r7730;
}
	// end inline asm
	bra.uni 	$L__BB0_452;

$L__BB0_450:
	// begin inline asm
	{mul.f16x2 %r7877,%r7479,%r4059;
}
	// end inline asm

$L__BB0_452:
	mov.u32 	%r4077, 31;
	mov.u32 	%r4100, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4075,%r7877,%r4077,%r2333,%r4100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r4062,%r4075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r7594,%r7605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r4083,%r4080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r545,%r4086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7653,%r7730,%r4089;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4096,%r7591,%r432,%r2333,%r4100;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4096;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7591;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4103, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4104,%r7592,%r4103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4107,%r7478,%r4104;
}
	// end inline asm
	mov.u32 	%r7878, %r7729;
	@%p17 bra 	$L__BB0_454;

	// begin inline asm
	{mul.f16x2 %r7878,%r7479,%r4104;
}
	// end inline asm

$L__BB0_454:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4118,%r7878,%r4077,%r2333,%r4100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4123,%r4107,%r4118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r7594,%r7624;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4129,%r4123,%r4126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4132,%r541,%r4129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7651,%r7729,%r4132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4138,%r7596,%r7626;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4141,%r7592,%r7602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r4138,%r4141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r7590,%r4144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4150,%r7728,%r4147;
}
	// end inline asm
	selp.b32 	%r1169, %r7728, %r4150, %p17;
	// begin inline asm
	{sub.f16x2 %r4153,%r7595,%r7596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4156,%r7482,%r4153;
}
	// end inline asm
	@%p17 bra 	$L__BB0_456;
	bra.uni 	$L__BB0_455;

$L__BB0_456:
	// begin inline asm
	{neg.f16x2 %r7879,%r7727;
}
	// end inline asm
	bra.uni 	$L__BB0_457;

$L__BB0_455:
	// begin inline asm
	{mul.f16x2 %r7879,%r7483,%r4153;
}
	// end inline asm

$L__BB0_457:
	mov.u32 	%r4169, 31;
	mov.u32 	%r4171, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4167,%r7879,%r4169,%r2333,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4172,%r4156,%r4167;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4175,%r7588,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4178,%r4175,%r4172;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4181,%r537,%r4178;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7652,%r7727,%r4181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4187,%r7591,%r7592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4190,%r7482,%r4187;
}
	// end inline asm
	mov.u32 	%r7880, %r7726;
	@%p17 bra 	$L__BB0_459;

	// begin inline asm
	{mul.f16x2 %r7880,%r7483,%r4187;
}
	// end inline asm

$L__BB0_459:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4199,%r7880,%r4169,%r2333,%r4171;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4204,%r4190,%r4199;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4207,%r7588,%r7617;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4210,%r4204,%r4207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4213,%r535,%r4210;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7650,%r7726,%r4213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r7595,%r7625;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4222,%r7591,%r7601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4225,%r4219,%r4222;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4228,%r7586,%r4225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4231,%r7725,%r4228;
}
	// end inline asm
	selp.b32 	%r1181, %r7725, %r4231, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4235,%r7583,%r432,%r2333,%r4171;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4235;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7583;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4242, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4243,%r7584,%r4242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4246,%r7478,%r4243;
}
	// end inline asm
	@%p17 bra 	$L__BB0_461;
	bra.uni 	$L__BB0_460;

$L__BB0_461:
	// begin inline asm
	{neg.f16x2 %r7881,%r7724;
}
	// end inline asm
	bra.uni 	$L__BB0_462;

$L__BB0_460:
	// begin inline asm
	{mul.f16x2 %r7881,%r7479,%r4243;
}
	// end inline asm

$L__BB0_462:
	mov.u32 	%r4261, 31;
	mov.u32 	%r4284, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4259,%r7881,%r4261,%r2333,%r4284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4264,%r4246,%r4259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4267,%r7582,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4270,%r4267,%r4264;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4273,%r533,%r4270;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7649,%r7724,%r4273;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4280,%r7579,%r432,%r2333,%r4284;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4280;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7579;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4287, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4288,%r7580,%r4287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4291,%r7478,%r4288;
}
	// end inline asm
	mov.u32 	%r7882, %r7723;
	@%p17 bra 	$L__BB0_464;

	// begin inline asm
	{mul.f16x2 %r7882,%r7479,%r4288;
}
	// end inline asm

$L__BB0_464:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4302,%r7882,%r4261,%r2333,%r4284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4307,%r4291,%r4302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4310,%r7582,%r7610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4313,%r4307,%r4310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4316,%r7581,%r4313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4319,%r7723,%r4316;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r7584,%r7612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4325,%r7580,%r7592;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r4322,%r4325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4331,%r7578,%r4328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4334,%r7722,%r4331;
}
	// end inline asm
	selp.b32 	%r1193, %r7722, %r4334, %p17;
	// begin inline asm
	{sub.f16x2 %r4337,%r7583,%r7584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4340,%r7482,%r4337;
}
	// end inline asm
	@%p17 bra 	$L__BB0_466;
	bra.uni 	$L__BB0_465;

$L__BB0_466:
	// begin inline asm
	{neg.f16x2 %r7883,%r7721;
}
	// end inline asm
	bra.uni 	$L__BB0_467;

$L__BB0_465:
	// begin inline asm
	{mul.f16x2 %r7883,%r7483,%r4337;
}
	// end inline asm

$L__BB0_467:
	mov.u32 	%r4353, 31;
	mov.u32 	%r4355, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4351,%r7883,%r4353,%r2333,%r4355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4356,%r4340,%r4351;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4359,%r7576,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r4359,%r4356;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r525,%r4362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7648,%r7721,%r4365;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4371,%r7579,%r7580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4374,%r7482,%r4371;
}
	// end inline asm
	mov.u32 	%r7884, %r7720;
	@%p17 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r7884,%r7483,%r4371;
}
	// end inline asm

$L__BB0_469:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4383,%r7884,%r4353,%r2333,%r4355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4388,%r4374,%r4383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4391,%r7576,%r7608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4394,%r4388,%r4391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4397,%r7575,%r4394;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4400,%r7720,%r4397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4403,%r7583,%r7611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4406,%r7579,%r7591;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4409,%r4403,%r4406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4412,%r7574,%r4409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4415,%r7719,%r4412;
}
	// end inline asm
	selp.b32 	%r1205, %r7719, %r4415, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4419,%r7572,%r432,%r2333,%r4355;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4419;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7572;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4426, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4427,%r7573,%r4426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4430,%r7478,%r4427;
}
	// end inline asm
	@%p17 bra 	$L__BB0_471;
	bra.uni 	$L__BB0_470;

$L__BB0_471:
	// begin inline asm
	{neg.f16x2 %r7885,%r7718;
}
	// end inline asm
	bra.uni 	$L__BB0_472;

$L__BB0_470:
	// begin inline asm
	{mul.f16x2 %r7885,%r7479,%r4427;
}
	// end inline asm

$L__BB0_472:
	mov.u32 	%r4445, 31;
	mov.u32 	%r4447, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4443,%r7885,%r4445,%r2333,%r4447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4448,%r4430,%r4443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4451,%r7786,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4454,%r4451,%r4448;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4457,%r7864,%r4454;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4460,%r7718,%r4457;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r7572,%r7573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4466,%r7482,%r4463;
}
	// end inline asm
	@%p17 bra 	$L__BB0_474;
	bra.uni 	$L__BB0_473;

$L__BB0_474:
	// begin inline asm
	{neg.f16x2 %r7886,%r7717;
}
	// end inline asm
	bra.uni 	$L__BB0_475;

$L__BB0_473:
	// begin inline asm
	{mul.f16x2 %r7886,%r7483,%r4463;
}
	// end inline asm

$L__BB0_475:
	mov.u32 	%r4479, 31;
	mov.u32 	%r4502, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4477,%r7886,%r4479,%r2333,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4482,%r4466,%r4477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4485,%r7785,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r4485,%r4482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4491,%r7863,%r4488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4494,%r7717,%r4491;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4498,%r7568,%r432,%r2333,%r4502;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4498;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7568;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4505, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4506,%r7569,%r4505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4509,%r7478,%r4506;
}
	// end inline asm
	mov.u32 	%r7887, %r7716;
	@%p17 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7887,%r7479,%r4506;
}
	// end inline asm

$L__BB0_477:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4520,%r7887,%r4479,%r2333,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4525,%r4509,%r4520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4528,%r7797,%r7605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4531,%r4525,%r4528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4534,%r7862,%r4531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7647,%r7716,%r4534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4540,%r7798,%r7607;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4543,%r7569,%r7800;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r4540,%r4543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4549,%r7861,%r4546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4552,%r7715,%r4549;
}
	// end inline asm
	selp.b32 	%r1223, %r7715, %r4552, %p17;
	// begin inline asm
	{sub.f16x2 %r4555,%r7568,%r7569;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r7482,%r4555;
}
	// end inline asm
	mov.u32 	%r7888, %r7714;
	@%p17 bra 	$L__BB0_479;

	// begin inline asm
	{mul.f16x2 %r7888,%r7483,%r4555;
}
	// end inline asm

$L__BB0_479:
	mov.u32 	%r4569, 31;
	mov.u32 	%r4607, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4567,%r7888,%r4569,%r2333,%r4607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4572,%r4558,%r4567;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4575,%r7795,%r7600;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4578,%r4572,%r4575;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4581,%r7860,%r4578;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7646,%r7714,%r4581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4587,%r7796,%r7606;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4590,%r7568,%r7799;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4593,%r4587,%r4590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4596,%r7859,%r4593;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4599,%r7713,%r4596;
}
	// end inline asm
	selp.b32 	%r1229, %r7713, %r4599, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4603,%r7564,%r432,%r2333,%r4607;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4603;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7564;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4610, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4611,%r7565,%r4610;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4614,%r7478,%r4611;
}
	// end inline asm
	@%p17 bra 	$L__BB0_481;
	bra.uni 	$L__BB0_480;

$L__BB0_481:
	// begin inline asm
	{neg.f16x2 %r7889,%r7712;
}
	// end inline asm
	bra.uni 	$L__BB0_482;

$L__BB0_480:
	// begin inline asm
	{mul.f16x2 %r7889,%r7479,%r4611;
}
	// end inline asm

$L__BB0_482:
	mov.u32 	%r4629, 31;
	mov.u32 	%r4652, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4627,%r7889,%r4629,%r2333,%r4652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4632,%r4614,%r4627;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r7563,%r7797;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r4635,%r4632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4641,%r7858,%r4638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7645,%r7712,%r4641;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4648,%r7560,%r432,%r2333,%r4652;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4648;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7560;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4655, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4656,%r7561,%r4655;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4659,%r7478,%r4656;
}
	// end inline asm
	mov.u32 	%r7890, %r7711;
	@%p17 bra 	$L__BB0_484;

	// begin inline asm
	{mul.f16x2 %r7890,%r7479,%r4656;
}
	// end inline asm

$L__BB0_484:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4670,%r7890,%r4629,%r2333,%r4652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4675,%r4659,%r4670;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4678,%r7563,%r7594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4681,%r4675,%r4678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4684,%r7593,%r4681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7643,%r7711,%r4684;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4690,%r7565,%r7596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4693,%r7561,%r7569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r4690,%r4693;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4699,%r507,%r4696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4702,%r7710,%r4699;
}
	// end inline asm
	selp.b32 	%r7641, %r7710, %r4702, %p17;
	// begin inline asm
	{sub.f16x2 %r4705,%r7564,%r7565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4708,%r7482,%r4705;
}
	// end inline asm
	@%p17 bra 	$L__BB0_486;
	bra.uni 	$L__BB0_485;

$L__BB0_486:
	// begin inline asm
	{neg.f16x2 %r7891,%r7709;
}
	// end inline asm
	bra.uni 	$L__BB0_487;

$L__BB0_485:
	// begin inline asm
	{mul.f16x2 %r7891,%r7483,%r4705;
}
	// end inline asm

$L__BB0_487:
	mov.u32 	%r4721, 31;
	mov.u32 	%r4723, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4719,%r7891,%r4721,%r2333,%r4723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4724,%r4708,%r4719;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4727,%r7558,%r7795;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4730,%r4727,%r4724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4733,%r7857,%r4730;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7644,%r7709,%r4733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4739,%r7560,%r7561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4742,%r7482,%r4739;
}
	// end inline asm
	mov.u32 	%r7892, %r7708;
	@%p17 bra 	$L__BB0_489;

	// begin inline asm
	{mul.f16x2 %r7892,%r7483,%r4739;
}
	// end inline asm

$L__BB0_489:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4751,%r7892,%r4721,%r2333,%r4723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4756,%r4742,%r4751;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4759,%r7558,%r7588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4762,%r4756,%r4759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4765,%r7587,%r4762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7642,%r7708,%r4765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4771,%r7564,%r7595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4774,%r7560,%r7568;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r4771,%r4774;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4780,%r504,%r4777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4783,%r7707,%r4780;
}
	// end inline asm
	selp.b32 	%r7640, %r7707, %r4783, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4787,%r7554,%r432,%r2333,%r4723;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4787;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7554;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4794, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4795,%r7555,%r4794;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4798,%r7478,%r4795;
}
	// end inline asm
	@%p17 bra 	$L__BB0_491;
	bra.uni 	$L__BB0_490;

$L__BB0_491:
	// begin inline asm
	{neg.f16x2 %r7893,%r7706;
}
	// end inline asm
	bra.uni 	$L__BB0_492;

$L__BB0_490:
	// begin inline asm
	{mul.f16x2 %r7893,%r7479,%r4795;
}
	// end inline asm

$L__BB0_492:
	mov.u32 	%r4813, 31;
	mov.u32 	%r4836, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4811,%r7893,%r4813,%r2333,%r4836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4816,%r4798,%r4811;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4819,%r7782,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4822,%r4819,%r4816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4825,%r7856,%r4822;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7639,%r7706,%r4825;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4832,%r7552,%r432,%r2333,%r4836;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4832;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7552;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4839, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4840,%r7553,%r4839;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4843,%r7478,%r4840;
}
	// end inline asm
	mov.u32 	%r7894, %r7705;
	@%p17 bra 	$L__BB0_494;

	// begin inline asm
	{mul.f16x2 %r7894,%r7479,%r4840;
}
	// end inline asm

$L__BB0_494:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4854,%r7894,%r4813,%r2333,%r4836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4859,%r4843,%r4854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4862,%r7782,%r7582;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4865,%r4859,%r4862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4868,%r7855,%r4865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7637,%r7705,%r4868;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4874,%r7555,%r7584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4877,%r7553,%r7561;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4880,%r4874,%r4877;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4883,%r499,%r4880;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4886,%r7704,%r4883;
}
	// end inline asm
	selp.b32 	%r7635, %r7704, %r4886, %p17;
	// begin inline asm
	{sub.f16x2 %r4889,%r7554,%r7555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4892,%r7482,%r4889;
}
	// end inline asm
	@%p17 bra 	$L__BB0_496;
	bra.uni 	$L__BB0_495;

$L__BB0_496:
	// begin inline asm
	{neg.f16x2 %r7895,%r7703;
}
	// end inline asm
	bra.uni 	$L__BB0_497;

$L__BB0_495:
	// begin inline asm
	{mul.f16x2 %r7895,%r7483,%r4889;
}
	// end inline asm

$L__BB0_497:
	mov.u32 	%r4905, 31;
	mov.u32 	%r4907, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4903,%r7895,%r4905,%r2333,%r4907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4908,%r4892,%r4903;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4911,%r7781,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4914,%r4911,%r4908;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4917,%r7854,%r4914;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7638,%r7703,%r4917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4923,%r7552,%r7553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4926,%r7482,%r4923;
}
	// end inline asm
	mov.u32 	%r7896, %r7702;
	@%p17 bra 	$L__BB0_499;

	// begin inline asm
	{mul.f16x2 %r7896,%r7483,%r4923;
}
	// end inline asm

$L__BB0_499:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4935,%r7896,%r4905,%r2333,%r4907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4940,%r4926,%r4935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4943,%r7781,%r7576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4946,%r4940,%r4943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4949,%r7853,%r4946;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7636,%r7702,%r4949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4955,%r7554,%r7583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4958,%r7552,%r7560;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4961,%r4955,%r4958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4964,%r498,%r4961;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4967,%r7701,%r4964;
}
	// end inline asm
	selp.b32 	%r7634, %r7701, %r4967, %p17;
	// begin inline asm
	{sub.f16x2 %r4970,%r7780,%r7573;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4973,%r7784,%r7553;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4976,%r4970,%r4973;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4979,%r7852,%r4976;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4982,%r7700,%r4979;
}
	// end inline asm
	selp.b32 	%r1278, %r7700, %r4982, %p17;
	// begin inline asm
	{sub.f16x2 %r4985,%r7779,%r7572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4988,%r7783,%r7552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4991,%r4985,%r4988;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4994,%r7851,%r4991;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4997,%r7699,%r4994;
}
	// end inline asm
	selp.b32 	%r1279, %r7699, %r4997, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r5001,%r7546,%r432,%r2333,%r4907;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5001;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7546;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5008, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5009,%r7547,%r5008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5012,%r7478,%r5009;
}
	// end inline asm
	mov.u32 	%r7897, %r7698;
	@%p17 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7897,%r7479,%r5009;
}
	// end inline asm

$L__BB0_501:
	mov.u32 	%r5025, 31;
	mov.u32 	%r5027, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5023,%r7897,%r5025,%r2333,%r5027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5028,%r5012,%r5023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5031,%r7791,%r7563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5034,%r5028,%r5031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5037,%r7850,%r5034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7633,%r7698,%r5037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5043,%r7792,%r7565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5046,%r7547,%r7794;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5049,%r5043,%r5046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5052,%r7849,%r5049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5055,%r7697,%r5052;
}
	// end inline asm
	selp.b32 	%r7631, %r7697, %r5055, %p17;
	// begin inline asm
	{sub.f16x2 %r5058,%r7546,%r7547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5061,%r7482,%r5058;
}
	// end inline asm
	mov.u32 	%r7898, %r7696;
	@%p17 bra 	$L__BB0_503;

	// begin inline asm
	{mul.f16x2 %r7898,%r7483,%r5058;
}
	// end inline asm

$L__BB0_503:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5070,%r7898,%r5025,%r2333,%r5027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5075,%r5061,%r5070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5078,%r7789,%r7558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5081,%r5075,%r5078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5084,%r7848,%r5081;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7632,%r7696,%r5084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5090,%r7790,%r7564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5093,%r7546,%r7793;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5096,%r5090,%r5093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5099,%r7847,%r5096;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5102,%r7695,%r5099;
}
	// end inline asm
	selp.b32 	%r7630, %r7695, %r5102, %p17;
	// begin inline asm
	{sub.f16x2 %r5105,%r7777,%r7555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5108,%r7778,%r7547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5111,%r5105,%r5108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5114,%r7846,%r5111;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5117,%r7694,%r5114;
}
	// end inline asm
	selp.b32 	%r7629, %r7694, %r5117, %p17;
	// begin inline asm
	{sub.f16x2 %r5120,%r7775,%r7554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5123,%r7776,%r7546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5126,%r5120,%r5123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5129,%r7845,%r5126;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5132,%r7693,%r5129;
}
	// end inline asm
	selp.b32 	%r7628, %r7693, %r5132, %p17;
	bar.sync 	0;
	ld.param.u64 	%rd322, [%rd1+160];
	cvta.to.global.u64 	%rd39, %rd322;
	add.s32 	%r5137, %r1738, 2;
	setp.lt.s32 	%p302, %r655, %r5137;
	add.s32 	%r5138, %r1739, -1;
	setp.ge.s32 	%p303, %r655, %r5138;
	or.pred  	%p304, %p303, %p302;
	add.s32 	%r5139, %r1740, 2;
	setp.lt.s32 	%p305, %r656, %r5139;
	or.pred  	%p306, %p304, %p305;
	add.s32 	%r5140, %r1741, -2;
	setp.ge.s32 	%p307, %r656, %r5140;
	or.pred  	%p308, %p307, %p306;
	setp.lt.s32 	%p309, %r657, %r1735;
	or.pred  	%p310, %p309, %p308;
	mad.lo.s32 	%r5141, %r1737, %r1736, %r1735;
	setp.ge.s32 	%p311, %r657, %r5141;
	or.pred  	%p312, %p310, %p311;
	@%p312 bra 	$L__BB0_745;

	sub.s32 	%r1294, %r657, %r1735;
	rem.s32 	%r5142, %r1294, %r1736;
	setp.ne.s32 	%p313, %r5142, 0;
	@%p313 bra 	$L__BB0_745;

	div.s32 	%r5143, %r1294, %r1736;
	mul.lo.s32 	%r5145, %r5143, %r53;
	sub.s32 	%r1295, %r655, %r1738;
	sub.s32 	%r1296, %r656, %r1740;
	mul.lo.s32 	%r1297, %r5145, 3;
	add.s32 	%r5146, %r1295, %r1297;
	add.s32 	%r5147, %r5146, -2;
	mul.lo.s32 	%r1298, %r5147, %r54;
	add.s32 	%r5149, %r1296, %r1298;
	mul.lo.s32 	%r5150, %r5149, %r55;
	sub.s32 	%r1299, %r5150, %r1742;
	@%p17 bra 	$L__BB0_510;

	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3705;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r5152, %r1299, %r398;
	mul.wide.s32 	%rd323, %r5152, 4;
	add.s64 	%rd324, %rd39, %rd323;
	st.global.f32 	[%rd324], %f407;

$L__BB0_508:
	not.pred 	%p316, %p15;
	@%p316 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3705;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r5154, %r1299, %r399;
	mul.wide.s32 	%rd325, %r5154, 4;
	add.s64 	%rd326, %rd39, %rd325;
	st.global.f32 	[%rd326], %f408;

$L__BB0_510:
	@%p17 bra 	$L__BB0_515;

	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3782;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r5156, %r1299, %r412;
	mul.wide.s32 	%rd327, %r5156, 4;
	add.s64 	%rd328, %rd39, %rd327;
	st.global.f32 	[%rd328], %f409;

$L__BB0_513:
	not.pred 	%p319, %p16;
	@%p319 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3782;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r5158, %r1299, %r413;
	mul.wide.s32 	%rd329, %r5158, 4;
	add.s64 	%rd330, %rd39, %rd329;
	st.global.f32 	[%rd330], %f410;

$L__BB0_515:
	sub.s32 	%r7390, %r655, %r1738;
	add.s32 	%r1300, %r1297, %r53;
	add.s32 	%r5160, %r7390, %r1300;
	add.s32 	%r5161, %r5160, -2;
	mad.lo.s32 	%r5163, %r5161, %r54, %r1296;
	mul.lo.s32 	%r5164, %r5163, %r55;
	sub.s32 	%r1301, %r5164, %r1742;
	@%p17 bra 	$L__BB0_520;

	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3748;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r5166, %r1301, %r398;
	mul.wide.s32 	%rd331, %r5166, 4;
	add.s64 	%rd332, %rd39, %rd331;
	st.global.f32 	[%rd332], %f411;

$L__BB0_518:
	not.pred 	%p322, %p15;
	@%p322 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3748;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r5168, %r1301, %r399;
	mul.wide.s32 	%rd333, %r5168, 4;
	add.s64 	%rd334, %rd39, %rd333;
	st.global.f32 	[%rd334], %f412;

$L__BB0_520:
	@%p17 bra 	$L__BB0_525;

	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3814;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r5170, %r1301, %r412;
	mul.wide.s32 	%rd335, %r5170, 4;
	add.s64 	%rd336, %rd39, %rd335;
	st.global.f32 	[%rd336], %f413;

$L__BB0_523:
	not.pred 	%p325, %p16;
	@%p325 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3814;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r5172, %r1301, %r413;
	mul.wide.s32 	%rd337, %r5172, 4;
	add.s64 	%rd338, %rd39, %rd337;
	st.global.f32 	[%rd338], %f414;

$L__BB0_525:
	add.s32 	%r1302, %r1296, 1;
	add.s32 	%r5173, %r1302, %r1298;
	mul.lo.s32 	%r5174, %r5173, %r55;
	sub.s32 	%r1303, %r5174, %r1742;
	@%p17 bra 	$L__BB0_530;

	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3859;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r5176, %r1303, %r398;
	mul.wide.s32 	%rd339, %r5176, 4;
	add.s64 	%rd340, %rd39, %rd339;
	st.global.f32 	[%rd340], %f415;

$L__BB0_528:
	not.pred 	%p328, %p15;
	@%p328 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3859;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r5178, %r1303, %r399;
	mul.wide.s32 	%rd341, %r5178, 4;
	add.s64 	%rd342, %rd39, %rd341;
	st.global.f32 	[%rd342], %f416;

$L__BB0_530:
	@%p17 bra 	$L__BB0_535;

	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3893;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r5180, %r1303, %r412;
	mul.wide.s32 	%rd343, %r5180, 4;
	add.s64 	%rd344, %rd39, %rd343;
	st.global.f32 	[%rd344], %f417;

$L__BB0_533:
	not.pred 	%p331, %p16;
	@%p331 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3893;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r5182, %r1303, %r413;
	mul.wide.s32 	%rd345, %r5182, 4;
	add.s64 	%rd346, %rd39, %rd345;
	st.global.f32 	[%rd346], %f418;

$L__BB0_535:
	not.b32 	%r5183, %r1738;
	add.s32 	%r1304, %r655, %r5183;
	not.b32 	%r5184, %r1740;
	add.s32 	%r1305, %r656, %r5184;
	add.s32 	%r5185, %r1304, %r1297;
	mul.lo.s32 	%r1306, %r5185, %r54;
	add.s32 	%r5187, %r1305, %r1306;
	mul.lo.s32 	%r5188, %r5187, %r55;
	sub.s32 	%r1307, %r5188, %r1742;
	@%p17 bra 	$L__BB0_540;

	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3938;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r5190, %r1307, %r398;
	mul.wide.s32 	%rd347, %r5190, 4;
	add.s64 	%rd348, %rd39, %rd347;
	st.global.f32 	[%rd348], %f419;

$L__BB0_538:
	not.pred 	%p334, %p15;
	@%p334 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3938;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r5192, %r1307, %r399;
	mul.wide.s32 	%rd349, %r5192, 4;
	add.s64 	%rd350, %rd39, %rd349;
	st.global.f32 	[%rd350], %f420;

$L__BB0_540:
	@%p17 bra 	$L__BB0_545;

	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4015;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r5194, %r1307, %r412;
	mul.wide.s32 	%rd351, %r5194, 4;
	add.s64 	%rd352, %rd39, %rd351;
	st.global.f32 	[%rd352], %f421;

$L__BB0_543:
	not.pred 	%p337, %p16;
	@%p337 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4015;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r5196, %r1307, %r413;
	mul.wide.s32 	%rd353, %r5196, 4;
	add.s64 	%rd354, %rd39, %rd353;
	st.global.f32 	[%rd354], %f422;

$L__BB0_545:
	add.s32 	%r5198, %r1304, %r1300;
	mul.lo.s32 	%r1308, %r5198, %r54;
	add.s32 	%r5199, %r1305, %r1308;
	mul.lo.s32 	%r5200, %r5199, %r55;
	sub.s32 	%r1309, %r5200, %r1742;
	@%p17 bra 	$L__BB0_550;

	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3981;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r5202, %r1309, %r398;
	mul.wide.s32 	%rd355, %r5202, 4;
	add.s64 	%rd356, %rd39, %rd355;
	st.global.f32 	[%rd356], %f423;

$L__BB0_548:
	not.pred 	%p340, %p15;
	@%p340 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3981;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r5204, %r1309, %r399;
	mul.wide.s32 	%rd357, %r5204, 4;
	add.s64 	%rd358, %rd39, %rd357;
	st.global.f32 	[%rd358], %f424;

$L__BB0_550:
	@%p17 bra 	$L__BB0_555;

	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4047;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r5206, %r1309, %r412;
	mul.wide.s32 	%rd359, %r5206, 4;
	add.s64 	%rd360, %rd39, %rd359;
	st.global.f32 	[%rd360], %f425;

$L__BB0_553:
	not.pred 	%p343, %p16;
	@%p343 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4047;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r5208, %r1309, %r413;
	mul.wide.s32 	%rd361, %r5208, 4;
	add.s64 	%rd362, %rd39, %rd361;
	st.global.f32 	[%rd362], %f426;

$L__BB0_555:
	add.s32 	%r5209, %r1296, %r1306;
	mul.lo.s32 	%r5210, %r5209, %r55;
	sub.s32 	%r1310, %r5210, %r1742;
	@%p17 bra 	$L__BB0_560;

	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7653;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r5212, %r1310, %r398;
	mul.wide.s32 	%rd363, %r5212, 4;
	add.s64 	%rd364, %rd39, %rd363;
	st.global.f32 	[%rd364], %f427;

$L__BB0_558:
	not.pred 	%p346, %p15;
	@%p346 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7653;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r5214, %r1310, %r399;
	mul.wide.s32 	%rd365, %r5214, 4;
	add.s64 	%rd366, %rd39, %rd365;
	st.global.f32 	[%rd366], %f428;

$L__BB0_560:
	@%p17 bra 	$L__BB0_565;

	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r5216, %r1310, %r412;
	mul.wide.s32 	%rd367, %r5216, 4;
	add.s64 	%rd368, %rd39, %rd367;
	st.global.f32 	[%rd368], %f429;

$L__BB0_563:
	not.pred 	%p349, %p16;
	@%p349 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7652;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r5218, %r1310, %r413;
	mul.wide.s32 	%rd369, %r5218, 4;
	add.s64 	%rd370, %rd39, %rd369;
	st.global.f32 	[%rd370], %f430;

$L__BB0_565:
	add.s32 	%r5219, %r1296, %r1308;
	mul.lo.s32 	%r5220, %r5219, %r55;
	sub.s32 	%r1311, %r5220, %r1742;
	@%p17 bra 	$L__BB0_570;

	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7651;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r5222, %r1311, %r398;
	mul.wide.s32 	%rd371, %r5222, 4;
	add.s64 	%rd372, %rd39, %rd371;
	st.global.f32 	[%rd372], %f431;

$L__BB0_568:
	not.pred 	%p352, %p15;
	@%p352 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7651;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r5224, %r1311, %r399;
	mul.wide.s32 	%rd373, %r5224, 4;
	add.s64 	%rd374, %rd39, %rd373;
	st.global.f32 	[%rd374], %f432;

$L__BB0_570:
	@%p17 bra 	$L__BB0_575;

	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7650;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r5226, %r1311, %r412;
	mul.wide.s32 	%rd375, %r5226, 4;
	add.s64 	%rd376, %rd39, %rd375;
	st.global.f32 	[%rd376], %f433;

$L__BB0_573:
	not.pred 	%p355, %p16;
	@%p355 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7650;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r5228, %r1311, %r413;
	mul.wide.s32 	%rd377, %r5228, 4;
	add.s64 	%rd378, %rd39, %rd377;
	st.global.f32 	[%rd378], %f434;

$L__BB0_575:
	add.s32 	%r1312, %r1300, %r53;
	add.s32 	%r5230, %r1304, %r1312;
	mul.lo.s32 	%r1313, %r5230, %r54;
	add.s32 	%r5232, %r1296, %r1313;
	mul.lo.s32 	%r5233, %r5232, %r55;
	sub.s32 	%r1314, %r5233, %r1742;
	@%p17 bra 	$L__BB0_580;

	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1169;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r5235, %r1314, %r398;
	mul.wide.s32 	%rd379, %r5235, 4;
	add.s64 	%rd380, %rd39, %rd379;
	st.global.f32 	[%rd380], %f435;

$L__BB0_578:
	not.pred 	%p358, %p15;
	@%p358 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1169;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r5237, %r1314, %r399;
	mul.wide.s32 	%rd381, %r5237, 4;
	add.s64 	%rd382, %rd39, %rd381;
	st.global.f32 	[%rd382], %f436;

$L__BB0_580:
	@%p17 bra 	$L__BB0_585;

	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1181;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r5239, %r1314, %r412;
	mul.wide.s32 	%rd383, %r5239, 4;
	add.s64 	%rd384, %rd39, %rd383;
	st.global.f32 	[%rd384], %f437;

$L__BB0_583:
	not.pred 	%p361, %p16;
	@%p361 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1181;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r5241, %r1314, %r413;
	mul.wide.s32 	%rd385, %r5241, 4;
	add.s64 	%rd386, %rd39, %rd385;
	st.global.f32 	[%rd386], %f438;

$L__BB0_585:
	add.s32 	%r7383, %r1296, 1;
	add.s32 	%r5242, %r7383, %r1306;
	mul.lo.s32 	%r5243, %r5242, %r55;
	sub.s32 	%r1315, %r5243, %r1742;
	@%p17 bra 	$L__BB0_590;

	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r5245, %r1315, %r398;
	mul.wide.s32 	%rd387, %r5245, 4;
	add.s64 	%rd388, %rd39, %rd387;
	st.global.f32 	[%rd388], %f439;

$L__BB0_588:
	not.pred 	%p364, %p15;
	@%p364 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7649;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r5247, %r1315, %r399;
	mul.wide.s32 	%rd389, %r5247, 4;
	add.s64 	%rd390, %rd39, %rd389;
	st.global.f32 	[%rd390], %f440;

$L__BB0_590:
	@%p17 bra 	$L__BB0_595;

	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r5249, %r1315, %r412;
	mul.wide.s32 	%rd391, %r5249, 4;
	add.s64 	%rd392, %rd39, %rd391;
	st.global.f32 	[%rd392], %f441;

$L__BB0_593:
	not.pred 	%p367, %p16;
	@%p367 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7648;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r5251, %r1315, %r413;
	mul.wide.s32 	%rd393, %r5251, 4;
	add.s64 	%rd394, %rd39, %rd393;
	st.global.f32 	[%rd394], %f442;

$L__BB0_595:
	add.s32 	%r7384, %r1296, 1;
	add.s32 	%r5252, %r7384, %r1308;
	mul.lo.s32 	%r5253, %r5252, %r55;
	sub.s32 	%r1316, %r5253, %r1742;
	@%p17 bra 	$L__BB0_600;

	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4319;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r5255, %r1316, %r398;
	mul.wide.s32 	%rd395, %r5255, 4;
	add.s64 	%rd396, %rd39, %rd395;
	st.global.f32 	[%rd396], %f443;

$L__BB0_598:
	not.pred 	%p370, %p15;
	@%p370 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4319;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r5257, %r1316, %r399;
	mul.wide.s32 	%rd397, %r5257, 4;
	add.s64 	%rd398, %rd39, %rd397;
	st.global.f32 	[%rd398], %f444;

$L__BB0_600:
	@%p17 bra 	$L__BB0_605;

	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4400;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r5259, %r1316, %r412;
	mul.wide.s32 	%rd399, %r5259, 4;
	add.s64 	%rd400, %rd39, %rd399;
	st.global.f32 	[%rd400], %f445;

$L__BB0_603:
	not.pred 	%p373, %p16;
	@%p373 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4400;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r5261, %r1316, %r413;
	mul.wide.s32 	%rd401, %r5261, 4;
	add.s64 	%rd402, %rd39, %rd401;
	st.global.f32 	[%rd402], %f446;

$L__BB0_605:
	add.s32 	%r7385, %r1296, 1;
	add.s32 	%r5262, %r7385, %r1313;
	mul.lo.s32 	%r5263, %r5262, %r55;
	sub.s32 	%r1317, %r5263, %r1742;
	@%p17 bra 	$L__BB0_610;

	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1193;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r5265, %r1317, %r398;
	mul.wide.s32 	%rd403, %r5265, 4;
	add.s64 	%rd404, %rd39, %rd403;
	st.global.f32 	[%rd404], %f447;

$L__BB0_608:
	not.pred 	%p376, %p15;
	@%p376 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1193;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r5267, %r1317, %r399;
	mul.wide.s32 	%rd405, %r5267, 4;
	add.s64 	%rd406, %rd39, %rd405;
	st.global.f32 	[%rd406], %f448;

$L__BB0_610:
	@%p17 bra 	$L__BB0_615;

	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1205;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r5269, %r1317, %r412;
	mul.wide.s32 	%rd407, %r5269, 4;
	add.s64 	%rd408, %rd39, %rd407;
	st.global.f32 	[%rd408], %f449;

$L__BB0_613:
	not.pred 	%p379, %p16;
	@%p379 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1205;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r5271, %r1317, %r413;
	mul.wide.s32 	%rd409, %r5271, 4;
	add.s64 	%rd410, %rd39, %rd409;
	st.global.f32 	[%rd410], %f450;

$L__BB0_615:
	add.s32 	%r1318, %r1296, 2;
	add.s32 	%r5272, %r1318, %r1306;
	mul.lo.s32 	%r5273, %r5272, %r55;
	sub.s32 	%r1319, %r5273, %r1742;
	@%p17 bra 	$L__BB0_620;

	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4460;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r5275, %r1319, %r398;
	mul.wide.s32 	%rd411, %r5275, 4;
	add.s64 	%rd412, %rd39, %rd411;
	st.global.f32 	[%rd412], %f451;

$L__BB0_618:
	not.pred 	%p382, %p15;
	@%p382 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4460;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r5277, %r1319, %r399;
	mul.wide.s32 	%rd413, %r5277, 4;
	add.s64 	%rd414, %rd39, %rd413;
	st.global.f32 	[%rd414], %f452;

$L__BB0_620:
	@%p17 bra 	$L__BB0_625;

	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4494;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r5279, %r1319, %r412;
	mul.wide.s32 	%rd415, %r5279, 4;
	add.s64 	%rd416, %rd39, %rd415;
	st.global.f32 	[%rd416], %f453;

$L__BB0_623:
	not.pred 	%p385, %p16;
	@%p385 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4494;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r5281, %r1319, %r413;
	mul.wide.s32 	%rd417, %r5281, 4;
	add.s64 	%rd418, %rd39, %rd417;
	st.global.f32 	[%rd418], %f454;

$L__BB0_625:
	mul.lo.s32 	%r1320, %r5160, %r54;
	add.s32 	%r5284, %r1305, %r1320;
	mul.lo.s32 	%r5285, %r5284, %r55;
	sub.s32 	%r1321, %r5285, %r1742;
	@%p17 bra 	$L__BB0_630;

	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r5287, %r1321, %r398;
	mul.wide.s32 	%rd419, %r5287, 4;
	add.s64 	%rd420, %rd39, %rd419;
	st.global.f32 	[%rd420], %f455;

$L__BB0_628:
	not.pred 	%p388, %p15;
	@%p388 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7647;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r5289, %r1321, %r399;
	mul.wide.s32 	%rd421, %r5289, 4;
	add.s64 	%rd422, %rd39, %rd421;
	st.global.f32 	[%rd422], %f456;

$L__BB0_630:
	@%p17 bra 	$L__BB0_635;

	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7646;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r5291, %r1321, %r412;
	mul.wide.s32 	%rd423, %r5291, 4;
	add.s64 	%rd424, %rd39, %rd423;
	st.global.f32 	[%rd424], %f457;

$L__BB0_633:
	not.pred 	%p391, %p16;
	@%p391 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7646;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r5293, %r1321, %r413;
	mul.wide.s32 	%rd425, %r5293, 4;
	add.s64 	%rd426, %rd39, %rd425;
	st.global.f32 	[%rd426], %f458;

$L__BB0_635:
	sub.s32 	%r7391, %r655, %r1738;
	add.s32 	%r5295, %r7391, %r1312;
	mul.lo.s32 	%r1322, %r5295, %r54;
	add.s32 	%r5296, %r1305, %r1322;
	mul.lo.s32 	%r5297, %r5296, %r55;
	sub.s32 	%r1323, %r5297, %r1742;
	@%p17 bra 	$L__BB0_640;

	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1223;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r5299, %r1323, %r398;
	mul.wide.s32 	%rd427, %r5299, 4;
	add.s64 	%rd428, %rd39, %rd427;
	st.global.f32 	[%rd428], %f459;

$L__BB0_638:
	not.pred 	%p394, %p15;
	@%p394 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1223;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r5301, %r1323, %r399;
	mul.wide.s32 	%rd429, %r5301, 4;
	add.s64 	%rd430, %rd39, %rd429;
	st.global.f32 	[%rd430], %f460;

$L__BB0_640:
	@%p17 bra 	$L__BB0_645;

	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1229;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r5303, %r1323, %r412;
	mul.wide.s32 	%rd431, %r5303, 4;
	add.s64 	%rd432, %rd39, %rd431;
	st.global.f32 	[%rd432], %f461;

$L__BB0_643:
	not.pred 	%p397, %p16;
	@%p397 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1229;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r5305, %r1323, %r413;
	mul.wide.s32 	%rd433, %r5305, 4;
	add.s64 	%rd434, %rd39, %rd433;
	st.global.f32 	[%rd434], %f462;

$L__BB0_645:
	mul.lo.s32 	%r1324, %r5146, %r54;
	add.s32 	%r5308, %r1296, %r1324;
	mul.lo.s32 	%r5309, %r5308, %r55;
	sub.s32 	%r1325, %r5309, %r1742;
	@%p17 bra 	$L__BB0_650;

	not.pred 	%p399, %p13;
	@%p399 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r5311, %r1325, %r398;
	mul.wide.s32 	%rd435, %r5311, 4;
	add.s64 	%rd436, %rd39, %rd435;
	st.global.f32 	[%rd436], %f463;

$L__BB0_648:
	not.pred 	%p400, %p15;
	@%p400 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7645;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r5313, %r1325, %r399;
	mul.wide.s32 	%rd437, %r5313, 4;
	add.s64 	%rd438, %rd39, %rd437;
	st.global.f32 	[%rd438], %f464;

$L__BB0_650:
	@%p17 bra 	$L__BB0_655;

	not.pred 	%p402, %p14;
	@%p402 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r5315, %r1325, %r412;
	mul.wide.s32 	%rd439, %r5315, 4;
	add.s64 	%rd440, %rd39, %rd439;
	st.global.f32 	[%rd440], %f465;

$L__BB0_653:
	not.pred 	%p403, %p16;
	@%p403 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7644;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r5317, %r1325, %r413;
	mul.wide.s32 	%rd441, %r5317, 4;
	add.s64 	%rd442, %rd39, %rd441;
	st.global.f32 	[%rd442], %f466;

$L__BB0_655:
	add.s32 	%r5318, %r1296, %r1320;
	mul.lo.s32 	%r5319, %r5318, %r55;
	sub.s32 	%r1326, %r5319, %r1742;
	@%p17 bra 	$L__BB0_660;

	not.pred 	%p405, %p13;
	@%p405 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r5321, %r1326, %r398;
	mul.wide.s32 	%rd443, %r5321, 4;
	add.s64 	%rd444, %rd39, %rd443;
	st.global.f32 	[%rd444], %f467;

$L__BB0_658:
	not.pred 	%p406, %p15;
	@%p406 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7643;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r5323, %r1326, %r399;
	mul.wide.s32 	%rd445, %r5323, 4;
	add.s64 	%rd446, %rd39, %rd445;
	st.global.f32 	[%rd446], %f468;

$L__BB0_660:
	@%p17 bra 	$L__BB0_665;

	not.pred 	%p408, %p14;
	@%p408 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r5325, %r1326, %r412;
	mul.wide.s32 	%rd447, %r5325, 4;
	add.s64 	%rd448, %rd39, %rd447;
	st.global.f32 	[%rd448], %f469;

$L__BB0_663:
	not.pred 	%p409, %p16;
	@%p409 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7642;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r5327, %r1326, %r413;
	mul.wide.s32 	%rd449, %r5327, 4;
	add.s64 	%rd450, %rd39, %rd449;
	st.global.f32 	[%rd450], %f470;

$L__BB0_665:
	add.s32 	%r5328, %r1296, %r1322;
	mul.lo.s32 	%r5329, %r5328, %r55;
	sub.s32 	%r1327, %r5329, %r1742;
	@%p17 bra 	$L__BB0_670;

	not.pred 	%p411, %p13;
	@%p411 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r5331, %r1327, %r398;
	mul.wide.s32 	%rd451, %r5331, 4;
	add.s64 	%rd452, %rd39, %rd451;
	st.global.f32 	[%rd452], %f471;

$L__BB0_668:
	not.pred 	%p412, %p15;
	@%p412 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7641;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r5333, %r1327, %r399;
	mul.wide.s32 	%rd453, %r5333, 4;
	add.s64 	%rd454, %rd39, %rd453;
	st.global.f32 	[%rd454], %f472;

$L__BB0_670:
	@%p17 bra 	$L__BB0_675;

	not.pred 	%p414, %p14;
	@%p414 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5335, %r1327, %r412;
	mul.wide.s32 	%rd455, %r5335, 4;
	add.s64 	%rd456, %rd39, %rd455;
	st.global.f32 	[%rd456], %f473;

$L__BB0_673:
	not.pred 	%p415, %p16;
	@%p415 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7640;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5337, %r1327, %r413;
	mul.wide.s32 	%rd457, %r5337, 4;
	add.s64 	%rd458, %rd39, %rd457;
	st.global.f32 	[%rd458], %f474;

$L__BB0_675:
	add.s32 	%r7386, %r1296, 1;
	add.s32 	%r5338, %r7386, %r1324;
	mul.lo.s32 	%r5339, %r5338, %r55;
	sub.s32 	%r1328, %r5339, %r1742;
	@%p17 bra 	$L__BB0_680;

	not.pred 	%p417, %p13;
	@%p417 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5341, %r1328, %r398;
	mul.wide.s32 	%rd459, %r5341, 4;
	add.s64 	%rd460, %rd39, %rd459;
	st.global.f32 	[%rd460], %f475;

$L__BB0_678:
	not.pred 	%p418, %p15;
	@%p418 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7639;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5343, %r1328, %r399;
	mul.wide.s32 	%rd461, %r5343, 4;
	add.s64 	%rd462, %rd39, %rd461;
	st.global.f32 	[%rd462], %f476;

$L__BB0_680:
	@%p17 bra 	$L__BB0_685;

	not.pred 	%p420, %p14;
	@%p420 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5345, %r1328, %r412;
	mul.wide.s32 	%rd463, %r5345, 4;
	add.s64 	%rd464, %rd39, %rd463;
	st.global.f32 	[%rd464], %f477;

$L__BB0_683:
	not.pred 	%p421, %p16;
	@%p421 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7638;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5347, %r1328, %r413;
	mul.wide.s32 	%rd465, %r5347, 4;
	add.s64 	%rd466, %rd39, %rd465;
	st.global.f32 	[%rd466], %f478;

$L__BB0_685:
	add.s32 	%r7387, %r1296, 1;
	add.s32 	%r5348, %r7387, %r1320;
	mul.lo.s32 	%r5349, %r5348, %r55;
	sub.s32 	%r1329, %r5349, %r1742;
	@%p17 bra 	$L__BB0_690;

	not.pred 	%p423, %p13;
	@%p423 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5351, %r1329, %r398;
	mul.wide.s32 	%rd467, %r5351, 4;
	add.s64 	%rd468, %rd39, %rd467;
	st.global.f32 	[%rd468], %f479;

$L__BB0_688:
	not.pred 	%p424, %p15;
	@%p424 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7637;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5353, %r1329, %r399;
	mul.wide.s32 	%rd469, %r5353, 4;
	add.s64 	%rd470, %rd39, %rd469;
	st.global.f32 	[%rd470], %f480;

$L__BB0_690:
	@%p17 bra 	$L__BB0_695;

	not.pred 	%p426, %p14;
	@%p426 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5355, %r1329, %r412;
	mul.wide.s32 	%rd471, %r5355, 4;
	add.s64 	%rd472, %rd39, %rd471;
	st.global.f32 	[%rd472], %f481;

$L__BB0_693:
	not.pred 	%p427, %p16;
	@%p427 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7636;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5357, %r1329, %r413;
	mul.wide.s32 	%rd473, %r5357, 4;
	add.s64 	%rd474, %rd39, %rd473;
	st.global.f32 	[%rd474], %f482;

$L__BB0_695:
	add.s32 	%r7388, %r1296, 1;
	add.s32 	%r5358, %r7388, %r1322;
	mul.lo.s32 	%r5359, %r5358, %r55;
	sub.s32 	%r1330, %r5359, %r1742;
	@%p17 bra 	$L__BB0_700;

	not.pred 	%p429, %p13;
	@%p429 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5361, %r1330, %r398;
	mul.wide.s32 	%rd475, %r5361, 4;
	add.s64 	%rd476, %rd39, %rd475;
	st.global.f32 	[%rd476], %f483;

$L__BB0_698:
	not.pred 	%p430, %p15;
	@%p430 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7635;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5363, %r1330, %r399;
	mul.wide.s32 	%rd477, %r5363, 4;
	add.s64 	%rd478, %rd39, %rd477;
	st.global.f32 	[%rd478], %f484;

$L__BB0_700:
	@%p17 bra 	$L__BB0_705;

	not.pred 	%p432, %p14;
	@%p432 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5365, %r1330, %r412;
	mul.wide.s32 	%rd479, %r5365, 4;
	add.s64 	%rd480, %rd39, %rd479;
	st.global.f32 	[%rd480], %f485;

$L__BB0_703:
	not.pred 	%p433, %p16;
	@%p433 bra 	$L__BB0_705;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7634;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5367, %r1330, %r413;
	mul.wide.s32 	%rd481, %r5367, 4;
	add.s64 	%rd482, %rd39, %rd481;
	st.global.f32 	[%rd482], %f486;

$L__BB0_705:
	add.s32 	%r5368, %r1318, %r1322;
	mul.lo.s32 	%r5369, %r5368, %r55;
	sub.s32 	%r1331, %r5369, %r1742;
	@%p17 bra 	$L__BB0_710;

	not.pred 	%p435, %p13;
	@%p435 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1278;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5371, %r1331, %r398;
	mul.wide.s32 	%rd483, %r5371, 4;
	add.s64 	%rd484, %rd39, %rd483;
	st.global.f32 	[%rd484], %f487;

$L__BB0_708:
	not.pred 	%p436, %p15;
	@%p436 bra 	$L__BB0_710;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1278;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5373, %r1331, %r399;
	mul.wide.s32 	%rd485, %r5373, 4;
	add.s64 	%rd486, %rd39, %rd485;
	st.global.f32 	[%rd486], %f488;

$L__BB0_710:
	@%p17 bra 	$L__BB0_715;

	not.pred 	%p438, %p14;
	@%p438 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1279;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5375, %r1331, %r412;
	mul.wide.s32 	%rd487, %r5375, 4;
	add.s64 	%rd488, %rd39, %rd487;
	st.global.f32 	[%rd488], %f489;

$L__BB0_713:
	not.pred 	%p439, %p16;
	@%p439 bra 	$L__BB0_715;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1279;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5377, %r1331, %r413;
	mul.wide.s32 	%rd489, %r5377, 4;
	add.s64 	%rd490, %rd39, %rd489;
	st.global.f32 	[%rd490], %f490;

$L__BB0_715:
	sub.s32 	%r7392, %r655, %r1738;
	add.s32 	%r1332, %r7392, 1;
	add.s32 	%r5378, %r1332, %r1300;
	mad.lo.s32 	%r5380, %r5378, %r54, %r1296;
	mul.lo.s32 	%r5381, %r5380, %r55;
	sub.s32 	%r1333, %r5381, %r1742;
	@%p17 bra 	$L__BB0_720;

	not.pred 	%p441, %p13;
	@%p441 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f491, low;}

	// end inline asm
	add.s32 	%r5383, %r1333, %r398;
	mul.wide.s32 	%rd491, %r5383, 4;
	add.s64 	%rd492, %rd39, %rd491;
	st.global.f32 	[%rd492], %f491;

$L__BB0_718:
	not.pred 	%p442, %p15;
	@%p442 bra 	$L__BB0_720;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7633;
  cvt.f32.f16 %f492, high;}

	// end inline asm
	add.s32 	%r5385, %r1333, %r399;
	mul.wide.s32 	%rd493, %r5385, 4;
	add.s64 	%rd494, %rd39, %rd493;
	st.global.f32 	[%rd494], %f492;

$L__BB0_720:
	@%p17 bra 	$L__BB0_725;

	not.pred 	%p444, %p14;
	@%p444 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f493, low;}

	// end inline asm
	add.s32 	%r5387, %r1333, %r412;
	mul.wide.s32 	%rd495, %r5387, 4;
	add.s64 	%rd496, %rd39, %rd495;
	st.global.f32 	[%rd496], %f493;

$L__BB0_723:
	not.pred 	%p445, %p16;
	@%p445 bra 	$L__BB0_725;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7632;
  cvt.f32.f16 %f494, high;}

	// end inline asm
	add.s32 	%r5389, %r1333, %r413;
	mul.wide.s32 	%rd497, %r5389, 4;
	add.s64 	%rd498, %rd39, %rd497;
	st.global.f32 	[%rd498], %f494;

$L__BB0_725:
	add.s32 	%r5391, %r1332, %r1312;
	mul.lo.s32 	%r1334, %r5391, %r54;
	add.s32 	%r5392, %r1296, %r1334;
	mul.lo.s32 	%r5393, %r5392, %r55;
	sub.s32 	%r1335, %r5393, %r1742;
	@%p17 bra 	$L__BB0_730;

	not.pred 	%p447, %p13;
	@%p447 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f495, low;}

	// end inline asm
	add.s32 	%r5395, %r1335, %r398;
	mul.wide.s32 	%rd499, %r5395, 4;
	add.s64 	%rd500, %rd39, %rd499;
	st.global.f32 	[%rd500], %f495;

$L__BB0_728:
	not.pred 	%p448, %p15;
	@%p448 bra 	$L__BB0_730;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7631;
  cvt.f32.f16 %f496, high;}

	// end inline asm
	add.s32 	%r5397, %r1335, %r399;
	mul.wide.s32 	%rd501, %r5397, 4;
	add.s64 	%rd502, %rd39, %rd501;
	st.global.f32 	[%rd502], %f496;

$L__BB0_730:
	@%p17 bra 	$L__BB0_735;

	not.pred 	%p450, %p14;
	@%p450 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f497, low;}

	// end inline asm
	add.s32 	%r5399, %r1335, %r412;
	mul.wide.s32 	%rd503, %r5399, 4;
	add.s64 	%rd504, %rd39, %rd503;
	st.global.f32 	[%rd504], %f497;

$L__BB0_733:
	not.pred 	%p451, %p16;
	@%p451 bra 	$L__BB0_735;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7630;
  cvt.f32.f16 %f498, high;}

	// end inline asm
	add.s32 	%r5401, %r1335, %r413;
	mul.wide.s32 	%rd505, %r5401, 4;
	add.s64 	%rd506, %rd39, %rd505;
	st.global.f32 	[%rd506], %f498;

$L__BB0_735:
	add.s32 	%r7389, %r1296, 1;
	add.s32 	%r5402, %r7389, %r1334;
	mul.lo.s32 	%r5403, %r5402, %r55;
	sub.s32 	%r1336, %r5403, %r1742;
	@%p17 bra 	$L__BB0_740;

	not.pred 	%p453, %p13;
	@%p453 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f499, low;}

	// end inline asm
	add.s32 	%r5405, %r1336, %r398;
	mul.wide.s32 	%rd507, %r5405, 4;
	add.s64 	%rd508, %rd39, %rd507;
	st.global.f32 	[%rd508], %f499;

$L__BB0_738:
	not.pred 	%p454, %p15;
	@%p454 bra 	$L__BB0_740;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7629;
  cvt.f32.f16 %f500, high;}

	// end inline asm
	add.s32 	%r5407, %r1336, %r399;
	mul.wide.s32 	%rd509, %r5407, 4;
	add.s64 	%rd510, %rd39, %rd509;
	st.global.f32 	[%rd510], %f500;

$L__BB0_740:
	@%p17 bra 	$L__BB0_745;

	not.pred 	%p456, %p14;
	@%p456 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f501, low;}

	// end inline asm
	add.s32 	%r5409, %r1336, %r412;
	mul.wide.s32 	%rd511, %r5409, 4;
	add.s64 	%rd512, %rd39, %rd511;
	st.global.f32 	[%rd512], %f501;

$L__BB0_743:
	not.pred 	%p457, %p16;
	@%p457 bra 	$L__BB0_745;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7628;
  cvt.f32.f16 %f502, high;}

	// end inline asm
	add.s32 	%r5411, %r1336, %r413;
	mul.wide.s32 	%rd513, %r5411, 4;
	add.s64 	%rd514, %rd39, %rd513;
	st.global.f32 	[%rd514], %f502;

$L__BB0_745:
	setp.eq.s32 	%p458, %r35, %r2225;
	@%p458 bra 	$L__BB0_747;

	mad.lo.s32 	%r5412, %r1725, %r35, %r36;
	mov.u32 	%r5413, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5414, %r5412, 1280, %r5413;
	add.s32 	%r5415, %r5414, -256;
	shl.b32 	%r5416, %r40, 4;
	add.s32 	%r5417, %r5415, %r5416;
	st.shared.v4.u32 	[%r5417+256], {%r3938, %r4015, %r1223, %r1229};
	st.shared.v4.u32 	[%r5417+1024], {%r3705, %r3782, %r1169, %r1181};
	shl.b32 	%r5418, %r40, 3;
	add.s32 	%r5419, %r5415, %r5418;
	st.shared.v2.u32 	[%r5419+768], {%r3981, %r4047};

$L__BB0_747:
	setp.eq.s32 	%p459, %r36, %r2230;
	@%p459 bra 	$L__BB0_751;

	mad.lo.s32 	%r5423, %r1724, 384, -64;
	mul.lo.s32 	%r5424, %r5423, %r36;
	mad.lo.s32 	%r5426, %r2226, %r2225, %r5424;
	mad.lo.s32 	%r5427, %r2630, 384, %r5426;
	shl.b32 	%r5428, %r5427, 2;
	mov.u32 	%r5429, _ZN6kernel5shmemE;
	add.s32 	%r5430, %r5429, %r5428;
	add.s32 	%r5431, %r5430, -256;
	shl.b32 	%r5432, %r40, 4;
	add.s32 	%r5433, %r5431, %r5432;
	st.shared.v4.u32 	[%r5433+256], {%r3859, %r3893, %r1193, %r1205};
	st.shared.v4.u32 	[%r5433+1024], {%r4460, %r4494, %r1278, %r1279};
	shl.b32 	%r5434, %r40, 3;
	add.s32 	%r1340, %r5431, %r5434;
	@%p458 bra 	$L__BB0_750;

	st.shared.v2.u32 	[%r1340], {%r3748, %r3814};

$L__BB0_750:
	st.shared.v2.u32 	[%r1340+768], {%r4319, %r4400};

$L__BB0_751:
	setp.ne.s32 	%p461, %r35, %r2225;
	ld.param.u64 	%rd515, [%rd1+80];
	cvta.to.global.u64 	%rd40, %rd515;
	@%p461 bra 	$L__BB0_753;

	mad.lo.s32 	%r5436, %r653, %r1727, %r38;
	mul.lo.s32 	%r5437, %r1725, %r5436;
	mul.lo.s32 	%r5438, %r5437, 768;
	mad.lo.s32 	%r5439, %r36, 384, %r5438;
	add.s32 	%r5440, %r5439, -64;
	mul.wide.s32 	%rd516, %r5440, 4;
	add.s64 	%rd517, %rd40, %rd516;
	add.s64 	%rd519, %rd517, %rd281;
	st.global.v4.u32 	[%rd519+256], {%r3938, %r4015, %r1223, %r1229};
	st.global.v4.u32 	[%rd519+1024], {%r3705, %r3782, %r1169, %r1181};
	add.s64 	%rd521, %rd517, %rd283;
	st.global.v2.u32 	[%rd521+768], {%r3981, %r4047};
	st.global.v2.u32 	[%rd521+1536], {%r3748, %r3814};

$L__BB0_753:
	setp.ne.s32 	%p462, %r36, %r2230;
	@%p462 bra 	$L__BB0_758;

	ld.param.u64 	%rd566, [%rd1+80];
	cvta.to.global.u64 	%rd565, %rd566;
	mad.lo.s32 	%r5443, %r654, %r1726, %r37;
	mul.lo.s32 	%r5447, %r5443, %r1787;
	mad.lo.s32 	%r5450, %r2630, 384, %r5447;
	add.s32 	%r5451, %r5450, -64;
	mad.lo.s32 	%r5454, %r1789, %r68, %r5451;
	mul.wide.s32 	%rd522, %r5454, 4;
	add.s64 	%rd523, %rd565, %rd522;
	add.s64 	%rd525, %rd523, %rd281;
	st.global.v4.u32 	[%rd525+256], {%r3859, %r3893, %r1193, %r1205};
	st.global.v4.u32 	[%rd525+1024], {%r4460, %r4494, %r1278, %r1279};
	add.s64 	%rd41, %rd523, %rd283;
	@%p458 bra 	$L__BB0_756;

	st.global.v2.u32 	[%rd41], {%r3748, %r3814};

$L__BB0_756:
	st.global.v2.u32 	[%rd41+768], {%r4319, %r4400};
	@%p251 bra 	$L__BB0_758;

	st.global.v2.u32 	[%rd41+1536], {%r7818, %r7817};

$L__BB0_758:
	setp.ge.s32 	%p465, %r35, %r2225;
	@%p465 bra 	$L__BB0_760;

	mul.lo.s32 	%r5455, %r1725, 320;
	mul.lo.s32 	%r5456, %r36, 320;
	mad.lo.s32 	%r5457, %r5455, %r35, %r5456;
	add.s32 	%r5461, %r1786, -64;
	mad.lo.s32 	%r5465, %r5461, %r2230, %r2227;
	add.s32 	%r5466, %r5457, %r5465;
	shl.b32 	%r5467, %r5466, 2;
	mov.u32 	%r5468, _ZN6kernel5shmemE;
	add.s32 	%r5469, %r5468, %r5467;
	shl.b32 	%r5470, %r40, 4;
	add.s32 	%r5471, %r5469, %r5470;
	st.shared.v4.u32 	[%r5471], {%r7866, %r7865, %r7861, %r7859};
	shl.b32 	%r5472, %r40, 3;
	add.s32 	%r5473, %r5469, %r5472;
	st.shared.v2.u32 	[%r5473+512], {%r7603, %r7598};
	st.shared.v4.u32 	[%r5471+768], {%r7627, %r7618, %r7590, %r7586};

$L__BB0_760:
	setp.ge.s32 	%p466, %r36, %r2230;
	@%p466 bra 	$L__BB0_764;

	mad.lo.s32 	%r5479, %r2630, 384, %r2233;
	mad.lo.s32 	%r5482, %r2228, %r36, %r5479;
	add.s32 	%r5488, %r5482, %r2231;
	shl.b32 	%r5489, %r5488, 2;
	mov.u32 	%r5490, _ZN6kernel5shmemE;
	add.s32 	%r5491, %r5490, %r5489;
	shl.b32 	%r5492, %r40, 3;
	add.s32 	%r5493, %r5491, %r5492;
	@%p465 bra 	$L__BB0_763;

	add.s32 	%r7372, %r5493, -256;
	st.shared.v2.u32 	[%r7372], {%r7622, %r7615};

$L__BB0_763:
	shl.b32 	%r5512, %r40, 4;
	add.s32 	%r5513, %r5491, %r5512;
	st.shared.v4.u32 	[%r5513], {%r7613, %r7609, %r7578, %r7574};
	add.s32 	%r7373, %r5493, -256;
	st.shared.v2.u32 	[%r7373+768], {%r7581, %r7575};
	st.shared.v4.u32 	[%r5513+768], {%r7864, %r7863, %r7852, %r7851};

$L__BB0_764:
	bar.sync 	0;
	@%p246 bra 	$L__BB0_766;

	mul.lo.s32 	%r5514, %r1725, 320;
	add.s32 	%r5515, %r35, -1;
	mul.lo.s32 	%r5516, %r36, 320;
	mad.lo.s32 	%r5517, %r5514, %r5515, %r5516;
	shl.b32 	%r5518, %r5517, 2;
	mov.u32 	%r5519, _ZN6kernel5shmemE;
	add.s32 	%r5520, %r5519, %r5518;
	add.s32 	%r5521, %r5520, -256;
	shl.b32 	%r5522, %r40, 4;
	add.s32 	%r5523, %r5521, %r5522;
	ld.shared.v4.u32 	{%r7814, %r7812, %r7806, %r7805}, [%r5523+256];
	ld.shared.v4.u32 	{%r7816, %r7815, %r7810, %r7809}, [%r5523+1024];
	shl.b32 	%r5532, %r40, 3;
	add.s32 	%r5533, %r5521, %r5532;
	ld.shared.v2.u32 	{%r7813, %r7811}, [%r5533+768];

$L__BB0_766:
	@%p249 bra 	$L__BB0_769;

	mad.lo.s32 	%r5538, %r1724, 384, -64;
	add.s32 	%r5539, %r36, -1;
	mul.lo.s32 	%r5540, %r5538, %r5539;
	mad.lo.s32 	%r5543, %r2226, %r2225, %r5540;
	mad.lo.s32 	%r5544, %r2630, 384, %r5543;
	shl.b32 	%r5545, %r5544, 2;
	mov.u32 	%r5546, _ZN6kernel5shmemE;
	add.s32 	%r5547, %r5546, %r5545;
	add.s32 	%r5548, %r5547, -256;
	shl.b32 	%r5549, %r40, 4;
	add.s32 	%r5550, %r5548, %r5549;
	ld.shared.v4.u32 	{%r7830, %r7829, %r7827, %r7825}, [%r5550+256];
	ld.shared.v4.u32 	{%r7824, %r7823, %r7821, %r7819}, [%r5550+1024];
	shl.b32 	%r5559, %r40, 3;
	add.s32 	%r5560, %r5548, %r5559;
	ld.shared.v2.u32 	{%r7828, %r7826}, [%r5560+768];
	@%p246 bra 	$L__BB0_769;

	add.s32 	%r7374, %r5560, 768;
	ld.shared.v2.u32 	{%r7808, %r7807}, [%r7374+768];

$L__BB0_769:
	ld.param.u64 	%rd527, [%rd1+80];
	cvta.to.global.u64 	%rd42, %rd527;
	mov.u32 	%r7945, %r7787;
	mov.u32 	%r7946, %r7788;
	mov.u32 	%r7931, %r7775;
	mov.u32 	%r7932, %r7776;
	mov.u32 	%r7933, %r7777;
	mov.u32 	%r7934, %r7778;
	mov.u32 	%r7947, %r7789;
	mov.u32 	%r7949, %r7791;
	mov.u32 	%r7937, %r7779;
	mov.u32 	%r7938, %r7780;
	mov.u32 	%r7939, %r7781;
	mov.u32 	%r7940, %r7782;
	@%p251 bra 	$L__BB0_773;

	mad.lo.s32 	%r5566, %r653, %r1727, %r38;
	mad.lo.s32 	%r5567, %r5566, 768, 384;
	mul.lo.s32 	%r5568, %r5567, %r1725;
	mad.lo.s32 	%r5569, %r36, 384, %r5568;
	add.s32 	%r5570, %r5569, -128;
	mul.wide.s32 	%rd528, %r5570, 4;
	add.s64 	%rd529, %rd42, %rd528;
	add.s64 	%rd531, %rd529, %rd281;
	add.s64 	%rd43, %rd531, 512;
	mov.u32 	%r7945, %r7787;
	mov.u32 	%r7946, %r7788;
	mov.u32 	%r7947, %r7789;
	mov.u32 	%r7949, %r7791;
	@%p249 bra 	$L__BB0_772;

	ld.global.v4.u32 	{%r7946, %r7945, %r7949, %r7947}, [%rd43+-512];

$L__BB0_772:
	ld.global.v4.u32 	{%r7933, %r7931, %r7934, %r7932}, [%rd43];
	ld.global.v4.u32 	{%r7940, %r7939, %r7938, %r7937}, [%rd43+512];
	ld.global.v4.u32 	{%r7784, %r7783, %r7786, %r7785}, [%rd43+1024];

$L__BB0_773:
	mov.u32 	%r7948, %r7790;
	mov.u32 	%r7950, %r7792;
	mov.u32 	%r7951, %r7793;
	mov.u32 	%r7952, %r7794;
	mov.u32 	%r7953, %r7795;
	mov.u32 	%r7954, %r7796;
	mov.u32 	%r7955, %r7797;
	mov.u32 	%r7956, %r7798;
	@%p254 bra 	$L__BB0_775;

	mad.lo.s32 	%r5588, %r654, %r1726, %r37;
	mad.lo.s32 	%r5594, %r2630, 384, %r69;
	mad.lo.s32 	%r5595, %r5588, %r1787, %r5594;
	mad.lo.s32 	%r5598, %r1789, %r68, %r5595;
	mul.wide.s32 	%rd532, %r5598, 4;
	add.s64 	%rd533, %rd42, %rd532;
	add.s64 	%rd535, %rd533, %rd281;
	ld.global.v4.u32 	{%r7800, %r7799, %r7802, %r7801}, [%rd535];
	ld.global.v4.u32 	{%r7956, %r7954, %r7952, %r7951}, [%rd535+512];
	ld.global.v4.u32 	{%r7955, %r7953, %r7950, %r7948}, [%rd535+1024];
	ld.global.v4.u32 	{%r7946, %r7945, %r7949, %r7947}, [%rd535+1536];

$L__BB0_775:
	neg.s32 	%r7380, %r1729;
	not.b32 	%r7379, %r38;
	add.s32 	%r7378, %r1727, %r7379;
	mul.lo.s32 	%r7377, %r7378, %r1728;
	not.b32 	%r7376, %r37;
	add.s32 	%r7375, %r1726, %r7376;
	mad.lo.s32 	%r5622, %r7375, %r1728, %r7377;
	add.s32 	%r5623, %r5622, %r1729;
	add.s32 	%r5632, %r5623, %r2636;
	add.s32 	%r1460, %r7654, 1;
	add.s32 	%r5633, %r1460, %r5632;
	div.s32 	%r5634, %r5633, %r1729;
	mad.lo.s32 	%r1461, %r5634, %r7380, %r5633;
	mad.lo.s32 	%r5641, %r5634, %r42, %r2647;
	ld.param.u64 	%rd536, [%rd1+96];
	cvta.to.global.u64 	%rd537, %rd536;
	rem.s32 	%r5642, %r5641, %r1730;
	shr.u32 	%r5643, %r5642, 31;
	add.s32 	%r5644, %r5642, %r5643;
	shr.s32 	%r5645, %r5644, 1;
	mad.lo.s32 	%r5646, %r5645, %r1729, %r1461;
	shl.b32 	%r5647, %r5646, 5;
	add.s32 	%r5648, %r5647, %r40;
	cvt.s64.s32 	%rd44, %r5648;
	mul.wide.s32 	%rd538, %r5648, 4;
	add.s64 	%rd539, %rd537, %rd538;
	ld.global.u32 	%r7656, [%rd539];
	ld.param.u64 	%rd540, [%rd1+104];
	cvta.to.global.u64 	%rd45, %rd540;
	@%p109 bra 	$L__BB0_777;
	bra.uni 	$L__BB0_776;

$L__BB0_777:
	shl.b64 	%rd543, %rd44, 2;
	add.s64 	%rd544, %rd45, %rd543;
	ld.global.u32 	%r7655, [%rd544];
	bra.uni 	$L__BB0_778;

$L__BB0_776:
	shl.b32 	%r5649, %r1461, 5;
	add.s32 	%r5650, %r5649, %r40;
	mul.wide.s32 	%rd541, %r5650, 16;
	add.s64 	%rd542, %rd45, %rd541;
	ld.global.v4.u32 	{%r5651, %r5652, %r5653, %r5654}, [%rd542];
	mov.u32 	%r7486, %r7490;
	mov.u32 	%r7487, %r7491;
	mov.u32 	%r7488, %r7492;
	mov.u32 	%r7489, %r7493;
	mov.u32 	%r7490, %r7494;
	mov.u32 	%r7491, %r7495;
	mov.u32 	%r7492, %r7496;
	mov.u32 	%r7493, %r7497;
	mov.u32 	%r7494, %r5654;
	mov.u32 	%r7495, %r5653;
	mov.u32 	%r7496, %r5652;
	mov.u32 	%r7497, %r5651;

$L__BB0_778:
	mov.f32 	%f550, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5655, {low,high};}

	// end inline asm
	selp.b32 	%r5657, %r7481, %r5655, %p17;
	// begin inline asm
	{mul.f16x2 %r5656,%r5657,%r7624;
}
	// end inline asm
	selp.b32 	%r5660, %r7485, %r5655, %p17;
	// begin inline asm
	{mul.f16x2 %r5659,%r5660,%r7617;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5662, {low,high};}

	// end inline asm
	selp.b32 	%r5664, %r7481, %r5662, %p17;
	// begin inline asm
	{mul.f16x2 %r5663,%r5664,%r7605;
}
	// end inline asm
	selp.b32 	%r5667, %r7485, %r5662, %p17;
	// begin inline asm
	{mul.f16x2 %r5666,%r5667,%r7600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5669, {low,high};}

	// end inline asm
	selp.b32 	%r5671, %r7481, %r5669, %p17;
	// begin inline asm
	{mul.f16x2 %r5670,%r5671,%r7592;
}
	// end inline asm
	selp.b32 	%r5674, %r7485, %r5669, %p17;
	// begin inline asm
	{mul.f16x2 %r5673,%r5674,%r7591;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5676, {low,high};}

	// end inline asm
	selp.b32 	%r5678, %r7481, %r5676, %p17;
	// begin inline asm
	{mul.f16x2 %r5677,%r5678,%r7596;
}
	// end inline asm
	selp.b32 	%r5681, %r7485, %r5676, %p17;
	// begin inline asm
	{mul.f16x2 %r5680,%r5681,%r7595;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5683, {low,high};}

	// end inline asm
	selp.b32 	%r5685, %r7481, %r5683, %p17;
	// begin inline asm
	{mul.f16x2 %r5684,%r5685,%r7594;
}
	// end inline asm
	selp.b32 	%r5688, %r7485, %r5683, %p17;
	// begin inline asm
	{mul.f16x2 %r5687,%r5688,%r7588;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5690, {low,high};}

	// end inline asm
	selp.b32 	%r5692, %r7481, %r5690, %p17;
	// begin inline asm
	{mul.f16x2 %r5691,%r5692,%r7584;
}
	// end inline asm
	selp.b32 	%r5695, %r7485, %r5690, %p17;
	// begin inline asm
	{mul.f16x2 %r5694,%r5695,%r7583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5697, {low,high};}

	// end inline asm
	selp.b32 	%r5699, %r7481, %r5697, %p17;
	// begin inline asm
	{mul.f16x2 %r5698,%r5699,%r7582;
}
	// end inline asm
	selp.b32 	%r5702, %r7485, %r5697, %p17;
	// begin inline asm
	{mul.f16x2 %r5701,%r5702,%r7576;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5704, {low,high};}

	// end inline asm
	selp.b32 	%r5706, %r7481, %r5704, %p17;
	// begin inline asm
	{mul.f16x2 %r5705,%r5706,%r7569;
}
	// end inline asm
	selp.b32 	%r5709, %r7485, %r5704, %p17;
	// begin inline asm
	{mul.f16x2 %r5708,%r5709,%r7568;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5711, {low,high};}

	// end inline asm
	selp.b32 	%r5713, %r7481, %r5711, %p17;
	// begin inline asm
	{mul.f16x2 %r5712,%r5713,%r7798;
}
	// end inline asm
	selp.b32 	%r5716, %r7485, %r5711, %p17;
	// begin inline asm
	{mul.f16x2 %r5715,%r5716,%r7796;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5718, {low,high};}

	// end inline asm
	selp.b32 	%r5720, %r7481, %r5718, %p17;
	// begin inline asm
	{mul.f16x2 %r5719,%r5720,%r7797;
}
	// end inline asm
	selp.b32 	%r5723, %r7485, %r5718, %p17;
	// begin inline asm
	{mul.f16x2 %r5722,%r5723,%r7795;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5725, {low,high};}

	// end inline asm
	selp.b32 	%r5727, %r7481, %r5725, %p17;
	// begin inline asm
	{mul.f16x2 %r5726,%r5727,%r7561;
}
	// end inline asm
	selp.b32 	%r5730, %r7485, %r5725, %p17;
	// begin inline asm
	{mul.f16x2 %r5729,%r5730,%r7560;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5732, {low,high};}

	// end inline asm
	selp.b32 	%r5734, %r7481, %r5732, %p17;
	// begin inline asm
	{mul.f16x2 %r5733,%r5734,%r7565;
}
	// end inline asm
	selp.b32 	%r5737, %r7485, %r5732, %p17;
	// begin inline asm
	{mul.f16x2 %r5736,%r5737,%r7564;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5739, {low,high};}

	// end inline asm
	selp.b32 	%r5741, %r7481, %r5739, %p17;
	// begin inline asm
	{mul.f16x2 %r5740,%r5741,%r7563;
}
	// end inline asm
	selp.b32 	%r5744, %r7485, %r5739, %p17;
	// begin inline asm
	{mul.f16x2 %r5743,%r5744,%r7558;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5746, {low,high};}

	// end inline asm
	selp.b32 	%r5748, %r7481, %r5746, %p17;
	// begin inline asm
	{mul.f16x2 %r5747,%r5748,%r7553;
}
	// end inline asm
	selp.b32 	%r5751, %r7485, %r5746, %p17;
	// begin inline asm
	{mul.f16x2 %r5750,%r5751,%r7552;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5753, {low,high};}

	// end inline asm
	selp.b32 	%r5755, %r7481, %r5753, %p17;
	// begin inline asm
	{mul.f16x2 %r5754,%r5755,%r7555;
}
	// end inline asm
	selp.b32 	%r5758, %r7485, %r5753, %p17;
	// begin inline asm
	{mul.f16x2 %r5757,%r5758,%r7554;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5760, {low,high};}

	// end inline asm
	selp.b32 	%r5762, %r7481, %r5760, %p17;
	// begin inline asm
	{mul.f16x2 %r5761,%r5762,%r7782;
}
	// end inline asm
	selp.b32 	%r5765, %r7485, %r5760, %p17;
	// begin inline asm
	{mul.f16x2 %r5764,%r5765,%r7781;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5767, {low,high};}

	// end inline asm
	selp.b32 	%r5769, %r7481, %r5767, %p17;
	// begin inline asm
	{mul.f16x2 %r5768,%r5769,%r7780;
}
	// end inline asm
	selp.b32 	%r5772, %r7485, %r5767, %p17;
	// begin inline asm
	{mul.f16x2 %r5771,%r5772,%r7779;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5774, {low,high};}

	// end inline asm
	selp.b32 	%r5776, %r7481, %r5774, %p17;
	// begin inline asm
	{mul.f16x2 %r5775,%r5776,%r7794;
}
	// end inline asm
	selp.b32 	%r5779, %r7485, %r5774, %p17;
	// begin inline asm
	{mul.f16x2 %r5778,%r5779,%r7793;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5781, {low,high};}

	// end inline asm
	selp.b32 	%r5783, %r7481, %r5781, %p17;
	// begin inline asm
	{mul.f16x2 %r5782,%r5783,%r7547;
}
	// end inline asm
	selp.b32 	%r5786, %r7485, %r5781, %p17;
	// begin inline asm
	{mul.f16x2 %r5785,%r5786,%r7546;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5788, {low,high};}

	// end inline asm
	selp.b32 	%r5790, %r7481, %r5788, %p17;
	// begin inline asm
	{mul.f16x2 %r5789,%r5790,%r7792;
}
	// end inline asm
	selp.b32 	%r5793, %r7485, %r5788, %p17;
	// begin inline asm
	{mul.f16x2 %r5792,%r5793,%r7790;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5795, {low,high};}

	// end inline asm
	selp.b32 	%r5797, %r7481, %r5795, %p17;
	// begin inline asm
	{mul.f16x2 %r5796,%r5797,%r7791;
}
	// end inline asm
	selp.b32 	%r5800, %r7485, %r5795, %p17;
	// begin inline asm
	{mul.f16x2 %r5799,%r5800,%r7789;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5802, {low,high};}

	// end inline asm
	selp.b32 	%r5804, %r7481, %r5802, %p17;
	// begin inline asm
	{mul.f16x2 %r5803,%r5804,%r7778;
}
	// end inline asm
	selp.b32 	%r5807, %r7485, %r5802, %p17;
	// begin inline asm
	{mul.f16x2 %r5806,%r5807,%r7776;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5809, {low,high};}

	// end inline asm
	selp.b32 	%r5811, %r7481, %r5809, %p17;
	// begin inline asm
	{mul.f16x2 %r5810,%r5811,%r7777;
}
	// end inline asm
	selp.b32 	%r5814, %r7485, %r5809, %p17;
	// begin inline asm
	{mul.f16x2 %r5813,%r5814,%r7775;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5816, {low,high};}

	// end inline asm
	selp.b32 	%r5818, %r7481, %r5816, %p17;
	// begin inline asm
	{mul.f16x2 %r5817,%r5818,%r7788;
}
	// end inline asm
	selp.b32 	%r5821, %r7485, %r5816, %p17;
	// begin inline asm
	{mul.f16x2 %r5820,%r5821,%r7787;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5823,%r7651,%r3748;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5826,%r3859,%r3705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5829,%r5823,%r5826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5832,%r7393,%r5829;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5835,%r5656,%r5832;
}
	// end inline asm
	selp.b32 	%r7619, %r5656, %r5835, %p17;
	// begin inline asm
	{sub.f16x2 %r5838,%r7650,%r3814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5841,%r3893,%r3782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r5838,%r5841;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5847,%r7393,%r5844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5850,%r5659,%r5847;
}
	// end inline asm
	selp.b32 	%r7614, %r5659, %r5850, %p17;
	// begin inline asm
	{sub.f16x2 %r5853,%r7647,%r3981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5856,%r7653,%r3938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r5853,%r5856;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5862,%r7393,%r5859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5865,%r5663,%r5862;
}
	// end inline asm
	selp.b32 	%r7623, %r5663, %r5865, %p17;
	// begin inline asm
	{sub.f16x2 %r5868,%r7646,%r4047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5871,%r7652,%r4015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5874,%r5868,%r5871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5877,%r7393,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5880,%r5666,%r5877;
}
	// end inline asm
	selp.b32 	%r7616, %r5666, %r5880, %p17;
	// begin inline asm
	{sub.f16x2 %r5883,%r7650,%r7651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5886,%r7480,%r5883;
}
	// end inline asm
	@%p17 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7974,%r5670;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7974,%r7481,%r5883;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r5897, 31;
	mov.u32 	%r5899, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5895,%r7974,%r5897,%r2333,%r5899;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5900,%r5886,%r5895;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5903,%r1193,%r1169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5906,%r5903,%r5900;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5909,%r7393,%r5906;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7621,%r5670,%r5909;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5915,%r7652,%r7653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5918,%r7480,%r5915;
}
	// end inline asm
	mov.u32 	%r7975, %r5677;
	@%p17 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7975,%r7481,%r5915;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5927,%r7975,%r5897,%r2333,%r5899;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5932,%r5918,%r5927;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5935,%r7641,%r1169;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5938,%r5932,%r5935;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5941,%r7393,%r5938;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7626,%r5677,%r5941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5947,%r7643,%r7651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r7649,%r7653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5953,%r5947,%r5950;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5956,%r7393,%r5953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5959,%r5684,%r5956;
}
	// end inline asm
	selp.b32 	%r7624, %r5684, %r5959, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7651;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5964,%r7651,%r433,%r2333,%r5899;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5964;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5970, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5971,%r5970,%r7650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5974,%r7484,%r5971;
}
	// end inline asm
	@%p17 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7976,%r5673;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7976,%r7485,%r5971;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r5989, 31;
	mov.u32 	%r6013, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5987,%r7976,%r5989,%r2333,%r6013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5992,%r5974,%r5987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5995,%r1205,%r1181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5998,%r5995,%r5992;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6001,%r7393,%r5998;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7620,%r5673,%r6001;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7653;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6009,%r7653,%r433,%r2333,%r6013;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6009;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6015, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6016,%r6015,%r7652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6019,%r7484,%r6016;
}
	// end inline asm
	mov.u32 	%r7977, %r5680;
	@%p17 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7977,%r7485,%r6016;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6030,%r7977,%r5989,%r2333,%r6013;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6035,%r6019,%r6030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6038,%r7640,%r1181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6041,%r6035,%r6038;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6044,%r7393,%r6041;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7625,%r5680,%r6044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6050,%r7642,%r7650;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6053,%r7648,%r7652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6056,%r6050,%r6053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6059,%r7393,%r6056;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6062,%r5687,%r6059;
}
	// end inline asm
	selp.b32 	%r7617, %r5687, %r6062, %p17;
	// begin inline asm
	{sub.f16x2 %r6065,%r7648,%r7649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6068,%r7480,%r6065;
}
	// end inline asm
	mov.u32 	%r7978, %r5691;
	@%p17 bra 	$L__BB0_790;

	// begin inline asm
	{mul.f16x2 %r7978,%r7481,%r6065;
}
	// end inline asm

$L__BB0_790:
	mov.u32 	%r6079, 31;
	mov.u32 	%r6118, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6077,%r7978,%r6079,%r2333,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6082,%r6068,%r6077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6085,%r7635,%r1193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6088,%r6082,%r6085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6091,%r7393,%r6088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7612,%r5691,%r6091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6097,%r7637,%r4319;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6100,%r4460,%r7649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6103,%r6097,%r6100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6106,%r7393,%r6103;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6109,%r5698,%r6106;
}
	// end inline asm
	selp.b32 	%r7610, %r5698, %r6109, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7649;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6114,%r7649,%r433,%r2333,%r6118;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6114;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6120, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6121,%r6120,%r7648;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6124,%r7484,%r6121;
}
	// end inline asm
	mov.u32 	%r7979, %r5694;
	@%p17 bra 	$L__BB0_792;

	// begin inline asm
	{mul.f16x2 %r7979,%r7485,%r6121;
}
	// end inline asm

$L__BB0_792:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6135,%r7979,%r6079,%r2333,%r6118;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6140,%r6124,%r6135;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6143,%r7634,%r1205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6146,%r6140,%r6143;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6149,%r7393,%r6146;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7611,%r5694,%r6149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6155,%r7636,%r4400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r4494,%r7648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r6155,%r6158;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r7393,%r6161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6167,%r5701,%r6164;
}
	// end inline asm
	selp.b32 	%r7608, %r5701, %r6167, %p17;
	// begin inline asm
	{sub.f16x2 %r6170,%r7646,%r7647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6173,%r7480,%r6170;
}
	// end inline asm
	@%p17 bra 	$L__BB0_794;
	bra.uni 	$L__BB0_793;

$L__BB0_794:
	// begin inline asm
	{neg.f16x2 %r7980,%r5705;
}
	// end inline asm
	bra.uni 	$L__BB0_795;

$L__BB0_793:
	// begin inline asm
	{mul.f16x2 %r7980,%r7481,%r6170;
}
	// end inline asm

$L__BB0_795:
	mov.u32 	%r6186, 31;
	mov.u32 	%r6188, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6184,%r7980,%r6186,%r2333,%r6188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6189,%r6173,%r6184;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6192,%r7641,%r1223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6195,%r6192,%r6189;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6198,%r7393,%r6195;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7602,%r5705,%r6198;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6204,%r7829,%r7830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6207,%r7480,%r6204;
}
	// end inline asm
	mov.u32 	%r7981, %r5712;
	@%p17 bra 	$L__BB0_797;

	// begin inline asm
	{mul.f16x2 %r7981,%r7481,%r6204;
}
	// end inline asm

$L__BB0_797:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6216,%r7981,%r6186,%r2333,%r6188;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6221,%r6207,%r6216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6224,%r7827,%r1223;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r6221,%r6224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6230,%r7393,%r6227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7607,%r5712,%r6230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r7828,%r7647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6239,%r7645,%r7830;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6242,%r6236,%r6239;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6245,%r7393,%r6242;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6248,%r5719,%r6245;
}
	// end inline asm
	selp.b32 	%r7605, %r5719, %r6248, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7647;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6253,%r7647,%r433,%r2333,%r6188;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6253;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6259, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6260,%r6259,%r7646;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6263,%r7484,%r6260;
}
	// end inline asm
	@%p17 bra 	$L__BB0_799;
	bra.uni 	$L__BB0_798;

$L__BB0_799:
	// begin inline asm
	{neg.f16x2 %r7982,%r5708;
}
	// end inline asm
	bra.uni 	$L__BB0_800;

$L__BB0_798:
	// begin inline asm
	{mul.f16x2 %r7982,%r7485,%r6260;
}
	// end inline asm

$L__BB0_800:
	mov.u32 	%r6278, 31;
	mov.u32 	%r6302, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6276,%r7982,%r6278,%r2333,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6281,%r6263,%r6276;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6284,%r7640,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6287,%r6284,%r6281;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6290,%r7393,%r6287;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7601,%r5708,%r6290;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7830;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6298,%r7830,%r433,%r2333,%r6302;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6298;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6304, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6305,%r6304,%r7829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6308,%r7484,%r6305;
}
	// end inline asm
	mov.u32 	%r7983, %r5715;
	@%p17 bra 	$L__BB0_802;

	// begin inline asm
	{mul.f16x2 %r7983,%r7485,%r6305;
}
	// end inline asm

$L__BB0_802:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6319,%r7983,%r6278,%r2333,%r6302;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6324,%r6308,%r6319;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6327,%r7825,%r1229;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6330,%r6324,%r6327;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6333,%r7393,%r6330;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7606,%r5715,%r6333;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6339,%r7826,%r7646;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r7644,%r7829;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6345,%r6339,%r6342;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6348,%r7393,%r6345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6351,%r5722,%r6348;
}
	// end inline asm
	selp.b32 	%r7600, %r5722, %r6351, %p17;
	// begin inline asm
	{sub.f16x2 %r6354,%r7642,%r7643;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6357,%r7480,%r6354;
}
	// end inline asm
	@%p17 bra 	$L__BB0_804;
	bra.uni 	$L__BB0_803;

$L__BB0_804:
	// begin inline asm
	{neg.f16x2 %r7984,%r5726;
}
	// end inline asm
	bra.uni 	$L__BB0_805;

$L__BB0_803:
	// begin inline asm
	{mul.f16x2 %r7984,%r7481,%r6354;
}
	// end inline asm

$L__BB0_805:
	mov.u32 	%r6370, 31;
	mov.u32 	%r6372, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6368,%r7984,%r6370,%r2333,%r6372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6373,%r6357,%r6368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6376,%r7635,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6379,%r6376,%r6373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6382,%r7393,%r6379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7592,%r5726,%r6382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6388,%r7644,%r7645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6391,%r7480,%r6388;
}
	// end inline asm
	mov.u32 	%r7985, %r5733;
	@%p17 bra 	$L__BB0_807;

	// begin inline asm
	{mul.f16x2 %r7985,%r7481,%r6388;
}
	// end inline asm

$L__BB0_807:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6400,%r7985,%r6370,%r2333,%r6372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6405,%r6391,%r6400;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r7631,%r7641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6411,%r6405,%r6408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6414,%r7393,%r6411;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7596,%r5733,%r6414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6420,%r7633,%r7643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6423,%r7639,%r7645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6426,%r6420,%r6423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6429,%r7393,%r6426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6432,%r5740,%r6429;
}
	// end inline asm
	selp.b32 	%r7594, %r5740, %r6432, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7643;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6437,%r7643,%r433,%r2333,%r6372;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6437;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6443, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6444,%r6443,%r7642;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6447,%r7484,%r6444;
}
	// end inline asm
	@%p17 bra 	$L__BB0_809;
	bra.uni 	$L__BB0_808;

$L__BB0_809:
	// begin inline asm
	{neg.f16x2 %r7986,%r5729;
}
	// end inline asm
	bra.uni 	$L__BB0_810;

$L__BB0_808:
	// begin inline asm
	{mul.f16x2 %r7986,%r7485,%r6444;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6462, 31;
	mov.u32 	%r6486, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6460,%r7986,%r6462,%r2333,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6465,%r6447,%r6460;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6468,%r7634,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6471,%r6468,%r6465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6474,%r7393,%r6471;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7591,%r5729,%r6474;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7645;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6482,%r7645,%r433,%r2333,%r6486;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6482;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6488, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6489,%r6488,%r7644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6492,%r7484,%r6489;
}
	// end inline asm
	mov.u32 	%r7987, %r5736;
	@%p17 bra 	$L__BB0_812;

	// begin inline asm
	{mul.f16x2 %r7987,%r7485,%r6489;
}
	// end inline asm

$L__BB0_812:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6503,%r7987,%r6462,%r2333,%r6486;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6508,%r6492,%r6503;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6511,%r7630,%r7640;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6514,%r6508,%r6511;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6517,%r7393,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7595,%r5736,%r6517;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6523,%r7632,%r7642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6526,%r7638,%r7644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6529,%r6523,%r6526;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6532,%r7393,%r6529;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6535,%r5743,%r6532;
}
	// end inline asm
	selp.b32 	%r7588, %r5743, %r6535, %p17;
	// begin inline asm
	{sub.f16x2 %r6538,%r7636,%r7637;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6541,%r7480,%r6538;
}
	// end inline asm
	@%p17 bra 	$L__BB0_814;
	bra.uni 	$L__BB0_813;

$L__BB0_814:
	// begin inline asm
	{neg.f16x2 %r7988,%r5747;
}
	// end inline asm
	bra.uni 	$L__BB0_815;

$L__BB0_813:
	// begin inline asm
	{mul.f16x2 %r7988,%r7481,%r6538;
}
	// end inline asm

$L__BB0_815:
	mov.u32 	%r6554, 31;
	mov.u32 	%r6556, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6552,%r7988,%r6554,%r2333,%r6556;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6557,%r6541,%r6552;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6560,%r1278,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6563,%r6560,%r6557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6566,%r7393,%r6563;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7580,%r5747,%r6566;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6572,%r7638,%r7639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6575,%r7480,%r6572;
}
	// end inline asm
	mov.u32 	%r7989, %r5754;
	@%p17 bra 	$L__BB0_817;

	// begin inline asm
	{mul.f16x2 %r7989,%r7481,%r6572;
}
	// end inline asm

$L__BB0_817:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6584,%r7989,%r6554,%r2333,%r6556;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6589,%r6575,%r6584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6592,%r7629,%r7635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6595,%r6589,%r6592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6598,%r7393,%r6595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7584,%r5754,%r6598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6604,%r7813,%r7637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6607,%r7816,%r7639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6610,%r6604,%r6607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6613,%r7393,%r6610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6616,%r5761,%r6613;
}
	// end inline asm
	selp.b32 	%r7582, %r5761, %r6616, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7637;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6621,%r7637,%r433,%r2333,%r6556;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6621;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6627, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r6627,%r7636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r7484,%r6628;
}
	// end inline asm
	@%p17 bra 	$L__BB0_819;
	bra.uni 	$L__BB0_818;

$L__BB0_819:
	// begin inline asm
	{neg.f16x2 %r7990,%r5750;
}
	// end inline asm
	bra.uni 	$L__BB0_820;

$L__BB0_818:
	// begin inline asm
	{mul.f16x2 %r7990,%r7485,%r6628;
}
	// end inline asm

$L__BB0_820:
	mov.u32 	%r6646, 31;
	mov.u32 	%r6670, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6644,%r7990,%r6646,%r2333,%r6670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6649,%r6631,%r6644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6652,%r1279,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6655,%r6652,%r6649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6658,%r7393,%r6655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7579,%r5750,%r6658;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7639;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6666,%r7639,%r433,%r2333,%r6670;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6666;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6672, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6673,%r6672,%r7638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6676,%r7484,%r6673;
}
	// end inline asm
	mov.u32 	%r7991, %r5757;
	@%p17 bra 	$L__BB0_822;

	// begin inline asm
	{mul.f16x2 %r7991,%r7485,%r6673;
}
	// end inline asm

$L__BB0_822:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6687,%r7991,%r6646,%r2333,%r6670;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6692,%r6676,%r6687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6695,%r7628,%r7634;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6698,%r6692,%r6695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6701,%r7393,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7583,%r5757,%r6701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r7811,%r7636;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6710,%r7815,%r7638;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6713,%r6707,%r6710;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6716,%r7393,%r6713;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6719,%r5764,%r6716;
}
	// end inline asm
	selp.b32 	%r7576, %r5764, %r6719, %p17;
	// begin inline asm
	{sub.f16x2 %r6722,%r7815,%r7816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6725,%r7480,%r6722;
}
	// end inline asm
	mov.u32 	%r7992, %r5768;
	@%p17 bra 	$L__BB0_824;

	// begin inline asm
	{mul.f16x2 %r7992,%r7481,%r6722;
}
	// end inline asm

$L__BB0_824:
	mov.u32 	%r6736, 31;
	mov.u32 	%r6760, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6734,%r7992,%r6736,%r2333,%r6760;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6739,%r6725,%r6734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r7810,%r1278;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6745,%r6739,%r6742;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6748,%r7393,%r6745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7573,%r5768,%r6748;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7816;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6756,%r7816,%r433,%r2333,%r6760;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6756;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6762, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6763,%r6762,%r7815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6766,%r7484,%r6763;
}
	// end inline asm
	mov.u32 	%r7993, %r5771;
	@%p17 bra 	$L__BB0_826;

	// begin inline asm
	{mul.f16x2 %r7993,%r7485,%r6763;
}
	// end inline asm

$L__BB0_826:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6777,%r7993,%r6736,%r2333,%r6760;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6782,%r6766,%r6777;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6785,%r7809,%r1279;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6788,%r6782,%r6785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6791,%r7393,%r6788;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7572,%r5771,%r6791;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6797,%r7826,%r7828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6800,%r7480,%r6797;
}
	// end inline asm
	@%p17 bra 	$L__BB0_828;
	bra.uni 	$L__BB0_827;

$L__BB0_828:
	// begin inline asm
	{neg.f16x2 %r7994,%r5775;
}
	// end inline asm
	bra.uni 	$L__BB0_829;

$L__BB0_827:
	// begin inline asm
	{mul.f16x2 %r7994,%r7481,%r6797;
}
	// end inline asm

$L__BB0_829:
	mov.u32 	%r6813, 31;
	mov.u32 	%r6837, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6811,%r7994,%r6813,%r2333,%r6837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6816,%r6800,%r6811;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6819,%r7631,%r7827;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6822,%r6819,%r6816;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6825,%r7393,%r6822;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7569,%r5775,%r6825;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7828;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6833,%r7828,%r433,%r2333,%r6837;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6833;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6839, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6840,%r6839,%r7826;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6843,%r7484,%r6840;
}
	// end inline asm
	@%p17 bra 	$L__BB0_831;
	bra.uni 	$L__BB0_830;

$L__BB0_831:
	// begin inline asm
	{neg.f16x2 %r7995,%r5778;
}
	// end inline asm
	bra.uni 	$L__BB0_832;

$L__BB0_830:
	// begin inline asm
	{mul.f16x2 %r7995,%r7485,%r6840;
}
	// end inline asm

$L__BB0_832:
	mov.u32 	%r6858, 31;
	mov.u32 	%r6860, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6856,%r7995,%r6858,%r2333,%r6860;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6861,%r6843,%r6856;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6864,%r7630,%r7825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6867,%r6864,%r6861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6870,%r7393,%r6867;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7568,%r5778,%r6870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6876,%r7632,%r7633;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6879,%r7480,%r6876;
}
	// end inline asm
	@%p17 bra 	$L__BB0_834;
	bra.uni 	$L__BB0_833;

$L__BB0_834:
	// begin inline asm
	{neg.f16x2 %r7996,%r5782;
}
	// end inline asm
	bra.uni 	$L__BB0_835;

$L__BB0_833:
	// begin inline asm
	{mul.f16x2 %r7996,%r7481,%r6876;
}
	// end inline asm

$L__BB0_835:
	mov.u32 	%r6892, 31;
	mov.u32 	%r6894, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6890,%r7996,%r6892,%r2333,%r6894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6895,%r6879,%r6890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6898,%r7629,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6901,%r6898,%r6895;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6904,%r7393,%r6901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7561,%r5782,%r6904;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6910,%r7823,%r7824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6913,%r7480,%r6910;
}
	// end inline asm
	mov.u32 	%r7997, %r5789;
	@%p17 bra 	$L__BB0_837;

	// begin inline asm
	{mul.f16x2 %r7997,%r7481,%r6910;
}
	// end inline asm

$L__BB0_837:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6922,%r7997,%r6892,%r2333,%r6894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6927,%r6913,%r6922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6930,%r7821,%r7631;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6933,%r6927,%r6930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6936,%r7393,%r6933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7565,%r5789,%r6936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6942,%r7808,%r7633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6945,%r7814,%r7824;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6948,%r6942,%r6945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6951,%r7393,%r6948;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6954,%r5796,%r6951;
}
	// end inline asm
	selp.b32 	%r7563, %r5796, %r6954, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7633;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6959,%r7633,%r433,%r2333,%r6894;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6959;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6965, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6966,%r6965,%r7632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6969,%r7484,%r6966;
}
	// end inline asm
	@%p17 bra 	$L__BB0_839;
	bra.uni 	$L__BB0_838;

$L__BB0_839:
	// begin inline asm
	{neg.f16x2 %r7998,%r5785;
}
	// end inline asm
	bra.uni 	$L__BB0_840;

$L__BB0_838:
	// begin inline asm
	{mul.f16x2 %r7998,%r7485,%r6966;
}
	// end inline asm

$L__BB0_840:
	mov.u32 	%r6984, 31;
	mov.u32 	%r7008, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6982,%r7998,%r6984,%r2333,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6987,%r6969,%r6982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6990,%r7628,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6993,%r6990,%r6987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6996,%r7393,%r6993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7560,%r5785,%r6996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7824;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7004,%r7824,%r433,%r2333,%r7008;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7004;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7010, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7011,%r7010,%r7823;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7014,%r7484,%r7011;
}
	// end inline asm
	mov.u32 	%r7999, %r5792;
	@%p17 bra 	$L__BB0_842;

	// begin inline asm
	{mul.f16x2 %r7999,%r7485,%r7011;
}
	// end inline asm

$L__BB0_842:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7025,%r7999,%r6984,%r2333,%r7008;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7030,%r7014,%r7025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7033,%r7819,%r7630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7036,%r7030,%r7033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7039,%r7393,%r7036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7564,%r5792,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7045,%r7807,%r7632;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7048,%r7812,%r7823;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7051,%r7045,%r7048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7054,%r7393,%r7051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7057,%r5799,%r7054;
}
	// end inline asm
	selp.b32 	%r7558, %r5799, %r7057, %p17;
	// begin inline asm
	{sub.f16x2 %r7060,%r7811,%r7813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7063,%r7480,%r7060;
}
	// end inline asm
	@%p17 bra 	$L__BB0_844;
	bra.uni 	$L__BB0_843;

$L__BB0_844:
	// begin inline asm
	{neg.f16x2 %r8000,%r5803;
}
	// end inline asm
	bra.uni 	$L__BB0_845;

$L__BB0_843:
	// begin inline asm
	{mul.f16x2 %r8000,%r7481,%r7060;
}
	// end inline asm

$L__BB0_845:
	mov.u32 	%r7076, 31;
	mov.u32 	%r7078, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7074,%r8000,%r7076,%r2333,%r7078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7079,%r7063,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7082,%r7810,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7085,%r7082,%r7079;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7088,%r7393,%r7085;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7553,%r5803,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7094,%r7812,%r7814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7097,%r7480,%r7094;
}
	// end inline asm
	mov.u32 	%r8001, %r5810;
	@%p17 bra 	$L__BB0_847;

	// begin inline asm
	{mul.f16x2 %r8001,%r7481,%r7094;
}
	// end inline asm

$L__BB0_847:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7106,%r8001,%r7076,%r2333,%r7078;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7097,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7114,%r7806,%r7629;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7117,%r7111,%r7114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7120,%r7393,%r7117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7555,%r5810,%r7120;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7813;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7128,%r7813,%r433,%r2333,%r7078;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7128;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7134, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7135,%r7134,%r7811;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7138,%r7484,%r7135;
}
	// end inline asm
	@%p17 bra 	$L__BB0_849;
	bra.uni 	$L__BB0_848;

$L__BB0_849:
	// begin inline asm
	{neg.f16x2 %r8002,%r5806;
}
	// end inline asm
	bra.uni 	$L__BB0_850;

$L__BB0_848:
	// begin inline asm
	{mul.f16x2 %r8002,%r7485,%r7135;
}
	// end inline asm

$L__BB0_850:
	mov.u32 	%r7153, 31;
	mov.u32 	%r7177, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7151,%r8002,%r7153,%r2333,%r7177;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r7138,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7159,%r7809,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7162,%r7159,%r7156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7165,%r7393,%r7162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7552,%r5806,%r7165;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7814;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7173,%r7814,%r433,%r2333,%r7177;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7173;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7179, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7180,%r7179,%r7812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7183,%r7484,%r7180;
}
	// end inline asm
	mov.u32 	%r8003, %r5813;
	@%p17 bra 	$L__BB0_852;

	// begin inline asm
	{mul.f16x2 %r8003,%r7485,%r7180;
}
	// end inline asm

$L__BB0_852:
	// begin inline asm
	{shfl.sync.bfly.b32 %r7194,%r8003,%r7153,%r2333,%r7177;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7199,%r7183,%r7194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7202,%r7805,%r7628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7205,%r7199,%r7202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7208,%r7393,%r7205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7554,%r5813,%r7208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7214,%r7807,%r7808;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7217,%r7480,%r7214;
}
	// end inline asm
	@%p17 bra 	$L__BB0_854;
	bra.uni 	$L__BB0_853;

$L__BB0_854:
	// begin inline asm
	{neg.f16x2 %r8004,%r5817;
}
	// end inline asm
	bra.uni 	$L__BB0_855;

$L__BB0_853:
	// begin inline asm
	{mul.f16x2 %r8004,%r7481,%r7214;
}
	// end inline asm

$L__BB0_855:
	mov.u32 	%r7230, 31;
	mov.u32 	%r7254, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7228,%r8004,%r7230,%r2333,%r7254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7233,%r7217,%r7228;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7236,%r7806,%r7821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7239,%r7236,%r7233;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7242,%r7393,%r7239;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7547,%r5817,%r7242;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7808;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r7250,%r7808,%r433,%r2333,%r7254;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7250;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r7256, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7257,%r7256,%r7807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7260,%r7484,%r7257;
}
	// end inline asm
	@%p17 bra 	$L__BB0_857;
	bra.uni 	$L__BB0_856;

$L__BB0_857:
	// begin inline asm
	{neg.f16x2 %r8005,%r5820;
}
	// end inline asm
	bra.uni 	$L__BB0_858;

$L__BB0_856:
	// begin inline asm
	{mul.f16x2 %r8005,%r7485,%r7257;
}
	// end inline asm

$L__BB0_858:
	mov.u32 	%r7275, 31;
	mov.u32 	%r7277, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r7273,%r8005,%r7275,%r2333,%r7277;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7278,%r7260,%r7273;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7281,%r7805,%r7819;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r7284,%r7281,%r7278;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r7287,%r7393,%r7284;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7546,%r5820,%r7287;
}
	// end inline asm
	bar.sync 	0;
	@%p458 bra 	$L__BB0_861;

	setp.ne.s32 	%p521, %r36, %r2230;
	shl.b32 	%r7296, %r36, 8;
	shl.b32 	%r7300, %r1725, 8;
	or.b32  	%r7301, %r7300, 128;
	mad.lo.s32 	%r7302, %r7301, %r35, %r2233;
	add.s32 	%r7303, %r7302, %r7296;
	shl.b32 	%r7304, %r7303, 2;
	mov.u32 	%r7305, _ZN6kernel5shmemE;
	add.s32 	%r7306, %r7305, %r7304;
	shl.b32 	%r7307, %r40, 4;
	add.s32 	%r1717, %r7306, %r7307;
	st.shared.v4.u32 	[%r1717], {%r7607, %r7606, %r7602, %r7601};
	st.shared.v4.u32 	[%r1717+512], {%r7623, %r7616, %r7626, %r7625};
	@%p521 bra 	$L__BB0_861;

	st.shared.v4.u32 	[%r1717+1024], {%r7621, %r7620, %r7619, %r7614};

$L__BB0_861:
	setp.eq.s32 	%p519, %r36, %r2230;
	@%p519 bra 	$L__BB0_863;

	mul.lo.s32 	%r7311, %r2630, 384;
	mad.lo.s32 	%r7312, %r69, %r36, %r7311;
	mad.lo.s32 	%r7315, %r2228, %r2230, %r7312;
	mad.lo.s32 	%r7318, %r2226, %r2225, %r7315;
	shl.b32 	%r7319, %r7318, 2;
	mov.u32 	%r7320, _ZN6kernel5shmemE;
	add.s32 	%r7321, %r7320, %r7319;
	shl.b32 	%r7322, %r40, 4;
	add.s32 	%r7323, %r7321, %r7322;
	st.shared.v4.u32 	[%r7323], {%r7621, %r7620, %r7619, %r7614};
	st.shared.v4.u32 	[%r7323+512], {%r7612, %r7611, %r7580, %r7579};
	st.shared.v4.u32 	[%r7323+1024], {%r7610, %r7608, %r7573, %r7572};

$L__BB0_863:
	setp.ne.s32 	%p520, %r35, %r2225;
	ld.param.u64 	%rd545, [%rd1+80];
	cvta.to.global.u64 	%rd46, %rd545;
	@%p520 bra 	$L__BB0_865;

	mad.lo.s32 	%r7325, %r653, %r1727, %r38;
	mad.lo.s32 	%r7326, %r7325, 768, 384;
	mul.lo.s32 	%r7327, %r7326, %r1725;
	mad.lo.s32 	%r7328, %r36, 384, %r7327;
	add.s32 	%r7329, %r7328, -128;
	mul.wide.s32 	%rd546, %r7329, 4;
	add.s64 	%rd547, %rd46, %rd546;
	add.s64 	%rd549, %rd547, %rd281;
	st.global.v4.u32 	[%rd549+512], {%r7607, %r7606, %r7602, %r7601};
	st.global.v4.u32 	[%rd549+1024], {%r7623, %r7616, %r7626, %r7625};
	st.global.v4.u32 	[%rd549+1536], {%r7621, %r7620, %r7619, %r7614};

$L__BB0_865:
	setp.ne.s32 	%p522, %r36, %r2230;
	@%p522 bra 	$L__BB0_868;

	mad.lo.s32 	%r7331, %r654, %r1726, %r37;
	mad.lo.s32 	%r7337, %r2630, 384, %r69;
	mad.lo.s32 	%r7338, %r7331, %r1787, %r7337;
	mad.lo.s32 	%r7341, %r1789, %r68, %r7338;
	mul.wide.s32 	%rd550, %r7341, 4;
	add.s64 	%rd551, %rd46, %rd550;
	add.s64 	%rd47, %rd551, %rd281;
	st.global.v4.u32 	[%rd47], {%r7621, %r7620, %r7619, %r7614};
	st.global.v4.u32 	[%rd47+512], {%r7612, %r7611, %r7580, %r7579};
	st.global.v4.u32 	[%rd47+1024], {%r7610, %r7608, %r7573, %r7572};
	@%p251 bra 	$L__BB0_868;

	st.global.v4.u32 	[%rd47+1536], {%r7784, %r7783, %r7786, %r7785};

$L__BB0_868:
	rem.s32 	%r7342, %r7654, %r1728;
	setp.eq.s32 	%p513, %r7342, 0;
	@%p513 bra 	$L__BB0_870;

	bar.sync 	0;
	bra.uni 	$L__BB0_877;

$L__BB0_870:
	@%p185 bra 	$L__BB0_872;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_872:
	bar.sync 	0;
	@%p186 bra 	$L__BB0_876;

	membar.gl;
	setp.eq.s32 	%p516, %r427, %r428;
	mov.u32 	%r7357, -2147483647;
	sub.s32 	%r7358, %r7357, %r426;
	selp.b32 	%r7346, %r7358, 1, %p516;
	// begin inline asm
	atom.add.release.gpu.u32 %r7345,[%rd31],%r7346;
	// end inline asm

$L__BB0_874:
	ld.volatile.u32 	%r7359, [%rd31];
	xor.b32  	%r7360, %r7359, %r7345;
	setp.gt.s32 	%p517, %r7360, -1;
	@%p517 bra 	$L__BB0_874;

	// begin inline asm
	ld.acquire.gpu.u32 %r7361,[%rd31];
	// end inline asm

$L__BB0_876:
	bar.sync 	0;

$L__BB0_877:
	setp.lt.s32 	%p518, %r1460, %r43;
	mov.u32 	%r7787, %r7945;
	mov.u32 	%r7788, %r7946;
	mov.u32 	%r7775, %r7931;
	mov.u32 	%r7776, %r7932;
	mov.u32 	%r7777, %r7933;
	mov.u32 	%r7778, %r7934;
	mov.u32 	%r7789, %r7947;
	mov.u32 	%r7790, %r7948;
	mov.u32 	%r7791, %r7949;
	mov.u32 	%r7792, %r7950;
	mov.u32 	%r7793, %r7951;
	mov.u32 	%r7794, %r7952;
	mov.u32 	%r7779, %r7937;
	mov.u32 	%r7780, %r7938;
	mov.u32 	%r7781, %r7939;
	mov.u32 	%r7782, %r7940;
	mov.u32 	%r7795, %r7953;
	mov.u32 	%r7796, %r7954;
	mov.u32 	%r7797, %r7955;
	mov.u32 	%r7798, %r7956;
	mov.u32 	%r7574, %r498;
	mov.u32 	%r7575, %r7853;
	mov.u32 	%r7578, %r499;
	mov.u32 	%r7581, %r7855;
	mov.u32 	%r7586, %r504;
	mov.u32 	%r7590, %r507;
	mov.u32 	%r7598, %r7860;
	mov.u32 	%r7603, %r7862;
	mov.u32 	%r7609, %r525;
	mov.u32 	%r7613, %r533;
	mov.u32 	%r7615, %r535;
	mov.u32 	%r7618, %r537;
	mov.u32 	%r7622, %r541;
	mov.u32 	%r7627, %r545;
	mov.u32 	%r7654, %r1460;
	@%p518 bra 	$L__BB0_316;

$L__BB0_878:
	ret;

}

