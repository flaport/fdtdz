//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<521>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<578>;
	.reg .b32 	%r<7334>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<482>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1478, %r1479}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1480, %r1481}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1482, %r1483}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1484, %r1485}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1486, %r1487}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1488, %r1489}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1490, %r1491}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1492, %r1493}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1494, %r1495}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1496, %r1497}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1498, %r1499}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1500, %r1501}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1502, %r1503}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1504, 32;
	sub.s32 	%r45, %r1504, %r1485;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1505, %r1491, -1;
	mad.lo.s32 	%r1506, %r1505, %r1490, %r1489;
	add.s32 	%r1507, %r1484, %r1483;
	add.s32 	%r1508, %r1507, %r1506;
	add.s32 	%r1509, %r1508, 1;
	mul.lo.s32 	%r1510, %r1478, %r1480;
	shl.b32 	%r47, %r1510, 1;
	shl.b32 	%r1511, %r1510, 2;
	div.s32 	%r1512, %r1509, %r1511;
	add.s32 	%r1513, %r1512, 1;
	mul.lo.s32 	%r1514, %r1513, %r1484;
	mul.lo.s32 	%r1515, %r1479, %r1481;
	shl.b32 	%r48, %r1515, 1;
	div.s32 	%r1516, %r1514, %r48;
	add.s32 	%r1517, %r1516, 1;
	mul.lo.s32 	%r49, %r1517, %r1483;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f75, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r6868, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f73, [%rd1+136];
	neg.f32 	%f72, %f73;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f72;
  mov.b32 %r6868, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1520, %r1480, %r44, %r43;
	mad.lo.s32 	%r1521, %r1520, %r1479, %r42;
	mad.lo.s32 	%r1522, %r1521, %r1478, %r41;
	shl.b32 	%r53, %r1522, 5;
	add.s32 	%r6873, %r53, %r46;
	mul.lo.s32 	%r1523, %r1515, %r1510;
	shl.b32 	%r57, %r1523, 5;
	mov.u32 	%r1524, 8;
	sub.s32 	%r1525, %r1524, %r1492;
	add.s32 	%r1526, %r1525, %r1493;
	sub.s32 	%r1527, %r1524, %r1494;
	add.s32 	%r1528, %r1527, %r1495;
	sub.s32 	%r58, %r1497, %r1496;
	mul.lo.s32 	%r1529, %r1491, %r58;
	mul.lo.s32 	%r1530, %r1529, %r1528;
	mul.lo.s32 	%r1531, %r1530, %r1526;
	mul.lo.s32 	%r59, %r1531, 3;
	setp.ge.s32 	%p29, %r6873, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1532, %r1495, 8;
	sub.s32 	%r1533, %r1532, %r1494;
	mul.lo.s32 	%r1534, %r1491, %r1533;
	add.s32 	%r1535, %r1493, 8;
	sub.s32 	%r1536, %r1535, %r1492;
	mul.lo.s32 	%r1537, %r1534, %r1536;
	mul.lo.s32 	%r1538, %r1537, %r58;
	not.b32 	%r1539, %r46;
	mad.lo.s32 	%r1540, %r1538, 3, %r1539;
	sub.s32 	%r1541, %r1540, %r53;
	mul.lo.s32 	%r1542, %r1515, %r1478;
	mul.lo.s32 	%r1543, %r1542, %r1480;
	shl.b32 	%r1544, %r1543, 5;
	div.u32 	%r60, %r1541, %r1544;
	add.s32 	%r1545, %r60, 1;
	and.b32  	%r6870, %r1545, 3;
	setp.eq.s32 	%p30, %r6870, 0;
	mov.u32 	%r6871, %r6873;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r6871, %r6873;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6871, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1546, 0;
	st.global.u32 	[%rd31], %r1546;
	add.s32 	%r6871, %r6871, %r57;
	add.s32 	%r6870, %r6870, -1;
	setp.ne.s32 	%p31, %r6870, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6871, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1547, 0;
	st.global.u32 	[%rd33], %r1547;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1547;
	add.s32 	%r1548, %r6871, %r57;
	add.s32 	%r1549, %r1548, %r57;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1547;
	add.s32 	%r1550, %r1549, %r57;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1547;
	add.s32 	%r6871, %r1550, %r57;
	setp.lt.s32 	%p33, %r6871, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1551, %r1484, %r47;
	div.s32 	%r1552, %r1551, %r48;
	mul.lo.s32 	%r1553, %r1552, %r1483;
	sub.s32 	%r1554, %r1553, %r47;
	sub.s32 	%r1555, %r1483, %r48;
	mul.lo.s32 	%r1556, %r1555, %r1480;
	mul.lo.s32 	%r69, %r1478, 384;
	add.s32 	%r1557, %r69, %r69;
	add.s32 	%r1558, %r1557, 128;
	mul.lo.s32 	%r1560, %r1515, 768;
	mul.lo.s32 	%r1561, %r1556, %r1558;
	mad.lo.s32 	%r70, %r1560, %r1554, %r1561;
	bra.uni 	$L__BB0_11;

$L__BB0_850:
	mov.f32 	%f565, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f565;
  cvt.rn.f16.f32 high, %f565;
  mov.b32 %r6852, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd477, %r6873, 4;
	add.s64 	%rd478, %rd3, %rd477;
	st.global.u32 	[%rd478], %r6852;
	add.s32 	%r6873, %r6873, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r6873, %r70;
	@%p34 bra 	$L__BB0_850;

	ld.param.u64 	%rd39, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6909, %r1478, %r43, %r41;
	mul.lo.s32 	%r78, %r1479, %r44;
	add.s32 	%r79, %r78, %r42;
	setp.ge.s32 	%p35, %r6909, %r1483;
	@%p35 bra 	$L__BB0_66;

	setp.gt.s32 	%p36, %r45, %r46;
	mov.u32 	%r1562, 31;
	sub.s32 	%r1563, %r1562, %r46;
	selp.b32 	%r1564, %r46, %r1563, %p36;
	shl.b32 	%r1565, %r1564, 2;
	mov.u32 	%r1566, 2;
	sub.s32 	%r80, %r1565, %r1486;
	shl.b32 	%r1567, %r1485, 2;
	mov.u32 	%r1568, 128;
	sub.s32 	%r81, %r1568, %r1567;
	sub.s32 	%r1569, %r1566, %r1486;
	add.s32 	%r82, %r1569, %r1565;
	sub.s32 	%r83, %r1493, %r1492;
	sub.s32 	%r84, %r1495, %r1494;
	add.s32 	%r85, %r1493, -1;
	add.s32 	%r86, %r1495, -1;
	add.s32 	%r87, %r1497, -1;
	mul.lo.s32 	%r1570, %r1484, %r1483;
	shl.b32 	%r88, %r1570, 6;
	add.s32 	%r89, %r1483, -1;
	selp.f32 	%f1, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r90, %r80, 1;
	add.s32 	%r91, %r82, 1;
	shl.b32 	%r92, %r46, 1;
	or.b32  	%r93, %r92, 1;
	shr.u32 	%r1571, %r93, 31;
	add.s32 	%r1572, %r93, %r1571;
	shr.s32 	%r95, %r1572, 1;
	and.b32  	%r1573, %r1572, -2;
	sub.s32 	%r1574, %r93, %r1573;
	add.s32 	%r94, %r1574, %r88;
	rem.s32 	%r1630, %r90, %r81;
	add.s32 	%r1631, %r1630, %r81;
	rem.s32 	%r1632, %r1631, %r81;
	rem.s32 	%r1633, %r91, %r81;
	add.s32 	%r1634, %r1633, %r81;
	rem.s32 	%r1635, %r1634, %r81;
	mov.u32 	%r6874, %r6909;

$L__BB0_14:
	setp.ge.s32 	%p37, %r79, %r1484;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r6874, %r1498;
	setp.lt.s32 	%p39, %r6874, %r1499;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r6874, %r1493;
	setp.ge.s32 	%p41, %r6874, %r1492;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1575, %r6874, %r85, %p40;
	setp.lt.s32 	%p42, %r6874, %r1492;
	selp.b32 	%r1576, %r1492, %r1575, %p42;
	sub.s32 	%r1577, %r1576, %r1492;
	add.s32 	%r97, %r89, %r6874;
	rem.s32 	%r1578, %r80, %r81;
	add.s32 	%r1579, %r1578, %r81;
	rem.s32 	%r98, %r1579, %r81;
	rem.s32 	%r1580, %r82, %r81;
	add.s32 	%r1581, %r1580, %r81;
	rem.s32 	%r99, %r1581, %r81;
	setp.lt.s32 	%p43, %r98, %r1497;
	sub.s32 	%r100, %r98, %r1496;
	setp.lt.s32 	%p44, %r98, %r1496;
	selp.b32 	%r1582, %r98, %r87, %p43;
	selp.b32 	%r1583, %r1496, %r1582, %p44;
	sub.s32 	%r101, %r1583, %r1496;
	setp.lt.s32 	%p45, %r99, %r1497;
	sub.s32 	%r102, %r99, %r1496;
	setp.lt.s32 	%p46, %r99, %r1496;
	selp.b32 	%r1584, %r99, %r87, %p45;
	selp.b32 	%r1585, %r1496, %r1584, %p46;
	sub.s32 	%r103, %r1585, %r1496;
	sub.s32 	%r1586, %r6874, %r1492;
	mul.lo.s32 	%r104, %r1586, %r84;
	mul.lo.s32 	%r105, %r1577, %r84;
	add.s32 	%r1587, %r1586, %r83;
	mul.lo.s32 	%r106, %r1587, %r84;
	add.s32 	%r1588, %r1577, %r83;
	mul.lo.s32 	%r107, %r1588, %r84;
	add.s32 	%r1589, %r1587, %r83;
	mul.lo.s32 	%r108, %r1589, %r84;
	add.s32 	%r1590, %r1588, %r83;
	mul.lo.s32 	%r109, %r1590, %r84;
	mov.u32 	%r6875, %r79;

$L__BB0_16:
	setp.ge.s32 	%p47, %r6875, %r1500;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r6875, %r1501;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r6875, %r1494;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r6875, %r1495;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r111, %r6875, %r1494;
	selp.b32 	%r1591, %r6875, %r86, %p52;
	setp.lt.s32 	%p53, %r6875, %r1494;
	selp.b32 	%r1592, %r1494, %r1591, %p53;
	sub.s32 	%r112, %r1592, %r1494;
	mul.lo.s32 	%r113, %r6875, %r1483;
	add.s32 	%r114, %r113, %r6874;
	shl.b32 	%r115, %r114, 6;
	setp.ge.s32 	%p54, %r98, %r1502;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r98, %r1503;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r98, %r1496;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r99, %r1496;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f566, %f1;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1595, %r111, %r104;
	mad.lo.s32 	%r1596, %r1595, %r58, %r100;
	mul.wide.s32 	%rd43, %r1596, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f566, [%rd44];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1593, %r112, %r105;
	mad.lo.s32 	%r1594, %r1593, %r58, %r101;
	mul.wide.s32 	%rd41, %r1594, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f566, [%rd42];

$L__BB0_20:
	setp.lt.s32 	%p67, %r99, %r1503;
	setp.ge.s32 	%p68, %r99, %r1502;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f567, %f1;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1599, %r111, %r104;
	mad.lo.s32 	%r1600, %r1599, %r58, %r102;
	mul.wide.s32 	%rd47, %r1600, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f567, [%rd48];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1597, %r112, %r105;
	mad.lo.s32 	%r1598, %r1597, %r58, %r103;
	mul.wide.s32 	%rd45, %r1598, 4;
	add.s64 	%rd46, %rd5, %rd45;
	ld.global.f32 	%f567, [%rd46];

$L__BB0_24:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f566;
  cvt.rn.f16.f32 high, %f567;
  mov.b32 %r1601, {low,high};}

	// end inline asm
	shl.b32 	%r116, %r114, 5;
	add.s32 	%r1602, %r116, %r46;
	shl.b32 	%r1603, %r1602, 2;
	add.s32 	%r1604, %r88, %r1603;
	mul.wide.s32 	%rd49, %r1604, 4;
	add.s64 	%rd50, %rd6, %rd49;
	st.global.u32 	[%rd50], %r1601;
	mov.f32 	%f568, %f1;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1607, %r111, %r106;
	mad.lo.s32 	%r1608, %r1607, %r58, %r100;
	mul.wide.s32 	%rd53, %r1608, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f568, [%rd54];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1605, %r112, %r107;
	mad.lo.s32 	%r1606, %r1605, %r58, %r101;
	mul.wide.s32 	%rd51, %r1606, 4;
	add.s64 	%rd52, %rd5, %rd51;
	ld.global.f32 	%f568, [%rd52];

$L__BB0_28:
	mov.f32 	%f569, %f1;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1611, %r111, %r106;
	mad.lo.s32 	%r1612, %r1611, %r58, %r102;
	mul.wide.s32 	%rd57, %r1612, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f569, [%rd58];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1609, %r112, %r107;
	mad.lo.s32 	%r1610, %r1609, %r58, %r103;
	mul.wide.s32 	%rd55, %r1610, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f569, [%rd56];

$L__BB0_32:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f568;
  cvt.rn.f16.f32 high, %f569;
  mov.b32 %r1613, {low,high};}

	// end inline asm
	add.s32 	%r1614, %r92, %r115;
	mul.wide.s32 	%rd59, %r1614, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r1613;
	mov.f32 	%f570, %f1;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1617, %r111, %r108;
	mad.lo.s32 	%r1618, %r1617, %r58, %r100;
	mul.wide.s32 	%rd63, %r1618, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f570, [%rd64];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1615, %r112, %r109;
	mad.lo.s32 	%r1616, %r1615, %r58, %r101;
	mul.wide.s32 	%rd61, %r1616, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f570, [%rd62];

$L__BB0_36:
	mov.f32 	%f571, %f1;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1621, %r111, %r108;
	mad.lo.s32 	%r1622, %r1621, %r58, %r102;
	mul.wide.s32 	%rd67, %r1622, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f571, [%rd68];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1619, %r112, %r109;
	mad.lo.s32 	%r1620, %r1619, %r58, %r103;
	mul.wide.s32 	%rd65, %r1620, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f571, [%rd66];

$L__BB0_40:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f570;
  cvt.rn.f16.f32 high, %f571;
  mov.b32 %r1623, {low,high};}

	// end inline asm
	rem.s32 	%r1624, %r97, %r1483;
	add.s32 	%r1625, %r1624, %r113;
	shl.b32 	%r117, %r1625, 5;
	add.s32 	%r1626, %r117, %r46;
	shl.b32 	%r1627, %r1626, 2;
	add.s32 	%r1628, %r88, %r1627;
	add.s32 	%r1629, %r1628, 2;
	mul.wide.s32 	%rd69, %r1629, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r1623;
	setp.ge.s32 	%p76, %r1632, %r1502;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1632, %r1503;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1632, %r1496;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1632, %r1497;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1635, %r1502;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1635, %r1503;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r118, %r1632, %r1496;
	setp.lt.s32 	%p86, %r1632, %r1496;
	selp.b32 	%r1636, %r1632, %r87, %p82;
	selp.b32 	%r1637, %r1496, %r1636, %p86;
	sub.s32 	%r119, %r1637, %r1496;
	setp.ge.s32 	%p87, %r1635, %r1496;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1635, %r1497;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r120, %r1635, %r1496;
	setp.lt.s32 	%p90, %r1635, %r1496;
	selp.b32 	%r1638, %r1635, %r87, %p89;
	selp.b32 	%r1639, %r1496, %r1638, %p90;
	sub.s32 	%r121, %r1639, %r1496;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f572, %f1;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1642, %r111, %r104;
	mad.lo.s32 	%r1643, %r1642, %r58, %r118;
	mul.wide.s32 	%rd73, %r1643, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f572, [%rd74];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1640, %r112, %r105;
	mad.lo.s32 	%r1641, %r1640, %r58, %r119;
	mul.wide.s32 	%rd71, %r1641, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f572, [%rd72];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f573, %f1;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1646, %r111, %r104;
	mad.lo.s32 	%r1647, %r1646, %r58, %r120;
	mul.wide.s32 	%rd77, %r1647, 4;
	add.s64 	%rd78, %rd5, %rd77;
	ld.global.f32 	%f573, [%rd78];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1644, %r112, %r105;
	mad.lo.s32 	%r1645, %r1644, %r58, %r121;
	mul.wide.s32 	%rd75, %r1645, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f573, [%rd76];

$L__BB0_48:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f572;
  cvt.rn.f16.f32 high, %f573;
  mov.b32 %r1648, {low,high};}

	// end inline asm
	add.s32 	%r1649, %r116, %r95;
	shl.b32 	%r1650, %r1649, 2;
	add.s32 	%r1651, %r94, %r1650;
	mul.wide.s32 	%rd79, %r1651, 4;
	add.s64 	%rd80, %rd6, %rd79;
	st.global.u32 	[%rd80], %r1648;
	mov.f32 	%f574, %f1;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1654, %r111, %r106;
	mad.lo.s32 	%r1655, %r1654, %r58, %r118;
	mul.wide.s32 	%rd83, %r1655, 4;
	add.s64 	%rd84, %rd5, %rd83;
	ld.global.f32 	%f574, [%rd84];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1652, %r112, %r107;
	mad.lo.s32 	%r1653, %r1652, %r58, %r119;
	mul.wide.s32 	%rd81, %r1653, 4;
	add.s64 	%rd82, %rd5, %rd81;
	ld.global.f32 	%f574, [%rd82];

$L__BB0_52:
	mov.f32 	%f575, %f1;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1658, %r111, %r106;
	mad.lo.s32 	%r1659, %r1658, %r58, %r120;
	mul.wide.s32 	%rd87, %r1659, 4;
	add.s64 	%rd88, %rd5, %rd87;
	ld.global.f32 	%f575, [%rd88];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1656, %r112, %r107;
	mad.lo.s32 	%r1657, %r1656, %r58, %r121;
	mul.wide.s32 	%rd85, %r1657, 4;
	add.s64 	%rd86, %rd5, %rd85;
	ld.global.f32 	%f575, [%rd86];

$L__BB0_56:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f574;
  cvt.rn.f16.f32 high, %f575;
  mov.b32 %r1660, {low,high};}

	// end inline asm
	add.s32 	%r1661, %r93, %r115;
	mul.wide.s32 	%rd89, %r1661, 4;
	add.s64 	%rd90, %rd6, %rd89;
	st.global.u32 	[%rd90], %r1660;
	mov.f32 	%f576, %f1;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1664, %r111, %r108;
	mad.lo.s32 	%r1665, %r1664, %r58, %r118;
	mul.wide.s32 	%rd93, %r1665, 4;
	add.s64 	%rd94, %rd5, %rd93;
	ld.global.f32 	%f576, [%rd94];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1662, %r112, %r109;
	mad.lo.s32 	%r1663, %r1662, %r58, %r119;
	mul.wide.s32 	%rd91, %r1663, 4;
	add.s64 	%rd92, %rd5, %rd91;
	ld.global.f32 	%f576, [%rd92];

$L__BB0_60:
	mov.f32 	%f577, %f1;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1668, %r111, %r108;
	mad.lo.s32 	%r1669, %r1668, %r58, %r120;
	mul.wide.s32 	%rd97, %r1669, 4;
	add.s64 	%rd98, %rd5, %rd97;
	ld.global.f32 	%f577, [%rd98];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1666, %r112, %r109;
	mad.lo.s32 	%r1667, %r1666, %r58, %r121;
	mul.wide.s32 	%rd95, %r1667, 4;
	add.s64 	%rd96, %rd5, %rd95;
	ld.global.f32 	%f577, [%rd96];

$L__BB0_64:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f576;
  cvt.rn.f16.f32 high, %f577;
  mov.b32 %r1670, {low,high};}

	// end inline asm
	add.s32 	%r1671, %r117, %r95;
	shl.b32 	%r1672, %r1671, 2;
	add.s32 	%r1673, %r94, %r1672;
	add.s32 	%r1674, %r1673, 2;
	mul.wide.s32 	%rd99, %r1674, 4;
	add.s64 	%rd100, %rd6, %rd99;
	st.global.u32 	[%rd100], %r1670;
	add.s32 	%r6875, %r6875, %r1515;
	setp.lt.s32 	%p99, %r6875, %r1484;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r6874, %r6874, %r1510;
	setp.lt.s32 	%p100, %r6874, %r1483;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd101, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd101;
	ld.param.u64 	%rd102, [%rd1+120];
	cvta.to.global.u64 	%rd8, %rd102;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r124, %r79, 1;
	mov.u64 	%rd103, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6876, %r6909;

$L__BB0_68:
	setp.ge.s32 	%p102, %r124, %r1484;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r6877, %r124;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1676, %r6877, 31;
	add.s32 	%r1677, %r6877, %r1676;
	shr.s32 	%r1678, %r1677, 1;
	mad.lo.s32 	%r1679, %r1678, %r1483, %r6876;
	shl.b32 	%r128, %r1679, 5;
	add.s32 	%r129, %r6877, -2;
	mul.lo.s32 	%r130, %r129, %r1483;
	add.s32 	%r1680, %r1484, %r129;
	mul.lo.s32 	%r131, %r1680, %r1483;
	add.s32 	%r1681, %r1680, %r1484;
	mul.lo.s32 	%r132, %r1681, %r1483;
	add.s32 	%r133, %r130, %r1483;
	add.s32 	%r134, %r6877, -1;
	add.s32 	%r1682, %r1484, %r134;
	mul.lo.s32 	%r135, %r1682, %r1483;
	add.s32 	%r1683, %r1682, %r1484;
	mul.lo.s32 	%r136, %r1683, %r1483;
	add.s32 	%r1684, %r1484, %r6877;
	mul.lo.s32 	%r137, %r1684, %r1483;
	add.s32 	%r1685, %r1684, %r1484;
	mul.lo.s32 	%r138, %r1685, %r1483;
	mul.lo.s32 	%r139, %r6877, %r1483;
	add.s32 	%r140, %r139, %r1483;
	add.s32 	%r141, %r6877, 1;
	add.s32 	%r1686, %r1484, %r141;
	mul.lo.s32 	%r142, %r1686, %r1483;
	add.s32 	%r1687, %r1686, %r1484;
	mul.lo.s32 	%r143, %r1687, %r1483;
	add.s32 	%r144, %r140, %r1483;
	add.s32 	%r145, %r6877, 2;
	add.s32 	%r1688, %r1484, %r145;
	mul.lo.s32 	%r146, %r1688, %r1483;
	add.s32 	%r1689, %r1688, %r1484;
	mul.lo.s32 	%r147, %r1689, %r1483;
	mov.u32 	%r6880, 0;
	mov.u64 	%rd479, %rd103;

$L__BB0_72:
	ld.global.nc.u32 	%r1690, [%rd479];
	cvt.rn.f64.s32 	%fd1, %r1690;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r149, %r1690, %r6876;
	setp.lt.s32 	%p104, %r149, %r1483;
	or.b32  	%r1691, %r129, %r149;
	setp.gt.s32 	%p105, %r1691, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r129, %r1484;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f88, %fd3;
	add.f32 	%f89, %f88, 0f3E800000;
	abs.f32 	%f38, %f89;
	add.f32 	%f90, %f38, 0f40200000;
	setp.geu.f32 	%p108, %f90, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1694, %r130, %r149;
	mul.wide.s32 	%rd104, %r1694, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f93, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6879, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6879, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1695, %r6880, %r128;
	mul.wide.s32 	%rd106, %r1695, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6879;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f94, %fd1;
	add.f32 	%f95, %f94, 0f3E800000;
	abs.f32 	%f39, %f95;
	add.f32 	%f40, %f39, 0f40000000;
	setp.geu.f32 	%p109, %f40, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1698, %r131, %r149;
	mul.wide.s32 	%rd108, %r1698, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f98, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r6881, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r6881, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1699, %r6880, %r128;
	mul.wide.s32 	%rd110, %r1699, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6881;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_82:
	add.f32 	%f99, %f39, 0f40200000;
	setp.geu.f32 	%p110, %f99, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1702, %r132, %r149;
	mul.wide.s32 	%rd112, %r1702, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f102, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6883, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6883, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1703, %r6880, %r128;
	mul.wide.s32 	%rd114, %r1703, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6883;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_87:
	or.b32  	%r1704, %r134, %r149;
	setp.gt.s32 	%p111, %r1704, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r6877, %r1484;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f41, %f38, 0f3FC00000;
	setp.geu.f32 	%p115, %f41, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1707, %r133, %r149;
	mul.wide.s32 	%rd116, %r1707, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f105, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6885, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6885, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1708, %r6880, %r128;
	mul.wide.s32 	%rd118, %r1708, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6885;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_92:
	add.f32 	%f42, %f39, 0f3F800000;
	setp.geu.f32 	%p116, %f42, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1711, %r135, %r149;
	mul.wide.s32 	%rd120, %r1711, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f108, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6887, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6887, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1712, %r6880, %r128;
	mul.wide.s32 	%rd122, %r1712, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6887;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_97:
	add.f32 	%f43, %f39, 0f3FC00000;
	setp.geu.f32 	%p117, %f43, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1715, %r136, %r149;
	mul.wide.s32 	%rd124, %r1715, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f111, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6889, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6889, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1716, %r6880, %r128;
	mul.wide.s32 	%rd126, %r1716, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6889;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_102:
	or.b32  	%r1717, %r6877, %r149;
	setp.gt.s32 	%p118, %r1717, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r6877, %r1484;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f44, %f38, 0f3F000000;
	setp.geu.f32 	%p122, %f44, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1720, %r139, %r149;
	mul.wide.s32 	%rd128, %r1720, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f114, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6891, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6891, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1721, %r6880, %r128;
	mul.wide.s32 	%rd130, %r1721, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6891;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_107:
	add.f32 	%f115, %f39, 0f00000000;
	setp.geu.f32 	%p123, %f115, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1724, %r137, %r149;
	mul.wide.s32 	%rd132, %r1724, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f118, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r6893, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r6893, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1725, %r6880, %r128;
	mul.wide.s32 	%rd134, %r1725, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6893;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_112:
	add.f32 	%f45, %f39, 0f3F000000;
	setp.geu.f32 	%p124, %f45, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1728, %r138, %r149;
	mul.wide.s32 	%rd136, %r1728, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f121, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f121;
  mov.b32 %r6895, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6895, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1729, %r6880, %r128;
	mul.wide.s32 	%rd138, %r1729, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6895;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_117:
	or.b32  	%r1730, %r141, %r149;
	setp.gt.s32 	%p125, %r1730, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r141, %r1484;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1733, %r140, %r149;
	mul.wide.s32 	%rd140, %r1733, 4;
	add.s64 	%rd141, %rd7, %rd140;
	ld.global.f32 	%f124, [%rd141];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f124;
  mov.b32 %r6897, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f123, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f123;
  cvt.rn.f16.f32 high, %f123;
  mov.b32 %r6897, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1734, %r6880, %r128;
	mul.wide.s32 	%rd142, %r1734, 4;
	add.s64 	%rd143, %rd8, %rd142;
	st.global.u32 	[%rd143], %r6897;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1737, %r142, %r149;
	mul.wide.s32 	%rd144, %r1737, 4;
	add.s64 	%rd145, %rd7, %rd144;
	ld.global.f32 	%f127, [%rd145];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f127;
  mov.b32 %r6899, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f126, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f126;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6899, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1738, %r6880, %r128;
	mul.wide.s32 	%rd146, %r1738, 4;
	add.s64 	%rd147, %rd8, %rd146;
	st.global.u32 	[%rd147], %r6899;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1741, %r143, %r149;
	mul.wide.s32 	%rd148, %r1741, 4;
	add.s64 	%rd149, %rd7, %rd148;
	ld.global.f32 	%f130, [%rd149];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f130;
  mov.b32 %r6901, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f129, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f129;
  mov.b32 %r6901, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1742, %r6880, %r128;
	mul.wide.s32 	%rd150, %r1742, 4;
	add.s64 	%rd151, %rd8, %rd150;
	st.global.u32 	[%rd151], %r6901;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_132:
	or.b32  	%r1743, %r145, %r149;
	setp.gt.s32 	%p132, %r1743, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r145, %r1484;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1746, %r144, %r149;
	mul.wide.s32 	%rd152, %r1746, 4;
	add.s64 	%rd153, %rd7, %rd152;
	ld.global.f32 	%f133, [%rd153];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r6903, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6903, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1747, %r6880, %r128;
	mul.wide.s32 	%rd154, %r1747, 4;
	add.s64 	%rd155, %rd8, %rd154;
	st.global.u32 	[%rd155], %r6903;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1750, %r146, %r149;
	mul.wide.s32 	%rd156, %r1750, 4;
	add.s64 	%rd157, %rd7, %rd156;
	ld.global.f32 	%f136, [%rd157];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f136;
  mov.b32 %r6905, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6905, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1751, %r6880, %r128;
	mul.wide.s32 	%rd158, %r1751, 4;
	add.s64 	%rd159, %rd8, %rd158;
	st.global.u32 	[%rd159], %r6905;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1754, %r147, %r149;
	mul.wide.s32 	%rd160, %r1754, 4;
	add.s64 	%rd161, %rd7, %rd160;
	ld.global.f32 	%f139, [%rd161];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f139;
  mov.b32 %r6907, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f138, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f138;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r6907, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1755, %r6880, %r128;
	mul.wide.s32 	%rd162, %r1755, 4;
	add.s64 	%rd163, %rd8, %rd162;
	st.global.u32 	[%rd163], %r6907;
	add.s32 	%r6880, %r6880, 1;

$L__BB0_147:
	add.s64 	%rd479, %rd479, 4;
	mov.u64 	%rd164, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd165, %rd164, 24;
	setp.ne.s64 	%p139, %rd479, %rd165;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r6877, %r6877, %r48;
	setp.lt.s32 	%p140, %r6877, %r1484;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r6876, %r6876, %r1510;
	setp.lt.s32 	%p141, %r6876, %r1483;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1487, 1;
	ld.param.u64 	%rd166, [%rd1+160];
	cvta.to.global.u64 	%rd11, %rd166;
	ld.param.u64 	%rd167, [%rd1+128];
	cvta.to.global.u64 	%rd12, %rd167;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r253, %r79, 1;
	shr.u32 	%r1803, %r1488, 31;
	add.s32 	%r1804, %r1488, %r1803;
	shr.u32 	%r1805, %r1804, 1;
	and.b32  	%r254, %r1805, 1;
	mov.u64 	%rd187, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r253, %r1484;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r6915, %r253;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1807, %r6915, 31;
	add.s32 	%r1808, %r6915, %r1807;
	shr.s32 	%r1809, %r1808, 1;
	mad.lo.s32 	%r1810, %r1809, %r1483, %r6909;
	shl.b32 	%r258, %r1810, 5;
	add.s32 	%r259, %r6915, -2;
	mul.lo.s32 	%r260, %r259, %r1483;
	add.s32 	%r1811, %r1484, %r259;
	mul.lo.s32 	%r261, %r1811, %r1483;
	add.s32 	%r262, %r260, %r1483;
	add.s32 	%r263, %r6915, -1;
	add.s32 	%r1812, %r1484, %r263;
	mul.lo.s32 	%r264, %r1812, %r1483;
	add.s32 	%r1813, %r1484, %r6915;
	mul.lo.s32 	%r265, %r1813, %r1483;
	mul.lo.s32 	%r266, %r6915, %r1483;
	add.s32 	%r267, %r266, %r1483;
	add.s32 	%r268, %r6915, 1;
	add.s32 	%r1814, %r1484, %r268;
	mul.lo.s32 	%r269, %r1814, %r1483;
	add.s32 	%r270, %r267, %r1483;
	add.s32 	%r271, %r6915, 2;
	add.s32 	%r1815, %r1484, %r271;
	mul.lo.s32 	%r272, %r1815, %r1483;
	mov.u32 	%r6919, 0;
	mov.u64 	%rd480, 24;
	mov.u64 	%rd481, %rd187;

$L__BB0_174:
	ld.global.nc.u32 	%r1816, [%rd481];
	cvt.rn.f64.s32 	%fd2, %r1816;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r274, %r1816, %r6909;
	setp.lt.s32 	%p154, %r274, %r1483;
	or.b32  	%r1817, %r259, %r274;
	setp.gt.s32 	%p155, %r1817, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r259, %r1484;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f156, %fd4;
	add.f32 	%f157, %f156, 0f3E800000;
	abs.f32 	%f46, %f157;
	add.f32 	%f158, %f46, 0f40200000;
	setp.geu.f32 	%p158, %f158, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r254, 0;
	add.s32 	%r1819, %r260, %r274;
	shl.b32 	%r1820, %r1819, 1;
	mul.wide.s32 	%rd188, %r1820, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f47, [%rd189];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f164, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f164;
  mov.b32 %r6917, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f160, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f160;
  cvt.rn.f16.f32 high, %f160;
  mov.b32 %r6917, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f47;
  mov.b32 %r6917, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r279, %r6919, %r258;
	mul.wide.s32 	%rd190, %r279, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6917;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r254, 0;
	add.s32 	%r1824, %r261, %r274;
	shl.b32 	%r1825, %r1824, 1;
	mul.wide.s32 	%rd192, %r1825, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f48, [%rd193];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f170, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f170;
  mov.b32 %r6918, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f166, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f166;
  cvt.rn.f16.f32 high, %f166;
  mov.b32 %r6918, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6918, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1828, %r279, 1;
	mul.wide.s32 	%rd194, %r1828, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6918;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f171, %fd2;
	add.f32 	%f172, %f171, 0f3E800000;
	abs.f32 	%f49, %f172;
	add.f32 	%f50, %f49, 0f40000000;
	setp.geu.f32 	%p161, %f50, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r254, 0;
	add.s32 	%r1830, %r260, %r274;
	shl.b32 	%r1831, %r1830, 1;
	or.b32  	%r1832, %r1831, 1;
	mul.wide.s32 	%rd196, %r1832, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f51, [%rd197];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f178, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f51;
  cvt.rn.f16.f32 high, %f178;
  mov.b32 %r6920, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f174;
  mov.b32 %r6920, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f51;
  mov.b32 %r6920, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r290, %r6919, %r258;
	mul.wide.s32 	%rd198, %r290, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6920;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r254, 0;
	add.s32 	%r1836, %r261, %r274;
	shl.b32 	%r1837, %r1836, 1;
	or.b32  	%r1838, %r1837, 1;
	mul.wide.s32 	%rd200, %r1838, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f52, [%rd201];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f184, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f184;
  mov.b32 %r6921, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f180;
  mov.b32 %r6921, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f181, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f181;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6921, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1841, %r290, 1;
	mul.wide.s32 	%rd202, %r1841, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6921;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_198:
	or.b32  	%r1842, %r263, %r274;
	setp.gt.s32 	%p164, %r1842, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r6915, %r1484;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f53, %f46, 0f3FC00000;
	setp.geu.f32 	%p168, %f53, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r254, 0;
	add.s32 	%r1844, %r262, %r274;
	shl.b32 	%r1845, %r1844, 1;
	mul.wide.s32 	%rd204, %r1845, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f54, [%rd205];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f190, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f54;
  cvt.rn.f16.f32 high, %f190;
  mov.b32 %r6923, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f186;
  mov.b32 %r6923, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f187, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f187;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6923, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r301, %r6919, %r258;
	mul.wide.s32 	%rd206, %r301, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6923;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r254, 0;
	add.s32 	%r1849, %r264, %r274;
	shl.b32 	%r1850, %r1849, 1;
	mul.wide.s32 	%rd208, %r1850, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f55, [%rd209];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r6924, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f192;
  mov.b32 %r6924, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f193, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f193;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r6924, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1853, %r301, 1;
	mul.wide.s32 	%rd210, %r1853, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6924;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_210:
	add.f32 	%f56, %f49, 0f3F800000;
	setp.geu.f32 	%p171, %f56, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r254, 0;
	add.s32 	%r1855, %r262, %r274;
	shl.b32 	%r1856, %r1855, 1;
	or.b32  	%r1857, %r1856, 1;
	mul.wide.s32 	%rd212, %r1857, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f57, [%rd213];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6926, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6926, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f57;
  mov.b32 %r6926, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r312, %r6919, %r258;
	mul.wide.s32 	%rd214, %r312, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6926;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r254, 0;
	add.s32 	%r1861, %r264, %r274;
	shl.b32 	%r1862, %r1861, 1;
	or.b32  	%r1863, %r1862, 1;
	mul.wide.s32 	%rd216, %r1863, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f58, [%rd217];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6927, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6927, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6927, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1866, %r312, 1;
	mul.wide.s32 	%rd218, %r1866, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6927;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_222:
	or.b32  	%r1867, %r6915, %r274;
	setp.gt.s32 	%p174, %r1867, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r6915, %r1484;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f59, %f46, 0f3F000000;
	setp.geu.f32 	%p178, %f59, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r254, 0;
	add.s32 	%r1869, %r266, %r274;
	shl.b32 	%r1870, %r1869, 1;
	mul.wide.s32 	%rd220, %r1870, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f60, [%rd221];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6929, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6929, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6929, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r323, %r6919, %r258;
	mul.wide.s32 	%rd222, %r323, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6929;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r254, 0;
	add.s32 	%r1874, %r265, %r274;
	shl.b32 	%r1875, %r1874, 1;
	mul.wide.s32 	%rd224, %r1875, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f61, [%rd225];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6930, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6930, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f61;
  mov.b32 %r6930, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1878, %r323, 1;
	mul.wide.s32 	%rd226, %r1878, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6930;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_234:
	add.f32 	%f221, %f49, 0f00000000;
	setp.geu.f32 	%p181, %f221, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r254, 0;
	add.s32 	%r1880, %r266, %r274;
	shl.b32 	%r1881, %r1880, 1;
	or.b32  	%r1882, %r1881, 1;
	mul.wide.s32 	%rd228, %r1882, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f62, [%rd229];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f227, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r6932, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r6932, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f224, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f224;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6932, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r334, %r6919, %r258;
	mul.wide.s32 	%rd230, %r334, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6932;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r254, 0;
	add.s32 	%r1886, %r265, %r274;
	shl.b32 	%r1887, %r1886, 1;
	or.b32  	%r1888, %r1887, 1;
	mul.wide.s32 	%rd232, %r1888, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f63, [%rd233];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f233, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f233;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f230, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r6933, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1891, %r334, 1;
	mul.wide.s32 	%rd234, %r1891, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6933;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_246:
	or.b32  	%r1892, %r268, %r274;
	setp.gt.s32 	%p184, %r1892, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r268, %r1484;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r254, 0;
	add.s32 	%r1894, %r267, %r274;
	shl.b32 	%r1895, %r1894, 1;
	mul.wide.s32 	%rd236, %r1895, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f64, [%rd237];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f239, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f239;
  mov.b32 %r6935, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f235;
  mov.b32 %r6935, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r6935, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r345, %r6919, %r258;
	mul.wide.s32 	%rd238, %r345, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6935;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r254, 0;
	add.s32 	%r1899, %r269, %r274;
	shl.b32 	%r1900, %r1899, 1;
	mul.wide.s32 	%rd240, %r1900, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f65, [%rd241];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f245, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f245;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f241;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r6936, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1903, %r345, 1;
	mul.wide.s32 	%rd242, %r1903, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6936;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r254, 0;
	add.s32 	%r1905, %r267, %r274;
	shl.b32 	%r1906, %r1905, 1;
	or.b32  	%r1907, %r1906, 1;
	mul.wide.s32 	%rd244, %r1907, 4;
	add.s64 	%rd245, %rd11, %rd244;
	ld.global.f32 	%f66, [%rd245];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f251;
  mov.b32 %r6938, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f247;
  mov.b32 %r6938, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f248, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f248;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r6938, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r356, %r6919, %r258;
	mul.wide.s32 	%rd246, %r356, 4;
	add.s64 	%rd247, %rd12, %rd246;
	st.global.u32 	[%rd247], %r6938;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r254, 0;
	add.s32 	%r1911, %r269, %r274;
	shl.b32 	%r1912, %r1911, 1;
	or.b32  	%r1913, %r1912, 1;
	mul.wide.s32 	%rd248, %r1913, 4;
	add.s64 	%rd249, %rd11, %rd248;
	ld.global.f32 	%f67, [%rd249];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f257;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f253;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f254;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6939, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r1916, %r356, 1;
	mul.wide.s32 	%rd250, %r1916, 4;
	add.s64 	%rd251, %rd12, %rd250;
	st.global.u32 	[%rd251], %r6939;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_270:
	or.b32  	%r1917, %r271, %r274;
	setp.gt.s32 	%p194, %r1917, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r271, %r1484;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r254, 0;
	add.s32 	%r1919, %r270, %r274;
	shl.b32 	%r1920, %r1919, 1;
	mul.wide.s32 	%rd252, %r1920, 4;
	add.s64 	%rd253, %rd11, %rd252;
	ld.global.f32 	%f68, [%rd253];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f263;
  mov.b32 %r6941, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f259;
  mov.b32 %r6941, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f260;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r6941, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r367, %r6919, %r258;
	mul.wide.s32 	%rd254, %r367, 4;
	add.s64 	%rd255, %rd12, %rd254;
	st.global.u32 	[%rd255], %r6941;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r254, 0;
	add.s32 	%r1924, %r272, %r274;
	shl.b32 	%r1925, %r1924, 1;
	mul.wide.s32 	%rd256, %r1925, 4;
	add.s64 	%rd257, %rd11, %rd256;
	ld.global.f32 	%f69, [%rd257];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f269;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f265;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r6942, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r1928, %r367, 1;
	mul.wide.s32 	%rd258, %r1928, 4;
	add.s64 	%rd259, %rd12, %rd258;
	st.global.u32 	[%rd259], %r6942;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r254, 0;
	add.s32 	%r1930, %r270, %r274;
	shl.b32 	%r1931, %r1930, 1;
	or.b32  	%r1932, %r1931, 1;
	mul.wide.s32 	%rd260, %r1932, 4;
	add.s64 	%rd261, %rd11, %rd260;
	ld.global.f32 	%f70, [%rd261];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f275;
  mov.b32 %r6944, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f271, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f271;
  mov.b32 %r6944, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f272;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6944, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r378, %r6919, %r258;
	mul.wide.s32 	%rd262, %r378, 4;
	add.s64 	%rd263, %rd12, %rd262;
	st.global.u32 	[%rd263], %r6944;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r254, 0;
	add.s32 	%r1936, %r272, %r274;
	shl.b32 	%r1937, %r1936, 1;
	or.b32  	%r1938, %r1937, 1;
	mul.wide.s32 	%rd264, %r1938, 4;
	add.s64 	%rd265, %rd11, %rd264;
	ld.global.f32 	%f71, [%rd265];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f281;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f277, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f277;
  cvt.rn.f16.f32 high, %f277;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r6945, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r1941, %r378, 1;
	mul.wide.s32 	%rd266, %r1941, 4;
	add.s64 	%rd267, %rd12, %rd266;
	st.global.u32 	[%rd267], %r6945;
	add.s32 	%r6919, %r6919, 2;

$L__BB0_294:
	add.s64 	%rd481, %rd481, 4;
	add.s64 	%rd480, %rd480, -4;
	setp.ne.s64 	%p204, %rd480, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r6915, %r6915, %r48;
	setp.lt.s32 	%p205, %r6915, %r1484;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r6909, %r6909, %r1510;
	setp.lt.s32 	%p206, %r6909, %r1483;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r227, %r78;
	mov.u32 	%r1756, 31;
	sub.s32 	%r1757, %r1756, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1758, %r46, %r1757, %p144;
	shl.b32 	%r1759, %r1758, 2;
	mov.u32 	%r1760, 2;
	sub.s32 	%r228, %r1759, %r1486;
	shl.b32 	%r1761, %r1485, 2;
	mov.u32 	%r1762, 128;
	sub.s32 	%r229, %r1762, %r1761;
	sub.s32 	%r1763, %r1760, %r1486;
	add.s32 	%r230, %r1763, %r1759;
	add.s32 	%r231, %r1483, -1;
	add.s32 	%r232, %r228, 1;
	add.s32 	%r233, %r230, 1;
	rem.s32 	%r1788, %r232, %r229;
	add.s32 	%r1789, %r1788, %r229;
	rem.s32 	%r244, %r1789, %r229;
	rem.s32 	%r1790, %r233, %r229;
	add.s32 	%r1791, %r1790, %r229;
	rem.s32 	%r245, %r1791, %r229;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r227;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r235, %r6909, 1;
	rem.s32 	%r1764, %r228, %r229;
	add.s32 	%r1765, %r1764, %r229;
	rem.s32 	%r236, %r1765, %r229;
	rem.s32 	%r1766, %r230, %r229;
	add.s32 	%r1767, %r1766, %r229;
	rem.s32 	%r237, %r1767, %r229;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1770, %r235, %r229;
	add.s32 	%r1771, %r1770, %r236;
	mul.wide.s32 	%rd168, %r1771, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f142, [%rd169];
	add.s32 	%r1772, %r1770, %r237;
	mul.wide.s32 	%rd170, %r1772, 4;
	add.s64 	%rd171, %rd11, %rd170;
	ld.global.f32 	%f143, [%rd171];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f143;
  mov.b32 %r6910, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6910, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1773, %r6909, 5;
	add.s32 	%r1774, %r1773, %r46;
	shl.b32 	%r1775, %r1774, 2;
	mul.wide.s32 	%rd172, %r1775, 4;
	add.s64 	%rd13, %rd12, %rd172;
	st.global.u32 	[%rd13], %r6910;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1778, %r235, 1;
	mul.lo.s32 	%r1779, %r1778, %r229;
	add.s32 	%r1780, %r1779, %r236;
	mul.wide.s32 	%rd173, %r1780, 4;
	add.s64 	%rd174, %rd11, %rd173;
	ld.global.f32 	%f146, [%rd174];
	add.s32 	%r1781, %r1779, %r237;
	mul.wide.s32 	%rd175, %r1781, 4;
	add.s64 	%rd176, %rd11, %rd175;
	ld.global.f32 	%f147, [%rd176];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r6911, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f145;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6911, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1782, %r231, %r6909;
	rem.s32 	%r1783, %r1782, %r1483;
	shl.b32 	%r1784, %r1783, 5;
	add.s32 	%r1785, %r1784, %r46;
	shl.b32 	%r1786, %r1785, 2;
	or.b32  	%r1787, %r1786, 2;
	mul.wide.s32 	%rd177, %r1787, 4;
	add.s64 	%rd14, %rd12, %rd177;
	st.global.u32 	[%rd14], %r6911;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1794, %r235, %r229;
	add.s32 	%r1795, %r1794, %r244;
	mul.wide.s32 	%rd178, %r1795, 4;
	add.s64 	%rd179, %rd11, %rd178;
	ld.global.f32 	%f150, [%rd179];
	add.s32 	%r1796, %r1794, %r245;
	mul.wide.s32 	%rd180, %r1796, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f151, [%rd181];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r6912, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6912, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd13+4], %r6912;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1799, %r235, 1;
	mul.lo.s32 	%r1800, %r1799, %r229;
	add.s32 	%r1801, %r1800, %r244;
	mul.wide.s32 	%rd182, %r1801, 4;
	add.s64 	%rd183, %rd11, %rd182;
	ld.global.f32 	%f154, [%rd183];
	add.s32 	%r1802, %r1800, %r245;
	mul.wide.s32 	%rd184, %r1802, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f155, [%rd185];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6913, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6913, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd14+4], %r6913;

$L__BB0_167:
	add.s32 	%r6909, %r6909, %r1510;
	setp.lt.s32 	%p150, %r6909, %r1483;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r1943, %r1478, -1;
	mad.lo.s32 	%r1944, %r1479, 576, 128;
	mul.lo.s32 	%r1945, %r1944, %r1943;
	add.s32 	%r1946, %r69, -64;
	add.s32 	%r1947, %r1946, %r69;
	add.s32 	%r1948, %r1479, -1;
	mad.lo.s32 	%r1949, %r1947, %r1948, %r1945;
	mul.lo.s32 	%r1950, %r1943, %r1479;
	mul.lo.s32 	%r1951, %r1950, 320;
	mad.lo.s32 	%r1952, %r1946, %r1948, %r1951;
	add.s32 	%r387, %r1952, %r1949;
	setp.lt.s32 	%p207, %r387, 1;
	mov.f32 	%f283, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r6950, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r6949, 0;
	mov.u32 	%r6947, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r6947], %r6950;
	mov.f32 	%f291, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1955, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6947+4], %r1955;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1956, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6947+8], %r1956;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r1957, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6947+12], %r1957;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f291;
  mov.b32 %r6950, {low,high};}

	// end inline asm
	add.s32 	%r6947, %r6947, 16;
	add.s32 	%r6949, %r6949, 4;
	setp.lt.s32 	%p208, %r6949, %r387;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r1959, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f283;
  mov.b32 %r1960, {low,high};}

	// end inline asm
	ld.param.u64 	%rd268, [%rd1+176];
	cvta.to.global.u64 	%rd19, %rd268;
	mov.u32 	%r1961, 31;
	sub.s32 	%r1962, %r1961, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r1963, %r46, %r1962, %p209;
	shl.b32 	%r1964, %r1963, 2;
	sub.s32 	%r398, %r1964, %r1486;
	shl.b32 	%r1965, %r1485, 2;
	mov.u32 	%r1966, 128;
	sub.s32 	%r399, %r1966, %r1965;
	rem.s32 	%r1967, %r398, %r399;
	add.s32 	%r1968, %r1967, %r399;
	rem.s32 	%r400, %r1968, %r399;
	add.s32 	%r1969, %r398, 2;
	rem.s32 	%r1970, %r1969, %r399;
	add.s32 	%r1971, %r1970, %r399;
	rem.s32 	%r401, %r1971, %r399;
	mul.lo.s32 	%r1972, %r400, 6;
	mul.lo.s32 	%r1973, %r401, 6;
	mul.wide.s32 	%rd269, %r1972, 4;
	add.s64 	%rd20, %rd19, %rd269;
	mul.wide.s32 	%rd270, %r1973, 4;
	add.s64 	%rd21, %rd19, %rd270;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r6951, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f298, [%rd20];
	ld.global.f32 	%f299, [%rd20+8];
	add.f32 	%f296, %f298, %f299;
	ld.global.f32 	%f300, [%rd21+8];
	ld.global.f32 	%f301, [%rd21];
	add.f32 	%f297, %f301, %f300;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f296;
  cvt.rn.f16.f32 high, %f297;
  mov.b32 %r6951, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f306, [%rd20+4];
	ld.global.f32 	%f307, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f307;
  mov.b32 %r6952, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f304, [%rd20];
	ld.global.f32 	%f305, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f304;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r6952, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r6953, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f310, [%rd20+20];
	ld.global.f32 	%f311, [%rd20+12];
	add.f32 	%f308, %f311, %f310;
	ld.global.f32 	%f312, [%rd21+20];
	ld.global.f32 	%f313, [%rd21+12];
	add.f32 	%f309, %f313, %f312;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f308;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r6953, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f318, [%rd20+16];
	ld.global.f32 	%f319, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f319;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f316, [%rd20+12];
	ld.global.f32 	%f317, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f316;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r6954, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r1982, %r398, 1;
	rem.s32 	%r1983, %r1982, %r399;
	add.s32 	%r1984, %r1983, %r399;
	rem.s32 	%r414, %r1984, %r399;
	add.s32 	%r1985, %r398, 3;
	rem.s32 	%r1986, %r1985, %r399;
	add.s32 	%r1987, %r1986, %r399;
	rem.s32 	%r415, %r1987, %r399;
	mul.lo.s32 	%r1988, %r414, 6;
	mul.lo.s32 	%r1989, %r415, 6;
	mul.wide.s32 	%rd271, %r1988, 4;
	add.s64 	%rd22, %rd19, %rd271;
	mul.wide.s32 	%rd272, %r1989, 4;
	add.s64 	%rd23, %rd19, %rd272;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r6955, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f322, [%rd22];
	ld.global.f32 	%f323, [%rd22+8];
	add.f32 	%f320, %f322, %f323;
	ld.global.f32 	%f324, [%rd23+8];
	ld.global.f32 	%f325, [%rd23];
	add.f32 	%f321, %f325, %f324;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f320;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r6955, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f330, [%rd22+4];
	ld.global.f32 	%f331, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f331;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f328, [%rd22];
	ld.global.f32 	%f329, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r6956, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f339;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f334, [%rd22+20];
	ld.global.f32 	%f335, [%rd22+12];
	add.f32 	%f332, %f335, %f334;
	ld.global.f32 	%f336, [%rd23+20];
	ld.global.f32 	%f337, [%rd23+12];
	add.f32 	%f333, %f337, %f336;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r6957, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f342, [%rd22+16];
	ld.global.f32 	%f343, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f343;
  mov.b32 %r6958, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f340, [%rd22+12];
	ld.global.f32 	%f341, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r6958, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r1998, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd273, %r1998;
	// begin inline asm
	mov.u32 %r1999, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd274, %r1999;
	bfi.b64 	%rd24, %rd274, %rd273, 32, 32;
	setp.ne.s64 	%p218, %rd24, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r2000, %nctaid.y;
	mov.u32 	%r2001, %nctaid.x;
	mul.lo.s32 	%r2002, %r2001, %r2000;
	mov.u32 	%r2003, %nctaid.z;
	mul.lo.s32 	%r428, %r2002, %r2003;
	neg.s32 	%r2004, %r42;
	add.s32 	%r2005, %r46, %r41;
	setp.ne.s32 	%p219, %r2005, %r2004;
	mov.u32 	%r2006, %ctaid.x;
	add.s32 	%r429, %r2006, %r43;
	neg.s32 	%r430, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r429, %r430;
	mov.u32 	%r2009, -2147483647;
	sub.s32 	%r2010, %r2009, %r428;
	selp.b32 	%r2008, %r2010, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2007,[%rd25],%r2008;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2011, [%rd25];
	xor.b32  	%r2012, %r2011, %r2007;
	setp.gt.s32 	%p221, %r2012, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2013,[%rd25];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_849;

	shr.s32 	%r2015, %r1488, 31;
	shr.u32 	%r2016, %r2015, 30;
	add.s32 	%r2017, %r1488, %r2016;
	shr.s32 	%r432, %r2017, 2;
	add.s32 	%r2018, %r46, 24;
	mul.hi.s32 	%r2019, %r2018, 1374389535;
	shr.u32 	%r2020, %r2019, 31;
	shr.s32 	%r2021, %r2019, 3;
	add.s32 	%r2022, %r2021, %r2020;
	mul.lo.s32 	%r2023, %r2022, 25;
	sub.s32 	%r2024, %r2018, %r2023;
	add.s32 	%r2025, %r46, 26;
	mul.hi.s32 	%r2026, %r2025, 1374389535;
	shr.u32 	%r2027, %r2026, 31;
	shr.s32 	%r2028, %r2026, 3;
	add.s32 	%r2029, %r2028, %r2027;
	mul.lo.s32 	%r2030, %r2029, 25;
	sub.s32 	%r2031, %r2025, %r2030;
	shr.u32 	%r2032, %r1488, 31;
	add.s32 	%r2033, %r1488, %r2032;
	and.b32  	%r2034, %r2033, -2;
	sub.s32 	%r433, %r1488, %r2034;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r434, %r2024, %r46, %p223;
	setp.lt.s32 	%p224, %r400, %r1497;
	setp.ge.s32 	%p225, %r400, %r1496;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r414, %r1497;
	setp.ge.s32 	%p227, %r414, %r1496;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r401, %r1497;
	setp.ge.s32 	%p229, %r401, %r1496;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r415, %r1497;
	setp.ge.s32 	%p231, %r415, %r1496;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r435, %r2031, %r46, %p223;
	mov.u32 	%r2014, 0;
	// begin inline asm
	{mov.u32 %r2035, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2360, %r2035, 8;
	add.s32 	%r2361, %r2360, -8192;
	or.b32  	%r2039, %r2361, 31;
	mov.u32 	%r7280, %r1960;
	mov.u32 	%r7281, %r1960;
	mov.u32 	%r7290, %r1960;
	mov.u32 	%r7291, %r1960;
	mov.u32 	%r7292, %r1960;
	mov.u32 	%r7293, %r1960;
	mov.u32 	%r7282, %r1960;
	mov.u32 	%r7283, %r1960;
	mov.u32 	%r7284, %r1960;
	mov.u32 	%r7285, %r1960;
	mov.u32 	%r7286, %r1960;
	mov.u32 	%r7287, %r1960;
	mov.u32 	%r7294, %r1960;
	mov.u32 	%r7295, %r1960;
	mov.u32 	%r7296, %r1960;
	mov.u32 	%r7297, %r1960;
	mov.u32 	%r7298, %r1960;
	mov.u32 	%r7299, %r1960;
	mov.u32 	%r7288, %r1960;
	mov.u32 	%r7289, %r1960;
	mov.u32 	%r7300, %r1960;
	mov.u32 	%r7301, %r1960;
	mov.u32 	%r7232, %r1960;
	mov.u32 	%r7233, %r1960;
	mov.u32 	%r7220, %r1960;
	mov.u32 	%r7221, %r1960;
	mov.u32 	%r7222, %r1960;
	mov.u32 	%r7223, %r1960;
	mov.u32 	%r7234, %r1960;
	mov.u32 	%r7235, %r1960;
	mov.u32 	%r7236, %r1960;
	mov.u32 	%r7237, %r1960;
	mov.u32 	%r7238, %r1960;
	mov.u32 	%r7239, %r1960;
	mov.u32 	%r7224, %r1960;
	mov.u32 	%r7225, %r1960;
	mov.u32 	%r7226, %r1960;
	mov.u32 	%r7227, %r1960;
	mov.u32 	%r7240, %r1960;
	mov.u32 	%r7241, %r1960;
	mov.u32 	%r7242, %r1960;
	mov.u32 	%r7243, %r1960;
	mov.u32 	%r7001, %r1960;
	mov.u32 	%r7002, %r1960;
	mov.u32 	%r7228, %r1960;
	mov.u32 	%r7229, %r1960;
	mov.u32 	%r7005, %r1960;
	mov.u32 	%r7006, %r1960;
	mov.u32 	%r7007, %r1960;
	mov.u32 	%r7008, %r1960;
	mov.u32 	%r7009, %r1960;
	mov.u32 	%r7010, %r1960;
	mov.u32 	%r7204, %r1960;
	mov.u32 	%r7205, %r1960;
	mov.u32 	%r7013, %r1960;
	mov.u32 	%r7206, %r1960;
	mov.u32 	%r7015, %r1960;
	mov.u32 	%r7016, %r1960;
	mov.u32 	%r7207, %r1960;
	mov.u32 	%r7018, %r1960;
	mov.u32 	%r7019, %r1960;
	mov.u32 	%r7020, %r1960;
	mov.u32 	%r7244, %r1960;
	mov.u32 	%r7245, %r1960;
	mov.u32 	%r7023, %r1960;
	mov.u32 	%r7024, %r1960;
	mov.u32 	%r7230, %r1960;
	mov.u32 	%r7231, %r1960;
	mov.u32 	%r7027, %r1960;
	mov.u32 	%r7028, %r1960;
	mov.u32 	%r7029, %r1960;
	mov.u32 	%r7030, %r1960;
	mov.u32 	%r7031, %r1960;
	mov.u32 	%r7032, %r1960;
	mov.u32 	%r7033, %r1960;
	mov.u32 	%r7034, %r1960;
	mov.u32 	%r7035, %r1960;
	mov.u32 	%r7036, %r1960;
	mov.u32 	%r7037, %r1960;
	mov.u32 	%r7038, %r1960;
	mov.u32 	%r7039, %r1960;
	mov.u32 	%r7040, %r1960;
	mov.u32 	%r7041, %r1960;
	mov.u32 	%r7042, %r1960;
	mov.u32 	%r7043, %r1960;
	mov.u32 	%r7208, %r1960;
	mov.u32 	%r7045, %r1960;
	mov.u32 	%r7046, %r1960;
	mov.u32 	%r7047, %r1960;
	mov.u32 	%r7048, %r1960;
	mov.u32 	%r7049, %r1960;
	mov.u32 	%r7050, %r1960;
	mov.u32 	%r7051, %r1960;
	mov.u32 	%r7209, %r1960;
	mov.u32 	%r7053, %r1960;
	mov.u32 	%r7246, %r1960;
	mov.u32 	%r7055, %r1960;
	mov.u32 	%r7056, %r1960;
	mov.u32 	%r7057, %r1960;
	mov.u32 	%r7058, %r1960;
	mov.u32 	%r7247, %r1960;
	mov.u32 	%r7060, %r1960;
	mov.u32 	%r7061, %r1960;
	mov.u32 	%r7062, %r1960;
	mov.u32 	%r7063, %r1960;
	mov.u32 	%r7064, %r1960;
	mov.u32 	%r7065, %r1960;
	mov.u32 	%r7066, %r1960;
	mov.u32 	%r7067, %r1960;
	mov.u32 	%r7068, %r1960;
	mov.u32 	%r7069, %r1960;
	mov.u32 	%r7070, %r1960;
	mov.u32 	%r7071, %r1960;
	mov.u32 	%r7072, %r1960;
	mov.u32 	%r7073, %r1960;
	mov.u32 	%r7074, %r1960;
	mov.u32 	%r7075, %r1960;
	mov.u32 	%r7076, %r1960;
	mov.u32 	%r7077, %r1960;
	mov.u32 	%r7078, %r1960;
	mov.u32 	%r7079, %r1960;
	mov.u32 	%r7080, %r1960;
	mov.u32 	%r7081, %r1960;
	mov.u32 	%r7082, %r1960;
	mov.u32 	%r7083, %r1960;
	mov.u32 	%r7084, %r1960;
	mov.u32 	%r7085, %r1960;
	mov.u32 	%r7086, %r1960;
	mov.u32 	%r7087, %r1960;
	mov.u32 	%r7088, %r1960;
	mov.u32 	%r7089, %r1960;
	mov.u32 	%r7090, %r1960;
	mov.u32 	%r7091, %r1960;
	mov.u32 	%r7092, %r1960;
	mov.u32 	%r7093, %r1960;
	mov.u32 	%r7094, %r1960;
	mov.u32 	%r7095, %r1960;
	mov.u32 	%r7096, %r1960;
	mov.u32 	%r7097, %r1960;
	mov.u32 	%r7098, %r1960;
	mov.u32 	%r7099, %r1960;
	mov.u32 	%r7100, %r1960;
	mov.u32 	%r7101, %r1960;
	mov.u32 	%r7102, %r1960;
	mov.u32 	%r7103, %r1960;
	mov.u32 	%r7104, %r1960;
	mov.u32 	%r7105, %r1960;
	mov.u32 	%r7106, %r1960;
	mov.u32 	%r7107, %r1960;
	mov.u32 	%r7108, %r1960;
	mov.u32 	%r7109, %r2014;

$L__BB0_332:
	mov.u32 	%r529, %r7209;
	mov.u32 	%r525, %r7048;
	mov.u32 	%r521, %r7208;
	mov.u32 	%r519, %r7042;
	mov.u32 	%r517, %r7040;
	mov.u32 	%r509, %r7032;
	mov.u32 	%r7048, %r7207;
	mov.u32 	%r491, %r7206;
	mov.u32 	%r7042, %r7205;
	mov.u32 	%r488, %r7204;
	mov.u32 	%r483, %r7006;
	mov.u32 	%r482, %r7005;
	mov.u32 	%r6862, %ctaid.y;
	mov.u32 	%r6861, %ctaid.z;
	mov.u32 	%r2050, 1;
	not.b32 	%r2324, %r6861;
	mov.u32 	%r2316, -1;
	add.s32 	%r2325, %r1481, %r2324;
	not.b32 	%r2327, %r6862;
	add.s32 	%r2328, %r1480, %r2327;
	add.s32 	%r2329, %r2328, %r2325;
	mul.lo.s32 	%r2330, %r2329, %r1482;
	add.s32 	%r2331, %r2330, %r1483;
	not.b32 	%r2333, %r41;
	add.s32 	%r2334, %r1478, %r2333;
	mad.lo.s32 	%r2335, %r2328, %r1478, %r2334;
	not.b32 	%r2337, %r42;
	add.s32 	%r2338, %r1479, %r2337;
	mad.lo.s32 	%r2339, %r2325, %r1479, %r2338;
	add.s32 	%r2340, %r2335, %r2339;
	shl.b32 	%r2341, %r2340, 1;
	add.s32 	%r2342, %r2331, %r2341;
	add.s32 	%r2343, %r2342, %r7109;
	add.s32 	%r2344, %r7109, %r2330;
	div.s32 	%r2345, %r2343, %r1483;
	mul.lo.s32 	%r2346, %r2345, %r1483;
	sub.s32 	%r2349, %r48, %r1483;
	sub.s32 	%r2350, %r2335, %r2339;
	shl.b32 	%r2351, %r2350, 1;
	add.s32 	%r2352, %r2351, %r1484;
	mad.lo.s32 	%r2353, %r2345, %r48, %r2352;
	mad.lo.s32 	%r2354, %r2345, %r2349, %r2344;
	div.s32 	%r2355, %r2353, %r1484;
	mul.lo.s32 	%r2356, %r2355, %r1484;
	sub.s32 	%r2359, %r1511, %r1484;
	mov.u32 	%r2134, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2036,%r1959,%r2014,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2042, %r6952, %r2036, %p28;
	// begin inline asm
	{mul.f16x2 %r7193,%r2042,%r7108;
}
	// end inline asm
	selp.b32 	%r2045, %r6956, %r2036, %p28;
	// begin inline asm
	{mul.f16x2 %r7191,%r2045,%r7107;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2048,%r1959,%r2050,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2054, %r6952, %r2048, %p28;
	// begin inline asm
	{mul.f16x2 %r7192,%r2054,%r7106;
}
	// end inline asm
	selp.b32 	%r2057, %r6956, %r2048, %p28;
	// begin inline asm
	{mul.f16x2 %r7190,%r2057,%r7105;
}
	// end inline asm
	mov.u32 	%r2062, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2060,%r1959,%r2062,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2066, %r6952, %r2060, %p28;
	// begin inline asm
	{mul.f16x2 %r7189,%r2066,%r7104;
}
	// end inline asm
	selp.b32 	%r2069, %r6956, %r2060, %p28;
	// begin inline asm
	{mul.f16x2 %r7188,%r2069,%r7103;
}
	// end inline asm
	mov.u32 	%r2074, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2072,%r1959,%r2074,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2078, %r6952, %r2072, %p28;
	// begin inline asm
	{mul.f16x2 %r7187,%r2078,%r7301;
}
	// end inline asm
	selp.b32 	%r2081, %r6956, %r2072, %p28;
	// begin inline asm
	{mul.f16x2 %r7185,%r2081,%r7300;
}
	// end inline asm
	mov.u32 	%r2086, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2084,%r1959,%r2086,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2090, %r6952, %r2084, %p28;
	// begin inline asm
	{mul.f16x2 %r7186,%r2090,%r7102;
}
	// end inline asm
	selp.b32 	%r2093, %r6956, %r2084, %p28;
	// begin inline asm
	{mul.f16x2 %r7184,%r2093,%r7101;
}
	// end inline asm
	mov.u32 	%r2098, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2096,%r1959,%r2098,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2102, %r6952, %r2096, %p28;
	// begin inline asm
	{mul.f16x2 %r7183,%r2102,%r7100;
}
	// end inline asm
	selp.b32 	%r2105, %r6956, %r2096, %p28;
	// begin inline asm
	{mul.f16x2 %r7180,%r2105,%r7099;
}
	// end inline asm
	mov.u32 	%r2110, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2108,%r1959,%r2110,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2114, %r6952, %r2108, %p28;
	// begin inline asm
	{mul.f16x2 %r7182,%r2114,%r7098;
}
	// end inline asm
	selp.b32 	%r2117, %r6956, %r2108, %p28;
	// begin inline asm
	{mul.f16x2 %r7179,%r2117,%r7097;
}
	// end inline asm
	mov.u32 	%r2122, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2120,%r1959,%r2122,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2126, %r6952, %r2120, %p28;
	// begin inline asm
	{mul.f16x2 %r7181,%r2126,%r7096;
}
	// end inline asm
	selp.b32 	%r2129, %r6956, %r2120, %p28;
	// begin inline asm
	{mul.f16x2 %r7178,%r2129,%r7095;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2132,%r1959,%r2134,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2138, %r6952, %r2132, %p28;
	// begin inline asm
	{mul.f16x2 %r7177,%r2138,%r7094;
}
	// end inline asm
	selp.b32 	%r2141, %r6956, %r2132, %p28;
	// begin inline asm
	{mul.f16x2 %r7174,%r2141,%r7093;
}
	// end inline asm
	mov.u32 	%r2146, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2144,%r1959,%r2146,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2150, %r6952, %r2144, %p28;
	// begin inline asm
	{mul.f16x2 %r7176,%r2150,%r7092;
}
	// end inline asm
	selp.b32 	%r2153, %r6956, %r2144, %p28;
	// begin inline asm
	{mul.f16x2 %r7173,%r2153,%r7091;
}
	// end inline asm
	mov.u32 	%r2158, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2156,%r1959,%r2158,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2162, %r6952, %r2156, %p28;
	// begin inline asm
	{mul.f16x2 %r7175,%r2162,%r7090;
}
	// end inline asm
	selp.b32 	%r2165, %r6956, %r2156, %p28;
	// begin inline asm
	{mul.f16x2 %r7172,%r2165,%r7089;
}
	// end inline asm
	mov.u32 	%r2170, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2168,%r1959,%r2170,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2174, %r6952, %r2168, %p28;
	// begin inline asm
	{mul.f16x2 %r7171,%r2174,%r7289;
}
	// end inline asm
	selp.b32 	%r2177, %r6956, %r2168, %p28;
	// begin inline asm
	{mul.f16x2 %r7170,%r2177,%r7288;
}
	// end inline asm
	mov.u32 	%r2182, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2180,%r1959,%r2182,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2186, %r6952, %r2180, %p28;
	// begin inline asm
	{mul.f16x2 %r7169,%r2186,%r7299;
}
	// end inline asm
	selp.b32 	%r2189, %r6956, %r2180, %p28;
	// begin inline asm
	{mul.f16x2 %r7167,%r2189,%r7297;
}
	// end inline asm
	mov.u32 	%r2194, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2192,%r1959,%r2194,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2198, %r6952, %r2192, %p28;
	// begin inline asm
	{mul.f16x2 %r7168,%r2198,%r7298;
}
	// end inline asm
	selp.b32 	%r2201, %r6956, %r2192, %p28;
	// begin inline asm
	{mul.f16x2 %r7166,%r2201,%r7296;
}
	// end inline asm
	mov.u32 	%r2206, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2204,%r1959,%r2206,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2210, %r6952, %r2204, %p28;
	// begin inline asm
	{mul.f16x2 %r7165,%r2210,%r7295;
}
	// end inline asm
	selp.b32 	%r2213, %r6956, %r2204, %p28;
	// begin inline asm
	{mul.f16x2 %r7162,%r2213,%r7294;
}
	// end inline asm
	mov.u32 	%r2218, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2216,%r1959,%r2218,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2222, %r6952, %r2216, %p28;
	// begin inline asm
	{mul.f16x2 %r7164,%r2222,%r7088;
}
	// end inline asm
	selp.b32 	%r2225, %r6956, %r2216, %p28;
	// begin inline asm
	{mul.f16x2 %r7161,%r2225,%r7087;
}
	// end inline asm
	mov.u32 	%r2230, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2228,%r1959,%r2230,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2234, %r6952, %r2228, %p28;
	// begin inline asm
	{mul.f16x2 %r7163,%r2234,%r7086;
}
	// end inline asm
	selp.b32 	%r2237, %r6956, %r2228, %p28;
	// begin inline asm
	{mul.f16x2 %r7160,%r2237,%r7085;
}
	// end inline asm
	mov.u32 	%r2242, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2240,%r1959,%r2242,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2246, %r6952, %r2240, %p28;
	// begin inline asm
	{mul.f16x2 %r7159,%r2246,%r7287;
}
	// end inline asm
	selp.b32 	%r2249, %r6956, %r2240, %p28;
	// begin inline asm
	{mul.f16x2 %r7156,%r2249,%r7285;
}
	// end inline asm
	mov.u32 	%r2254, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2252,%r1959,%r2254,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2258, %r6952, %r2252, %p28;
	// begin inline asm
	{mul.f16x2 %r7158,%r2258,%r7286;
}
	// end inline asm
	selp.b32 	%r2261, %r6956, %r2252, %p28;
	// begin inline asm
	{mul.f16x2 %r7155,%r2261,%r7284;
}
	// end inline asm
	mov.u32 	%r2266, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2264,%r1959,%r2266,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2270, %r6952, %r2264, %p28;
	// begin inline asm
	{mul.f16x2 %r7157,%r2270,%r7084;
}
	// end inline asm
	selp.b32 	%r2273, %r6956, %r2264, %p28;
	// begin inline asm
	{mul.f16x2 %r7154,%r2273,%r7083;
}
	// end inline asm
	mov.u32 	%r2278, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2276,%r1959,%r2278,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2282, %r6952, %r2276, %p28;
	// begin inline asm
	{mul.f16x2 %r7153,%r2282,%r7283;
}
	// end inline asm
	selp.b32 	%r2285, %r6956, %r2276, %p28;
	// begin inline asm
	{mul.f16x2 %r7152,%r2285,%r7282;
}
	// end inline asm
	mov.u32 	%r2290, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2288,%r1959,%r2290,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2294, %r6952, %r2288, %p28;
	// begin inline asm
	{mul.f16x2 %r7151,%r2294,%r7293;
}
	// end inline asm
	selp.b32 	%r2297, %r6956, %r2288, %p28;
	// begin inline asm
	{mul.f16x2 %r7149,%r2297,%r7291;
}
	// end inline asm
	mov.u32 	%r2302, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2300,%r1959,%r2302,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2306, %r6952, %r2300, %p28;
	// begin inline asm
	{mul.f16x2 %r7150,%r2306,%r7292;
}
	// end inline asm
	selp.b32 	%r2309, %r6956, %r2300, %p28;
	// begin inline asm
	{mul.f16x2 %r7148,%r2309,%r7290;
}
	// end inline asm
	mov.u32 	%r2314, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2312,%r1959,%r2314,%r2039,%r2316;
}
	// end inline asm
	selp.b32 	%r2318, %r6952, %r2312, %p28;
	// begin inline asm
	{mul.f16x2 %r7147,%r2318,%r7281;
}
	// end inline asm
	selp.b32 	%r2321, %r6956, %r2312, %p28;
	// begin inline asm
	{mul.f16x2 %r7146,%r2321,%r7280;
}
	// end inline asm
	sub.s32 	%r635, %r2343, %r2346;
	sub.s32 	%r636, %r2353, %r2356;
	mad.lo.s32 	%r637, %r2355, %r2359, %r2354;
	ld.param.u64 	%rd278, [%rd1+168];
	cvta.to.global.u64 	%rd279, %rd278;
	shl.b32 	%r2408, %r637, 1;
	mul.wide.s32 	%rd280, %r2408, 4;
	add.s64 	%rd26, %rd279, %rd280;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2611, %r1506, 1;
	setp.lt.s32 	%p239, %r637, %r2611;
	setp.eq.s32 	%p240, %r432, %r46;
	setp.gt.s32 	%p241, %r637, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f354, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f354;
  mov.b32 %r7112, {low,low};}

	// end inline asm
	ld.global.f32 	%f355, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f355;
  mov.b32 %r7113, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2411, %r1506, 1;
	setp.lt.s32 	%p234, %r637, %r2411;
	setp.gt.s32 	%p235, %r637, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f348, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f348;
  mov.b32 %r7110, {low,low};}

	// end inline asm
	ld.global.f32 	%f349, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f349;
  mov.b32 %r7111, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7112, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r7113, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2619, 0;
	mov.u32 	%r2630, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2617,%r6950,%r2619,%r2039,%r2630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2622,%r7112,%r2617;
}
	// end inline asm
	mov.u32 	%r2628, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2626,%r6950,%r2628,%r2039,%r2630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2631,%r7113,%r2626;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7115,%r2622,%r2631;
}
	// end inline asm
	setp.eq.s32 	%p244, %r433, 0;
	mov.u32 	%r7114, %r7115;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f357;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r7114, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7193,%r7193,%r7114;
}
	// end inline asm
	setp.eq.s32 	%p245, %r433, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r7115, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7191,%r7191,%r7115;
}
	// end inline asm
	mov.u32 	%r2652, 2;
	mov.u32 	%r2663, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2650,%r6950,%r2652,%r2039,%r2663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2655,%r7112,%r2650;
}
	// end inline asm
	mov.u32 	%r2661, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2659,%r6950,%r2661,%r2039,%r2663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2664,%r7113,%r2659;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7117,%r2655,%r2664;
}
	// end inline asm
	mov.u32 	%r7116, %r7117;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f361, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f361;
  cvt.rn.f16.f32 high, %f361;
  mov.b32 %r7116, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7192,%r7192,%r7116;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f363, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f363;
  cvt.rn.f16.f32 high, %f363;
  mov.b32 %r7117, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7190,%r7190,%r7117;
}
	// end inline asm
	mov.u32 	%r2685, 4;
	mov.u32 	%r2696, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2683,%r6950,%r2685,%r2039,%r2696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2688,%r7112,%r2683;
}
	// end inline asm
	mov.u32 	%r2694, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2692,%r6950,%r2694,%r2039,%r2696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2697,%r7113,%r2692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7119,%r2688,%r2697;
}
	// end inline asm
	mov.u32 	%r7118, %r7119;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f365, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f365;
  cvt.rn.f16.f32 high, %f365;
  mov.b32 %r7118, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r7118;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r7119, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7188,%r7188,%r7119;
}
	// end inline asm
	mov.u32 	%r2718, 6;
	mov.u32 	%r2729, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2716,%r6950,%r2718,%r2039,%r2729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2721,%r7112,%r2716;
}
	// end inline asm
	mov.u32 	%r2727, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2725,%r6950,%r2727,%r2039,%r2729;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2730,%r7113,%r2725;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7121,%r2721,%r2730;
}
	// end inline asm
	mov.u32 	%r7120, %r7121;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f369, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f369;
  cvt.rn.f16.f32 high, %f369;
  mov.b32 %r7120, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7187,%r7187,%r7120;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f371, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f371;
  cvt.rn.f16.f32 high, %f371;
  mov.b32 %r7121, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7185,%r7185,%r7121;
}
	// end inline asm
	mov.u32 	%r2751, 8;
	mov.u32 	%r2762, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2749,%r6950,%r2751,%r2039,%r2762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2754,%r7112,%r2749;
}
	// end inline asm
	mov.u32 	%r2760, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2758,%r6950,%r2760,%r2039,%r2762;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2763,%r7113,%r2758;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7123,%r2754,%r2763;
}
	// end inline asm
	mov.u32 	%r7122, %r7123;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f373, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f373;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r7122, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7186,%r7186,%r7122;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f375, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f375;
  cvt.rn.f16.f32 high, %f375;
  mov.b32 %r7123, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7184,%r7184,%r7123;
}
	// end inline asm
	mov.u32 	%r2784, 10;
	mov.u32 	%r2795, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2782,%r6950,%r2784,%r2039,%r2795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2787,%r7112,%r2782;
}
	// end inline asm
	mov.u32 	%r2793, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2791,%r6950,%r2793,%r2039,%r2795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2796,%r7113,%r2791;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7125,%r2787,%r2796;
}
	// end inline asm
	mov.u32 	%r7124, %r7125;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f377, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f377;
  cvt.rn.f16.f32 high, %f377;
  mov.b32 %r7124, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7183,%r7183,%r7124;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r7125, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7180,%r7180,%r7125;
}
	// end inline asm
	mov.u32 	%r2817, 12;
	mov.u32 	%r2828, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2815,%r6950,%r2817,%r2039,%r2828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2820,%r7112,%r2815;
}
	// end inline asm
	mov.u32 	%r2826, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2824,%r6950,%r2826,%r2039,%r2828;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2829,%r7113,%r2824;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7127,%r2820,%r2829;
}
	// end inline asm
	mov.u32 	%r7126, %r7127;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f381, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f381;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r7126, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7182,%r7182,%r7126;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f383, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f383;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r7127, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7179,%r7179,%r7127;
}
	// end inline asm
	mov.u32 	%r2850, 14;
	mov.u32 	%r2861, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2848,%r6950,%r2850,%r2039,%r2861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2853,%r7112,%r2848;
}
	// end inline asm
	mov.u32 	%r2859, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2857,%r6950,%r2859,%r2039,%r2861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2862,%r7113,%r2857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r2853,%r2862;
}
	// end inline asm
	mov.u32 	%r7128, %r7129;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f385, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f385;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r7128, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7177,%r7177,%r7128;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f387, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f387;
  cvt.rn.f16.f32 high, %f387;
  mov.b32 %r7129, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r7129;
}
	// end inline asm
	mov.u32 	%r2883, 16;
	mov.u32 	%r2894, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2881,%r6950,%r2883,%r2039,%r2894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2886,%r7112,%r2881;
}
	// end inline asm
	mov.u32 	%r2892, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2890,%r6950,%r2892,%r2039,%r2894;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2895,%r7113,%r2890;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7131,%r2886,%r2895;
}
	// end inline asm
	mov.u32 	%r7130, %r7131;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f389, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f389;
  cvt.rn.f16.f32 high, %f389;
  mov.b32 %r7130, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7176,%r7176,%r7130;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r7131, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7173,%r7173,%r7131;
}
	// end inline asm
	mov.u32 	%r2916, 18;
	mov.u32 	%r2927, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2914,%r6950,%r2916,%r2039,%r2927;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2919,%r7112,%r2914;
}
	// end inline asm
	mov.u32 	%r2925, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2923,%r6950,%r2925,%r2039,%r2927;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2928,%r7113,%r2923;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7133,%r2919,%r2928;
}
	// end inline asm
	mov.u32 	%r7132, %r7133;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f393, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f393;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r7132, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7171,%r7171,%r7132;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f395, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f395;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r7133, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r7133;
}
	// end inline asm
	mov.u32 	%r2949, 20;
	mov.u32 	%r2960, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2947,%r6950,%r2949,%r2039,%r2960;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2952,%r7112,%r2947;
}
	// end inline asm
	mov.u32 	%r2958, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2956,%r6950,%r2958,%r2039,%r2960;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2961,%r7113,%r2956;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7135,%r2952,%r2961;
}
	// end inline asm
	mov.u32 	%r7134, %r7135;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f397, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f397;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r7134, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7169,%r7169,%r7134;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f399, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f399;
  cvt.rn.f16.f32 high, %f399;
  mov.b32 %r7135, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7167,%r7167,%r7135;
}
	// end inline asm
	mov.u32 	%r2982, 22;
	mov.u32 	%r2993, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2980,%r6950,%r2982,%r2039,%r2993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2985,%r7112,%r2980;
}
	// end inline asm
	mov.u32 	%r2991, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2989,%r6950,%r2991,%r2039,%r2993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2994,%r7113,%r2989;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7137,%r2985,%r2994;
}
	// end inline asm
	mov.u32 	%r7136, %r7137;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f401, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f401;
  cvt.rn.f16.f32 high, %f401;
  mov.b32 %r7136, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r7136;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r7137, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r7137;
}
	// end inline asm
	mov.u32 	%r3015, 24;
	mov.u32 	%r3026, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3013,%r6950,%r3015,%r2039,%r3026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3018,%r7112,%r3013;
}
	// end inline asm
	mov.u32 	%r3024, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3022,%r6950,%r3024,%r2039,%r3026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3027,%r7113,%r3022;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7139,%r3018,%r3027;
}
	// end inline asm
	mov.u32 	%r7138, %r7139;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f405, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f405;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r7138, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7164,%r7164,%r7138;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f407, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f407;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r7139, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7161,%r7161,%r7139;
}
	// end inline asm
	mov.u32 	%r3048, 26;
	mov.u32 	%r3059, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3046,%r6950,%r3048,%r2039,%r3059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3051,%r7112,%r3046;
}
	// end inline asm
	mov.u32 	%r3057, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3055,%r6950,%r3057,%r2039,%r3059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3060,%r7113,%r3055;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7141,%r3051,%r3060;
}
	// end inline asm
	mov.u32 	%r7140, %r7141;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f409, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f409;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r7140, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7159,%r7159,%r7140;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f411, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f411;
  cvt.rn.f16.f32 high, %f411;
  mov.b32 %r7141, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7156,%r7156,%r7141;
}
	// end inline asm
	mov.u32 	%r3081, 28;
	mov.u32 	%r3092, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3079,%r6950,%r3081,%r2039,%r3092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3084,%r7112,%r3079;
}
	// end inline asm
	mov.u32 	%r3090, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3088,%r6950,%r3090,%r2039,%r3092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3093,%r7113,%r3088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7143,%r3084,%r3093;
}
	// end inline asm
	mov.u32 	%r7142, %r7143;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f413, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f413;
  cvt.rn.f16.f32 high, %f413;
  mov.b32 %r7142, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7158,%r7158,%r7142;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r7143, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7155,%r7155,%r7143;
}
	// end inline asm
	mov.u32 	%r3123, 31;
	mov.u32 	%r3114, 30;
	mov.u32 	%r3125, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3112,%r6950,%r3114,%r2039,%r3125;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3117,%r7112,%r3112;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3121,%r6950,%r3123,%r2039,%r3125;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3126,%r7113,%r3121;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r3117,%r3126;
}
	// end inline asm
	mov.u32 	%r7144, %r7145;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f417, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f417;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r7144, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7151,%r7151,%r7144;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f419, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f419;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r7145, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7149,%r7149,%r7145;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7110, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r7111, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r636, %r1488;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	mov.u32 	%r2605, 0;
	// begin inline asm
	{mul.f16x2 %r2513,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r7193,%r2513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2519,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r7181,%r2519;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2525,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7183,%r7183,%r2525;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2531,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r7163,%r2531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2537,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r2537;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2543,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7150,%r7150,%r2543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2549,%r7111,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r7187,%r2549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2555,%r7111,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7168,%r7168,%r2555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2561,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7191,%r7191,%r2561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2567,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r7178,%r2567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2573,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7180,%r7180,%r2573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2579,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r7160,%r2579;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2585,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r2585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2591,%r7110,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r7148,%r2591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2597,%r7111,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r7185,%r2597;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2603,%r7111,%r2605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r2603;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2416, %r1488, -2;
	setp.ne.s32 	%p238, %r636, %r2416;
	@%p238 bra 	$L__BB0_408;

	mov.u32 	%r2509, 0;
	// begin inline asm
	{mul.f16x2 %r2417,%r7110,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r7171,%r2417;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2423,%r7110,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7153,%r7153,%r2423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2429,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r2429;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2435,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r7175,%r2435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2441,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7177,%r7177,%r2441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2447,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7157,%r7157,%r2447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2453,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7159,%r7159,%r2453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2459,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7147,%r7147,%r2459;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2465,%r7110,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r2465;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2471,%r7110,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r7152,%r2471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2477,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7188,%r7188,%r2477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2483,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7172,%r7172,%r2483;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2489,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r2489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2495,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r7154,%r2495;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2501,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r7156,%r2501;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2507,%r7111,%r2509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7146,%r7146,%r2507;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7005, %r1960;
	mov.u32 	%r7006, %r1960;
	mov.u32 	%r7196, %r1960;
	mov.u32 	%r7197, %r1960;
	mov.u32 	%r7198, %r1960;
	mov.u32 	%r7032, %r1960;
	mov.u32 	%r7200, %r1960;
	mov.u32 	%r7040, %r1960;
	mov.u32 	%r7202, %r1960;
	mov.u32 	%r7203, %r1960;
	@%p276 bra 	$L__BB0_410;

	add.s32 	%r6867, %r69, %r69;
	mul.lo.s32 	%r3145, %r1479, 320;
	add.s32 	%r3147, %r41, -1;
	mul.lo.s32 	%r3149, %r42, 320;
	mad.lo.s32 	%r3150, %r3145, %r3147, %r3149;
	add.s32 	%r3153, %r6867, -64;
	mad.lo.s32 	%r3158, %r3153, %r1948, %r1945;
	add.s32 	%r3159, %r3150, %r3158;
	shl.b32 	%r3160, %r3159, 2;
	mov.u32 	%r3161, _ZN6kernel5shmemE;
	add.s32 	%r3162, %r3161, %r3160;
	shl.b32 	%r3163, %r46, 4;
	add.s32 	%r3164, %r3162, %r3163;
	ld.shared.v4.u32 	{%r7040, %r7032, %r7006, %r7005}, [%r3164];
	shl.b32 	%r3169, %r46, 3;
	add.s32 	%r3170, %r3162, %r3169;
	ld.shared.v2.u32 	{%r7200, %r7198}, [%r3170+512];
	ld.shared.v4.u32 	{%r7203, %r7202, %r7197, %r7196}, [%r3164+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7204, %r1960;
	mov.u32 	%r7205, %r1960;
	mov.u32 	%r7206, %r1960;
	mov.u32 	%r7207, %r1960;
	mov.u32 	%r7208, %r1960;
	mov.u32 	%r7209, %r1960;
	mov.u32 	%r7210, %r1960;
	mov.u32 	%r7211, %r1960;
	mov.u32 	%r7212, %r1960;
	mov.u32 	%r7213, %r1960;
	mov.u32 	%r7214, %r1960;
	mov.u32 	%r7215, %r1960;
	@%p277 bra 	$L__BB0_413;

	not.b32 	%r6866, %r41;
	add.s32 	%r6865, %r1478, %r6866;
	mad.lo.s32 	%r3184, %r6865, 384, %r1951;
	add.s32 	%r3186, %r42, -1;
	mad.lo.s32 	%r3189, %r1946, %r3186, %r3184;
	add.s32 	%r3195, %r3189, %r1949;
	shl.b32 	%r3196, %r3195, 2;
	mov.u32 	%r3197, _ZN6kernel5shmemE;
	add.s32 	%r3198, %r3197, %r3196;
	shl.b32 	%r3199, %r46, 4;
	add.s32 	%r3200, %r3198, %r3199;
	ld.shared.v4.u32 	{%r7215, %r7214, %r7212, %r7210}, [%r3200];
	shl.b32 	%r3205, %r46, 3;
	add.s32 	%r3206, %r3198, %r3205;
	ld.shared.v2.u32 	{%r7213, %r7211}, [%r3206+512];
	ld.shared.v4.u32 	{%r7209, %r7208, %r7206, %r7204}, [%r3200+768];
	mov.u32 	%r7205, %r1960;
	mov.u32 	%r7207, %r1960;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r6853, %r3206, 512;
	ld.shared.v2.u32 	{%r7207, %r7205}, [%r6853+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r1948;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3219, %r1478, %r41;
	mul.lo.s32 	%r3222, %r69, %r42;
	mad.lo.s32 	%r3223, %r3219, 384, %r3222;
	mad.lo.s32 	%r3226, %r1946, %r1948, %r3223;
	mad.lo.s32 	%r3229, %r1944, %r1943, %r3226;
	shl.b32 	%r3230, %r3229, 2;
	mov.u32 	%r3231, _ZN6kernel5shmemE;
	add.s32 	%r3232, %r3231, %r3230;
	shl.b32 	%r3233, %r46, 4;
	add.s32 	%r3234, %r3232, %r3233;
	ld.shared.v4.u32 	{%r7229, %r7228, %r7231, %r7230}, [%r3234];

$L__BB0_416:
	shl.b32 	%r3240, %r42, 8;
	shl.b32 	%r3244, %r1479, 8;
	or.b32  	%r3245, %r3244, 128;
	add.s32 	%r3247, %r41, -1;
	mad.lo.s32 	%r3248, %r3245, %r3247, %r1951;
	add.s32 	%r3249, %r3248, %r3240;
	shl.b32 	%r3250, %r3249, 2;
	mov.u32 	%r3251, _ZN6kernel5shmemE;
	add.s32 	%r3252, %r3251, %r3250;
	setp.ne.s32 	%p281, %r42, %r1948;
	shl.b32 	%r3254, %r46, 4;
	add.s32 	%r895, %r3252, %r3254;
	ld.shared.v4.u32 	{%r7222, %r7220, %r7223, %r7221}, [%r895];
	ld.shared.v4.u32 	{%r7227, %r7226, %r7225, %r7224}, [%r895+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7229, %r7228, %r7231, %r7230}, [%r895+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	not.b32 	%r6864, %r41;
	add.s32 	%r6863, %r1478, %r6864;
	mul.lo.s32 	%r3270, %r69, %r42;
	sub.s32 	%r3271, %r3270, %r69;
	mad.lo.s32 	%r3275, %r6863, 384, %r3271;
	mad.lo.s32 	%r3278, %r1946, %r1948, %r3275;
	mad.lo.s32 	%r3281, %r1944, %r1943, %r3278;
	shl.b32 	%r3282, %r3281, 2;
	mov.u32 	%r3283, _ZN6kernel5shmemE;
	add.s32 	%r3284, %r3283, %r3282;
	shl.b32 	%r3285, %r46, 4;
	add.s32 	%r920, %r3284, %r3285;
	ld.shared.v4.u32 	{%r7245, %r7244, %r7247, %r7246}, [%r920];
	ld.shared.v4.u32 	{%r7243, %r7241, %r7239, %r7238}, [%r920+512];
	ld.shared.v4.u32 	{%r7242, %r7240, %r7237, %r7235}, [%r920+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7233, %r7232, %r7236, %r7234}, [%r920+1536];

$L__BB0_421:
	mov.u32 	%r3307, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3303,%r7080,%r434,%r2039,%r3307;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3303;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7080;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3310, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3311,%r7081,%r3310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3314,%r6951,%r3311;
}
	// end inline asm
	@%p28 bra 	$L__BB0_423;
	bra.uni 	$L__BB0_422;

$L__BB0_423:
	// begin inline asm
	{neg.f16x2 %r7248,%r7193;
}
	// end inline asm
	bra.uni 	$L__BB0_424;

$L__BB0_422:
	// begin inline asm
	{mul.f16x2 %r7248,%r6952,%r3311;
}
	// end inline asm

$L__BB0_424:
	mov.u32 	%r3327, 31;
	mov.u32 	%r3350, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3325,%r7248,%r3327,%r2039,%r3350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3330,%r3314,%r3325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3333,%r7079,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3336,%r3333,%r3330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3339,%r7082,%r3336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3342,%r7193,%r3339;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3346,%r7075,%r434,%r2039,%r3350;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3346;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7075;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3353, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3354,%r7076,%r3353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3357,%r6951,%r3354;
}
	// end inline asm
	mov.u32 	%r7249, %r7192;
	@%p28 bra 	$L__BB0_426;

	// begin inline asm
	{mul.f16x2 %r7249,%r6952,%r3354;
}
	// end inline asm

$L__BB0_426:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3368,%r7249,%r3327,%r2039,%r3350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3373,%r3357,%r3368;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3376,%r7079,%r7074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3379,%r3373,%r3376;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3382,%r7077,%r3379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3385,%r7192,%r3382;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3388,%r7080,%r7081;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3391,%r6955,%r3388;
}
	// end inline asm
	@%p28 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7250,%r7191;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7250,%r6956,%r3388;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3404, 31;
	mov.u32 	%r3406, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3402,%r7250,%r3404,%r2039,%r3406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3407,%r3391,%r3402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3410,%r7072,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3413,%r3410,%r3407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3416,%r7073,%r3413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3419,%r7191,%r3416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3422,%r7075,%r7076;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3425,%r6955,%r3422;
}
	// end inline asm
	mov.u32 	%r7251, %r7190;
	@%p28 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7251,%r6956,%r3422;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3434,%r7251,%r3404,%r2039,%r3406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3439,%r3425,%r3434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3442,%r7072,%r7069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3445,%r3439,%r3442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3448,%r7070,%r3445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3451,%r7190,%r3448;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3455,%r7066,%r434,%r2039,%r3406;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3455;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7066;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3462, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3463,%r7067,%r3462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3466,%r6951,%r3463;
}
	// end inline asm
	@%p28 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7252,%r7189;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7252,%r6952,%r3463;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3481, 31;
	mov.u32 	%r3483, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3479,%r7252,%r3481,%r2039,%r3483;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3484,%r3466,%r3479;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3487,%r7065,%r7079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3490,%r3487,%r3484;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3493,%r7068,%r3490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3496,%r7189,%r3493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3499,%r7066,%r7067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3502,%r6955,%r3499;
}
	// end inline asm
	@%p28 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r7253,%r7188;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r7253,%r6956,%r3499;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3515, 31;
	mov.u32 	%r3538, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3513,%r7253,%r3515,%r2039,%r3538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3518,%r3502,%r3513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3521,%r7063,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3524,%r3521,%r3518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3527,%r7064,%r3524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3530,%r7188,%r3527;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3534,%r7061,%r434,%r2039,%r3538;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3534;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7061;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3541, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3542,%r7062,%r3541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3545,%r6951,%r3542;
}
	// end inline asm
	@%p28 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7254,%r7187;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7254,%r6952,%r3542;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3560, 31;
	mov.u32 	%r3583, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3558,%r7254,%r3560,%r2039,%r3583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3563,%r3545,%r3558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3566,%r7060,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3569,%r3566,%r3563;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3572,%r7215,%r3569;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3575,%r7187,%r3572;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3579,%r7056,%r434,%r2039,%r3583;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3579;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7056;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3586, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3587,%r7057,%r3586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3590,%r6951,%r3587;
}
	// end inline asm
	mov.u32 	%r7255, %r7186;
	@%p28 bra 	$L__BB0_442;

	// begin inline asm
	{mul.f16x2 %r7255,%r6952,%r3587;
}
	// end inline asm

$L__BB0_442:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3601,%r7255,%r3560,%r2039,%r3583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3606,%r3590,%r3601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3609,%r7060,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3612,%r3606,%r3609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3615,%r7058,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3618,%r7186,%r3615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3621,%r7061,%r7062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3624,%r6955,%r3621;
}
	// end inline asm
	@%p28 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7256,%r7185;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7256,%r6956,%r3621;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r3637, 31;
	mov.u32 	%r3639, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3635,%r7256,%r3637,%r2039,%r3639;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3640,%r3624,%r3635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3643,%r7055,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3646,%r3643,%r3640;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3649,%r7214,%r3646;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3652,%r7185,%r3649;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3655,%r7056,%r7057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3658,%r6955,%r3655;
}
	// end inline asm
	mov.u32 	%r7257, %r7184;
	@%p28 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7257,%r6956,%r3655;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3667,%r7257,%r3637,%r2039,%r3639;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3672,%r3658,%r3667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3675,%r7055,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3678,%r3672,%r3675;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3681,%r7053,%r3678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3684,%r7184,%r3681;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3688,%r7050,%r434,%r2039,%r3639;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3688;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7050;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3695, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3696,%r7051,%r3695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3699,%r6951,%r3696;
}
	// end inline asm
	@%p28 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7258,%r7183;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7258,%r6952,%r3696;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r3714, 31;
	mov.u32 	%r3737, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3712,%r7258,%r3714,%r2039,%r3737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3717,%r3699,%r3712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3720,%r7049,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3723,%r3720,%r3717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3726,%r529,%r3723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7183,%r3726;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3733,%r7046,%r434,%r2039,%r3737;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3733;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7046;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3740, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3741,%r7047,%r3740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3744,%r6951,%r3741;
}
	// end inline asm
	mov.u32 	%r7259, %r7182;
	@%p28 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7259,%r6952,%r3741;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3755,%r7259,%r3714,%r2039,%r3737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3760,%r3744,%r3755;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3763,%r7049,%r7079;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3766,%r3760,%r3763;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3769,%r525,%r3766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7182,%r3769;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3775,%r7051,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3778,%r7047,%r7057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3781,%r3775,%r3778;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3784,%r7045,%r3781;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3787,%r7181,%r3784;
}
	// end inline asm
	selp.b32 	%r1020, %r7181, %r3787, %p28;
	// begin inline asm
	{sub.f16x2 %r3790,%r7050,%r7051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3793,%r6955,%r3790;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7260,%r7180;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7260,%r6956,%r3790;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3806, 31;
	mov.u32 	%r3808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3804,%r7260,%r3806,%r2039,%r3808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3809,%r3793,%r3804;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3812,%r7043,%r7055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3815,%r3812,%r3809;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3818,%r521,%r3815;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7107,%r7180,%r3818;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3824,%r7046,%r7047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3827,%r6955,%r3824;
}
	// end inline asm
	mov.u32 	%r7261, %r7179;
	@%p28 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7261,%r6956,%r3824;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3836,%r7261,%r3806,%r2039,%r3808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3841,%r3827,%r3836;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3844,%r7043,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3847,%r3841,%r3844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3850,%r519,%r3847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7105,%r7179,%r3850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3856,%r7050,%r7080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3859,%r7046,%r7056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3862,%r3856,%r3859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3865,%r7041,%r3862;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3868,%r7178,%r3865;
}
	// end inline asm
	selp.b32 	%r1032, %r7178, %r3868, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3872,%r7038,%r434,%r2039,%r3808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3872;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7038;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3879, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3880,%r7039,%r3879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3883,%r6951,%r3880;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7262,%r7177;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7262,%r6952,%r3880;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3898, 31;
	mov.u32 	%r3921, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3896,%r7262,%r3898,%r2039,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3901,%r3883,%r3896;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3904,%r7037,%r7049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3907,%r3904,%r3901;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3910,%r517,%r3907;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7104,%r7177,%r3910;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3917,%r7034,%r434,%r2039,%r3921;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3917;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7034;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3924, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3925,%r7035,%r3924;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3928,%r6951,%r3925;
}
	// end inline asm
	mov.u32 	%r7263, %r7176;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7263,%r6952,%r3925;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3939,%r7263,%r3898,%r2039,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3944,%r3928,%r3939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3947,%r7037,%r7065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3950,%r3944,%r3947;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3953,%r7036,%r3950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3956,%r7176,%r3953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3959,%r7039,%r7067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3962,%r7035,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3965,%r3959,%r3962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3968,%r7033,%r3965;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3971,%r7175,%r3968;
}
	// end inline asm
	selp.b32 	%r1044, %r7175, %r3971, %p28;
	// begin inline asm
	{sub.f16x2 %r3974,%r7038,%r7039;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3977,%r6955,%r3974;
}
	// end inline asm
	@%p28 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7264,%r7174;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7264,%r6956,%r3974;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r3990, 31;
	mov.u32 	%r3992, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3988,%r7264,%r3990,%r2039,%r3992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3993,%r3977,%r3988;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3996,%r7031,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3999,%r3996,%r3993;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4002,%r509,%r3999;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r7174,%r4002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4008,%r7034,%r7035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4011,%r6955,%r4008;
}
	// end inline asm
	mov.u32 	%r7265, %r7173;
	@%p28 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7265,%r6956,%r4008;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4020,%r7265,%r3990,%r2039,%r3992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4025,%r4011,%r4020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r7031,%r7063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4031,%r4025,%r4028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4034,%r7030,%r4031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4037,%r7173,%r4034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4040,%r7038,%r7066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4043,%r7034,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4046,%r4040,%r4043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4049,%r7029,%r4046;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4052,%r7172,%r4049;
}
	// end inline asm
	selp.b32 	%r1056, %r7172, %r4052, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4056,%r7027,%r434,%r2039,%r3992;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4056;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7027;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4063, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4064,%r7028,%r4063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4067,%r6951,%r4064;
}
	// end inline asm
	@%p28 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7266,%r7171;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7266,%r6952,%r4064;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4082, 31;
	mov.u32 	%r4084, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4080,%r7266,%r4082,%r2039,%r4084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4085,%r4067,%r4080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4088,%r7231,%r7037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4091,%r4088,%r4085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4094,%r7203,%r4091;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4097,%r7171,%r4094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4100,%r7027,%r7028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4103,%r6955,%r4100;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7267,%r7170;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7267,%r6956,%r4100;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4116, 31;
	mov.u32 	%r4139, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4114,%r7267,%r4116,%r2039,%r4139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4119,%r4103,%r4114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4122,%r7230,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4125,%r4122,%r4119;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4128,%r7202,%r4125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4131,%r7170,%r4128;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4135,%r7023,%r434,%r2039,%r4139;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4135;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7023;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4142, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4143,%r7024,%r4142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4146,%r6951,%r4143;
}
	// end inline asm
	mov.u32 	%r7268, %r7169;
	@%p28 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7268,%r6952,%r4143;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4157,%r7268,%r4116,%r2039,%r4139;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4162,%r4146,%r4157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4165,%r7242,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4168,%r4162,%r4165;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4171,%r7213,%r4168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r7169,%r4171;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4177,%r7243,%r7062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4180,%r7024,%r7245;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4183,%r4177,%r4180;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4186,%r7212,%r4183;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4189,%r7168,%r4186;
}
	// end inline asm
	selp.b32 	%r1074, %r7168, %r4189, %p28;
	// begin inline asm
	{sub.f16x2 %r4192,%r7023,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4195,%r6955,%r4192;
}
	// end inline asm
	mov.u32 	%r7269, %r7167;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7269,%r6956,%r4192;
}
	// end inline asm

$L__BB0_477:
	mov.u32 	%r4206, 31;
	mov.u32 	%r4244, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4204,%r7269,%r4206,%r2039,%r4244;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4209,%r4195,%r4204;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r7240,%r7055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4215,%r4209,%r4212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4218,%r7211,%r4215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7101,%r7167,%r4218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4224,%r7241,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4227,%r7023,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4230,%r4224,%r4227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4233,%r7210,%r4230;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4236,%r7166,%r4233;
}
	// end inline asm
	selp.b32 	%r1080, %r7166, %r4236, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4240,%r7019,%r434,%r2039,%r4244;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4240;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7019;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4247, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4248,%r7020,%r4247;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4251,%r6951,%r4248;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7270,%r7165;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7270,%r6952,%r4248;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4266, 31;
	mov.u32 	%r4289, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4264,%r7270,%r4266,%r2039,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4269,%r4251,%r4264;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4272,%r7018,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4275,%r4272,%r4269;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4278,%r7209,%r4275;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7100,%r7165,%r4278;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4285,%r7015,%r434,%r2039,%r4289;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4285;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7015;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4292, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4293,%r7016,%r4292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4296,%r6951,%r4293;
}
	// end inline asm
	mov.u32 	%r7271, %r7164;
	@%p28 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7271,%r6952,%r4293;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4307,%r7271,%r4266,%r2039,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4312,%r4296,%r4307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4315,%r7018,%r7049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4318,%r4312,%r4315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4321,%r7048,%r4318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r7164,%r4321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4327,%r7020,%r7051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4330,%r7016,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4333,%r4327,%r4330;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4336,%r491,%r4333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4339,%r7163,%r4336;
}
	// end inline asm
	selp.b32 	%r7096, %r7163, %r4339, %p28;
	// begin inline asm
	{sub.f16x2 %r4342,%r7019,%r7020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4345,%r6955,%r4342;
}
	// end inline asm
	@%p28 bra 	$L__BB0_484;
	bra.uni 	$L__BB0_483;

$L__BB0_484:
	// begin inline asm
	{neg.f16x2 %r7272,%r7162;
}
	// end inline asm
	bra.uni 	$L__BB0_485;

$L__BB0_483:
	// begin inline asm
	{mul.f16x2 %r7272,%r6956,%r4342;
}
	// end inline asm

$L__BB0_485:
	mov.u32 	%r4358, 31;
	mov.u32 	%r4360, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4356,%r7272,%r4358,%r2039,%r4360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4361,%r4345,%r4356;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4364,%r7013,%r7240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4367,%r4364,%r4361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4370,%r7208,%r4367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7099,%r7162,%r4370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4376,%r7015,%r7016;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4379,%r6955,%r4376;
}
	// end inline asm
	mov.u32 	%r7273, %r7161;
	@%p28 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7273,%r6956,%r4376;
}
	// end inline asm

$L__BB0_487:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4388,%r7273,%r4358,%r2039,%r4360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4393,%r4379,%r4388;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r7013,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4399,%r4393,%r4396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4402,%r7042,%r4399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7097,%r7161,%r4402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4408,%r7019,%r7050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4411,%r7015,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4414,%r4408,%r4411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4417,%r488,%r4414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4420,%r7160,%r4417;
}
	// end inline asm
	selp.b32 	%r7095, %r7160, %r4420, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4424,%r7009,%r434,%r2039,%r4360;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4424;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7009;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4431, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4432,%r7010,%r4431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4435,%r6951,%r4432;
}
	// end inline asm
	@%p28 bra 	$L__BB0_489;
	bra.uni 	$L__BB0_488;

$L__BB0_489:
	// begin inline asm
	{neg.f16x2 %r7274,%r7159;
}
	// end inline asm
	bra.uni 	$L__BB0_490;

$L__BB0_488:
	// begin inline asm
	{mul.f16x2 %r7274,%r6952,%r4432;
}
	// end inline asm

$L__BB0_490:
	mov.u32 	%r4450, 31;
	mov.u32 	%r4473, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4448,%r7274,%r4450,%r2039,%r4473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4453,%r4435,%r4448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4456,%r7227,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4459,%r4456,%r4453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4462,%r7040,%r4459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7094,%r7159,%r4462;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4469,%r7007,%r434,%r2039,%r4473;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4469;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7007;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4476, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4477,%r7008,%r4476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4480,%r6951,%r4477;
}
	// end inline asm
	mov.u32 	%r7275, %r7158;
	@%p28 bra 	$L__BB0_492;

	// begin inline asm
	{mul.f16x2 %r7275,%r6952,%r4477;
}
	// end inline asm

$L__BB0_492:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4491,%r7275,%r4450,%r2039,%r4473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4496,%r4480,%r4491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4499,%r7227,%r7037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4502,%r4496,%r4499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4505,%r7200,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r7158,%r4505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4511,%r7010,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4514,%r7008,%r7016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4517,%r4511,%r4514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4520,%r483,%r4517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4523,%r7157,%r4520;
}
	// end inline asm
	selp.b32 	%r7090, %r7157, %r4523, %p28;
	// begin inline asm
	{sub.f16x2 %r4526,%r7009,%r7010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4529,%r6955,%r4526;
}
	// end inline asm
	@%p28 bra 	$L__BB0_494;
	bra.uni 	$L__BB0_493;

$L__BB0_494:
	// begin inline asm
	{neg.f16x2 %r7276,%r7156;
}
	// end inline asm
	bra.uni 	$L__BB0_495;

$L__BB0_493:
	// begin inline asm
	{mul.f16x2 %r7276,%r6956,%r4526;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4542, 31;
	mov.u32 	%r4544, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4540,%r7276,%r4542,%r2039,%r4544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4545,%r4529,%r4540;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4548,%r7226,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4551,%r4548,%r4545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4554,%r7032,%r4551;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7093,%r7156,%r4554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4560,%r7007,%r7008;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4563,%r6955,%r4560;
}
	// end inline asm
	mov.u32 	%r7277, %r7155;
	@%p28 bra 	$L__BB0_497;

	// begin inline asm
	{mul.f16x2 %r7277,%r6956,%r4560;
}
	// end inline asm

$L__BB0_497:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4572,%r7277,%r4542,%r2039,%r4544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4577,%r4563,%r4572;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r7226,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4583,%r4577,%r4580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4586,%r7198,%r4583;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7091,%r7155,%r4586;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4592,%r7009,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4595,%r7007,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4598,%r4592,%r4595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4601,%r482,%r4598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4604,%r7154,%r4601;
}
	// end inline asm
	selp.b32 	%r7089, %r7154, %r4604, %p28;
	// begin inline asm
	{sub.f16x2 %r4607,%r7225,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4610,%r7229,%r7008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4613,%r4607,%r4610;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4616,%r7197,%r4613;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4619,%r7153,%r4616;
}
	// end inline asm
	selp.b32 	%r1129, %r7153, %r4619, %p28;
	// begin inline asm
	{sub.f16x2 %r4622,%r7224,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4625,%r7228,%r7007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4628,%r4622,%r4625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4631,%r7196,%r4628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4634,%r7152,%r4631;
}
	// end inline asm
	selp.b32 	%r1130, %r7152, %r4634, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4638,%r7001,%r434,%r2039,%r4544;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4638;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7001;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4645, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4646,%r7002,%r4645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4649,%r6951,%r4646;
}
	// end inline asm
	mov.u32 	%r7278, %r7151;
	@%p28 bra 	$L__BB0_499;

	// begin inline asm
	{mul.f16x2 %r7278,%r6952,%r4646;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4662, 31;
	mov.u32 	%r4664, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4660,%r7278,%r4662,%r2039,%r4664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4665,%r4649,%r4660;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4668,%r7236,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4671,%r4665,%r4668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4674,%r7207,%r4671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7088,%r7151,%r4674;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4680,%r7237,%r7020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4683,%r7002,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4686,%r4680,%r4683;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4689,%r7206,%r4686;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4692,%r7150,%r4689;
}
	// end inline asm
	selp.b32 	%r7086, %r7150, %r4692, %p28;
	// begin inline asm
	{sub.f16x2 %r4695,%r7001,%r7002;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4698,%r6955,%r4695;
}
	// end inline asm
	mov.u32 	%r7279, %r7149;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7279,%r6956,%r4695;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4707,%r7279,%r4662,%r2039,%r4664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4712,%r4698,%r4707;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4715,%r7234,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4718,%r4712,%r4715;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4721,%r7205,%r4718;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7087,%r7149,%r4721;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4727,%r7235,%r7019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4730,%r7001,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4733,%r4727,%r4730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4736,%r7204,%r4733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4739,%r7148,%r4736;
}
	// end inline asm
	selp.b32 	%r7085, %r7148, %r4739, %p28;
	// begin inline asm
	{sub.f16x2 %r4742,%r7222,%r7010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4745,%r7223,%r7002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4748,%r4742,%r4745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4751,%r7006,%r4748;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4754,%r7147,%r4751;
}
	// end inline asm
	selp.b32 	%r7084, %r7147, %r4754, %p28;
	// begin inline asm
	{sub.f16x2 %r4757,%r7220,%r7009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4760,%r7221,%r7001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4763,%r4757,%r4760;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4766,%r7005,%r4763;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4769,%r7146,%r4766;
}
	// end inline asm
	selp.b32 	%r7083, %r7146, %r4769, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd282, [%rd1+184];
	cvta.to.global.u64 	%rd27, %rd282;
	add.s32 	%r4774, %r1492, -2;
	setp.lt.s32 	%p317, %r635, %r4774;
	add.s32 	%r4775, %r1493, 3;
	setp.ge.s32 	%p318, %r635, %r4775;
	or.pred  	%p319, %p317, %p318;
	add.s32 	%r4776, %r1494, -2;
	setp.lt.s32 	%p320, %r636, %r4776;
	or.pred  	%p321, %p319, %p320;
	add.s32 	%r4777, %r1495, 2;
	setp.ge.s32 	%p322, %r636, %r4777;
	or.pred  	%p323, %p322, %p321;
	setp.lt.s32 	%p324, %r637, %r1489;
	or.pred  	%p325, %p324, %p323;
	mad.lo.s32 	%r4778, %r1491, %r1490, %r1489;
	setp.ge.s32 	%p326, %r637, %r4778;
	or.pred  	%p327, %p325, %p326;
	@%p327 bra 	$L__BB0_743;

	sub.s32 	%r1145, %r637, %r1489;
	rem.s32 	%r4779, %r1145, %r1490;
	setp.ne.s32 	%p328, %r4779, 0;
	@%p328 bra 	$L__BB0_743;

	div.s32 	%r4780, %r1145, %r1490;
	mov.u32 	%r4781, 8;
	sub.s32 	%r4782, %r4781, %r1492;
	add.s32 	%r4783, %r4782, %r1493;
	mul.lo.s32 	%r4784, %r4780, %r4783;
	mov.u32 	%r4785, 4;
	sub.s32 	%r4786, %r4785, %r1492;
	add.s32 	%r1146, %r4786, %r635;
	sub.s32 	%r4787, %r4785, %r1494;
	add.s32 	%r1147, %r4787, %r636;
	mul.lo.s32 	%r1148, %r4784, 3;
	add.s32 	%r4788, %r1146, %r1148;
	add.s32 	%r4789, %r4788, -2;
	sub.s32 	%r4790, %r4781, %r1494;
	add.s32 	%r4791, %r4790, %r1495;
	mul.lo.s32 	%r1149, %r4789, %r4791;
	add.s32 	%r4792, %r1147, %r1149;
	mul.lo.s32 	%r4793, %r4792, %r58;
	sub.s32 	%r1150, %r4793, %r1496;
	@%p28 bra 	$L__BB0_508;

	not.pred 	%p330, %p24;
	@%p330 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3342;
  cvt.f32.f16 %f420, low;}

	// end inline asm
	add.s32 	%r4795, %r1150, %r400;
	mul.wide.s32 	%rd283, %r4795, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f420;

$L__BB0_506:
	not.pred 	%p331, %p26;
	@%p331 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3342;
  cvt.f32.f16 %f421, high;}

	// end inline asm
	add.s32 	%r4797, %r1150, %r401;
	mul.wide.s32 	%rd285, %r4797, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f421;

$L__BB0_508:
	@%p28 bra 	$L__BB0_513;

	not.pred 	%p333, %p25;
	@%p333 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3419;
  cvt.f32.f16 %f422, low;}

	// end inline asm
	add.s32 	%r4799, %r1150, %r414;
	mul.wide.s32 	%rd287, %r4799, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f422;

$L__BB0_511:
	not.pred 	%p334, %p27;
	@%p334 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3419;
  cvt.f32.f16 %f423, high;}

	// end inline asm
	add.s32 	%r4801, %r1150, %r415;
	mul.wide.s32 	%rd289, %r4801, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f423;

$L__BB0_513:
	mov.u32 	%r4802, 8;
	sub.s32 	%r4803, %r4802, %r1492;
	add.s32 	%r4804, %r4803, %r1493;
	add.s32 	%r1151, %r1148, %r4804;
	add.s32 	%r4805, %r1146, %r1151;
	add.s32 	%r4806, %r4805, -2;
	sub.s32 	%r4807, %r4802, %r1494;
	add.s32 	%r4808, %r4807, %r1495;
	mad.lo.s32 	%r4809, %r4806, %r4808, %r1147;
	mul.lo.s32 	%r4810, %r4809, %r58;
	sub.s32 	%r1152, %r4810, %r1496;
	@%p28 bra 	$L__BB0_518;

	not.pred 	%p336, %p24;
	@%p336 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3385;
  cvt.f32.f16 %f424, low;}

	// end inline asm
	add.s32 	%r4812, %r1152, %r400;
	mul.wide.s32 	%rd291, %r4812, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f424;

$L__BB0_516:
	not.pred 	%p337, %p26;
	@%p337 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3385;
  cvt.f32.f16 %f425, high;}

	// end inline asm
	add.s32 	%r4814, %r1152, %r401;
	mul.wide.s32 	%rd293, %r4814, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f425;

$L__BB0_518:
	@%p28 bra 	$L__BB0_523;

	not.pred 	%p339, %p25;
	@%p339 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3451;
  cvt.f32.f16 %f426, low;}

	// end inline asm
	add.s32 	%r4816, %r1152, %r414;
	mul.wide.s32 	%rd295, %r4816, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f426;

$L__BB0_521:
	not.pred 	%p340, %p27;
	@%p340 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3451;
  cvt.f32.f16 %f427, high;}

	// end inline asm
	add.s32 	%r4818, %r1152, %r415;
	mul.wide.s32 	%rd297, %r4818, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f427;

$L__BB0_523:
	add.s32 	%r1153, %r1147, 1;
	add.s32 	%r4819, %r1153, %r1149;
	mul.lo.s32 	%r4820, %r4819, %r58;
	sub.s32 	%r1154, %r4820, %r1496;
	@%p28 bra 	$L__BB0_528;

	not.pred 	%p342, %p24;
	@%p342 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3496;
  cvt.f32.f16 %f428, low;}

	// end inline asm
	add.s32 	%r4822, %r1154, %r400;
	mul.wide.s32 	%rd299, %r4822, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f428;

$L__BB0_526:
	not.pred 	%p343, %p26;
	@%p343 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3496;
  cvt.f32.f16 %f429, high;}

	// end inline asm
	add.s32 	%r4824, %r1154, %r401;
	mul.wide.s32 	%rd301, %r4824, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f429;

$L__BB0_528:
	@%p28 bra 	$L__BB0_533;

	not.pred 	%p345, %p25;
	@%p345 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3530;
  cvt.f32.f16 %f430, low;}

	// end inline asm
	add.s32 	%r4826, %r1154, %r414;
	mul.wide.s32 	%rd303, %r4826, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f430;

$L__BB0_531:
	not.pred 	%p346, %p27;
	@%p346 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3530;
  cvt.f32.f16 %f431, high;}

	// end inline asm
	add.s32 	%r4828, %r1154, %r415;
	mul.wide.s32 	%rd305, %r4828, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f431;

$L__BB0_533:
	add.s32 	%r1155, %r1146, -1;
	add.s32 	%r4829, %r1155, %r1148;
	mov.u32 	%r4830, 8;
	sub.s32 	%r4831, %r4830, %r1494;
	add.s32 	%r4832, %r4831, %r1495;
	mul.lo.s32 	%r1156, %r4829, %r4832;
	add.s32 	%r1157, %r1147, -1;
	add.s32 	%r4833, %r1157, %r1156;
	mul.lo.s32 	%r4834, %r4833, %r58;
	sub.s32 	%r1158, %r4834, %r1496;
	@%p28 bra 	$L__BB0_538;

	not.pred 	%p348, %p24;
	@%p348 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3575;
  cvt.f32.f16 %f432, low;}

	// end inline asm
	add.s32 	%r4836, %r1158, %r400;
	mul.wide.s32 	%rd307, %r4836, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f432;

$L__BB0_536:
	not.pred 	%p349, %p26;
	@%p349 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3575;
  cvt.f32.f16 %f433, high;}

	// end inline asm
	add.s32 	%r4838, %r1158, %r401;
	mul.wide.s32 	%rd309, %r4838, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f433;

$L__BB0_538:
	@%p28 bra 	$L__BB0_543;

	not.pred 	%p351, %p25;
	@%p351 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3652;
  cvt.f32.f16 %f434, low;}

	// end inline asm
	add.s32 	%r4840, %r1158, %r414;
	mul.wide.s32 	%rd311, %r4840, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f434;

$L__BB0_541:
	not.pred 	%p352, %p27;
	@%p352 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3652;
  cvt.f32.f16 %f435, high;}

	// end inline asm
	add.s32 	%r4842, %r1158, %r415;
	mul.wide.s32 	%rd313, %r4842, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f435;

$L__BB0_543:
	mov.u32 	%r4843, 8;
	sub.s32 	%r4844, %r4843, %r1494;
	add.s32 	%r4845, %r4844, %r1495;
	add.s32 	%r4846, %r1155, %r1151;
	mul.lo.s32 	%r1159, %r4846, %r4845;
	add.s32 	%r4847, %r1157, %r1159;
	mul.lo.s32 	%r4848, %r4847, %r58;
	sub.s32 	%r1160, %r4848, %r1496;
	@%p28 bra 	$L__BB0_548;

	not.pred 	%p354, %p24;
	@%p354 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3618;
  cvt.f32.f16 %f436, low;}

	// end inline asm
	add.s32 	%r4850, %r1160, %r400;
	mul.wide.s32 	%rd315, %r4850, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f436;

$L__BB0_546:
	not.pred 	%p355, %p26;
	@%p355 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3618;
  cvt.f32.f16 %f437, high;}

	// end inline asm
	add.s32 	%r4852, %r1160, %r401;
	mul.wide.s32 	%rd317, %r4852, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f437;

$L__BB0_548:
	@%p28 bra 	$L__BB0_553;

	not.pred 	%p357, %p25;
	@%p357 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3684;
  cvt.f32.f16 %f438, low;}

	// end inline asm
	add.s32 	%r4854, %r1160, %r414;
	mul.wide.s32 	%rd319, %r4854, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f438;

$L__BB0_551:
	not.pred 	%p358, %p27;
	@%p358 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3684;
  cvt.f32.f16 %f439, high;}

	// end inline asm
	add.s32 	%r4856, %r1160, %r415;
	mul.wide.s32 	%rd321, %r4856, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f439;

$L__BB0_553:
	add.s32 	%r4857, %r1147, %r1156;
	mul.lo.s32 	%r4858, %r4857, %r58;
	sub.s32 	%r1161, %r4858, %r1496;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p360, %p24;
	@%p360 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f440, low;}

	// end inline asm
	add.s32 	%r4860, %r1161, %r400;
	mul.wide.s32 	%rd323, %r4860, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f440;

$L__BB0_556:
	not.pred 	%p361, %p26;
	@%p361 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f441, high;}

	// end inline asm
	add.s32 	%r4862, %r1161, %r401;
	mul.wide.s32 	%rd325, %r4862, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f441;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p363, %p25;
	@%p363 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f442, low;}

	// end inline asm
	add.s32 	%r4864, %r1161, %r414;
	mul.wide.s32 	%rd327, %r4864, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f442;

$L__BB0_561:
	not.pred 	%p364, %p27;
	@%p364 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f443, high;}

	// end inline asm
	add.s32 	%r4866, %r1161, %r415;
	mul.wide.s32 	%rd329, %r4866, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f443;

$L__BB0_563:
	add.s32 	%r4867, %r1147, %r1159;
	mul.lo.s32 	%r4868, %r4867, %r58;
	sub.s32 	%r1162, %r4868, %r1496;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p366, %p24;
	@%p366 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f444, low;}

	// end inline asm
	add.s32 	%r4870, %r1162, %r400;
	mul.wide.s32 	%rd331, %r4870, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f444;

$L__BB0_566:
	not.pred 	%p367, %p26;
	@%p367 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f445, high;}

	// end inline asm
	add.s32 	%r4872, %r1162, %r401;
	mul.wide.s32 	%rd333, %r4872, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f445;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p369, %p25;
	@%p369 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f446, low;}

	// end inline asm
	add.s32 	%r4874, %r1162, %r414;
	mul.wide.s32 	%rd335, %r4874, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f446;

$L__BB0_571:
	not.pred 	%p370, %p27;
	@%p370 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f447, high;}

	// end inline asm
	add.s32 	%r4876, %r1162, %r415;
	mul.wide.s32 	%rd337, %r4876, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f447;

$L__BB0_573:
	mov.u32 	%r4877, 8;
	sub.s32 	%r4878, %r4877, %r1492;
	add.s32 	%r4879, %r4878, %r1493;
	add.s32 	%r1163, %r1151, %r4879;
	add.s32 	%r4880, %r1155, %r1163;
	sub.s32 	%r4881, %r4877, %r1494;
	add.s32 	%r4882, %r4881, %r1495;
	mul.lo.s32 	%r1164, %r4880, %r4882;
	add.s32 	%r4883, %r1147, %r1164;
	mul.lo.s32 	%r4884, %r4883, %r58;
	sub.s32 	%r1165, %r4884, %r1496;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p372, %p24;
	@%p372 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1020;
  cvt.f32.f16 %f448, low;}

	// end inline asm
	add.s32 	%r4886, %r1165, %r400;
	mul.wide.s32 	%rd339, %r4886, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f448;

$L__BB0_576:
	not.pred 	%p373, %p26;
	@%p373 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1020;
  cvt.f32.f16 %f449, high;}

	// end inline asm
	add.s32 	%r4888, %r1165, %r401;
	mul.wide.s32 	%rd341, %r4888, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f449;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p375, %p25;
	@%p375 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1032;
  cvt.f32.f16 %f450, low;}

	// end inline asm
	add.s32 	%r4890, %r1165, %r414;
	mul.wide.s32 	%rd343, %r4890, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f450;

$L__BB0_581:
	not.pred 	%p376, %p27;
	@%p376 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1032;
  cvt.f32.f16 %f451, high;}

	// end inline asm
	add.s32 	%r4892, %r1165, %r415;
	mul.wide.s32 	%rd345, %r4892, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f451;

$L__BB0_583:
	add.s32 	%r4893, %r1153, %r1156;
	mul.lo.s32 	%r4894, %r4893, %r58;
	sub.s32 	%r1166, %r4894, %r1496;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p378, %p24;
	@%p378 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f452, low;}

	// end inline asm
	add.s32 	%r4896, %r1166, %r400;
	mul.wide.s32 	%rd347, %r4896, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f452;

$L__BB0_586:
	not.pred 	%p379, %p26;
	@%p379 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f453, high;}

	// end inline asm
	add.s32 	%r4898, %r1166, %r401;
	mul.wide.s32 	%rd349, %r4898, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f453;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p381, %p25;
	@%p381 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f454, low;}

	// end inline asm
	add.s32 	%r4900, %r1166, %r414;
	mul.wide.s32 	%rd351, %r4900, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f454;

$L__BB0_591:
	not.pred 	%p382, %p27;
	@%p382 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f455, high;}

	// end inline asm
	add.s32 	%r4902, %r1166, %r415;
	mul.wide.s32 	%rd353, %r4902, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f455;

$L__BB0_593:
	add.s32 	%r4903, %r1153, %r1159;
	mul.lo.s32 	%r4904, %r4903, %r58;
	sub.s32 	%r1167, %r4904, %r1496;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p384, %p24;
	@%p384 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f456, low;}

	// end inline asm
	add.s32 	%r4906, %r1167, %r400;
	mul.wide.s32 	%rd355, %r4906, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f456;

$L__BB0_596:
	not.pred 	%p385, %p26;
	@%p385 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3956;
  cvt.f32.f16 %f457, high;}

	// end inline asm
	add.s32 	%r4908, %r1167, %r401;
	mul.wide.s32 	%rd357, %r4908, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f457;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p387, %p25;
	@%p387 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4037;
  cvt.f32.f16 %f458, low;}

	// end inline asm
	add.s32 	%r4910, %r1167, %r414;
	mul.wide.s32 	%rd359, %r4910, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f458;

$L__BB0_601:
	not.pred 	%p388, %p27;
	@%p388 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4037;
  cvt.f32.f16 %f459, high;}

	// end inline asm
	add.s32 	%r4912, %r1167, %r415;
	mul.wide.s32 	%rd361, %r4912, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f459;

$L__BB0_603:
	add.s32 	%r4913, %r1153, %r1164;
	mul.lo.s32 	%r4914, %r4913, %r58;
	sub.s32 	%r1168, %r4914, %r1496;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p390, %p24;
	@%p390 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1044;
  cvt.f32.f16 %f460, low;}

	// end inline asm
	add.s32 	%r4916, %r1168, %r400;
	mul.wide.s32 	%rd363, %r4916, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f460;

$L__BB0_606:
	not.pred 	%p391, %p26;
	@%p391 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1044;
  cvt.f32.f16 %f461, high;}

	// end inline asm
	add.s32 	%r4918, %r1168, %r401;
	mul.wide.s32 	%rd365, %r4918, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f461;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p393, %p25;
	@%p393 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1056;
  cvt.f32.f16 %f462, low;}

	// end inline asm
	add.s32 	%r4920, %r1168, %r414;
	mul.wide.s32 	%rd367, %r4920, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f462;

$L__BB0_611:
	not.pred 	%p394, %p27;
	@%p394 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1056;
  cvt.f32.f16 %f463, high;}

	// end inline asm
	add.s32 	%r4922, %r1168, %r415;
	mul.wide.s32 	%rd369, %r4922, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f463;

$L__BB0_613:
	add.s32 	%r1169, %r1147, 2;
	add.s32 	%r4923, %r1169, %r1156;
	mul.lo.s32 	%r4924, %r4923, %r58;
	sub.s32 	%r1170, %r4924, %r1496;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p396, %p24;
	@%p396 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4097;
  cvt.f32.f16 %f464, low;}

	// end inline asm
	add.s32 	%r4926, %r1170, %r400;
	mul.wide.s32 	%rd371, %r4926, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f464;

$L__BB0_616:
	not.pred 	%p397, %p26;
	@%p397 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4097;
  cvt.f32.f16 %f465, high;}

	// end inline asm
	add.s32 	%r4928, %r1170, %r401;
	mul.wide.s32 	%rd373, %r4928, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f465;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p399, %p25;
	@%p399 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4131;
  cvt.f32.f16 %f466, low;}

	// end inline asm
	add.s32 	%r4930, %r1170, %r414;
	mul.wide.s32 	%rd375, %r4930, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f466;

$L__BB0_621:
	not.pred 	%p400, %p27;
	@%p400 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4131;
  cvt.f32.f16 %f467, high;}

	// end inline asm
	add.s32 	%r4932, %r1170, %r415;
	mul.wide.s32 	%rd377, %r4932, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f467;

$L__BB0_623:
	mov.u32 	%r4933, 8;
	sub.s32 	%r4934, %r4933, %r1494;
	add.s32 	%r4935, %r4934, %r1495;
	mul.lo.s32 	%r1171, %r4805, %r4935;
	add.s32 	%r4937, %r1157, %r1171;
	mul.lo.s32 	%r4938, %r4937, %r58;
	sub.s32 	%r1172, %r4938, %r1496;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p402, %p24;
	@%p402 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f468, low;}

	// end inline asm
	add.s32 	%r4940, %r1172, %r400;
	mul.wide.s32 	%rd379, %r4940, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f468;

$L__BB0_626:
	not.pred 	%p403, %p26;
	@%p403 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f469, high;}

	// end inline asm
	add.s32 	%r4942, %r1172, %r401;
	mul.wide.s32 	%rd381, %r4942, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f469;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p405, %p25;
	@%p405 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f470, low;}

	// end inline asm
	add.s32 	%r4944, %r1172, %r414;
	mul.wide.s32 	%rd383, %r4944, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f470;

$L__BB0_631:
	not.pred 	%p406, %p27;
	@%p406 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f471, high;}

	// end inline asm
	add.s32 	%r4946, %r1172, %r415;
	mul.wide.s32 	%rd385, %r4946, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f471;

$L__BB0_633:
	mov.u32 	%r4947, 8;
	sub.s32 	%r4948, %r4947, %r1494;
	add.s32 	%r4949, %r4948, %r1495;
	add.s32 	%r4950, %r1146, %r1163;
	mul.lo.s32 	%r1173, %r4950, %r4949;
	add.s32 	%r4951, %r1157, %r1173;
	mul.lo.s32 	%r4952, %r4951, %r58;
	sub.s32 	%r1174, %r4952, %r1496;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p408, %p24;
	@%p408 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1074;
  cvt.f32.f16 %f472, low;}

	// end inline asm
	add.s32 	%r4954, %r1174, %r400;
	mul.wide.s32 	%rd387, %r4954, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f472;

$L__BB0_636:
	not.pred 	%p409, %p26;
	@%p409 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1074;
  cvt.f32.f16 %f473, high;}

	// end inline asm
	add.s32 	%r4956, %r1174, %r401;
	mul.wide.s32 	%rd389, %r4956, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f473;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p411, %p25;
	@%p411 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1080;
  cvt.f32.f16 %f474, low;}

	// end inline asm
	add.s32 	%r4958, %r1174, %r414;
	mul.wide.s32 	%rd391, %r4958, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f474;

$L__BB0_641:
	not.pred 	%p412, %p27;
	@%p412 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1080;
  cvt.f32.f16 %f475, high;}

	// end inline asm
	add.s32 	%r4960, %r1174, %r415;
	mul.wide.s32 	%rd393, %r4960, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f475;

$L__BB0_643:
	mov.u32 	%r4961, 8;
	sub.s32 	%r4962, %r4961, %r1494;
	add.s32 	%r4963, %r4962, %r1495;
	mul.lo.s32 	%r1175, %r4788, %r4963;
	add.s32 	%r4965, %r1147, %r1175;
	mul.lo.s32 	%r4966, %r4965, %r58;
	sub.s32 	%r1176, %r4966, %r1496;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p414, %p24;
	@%p414 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f476, low;}

	// end inline asm
	add.s32 	%r4968, %r1176, %r400;
	mul.wide.s32 	%rd395, %r4968, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f476;

$L__BB0_646:
	not.pred 	%p415, %p26;
	@%p415 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f477, high;}

	// end inline asm
	add.s32 	%r4970, %r1176, %r401;
	mul.wide.s32 	%rd397, %r4970, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f477;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p417, %p25;
	@%p417 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f478, low;}

	// end inline asm
	add.s32 	%r4972, %r1176, %r414;
	mul.wide.s32 	%rd399, %r4972, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f478;

$L__BB0_651:
	not.pred 	%p418, %p27;
	@%p418 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f479, high;}

	// end inline asm
	add.s32 	%r4974, %r1176, %r415;
	mul.wide.s32 	%rd401, %r4974, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f479;

$L__BB0_653:
	add.s32 	%r4975, %r1147, %r1171;
	mul.lo.s32 	%r4976, %r4975, %r58;
	sub.s32 	%r1177, %r4976, %r1496;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p420, %p24;
	@%p420 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f480, low;}

	// end inline asm
	add.s32 	%r4978, %r1177, %r400;
	mul.wide.s32 	%rd403, %r4978, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f480;

$L__BB0_656:
	not.pred 	%p421, %p26;
	@%p421 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f481, high;}

	// end inline asm
	add.s32 	%r4980, %r1177, %r401;
	mul.wide.s32 	%rd405, %r4980, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f481;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p423, %p25;
	@%p423 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7097;
  cvt.f32.f16 %f482, low;}

	// end inline asm
	add.s32 	%r4982, %r1177, %r414;
	mul.wide.s32 	%rd407, %r4982, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f482;

$L__BB0_661:
	not.pred 	%p424, %p27;
	@%p424 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7097;
  cvt.f32.f16 %f483, high;}

	// end inline asm
	add.s32 	%r4984, %r1177, %r415;
	mul.wide.s32 	%rd409, %r4984, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f483;

$L__BB0_663:
	add.s32 	%r4985, %r1147, %r1173;
	mul.lo.s32 	%r4986, %r4985, %r58;
	sub.s32 	%r1178, %r4986, %r1496;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p426, %p24;
	@%p426 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7096;
  cvt.f32.f16 %f484, low;}

	// end inline asm
	add.s32 	%r4988, %r1178, %r400;
	mul.wide.s32 	%rd411, %r4988, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f484;

$L__BB0_666:
	not.pred 	%p427, %p26;
	@%p427 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7096;
  cvt.f32.f16 %f485, high;}

	// end inline asm
	add.s32 	%r4990, %r1178, %r401;
	mul.wide.s32 	%rd413, %r4990, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f485;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p429, %p25;
	@%p429 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7095;
  cvt.f32.f16 %f486, low;}

	// end inline asm
	add.s32 	%r4992, %r1178, %r414;
	mul.wide.s32 	%rd415, %r4992, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f486;

$L__BB0_671:
	not.pred 	%p430, %p27;
	@%p430 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7095;
  cvt.f32.f16 %f487, high;}

	// end inline asm
	add.s32 	%r4994, %r1178, %r415;
	mul.wide.s32 	%rd417, %r4994, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f487;

$L__BB0_673:
	add.s32 	%r4995, %r1153, %r1175;
	mul.lo.s32 	%r4996, %r4995, %r58;
	sub.s32 	%r1179, %r4996, %r1496;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p432, %p24;
	@%p432 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7094;
  cvt.f32.f16 %f488, low;}

	// end inline asm
	add.s32 	%r4998, %r1179, %r400;
	mul.wide.s32 	%rd419, %r4998, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f488;

$L__BB0_676:
	not.pred 	%p433, %p26;
	@%p433 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7094;
  cvt.f32.f16 %f489, high;}

	// end inline asm
	add.s32 	%r5000, %r1179, %r401;
	mul.wide.s32 	%rd421, %r5000, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f489;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p435, %p25;
	@%p435 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7093;
  cvt.f32.f16 %f490, low;}

	// end inline asm
	add.s32 	%r5002, %r1179, %r414;
	mul.wide.s32 	%rd423, %r5002, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f490;

$L__BB0_681:
	not.pred 	%p436, %p27;
	@%p436 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7093;
  cvt.f32.f16 %f491, high;}

	// end inline asm
	add.s32 	%r5004, %r1179, %r415;
	mul.wide.s32 	%rd425, %r5004, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f491;

$L__BB0_683:
	add.s32 	%r5005, %r1153, %r1171;
	mul.lo.s32 	%r5006, %r5005, %r58;
	sub.s32 	%r1180, %r5006, %r1496;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p438, %p24;
	@%p438 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7092;
  cvt.f32.f16 %f492, low;}

	// end inline asm
	add.s32 	%r5008, %r1180, %r400;
	mul.wide.s32 	%rd427, %r5008, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f492;

$L__BB0_686:
	not.pred 	%p439, %p26;
	@%p439 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7092;
  cvt.f32.f16 %f493, high;}

	// end inline asm
	add.s32 	%r5010, %r1180, %r401;
	mul.wide.s32 	%rd429, %r5010, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f493;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p441, %p25;
	@%p441 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7091;
  cvt.f32.f16 %f494, low;}

	// end inline asm
	add.s32 	%r5012, %r1180, %r414;
	mul.wide.s32 	%rd431, %r5012, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f494;

$L__BB0_691:
	not.pred 	%p442, %p27;
	@%p442 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7091;
  cvt.f32.f16 %f495, high;}

	// end inline asm
	add.s32 	%r5014, %r1180, %r415;
	mul.wide.s32 	%rd433, %r5014, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f495;

$L__BB0_693:
	add.s32 	%r5015, %r1153, %r1173;
	mul.lo.s32 	%r5016, %r5015, %r58;
	sub.s32 	%r1181, %r5016, %r1496;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p444, %p24;
	@%p444 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7090;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r5018, %r1181, %r400;
	mul.wide.s32 	%rd435, %r5018, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f496;

$L__BB0_696:
	not.pred 	%p445, %p26;
	@%p445 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7090;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r5020, %r1181, %r401;
	mul.wide.s32 	%rd437, %r5020, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f497;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p447, %p25;
	@%p447 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7089;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r5022, %r1181, %r414;
	mul.wide.s32 	%rd439, %r5022, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f498;

$L__BB0_701:
	not.pred 	%p448, %p27;
	@%p448 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7089;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r5024, %r1181, %r415;
	mul.wide.s32 	%rd441, %r5024, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f499;

$L__BB0_703:
	add.s32 	%r5025, %r1169, %r1173;
	mul.lo.s32 	%r5026, %r5025, %r58;
	sub.s32 	%r1182, %r5026, %r1496;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p450, %p24;
	@%p450 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1129;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r5028, %r1182, %r400;
	mul.wide.s32 	%rd443, %r5028, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f500;

$L__BB0_706:
	not.pred 	%p451, %p26;
	@%p451 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1129;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r5030, %r1182, %r401;
	mul.wide.s32 	%rd445, %r5030, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f501;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p453, %p25;
	@%p453 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1130;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r5032, %r1182, %r414;
	mul.wide.s32 	%rd447, %r5032, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f502;

$L__BB0_711:
	not.pred 	%p454, %p27;
	@%p454 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1130;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r5034, %r1182, %r415;
	mul.wide.s32 	%rd449, %r5034, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f503;

$L__BB0_713:
	add.s32 	%r1183, %r1146, 1;
	add.s32 	%r5035, %r1183, %r1151;
	mov.u32 	%r5036, 8;
	sub.s32 	%r5037, %r5036, %r1494;
	add.s32 	%r5038, %r5037, %r1495;
	mad.lo.s32 	%r5039, %r5035, %r5038, %r1147;
	mul.lo.s32 	%r5040, %r5039, %r58;
	sub.s32 	%r1184, %r5040, %r1496;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p456, %p24;
	@%p456 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7088;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r5042, %r1184, %r400;
	mul.wide.s32 	%rd451, %r5042, 4;
	add.s64 	%rd452, %rd27, %rd451;
	st.global.f32 	[%rd452], %f504;

$L__BB0_716:
	not.pred 	%p457, %p26;
	@%p457 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7088;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r5044, %r1184, %r401;
	mul.wide.s32 	%rd453, %r5044, 4;
	add.s64 	%rd454, %rd27, %rd453;
	st.global.f32 	[%rd454], %f505;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p459, %p25;
	@%p459 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7087;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r5046, %r1184, %r414;
	mul.wide.s32 	%rd455, %r5046, 4;
	add.s64 	%rd456, %rd27, %rd455;
	st.global.f32 	[%rd456], %f506;

$L__BB0_721:
	not.pred 	%p460, %p27;
	@%p460 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7087;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r5048, %r1184, %r415;
	mul.wide.s32 	%rd457, %r5048, 4;
	add.s64 	%rd458, %rd27, %rd457;
	st.global.f32 	[%rd458], %f507;

$L__BB0_723:
	mov.u32 	%r5049, 8;
	sub.s32 	%r5050, %r5049, %r1494;
	add.s32 	%r5051, %r5050, %r1495;
	add.s32 	%r5052, %r1183, %r1163;
	mul.lo.s32 	%r1185, %r5052, %r5051;
	add.s32 	%r5053, %r1147, %r1185;
	mul.lo.s32 	%r5054, %r5053, %r58;
	sub.s32 	%r1186, %r5054, %r1496;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p462, %p24;
	@%p462 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7086;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r5056, %r1186, %r400;
	mul.wide.s32 	%rd459, %r5056, 4;
	add.s64 	%rd460, %rd27, %rd459;
	st.global.f32 	[%rd460], %f508;

$L__BB0_726:
	not.pred 	%p463, %p26;
	@%p463 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7086;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r5058, %r1186, %r401;
	mul.wide.s32 	%rd461, %r5058, 4;
	add.s64 	%rd462, %rd27, %rd461;
	st.global.f32 	[%rd462], %f509;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p465, %p25;
	@%p465 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7085;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r5060, %r1186, %r414;
	mul.wide.s32 	%rd463, %r5060, 4;
	add.s64 	%rd464, %rd27, %rd463;
	st.global.f32 	[%rd464], %f510;

$L__BB0_731:
	not.pred 	%p466, %p27;
	@%p466 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7085;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r5062, %r1186, %r415;
	mul.wide.s32 	%rd465, %r5062, 4;
	add.s64 	%rd466, %rd27, %rd465;
	st.global.f32 	[%rd466], %f511;

$L__BB0_733:
	add.s32 	%r5063, %r1153, %r1185;
	mul.lo.s32 	%r5064, %r5063, %r58;
	sub.s32 	%r1187, %r5064, %r1496;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p468, %p24;
	@%p468 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7084;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r5066, %r1187, %r400;
	mul.wide.s32 	%rd467, %r5066, 4;
	add.s64 	%rd468, %rd27, %rd467;
	st.global.f32 	[%rd468], %f512;

$L__BB0_736:
	not.pred 	%p469, %p26;
	@%p469 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7084;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r5068, %r1187, %r401;
	mul.wide.s32 	%rd469, %r5068, 4;
	add.s64 	%rd470, %rd27, %rd469;
	st.global.f32 	[%rd470], %f513;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p471, %p25;
	@%p471 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7083;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r5070, %r1187, %r414;
	mul.wide.s32 	%rd471, %r5070, 4;
	add.s64 	%rd472, %rd27, %rd471;
	st.global.f32 	[%rd472], %f514;

$L__BB0_741:
	not.pred 	%p472, %p27;
	@%p472 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7083;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r5072, %r1187, %r415;
	mul.wide.s32 	%rd473, %r5072, 4;
	add.s64 	%rd474, %rd27, %rd473;
	st.global.f32 	[%rd474], %f515;

$L__BB0_743:
	setp.eq.s32 	%p473, %r41, %r1943;
	@%p473 bra 	$L__BB0_745;

	mad.lo.s32 	%r5075, %r1479, %r41, %r42;
	mov.u32 	%r5076, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5077, %r5075, 1280, %r5076;
	add.s32 	%r5078, %r5077, -256;
	shl.b32 	%r5079, %r46, 4;
	add.s32 	%r5080, %r5078, %r5079;
	st.shared.v4.u32 	[%r5080+256], {%r3575, %r3652, %r1074, %r1080};
	st.shared.v4.u32 	[%r5080+1024], {%r3342, %r3419, %r1020, %r1032};
	shl.b32 	%r5081, %r46, 3;
	add.s32 	%r5082, %r5078, %r5081;
	st.shared.v2.u32 	[%r5082+768], {%r3618, %r3684};

$L__BB0_745:
	setp.eq.s32 	%p474, %r42, %r1948;
	@%p474 bra 	$L__BB0_749;

	not.b32 	%r6856, %r41;
	add.s32 	%r6855, %r1478, %r6856;
	mul.lo.s32 	%r5088, %r1478, %r42;
	mul.lo.s32 	%r5089, %r5088, 384;
	shl.b32 	%r5090, %r42, 6;
	sub.s32 	%r5091, %r5089, %r5090;
	mad.lo.s32 	%r5093, %r1944, %r1943, %r5091;
	mad.lo.s32 	%r5094, %r6855, 384, %r5093;
	shl.b32 	%r5095, %r5094, 2;
	mov.u32 	%r5096, _ZN6kernel5shmemE;
	add.s32 	%r5097, %r5096, %r5095;
	add.s32 	%r5098, %r5097, -256;
	shl.b32 	%r5099, %r46, 4;
	add.s32 	%r5100, %r5098, %r5099;
	st.shared.v4.u32 	[%r5100+256], {%r3496, %r3530, %r1044, %r1056};
	st.shared.v4.u32 	[%r5100+1024], {%r4097, %r4131, %r1129, %r1130};
	shl.b32 	%r5101, %r46, 3;
	add.s32 	%r1192, %r5098, %r5101;
	@%p473 bra 	$L__BB0_748;

	st.shared.v2.u32 	[%r1192], {%r3385, %r3451};

$L__BB0_748:
	st.shared.v2.u32 	[%r1192+768], {%r3956, %r4037};

$L__BB0_749:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_751;

	mul.lo.s32 	%r5102, %r1479, 320;
	add.s32 	%r5104, %r41, -1;
	mul.lo.s32 	%r5106, %r42, 320;
	mad.lo.s32 	%r5107, %r5102, %r5104, %r5106;
	shl.b32 	%r5108, %r5107, 2;
	mov.u32 	%r5109, _ZN6kernel5shmemE;
	add.s32 	%r5110, %r5109, %r5108;
	add.s32 	%r5111, %r5110, -256;
	shl.b32 	%r5112, %r46, 4;
	add.s32 	%r5113, %r5111, %r5112;
	ld.shared.v4.u32 	{%r7287, %r7285, %r7281, %r7280}, [%r5113+256];
	ld.shared.v4.u32 	{%r7289, %r7288, %r7283, %r7282}, [%r5113+1024];
	shl.b32 	%r5122, %r46, 3;
	add.s32 	%r5123, %r5111, %r5122;
	ld.shared.v2.u32 	{%r7286, %r7284}, [%r5123+768];

$L__BB0_751:
	setp.eq.s32 	%p520, %r42, 0;
	@%p520 bra 	$L__BB0_754;

	not.b32 	%r6858, %r41;
	add.s32 	%r6857, %r1478, %r6858;
	mad.lo.s32 	%r5129, %r1478, 384, -64;
	add.s32 	%r5131, %r42, -1;
	mul.lo.s32 	%r5132, %r5129, %r5131;
	mad.lo.s32 	%r5135, %r1944, %r1943, %r5132;
	mad.lo.s32 	%r5136, %r6857, 384, %r5135;
	shl.b32 	%r5137, %r5136, 2;
	mov.u32 	%r5138, _ZN6kernel5shmemE;
	add.s32 	%r5139, %r5138, %r5137;
	add.s32 	%r5140, %r5139, -256;
	shl.b32 	%r5141, %r46, 4;
	add.s32 	%r5142, %r5140, %r5141;
	ld.shared.v4.u32 	{%r7301, %r7300, %r7298, %r7296}, [%r5142+256];
	ld.shared.v4.u32 	{%r7295, %r7294, %r7292, %r7290}, [%r5142+1024];
	shl.b32 	%r5151, %r46, 3;
	add.s32 	%r5152, %r5140, %r5151;
	ld.shared.v2.u32 	{%r7299, %r7297}, [%r5152+768];
	@%p279 bra 	$L__BB0_754;

	add.s32 	%r6854, %r5152, 768;
	ld.shared.v2.u32 	{%r7293, %r7291}, [%r6854+768];

$L__BB0_754:
	mov.f32 	%f563, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5157, {low,high};}

	// end inline asm
	selp.b32 	%r5159, %r6954, %r5157, %p28;
	// begin inline asm
	{mul.f16x2 %r5158,%r5159,%r7079;
}
	// end inline asm
	selp.b32 	%r5162, %r6958, %r5157, %p28;
	// begin inline asm
	{mul.f16x2 %r5161,%r5162,%r7072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5164, {low,high};}

	// end inline asm
	selp.b32 	%r5166, %r6954, %r5164, %p28;
	// begin inline asm
	{mul.f16x2 %r5165,%r5166,%r7060;
}
	// end inline asm
	selp.b32 	%r5169, %r6958, %r5164, %p28;
	// begin inline asm
	{mul.f16x2 %r5168,%r5169,%r7055;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5171, {low,high};}

	// end inline asm
	selp.b32 	%r5173, %r6954, %r5171, %p28;
	// begin inline asm
	{mul.f16x2 %r5172,%r5173,%r7047;
}
	// end inline asm
	selp.b32 	%r5176, %r6958, %r5171, %p28;
	// begin inline asm
	{mul.f16x2 %r5175,%r5176,%r7046;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5178, {low,high};}

	// end inline asm
	selp.b32 	%r5180, %r6954, %r5178, %p28;
	// begin inline asm
	{mul.f16x2 %r5179,%r5180,%r7051;
}
	// end inline asm
	selp.b32 	%r5183, %r6958, %r5178, %p28;
	// begin inline asm
	{mul.f16x2 %r5182,%r5183,%r7050;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5185, {low,high};}

	// end inline asm
	selp.b32 	%r5187, %r6954, %r5185, %p28;
	// begin inline asm
	{mul.f16x2 %r5186,%r5187,%r7049;
}
	// end inline asm
	selp.b32 	%r5190, %r6958, %r5185, %p28;
	// begin inline asm
	{mul.f16x2 %r5189,%r5190,%r7043;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5192, {low,high};}

	// end inline asm
	selp.b32 	%r5194, %r6954, %r5192, %p28;
	// begin inline asm
	{mul.f16x2 %r5193,%r5194,%r7039;
}
	// end inline asm
	selp.b32 	%r5197, %r6958, %r5192, %p28;
	// begin inline asm
	{mul.f16x2 %r5196,%r5197,%r7038;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5199, {low,high};}

	// end inline asm
	selp.b32 	%r5201, %r6954, %r5199, %p28;
	// begin inline asm
	{mul.f16x2 %r5200,%r5201,%r7037;
}
	// end inline asm
	selp.b32 	%r5204, %r6958, %r5199, %p28;
	// begin inline asm
	{mul.f16x2 %r5203,%r5204,%r7031;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5206, {low,high};}

	// end inline asm
	selp.b32 	%r5208, %r6954, %r5206, %p28;
	// begin inline asm
	{mul.f16x2 %r5207,%r5208,%r7024;
}
	// end inline asm
	selp.b32 	%r5211, %r6958, %r5206, %p28;
	// begin inline asm
	{mul.f16x2 %r5210,%r5211,%r7023;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5213, {low,high};}

	// end inline asm
	selp.b32 	%r5215, %r6954, %r5213, %p28;
	// begin inline asm
	{mul.f16x2 %r5214,%r5215,%r7243;
}
	// end inline asm
	selp.b32 	%r5218, %r6958, %r5213, %p28;
	// begin inline asm
	{mul.f16x2 %r5217,%r5218,%r7241;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5220, {low,high};}

	// end inline asm
	selp.b32 	%r5222, %r6954, %r5220, %p28;
	// begin inline asm
	{mul.f16x2 %r5221,%r5222,%r7242;
}
	// end inline asm
	selp.b32 	%r5225, %r6958, %r5220, %p28;
	// begin inline asm
	{mul.f16x2 %r5224,%r5225,%r7240;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5227, {low,high};}

	// end inline asm
	selp.b32 	%r5229, %r6954, %r5227, %p28;
	// begin inline asm
	{mul.f16x2 %r5228,%r5229,%r7016;
}
	// end inline asm
	selp.b32 	%r5232, %r6958, %r5227, %p28;
	// begin inline asm
	{mul.f16x2 %r5231,%r5232,%r7015;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5234, {low,high};}

	// end inline asm
	selp.b32 	%r5236, %r6954, %r5234, %p28;
	// begin inline asm
	{mul.f16x2 %r5235,%r5236,%r7020;
}
	// end inline asm
	selp.b32 	%r5239, %r6958, %r5234, %p28;
	// begin inline asm
	{mul.f16x2 %r5238,%r5239,%r7019;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5241, {low,high};}

	// end inline asm
	selp.b32 	%r5243, %r6954, %r5241, %p28;
	// begin inline asm
	{mul.f16x2 %r5242,%r5243,%r7018;
}
	// end inline asm
	selp.b32 	%r5246, %r6958, %r5241, %p28;
	// begin inline asm
	{mul.f16x2 %r5245,%r5246,%r7013;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5248, {low,high};}

	// end inline asm
	selp.b32 	%r5250, %r6954, %r5248, %p28;
	// begin inline asm
	{mul.f16x2 %r5249,%r5250,%r7008;
}
	// end inline asm
	selp.b32 	%r5253, %r6958, %r5248, %p28;
	// begin inline asm
	{mul.f16x2 %r5252,%r5253,%r7007;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5255, {low,high};}

	// end inline asm
	selp.b32 	%r5257, %r6954, %r5255, %p28;
	// begin inline asm
	{mul.f16x2 %r5256,%r5257,%r7010;
}
	// end inline asm
	selp.b32 	%r5260, %r6958, %r5255, %p28;
	// begin inline asm
	{mul.f16x2 %r5259,%r5260,%r7009;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5262, {low,high};}

	// end inline asm
	selp.b32 	%r5264, %r6954, %r5262, %p28;
	// begin inline asm
	{mul.f16x2 %r5263,%r5264,%r7227;
}
	// end inline asm
	selp.b32 	%r5267, %r6958, %r5262, %p28;
	// begin inline asm
	{mul.f16x2 %r5266,%r5267,%r7226;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5269, {low,high};}

	// end inline asm
	selp.b32 	%r5271, %r6954, %r5269, %p28;
	// begin inline asm
	{mul.f16x2 %r5270,%r5271,%r7225;
}
	// end inline asm
	selp.b32 	%r5274, %r6958, %r5269, %p28;
	// begin inline asm
	{mul.f16x2 %r5273,%r5274,%r7224;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5276, {low,high};}

	// end inline asm
	selp.b32 	%r5278, %r6954, %r5276, %p28;
	// begin inline asm
	{mul.f16x2 %r5277,%r5278,%r7239;
}
	// end inline asm
	selp.b32 	%r5281, %r6958, %r5276, %p28;
	// begin inline asm
	{mul.f16x2 %r5280,%r5281,%r7238;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5283, {low,high};}

	// end inline asm
	selp.b32 	%r5285, %r6954, %r5283, %p28;
	// begin inline asm
	{mul.f16x2 %r5284,%r5285,%r7002;
}
	// end inline asm
	selp.b32 	%r5288, %r6958, %r5283, %p28;
	// begin inline asm
	{mul.f16x2 %r5287,%r5288,%r7001;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5290, {low,high};}

	// end inline asm
	selp.b32 	%r5292, %r6954, %r5290, %p28;
	// begin inline asm
	{mul.f16x2 %r5291,%r5292,%r7237;
}
	// end inline asm
	selp.b32 	%r5295, %r6958, %r5290, %p28;
	// begin inline asm
	{mul.f16x2 %r5294,%r5295,%r7235;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5297, {low,high};}

	// end inline asm
	selp.b32 	%r5299, %r6954, %r5297, %p28;
	// begin inline asm
	{mul.f16x2 %r5298,%r5299,%r7236;
}
	// end inline asm
	selp.b32 	%r5302, %r6958, %r5297, %p28;
	// begin inline asm
	{mul.f16x2 %r5301,%r5302,%r7234;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5304, {low,high};}

	// end inline asm
	selp.b32 	%r5306, %r6954, %r5304, %p28;
	// begin inline asm
	{mul.f16x2 %r5305,%r5306,%r7223;
}
	// end inline asm
	selp.b32 	%r5309, %r6958, %r5304, %p28;
	// begin inline asm
	{mul.f16x2 %r5308,%r5309,%r7221;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5311, {low,high};}

	// end inline asm
	selp.b32 	%r5313, %r6954, %r5311, %p28;
	// begin inline asm
	{mul.f16x2 %r5312,%r5313,%r7222;
}
	// end inline asm
	selp.b32 	%r5316, %r6958, %r5311, %p28;
	// begin inline asm
	{mul.f16x2 %r5315,%r5316,%r7220;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f563;
  cvt.rn.f16.f32 high, %f563;
  mov.b32 %r5318, {low,high};}

	// end inline asm
	selp.b32 	%r5320, %r6954, %r5318, %p28;
	// begin inline asm
	{mul.f16x2 %r5319,%r5320,%r7233;
}
	// end inline asm
	selp.b32 	%r5323, %r6958, %r5318, %p28;
	// begin inline asm
	{mul.f16x2 %r5322,%r5323,%r7232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5325,%r7106,%r3385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5328,%r3496,%r3342;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5331,%r5325,%r5328;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5334,%r6868,%r5331;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5337,%r5158,%r5334;
}
	// end inline asm
	selp.b32 	%r7074, %r5158, %r5337, %p28;
	// begin inline asm
	{sub.f16x2 %r5340,%r7105,%r3451;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5343,%r3530,%r3419;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5346,%r5340,%r5343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5349,%r6868,%r5346;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5352,%r5161,%r5349;
}
	// end inline asm
	selp.b32 	%r7069, %r5161, %r5352, %p28;
	// begin inline asm
	{sub.f16x2 %r5355,%r7102,%r3618;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5358,%r7108,%r3575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5361,%r5355,%r5358;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5364,%r6868,%r5361;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5367,%r5165,%r5364;
}
	// end inline asm
	selp.b32 	%r7078, %r5165, %r5367, %p28;
	// begin inline asm
	{sub.f16x2 %r5370,%r7101,%r3684;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5373,%r7107,%r3652;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5376,%r5370,%r5373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5379,%r6868,%r5376;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5382,%r5168,%r5379;
}
	// end inline asm
	selp.b32 	%r7071, %r5168, %r5382, %p28;
	// begin inline asm
	{sub.f16x2 %r5385,%r7105,%r7106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5388,%r6953,%r5385;
}
	// end inline asm
	@%p28 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r7302,%r5172;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r7302,%r6954,%r5385;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5399, 31;
	mov.u32 	%r5401, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5397,%r7302,%r5399,%r2039,%r5401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5402,%r5388,%r5397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5405,%r1044,%r1020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5408,%r5405,%r5402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5411,%r6868,%r5408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7076,%r5172,%r5411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5417,%r7107,%r7108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5420,%r6953,%r5417;
}
	// end inline asm
	mov.u32 	%r7303, %r5179;
	@%p28 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r7303,%r6954,%r5417;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5429,%r7303,%r5399,%r2039,%r5401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5434,%r5420,%r5429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5437,%r7096,%r1020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5440,%r5434,%r5437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5443,%r6868,%r5440;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r5179,%r5443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5449,%r7098,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5452,%r7104,%r7108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5455,%r5449,%r5452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5458,%r6868,%r5455;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5461,%r5186,%r5458;
}
	// end inline asm
	selp.b32 	%r7079, %r5186, %r5461, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7106;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5466,%r7106,%r435,%r2039,%r5401;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5466;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5472, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5473,%r5472,%r7105;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5476,%r6957,%r5473;
}
	// end inline asm
	@%p28 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r7304,%r5175;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r7304,%r6958,%r5473;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5491, 31;
	mov.u32 	%r5515, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5489,%r7304,%r5491,%r2039,%r5515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5494,%r5476,%r5489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5497,%r1056,%r1032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5500,%r5497,%r5494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5503,%r6868,%r5500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7075,%r5175,%r5503;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7108;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5511,%r7108,%r435,%r2039,%r5515;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5511;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5517, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5518,%r5517,%r7107;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5521,%r6957,%r5518;
}
	// end inline asm
	mov.u32 	%r7305, %r5182;
	@%p28 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r7305,%r6958,%r5518;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5532,%r7305,%r5491,%r2039,%r5515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5537,%r5521,%r5532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5540,%r7095,%r1032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5543,%r5537,%r5540;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5546,%r6868,%r5543;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r5182,%r5546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5552,%r7097,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5555,%r7103,%r7107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5558,%r5552,%r5555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5561,%r6868,%r5558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5564,%r5189,%r5561;
}
	// end inline asm
	selp.b32 	%r7072, %r5189, %r5564, %p28;
	// begin inline asm
	{sub.f16x2 %r5567,%r7103,%r7104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5570,%r6953,%r5567;
}
	// end inline asm
	mov.u32 	%r7306, %r5193;
	@%p28 bra 	$L__BB0_766;

	// begin inline asm
	{mul.f16x2 %r7306,%r6954,%r5567;
}
	// end inline asm

$L__BB0_766:
	mov.u32 	%r5581, 31;
	mov.u32 	%r5620, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5579,%r7306,%r5581,%r2039,%r5620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5584,%r5570,%r5579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5587,%r7090,%r1044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5590,%r5584,%r5587;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5593,%r6868,%r5590;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7067,%r5193,%r5593;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5599,%r7092,%r3956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5602,%r4097,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5605,%r5599,%r5602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5608,%r6868,%r5605;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5611,%r5200,%r5608;
}
	// end inline asm
	selp.b32 	%r7065, %r5200, %r5611, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7104;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5616,%r7104,%r435,%r2039,%r5620;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5616;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5622, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5623,%r5622,%r7103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5626,%r6957,%r5623;
}
	// end inline asm
	mov.u32 	%r7307, %r5196;
	@%p28 bra 	$L__BB0_768;

	// begin inline asm
	{mul.f16x2 %r7307,%r6958,%r5623;
}
	// end inline asm

$L__BB0_768:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5637,%r7307,%r5581,%r2039,%r5620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5642,%r5626,%r5637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5645,%r7089,%r1056;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5648,%r5642,%r5645;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5651,%r6868,%r5648;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r5196,%r5651;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5657,%r7091,%r4037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5660,%r4131,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5663,%r5657,%r5660;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5666,%r6868,%r5663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5669,%r5203,%r5666;
}
	// end inline asm
	selp.b32 	%r7063, %r5203, %r5669, %p28;
	// begin inline asm
	{sub.f16x2 %r5672,%r7101,%r7102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5675,%r6953,%r5672;
}
	// end inline asm
	@%p28 bra 	$L__BB0_770;
	bra.uni 	$L__BB0_769;

$L__BB0_770:
	// begin inline asm
	{neg.f16x2 %r7308,%r5207;
}
	// end inline asm
	bra.uni 	$L__BB0_771;

$L__BB0_769:
	// begin inline asm
	{mul.f16x2 %r7308,%r6954,%r5672;
}
	// end inline asm

$L__BB0_771:
	mov.u32 	%r5688, 31;
	mov.u32 	%r5690, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5686,%r7308,%r5688,%r2039,%r5690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5691,%r5675,%r5686;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5694,%r7096,%r1074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5697,%r5694,%r5691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5700,%r6868,%r5697;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7057,%r5207,%r5700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5706,%r7300,%r7301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5709,%r6953,%r5706;
}
	// end inline asm
	mov.u32 	%r7309, %r5214;
	@%p28 bra 	$L__BB0_773;

	// begin inline asm
	{mul.f16x2 %r7309,%r6954,%r5706;
}
	// end inline asm

$L__BB0_773:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5718,%r7309,%r5688,%r2039,%r5690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5723,%r5709,%r5718;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5726,%r7298,%r1074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5729,%r5723,%r5726;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5732,%r6868,%r5729;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r5214,%r5732;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5738,%r7299,%r7102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5741,%r7100,%r7301;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5744,%r5738,%r5741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5747,%r6868,%r5744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5750,%r5221,%r5747;
}
	// end inline asm
	selp.b32 	%r7060, %r5221, %r5750, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7102;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5755,%r7102,%r435,%r2039,%r5690;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5755;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5761, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5762,%r5761,%r7101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5765,%r6957,%r5762;
}
	// end inline asm
	@%p28 bra 	$L__BB0_775;
	bra.uni 	$L__BB0_774;

$L__BB0_775:
	// begin inline asm
	{neg.f16x2 %r7310,%r5210;
}
	// end inline asm
	bra.uni 	$L__BB0_776;

$L__BB0_774:
	// begin inline asm
	{mul.f16x2 %r7310,%r6958,%r5762;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r5780, 31;
	mov.u32 	%r5804, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5778,%r7310,%r5780,%r2039,%r5804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5783,%r5765,%r5778;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5786,%r7095,%r1080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5789,%r5786,%r5783;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5792,%r6868,%r5789;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7056,%r5210,%r5792;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7301;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5800,%r7301,%r435,%r2039,%r5804;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5800;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5806, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5807,%r5806,%r7300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5810,%r6957,%r5807;
}
	// end inline asm
	mov.u32 	%r7311, %r5217;
	@%p28 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7311,%r6958,%r5807;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5821,%r7311,%r5780,%r2039,%r5804;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5826,%r5810,%r5821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5829,%r7296,%r1080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5832,%r5826,%r5829;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5835,%r6868,%r5832;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7061,%r5217,%r5835;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5841,%r7297,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5844,%r7099,%r7300;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5847,%r5841,%r5844;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5850,%r6868,%r5847;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5853,%r5224,%r5850;
}
	// end inline asm
	selp.b32 	%r7055, %r5224, %r5853, %p28;
	// begin inline asm
	{sub.f16x2 %r5856,%r7097,%r7098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5859,%r6953,%r5856;
}
	// end inline asm
	@%p28 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7312,%r5228;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7312,%r6954,%r5856;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r5872, 31;
	mov.u32 	%r5874, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5870,%r7312,%r5872,%r2039,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5875,%r5859,%r5870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5878,%r7090,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5881,%r5878,%r5875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5884,%r6868,%r5881;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7047,%r5228,%r5884;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5890,%r7099,%r7100;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5893,%r6953,%r5890;
}
	// end inline asm
	mov.u32 	%r7313, %r5235;
	@%p28 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7313,%r6954,%r5890;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5902,%r7313,%r5872,%r2039,%r5874;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5907,%r5893,%r5902;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5910,%r7086,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5913,%r5907,%r5910;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5916,%r6868,%r5913;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7051,%r5235,%r5916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5922,%r7088,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5925,%r7094,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r5922,%r5925;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5931,%r6868,%r5928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5934,%r5242,%r5931;
}
	// end inline asm
	selp.b32 	%r7049, %r5242, %r5934, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7098;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5939,%r7098,%r435,%r2039,%r5874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5939;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5945, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5946,%r5945,%r7097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5949,%r6957,%r5946;
}
	// end inline asm
	@%p28 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7314,%r5231;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7314,%r6958,%r5946;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r5964, 31;
	mov.u32 	%r5988, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5962,%r7314,%r5964,%r2039,%r5988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5967,%r5949,%r5962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5970,%r7089,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5973,%r5970,%r5967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5976,%r6868,%r5973;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7046,%r5231,%r5976;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7100;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5984,%r7100,%r435,%r2039,%r5988;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5984;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5990, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5991,%r5990,%r7099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5994,%r6957,%r5991;
}
	// end inline asm
	mov.u32 	%r7315, %r5238;
	@%p28 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7315,%r6958,%r5991;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6005,%r7315,%r5964,%r2039,%r5988;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6010,%r5994,%r6005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6013,%r7085,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6016,%r6010,%r6013;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6019,%r6868,%r6016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7050,%r5238,%r6019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6025,%r7087,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6028,%r7093,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r6025,%r6028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6034,%r6868,%r6031;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6037,%r5245,%r6034;
}
	// end inline asm
	selp.b32 	%r7043, %r5245, %r6037, %p28;
	// begin inline asm
	{sub.f16x2 %r6040,%r7091,%r7092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6043,%r6953,%r6040;
}
	// end inline asm
	@%p28 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7316,%r5249;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7316,%r6954,%r6040;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6056, 31;
	mov.u32 	%r6058, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6054,%r7316,%r6056,%r2039,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6059,%r6043,%r6054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6062,%r1129,%r7090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6065,%r6062,%r6059;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6068,%r6868,%r6065;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7035,%r5249,%r6068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6074,%r7093,%r7094;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6077,%r6953,%r6074;
}
	// end inline asm
	mov.u32 	%r7317, %r5256;
	@%p28 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7317,%r6954,%r6074;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6086,%r7317,%r6056,%r2039,%r6058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6091,%r6077,%r6086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6094,%r7084,%r7090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6097,%r6091,%r6094;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6100,%r6868,%r6097;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7039,%r5256,%r6100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6106,%r7286,%r7092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6109,%r7289,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6112,%r6106,%r6109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6115,%r6868,%r6112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6118,%r5263,%r6115;
}
	// end inline asm
	selp.b32 	%r7037, %r5263, %r6118, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7092;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6123,%r7092,%r435,%r2039,%r6058;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6123;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6129, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6130,%r6129,%r7091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6133,%r6957,%r6130;
}
	// end inline asm
	@%p28 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7318,%r5252;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7318,%r6958,%r6130;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6148, 31;
	mov.u32 	%r6172, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6146,%r7318,%r6148,%r2039,%r6172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6151,%r6133,%r6146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6154,%r1130,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6157,%r6154,%r6151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6160,%r6868,%r6157;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r5252,%r6160;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7094;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6168,%r7094,%r435,%r2039,%r6172;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6168;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6174, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6175,%r6174,%r7093;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6178,%r6957,%r6175;
}
	// end inline asm
	mov.u32 	%r7319, %r5259;
	@%p28 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7319,%r6958,%r6175;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6189,%r7319,%r6148,%r2039,%r6172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6194,%r6178,%r6189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6197,%r7083,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6200,%r6194,%r6197;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6203,%r6868,%r6200;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7038,%r5259,%r6203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6209,%r7284,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6212,%r7288,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6215,%r6209,%r6212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6218,%r6868,%r6215;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6221,%r5266,%r6218;
}
	// end inline asm
	selp.b32 	%r7031, %r5266, %r6221, %p28;
	// begin inline asm
	{sub.f16x2 %r6224,%r7288,%r7289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6227,%r6953,%r6224;
}
	// end inline asm
	mov.u32 	%r7320, %r5270;
	@%p28 bra 	$L__BB0_800;

	// begin inline asm
	{mul.f16x2 %r7320,%r6954,%r6224;
}
	// end inline asm

$L__BB0_800:
	mov.u32 	%r6238, 31;
	mov.u32 	%r6262, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6236,%r7320,%r6238,%r2039,%r6262;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6241,%r6227,%r6236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6244,%r7283,%r1129;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6247,%r6241,%r6244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6250,%r6868,%r6247;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7028,%r5270,%r6250;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7289;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6258,%r7289,%r435,%r2039,%r6262;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6258;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6264, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6265,%r6264,%r7288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6268,%r6957,%r6265;
}
	// end inline asm
	mov.u32 	%r7321, %r5273;
	@%p28 bra 	$L__BB0_802;

	// begin inline asm
	{mul.f16x2 %r7321,%r6958,%r6265;
}
	// end inline asm

$L__BB0_802:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6279,%r7321,%r6238,%r2039,%r6262;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6284,%r6268,%r6279;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6287,%r7282,%r1130;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6290,%r6284,%r6287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6293,%r6868,%r6290;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7027,%r5273,%r6293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6299,%r7297,%r7299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6302,%r6953,%r6299;
}
	// end inline asm
	@%p28 bra 	$L__BB0_804;
	bra.uni 	$L__BB0_803;

$L__BB0_804:
	// begin inline asm
	{neg.f16x2 %r7322,%r5277;
}
	// end inline asm
	bra.uni 	$L__BB0_805;

$L__BB0_803:
	// begin inline asm
	{mul.f16x2 %r7322,%r6954,%r6299;
}
	// end inline asm

$L__BB0_805:
	mov.u32 	%r6315, 31;
	mov.u32 	%r6339, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6313,%r7322,%r6315,%r2039,%r6339;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6318,%r6302,%r6313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6321,%r7086,%r7298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r6321,%r6318;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r6868,%r6324;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r5277,%r6327;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7299;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6335,%r7299,%r435,%r2039,%r6339;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6335;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6341, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6342,%r6341,%r7297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6345,%r6957,%r6342;
}
	// end inline asm
	@%p28 bra 	$L__BB0_807;
	bra.uni 	$L__BB0_806;

$L__BB0_807:
	// begin inline asm
	{neg.f16x2 %r7323,%r5280;
}
	// end inline asm
	bra.uni 	$L__BB0_808;

$L__BB0_806:
	// begin inline asm
	{mul.f16x2 %r7323,%r6958,%r6342;
}
	// end inline asm

$L__BB0_808:
	mov.u32 	%r6360, 31;
	mov.u32 	%r6362, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6358,%r7323,%r6360,%r2039,%r6362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6363,%r6345,%r6358;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6366,%r7085,%r7296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6369,%r6366,%r6363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6372,%r6868,%r6369;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r5280,%r6372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6378,%r7087,%r7088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6381,%r6953,%r6378;
}
	// end inline asm
	@%p28 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7324,%r5284;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7324,%r6954,%r6378;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6394, 31;
	mov.u32 	%r6396, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6392,%r7324,%r6394,%r2039,%r6396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6397,%r6381,%r6392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6400,%r7084,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6403,%r6400,%r6397;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6406,%r6868,%r6403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7016,%r5284,%r6406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6412,%r7294,%r7295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6415,%r6953,%r6412;
}
	// end inline asm
	mov.u32 	%r7325, %r5291;
	@%p28 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7325,%r6954,%r6412;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6424,%r7325,%r6394,%r2039,%r6396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6429,%r6415,%r6424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6432,%r7292,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6435,%r6429,%r6432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6438,%r6868,%r6435;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7020,%r5291,%r6438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6444,%r7293,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6447,%r7287,%r7295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6450,%r6444,%r6447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6453,%r6868,%r6450;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6456,%r5298,%r6453;
}
	// end inline asm
	selp.b32 	%r7018, %r5298, %r6456, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7088;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6461,%r7088,%r435,%r2039,%r6396;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6461;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6467, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6468,%r6467,%r7087;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6471,%r6957,%r6468;
}
	// end inline asm
	@%p28 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7326,%r5287;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7326,%r6958,%r6468;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6486, 31;
	mov.u32 	%r6510, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6484,%r7326,%r6486,%r2039,%r6510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6489,%r6471,%r6484;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6492,%r7083,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6495,%r6492,%r6489;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6498,%r6868,%r6495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7015,%r5287,%r6498;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7295;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6506,%r7295,%r435,%r2039,%r6510;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6506;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6512, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6513,%r6512,%r7294;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6516,%r6957,%r6513;
}
	// end inline asm
	mov.u32 	%r7327, %r5294;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7327,%r6958,%r6513;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6527,%r7327,%r6486,%r2039,%r6510;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6532,%r6516,%r6527;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6535,%r7290,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6538,%r6532,%r6535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6541,%r6868,%r6538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r5294,%r6541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6547,%r7291,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6550,%r7285,%r7294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6553,%r6547,%r6550;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6556,%r6868,%r6553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6559,%r5301,%r6556;
}
	// end inline asm
	selp.b32 	%r7013, %r5301, %r6559, %p28;
	// begin inline asm
	{sub.f16x2 %r6562,%r7284,%r7286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6565,%r6953,%r6562;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7328,%r5305;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7328,%r6954,%r6562;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6578, 31;
	mov.u32 	%r6580, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6576,%r7328,%r6578,%r2039,%r6580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6581,%r6565,%r6576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6584,%r7283,%r7084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6587,%r6584,%r6581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6590,%r6868,%r6587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7008,%r5305,%r6590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6596,%r7285,%r7287;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6599,%r6953,%r6596;
}
	// end inline asm
	mov.u32 	%r7329, %r5312;
	@%p28 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7329,%r6954,%r6596;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6608,%r7329,%r6578,%r2039,%r6580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6613,%r6599,%r6608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6616,%r7281,%r7084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6619,%r6613,%r6616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6622,%r6868,%r6619;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7010,%r5312,%r6622;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7286;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6630,%r7286,%r435,%r2039,%r6580;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6630;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6636, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6637,%r6636,%r7284;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6640,%r6957,%r6637;
}
	// end inline asm
	@%p28 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7330,%r5308;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7330,%r6958,%r6637;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6655, 31;
	mov.u32 	%r6679, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6653,%r7330,%r6655,%r2039,%r6679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6658,%r6640,%r6653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6661,%r7282,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6664,%r6661,%r6658;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6667,%r6868,%r6664;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7007,%r5308,%r6667;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7287;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6675,%r7287,%r435,%r2039,%r6679;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6675;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6681, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6682,%r6681,%r7285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6685,%r6957,%r6682;
}
	// end inline asm
	mov.u32 	%r7331, %r5315;
	@%p28 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7331,%r6958,%r6682;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6696,%r7331,%r6655,%r2039,%r6679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6701,%r6685,%r6696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6704,%r7280,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6707,%r6701,%r6704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6710,%r6868,%r6707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7009,%r5315,%r6710;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6716,%r7291,%r7293;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6719,%r6953,%r6716;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7332,%r5319;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7332,%r6954,%r6716;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6732, 31;
	mov.u32 	%r6756, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6730,%r7332,%r6732,%r2039,%r6756;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6735,%r6719,%r6730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6738,%r7281,%r7292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6741,%r6738,%r6735;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6744,%r6868,%r6741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7002,%r5319,%r6744;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7293;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6752,%r7293,%r435,%r2039,%r6756;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6752;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6758, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6759,%r6758,%r7291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6762,%r6957,%r6759;
}
	// end inline asm
	@%p28 bra 	$L__BB0_833;
	bra.uni 	$L__BB0_832;

$L__BB0_833:
	// begin inline asm
	{neg.f16x2 %r7333,%r5322;
}
	// end inline asm
	bra.uni 	$L__BB0_834;

$L__BB0_832:
	// begin inline asm
	{mul.f16x2 %r7333,%r6958,%r6759;
}
	// end inline asm

$L__BB0_834:
	mov.u32 	%r6777, 31;
	mov.u32 	%r6779, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6775,%r7333,%r6777,%r2039,%r6779;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6780,%r6762,%r6775;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6783,%r7280,%r7290;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6786,%r6783,%r6780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6789,%r6868,%r6786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7001,%r5322,%r6789;
}
	// end inline asm
	bar.sync 	0;
	@%p473 bra 	$L__BB0_837;

	setp.ne.s32 	%p512, %r42, %r1948;
	shl.b32 	%r6799, %r42, 8;
	shl.b32 	%r6803, %r1479, 8;
	or.b32  	%r6804, %r6803, 128;
	mad.lo.s32 	%r6806, %r6804, %r41, %r1951;
	add.s32 	%r6807, %r6806, %r6799;
	shl.b32 	%r6808, %r6807, 2;
	mov.u32 	%r6809, _ZN6kernel5shmemE;
	add.s32 	%r6810, %r6809, %r6808;
	shl.b32 	%r6811, %r46, 4;
	add.s32 	%r1474, %r6810, %r6811;
	st.shared.v4.u32 	[%r1474], {%r7062, %r7061, %r7057, %r7056};
	st.shared.v4.u32 	[%r1474+512], {%r7078, %r7071, %r7081, %r7080};
	@%p512 bra 	$L__BB0_837;

	st.shared.v4.u32 	[%r1474+1024], {%r7076, %r7075, %r7074, %r7069};

$L__BB0_837:
	@%p474 bra 	$L__BB0_839;

	not.b32 	%r6860, %r41;
	add.s32 	%r6859, %r1478, %r6860;
	mul.lo.s32 	%r6817, %r6859, 384;
	mad.lo.s32 	%r6818, %r69, %r42, %r6817;
	mad.lo.s32 	%r6821, %r1946, %r1948, %r6818;
	mad.lo.s32 	%r6824, %r1944, %r1943, %r6821;
	shl.b32 	%r6825, %r6824, 2;
	mov.u32 	%r6826, _ZN6kernel5shmemE;
	add.s32 	%r6827, %r6826, %r6825;
	shl.b32 	%r6828, %r46, 4;
	add.s32 	%r6829, %r6827, %r6828;
	st.shared.v4.u32 	[%r6829], {%r7076, %r7075, %r7074, %r7069};
	st.shared.v4.u32 	[%r6829+512], {%r7067, %r7066, %r7035, %r7034};
	st.shared.v4.u32 	[%r6829+1024], {%r7065, %r7063, %r7028, %r7027};

$L__BB0_839:
	rem.s32 	%r6830, %r7109, %r1482;
	setp.eq.s32 	%p514, %r6830, 0;
	@%p514 bra 	$L__BB0_841;

	bar.sync 	0;
	bra.uni 	$L__BB0_848;

$L__BB0_841:
	@%p218 bra 	$L__BB0_843;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_843:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_847;

	membar.gl;
	setp.eq.s32 	%p517, %r429, %r430;
	mov.u32 	%r6847, -2147483647;
	sub.s32 	%r6848, %r6847, %r428;
	selp.b32 	%r6836, %r6848, 1, %p517;
	// begin inline asm
	atom.add.release.gpu.u32 %r6835,[%rd25],%r6836;
	// end inline asm

$L__BB0_845:
	ld.volatile.u32 	%r6849, [%rd25];
	xor.b32  	%r6850, %r6849, %r6835;
	setp.gt.s32 	%p518, %r6850, -1;
	@%p518 bra 	$L__BB0_845;

	// begin inline asm
	ld.acquire.gpu.u32 %r6851,[%rd25];
	// end inline asm

$L__BB0_847:
	bar.sync 	0;

$L__BB0_848:
	add.s32 	%r7109, %r7109, 1;
	setp.lt.s32 	%p519, %r7109, %r49;
	mov.u32 	%r7029, %r482;
	mov.u32 	%r7030, %r7198;
	mov.u32 	%r7033, %r483;
	mov.u32 	%r7036, %r7200;
	mov.u32 	%r7041, %r488;
	mov.u32 	%r7045, %r491;
	mov.u32 	%r7053, %r7211;
	mov.u32 	%r7058, %r7213;
	mov.u32 	%r7064, %r509;
	mov.u32 	%r7068, %r517;
	mov.u32 	%r7070, %r519;
	mov.u32 	%r7073, %r521;
	mov.u32 	%r7077, %r525;
	mov.u32 	%r7082, %r529;
	@%p519 bra 	$L__BB0_332;

$L__BB0_849:
	ret;

}

