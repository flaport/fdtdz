//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<465>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7277>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1476, %r1477}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1478, %r1479}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1480, %r1481}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1482, %r1483}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1484, %r1485}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1486, %r1487}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1488, %r1489}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1490, %r1491}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1492, %r1493}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1494, %r1495}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1496, 32;
	sub.s32 	%r39, %r1496, %r1483;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p15, %r39, %r40;
	add.s32 	%r1497, %r1489, -1;
	mad.lo.s32 	%r1498, %r1497, %r1488, %r1487;
	add.s32 	%r1499, %r1482, %r1481;
	add.s32 	%r1500, %r1499, %r1498;
	add.s32 	%r1501, %r1500, 1;
	mul.lo.s32 	%r1502, %r1476, %r1478;
	shl.b32 	%r41, %r1502, 1;
	shl.b32 	%r1503, %r1502, 2;
	div.s32 	%r1504, %r1501, %r1503;
	add.s32 	%r1505, %r1504, 1;
	mul.lo.s32 	%r1506, %r1505, %r1482;
	mul.lo.s32 	%r1507, %r1477, %r1479;
	shl.b32 	%r42, %r1507, 1;
	div.s32 	%r1508, %r1506, %r42;
	add.s32 	%r1509, %r1508, 1;
	mul.lo.s32 	%r43, %r1509, %r1481;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6805, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6805, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1512, %r1478, %r38, %r37;
	mad.lo.s32 	%r1513, %r1512, %r1477, %r36;
	mad.lo.s32 	%r1514, %r1513, %r1476, %r35;
	shl.b32 	%r47, %r1514, 5;
	add.s32 	%r6810, %r47, %r40;
	mul.lo.s32 	%r1515, %r1507, %r1502;
	shl.b32 	%r51, %r1515, 5;
	sub.s32 	%r52, %r1491, %r1490;
	mul.lo.s32 	%r1516, %r1489, %r52;
	sub.s32 	%r53, %r1493, %r1492;
	mul.lo.s32 	%r1517, %r1516, %r53;
	sub.s32 	%r54, %r1495, %r1494;
	mul.lo.s32 	%r1518, %r1517, %r54;
	mul.lo.s32 	%r55, %r1518, 3;
	setp.ge.s32 	%p16, %r6810, %r55;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1519, %r40;
	add.s32 	%r1520, %r55, %r1519;
	sub.s32 	%r1521, %r1520, %r47;
	mul.lo.s32 	%r1522, %r1507, %r1476;
	mul.lo.s32 	%r1523, %r1522, %r1478;
	shl.b32 	%r1524, %r1523, 5;
	div.u32 	%r56, %r1521, %r1524;
	add.s32 	%r1525, %r56, 1;
	and.b32  	%r6807, %r1525, 3;
	setp.eq.s32 	%p17, %r6807, 0;
	mov.u32 	%r6808, %r6810;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6808, %r6810;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6808, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1526, 0;
	st.global.u32 	[%rd31], %r1526;
	add.s32 	%r6808, %r6808, %r51;
	add.s32 	%r6807, %r6807, -1;
	setp.ne.s32 	%p18, %r6807, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r56, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6808, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1527, 0;
	st.global.u32 	[%rd33], %r1527;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1527;
	add.s32 	%r1528, %r6808, %r51;
	add.s32 	%r1529, %r1528, %r51;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1527;
	add.s32 	%r1530, %r1529, %r51;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1527;
	add.s32 	%r6808, %r1530, %r51;
	setp.lt.s32 	%p20, %r6808, %r55;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1531, %r1482, %r41;
	div.s32 	%r1532, %r1531, %r42;
	mul.lo.s32 	%r1533, %r1532, %r1481;
	sub.s32 	%r1534, %r1533, %r41;
	sub.s32 	%r1535, %r1481, %r42;
	mul.lo.s32 	%r1536, %r1535, %r1478;
	mul.lo.s32 	%r65, %r1476, 384;
	add.s32 	%r1537, %r65, %r65;
	add.s32 	%r1538, %r1537, 128;
	mul.lo.s32 	%r1540, %r1507, 768;
	mul.lo.s32 	%r1541, %r1536, %r1538;
	mad.lo.s32 	%r66, %r1540, %r1534, %r1541;
	bra.uni 	$L__BB0_11;

$L__BB0_820:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6789, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6810, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6789;
	add.s32 	%r6810, %r6810, %r51;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6810, %r66;
	@%p21 bra 	$L__BB0_820;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6852, %r1476, %r37, %r35;
	mul.lo.s32 	%r70, %r1477, %r38;
	add.s32 	%r71, %r70, %r36;
	setp.ge.s32 	%p22, %r6852, %r1481;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r39, %r40;
	mov.u32 	%r1542, 31;
	sub.s32 	%r1543, %r1542, %r40;
	selp.b32 	%r1544, %r40, %r1543, %p23;
	shl.b32 	%r1545, %r1544, 2;
	mov.u32 	%r1546, 2;
	sub.s32 	%r72, %r1545, %r1484;
	shl.b32 	%r1547, %r1483, 2;
	mov.u32 	%r1548, 128;
	sub.s32 	%r73, %r1548, %r1547;
	add.s32 	%r74, %r1491, -1;
	add.s32 	%r75, %r1493, -1;
	add.s32 	%r76, %r1495, -1;
	sub.s32 	%r1549, %r1546, %r1484;
	add.s32 	%r77, %r1549, %r1545;
	mul.lo.s32 	%r1550, %r1482, %r1481;
	shl.b32 	%r78, %r1550, 6;
	add.s32 	%r79, %r1481, -1;
	add.s32 	%r80, %r72, 1;
	add.s32 	%r81, %r77, 1;
	shl.b32 	%r82, %r40, 1;
	or.b32  	%r83, %r82, 1;
	shr.u32 	%r1551, %r83, 31;
	add.s32 	%r1552, %r83, %r1551;
	shr.s32 	%r85, %r1552, 1;
	and.b32  	%r1553, %r1552, -2;
	sub.s32 	%r1554, %r83, %r1553;
	add.s32 	%r84, %r1554, %r78;
	rem.s32 	%r1600, %r80, %r73;
	add.s32 	%r1601, %r1600, %r73;
	rem.s32 	%r1602, %r1601, %r73;
	rem.s32 	%r1605, %r81, %r73;
	add.s32 	%r1606, %r1605, %r73;
	rem.s32 	%r1607, %r1606, %r73;
	mov.u32 	%r6811, %r6852;

$L__BB0_14:
	setp.ge.s32 	%p24, %r71, %r1482;
	@%p24 bra 	$L__BB0_35;

	setp.gt.s32 	%p25, %r1490, %r6811;
	setp.gt.s32 	%p26, %r1491, %r6811;
	selp.b32 	%r1555, %r6811, %r74, %p26;
	selp.b32 	%r1556, %r1490, %r1555, %p25;
	sub.s32 	%r1557, %r1556, %r1490;
	add.s32 	%r87, %r79, %r6811;
	rem.s32 	%r1558, %r72, %r73;
	add.s32 	%r1559, %r1558, %r73;
	rem.s32 	%r1560, %r1559, %r73;
	setp.gt.s32 	%p27, %r1494, %r1560;
	setp.gt.s32 	%p28, %r1495, %r1560;
	selp.b32 	%r1561, %r1560, %r76, %p28;
	selp.b32 	%r1562, %r1494, %r1561, %p27;
	rem.s32 	%r1563, %r77, %r73;
	add.s32 	%r1564, %r1563, %r73;
	rem.s32 	%r1565, %r1564, %r73;
	setp.gt.s32 	%p29, %r1494, %r1565;
	setp.gt.s32 	%p30, %r1495, %r1565;
	selp.b32 	%r1566, %r1565, %r76, %p30;
	selp.b32 	%r1567, %r1494, %r1566, %p29;
	sub.s32 	%r88, %r1562, %r1494;
	sub.s32 	%r89, %r1567, %r1494;
	mul.lo.s32 	%r90, %r1557, %r53;
	add.s32 	%r1568, %r1557, %r52;
	mul.lo.s32 	%r91, %r1568, %r53;
	add.s32 	%r1569, %r1568, %r52;
	mul.lo.s32 	%r92, %r1569, %r53;
	mov.u32 	%r6812, %r71;

$L__BB0_16:
	setp.gt.s32 	%p31, %r1493, %r6812;
	selp.b32 	%r1570, %r6812, %r75, %p31;
	setp.gt.s32 	%p32, %r1492, %r6812;
	selp.b32 	%r1571, %r1492, %r1570, %p32;
	sub.s32 	%r94, %r1571, %r1492;
	mul.lo.s32 	%r95, %r6812, %r1481;
	add.s32 	%r96, %r95, %r6811;
	shl.b32 	%r97, %r96, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1574, %r94, %r90;
	mul.lo.s32 	%r1575, %r1574, %r54;
	add.s32 	%r1576, %r88, %r1575;
	mul.wide.s32 	%rd41, %r1576, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1577, %r89, %r1575;
	mul.wide.s32 	%rd43, %r1577, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6813, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6813, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r101, %r96, 5;
	add.s32 	%r1578, %r101, %r40;
	shl.b32 	%r1579, %r1578, 2;
	add.s32 	%r1580, %r78, %r1579;
	mul.wide.s32 	%rd45, %r1580, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6813;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1583, %r94, %r91;
	mul.lo.s32 	%r1584, %r1583, %r54;
	add.s32 	%r1585, %r88, %r1584;
	mul.wide.s32 	%rd47, %r1585, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1586, %r89, %r1584;
	mul.wide.s32 	%rd49, %r1586, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6814, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6814, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1587, %r82, %r97;
	mul.wide.s32 	%rd51, %r1587, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6814;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1590, %r94, %r92;
	mul.lo.s32 	%r1591, %r1590, %r54;
	add.s32 	%r1592, %r88, %r1591;
	mul.wide.s32 	%rd53, %r1592, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1593, %r89, %r1591;
	mul.wide.s32 	%rd55, %r1593, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6815, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6815, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1594, %r87, %r1481;
	add.s32 	%r1595, %r1594, %r95;
	shl.b32 	%r108, %r1595, 5;
	add.s32 	%r1596, %r108, %r40;
	shl.b32 	%r1597, %r1596, 2;
	add.s32 	%r1598, %r78, %r1597;
	add.s32 	%r1599, %r1598, 2;
	mul.wide.s32 	%rd57, %r1599, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6815;
	setp.gt.s32 	%p36, %r1494, %r1602;
	setp.gt.s32 	%p37, %r1495, %r1602;
	selp.b32 	%r1603, %r1602, %r76, %p37;
	selp.b32 	%r1604, %r1494, %r1603, %p36;
	setp.gt.s32 	%p38, %r1494, %r1607;
	setp.gt.s32 	%p39, %r1495, %r1607;
	selp.b32 	%r1608, %r1607, %r76, %p39;
	selp.b32 	%r1609, %r1494, %r1608, %p38;
	sub.s32 	%r109, %r1604, %r1494;
	sub.s32 	%r110, %r1609, %r1494;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1612, %r94, %r90;
	mul.lo.s32 	%r1613, %r1612, %r54;
	add.s32 	%r1614, %r109, %r1613;
	mul.wide.s32 	%rd59, %r1614, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1615, %r110, %r1613;
	mul.wide.s32 	%rd61, %r1615, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6816, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6816, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1616, %r101, %r85;
	shl.b32 	%r1617, %r1616, 2;
	add.s32 	%r1618, %r84, %r1617;
	mul.wide.s32 	%rd63, %r1618, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6816;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1621, %r94, %r91;
	mul.lo.s32 	%r1622, %r1621, %r54;
	add.s32 	%r1623, %r109, %r1622;
	mul.wide.s32 	%rd65, %r1623, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1624, %r110, %r1622;
	mul.wide.s32 	%rd67, %r1624, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6817, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6817, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1625, %r83, %r97;
	mul.wide.s32 	%rd69, %r1625, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6817;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1628, %r94, %r92;
	mul.lo.s32 	%r1629, %r1628, %r54;
	add.s32 	%r1630, %r109, %r1629;
	mul.wide.s32 	%rd71, %r1630, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1631, %r110, %r1629;
	mul.wide.s32 	%rd73, %r1631, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6818, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6818, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1632, %r108, %r85;
	shl.b32 	%r1633, %r1632, 2;
	add.s32 	%r1634, %r84, %r1633;
	add.s32 	%r1635, %r1634, 2;
	mul.wide.s32 	%rd75, %r1635, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6818;
	add.s32 	%r6812, %r6812, %r1507;
	setp.lt.s32 	%p43, %r6812, %r1482;
	@%p43 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6811, %r6811, %r1502;
	setp.lt.s32 	%p44, %r6811, %r1481;
	@%p44 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r122, %r71, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6819, %r6852;

$L__BB0_38:
	setp.ge.s32 	%p46, %r122, %r1482;
	@%p46 bra 	$L__BB0_119;

	mov.u32 	%r6820, %r122;

$L__BB0_40:
	setp.ne.s32 	%p47, %r40, 0;
	@%p47 bra 	$L__BB0_118;

	shr.u32 	%r1637, %r6820, 31;
	add.s32 	%r1638, %r6820, %r1637;
	shr.s32 	%r1639, %r1638, 1;
	mad.lo.s32 	%r1640, %r1639, %r1481, %r6819;
	shl.b32 	%r126, %r1640, 5;
	add.s32 	%r127, %r6820, -2;
	mul.lo.s32 	%r128, %r127, %r1481;
	add.s32 	%r1641, %r1482, %r127;
	mul.lo.s32 	%r129, %r1641, %r1481;
	add.s32 	%r1642, %r1641, %r1482;
	mul.lo.s32 	%r130, %r1642, %r1481;
	add.s32 	%r131, %r128, %r1481;
	add.s32 	%r132, %r6820, -1;
	add.s32 	%r1643, %r1482, %r132;
	mul.lo.s32 	%r133, %r1643, %r1481;
	add.s32 	%r1644, %r1643, %r1482;
	mul.lo.s32 	%r134, %r1644, %r1481;
	add.s32 	%r1645, %r1482, %r6820;
	mul.lo.s32 	%r135, %r1645, %r1481;
	add.s32 	%r1646, %r1645, %r1482;
	mul.lo.s32 	%r136, %r1646, %r1481;
	mul.lo.s32 	%r137, %r6820, %r1481;
	add.s32 	%r138, %r137, %r1481;
	add.s32 	%r139, %r6820, 1;
	add.s32 	%r1647, %r1482, %r139;
	mul.lo.s32 	%r140, %r1647, %r1481;
	add.s32 	%r1648, %r1647, %r1482;
	mul.lo.s32 	%r141, %r1648, %r1481;
	add.s32 	%r142, %r138, %r1481;
	add.s32 	%r143, %r6820, 2;
	add.s32 	%r1649, %r1482, %r143;
	mul.lo.s32 	%r144, %r1649, %r1481;
	add.s32 	%r1650, %r1649, %r1482;
	mul.lo.s32 	%r145, %r1650, %r1481;
	mov.u32 	%r6823, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1651, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1651;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r147, %r1651, %r6819;
	setp.lt.s32 	%p48, %r147, %r1481;
	or.b32  	%r1652, %r127, %r147;
	setp.gt.s32 	%p49, %r1652, -1;
	and.pred  	%p50, %p48, %p49;
	setp.lt.s32 	%p51, %r127, %r1482;
	and.pred  	%p1, %p51, %p50;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p52, %f65, 0f40000000;
	@%p52 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1655, %r128, %r147;
	mul.wide.s32 	%rd80, %r1655, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6822, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6822, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1656, %r6823, %r126;
	mul.wide.s32 	%rd82, %r1656, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6822;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p53, %f3, 0f40000000;
	@%p53 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1659, %r129, %r147;
	mul.wide.s32 	%rd84, %r1659, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6824, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6824, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1660, %r6823, %r126;
	mul.wide.s32 	%rd86, %r1660, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6824;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p54, %f74, 0f40000000;
	@%p54 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1663, %r130, %r147;
	mul.wide.s32 	%rd88, %r1663, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6826, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6826, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1664, %r6823, %r126;
	mul.wide.s32 	%rd90, %r1664, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6826;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_57:
	or.b32  	%r1665, %r132, %r147;
	setp.gt.s32 	%p55, %r1665, -1;
	and.pred  	%p57, %p48, %p55;
	setp.le.s32 	%p58, %r6820, %r1482;
	and.pred  	%p2, %p58, %p57;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p59, %f4, 0f40000000;
	@%p59 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1668, %r131, %r147;
	mul.wide.s32 	%rd92, %r1668, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6828, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6828, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1669, %r6823, %r126;
	mul.wide.s32 	%rd94, %r1669, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6828;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p60, %f5, 0f40000000;
	@%p60 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1672, %r133, %r147;
	mul.wide.s32 	%rd96, %r1672, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6830, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6830, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1673, %r6823, %r126;
	mul.wide.s32 	%rd98, %r1673, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6830;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p61, %f6, 0f40000000;
	@%p61 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1676, %r134, %r147;
	mul.wide.s32 	%rd100, %r1676, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6832, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6832, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1677, %r6823, %r126;
	mul.wide.s32 	%rd102, %r1677, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6832;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_72:
	or.b32  	%r1678, %r6820, %r147;
	setp.gt.s32 	%p62, %r1678, -1;
	and.pred  	%p64, %p48, %p62;
	setp.lt.s32 	%p65, %r6820, %r1482;
	and.pred  	%p3, %p65, %p64;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p66, %f7, 0f40000000;
	@%p66 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1681, %r137, %r147;
	mul.wide.s32 	%rd104, %r1681, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6834, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6834, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1682, %r6823, %r126;
	mul.wide.s32 	%rd106, %r1682, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6834;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p67, %f90, 0f40000000;
	@%p67 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1685, %r135, %r147;
	mul.wide.s32 	%rd108, %r1685, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6836, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6836, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1686, %r6823, %r126;
	mul.wide.s32 	%rd110, %r1686, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6836;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p68, %f8, 0f40000000;
	@%p68 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1689, %r136, %r147;
	mul.wide.s32 	%rd112, %r1689, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6838, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6838, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1690, %r6823, %r126;
	mul.wide.s32 	%rd114, %r1690, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6838;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_87:
	or.b32  	%r1691, %r139, %r147;
	setp.gt.s32 	%p69, %r1691, -1;
	and.pred  	%p71, %p48, %p69;
	setp.lt.s32 	%p72, %r139, %r1482;
	and.pred  	%p4, %p72, %p71;
	@%p66 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1694, %r138, %r147;
	mul.wide.s32 	%rd116, %r1694, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6840, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6840, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1695, %r6823, %r126;
	mul.wide.s32 	%rd118, %r1695, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6840;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_92:
	@%p60 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1698, %r140, %r147;
	mul.wide.s32 	%rd120, %r1698, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6842, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6842, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1699, %r6823, %r126;
	mul.wide.s32 	%rd122, %r1699, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6842;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_97:
	@%p68 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1702, %r141, %r147;
	mul.wide.s32 	%rd124, %r1702, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6844, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6844, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1703, %r6823, %r126;
	mul.wide.s32 	%rd126, %r1703, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6844;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_102:
	or.b32  	%r1704, %r143, %r147;
	setp.gt.s32 	%p76, %r1704, -1;
	and.pred  	%p78, %p48, %p76;
	setp.lt.s32 	%p79, %r143, %r1482;
	and.pred  	%p5, %p79, %p78;
	@%p59 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1707, %r142, %r147;
	mul.wide.s32 	%rd128, %r1707, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6846, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6846, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1708, %r6823, %r126;
	mul.wide.s32 	%rd130, %r1708, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6846;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_107:
	@%p53 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1711, %r144, %r147;
	mul.wide.s32 	%rd132, %r1711, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6848, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6848, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1712, %r6823, %r126;
	mul.wide.s32 	%rd134, %r1712, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6848;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_112:
	@%p61 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1715, %r145, %r147;
	mul.wide.s32 	%rd136, %r1715, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6850, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6850, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1716, %r6823, %r126;
	mul.wide.s32 	%rd138, %r1716, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6850;
	add.s32 	%r6823, %r6823, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p83, %rd455, %rd141;
	@%p83 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6820, %r6820, %r42;
	setp.lt.s32 	%p84, %r6820, %r1482;
	@%p84 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6819, %r6819, %r1502;
	setp.lt.s32 	%p85, %r6819, %r1481;
	@%p85 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p86, %r1485, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p86 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r251, %r71, 1;
	shr.u32 	%r1764, %r1486, 31;
	add.s32 	%r1765, %r1486, %r1764;
	shr.u32 	%r1766, %r1765, 1;
	and.b32  	%r252, %r1766, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p96, %r251, %r1482;
	@%p96 bra 	$L__BB0_266;

	mov.u32 	%r6858, %r251;

$L__BB0_142:
	setp.ne.s32 	%p97, %r40, 0;
	@%p97 bra 	$L__BB0_265;

	shr.u32 	%r1768, %r6858, 31;
	add.s32 	%r1769, %r6858, %r1768;
	shr.s32 	%r1770, %r1769, 1;
	mad.lo.s32 	%r1771, %r1770, %r1481, %r6852;
	shl.b32 	%r256, %r1771, 5;
	add.s32 	%r257, %r6858, -2;
	mul.lo.s32 	%r258, %r257, %r1481;
	add.s32 	%r1772, %r1482, %r257;
	mul.lo.s32 	%r259, %r1772, %r1481;
	add.s32 	%r260, %r258, %r1481;
	add.s32 	%r261, %r6858, -1;
	add.s32 	%r1773, %r1482, %r261;
	mul.lo.s32 	%r262, %r1773, %r1481;
	add.s32 	%r1774, %r1482, %r6858;
	mul.lo.s32 	%r263, %r1774, %r1481;
	mul.lo.s32 	%r264, %r6858, %r1481;
	add.s32 	%r265, %r264, %r1481;
	add.s32 	%r266, %r6858, 1;
	add.s32 	%r1775, %r1482, %r266;
	mul.lo.s32 	%r267, %r1775, %r1481;
	add.s32 	%r268, %r265, %r1481;
	add.s32 	%r269, %r6858, 2;
	add.s32 	%r1776, %r1482, %r269;
	mul.lo.s32 	%r270, %r1776, %r1481;
	mov.u32 	%r6862, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1777, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1777;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r272, %r1777, %r6852;
	setp.lt.s32 	%p98, %r272, %r1481;
	or.b32  	%r1778, %r257, %r272;
	setp.gt.s32 	%p99, %r1778, -1;
	and.pred  	%p100, %p98, %p99;
	setp.lt.s32 	%p101, %r257, %r1482;
	and.pred  	%p6, %p101, %p100;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p102, %f133, 0f40000000;
	@%p102 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p103, %r252, 0;
	add.s32 	%r1780, %r258, %r272;
	shl.b32 	%r1781, %r1780, 1;
	mul.wide.s32 	%rd164, %r1781, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p103 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6860, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6860, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6860, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r277, %r6862, %r256;
	mul.wide.s32 	%rd166, %r277, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6860;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p104, %r252, 0;
	add.s32 	%r1785, %r259, %r272;
	shl.b32 	%r1786, %r1785, 1;
	mul.wide.s32 	%rd168, %r1786, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p104 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6861, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6861, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6861, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1789, %r277, 1;
	mul.wide.s32 	%rd170, %r1789, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6861;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p105, %f13, 0f40000000;
	@%p105 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p106, %r252, 0;
	add.s32 	%r1791, %r258, %r272;
	shl.b32 	%r1792, %r1791, 1;
	or.b32  	%r1793, %r1792, 1;
	mul.wide.s32 	%rd172, %r1793, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p106 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6863, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6863, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6863, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r288, %r6862, %r256;
	mul.wide.s32 	%rd174, %r288, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6863;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p107, %r252, 0;
	add.s32 	%r1797, %r259, %r272;
	shl.b32 	%r1798, %r1797, 1;
	or.b32  	%r1799, %r1798, 1;
	mul.wide.s32 	%rd176, %r1799, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p107 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6864, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6864, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6864, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1802, %r288, 1;
	mul.wide.s32 	%rd178, %r1802, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6864;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_168:
	or.b32  	%r1803, %r261, %r272;
	setp.gt.s32 	%p108, %r1803, -1;
	and.pred  	%p110, %p98, %p108;
	setp.le.s32 	%p111, %r6858, %r1482;
	and.pred  	%p7, %p111, %p110;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p112, %f16, 0f40000000;
	@%p112 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p113, %r252, 0;
	add.s32 	%r1805, %r260, %r272;
	shl.b32 	%r1806, %r1805, 1;
	mul.wide.s32 	%rd180, %r1806, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p113 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6866, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6866, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6866, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r299, %r6862, %r256;
	mul.wide.s32 	%rd182, %r299, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6866;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p114, %r252, 0;
	add.s32 	%r1810, %r262, %r272;
	shl.b32 	%r1811, %r1810, 1;
	mul.wide.s32 	%rd184, %r1811, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p114 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6867, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6867, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6867, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1814, %r299, 1;
	mul.wide.s32 	%rd186, %r1814, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6867;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p115, %f19, 0f40000000;
	@%p115 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p116, %r252, 0;
	add.s32 	%r1816, %r260, %r272;
	shl.b32 	%r1817, %r1816, 1;
	or.b32  	%r1818, %r1817, 1;
	mul.wide.s32 	%rd188, %r1818, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p116 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6869, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6869, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6869, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r310, %r6862, %r256;
	mul.wide.s32 	%rd190, %r310, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6869;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p117, %r252, 0;
	add.s32 	%r1822, %r262, %r272;
	shl.b32 	%r1823, %r1822, 1;
	or.b32  	%r1824, %r1823, 1;
	mul.wide.s32 	%rd192, %r1824, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p117 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6870, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6870, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6870, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1827, %r310, 1;
	mul.wide.s32 	%rd194, %r1827, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6870;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_192:
	or.b32  	%r1828, %r6858, %r272;
	setp.gt.s32 	%p118, %r1828, -1;
	and.pred  	%p120, %p98, %p118;
	setp.lt.s32 	%p121, %r6858, %r1482;
	and.pred  	%p8, %p121, %p120;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p122, %f22, 0f40000000;
	@%p122 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p123, %r252, 0;
	add.s32 	%r1830, %r264, %r272;
	shl.b32 	%r1831, %r1830, 1;
	mul.wide.s32 	%rd196, %r1831, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p123 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6872, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6872, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6872, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r321, %r6862, %r256;
	mul.wide.s32 	%rd198, %r321, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6872;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p124, %r252, 0;
	add.s32 	%r1835, %r263, %r272;
	shl.b32 	%r1836, %r1835, 1;
	mul.wide.s32 	%rd200, %r1836, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p124 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6873, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6873, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6873, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1839, %r321, 1;
	mul.wide.s32 	%rd202, %r1839, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6873;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p125, %f196, 0f40000000;
	@%p125 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p126, %r252, 0;
	add.s32 	%r1841, %r264, %r272;
	shl.b32 	%r1842, %r1841, 1;
	or.b32  	%r1843, %r1842, 1;
	mul.wide.s32 	%rd204, %r1843, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p126 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6875, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6875, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6875, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r332, %r6862, %r256;
	mul.wide.s32 	%rd206, %r332, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6875;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p127, %r252, 0;
	add.s32 	%r1847, %r263, %r272;
	shl.b32 	%r1848, %r1847, 1;
	or.b32  	%r1849, %r1848, 1;
	mul.wide.s32 	%rd208, %r1849, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p127 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6876, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6876, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6876, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1852, %r332, 1;
	mul.wide.s32 	%rd210, %r1852, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6876;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_216:
	or.b32  	%r1853, %r266, %r272;
	setp.gt.s32 	%p128, %r1853, -1;
	and.pred  	%p130, %p98, %p128;
	setp.lt.s32 	%p131, %r266, %r1482;
	and.pred  	%p9, %p131, %p130;
	@%p122 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p133, %r252, 0;
	add.s32 	%r1855, %r265, %r272;
	shl.b32 	%r1856, %r1855, 1;
	mul.wide.s32 	%rd212, %r1856, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p133 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6878, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6878, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6878, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r343, %r6862, %r256;
	mul.wide.s32 	%rd214, %r343, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6878;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p134, %r252, 0;
	add.s32 	%r1860, %r267, %r272;
	shl.b32 	%r1861, %r1860, 1;
	mul.wide.s32 	%rd216, %r1861, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p134 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6879, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6879, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6879, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1864, %r343, 1;
	mul.wide.s32 	%rd218, %r1864, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6879;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_228:
	@%p115 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p136, %r252, 0;
	add.s32 	%r1866, %r265, %r272;
	shl.b32 	%r1867, %r1866, 1;
	or.b32  	%r1868, %r1867, 1;
	mul.wide.s32 	%rd220, %r1868, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p136 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6881, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6881, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6881, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r354, %r6862, %r256;
	mul.wide.s32 	%rd222, %r354, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6881;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p137, %r252, 0;
	add.s32 	%r1872, %r267, %r272;
	shl.b32 	%r1873, %r1872, 1;
	or.b32  	%r1874, %r1873, 1;
	mul.wide.s32 	%rd224, %r1874, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p137 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6882, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6882, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6882, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1877, %r354, 1;
	mul.wide.s32 	%rd226, %r1877, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6882;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_240:
	or.b32  	%r1878, %r269, %r272;
	setp.gt.s32 	%p138, %r1878, -1;
	and.pred  	%p140, %p98, %p138;
	setp.lt.s32 	%p141, %r269, %r1482;
	and.pred  	%p10, %p141, %p140;
	@%p112 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p143, %r252, 0;
	add.s32 	%r1880, %r268, %r272;
	shl.b32 	%r1881, %r1880, 1;
	mul.wide.s32 	%rd228, %r1881, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p143 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6884, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6884, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6884, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r365, %r6862, %r256;
	mul.wide.s32 	%rd230, %r365, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6884;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p144, %r252, 0;
	add.s32 	%r1885, %r270, %r272;
	shl.b32 	%r1886, %r1885, 1;
	mul.wide.s32 	%rd232, %r1886, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p144 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6885, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6885, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6885, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1889, %r365, 1;
	mul.wide.s32 	%rd234, %r1889, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6885;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_252:
	@%p105 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p146, %r252, 0;
	add.s32 	%r1891, %r268, %r272;
	shl.b32 	%r1892, %r1891, 1;
	or.b32  	%r1893, %r1892, 1;
	mul.wide.s32 	%rd236, %r1893, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p146 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6887, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6887, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6887, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r376, %r6862, %r256;
	mul.wide.s32 	%rd238, %r376, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6887;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p147, %r252, 0;
	add.s32 	%r1897, %r270, %r272;
	shl.b32 	%r1898, %r1897, 1;
	or.b32  	%r1899, %r1898, 1;
	mul.wide.s32 	%rd240, %r1899, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p147 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6888, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6888, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6888, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1902, %r376, 1;
	mul.wide.s32 	%rd242, %r1902, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6888;
	add.s32 	%r6862, %r6862, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p148, %rd456, 0;
	@%p148 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6858, %r6858, %r42;
	setp.lt.s32 	%p149, %r6858, %r1482;
	@%p149 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6852, %r6852, %r1502;
	setp.lt.s32 	%p150, %r6852, %r1481;
	@%p150 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r225, %r70;
	mov.u32 	%r1717, 31;
	sub.s32 	%r1718, %r1717, %r40;
	setp.gt.s32 	%p88, %r39, %r40;
	selp.b32 	%r1719, %r40, %r1718, %p88;
	shl.b32 	%r1720, %r1719, 2;
	mov.u32 	%r1721, 2;
	sub.s32 	%r226, %r1720, %r1484;
	shl.b32 	%r1722, %r1483, 2;
	mov.u32 	%r1723, 128;
	sub.s32 	%r227, %r1723, %r1722;
	sub.s32 	%r1724, %r1721, %r1484;
	add.s32 	%r228, %r1724, %r1720;
	add.s32 	%r229, %r1481, -1;
	add.s32 	%r230, %r226, 1;
	add.s32 	%r231, %r228, 1;
	rem.s32 	%r1749, %r230, %r227;
	add.s32 	%r1750, %r1749, %r227;
	rem.s32 	%r242, %r1750, %r227;
	rem.s32 	%r1751, %r231, %r227;
	add.s32 	%r1752, %r1751, %r227;
	rem.s32 	%r243, %r1752, %r227;

$L__BB0_123:
	setp.ne.s32 	%p89, %r36, %r225;
	@%p89 bra 	$L__BB0_137;

	shl.b32 	%r233, %r6852, 1;
	rem.s32 	%r1725, %r226, %r227;
	add.s32 	%r1726, %r1725, %r227;
	rem.s32 	%r234, %r1726, %r227;
	rem.s32 	%r1727, %r228, %r227;
	add.s32 	%r1728, %r1727, %r227;
	rem.s32 	%r235, %r1728, %r227;
	@%p88 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1731, %r233, %r227;
	add.s32 	%r1732, %r1731, %r234;
	mul.wide.s32 	%rd144, %r1732, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1733, %r1731, %r235;
	mul.wide.s32 	%rd146, %r1733, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6853, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6853, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1734, %r6852, 5;
	add.s32 	%r1735, %r1734, %r40;
	shl.b32 	%r1736, %r1735, 2;
	mul.wide.s32 	%rd148, %r1736, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6853;
	@%p88 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1739, %r233, 1;
	mul.lo.s32 	%r1740, %r1739, %r227;
	add.s32 	%r1741, %r1740, %r234;
	mul.wide.s32 	%rd149, %r1741, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1742, %r1740, %r235;
	mul.wide.s32 	%rd151, %r1742, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6854, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6854, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1743, %r229, %r6852;
	rem.s32 	%r1744, %r1743, %r1481;
	shl.b32 	%r1745, %r1744, 5;
	add.s32 	%r1746, %r1745, %r40;
	shl.b32 	%r1747, %r1746, 2;
	or.b32  	%r1748, %r1747, 2;
	mul.wide.s32 	%rd153, %r1748, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6854;
	@%p88 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1755, %r233, %r227;
	add.s32 	%r1756, %r1755, %r242;
	mul.wide.s32 	%rd154, %r1756, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1757, %r1755, %r243;
	mul.wide.s32 	%rd156, %r1757, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6855, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6855, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6855;
	@%p88 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1760, %r233, 1;
	mul.lo.s32 	%r1761, %r1760, %r227;
	add.s32 	%r1762, %r1761, %r242;
	mul.wide.s32 	%rd158, %r1762, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1763, %r1761, %r243;
	mul.wide.s32 	%rd160, %r1763, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6856, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6856, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6856;

$L__BB0_137:
	add.s32 	%r6852, %r6852, %r1502;
	setp.lt.s32 	%p94, %r6852, %r1481;
	@%p94 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1904, %r1476, -1;
	mad.lo.s32 	%r1905, %r1477, 576, 128;
	mul.lo.s32 	%r1906, %r1905, %r1904;
	add.s32 	%r1907, %r65, -64;
	add.s32 	%r1908, %r1907, %r65;
	add.s32 	%r1909, %r1477, -1;
	mad.lo.s32 	%r1910, %r1908, %r1909, %r1906;
	mul.lo.s32 	%r1911, %r1904, %r1477;
	mul.lo.s32 	%r1912, %r1911, 320;
	mad.lo.s32 	%r1913, %r1907, %r1909, %r1912;
	add.s32 	%r385, %r1913, %r1910;
	setp.lt.s32 	%p151, %r385, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6893, {low,high};}

	// end inline asm
	@%p151 bra 	$L__BB0_270;

	mov.u32 	%r6892, 0;
	mov.u32 	%r6890, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6890], %r6893;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1916, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6890+4], %r1916;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1917, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6890+8], %r1917;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1918, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6890+12], %r1918;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6893, {low,high};}

	// end inline asm
	add.s32 	%r6890, %r6890, 16;
	add.s32 	%r6892, %r6892, 4;
	setp.lt.s32 	%p152, %r6892, %r385;
	@%p152 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1920, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1921, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1922, 31;
	sub.s32 	%r1923, %r1922, %r40;
	setp.gt.s32 	%p153, %r39, %r40;
	selp.b32 	%r1924, %r40, %r1923, %p153;
	shl.b32 	%r1925, %r1924, 2;
	sub.s32 	%r396, %r1925, %r1484;
	shl.b32 	%r1926, %r1483, 2;
	mov.u32 	%r1927, 128;
	sub.s32 	%r397, %r1927, %r1926;
	rem.s32 	%r1928, %r396, %r397;
	add.s32 	%r1929, %r1928, %r397;
	rem.s32 	%r398, %r1929, %r397;
	add.s32 	%r1930, %r396, 2;
	rem.s32 	%r1931, %r1930, %r397;
	add.s32 	%r1932, %r1931, %r397;
	rem.s32 	%r399, %r1932, %r397;
	mul.lo.s32 	%r1933, %r398, 6;
	mul.lo.s32 	%r1934, %r399, 6;
	mul.wide.s32 	%rd245, %r1933, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1934, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6894, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6894, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6895, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6895, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6896, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6896, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6897, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6897, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1943, %r396, 1;
	rem.s32 	%r1944, %r1943, %r397;
	add.s32 	%r1945, %r1944, %r397;
	rem.s32 	%r412, %r1945, %r397;
	add.s32 	%r1946, %r396, 3;
	rem.s32 	%r1947, %r1946, %r397;
	add.s32 	%r1948, %r1947, %r397;
	rem.s32 	%r413, %r1948, %r397;
	mul.lo.s32 	%r1949, %r412, 6;
	mul.lo.s32 	%r1950, %r413, 6;
	mul.wide.s32 	%rd247, %r1949, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1950, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6898, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6898, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6899, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6899, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6900, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6900, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6901, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6901, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1959, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1959;
	// begin inline asm
	mov.u32 %r1960, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1960;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p162, %rd24, 0;
	@%p162 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1961, %nctaid.y;
	mov.u32 	%r1962, %nctaid.x;
	mul.lo.s32 	%r1963, %r1962, %r1961;
	mov.u32 	%r1964, %nctaid.z;
	mul.lo.s32 	%r426, %r1963, %r1964;
	neg.s32 	%r1965, %r36;
	add.s32 	%r1966, %r40, %r35;
	setp.ne.s32 	%p163, %r1966, %r1965;
	mov.u32 	%r1967, %ctaid.x;
	add.s32 	%r427, %r1967, %r37;
	neg.s32 	%r428, %r38;
	bar.sync 	0;
	@%p163 bra 	$L__BB0_300;

	setp.eq.s32 	%p164, %r427, %r428;
	mov.u32 	%r1970, -2147483647;
	sub.s32 	%r1971, %r1970, %r426;
	selp.b32 	%r1969, %r1971, 1, %p164;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1968,[%rd25],%r1969;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1972, [%rd25];
	xor.b32  	%r1973, %r1972, %r1968;
	setp.gt.s32 	%p165, %r1973, -1;
	@%p165 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1974,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p166, %r43, 1;
	@%p166 bra 	$L__BB0_819;

	shr.s32 	%r1976, %r1486, 31;
	shr.u32 	%r1977, %r1976, 30;
	add.s32 	%r1978, %r1486, %r1977;
	shr.s32 	%r430, %r1978, 2;
	add.s32 	%r1979, %r40, 24;
	mul.hi.s32 	%r1980, %r1979, 1374389535;
	shr.u32 	%r1981, %r1980, 31;
	shr.s32 	%r1982, %r1980, 3;
	add.s32 	%r1983, %r1982, %r1981;
	mul.lo.s32 	%r1984, %r1983, 25;
	sub.s32 	%r1985, %r1979, %r1984;
	add.s32 	%r1986, %r40, 26;
	mul.hi.s32 	%r1987, %r1986, 1374389535;
	shr.u32 	%r1988, %r1987, 31;
	shr.s32 	%r1989, %r1987, 3;
	add.s32 	%r1990, %r1989, %r1988;
	mul.lo.s32 	%r1991, %r1990, 25;
	sub.s32 	%r1992, %r1986, %r1991;
	shr.u32 	%r1993, %r1486, 31;
	add.s32 	%r1994, %r1486, %r1993;
	and.b32  	%r1995, %r1994, -2;
	sub.s32 	%r431, %r1486, %r1995;
	setp.lt.s32 	%p167, %r40, 25;
	selp.b32 	%r432, %r1985, %r40, %p167;
	setp.lt.s32 	%p168, %r398, %r1495;
	setp.ge.s32 	%p169, %r398, %r1494;
	and.pred  	%p11, %p168, %p169;
	setp.lt.s32 	%p170, %r412, %r1495;
	setp.ge.s32 	%p171, %r412, %r1494;
	and.pred  	%p12, %p170, %p171;
	setp.lt.s32 	%p172, %r399, %r1495;
	setp.ge.s32 	%p173, %r399, %r1494;
	and.pred  	%p13, %p172, %p173;
	setp.lt.s32 	%p174, %r413, %r1495;
	setp.ge.s32 	%p175, %r413, %r1494;
	and.pred  	%p14, %p174, %p175;
	selp.b32 	%r433, %r1992, %r40, %p167;
	mov.u32 	%r1975, 0;
	// begin inline asm
	{mov.u32 %r1996, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2321, %r1996, 8;
	add.s32 	%r2322, %r2321, -8192;
	or.b32  	%r2000, %r2322, 31;
	mov.u32 	%r7223, %r1921;
	mov.u32 	%r7224, %r1921;
	mov.u32 	%r7233, %r1921;
	mov.u32 	%r7234, %r1921;
	mov.u32 	%r7235, %r1921;
	mov.u32 	%r7236, %r1921;
	mov.u32 	%r7225, %r1921;
	mov.u32 	%r7226, %r1921;
	mov.u32 	%r7227, %r1921;
	mov.u32 	%r7228, %r1921;
	mov.u32 	%r7229, %r1921;
	mov.u32 	%r7230, %r1921;
	mov.u32 	%r7237, %r1921;
	mov.u32 	%r7238, %r1921;
	mov.u32 	%r7239, %r1921;
	mov.u32 	%r7240, %r1921;
	mov.u32 	%r7241, %r1921;
	mov.u32 	%r7242, %r1921;
	mov.u32 	%r7231, %r1921;
	mov.u32 	%r7232, %r1921;
	mov.u32 	%r7243, %r1921;
	mov.u32 	%r7244, %r1921;
	mov.u32 	%r7175, %r1921;
	mov.u32 	%r7176, %r1921;
	mov.u32 	%r7163, %r1921;
	mov.u32 	%r7164, %r1921;
	mov.u32 	%r7165, %r1921;
	mov.u32 	%r7166, %r1921;
	mov.u32 	%r7177, %r1921;
	mov.u32 	%r7178, %r1921;
	mov.u32 	%r7179, %r1921;
	mov.u32 	%r7180, %r1921;
	mov.u32 	%r7181, %r1921;
	mov.u32 	%r7182, %r1921;
	mov.u32 	%r7167, %r1921;
	mov.u32 	%r7168, %r1921;
	mov.u32 	%r7169, %r1921;
	mov.u32 	%r7170, %r1921;
	mov.u32 	%r7183, %r1921;
	mov.u32 	%r7184, %r1921;
	mov.u32 	%r7185, %r1921;
	mov.u32 	%r7186, %r1921;
	mov.u32 	%r6944, %r1921;
	mov.u32 	%r6945, %r1921;
	mov.u32 	%r7171, %r1921;
	mov.u32 	%r7172, %r1921;
	mov.u32 	%r6948, %r1921;
	mov.u32 	%r6949, %r1921;
	mov.u32 	%r6950, %r1921;
	mov.u32 	%r6951, %r1921;
	mov.u32 	%r6952, %r1921;
	mov.u32 	%r6953, %r1921;
	mov.u32 	%r7147, %r1921;
	mov.u32 	%r7148, %r1921;
	mov.u32 	%r6956, %r1921;
	mov.u32 	%r7149, %r1921;
	mov.u32 	%r6958, %r1921;
	mov.u32 	%r6959, %r1921;
	mov.u32 	%r7150, %r1921;
	mov.u32 	%r6961, %r1921;
	mov.u32 	%r6962, %r1921;
	mov.u32 	%r6963, %r1921;
	mov.u32 	%r7187, %r1921;
	mov.u32 	%r7188, %r1921;
	mov.u32 	%r6966, %r1921;
	mov.u32 	%r6967, %r1921;
	mov.u32 	%r7173, %r1921;
	mov.u32 	%r7174, %r1921;
	mov.u32 	%r6970, %r1921;
	mov.u32 	%r6971, %r1921;
	mov.u32 	%r6972, %r1921;
	mov.u32 	%r6973, %r1921;
	mov.u32 	%r6974, %r1921;
	mov.u32 	%r6975, %r1921;
	mov.u32 	%r6976, %r1921;
	mov.u32 	%r6977, %r1921;
	mov.u32 	%r6978, %r1921;
	mov.u32 	%r6979, %r1921;
	mov.u32 	%r6980, %r1921;
	mov.u32 	%r6981, %r1921;
	mov.u32 	%r6982, %r1921;
	mov.u32 	%r6983, %r1921;
	mov.u32 	%r6984, %r1921;
	mov.u32 	%r6985, %r1921;
	mov.u32 	%r6986, %r1921;
	mov.u32 	%r7151, %r1921;
	mov.u32 	%r6988, %r1921;
	mov.u32 	%r6989, %r1921;
	mov.u32 	%r6990, %r1921;
	mov.u32 	%r6991, %r1921;
	mov.u32 	%r6992, %r1921;
	mov.u32 	%r6993, %r1921;
	mov.u32 	%r6994, %r1921;
	mov.u32 	%r7152, %r1921;
	mov.u32 	%r6996, %r1921;
	mov.u32 	%r7189, %r1921;
	mov.u32 	%r6998, %r1921;
	mov.u32 	%r6999, %r1921;
	mov.u32 	%r7000, %r1921;
	mov.u32 	%r7001, %r1921;
	mov.u32 	%r7190, %r1921;
	mov.u32 	%r7003, %r1921;
	mov.u32 	%r7004, %r1921;
	mov.u32 	%r7005, %r1921;
	mov.u32 	%r7006, %r1921;
	mov.u32 	%r7007, %r1921;
	mov.u32 	%r7008, %r1921;
	mov.u32 	%r7009, %r1921;
	mov.u32 	%r7010, %r1921;
	mov.u32 	%r7011, %r1921;
	mov.u32 	%r7012, %r1921;
	mov.u32 	%r7013, %r1921;
	mov.u32 	%r7014, %r1921;
	mov.u32 	%r7015, %r1921;
	mov.u32 	%r7016, %r1921;
	mov.u32 	%r7017, %r1921;
	mov.u32 	%r7018, %r1921;
	mov.u32 	%r7019, %r1921;
	mov.u32 	%r7020, %r1921;
	mov.u32 	%r7021, %r1921;
	mov.u32 	%r7022, %r1921;
	mov.u32 	%r7023, %r1921;
	mov.u32 	%r7024, %r1921;
	mov.u32 	%r7025, %r1921;
	mov.u32 	%r7026, %r1921;
	mov.u32 	%r7027, %r1921;
	mov.u32 	%r7028, %r1921;
	mov.u32 	%r7029, %r1921;
	mov.u32 	%r7030, %r1921;
	mov.u32 	%r7031, %r1921;
	mov.u32 	%r7032, %r1921;
	mov.u32 	%r7033, %r1921;
	mov.u32 	%r7034, %r1921;
	mov.u32 	%r7035, %r1921;
	mov.u32 	%r7036, %r1921;
	mov.u32 	%r7037, %r1921;
	mov.u32 	%r7038, %r1921;
	mov.u32 	%r7039, %r1921;
	mov.u32 	%r7040, %r1921;
	mov.u32 	%r7041, %r1921;
	mov.u32 	%r7042, %r1921;
	mov.u32 	%r7043, %r1921;
	mov.u32 	%r7044, %r1921;
	mov.u32 	%r7045, %r1921;
	mov.u32 	%r7046, %r1921;
	mov.u32 	%r7047, %r1921;
	mov.u32 	%r7048, %r1921;
	mov.u32 	%r7049, %r1921;
	mov.u32 	%r7050, %r1921;
	mov.u32 	%r7051, %r1921;
	mov.u32 	%r7052, %r1975;

$L__BB0_302:
	mov.u32 	%r527, %r7152;
	mov.u32 	%r523, %r6991;
	mov.u32 	%r519, %r7151;
	mov.u32 	%r517, %r6985;
	mov.u32 	%r515, %r6983;
	mov.u32 	%r507, %r6975;
	mov.u32 	%r6991, %r7150;
	mov.u32 	%r489, %r7149;
	mov.u32 	%r6985, %r7148;
	mov.u32 	%r486, %r7147;
	mov.u32 	%r481, %r6949;
	mov.u32 	%r480, %r6948;
	mov.u32 	%r6799, %ctaid.y;
	mov.u32 	%r6798, %ctaid.z;
	mov.u32 	%r2011, 1;
	not.b32 	%r2285, %r6798;
	mov.u32 	%r2277, -1;
	add.s32 	%r2286, %r1479, %r2285;
	not.b32 	%r2288, %r6799;
	add.s32 	%r2289, %r1478, %r2288;
	add.s32 	%r2290, %r2289, %r2286;
	mul.lo.s32 	%r2291, %r2290, %r1480;
	add.s32 	%r2292, %r2291, %r1481;
	not.b32 	%r2294, %r35;
	add.s32 	%r2295, %r1476, %r2294;
	mad.lo.s32 	%r2296, %r2289, %r1476, %r2295;
	not.b32 	%r2298, %r36;
	add.s32 	%r2299, %r1477, %r2298;
	mad.lo.s32 	%r2300, %r2286, %r1477, %r2299;
	add.s32 	%r2301, %r2296, %r2300;
	shl.b32 	%r2302, %r2301, 1;
	add.s32 	%r2303, %r2292, %r2302;
	add.s32 	%r2304, %r2303, %r7052;
	add.s32 	%r2305, %r7052, %r2291;
	div.s32 	%r2306, %r2304, %r1481;
	mul.lo.s32 	%r2307, %r2306, %r1481;
	sub.s32 	%r2310, %r42, %r1481;
	sub.s32 	%r2311, %r2296, %r2300;
	shl.b32 	%r2312, %r2311, 1;
	add.s32 	%r2313, %r2312, %r1482;
	mad.lo.s32 	%r2314, %r2306, %r42, %r2313;
	mad.lo.s32 	%r2315, %r2306, %r2310, %r2305;
	div.s32 	%r2316, %r2314, %r1482;
	mul.lo.s32 	%r2317, %r2316, %r1482;
	sub.s32 	%r2320, %r1503, %r1482;
	mov.u32 	%r2095, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1997,%r1920,%r1975,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2003, %r6895, %r1997, %p15;
	// begin inline asm
	{mul.f16x2 %r7136,%r2003,%r7051;
}
	// end inline asm
	selp.b32 	%r2006, %r6899, %r1997, %p15;
	// begin inline asm
	{mul.f16x2 %r7134,%r2006,%r7050;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2009,%r1920,%r2011,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2015, %r6895, %r2009, %p15;
	// begin inline asm
	{mul.f16x2 %r7135,%r2015,%r7049;
}
	// end inline asm
	selp.b32 	%r2018, %r6899, %r2009, %p15;
	// begin inline asm
	{mul.f16x2 %r7133,%r2018,%r7048;
}
	// end inline asm
	mov.u32 	%r2023, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2021,%r1920,%r2023,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2027, %r6895, %r2021, %p15;
	// begin inline asm
	{mul.f16x2 %r7132,%r2027,%r7047;
}
	// end inline asm
	selp.b32 	%r2030, %r6899, %r2021, %p15;
	// begin inline asm
	{mul.f16x2 %r7131,%r2030,%r7046;
}
	// end inline asm
	mov.u32 	%r2035, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2033,%r1920,%r2035,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2039, %r6895, %r2033, %p15;
	// begin inline asm
	{mul.f16x2 %r7130,%r2039,%r7244;
}
	// end inline asm
	selp.b32 	%r2042, %r6899, %r2033, %p15;
	// begin inline asm
	{mul.f16x2 %r7128,%r2042,%r7243;
}
	// end inline asm
	mov.u32 	%r2047, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2045,%r1920,%r2047,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2051, %r6895, %r2045, %p15;
	// begin inline asm
	{mul.f16x2 %r7129,%r2051,%r7045;
}
	// end inline asm
	selp.b32 	%r2054, %r6899, %r2045, %p15;
	// begin inline asm
	{mul.f16x2 %r7127,%r2054,%r7044;
}
	// end inline asm
	mov.u32 	%r2059, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2057,%r1920,%r2059,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2063, %r6895, %r2057, %p15;
	// begin inline asm
	{mul.f16x2 %r7126,%r2063,%r7043;
}
	// end inline asm
	selp.b32 	%r2066, %r6899, %r2057, %p15;
	// begin inline asm
	{mul.f16x2 %r7123,%r2066,%r7042;
}
	// end inline asm
	mov.u32 	%r2071, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2069,%r1920,%r2071,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2075, %r6895, %r2069, %p15;
	// begin inline asm
	{mul.f16x2 %r7125,%r2075,%r7041;
}
	// end inline asm
	selp.b32 	%r2078, %r6899, %r2069, %p15;
	// begin inline asm
	{mul.f16x2 %r7122,%r2078,%r7040;
}
	// end inline asm
	mov.u32 	%r2083, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2081,%r1920,%r2083,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2087, %r6895, %r2081, %p15;
	// begin inline asm
	{mul.f16x2 %r7124,%r2087,%r7039;
}
	// end inline asm
	selp.b32 	%r2090, %r6899, %r2081, %p15;
	// begin inline asm
	{mul.f16x2 %r7121,%r2090,%r7038;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2093,%r1920,%r2095,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2099, %r6895, %r2093, %p15;
	// begin inline asm
	{mul.f16x2 %r7120,%r2099,%r7037;
}
	// end inline asm
	selp.b32 	%r2102, %r6899, %r2093, %p15;
	// begin inline asm
	{mul.f16x2 %r7117,%r2102,%r7036;
}
	// end inline asm
	mov.u32 	%r2107, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2105,%r1920,%r2107,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2111, %r6895, %r2105, %p15;
	// begin inline asm
	{mul.f16x2 %r7119,%r2111,%r7035;
}
	// end inline asm
	selp.b32 	%r2114, %r6899, %r2105, %p15;
	// begin inline asm
	{mul.f16x2 %r7116,%r2114,%r7034;
}
	// end inline asm
	mov.u32 	%r2119, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2117,%r1920,%r2119,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2123, %r6895, %r2117, %p15;
	// begin inline asm
	{mul.f16x2 %r7118,%r2123,%r7033;
}
	// end inline asm
	selp.b32 	%r2126, %r6899, %r2117, %p15;
	// begin inline asm
	{mul.f16x2 %r7115,%r2126,%r7032;
}
	// end inline asm
	mov.u32 	%r2131, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2129,%r1920,%r2131,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2135, %r6895, %r2129, %p15;
	// begin inline asm
	{mul.f16x2 %r7114,%r2135,%r7232;
}
	// end inline asm
	selp.b32 	%r2138, %r6899, %r2129, %p15;
	// begin inline asm
	{mul.f16x2 %r7113,%r2138,%r7231;
}
	// end inline asm
	mov.u32 	%r2143, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2141,%r1920,%r2143,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2147, %r6895, %r2141, %p15;
	// begin inline asm
	{mul.f16x2 %r7112,%r2147,%r7242;
}
	// end inline asm
	selp.b32 	%r2150, %r6899, %r2141, %p15;
	// begin inline asm
	{mul.f16x2 %r7110,%r2150,%r7240;
}
	// end inline asm
	mov.u32 	%r2155, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2153,%r1920,%r2155,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2159, %r6895, %r2153, %p15;
	// begin inline asm
	{mul.f16x2 %r7111,%r2159,%r7241;
}
	// end inline asm
	selp.b32 	%r2162, %r6899, %r2153, %p15;
	// begin inline asm
	{mul.f16x2 %r7109,%r2162,%r7239;
}
	// end inline asm
	mov.u32 	%r2167, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2165,%r1920,%r2167,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2171, %r6895, %r2165, %p15;
	// begin inline asm
	{mul.f16x2 %r7108,%r2171,%r7238;
}
	// end inline asm
	selp.b32 	%r2174, %r6899, %r2165, %p15;
	// begin inline asm
	{mul.f16x2 %r7105,%r2174,%r7237;
}
	// end inline asm
	mov.u32 	%r2179, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2177,%r1920,%r2179,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2183, %r6895, %r2177, %p15;
	// begin inline asm
	{mul.f16x2 %r7107,%r2183,%r7031;
}
	// end inline asm
	selp.b32 	%r2186, %r6899, %r2177, %p15;
	// begin inline asm
	{mul.f16x2 %r7104,%r2186,%r7030;
}
	// end inline asm
	mov.u32 	%r2191, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2189,%r1920,%r2191,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2195, %r6895, %r2189, %p15;
	// begin inline asm
	{mul.f16x2 %r7106,%r2195,%r7029;
}
	// end inline asm
	selp.b32 	%r2198, %r6899, %r2189, %p15;
	// begin inline asm
	{mul.f16x2 %r7103,%r2198,%r7028;
}
	// end inline asm
	mov.u32 	%r2203, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2201,%r1920,%r2203,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2207, %r6895, %r2201, %p15;
	// begin inline asm
	{mul.f16x2 %r7102,%r2207,%r7230;
}
	// end inline asm
	selp.b32 	%r2210, %r6899, %r2201, %p15;
	// begin inline asm
	{mul.f16x2 %r7099,%r2210,%r7228;
}
	// end inline asm
	mov.u32 	%r2215, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2213,%r1920,%r2215,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2219, %r6895, %r2213, %p15;
	// begin inline asm
	{mul.f16x2 %r7101,%r2219,%r7229;
}
	// end inline asm
	selp.b32 	%r2222, %r6899, %r2213, %p15;
	// begin inline asm
	{mul.f16x2 %r7098,%r2222,%r7227;
}
	// end inline asm
	mov.u32 	%r2227, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2225,%r1920,%r2227,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2231, %r6895, %r2225, %p15;
	// begin inline asm
	{mul.f16x2 %r7100,%r2231,%r7027;
}
	// end inline asm
	selp.b32 	%r2234, %r6899, %r2225, %p15;
	// begin inline asm
	{mul.f16x2 %r7097,%r2234,%r7026;
}
	// end inline asm
	mov.u32 	%r2239, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2237,%r1920,%r2239,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2243, %r6895, %r2237, %p15;
	// begin inline asm
	{mul.f16x2 %r7096,%r2243,%r7226;
}
	// end inline asm
	selp.b32 	%r2246, %r6899, %r2237, %p15;
	// begin inline asm
	{mul.f16x2 %r7095,%r2246,%r7225;
}
	// end inline asm
	mov.u32 	%r2251, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2249,%r1920,%r2251,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2255, %r6895, %r2249, %p15;
	// begin inline asm
	{mul.f16x2 %r7094,%r2255,%r7236;
}
	// end inline asm
	selp.b32 	%r2258, %r6899, %r2249, %p15;
	// begin inline asm
	{mul.f16x2 %r7092,%r2258,%r7234;
}
	// end inline asm
	mov.u32 	%r2263, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2261,%r1920,%r2263,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2267, %r6895, %r2261, %p15;
	// begin inline asm
	{mul.f16x2 %r7093,%r2267,%r7235;
}
	// end inline asm
	selp.b32 	%r2270, %r6899, %r2261, %p15;
	// begin inline asm
	{mul.f16x2 %r7091,%r2270,%r7233;
}
	// end inline asm
	mov.u32 	%r2275, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2273,%r1920,%r2275,%r2000,%r2277;
}
	// end inline asm
	selp.b32 	%r2279, %r6895, %r2273, %p15;
	// begin inline asm
	{mul.f16x2 %r7090,%r2279,%r7224;
}
	// end inline asm
	selp.b32 	%r2282, %r6899, %r2273, %p15;
	// begin inline asm
	{mul.f16x2 %r7089,%r2282,%r7223;
}
	// end inline asm
	sub.s32 	%r633, %r2304, %r2307;
	sub.s32 	%r634, %r2314, %r2317;
	mad.lo.s32 	%r635, %r2316, %r2320, %r2315;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2369, %r635, 1;
	mul.wide.s32 	%rd256, %r2369, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p86 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2572, %r1498, 1;
	setp.lt.s32 	%p183, %r635, %r2572;
	setp.eq.s32 	%p184, %r430, %r40;
	setp.gt.s32 	%p185, %r635, -1;
	and.pred  	%p186, %p184, %p185;
	and.pred  	%p187, %p183, %p186;
	@%p187 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7055, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7056, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2372, %r1498, 1;
	setp.lt.s32 	%p178, %r635, %r2372;
	setp.gt.s32 	%p179, %r635, -1;
	and.pred  	%p180, %p179, %p178;
	@%p180 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7053, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7054, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7055, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7056, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2580, 0;
	mov.u32 	%r2591, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2578,%r6893,%r2580,%r2000,%r2591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2583,%r7055,%r2578;
}
	// end inline asm
	mov.u32 	%r2589, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2587,%r6893,%r2589,%r2000,%r2591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2592,%r7056,%r2587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7058,%r2583,%r2592;
}
	// end inline asm
	setp.eq.s32 	%p188, %r431, 0;
	mov.u32 	%r7057, %r7058;
	@%p188 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7057, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7136,%r7136,%r7057;
}
	// end inline asm
	setp.eq.s32 	%p189, %r431, 1;
	@%p189 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7058, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7134,%r7134,%r7058;
}
	// end inline asm
	mov.u32 	%r2613, 2;
	mov.u32 	%r2624, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2611,%r6893,%r2613,%r2000,%r2624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2616,%r7055,%r2611;
}
	// end inline asm
	mov.u32 	%r2622, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2620,%r6893,%r2622,%r2000,%r2624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2625,%r7056,%r2620;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7060,%r2616,%r2625;
}
	// end inline asm
	mov.u32 	%r7059, %r7060;
	@%p188 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7059, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7135,%r7135,%r7059;
}
	// end inline asm
	@%p189 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7060, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7133,%r7133,%r7060;
}
	// end inline asm
	mov.u32 	%r2646, 4;
	mov.u32 	%r2657, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2644,%r6893,%r2646,%r2000,%r2657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2649,%r7055,%r2644;
}
	// end inline asm
	mov.u32 	%r2655, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2653,%r6893,%r2655,%r2000,%r2657;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2658,%r7056,%r2653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r2649,%r2658;
}
	// end inline asm
	mov.u32 	%r7061, %r7062;
	@%p188 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7061, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7132,%r7132,%r7061;
}
	// end inline asm
	@%p189 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7062, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7131,%r7131,%r7062;
}
	// end inline asm
	mov.u32 	%r2679, 6;
	mov.u32 	%r2690, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2677,%r6893,%r2679,%r2000,%r2690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2682,%r7055,%r2677;
}
	// end inline asm
	mov.u32 	%r2688, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2686,%r6893,%r2688,%r2000,%r2690;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2691,%r7056,%r2686;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7064,%r2682,%r2691;
}
	// end inline asm
	mov.u32 	%r7063, %r7064;
	@%p188 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7063, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7130,%r7130,%r7063;
}
	// end inline asm
	@%p189 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7064, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7128,%r7128,%r7064;
}
	// end inline asm
	mov.u32 	%r2712, 8;
	mov.u32 	%r2723, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2710,%r6893,%r2712,%r2000,%r2723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2715,%r7055,%r2710;
}
	// end inline asm
	mov.u32 	%r2721, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2719,%r6893,%r2721,%r2000,%r2723;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2724,%r7056,%r2719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r2715,%r2724;
}
	// end inline asm
	mov.u32 	%r7065, %r7066;
	@%p188 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7065, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7129,%r7129,%r7065;
}
	// end inline asm
	@%p189 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7066, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7127,%r7127,%r7066;
}
	// end inline asm
	mov.u32 	%r2745, 10;
	mov.u32 	%r2756, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2743,%r6893,%r2745,%r2000,%r2756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2748,%r7055,%r2743;
}
	// end inline asm
	mov.u32 	%r2754, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2752,%r6893,%r2754,%r2000,%r2756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2757,%r7056,%r2752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7068,%r2748,%r2757;
}
	// end inline asm
	mov.u32 	%r7067, %r7068;
	@%p188 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7067, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7126,%r7126,%r7067;
}
	// end inline asm
	@%p189 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7068, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7123,%r7123,%r7068;
}
	// end inline asm
	mov.u32 	%r2778, 12;
	mov.u32 	%r2789, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2776,%r6893,%r2778,%r2000,%r2789;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2781,%r7055,%r2776;
}
	// end inline asm
	mov.u32 	%r2787, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2785,%r6893,%r2787,%r2000,%r2789;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2790,%r7056,%r2785;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7070,%r2781,%r2790;
}
	// end inline asm
	mov.u32 	%r7069, %r7070;
	@%p188 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7069, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7125,%r7125,%r7069;
}
	// end inline asm
	@%p189 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7070, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7122,%r7122,%r7070;
}
	// end inline asm
	mov.u32 	%r2811, 14;
	mov.u32 	%r2822, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2809,%r6893,%r2811,%r2000,%r2822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2814,%r7055,%r2809;
}
	// end inline asm
	mov.u32 	%r2820, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2818,%r6893,%r2820,%r2000,%r2822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2823,%r7056,%r2818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7072,%r2814,%r2823;
}
	// end inline asm
	mov.u32 	%r7071, %r7072;
	@%p188 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7071, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7120,%r7120,%r7071;
}
	// end inline asm
	@%p189 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7072, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7117,%r7117,%r7072;
}
	// end inline asm
	mov.u32 	%r2844, 16;
	mov.u32 	%r2855, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2842,%r6893,%r2844,%r2000,%r2855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2847,%r7055,%r2842;
}
	// end inline asm
	mov.u32 	%r2853, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2851,%r6893,%r2853,%r2000,%r2855;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2856,%r7056,%r2851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7074,%r2847,%r2856;
}
	// end inline asm
	mov.u32 	%r7073, %r7074;
	@%p188 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7073, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7119,%r7119,%r7073;
}
	// end inline asm
	@%p189 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7074, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7116,%r7116,%r7074;
}
	// end inline asm
	mov.u32 	%r2877, 18;
	mov.u32 	%r2888, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2875,%r6893,%r2877,%r2000,%r2888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2880,%r7055,%r2875;
}
	// end inline asm
	mov.u32 	%r2886, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2884,%r6893,%r2886,%r2000,%r2888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2889,%r7056,%r2884;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7076,%r2880,%r2889;
}
	// end inline asm
	mov.u32 	%r7075, %r7076;
	@%p188 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7075, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7114,%r7114,%r7075;
}
	// end inline asm
	@%p189 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7076, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7113,%r7113,%r7076;
}
	// end inline asm
	mov.u32 	%r2910, 20;
	mov.u32 	%r2921, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2908,%r6893,%r2910,%r2000,%r2921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2913,%r7055,%r2908;
}
	// end inline asm
	mov.u32 	%r2919, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2917,%r6893,%r2919,%r2000,%r2921;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2922,%r7056,%r2917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7078,%r2913,%r2922;
}
	// end inline asm
	mov.u32 	%r7077, %r7078;
	@%p188 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7077, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7112,%r7112,%r7077;
}
	// end inline asm
	@%p189 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7078, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7110,%r7110,%r7078;
}
	// end inline asm
	mov.u32 	%r2943, 22;
	mov.u32 	%r2954, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2941,%r6893,%r2943,%r2000,%r2954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2946,%r7055,%r2941;
}
	// end inline asm
	mov.u32 	%r2952, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2950,%r6893,%r2952,%r2000,%r2954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2955,%r7056,%r2950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r2946,%r2955;
}
	// end inline asm
	mov.u32 	%r7079, %r7080;
	@%p188 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7079, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7108,%r7108,%r7079;
}
	// end inline asm
	@%p189 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7080, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7105,%r7105,%r7080;
}
	// end inline asm
	mov.u32 	%r2976, 24;
	mov.u32 	%r2987, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2974,%r6893,%r2976,%r2000,%r2987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2979,%r7055,%r2974;
}
	// end inline asm
	mov.u32 	%r2985, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2983,%r6893,%r2985,%r2000,%r2987;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2988,%r7056,%r2983;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7082,%r2979,%r2988;
}
	// end inline asm
	mov.u32 	%r7081, %r7082;
	@%p188 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7081, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7107,%r7107,%r7081;
}
	// end inline asm
	@%p189 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7082, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7104,%r7104,%r7082;
}
	// end inline asm
	mov.u32 	%r3009, 26;
	mov.u32 	%r3020, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3007,%r6893,%r3009,%r2000,%r3020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3012,%r7055,%r3007;
}
	// end inline asm
	mov.u32 	%r3018, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3016,%r6893,%r3018,%r2000,%r3020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3021,%r7056,%r3016;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7084,%r3012,%r3021;
}
	// end inline asm
	mov.u32 	%r7083, %r7084;
	@%p188 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7083, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7102,%r7102,%r7083;
}
	// end inline asm
	@%p189 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7084, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7099,%r7099,%r7084;
}
	// end inline asm
	mov.u32 	%r3042, 28;
	mov.u32 	%r3053, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3040,%r6893,%r3042,%r2000,%r3053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3045,%r7055,%r3040;
}
	// end inline asm
	mov.u32 	%r3051, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3049,%r6893,%r3051,%r2000,%r3053;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3054,%r7056,%r3049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7086,%r3045,%r3054;
}
	// end inline asm
	mov.u32 	%r7085, %r7086;
	@%p188 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7085, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7101,%r7101,%r7085;
}
	// end inline asm
	@%p189 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7086, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7098,%r7098,%r7086;
}
	// end inline asm
	mov.u32 	%r3084, 31;
	mov.u32 	%r3075, 30;
	mov.u32 	%r3086, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3073,%r6893,%r3075,%r2000,%r3086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3078,%r7055,%r3073;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3082,%r6893,%r3084,%r2000,%r3086;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3087,%r7056,%r3082;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7088,%r3078,%r3087;
}
	// end inline asm
	mov.u32 	%r7087, %r7088;
	@%p188 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7087, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7094,%r7094,%r7087;
}
	// end inline asm
	@%p189 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7088, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7092,%r7092,%r7088;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7053, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7054, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p181, %r634, %r1486;
	@%p181 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2566, 0;
	// begin inline asm
	{mul.f16x2 %r2474,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7136,%r7136,%r2474;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2480,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7124,%r7124,%r2480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2486,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7126,%r7126,%r2486;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2492,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7106,%r2492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2498,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7108,%r2498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2504,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7093,%r7093,%r2504;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2510,%r7054,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7130,%r7130,%r2510;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2516,%r7054,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7111,%r2516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2522,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7134,%r7134,%r2522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2528,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7121,%r7121,%r2528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2534,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7123,%r7123,%r2534;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2540,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r7103,%r2540;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2546,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7105,%r7105,%r2546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2552,%r7053,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7091,%r7091,%r2552;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2558,%r7054,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7128,%r7128,%r2558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2564,%r7054,%r2566;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7109,%r2564;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2377, %r1486, -2;
	setp.ne.s32 	%p182, %r634, %r2377;
	@%p182 bra 	$L__BB0_378;

	mov.u32 	%r2470, 0;
	// begin inline asm
	{mul.f16x2 %r2378,%r7053,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7114,%r7114,%r2378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2384,%r7053,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r7096,%r2384;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2390,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7132,%r7132,%r2390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2396,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7118,%r7118,%r2396;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2402,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7120,%r7120,%r2402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2408,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7100,%r7100,%r2408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2414,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r7102,%r2414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2420,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7090,%r7090,%r2420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2426,%r7053,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7113,%r7113,%r2426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2432,%r7053,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7095,%r7095,%r2432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2438,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7131,%r7131,%r2438;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2444,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7115,%r7115,%r2444;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2450,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7117,%r7117,%r2450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2456,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7097,%r7097,%r2456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2462,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7099,%r7099,%r2462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2468,%r7054,%r2470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7089,%r7089,%r2468;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p220, %r35, 1;
	mov.u32 	%r6948, %r1921;
	mov.u32 	%r6949, %r1921;
	mov.u32 	%r7139, %r1921;
	mov.u32 	%r7140, %r1921;
	mov.u32 	%r7141, %r1921;
	mov.u32 	%r6975, %r1921;
	mov.u32 	%r7143, %r1921;
	mov.u32 	%r6983, %r1921;
	mov.u32 	%r7145, %r1921;
	mov.u32 	%r7146, %r1921;
	@%p220 bra 	$L__BB0_380;

	add.s32 	%r6804, %r65, %r65;
	mul.lo.s32 	%r3106, %r1477, 320;
	add.s32 	%r3108, %r35, -1;
	mul.lo.s32 	%r3110, %r36, 320;
	mad.lo.s32 	%r3111, %r3106, %r3108, %r3110;
	add.s32 	%r3114, %r6804, -64;
	mad.lo.s32 	%r3119, %r3114, %r1909, %r1906;
	add.s32 	%r3120, %r3111, %r3119;
	shl.b32 	%r3121, %r3120, 2;
	mov.u32 	%r3122, _ZN6kernel5shmemE;
	add.s32 	%r3123, %r3122, %r3121;
	shl.b32 	%r3124, %r40, 4;
	add.s32 	%r3125, %r3123, %r3124;
	ld.shared.v4.u32 	{%r6983, %r6975, %r6949, %r6948}, [%r3125];
	shl.b32 	%r3130, %r40, 3;
	add.s32 	%r3131, %r3123, %r3130;
	ld.shared.v2.u32 	{%r7143, %r7141}, [%r3131+512];
	ld.shared.v4.u32 	{%r7146, %r7145, %r7140, %r7139}, [%r3125+768];

$L__BB0_380:
	setp.lt.s32 	%p221, %r36, 1;
	mov.u32 	%r7147, %r1921;
	mov.u32 	%r7148, %r1921;
	mov.u32 	%r7149, %r1921;
	mov.u32 	%r7150, %r1921;
	mov.u32 	%r7151, %r1921;
	mov.u32 	%r7152, %r1921;
	mov.u32 	%r7153, %r1921;
	mov.u32 	%r7154, %r1921;
	mov.u32 	%r7155, %r1921;
	mov.u32 	%r7156, %r1921;
	mov.u32 	%r7157, %r1921;
	mov.u32 	%r7158, %r1921;
	@%p221 bra 	$L__BB0_383;

	not.b32 	%r6803, %r35;
	add.s32 	%r6802, %r1476, %r6803;
	mad.lo.s32 	%r3145, %r6802, 384, %r1912;
	add.s32 	%r3147, %r36, -1;
	mad.lo.s32 	%r3150, %r1907, %r3147, %r3145;
	add.s32 	%r3156, %r3150, %r1910;
	shl.b32 	%r3157, %r3156, 2;
	mov.u32 	%r3158, _ZN6kernel5shmemE;
	add.s32 	%r3159, %r3158, %r3157;
	shl.b32 	%r3160, %r40, 4;
	add.s32 	%r3161, %r3159, %r3160;
	ld.shared.v4.u32 	{%r7158, %r7157, %r7155, %r7153}, [%r3161];
	shl.b32 	%r3166, %r40, 3;
	add.s32 	%r3167, %r3159, %r3166;
	ld.shared.v2.u32 	{%r7156, %r7154}, [%r3167+512];
	ld.shared.v4.u32 	{%r7152, %r7151, %r7149, %r7147}, [%r3161+768];
	mov.u32 	%r7148, %r1921;
	mov.u32 	%r7150, %r1921;
	@%p220 bra 	$L__BB0_383;

	add.s32 	%r6790, %r3167, 512;
	ld.shared.v2.u32 	{%r7150, %r7148}, [%r6790+768];

$L__BB0_383:
	setp.eq.s32 	%p223, %r35, 0;
	@%p223 bra 	$L__BB0_388;

	setp.eq.s32 	%p224, %r36, %r1909;
	@%p224 bra 	$L__BB0_386;

	sub.s32 	%r3180, %r1476, %r35;
	mul.lo.s32 	%r3183, %r65, %r36;
	mad.lo.s32 	%r3184, %r3180, 384, %r3183;
	mad.lo.s32 	%r3187, %r1907, %r1909, %r3184;
	mad.lo.s32 	%r3190, %r1905, %r1904, %r3187;
	shl.b32 	%r3191, %r3190, 2;
	mov.u32 	%r3192, _ZN6kernel5shmemE;
	add.s32 	%r3193, %r3192, %r3191;
	shl.b32 	%r3194, %r40, 4;
	add.s32 	%r3195, %r3193, %r3194;
	ld.shared.v4.u32 	{%r7172, %r7171, %r7174, %r7173}, [%r3195];

$L__BB0_386:
	shl.b32 	%r3201, %r36, 8;
	shl.b32 	%r3205, %r1477, 8;
	or.b32  	%r3206, %r3205, 128;
	add.s32 	%r3208, %r35, -1;
	mad.lo.s32 	%r3209, %r3206, %r3208, %r1912;
	add.s32 	%r3210, %r3209, %r3201;
	shl.b32 	%r3211, %r3210, 2;
	mov.u32 	%r3212, _ZN6kernel5shmemE;
	add.s32 	%r3213, %r3212, %r3211;
	setp.ne.s32 	%p225, %r36, %r1909;
	shl.b32 	%r3215, %r40, 4;
	add.s32 	%r893, %r3213, %r3215;
	ld.shared.v4.u32 	{%r7165, %r7163, %r7166, %r7164}, [%r893];
	ld.shared.v4.u32 	{%r7170, %r7169, %r7168, %r7167}, [%r893+512];
	@%p225 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7172, %r7171, %r7174, %r7173}, [%r893+1024];

$L__BB0_388:
	setp.eq.s32 	%p226, %r36, 0;
	@%p226 bra 	$L__BB0_391;

	not.b32 	%r6801, %r35;
	add.s32 	%r6800, %r1476, %r6801;
	mul.lo.s32 	%r3231, %r65, %r36;
	sub.s32 	%r3232, %r3231, %r65;
	mad.lo.s32 	%r3236, %r6800, 384, %r3232;
	mad.lo.s32 	%r3239, %r1907, %r1909, %r3236;
	mad.lo.s32 	%r3242, %r1905, %r1904, %r3239;
	shl.b32 	%r3243, %r3242, 2;
	mov.u32 	%r3244, _ZN6kernel5shmemE;
	add.s32 	%r3245, %r3244, %r3243;
	shl.b32 	%r3246, %r40, 4;
	add.s32 	%r918, %r3245, %r3246;
	ld.shared.v4.u32 	{%r7188, %r7187, %r7190, %r7189}, [%r918];
	ld.shared.v4.u32 	{%r7186, %r7184, %r7182, %r7181}, [%r918+512];
	ld.shared.v4.u32 	{%r7185, %r7183, %r7180, %r7178}, [%r918+1024];
	@%p223 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7176, %r7175, %r7179, %r7177}, [%r918+1536];

$L__BB0_391:
	mov.u32 	%r3268, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3264,%r7023,%r432,%r2000,%r3268;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3264;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7023;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3271, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3272,%r7024,%r3271;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3275,%r6894,%r3272;
}
	// end inline asm
	@%p15 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r7191,%r7136;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r7191,%r6895,%r3272;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3288, 31;
	mov.u32 	%r3311, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3286,%r7191,%r3288,%r2000,%r3311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3291,%r3275,%r3286;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3294,%r7022,%r7021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3297,%r3294,%r3291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3300,%r7025,%r3297;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3303,%r7136,%r3300;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3307,%r7018,%r432,%r2000,%r3311;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3307;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7018;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3314, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3315,%r7019,%r3314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3318,%r6894,%r3315;
}
	// end inline asm
	mov.u32 	%r7192, %r7135;
	@%p15 bra 	$L__BB0_396;

	// begin inline asm
	{mul.f16x2 %r7192,%r6895,%r3315;
}
	// end inline asm

$L__BB0_396:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3329,%r7192,%r3288,%r2000,%r3311;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3334,%r3318,%r3329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3337,%r7022,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r3334,%r3337;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r7020,%r3340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3346,%r7135,%r3343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3349,%r7023,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3352,%r6898,%r3349;
}
	// end inline asm
	@%p15 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7193,%r7134;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7193,%r6899,%r3349;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3365, 31;
	mov.u32 	%r3367, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3363,%r7193,%r3365,%r2000,%r3367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3368,%r3352,%r3363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3371,%r7015,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3374,%r3371,%r3368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3377,%r7016,%r3374;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3380,%r7134,%r3377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3383,%r7018,%r7019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3386,%r6898,%r3383;
}
	// end inline asm
	mov.u32 	%r7194, %r7133;
	@%p15 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7194,%r6899,%r3383;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3395,%r7194,%r3365,%r2000,%r3367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3400,%r3386,%r3395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3403,%r7015,%r7012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3406,%r3400,%r3403;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3409,%r7013,%r3406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3412,%r7133,%r3409;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3416,%r7009,%r432,%r2000,%r3367;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3416;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7009;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3423, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3424,%r7010,%r3423;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3427,%r6894,%r3424;
}
	// end inline asm
	@%p15 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7195,%r7132;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7195,%r6895,%r3424;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3442, 31;
	mov.u32 	%r3444, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3440,%r7195,%r3442,%r2000,%r3444;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3445,%r3427,%r3440;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3448,%r7008,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3451,%r3448,%r3445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3454,%r7011,%r3451;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3457,%r7132,%r3454;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3460,%r7009,%r7010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3463,%r6898,%r3460;
}
	// end inline asm
	@%p15 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r7196,%r7131;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r7196,%r6899,%r3460;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3476, 31;
	mov.u32 	%r3499, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3474,%r7196,%r3476,%r2000,%r3499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3479,%r3463,%r3474;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3482,%r7006,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3485,%r3482,%r3479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3488,%r7007,%r3485;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3491,%r7131,%r3488;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3495,%r7004,%r432,%r2000,%r3499;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3495;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7004;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3502, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3503,%r7005,%r3502;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3506,%r6894,%r3503;
}
	// end inline asm
	@%p15 bra 	$L__BB0_409;
	bra.uni 	$L__BB0_408;

$L__BB0_409:
	// begin inline asm
	{neg.f16x2 %r7197,%r7130;
}
	// end inline asm
	bra.uni 	$L__BB0_410;

$L__BB0_408:
	// begin inline asm
	{mul.f16x2 %r7197,%r6895,%r3503;
}
	// end inline asm

$L__BB0_410:
	mov.u32 	%r3521, 31;
	mov.u32 	%r3544, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3519,%r7197,%r3521,%r2000,%r3544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3524,%r3506,%r3519;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3527,%r7003,%r7190;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3530,%r3527,%r3524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3533,%r7158,%r3530;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3536,%r7130,%r3533;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3540,%r6999,%r432,%r2000,%r3544;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3540;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6999;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3547, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3548,%r7000,%r3547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3551,%r6894,%r3548;
}
	// end inline asm
	mov.u32 	%r7198, %r7129;
	@%p15 bra 	$L__BB0_412;

	// begin inline asm
	{mul.f16x2 %r7198,%r6895,%r3548;
}
	// end inline asm

$L__BB0_412:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3562,%r7198,%r3521,%r2000,%r3544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3567,%r3551,%r3562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3570,%r7003,%r7021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r3567,%r3570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r7001,%r3573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3579,%r7129,%r3576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3582,%r7004,%r7005;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3585,%r6898,%r3582;
}
	// end inline asm
	@%p15 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7199,%r7128;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7199,%r6899,%r3582;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3598, 31;
	mov.u32 	%r3600, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3596,%r7199,%r3598,%r2000,%r3600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3601,%r3585,%r3596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3604,%r6998,%r7189;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3607,%r3604,%r3601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3610,%r7157,%r3607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3613,%r7128,%r3610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3616,%r6999,%r7000;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3619,%r6898,%r3616;
}
	// end inline asm
	mov.u32 	%r7200, %r7127;
	@%p15 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7200,%r6899,%r3616;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3628,%r7200,%r3598,%r2000,%r3600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3633,%r3619,%r3628;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3636,%r6998,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3639,%r3633,%r3636;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3642,%r6996,%r3639;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3645,%r7127,%r3642;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3649,%r6993,%r432,%r2000,%r3600;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3649;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6993;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3656, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3657,%r6994,%r3656;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3660,%r6894,%r3657;
}
	// end inline asm
	@%p15 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7201,%r7126;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7201,%r6895,%r3657;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3675, 31;
	mov.u32 	%r3698, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3673,%r7201,%r3675,%r2000,%r3698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3678,%r3660,%r3673;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3681,%r6992,%r7003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r3681,%r3678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r527,%r3684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7051,%r7126,%r3687;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3694,%r6989,%r432,%r2000,%r3698;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3694;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6989;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3701, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3702,%r6990,%r3701;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3705,%r6894,%r3702;
}
	// end inline asm
	mov.u32 	%r7202, %r7125;
	@%p15 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7202,%r6895,%r3702;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3716,%r7202,%r3675,%r2000,%r3698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3721,%r3705,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3724,%r6992,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3727,%r3721,%r3724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3730,%r523,%r3727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7049,%r7125,%r3730;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3736,%r6994,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3739,%r6990,%r7000;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3742,%r3736,%r3739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3745,%r6988,%r3742;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3748,%r7124,%r3745;
}
	// end inline asm
	selp.b32 	%r1018, %r7124, %r3748, %p15;
	// begin inline asm
	{sub.f16x2 %r3751,%r6993,%r6994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r6898,%r3751;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7203,%r7123;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7203,%r6899,%r3751;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3767, 31;
	mov.u32 	%r3769, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3765,%r7203,%r3767,%r2000,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3770,%r3754,%r3765;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3773,%r6986,%r6998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3776,%r3773,%r3770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3779,%r519,%r3776;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7050,%r7123,%r3779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r6989,%r6990;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3788,%r6898,%r3785;
}
	// end inline asm
	mov.u32 	%r7204, %r7122;
	@%p15 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7204,%r6899,%r3785;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3797,%r7204,%r3767,%r2000,%r3769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3802,%r3788,%r3797;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3805,%r6986,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3808,%r3802,%r3805;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3811,%r517,%r3808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7048,%r7122,%r3811;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3817,%r6993,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3820,%r6989,%r6999;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3823,%r3817,%r3820;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3826,%r6984,%r3823;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3829,%r7121,%r3826;
}
	// end inline asm
	selp.b32 	%r1030, %r7121, %r3829, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3833,%r6981,%r432,%r2000,%r3769;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3833;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6981;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3840, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3841,%r6982,%r3840;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3844,%r6894,%r3841;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7205,%r7120;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7205,%r6895,%r3841;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3859, 31;
	mov.u32 	%r3882, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3857,%r7205,%r3859,%r2000,%r3882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3862,%r3844,%r3857;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3865,%r6980,%r6992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3868,%r3865,%r3862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3871,%r515,%r3868;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7047,%r7120,%r3871;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3878,%r6977,%r432,%r2000,%r3882;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3878;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6977;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3885, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3886,%r6978,%r3885;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3889,%r6894,%r3886;
}
	// end inline asm
	mov.u32 	%r7206, %r7119;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7206,%r6895,%r3886;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3900,%r7206,%r3859,%r2000,%r3882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3905,%r3889,%r3900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3908,%r6980,%r7008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3911,%r3905,%r3908;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3914,%r6979,%r3911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3917,%r7119,%r3914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3920,%r6982,%r7010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3923,%r6978,%r6990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3926,%r3920,%r3923;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3929,%r6976,%r3926;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3932,%r7118,%r3929;
}
	// end inline asm
	selp.b32 	%r1042, %r7118, %r3932, %p15;
	// begin inline asm
	{sub.f16x2 %r3935,%r6981,%r6982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3938,%r6898,%r3935;
}
	// end inline asm
	@%p15 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7207,%r7117;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7207,%r6899,%r3935;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3951, 31;
	mov.u32 	%r3953, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3949,%r7207,%r3951,%r2000,%r3953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3954,%r3938,%r3949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3957,%r6974,%r6986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3960,%r3957,%r3954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3963,%r507,%r3960;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7046,%r7117,%r3963;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3969,%r6977,%r6978;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3972,%r6898,%r3969;
}
	// end inline asm
	mov.u32 	%r7208, %r7116;
	@%p15 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7208,%r6899,%r3969;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3981,%r7208,%r3951,%r2000,%r3953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3986,%r3972,%r3981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3989,%r6974,%r7006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3992,%r3986,%r3989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3995,%r6973,%r3992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3998,%r7116,%r3995;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4001,%r6981,%r7009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4004,%r6977,%r6989;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4007,%r4001,%r4004;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4010,%r6972,%r4007;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4013,%r7115,%r4010;
}
	// end inline asm
	selp.b32 	%r1054, %r7115, %r4013, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4017,%r6970,%r432,%r2000,%r3953;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4017;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6970;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4024, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4025,%r6971,%r4024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4028,%r6894,%r4025;
}
	// end inline asm
	@%p15 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7209,%r7114;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7209,%r6895,%r4025;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r4043, 31;
	mov.u32 	%r4045, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4041,%r7209,%r4043,%r2000,%r4045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4046,%r4028,%r4041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4049,%r7174,%r6980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4052,%r4049,%r4046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4055,%r7146,%r4052;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4058,%r7114,%r4055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4061,%r6970,%r6971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4064,%r6898,%r4061;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7210,%r7113;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7210,%r6899,%r4061;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4077, 31;
	mov.u32 	%r4100, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4075,%r7210,%r4077,%r2000,%r4100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4080,%r4064,%r4075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4083,%r7173,%r6974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4086,%r4083,%r4080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4089,%r7145,%r4086;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4092,%r7113,%r4089;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4096,%r6966,%r432,%r2000,%r4100;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4096;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6966;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4103, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4104,%r6967,%r4103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4107,%r6894,%r4104;
}
	// end inline asm
	mov.u32 	%r7211, %r7112;
	@%p15 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7211,%r6895,%r4104;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4118,%r7211,%r4077,%r2000,%r4100;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4123,%r4107,%r4118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r7185,%r7003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4129,%r4123,%r4126;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4132,%r7156,%r4129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7045,%r7112,%r4132;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4138,%r7186,%r7005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4141,%r6967,%r7188;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4144,%r4138,%r4141;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4147,%r7155,%r4144;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4150,%r7111,%r4147;
}
	// end inline asm
	selp.b32 	%r1072, %r7111, %r4150, %p15;
	// begin inline asm
	{sub.f16x2 %r4153,%r6966,%r6967;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4156,%r6898,%r4153;
}
	// end inline asm
	mov.u32 	%r7212, %r7110;
	@%p15 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7212,%r6899,%r4153;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r4167, 31;
	mov.u32 	%r4205, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4165,%r7212,%r4167,%r2000,%r4205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4170,%r4156,%r4165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4173,%r7183,%r6998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4176,%r4170,%r4173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4179,%r7154,%r4176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7044,%r7110,%r4179;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4185,%r7184,%r7004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4188,%r6966,%r7187;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4191,%r4185,%r4188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4194,%r7153,%r4191;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4197,%r7109,%r4194;
}
	// end inline asm
	selp.b32 	%r1078, %r7109, %r4197, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4201,%r6962,%r432,%r2000,%r4205;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4201;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6962;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4208, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r6963,%r4208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4212,%r6894,%r4209;
}
	// end inline asm
	@%p15 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7213,%r7108;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7213,%r6895,%r4209;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r4227, 31;
	mov.u32 	%r4250, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4225,%r7213,%r4227,%r2000,%r4250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4230,%r4212,%r4225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4233,%r6961,%r7185;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4236,%r4233,%r4230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4239,%r7152,%r4236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7043,%r7108,%r4239;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4246,%r6958,%r432,%r2000,%r4250;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4246;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6958;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4253, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4254,%r6959,%r4253;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4257,%r6894,%r4254;
}
	// end inline asm
	mov.u32 	%r7214, %r7107;
	@%p15 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7214,%r6895,%r4254;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4268,%r7214,%r4227,%r2000,%r4250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4273,%r4257,%r4268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4276,%r6961,%r6992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4279,%r4273,%r4276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4282,%r6991,%r4279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7041,%r7107,%r4282;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4288,%r6963,%r6994;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4291,%r6959,%r6967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4294,%r4288,%r4291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4297,%r489,%r4294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4300,%r7106,%r4297;
}
	// end inline asm
	selp.b32 	%r7039, %r7106, %r4300, %p15;
	// begin inline asm
	{sub.f16x2 %r4303,%r6962,%r6963;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4306,%r6898,%r4303;
}
	// end inline asm
	@%p15 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7215,%r7105;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7215,%r6899,%r4303;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4319, 31;
	mov.u32 	%r4321, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4317,%r7215,%r4319,%r2000,%r4321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4322,%r4306,%r4317;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4325,%r6956,%r7183;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4328,%r4325,%r4322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4331,%r7151,%r4328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7042,%r7105,%r4331;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4337,%r6958,%r6959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4340,%r6898,%r4337;
}
	// end inline asm
	mov.u32 	%r7216, %r7104;
	@%p15 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7216,%r6899,%r4337;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4349,%r7216,%r4319,%r2000,%r4321;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4354,%r4340,%r4349;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4357,%r6956,%r6986;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4360,%r4354,%r4357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4363,%r6985,%r4360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7040,%r7104,%r4363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4369,%r6962,%r6993;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4372,%r6958,%r6966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4375,%r4369,%r4372;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4378,%r486,%r4375;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4381,%r7103,%r4378;
}
	// end inline asm
	selp.b32 	%r7038, %r7103, %r4381, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4385,%r6952,%r432,%r2000,%r4321;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4385;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6952;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4392, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4393,%r6953,%r4392;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4396,%r6894,%r4393;
}
	// end inline asm
	@%p15 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7217,%r7102;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7217,%r6895,%r4393;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4411, 31;
	mov.u32 	%r4434, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4409,%r7217,%r4411,%r2000,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4414,%r4396,%r4409;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4417,%r7170,%r6961;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4420,%r4417,%r4414;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4423,%r6983,%r4420;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7037,%r7102,%r4423;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4430,%r6950,%r432,%r2000,%r4434;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4430;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6950;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4437, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4438,%r6951,%r4437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4441,%r6894,%r4438;
}
	// end inline asm
	mov.u32 	%r7218, %r7101;
	@%p15 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7218,%r6895,%r4438;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4452,%r7218,%r4411,%r2000,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4457,%r4441,%r4452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4460,%r7170,%r6980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r4457,%r4460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4466,%r7143,%r4463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7035,%r7101,%r4466;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4472,%r6953,%r6982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4475,%r6951,%r6959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4478,%r4472,%r4475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4481,%r481,%r4478;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4484,%r7100,%r4481;
}
	// end inline asm
	selp.b32 	%r7033, %r7100, %r4484, %p15;
	// begin inline asm
	{sub.f16x2 %r4487,%r6952,%r6953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4490,%r6898,%r4487;
}
	// end inline asm
	@%p15 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7219,%r7099;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7219,%r6899,%r4487;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4503, 31;
	mov.u32 	%r4505, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4501,%r7219,%r4503,%r2000,%r4505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4506,%r4490,%r4501;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4509,%r7169,%r6956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4512,%r4509,%r4506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4515,%r6975,%r4512;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7036,%r7099,%r4515;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4521,%r6950,%r6951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4524,%r6898,%r4521;
}
	// end inline asm
	mov.u32 	%r7220, %r7098;
	@%p15 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7220,%r6899,%r4521;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4533,%r7220,%r4503,%r2000,%r4505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4538,%r4524,%r4533;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4541,%r7169,%r6974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4544,%r4538,%r4541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4547,%r7141,%r4544;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r7098,%r4547;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4553,%r6952,%r6981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4556,%r6950,%r6958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4559,%r4553,%r4556;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4562,%r480,%r4559;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4565,%r7097,%r4562;
}
	// end inline asm
	selp.b32 	%r7032, %r7097, %r4565, %p15;
	// begin inline asm
	{sub.f16x2 %r4568,%r7168,%r6971;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4571,%r7172,%r6951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4574,%r4568,%r4571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4577,%r7140,%r4574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4580,%r7096,%r4577;
}
	// end inline asm
	selp.b32 	%r1127, %r7096, %r4580, %p15;
	// begin inline asm
	{sub.f16x2 %r4583,%r7167,%r6970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4586,%r7171,%r6950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r4583,%r4586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4592,%r7139,%r4589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4595,%r7095,%r4592;
}
	// end inline asm
	selp.b32 	%r1128, %r7095, %r4595, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4599,%r6944,%r432,%r2000,%r4505;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4599;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6944;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4606, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4607,%r6945,%r4606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4610,%r6894,%r4607;
}
	// end inline asm
	mov.u32 	%r7221, %r7094;
	@%p15 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r7221,%r6895,%r4607;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4623, 31;
	mov.u32 	%r4625, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4621,%r7221,%r4623,%r2000,%r4625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4626,%r4610,%r4621;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r7179,%r6961;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4632,%r4626,%r4629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4635,%r7150,%r4632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7031,%r7094,%r4635;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4641,%r7180,%r6963;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4644,%r6945,%r7182;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4647,%r4641,%r4644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4650,%r7149,%r4647;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4653,%r7093,%r4650;
}
	// end inline asm
	selp.b32 	%r7029, %r7093, %r4653, %p15;
	// begin inline asm
	{sub.f16x2 %r4656,%r6944,%r6945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4659,%r6898,%r4656;
}
	// end inline asm
	mov.u32 	%r7222, %r7092;
	@%p15 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7222,%r6899,%r4656;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4668,%r7222,%r4623,%r2000,%r4625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4673,%r4659,%r4668;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4676,%r7177,%r6956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4679,%r4673,%r4676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4682,%r7148,%r4679;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7030,%r7092,%r4682;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4688,%r7178,%r6962;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4691,%r6944,%r7181;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4694,%r4688,%r4691;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4697,%r7147,%r4694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4700,%r7091,%r4697;
}
	// end inline asm
	selp.b32 	%r7028, %r7091, %r4700, %p15;
	// begin inline asm
	{sub.f16x2 %r4703,%r7165,%r6953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4706,%r7166,%r6945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4709,%r4703,%r4706;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4712,%r6949,%r4709;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4715,%r7090,%r4712;
}
	// end inline asm
	selp.b32 	%r7027, %r7090, %r4715, %p15;
	// begin inline asm
	{sub.f16x2 %r4718,%r7163,%r6952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4721,%r7164,%r6944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4724,%r4718,%r4721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4727,%r6948,%r4724;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4730,%r7089,%r4727;
}
	// end inline asm
	selp.b32 	%r7026, %r7089, %r4730, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4735, %r1490, 2;
	setp.lt.s32 	%p261, %r633, %r4735;
	add.s32 	%r4736, %r1491, -1;
	setp.ge.s32 	%p262, %r633, %r4736;
	or.pred  	%p263, %p262, %p261;
	add.s32 	%r4737, %r1492, 2;
	setp.lt.s32 	%p264, %r634, %r4737;
	or.pred  	%p265, %p263, %p264;
	add.s32 	%r4738, %r1493, -2;
	setp.ge.s32 	%p266, %r634, %r4738;
	or.pred  	%p267, %p266, %p265;
	setp.lt.s32 	%p268, %r635, %r1487;
	or.pred  	%p269, %p268, %p267;
	mad.lo.s32 	%r4739, %r1489, %r1488, %r1487;
	setp.ge.s32 	%p270, %r635, %r4739;
	or.pred  	%p271, %p269, %p270;
	@%p271 bra 	$L__BB0_713;

	sub.s32 	%r1143, %r635, %r1487;
	rem.s32 	%r4740, %r1143, %r1488;
	setp.ne.s32 	%p272, %r4740, 0;
	@%p272 bra 	$L__BB0_713;

	div.s32 	%r4741, %r1143, %r1488;
	mul.lo.s32 	%r4743, %r4741, %r52;
	sub.s32 	%r1144, %r633, %r1490;
	sub.s32 	%r1145, %r634, %r1492;
	mul.lo.s32 	%r1146, %r4743, 3;
	add.s32 	%r4744, %r1144, %r1146;
	add.s32 	%r4745, %r4744, -2;
	mul.lo.s32 	%r1147, %r4745, %r53;
	add.s32 	%r4747, %r1145, %r1147;
	mul.lo.s32 	%r4748, %r4747, %r54;
	sub.s32 	%r1148, %r4748, %r1494;
	@%p15 bra 	$L__BB0_478;

	not.pred 	%p274, %p11;
	@%p274 bra 	$L__BB0_476;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3303;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4750, %r1148, %r398;
	mul.wide.s32 	%rd259, %r4750, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;

$L__BB0_476:
	not.pred 	%p275, %p13;
	@%p275 bra 	$L__BB0_478;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3303;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4752, %r1148, %r399;
	mul.wide.s32 	%rd261, %r4752, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;

$L__BB0_478:
	@%p15 bra 	$L__BB0_483;

	not.pred 	%p277, %p12;
	@%p277 bra 	$L__BB0_481;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3380;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4754, %r1148, %r412;
	mul.wide.s32 	%rd263, %r4754, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;

$L__BB0_481:
	not.pred 	%p278, %p14;
	@%p278 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3380;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4756, %r1148, %r413;
	mul.wide.s32 	%rd265, %r4756, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_483:
	add.s32 	%r1149, %r1146, %r52;
	add.s32 	%r4758, %r1144, %r1149;
	add.s32 	%r4759, %r4758, -2;
	mad.lo.s32 	%r4761, %r4759, %r53, %r1145;
	mul.lo.s32 	%r4762, %r4761, %r54;
	sub.s32 	%r1150, %r4762, %r1494;
	@%p15 bra 	$L__BB0_488;

	not.pred 	%p280, %p11;
	@%p280 bra 	$L__BB0_486;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3346;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4764, %r1150, %r398;
	mul.wide.s32 	%rd267, %r4764, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;

$L__BB0_486:
	not.pred 	%p281, %p13;
	@%p281 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3346;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4766, %r1150, %r399;
	mul.wide.s32 	%rd269, %r4766, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;

$L__BB0_488:
	@%p15 bra 	$L__BB0_493;

	not.pred 	%p283, %p12;
	@%p283 bra 	$L__BB0_491;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3412;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4768, %r1150, %r412;
	mul.wide.s32 	%rd271, %r4768, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;

$L__BB0_491:
	not.pred 	%p284, %p14;
	@%p284 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3412;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4770, %r1150, %r413;
	mul.wide.s32 	%rd273, %r4770, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_493:
	add.s32 	%r1151, %r1145, 1;
	add.s32 	%r4771, %r1151, %r1147;
	mul.lo.s32 	%r4772, %r4771, %r54;
	sub.s32 	%r1152, %r4772, %r1494;
	@%p15 bra 	$L__BB0_498;

	not.pred 	%p286, %p11;
	@%p286 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3457;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4774, %r1152, %r398;
	mul.wide.s32 	%rd275, %r4774, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;

$L__BB0_496:
	not.pred 	%p287, %p13;
	@%p287 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3457;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4776, %r1152, %r399;
	mul.wide.s32 	%rd277, %r4776, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;

$L__BB0_498:
	@%p15 bra 	$L__BB0_503;

	not.pred 	%p289, %p12;
	@%p289 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3491;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4778, %r1152, %r412;
	mul.wide.s32 	%rd279, %r4778, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;

$L__BB0_501:
	not.pred 	%p290, %p14;
	@%p290 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3491;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4780, %r1152, %r413;
	mul.wide.s32 	%rd281, %r4780, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_503:
	not.b32 	%r4781, %r1490;
	add.s32 	%r1153, %r633, %r4781;
	not.b32 	%r4782, %r1492;
	add.s32 	%r1154, %r634, %r4782;
	add.s32 	%r4783, %r1153, %r1146;
	mul.lo.s32 	%r1155, %r4783, %r53;
	add.s32 	%r4785, %r1154, %r1155;
	mul.lo.s32 	%r4786, %r4785, %r54;
	sub.s32 	%r1156, %r4786, %r1494;
	@%p15 bra 	$L__BB0_508;

	not.pred 	%p292, %p11;
	@%p292 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3536;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4788, %r1156, %r398;
	mul.wide.s32 	%rd283, %r4788, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;

$L__BB0_506:
	not.pred 	%p293, %p13;
	@%p293 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3536;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4790, %r1156, %r399;
	mul.wide.s32 	%rd285, %r4790, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;

$L__BB0_508:
	@%p15 bra 	$L__BB0_513;

	not.pred 	%p295, %p12;
	@%p295 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3613;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4792, %r1156, %r412;
	mul.wide.s32 	%rd287, %r4792, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;

$L__BB0_511:
	not.pred 	%p296, %p14;
	@%p296 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3613;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4794, %r1156, %r413;
	mul.wide.s32 	%rd289, %r4794, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_513:
	add.s32 	%r4796, %r1153, %r1149;
	mul.lo.s32 	%r1157, %r4796, %r53;
	add.s32 	%r4797, %r1154, %r1157;
	mul.lo.s32 	%r4798, %r4797, %r54;
	sub.s32 	%r1158, %r4798, %r1494;
	@%p15 bra 	$L__BB0_518;

	not.pred 	%p298, %p11;
	@%p298 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3579;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4800, %r1158, %r398;
	mul.wide.s32 	%rd291, %r4800, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;

$L__BB0_516:
	not.pred 	%p299, %p13;
	@%p299 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3579;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4802, %r1158, %r399;
	mul.wide.s32 	%rd293, %r4802, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;

$L__BB0_518:
	@%p15 bra 	$L__BB0_523;

	not.pred 	%p301, %p12;
	@%p301 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3645;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4804, %r1158, %r412;
	mul.wide.s32 	%rd295, %r4804, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;

$L__BB0_521:
	not.pred 	%p302, %p14;
	@%p302 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3645;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4806, %r1158, %r413;
	mul.wide.s32 	%rd297, %r4806, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_523:
	add.s32 	%r4807, %r1145, %r1155;
	mul.lo.s32 	%r4808, %r4807, %r54;
	sub.s32 	%r1159, %r4808, %r1494;
	@%p15 bra 	$L__BB0_528;

	not.pred 	%p304, %p11;
	@%p304 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7051;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4810, %r1159, %r398;
	mul.wide.s32 	%rd299, %r4810, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;

$L__BB0_526:
	not.pred 	%p305, %p13;
	@%p305 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7051;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4812, %r1159, %r399;
	mul.wide.s32 	%rd301, %r4812, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;

$L__BB0_528:
	@%p15 bra 	$L__BB0_533;

	not.pred 	%p307, %p12;
	@%p307 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7050;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4814, %r1159, %r412;
	mul.wide.s32 	%rd303, %r4814, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;

$L__BB0_531:
	not.pred 	%p308, %p14;
	@%p308 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7050;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4816, %r1159, %r413;
	mul.wide.s32 	%rd305, %r4816, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_533:
	add.s32 	%r4817, %r1145, %r1157;
	mul.lo.s32 	%r4818, %r4817, %r54;
	sub.s32 	%r1160, %r4818, %r1494;
	@%p15 bra 	$L__BB0_538;

	not.pred 	%p310, %p11;
	@%p310 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7049;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4820, %r1160, %r398;
	mul.wide.s32 	%rd307, %r4820, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;

$L__BB0_536:
	not.pred 	%p311, %p13;
	@%p311 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7049;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4822, %r1160, %r399;
	mul.wide.s32 	%rd309, %r4822, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;

$L__BB0_538:
	@%p15 bra 	$L__BB0_543;

	not.pred 	%p313, %p12;
	@%p313 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7048;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4824, %r1160, %r412;
	mul.wide.s32 	%rd311, %r4824, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;

$L__BB0_541:
	not.pred 	%p314, %p14;
	@%p314 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7048;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4826, %r1160, %r413;
	mul.wide.s32 	%rd313, %r4826, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_543:
	add.s32 	%r1161, %r1149, %r52;
	add.s32 	%r4828, %r1153, %r1161;
	mul.lo.s32 	%r1162, %r4828, %r53;
	add.s32 	%r4830, %r1145, %r1162;
	mul.lo.s32 	%r4831, %r4830, %r54;
	sub.s32 	%r1163, %r4831, %r1494;
	@%p15 bra 	$L__BB0_548;

	not.pred 	%p316, %p11;
	@%p316 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1018;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4833, %r1163, %r398;
	mul.wide.s32 	%rd315, %r4833, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;

$L__BB0_546:
	not.pred 	%p317, %p13;
	@%p317 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1018;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4835, %r1163, %r399;
	mul.wide.s32 	%rd317, %r4835, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;

$L__BB0_548:
	@%p15 bra 	$L__BB0_553;

	not.pred 	%p319, %p12;
	@%p319 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1030;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4837, %r1163, %r412;
	mul.wide.s32 	%rd319, %r4837, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;

$L__BB0_551:
	not.pred 	%p320, %p14;
	@%p320 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1030;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4839, %r1163, %r413;
	mul.wide.s32 	%rd321, %r4839, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_553:
	add.s32 	%r4840, %r1151, %r1155;
	mul.lo.s32 	%r4841, %r4840, %r54;
	sub.s32 	%r1164, %r4841, %r1494;
	@%p15 bra 	$L__BB0_558;

	not.pred 	%p322, %p11;
	@%p322 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7047;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4843, %r1164, %r398;
	mul.wide.s32 	%rd323, %r4843, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;

$L__BB0_556:
	not.pred 	%p323, %p13;
	@%p323 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7047;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4845, %r1164, %r399;
	mul.wide.s32 	%rd325, %r4845, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;

$L__BB0_558:
	@%p15 bra 	$L__BB0_563;

	not.pred 	%p325, %p12;
	@%p325 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7046;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4847, %r1164, %r412;
	mul.wide.s32 	%rd327, %r4847, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;

$L__BB0_561:
	not.pred 	%p326, %p14;
	@%p326 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7046;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4849, %r1164, %r413;
	mul.wide.s32 	%rd329, %r4849, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_563:
	add.s32 	%r4850, %r1151, %r1157;
	mul.lo.s32 	%r4851, %r4850, %r54;
	sub.s32 	%r1165, %r4851, %r1494;
	@%p15 bra 	$L__BB0_568;

	not.pred 	%p328, %p11;
	@%p328 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3917;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4853, %r1165, %r398;
	mul.wide.s32 	%rd331, %r4853, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;

$L__BB0_566:
	not.pred 	%p329, %p13;
	@%p329 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3917;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4855, %r1165, %r399;
	mul.wide.s32 	%rd333, %r4855, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;

$L__BB0_568:
	@%p15 bra 	$L__BB0_573;

	not.pred 	%p331, %p12;
	@%p331 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3998;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4857, %r1165, %r412;
	mul.wide.s32 	%rd335, %r4857, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;

$L__BB0_571:
	not.pred 	%p332, %p14;
	@%p332 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3998;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4859, %r1165, %r413;
	mul.wide.s32 	%rd337, %r4859, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_573:
	add.s32 	%r4860, %r1151, %r1162;
	mul.lo.s32 	%r4861, %r4860, %r54;
	sub.s32 	%r1166, %r4861, %r1494;
	@%p15 bra 	$L__BB0_578;

	not.pred 	%p334, %p11;
	@%p334 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1042;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4863, %r1166, %r398;
	mul.wide.s32 	%rd339, %r4863, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;

$L__BB0_576:
	not.pred 	%p335, %p13;
	@%p335 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1042;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4865, %r1166, %r399;
	mul.wide.s32 	%rd341, %r4865, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;

$L__BB0_578:
	@%p15 bra 	$L__BB0_583;

	not.pred 	%p337, %p12;
	@%p337 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4867, %r1166, %r412;
	mul.wide.s32 	%rd343, %r4867, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;

$L__BB0_581:
	not.pred 	%p338, %p14;
	@%p338 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1054;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4869, %r1166, %r413;
	mul.wide.s32 	%rd345, %r4869, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_583:
	add.s32 	%r1167, %r1145, 2;
	add.s32 	%r4870, %r1167, %r1155;
	mul.lo.s32 	%r4871, %r4870, %r54;
	sub.s32 	%r1168, %r4871, %r1494;
	@%p15 bra 	$L__BB0_588;

	not.pred 	%p340, %p11;
	@%p340 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4058;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4873, %r1168, %r398;
	mul.wide.s32 	%rd347, %r4873, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;

$L__BB0_586:
	not.pred 	%p341, %p13;
	@%p341 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4058;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4875, %r1168, %r399;
	mul.wide.s32 	%rd349, %r4875, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;

$L__BB0_588:
	@%p15 bra 	$L__BB0_593;

	not.pred 	%p343, %p12;
	@%p343 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4092;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4877, %r1168, %r412;
	mul.wide.s32 	%rd351, %r4877, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;

$L__BB0_591:
	not.pred 	%p344, %p14;
	@%p344 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4092;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4879, %r1168, %r413;
	mul.wide.s32 	%rd353, %r4879, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_593:
	mul.lo.s32 	%r1169, %r4758, %r53;
	add.s32 	%r4882, %r1154, %r1169;
	mul.lo.s32 	%r4883, %r4882, %r54;
	sub.s32 	%r1170, %r4883, %r1494;
	@%p15 bra 	$L__BB0_598;

	not.pred 	%p346, %p11;
	@%p346 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7045;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4885, %r1170, %r398;
	mul.wide.s32 	%rd355, %r4885, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;

$L__BB0_596:
	not.pred 	%p347, %p13;
	@%p347 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7045;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4887, %r1170, %r399;
	mul.wide.s32 	%rd357, %r4887, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;

$L__BB0_598:
	@%p15 bra 	$L__BB0_603;

	not.pred 	%p349, %p12;
	@%p349 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7044;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4889, %r1170, %r412;
	mul.wide.s32 	%rd359, %r4889, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;

$L__BB0_601:
	not.pred 	%p350, %p14;
	@%p350 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7044;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4891, %r1170, %r413;
	mul.wide.s32 	%rd361, %r4891, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_603:
	add.s32 	%r4893, %r1144, %r1161;
	mul.lo.s32 	%r1171, %r4893, %r53;
	add.s32 	%r4894, %r1154, %r1171;
	mul.lo.s32 	%r4895, %r4894, %r54;
	sub.s32 	%r1172, %r4895, %r1494;
	@%p15 bra 	$L__BB0_608;

	not.pred 	%p352, %p11;
	@%p352 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1072;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4897, %r1172, %r398;
	mul.wide.s32 	%rd363, %r4897, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;

$L__BB0_606:
	not.pred 	%p353, %p13;
	@%p353 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1072;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4899, %r1172, %r399;
	mul.wide.s32 	%rd365, %r4899, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;

$L__BB0_608:
	@%p15 bra 	$L__BB0_613;

	not.pred 	%p355, %p12;
	@%p355 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1078;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4901, %r1172, %r412;
	mul.wide.s32 	%rd367, %r4901, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;

$L__BB0_611:
	not.pred 	%p356, %p14;
	@%p356 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1078;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4903, %r1172, %r413;
	mul.wide.s32 	%rd369, %r4903, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_613:
	mul.lo.s32 	%r1173, %r4744, %r53;
	add.s32 	%r4906, %r1145, %r1173;
	mul.lo.s32 	%r4907, %r4906, %r54;
	sub.s32 	%r1174, %r4907, %r1494;
	@%p15 bra 	$L__BB0_618;

	not.pred 	%p358, %p11;
	@%p358 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7043;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4909, %r1174, %r398;
	mul.wide.s32 	%rd371, %r4909, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;

$L__BB0_616:
	not.pred 	%p359, %p13;
	@%p359 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7043;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4911, %r1174, %r399;
	mul.wide.s32 	%rd373, %r4911, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;

$L__BB0_618:
	@%p15 bra 	$L__BB0_623;

	not.pred 	%p361, %p12;
	@%p361 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7042;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4913, %r1174, %r412;
	mul.wide.s32 	%rd375, %r4913, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;

$L__BB0_621:
	not.pred 	%p362, %p14;
	@%p362 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7042;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4915, %r1174, %r413;
	mul.wide.s32 	%rd377, %r4915, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_623:
	add.s32 	%r4916, %r1145, %r1169;
	mul.lo.s32 	%r4917, %r4916, %r54;
	sub.s32 	%r1175, %r4917, %r1494;
	@%p15 bra 	$L__BB0_628;

	not.pred 	%p364, %p11;
	@%p364 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7041;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4919, %r1175, %r398;
	mul.wide.s32 	%rd379, %r4919, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;

$L__BB0_626:
	not.pred 	%p365, %p13;
	@%p365 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7041;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4921, %r1175, %r399;
	mul.wide.s32 	%rd381, %r4921, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;

$L__BB0_628:
	@%p15 bra 	$L__BB0_633;

	not.pred 	%p367, %p12;
	@%p367 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7040;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4923, %r1175, %r412;
	mul.wide.s32 	%rd383, %r4923, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;

$L__BB0_631:
	not.pred 	%p368, %p14;
	@%p368 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7040;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4925, %r1175, %r413;
	mul.wide.s32 	%rd385, %r4925, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_633:
	add.s32 	%r4926, %r1145, %r1171;
	mul.lo.s32 	%r4927, %r4926, %r54;
	sub.s32 	%r1176, %r4927, %r1494;
	@%p15 bra 	$L__BB0_638;

	not.pred 	%p370, %p11;
	@%p370 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7039;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4929, %r1176, %r398;
	mul.wide.s32 	%rd387, %r4929, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;

$L__BB0_636:
	not.pred 	%p371, %p13;
	@%p371 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7039;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4931, %r1176, %r399;
	mul.wide.s32 	%rd389, %r4931, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;

$L__BB0_638:
	@%p15 bra 	$L__BB0_643;

	not.pred 	%p373, %p12;
	@%p373 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7038;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4933, %r1176, %r412;
	mul.wide.s32 	%rd391, %r4933, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;

$L__BB0_641:
	not.pred 	%p374, %p14;
	@%p374 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7038;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4935, %r1176, %r413;
	mul.wide.s32 	%rd393, %r4935, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_643:
	add.s32 	%r4936, %r1151, %r1173;
	mul.lo.s32 	%r4937, %r4936, %r54;
	sub.s32 	%r1177, %r4937, %r1494;
	@%p15 bra 	$L__BB0_648;

	not.pred 	%p376, %p11;
	@%p376 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7037;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4939, %r1177, %r398;
	mul.wide.s32 	%rd395, %r4939, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;

$L__BB0_646:
	not.pred 	%p377, %p13;
	@%p377 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7037;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4941, %r1177, %r399;
	mul.wide.s32 	%rd397, %r4941, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;

$L__BB0_648:
	@%p15 bra 	$L__BB0_653;

	not.pred 	%p379, %p12;
	@%p379 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7036;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4943, %r1177, %r412;
	mul.wide.s32 	%rd399, %r4943, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;

$L__BB0_651:
	not.pred 	%p380, %p14;
	@%p380 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7036;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4945, %r1177, %r413;
	mul.wide.s32 	%rd401, %r4945, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_653:
	add.s32 	%r4946, %r1151, %r1169;
	mul.lo.s32 	%r4947, %r4946, %r54;
	sub.s32 	%r1178, %r4947, %r1494;
	@%p15 bra 	$L__BB0_658;

	not.pred 	%p382, %p11;
	@%p382 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7035;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4949, %r1178, %r398;
	mul.wide.s32 	%rd403, %r4949, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;

$L__BB0_656:
	not.pred 	%p383, %p13;
	@%p383 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7035;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4951, %r1178, %r399;
	mul.wide.s32 	%rd405, %r4951, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;

$L__BB0_658:
	@%p15 bra 	$L__BB0_663;

	not.pred 	%p385, %p12;
	@%p385 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7034;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4953, %r1178, %r412;
	mul.wide.s32 	%rd407, %r4953, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;

$L__BB0_661:
	not.pred 	%p386, %p14;
	@%p386 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7034;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4955, %r1178, %r413;
	mul.wide.s32 	%rd409, %r4955, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_663:
	add.s32 	%r4956, %r1151, %r1171;
	mul.lo.s32 	%r4957, %r4956, %r54;
	sub.s32 	%r1179, %r4957, %r1494;
	@%p15 bra 	$L__BB0_668;

	not.pred 	%p388, %p11;
	@%p388 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7033;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4959, %r1179, %r398;
	mul.wide.s32 	%rd411, %r4959, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;

$L__BB0_666:
	not.pred 	%p389, %p13;
	@%p389 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7033;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4961, %r1179, %r399;
	mul.wide.s32 	%rd413, %r4961, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;

$L__BB0_668:
	@%p15 bra 	$L__BB0_673;

	not.pred 	%p391, %p12;
	@%p391 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7032;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4963, %r1179, %r412;
	mul.wide.s32 	%rd415, %r4963, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;

$L__BB0_671:
	not.pred 	%p392, %p14;
	@%p392 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7032;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4965, %r1179, %r413;
	mul.wide.s32 	%rd417, %r4965, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_673:
	add.s32 	%r4966, %r1167, %r1171;
	mul.lo.s32 	%r4967, %r4966, %r54;
	sub.s32 	%r1180, %r4967, %r1494;
	@%p15 bra 	$L__BB0_678;

	not.pred 	%p394, %p11;
	@%p394 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1127;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4969, %r1180, %r398;
	mul.wide.s32 	%rd419, %r4969, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;

$L__BB0_676:
	not.pred 	%p395, %p13;
	@%p395 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1127;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4971, %r1180, %r399;
	mul.wide.s32 	%rd421, %r4971, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;

$L__BB0_678:
	@%p15 bra 	$L__BB0_683;

	not.pred 	%p397, %p12;
	@%p397 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1128;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4973, %r1180, %r412;
	mul.wide.s32 	%rd423, %r4973, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;

$L__BB0_681:
	not.pred 	%p398, %p14;
	@%p398 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1128;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4975, %r1180, %r413;
	mul.wide.s32 	%rd425, %r4975, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_683:
	add.s32 	%r1181, %r1144, 1;
	add.s32 	%r4976, %r1181, %r1149;
	mad.lo.s32 	%r4978, %r4976, %r53, %r1145;
	mul.lo.s32 	%r4979, %r4978, %r54;
	sub.s32 	%r1182, %r4979, %r1494;
	@%p15 bra 	$L__BB0_688;

	not.pred 	%p400, %p11;
	@%p400 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7031;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4981, %r1182, %r398;
	mul.wide.s32 	%rd427, %r4981, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;

$L__BB0_686:
	not.pred 	%p401, %p13;
	@%p401 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7031;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4983, %r1182, %r399;
	mul.wide.s32 	%rd429, %r4983, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;

$L__BB0_688:
	@%p15 bra 	$L__BB0_693;

	not.pred 	%p403, %p12;
	@%p403 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7030;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4985, %r1182, %r412;
	mul.wide.s32 	%rd431, %r4985, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;

$L__BB0_691:
	not.pred 	%p404, %p14;
	@%p404 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7030;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4987, %r1182, %r413;
	mul.wide.s32 	%rd433, %r4987, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_693:
	add.s32 	%r4989, %r1181, %r1161;
	mul.lo.s32 	%r1183, %r4989, %r53;
	add.s32 	%r4990, %r1145, %r1183;
	mul.lo.s32 	%r4991, %r4990, %r54;
	sub.s32 	%r1184, %r4991, %r1494;
	@%p15 bra 	$L__BB0_698;

	not.pred 	%p406, %p11;
	@%p406 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7029;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4993, %r1184, %r398;
	mul.wide.s32 	%rd435, %r4993, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;

$L__BB0_696:
	not.pred 	%p407, %p13;
	@%p407 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7029;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4995, %r1184, %r399;
	mul.wide.s32 	%rd437, %r4995, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;

$L__BB0_698:
	@%p15 bra 	$L__BB0_703;

	not.pred 	%p409, %p12;
	@%p409 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7028;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4997, %r1184, %r412;
	mul.wide.s32 	%rd439, %r4997, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;

$L__BB0_701:
	not.pred 	%p410, %p14;
	@%p410 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7028;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4999, %r1184, %r413;
	mul.wide.s32 	%rd441, %r4999, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_703:
	add.s32 	%r5000, %r1151, %r1183;
	mul.lo.s32 	%r5001, %r5000, %r54;
	sub.s32 	%r1185, %r5001, %r1494;
	@%p15 bra 	$L__BB0_708;

	not.pred 	%p412, %p11;
	@%p412 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7027;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5003, %r1185, %r398;
	mul.wide.s32 	%rd443, %r5003, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;

$L__BB0_706:
	not.pred 	%p413, %p13;
	@%p413 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7027;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5005, %r1185, %r399;
	mul.wide.s32 	%rd445, %r5005, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;

$L__BB0_708:
	@%p15 bra 	$L__BB0_713;

	not.pred 	%p415, %p12;
	@%p415 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7026;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5007, %r1185, %r412;
	mul.wide.s32 	%rd447, %r5007, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;

$L__BB0_711:
	not.pred 	%p416, %p14;
	@%p416 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7026;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5009, %r1185, %r413;
	mul.wide.s32 	%rd449, %r5009, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_713:
	setp.eq.s32 	%p417, %r35, %r1904;
	@%p417 bra 	$L__BB0_715;

	mad.lo.s32 	%r5012, %r1477, %r35, %r36;
	mov.u32 	%r5013, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5014, %r5012, 1280, %r5013;
	add.s32 	%r5015, %r5014, -256;
	shl.b32 	%r5016, %r40, 4;
	add.s32 	%r5017, %r5015, %r5016;
	st.shared.v4.u32 	[%r5017+256], {%r3536, %r3613, %r1072, %r1078};
	st.shared.v4.u32 	[%r5017+1024], {%r3303, %r3380, %r1018, %r1030};
	shl.b32 	%r5018, %r40, 3;
	add.s32 	%r5019, %r5015, %r5018;
	st.shared.v2.u32 	[%r5019+768], {%r3579, %r3645};

$L__BB0_715:
	setp.eq.s32 	%p418, %r36, %r1909;
	@%p418 bra 	$L__BB0_719;

	not.b32 	%r6793, %r35;
	add.s32 	%r6792, %r1476, %r6793;
	mul.lo.s32 	%r5025, %r1476, %r36;
	mul.lo.s32 	%r5026, %r5025, 384;
	shl.b32 	%r5027, %r36, 6;
	sub.s32 	%r5028, %r5026, %r5027;
	mad.lo.s32 	%r5030, %r1905, %r1904, %r5028;
	mad.lo.s32 	%r5031, %r6792, 384, %r5030;
	shl.b32 	%r5032, %r5031, 2;
	mov.u32 	%r5033, _ZN6kernel5shmemE;
	add.s32 	%r5034, %r5033, %r5032;
	add.s32 	%r5035, %r5034, -256;
	shl.b32 	%r5036, %r40, 4;
	add.s32 	%r5037, %r5035, %r5036;
	st.shared.v4.u32 	[%r5037+256], {%r3457, %r3491, %r1042, %r1054};
	st.shared.v4.u32 	[%r5037+1024], {%r4058, %r4092, %r1127, %r1128};
	shl.b32 	%r5038, %r40, 3;
	add.s32 	%r1190, %r5035, %r5038;
	@%p417 bra 	$L__BB0_718;

	st.shared.v2.u32 	[%r1190], {%r3346, %r3412};

$L__BB0_718:
	st.shared.v2.u32 	[%r1190+768], {%r3917, %r3998};

$L__BB0_719:
	bar.sync 	0;
	@%p223 bra 	$L__BB0_721;

	mul.lo.s32 	%r5039, %r1477, 320;
	add.s32 	%r5041, %r35, -1;
	mul.lo.s32 	%r5043, %r36, 320;
	mad.lo.s32 	%r5044, %r5039, %r5041, %r5043;
	shl.b32 	%r5045, %r5044, 2;
	mov.u32 	%r5046, _ZN6kernel5shmemE;
	add.s32 	%r5047, %r5046, %r5045;
	add.s32 	%r5048, %r5047, -256;
	shl.b32 	%r5049, %r40, 4;
	add.s32 	%r5050, %r5048, %r5049;
	ld.shared.v4.u32 	{%r7230, %r7228, %r7224, %r7223}, [%r5050+256];
	ld.shared.v4.u32 	{%r7232, %r7231, %r7226, %r7225}, [%r5050+1024];
	shl.b32 	%r5059, %r40, 3;
	add.s32 	%r5060, %r5048, %r5059;
	ld.shared.v2.u32 	{%r7229, %r7227}, [%r5060+768];

$L__BB0_721:
	setp.eq.s32 	%p464, %r36, 0;
	@%p464 bra 	$L__BB0_724;

	not.b32 	%r6795, %r35;
	add.s32 	%r6794, %r1476, %r6795;
	mad.lo.s32 	%r5066, %r1476, 384, -64;
	add.s32 	%r5068, %r36, -1;
	mul.lo.s32 	%r5069, %r5066, %r5068;
	mad.lo.s32 	%r5072, %r1905, %r1904, %r5069;
	mad.lo.s32 	%r5073, %r6794, 384, %r5072;
	shl.b32 	%r5074, %r5073, 2;
	mov.u32 	%r5075, _ZN6kernel5shmemE;
	add.s32 	%r5076, %r5075, %r5074;
	add.s32 	%r5077, %r5076, -256;
	shl.b32 	%r5078, %r40, 4;
	add.s32 	%r5079, %r5077, %r5078;
	ld.shared.v4.u32 	{%r7244, %r7243, %r7241, %r7239}, [%r5079+256];
	ld.shared.v4.u32 	{%r7238, %r7237, %r7235, %r7233}, [%r5079+1024];
	shl.b32 	%r5088, %r40, 3;
	add.s32 	%r5089, %r5077, %r5088;
	ld.shared.v2.u32 	{%r7242, %r7240}, [%r5089+768];
	@%p223 bra 	$L__BB0_724;

	add.s32 	%r6791, %r5089, 768;
	ld.shared.v2.u32 	{%r7236, %r7234}, [%r6791+768];

$L__BB0_724:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5094, {low,high};}

	// end inline asm
	selp.b32 	%r5096, %r6897, %r5094, %p15;
	// begin inline asm
	{mul.f16x2 %r5095,%r5096,%r7022;
}
	// end inline asm
	selp.b32 	%r5099, %r6901, %r5094, %p15;
	// begin inline asm
	{mul.f16x2 %r5098,%r5099,%r7015;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5101, {low,high};}

	// end inline asm
	selp.b32 	%r5103, %r6897, %r5101, %p15;
	// begin inline asm
	{mul.f16x2 %r5102,%r5103,%r7003;
}
	// end inline asm
	selp.b32 	%r5106, %r6901, %r5101, %p15;
	// begin inline asm
	{mul.f16x2 %r5105,%r5106,%r6998;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5108, {low,high};}

	// end inline asm
	selp.b32 	%r5110, %r6897, %r5108, %p15;
	// begin inline asm
	{mul.f16x2 %r5109,%r5110,%r6990;
}
	// end inline asm
	selp.b32 	%r5113, %r6901, %r5108, %p15;
	// begin inline asm
	{mul.f16x2 %r5112,%r5113,%r6989;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5115, {low,high};}

	// end inline asm
	selp.b32 	%r5117, %r6897, %r5115, %p15;
	// begin inline asm
	{mul.f16x2 %r5116,%r5117,%r6994;
}
	// end inline asm
	selp.b32 	%r5120, %r6901, %r5115, %p15;
	// begin inline asm
	{mul.f16x2 %r5119,%r5120,%r6993;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5122, {low,high};}

	// end inline asm
	selp.b32 	%r5124, %r6897, %r5122, %p15;
	// begin inline asm
	{mul.f16x2 %r5123,%r5124,%r6992;
}
	// end inline asm
	selp.b32 	%r5127, %r6901, %r5122, %p15;
	// begin inline asm
	{mul.f16x2 %r5126,%r5127,%r6986;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5129, {low,high};}

	// end inline asm
	selp.b32 	%r5131, %r6897, %r5129, %p15;
	// begin inline asm
	{mul.f16x2 %r5130,%r5131,%r6982;
}
	// end inline asm
	selp.b32 	%r5134, %r6901, %r5129, %p15;
	// begin inline asm
	{mul.f16x2 %r5133,%r5134,%r6981;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5136, {low,high};}

	// end inline asm
	selp.b32 	%r5138, %r6897, %r5136, %p15;
	// begin inline asm
	{mul.f16x2 %r5137,%r5138,%r6980;
}
	// end inline asm
	selp.b32 	%r5141, %r6901, %r5136, %p15;
	// begin inline asm
	{mul.f16x2 %r5140,%r5141,%r6974;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5143, {low,high};}

	// end inline asm
	selp.b32 	%r5145, %r6897, %r5143, %p15;
	// begin inline asm
	{mul.f16x2 %r5144,%r5145,%r6967;
}
	// end inline asm
	selp.b32 	%r5148, %r6901, %r5143, %p15;
	// begin inline asm
	{mul.f16x2 %r5147,%r5148,%r6966;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5150, {low,high};}

	// end inline asm
	selp.b32 	%r5152, %r6897, %r5150, %p15;
	// begin inline asm
	{mul.f16x2 %r5151,%r5152,%r7186;
}
	// end inline asm
	selp.b32 	%r5155, %r6901, %r5150, %p15;
	// begin inline asm
	{mul.f16x2 %r5154,%r5155,%r7184;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5157, {low,high};}

	// end inline asm
	selp.b32 	%r5159, %r6897, %r5157, %p15;
	// begin inline asm
	{mul.f16x2 %r5158,%r5159,%r7185;
}
	// end inline asm
	selp.b32 	%r5162, %r6901, %r5157, %p15;
	// begin inline asm
	{mul.f16x2 %r5161,%r5162,%r7183;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5164, {low,high};}

	// end inline asm
	selp.b32 	%r5166, %r6897, %r5164, %p15;
	// begin inline asm
	{mul.f16x2 %r5165,%r5166,%r6959;
}
	// end inline asm
	selp.b32 	%r5169, %r6901, %r5164, %p15;
	// begin inline asm
	{mul.f16x2 %r5168,%r5169,%r6958;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5171, {low,high};}

	// end inline asm
	selp.b32 	%r5173, %r6897, %r5171, %p15;
	// begin inline asm
	{mul.f16x2 %r5172,%r5173,%r6963;
}
	// end inline asm
	selp.b32 	%r5176, %r6901, %r5171, %p15;
	// begin inline asm
	{mul.f16x2 %r5175,%r5176,%r6962;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5178, {low,high};}

	// end inline asm
	selp.b32 	%r5180, %r6897, %r5178, %p15;
	// begin inline asm
	{mul.f16x2 %r5179,%r5180,%r6961;
}
	// end inline asm
	selp.b32 	%r5183, %r6901, %r5178, %p15;
	// begin inline asm
	{mul.f16x2 %r5182,%r5183,%r6956;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5185, {low,high};}

	// end inline asm
	selp.b32 	%r5187, %r6897, %r5185, %p15;
	// begin inline asm
	{mul.f16x2 %r5186,%r5187,%r6951;
}
	// end inline asm
	selp.b32 	%r5190, %r6901, %r5185, %p15;
	// begin inline asm
	{mul.f16x2 %r5189,%r5190,%r6950;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5192, {low,high};}

	// end inline asm
	selp.b32 	%r5194, %r6897, %r5192, %p15;
	// begin inline asm
	{mul.f16x2 %r5193,%r5194,%r6953;
}
	// end inline asm
	selp.b32 	%r5197, %r6901, %r5192, %p15;
	// begin inline asm
	{mul.f16x2 %r5196,%r5197,%r6952;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5199, {low,high};}

	// end inline asm
	selp.b32 	%r5201, %r6897, %r5199, %p15;
	// begin inline asm
	{mul.f16x2 %r5200,%r5201,%r7170;
}
	// end inline asm
	selp.b32 	%r5204, %r6901, %r5199, %p15;
	// begin inline asm
	{mul.f16x2 %r5203,%r5204,%r7169;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5206, {low,high};}

	// end inline asm
	selp.b32 	%r5208, %r6897, %r5206, %p15;
	// begin inline asm
	{mul.f16x2 %r5207,%r5208,%r7168;
}
	// end inline asm
	selp.b32 	%r5211, %r6901, %r5206, %p15;
	// begin inline asm
	{mul.f16x2 %r5210,%r5211,%r7167;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5213, {low,high};}

	// end inline asm
	selp.b32 	%r5215, %r6897, %r5213, %p15;
	// begin inline asm
	{mul.f16x2 %r5214,%r5215,%r7182;
}
	// end inline asm
	selp.b32 	%r5218, %r6901, %r5213, %p15;
	// begin inline asm
	{mul.f16x2 %r5217,%r5218,%r7181;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5220, {low,high};}

	// end inline asm
	selp.b32 	%r5222, %r6897, %r5220, %p15;
	// begin inline asm
	{mul.f16x2 %r5221,%r5222,%r6945;
}
	// end inline asm
	selp.b32 	%r5225, %r6901, %r5220, %p15;
	// begin inline asm
	{mul.f16x2 %r5224,%r5225,%r6944;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5227, {low,high};}

	// end inline asm
	selp.b32 	%r5229, %r6897, %r5227, %p15;
	// begin inline asm
	{mul.f16x2 %r5228,%r5229,%r7180;
}
	// end inline asm
	selp.b32 	%r5232, %r6901, %r5227, %p15;
	// begin inline asm
	{mul.f16x2 %r5231,%r5232,%r7178;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5234, {low,high};}

	// end inline asm
	selp.b32 	%r5236, %r6897, %r5234, %p15;
	// begin inline asm
	{mul.f16x2 %r5235,%r5236,%r7179;
}
	// end inline asm
	selp.b32 	%r5239, %r6901, %r5234, %p15;
	// begin inline asm
	{mul.f16x2 %r5238,%r5239,%r7177;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5241, {low,high};}

	// end inline asm
	selp.b32 	%r5243, %r6897, %r5241, %p15;
	// begin inline asm
	{mul.f16x2 %r5242,%r5243,%r7166;
}
	// end inline asm
	selp.b32 	%r5246, %r6901, %r5241, %p15;
	// begin inline asm
	{mul.f16x2 %r5245,%r5246,%r7164;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5248, {low,high};}

	// end inline asm
	selp.b32 	%r5250, %r6897, %r5248, %p15;
	// begin inline asm
	{mul.f16x2 %r5249,%r5250,%r7165;
}
	// end inline asm
	selp.b32 	%r5253, %r6901, %r5248, %p15;
	// begin inline asm
	{mul.f16x2 %r5252,%r5253,%r7163;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5255, {low,high};}

	// end inline asm
	selp.b32 	%r5257, %r6897, %r5255, %p15;
	// begin inline asm
	{mul.f16x2 %r5256,%r5257,%r7176;
}
	// end inline asm
	selp.b32 	%r5260, %r6901, %r5255, %p15;
	// begin inline asm
	{mul.f16x2 %r5259,%r5260,%r7175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5262,%r7049,%r3346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5265,%r3457,%r3303;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5268,%r5262,%r5265;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5271,%r6805,%r5268;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5274,%r5095,%r5271;
}
	// end inline asm
	selp.b32 	%r7017, %r5095, %r5274, %p15;
	// begin inline asm
	{sub.f16x2 %r5277,%r7048,%r3412;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5280,%r3491,%r3380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5283,%r5277,%r5280;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5286,%r6805,%r5283;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5289,%r5098,%r5286;
}
	// end inline asm
	selp.b32 	%r7012, %r5098, %r5289, %p15;
	// begin inline asm
	{sub.f16x2 %r5292,%r7045,%r3579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5295,%r7051,%r3536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5298,%r5292,%r5295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5301,%r6805,%r5298;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5304,%r5102,%r5301;
}
	// end inline asm
	selp.b32 	%r7021, %r5102, %r5304, %p15;
	// begin inline asm
	{sub.f16x2 %r5307,%r7044,%r3645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5310,%r7050,%r3613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5313,%r5307,%r5310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5316,%r6805,%r5313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5319,%r5105,%r5316;
}
	// end inline asm
	selp.b32 	%r7014, %r5105, %r5319, %p15;
	// begin inline asm
	{sub.f16x2 %r5322,%r7048,%r7049;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5325,%r6896,%r5322;
}
	// end inline asm
	@%p15 bra 	$L__BB0_726;
	bra.uni 	$L__BB0_725;

$L__BB0_726:
	// begin inline asm
	{neg.f16x2 %r7245,%r5109;
}
	// end inline asm
	bra.uni 	$L__BB0_727;

$L__BB0_725:
	// begin inline asm
	{mul.f16x2 %r7245,%r6897,%r5322;
}
	// end inline asm

$L__BB0_727:
	mov.u32 	%r5336, 31;
	mov.u32 	%r5338, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5334,%r7245,%r5336,%r2000,%r5338;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5339,%r5325,%r5334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5342,%r1042,%r1018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5345,%r5342,%r5339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5348,%r6805,%r5345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r5109,%r5348;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5354,%r7050,%r7051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5357,%r6896,%r5354;
}
	// end inline asm
	mov.u32 	%r7246, %r5116;
	@%p15 bra 	$L__BB0_729;

	// begin inline asm
	{mul.f16x2 %r7246,%r6897,%r5354;
}
	// end inline asm

$L__BB0_729:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5366,%r7246,%r5336,%r2000,%r5338;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5371,%r5357,%r5366;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5374,%r7039,%r1018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5377,%r5371,%r5374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5380,%r6805,%r5377;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r5116,%r5380;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5386,%r7041,%r7049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5389,%r7047,%r7051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5392,%r5386,%r5389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5395,%r6805,%r5392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5398,%r5123,%r5395;
}
	// end inline asm
	selp.b32 	%r7022, %r5123, %r5398, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7049;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5403,%r7049,%r433,%r2000,%r5338;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5403;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5409, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5410,%r5409,%r7048;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5413,%r6900,%r5410;
}
	// end inline asm
	@%p15 bra 	$L__BB0_731;
	bra.uni 	$L__BB0_730;

$L__BB0_731:
	// begin inline asm
	{neg.f16x2 %r7247,%r5112;
}
	// end inline asm
	bra.uni 	$L__BB0_732;

$L__BB0_730:
	// begin inline asm
	{mul.f16x2 %r7247,%r6901,%r5410;
}
	// end inline asm

$L__BB0_732:
	mov.u32 	%r5428, 31;
	mov.u32 	%r5452, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5426,%r7247,%r5428,%r2000,%r5452;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5431,%r5413,%r5426;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5434,%r1054,%r1030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5437,%r5434,%r5431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5440,%r6805,%r5437;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7018,%r5112,%r5440;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7051;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5448,%r7051,%r433,%r2000,%r5452;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5448;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5454, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5455,%r5454,%r7050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5458,%r6900,%r5455;
}
	// end inline asm
	mov.u32 	%r7248, %r5119;
	@%p15 bra 	$L__BB0_734;

	// begin inline asm
	{mul.f16x2 %r7248,%r6901,%r5455;
}
	// end inline asm

$L__BB0_734:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5469,%r7248,%r5428,%r2000,%r5452;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5474,%r5458,%r5469;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5477,%r7038,%r1030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5480,%r5474,%r5477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5483,%r6805,%r5480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r5119,%r5483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5489,%r7040,%r7048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5492,%r7046,%r7050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5495,%r5489,%r5492;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5498,%r6805,%r5495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5501,%r5126,%r5498;
}
	// end inline asm
	selp.b32 	%r7015, %r5126, %r5501, %p15;
	// begin inline asm
	{sub.f16x2 %r5504,%r7046,%r7047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5507,%r6896,%r5504;
}
	// end inline asm
	mov.u32 	%r7249, %r5130;
	@%p15 bra 	$L__BB0_736;

	// begin inline asm
	{mul.f16x2 %r7249,%r6897,%r5504;
}
	// end inline asm

$L__BB0_736:
	mov.u32 	%r5518, 31;
	mov.u32 	%r5557, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5516,%r7249,%r5518,%r2000,%r5557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5521,%r5507,%r5516;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5524,%r7033,%r1042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5527,%r5521,%r5524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5530,%r6805,%r5527;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7010,%r5130,%r5530;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5536,%r7035,%r3917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5539,%r4058,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5542,%r5536,%r5539;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5545,%r6805,%r5542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5548,%r5137,%r5545;
}
	// end inline asm
	selp.b32 	%r7008, %r5137, %r5548, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7047;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5553,%r7047,%r433,%r2000,%r5557;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5553;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5559, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r5559,%r7046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5563,%r6900,%r5560;
}
	// end inline asm
	mov.u32 	%r7250, %r5133;
	@%p15 bra 	$L__BB0_738;

	// begin inline asm
	{mul.f16x2 %r7250,%r6901,%r5560;
}
	// end inline asm

$L__BB0_738:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5574,%r7250,%r5518,%r2000,%r5557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5579,%r5563,%r5574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5582,%r7032,%r1054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5585,%r5579,%r5582;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5588,%r6805,%r5585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7009,%r5133,%r5588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5594,%r7034,%r3998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5597,%r4092,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5600,%r5594,%r5597;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5603,%r6805,%r5600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5606,%r5140,%r5603;
}
	// end inline asm
	selp.b32 	%r7006, %r5140, %r5606, %p15;
	// begin inline asm
	{sub.f16x2 %r5609,%r7044,%r7045;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5612,%r6896,%r5609;
}
	// end inline asm
	@%p15 bra 	$L__BB0_740;
	bra.uni 	$L__BB0_739;

$L__BB0_740:
	// begin inline asm
	{neg.f16x2 %r7251,%r5144;
}
	// end inline asm
	bra.uni 	$L__BB0_741;

$L__BB0_739:
	// begin inline asm
	{mul.f16x2 %r7251,%r6897,%r5609;
}
	// end inline asm

$L__BB0_741:
	mov.u32 	%r5625, 31;
	mov.u32 	%r5627, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5623,%r7251,%r5625,%r2000,%r5627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5628,%r5612,%r5623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5631,%r7039,%r1072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5634,%r5631,%r5628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5637,%r6805,%r5634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7000,%r5144,%r5637;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5643,%r7243,%r7244;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5646,%r6896,%r5643;
}
	// end inline asm
	mov.u32 	%r7252, %r5151;
	@%p15 bra 	$L__BB0_743;

	// begin inline asm
	{mul.f16x2 %r7252,%r6897,%r5643;
}
	// end inline asm

$L__BB0_743:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5655,%r7252,%r5625,%r2000,%r5627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5660,%r5646,%r5655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5663,%r7241,%r1072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5666,%r5660,%r5663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5669,%r6805,%r5666;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7005,%r5151,%r5669;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5675,%r7242,%r7045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5678,%r7043,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5681,%r5675,%r5678;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5684,%r6805,%r5681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5687,%r5158,%r5684;
}
	// end inline asm
	selp.b32 	%r7003, %r5158, %r5687, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7045;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5692,%r7045,%r433,%r2000,%r5627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5692;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5698, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5699,%r5698,%r7044;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5702,%r6900,%r5699;
}
	// end inline asm
	@%p15 bra 	$L__BB0_745;
	bra.uni 	$L__BB0_744;

$L__BB0_745:
	// begin inline asm
	{neg.f16x2 %r7253,%r5147;
}
	// end inline asm
	bra.uni 	$L__BB0_746;

$L__BB0_744:
	// begin inline asm
	{mul.f16x2 %r7253,%r6901,%r5699;
}
	// end inline asm

$L__BB0_746:
	mov.u32 	%r5717, 31;
	mov.u32 	%r5741, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5715,%r7253,%r5717,%r2000,%r5741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5720,%r5702,%r5715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5723,%r7038,%r1078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5726,%r5723,%r5720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5729,%r6805,%r5726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6999,%r5147,%r5729;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7244;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5737,%r7244,%r433,%r2000,%r5741;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5737;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5743, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5744,%r5743,%r7243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5747,%r6900,%r5744;
}
	// end inline asm
	mov.u32 	%r7254, %r5154;
	@%p15 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r7254,%r6901,%r5744;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5758,%r7254,%r5717,%r2000,%r5741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5763,%r5747,%r5758;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r7239,%r1078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5769,%r5763,%r5766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5772,%r6805,%r5769;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7004,%r5154,%r5772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5778,%r7240,%r7044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5781,%r7042,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5784,%r5778,%r5781;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5787,%r6805,%r5784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5790,%r5161,%r5787;
}
	// end inline asm
	selp.b32 	%r6998, %r5161, %r5790, %p15;
	// begin inline asm
	{sub.f16x2 %r5793,%r7040,%r7041;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r6896,%r5793;
}
	// end inline asm
	@%p15 bra 	$L__BB0_750;
	bra.uni 	$L__BB0_749;

$L__BB0_750:
	// begin inline asm
	{neg.f16x2 %r7255,%r5165;
}
	// end inline asm
	bra.uni 	$L__BB0_751;

$L__BB0_749:
	// begin inline asm
	{mul.f16x2 %r7255,%r6897,%r5793;
}
	// end inline asm

$L__BB0_751:
	mov.u32 	%r5809, 31;
	mov.u32 	%r5811, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5807,%r7255,%r5809,%r2000,%r5811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5812,%r5796,%r5807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r7033,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r5815,%r5812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5821,%r6805,%r5818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6990,%r5165,%r5821;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5827,%r7042,%r7043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5830,%r6896,%r5827;
}
	// end inline asm
	mov.u32 	%r7256, %r5172;
	@%p15 bra 	$L__BB0_753;

	// begin inline asm
	{mul.f16x2 %r7256,%r6897,%r5827;
}
	// end inline asm

$L__BB0_753:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5839,%r7256,%r5809,%r2000,%r5811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5844,%r5830,%r5839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5847,%r7029,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5850,%r5844,%r5847;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5853,%r6805,%r5850;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6994,%r5172,%r5853;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5859,%r7031,%r7041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5862,%r7037,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5865,%r5859,%r5862;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5868,%r6805,%r5865;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5871,%r5179,%r5868;
}
	// end inline asm
	selp.b32 	%r6992, %r5179, %r5871, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7041;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5876,%r7041,%r433,%r2000,%r5811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5876;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5882, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r5882,%r7040;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5886,%r6900,%r5883;
}
	// end inline asm
	@%p15 bra 	$L__BB0_755;
	bra.uni 	$L__BB0_754;

$L__BB0_755:
	// begin inline asm
	{neg.f16x2 %r7257,%r5168;
}
	// end inline asm
	bra.uni 	$L__BB0_756;

$L__BB0_754:
	// begin inline asm
	{mul.f16x2 %r7257,%r6901,%r5883;
}
	// end inline asm

$L__BB0_756:
	mov.u32 	%r5901, 31;
	mov.u32 	%r5925, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5899,%r7257,%r5901,%r2000,%r5925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5904,%r5886,%r5899;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r7032,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5910,%r5907,%r5904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5913,%r6805,%r5910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6989,%r5168,%r5913;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7043;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5921,%r7043,%r433,%r2000,%r5925;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5921;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5927, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r5927,%r7042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5931,%r6900,%r5928;
}
	// end inline asm
	mov.u32 	%r7258, %r5175;
	@%p15 bra 	$L__BB0_758;

	// begin inline asm
	{mul.f16x2 %r7258,%r6901,%r5928;
}
	// end inline asm

$L__BB0_758:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5942,%r7258,%r5901,%r2000,%r5925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5947,%r5931,%r5942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r7028,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5953,%r5947,%r5950;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5956,%r6805,%r5953;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6993,%r5175,%r5956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5962,%r7030,%r7040;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5965,%r7036,%r7042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5968,%r5962,%r5965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5971,%r6805,%r5968;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5974,%r5182,%r5971;
}
	// end inline asm
	selp.b32 	%r6986, %r5182, %r5974, %p15;
	// begin inline asm
	{sub.f16x2 %r5977,%r7034,%r7035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5980,%r6896,%r5977;
}
	// end inline asm
	@%p15 bra 	$L__BB0_760;
	bra.uni 	$L__BB0_759;

$L__BB0_760:
	// begin inline asm
	{neg.f16x2 %r7259,%r5186;
}
	// end inline asm
	bra.uni 	$L__BB0_761;

$L__BB0_759:
	// begin inline asm
	{mul.f16x2 %r7259,%r6897,%r5977;
}
	// end inline asm

$L__BB0_761:
	mov.u32 	%r5993, 31;
	mov.u32 	%r5995, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5991,%r7259,%r5993,%r2000,%r5995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5996,%r5980,%r5991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5999,%r1127,%r7033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6002,%r5999,%r5996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6005,%r6805,%r6002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6978,%r5186,%r6005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6011,%r7036,%r7037;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6014,%r6896,%r6011;
}
	// end inline asm
	mov.u32 	%r7260, %r5193;
	@%p15 bra 	$L__BB0_763;

	// begin inline asm
	{mul.f16x2 %r7260,%r6897,%r6011;
}
	// end inline asm

$L__BB0_763:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6023,%r7260,%r5993,%r2000,%r5995;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6028,%r6014,%r6023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6031,%r7027,%r7033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6034,%r6028,%r6031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6037,%r6805,%r6034;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6982,%r5193,%r6037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6043,%r7229,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6046,%r7232,%r7037;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6049,%r6043,%r6046;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6052,%r6805,%r6049;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6055,%r5200,%r6052;
}
	// end inline asm
	selp.b32 	%r6980, %r5200, %r6055, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7035;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6060,%r7035,%r433,%r2000,%r5995;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6060;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6066, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r6066,%r7034;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6070,%r6900,%r6067;
}
	// end inline asm
	@%p15 bra 	$L__BB0_765;
	bra.uni 	$L__BB0_764;

$L__BB0_765:
	// begin inline asm
	{neg.f16x2 %r7261,%r5189;
}
	// end inline asm
	bra.uni 	$L__BB0_766;

$L__BB0_764:
	// begin inline asm
	{mul.f16x2 %r7261,%r6901,%r6067;
}
	// end inline asm

$L__BB0_766:
	mov.u32 	%r6085, 31;
	mov.u32 	%r6109, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6083,%r7261,%r6085,%r2000,%r6109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6088,%r6070,%r6083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6091,%r1128,%r7032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6094,%r6091,%r6088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6097,%r6805,%r6094;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6977,%r5189,%r6097;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7037;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6105,%r7037,%r433,%r2000,%r6109;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6105;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6111, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6112,%r6111,%r7036;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6115,%r6900,%r6112;
}
	// end inline asm
	mov.u32 	%r7262, %r5196;
	@%p15 bra 	$L__BB0_768;

	// begin inline asm
	{mul.f16x2 %r7262,%r6901,%r6112;
}
	// end inline asm

$L__BB0_768:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6126,%r7262,%r6085,%r2000,%r6109;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6131,%r6115,%r6126;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r7026,%r7032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6137,%r6131,%r6134;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6140,%r6805,%r6137;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6981,%r5196,%r6140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6146,%r7227,%r7034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6149,%r7231,%r7036;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6152,%r6146,%r6149;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6155,%r6805,%r6152;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6158,%r5203,%r6155;
}
	// end inline asm
	selp.b32 	%r6974, %r5203, %r6158, %p15;
	// begin inline asm
	{sub.f16x2 %r6161,%r7231,%r7232;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r6896,%r6161;
}
	// end inline asm
	mov.u32 	%r7263, %r5207;
	@%p15 bra 	$L__BB0_770;

	// begin inline asm
	{mul.f16x2 %r7263,%r6897,%r6161;
}
	// end inline asm

$L__BB0_770:
	mov.u32 	%r6175, 31;
	mov.u32 	%r6199, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6173,%r7263,%r6175,%r2000,%r6199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6178,%r6164,%r6173;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6181,%r7226,%r1127;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6184,%r6178,%r6181;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6187,%r6805,%r6184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6971,%r5207,%r6187;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7232;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6195,%r7232,%r433,%r2000,%r6199;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6195;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6201, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r6201,%r7231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6205,%r6900,%r6202;
}
	// end inline asm
	mov.u32 	%r7264, %r5210;
	@%p15 bra 	$L__BB0_772;

	// begin inline asm
	{mul.f16x2 %r7264,%r6901,%r6202;
}
	// end inline asm

$L__BB0_772:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6216,%r7264,%r6175,%r2000,%r6199;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6221,%r6205,%r6216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6224,%r7225,%r1128;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6227,%r6221,%r6224;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6230,%r6805,%r6227;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6970,%r5210,%r6230;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r7240,%r7242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6239,%r6896,%r6236;
}
	// end inline asm
	@%p15 bra 	$L__BB0_774;
	bra.uni 	$L__BB0_773;

$L__BB0_774:
	// begin inline asm
	{neg.f16x2 %r7265,%r5214;
}
	// end inline asm
	bra.uni 	$L__BB0_775;

$L__BB0_773:
	// begin inline asm
	{mul.f16x2 %r7265,%r6897,%r6236;
}
	// end inline asm

$L__BB0_775:
	mov.u32 	%r6252, 31;
	mov.u32 	%r6276, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6250,%r7265,%r6252,%r2000,%r6276;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6255,%r6239,%r6250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6258,%r7029,%r7241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6261,%r6258,%r6255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6264,%r6805,%r6261;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6967,%r5214,%r6264;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7242;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6272,%r7242,%r433,%r2000,%r6276;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6272;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6278, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6279,%r6278,%r7240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6282,%r6900,%r6279;
}
	// end inline asm
	@%p15 bra 	$L__BB0_777;
	bra.uni 	$L__BB0_776;

$L__BB0_777:
	// begin inline asm
	{neg.f16x2 %r7266,%r5217;
}
	// end inline asm
	bra.uni 	$L__BB0_778;

$L__BB0_776:
	// begin inline asm
	{mul.f16x2 %r7266,%r6901,%r6279;
}
	// end inline asm

$L__BB0_778:
	mov.u32 	%r6297, 31;
	mov.u32 	%r6299, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6295,%r7266,%r6297,%r2000,%r6299;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6300,%r6282,%r6295;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r7028,%r7239;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6306,%r6303,%r6300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6309,%r6805,%r6306;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6966,%r5217,%r6309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6315,%r7030,%r7031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6318,%r6896,%r6315;
}
	// end inline asm
	@%p15 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7267,%r5221;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7267,%r6897,%r6315;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r6331, 31;
	mov.u32 	%r6333, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6329,%r7267,%r6331,%r2000,%r6333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6334,%r6318,%r6329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6337,%r7027,%r7029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6340,%r6337,%r6334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6343,%r6805,%r6340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6959,%r5221,%r6343;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6349,%r7237,%r7238;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6352,%r6896,%r6349;
}
	// end inline asm
	mov.u32 	%r7268, %r5228;
	@%p15 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7268,%r6897,%r6349;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6361,%r7268,%r6331,%r2000,%r6333;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6366,%r6352,%r6361;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6369,%r7235,%r7029;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6372,%r6366,%r6369;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6375,%r6805,%r6372;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6963,%r5228,%r6375;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6381,%r7236,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6384,%r7230,%r7238;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6387,%r6381,%r6384;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6390,%r6805,%r6387;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6393,%r5235,%r6390;
}
	// end inline asm
	selp.b32 	%r6961, %r5235, %r6393, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7031;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6398,%r7031,%r433,%r2000,%r6333;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6398;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6404, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r6404,%r7030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6408,%r6900,%r6405;
}
	// end inline asm
	@%p15 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7269,%r5224;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7269,%r6901,%r6405;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6423, 31;
	mov.u32 	%r6447, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6421,%r7269,%r6423,%r2000,%r6447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6426,%r6408,%r6421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6429,%r7026,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6432,%r6429,%r6426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6435,%r6805,%r6432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6958,%r5224,%r6435;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7238;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6443,%r7238,%r433,%r2000,%r6447;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6443;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6449, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6450,%r6449,%r7237;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6453,%r6900,%r6450;
}
	// end inline asm
	mov.u32 	%r7270, %r5231;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7270,%r6901,%r6450;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6464,%r7270,%r6423,%r2000,%r6447;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6469,%r6453,%r6464;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6472,%r7233,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6475,%r6469,%r6472;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6478,%r6805,%r6475;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6962,%r5231,%r6478;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6484,%r7234,%r7030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6487,%r7228,%r7237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6490,%r6484,%r6487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6493,%r6805,%r6490;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6496,%r5238,%r6493;
}
	// end inline asm
	selp.b32 	%r6956, %r5238, %r6496, %p15;
	// begin inline asm
	{sub.f16x2 %r6499,%r7227,%r7229;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6502,%r6896,%r6499;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7271,%r5242;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7271,%r6897,%r6499;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6515, 31;
	mov.u32 	%r6517, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6513,%r7271,%r6515,%r2000,%r6517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6518,%r6502,%r6513;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6521,%r7226,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6524,%r6521,%r6518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6527,%r6805,%r6524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6951,%r5242,%r6527;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6533,%r7228,%r7230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6536,%r6896,%r6533;
}
	// end inline asm
	mov.u32 	%r7272, %r5249;
	@%p15 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7272,%r6897,%r6533;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6545,%r7272,%r6515,%r2000,%r6517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6550,%r6536,%r6545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6553,%r7224,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6556,%r6550,%r6553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6559,%r6805,%r6556;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6953,%r5249,%r6559;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7229;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6567,%r7229,%r433,%r2000,%r6517;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6567;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6573, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6574,%r6573,%r7227;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6577,%r6900,%r6574;
}
	// end inline asm
	@%p15 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7273,%r5245;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7273,%r6901,%r6574;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6592, 31;
	mov.u32 	%r6616, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6590,%r7273,%r6592,%r2000,%r6616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6595,%r6577,%r6590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6598,%r7225,%r7026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6601,%r6598,%r6595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6604,%r6805,%r6601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6950,%r5245,%r6604;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7230;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6612,%r7230,%r433,%r2000,%r6616;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6612;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6618, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6619,%r6618,%r7228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6622,%r6900,%r6619;
}
	// end inline asm
	mov.u32 	%r7274, %r5252;
	@%p15 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7274,%r6901,%r6619;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6633,%r7274,%r6592,%r2000,%r6616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6638,%r6622,%r6633;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6641,%r7223,%r7026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6644,%r6638,%r6641;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6647,%r6805,%r6644;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6952,%r5252,%r6647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6653,%r7234,%r7236;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6656,%r6896,%r6653;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;
	bra.uni 	$L__BB0_799;

$L__BB0_800:
	// begin inline asm
	{neg.f16x2 %r7275,%r5256;
}
	// end inline asm
	bra.uni 	$L__BB0_801;

$L__BB0_799:
	// begin inline asm
	{mul.f16x2 %r7275,%r6897,%r6653;
}
	// end inline asm

$L__BB0_801:
	mov.u32 	%r6669, 31;
	mov.u32 	%r6693, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6667,%r7275,%r6669,%r2000,%r6693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6672,%r6656,%r6667;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6675,%r7224,%r7235;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6678,%r6675,%r6672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6681,%r6805,%r6678;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6945,%r5256,%r6681;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7236;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6689,%r7236,%r433,%r2000,%r6693;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6689;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6695, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6696,%r6695,%r7234;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6699,%r6900,%r6696;
}
	// end inline asm
	@%p15 bra 	$L__BB0_803;
	bra.uni 	$L__BB0_802;

$L__BB0_803:
	// begin inline asm
	{neg.f16x2 %r7276,%r5259;
}
	// end inline asm
	bra.uni 	$L__BB0_804;

$L__BB0_802:
	// begin inline asm
	{mul.f16x2 %r7276,%r6901,%r6696;
}
	// end inline asm

$L__BB0_804:
	mov.u32 	%r6714, 31;
	mov.u32 	%r6716, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6712,%r7276,%r6714,%r2000,%r6716;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6717,%r6699,%r6712;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6720,%r7223,%r7233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6723,%r6720,%r6717;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6726,%r6805,%r6723;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6944,%r5259,%r6726;
}
	// end inline asm
	bar.sync 	0;
	@%p417 bra 	$L__BB0_807;

	setp.ne.s32 	%p456, %r36, %r1909;
	shl.b32 	%r6736, %r36, 8;
	shl.b32 	%r6740, %r1477, 8;
	or.b32  	%r6741, %r6740, 128;
	mad.lo.s32 	%r6743, %r6741, %r35, %r1912;
	add.s32 	%r6744, %r6743, %r6736;
	shl.b32 	%r6745, %r6744, 2;
	mov.u32 	%r6746, _ZN6kernel5shmemE;
	add.s32 	%r6747, %r6746, %r6745;
	shl.b32 	%r6748, %r40, 4;
	add.s32 	%r1472, %r6747, %r6748;
	st.shared.v4.u32 	[%r1472], {%r7005, %r7004, %r7000, %r6999};
	st.shared.v4.u32 	[%r1472+512], {%r7021, %r7014, %r7024, %r7023};
	@%p456 bra 	$L__BB0_807;

	st.shared.v4.u32 	[%r1472+1024], {%r7019, %r7018, %r7017, %r7012};

$L__BB0_807:
	@%p418 bra 	$L__BB0_809;

	not.b32 	%r6797, %r35;
	add.s32 	%r6796, %r1476, %r6797;
	mul.lo.s32 	%r6754, %r6796, 384;
	mad.lo.s32 	%r6755, %r65, %r36, %r6754;
	mad.lo.s32 	%r6758, %r1907, %r1909, %r6755;
	mad.lo.s32 	%r6761, %r1905, %r1904, %r6758;
	shl.b32 	%r6762, %r6761, 2;
	mov.u32 	%r6763, _ZN6kernel5shmemE;
	add.s32 	%r6764, %r6763, %r6762;
	shl.b32 	%r6765, %r40, 4;
	add.s32 	%r6766, %r6764, %r6765;
	st.shared.v4.u32 	[%r6766], {%r7019, %r7018, %r7017, %r7012};
	st.shared.v4.u32 	[%r6766+512], {%r7010, %r7009, %r6978, %r6977};
	st.shared.v4.u32 	[%r6766+1024], {%r7008, %r7006, %r6971, %r6970};

$L__BB0_809:
	rem.s32 	%r6767, %r7052, %r1480;
	setp.eq.s32 	%p458, %r6767, 0;
	@%p458 bra 	$L__BB0_811;

	bar.sync 	0;
	bra.uni 	$L__BB0_818;

$L__BB0_811:
	@%p162 bra 	$L__BB0_813;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_813:
	bar.sync 	0;
	@%p163 bra 	$L__BB0_817;

	membar.gl;
	setp.eq.s32 	%p461, %r427, %r428;
	mov.u32 	%r6784, -2147483647;
	sub.s32 	%r6785, %r6784, %r426;
	selp.b32 	%r6773, %r6785, 1, %p461;
	// begin inline asm
	atom.add.release.gpu.u32 %r6772,[%rd25],%r6773;
	// end inline asm

$L__BB0_815:
	ld.volatile.u32 	%r6786, [%rd25];
	xor.b32  	%r6787, %r6786, %r6772;
	setp.gt.s32 	%p462, %r6787, -1;
	@%p462 bra 	$L__BB0_815;

	// begin inline asm
	ld.acquire.gpu.u32 %r6788,[%rd25];
	// end inline asm

$L__BB0_817:
	bar.sync 	0;

$L__BB0_818:
	add.s32 	%r7052, %r7052, 1;
	setp.lt.s32 	%p463, %r7052, %r43;
	mov.u32 	%r6972, %r480;
	mov.u32 	%r6973, %r7141;
	mov.u32 	%r6976, %r481;
	mov.u32 	%r6979, %r7143;
	mov.u32 	%r6984, %r486;
	mov.u32 	%r6988, %r489;
	mov.u32 	%r6996, %r7154;
	mov.u32 	%r7001, %r7156;
	mov.u32 	%r7007, %r507;
	mov.u32 	%r7011, %r515;
	mov.u32 	%r7013, %r517;
	mov.u32 	%r7016, %r519;
	mov.u32 	%r7020, %r523;
	mov.u32 	%r7025, %r527;
	@%p463 bra 	$L__BB0_302;

$L__BB0_819:
	ret;

}

