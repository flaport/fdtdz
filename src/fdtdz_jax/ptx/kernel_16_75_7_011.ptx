//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[192]
)
{
	.reg .pred 	%p<521>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<654>;
	.reg .b32 	%r<7338>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<488>;


	mov.b64 	%rd31, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd31;
	ld.param.v2.u32 	{%r1479, %r1480}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1481, %r1482}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1483, %r1484}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1485, %r1486}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1487, %r1488}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1489, %r1490}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1491, %r1492}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1493, %r1494}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1495, %r1496}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1497, %r1498}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	ld.param.v2.u32 	{%r1499, %r1500}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+80];
	ld.param.v2.u32 	{%r1501, %r1502}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+88];
	ld.param.v2.u32 	{%r1503, %r1504}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+96];
	mov.u32 	%r41, %tid.y;
	mov.u32 	%r42, %tid.z;
	mov.u32 	%r43, %ctaid.y;
	mov.u32 	%r44, %ctaid.z;
	mov.u32 	%r1505, 32;
	sub.s32 	%r45, %r1505, %r1486;
	mov.u32 	%r46, %tid.x;
	setp.le.s32 	%p28, %r45, %r46;
	add.s32 	%r1506, %r1492, -1;
	mad.lo.s32 	%r1507, %r1506, %r1491, %r1490;
	add.s32 	%r1508, %r1485, %r1484;
	add.s32 	%r1509, %r1508, %r1507;
	add.s32 	%r1510, %r1509, 1;
	mul.lo.s32 	%r1511, %r1479, %r1481;
	shl.b32 	%r47, %r1511, 1;
	shl.b32 	%r1512, %r1511, 2;
	div.s32 	%r1513, %r1510, %r1512;
	add.s32 	%r1514, %r1513, 1;
	mul.lo.s32 	%r1515, %r1514, %r1485;
	mul.lo.s32 	%r1516, %r1480, %r1482;
	shl.b32 	%r48, %r1516, 1;
	div.s32 	%r1517, %r1515, %r48;
	add.s32 	%r1518, %r1517, 1;
	mul.lo.s32 	%r49, %r1518, %r1484;
	@%p28 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f83, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f83;
  cvt.rn.f16.f32 high, %f83;
  mov.b32 %r6872, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f81, [%rd1+136];
	neg.f32 	%f80, %f81;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6872, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd32, [%rd1+184];
	cvta.to.global.u64 	%rd2, %rd32;
	mad.lo.s32 	%r1521, %r1481, %r44, %r43;
	mad.lo.s32 	%r1522, %r1521, %r1480, %r42;
	mad.lo.s32 	%r1523, %r1522, %r1479, %r41;
	shl.b32 	%r53, %r1523, 5;
	add.s32 	%r6877, %r53, %r46;
	mul.lo.s32 	%r1524, %r1516, %r1511;
	shl.b32 	%r57, %r1524, 5;
	mov.u32 	%r1525, 8;
	sub.s32 	%r1526, %r1525, %r1493;
	add.s32 	%r1527, %r1526, %r1494;
	sub.s32 	%r1528, %r1525, %r1495;
	add.s32 	%r1529, %r1528, %r1496;
	sub.s32 	%r58, %r1498, %r1497;
	mul.lo.s32 	%r1530, %r1492, %r58;
	mul.lo.s32 	%r1531, %r1530, %r1529;
	mul.lo.s32 	%r1532, %r1531, %r1527;
	mul.lo.s32 	%r59, %r1532, 3;
	setp.ge.s32 	%p29, %r6877, %r59;
	@%p29 bra 	$L__BB0_10;

	add.s32 	%r1533, %r1496, 8;
	sub.s32 	%r1534, %r1533, %r1495;
	mul.lo.s32 	%r1535, %r1492, %r1534;
	add.s32 	%r1536, %r1494, 8;
	sub.s32 	%r1537, %r1536, %r1493;
	mul.lo.s32 	%r1538, %r1535, %r1537;
	mul.lo.s32 	%r1539, %r1538, %r58;
	not.b32 	%r1540, %r46;
	mad.lo.s32 	%r1541, %r1539, 3, %r1540;
	sub.s32 	%r1542, %r1541, %r53;
	mul.lo.s32 	%r1543, %r1516, %r1479;
	mul.lo.s32 	%r1544, %r1543, %r1481;
	shl.b32 	%r1545, %r1544, 5;
	div.u32 	%r60, %r1542, %r1545;
	add.s32 	%r1546, %r60, 1;
	and.b32  	%r6874, %r1546, 3;
	setp.eq.s32 	%p30, %r6874, 0;
	mov.u32 	%r6875, %r6877;
	@%p30 bra 	$L__BB0_7;

	mov.u32 	%r6875, %r6877;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd33, %r6875, 4;
	add.s64 	%rd34, %rd2, %rd33;
	mov.u32 	%r1547, 0;
	st.global.u32 	[%rd34], %r1547;
	add.s32 	%r6875, %r6875, %r57;
	add.s32 	%r6874, %r6874, -1;
	setp.ne.s32 	%p31, %r6874, 0;
	@%p31 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p32, %r60, 3;
	@%p32 bra 	$L__BB0_10;

	mul.wide.s32 	%rd37, %r57, 4;

$L__BB0_9:
	mul.wide.s32 	%rd35, %r6875, 4;
	add.s64 	%rd36, %rd2, %rd35;
	mov.u32 	%r1548, 0;
	st.global.u32 	[%rd36], %r1548;
	add.s64 	%rd38, %rd36, %rd37;
	st.global.u32 	[%rd38], %r1548;
	add.s32 	%r1549, %r6875, %r57;
	add.s32 	%r1550, %r1549, %r57;
	add.s64 	%rd39, %rd38, %rd37;
	st.global.u32 	[%rd39], %r1548;
	add.s32 	%r1551, %r1550, %r57;
	add.s64 	%rd40, %rd39, %rd37;
	st.global.u32 	[%rd40], %r1548;
	add.s32 	%r6875, %r1551, %r57;
	setp.lt.s32 	%p33, %r6875, %r59;
	@%p33 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd41, [%rd1+104];
	cvta.to.global.u64 	%rd3, %rd41;
	sub.s32 	%r1552, %r1485, %r47;
	div.s32 	%r1553, %r1552, %r48;
	mul.lo.s32 	%r1554, %r1553, %r1484;
	sub.s32 	%r1555, %r1554, %r47;
	sub.s32 	%r1556, %r1484, %r48;
	mul.lo.s32 	%r1557, %r1556, %r1481;
	mul.lo.s32 	%r69, %r1479, 384;
	add.s32 	%r1558, %r69, %r69;
	add.s32 	%r1559, %r1558, 128;
	mul.lo.s32 	%r1561, %r1516, 768;
	mul.lo.s32 	%r1562, %r1557, %r1559;
	mad.lo.s32 	%r70, %r1561, %r1555, %r1562;
	bra.uni 	$L__BB0_11;

$L__BB0_850:
	mov.f32 	%f641, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f641;
  cvt.rn.f16.f32 high, %f641;
  mov.b32 %r6856, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd483, %r6877, 4;
	add.s64 	%rd484, %rd3, %rd483;
	st.global.u32 	[%rd484], %r6856;
	add.s32 	%r6877, %r6877, %r57;

$L__BB0_11:
	setp.lt.s32 	%p34, %r6877, %r70;
	@%p34 bra 	$L__BB0_850;

	ld.param.u64 	%rd42, [%rd1+144];
	cvta.to.global.u64 	%rd5, %rd42;
	ld.param.u64 	%rd43, [%rd1+112];
	cvta.to.global.u64 	%rd6, %rd43;
	ld.param.u64 	%rd44, [%rd1+152];
	cvta.to.global.u64 	%rd7, %rd44;
	mad.lo.s32 	%r6913, %r1479, %r43, %r41;
	mul.lo.s32 	%r78, %r1480, %r44;
	add.s32 	%r79, %r78, %r42;
	setp.ge.s32 	%p35, %r6913, %r1484;
	@%p35 bra 	$L__BB0_66;

	mov.u32 	%r1563, 31;
	sub.s32 	%r1564, %r1563, %r46;
	setp.gt.s32 	%p36, %r45, %r46;
	selp.b32 	%r1565, %r46, %r1564, %p36;
	shl.b32 	%r1566, %r1565, 2;
	mov.u32 	%r1567, 2;
	sub.s32 	%r80, %r1566, %r1487;
	shl.b32 	%r1568, %r1486, 2;
	mov.u32 	%r1569, 128;
	sub.s32 	%r81, %r1569, %r1568;
	sub.s32 	%r1570, %r1567, %r1487;
	add.s32 	%r82, %r1570, %r1566;
	ld.param.f32 	%f84, [%rd1+136];
	rcp.rn.f32 	%f1, %f84;
	sub.s32 	%r83, %r1494, %r1493;
	sub.s32 	%r84, %r1496, %r1495;
	add.s32 	%r85, %r1494, -1;
	add.s32 	%r86, %r1496, -1;
	add.s32 	%r87, %r1498, -1;
	mul.lo.s32 	%r1571, %r1485, %r1484;
	shl.b32 	%r88, %r1571, 6;
	add.s32 	%r89, %r1484, -1;
	selp.f32 	%f2, 0f00000000, 0f3F800000, %p36;
	add.s32 	%r90, %r80, 1;
	add.s32 	%r91, %r82, 1;
	shl.b32 	%r92, %r46, 1;
	or.b32  	%r93, %r92, 1;
	shr.u32 	%r1572, %r93, 31;
	add.s32 	%r1573, %r93, %r1572;
	shr.s32 	%r95, %r1573, 1;
	and.b32  	%r1574, %r1573, -2;
	sub.s32 	%r1575, %r93, %r1574;
	add.s32 	%r94, %r1575, %r88;
	rem.s32 	%r1634, %r90, %r81;
	add.s32 	%r1635, %r1634, %r81;
	rem.s32 	%r1636, %r1635, %r81;
	rem.s32 	%r1637, %r91, %r81;
	add.s32 	%r1638, %r1637, %r81;
	rem.s32 	%r1639, %r1638, %r81;
	mov.u32 	%r6878, %r6913;

$L__BB0_14:
	setp.ge.s32 	%p37, %r79, %r1485;
	@%p37 bra 	$L__BB0_65;

	setp.ge.s32 	%p38, %r6878, %r1499;
	setp.lt.s32 	%p39, %r6878, %r1500;
	and.pred  	%p1, %p39, %p38;
	setp.lt.s32 	%p40, %r6878, %r1494;
	setp.ge.s32 	%p41, %r6878, %r1493;
	and.pred  	%p2, %p40, %p41;
	selp.b32 	%r1576, %r6878, %r85, %p40;
	setp.lt.s32 	%p42, %r6878, %r1493;
	selp.b32 	%r1577, %r1493, %r1576, %p42;
	sub.s32 	%r1578, %r1577, %r1493;
	add.s32 	%r97, %r89, %r6878;
	rem.s32 	%r1579, %r80, %r81;
	add.s32 	%r1580, %r1579, %r81;
	rem.s32 	%r98, %r1580, %r81;
	rem.s32 	%r1581, %r82, %r81;
	add.s32 	%r1582, %r1581, %r81;
	rem.s32 	%r99, %r1582, %r81;
	setp.lt.s32 	%p43, %r98, %r1498;
	sub.s32 	%r100, %r98, %r1497;
	setp.lt.s32 	%p44, %r98, %r1497;
	selp.b32 	%r1583, %r98, %r87, %p43;
	selp.b32 	%r1584, %r1497, %r1583, %p44;
	sub.s32 	%r101, %r1584, %r1497;
	setp.lt.s32 	%p45, %r99, %r1498;
	sub.s32 	%r102, %r99, %r1497;
	setp.lt.s32 	%p46, %r99, %r1497;
	selp.b32 	%r1585, %r99, %r87, %p45;
	selp.b32 	%r1586, %r1497, %r1585, %p46;
	sub.s32 	%r103, %r1586, %r1497;
	sub.s32 	%r1587, %r6878, %r1493;
	mul.lo.s32 	%r104, %r1587, %r84;
	mul.lo.s32 	%r105, %r1578, %r84;
	add.s32 	%r1588, %r1587, %r83;
	mul.lo.s32 	%r106, %r1588, %r84;
	add.s32 	%r1589, %r1578, %r83;
	mul.lo.s32 	%r107, %r1589, %r84;
	add.s32 	%r1590, %r1588, %r83;
	mul.lo.s32 	%r108, %r1590, %r84;
	add.s32 	%r1591, %r1589, %r83;
	mul.lo.s32 	%r109, %r1591, %r84;
	mov.u32 	%r6879, %r79;

$L__BB0_16:
	setp.ge.s32 	%p47, %r6879, %r1501;
	and.pred  	%p48, %p1, %p47;
	setp.lt.s32 	%p49, %r6879, %r1502;
	and.pred  	%p3, %p49, %p48;
	setp.ge.s32 	%p50, %r6879, %r1495;
	and.pred  	%p51, %p2, %p50;
	setp.lt.s32 	%p52, %r6879, %r1496;
	and.pred  	%p4, %p52, %p51;
	sub.s32 	%r111, %r6879, %r1495;
	selp.b32 	%r1592, %r6879, %r86, %p52;
	setp.lt.s32 	%p53, %r6879, %r1495;
	selp.b32 	%r1593, %r1495, %r1592, %p53;
	sub.s32 	%r112, %r1593, %r1495;
	mul.lo.s32 	%r113, %r6879, %r1484;
	add.s32 	%r114, %r113, %r6878;
	shl.b32 	%r115, %r114, 6;
	setp.ge.s32 	%p54, %r98, %r1503;
	and.pred  	%p55, %p3, %p54;
	setp.lt.s32 	%p56, %r98, %r1504;
	and.pred  	%p57, %p56, %p55;
	setp.ge.s32 	%p58, %r98, %r1497;
	and.pred  	%p59, %p4, %p58;
	and.pred  	%p5, %p43, %p59;
	setp.ge.s32 	%p61, %r99, %r1497;
	and.pred  	%p62, %p4, %p61;
	and.pred  	%p6, %p45, %p62;
	mul.wide.s32 	%rd45, %r114, 4;
	add.s64 	%rd8, %rd7, %rd45;
	ld.global.f32 	%f85, [%rd8];
	fma.rn.f32 	%f3, %f85, 0f3F000000, %f1;
	and.pred  	%p7, %p36, %p57;
	not.pred 	%p65, %p7;
	mov.f32 	%f642, %f2;
	@%p65 bra 	$L__BB0_20;

	@%p5 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	add.s32 	%r1596, %r111, %r104;
	mad.lo.s32 	%r1597, %r1596, %r58, %r100;
	mul.wide.s32 	%rd48, %r1597, 4;
	add.s64 	%rd49, %rd5, %rd48;
	ld.global.f32 	%f642, [%rd49];
	bra.uni 	$L__BB0_20;

$L__BB0_18:
	add.s32 	%r1594, %r112, %r105;
	mad.lo.s32 	%r1595, %r1594, %r58, %r101;
	mul.wide.s32 	%rd46, %r1595, 4;
	add.s64 	%rd47, %rd5, %rd46;
	ld.global.f32 	%f642, [%rd47];

$L__BB0_20:
	setp.lt.s32 	%p67, %r99, %r1504;
	setp.ge.s32 	%p68, %r99, %r1503;
	and.pred  	%p69, %p3, %p68;
	and.pred  	%p70, %p67, %p69;
	and.pred  	%p8, %p36, %p70;
	not.pred 	%p71, %p8;
	mov.f32 	%f643, %f2;
	@%p71 bra 	$L__BB0_24;

	@%p6 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;

$L__BB0_23:
	add.s32 	%r1600, %r111, %r104;
	mad.lo.s32 	%r1601, %r1600, %r58, %r102;
	mul.wide.s32 	%rd52, %r1601, 4;
	add.s64 	%rd53, %rd5, %rd52;
	ld.global.f32 	%f643, [%rd53];
	bra.uni 	$L__BB0_24;

$L__BB0_22:
	add.s32 	%r1598, %r112, %r105;
	mad.lo.s32 	%r1599, %r1598, %r58, %r103;
	mul.wide.s32 	%rd50, %r1599, 4;
	add.s64 	%rd51, %rd5, %rd50;
	ld.global.f32 	%f643, [%rd51];

$L__BB0_24:
	div.rn.f32 	%f87, %f643, %f3;
	div.rn.f32 	%f86, %f642, %f3;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f86;
  cvt.rn.f16.f32 high, %f87;
  mov.b32 %r1602, {low,high};}

	// end inline asm
	shl.b32 	%r116, %r114, 5;
	add.s32 	%r1603, %r116, %r46;
	shl.b32 	%r1604, %r1603, 2;
	add.s32 	%r1605, %r88, %r1604;
	mul.wide.s32 	%rd54, %r1605, 4;
	add.s64 	%rd55, %rd6, %rd54;
	st.global.u32 	[%rd55], %r1602;
	add.s32 	%r117, %r1485, %r6879;
	mad.lo.s32 	%r1606, %r117, %r1484, %r6878;
	mul.wide.s32 	%rd56, %r1606, 4;
	add.s64 	%rd9, %rd7, %rd56;
	ld.global.f32 	%f88, [%rd9];
	fma.rn.f32 	%f10, %f88, 0f3F000000, %f1;
	mov.f32 	%f644, %f2;
	@%p65 bra 	$L__BB0_28;

	@%p5 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1609, %r111, %r106;
	mad.lo.s32 	%r1610, %r1609, %r58, %r100;
	mul.wide.s32 	%rd59, %r1610, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f644, [%rd60];
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	add.s32 	%r1607, %r112, %r107;
	mad.lo.s32 	%r1608, %r1607, %r58, %r101;
	mul.wide.s32 	%rd57, %r1608, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f644, [%rd58];

$L__BB0_28:
	mov.f32 	%f645, %f2;
	@%p71 bra 	$L__BB0_32;

	@%p6 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_31:
	add.s32 	%r1613, %r111, %r106;
	mad.lo.s32 	%r1614, %r1613, %r58, %r102;
	mul.wide.s32 	%rd63, %r1614, 4;
	add.s64 	%rd64, %rd5, %rd63;
	ld.global.f32 	%f645, [%rd64];
	bra.uni 	$L__BB0_32;

$L__BB0_30:
	add.s32 	%r1611, %r112, %r107;
	mad.lo.s32 	%r1612, %r1611, %r58, %r103;
	mul.wide.s32 	%rd61, %r1612, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f645, [%rd62];

$L__BB0_32:
	div.rn.f32 	%f90, %f645, %f10;
	div.rn.f32 	%f89, %f644, %f10;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f89;
  cvt.rn.f16.f32 high, %f90;
  mov.b32 %r1615, {low,high};}

	// end inline asm
	add.s32 	%r1616, %r92, %r115;
	mul.wide.s32 	%rd65, %r1616, 4;
	add.s64 	%rd66, %rd6, %rd65;
	st.global.u32 	[%rd66], %r1615;
	add.s32 	%r1617, %r117, %r1485;
	mad.lo.s32 	%r1618, %r1617, %r1484, %r6878;
	mul.wide.s32 	%rd67, %r1618, 4;
	add.s64 	%rd10, %rd7, %rd67;
	ld.global.f32 	%f91, [%rd10];
	fma.rn.f32 	%f17, %f91, 0f3F000000, %f1;
	mov.f32 	%f646, %f2;
	@%p65 bra 	$L__BB0_36;

	@%p5 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	add.s32 	%r1621, %r111, %r108;
	mad.lo.s32 	%r1622, %r1621, %r58, %r100;
	mul.wide.s32 	%rd70, %r1622, 4;
	add.s64 	%rd71, %rd5, %rd70;
	ld.global.f32 	%f646, [%rd71];
	bra.uni 	$L__BB0_36;

$L__BB0_34:
	add.s32 	%r1619, %r112, %r109;
	mad.lo.s32 	%r1620, %r1619, %r58, %r101;
	mul.wide.s32 	%rd68, %r1620, 4;
	add.s64 	%rd69, %rd5, %rd68;
	ld.global.f32 	%f646, [%rd69];

$L__BB0_36:
	mov.f32 	%f647, %f2;
	@%p71 bra 	$L__BB0_40;

	@%p6 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_39:
	add.s32 	%r1625, %r111, %r108;
	mad.lo.s32 	%r1626, %r1625, %r58, %r102;
	mul.wide.s32 	%rd74, %r1626, 4;
	add.s64 	%rd75, %rd5, %rd74;
	ld.global.f32 	%f647, [%rd75];
	bra.uni 	$L__BB0_40;

$L__BB0_38:
	add.s32 	%r1623, %r112, %r109;
	mad.lo.s32 	%r1624, %r1623, %r58, %r103;
	mul.wide.s32 	%rd72, %r1624, 4;
	add.s64 	%rd73, %rd5, %rd72;
	ld.global.f32 	%f647, [%rd73];

$L__BB0_40:
	div.rn.f32 	%f93, %f647, %f17;
	div.rn.f32 	%f92, %f646, %f17;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f93;
  mov.b32 %r1627, {low,high};}

	// end inline asm
	rem.s32 	%r1628, %r97, %r1484;
	add.s32 	%r1629, %r1628, %r113;
	shl.b32 	%r118, %r1629, 5;
	add.s32 	%r1630, %r118, %r46;
	shl.b32 	%r1631, %r1630, 2;
	add.s32 	%r1632, %r88, %r1631;
	add.s32 	%r1633, %r1632, 2;
	mul.wide.s32 	%rd76, %r1633, 4;
	add.s64 	%rd77, %rd6, %rd76;
	st.global.u32 	[%rd77], %r1627;
	setp.ge.s32 	%p76, %r1636, %r1503;
	and.pred  	%p77, %p3, %p76;
	setp.lt.s32 	%p78, %r1636, %r1504;
	and.pred  	%p79, %p78, %p77;
	setp.ge.s32 	%p80, %r1636, %r1497;
	and.pred  	%p81, %p4, %p80;
	setp.lt.s32 	%p82, %r1636, %r1498;
	and.pred  	%p9, %p82, %p81;
	setp.ge.s32 	%p83, %r1639, %r1503;
	and.pred  	%p84, %p3, %p83;
	setp.lt.s32 	%p85, %r1639, %r1504;
	and.pred  	%p10, %p85, %p84;
	sub.s32 	%r119, %r1636, %r1497;
	setp.lt.s32 	%p86, %r1636, %r1497;
	selp.b32 	%r1640, %r1636, %r87, %p82;
	selp.b32 	%r1641, %r1497, %r1640, %p86;
	sub.s32 	%r120, %r1641, %r1497;
	setp.ge.s32 	%p87, %r1639, %r1497;
	and.pred  	%p88, %p4, %p87;
	setp.lt.s32 	%p89, %r1639, %r1498;
	and.pred  	%p11, %p89, %p88;
	sub.s32 	%r121, %r1639, %r1497;
	setp.lt.s32 	%p90, %r1639, %r1497;
	selp.b32 	%r1642, %r1639, %r87, %p89;
	selp.b32 	%r1643, %r1497, %r1642, %p90;
	sub.s32 	%r122, %r1643, %r1497;
	ld.global.f32 	%f94, [%rd8];
	fma.rn.f32 	%f24, %f94, 0f3F000000, %f1;
	and.pred  	%p12, %p36, %p79;
	not.pred 	%p92, %p12;
	mov.f32 	%f648, %f2;
	@%p92 bra 	$L__BB0_44;

	@%p9 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_43:
	add.s32 	%r1646, %r111, %r104;
	mad.lo.s32 	%r1647, %r1646, %r58, %r119;
	mul.wide.s32 	%rd80, %r1647, 4;
	add.s64 	%rd81, %rd5, %rd80;
	ld.global.f32 	%f648, [%rd81];
	bra.uni 	$L__BB0_44;

$L__BB0_42:
	add.s32 	%r1644, %r112, %r105;
	mad.lo.s32 	%r1645, %r1644, %r58, %r120;
	mul.wide.s32 	%rd78, %r1645, 4;
	add.s64 	%rd79, %rd5, %rd78;
	ld.global.f32 	%f648, [%rd79];

$L__BB0_44:
	and.pred  	%p13, %p36, %p10;
	not.pred 	%p94, %p13;
	mov.f32 	%f649, %f2;
	@%p94 bra 	$L__BB0_48;

	@%p11 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_46;

$L__BB0_47:
	add.s32 	%r1650, %r111, %r104;
	mad.lo.s32 	%r1651, %r1650, %r58, %r121;
	mul.wide.s32 	%rd84, %r1651, 4;
	add.s64 	%rd85, %rd5, %rd84;
	ld.global.f32 	%f649, [%rd85];
	bra.uni 	$L__BB0_48;

$L__BB0_46:
	add.s32 	%r1648, %r112, %r105;
	mad.lo.s32 	%r1649, %r1648, %r58, %r122;
	mul.wide.s32 	%rd82, %r1649, 4;
	add.s64 	%rd83, %rd5, %rd82;
	ld.global.f32 	%f649, [%rd83];

$L__BB0_48:
	div.rn.f32 	%f96, %f649, %f24;
	div.rn.f32 	%f95, %f648, %f24;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f96;
  mov.b32 %r1652, {low,high};}

	// end inline asm
	add.s32 	%r1653, %r116, %r95;
	shl.b32 	%r1654, %r1653, 2;
	add.s32 	%r1655, %r94, %r1654;
	mul.wide.s32 	%rd86, %r1655, 4;
	add.s64 	%rd87, %rd6, %rd86;
	st.global.u32 	[%rd87], %r1652;
	ld.global.f32 	%f97, [%rd9];
	fma.rn.f32 	%f31, %f97, 0f3F000000, %f1;
	mov.f32 	%f650, %f2;
	@%p92 bra 	$L__BB0_52;

	@%p9 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_50;

$L__BB0_51:
	add.s32 	%r1658, %r111, %r106;
	mad.lo.s32 	%r1659, %r1658, %r58, %r119;
	mul.wide.s32 	%rd90, %r1659, 4;
	add.s64 	%rd91, %rd5, %rd90;
	ld.global.f32 	%f650, [%rd91];
	bra.uni 	$L__BB0_52;

$L__BB0_50:
	add.s32 	%r1656, %r112, %r107;
	mad.lo.s32 	%r1657, %r1656, %r58, %r120;
	mul.wide.s32 	%rd88, %r1657, 4;
	add.s64 	%rd89, %rd5, %rd88;
	ld.global.f32 	%f650, [%rd89];

$L__BB0_52:
	mov.f32 	%f651, %f2;
	@%p94 bra 	$L__BB0_56;

	@%p11 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1662, %r111, %r106;
	mad.lo.s32 	%r1663, %r1662, %r58, %r121;
	mul.wide.s32 	%rd94, %r1663, 4;
	add.s64 	%rd95, %rd5, %rd94;
	ld.global.f32 	%f651, [%rd95];
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	add.s32 	%r1660, %r112, %r107;
	mad.lo.s32 	%r1661, %r1660, %r58, %r122;
	mul.wide.s32 	%rd92, %r1661, 4;
	add.s64 	%rd93, %rd5, %rd92;
	ld.global.f32 	%f651, [%rd93];

$L__BB0_56:
	div.rn.f32 	%f99, %f651, %f31;
	div.rn.f32 	%f98, %f650, %f31;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f99;
  mov.b32 %r1664, {low,high};}

	// end inline asm
	add.s32 	%r1665, %r93, %r115;
	mul.wide.s32 	%rd96, %r1665, 4;
	add.s64 	%rd97, %rd6, %rd96;
	st.global.u32 	[%rd97], %r1664;
	ld.global.f32 	%f100, [%rd10];
	fma.rn.f32 	%f38, %f100, 0f3F000000, %f1;
	mov.f32 	%f652, %f2;
	@%p92 bra 	$L__BB0_60;

	@%p9 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1668, %r111, %r108;
	mad.lo.s32 	%r1669, %r1668, %r58, %r119;
	mul.wide.s32 	%rd100, %r1669, 4;
	add.s64 	%rd101, %rd5, %rd100;
	ld.global.f32 	%f652, [%rd101];
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	add.s32 	%r1666, %r112, %r109;
	mad.lo.s32 	%r1667, %r1666, %r58, %r120;
	mul.wide.s32 	%rd98, %r1667, 4;
	add.s64 	%rd99, %rd5, %rd98;
	ld.global.f32 	%f652, [%rd99];

$L__BB0_60:
	mov.f32 	%f653, %f2;
	@%p94 bra 	$L__BB0_64;

	@%p11 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_62;

$L__BB0_63:
	add.s32 	%r1672, %r111, %r108;
	mad.lo.s32 	%r1673, %r1672, %r58, %r121;
	mul.wide.s32 	%rd104, %r1673, 4;
	add.s64 	%rd105, %rd5, %rd104;
	ld.global.f32 	%f653, [%rd105];
	bra.uni 	$L__BB0_64;

$L__BB0_62:
	add.s32 	%r1670, %r112, %r109;
	mad.lo.s32 	%r1671, %r1670, %r58, %r122;
	mul.wide.s32 	%rd102, %r1671, 4;
	add.s64 	%rd103, %rd5, %rd102;
	ld.global.f32 	%f653, [%rd103];

$L__BB0_64:
	div.rn.f32 	%f102, %f653, %f38;
	div.rn.f32 	%f101, %f652, %f38;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f102;
  mov.b32 %r1674, {low,high};}

	// end inline asm
	add.s32 	%r1675, %r118, %r95;
	shl.b32 	%r1676, %r1675, 2;
	add.s32 	%r1677, %r94, %r1676;
	add.s32 	%r1678, %r1677, 2;
	mul.wide.s32 	%rd106, %r1678, 4;
	add.s64 	%rd107, %rd6, %rd106;
	st.global.u32 	[%rd107], %r1674;
	add.s32 	%r6879, %r6879, %r1516;
	setp.lt.s32 	%p99, %r6879, %r1485;
	@%p99 bra 	$L__BB0_16;

$L__BB0_65:
	add.s32 	%r6878, %r6878, %r1511;
	setp.lt.s32 	%p100, %r6878, %r1484;
	@%p100 bra 	$L__BB0_14;

$L__BB0_66:
	ld.param.u64 	%rd108, [%rd1+120];
	cvta.to.global.u64 	%rd11, %rd108;
	@%p35 bra 	$L__BB0_150;

	shl.b32 	%r125, %r79, 1;
	ld.param.f32 	%f103, [%rd1+136];
	rcp.rn.f32 	%f45, %f103;
	mov.u64 	%rd109, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd171, %rd109, 24;
	mov.u32 	%r6880, %r6913;

$L__BB0_68:
	setp.ge.s32 	%p102, %r125, %r1485;
	@%p102 bra 	$L__BB0_149;

	mov.u32 	%r6881, %r125;

$L__BB0_70:
	setp.ne.s32 	%p103, %r46, 0;
	@%p103 bra 	$L__BB0_148;

	shr.u32 	%r1680, %r6881, 31;
	add.s32 	%r1681, %r6881, %r1680;
	shr.s32 	%r1682, %r1681, 1;
	mad.lo.s32 	%r1683, %r1682, %r1484, %r6880;
	shl.b32 	%r129, %r1683, 5;
	add.s32 	%r130, %r6881, -2;
	mul.lo.s32 	%r131, %r130, %r1484;
	add.s32 	%r1684, %r1485, %r130;
	mul.lo.s32 	%r132, %r1684, %r1484;
	add.s32 	%r1685, %r1684, %r1485;
	mul.lo.s32 	%r133, %r1685, %r1484;
	add.s32 	%r134, %r131, %r1484;
	add.s32 	%r135, %r6881, -1;
	add.s32 	%r1686, %r1485, %r135;
	mul.lo.s32 	%r136, %r1686, %r1484;
	add.s32 	%r1687, %r1686, %r1485;
	mul.lo.s32 	%r137, %r1687, %r1484;
	add.s32 	%r1688, %r1485, %r6881;
	mul.lo.s32 	%r138, %r1688, %r1484;
	add.s32 	%r1689, %r1688, %r1485;
	mul.lo.s32 	%r139, %r1689, %r1484;
	mul.lo.s32 	%r140, %r6881, %r1484;
	add.s32 	%r141, %r140, %r1484;
	add.s32 	%r142, %r6881, 1;
	add.s32 	%r1690, %r1485, %r142;
	mul.lo.s32 	%r143, %r1690, %r1484;
	add.s32 	%r1691, %r1690, %r1485;
	mul.lo.s32 	%r144, %r1691, %r1484;
	add.s32 	%r145, %r141, %r1484;
	add.s32 	%r146, %r6881, 2;
	add.s32 	%r1692, %r1485, %r146;
	mul.lo.s32 	%r147, %r1692, %r1484;
	add.s32 	%r1693, %r1692, %r1485;
	mul.lo.s32 	%r148, %r1693, %r1484;
	mov.u32 	%r6884, 0;
	mov.u64 	%rd485, %rd109;

$L__BB0_72:
	ld.global.nc.u32 	%r1694, [%rd485];
	cvt.rn.f64.s32 	%fd1, %r1694;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r150, %r1694, %r6880;
	setp.lt.s32 	%p104, %r150, %r1484;
	or.b32  	%r1695, %r130, %r150;
	setp.gt.s32 	%p105, %r1695, -1;
	and.pred  	%p106, %p104, %p105;
	setp.lt.s32 	%p107, %r130, %r1485;
	and.pred  	%p14, %p107, %p106;
	cvt.rn.f32.f64 	%f104, %fd3;
	add.f32 	%f105, %f104, 0f3E800000;
	abs.f32 	%f46, %f105;
	add.f32 	%f106, %f46, 0f40200000;
	setp.geu.f32 	%p108, %f106, 0f40000000;
	@%p108 bra 	$L__BB0_77;

	@%p14 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1698, %r131, %r150;
	mul.wide.s32 	%rd110, %r1698, 4;
	add.s64 	%rd111, %rd7, %rd110;
	ld.global.f32 	%f110, [%rd111];
	mul.f32 	%f111, %f110, 0f3F000000;
	sub.f32 	%f112, %f45, %f111;
	add.f32 	%f113, %f45, %f111;
	div.rn.f32 	%f109, %f112, %f113;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f109;
  mov.b32 %r6883, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f108, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f108;
  cvt.rn.f16.f32 high, %f108;
  mov.b32 %r6883, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1699, %r6884, %r129;
	mul.wide.s32 	%rd112, %r1699, 4;
	add.s64 	%rd113, %rd11, %rd112;
	st.global.u32 	[%rd113], %r6883;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_77:
	cvt.rn.f32.f64 	%f114, %fd1;
	add.f32 	%f115, %f114, 0f3E800000;
	abs.f32 	%f47, %f115;
	add.f32 	%f48, %f47, 0f40000000;
	setp.geu.f32 	%p109, %f48, 0f40000000;
	@%p109 bra 	$L__BB0_82;

	@%p14 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1702, %r132, %r150;
	mul.wide.s32 	%rd114, %r1702, 4;
	add.s64 	%rd115, %rd7, %rd114;
	ld.global.f32 	%f119, [%rd115];
	mul.f32 	%f120, %f119, 0f3F000000;
	sub.f32 	%f121, %f45, %f120;
	add.f32 	%f122, %f45, %f120;
	div.rn.f32 	%f118, %f121, %f122;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f118;
  mov.b32 %r6885, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f117, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f117;
  mov.b32 %r6885, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1703, %r6884, %r129;
	mul.wide.s32 	%rd116, %r1703, 4;
	add.s64 	%rd117, %rd11, %rd116;
	st.global.u32 	[%rd117], %r6885;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_82:
	add.f32 	%f123, %f47, 0f40200000;
	setp.geu.f32 	%p110, %f123, 0f40000000;
	@%p110 bra 	$L__BB0_87;

	@%p14 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1706, %r133, %r150;
	mul.wide.s32 	%rd118, %r1706, 4;
	add.s64 	%rd119, %rd7, %rd118;
	ld.global.f32 	%f127, [%rd119];
	mul.f32 	%f128, %f127, 0f3F000000;
	sub.f32 	%f129, %f45, %f128;
	add.f32 	%f130, %f45, %f128;
	div.rn.f32 	%f126, %f129, %f130;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r6887, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r6887, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1707, %r6884, %r129;
	mul.wide.s32 	%rd120, %r1707, 4;
	add.s64 	%rd121, %rd11, %rd120;
	st.global.u32 	[%rd121], %r6887;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_87:
	or.b32  	%r1708, %r135, %r150;
	setp.gt.s32 	%p111, %r1708, -1;
	and.pred  	%p113, %p104, %p111;
	setp.le.s32 	%p114, %r6881, %r1485;
	and.pred  	%p15, %p114, %p113;
	add.f32 	%f49, %f46, 0f3FC00000;
	setp.geu.f32 	%p115, %f49, 0f40000000;
	@%p115 bra 	$L__BB0_92;

	@%p15 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1711, %r134, %r150;
	mul.wide.s32 	%rd122, %r1711, 4;
	add.s64 	%rd123, %rd7, %rd122;
	ld.global.f32 	%f134, [%rd123];
	mul.f32 	%f135, %f134, 0f3F000000;
	sub.f32 	%f136, %f45, %f135;
	add.f32 	%f137, %f45, %f135;
	div.rn.f32 	%f133, %f136, %f137;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f133;
  mov.b32 %r6889, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6889, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1712, %r6884, %r129;
	mul.wide.s32 	%rd124, %r1712, 4;
	add.s64 	%rd125, %rd11, %rd124;
	st.global.u32 	[%rd125], %r6889;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_92:
	add.f32 	%f50, %f47, 0f3F800000;
	setp.geu.f32 	%p116, %f50, 0f40000000;
	@%p116 bra 	$L__BB0_97;

	@%p15 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1715, %r136, %r150;
	mul.wide.s32 	%rd126, %r1715, 4;
	add.s64 	%rd127, %rd7, %rd126;
	ld.global.f32 	%f141, [%rd127];
	mul.f32 	%f142, %f141, 0f3F000000;
	sub.f32 	%f143, %f45, %f142;
	add.f32 	%f144, %f45, %f142;
	div.rn.f32 	%f140, %f143, %f144;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f140;
  mov.b32 %r6891, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f139;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6891, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1716, %r6884, %r129;
	mul.wide.s32 	%rd128, %r1716, 4;
	add.s64 	%rd129, %rd11, %rd128;
	st.global.u32 	[%rd129], %r6891;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_97:
	add.f32 	%f51, %f47, 0f3FC00000;
	setp.geu.f32 	%p117, %f51, 0f40000000;
	@%p117 bra 	$L__BB0_102;

	@%p15 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1719, %r137, %r150;
	mul.wide.s32 	%rd130, %r1719, 4;
	add.s64 	%rd131, %rd7, %rd130;
	ld.global.f32 	%f148, [%rd131];
	mul.f32 	%f149, %f148, 0f3F000000;
	sub.f32 	%f150, %f45, %f149;
	add.f32 	%f151, %f45, %f149;
	div.rn.f32 	%f147, %f150, %f151;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f147;
  mov.b32 %r6893, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f146, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f146;
  cvt.rn.f16.f32 high, %f146;
  mov.b32 %r6893, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1720, %r6884, %r129;
	mul.wide.s32 	%rd132, %r1720, 4;
	add.s64 	%rd133, %rd11, %rd132;
	st.global.u32 	[%rd133], %r6893;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_102:
	or.b32  	%r1721, %r6881, %r150;
	setp.gt.s32 	%p118, %r1721, -1;
	and.pred  	%p120, %p104, %p118;
	setp.lt.s32 	%p121, %r6881, %r1485;
	and.pred  	%p16, %p121, %p120;
	add.f32 	%f52, %f46, 0f3F000000;
	setp.geu.f32 	%p122, %f52, 0f40000000;
	@%p122 bra 	$L__BB0_107;

	@%p16 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1724, %r140, %r150;
	mul.wide.s32 	%rd134, %r1724, 4;
	add.s64 	%rd135, %rd7, %rd134;
	ld.global.f32 	%f155, [%rd135];
	mul.f32 	%f156, %f155, 0f3F000000;
	sub.f32 	%f157, %f45, %f156;
	add.f32 	%f158, %f45, %f156;
	div.rn.f32 	%f154, %f157, %f158;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f154;
  mov.b32 %r6895, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6895, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1725, %r6884, %r129;
	mul.wide.s32 	%rd136, %r1725, 4;
	add.s64 	%rd137, %rd11, %rd136;
	st.global.u32 	[%rd137], %r6895;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_107:
	add.f32 	%f159, %f47, 0f00000000;
	setp.geu.f32 	%p123, %f159, 0f40000000;
	@%p123 bra 	$L__BB0_112;

	@%p16 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1728, %r138, %r150;
	mul.wide.s32 	%rd138, %r1728, 4;
	add.s64 	%rd139, %rd7, %rd138;
	ld.global.f32 	%f163, [%rd139];
	mul.f32 	%f164, %f163, 0f3F000000;
	sub.f32 	%f165, %f45, %f164;
	add.f32 	%f166, %f45, %f164;
	div.rn.f32 	%f162, %f165, %f166;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f162;
  mov.b32 %r6897, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6897, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1729, %r6884, %r129;
	mul.wide.s32 	%rd140, %r1729, 4;
	add.s64 	%rd141, %rd11, %rd140;
	st.global.u32 	[%rd141], %r6897;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_112:
	add.f32 	%f53, %f47, 0f3F000000;
	setp.geu.f32 	%p124, %f53, 0f40000000;
	@%p124 bra 	$L__BB0_117;

	@%p16 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1732, %r139, %r150;
	mul.wide.s32 	%rd142, %r1732, 4;
	add.s64 	%rd143, %rd7, %rd142;
	ld.global.f32 	%f170, [%rd143];
	mul.f32 	%f171, %f170, 0f3F000000;
	sub.f32 	%f172, %f45, %f171;
	add.f32 	%f173, %f45, %f171;
	div.rn.f32 	%f169, %f172, %f173;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f169;
  mov.b32 %r6899, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f168;
  mov.b32 %r6899, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1733, %r6884, %r129;
	mul.wide.s32 	%rd144, %r1733, 4;
	add.s64 	%rd145, %rd11, %rd144;
	st.global.u32 	[%rd145], %r6899;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_117:
	or.b32  	%r1734, %r142, %r150;
	setp.gt.s32 	%p125, %r1734, -1;
	and.pred  	%p127, %p104, %p125;
	setp.lt.s32 	%p128, %r142, %r1485;
	and.pred  	%p17, %p128, %p127;
	@%p122 bra 	$L__BB0_122;

	@%p17 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_119;

$L__BB0_120:
	add.s32 	%r1737, %r141, %r150;
	mul.wide.s32 	%rd146, %r1737, 4;
	add.s64 	%rd147, %rd7, %rd146;
	ld.global.f32 	%f177, [%rd147];
	mul.f32 	%f178, %f177, 0f3F000000;
	sub.f32 	%f179, %f45, %f178;
	add.f32 	%f180, %f45, %f178;
	div.rn.f32 	%f176, %f179, %f180;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f176;
  mov.b32 %r6901, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_121;

$L__BB0_119:
	mov.f32 	%f175, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f175;
  cvt.rn.f16.f32 high, %f175;
  mov.b32 %r6901, {low,high};}

	// end inline asm

$L__BB0_121:
	add.s32 	%r1738, %r6884, %r129;
	mul.wide.s32 	%rd148, %r1738, 4;
	add.s64 	%rd149, %rd11, %rd148;
	st.global.u32 	[%rd149], %r6901;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_122:
	@%p116 bra 	$L__BB0_127;

	@%p17 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_124;

$L__BB0_125:
	add.s32 	%r1741, %r143, %r150;
	mul.wide.s32 	%rd150, %r1741, 4;
	add.s64 	%rd151, %rd7, %rd150;
	ld.global.f32 	%f184, [%rd151];
	mul.f32 	%f185, %f184, 0f3F000000;
	sub.f32 	%f186, %f45, %f185;
	add.f32 	%f187, %f45, %f185;
	div.rn.f32 	%f183, %f186, %f187;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f183;
  mov.b32 %r6903, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_126;

$L__BB0_124:
	mov.f32 	%f182, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f182;
  cvt.rn.f16.f32 high, %f182;
  mov.b32 %r6903, {low,high};}

	// end inline asm

$L__BB0_126:
	add.s32 	%r1742, %r6884, %r129;
	mul.wide.s32 	%rd152, %r1742, 4;
	add.s64 	%rd153, %rd11, %rd152;
	st.global.u32 	[%rd153], %r6903;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_127:
	@%p124 bra 	$L__BB0_132;

	@%p17 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;

$L__BB0_130:
	add.s32 	%r1745, %r144, %r150;
	mul.wide.s32 	%rd154, %r1745, 4;
	add.s64 	%rd155, %rd7, %rd154;
	ld.global.f32 	%f191, [%rd155];
	mul.f32 	%f192, %f191, 0f3F000000;
	sub.f32 	%f193, %f45, %f192;
	add.f32 	%f194, %f45, %f192;
	div.rn.f32 	%f190, %f193, %f194;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f190;
  mov.b32 %r6905, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_131;

$L__BB0_129:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f189;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6905, {low,high};}

	// end inline asm

$L__BB0_131:
	add.s32 	%r1746, %r6884, %r129;
	mul.wide.s32 	%rd156, %r1746, 4;
	add.s64 	%rd157, %rd11, %rd156;
	st.global.u32 	[%rd157], %r6905;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_132:
	or.b32  	%r1747, %r146, %r150;
	setp.gt.s32 	%p132, %r1747, -1;
	and.pred  	%p134, %p104, %p132;
	setp.lt.s32 	%p135, %r146, %r1485;
	and.pred  	%p18, %p135, %p134;
	@%p115 bra 	$L__BB0_137;

	@%p18 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1750, %r145, %r150;
	mul.wide.s32 	%rd158, %r1750, 4;
	add.s64 	%rd159, %rd7, %rd158;
	ld.global.f32 	%f198, [%rd159];
	mul.f32 	%f199, %f198, 0f3F000000;
	sub.f32 	%f200, %f45, %f199;
	add.f32 	%f201, %f45, %f199;
	div.rn.f32 	%f197, %f200, %f201;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f197;
  mov.b32 %r6907, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f196, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f196;
  cvt.rn.f16.f32 high, %f196;
  mov.b32 %r6907, {low,high};}

	// end inline asm

$L__BB0_136:
	add.s32 	%r1751, %r6884, %r129;
	mul.wide.s32 	%rd160, %r1751, 4;
	add.s64 	%rd161, %rd11, %rd160;
	st.global.u32 	[%rd161], %r6907;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_137:
	@%p109 bra 	$L__BB0_142;

	@%p18 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	add.s32 	%r1754, %r147, %r150;
	mul.wide.s32 	%rd162, %r1754, 4;
	add.s64 	%rd163, %rd7, %rd162;
	ld.global.f32 	%f205, [%rd163];
	mul.f32 	%f206, %f205, 0f3F000000;
	sub.f32 	%f207, %f45, %f206;
	add.f32 	%f208, %f45, %f206;
	div.rn.f32 	%f204, %f207, %f208;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f204;
  mov.b32 %r6909, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r6909, {low,high};}

	// end inline asm

$L__BB0_141:
	add.s32 	%r1755, %r6884, %r129;
	mul.wide.s32 	%rd164, %r1755, 4;
	add.s64 	%rd165, %rd11, %rd164;
	st.global.u32 	[%rd165], %r6909;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_142:
	@%p117 bra 	$L__BB0_147;

	@%p18 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_144;

$L__BB0_145:
	add.s32 	%r1758, %r148, %r150;
	mul.wide.s32 	%rd166, %r1758, 4;
	add.s64 	%rd167, %rd7, %rd166;
	ld.global.f32 	%f212, [%rd167];
	mul.f32 	%f213, %f212, 0f3F000000;
	sub.f32 	%f214, %f45, %f213;
	add.f32 	%f215, %f45, %f213;
	div.rn.f32 	%f211, %f214, %f215;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f211;
  mov.b32 %r6911, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_146;

$L__BB0_144:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6911, {low,high};}

	// end inline asm

$L__BB0_146:
	add.s32 	%r1759, %r6884, %r129;
	mul.wide.s32 	%rd168, %r1759, 4;
	add.s64 	%rd169, %rd11, %rd168;
	st.global.u32 	[%rd169], %r6911;
	add.s32 	%r6884, %r6884, 1;

$L__BB0_147:
	add.s64 	%rd485, %rd485, 4;
	setp.ne.s64 	%p139, %rd485, %rd171;
	@%p139 bra 	$L__BB0_72;

$L__BB0_148:
	add.s32 	%r6881, %r6881, %r48;
	setp.lt.s32 	%p140, %r6881, %r1485;
	@%p140 bra 	$L__BB0_70;

$L__BB0_149:
	add.s32 	%r6880, %r6880, %r1511;
	setp.lt.s32 	%p141, %r6880, %r1484;
	@%p141 bra 	$L__BB0_68;

$L__BB0_150:
	setp.eq.s32 	%p142, %r1488, 1;
	ld.param.u64 	%rd172, [%rd1+160];
	cvta.to.global.u64 	%rd14, %rd172;
	ld.param.u64 	%rd173, [%rd1+128];
	cvta.to.global.u64 	%rd15, %rd173;
	@%p142 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_151;

$L__BB0_168:
	@%p35 bra 	$L__BB0_297;

	shl.b32 	%r254, %r79, 1;
	shr.u32 	%r1807, %r1489, 31;
	add.s32 	%r1808, %r1489, %r1807;
	shr.u32 	%r1809, %r1808, 1;
	and.b32  	%r255, %r1809, 1;
	mov.u64 	%rd193, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_170:
	setp.ge.s32 	%p152, %r254, %r1485;
	@%p152 bra 	$L__BB0_296;

	mov.u32 	%r6919, %r254;

$L__BB0_172:
	setp.ne.s32 	%p153, %r46, 0;
	@%p153 bra 	$L__BB0_295;

	shr.u32 	%r1811, %r6919, 31;
	add.s32 	%r1812, %r6919, %r1811;
	shr.s32 	%r1813, %r1812, 1;
	mad.lo.s32 	%r1814, %r1813, %r1484, %r6913;
	shl.b32 	%r259, %r1814, 5;
	add.s32 	%r260, %r6919, -2;
	mul.lo.s32 	%r261, %r260, %r1484;
	add.s32 	%r1815, %r1485, %r260;
	mul.lo.s32 	%r262, %r1815, %r1484;
	add.s32 	%r263, %r261, %r1484;
	add.s32 	%r264, %r6919, -1;
	add.s32 	%r1816, %r1485, %r264;
	mul.lo.s32 	%r265, %r1816, %r1484;
	add.s32 	%r1817, %r1485, %r6919;
	mul.lo.s32 	%r266, %r1817, %r1484;
	mul.lo.s32 	%r267, %r6919, %r1484;
	add.s32 	%r268, %r267, %r1484;
	add.s32 	%r269, %r6919, 1;
	add.s32 	%r1818, %r1485, %r269;
	mul.lo.s32 	%r270, %r1818, %r1484;
	add.s32 	%r271, %r268, %r1484;
	add.s32 	%r272, %r6919, 2;
	add.s32 	%r1819, %r1485, %r272;
	mul.lo.s32 	%r273, %r1819, %r1484;
	mov.u32 	%r6923, 0;
	mov.u64 	%rd486, 24;
	mov.u64 	%rd487, %rd193;

$L__BB0_174:
	ld.global.nc.u32 	%r1820, [%rd487];
	cvt.rn.f64.s32 	%fd2, %r1820;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r275, %r1820, %r6913;
	setp.lt.s32 	%p154, %r275, %r1484;
	or.b32  	%r1821, %r260, %r275;
	setp.gt.s32 	%p155, %r1821, -1;
	and.pred  	%p156, %p154, %p155;
	setp.lt.s32 	%p157, %r260, %r1485;
	and.pred  	%p19, %p157, %p156;
	cvt.rn.f32.f64 	%f232, %fd4;
	add.f32 	%f233, %f232, 0f3E800000;
	abs.f32 	%f54, %f233;
	add.f32 	%f234, %f54, 0f40200000;
	setp.geu.f32 	%p158, %f234, 0f40000000;
	@%p158 bra 	$L__BB0_186;

	@%p19 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_176;

$L__BB0_177:
	setp.eq.s32 	%p159, %r255, 0;
	add.s32 	%r1823, %r261, %r275;
	shl.b32 	%r1824, %r1823, 1;
	mul.wide.s32 	%rd194, %r1824, 4;
	add.s64 	%rd195, %rd14, %rd194;
	ld.global.f32 	%f55, [%rd195];
	@%p159 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_178;

$L__BB0_179:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f55;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6921, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_176:
	mov.f32 	%f236, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f236;
  cvt.rn.f16.f32 high, %f236;
  mov.b32 %r6921, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_180;

$L__BB0_178:
	mov.f32 	%f237, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f237;
  cvt.rn.f16.f32 high, %f55;
  mov.b32 %r6921, {low,high};}

	// end inline asm

$L__BB0_180:
	add.s32 	%r280, %r6923, %r259;
	mul.wide.s32 	%rd196, %r280, 4;
	add.s64 	%rd197, %rd15, %rd196;
	st.global.u32 	[%rd197], %r6921;
	@%p19 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_181;

$L__BB0_182:
	setp.eq.s32 	%p160, %r255, 0;
	add.s32 	%r1828, %r262, %r275;
	shl.b32 	%r1829, %r1828, 1;
	mul.wide.s32 	%rd198, %r1829, 4;
	add.s64 	%rd199, %rd14, %rd198;
	ld.global.f32 	%f56, [%rd199];
	@%p160 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_183;

$L__BB0_184:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6922, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_181:
	mov.f32 	%f242, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f242;
  cvt.rn.f16.f32 high, %f242;
  mov.b32 %r6922, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_185;

$L__BB0_183:
	mov.f32 	%f243, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f243;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6922, {low,high};}

	// end inline asm

$L__BB0_185:
	add.s32 	%r1832, %r280, 1;
	mul.wide.s32 	%rd200, %r1832, 4;
	add.s64 	%rd201, %rd15, %rd200;
	st.global.u32 	[%rd201], %r6922;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_186:
	cvt.rn.f32.f64 	%f247, %fd2;
	add.f32 	%f248, %f247, 0f3E800000;
	abs.f32 	%f57, %f248;
	add.f32 	%f58, %f57, 0f40000000;
	setp.geu.f32 	%p161, %f58, 0f40000000;
	@%p161 bra 	$L__BB0_198;

	@%p19 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_188;

$L__BB0_189:
	setp.eq.s32 	%p162, %r255, 0;
	add.s32 	%r1834, %r261, %r275;
	shl.b32 	%r1835, %r1834, 1;
	or.b32  	%r1836, %r1835, 1;
	mul.wide.s32 	%rd202, %r1836, 4;
	add.s64 	%rd203, %rd14, %rd202;
	ld.global.f32 	%f59, [%rd203];
	@%p162 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_190;

$L__BB0_191:
	mov.f32 	%f254, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f254;
  mov.b32 %r6924, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_188:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f250;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6924, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_192;

$L__BB0_190:
	mov.f32 	%f251, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f251;
  cvt.rn.f16.f32 high, %f59;
  mov.b32 %r6924, {low,high};}

	// end inline asm

$L__BB0_192:
	add.s32 	%r291, %r6923, %r259;
	mul.wide.s32 	%rd204, %r291, 4;
	add.s64 	%rd205, %rd15, %rd204;
	st.global.u32 	[%rd205], %r6924;
	@%p19 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_193;

$L__BB0_194:
	setp.eq.s32 	%p163, %r255, 0;
	add.s32 	%r1840, %r262, %r275;
	shl.b32 	%r1841, %r1840, 1;
	or.b32  	%r1842, %r1841, 1;
	mul.wide.s32 	%rd206, %r1842, 4;
	add.s64 	%rd207, %rd14, %rd206;
	ld.global.f32 	%f60, [%rd207];
	@%p163 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_195;

$L__BB0_196:
	mov.f32 	%f260, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f260;
  mov.b32 %r6925, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_193:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f256;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6925, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_197;

$L__BB0_195:
	mov.f32 	%f257, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f257;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6925, {low,high};}

	// end inline asm

$L__BB0_197:
	add.s32 	%r1845, %r291, 1;
	mul.wide.s32 	%rd208, %r1845, 4;
	add.s64 	%rd209, %rd15, %rd208;
	st.global.u32 	[%rd209], %r6925;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_198:
	or.b32  	%r1846, %r264, %r275;
	setp.gt.s32 	%p164, %r1846, -1;
	and.pred  	%p166, %p154, %p164;
	setp.le.s32 	%p167, %r6919, %r1485;
	and.pred  	%p20, %p167, %p166;
	add.f32 	%f61, %f54, 0f3FC00000;
	setp.geu.f32 	%p168, %f61, 0f40000000;
	@%p168 bra 	$L__BB0_210;

	@%p20 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_200;

$L__BB0_201:
	setp.eq.s32 	%p169, %r255, 0;
	add.s32 	%r1848, %r263, %r275;
	shl.b32 	%r1849, %r1848, 1;
	mul.wide.s32 	%rd210, %r1849, 4;
	add.s64 	%rd211, %rd14, %rd210;
	ld.global.f32 	%f62, [%rd211];
	@%p169 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_202;

$L__BB0_203:
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6927, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_200:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f262;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r6927, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_204;

$L__BB0_202:
	mov.f32 	%f263, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f263;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6927, {low,high};}

	// end inline asm

$L__BB0_204:
	add.s32 	%r302, %r6923, %r259;
	mul.wide.s32 	%rd212, %r302, 4;
	add.s64 	%rd213, %rd15, %rd212;
	st.global.u32 	[%rd213], %r6927;
	@%p20 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;

$L__BB0_206:
	setp.eq.s32 	%p170, %r255, 0;
	add.s32 	%r1853, %r265, %r275;
	shl.b32 	%r1854, %r1853, 1;
	mul.wide.s32 	%rd214, %r1854, 4;
	add.s64 	%rd215, %rd14, %rd214;
	ld.global.f32 	%f63, [%rd215];
	@%p170 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;

$L__BB0_208:
	mov.f32 	%f272, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f63;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6928, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_205:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f268;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r6928, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_209;

$L__BB0_207:
	mov.f32 	%f269, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f269;
  cvt.rn.f16.f32 high, %f63;
  mov.b32 %r6928, {low,high};}

	// end inline asm

$L__BB0_209:
	add.s32 	%r1857, %r302, 1;
	mul.wide.s32 	%rd216, %r1857, 4;
	add.s64 	%rd217, %rd15, %rd216;
	st.global.u32 	[%rd217], %r6928;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_210:
	add.f32 	%f64, %f57, 0f3F800000;
	setp.geu.f32 	%p171, %f64, 0f40000000;
	@%p171 bra 	$L__BB0_222;

	@%p20 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_212;

$L__BB0_213:
	setp.eq.s32 	%p172, %r255, 0;
	add.s32 	%r1859, %r263, %r275;
	shl.b32 	%r1860, %r1859, 1;
	or.b32  	%r1861, %r1860, 1;
	mul.wide.s32 	%rd218, %r1861, 4;
	add.s64 	%rd219, %rd14, %rd218;
	ld.global.f32 	%f65, [%rd219];
	@%p172 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_214;

$L__BB0_215:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6930, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_212:
	mov.f32 	%f274, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f274;
  cvt.rn.f16.f32 high, %f274;
  mov.b32 %r6930, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_216;

$L__BB0_214:
	mov.f32 	%f275, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f275;
  cvt.rn.f16.f32 high, %f65;
  mov.b32 %r6930, {low,high};}

	// end inline asm

$L__BB0_216:
	add.s32 	%r313, %r6923, %r259;
	mul.wide.s32 	%rd220, %r313, 4;
	add.s64 	%rd221, %rd15, %rd220;
	st.global.u32 	[%rd221], %r6930;
	@%p20 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;

$L__BB0_218:
	setp.eq.s32 	%p173, %r255, 0;
	add.s32 	%r1865, %r265, %r275;
	shl.b32 	%r1866, %r1865, 1;
	or.b32  	%r1867, %r1866, 1;
	mul.wide.s32 	%rd222, %r1867, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.global.f32 	%f66, [%rd223];
	@%p173 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;

$L__BB0_220:
	mov.f32 	%f284, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f66;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6931, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_217:
	mov.f32 	%f280, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f280;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6931, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_221;

$L__BB0_219:
	mov.f32 	%f281, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r6931, {low,high};}

	// end inline asm

$L__BB0_221:
	add.s32 	%r1870, %r313, 1;
	mul.wide.s32 	%rd224, %r1870, 4;
	add.s64 	%rd225, %rd15, %rd224;
	st.global.u32 	[%rd225], %r6931;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_222:
	or.b32  	%r1871, %r6919, %r275;
	setp.gt.s32 	%p174, %r1871, -1;
	and.pred  	%p176, %p154, %p174;
	setp.lt.s32 	%p177, %r6919, %r1485;
	and.pred  	%p21, %p177, %p176;
	add.f32 	%f67, %f54, 0f3F000000;
	setp.geu.f32 	%p178, %f67, 0f40000000;
	@%p178 bra 	$L__BB0_234;

	@%p21 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_224;

$L__BB0_225:
	setp.eq.s32 	%p179, %r255, 0;
	add.s32 	%r1873, %r267, %r275;
	shl.b32 	%r1874, %r1873, 1;
	mul.wide.s32 	%rd226, %r1874, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.global.f32 	%f68, [%rd227];
	@%p179 bra 	$L__BB0_227;
	bra.uni 	$L__BB0_226;

$L__BB0_227:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_224:
	mov.f32 	%f286, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f286;
  cvt.rn.f16.f32 high, %f286;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_228;

$L__BB0_226:
	mov.f32 	%f287, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f287;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r6933, {low,high};}

	// end inline asm

$L__BB0_228:
	add.s32 	%r324, %r6923, %r259;
	mul.wide.s32 	%rd228, %r324, 4;
	add.s64 	%rd229, %rd15, %rd228;
	st.global.u32 	[%rd229], %r6933;
	@%p21 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_229;

$L__BB0_230:
	setp.eq.s32 	%p180, %r255, 0;
	add.s32 	%r1878, %r266, %r275;
	shl.b32 	%r1879, %r1878, 1;
	mul.wide.s32 	%rd230, %r1879, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.global.f32 	%f69, [%rd231];
	@%p180 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_231;

$L__BB0_232:
	mov.f32 	%f296, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f69;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6934, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_229:
	mov.f32 	%f292, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f292;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6934, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_233;

$L__BB0_231:
	mov.f32 	%f293, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f69;
  mov.b32 %r6934, {low,high};}

	// end inline asm

$L__BB0_233:
	add.s32 	%r1882, %r324, 1;
	mul.wide.s32 	%rd232, %r1882, 4;
	add.s64 	%rd233, %rd15, %rd232;
	st.global.u32 	[%rd233], %r6934;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_234:
	add.f32 	%f297, %f57, 0f00000000;
	setp.geu.f32 	%p181, %f297, 0f40000000;
	@%p181 bra 	$L__BB0_246;

	@%p21 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_236;

$L__BB0_237:
	setp.eq.s32 	%p182, %r255, 0;
	add.s32 	%r1884, %r267, %r275;
	shl.b32 	%r1885, %r1884, 1;
	or.b32  	%r1886, %r1885, 1;
	mul.wide.s32 	%rd234, %r1886, 4;
	add.s64 	%rd235, %rd14, %rd234;
	ld.global.f32 	%f70, [%rd235];
	@%p182 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;

$L__BB0_239:
	mov.f32 	%f303, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f303;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_236:
	mov.f32 	%f299, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f299;
  cvt.rn.f16.f32 high, %f299;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_240;

$L__BB0_238:
	mov.f32 	%f300, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f300;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6936, {low,high};}

	// end inline asm

$L__BB0_240:
	add.s32 	%r335, %r6923, %r259;
	mul.wide.s32 	%rd236, %r335, 4;
	add.s64 	%rd237, %rd15, %rd236;
	st.global.u32 	[%rd237], %r6936;
	@%p21 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_241;

$L__BB0_242:
	setp.eq.s32 	%p183, %r255, 0;
	add.s32 	%r1890, %r266, %r275;
	shl.b32 	%r1891, %r1890, 1;
	or.b32  	%r1892, %r1891, 1;
	mul.wide.s32 	%rd238, %r1892, 4;
	add.s64 	%rd239, %rd14, %rd238;
	ld.global.f32 	%f71, [%rd239];
	@%p183 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_243;

$L__BB0_244:
	mov.f32 	%f309, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f309;
  mov.b32 %r6937, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_241:
	mov.f32 	%f305, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f305;
  mov.b32 %r6937, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_245;

$L__BB0_243:
	mov.f32 	%f306, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f306;
  cvt.rn.f16.f32 high, %f71;
  mov.b32 %r6937, {low,high};}

	// end inline asm

$L__BB0_245:
	add.s32 	%r1895, %r335, 1;
	mul.wide.s32 	%rd240, %r1895, 4;
	add.s64 	%rd241, %rd15, %rd240;
	st.global.u32 	[%rd241], %r6937;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_246:
	or.b32  	%r1896, %r269, %r275;
	setp.gt.s32 	%p184, %r1896, -1;
	and.pred  	%p186, %p154, %p184;
	setp.lt.s32 	%p187, %r269, %r1485;
	and.pred  	%p22, %p187, %p186;
	@%p178 bra 	$L__BB0_258;

	@%p22 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_248;

$L__BB0_249:
	setp.eq.s32 	%p189, %r255, 0;
	add.s32 	%r1898, %r268, %r275;
	shl.b32 	%r1899, %r1898, 1;
	mul.wide.s32 	%rd242, %r1899, 4;
	add.s64 	%rd243, %rd14, %rd242;
	ld.global.f32 	%f72, [%rd243];
	@%p189 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_250;

$L__BB0_251:
	mov.f32 	%f315, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f315;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_248:
	mov.f32 	%f311, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f311;
  cvt.rn.f16.f32 high, %f311;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_252;

$L__BB0_250:
	mov.f32 	%f312, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f312;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6939, {low,high};}

	// end inline asm

$L__BB0_252:
	add.s32 	%r346, %r6923, %r259;
	mul.wide.s32 	%rd244, %r346, 4;
	add.s64 	%rd245, %rd15, %rd244;
	st.global.u32 	[%rd245], %r6939;
	@%p22 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_253;

$L__BB0_254:
	setp.eq.s32 	%p190, %r255, 0;
	add.s32 	%r1903, %r270, %r275;
	shl.b32 	%r1904, %r1903, 1;
	mul.wide.s32 	%rd246, %r1904, 4;
	add.s64 	%rd247, %rd14, %rd246;
	ld.global.f32 	%f73, [%rd247];
	@%p190 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_255;

$L__BB0_256:
	mov.f32 	%f321, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f73;
  cvt.rn.f16.f32 high, %f321;
  mov.b32 %r6940, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_253:
	mov.f32 	%f317, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f317;
  mov.b32 %r6940, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_257;

$L__BB0_255:
	mov.f32 	%f318, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f318;
  cvt.rn.f16.f32 high, %f73;
  mov.b32 %r6940, {low,high};}

	// end inline asm

$L__BB0_257:
	add.s32 	%r1907, %r346, 1;
	mul.wide.s32 	%rd248, %r1907, 4;
	add.s64 	%rd249, %rd15, %rd248;
	st.global.u32 	[%rd249], %r6940;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_258:
	@%p171 bra 	$L__BB0_270;

	@%p22 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_260;

$L__BB0_261:
	setp.eq.s32 	%p192, %r255, 0;
	add.s32 	%r1909, %r268, %r275;
	shl.b32 	%r1910, %r1909, 1;
	or.b32  	%r1911, %r1910, 1;
	mul.wide.s32 	%rd250, %r1911, 4;
	add.s64 	%rd251, %rd14, %rd250;
	ld.global.f32 	%f74, [%rd251];
	@%p192 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_262;

$L__BB0_263:
	mov.f32 	%f327, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f327;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_260:
	mov.f32 	%f323, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f323;
  cvt.rn.f16.f32 high, %f323;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_264;

$L__BB0_262:
	mov.f32 	%f324, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f324;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r6942, {low,high};}

	// end inline asm

$L__BB0_264:
	add.s32 	%r357, %r6923, %r259;
	mul.wide.s32 	%rd252, %r357, 4;
	add.s64 	%rd253, %rd15, %rd252;
	st.global.u32 	[%rd253], %r6942;
	@%p22 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_265;

$L__BB0_266:
	setp.eq.s32 	%p193, %r255, 0;
	add.s32 	%r1915, %r270, %r275;
	shl.b32 	%r1916, %r1915, 1;
	or.b32  	%r1917, %r1916, 1;
	mul.wide.s32 	%rd254, %r1917, 4;
	add.s64 	%rd255, %rd14, %rd254;
	ld.global.f32 	%f75, [%rd255];
	@%p193 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_267;

$L__BB0_268:
	mov.f32 	%f333, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f75;
  cvt.rn.f16.f32 high, %f333;
  mov.b32 %r6943, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_265:
	mov.f32 	%f329, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f329;
  mov.b32 %r6943, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_269;

$L__BB0_267:
	mov.f32 	%f330, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f330;
  cvt.rn.f16.f32 high, %f75;
  mov.b32 %r6943, {low,high};}

	// end inline asm

$L__BB0_269:
	add.s32 	%r1920, %r357, 1;
	mul.wide.s32 	%rd256, %r1920, 4;
	add.s64 	%rd257, %rd15, %rd256;
	st.global.u32 	[%rd257], %r6943;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_270:
	or.b32  	%r1921, %r272, %r275;
	setp.gt.s32 	%p194, %r1921, -1;
	and.pred  	%p196, %p154, %p194;
	setp.lt.s32 	%p197, %r272, %r1485;
	and.pred  	%p23, %p197, %p196;
	@%p168 bra 	$L__BB0_282;

	@%p23 bra 	$L__BB0_273;
	bra.uni 	$L__BB0_272;

$L__BB0_273:
	setp.eq.s32 	%p199, %r255, 0;
	add.s32 	%r1923, %r271, %r275;
	shl.b32 	%r1924, %r1923, 1;
	mul.wide.s32 	%rd258, %r1924, 4;
	add.s64 	%rd259, %rd14, %rd258;
	ld.global.f32 	%f76, [%rd259];
	@%p199 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	mov.f32 	%f339, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f339;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_272:
	mov.f32 	%f335, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f335;
  cvt.rn.f16.f32 high, %f335;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6945, {low,high};}

	// end inline asm

$L__BB0_276:
	add.s32 	%r368, %r6923, %r259;
	mul.wide.s32 	%rd260, %r368, 4;
	add.s64 	%rd261, %rd15, %rd260;
	st.global.u32 	[%rd261], %r6945;
	@%p23 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	setp.eq.s32 	%p200, %r255, 0;
	add.s32 	%r1928, %r273, %r275;
	shl.b32 	%r1929, %r1928, 1;
	mul.wide.s32 	%rd262, %r1929, 4;
	add.s64 	%rd263, %rd14, %rd262;
	ld.global.f32 	%f77, [%rd263];
	@%p200 bra 	$L__BB0_280;
	bra.uni 	$L__BB0_279;

$L__BB0_280:
	mov.f32 	%f345, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f77;
  cvt.rn.f16.f32 high, %f345;
  mov.b32 %r6946, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_277:
	mov.f32 	%f341, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f341;
  cvt.rn.f16.f32 high, %f341;
  mov.b32 %r6946, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_281;

$L__BB0_279:
	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f77;
  mov.b32 %r6946, {low,high};}

	// end inline asm

$L__BB0_281:
	add.s32 	%r1932, %r368, 1;
	mul.wide.s32 	%rd264, %r1932, 4;
	add.s64 	%rd265, %rd15, %rd264;
	st.global.u32 	[%rd265], %r6946;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_282:
	@%p161 bra 	$L__BB0_294;

	@%p23 bra 	$L__BB0_285;
	bra.uni 	$L__BB0_284;

$L__BB0_285:
	setp.eq.s32 	%p202, %r255, 0;
	add.s32 	%r1934, %r271, %r275;
	shl.b32 	%r1935, %r1934, 1;
	or.b32  	%r1936, %r1935, 1;
	mul.wide.s32 	%rd266, %r1936, 4;
	add.s64 	%rd267, %rd14, %rd266;
	ld.global.f32 	%f78, [%rd267];
	@%p202 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	mov.f32 	%f351, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f78;
  cvt.rn.f16.f32 high, %f351;
  mov.b32 %r6948, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_284:
	mov.f32 	%f347, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f347;
  cvt.rn.f16.f32 high, %f347;
  mov.b32 %r6948, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f78;
  mov.b32 %r6948, {low,high};}

	// end inline asm

$L__BB0_288:
	add.s32 	%r379, %r6923, %r259;
	mul.wide.s32 	%rd268, %r379, 4;
	add.s64 	%rd269, %rd15, %rd268;
	st.global.u32 	[%rd269], %r6948;
	@%p23 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	setp.eq.s32 	%p203, %r255, 0;
	add.s32 	%r1940, %r273, %r275;
	shl.b32 	%r1941, %r1940, 1;
	or.b32  	%r1942, %r1941, 1;
	mul.wide.s32 	%rd270, %r1942, 4;
	add.s64 	%rd271, %rd14, %rd270;
	ld.global.f32 	%f79, [%rd271];
	@%p203 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f357, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f357;
  mov.b32 %r6949, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_289:
	mov.f32 	%f353, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f353;
  cvt.rn.f16.f32 high, %f353;
  mov.b32 %r6949, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6949, {low,high};}

	// end inline asm

$L__BB0_293:
	add.s32 	%r1945, %r379, 1;
	mul.wide.s32 	%rd272, %r1945, 4;
	add.s64 	%rd273, %rd15, %rd272;
	st.global.u32 	[%rd273], %r6949;
	add.s32 	%r6923, %r6923, 2;

$L__BB0_294:
	add.s64 	%rd487, %rd487, 4;
	add.s64 	%rd486, %rd486, -4;
	setp.ne.s64 	%p204, %rd486, 0;
	@%p204 bra 	$L__BB0_174;

$L__BB0_295:
	add.s32 	%r6919, %r6919, %r48;
	setp.lt.s32 	%p205, %r6919, %r1485;
	@%p205 bra 	$L__BB0_172;

$L__BB0_296:
	add.s32 	%r6913, %r6913, %r1511;
	setp.lt.s32 	%p206, %r6913, %r1484;
	@%p206 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_297;

$L__BB0_151:
	@%p35 bra 	$L__BB0_297;

	neg.s32 	%r228, %r78;
	mov.u32 	%r1760, 31;
	sub.s32 	%r1761, %r1760, %r46;
	setp.gt.s32 	%p144, %r45, %r46;
	selp.b32 	%r1762, %r46, %r1761, %p144;
	shl.b32 	%r1763, %r1762, 2;
	mov.u32 	%r1764, 2;
	sub.s32 	%r229, %r1763, %r1487;
	shl.b32 	%r1765, %r1486, 2;
	mov.u32 	%r1766, 128;
	sub.s32 	%r230, %r1766, %r1765;
	sub.s32 	%r1767, %r1764, %r1487;
	add.s32 	%r231, %r1767, %r1763;
	add.s32 	%r232, %r1484, -1;
	add.s32 	%r233, %r229, 1;
	add.s32 	%r234, %r231, 1;
	rem.s32 	%r1792, %r233, %r230;
	add.s32 	%r1793, %r1792, %r230;
	rem.s32 	%r245, %r1793, %r230;
	rem.s32 	%r1794, %r234, %r230;
	add.s32 	%r1795, %r1794, %r230;
	rem.s32 	%r246, %r1795, %r230;

$L__BB0_153:
	setp.ne.s32 	%p145, %r42, %r228;
	@%p145 bra 	$L__BB0_167;

	shl.b32 	%r236, %r6913, 1;
	rem.s32 	%r1768, %r229, %r230;
	add.s32 	%r1769, %r1768, %r230;
	rem.s32 	%r237, %r1769, %r230;
	rem.s32 	%r1770, %r231, %r230;
	add.s32 	%r1771, %r1770, %r230;
	rem.s32 	%r238, %r1771, %r230;
	@%p144 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_155;

$L__BB0_156:
	mul.lo.s32 	%r1774, %r236, %r230;
	add.s32 	%r1775, %r1774, %r237;
	mul.wide.s32 	%rd174, %r1775, 4;
	add.s64 	%rd175, %rd14, %rd174;
	ld.global.f32 	%f218, [%rd175];
	add.s32 	%r1776, %r1774, %r238;
	mul.wide.s32 	%rd176, %r1776, 4;
	add.s64 	%rd177, %rd14, %rd176;
	ld.global.f32 	%f219, [%rd177];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f218;
  cvt.rn.f16.f32 high, %f219;
  mov.b32 %r6914, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_157;

$L__BB0_155:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f217;
  mov.b32 %r6914, {low,high};}

	// end inline asm

$L__BB0_157:
	shl.b32 	%r1777, %r6913, 5;
	add.s32 	%r1778, %r1777, %r46;
	shl.b32 	%r1779, %r1778, 2;
	mul.wide.s32 	%rd178, %r1779, 4;
	add.s64 	%rd16, %rd15, %rd178;
	st.global.u32 	[%rd16], %r6914;
	@%p144 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	add.s32 	%r1782, %r236, 1;
	mul.lo.s32 	%r1783, %r1782, %r230;
	add.s32 	%r1784, %r1783, %r237;
	mul.wide.s32 	%rd179, %r1784, 4;
	add.s64 	%rd180, %rd14, %rd179;
	ld.global.f32 	%f222, [%rd180];
	add.s32 	%r1785, %r1783, %r238;
	mul.wide.s32 	%rd181, %r1785, 4;
	add.s64 	%rd182, %rd14, %rd181;
	ld.global.f32 	%f223, [%rd182];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f223;
  mov.b32 %r6915, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_160;

$L__BB0_158:
	mov.f32 	%f221, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f221;
  cvt.rn.f16.f32 high, %f221;
  mov.b32 %r6915, {low,high};}

	// end inline asm

$L__BB0_160:
	add.s32 	%r1786, %r232, %r6913;
	rem.s32 	%r1787, %r1786, %r1484;
	shl.b32 	%r1788, %r1787, 5;
	add.s32 	%r1789, %r1788, %r46;
	shl.b32 	%r1790, %r1789, 2;
	or.b32  	%r1791, %r1790, 2;
	mul.wide.s32 	%rd183, %r1791, 4;
	add.s64 	%rd17, %rd15, %rd183;
	st.global.u32 	[%rd17], %r6915;
	@%p144 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_161;

$L__BB0_162:
	mul.lo.s32 	%r1798, %r236, %r230;
	add.s32 	%r1799, %r1798, %r245;
	mul.wide.s32 	%rd184, %r1799, 4;
	add.s64 	%rd185, %rd14, %rd184;
	ld.global.f32 	%f226, [%rd185];
	add.s32 	%r1800, %r1798, %r246;
	mul.wide.s32 	%rd186, %r1800, 4;
	add.s64 	%rd187, %rd14, %rd186;
	ld.global.f32 	%f227, [%rd187];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f226;
  cvt.rn.f16.f32 high, %f227;
  mov.b32 %r6916, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_163;

$L__BB0_161:
	mov.f32 	%f225, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f225;
  cvt.rn.f16.f32 high, %f225;
  mov.b32 %r6916, {low,high};}

	// end inline asm

$L__BB0_163:
	st.global.u32 	[%rd16+4], %r6916;
	@%p144 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_164;

$L__BB0_165:
	add.s32 	%r1803, %r236, 1;
	mul.lo.s32 	%r1804, %r1803, %r230;
	add.s32 	%r1805, %r1804, %r245;
	mul.wide.s32 	%rd188, %r1805, 4;
	add.s64 	%rd189, %rd14, %rd188;
	ld.global.f32 	%f230, [%rd189];
	add.s32 	%r1806, %r1804, %r246;
	mul.wide.s32 	%rd190, %r1806, 4;
	add.s64 	%rd191, %rd14, %rd190;
	ld.global.f32 	%f231, [%rd191];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f230;
  cvt.rn.f16.f32 high, %f231;
  mov.b32 %r6917, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_166;

$L__BB0_164:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f229;
  mov.b32 %r6917, {low,high};}

	// end inline asm

$L__BB0_166:
	st.global.u32 	[%rd17+4], %r6917;

$L__BB0_167:
	add.s32 	%r6913, %r6913, %r1511;
	setp.lt.s32 	%p150, %r6913, %r1484;
	@%p150 bra 	$L__BB0_153;

$L__BB0_297:
	add.s32 	%r1947, %r1479, -1;
	mad.lo.s32 	%r1948, %r1480, 576, 128;
	mul.lo.s32 	%r1949, %r1948, %r1947;
	add.s32 	%r1950, %r69, -64;
	add.s32 	%r1951, %r1950, %r69;
	add.s32 	%r1952, %r1480, -1;
	mad.lo.s32 	%r1953, %r1951, %r1952, %r1949;
	mul.lo.s32 	%r1954, %r1947, %r1480;
	mul.lo.s32 	%r1955, %r1954, 320;
	mad.lo.s32 	%r1956, %r1950, %r1952, %r1955;
	add.s32 	%r388, %r1956, %r1953;
	setp.lt.s32 	%p207, %r388, 1;
	mov.f32 	%f359, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	@%p207 bra 	$L__BB0_300;

	mov.u32 	%r6953, 0;
	mov.u32 	%r6951, _ZN6kernel5shmemE;

$L__BB0_299:
	st.shared.u32 	[%r6951], %r6954;
	mov.f32 	%f367, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1959, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6951+4], %r1959;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1960, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6951+8], %r1960;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r1961, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6951+12], %r1961;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f367;
  cvt.rn.f16.f32 high, %f367;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	add.s32 	%r6951, %r6951, 16;
	add.s32 	%r6953, %r6953, 4;
	setp.lt.s32 	%p208, %r6953, %r388;
	@%p208 bra 	$L__BB0_299;

$L__BB0_300:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r1963, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f359;
  cvt.rn.f16.f32 high, %f359;
  mov.b32 %r1964, {low,high};}

	// end inline asm
	ld.param.u64 	%rd274, [%rd1+176];
	cvta.to.global.u64 	%rd22, %rd274;
	mov.u32 	%r1965, 31;
	sub.s32 	%r1966, %r1965, %r46;
	setp.gt.s32 	%p209, %r45, %r46;
	selp.b32 	%r1967, %r46, %r1966, %p209;
	shl.b32 	%r1968, %r1967, 2;
	sub.s32 	%r399, %r1968, %r1487;
	shl.b32 	%r1969, %r1486, 2;
	mov.u32 	%r1970, 128;
	sub.s32 	%r400, %r1970, %r1969;
	rem.s32 	%r1971, %r399, %r400;
	add.s32 	%r1972, %r1971, %r400;
	rem.s32 	%r401, %r1972, %r400;
	add.s32 	%r1973, %r399, 2;
	rem.s32 	%r1974, %r1973, %r400;
	add.s32 	%r1975, %r1974, %r400;
	rem.s32 	%r402, %r1975, %r400;
	mul.lo.s32 	%r1976, %r401, 6;
	mul.lo.s32 	%r1977, %r402, 6;
	mul.wide.s32 	%rd275, %r1976, 4;
	add.s64 	%rd23, %rd22, %rd275;
	mul.wide.s32 	%rd276, %r1977, 4;
	add.s64 	%rd24, %rd22, %rd276;
	@%p28 bra 	$L__BB0_302;
	bra.uni 	$L__BB0_301;

$L__BB0_302:
	mov.f32 	%f379, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f379;
  cvt.rn.f16.f32 high, %f379;
  mov.b32 %r6955, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_303;

$L__BB0_301:
	ld.global.f32 	%f374, [%rd23];
	ld.global.f32 	%f375, [%rd23+8];
	add.f32 	%f372, %f374, %f375;
	ld.global.f32 	%f376, [%rd24+8];
	ld.global.f32 	%f377, [%rd24];
	add.f32 	%f373, %f377, %f376;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f373;
  mov.b32 %r6955, {low,high};}

	// end inline asm

$L__BB0_303:
	@%p28 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f382, [%rd23+4];
	ld.global.f32 	%f383, [%rd24+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f383;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_304:
	ld.global.f32 	%f380, [%rd23];
	ld.global.f32 	%f381, [%rd24];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f381;
  mov.b32 %r6956, {low,high};}

	// end inline asm

$L__BB0_306:
	@%p28 bra 	$L__BB0_308;
	bra.uni 	$L__BB0_307;

$L__BB0_308:
	mov.f32 	%f391, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f391;
  cvt.rn.f16.f32 high, %f391;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_309;

$L__BB0_307:
	ld.global.f32 	%f386, [%rd23+20];
	ld.global.f32 	%f387, [%rd23+12];
	add.f32 	%f384, %f387, %f386;
	ld.global.f32 	%f388, [%rd24+20];
	ld.global.f32 	%f389, [%rd24+12];
	add.f32 	%f385, %f389, %f388;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f385;
  mov.b32 %r6957, {low,high};}

	// end inline asm

$L__BB0_309:
	@%p28 bra 	$L__BB0_311;
	bra.uni 	$L__BB0_310;

$L__BB0_311:
	ld.global.f32 	%f394, [%rd23+16];
	ld.global.f32 	%f395, [%rd24+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f395;
  mov.b32 %r6958, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_312;

$L__BB0_310:
	ld.global.f32 	%f392, [%rd23+12];
	ld.global.f32 	%f393, [%rd24+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f393;
  mov.b32 %r6958, {low,high};}

	// end inline asm

$L__BB0_312:
	add.s32 	%r1986, %r399, 1;
	rem.s32 	%r1987, %r1986, %r400;
	add.s32 	%r1988, %r1987, %r400;
	rem.s32 	%r415, %r1988, %r400;
	add.s32 	%r1989, %r399, 3;
	rem.s32 	%r1990, %r1989, %r400;
	add.s32 	%r1991, %r1990, %r400;
	rem.s32 	%r416, %r1991, %r400;
	mul.lo.s32 	%r1992, %r415, 6;
	mul.lo.s32 	%r1993, %r416, 6;
	mul.wide.s32 	%rd277, %r1992, 4;
	add.s64 	%rd25, %rd22, %rd277;
	mul.wide.s32 	%rd278, %r1993, 4;
	add.s64 	%rd26, %rd22, %rd278;
	@%p28 bra 	$L__BB0_314;
	bra.uni 	$L__BB0_313;

$L__BB0_314:
	mov.f32 	%f403, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f403;
  cvt.rn.f16.f32 high, %f403;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_315;

$L__BB0_313:
	ld.global.f32 	%f398, [%rd25];
	ld.global.f32 	%f399, [%rd25+8];
	add.f32 	%f396, %f398, %f399;
	ld.global.f32 	%f400, [%rd26+8];
	ld.global.f32 	%f401, [%rd26];
	add.f32 	%f397, %f401, %f400;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f397;
  mov.b32 %r6959, {low,high};}

	// end inline asm

$L__BB0_315:
	@%p28 bra 	$L__BB0_317;
	bra.uni 	$L__BB0_316;

$L__BB0_317:
	ld.global.f32 	%f406, [%rd25+4];
	ld.global.f32 	%f407, [%rd26+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f407;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_318;

$L__BB0_316:
	ld.global.f32 	%f404, [%rd25];
	ld.global.f32 	%f405, [%rd26];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f405;
  mov.b32 %r6960, {low,high};}

	// end inline asm

$L__BB0_318:
	@%p28 bra 	$L__BB0_320;
	bra.uni 	$L__BB0_319;

$L__BB0_320:
	mov.f32 	%f415, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f415;
  cvt.rn.f16.f32 high, %f415;
  mov.b32 %r6961, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_321;

$L__BB0_319:
	ld.global.f32 	%f410, [%rd25+20];
	ld.global.f32 	%f411, [%rd25+12];
	add.f32 	%f408, %f411, %f410;
	ld.global.f32 	%f412, [%rd26+20];
	ld.global.f32 	%f413, [%rd26+12];
	add.f32 	%f409, %f413, %f412;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f408;
  cvt.rn.f16.f32 high, %f409;
  mov.b32 %r6961, {low,high};}

	// end inline asm

$L__BB0_321:
	@%p28 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_322;

$L__BB0_323:
	ld.global.f32 	%f418, [%rd25+16];
	ld.global.f32 	%f419, [%rd26+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f418;
  cvt.rn.f16.f32 high, %f419;
  mov.b32 %r6962, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_324;

$L__BB0_322:
	ld.global.f32 	%f416, [%rd25+12];
	ld.global.f32 	%f417, [%rd26+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f416;
  cvt.rn.f16.f32 high, %f417;
  mov.b32 %r6962, {low,high};}

	// end inline asm

$L__BB0_324:
	// begin inline asm
	mov.u32 %r2002, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd279, %r2002;
	// begin inline asm
	mov.u32 %r2003, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd280, %r2003;
	bfi.b64 	%rd27, %rd280, %rd279, 32, 32;
	setp.ne.s64 	%p218, %rd27, 0;
	@%p218 bra 	$L__BB0_326;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_326:
	add.s64 	%rd28, %rd27, 4;
	mov.u32 	%r2004, %nctaid.y;
	mov.u32 	%r2005, %nctaid.x;
	mul.lo.s32 	%r2006, %r2005, %r2004;
	mov.u32 	%r2007, %nctaid.z;
	mul.lo.s32 	%r429, %r2006, %r2007;
	neg.s32 	%r2008, %r42;
	add.s32 	%r2009, %r46, %r41;
	setp.ne.s32 	%p219, %r2009, %r2008;
	mov.u32 	%r2010, %ctaid.x;
	add.s32 	%r430, %r2010, %r43;
	neg.s32 	%r431, %r44;
	bar.sync 	0;
	@%p219 bra 	$L__BB0_330;

	setp.eq.s32 	%p220, %r430, %r431;
	mov.u32 	%r2013, -2147483647;
	sub.s32 	%r2014, %r2013, %r429;
	selp.b32 	%r2012, %r2014, 1, %p220;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2011,[%rd28],%r2012;
	// end inline asm

$L__BB0_328:
	ld.volatile.u32 	%r2015, [%rd28];
	xor.b32  	%r2016, %r2015, %r2011;
	setp.gt.s32 	%p221, %r2016, -1;
	@%p221 bra 	$L__BB0_328;

	// begin inline asm
	ld.acquire.gpu.u32 %r2017,[%rd28];
	// end inline asm

$L__BB0_330:
	bar.sync 	0;
	setp.lt.s32 	%p222, %r49, 1;
	@%p222 bra 	$L__BB0_849;

	shr.s32 	%r2019, %r1489, 31;
	shr.u32 	%r2020, %r2019, 30;
	add.s32 	%r2021, %r1489, %r2020;
	shr.s32 	%r433, %r2021, 2;
	add.s32 	%r2022, %r46, 24;
	mul.hi.s32 	%r2023, %r2022, 1374389535;
	shr.u32 	%r2024, %r2023, 31;
	shr.s32 	%r2025, %r2023, 3;
	add.s32 	%r2026, %r2025, %r2024;
	mul.lo.s32 	%r2027, %r2026, 25;
	sub.s32 	%r2028, %r2022, %r2027;
	add.s32 	%r2029, %r46, 26;
	mul.hi.s32 	%r2030, %r2029, 1374389535;
	shr.u32 	%r2031, %r2030, 31;
	shr.s32 	%r2032, %r2030, 3;
	add.s32 	%r2033, %r2032, %r2031;
	mul.lo.s32 	%r2034, %r2033, 25;
	sub.s32 	%r2035, %r2029, %r2034;
	shr.u32 	%r2036, %r1489, 31;
	add.s32 	%r2037, %r1489, %r2036;
	and.b32  	%r2038, %r2037, -2;
	sub.s32 	%r434, %r1489, %r2038;
	setp.lt.s32 	%p223, %r46, 25;
	selp.b32 	%r435, %r2028, %r46, %p223;
	setp.lt.s32 	%p224, %r401, %r1498;
	setp.ge.s32 	%p225, %r401, %r1497;
	and.pred  	%p24, %p224, %p225;
	setp.lt.s32 	%p226, %r415, %r1498;
	setp.ge.s32 	%p227, %r415, %r1497;
	and.pred  	%p25, %p226, %p227;
	setp.lt.s32 	%p228, %r402, %r1498;
	setp.ge.s32 	%p229, %r402, %r1497;
	and.pred  	%p26, %p228, %p229;
	setp.lt.s32 	%p230, %r416, %r1498;
	setp.ge.s32 	%p231, %r416, %r1497;
	and.pred  	%p27, %p230, %p231;
	selp.b32 	%r436, %r2035, %r46, %p223;
	mov.u32 	%r2018, 0;
	// begin inline asm
	{mov.u32 %r2039, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2364, %r2039, 8;
	add.s32 	%r2365, %r2364, -8192;
	or.b32  	%r2043, %r2365, 31;
	mov.u32 	%r7284, %r1964;
	mov.u32 	%r7285, %r1964;
	mov.u32 	%r7294, %r1964;
	mov.u32 	%r7295, %r1964;
	mov.u32 	%r7296, %r1964;
	mov.u32 	%r7297, %r1964;
	mov.u32 	%r7286, %r1964;
	mov.u32 	%r7287, %r1964;
	mov.u32 	%r7288, %r1964;
	mov.u32 	%r7289, %r1964;
	mov.u32 	%r7290, %r1964;
	mov.u32 	%r7291, %r1964;
	mov.u32 	%r7298, %r1964;
	mov.u32 	%r7299, %r1964;
	mov.u32 	%r7300, %r1964;
	mov.u32 	%r7301, %r1964;
	mov.u32 	%r7302, %r1964;
	mov.u32 	%r7303, %r1964;
	mov.u32 	%r7292, %r1964;
	mov.u32 	%r7293, %r1964;
	mov.u32 	%r7304, %r1964;
	mov.u32 	%r7305, %r1964;
	mov.u32 	%r7236, %r1964;
	mov.u32 	%r7237, %r1964;
	mov.u32 	%r7224, %r1964;
	mov.u32 	%r7225, %r1964;
	mov.u32 	%r7226, %r1964;
	mov.u32 	%r7227, %r1964;
	mov.u32 	%r7238, %r1964;
	mov.u32 	%r7239, %r1964;
	mov.u32 	%r7240, %r1964;
	mov.u32 	%r7241, %r1964;
	mov.u32 	%r7242, %r1964;
	mov.u32 	%r7243, %r1964;
	mov.u32 	%r7228, %r1964;
	mov.u32 	%r7229, %r1964;
	mov.u32 	%r7230, %r1964;
	mov.u32 	%r7231, %r1964;
	mov.u32 	%r7244, %r1964;
	mov.u32 	%r7245, %r1964;
	mov.u32 	%r7246, %r1964;
	mov.u32 	%r7247, %r1964;
	mov.u32 	%r7005, %r1964;
	mov.u32 	%r7006, %r1964;
	mov.u32 	%r7232, %r1964;
	mov.u32 	%r7233, %r1964;
	mov.u32 	%r7009, %r1964;
	mov.u32 	%r7010, %r1964;
	mov.u32 	%r7011, %r1964;
	mov.u32 	%r7012, %r1964;
	mov.u32 	%r7013, %r1964;
	mov.u32 	%r7014, %r1964;
	mov.u32 	%r7208, %r1964;
	mov.u32 	%r7209, %r1964;
	mov.u32 	%r7017, %r1964;
	mov.u32 	%r7210, %r1964;
	mov.u32 	%r7019, %r1964;
	mov.u32 	%r7020, %r1964;
	mov.u32 	%r7211, %r1964;
	mov.u32 	%r7022, %r1964;
	mov.u32 	%r7023, %r1964;
	mov.u32 	%r7024, %r1964;
	mov.u32 	%r7248, %r1964;
	mov.u32 	%r7249, %r1964;
	mov.u32 	%r7027, %r1964;
	mov.u32 	%r7028, %r1964;
	mov.u32 	%r7234, %r1964;
	mov.u32 	%r7235, %r1964;
	mov.u32 	%r7031, %r1964;
	mov.u32 	%r7032, %r1964;
	mov.u32 	%r7033, %r1964;
	mov.u32 	%r7034, %r1964;
	mov.u32 	%r7035, %r1964;
	mov.u32 	%r7036, %r1964;
	mov.u32 	%r7037, %r1964;
	mov.u32 	%r7038, %r1964;
	mov.u32 	%r7039, %r1964;
	mov.u32 	%r7040, %r1964;
	mov.u32 	%r7041, %r1964;
	mov.u32 	%r7042, %r1964;
	mov.u32 	%r7043, %r1964;
	mov.u32 	%r7044, %r1964;
	mov.u32 	%r7045, %r1964;
	mov.u32 	%r7046, %r1964;
	mov.u32 	%r7047, %r1964;
	mov.u32 	%r7212, %r1964;
	mov.u32 	%r7049, %r1964;
	mov.u32 	%r7050, %r1964;
	mov.u32 	%r7051, %r1964;
	mov.u32 	%r7052, %r1964;
	mov.u32 	%r7053, %r1964;
	mov.u32 	%r7054, %r1964;
	mov.u32 	%r7055, %r1964;
	mov.u32 	%r7213, %r1964;
	mov.u32 	%r7057, %r1964;
	mov.u32 	%r7250, %r1964;
	mov.u32 	%r7059, %r1964;
	mov.u32 	%r7060, %r1964;
	mov.u32 	%r7061, %r1964;
	mov.u32 	%r7062, %r1964;
	mov.u32 	%r7251, %r1964;
	mov.u32 	%r7064, %r1964;
	mov.u32 	%r7065, %r1964;
	mov.u32 	%r7066, %r1964;
	mov.u32 	%r7067, %r1964;
	mov.u32 	%r7068, %r1964;
	mov.u32 	%r7069, %r1964;
	mov.u32 	%r7070, %r1964;
	mov.u32 	%r7071, %r1964;
	mov.u32 	%r7072, %r1964;
	mov.u32 	%r7073, %r1964;
	mov.u32 	%r7074, %r1964;
	mov.u32 	%r7075, %r1964;
	mov.u32 	%r7076, %r1964;
	mov.u32 	%r7077, %r1964;
	mov.u32 	%r7078, %r1964;
	mov.u32 	%r7079, %r1964;
	mov.u32 	%r7080, %r1964;
	mov.u32 	%r7081, %r1964;
	mov.u32 	%r7082, %r1964;
	mov.u32 	%r7083, %r1964;
	mov.u32 	%r7084, %r1964;
	mov.u32 	%r7085, %r1964;
	mov.u32 	%r7086, %r1964;
	mov.u32 	%r7087, %r1964;
	mov.u32 	%r7088, %r1964;
	mov.u32 	%r7089, %r1964;
	mov.u32 	%r7090, %r1964;
	mov.u32 	%r7091, %r1964;
	mov.u32 	%r7092, %r1964;
	mov.u32 	%r7093, %r1964;
	mov.u32 	%r7094, %r1964;
	mov.u32 	%r7095, %r1964;
	mov.u32 	%r7096, %r1964;
	mov.u32 	%r7097, %r1964;
	mov.u32 	%r7098, %r1964;
	mov.u32 	%r7099, %r1964;
	mov.u32 	%r7100, %r1964;
	mov.u32 	%r7101, %r1964;
	mov.u32 	%r7102, %r1964;
	mov.u32 	%r7103, %r1964;
	mov.u32 	%r7104, %r1964;
	mov.u32 	%r7105, %r1964;
	mov.u32 	%r7106, %r1964;
	mov.u32 	%r7107, %r1964;
	mov.u32 	%r7108, %r1964;
	mov.u32 	%r7109, %r1964;
	mov.u32 	%r7110, %r1964;
	mov.u32 	%r7111, %r1964;
	mov.u32 	%r7112, %r1964;
	mov.u32 	%r7113, %r2018;

$L__BB0_332:
	mov.u32 	%r530, %r7213;
	mov.u32 	%r526, %r7052;
	mov.u32 	%r522, %r7212;
	mov.u32 	%r520, %r7046;
	mov.u32 	%r518, %r7044;
	mov.u32 	%r510, %r7036;
	mov.u32 	%r7052, %r7211;
	mov.u32 	%r492, %r7210;
	mov.u32 	%r7046, %r7209;
	mov.u32 	%r489, %r7208;
	mov.u32 	%r484, %r7010;
	mov.u32 	%r483, %r7009;
	mov.u32 	%r6866, %ctaid.y;
	mov.u32 	%r6865, %ctaid.z;
	mov.u32 	%r2054, 1;
	not.b32 	%r2328, %r6865;
	mov.u32 	%r2320, -1;
	add.s32 	%r2329, %r1482, %r2328;
	not.b32 	%r2331, %r6866;
	add.s32 	%r2332, %r1481, %r2331;
	add.s32 	%r2333, %r2332, %r2329;
	mul.lo.s32 	%r2334, %r2333, %r1483;
	add.s32 	%r2335, %r2334, %r1484;
	not.b32 	%r2337, %r41;
	add.s32 	%r2338, %r1479, %r2337;
	mad.lo.s32 	%r2339, %r2332, %r1479, %r2338;
	not.b32 	%r2341, %r42;
	add.s32 	%r2342, %r1480, %r2341;
	mad.lo.s32 	%r2343, %r2329, %r1480, %r2342;
	add.s32 	%r2344, %r2339, %r2343;
	shl.b32 	%r2345, %r2344, 1;
	add.s32 	%r2346, %r2335, %r2345;
	add.s32 	%r2347, %r2346, %r7113;
	add.s32 	%r2348, %r7113, %r2334;
	div.s32 	%r2349, %r2347, %r1484;
	mul.lo.s32 	%r2350, %r2349, %r1484;
	sub.s32 	%r2353, %r48, %r1484;
	sub.s32 	%r2354, %r2339, %r2343;
	shl.b32 	%r2355, %r2354, 1;
	add.s32 	%r2356, %r2355, %r1485;
	mad.lo.s32 	%r2357, %r2349, %r48, %r2356;
	mad.lo.s32 	%r2358, %r2349, %r2353, %r2348;
	div.s32 	%r2359, %r2357, %r1485;
	mul.lo.s32 	%r2360, %r2359, %r1485;
	sub.s32 	%r2363, %r1512, %r1485;
	mov.u32 	%r2138, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2040,%r1963,%r2018,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2046, %r6956, %r2040, %p28;
	// begin inline asm
	{mul.f16x2 %r7197,%r2046,%r7112;
}
	// end inline asm
	selp.b32 	%r2049, %r6960, %r2040, %p28;
	// begin inline asm
	{mul.f16x2 %r7195,%r2049,%r7111;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2052,%r1963,%r2054,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2058, %r6956, %r2052, %p28;
	// begin inline asm
	{mul.f16x2 %r7196,%r2058,%r7110;
}
	// end inline asm
	selp.b32 	%r2061, %r6960, %r2052, %p28;
	// begin inline asm
	{mul.f16x2 %r7194,%r2061,%r7109;
}
	// end inline asm
	mov.u32 	%r2066, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2064,%r1963,%r2066,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2070, %r6956, %r2064, %p28;
	// begin inline asm
	{mul.f16x2 %r7193,%r2070,%r7108;
}
	// end inline asm
	selp.b32 	%r2073, %r6960, %r2064, %p28;
	// begin inline asm
	{mul.f16x2 %r7192,%r2073,%r7107;
}
	// end inline asm
	mov.u32 	%r2078, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2076,%r1963,%r2078,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2082, %r6956, %r2076, %p28;
	// begin inline asm
	{mul.f16x2 %r7191,%r2082,%r7305;
}
	// end inline asm
	selp.b32 	%r2085, %r6960, %r2076, %p28;
	// begin inline asm
	{mul.f16x2 %r7189,%r2085,%r7304;
}
	// end inline asm
	mov.u32 	%r2090, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2088,%r1963,%r2090,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2094, %r6956, %r2088, %p28;
	// begin inline asm
	{mul.f16x2 %r7190,%r2094,%r7106;
}
	// end inline asm
	selp.b32 	%r2097, %r6960, %r2088, %p28;
	// begin inline asm
	{mul.f16x2 %r7188,%r2097,%r7105;
}
	// end inline asm
	mov.u32 	%r2102, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2100,%r1963,%r2102,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2106, %r6956, %r2100, %p28;
	// begin inline asm
	{mul.f16x2 %r7187,%r2106,%r7104;
}
	// end inline asm
	selp.b32 	%r2109, %r6960, %r2100, %p28;
	// begin inline asm
	{mul.f16x2 %r7184,%r2109,%r7103;
}
	// end inline asm
	mov.u32 	%r2114, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2112,%r1963,%r2114,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2118, %r6956, %r2112, %p28;
	// begin inline asm
	{mul.f16x2 %r7186,%r2118,%r7102;
}
	// end inline asm
	selp.b32 	%r2121, %r6960, %r2112, %p28;
	// begin inline asm
	{mul.f16x2 %r7183,%r2121,%r7101;
}
	// end inline asm
	mov.u32 	%r2126, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2124,%r1963,%r2126,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2130, %r6956, %r2124, %p28;
	// begin inline asm
	{mul.f16x2 %r7185,%r2130,%r7100;
}
	// end inline asm
	selp.b32 	%r2133, %r6960, %r2124, %p28;
	// begin inline asm
	{mul.f16x2 %r7182,%r2133,%r7099;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2136,%r1963,%r2138,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2142, %r6956, %r2136, %p28;
	// begin inline asm
	{mul.f16x2 %r7181,%r2142,%r7098;
}
	// end inline asm
	selp.b32 	%r2145, %r6960, %r2136, %p28;
	// begin inline asm
	{mul.f16x2 %r7178,%r2145,%r7097;
}
	// end inline asm
	mov.u32 	%r2150, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2148,%r1963,%r2150,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2154, %r6956, %r2148, %p28;
	// begin inline asm
	{mul.f16x2 %r7180,%r2154,%r7096;
}
	// end inline asm
	selp.b32 	%r2157, %r6960, %r2148, %p28;
	// begin inline asm
	{mul.f16x2 %r7177,%r2157,%r7095;
}
	// end inline asm
	mov.u32 	%r2162, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2160,%r1963,%r2162,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2166, %r6956, %r2160, %p28;
	// begin inline asm
	{mul.f16x2 %r7179,%r2166,%r7094;
}
	// end inline asm
	selp.b32 	%r2169, %r6960, %r2160, %p28;
	// begin inline asm
	{mul.f16x2 %r7176,%r2169,%r7093;
}
	// end inline asm
	mov.u32 	%r2174, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2172,%r1963,%r2174,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2178, %r6956, %r2172, %p28;
	// begin inline asm
	{mul.f16x2 %r7175,%r2178,%r7293;
}
	// end inline asm
	selp.b32 	%r2181, %r6960, %r2172, %p28;
	// begin inline asm
	{mul.f16x2 %r7174,%r2181,%r7292;
}
	// end inline asm
	mov.u32 	%r2186, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2184,%r1963,%r2186,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2190, %r6956, %r2184, %p28;
	// begin inline asm
	{mul.f16x2 %r7173,%r2190,%r7303;
}
	// end inline asm
	selp.b32 	%r2193, %r6960, %r2184, %p28;
	// begin inline asm
	{mul.f16x2 %r7171,%r2193,%r7301;
}
	// end inline asm
	mov.u32 	%r2198, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2196,%r1963,%r2198,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2202, %r6956, %r2196, %p28;
	// begin inline asm
	{mul.f16x2 %r7172,%r2202,%r7302;
}
	// end inline asm
	selp.b32 	%r2205, %r6960, %r2196, %p28;
	// begin inline asm
	{mul.f16x2 %r7170,%r2205,%r7300;
}
	// end inline asm
	mov.u32 	%r2210, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2208,%r1963,%r2210,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2214, %r6956, %r2208, %p28;
	// begin inline asm
	{mul.f16x2 %r7169,%r2214,%r7299;
}
	// end inline asm
	selp.b32 	%r2217, %r6960, %r2208, %p28;
	// begin inline asm
	{mul.f16x2 %r7166,%r2217,%r7298;
}
	// end inline asm
	mov.u32 	%r2222, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2220,%r1963,%r2222,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2226, %r6956, %r2220, %p28;
	// begin inline asm
	{mul.f16x2 %r7168,%r2226,%r7092;
}
	// end inline asm
	selp.b32 	%r2229, %r6960, %r2220, %p28;
	// begin inline asm
	{mul.f16x2 %r7165,%r2229,%r7091;
}
	// end inline asm
	mov.u32 	%r2234, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2232,%r1963,%r2234,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2238, %r6956, %r2232, %p28;
	// begin inline asm
	{mul.f16x2 %r7167,%r2238,%r7090;
}
	// end inline asm
	selp.b32 	%r2241, %r6960, %r2232, %p28;
	// begin inline asm
	{mul.f16x2 %r7164,%r2241,%r7089;
}
	// end inline asm
	mov.u32 	%r2246, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2244,%r1963,%r2246,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2250, %r6956, %r2244, %p28;
	// begin inline asm
	{mul.f16x2 %r7163,%r2250,%r7291;
}
	// end inline asm
	selp.b32 	%r2253, %r6960, %r2244, %p28;
	// begin inline asm
	{mul.f16x2 %r7160,%r2253,%r7289;
}
	// end inline asm
	mov.u32 	%r2258, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2256,%r1963,%r2258,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2262, %r6956, %r2256, %p28;
	// begin inline asm
	{mul.f16x2 %r7162,%r2262,%r7290;
}
	// end inline asm
	selp.b32 	%r2265, %r6960, %r2256, %p28;
	// begin inline asm
	{mul.f16x2 %r7159,%r2265,%r7288;
}
	// end inline asm
	mov.u32 	%r2270, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2268,%r1963,%r2270,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2274, %r6956, %r2268, %p28;
	// begin inline asm
	{mul.f16x2 %r7161,%r2274,%r7088;
}
	// end inline asm
	selp.b32 	%r2277, %r6960, %r2268, %p28;
	// begin inline asm
	{mul.f16x2 %r7158,%r2277,%r7087;
}
	// end inline asm
	mov.u32 	%r2282, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2280,%r1963,%r2282,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2286, %r6956, %r2280, %p28;
	// begin inline asm
	{mul.f16x2 %r7157,%r2286,%r7287;
}
	// end inline asm
	selp.b32 	%r2289, %r6960, %r2280, %p28;
	// begin inline asm
	{mul.f16x2 %r7156,%r2289,%r7286;
}
	// end inline asm
	mov.u32 	%r2294, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2292,%r1963,%r2294,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2298, %r6956, %r2292, %p28;
	// begin inline asm
	{mul.f16x2 %r7155,%r2298,%r7297;
}
	// end inline asm
	selp.b32 	%r2301, %r6960, %r2292, %p28;
	// begin inline asm
	{mul.f16x2 %r7153,%r2301,%r7295;
}
	// end inline asm
	mov.u32 	%r2306, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2304,%r1963,%r2306,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2310, %r6956, %r2304, %p28;
	// begin inline asm
	{mul.f16x2 %r7154,%r2310,%r7296;
}
	// end inline asm
	selp.b32 	%r2313, %r6960, %r2304, %p28;
	// begin inline asm
	{mul.f16x2 %r7152,%r2313,%r7294;
}
	// end inline asm
	mov.u32 	%r2318, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2316,%r1963,%r2318,%r2043,%r2320;
}
	// end inline asm
	selp.b32 	%r2322, %r6956, %r2316, %p28;
	// begin inline asm
	{mul.f16x2 %r7151,%r2322,%r7285;
}
	// end inline asm
	selp.b32 	%r2325, %r6960, %r2316, %p28;
	// begin inline asm
	{mul.f16x2 %r7150,%r2325,%r7284;
}
	// end inline asm
	sub.s32 	%r636, %r2347, %r2350;
	sub.s32 	%r637, %r2357, %r2360;
	mad.lo.s32 	%r638, %r2359, %r2363, %r2358;
	ld.param.u64 	%rd284, [%rd1+168];
	cvta.to.global.u64 	%rd285, %rd284;
	shl.b32 	%r2412, %r638, 1;
	mul.wide.s32 	%rd286, %r2412, 4;
	add.s64 	%rd29, %rd285, %rd286;
	@%p142 bra 	$L__BB0_340;
	bra.uni 	$L__BB0_333;

$L__BB0_340:
	add.s32 	%r2615, %r1507, 1;
	setp.lt.s32 	%p239, %r638, %r2615;
	setp.eq.s32 	%p240, %r433, %r46;
	setp.gt.s32 	%p241, %r638, -1;
	and.pred  	%p242, %p240, %p241;
	and.pred  	%p243, %p239, %p242;
	@%p243 bra 	$L__BB0_342;
	bra.uni 	$L__BB0_341;

$L__BB0_342:
	ld.global.f32 	%f430, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f430;
  mov.b32 %r7116, {low,low};}

	// end inline asm
	ld.global.f32 	%f431, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f431;
  mov.b32 %r7117, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_343;

$L__BB0_333:
	add.s32 	%r2415, %r1507, 1;
	setp.lt.s32 	%p234, %r638, %r2415;
	setp.gt.s32 	%p235, %r638, -1;
	and.pred  	%p236, %p235, %p234;
	@%p236 bra 	$L__BB0_335;
	bra.uni 	$L__BB0_334;

$L__BB0_335:
	ld.global.f32 	%f424, [%rd29];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f424;
  mov.b32 %r7114, {low,low};}

	// end inline asm
	ld.global.f32 	%f425, [%rd29+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f425;
  mov.b32 %r7115, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_336;

$L__BB0_341:
	mov.f32 	%f429, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7116, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f429;
  cvt.rn.f16.f32 high, %f429;
  mov.b32 %r7117, {low,high};}

	// end inline asm

$L__BB0_343:
	mov.u32 	%r2623, 0;
	mov.u32 	%r2634, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2621,%r6954,%r2623,%r2043,%r2634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2626,%r7116,%r2621;
}
	// end inline asm
	mov.u32 	%r2632, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2630,%r6954,%r2632,%r2043,%r2634;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2635,%r7117,%r2630;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7119,%r2626,%r2635;
}
	// end inline asm
	setp.eq.s32 	%p244, %r434, 0;
	mov.u32 	%r7118, %r7119;
	@%p244 bra 	$L__BB0_345;

	mov.f32 	%f433, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f433;
  cvt.rn.f16.f32 high, %f433;
  mov.b32 %r7118, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7197,%r7197,%r7118;
}
	// end inline asm
	setp.eq.s32 	%p245, %r434, 1;
	@%p245 bra 	$L__BB0_347;

	mov.f32 	%f435, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f435;
  cvt.rn.f16.f32 high, %f435;
  mov.b32 %r7119, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7195,%r7195,%r7119;
}
	// end inline asm
	mov.u32 	%r2656, 2;
	mov.u32 	%r2667, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2654,%r6954,%r2656,%r2043,%r2667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2659,%r7116,%r2654;
}
	// end inline asm
	mov.u32 	%r2665, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2663,%r6954,%r2665,%r2043,%r2667;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2668,%r7117,%r2663;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7121,%r2659,%r2668;
}
	// end inline asm
	mov.u32 	%r7120, %r7121;
	@%p244 bra 	$L__BB0_349;

	mov.f32 	%f437, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f437;
  cvt.rn.f16.f32 high, %f437;
  mov.b32 %r7120, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7196,%r7196,%r7120;
}
	// end inline asm
	@%p245 bra 	$L__BB0_351;

	mov.f32 	%f439, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f439;
  cvt.rn.f16.f32 high, %f439;
  mov.b32 %r7121, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7194,%r7194,%r7121;
}
	// end inline asm
	mov.u32 	%r2689, 4;
	mov.u32 	%r2700, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2687,%r6954,%r2689,%r2043,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2692,%r7116,%r2687;
}
	// end inline asm
	mov.u32 	%r2698, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2696,%r6954,%r2698,%r2043,%r2700;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2701,%r7117,%r2696;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7123,%r2692,%r2701;
}
	// end inline asm
	mov.u32 	%r7122, %r7123;
	@%p244 bra 	$L__BB0_353;

	mov.f32 	%f441, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f441;
  cvt.rn.f16.f32 high, %f441;
  mov.b32 %r7122, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7193,%r7193,%r7122;
}
	// end inline asm
	@%p245 bra 	$L__BB0_355;

	mov.f32 	%f443, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f443;
  cvt.rn.f16.f32 high, %f443;
  mov.b32 %r7123, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7192,%r7192,%r7123;
}
	// end inline asm
	mov.u32 	%r2722, 6;
	mov.u32 	%r2733, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2720,%r6954,%r2722,%r2043,%r2733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2725,%r7116,%r2720;
}
	// end inline asm
	mov.u32 	%r2731, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2729,%r6954,%r2731,%r2043,%r2733;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2734,%r7117,%r2729;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7125,%r2725,%r2734;
}
	// end inline asm
	mov.u32 	%r7124, %r7125;
	@%p244 bra 	$L__BB0_357;

	mov.f32 	%f445, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f445;
  cvt.rn.f16.f32 high, %f445;
  mov.b32 %r7124, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7191,%r7191,%r7124;
}
	// end inline asm
	@%p245 bra 	$L__BB0_359;

	mov.f32 	%f447, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f447;
  cvt.rn.f16.f32 high, %f447;
  mov.b32 %r7125, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r7125;
}
	// end inline asm
	mov.u32 	%r2755, 8;
	mov.u32 	%r2766, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2753,%r6954,%r2755,%r2043,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2758,%r7116,%r2753;
}
	// end inline asm
	mov.u32 	%r2764, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2762,%r6954,%r2764,%r2043,%r2766;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2767,%r7117,%r2762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7127,%r2758,%r2767;
}
	// end inline asm
	mov.u32 	%r7126, %r7127;
	@%p244 bra 	$L__BB0_361;

	mov.f32 	%f449, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f449;
  cvt.rn.f16.f32 high, %f449;
  mov.b32 %r7126, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7190,%r7190,%r7126;
}
	// end inline asm
	@%p245 bra 	$L__BB0_363;

	mov.f32 	%f451, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f451;
  cvt.rn.f16.f32 high, %f451;
  mov.b32 %r7127, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7188,%r7188,%r7127;
}
	// end inline asm
	mov.u32 	%r2788, 10;
	mov.u32 	%r2799, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2786,%r6954,%r2788,%r2043,%r2799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2791,%r7116,%r2786;
}
	// end inline asm
	mov.u32 	%r2797, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2795,%r6954,%r2797,%r2043,%r2799;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2800,%r7117,%r2795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7129,%r2791,%r2800;
}
	// end inline asm
	mov.u32 	%r7128, %r7129;
	@%p244 bra 	$L__BB0_365;

	mov.f32 	%f453, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f453;
  cvt.rn.f16.f32 high, %f453;
  mov.b32 %r7128, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7187,%r7187,%r7128;
}
	// end inline asm
	@%p245 bra 	$L__BB0_367;

	mov.f32 	%f455, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f455;
  cvt.rn.f16.f32 high, %f455;
  mov.b32 %r7129, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7184,%r7184,%r7129;
}
	// end inline asm
	mov.u32 	%r2821, 12;
	mov.u32 	%r2832, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2819,%r6954,%r2821,%r2043,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2824,%r7116,%r2819;
}
	// end inline asm
	mov.u32 	%r2830, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2828,%r6954,%r2830,%r2043,%r2832;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2833,%r7117,%r2828;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7131,%r2824,%r2833;
}
	// end inline asm
	mov.u32 	%r7130, %r7131;
	@%p244 bra 	$L__BB0_369;

	mov.f32 	%f457, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f457;
  cvt.rn.f16.f32 high, %f457;
  mov.b32 %r7130, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7186,%r7186,%r7130;
}
	// end inline asm
	@%p245 bra 	$L__BB0_371;

	mov.f32 	%f459, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f459;
  cvt.rn.f16.f32 high, %f459;
  mov.b32 %r7131, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7183,%r7183,%r7131;
}
	// end inline asm
	mov.u32 	%r2854, 14;
	mov.u32 	%r2865, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2852,%r6954,%r2854,%r2043,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2857,%r7116,%r2852;
}
	// end inline asm
	mov.u32 	%r2863, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2861,%r6954,%r2863,%r2043,%r2865;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2866,%r7117,%r2861;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7133,%r2857,%r2866;
}
	// end inline asm
	mov.u32 	%r7132, %r7133;
	@%p244 bra 	$L__BB0_373;

	mov.f32 	%f461, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f461;
  cvt.rn.f16.f32 high, %f461;
  mov.b32 %r7132, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7181,%r7181,%r7132;
}
	// end inline asm
	@%p245 bra 	$L__BB0_375;

	mov.f32 	%f463, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f463;
  cvt.rn.f16.f32 high, %f463;
  mov.b32 %r7133, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7178,%r7178,%r7133;
}
	// end inline asm
	mov.u32 	%r2887, 16;
	mov.u32 	%r2898, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2885,%r6954,%r2887,%r2043,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2890,%r7116,%r2885;
}
	// end inline asm
	mov.u32 	%r2896, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2894,%r6954,%r2896,%r2043,%r2898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2899,%r7117,%r2894;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7135,%r2890,%r2899;
}
	// end inline asm
	mov.u32 	%r7134, %r7135;
	@%p244 bra 	$L__BB0_377;

	mov.f32 	%f465, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f465;
  cvt.rn.f16.f32 high, %f465;
  mov.b32 %r7134, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7180,%r7180,%r7134;
}
	// end inline asm
	@%p245 bra 	$L__BB0_379;

	mov.f32 	%f467, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f467;
  cvt.rn.f16.f32 high, %f467;
  mov.b32 %r7135, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7177,%r7177,%r7135;
}
	// end inline asm
	mov.u32 	%r2920, 18;
	mov.u32 	%r2931, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2918,%r6954,%r2920,%r2043,%r2931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2923,%r7116,%r2918;
}
	// end inline asm
	mov.u32 	%r2929, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2927,%r6954,%r2929,%r2043,%r2931;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2932,%r7117,%r2927;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7137,%r2923,%r2932;
}
	// end inline asm
	mov.u32 	%r7136, %r7137;
	@%p244 bra 	$L__BB0_381;

	mov.f32 	%f469, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f469;
  cvt.rn.f16.f32 high, %f469;
  mov.b32 %r7136, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7175,%r7175,%r7136;
}
	// end inline asm
	@%p245 bra 	$L__BB0_383;

	mov.f32 	%f471, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f471;
  cvt.rn.f16.f32 high, %f471;
  mov.b32 %r7137, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r7137;
}
	// end inline asm
	mov.u32 	%r2953, 20;
	mov.u32 	%r2964, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2951,%r6954,%r2953,%r2043,%r2964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2956,%r7116,%r2951;
}
	// end inline asm
	mov.u32 	%r2962, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2960,%r6954,%r2962,%r2043,%r2964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2965,%r7117,%r2960;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7139,%r2956,%r2965;
}
	// end inline asm
	mov.u32 	%r7138, %r7139;
	@%p244 bra 	$L__BB0_385;

	mov.f32 	%f473, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f473;
  cvt.rn.f16.f32 high, %f473;
  mov.b32 %r7138, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7173,%r7173,%r7138;
}
	// end inline asm
	@%p245 bra 	$L__BB0_387;

	mov.f32 	%f475, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f475;
  cvt.rn.f16.f32 high, %f475;
  mov.b32 %r7139, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7171,%r7171,%r7139;
}
	// end inline asm
	mov.u32 	%r2986, 22;
	mov.u32 	%r2997, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2984,%r6954,%r2986,%r2043,%r2997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2989,%r7116,%r2984;
}
	// end inline asm
	mov.u32 	%r2995, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2993,%r6954,%r2995,%r2043,%r2997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2998,%r7117,%r2993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7141,%r2989,%r2998;
}
	// end inline asm
	mov.u32 	%r7140, %r7141;
	@%p244 bra 	$L__BB0_389;

	mov.f32 	%f477, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f477;
  cvt.rn.f16.f32 high, %f477;
  mov.b32 %r7140, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7169,%r7169,%r7140;
}
	// end inline asm
	@%p245 bra 	$L__BB0_391;

	mov.f32 	%f479, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f479;
  cvt.rn.f16.f32 high, %f479;
  mov.b32 %r7141, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r7141;
}
	// end inline asm
	mov.u32 	%r3019, 24;
	mov.u32 	%r3030, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3017,%r6954,%r3019,%r2043,%r3030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3022,%r7116,%r3017;
}
	// end inline asm
	mov.u32 	%r3028, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3026,%r6954,%r3028,%r2043,%r3030;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3031,%r7117,%r3026;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7143,%r3022,%r3031;
}
	// end inline asm
	mov.u32 	%r7142, %r7143;
	@%p244 bra 	$L__BB0_393;

	mov.f32 	%f481, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f481;
  cvt.rn.f16.f32 high, %f481;
  mov.b32 %r7142, {low,high};}

	// end inline asm

$L__BB0_393:
	// begin inline asm
	{add.f16x2 %r7168,%r7168,%r7142;
}
	// end inline asm
	@%p245 bra 	$L__BB0_395;

	mov.f32 	%f483, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f483;
  cvt.rn.f16.f32 high, %f483;
  mov.b32 %r7143, {low,high};}

	// end inline asm

$L__BB0_395:
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r7143;
}
	// end inline asm
	mov.u32 	%r3052, 26;
	mov.u32 	%r3063, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3050,%r6954,%r3052,%r2043,%r3063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3055,%r7116,%r3050;
}
	// end inline asm
	mov.u32 	%r3061, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3059,%r6954,%r3061,%r2043,%r3063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3064,%r7117,%r3059;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7145,%r3055,%r3064;
}
	// end inline asm
	mov.u32 	%r7144, %r7145;
	@%p244 bra 	$L__BB0_397;

	mov.f32 	%f485, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f485;
  cvt.rn.f16.f32 high, %f485;
  mov.b32 %r7144, {low,high};}

	// end inline asm

$L__BB0_397:
	// begin inline asm
	{add.f16x2 %r7163,%r7163,%r7144;
}
	// end inline asm
	@%p245 bra 	$L__BB0_399;

	mov.f32 	%f487, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f487;
  cvt.rn.f16.f32 high, %f487;
  mov.b32 %r7145, {low,high};}

	// end inline asm

$L__BB0_399:
	// begin inline asm
	{add.f16x2 %r7160,%r7160,%r7145;
}
	// end inline asm
	mov.u32 	%r3085, 28;
	mov.u32 	%r3096, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3083,%r6954,%r3085,%r2043,%r3096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3088,%r7116,%r3083;
}
	// end inline asm
	mov.u32 	%r3094, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3092,%r6954,%r3094,%r2043,%r3096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3097,%r7117,%r3092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7147,%r3088,%r3097;
}
	// end inline asm
	mov.u32 	%r7146, %r7147;
	@%p244 bra 	$L__BB0_401;

	mov.f32 	%f489, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f489;
  cvt.rn.f16.f32 high, %f489;
  mov.b32 %r7146, {low,high};}

	// end inline asm

$L__BB0_401:
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r7146;
}
	// end inline asm
	@%p245 bra 	$L__BB0_403;

	mov.f32 	%f491, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f491;
  cvt.rn.f16.f32 high, %f491;
  mov.b32 %r7147, {low,high};}

	// end inline asm

$L__BB0_403:
	// begin inline asm
	{add.f16x2 %r7159,%r7159,%r7147;
}
	// end inline asm
	mov.u32 	%r3127, 31;
	mov.u32 	%r3118, 30;
	mov.u32 	%r3129, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3116,%r6954,%r3118,%r2043,%r3129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3121,%r7116,%r3116;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3125,%r6954,%r3127,%r2043,%r3129;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3130,%r7117,%r3125;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7149,%r3121,%r3130;
}
	// end inline asm
	mov.u32 	%r7148, %r7149;
	@%p244 bra 	$L__BB0_405;

	mov.f32 	%f493, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f493;
  cvt.rn.f16.f32 high, %f493;
  mov.b32 %r7148, {low,high};}

	// end inline asm

$L__BB0_405:
	// begin inline asm
	{add.f16x2 %r7155,%r7155,%r7148;
}
	// end inline asm
	@%p245 bra 	$L__BB0_407;

	mov.f32 	%f495, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f495;
  cvt.rn.f16.f32 high, %f495;
  mov.b32 %r7149, {low,high};}

	// end inline asm

$L__BB0_407:
	// begin inline asm
	{add.f16x2 %r7153,%r7153,%r7149;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_334:
	mov.f32 	%f423, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7114, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f423;
  cvt.rn.f16.f32 high, %f423;
  mov.b32 %r7115, {low,high};}

	// end inline asm

$L__BB0_336:
	setp.eq.s32 	%p237, %r637, %r1489;
	@%p237 bra 	$L__BB0_339;
	bra.uni 	$L__BB0_337;

$L__BB0_339:
	mov.u32 	%r2609, 0;
	// begin inline asm
	{mul.f16x2 %r2517,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7197,%r7197,%r2517;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2523,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r7185,%r2523;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2529,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r7187,%r2529;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2535,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r7167,%r2535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2541,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7169,%r7169,%r2541;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2547,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r7154,%r2547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2553,%r7115,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7191,%r7191,%r2553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2559,%r7115,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7172,%r7172,%r2559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2565,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7195,%r7195,%r2565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2571,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7182,%r7182,%r2571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2577,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7184,%r7184,%r2577;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2583,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7164,%r7164,%r2583;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2589,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r2589;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2595,%r7114,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r7152,%r2595;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2601,%r7115,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r2601;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2607,%r7115,%r2609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r2607;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_337:
	add.s32 	%r2420, %r1489, -2;
	setp.ne.s32 	%p238, %r637, %r2420;
	@%p238 bra 	$L__BB0_408;

	mov.u32 	%r2513, 0;
	// begin inline asm
	{mul.f16x2 %r2421,%r7114,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r7175,%r2421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2427,%r7114,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7157,%r7157,%r2427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2433,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r7193,%r2433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2439,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7179,%r7179,%r2439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2445,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r7181,%r2445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2451,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7161,%r7161,%r2451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2457,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r7163,%r2457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2463,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7151,%r7151,%r2463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2469,%r7114,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r2469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2475,%r7114,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r7156,%r2475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2481,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7192,%r7192,%r2481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2487,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7176,%r7176,%r2487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2493,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r7178,%r2493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2499,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r7158,%r2499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2505,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r7160,%r2505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2511,%r7115,%r2513;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7150,%r7150,%r2511;
}
	// end inline asm

$L__BB0_408:
	setp.lt.s32 	%p276, %r41, 1;
	mov.u32 	%r7009, %r1964;
	mov.u32 	%r7010, %r1964;
	mov.u32 	%r7200, %r1964;
	mov.u32 	%r7201, %r1964;
	mov.u32 	%r7202, %r1964;
	mov.u32 	%r7036, %r1964;
	mov.u32 	%r7204, %r1964;
	mov.u32 	%r7044, %r1964;
	mov.u32 	%r7206, %r1964;
	mov.u32 	%r7207, %r1964;
	@%p276 bra 	$L__BB0_410;

	add.s32 	%r6871, %r69, %r69;
	mul.lo.s32 	%r3149, %r1480, 320;
	add.s32 	%r3151, %r41, -1;
	mul.lo.s32 	%r3153, %r42, 320;
	mad.lo.s32 	%r3154, %r3149, %r3151, %r3153;
	add.s32 	%r3157, %r6871, -64;
	mad.lo.s32 	%r3162, %r3157, %r1952, %r1949;
	add.s32 	%r3163, %r3154, %r3162;
	shl.b32 	%r3164, %r3163, 2;
	mov.u32 	%r3165, _ZN6kernel5shmemE;
	add.s32 	%r3166, %r3165, %r3164;
	shl.b32 	%r3167, %r46, 4;
	add.s32 	%r3168, %r3166, %r3167;
	ld.shared.v4.u32 	{%r7044, %r7036, %r7010, %r7009}, [%r3168];
	shl.b32 	%r3173, %r46, 3;
	add.s32 	%r3174, %r3166, %r3173;
	ld.shared.v2.u32 	{%r7204, %r7202}, [%r3174+512];
	ld.shared.v4.u32 	{%r7207, %r7206, %r7201, %r7200}, [%r3168+768];

$L__BB0_410:
	setp.lt.s32 	%p277, %r42, 1;
	mov.u32 	%r7208, %r1964;
	mov.u32 	%r7209, %r1964;
	mov.u32 	%r7210, %r1964;
	mov.u32 	%r7211, %r1964;
	mov.u32 	%r7212, %r1964;
	mov.u32 	%r7213, %r1964;
	mov.u32 	%r7214, %r1964;
	mov.u32 	%r7215, %r1964;
	mov.u32 	%r7216, %r1964;
	mov.u32 	%r7217, %r1964;
	mov.u32 	%r7218, %r1964;
	mov.u32 	%r7219, %r1964;
	@%p277 bra 	$L__BB0_413;

	not.b32 	%r6870, %r41;
	add.s32 	%r6869, %r1479, %r6870;
	mad.lo.s32 	%r3188, %r6869, 384, %r1955;
	add.s32 	%r3190, %r42, -1;
	mad.lo.s32 	%r3193, %r1950, %r3190, %r3188;
	add.s32 	%r3199, %r3193, %r1953;
	shl.b32 	%r3200, %r3199, 2;
	mov.u32 	%r3201, _ZN6kernel5shmemE;
	add.s32 	%r3202, %r3201, %r3200;
	shl.b32 	%r3203, %r46, 4;
	add.s32 	%r3204, %r3202, %r3203;
	ld.shared.v4.u32 	{%r7219, %r7218, %r7216, %r7214}, [%r3204];
	shl.b32 	%r3209, %r46, 3;
	add.s32 	%r3210, %r3202, %r3209;
	ld.shared.v2.u32 	{%r7217, %r7215}, [%r3210+512];
	ld.shared.v4.u32 	{%r7213, %r7212, %r7210, %r7208}, [%r3204+768];
	mov.u32 	%r7209, %r1964;
	mov.u32 	%r7211, %r1964;
	@%p276 bra 	$L__BB0_413;

	add.s32 	%r6857, %r3210, 512;
	ld.shared.v2.u32 	{%r7211, %r7209}, [%r6857+768];

$L__BB0_413:
	setp.eq.s32 	%p279, %r41, 0;
	@%p279 bra 	$L__BB0_418;

	setp.eq.s32 	%p280, %r42, %r1952;
	@%p280 bra 	$L__BB0_416;

	sub.s32 	%r3223, %r1479, %r41;
	mul.lo.s32 	%r3226, %r69, %r42;
	mad.lo.s32 	%r3227, %r3223, 384, %r3226;
	mad.lo.s32 	%r3230, %r1950, %r1952, %r3227;
	mad.lo.s32 	%r3233, %r1948, %r1947, %r3230;
	shl.b32 	%r3234, %r3233, 2;
	mov.u32 	%r3235, _ZN6kernel5shmemE;
	add.s32 	%r3236, %r3235, %r3234;
	shl.b32 	%r3237, %r46, 4;
	add.s32 	%r3238, %r3236, %r3237;
	ld.shared.v4.u32 	{%r7233, %r7232, %r7235, %r7234}, [%r3238];

$L__BB0_416:
	shl.b32 	%r3244, %r42, 8;
	shl.b32 	%r3248, %r1480, 8;
	or.b32  	%r3249, %r3248, 128;
	add.s32 	%r3251, %r41, -1;
	mad.lo.s32 	%r3252, %r3249, %r3251, %r1955;
	add.s32 	%r3253, %r3252, %r3244;
	shl.b32 	%r3254, %r3253, 2;
	mov.u32 	%r3255, _ZN6kernel5shmemE;
	add.s32 	%r3256, %r3255, %r3254;
	setp.ne.s32 	%p281, %r42, %r1952;
	shl.b32 	%r3258, %r46, 4;
	add.s32 	%r896, %r3256, %r3258;
	ld.shared.v4.u32 	{%r7226, %r7224, %r7227, %r7225}, [%r896];
	ld.shared.v4.u32 	{%r7231, %r7230, %r7229, %r7228}, [%r896+512];
	@%p281 bra 	$L__BB0_418;

	ld.shared.v4.u32 	{%r7233, %r7232, %r7235, %r7234}, [%r896+1024];

$L__BB0_418:
	setp.eq.s32 	%p282, %r42, 0;
	@%p282 bra 	$L__BB0_421;

	not.b32 	%r6868, %r41;
	add.s32 	%r6867, %r1479, %r6868;
	mul.lo.s32 	%r3274, %r69, %r42;
	sub.s32 	%r3275, %r3274, %r69;
	mad.lo.s32 	%r3279, %r6867, 384, %r3275;
	mad.lo.s32 	%r3282, %r1950, %r1952, %r3279;
	mad.lo.s32 	%r3285, %r1948, %r1947, %r3282;
	shl.b32 	%r3286, %r3285, 2;
	mov.u32 	%r3287, _ZN6kernel5shmemE;
	add.s32 	%r3288, %r3287, %r3286;
	shl.b32 	%r3289, %r46, 4;
	add.s32 	%r921, %r3288, %r3289;
	ld.shared.v4.u32 	{%r7249, %r7248, %r7251, %r7250}, [%r921];
	ld.shared.v4.u32 	{%r7247, %r7245, %r7243, %r7242}, [%r921+512];
	ld.shared.v4.u32 	{%r7246, %r7244, %r7241, %r7239}, [%r921+1024];
	@%p279 bra 	$L__BB0_421;

	ld.shared.v4.u32 	{%r7237, %r7236, %r7240, %r7238}, [%r921+1536];

$L__BB0_421:
	mov.u32 	%r3311, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3307,%r7084,%r435,%r2043,%r3311;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3307;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7084;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3314, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3315,%r7085,%r3314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3318,%r6955,%r3315;
}
	// end inline asm
	@%p28 bra 	$L__BB0_423;
	bra.uni 	$L__BB0_422;

$L__BB0_423:
	// begin inline asm
	{neg.f16x2 %r7252,%r7197;
}
	// end inline asm
	bra.uni 	$L__BB0_424;

$L__BB0_422:
	// begin inline asm
	{mul.f16x2 %r7252,%r6956,%r3315;
}
	// end inline asm

$L__BB0_424:
	mov.u32 	%r3331, 31;
	mov.u32 	%r3354, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3329,%r7252,%r3331,%r2043,%r3354;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3334,%r3318,%r3329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3337,%r7083,%r7082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r3337,%r3334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r7086,%r3340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3346,%r7197,%r3343;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3350,%r7079,%r435,%r2043,%r3354;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3350;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7079;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3357, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3358,%r7080,%r3357;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3361,%r6955,%r3358;
}
	// end inline asm
	mov.u32 	%r7253, %r7196;
	@%p28 bra 	$L__BB0_426;

	// begin inline asm
	{mul.f16x2 %r7253,%r6956,%r3358;
}
	// end inline asm

$L__BB0_426:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3372,%r7253,%r3331,%r2043,%r3354;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3377,%r3361,%r3372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3380,%r7083,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3383,%r3377,%r3380;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3386,%r7081,%r3383;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3389,%r7196,%r3386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3392,%r7084,%r7085;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3395,%r6959,%r3392;
}
	// end inline asm
	@%p28 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7254,%r7195;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7254,%r6960,%r3392;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3408, 31;
	mov.u32 	%r3410, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3406,%r7254,%r3408,%r2043,%r3410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3411,%r3395,%r3406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3414,%r7076,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3417,%r3414,%r3411;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3420,%r7077,%r3417;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3423,%r7195,%r3420;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3426,%r7079,%r7080;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3429,%r6959,%r3426;
}
	// end inline asm
	mov.u32 	%r7255, %r7194;
	@%p28 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7255,%r6960,%r3426;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3438,%r7255,%r3408,%r2043,%r3410;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3443,%r3429,%r3438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3446,%r7076,%r7073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3449,%r3443,%r3446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3452,%r7074,%r3449;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3455,%r7194,%r3452;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3459,%r7070,%r435,%r2043,%r3410;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3459;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7070;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3466, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3467,%r7071,%r3466;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3470,%r6955,%r3467;
}
	// end inline asm
	@%p28 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7256,%r7193;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7256,%r6956,%r3467;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3485, 31;
	mov.u32 	%r3487, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3483,%r7256,%r3485,%r2043,%r3487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3488,%r3470,%r3483;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3491,%r7069,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3494,%r3491,%r3488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3497,%r7072,%r3494;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3500,%r7193,%r3497;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3503,%r7070,%r7071;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3506,%r6959,%r3503;
}
	// end inline asm
	@%p28 bra 	$L__BB0_436;
	bra.uni 	$L__BB0_435;

$L__BB0_436:
	// begin inline asm
	{neg.f16x2 %r7257,%r7192;
}
	// end inline asm
	bra.uni 	$L__BB0_437;

$L__BB0_435:
	// begin inline asm
	{mul.f16x2 %r7257,%r6960,%r3503;
}
	// end inline asm

$L__BB0_437:
	mov.u32 	%r3519, 31;
	mov.u32 	%r3542, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3517,%r7257,%r3519,%r2043,%r3542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3522,%r3506,%r3517;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3525,%r7067,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3528,%r3525,%r3522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3531,%r7068,%r3528;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3534,%r7192,%r3531;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3538,%r7065,%r435,%r2043,%r3542;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3538;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7065;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3545, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3546,%r7066,%r3545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3549,%r6955,%r3546;
}
	// end inline asm
	@%p28 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7258,%r7191;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7258,%r6956,%r3546;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3564, 31;
	mov.u32 	%r3587, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3562,%r7258,%r3564,%r2043,%r3587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3567,%r3549,%r3562;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3570,%r7064,%r7251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3573,%r3570,%r3567;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3576,%r7219,%r3573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3579,%r7191,%r3576;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3583,%r7060,%r435,%r2043,%r3587;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3583;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7060;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3590, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3591,%r7061,%r3590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3594,%r6955,%r3591;
}
	// end inline asm
	mov.u32 	%r7259, %r7190;
	@%p28 bra 	$L__BB0_442;

	// begin inline asm
	{mul.f16x2 %r7259,%r6956,%r3591;
}
	// end inline asm

$L__BB0_442:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3605,%r7259,%r3564,%r2043,%r3587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3610,%r3594,%r3605;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3613,%r7064,%r7082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3616,%r3610,%r3613;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3619,%r7062,%r3616;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3622,%r7190,%r3619;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3625,%r7065,%r7066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3628,%r6959,%r3625;
}
	// end inline asm
	@%p28 bra 	$L__BB0_444;
	bra.uni 	$L__BB0_443;

$L__BB0_444:
	// begin inline asm
	{neg.f16x2 %r7260,%r7189;
}
	// end inline asm
	bra.uni 	$L__BB0_445;

$L__BB0_443:
	// begin inline asm
	{mul.f16x2 %r7260,%r6960,%r3625;
}
	// end inline asm

$L__BB0_445:
	mov.u32 	%r3641, 31;
	mov.u32 	%r3643, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3639,%r7260,%r3641,%r2043,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3644,%r3628,%r3639;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3647,%r7059,%r7250;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3650,%r3647,%r3644;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3653,%r7218,%r3650;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3656,%r7189,%r3653;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3659,%r7060,%r7061;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3662,%r6959,%r3659;
}
	// end inline asm
	mov.u32 	%r7261, %r7188;
	@%p28 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7261,%r6960,%r3659;
}
	// end inline asm

$L__BB0_447:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3671,%r7261,%r3641,%r2043,%r3643;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3676,%r3662,%r3671;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3679,%r7059,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3682,%r3676,%r3679;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3685,%r7057,%r3682;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3688,%r7188,%r3685;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3692,%r7054,%r435,%r2043,%r3643;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3692;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7054;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3699, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3700,%r7055,%r3699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3703,%r6955,%r3700;
}
	// end inline asm
	@%p28 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7262,%r7187;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7262,%r6956,%r3700;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r3718, 31;
	mov.u32 	%r3741, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3716,%r7262,%r3718,%r2043,%r3741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3721,%r3703,%r3716;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3724,%r7053,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3727,%r3724,%r3721;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3730,%r530,%r3727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7112,%r7187,%r3730;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3737,%r7050,%r435,%r2043,%r3741;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3737;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7050;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3744, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3745,%r7051,%r3744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3748,%r6955,%r3745;
}
	// end inline asm
	mov.u32 	%r7263, %r7186;
	@%p28 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7263,%r6956,%r3745;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3759,%r7263,%r3718,%r2043,%r3741;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3764,%r3748,%r3759;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3767,%r7053,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3770,%r3764,%r3767;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3773,%r526,%r3770;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7110,%r7186,%r3773;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3779,%r7055,%r7085;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3782,%r7051,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3785,%r3779,%r3782;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3788,%r7049,%r3785;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3791,%r7185,%r3788;
}
	// end inline asm
	selp.b32 	%r1021, %r7185, %r3791, %p28;
	// begin inline asm
	{sub.f16x2 %r3794,%r7054,%r7055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3797,%r6959,%r3794;
}
	// end inline asm
	@%p28 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7264,%r7184;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7264,%r6960,%r3794;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r3810, 31;
	mov.u32 	%r3812, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3808,%r7264,%r3810,%r2043,%r3812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3813,%r3797,%r3808;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3816,%r7047,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3819,%r3816,%r3813;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3822,%r522,%r3819;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7184,%r3822;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3828,%r7050,%r7051;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3831,%r6959,%r3828;
}
	// end inline asm
	mov.u32 	%r7265, %r7183;
	@%p28 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7265,%r6960,%r3828;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3840,%r7265,%r3810,%r2043,%r3812;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3845,%r3831,%r3840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3848,%r7047,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3851,%r3845,%r3848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3854,%r520,%r3851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7183,%r3854;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3860,%r7054,%r7084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3863,%r7050,%r7060;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3866,%r3860,%r3863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3869,%r7045,%r3866;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3872,%r7182,%r3869;
}
	// end inline asm
	selp.b32 	%r1033, %r7182, %r3872, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r3876,%r7042,%r435,%r2043,%r3812;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3876;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7042;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3883, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3884,%r7043,%r3883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3887,%r6955,%r3884;
}
	// end inline asm
	@%p28 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7266,%r7181;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7266,%r6956,%r3884;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r3902, 31;
	mov.u32 	%r3925, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3900,%r7266,%r3902,%r2043,%r3925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3905,%r3887,%r3900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3908,%r7041,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3911,%r3908,%r3905;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3914,%r518,%r3911;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7181,%r3914;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3921,%r7038,%r435,%r2043,%r3925;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3921;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7038;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3928, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3929,%r7039,%r3928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3932,%r6955,%r3929;
}
	// end inline asm
	mov.u32 	%r7267, %r7180;
	@%p28 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7267,%r6956,%r3929;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3943,%r7267,%r3902,%r2043,%r3925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3948,%r3932,%r3943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3951,%r7041,%r7069;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3954,%r3948,%r3951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3957,%r7040,%r3954;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3960,%r7180,%r3957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3963,%r7043,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3966,%r7039,%r7051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3969,%r3963,%r3966;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3972,%r7037,%r3969;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3975,%r7179,%r3972;
}
	// end inline asm
	selp.b32 	%r1045, %r7179, %r3975, %p28;
	// begin inline asm
	{sub.f16x2 %r3978,%r7042,%r7043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3981,%r6959,%r3978;
}
	// end inline asm
	@%p28 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7268,%r7178;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7268,%r6960,%r3978;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r3994, 31;
	mov.u32 	%r3996, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3992,%r7268,%r3994,%r2043,%r3996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3997,%r3981,%r3992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4000,%r7035,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4003,%r4000,%r3997;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4006,%r510,%r4003;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7107,%r7178,%r4006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4012,%r7038,%r7039;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4015,%r6959,%r4012;
}
	// end inline asm
	mov.u32 	%r7269, %r7177;
	@%p28 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7269,%r6960,%r4012;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4024,%r7269,%r3994,%r2043,%r3996;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4029,%r4015,%r4024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4032,%r7035,%r7067;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4035,%r4029,%r4032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4038,%r7034,%r4035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4041,%r7177,%r4038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4044,%r7042,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4047,%r7038,%r7050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4050,%r4044,%r4047;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4053,%r7033,%r4050;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4056,%r7176,%r4053;
}
	// end inline asm
	selp.b32 	%r1057, %r7176, %r4056, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4060,%r7031,%r435,%r2043,%r3996;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4060;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7031;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4067, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4068,%r7032,%r4067;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4071,%r6955,%r4068;
}
	// end inline asm
	@%p28 bra 	$L__BB0_469;
	bra.uni 	$L__BB0_468;

$L__BB0_469:
	// begin inline asm
	{neg.f16x2 %r7270,%r7175;
}
	// end inline asm
	bra.uni 	$L__BB0_470;

$L__BB0_468:
	// begin inline asm
	{mul.f16x2 %r7270,%r6956,%r4068;
}
	// end inline asm

$L__BB0_470:
	mov.u32 	%r4086, 31;
	mov.u32 	%r4088, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4084,%r7270,%r4086,%r2043,%r4088;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4089,%r4071,%r4084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4092,%r7235,%r7041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4095,%r4092,%r4089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4098,%r7207,%r4095;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4101,%r7175,%r4098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4104,%r7031,%r7032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4107,%r6959,%r4104;
}
	// end inline asm
	@%p28 bra 	$L__BB0_472;
	bra.uni 	$L__BB0_471;

$L__BB0_472:
	// begin inline asm
	{neg.f16x2 %r7271,%r7174;
}
	// end inline asm
	bra.uni 	$L__BB0_473;

$L__BB0_471:
	// begin inline asm
	{mul.f16x2 %r7271,%r6960,%r4104;
}
	// end inline asm

$L__BB0_473:
	mov.u32 	%r4120, 31;
	mov.u32 	%r4143, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4118,%r7271,%r4120,%r2043,%r4143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4123,%r4107,%r4118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4126,%r7234,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4129,%r4126,%r4123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4132,%r7206,%r4129;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4135,%r7174,%r4132;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4139,%r7027,%r435,%r2043,%r4143;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4139;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7027;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4146, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4147,%r7028,%r4146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4150,%r6955,%r4147;
}
	// end inline asm
	mov.u32 	%r7272, %r7173;
	@%p28 bra 	$L__BB0_475;

	// begin inline asm
	{mul.f16x2 %r7272,%r6956,%r4147;
}
	// end inline asm

$L__BB0_475:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4161,%r7272,%r4120,%r2043,%r4143;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4166,%r4150,%r4161;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4169,%r7246,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4172,%r4166,%r4169;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4175,%r7217,%r4172;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7173,%r4175;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4181,%r7247,%r7066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4184,%r7028,%r7249;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4187,%r4181,%r4184;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4190,%r7216,%r4187;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4193,%r7172,%r4190;
}
	// end inline asm
	selp.b32 	%r1075, %r7172, %r4193, %p28;
	// begin inline asm
	{sub.f16x2 %r4196,%r7027,%r7028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4199,%r6959,%r4196;
}
	// end inline asm
	mov.u32 	%r7273, %r7171;
	@%p28 bra 	$L__BB0_477;

	// begin inline asm
	{mul.f16x2 %r7273,%r6960,%r4196;
}
	// end inline asm

$L__BB0_477:
	mov.u32 	%r4210, 31;
	mov.u32 	%r4248, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4208,%r7273,%r4210,%r2043,%r4248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4213,%r4199,%r4208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4216,%r7244,%r7059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4219,%r4213,%r4216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4222,%r7215,%r4219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7105,%r7171,%r4222;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4228,%r7245,%r7065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4231,%r7027,%r7248;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4234,%r4228,%r4231;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4237,%r7214,%r4234;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4240,%r7170,%r4237;
}
	// end inline asm
	selp.b32 	%r1081, %r7170, %r4240, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4244,%r7023,%r435,%r2043,%r4248;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4244;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7023;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4251, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4252,%r7024,%r4251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4255,%r6955,%r4252;
}
	// end inline asm
	@%p28 bra 	$L__BB0_479;
	bra.uni 	$L__BB0_478;

$L__BB0_479:
	// begin inline asm
	{neg.f16x2 %r7274,%r7169;
}
	// end inline asm
	bra.uni 	$L__BB0_480;

$L__BB0_478:
	// begin inline asm
	{mul.f16x2 %r7274,%r6956,%r4252;
}
	// end inline asm

$L__BB0_480:
	mov.u32 	%r4270, 31;
	mov.u32 	%r4293, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4268,%r7274,%r4270,%r2043,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4273,%r4255,%r4268;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4276,%r7022,%r7246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4279,%r4276,%r4273;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4282,%r7213,%r4279;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7104,%r7169,%r4282;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4289,%r7019,%r435,%r2043,%r4293;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4289;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7019;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4296, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4297,%r7020,%r4296;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4300,%r6955,%r4297;
}
	// end inline asm
	mov.u32 	%r7275, %r7168;
	@%p28 bra 	$L__BB0_482;

	// begin inline asm
	{mul.f16x2 %r7275,%r6956,%r4297;
}
	// end inline asm

$L__BB0_482:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4311,%r7275,%r4270,%r2043,%r4293;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4316,%r4300,%r4311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4319,%r7022,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r4316,%r4319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4325,%r7052,%r4322;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r7168,%r4325;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4331,%r7024,%r7055;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4334,%r7020,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4337,%r4331,%r4334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4340,%r492,%r4337;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4343,%r7167,%r4340;
}
	// end inline asm
	selp.b32 	%r7100, %r7167, %r4343, %p28;
	// begin inline asm
	{sub.f16x2 %r4346,%r7023,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4349,%r6959,%r4346;
}
	// end inline asm
	@%p28 bra 	$L__BB0_484;
	bra.uni 	$L__BB0_483;

$L__BB0_484:
	// begin inline asm
	{neg.f16x2 %r7276,%r7166;
}
	// end inline asm
	bra.uni 	$L__BB0_485;

$L__BB0_483:
	// begin inline asm
	{mul.f16x2 %r7276,%r6960,%r4346;
}
	// end inline asm

$L__BB0_485:
	mov.u32 	%r4362, 31;
	mov.u32 	%r4364, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4360,%r7276,%r4362,%r2043,%r4364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4365,%r4349,%r4360;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4368,%r7017,%r7244;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4371,%r4368,%r4365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4374,%r7212,%r4371;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r7166,%r4374;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4380,%r7019,%r7020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4383,%r6959,%r4380;
}
	// end inline asm
	mov.u32 	%r7277, %r7165;
	@%p28 bra 	$L__BB0_487;

	// begin inline asm
	{mul.f16x2 %r7277,%r6960,%r4380;
}
	// end inline asm

$L__BB0_487:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4392,%r7277,%r4362,%r2043,%r4364;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4397,%r4383,%r4392;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4400,%r7017,%r7047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4403,%r4397,%r4400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4406,%r7046,%r4403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7101,%r7165,%r4406;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4412,%r7023,%r7054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4415,%r7019,%r7027;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4418,%r4412,%r4415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4421,%r489,%r4418;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4424,%r7164,%r4421;
}
	// end inline asm
	selp.b32 	%r7099, %r7164, %r4424, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4428,%r7013,%r435,%r2043,%r4364;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4428;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7013;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4435, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4436,%r7014,%r4435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4439,%r6955,%r4436;
}
	// end inline asm
	@%p28 bra 	$L__BB0_489;
	bra.uni 	$L__BB0_488;

$L__BB0_489:
	// begin inline asm
	{neg.f16x2 %r7278,%r7163;
}
	// end inline asm
	bra.uni 	$L__BB0_490;

$L__BB0_488:
	// begin inline asm
	{mul.f16x2 %r7278,%r6956,%r4436;
}
	// end inline asm

$L__BB0_490:
	mov.u32 	%r4454, 31;
	mov.u32 	%r4477, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4452,%r7278,%r4454,%r2043,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4457,%r4439,%r4452;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4460,%r7231,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4463,%r4460,%r4457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4466,%r7044,%r4463;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r7163,%r4466;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4473,%r7011,%r435,%r2043,%r4477;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4473;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7011;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4480, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4481,%r7012,%r4480;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4484,%r6955,%r4481;
}
	// end inline asm
	mov.u32 	%r7279, %r7162;
	@%p28 bra 	$L__BB0_492;

	// begin inline asm
	{mul.f16x2 %r7279,%r6956,%r4481;
}
	// end inline asm

$L__BB0_492:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4495,%r7279,%r4454,%r2043,%r4477;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4500,%r4484,%r4495;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4503,%r7231,%r7041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4506,%r4500,%r4503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4509,%r7204,%r4506;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r7162,%r4509;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4515,%r7014,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4518,%r7012,%r7020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4521,%r4515,%r4518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4524,%r484,%r4521;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4527,%r7161,%r4524;
}
	// end inline asm
	selp.b32 	%r7094, %r7161, %r4527, %p28;
	// begin inline asm
	{sub.f16x2 %r4530,%r7013,%r7014;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4533,%r6959,%r4530;
}
	// end inline asm
	@%p28 bra 	$L__BB0_494;
	bra.uni 	$L__BB0_493;

$L__BB0_494:
	// begin inline asm
	{neg.f16x2 %r7280,%r7160;
}
	// end inline asm
	bra.uni 	$L__BB0_495;

$L__BB0_493:
	// begin inline asm
	{mul.f16x2 %r7280,%r6960,%r4530;
}
	// end inline asm

$L__BB0_495:
	mov.u32 	%r4546, 31;
	mov.u32 	%r4548, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4544,%r7280,%r4546,%r2043,%r4548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4549,%r4533,%r4544;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4552,%r7230,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4555,%r4552,%r4549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r7036,%r4555;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7097,%r7160,%r4558;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4564,%r7011,%r7012;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4567,%r6959,%r4564;
}
	// end inline asm
	mov.u32 	%r7281, %r7159;
	@%p28 bra 	$L__BB0_497;

	// begin inline asm
	{mul.f16x2 %r7281,%r6960,%r4564;
}
	// end inline asm

$L__BB0_497:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4576,%r7281,%r4546,%r2043,%r4548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4581,%r4567,%r4576;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4584,%r7230,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4587,%r4581,%r4584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4590,%r7202,%r4587;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7095,%r7159,%r4590;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4596,%r7013,%r7042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4599,%r7011,%r7019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4602,%r4596,%r4599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4605,%r483,%r4602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4608,%r7158,%r4605;
}
	// end inline asm
	selp.b32 	%r7093, %r7158, %r4608, %p28;
	// begin inline asm
	{sub.f16x2 %r4611,%r7229,%r7032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4614,%r7233,%r7012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4617,%r4611,%r4614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4620,%r7201,%r4617;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4623,%r7157,%r4620;
}
	// end inline asm
	selp.b32 	%r1130, %r7157, %r4623, %p28;
	// begin inline asm
	{sub.f16x2 %r4626,%r7228,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4629,%r7232,%r7011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4632,%r4626,%r4629;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4635,%r7200,%r4632;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4638,%r7156,%r4635;
}
	// end inline asm
	selp.b32 	%r1131, %r7156, %r4638, %p28;
	// begin inline asm
	{shfl.sync.idx.b32 %r4642,%r7005,%r435,%r2043,%r4548;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4642;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7005;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4649, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4650,%r7006,%r4649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4653,%r6955,%r4650;
}
	// end inline asm
	mov.u32 	%r7282, %r7155;
	@%p28 bra 	$L__BB0_499;

	// begin inline asm
	{mul.f16x2 %r7282,%r6956,%r4650;
}
	// end inline asm

$L__BB0_499:
	mov.u32 	%r4666, 31;
	mov.u32 	%r4668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4664,%r7282,%r4666,%r2043,%r4668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4669,%r4653,%r4664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4672,%r7240,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r4669,%r4672;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4678,%r7211,%r4675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r7155,%r4678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4684,%r7241,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4687,%r7006,%r7243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4690,%r4684,%r4687;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4693,%r7210,%r4690;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4696,%r7154,%r4693;
}
	// end inline asm
	selp.b32 	%r7090, %r7154, %r4696, %p28;
	// begin inline asm
	{sub.f16x2 %r4699,%r7005,%r7006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4702,%r6959,%r4699;
}
	// end inline asm
	mov.u32 	%r7283, %r7153;
	@%p28 bra 	$L__BB0_501;

	// begin inline asm
	{mul.f16x2 %r7283,%r6960,%r4699;
}
	// end inline asm

$L__BB0_501:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4711,%r7283,%r4666,%r2043,%r4668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4716,%r4702,%r4711;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4719,%r7238,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4722,%r4716,%r4719;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4725,%r7209,%r4722;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7091,%r7153,%r4725;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4731,%r7239,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4734,%r7005,%r7242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4737,%r4731,%r4734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4740,%r7208,%r4737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4743,%r7152,%r4740;
}
	// end inline asm
	selp.b32 	%r7089, %r7152, %r4743, %p28;
	// begin inline asm
	{sub.f16x2 %r4746,%r7226,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4749,%r7227,%r7006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4752,%r4746,%r4749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4755,%r7010,%r4752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4758,%r7151,%r4755;
}
	// end inline asm
	selp.b32 	%r7088, %r7151, %r4758, %p28;
	// begin inline asm
	{sub.f16x2 %r4761,%r7224,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4764,%r7225,%r7005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4767,%r4761,%r4764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4770,%r7009,%r4767;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4773,%r7150,%r4770;
}
	// end inline asm
	selp.b32 	%r7087, %r7150, %r4773, %p28;
	bar.sync 	0;
	ld.param.u64 	%rd288, [%rd1+184];
	cvta.to.global.u64 	%rd30, %rd288;
	add.s32 	%r4778, %r1493, -2;
	setp.lt.s32 	%p317, %r636, %r4778;
	add.s32 	%r4779, %r1494, 3;
	setp.ge.s32 	%p318, %r636, %r4779;
	or.pred  	%p319, %p317, %p318;
	add.s32 	%r4780, %r1495, -2;
	setp.lt.s32 	%p320, %r637, %r4780;
	or.pred  	%p321, %p319, %p320;
	add.s32 	%r4781, %r1496, 2;
	setp.ge.s32 	%p322, %r637, %r4781;
	or.pred  	%p323, %p322, %p321;
	setp.lt.s32 	%p324, %r638, %r1490;
	or.pred  	%p325, %p324, %p323;
	mad.lo.s32 	%r4782, %r1492, %r1491, %r1490;
	setp.ge.s32 	%p326, %r638, %r4782;
	or.pred  	%p327, %p325, %p326;
	@%p327 bra 	$L__BB0_743;

	sub.s32 	%r1146, %r638, %r1490;
	rem.s32 	%r4783, %r1146, %r1491;
	setp.ne.s32 	%p328, %r4783, 0;
	@%p328 bra 	$L__BB0_743;

	div.s32 	%r4784, %r1146, %r1491;
	mov.u32 	%r4785, 8;
	sub.s32 	%r4786, %r4785, %r1493;
	add.s32 	%r4787, %r4786, %r1494;
	mul.lo.s32 	%r4788, %r4784, %r4787;
	mov.u32 	%r4789, 4;
	sub.s32 	%r4790, %r4789, %r1493;
	add.s32 	%r1147, %r4790, %r636;
	sub.s32 	%r4791, %r4789, %r1495;
	add.s32 	%r1148, %r4791, %r637;
	mul.lo.s32 	%r1149, %r4788, 3;
	add.s32 	%r4792, %r1147, %r1149;
	add.s32 	%r4793, %r4792, -2;
	sub.s32 	%r4794, %r4785, %r1495;
	add.s32 	%r4795, %r4794, %r1496;
	mul.lo.s32 	%r1150, %r4793, %r4795;
	add.s32 	%r4796, %r1148, %r1150;
	mul.lo.s32 	%r4797, %r4796, %r58;
	sub.s32 	%r1151, %r4797, %r1497;
	@%p28 bra 	$L__BB0_508;

	not.pred 	%p330, %p24;
	@%p330 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3346;
  cvt.f32.f16 %f496, low;}

	// end inline asm
	add.s32 	%r4799, %r1151, %r401;
	mul.wide.s32 	%rd289, %r4799, 4;
	add.s64 	%rd290, %rd30, %rd289;
	st.global.f32 	[%rd290], %f496;

$L__BB0_506:
	not.pred 	%p331, %p26;
	@%p331 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3346;
  cvt.f32.f16 %f497, high;}

	// end inline asm
	add.s32 	%r4801, %r1151, %r402;
	mul.wide.s32 	%rd291, %r4801, 4;
	add.s64 	%rd292, %rd30, %rd291;
	st.global.f32 	[%rd292], %f497;

$L__BB0_508:
	@%p28 bra 	$L__BB0_513;

	not.pred 	%p333, %p25;
	@%p333 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3423;
  cvt.f32.f16 %f498, low;}

	// end inline asm
	add.s32 	%r4803, %r1151, %r415;
	mul.wide.s32 	%rd293, %r4803, 4;
	add.s64 	%rd294, %rd30, %rd293;
	st.global.f32 	[%rd294], %f498;

$L__BB0_511:
	not.pred 	%p334, %p27;
	@%p334 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3423;
  cvt.f32.f16 %f499, high;}

	// end inline asm
	add.s32 	%r4805, %r1151, %r416;
	mul.wide.s32 	%rd295, %r4805, 4;
	add.s64 	%rd296, %rd30, %rd295;
	st.global.f32 	[%rd296], %f499;

$L__BB0_513:
	mov.u32 	%r4806, 8;
	sub.s32 	%r4807, %r4806, %r1493;
	add.s32 	%r4808, %r4807, %r1494;
	add.s32 	%r1152, %r1149, %r4808;
	add.s32 	%r4809, %r1147, %r1152;
	add.s32 	%r4810, %r4809, -2;
	sub.s32 	%r4811, %r4806, %r1495;
	add.s32 	%r4812, %r4811, %r1496;
	mad.lo.s32 	%r4813, %r4810, %r4812, %r1148;
	mul.lo.s32 	%r4814, %r4813, %r58;
	sub.s32 	%r1153, %r4814, %r1497;
	@%p28 bra 	$L__BB0_518;

	not.pred 	%p336, %p24;
	@%p336 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3389;
  cvt.f32.f16 %f500, low;}

	// end inline asm
	add.s32 	%r4816, %r1153, %r401;
	mul.wide.s32 	%rd297, %r4816, 4;
	add.s64 	%rd298, %rd30, %rd297;
	st.global.f32 	[%rd298], %f500;

$L__BB0_516:
	not.pred 	%p337, %p26;
	@%p337 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3389;
  cvt.f32.f16 %f501, high;}

	// end inline asm
	add.s32 	%r4818, %r1153, %r402;
	mul.wide.s32 	%rd299, %r4818, 4;
	add.s64 	%rd300, %rd30, %rd299;
	st.global.f32 	[%rd300], %f501;

$L__BB0_518:
	@%p28 bra 	$L__BB0_523;

	not.pred 	%p339, %p25;
	@%p339 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3455;
  cvt.f32.f16 %f502, low;}

	// end inline asm
	add.s32 	%r4820, %r1153, %r415;
	mul.wide.s32 	%rd301, %r4820, 4;
	add.s64 	%rd302, %rd30, %rd301;
	st.global.f32 	[%rd302], %f502;

$L__BB0_521:
	not.pred 	%p340, %p27;
	@%p340 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3455;
  cvt.f32.f16 %f503, high;}

	// end inline asm
	add.s32 	%r4822, %r1153, %r416;
	mul.wide.s32 	%rd303, %r4822, 4;
	add.s64 	%rd304, %rd30, %rd303;
	st.global.f32 	[%rd304], %f503;

$L__BB0_523:
	add.s32 	%r1154, %r1148, 1;
	add.s32 	%r4823, %r1154, %r1150;
	mul.lo.s32 	%r4824, %r4823, %r58;
	sub.s32 	%r1155, %r4824, %r1497;
	@%p28 bra 	$L__BB0_528;

	not.pred 	%p342, %p24;
	@%p342 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3500;
  cvt.f32.f16 %f504, low;}

	// end inline asm
	add.s32 	%r4826, %r1155, %r401;
	mul.wide.s32 	%rd305, %r4826, 4;
	add.s64 	%rd306, %rd30, %rd305;
	st.global.f32 	[%rd306], %f504;

$L__BB0_526:
	not.pred 	%p343, %p26;
	@%p343 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3500;
  cvt.f32.f16 %f505, high;}

	// end inline asm
	add.s32 	%r4828, %r1155, %r402;
	mul.wide.s32 	%rd307, %r4828, 4;
	add.s64 	%rd308, %rd30, %rd307;
	st.global.f32 	[%rd308], %f505;

$L__BB0_528:
	@%p28 bra 	$L__BB0_533;

	not.pred 	%p345, %p25;
	@%p345 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3534;
  cvt.f32.f16 %f506, low;}

	// end inline asm
	add.s32 	%r4830, %r1155, %r415;
	mul.wide.s32 	%rd309, %r4830, 4;
	add.s64 	%rd310, %rd30, %rd309;
	st.global.f32 	[%rd310], %f506;

$L__BB0_531:
	not.pred 	%p346, %p27;
	@%p346 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3534;
  cvt.f32.f16 %f507, high;}

	// end inline asm
	add.s32 	%r4832, %r1155, %r416;
	mul.wide.s32 	%rd311, %r4832, 4;
	add.s64 	%rd312, %rd30, %rd311;
	st.global.f32 	[%rd312], %f507;

$L__BB0_533:
	add.s32 	%r1156, %r1147, -1;
	add.s32 	%r4833, %r1156, %r1149;
	mov.u32 	%r4834, 8;
	sub.s32 	%r4835, %r4834, %r1495;
	add.s32 	%r4836, %r4835, %r1496;
	mul.lo.s32 	%r1157, %r4833, %r4836;
	add.s32 	%r1158, %r1148, -1;
	add.s32 	%r4837, %r1158, %r1157;
	mul.lo.s32 	%r4838, %r4837, %r58;
	sub.s32 	%r1159, %r4838, %r1497;
	@%p28 bra 	$L__BB0_538;

	not.pred 	%p348, %p24;
	@%p348 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3579;
  cvt.f32.f16 %f508, low;}

	// end inline asm
	add.s32 	%r4840, %r1159, %r401;
	mul.wide.s32 	%rd313, %r4840, 4;
	add.s64 	%rd314, %rd30, %rd313;
	st.global.f32 	[%rd314], %f508;

$L__BB0_536:
	not.pred 	%p349, %p26;
	@%p349 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3579;
  cvt.f32.f16 %f509, high;}

	// end inline asm
	add.s32 	%r4842, %r1159, %r402;
	mul.wide.s32 	%rd315, %r4842, 4;
	add.s64 	%rd316, %rd30, %rd315;
	st.global.f32 	[%rd316], %f509;

$L__BB0_538:
	@%p28 bra 	$L__BB0_543;

	not.pred 	%p351, %p25;
	@%p351 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3656;
  cvt.f32.f16 %f510, low;}

	// end inline asm
	add.s32 	%r4844, %r1159, %r415;
	mul.wide.s32 	%rd317, %r4844, 4;
	add.s64 	%rd318, %rd30, %rd317;
	st.global.f32 	[%rd318], %f510;

$L__BB0_541:
	not.pred 	%p352, %p27;
	@%p352 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3656;
  cvt.f32.f16 %f511, high;}

	// end inline asm
	add.s32 	%r4846, %r1159, %r416;
	mul.wide.s32 	%rd319, %r4846, 4;
	add.s64 	%rd320, %rd30, %rd319;
	st.global.f32 	[%rd320], %f511;

$L__BB0_543:
	mov.u32 	%r4847, 8;
	sub.s32 	%r4848, %r4847, %r1495;
	add.s32 	%r4849, %r4848, %r1496;
	add.s32 	%r4850, %r1156, %r1152;
	mul.lo.s32 	%r1160, %r4850, %r4849;
	add.s32 	%r4851, %r1158, %r1160;
	mul.lo.s32 	%r4852, %r4851, %r58;
	sub.s32 	%r1161, %r4852, %r1497;
	@%p28 bra 	$L__BB0_548;

	not.pred 	%p354, %p24;
	@%p354 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3622;
  cvt.f32.f16 %f512, low;}

	// end inline asm
	add.s32 	%r4854, %r1161, %r401;
	mul.wide.s32 	%rd321, %r4854, 4;
	add.s64 	%rd322, %rd30, %rd321;
	st.global.f32 	[%rd322], %f512;

$L__BB0_546:
	not.pred 	%p355, %p26;
	@%p355 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3622;
  cvt.f32.f16 %f513, high;}

	// end inline asm
	add.s32 	%r4856, %r1161, %r402;
	mul.wide.s32 	%rd323, %r4856, 4;
	add.s64 	%rd324, %rd30, %rd323;
	st.global.f32 	[%rd324], %f513;

$L__BB0_548:
	@%p28 bra 	$L__BB0_553;

	not.pred 	%p357, %p25;
	@%p357 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3688;
  cvt.f32.f16 %f514, low;}

	// end inline asm
	add.s32 	%r4858, %r1161, %r415;
	mul.wide.s32 	%rd325, %r4858, 4;
	add.s64 	%rd326, %rd30, %rd325;
	st.global.f32 	[%rd326], %f514;

$L__BB0_551:
	not.pred 	%p358, %p27;
	@%p358 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3688;
  cvt.f32.f16 %f515, high;}

	// end inline asm
	add.s32 	%r4860, %r1161, %r416;
	mul.wide.s32 	%rd327, %r4860, 4;
	add.s64 	%rd328, %rd30, %rd327;
	st.global.f32 	[%rd328], %f515;

$L__BB0_553:
	add.s32 	%r4861, %r1148, %r1157;
	mul.lo.s32 	%r4862, %r4861, %r58;
	sub.s32 	%r1162, %r4862, %r1497;
	@%p28 bra 	$L__BB0_558;

	not.pred 	%p360, %p24;
	@%p360 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7112;
  cvt.f32.f16 %f516, low;}

	// end inline asm
	add.s32 	%r4864, %r1162, %r401;
	mul.wide.s32 	%rd329, %r4864, 4;
	add.s64 	%rd330, %rd30, %rd329;
	st.global.f32 	[%rd330], %f516;

$L__BB0_556:
	not.pred 	%p361, %p26;
	@%p361 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7112;
  cvt.f32.f16 %f517, high;}

	// end inline asm
	add.s32 	%r4866, %r1162, %r402;
	mul.wide.s32 	%rd331, %r4866, 4;
	add.s64 	%rd332, %rd30, %rd331;
	st.global.f32 	[%rd332], %f517;

$L__BB0_558:
	@%p28 bra 	$L__BB0_563;

	not.pred 	%p363, %p25;
	@%p363 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7111;
  cvt.f32.f16 %f518, low;}

	// end inline asm
	add.s32 	%r4868, %r1162, %r415;
	mul.wide.s32 	%rd333, %r4868, 4;
	add.s64 	%rd334, %rd30, %rd333;
	st.global.f32 	[%rd334], %f518;

$L__BB0_561:
	not.pred 	%p364, %p27;
	@%p364 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7111;
  cvt.f32.f16 %f519, high;}

	// end inline asm
	add.s32 	%r4870, %r1162, %r416;
	mul.wide.s32 	%rd335, %r4870, 4;
	add.s64 	%rd336, %rd30, %rd335;
	st.global.f32 	[%rd336], %f519;

$L__BB0_563:
	add.s32 	%r4871, %r1148, %r1160;
	mul.lo.s32 	%r4872, %r4871, %r58;
	sub.s32 	%r1163, %r4872, %r1497;
	@%p28 bra 	$L__BB0_568;

	not.pred 	%p366, %p24;
	@%p366 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7110;
  cvt.f32.f16 %f520, low;}

	// end inline asm
	add.s32 	%r4874, %r1163, %r401;
	mul.wide.s32 	%rd337, %r4874, 4;
	add.s64 	%rd338, %rd30, %rd337;
	st.global.f32 	[%rd338], %f520;

$L__BB0_566:
	not.pred 	%p367, %p26;
	@%p367 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7110;
  cvt.f32.f16 %f521, high;}

	// end inline asm
	add.s32 	%r4876, %r1163, %r402;
	mul.wide.s32 	%rd339, %r4876, 4;
	add.s64 	%rd340, %rd30, %rd339;
	st.global.f32 	[%rd340], %f521;

$L__BB0_568:
	@%p28 bra 	$L__BB0_573;

	not.pred 	%p369, %p25;
	@%p369 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7109;
  cvt.f32.f16 %f522, low;}

	// end inline asm
	add.s32 	%r4878, %r1163, %r415;
	mul.wide.s32 	%rd341, %r4878, 4;
	add.s64 	%rd342, %rd30, %rd341;
	st.global.f32 	[%rd342], %f522;

$L__BB0_571:
	not.pred 	%p370, %p27;
	@%p370 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7109;
  cvt.f32.f16 %f523, high;}

	// end inline asm
	add.s32 	%r4880, %r1163, %r416;
	mul.wide.s32 	%rd343, %r4880, 4;
	add.s64 	%rd344, %rd30, %rd343;
	st.global.f32 	[%rd344], %f523;

$L__BB0_573:
	mov.u32 	%r4881, 8;
	sub.s32 	%r4882, %r4881, %r1493;
	add.s32 	%r4883, %r4882, %r1494;
	add.s32 	%r1164, %r1152, %r4883;
	add.s32 	%r4884, %r1156, %r1164;
	sub.s32 	%r4885, %r4881, %r1495;
	add.s32 	%r4886, %r4885, %r1496;
	mul.lo.s32 	%r1165, %r4884, %r4886;
	add.s32 	%r4887, %r1148, %r1165;
	mul.lo.s32 	%r4888, %r4887, %r58;
	sub.s32 	%r1166, %r4888, %r1497;
	@%p28 bra 	$L__BB0_578;

	not.pred 	%p372, %p24;
	@%p372 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1021;
  cvt.f32.f16 %f524, low;}

	// end inline asm
	add.s32 	%r4890, %r1166, %r401;
	mul.wide.s32 	%rd345, %r4890, 4;
	add.s64 	%rd346, %rd30, %rd345;
	st.global.f32 	[%rd346], %f524;

$L__BB0_576:
	not.pred 	%p373, %p26;
	@%p373 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1021;
  cvt.f32.f16 %f525, high;}

	// end inline asm
	add.s32 	%r4892, %r1166, %r402;
	mul.wide.s32 	%rd347, %r4892, 4;
	add.s64 	%rd348, %rd30, %rd347;
	st.global.f32 	[%rd348], %f525;

$L__BB0_578:
	@%p28 bra 	$L__BB0_583;

	not.pred 	%p375, %p25;
	@%p375 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1033;
  cvt.f32.f16 %f526, low;}

	// end inline asm
	add.s32 	%r4894, %r1166, %r415;
	mul.wide.s32 	%rd349, %r4894, 4;
	add.s64 	%rd350, %rd30, %rd349;
	st.global.f32 	[%rd350], %f526;

$L__BB0_581:
	not.pred 	%p376, %p27;
	@%p376 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1033;
  cvt.f32.f16 %f527, high;}

	// end inline asm
	add.s32 	%r4896, %r1166, %r416;
	mul.wide.s32 	%rd351, %r4896, 4;
	add.s64 	%rd352, %rd30, %rd351;
	st.global.f32 	[%rd352], %f527;

$L__BB0_583:
	add.s32 	%r4897, %r1154, %r1157;
	mul.lo.s32 	%r4898, %r4897, %r58;
	sub.s32 	%r1167, %r4898, %r1497;
	@%p28 bra 	$L__BB0_588;

	not.pred 	%p378, %p24;
	@%p378 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f528, low;}

	// end inline asm
	add.s32 	%r4900, %r1167, %r401;
	mul.wide.s32 	%rd353, %r4900, 4;
	add.s64 	%rd354, %rd30, %rd353;
	st.global.f32 	[%rd354], %f528;

$L__BB0_586:
	not.pred 	%p379, %p26;
	@%p379 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f529, high;}

	// end inline asm
	add.s32 	%r4902, %r1167, %r402;
	mul.wide.s32 	%rd355, %r4902, 4;
	add.s64 	%rd356, %rd30, %rd355;
	st.global.f32 	[%rd356], %f529;

$L__BB0_588:
	@%p28 bra 	$L__BB0_593;

	not.pred 	%p381, %p25;
	@%p381 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f530, low;}

	// end inline asm
	add.s32 	%r4904, %r1167, %r415;
	mul.wide.s32 	%rd357, %r4904, 4;
	add.s64 	%rd358, %rd30, %rd357;
	st.global.f32 	[%rd358], %f530;

$L__BB0_591:
	not.pred 	%p382, %p27;
	@%p382 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f531, high;}

	// end inline asm
	add.s32 	%r4906, %r1167, %r416;
	mul.wide.s32 	%rd359, %r4906, 4;
	add.s64 	%rd360, %rd30, %rd359;
	st.global.f32 	[%rd360], %f531;

$L__BB0_593:
	add.s32 	%r4907, %r1154, %r1160;
	mul.lo.s32 	%r4908, %r4907, %r58;
	sub.s32 	%r1168, %r4908, %r1497;
	@%p28 bra 	$L__BB0_598;

	not.pred 	%p384, %p24;
	@%p384 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3960;
  cvt.f32.f16 %f532, low;}

	// end inline asm
	add.s32 	%r4910, %r1168, %r401;
	mul.wide.s32 	%rd361, %r4910, 4;
	add.s64 	%rd362, %rd30, %rd361;
	st.global.f32 	[%rd362], %f532;

$L__BB0_596:
	not.pred 	%p385, %p26;
	@%p385 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3960;
  cvt.f32.f16 %f533, high;}

	// end inline asm
	add.s32 	%r4912, %r1168, %r402;
	mul.wide.s32 	%rd363, %r4912, 4;
	add.s64 	%rd364, %rd30, %rd363;
	st.global.f32 	[%rd364], %f533;

$L__BB0_598:
	@%p28 bra 	$L__BB0_603;

	not.pred 	%p387, %p25;
	@%p387 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4041;
  cvt.f32.f16 %f534, low;}

	// end inline asm
	add.s32 	%r4914, %r1168, %r415;
	mul.wide.s32 	%rd365, %r4914, 4;
	add.s64 	%rd366, %rd30, %rd365;
	st.global.f32 	[%rd366], %f534;

$L__BB0_601:
	not.pred 	%p388, %p27;
	@%p388 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4041;
  cvt.f32.f16 %f535, high;}

	// end inline asm
	add.s32 	%r4916, %r1168, %r416;
	mul.wide.s32 	%rd367, %r4916, 4;
	add.s64 	%rd368, %rd30, %rd367;
	st.global.f32 	[%rd368], %f535;

$L__BB0_603:
	add.s32 	%r4917, %r1154, %r1165;
	mul.lo.s32 	%r4918, %r4917, %r58;
	sub.s32 	%r1169, %r4918, %r1497;
	@%p28 bra 	$L__BB0_608;

	not.pred 	%p390, %p24;
	@%p390 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1045;
  cvt.f32.f16 %f536, low;}

	// end inline asm
	add.s32 	%r4920, %r1169, %r401;
	mul.wide.s32 	%rd369, %r4920, 4;
	add.s64 	%rd370, %rd30, %rd369;
	st.global.f32 	[%rd370], %f536;

$L__BB0_606:
	not.pred 	%p391, %p26;
	@%p391 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1045;
  cvt.f32.f16 %f537, high;}

	// end inline asm
	add.s32 	%r4922, %r1169, %r402;
	mul.wide.s32 	%rd371, %r4922, 4;
	add.s64 	%rd372, %rd30, %rd371;
	st.global.f32 	[%rd372], %f537;

$L__BB0_608:
	@%p28 bra 	$L__BB0_613;

	not.pred 	%p393, %p25;
	@%p393 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1057;
  cvt.f32.f16 %f538, low;}

	// end inline asm
	add.s32 	%r4924, %r1169, %r415;
	mul.wide.s32 	%rd373, %r4924, 4;
	add.s64 	%rd374, %rd30, %rd373;
	st.global.f32 	[%rd374], %f538;

$L__BB0_611:
	not.pred 	%p394, %p27;
	@%p394 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1057;
  cvt.f32.f16 %f539, high;}

	// end inline asm
	add.s32 	%r4926, %r1169, %r416;
	mul.wide.s32 	%rd375, %r4926, 4;
	add.s64 	%rd376, %rd30, %rd375;
	st.global.f32 	[%rd376], %f539;

$L__BB0_613:
	add.s32 	%r1170, %r1148, 2;
	add.s32 	%r4927, %r1170, %r1157;
	mul.lo.s32 	%r4928, %r4927, %r58;
	sub.s32 	%r1171, %r4928, %r1497;
	@%p28 bra 	$L__BB0_618;

	not.pred 	%p396, %p24;
	@%p396 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4101;
  cvt.f32.f16 %f540, low;}

	// end inline asm
	add.s32 	%r4930, %r1171, %r401;
	mul.wide.s32 	%rd377, %r4930, 4;
	add.s64 	%rd378, %rd30, %rd377;
	st.global.f32 	[%rd378], %f540;

$L__BB0_616:
	not.pred 	%p397, %p26;
	@%p397 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4101;
  cvt.f32.f16 %f541, high;}

	// end inline asm
	add.s32 	%r4932, %r1171, %r402;
	mul.wide.s32 	%rd379, %r4932, 4;
	add.s64 	%rd380, %rd30, %rd379;
	st.global.f32 	[%rd380], %f541;

$L__BB0_618:
	@%p28 bra 	$L__BB0_623;

	not.pred 	%p399, %p25;
	@%p399 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4135;
  cvt.f32.f16 %f542, low;}

	// end inline asm
	add.s32 	%r4934, %r1171, %r415;
	mul.wide.s32 	%rd381, %r4934, 4;
	add.s64 	%rd382, %rd30, %rd381;
	st.global.f32 	[%rd382], %f542;

$L__BB0_621:
	not.pred 	%p400, %p27;
	@%p400 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4135;
  cvt.f32.f16 %f543, high;}

	// end inline asm
	add.s32 	%r4936, %r1171, %r416;
	mul.wide.s32 	%rd383, %r4936, 4;
	add.s64 	%rd384, %rd30, %rd383;
	st.global.f32 	[%rd384], %f543;

$L__BB0_623:
	mov.u32 	%r4937, 8;
	sub.s32 	%r4938, %r4937, %r1495;
	add.s32 	%r4939, %r4938, %r1496;
	mul.lo.s32 	%r1172, %r4809, %r4939;
	add.s32 	%r4941, %r1158, %r1172;
	mul.lo.s32 	%r4942, %r4941, %r58;
	sub.s32 	%r1173, %r4942, %r1497;
	@%p28 bra 	$L__BB0_628;

	not.pred 	%p402, %p24;
	@%p402 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f544, low;}

	// end inline asm
	add.s32 	%r4944, %r1173, %r401;
	mul.wide.s32 	%rd385, %r4944, 4;
	add.s64 	%rd386, %rd30, %rd385;
	st.global.f32 	[%rd386], %f544;

$L__BB0_626:
	not.pred 	%p403, %p26;
	@%p403 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f545, high;}

	// end inline asm
	add.s32 	%r4946, %r1173, %r402;
	mul.wide.s32 	%rd387, %r4946, 4;
	add.s64 	%rd388, %rd30, %rd387;
	st.global.f32 	[%rd388], %f545;

$L__BB0_628:
	@%p28 bra 	$L__BB0_633;

	not.pred 	%p405, %p25;
	@%p405 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f546, low;}

	// end inline asm
	add.s32 	%r4948, %r1173, %r415;
	mul.wide.s32 	%rd389, %r4948, 4;
	add.s64 	%rd390, %rd30, %rd389;
	st.global.f32 	[%rd390], %f546;

$L__BB0_631:
	not.pred 	%p406, %p27;
	@%p406 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f547, high;}

	// end inline asm
	add.s32 	%r4950, %r1173, %r416;
	mul.wide.s32 	%rd391, %r4950, 4;
	add.s64 	%rd392, %rd30, %rd391;
	st.global.f32 	[%rd392], %f547;

$L__BB0_633:
	mov.u32 	%r4951, 8;
	sub.s32 	%r4952, %r4951, %r1495;
	add.s32 	%r4953, %r4952, %r1496;
	add.s32 	%r4954, %r1147, %r1164;
	mul.lo.s32 	%r1174, %r4954, %r4953;
	add.s32 	%r4955, %r1158, %r1174;
	mul.lo.s32 	%r4956, %r4955, %r58;
	sub.s32 	%r1175, %r4956, %r1497;
	@%p28 bra 	$L__BB0_638;

	not.pred 	%p408, %p24;
	@%p408 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1075;
  cvt.f32.f16 %f548, low;}

	// end inline asm
	add.s32 	%r4958, %r1175, %r401;
	mul.wide.s32 	%rd393, %r4958, 4;
	add.s64 	%rd394, %rd30, %rd393;
	st.global.f32 	[%rd394], %f548;

$L__BB0_636:
	not.pred 	%p409, %p26;
	@%p409 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1075;
  cvt.f32.f16 %f549, high;}

	// end inline asm
	add.s32 	%r4960, %r1175, %r402;
	mul.wide.s32 	%rd395, %r4960, 4;
	add.s64 	%rd396, %rd30, %rd395;
	st.global.f32 	[%rd396], %f549;

$L__BB0_638:
	@%p28 bra 	$L__BB0_643;

	not.pred 	%p411, %p25;
	@%p411 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1081;
  cvt.f32.f16 %f550, low;}

	// end inline asm
	add.s32 	%r4962, %r1175, %r415;
	mul.wide.s32 	%rd397, %r4962, 4;
	add.s64 	%rd398, %rd30, %rd397;
	st.global.f32 	[%rd398], %f550;

$L__BB0_641:
	not.pred 	%p412, %p27;
	@%p412 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1081;
  cvt.f32.f16 %f551, high;}

	// end inline asm
	add.s32 	%r4964, %r1175, %r416;
	mul.wide.s32 	%rd399, %r4964, 4;
	add.s64 	%rd400, %rd30, %rd399;
	st.global.f32 	[%rd400], %f551;

$L__BB0_643:
	mov.u32 	%r4965, 8;
	sub.s32 	%r4966, %r4965, %r1495;
	add.s32 	%r4967, %r4966, %r1496;
	mul.lo.s32 	%r1176, %r4792, %r4967;
	add.s32 	%r4969, %r1148, %r1176;
	mul.lo.s32 	%r4970, %r4969, %r58;
	sub.s32 	%r1177, %r4970, %r1497;
	@%p28 bra 	$L__BB0_648;

	not.pred 	%p414, %p24;
	@%p414 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f552, low;}

	// end inline asm
	add.s32 	%r4972, %r1177, %r401;
	mul.wide.s32 	%rd401, %r4972, 4;
	add.s64 	%rd402, %rd30, %rd401;
	st.global.f32 	[%rd402], %f552;

$L__BB0_646:
	not.pred 	%p415, %p26;
	@%p415 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f553, high;}

	// end inline asm
	add.s32 	%r4974, %r1177, %r402;
	mul.wide.s32 	%rd403, %r4974, 4;
	add.s64 	%rd404, %rd30, %rd403;
	st.global.f32 	[%rd404], %f553;

$L__BB0_648:
	@%p28 bra 	$L__BB0_653;

	not.pred 	%p417, %p25;
	@%p417 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f554, low;}

	// end inline asm
	add.s32 	%r4976, %r1177, %r415;
	mul.wide.s32 	%rd405, %r4976, 4;
	add.s64 	%rd406, %rd30, %rd405;
	st.global.f32 	[%rd406], %f554;

$L__BB0_651:
	not.pred 	%p418, %p27;
	@%p418 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f555, high;}

	// end inline asm
	add.s32 	%r4978, %r1177, %r416;
	mul.wide.s32 	%rd407, %r4978, 4;
	add.s64 	%rd408, %rd30, %rd407;
	st.global.f32 	[%rd408], %f555;

$L__BB0_653:
	add.s32 	%r4979, %r1148, %r1172;
	mul.lo.s32 	%r4980, %r4979, %r58;
	sub.s32 	%r1178, %r4980, %r1497;
	@%p28 bra 	$L__BB0_658;

	not.pred 	%p420, %p24;
	@%p420 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f556, low;}

	// end inline asm
	add.s32 	%r4982, %r1178, %r401;
	mul.wide.s32 	%rd409, %r4982, 4;
	add.s64 	%rd410, %rd30, %rd409;
	st.global.f32 	[%rd410], %f556;

$L__BB0_656:
	not.pred 	%p421, %p26;
	@%p421 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f557, high;}

	// end inline asm
	add.s32 	%r4984, %r1178, %r402;
	mul.wide.s32 	%rd411, %r4984, 4;
	add.s64 	%rd412, %rd30, %rd411;
	st.global.f32 	[%rd412], %f557;

$L__BB0_658:
	@%p28 bra 	$L__BB0_663;

	not.pred 	%p423, %p25;
	@%p423 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f558, low;}

	// end inline asm
	add.s32 	%r4986, %r1178, %r415;
	mul.wide.s32 	%rd413, %r4986, 4;
	add.s64 	%rd414, %rd30, %rd413;
	st.global.f32 	[%rd414], %f558;

$L__BB0_661:
	not.pred 	%p424, %p27;
	@%p424 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f559, high;}

	// end inline asm
	add.s32 	%r4988, %r1178, %r416;
	mul.wide.s32 	%rd415, %r4988, 4;
	add.s64 	%rd416, %rd30, %rd415;
	st.global.f32 	[%rd416], %f559;

$L__BB0_663:
	add.s32 	%r4989, %r1148, %r1174;
	mul.lo.s32 	%r4990, %r4989, %r58;
	sub.s32 	%r1179, %r4990, %r1497;
	@%p28 bra 	$L__BB0_668;

	not.pred 	%p426, %p24;
	@%p426 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f560, low;}

	// end inline asm
	add.s32 	%r4992, %r1179, %r401;
	mul.wide.s32 	%rd417, %r4992, 4;
	add.s64 	%rd418, %rd30, %rd417;
	st.global.f32 	[%rd418], %f560;

$L__BB0_666:
	not.pred 	%p427, %p26;
	@%p427 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f561, high;}

	// end inline asm
	add.s32 	%r4994, %r1179, %r402;
	mul.wide.s32 	%rd419, %r4994, 4;
	add.s64 	%rd420, %rd30, %rd419;
	st.global.f32 	[%rd420], %f561;

$L__BB0_668:
	@%p28 bra 	$L__BB0_673;

	not.pred 	%p429, %p25;
	@%p429 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f562, low;}

	// end inline asm
	add.s32 	%r4996, %r1179, %r415;
	mul.wide.s32 	%rd421, %r4996, 4;
	add.s64 	%rd422, %rd30, %rd421;
	st.global.f32 	[%rd422], %f562;

$L__BB0_671:
	not.pred 	%p430, %p27;
	@%p430 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f563, high;}

	// end inline asm
	add.s32 	%r4998, %r1179, %r416;
	mul.wide.s32 	%rd423, %r4998, 4;
	add.s64 	%rd424, %rd30, %rd423;
	st.global.f32 	[%rd424], %f563;

$L__BB0_673:
	add.s32 	%r4999, %r1154, %r1176;
	mul.lo.s32 	%r5000, %r4999, %r58;
	sub.s32 	%r1180, %r5000, %r1497;
	@%p28 bra 	$L__BB0_678;

	not.pred 	%p432, %p24;
	@%p432 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f564, low;}

	// end inline asm
	add.s32 	%r5002, %r1180, %r401;
	mul.wide.s32 	%rd425, %r5002, 4;
	add.s64 	%rd426, %rd30, %rd425;
	st.global.f32 	[%rd426], %f564;

$L__BB0_676:
	not.pred 	%p433, %p26;
	@%p433 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f565, high;}

	// end inline asm
	add.s32 	%r5004, %r1180, %r402;
	mul.wide.s32 	%rd427, %r5004, 4;
	add.s64 	%rd428, %rd30, %rd427;
	st.global.f32 	[%rd428], %f565;

$L__BB0_678:
	@%p28 bra 	$L__BB0_683;

	not.pred 	%p435, %p25;
	@%p435 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7097;
  cvt.f32.f16 %f566, low;}

	// end inline asm
	add.s32 	%r5006, %r1180, %r415;
	mul.wide.s32 	%rd429, %r5006, 4;
	add.s64 	%rd430, %rd30, %rd429;
	st.global.f32 	[%rd430], %f566;

$L__BB0_681:
	not.pred 	%p436, %p27;
	@%p436 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7097;
  cvt.f32.f16 %f567, high;}

	// end inline asm
	add.s32 	%r5008, %r1180, %r416;
	mul.wide.s32 	%rd431, %r5008, 4;
	add.s64 	%rd432, %rd30, %rd431;
	st.global.f32 	[%rd432], %f567;

$L__BB0_683:
	add.s32 	%r5009, %r1154, %r1172;
	mul.lo.s32 	%r5010, %r5009, %r58;
	sub.s32 	%r1181, %r5010, %r1497;
	@%p28 bra 	$L__BB0_688;

	not.pred 	%p438, %p24;
	@%p438 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7096;
  cvt.f32.f16 %f568, low;}

	// end inline asm
	add.s32 	%r5012, %r1181, %r401;
	mul.wide.s32 	%rd433, %r5012, 4;
	add.s64 	%rd434, %rd30, %rd433;
	st.global.f32 	[%rd434], %f568;

$L__BB0_686:
	not.pred 	%p439, %p26;
	@%p439 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7096;
  cvt.f32.f16 %f569, high;}

	// end inline asm
	add.s32 	%r5014, %r1181, %r402;
	mul.wide.s32 	%rd435, %r5014, 4;
	add.s64 	%rd436, %rd30, %rd435;
	st.global.f32 	[%rd436], %f569;

$L__BB0_688:
	@%p28 bra 	$L__BB0_693;

	not.pred 	%p441, %p25;
	@%p441 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7095;
  cvt.f32.f16 %f570, low;}

	// end inline asm
	add.s32 	%r5016, %r1181, %r415;
	mul.wide.s32 	%rd437, %r5016, 4;
	add.s64 	%rd438, %rd30, %rd437;
	st.global.f32 	[%rd438], %f570;

$L__BB0_691:
	not.pred 	%p442, %p27;
	@%p442 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7095;
  cvt.f32.f16 %f571, high;}

	// end inline asm
	add.s32 	%r5018, %r1181, %r416;
	mul.wide.s32 	%rd439, %r5018, 4;
	add.s64 	%rd440, %rd30, %rd439;
	st.global.f32 	[%rd440], %f571;

$L__BB0_693:
	add.s32 	%r5019, %r1154, %r1174;
	mul.lo.s32 	%r5020, %r5019, %r58;
	sub.s32 	%r1182, %r5020, %r1497;
	@%p28 bra 	$L__BB0_698;

	not.pred 	%p444, %p24;
	@%p444 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7094;
  cvt.f32.f16 %f572, low;}

	// end inline asm
	add.s32 	%r5022, %r1182, %r401;
	mul.wide.s32 	%rd441, %r5022, 4;
	add.s64 	%rd442, %rd30, %rd441;
	st.global.f32 	[%rd442], %f572;

$L__BB0_696:
	not.pred 	%p445, %p26;
	@%p445 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7094;
  cvt.f32.f16 %f573, high;}

	// end inline asm
	add.s32 	%r5024, %r1182, %r402;
	mul.wide.s32 	%rd443, %r5024, 4;
	add.s64 	%rd444, %rd30, %rd443;
	st.global.f32 	[%rd444], %f573;

$L__BB0_698:
	@%p28 bra 	$L__BB0_703;

	not.pred 	%p447, %p25;
	@%p447 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7093;
  cvt.f32.f16 %f574, low;}

	// end inline asm
	add.s32 	%r5026, %r1182, %r415;
	mul.wide.s32 	%rd445, %r5026, 4;
	add.s64 	%rd446, %rd30, %rd445;
	st.global.f32 	[%rd446], %f574;

$L__BB0_701:
	not.pred 	%p448, %p27;
	@%p448 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7093;
  cvt.f32.f16 %f575, high;}

	// end inline asm
	add.s32 	%r5028, %r1182, %r416;
	mul.wide.s32 	%rd447, %r5028, 4;
	add.s64 	%rd448, %rd30, %rd447;
	st.global.f32 	[%rd448], %f575;

$L__BB0_703:
	add.s32 	%r5029, %r1170, %r1174;
	mul.lo.s32 	%r5030, %r5029, %r58;
	sub.s32 	%r1183, %r5030, %r1497;
	@%p28 bra 	$L__BB0_708;

	not.pred 	%p450, %p24;
	@%p450 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1130;
  cvt.f32.f16 %f576, low;}

	// end inline asm
	add.s32 	%r5032, %r1183, %r401;
	mul.wide.s32 	%rd449, %r5032, 4;
	add.s64 	%rd450, %rd30, %rd449;
	st.global.f32 	[%rd450], %f576;

$L__BB0_706:
	not.pred 	%p451, %p26;
	@%p451 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1130;
  cvt.f32.f16 %f577, high;}

	// end inline asm
	add.s32 	%r5034, %r1183, %r402;
	mul.wide.s32 	%rd451, %r5034, 4;
	add.s64 	%rd452, %rd30, %rd451;
	st.global.f32 	[%rd452], %f577;

$L__BB0_708:
	@%p28 bra 	$L__BB0_713;

	not.pred 	%p453, %p25;
	@%p453 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1131;
  cvt.f32.f16 %f578, low;}

	// end inline asm
	add.s32 	%r5036, %r1183, %r415;
	mul.wide.s32 	%rd453, %r5036, 4;
	add.s64 	%rd454, %rd30, %rd453;
	st.global.f32 	[%rd454], %f578;

$L__BB0_711:
	not.pred 	%p454, %p27;
	@%p454 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1131;
  cvt.f32.f16 %f579, high;}

	// end inline asm
	add.s32 	%r5038, %r1183, %r416;
	mul.wide.s32 	%rd455, %r5038, 4;
	add.s64 	%rd456, %rd30, %rd455;
	st.global.f32 	[%rd456], %f579;

$L__BB0_713:
	add.s32 	%r1184, %r1147, 1;
	add.s32 	%r5039, %r1184, %r1152;
	mov.u32 	%r5040, 8;
	sub.s32 	%r5041, %r5040, %r1495;
	add.s32 	%r5042, %r5041, %r1496;
	mad.lo.s32 	%r5043, %r5039, %r5042, %r1148;
	mul.lo.s32 	%r5044, %r5043, %r58;
	sub.s32 	%r1185, %r5044, %r1497;
	@%p28 bra 	$L__BB0_718;

	not.pred 	%p456, %p24;
	@%p456 bra 	$L__BB0_716;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7092;
  cvt.f32.f16 %f580, low;}

	// end inline asm
	add.s32 	%r5046, %r1185, %r401;
	mul.wide.s32 	%rd457, %r5046, 4;
	add.s64 	%rd458, %rd30, %rd457;
	st.global.f32 	[%rd458], %f580;

$L__BB0_716:
	not.pred 	%p457, %p26;
	@%p457 bra 	$L__BB0_718;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7092;
  cvt.f32.f16 %f581, high;}

	// end inline asm
	add.s32 	%r5048, %r1185, %r402;
	mul.wide.s32 	%rd459, %r5048, 4;
	add.s64 	%rd460, %rd30, %rd459;
	st.global.f32 	[%rd460], %f581;

$L__BB0_718:
	@%p28 bra 	$L__BB0_723;

	not.pred 	%p459, %p25;
	@%p459 bra 	$L__BB0_721;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7091;
  cvt.f32.f16 %f582, low;}

	// end inline asm
	add.s32 	%r5050, %r1185, %r415;
	mul.wide.s32 	%rd461, %r5050, 4;
	add.s64 	%rd462, %rd30, %rd461;
	st.global.f32 	[%rd462], %f582;

$L__BB0_721:
	not.pred 	%p460, %p27;
	@%p460 bra 	$L__BB0_723;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7091;
  cvt.f32.f16 %f583, high;}

	// end inline asm
	add.s32 	%r5052, %r1185, %r416;
	mul.wide.s32 	%rd463, %r5052, 4;
	add.s64 	%rd464, %rd30, %rd463;
	st.global.f32 	[%rd464], %f583;

$L__BB0_723:
	mov.u32 	%r5053, 8;
	sub.s32 	%r5054, %r5053, %r1495;
	add.s32 	%r5055, %r5054, %r1496;
	add.s32 	%r5056, %r1184, %r1164;
	mul.lo.s32 	%r1186, %r5056, %r5055;
	add.s32 	%r5057, %r1148, %r1186;
	mul.lo.s32 	%r5058, %r5057, %r58;
	sub.s32 	%r1187, %r5058, %r1497;
	@%p28 bra 	$L__BB0_728;

	not.pred 	%p462, %p24;
	@%p462 bra 	$L__BB0_726;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7090;
  cvt.f32.f16 %f584, low;}

	// end inline asm
	add.s32 	%r5060, %r1187, %r401;
	mul.wide.s32 	%rd465, %r5060, 4;
	add.s64 	%rd466, %rd30, %rd465;
	st.global.f32 	[%rd466], %f584;

$L__BB0_726:
	not.pred 	%p463, %p26;
	@%p463 bra 	$L__BB0_728;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7090;
  cvt.f32.f16 %f585, high;}

	// end inline asm
	add.s32 	%r5062, %r1187, %r402;
	mul.wide.s32 	%rd467, %r5062, 4;
	add.s64 	%rd468, %rd30, %rd467;
	st.global.f32 	[%rd468], %f585;

$L__BB0_728:
	@%p28 bra 	$L__BB0_733;

	not.pred 	%p465, %p25;
	@%p465 bra 	$L__BB0_731;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7089;
  cvt.f32.f16 %f586, low;}

	// end inline asm
	add.s32 	%r5064, %r1187, %r415;
	mul.wide.s32 	%rd469, %r5064, 4;
	add.s64 	%rd470, %rd30, %rd469;
	st.global.f32 	[%rd470], %f586;

$L__BB0_731:
	not.pred 	%p466, %p27;
	@%p466 bra 	$L__BB0_733;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7089;
  cvt.f32.f16 %f587, high;}

	// end inline asm
	add.s32 	%r5066, %r1187, %r416;
	mul.wide.s32 	%rd471, %r5066, 4;
	add.s64 	%rd472, %rd30, %rd471;
	st.global.f32 	[%rd472], %f587;

$L__BB0_733:
	add.s32 	%r5067, %r1154, %r1186;
	mul.lo.s32 	%r5068, %r5067, %r58;
	sub.s32 	%r1188, %r5068, %r1497;
	@%p28 bra 	$L__BB0_738;

	not.pred 	%p468, %p24;
	@%p468 bra 	$L__BB0_736;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7088;
  cvt.f32.f16 %f588, low;}

	// end inline asm
	add.s32 	%r5070, %r1188, %r401;
	mul.wide.s32 	%rd473, %r5070, 4;
	add.s64 	%rd474, %rd30, %rd473;
	st.global.f32 	[%rd474], %f588;

$L__BB0_736:
	not.pred 	%p469, %p26;
	@%p469 bra 	$L__BB0_738;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7088;
  cvt.f32.f16 %f589, high;}

	// end inline asm
	add.s32 	%r5072, %r1188, %r402;
	mul.wide.s32 	%rd475, %r5072, 4;
	add.s64 	%rd476, %rd30, %rd475;
	st.global.f32 	[%rd476], %f589;

$L__BB0_738:
	@%p28 bra 	$L__BB0_743;

	not.pred 	%p471, %p25;
	@%p471 bra 	$L__BB0_741;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7087;
  cvt.f32.f16 %f590, low;}

	// end inline asm
	add.s32 	%r5074, %r1188, %r415;
	mul.wide.s32 	%rd477, %r5074, 4;
	add.s64 	%rd478, %rd30, %rd477;
	st.global.f32 	[%rd478], %f590;

$L__BB0_741:
	not.pred 	%p472, %p27;
	@%p472 bra 	$L__BB0_743;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7087;
  cvt.f32.f16 %f591, high;}

	// end inline asm
	add.s32 	%r5076, %r1188, %r416;
	mul.wide.s32 	%rd479, %r5076, 4;
	add.s64 	%rd480, %rd30, %rd479;
	st.global.f32 	[%rd480], %f591;

$L__BB0_743:
	setp.eq.s32 	%p473, %r41, %r1947;
	@%p473 bra 	$L__BB0_745;

	mad.lo.s32 	%r5079, %r1480, %r41, %r42;
	mov.u32 	%r5080, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5081, %r5079, 1280, %r5080;
	add.s32 	%r5082, %r5081, -256;
	shl.b32 	%r5083, %r46, 4;
	add.s32 	%r5084, %r5082, %r5083;
	st.shared.v4.u32 	[%r5084+256], {%r3579, %r3656, %r1075, %r1081};
	st.shared.v4.u32 	[%r5084+1024], {%r3346, %r3423, %r1021, %r1033};
	shl.b32 	%r5085, %r46, 3;
	add.s32 	%r5086, %r5082, %r5085;
	st.shared.v2.u32 	[%r5086+768], {%r3622, %r3688};

$L__BB0_745:
	setp.eq.s32 	%p474, %r42, %r1952;
	@%p474 bra 	$L__BB0_749;

	not.b32 	%r6860, %r41;
	add.s32 	%r6859, %r1479, %r6860;
	mul.lo.s32 	%r5092, %r1479, %r42;
	mul.lo.s32 	%r5093, %r5092, 384;
	shl.b32 	%r5094, %r42, 6;
	sub.s32 	%r5095, %r5093, %r5094;
	mad.lo.s32 	%r5097, %r1948, %r1947, %r5095;
	mad.lo.s32 	%r5098, %r6859, 384, %r5097;
	shl.b32 	%r5099, %r5098, 2;
	mov.u32 	%r5100, _ZN6kernel5shmemE;
	add.s32 	%r5101, %r5100, %r5099;
	add.s32 	%r5102, %r5101, -256;
	shl.b32 	%r5103, %r46, 4;
	add.s32 	%r5104, %r5102, %r5103;
	st.shared.v4.u32 	[%r5104+256], {%r3500, %r3534, %r1045, %r1057};
	st.shared.v4.u32 	[%r5104+1024], {%r4101, %r4135, %r1130, %r1131};
	shl.b32 	%r5105, %r46, 3;
	add.s32 	%r1193, %r5102, %r5105;
	@%p473 bra 	$L__BB0_748;

	st.shared.v2.u32 	[%r1193], {%r3389, %r3455};

$L__BB0_748:
	st.shared.v2.u32 	[%r1193+768], {%r3960, %r4041};

$L__BB0_749:
	bar.sync 	0;
	@%p279 bra 	$L__BB0_751;

	mul.lo.s32 	%r5106, %r1480, 320;
	add.s32 	%r5108, %r41, -1;
	mul.lo.s32 	%r5110, %r42, 320;
	mad.lo.s32 	%r5111, %r5106, %r5108, %r5110;
	shl.b32 	%r5112, %r5111, 2;
	mov.u32 	%r5113, _ZN6kernel5shmemE;
	add.s32 	%r5114, %r5113, %r5112;
	add.s32 	%r5115, %r5114, -256;
	shl.b32 	%r5116, %r46, 4;
	add.s32 	%r5117, %r5115, %r5116;
	ld.shared.v4.u32 	{%r7291, %r7289, %r7285, %r7284}, [%r5117+256];
	ld.shared.v4.u32 	{%r7293, %r7292, %r7287, %r7286}, [%r5117+1024];
	shl.b32 	%r5126, %r46, 3;
	add.s32 	%r5127, %r5115, %r5126;
	ld.shared.v2.u32 	{%r7290, %r7288}, [%r5127+768];

$L__BB0_751:
	setp.eq.s32 	%p520, %r42, 0;
	@%p520 bra 	$L__BB0_754;

	not.b32 	%r6862, %r41;
	add.s32 	%r6861, %r1479, %r6862;
	mad.lo.s32 	%r5133, %r1479, 384, -64;
	add.s32 	%r5135, %r42, -1;
	mul.lo.s32 	%r5136, %r5133, %r5135;
	mad.lo.s32 	%r5139, %r1948, %r1947, %r5136;
	mad.lo.s32 	%r5140, %r6861, 384, %r5139;
	shl.b32 	%r5141, %r5140, 2;
	mov.u32 	%r5142, _ZN6kernel5shmemE;
	add.s32 	%r5143, %r5142, %r5141;
	add.s32 	%r5144, %r5143, -256;
	shl.b32 	%r5145, %r46, 4;
	add.s32 	%r5146, %r5144, %r5145;
	ld.shared.v4.u32 	{%r7305, %r7304, %r7302, %r7300}, [%r5146+256];
	ld.shared.v4.u32 	{%r7299, %r7298, %r7296, %r7294}, [%r5146+1024];
	shl.b32 	%r5155, %r46, 3;
	add.s32 	%r5156, %r5144, %r5155;
	ld.shared.v2.u32 	{%r7303, %r7301}, [%r5156+768];
	@%p279 bra 	$L__BB0_754;

	add.s32 	%r6858, %r5156, 768;
	ld.shared.v2.u32 	{%r7297, %r7295}, [%r6858+768];

$L__BB0_754:
	mov.f32 	%f639, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5161, {low,high};}

	// end inline asm
	selp.b32 	%r5163, %r6958, %r5161, %p28;
	// begin inline asm
	{mul.f16x2 %r5162,%r5163,%r7083;
}
	// end inline asm
	selp.b32 	%r5166, %r6962, %r5161, %p28;
	// begin inline asm
	{mul.f16x2 %r5165,%r5166,%r7076;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5168, {low,high};}

	// end inline asm
	selp.b32 	%r5170, %r6958, %r5168, %p28;
	// begin inline asm
	{mul.f16x2 %r5169,%r5170,%r7064;
}
	// end inline asm
	selp.b32 	%r5173, %r6962, %r5168, %p28;
	// begin inline asm
	{mul.f16x2 %r5172,%r5173,%r7059;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5175, {low,high};}

	// end inline asm
	selp.b32 	%r5177, %r6958, %r5175, %p28;
	// begin inline asm
	{mul.f16x2 %r5176,%r5177,%r7051;
}
	// end inline asm
	selp.b32 	%r5180, %r6962, %r5175, %p28;
	// begin inline asm
	{mul.f16x2 %r5179,%r5180,%r7050;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5182, {low,high};}

	// end inline asm
	selp.b32 	%r5184, %r6958, %r5182, %p28;
	// begin inline asm
	{mul.f16x2 %r5183,%r5184,%r7055;
}
	// end inline asm
	selp.b32 	%r5187, %r6962, %r5182, %p28;
	// begin inline asm
	{mul.f16x2 %r5186,%r5187,%r7054;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5189, {low,high};}

	// end inline asm
	selp.b32 	%r5191, %r6958, %r5189, %p28;
	// begin inline asm
	{mul.f16x2 %r5190,%r5191,%r7053;
}
	// end inline asm
	selp.b32 	%r5194, %r6962, %r5189, %p28;
	// begin inline asm
	{mul.f16x2 %r5193,%r5194,%r7047;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5196, {low,high};}

	// end inline asm
	selp.b32 	%r5198, %r6958, %r5196, %p28;
	// begin inline asm
	{mul.f16x2 %r5197,%r5198,%r7043;
}
	// end inline asm
	selp.b32 	%r5201, %r6962, %r5196, %p28;
	// begin inline asm
	{mul.f16x2 %r5200,%r5201,%r7042;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5203, {low,high};}

	// end inline asm
	selp.b32 	%r5205, %r6958, %r5203, %p28;
	// begin inline asm
	{mul.f16x2 %r5204,%r5205,%r7041;
}
	// end inline asm
	selp.b32 	%r5208, %r6962, %r5203, %p28;
	// begin inline asm
	{mul.f16x2 %r5207,%r5208,%r7035;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5210, {low,high};}

	// end inline asm
	selp.b32 	%r5212, %r6958, %r5210, %p28;
	// begin inline asm
	{mul.f16x2 %r5211,%r5212,%r7028;
}
	// end inline asm
	selp.b32 	%r5215, %r6962, %r5210, %p28;
	// begin inline asm
	{mul.f16x2 %r5214,%r5215,%r7027;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5217, {low,high};}

	// end inline asm
	selp.b32 	%r5219, %r6958, %r5217, %p28;
	// begin inline asm
	{mul.f16x2 %r5218,%r5219,%r7247;
}
	// end inline asm
	selp.b32 	%r5222, %r6962, %r5217, %p28;
	// begin inline asm
	{mul.f16x2 %r5221,%r5222,%r7245;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5224, {low,high};}

	// end inline asm
	selp.b32 	%r5226, %r6958, %r5224, %p28;
	// begin inline asm
	{mul.f16x2 %r5225,%r5226,%r7246;
}
	// end inline asm
	selp.b32 	%r5229, %r6962, %r5224, %p28;
	// begin inline asm
	{mul.f16x2 %r5228,%r5229,%r7244;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5231, {low,high};}

	// end inline asm
	selp.b32 	%r5233, %r6958, %r5231, %p28;
	// begin inline asm
	{mul.f16x2 %r5232,%r5233,%r7020;
}
	// end inline asm
	selp.b32 	%r5236, %r6962, %r5231, %p28;
	// begin inline asm
	{mul.f16x2 %r5235,%r5236,%r7019;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5238, {low,high};}

	// end inline asm
	selp.b32 	%r5240, %r6958, %r5238, %p28;
	// begin inline asm
	{mul.f16x2 %r5239,%r5240,%r7024;
}
	// end inline asm
	selp.b32 	%r5243, %r6962, %r5238, %p28;
	// begin inline asm
	{mul.f16x2 %r5242,%r5243,%r7023;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5245, {low,high};}

	// end inline asm
	selp.b32 	%r5247, %r6958, %r5245, %p28;
	// begin inline asm
	{mul.f16x2 %r5246,%r5247,%r7022;
}
	// end inline asm
	selp.b32 	%r5250, %r6962, %r5245, %p28;
	// begin inline asm
	{mul.f16x2 %r5249,%r5250,%r7017;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5252, {low,high};}

	// end inline asm
	selp.b32 	%r5254, %r6958, %r5252, %p28;
	// begin inline asm
	{mul.f16x2 %r5253,%r5254,%r7012;
}
	// end inline asm
	selp.b32 	%r5257, %r6962, %r5252, %p28;
	// begin inline asm
	{mul.f16x2 %r5256,%r5257,%r7011;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5259, {low,high};}

	// end inline asm
	selp.b32 	%r5261, %r6958, %r5259, %p28;
	// begin inline asm
	{mul.f16x2 %r5260,%r5261,%r7014;
}
	// end inline asm
	selp.b32 	%r5264, %r6962, %r5259, %p28;
	// begin inline asm
	{mul.f16x2 %r5263,%r5264,%r7013;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5266, {low,high};}

	// end inline asm
	selp.b32 	%r5268, %r6958, %r5266, %p28;
	// begin inline asm
	{mul.f16x2 %r5267,%r5268,%r7231;
}
	// end inline asm
	selp.b32 	%r5271, %r6962, %r5266, %p28;
	// begin inline asm
	{mul.f16x2 %r5270,%r5271,%r7230;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5273, {low,high};}

	// end inline asm
	selp.b32 	%r5275, %r6958, %r5273, %p28;
	// begin inline asm
	{mul.f16x2 %r5274,%r5275,%r7229;
}
	// end inline asm
	selp.b32 	%r5278, %r6962, %r5273, %p28;
	// begin inline asm
	{mul.f16x2 %r5277,%r5278,%r7228;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5280, {low,high};}

	// end inline asm
	selp.b32 	%r5282, %r6958, %r5280, %p28;
	// begin inline asm
	{mul.f16x2 %r5281,%r5282,%r7243;
}
	// end inline asm
	selp.b32 	%r5285, %r6962, %r5280, %p28;
	// begin inline asm
	{mul.f16x2 %r5284,%r5285,%r7242;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5287, {low,high};}

	// end inline asm
	selp.b32 	%r5289, %r6958, %r5287, %p28;
	// begin inline asm
	{mul.f16x2 %r5288,%r5289,%r7006;
}
	// end inline asm
	selp.b32 	%r5292, %r6962, %r5287, %p28;
	// begin inline asm
	{mul.f16x2 %r5291,%r5292,%r7005;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5294, {low,high};}

	// end inline asm
	selp.b32 	%r5296, %r6958, %r5294, %p28;
	// begin inline asm
	{mul.f16x2 %r5295,%r5296,%r7241;
}
	// end inline asm
	selp.b32 	%r5299, %r6962, %r5294, %p28;
	// begin inline asm
	{mul.f16x2 %r5298,%r5299,%r7239;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5301, {low,high};}

	// end inline asm
	selp.b32 	%r5303, %r6958, %r5301, %p28;
	// begin inline asm
	{mul.f16x2 %r5302,%r5303,%r7240;
}
	// end inline asm
	selp.b32 	%r5306, %r6962, %r5301, %p28;
	// begin inline asm
	{mul.f16x2 %r5305,%r5306,%r7238;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5308, {low,high};}

	// end inline asm
	selp.b32 	%r5310, %r6958, %r5308, %p28;
	// begin inline asm
	{mul.f16x2 %r5309,%r5310,%r7227;
}
	// end inline asm
	selp.b32 	%r5313, %r6962, %r5308, %p28;
	// begin inline asm
	{mul.f16x2 %r5312,%r5313,%r7225;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5315, {low,high};}

	// end inline asm
	selp.b32 	%r5317, %r6958, %r5315, %p28;
	// begin inline asm
	{mul.f16x2 %r5316,%r5317,%r7226;
}
	// end inline asm
	selp.b32 	%r5320, %r6962, %r5315, %p28;
	// begin inline asm
	{mul.f16x2 %r5319,%r5320,%r7224;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f639;
  cvt.rn.f16.f32 high, %f639;
  mov.b32 %r5322, {low,high};}

	// end inline asm
	selp.b32 	%r5324, %r6958, %r5322, %p28;
	// begin inline asm
	{mul.f16x2 %r5323,%r5324,%r7237;
}
	// end inline asm
	selp.b32 	%r5327, %r6962, %r5322, %p28;
	// begin inline asm
	{mul.f16x2 %r5326,%r5327,%r7236;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5329,%r7110,%r3389;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5332,%r3500,%r3346;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5335,%r5329,%r5332;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5338,%r6872,%r5335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5341,%r5162,%r5338;
}
	// end inline asm
	selp.b32 	%r7078, %r5162, %r5341, %p28;
	// begin inline asm
	{sub.f16x2 %r5344,%r7109,%r3455;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5347,%r3534,%r3423;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5350,%r5344,%r5347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5353,%r6872,%r5350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5356,%r5165,%r5353;
}
	// end inline asm
	selp.b32 	%r7073, %r5165, %r5356, %p28;
	// begin inline asm
	{sub.f16x2 %r5359,%r7106,%r3622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5362,%r7112,%r3579;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5365,%r5359,%r5362;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5368,%r6872,%r5365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5371,%r5169,%r5368;
}
	// end inline asm
	selp.b32 	%r7082, %r5169, %r5371, %p28;
	// begin inline asm
	{sub.f16x2 %r5374,%r7105,%r3688;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5377,%r7111,%r3656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5380,%r5374,%r5377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5383,%r6872,%r5380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5386,%r5172,%r5383;
}
	// end inline asm
	selp.b32 	%r7075, %r5172, %r5386, %p28;
	// begin inline asm
	{sub.f16x2 %r5389,%r7109,%r7110;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5392,%r6957,%r5389;
}
	// end inline asm
	@%p28 bra 	$L__BB0_756;
	bra.uni 	$L__BB0_755;

$L__BB0_756:
	// begin inline asm
	{neg.f16x2 %r7306,%r5176;
}
	// end inline asm
	bra.uni 	$L__BB0_757;

$L__BB0_755:
	// begin inline asm
	{mul.f16x2 %r7306,%r6958,%r5389;
}
	// end inline asm

$L__BB0_757:
	mov.u32 	%r5403, 31;
	mov.u32 	%r5405, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5401,%r7306,%r5403,%r2043,%r5405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5406,%r5392,%r5401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5409,%r1045,%r1021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5412,%r5409,%r5406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5415,%r6872,%r5412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r5176,%r5415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5421,%r7111,%r7112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5424,%r6957,%r5421;
}
	// end inline asm
	mov.u32 	%r7307, %r5183;
	@%p28 bra 	$L__BB0_759;

	// begin inline asm
	{mul.f16x2 %r7307,%r6958,%r5421;
}
	// end inline asm

$L__BB0_759:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5433,%r7307,%r5403,%r2043,%r5405;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5438,%r5424,%r5433;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5441,%r7100,%r1021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5444,%r5438,%r5441;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5447,%r6872,%r5444;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7085,%r5183,%r5447;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5453,%r7102,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5456,%r7108,%r7112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5459,%r5453,%r5456;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5462,%r6872,%r5459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5465,%r5190,%r5462;
}
	// end inline asm
	selp.b32 	%r7083, %r5190, %r5465, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7110;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5470,%r7110,%r436,%r2043,%r5405;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5470;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5476, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5477,%r5476,%r7109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5480,%r6961,%r5477;
}
	// end inline asm
	@%p28 bra 	$L__BB0_761;
	bra.uni 	$L__BB0_760;

$L__BB0_761:
	// begin inline asm
	{neg.f16x2 %r7308,%r5179;
}
	// end inline asm
	bra.uni 	$L__BB0_762;

$L__BB0_760:
	// begin inline asm
	{mul.f16x2 %r7308,%r6962,%r5477;
}
	// end inline asm

$L__BB0_762:
	mov.u32 	%r5495, 31;
	mov.u32 	%r5519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5493,%r7308,%r5495,%r2043,%r5519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5498,%r5480,%r5493;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5501,%r1057,%r1033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5504,%r5501,%r5498;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5507,%r6872,%r5504;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7079,%r5179,%r5507;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7112;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5515,%r7112,%r436,%r2043,%r5519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5515;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5521, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5522,%r5521,%r7111;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5525,%r6961,%r5522;
}
	// end inline asm
	mov.u32 	%r7309, %r5186;
	@%p28 bra 	$L__BB0_764;

	// begin inline asm
	{mul.f16x2 %r7309,%r6962,%r5522;
}
	// end inline asm

$L__BB0_764:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5536,%r7309,%r5495,%r2043,%r5519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5541,%r5525,%r5536;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5544,%r7099,%r1033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5547,%r5541,%r5544;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5550,%r6872,%r5547;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7084,%r5186,%r5550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5556,%r7101,%r7109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5559,%r7107,%r7111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5562,%r5556,%r5559;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5565,%r6872,%r5562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5568,%r5193,%r5565;
}
	// end inline asm
	selp.b32 	%r7076, %r5193, %r5568, %p28;
	// begin inline asm
	{sub.f16x2 %r5571,%r7107,%r7108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5574,%r6957,%r5571;
}
	// end inline asm
	mov.u32 	%r7310, %r5197;
	@%p28 bra 	$L__BB0_766;

	// begin inline asm
	{mul.f16x2 %r7310,%r6958,%r5571;
}
	// end inline asm

$L__BB0_766:
	mov.u32 	%r5585, 31;
	mov.u32 	%r5624, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5583,%r7310,%r5585,%r2043,%r5624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5588,%r5574,%r5583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5591,%r7094,%r1045;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5594,%r5588,%r5591;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5597,%r6872,%r5594;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7071,%r5197,%r5597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5603,%r7096,%r3960;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5606,%r4101,%r7108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5609,%r5603,%r5606;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5612,%r6872,%r5609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5615,%r5204,%r5612;
}
	// end inline asm
	selp.b32 	%r7069, %r5204, %r5615, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7108;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5620,%r7108,%r436,%r2043,%r5624;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5620;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5626, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5627,%r5626,%r7107;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5630,%r6961,%r5627;
}
	// end inline asm
	mov.u32 	%r7311, %r5200;
	@%p28 bra 	$L__BB0_768;

	// begin inline asm
	{mul.f16x2 %r7311,%r6962,%r5627;
}
	// end inline asm

$L__BB0_768:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5641,%r7311,%r5585,%r2043,%r5624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5646,%r5630,%r5641;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5649,%r7093,%r1057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5652,%r5646,%r5649;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5655,%r6872,%r5652;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7070,%r5200,%r5655;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5661,%r7095,%r4041;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5664,%r4135,%r7107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5667,%r5661,%r5664;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5670,%r6872,%r5667;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5673,%r5207,%r5670;
}
	// end inline asm
	selp.b32 	%r7067, %r5207, %r5673, %p28;
	// begin inline asm
	{sub.f16x2 %r5676,%r7105,%r7106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5679,%r6957,%r5676;
}
	// end inline asm
	@%p28 bra 	$L__BB0_770;
	bra.uni 	$L__BB0_769;

$L__BB0_770:
	// begin inline asm
	{neg.f16x2 %r7312,%r5211;
}
	// end inline asm
	bra.uni 	$L__BB0_771;

$L__BB0_769:
	// begin inline asm
	{mul.f16x2 %r7312,%r6958,%r5676;
}
	// end inline asm

$L__BB0_771:
	mov.u32 	%r5692, 31;
	mov.u32 	%r5694, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5690,%r7312,%r5692,%r2043,%r5694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5695,%r5679,%r5690;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5698,%r7100,%r1075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5701,%r5698,%r5695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5704,%r6872,%r5701;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7061,%r5211,%r5704;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5710,%r7304,%r7305;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5713,%r6957,%r5710;
}
	// end inline asm
	mov.u32 	%r7313, %r5218;
	@%p28 bra 	$L__BB0_773;

	// begin inline asm
	{mul.f16x2 %r7313,%r6958,%r5710;
}
	// end inline asm

$L__BB0_773:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5722,%r7313,%r5692,%r2043,%r5694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5727,%r5713,%r5722;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5730,%r7302,%r1075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5733,%r5727,%r5730;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5736,%r6872,%r5733;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r5218,%r5736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5742,%r7303,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5745,%r7104,%r7305;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5748,%r5742,%r5745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5751,%r6872,%r5748;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5754,%r5225,%r5751;
}
	// end inline asm
	selp.b32 	%r7064, %r5225, %r5754, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7106;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5759,%r7106,%r436,%r2043,%r5694;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5759;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5765, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5766,%r5765,%r7105;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5769,%r6961,%r5766;
}
	// end inline asm
	@%p28 bra 	$L__BB0_775;
	bra.uni 	$L__BB0_774;

$L__BB0_775:
	// begin inline asm
	{neg.f16x2 %r7314,%r5214;
}
	// end inline asm
	bra.uni 	$L__BB0_776;

$L__BB0_774:
	// begin inline asm
	{mul.f16x2 %r7314,%r6962,%r5766;
}
	// end inline asm

$L__BB0_776:
	mov.u32 	%r5784, 31;
	mov.u32 	%r5808, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5782,%r7314,%r5784,%r2043,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5787,%r5769,%r5782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5790,%r7099,%r1081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r5790,%r5787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r6872,%r5793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7060,%r5214,%r5796;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7305;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5804,%r7305,%r436,%r2043,%r5808;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5804;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5810, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5811,%r5810,%r7304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5814,%r6961,%r5811;
}
	// end inline asm
	mov.u32 	%r7315, %r5221;
	@%p28 bra 	$L__BB0_778;

	// begin inline asm
	{mul.f16x2 %r7315,%r6962,%r5811;
}
	// end inline asm

$L__BB0_778:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5825,%r7315,%r5784,%r2043,%r5808;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5830,%r5814,%r5825;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5833,%r7300,%r1081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r5830,%r5833;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5839,%r6872,%r5836;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7065,%r5221,%r5839;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5845,%r7301,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5848,%r7103,%r7304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5851,%r5845,%r5848;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5854,%r6872,%r5851;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5857,%r5228,%r5854;
}
	// end inline asm
	selp.b32 	%r7059, %r5228, %r5857, %p28;
	// begin inline asm
	{sub.f16x2 %r5860,%r7101,%r7102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5863,%r6957,%r5860;
}
	// end inline asm
	@%p28 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7316,%r5232;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7316,%r6958,%r5860;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r5876, 31;
	mov.u32 	%r5878, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5874,%r7316,%r5876,%r2043,%r5878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5879,%r5863,%r5874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5882,%r7094,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r5882,%r5879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5888,%r6872,%r5885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7051,%r5232,%r5888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5894,%r7103,%r7104;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5897,%r6957,%r5894;
}
	// end inline asm
	mov.u32 	%r7317, %r5239;
	@%p28 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7317,%r6958,%r5894;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5906,%r7317,%r5876,%r2043,%r5878;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5911,%r5897,%r5906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5914,%r7090,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5917,%r5911,%r5914;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5920,%r6872,%r5917;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7055,%r5239,%r5920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5926,%r7092,%r7102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5929,%r7098,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5932,%r5926,%r5929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5935,%r6872,%r5932;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5938,%r5246,%r5935;
}
	// end inline asm
	selp.b32 	%r7053, %r5246, %r5938, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7102;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5943,%r7102,%r436,%r2043,%r5878;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5943;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5949, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5950,%r5949,%r7101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5953,%r6961,%r5950;
}
	// end inline asm
	@%p28 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7318,%r5235;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7318,%r6962,%r5950;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r5968, 31;
	mov.u32 	%r5992, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5966,%r7318,%r5968,%r2043,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5953,%r5966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5974,%r7093,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r5974,%r5971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5980,%r6872,%r5977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7050,%r5235,%r5980;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7104;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5988,%r7104,%r436,%r2043,%r5992;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5988;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5994, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5995,%r5994,%r7103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5998,%r6961,%r5995;
}
	// end inline asm
	mov.u32 	%r7319, %r5242;
	@%p28 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7319,%r6962,%r5995;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6009,%r7319,%r5968,%r2043,%r5992;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6014,%r5998,%r6009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6017,%r7089,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6020,%r6014,%r6017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6023,%r6872,%r6020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7054,%r5242,%r6023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6029,%r7091,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6032,%r7097,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6035,%r6029,%r6032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6038,%r6872,%r6035;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6041,%r5249,%r6038;
}
	// end inline asm
	selp.b32 	%r7047, %r5249, %r6041, %p28;
	// begin inline asm
	{sub.f16x2 %r6044,%r7095,%r7096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6047,%r6957,%r6044;
}
	// end inline asm
	@%p28 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7320,%r5253;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7320,%r6958,%r6044;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6060, 31;
	mov.u32 	%r6062, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6058,%r7320,%r6060,%r2043,%r6062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6063,%r6047,%r6058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6066,%r1130,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6069,%r6066,%r6063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6072,%r6872,%r6069;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7039,%r5253,%r6072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6078,%r7097,%r7098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6081,%r6957,%r6078;
}
	// end inline asm
	mov.u32 	%r7321, %r5260;
	@%p28 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7321,%r6958,%r6078;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6090,%r7321,%r6060,%r2043,%r6062;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6095,%r6081,%r6090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6098,%r7088,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6101,%r6095,%r6098;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6104,%r6872,%r6101;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7043,%r5260,%r6104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6110,%r7290,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6113,%r7293,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6116,%r6110,%r6113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6119,%r6872,%r6116;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6122,%r5267,%r6119;
}
	// end inline asm
	selp.b32 	%r7041, %r5267, %r6122, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7096;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6127,%r7096,%r436,%r2043,%r6062;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6127;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6133, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6134,%r6133,%r7095;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6137,%r6961,%r6134;
}
	// end inline asm
	@%p28 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7322,%r5256;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7322,%r6962,%r6134;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6152, 31;
	mov.u32 	%r6176, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6150,%r7322,%r6152,%r2043,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6155,%r6137,%r6150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6158,%r1131,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6161,%r6158,%r6155;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6164,%r6872,%r6161;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7038,%r5256,%r6164;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7098;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6172,%r7098,%r436,%r2043,%r6176;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6172;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6178, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6179,%r6178,%r7097;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6182,%r6961,%r6179;
}
	// end inline asm
	mov.u32 	%r7323, %r5263;
	@%p28 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7323,%r6962,%r6179;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6193,%r7323,%r6152,%r2043,%r6176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6198,%r6182,%r6193;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6201,%r7087,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6204,%r6198,%r6201;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6207,%r6872,%r6204;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7042,%r5263,%r6207;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6213,%r7288,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6216,%r7292,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6219,%r6213,%r6216;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6222,%r6872,%r6219;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6225,%r5270,%r6222;
}
	// end inline asm
	selp.b32 	%r7035, %r5270, %r6225, %p28;
	// begin inline asm
	{sub.f16x2 %r6228,%r7292,%r7293;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6231,%r6957,%r6228;
}
	// end inline asm
	mov.u32 	%r7324, %r5274;
	@%p28 bra 	$L__BB0_800;

	// begin inline asm
	{mul.f16x2 %r7324,%r6958,%r6228;
}
	// end inline asm

$L__BB0_800:
	mov.u32 	%r6242, 31;
	mov.u32 	%r6266, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6240,%r7324,%r6242,%r2043,%r6266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6245,%r6231,%r6240;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6248,%r7287,%r1130;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6251,%r6245,%r6248;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6254,%r6872,%r6251;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7032,%r5274,%r6254;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7293;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6262,%r7293,%r436,%r2043,%r6266;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6262;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6268, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6269,%r6268,%r7292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6272,%r6961,%r6269;
}
	// end inline asm
	mov.u32 	%r7325, %r5277;
	@%p28 bra 	$L__BB0_802;

	// begin inline asm
	{mul.f16x2 %r7325,%r6962,%r6269;
}
	// end inline asm

$L__BB0_802:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6283,%r7325,%r6242,%r2043,%r6266;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6288,%r6272,%r6283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6291,%r7286,%r1131;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6294,%r6288,%r6291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6297,%r6872,%r6294;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7031,%r5277,%r6297;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6303,%r7301,%r7303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6306,%r6957,%r6303;
}
	// end inline asm
	@%p28 bra 	$L__BB0_804;
	bra.uni 	$L__BB0_803;

$L__BB0_804:
	// begin inline asm
	{neg.f16x2 %r7326,%r5281;
}
	// end inline asm
	bra.uni 	$L__BB0_805;

$L__BB0_803:
	// begin inline asm
	{mul.f16x2 %r7326,%r6958,%r6303;
}
	// end inline asm

$L__BB0_805:
	mov.u32 	%r6319, 31;
	mov.u32 	%r6343, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6317,%r7326,%r6319,%r2043,%r6343;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6322,%r6306,%r6317;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6325,%r7090,%r7302;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6328,%r6325,%r6322;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6331,%r6872,%r6328;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7028,%r5281,%r6331;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7303;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6339,%r7303,%r436,%r2043,%r6343;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6339;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6345, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6346,%r6345,%r7301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6349,%r6961,%r6346;
}
	// end inline asm
	@%p28 bra 	$L__BB0_807;
	bra.uni 	$L__BB0_806;

$L__BB0_807:
	// begin inline asm
	{neg.f16x2 %r7327,%r5284;
}
	// end inline asm
	bra.uni 	$L__BB0_808;

$L__BB0_806:
	// begin inline asm
	{mul.f16x2 %r7327,%r6962,%r6346;
}
	// end inline asm

$L__BB0_808:
	mov.u32 	%r6364, 31;
	mov.u32 	%r6366, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6362,%r7327,%r6364,%r2043,%r6366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6367,%r6349,%r6362;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6370,%r7089,%r7300;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6373,%r6370,%r6367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6376,%r6872,%r6373;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7027,%r5284,%r6376;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6382,%r7091,%r7092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6385,%r6957,%r6382;
}
	// end inline asm
	@%p28 bra 	$L__BB0_810;
	bra.uni 	$L__BB0_809;

$L__BB0_810:
	// begin inline asm
	{neg.f16x2 %r7328,%r5288;
}
	// end inline asm
	bra.uni 	$L__BB0_811;

$L__BB0_809:
	// begin inline asm
	{mul.f16x2 %r7328,%r6958,%r6382;
}
	// end inline asm

$L__BB0_811:
	mov.u32 	%r6398, 31;
	mov.u32 	%r6400, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6396,%r7328,%r6398,%r2043,%r6400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6401,%r6385,%r6396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6404,%r7088,%r7090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6407,%r6404,%r6401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r6872,%r6407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7020,%r5288,%r6410;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6416,%r7298,%r7299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6419,%r6957,%r6416;
}
	// end inline asm
	mov.u32 	%r7329, %r5295;
	@%p28 bra 	$L__BB0_813;

	// begin inline asm
	{mul.f16x2 %r7329,%r6958,%r6416;
}
	// end inline asm

$L__BB0_813:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6428,%r7329,%r6398,%r2043,%r6400;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6433,%r6419,%r6428;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6436,%r7296,%r7090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6439,%r6433,%r6436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6442,%r6872,%r6439;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r5295,%r6442;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6448,%r7297,%r7092;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6451,%r7291,%r7299;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6454,%r6448,%r6451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6457,%r6872,%r6454;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6460,%r5302,%r6457;
}
	// end inline asm
	selp.b32 	%r7022, %r5302, %r6460, %p28;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7092;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6465,%r7092,%r436,%r2043,%r6400;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6465;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6471, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6472,%r6471,%r7091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6475,%r6961,%r6472;
}
	// end inline asm
	@%p28 bra 	$L__BB0_815;
	bra.uni 	$L__BB0_814;

$L__BB0_815:
	// begin inline asm
	{neg.f16x2 %r7330,%r5291;
}
	// end inline asm
	bra.uni 	$L__BB0_816;

$L__BB0_814:
	// begin inline asm
	{mul.f16x2 %r7330,%r6962,%r6472;
}
	// end inline asm

$L__BB0_816:
	mov.u32 	%r6490, 31;
	mov.u32 	%r6514, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6488,%r7330,%r6490,%r2043,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6475,%r6488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6496,%r7087,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6499,%r6496,%r6493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6502,%r6872,%r6499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r5291,%r6502;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7299;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6510,%r7299,%r436,%r2043,%r6514;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6510;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6516, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6517,%r6516,%r7298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6520,%r6961,%r6517;
}
	// end inline asm
	mov.u32 	%r7331, %r5298;
	@%p28 bra 	$L__BB0_818;

	// begin inline asm
	{mul.f16x2 %r7331,%r6962,%r6517;
}
	// end inline asm

$L__BB0_818:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6531,%r7331,%r6490,%r2043,%r6514;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6536,%r6520,%r6531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6539,%r7294,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6542,%r6536,%r6539;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6545,%r6872,%r6542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r5298,%r6545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6551,%r7295,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6554,%r7289,%r7298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6557,%r6551,%r6554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6560,%r6872,%r6557;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6563,%r5305,%r6560;
}
	// end inline asm
	selp.b32 	%r7017, %r5305, %r6563, %p28;
	// begin inline asm
	{sub.f16x2 %r6566,%r7288,%r7290;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6569,%r6957,%r6566;
}
	// end inline asm
	@%p28 bra 	$L__BB0_820;
	bra.uni 	$L__BB0_819;

$L__BB0_820:
	// begin inline asm
	{neg.f16x2 %r7332,%r5309;
}
	// end inline asm
	bra.uni 	$L__BB0_821;

$L__BB0_819:
	// begin inline asm
	{mul.f16x2 %r7332,%r6958,%r6566;
}
	// end inline asm

$L__BB0_821:
	mov.u32 	%r6582, 31;
	mov.u32 	%r6584, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6580,%r7332,%r6582,%r2043,%r6584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6585,%r6569,%r6580;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6588,%r7287,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6591,%r6588,%r6585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6594,%r6872,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7012,%r5309,%r6594;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6600,%r7289,%r7291;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6603,%r6957,%r6600;
}
	// end inline asm
	mov.u32 	%r7333, %r5316;
	@%p28 bra 	$L__BB0_823;

	// begin inline asm
	{mul.f16x2 %r7333,%r6958,%r6600;
}
	// end inline asm

$L__BB0_823:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6612,%r7333,%r6582,%r2043,%r6584;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6617,%r6603,%r6612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6620,%r7285,%r7088;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6623,%r6617,%r6620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6626,%r6872,%r6623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7014,%r5316,%r6626;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7290;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6634,%r7290,%r436,%r2043,%r6584;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6634;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6640, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6641,%r6640,%r7288;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6644,%r6961,%r6641;
}
	// end inline asm
	@%p28 bra 	$L__BB0_825;
	bra.uni 	$L__BB0_824;

$L__BB0_825:
	// begin inline asm
	{neg.f16x2 %r7334,%r5312;
}
	// end inline asm
	bra.uni 	$L__BB0_826;

$L__BB0_824:
	// begin inline asm
	{mul.f16x2 %r7334,%r6962,%r6641;
}
	// end inline asm

$L__BB0_826:
	mov.u32 	%r6659, 31;
	mov.u32 	%r6683, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6657,%r7334,%r6659,%r2043,%r6683;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6662,%r6644,%r6657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6665,%r7286,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6668,%r6665,%r6662;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6671,%r6872,%r6668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7011,%r5312,%r6671;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7291;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6679,%r7291,%r436,%r2043,%r6683;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6679;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6685, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6686,%r6685,%r7289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6689,%r6961,%r6686;
}
	// end inline asm
	mov.u32 	%r7335, %r5319;
	@%p28 bra 	$L__BB0_828;

	// begin inline asm
	{mul.f16x2 %r7335,%r6962,%r6686;
}
	// end inline asm

$L__BB0_828:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6700,%r7335,%r6659,%r2043,%r6683;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6705,%r6689,%r6700;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6708,%r7284,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6711,%r6705,%r6708;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6714,%r6872,%r6711;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7013,%r5319,%r6714;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6720,%r7295,%r7297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6723,%r6957,%r6720;
}
	// end inline asm
	@%p28 bra 	$L__BB0_830;
	bra.uni 	$L__BB0_829;

$L__BB0_830:
	// begin inline asm
	{neg.f16x2 %r7336,%r5323;
}
	// end inline asm
	bra.uni 	$L__BB0_831;

$L__BB0_829:
	// begin inline asm
	{mul.f16x2 %r7336,%r6958,%r6720;
}
	// end inline asm

$L__BB0_831:
	mov.u32 	%r6736, 31;
	mov.u32 	%r6760, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6734,%r7336,%r6736,%r2043,%r6760;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6739,%r6723,%r6734;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6742,%r7285,%r7296;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6745,%r6742,%r6739;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6748,%r6872,%r6745;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7006,%r5323,%r6748;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7297;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6756,%r7297,%r436,%r2043,%r6760;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6756;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6762, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6763,%r6762,%r7295;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6766,%r6961,%r6763;
}
	// end inline asm
	@%p28 bra 	$L__BB0_833;
	bra.uni 	$L__BB0_832;

$L__BB0_833:
	// begin inline asm
	{neg.f16x2 %r7337,%r5326;
}
	// end inline asm
	bra.uni 	$L__BB0_834;

$L__BB0_832:
	// begin inline asm
	{mul.f16x2 %r7337,%r6962,%r6763;
}
	// end inline asm

$L__BB0_834:
	mov.u32 	%r6781, 31;
	mov.u32 	%r6783, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6779,%r7337,%r6781,%r2043,%r6783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6784,%r6766,%r6779;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6787,%r7284,%r7294;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6790,%r6787,%r6784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6793,%r6872,%r6790;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7005,%r5326,%r6793;
}
	// end inline asm
	bar.sync 	0;
	@%p473 bra 	$L__BB0_837;

	setp.ne.s32 	%p512, %r42, %r1952;
	shl.b32 	%r6803, %r42, 8;
	shl.b32 	%r6807, %r1480, 8;
	or.b32  	%r6808, %r6807, 128;
	mad.lo.s32 	%r6810, %r6808, %r41, %r1955;
	add.s32 	%r6811, %r6810, %r6803;
	shl.b32 	%r6812, %r6811, 2;
	mov.u32 	%r6813, _ZN6kernel5shmemE;
	add.s32 	%r6814, %r6813, %r6812;
	shl.b32 	%r6815, %r46, 4;
	add.s32 	%r1475, %r6814, %r6815;
	st.shared.v4.u32 	[%r1475], {%r7066, %r7065, %r7061, %r7060};
	st.shared.v4.u32 	[%r1475+512], {%r7082, %r7075, %r7085, %r7084};
	@%p512 bra 	$L__BB0_837;

	st.shared.v4.u32 	[%r1475+1024], {%r7080, %r7079, %r7078, %r7073};

$L__BB0_837:
	@%p474 bra 	$L__BB0_839;

	not.b32 	%r6864, %r41;
	add.s32 	%r6863, %r1479, %r6864;
	mul.lo.s32 	%r6821, %r6863, 384;
	mad.lo.s32 	%r6822, %r69, %r42, %r6821;
	mad.lo.s32 	%r6825, %r1950, %r1952, %r6822;
	mad.lo.s32 	%r6828, %r1948, %r1947, %r6825;
	shl.b32 	%r6829, %r6828, 2;
	mov.u32 	%r6830, _ZN6kernel5shmemE;
	add.s32 	%r6831, %r6830, %r6829;
	shl.b32 	%r6832, %r46, 4;
	add.s32 	%r6833, %r6831, %r6832;
	st.shared.v4.u32 	[%r6833], {%r7080, %r7079, %r7078, %r7073};
	st.shared.v4.u32 	[%r6833+512], {%r7071, %r7070, %r7039, %r7038};
	st.shared.v4.u32 	[%r6833+1024], {%r7069, %r7067, %r7032, %r7031};

$L__BB0_839:
	rem.s32 	%r6834, %r7113, %r1483;
	setp.eq.s32 	%p514, %r6834, 0;
	@%p514 bra 	$L__BB0_841;

	bar.sync 	0;
	bra.uni 	$L__BB0_848;

$L__BB0_841:
	@%p218 bra 	$L__BB0_843;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_843:
	bar.sync 	0;
	@%p219 bra 	$L__BB0_847;

	membar.gl;
	setp.eq.s32 	%p517, %r430, %r431;
	mov.u32 	%r6851, -2147483647;
	sub.s32 	%r6852, %r6851, %r429;
	selp.b32 	%r6840, %r6852, 1, %p517;
	// begin inline asm
	atom.add.release.gpu.u32 %r6839,[%rd28],%r6840;
	// end inline asm

$L__BB0_845:
	ld.volatile.u32 	%r6853, [%rd28];
	xor.b32  	%r6854, %r6853, %r6839;
	setp.gt.s32 	%p518, %r6854, -1;
	@%p518 bra 	$L__BB0_845;

	// begin inline asm
	ld.acquire.gpu.u32 %r6855,[%rd28];
	// end inline asm

$L__BB0_847:
	bar.sync 	0;

$L__BB0_848:
	add.s32 	%r7113, %r7113, 1;
	setp.lt.s32 	%p519, %r7113, %r49;
	mov.u32 	%r7033, %r483;
	mov.u32 	%r7034, %r7202;
	mov.u32 	%r7037, %r484;
	mov.u32 	%r7040, %r7204;
	mov.u32 	%r7045, %r489;
	mov.u32 	%r7049, %r492;
	mov.u32 	%r7057, %r7215;
	mov.u32 	%r7062, %r7217;
	mov.u32 	%r7068, %r510;
	mov.u32 	%r7072, %r518;
	mov.u32 	%r7074, %r520;
	mov.u32 	%r7077, %r522;
	mov.u32 	%r7081, %r526;
	mov.u32 	%r7086, %r530;
	@%p519 bra 	$L__BB0_332;

$L__BB0_849:
	ret;

}

