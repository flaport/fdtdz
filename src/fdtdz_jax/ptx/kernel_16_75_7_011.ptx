//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<321>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7185>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1432, %r1433}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1434, %r1435}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1436, %r1437}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1438, %r1439}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1440, %r1441}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1442, %r1443}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1444, %r1445}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	mov.u32 	%r23, %tid.y;
	mov.u32 	%r24, %tid.z;
	mov.u32 	%r25, %ctaid.y;
	mov.u32 	%r26, %ctaid.z;
	mov.u32 	%r1446, 32;
	sub.s32 	%r27, %r1446, %r1439;
	mov.u32 	%r28, %tid.x;
	setp.le.s32 	%p11, %r27, %r28;
	add.s32 	%r1447, %r1445, -1;
	mad.lo.s32 	%r1448, %r1447, %r1444, %r1443;
	add.s32 	%r1449, %r1438, %r1437;
	add.s32 	%r1450, %r1449, %r1448;
	add.s32 	%r1451, %r1450, 1;
	mul.lo.s32 	%r1452, %r1432, %r1434;
	shl.b32 	%r29, %r1452, 1;
	shl.b32 	%r1453, %r1452, 2;
	div.s32 	%r1454, %r1451, %r1453;
	add.s32 	%r1455, %r1454, 1;
	mul.lo.s32 	%r1456, %r1455, %r1438;
	mul.lo.s32 	%r1457, %r1433, %r1435;
	shl.b32 	%r30, %r1457, 1;
	div.s32 	%r1458, %r1456, %r30;
	add.s32 	%r1459, %r1458, 1;
	mul.lo.s32 	%r31, %r1459, %r1437;
	@%p11 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6713, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6713, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1462, %r1434, %r26, %r25;
	mad.lo.s32 	%r1463, %r1462, %r1433, %r24;
	mad.lo.s32 	%r1464, %r1463, %r1432, %r23;
	shl.b32 	%r35, %r1464, 5;
	add.s32 	%r6718, %r35, %r28;
	mul.lo.s32 	%r1465, %r1457, %r1452;
	shl.b32 	%r39, %r1465, 5;
	shl.b32 	%r1466, %r1439, 2;
	mov.u32 	%r1467, 128;
	sub.s32 	%r40, %r1467, %r1466;
	mul.lo.s32 	%r1468, %r1438, %r1437;
	mul.lo.s32 	%r1469, %r1468, %r1445;
	mul.lo.s32 	%r1470, %r1469, %r40;
	mul.lo.s32 	%r41, %r1470, 3;
	setp.ge.s32 	%p12, %r6718, %r41;
	@%p12 bra 	$L__BB0_10;

	not.b32 	%r1471, %r28;
	add.s32 	%r1472, %r41, %r1471;
	sub.s32 	%r1473, %r1472, %r35;
	mul.lo.s32 	%r1474, %r1457, %r1432;
	mul.lo.s32 	%r1475, %r1474, %r1434;
	shl.b32 	%r1476, %r1475, 5;
	div.u32 	%r42, %r1473, %r1476;
	add.s32 	%r1477, %r42, 1;
	and.b32  	%r6715, %r1477, 3;
	setp.eq.s32 	%p13, %r6715, 0;
	mov.u32 	%r6716, %r6718;
	@%p13 bra 	$L__BB0_7;

	mov.u32 	%r6716, %r6718;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6716, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1478, 0;
	st.global.u32 	[%rd31], %r1478;
	add.s32 	%r6716, %r6716, %r39;
	add.s32 	%r6715, %r6715, -1;
	setp.ne.s32 	%p14, %r6715, 0;
	@%p14 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p15, %r42, 3;
	@%p15 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r39, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6716, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1479, 0;
	st.global.u32 	[%rd33], %r1479;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1479;
	add.s32 	%r1480, %r6716, %r39;
	add.s32 	%r1481, %r1480, %r39;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1479;
	add.s32 	%r1482, %r1481, %r39;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1479;
	add.s32 	%r6716, %r1482, %r39;
	setp.lt.s32 	%p16, %r6716, %r41;
	@%p16 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1483, %r1438, %r29;
	div.s32 	%r1484, %r1483, %r30;
	mul.lo.s32 	%r1485, %r1484, %r1437;
	sub.s32 	%r1486, %r1485, %r29;
	sub.s32 	%r1487, %r1437, %r30;
	mul.lo.s32 	%r1488, %r1487, %r1434;
	mul.lo.s32 	%r51, %r1432, 384;
	add.s32 	%r1489, %r51, %r51;
	add.s32 	%r1490, %r1489, 128;
	mul.lo.s32 	%r1492, %r1457, 768;
	mul.lo.s32 	%r1493, %r1488, %r1490;
	mad.lo.s32 	%r52, %r1492, %r1486, %r1493;
	bra.uni 	$L__BB0_11;

$L__BB0_628:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6697, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6718, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6697;
	add.s32 	%r6718, %r6718, %r39;

$L__BB0_11:
	setp.lt.s32 	%p17, %r6718, %r52;
	@%p17 bra 	$L__BB0_628;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6760, %r1432, %r25, %r23;
	mul.lo.s32 	%r56, %r1433, %r26;
	add.s32 	%r57, %r56, %r24;
	setp.ge.s32 	%p18, %r6760, %r1437;
	@%p18 bra 	$L__BB0_36;

	setp.gt.s32 	%p19, %r27, %r28;
	mov.u32 	%r1494, 31;
	sub.s32 	%r1495, %r1494, %r28;
	selp.b32 	%r1496, %r28, %r1495, %p19;
	shl.b32 	%r1497, %r1496, 2;
	mov.u32 	%r1498, 2;
	sub.s32 	%r58, %r1497, %r1440;
	sub.s32 	%r1499, %r1498, %r1440;
	add.s32 	%r59, %r1499, %r1497;
	shl.b32 	%r60, %r1468, 6;
	add.s32 	%r61, %r1437, -1;
	add.s32 	%r62, %r58, 1;
	add.s32 	%r63, %r59, 1;
	shl.b32 	%r64, %r28, 1;
	or.b32  	%r65, %r64, 1;
	shr.u32 	%r1501, %r65, 31;
	add.s32 	%r1502, %r65, %r1501;
	shr.s32 	%r67, %r1502, 1;
	and.b32  	%r1503, %r1502, -2;
	sub.s32 	%r1504, %r65, %r1503;
	add.s32 	%r66, %r1504, %r60;
	rem.s32 	%r1539, %r62, %r40;
	add.s32 	%r1540, %r1539, %r40;
	rem.s32 	%r90, %r1540, %r40;
	rem.s32 	%r1541, %r63, %r40;
	add.s32 	%r1542, %r1541, %r40;
	rem.s32 	%r91, %r1542, %r40;
	mov.u32 	%r6719, %r6760;

$L__BB0_14:
	setp.ge.s32 	%p20, %r57, %r1438;
	@%p20 bra 	$L__BB0_35;

	add.s32 	%r69, %r61, %r6719;
	rem.s32 	%r1505, %r58, %r40;
	add.s32 	%r1506, %r1505, %r40;
	rem.s32 	%r70, %r1506, %r40;
	rem.s32 	%r1507, %r59, %r40;
	add.s32 	%r1508, %r1507, %r40;
	rem.s32 	%r71, %r1508, %r40;
	mul.lo.s32 	%r72, %r6719, %r1438;
	add.s32 	%r1509, %r1437, %r6719;
	mul.lo.s32 	%r73, %r1509, %r1438;
	add.s32 	%r1510, %r1509, %r1437;
	mul.lo.s32 	%r74, %r1510, %r1438;
	mov.u32 	%r6720, %r57;

$L__BB0_16:
	mul.lo.s32 	%r76, %r6720, %r1437;
	add.s32 	%r77, %r76, %r6719;
	shl.b32 	%r78, %r77, 6;
	@%p19 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1513, %r72, %r6720;
	mul.lo.s32 	%r1514, %r1513, %r40;
	add.s32 	%r1515, %r1514, %r70;
	mul.wide.s32 	%rd41, %r1515, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1516, %r1514, %r71;
	mul.wide.s32 	%rd43, %r1516, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6721, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6721, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r82, %r77, 5;
	add.s32 	%r1517, %r82, %r28;
	shl.b32 	%r1518, %r1517, 2;
	add.s32 	%r1519, %r60, %r1518;
	mul.wide.s32 	%rd45, %r1519, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6721;
	@%p19 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1522, %r73, %r6720;
	mul.lo.s32 	%r1523, %r1522, %r40;
	add.s32 	%r1524, %r1523, %r70;
	mul.wide.s32 	%rd47, %r1524, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1525, %r1523, %r71;
	mul.wide.s32 	%rd49, %r1525, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6722, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6722, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1526, %r64, %r78;
	mul.wide.s32 	%rd51, %r1526, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6722;
	@%p19 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1529, %r74, %r6720;
	mul.lo.s32 	%r1530, %r1529, %r40;
	add.s32 	%r1531, %r1530, %r70;
	mul.wide.s32 	%rd53, %r1531, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1532, %r1530, %r71;
	mul.wide.s32 	%rd55, %r1532, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6723, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6723, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1533, %r69, %r1437;
	add.s32 	%r1534, %r1533, %r76;
	shl.b32 	%r89, %r1534, 5;
	add.s32 	%r1535, %r89, %r28;
	shl.b32 	%r1536, %r1535, 2;
	add.s32 	%r1537, %r60, %r1536;
	add.s32 	%r1538, %r1537, 2;
	mul.wide.s32 	%rd57, %r1538, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6723;
	@%p19 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1545, %r72, %r6720;
	mul.lo.s32 	%r1546, %r1545, %r40;
	add.s32 	%r1547, %r1546, %r90;
	mul.wide.s32 	%rd59, %r1547, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1548, %r1546, %r91;
	mul.wide.s32 	%rd61, %r1548, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6724, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6724, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1549, %r82, %r67;
	shl.b32 	%r1550, %r1549, 2;
	add.s32 	%r1551, %r66, %r1550;
	mul.wide.s32 	%rd63, %r1551, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6724;
	@%p19 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1554, %r73, %r6720;
	mul.lo.s32 	%r1555, %r1554, %r40;
	add.s32 	%r1556, %r1555, %r90;
	mul.wide.s32 	%rd65, %r1556, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1557, %r1555, %r91;
	mul.wide.s32 	%rd67, %r1557, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6725, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6725, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1558, %r65, %r78;
	mul.wide.s32 	%rd69, %r1558, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6725;
	@%p19 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1561, %r74, %r6720;
	mul.lo.s32 	%r1562, %r1561, %r40;
	add.s32 	%r1563, %r1562, %r90;
	mul.wide.s32 	%rd71, %r1563, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1564, %r1562, %r91;
	mul.wide.s32 	%rd73, %r1564, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6726, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6726, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1565, %r89, %r67;
	shl.b32 	%r1566, %r1565, 2;
	add.s32 	%r1567, %r66, %r1566;
	add.s32 	%r1568, %r1567, 2;
	mul.wide.s32 	%rd75, %r1568, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6726;
	add.s32 	%r6720, %r6720, %r1457;
	setp.lt.s32 	%p27, %r6720, %r1438;
	@%p27 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6719, %r6719, %r1452;
	setp.lt.s32 	%p28, %r6719, %r1437;
	@%p28 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p18 bra 	$L__BB0_120;

	shl.b32 	%r103, %r57, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6727, %r6760;

$L__BB0_38:
	setp.ge.s32 	%p30, %r103, %r1438;
	@%p30 bra 	$L__BB0_119;

	mov.u32 	%r6728, %r103;

$L__BB0_40:
	setp.ne.s32 	%p31, %r28, 0;
	@%p31 bra 	$L__BB0_118;

	shr.u32 	%r1570, %r6728, 31;
	add.s32 	%r1571, %r6728, %r1570;
	shr.s32 	%r1572, %r1571, 1;
	mad.lo.s32 	%r1573, %r1572, %r1437, %r6727;
	shl.b32 	%r107, %r1573, 5;
	add.s32 	%r108, %r6728, -2;
	mul.lo.s32 	%r109, %r108, %r1437;
	add.s32 	%r1574, %r1438, %r108;
	mul.lo.s32 	%r110, %r1574, %r1437;
	add.s32 	%r1575, %r1574, %r1438;
	mul.lo.s32 	%r111, %r1575, %r1437;
	add.s32 	%r112, %r109, %r1437;
	add.s32 	%r113, %r6728, -1;
	add.s32 	%r1576, %r1438, %r113;
	mul.lo.s32 	%r114, %r1576, %r1437;
	add.s32 	%r1577, %r1576, %r1438;
	mul.lo.s32 	%r115, %r1577, %r1437;
	add.s32 	%r1578, %r1438, %r6728;
	mul.lo.s32 	%r116, %r1578, %r1437;
	add.s32 	%r1579, %r1578, %r1438;
	mul.lo.s32 	%r117, %r1579, %r1437;
	mul.lo.s32 	%r118, %r6728, %r1437;
	add.s32 	%r119, %r118, %r1437;
	add.s32 	%r120, %r6728, 1;
	add.s32 	%r1580, %r1438, %r120;
	mul.lo.s32 	%r121, %r1580, %r1437;
	add.s32 	%r1581, %r1580, %r1438;
	mul.lo.s32 	%r122, %r1581, %r1437;
	add.s32 	%r123, %r119, %r1437;
	add.s32 	%r124, %r6728, 2;
	add.s32 	%r1582, %r1438, %r124;
	mul.lo.s32 	%r125, %r1582, %r1437;
	add.s32 	%r1583, %r1582, %r1438;
	mul.lo.s32 	%r126, %r1583, %r1437;
	mov.u32 	%r6731, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1584, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1584;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r128, %r1584, %r6727;
	setp.lt.s32 	%p32, %r128, %r1437;
	or.b32  	%r1585, %r108, %r128;
	setp.gt.s32 	%p33, %r1585, -1;
	and.pred  	%p34, %p32, %p33;
	setp.lt.s32 	%p35, %r108, %r1438;
	and.pred  	%p1, %p35, %p34;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p36, %f65, 0f40000000;
	@%p36 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1588, %r109, %r128;
	mul.wide.s32 	%rd80, %r1588, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6730, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6730, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1589, %r6731, %r107;
	mul.wide.s32 	%rd82, %r1589, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6730;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p37, %f3, 0f40000000;
	@%p37 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1592, %r110, %r128;
	mul.wide.s32 	%rd84, %r1592, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6732, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6732, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1593, %r6731, %r107;
	mul.wide.s32 	%rd86, %r1593, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6732;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p38, %f74, 0f40000000;
	@%p38 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1596, %r111, %r128;
	mul.wide.s32 	%rd88, %r1596, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6734, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6734, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1597, %r6731, %r107;
	mul.wide.s32 	%rd90, %r1597, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6734;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_57:
	or.b32  	%r1598, %r113, %r128;
	setp.gt.s32 	%p39, %r1598, -1;
	and.pred  	%p41, %p32, %p39;
	setp.le.s32 	%p42, %r6728, %r1438;
	and.pred  	%p2, %p42, %p41;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p43, %f4, 0f40000000;
	@%p43 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1601, %r112, %r128;
	mul.wide.s32 	%rd92, %r1601, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6736, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6736, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1602, %r6731, %r107;
	mul.wide.s32 	%rd94, %r1602, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6736;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p44, %f5, 0f40000000;
	@%p44 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1605, %r114, %r128;
	mul.wide.s32 	%rd96, %r1605, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6738, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6738, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1606, %r6731, %r107;
	mul.wide.s32 	%rd98, %r1606, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6738;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p45, %f6, 0f40000000;
	@%p45 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1609, %r115, %r128;
	mul.wide.s32 	%rd100, %r1609, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6740, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6740, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1610, %r6731, %r107;
	mul.wide.s32 	%rd102, %r1610, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6740;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_72:
	or.b32  	%r1611, %r6728, %r128;
	setp.gt.s32 	%p46, %r1611, -1;
	and.pred  	%p48, %p32, %p46;
	setp.lt.s32 	%p49, %r6728, %r1438;
	and.pred  	%p3, %p49, %p48;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p50, %f7, 0f40000000;
	@%p50 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1614, %r118, %r128;
	mul.wide.s32 	%rd104, %r1614, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6742, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6742, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1615, %r6731, %r107;
	mul.wide.s32 	%rd106, %r1615, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6742;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p51, %f90, 0f40000000;
	@%p51 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1618, %r116, %r128;
	mul.wide.s32 	%rd108, %r1618, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6744, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6744, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1619, %r6731, %r107;
	mul.wide.s32 	%rd110, %r1619, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6744;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p52, %f8, 0f40000000;
	@%p52 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1622, %r117, %r128;
	mul.wide.s32 	%rd112, %r1622, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6746, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6746, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1623, %r6731, %r107;
	mul.wide.s32 	%rd114, %r1623, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6746;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_87:
	or.b32  	%r1624, %r120, %r128;
	setp.gt.s32 	%p53, %r1624, -1;
	and.pred  	%p55, %p32, %p53;
	setp.lt.s32 	%p56, %r120, %r1438;
	and.pred  	%p4, %p56, %p55;
	@%p50 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1627, %r119, %r128;
	mul.wide.s32 	%rd116, %r1627, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6748, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6748, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1628, %r6731, %r107;
	mul.wide.s32 	%rd118, %r1628, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6748;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_92:
	@%p44 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1631, %r121, %r128;
	mul.wide.s32 	%rd120, %r1631, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6750, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6750, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1632, %r6731, %r107;
	mul.wide.s32 	%rd122, %r1632, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6750;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_97:
	@%p52 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1635, %r122, %r128;
	mul.wide.s32 	%rd124, %r1635, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6752, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6752, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1636, %r6731, %r107;
	mul.wide.s32 	%rd126, %r1636, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6752;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_102:
	or.b32  	%r1637, %r124, %r128;
	setp.gt.s32 	%p60, %r1637, -1;
	and.pred  	%p62, %p32, %p60;
	setp.lt.s32 	%p63, %r124, %r1438;
	and.pred  	%p5, %p63, %p62;
	@%p43 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1640, %r123, %r128;
	mul.wide.s32 	%rd128, %r1640, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6754, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6754, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1641, %r6731, %r107;
	mul.wide.s32 	%rd130, %r1641, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6754;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_107:
	@%p37 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1644, %r125, %r128;
	mul.wide.s32 	%rd132, %r1644, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6756, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6756, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1645, %r6731, %r107;
	mul.wide.s32 	%rd134, %r1645, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6756;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_112:
	@%p45 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1648, %r126, %r128;
	mul.wide.s32 	%rd136, %r1648, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6758, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6758, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1649, %r6731, %r107;
	mul.wide.s32 	%rd138, %r1649, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6758;
	add.s32 	%r6731, %r6731, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p67, %rd455, %rd141;
	@%p67 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6728, %r6728, %r30;
	setp.lt.s32 	%p68, %r6728, %r1438;
	@%p68 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6727, %r6727, %r1452;
	setp.lt.s32 	%p69, %r6727, %r1437;
	@%p69 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p70, %r1441, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p70 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p18 bra 	$L__BB0_267;

	shl.b32 	%r231, %r57, 1;
	shr.u32 	%r1695, %r1442, 31;
	add.s32 	%r1696, %r1442, %r1695;
	shr.u32 	%r1697, %r1696, 1;
	and.b32  	%r232, %r1697, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p80, %r231, %r1438;
	@%p80 bra 	$L__BB0_266;

	mov.u32 	%r6766, %r231;

$L__BB0_142:
	setp.ne.s32 	%p81, %r28, 0;
	@%p81 bra 	$L__BB0_265;

	shr.u32 	%r1699, %r6766, 31;
	add.s32 	%r1700, %r6766, %r1699;
	shr.s32 	%r1701, %r1700, 1;
	mad.lo.s32 	%r1702, %r1701, %r1437, %r6760;
	shl.b32 	%r236, %r1702, 5;
	add.s32 	%r237, %r6766, -2;
	mul.lo.s32 	%r238, %r237, %r1437;
	add.s32 	%r1703, %r1438, %r237;
	mul.lo.s32 	%r239, %r1703, %r1437;
	add.s32 	%r240, %r238, %r1437;
	add.s32 	%r241, %r6766, -1;
	add.s32 	%r1704, %r1438, %r241;
	mul.lo.s32 	%r242, %r1704, %r1437;
	add.s32 	%r1705, %r1438, %r6766;
	mul.lo.s32 	%r243, %r1705, %r1437;
	mul.lo.s32 	%r244, %r6766, %r1437;
	add.s32 	%r245, %r244, %r1437;
	add.s32 	%r246, %r6766, 1;
	add.s32 	%r1706, %r1438, %r246;
	mul.lo.s32 	%r247, %r1706, %r1437;
	add.s32 	%r248, %r245, %r1437;
	add.s32 	%r249, %r6766, 2;
	add.s32 	%r1707, %r1438, %r249;
	mul.lo.s32 	%r250, %r1707, %r1437;
	mov.u32 	%r6770, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1708, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1708;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r252, %r1708, %r6760;
	setp.lt.s32 	%p82, %r252, %r1437;
	or.b32  	%r1709, %r237, %r252;
	setp.gt.s32 	%p83, %r1709, -1;
	and.pred  	%p84, %p82, %p83;
	setp.lt.s32 	%p85, %r237, %r1438;
	and.pred  	%p6, %p85, %p84;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p86, %f133, 0f40000000;
	@%p86 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p87, %r232, 0;
	add.s32 	%r1711, %r238, %r252;
	shl.b32 	%r1712, %r1711, 1;
	mul.wide.s32 	%rd164, %r1712, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p87 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6768, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6768, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6768, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r257, %r6770, %r236;
	mul.wide.s32 	%rd166, %r257, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6768;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p88, %r232, 0;
	add.s32 	%r1716, %r239, %r252;
	shl.b32 	%r1717, %r1716, 1;
	mul.wide.s32 	%rd168, %r1717, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p88 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6769, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6769, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6769, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1720, %r257, 1;
	mul.wide.s32 	%rd170, %r1720, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6769;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p89, %f13, 0f40000000;
	@%p89 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p90, %r232, 0;
	add.s32 	%r1722, %r238, %r252;
	shl.b32 	%r1723, %r1722, 1;
	or.b32  	%r1724, %r1723, 1;
	mul.wide.s32 	%rd172, %r1724, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p90 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6771, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6771, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6771, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r268, %r6770, %r236;
	mul.wide.s32 	%rd174, %r268, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6771;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p91, %r232, 0;
	add.s32 	%r1728, %r239, %r252;
	shl.b32 	%r1729, %r1728, 1;
	or.b32  	%r1730, %r1729, 1;
	mul.wide.s32 	%rd176, %r1730, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p91 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6772, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6772, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6772, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1733, %r268, 1;
	mul.wide.s32 	%rd178, %r1733, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6772;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_168:
	or.b32  	%r1734, %r241, %r252;
	setp.gt.s32 	%p92, %r1734, -1;
	and.pred  	%p94, %p82, %p92;
	setp.le.s32 	%p95, %r6766, %r1438;
	and.pred  	%p7, %p95, %p94;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p96, %f16, 0f40000000;
	@%p96 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p97, %r232, 0;
	add.s32 	%r1736, %r240, %r252;
	shl.b32 	%r1737, %r1736, 1;
	mul.wide.s32 	%rd180, %r1737, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p97 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6774, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6774, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6774, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r279, %r6770, %r236;
	mul.wide.s32 	%rd182, %r279, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6774;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p98, %r232, 0;
	add.s32 	%r1741, %r242, %r252;
	shl.b32 	%r1742, %r1741, 1;
	mul.wide.s32 	%rd184, %r1742, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p98 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6775, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6775, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6775, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1745, %r279, 1;
	mul.wide.s32 	%rd186, %r1745, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6775;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p99, %f19, 0f40000000;
	@%p99 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p100, %r232, 0;
	add.s32 	%r1747, %r240, %r252;
	shl.b32 	%r1748, %r1747, 1;
	or.b32  	%r1749, %r1748, 1;
	mul.wide.s32 	%rd188, %r1749, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p100 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6777, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6777, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6777, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r290, %r6770, %r236;
	mul.wide.s32 	%rd190, %r290, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6777;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p101, %r232, 0;
	add.s32 	%r1753, %r242, %r252;
	shl.b32 	%r1754, %r1753, 1;
	or.b32  	%r1755, %r1754, 1;
	mul.wide.s32 	%rd192, %r1755, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p101 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6778, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6778, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6778, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1758, %r290, 1;
	mul.wide.s32 	%rd194, %r1758, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6778;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_192:
	or.b32  	%r1759, %r6766, %r252;
	setp.gt.s32 	%p102, %r1759, -1;
	and.pred  	%p104, %p82, %p102;
	setp.lt.s32 	%p105, %r6766, %r1438;
	and.pred  	%p8, %p105, %p104;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p106, %f22, 0f40000000;
	@%p106 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p107, %r232, 0;
	add.s32 	%r1761, %r244, %r252;
	shl.b32 	%r1762, %r1761, 1;
	mul.wide.s32 	%rd196, %r1762, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p107 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6780, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6780, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6780, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r301, %r6770, %r236;
	mul.wide.s32 	%rd198, %r301, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6780;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p108, %r232, 0;
	add.s32 	%r1766, %r243, %r252;
	shl.b32 	%r1767, %r1766, 1;
	mul.wide.s32 	%rd200, %r1767, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p108 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6781, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6781, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6781, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1770, %r301, 1;
	mul.wide.s32 	%rd202, %r1770, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6781;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p109, %f196, 0f40000000;
	@%p109 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p110, %r232, 0;
	add.s32 	%r1772, %r244, %r252;
	shl.b32 	%r1773, %r1772, 1;
	or.b32  	%r1774, %r1773, 1;
	mul.wide.s32 	%rd204, %r1774, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p110 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6783, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6783, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6783, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r312, %r6770, %r236;
	mul.wide.s32 	%rd206, %r312, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6783;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p111, %r232, 0;
	add.s32 	%r1778, %r243, %r252;
	shl.b32 	%r1779, %r1778, 1;
	or.b32  	%r1780, %r1779, 1;
	mul.wide.s32 	%rd208, %r1780, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p111 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6784, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6784, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6784, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1783, %r312, 1;
	mul.wide.s32 	%rd210, %r1783, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6784;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_216:
	or.b32  	%r1784, %r246, %r252;
	setp.gt.s32 	%p112, %r1784, -1;
	and.pred  	%p114, %p82, %p112;
	setp.lt.s32 	%p115, %r246, %r1438;
	and.pred  	%p9, %p115, %p114;
	@%p106 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p117, %r232, 0;
	add.s32 	%r1786, %r245, %r252;
	shl.b32 	%r1787, %r1786, 1;
	mul.wide.s32 	%rd212, %r1787, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p117 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6786, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6786, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6786, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r323, %r6770, %r236;
	mul.wide.s32 	%rd214, %r323, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6786;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p118, %r232, 0;
	add.s32 	%r1791, %r247, %r252;
	shl.b32 	%r1792, %r1791, 1;
	mul.wide.s32 	%rd216, %r1792, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p118 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6787, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6787, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6787, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1795, %r323, 1;
	mul.wide.s32 	%rd218, %r1795, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6787;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_228:
	@%p99 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p120, %r232, 0;
	add.s32 	%r1797, %r245, %r252;
	shl.b32 	%r1798, %r1797, 1;
	or.b32  	%r1799, %r1798, 1;
	mul.wide.s32 	%rd220, %r1799, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p120 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6789, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6789, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6789, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r334, %r6770, %r236;
	mul.wide.s32 	%rd222, %r334, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6789;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p121, %r232, 0;
	add.s32 	%r1803, %r247, %r252;
	shl.b32 	%r1804, %r1803, 1;
	or.b32  	%r1805, %r1804, 1;
	mul.wide.s32 	%rd224, %r1805, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p121 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6790, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6790, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6790, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1808, %r334, 1;
	mul.wide.s32 	%rd226, %r1808, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6790;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_240:
	or.b32  	%r1809, %r249, %r252;
	setp.gt.s32 	%p122, %r1809, -1;
	and.pred  	%p124, %p82, %p122;
	setp.lt.s32 	%p125, %r249, %r1438;
	and.pred  	%p10, %p125, %p124;
	@%p96 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p127, %r232, 0;
	add.s32 	%r1811, %r248, %r252;
	shl.b32 	%r1812, %r1811, 1;
	mul.wide.s32 	%rd228, %r1812, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p127 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6792, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6792, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6792, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r345, %r6770, %r236;
	mul.wide.s32 	%rd230, %r345, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6792;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p128, %r232, 0;
	add.s32 	%r1816, %r250, %r252;
	shl.b32 	%r1817, %r1816, 1;
	mul.wide.s32 	%rd232, %r1817, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p128 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6793, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6793, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6793, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1820, %r345, 1;
	mul.wide.s32 	%rd234, %r1820, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6793;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_252:
	@%p89 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p130, %r232, 0;
	add.s32 	%r1822, %r248, %r252;
	shl.b32 	%r1823, %r1822, 1;
	or.b32  	%r1824, %r1823, 1;
	mul.wide.s32 	%rd236, %r1824, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p130 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6795, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6795, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6795, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r356, %r6770, %r236;
	mul.wide.s32 	%rd238, %r356, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6795;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p131, %r232, 0;
	add.s32 	%r1828, %r250, %r252;
	shl.b32 	%r1829, %r1828, 1;
	or.b32  	%r1830, %r1829, 1;
	mul.wide.s32 	%rd240, %r1830, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p131 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6796, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6796, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6796, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1833, %r356, 1;
	mul.wide.s32 	%rd242, %r1833, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6796;
	add.s32 	%r6770, %r6770, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p132, %rd456, 0;
	@%p132 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6766, %r6766, %r30;
	setp.lt.s32 	%p133, %r6766, %r1438;
	@%p133 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6760, %r6760, %r1452;
	setp.lt.s32 	%p134, %r6760, %r1437;
	@%p134 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p18 bra 	$L__BB0_267;

	neg.s32 	%r206, %r56;
	mov.u32 	%r1650, 31;
	sub.s32 	%r1651, %r1650, %r28;
	setp.gt.s32 	%p72, %r27, %r28;
	selp.b32 	%r1652, %r28, %r1651, %p72;
	shl.b32 	%r1653, %r1652, 2;
	mov.u32 	%r1654, 2;
	sub.s32 	%r207, %r1653, %r1440;
	sub.s32 	%r1655, %r1654, %r1440;
	add.s32 	%r208, %r1655, %r1653;
	add.s32 	%r209, %r1437, -1;
	add.s32 	%r210, %r207, 1;
	add.s32 	%r211, %r208, 1;
	rem.s32 	%r1680, %r210, %r40;
	add.s32 	%r1681, %r1680, %r40;
	rem.s32 	%r222, %r1681, %r40;
	rem.s32 	%r1682, %r211, %r40;
	add.s32 	%r1683, %r1682, %r40;
	rem.s32 	%r223, %r1683, %r40;

$L__BB0_123:
	setp.ne.s32 	%p73, %r24, %r206;
	@%p73 bra 	$L__BB0_137;

	shl.b32 	%r213, %r6760, 1;
	rem.s32 	%r1656, %r207, %r40;
	add.s32 	%r1657, %r1656, %r40;
	rem.s32 	%r214, %r1657, %r40;
	rem.s32 	%r1658, %r208, %r40;
	add.s32 	%r1659, %r1658, %r40;
	rem.s32 	%r215, %r1659, %r40;
	@%p72 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1662, %r213, %r40;
	add.s32 	%r1663, %r1662, %r214;
	mul.wide.s32 	%rd144, %r1663, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1664, %r1662, %r215;
	mul.wide.s32 	%rd146, %r1664, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6761, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6761, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1665, %r6760, 5;
	add.s32 	%r1666, %r1665, %r28;
	shl.b32 	%r1667, %r1666, 2;
	mul.wide.s32 	%rd148, %r1667, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6761;
	@%p72 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1670, %r213, 1;
	mul.lo.s32 	%r1671, %r1670, %r40;
	add.s32 	%r1672, %r1671, %r214;
	mul.wide.s32 	%rd149, %r1672, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1673, %r1671, %r215;
	mul.wide.s32 	%rd151, %r1673, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6762, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6762, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1674, %r209, %r6760;
	rem.s32 	%r1675, %r1674, %r1437;
	shl.b32 	%r1676, %r1675, 5;
	add.s32 	%r1677, %r1676, %r28;
	shl.b32 	%r1678, %r1677, 2;
	or.b32  	%r1679, %r1678, 2;
	mul.wide.s32 	%rd153, %r1679, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6762;
	@%p72 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1686, %r213, %r40;
	add.s32 	%r1687, %r1686, %r222;
	mul.wide.s32 	%rd154, %r1687, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1688, %r1686, %r223;
	mul.wide.s32 	%rd156, %r1688, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6763, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6763, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6763;
	@%p72 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1691, %r213, 1;
	mul.lo.s32 	%r1692, %r1691, %r40;
	add.s32 	%r1693, %r1692, %r222;
	mul.wide.s32 	%rd158, %r1693, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1694, %r1692, %r223;
	mul.wide.s32 	%rd160, %r1694, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6764, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6764, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6764;

$L__BB0_137:
	add.s32 	%r6760, %r6760, %r1452;
	setp.lt.s32 	%p78, %r6760, %r1437;
	@%p78 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1835, %r1432, -1;
	mad.lo.s32 	%r1836, %r1433, 576, 128;
	mul.lo.s32 	%r1837, %r1836, %r1835;
	add.s32 	%r1838, %r51, -64;
	add.s32 	%r1839, %r1838, %r51;
	add.s32 	%r1840, %r1433, -1;
	mad.lo.s32 	%r1841, %r1839, %r1840, %r1837;
	mul.lo.s32 	%r1842, %r1835, %r1433;
	mul.lo.s32 	%r1843, %r1842, 320;
	mad.lo.s32 	%r1844, %r1838, %r1840, %r1843;
	add.s32 	%r365, %r1844, %r1841;
	setp.lt.s32 	%p135, %r365, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6801, {low,high};}

	// end inline asm
	@%p135 bra 	$L__BB0_270;

	mov.u32 	%r6800, 0;
	mov.u32 	%r6798, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6798], %r6801;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1847, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6798+4], %r1847;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1848, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6798+8], %r1848;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1849, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6798+12], %r1849;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6801, {low,high};}

	// end inline asm
	add.s32 	%r6798, %r6798, 16;
	add.s32 	%r6800, %r6800, 4;
	setp.lt.s32 	%p136, %r6800, %r365;
	@%p136 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1851, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1852, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1853, 31;
	sub.s32 	%r1854, %r1853, %r28;
	setp.gt.s32 	%p137, %r27, %r28;
	selp.b32 	%r1855, %r28, %r1854, %p137;
	shl.b32 	%r1856, %r1855, 2;
	sub.s32 	%r376, %r1856, %r1440;
	rem.s32 	%r1857, %r376, %r40;
	add.s32 	%r1858, %r1857, %r40;
	rem.s32 	%r377, %r1858, %r40;
	add.s32 	%r1859, %r376, 2;
	rem.s32 	%r1860, %r1859, %r40;
	add.s32 	%r1861, %r1860, %r40;
	rem.s32 	%r378, %r1861, %r40;
	mul.lo.s32 	%r1862, %r377, 6;
	mul.lo.s32 	%r1863, %r378, 6;
	mul.wide.s32 	%rd245, %r1862, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1863, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p11 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6802, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6802, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p11 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6803, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6803, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p11 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6804, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6804, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p11 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6805, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6805, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1872, %r376, 1;
	rem.s32 	%r1873, %r1872, %r40;
	add.s32 	%r1874, %r1873, %r40;
	rem.s32 	%r391, %r1874, %r40;
	add.s32 	%r1875, %r376, 3;
	rem.s32 	%r1876, %r1875, %r40;
	add.s32 	%r1877, %r1876, %r40;
	rem.s32 	%r392, %r1877, %r40;
	mul.lo.s32 	%r1878, %r391, 6;
	mul.lo.s32 	%r1879, %r392, 6;
	mul.wide.s32 	%rd247, %r1878, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1879, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p11 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6806, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6806, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p11 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6807, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6807, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p11 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6808, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6808, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p11 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6809, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6809, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1888, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1888;
	// begin inline asm
	mov.u32 %r1889, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1889;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p146, %rd24, 0;
	@%p146 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1890, %nctaid.y;
	mov.u32 	%r1891, %nctaid.x;
	mul.lo.s32 	%r1892, %r1891, %r1890;
	mov.u32 	%r1893, %nctaid.z;
	mul.lo.s32 	%r405, %r1892, %r1893;
	neg.s32 	%r1894, %r24;
	add.s32 	%r1895, %r28, %r23;
	setp.ne.s32 	%p147, %r1895, %r1894;
	mov.u32 	%r1896, %ctaid.x;
	add.s32 	%r406, %r1896, %r25;
	neg.s32 	%r407, %r26;
	bar.sync 	0;
	@%p147 bra 	$L__BB0_300;

	setp.eq.s32 	%p148, %r406, %r407;
	mov.u32 	%r1899, -2147483647;
	sub.s32 	%r1900, %r1899, %r405;
	selp.b32 	%r1898, %r1900, 1, %p148;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1897,[%rd25],%r1898;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1901, [%rd25];
	xor.b32  	%r1902, %r1901, %r1897;
	setp.gt.s32 	%p149, %r1902, -1;
	@%p149 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1903,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p150, %r31, 1;
	@%p150 bra 	$L__BB0_627;

	shr.s32 	%r1905, %r1442, 31;
	shr.u32 	%r1906, %r1905, 30;
	add.s32 	%r1907, %r1442, %r1906;
	shr.s32 	%r409, %r1907, 2;
	add.s32 	%r1908, %r28, 24;
	mul.hi.s32 	%r1909, %r1908, 1374389535;
	shr.u32 	%r1910, %r1909, 31;
	shr.s32 	%r1911, %r1909, 3;
	add.s32 	%r1912, %r1911, %r1910;
	mul.lo.s32 	%r1913, %r1912, 25;
	sub.s32 	%r1914, %r1908, %r1913;
	add.s32 	%r1915, %r28, 26;
	mul.hi.s32 	%r1916, %r1915, 1374389535;
	shr.u32 	%r1917, %r1916, 31;
	shr.s32 	%r1918, %r1916, 3;
	add.s32 	%r1919, %r1918, %r1917;
	mul.lo.s32 	%r1920, %r1919, 25;
	sub.s32 	%r1921, %r1915, %r1920;
	shr.u32 	%r1922, %r1442, 31;
	add.s32 	%r1923, %r1442, %r1922;
	and.b32  	%r1924, %r1923, -2;
	sub.s32 	%r410, %r1442, %r1924;
	setp.lt.s32 	%p151, %r28, 25;
	selp.b32 	%r411, %r1914, %r28, %p151;
	selp.b32 	%r412, %r1921, %r28, %p151;
	mov.u32 	%r1904, 0;
	// begin inline asm
	{mov.u32 %r1925, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2250, %r1925, 8;
	add.s32 	%r2251, %r2250, -8192;
	or.b32  	%r1929, %r2251, 31;
	mov.u32 	%r7131, %r1852;
	mov.u32 	%r7132, %r1852;
	mov.u32 	%r7141, %r1852;
	mov.u32 	%r7142, %r1852;
	mov.u32 	%r7143, %r1852;
	mov.u32 	%r7144, %r1852;
	mov.u32 	%r7133, %r1852;
	mov.u32 	%r7134, %r1852;
	mov.u32 	%r7135, %r1852;
	mov.u32 	%r7136, %r1852;
	mov.u32 	%r7137, %r1852;
	mov.u32 	%r7138, %r1852;
	mov.u32 	%r7145, %r1852;
	mov.u32 	%r7146, %r1852;
	mov.u32 	%r7147, %r1852;
	mov.u32 	%r7148, %r1852;
	mov.u32 	%r7149, %r1852;
	mov.u32 	%r7150, %r1852;
	mov.u32 	%r7139, %r1852;
	mov.u32 	%r7140, %r1852;
	mov.u32 	%r7151, %r1852;
	mov.u32 	%r7152, %r1852;
	mov.u32 	%r7083, %r1852;
	mov.u32 	%r7084, %r1852;
	mov.u32 	%r7071, %r1852;
	mov.u32 	%r7072, %r1852;
	mov.u32 	%r7073, %r1852;
	mov.u32 	%r7074, %r1852;
	mov.u32 	%r7085, %r1852;
	mov.u32 	%r7086, %r1852;
	mov.u32 	%r7087, %r1852;
	mov.u32 	%r7088, %r1852;
	mov.u32 	%r7089, %r1852;
	mov.u32 	%r7090, %r1852;
	mov.u32 	%r7075, %r1852;
	mov.u32 	%r7076, %r1852;
	mov.u32 	%r7077, %r1852;
	mov.u32 	%r7078, %r1852;
	mov.u32 	%r7091, %r1852;
	mov.u32 	%r7092, %r1852;
	mov.u32 	%r7093, %r1852;
	mov.u32 	%r7094, %r1852;
	mov.u32 	%r6852, %r1852;
	mov.u32 	%r6853, %r1852;
	mov.u32 	%r7079, %r1852;
	mov.u32 	%r7080, %r1852;
	mov.u32 	%r6856, %r1852;
	mov.u32 	%r6857, %r1852;
	mov.u32 	%r6858, %r1852;
	mov.u32 	%r6859, %r1852;
	mov.u32 	%r6860, %r1852;
	mov.u32 	%r6861, %r1852;
	mov.u32 	%r7055, %r1852;
	mov.u32 	%r7056, %r1852;
	mov.u32 	%r6864, %r1852;
	mov.u32 	%r7057, %r1852;
	mov.u32 	%r6866, %r1852;
	mov.u32 	%r6867, %r1852;
	mov.u32 	%r7058, %r1852;
	mov.u32 	%r6869, %r1852;
	mov.u32 	%r6870, %r1852;
	mov.u32 	%r6871, %r1852;
	mov.u32 	%r7095, %r1852;
	mov.u32 	%r7096, %r1852;
	mov.u32 	%r6874, %r1852;
	mov.u32 	%r6875, %r1852;
	mov.u32 	%r7081, %r1852;
	mov.u32 	%r7082, %r1852;
	mov.u32 	%r6878, %r1852;
	mov.u32 	%r6879, %r1852;
	mov.u32 	%r6880, %r1852;
	mov.u32 	%r6881, %r1852;
	mov.u32 	%r6882, %r1852;
	mov.u32 	%r6883, %r1852;
	mov.u32 	%r6884, %r1852;
	mov.u32 	%r6885, %r1852;
	mov.u32 	%r6886, %r1852;
	mov.u32 	%r6887, %r1852;
	mov.u32 	%r6888, %r1852;
	mov.u32 	%r6889, %r1852;
	mov.u32 	%r6890, %r1852;
	mov.u32 	%r6891, %r1852;
	mov.u32 	%r6892, %r1852;
	mov.u32 	%r6893, %r1852;
	mov.u32 	%r6894, %r1852;
	mov.u32 	%r7059, %r1852;
	mov.u32 	%r6896, %r1852;
	mov.u32 	%r6897, %r1852;
	mov.u32 	%r6898, %r1852;
	mov.u32 	%r6899, %r1852;
	mov.u32 	%r6900, %r1852;
	mov.u32 	%r6901, %r1852;
	mov.u32 	%r6902, %r1852;
	mov.u32 	%r7060, %r1852;
	mov.u32 	%r6904, %r1852;
	mov.u32 	%r7097, %r1852;
	mov.u32 	%r6906, %r1852;
	mov.u32 	%r6907, %r1852;
	mov.u32 	%r6908, %r1852;
	mov.u32 	%r6909, %r1852;
	mov.u32 	%r7098, %r1852;
	mov.u32 	%r6911, %r1852;
	mov.u32 	%r6912, %r1852;
	mov.u32 	%r6913, %r1852;
	mov.u32 	%r6914, %r1852;
	mov.u32 	%r6915, %r1852;
	mov.u32 	%r6916, %r1852;
	mov.u32 	%r6917, %r1852;
	mov.u32 	%r6918, %r1852;
	mov.u32 	%r6919, %r1852;
	mov.u32 	%r6920, %r1852;
	mov.u32 	%r6921, %r1852;
	mov.u32 	%r6922, %r1852;
	mov.u32 	%r6923, %r1852;
	mov.u32 	%r6924, %r1852;
	mov.u32 	%r6925, %r1852;
	mov.u32 	%r6926, %r1852;
	mov.u32 	%r6927, %r1852;
	mov.u32 	%r6928, %r1852;
	mov.u32 	%r6929, %r1852;
	mov.u32 	%r6930, %r1852;
	mov.u32 	%r6931, %r1852;
	mov.u32 	%r6932, %r1852;
	mov.u32 	%r6933, %r1852;
	mov.u32 	%r6934, %r1852;
	mov.u32 	%r6935, %r1852;
	mov.u32 	%r6936, %r1852;
	mov.u32 	%r6937, %r1852;
	mov.u32 	%r6938, %r1852;
	mov.u32 	%r6939, %r1852;
	mov.u32 	%r6940, %r1852;
	mov.u32 	%r6941, %r1852;
	mov.u32 	%r6942, %r1852;
	mov.u32 	%r6943, %r1852;
	mov.u32 	%r6944, %r1852;
	mov.u32 	%r6945, %r1852;
	mov.u32 	%r6946, %r1852;
	mov.u32 	%r6947, %r1852;
	mov.u32 	%r6948, %r1852;
	mov.u32 	%r6949, %r1852;
	mov.u32 	%r6950, %r1852;
	mov.u32 	%r6951, %r1852;
	mov.u32 	%r6952, %r1852;
	mov.u32 	%r6953, %r1852;
	mov.u32 	%r6954, %r1852;
	mov.u32 	%r6955, %r1852;
	mov.u32 	%r6956, %r1852;
	mov.u32 	%r6957, %r1852;
	mov.u32 	%r6958, %r1852;
	mov.u32 	%r6959, %r1852;
	mov.u32 	%r6960, %r1904;

$L__BB0_302:
	mov.u32 	%r506, %r7060;
	mov.u32 	%r502, %r6899;
	mov.u32 	%r498, %r7059;
	mov.u32 	%r496, %r6893;
	mov.u32 	%r494, %r6891;
	mov.u32 	%r486, %r6883;
	mov.u32 	%r6899, %r7058;
	mov.u32 	%r468, %r7057;
	mov.u32 	%r6893, %r7056;
	mov.u32 	%r465, %r7055;
	mov.u32 	%r460, %r6857;
	mov.u32 	%r459, %r6856;
	mov.u32 	%r6707, %ctaid.y;
	mov.u32 	%r6706, %ctaid.z;
	mov.u32 	%r1940, 1;
	not.b32 	%r2214, %r6706;
	mov.u32 	%r2206, -1;
	add.s32 	%r2215, %r1435, %r2214;
	not.b32 	%r2217, %r6707;
	add.s32 	%r2218, %r1434, %r2217;
	add.s32 	%r2219, %r2218, %r2215;
	mul.lo.s32 	%r2220, %r2219, %r1436;
	add.s32 	%r2221, %r2220, %r1437;
	not.b32 	%r2223, %r23;
	add.s32 	%r2224, %r1432, %r2223;
	mad.lo.s32 	%r2225, %r2218, %r1432, %r2224;
	not.b32 	%r2227, %r24;
	add.s32 	%r2228, %r1433, %r2227;
	mad.lo.s32 	%r2229, %r2215, %r1433, %r2228;
	add.s32 	%r2230, %r2225, %r2229;
	shl.b32 	%r2231, %r2230, 1;
	add.s32 	%r2232, %r2221, %r2231;
	add.s32 	%r2233, %r2232, %r6960;
	add.s32 	%r2234, %r6960, %r2220;
	div.s32 	%r2235, %r2233, %r1437;
	mul.lo.s32 	%r2236, %r2235, %r1437;
	sub.s32 	%r2239, %r30, %r1437;
	sub.s32 	%r2240, %r2225, %r2229;
	shl.b32 	%r2241, %r2240, 1;
	add.s32 	%r2242, %r2241, %r1438;
	mad.lo.s32 	%r2243, %r2235, %r30, %r2242;
	mad.lo.s32 	%r2244, %r2235, %r2239, %r2234;
	div.s32 	%r2245, %r2243, %r1438;
	mul.lo.s32 	%r2246, %r2245, %r1438;
	sub.s32 	%r2249, %r1453, %r1438;
	mov.u32 	%r2024, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1926,%r1851,%r1904,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1932, %r6803, %r1926, %p11;
	// begin inline asm
	{mul.f16x2 %r7044,%r1932,%r6959;
}
	// end inline asm
	selp.b32 	%r1935, %r6807, %r1926, %p11;
	// begin inline asm
	{mul.f16x2 %r7042,%r1935,%r6958;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1938,%r1851,%r1940,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1944, %r6803, %r1938, %p11;
	// begin inline asm
	{mul.f16x2 %r7043,%r1944,%r6957;
}
	// end inline asm
	selp.b32 	%r1947, %r6807, %r1938, %p11;
	// begin inline asm
	{mul.f16x2 %r7041,%r1947,%r6956;
}
	// end inline asm
	mov.u32 	%r1952, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1950,%r1851,%r1952,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1956, %r6803, %r1950, %p11;
	// begin inline asm
	{mul.f16x2 %r7040,%r1956,%r6955;
}
	// end inline asm
	selp.b32 	%r1959, %r6807, %r1950, %p11;
	// begin inline asm
	{mul.f16x2 %r7039,%r1959,%r6954;
}
	// end inline asm
	mov.u32 	%r1964, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r1962,%r1851,%r1964,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1968, %r6803, %r1962, %p11;
	// begin inline asm
	{mul.f16x2 %r7038,%r1968,%r7152;
}
	// end inline asm
	selp.b32 	%r1971, %r6807, %r1962, %p11;
	// begin inline asm
	{mul.f16x2 %r7036,%r1971,%r7151;
}
	// end inline asm
	mov.u32 	%r1976, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r1974,%r1851,%r1976,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1980, %r6803, %r1974, %p11;
	// begin inline asm
	{mul.f16x2 %r7037,%r1980,%r6953;
}
	// end inline asm
	selp.b32 	%r1983, %r6807, %r1974, %p11;
	// begin inline asm
	{mul.f16x2 %r7035,%r1983,%r6952;
}
	// end inline asm
	mov.u32 	%r1988, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r1986,%r1851,%r1988,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r1992, %r6803, %r1986, %p11;
	// begin inline asm
	{mul.f16x2 %r7034,%r1992,%r6951;
}
	// end inline asm
	selp.b32 	%r1995, %r6807, %r1986, %p11;
	// begin inline asm
	{mul.f16x2 %r7031,%r1995,%r6950;
}
	// end inline asm
	mov.u32 	%r2000, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r1998,%r1851,%r2000,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2004, %r6803, %r1998, %p11;
	// begin inline asm
	{mul.f16x2 %r7033,%r2004,%r6949;
}
	// end inline asm
	selp.b32 	%r2007, %r6807, %r1998, %p11;
	// begin inline asm
	{mul.f16x2 %r7030,%r2007,%r6948;
}
	// end inline asm
	mov.u32 	%r2012, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2010,%r1851,%r2012,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2016, %r6803, %r2010, %p11;
	// begin inline asm
	{mul.f16x2 %r7032,%r2016,%r6947;
}
	// end inline asm
	selp.b32 	%r2019, %r6807, %r2010, %p11;
	// begin inline asm
	{mul.f16x2 %r7029,%r2019,%r6946;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2022,%r1851,%r2024,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2028, %r6803, %r2022, %p11;
	// begin inline asm
	{mul.f16x2 %r7028,%r2028,%r6945;
}
	// end inline asm
	selp.b32 	%r2031, %r6807, %r2022, %p11;
	// begin inline asm
	{mul.f16x2 %r7025,%r2031,%r6944;
}
	// end inline asm
	mov.u32 	%r2036, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2034,%r1851,%r2036,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2040, %r6803, %r2034, %p11;
	// begin inline asm
	{mul.f16x2 %r7027,%r2040,%r6943;
}
	// end inline asm
	selp.b32 	%r2043, %r6807, %r2034, %p11;
	// begin inline asm
	{mul.f16x2 %r7024,%r2043,%r6942;
}
	// end inline asm
	mov.u32 	%r2048, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2046,%r1851,%r2048,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2052, %r6803, %r2046, %p11;
	// begin inline asm
	{mul.f16x2 %r7026,%r2052,%r6941;
}
	// end inline asm
	selp.b32 	%r2055, %r6807, %r2046, %p11;
	// begin inline asm
	{mul.f16x2 %r7023,%r2055,%r6940;
}
	// end inline asm
	mov.u32 	%r2060, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2058,%r1851,%r2060,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2064, %r6803, %r2058, %p11;
	// begin inline asm
	{mul.f16x2 %r7022,%r2064,%r7140;
}
	// end inline asm
	selp.b32 	%r2067, %r6807, %r2058, %p11;
	// begin inline asm
	{mul.f16x2 %r7021,%r2067,%r7139;
}
	// end inline asm
	mov.u32 	%r2072, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2070,%r1851,%r2072,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2076, %r6803, %r2070, %p11;
	// begin inline asm
	{mul.f16x2 %r7020,%r2076,%r7150;
}
	// end inline asm
	selp.b32 	%r2079, %r6807, %r2070, %p11;
	// begin inline asm
	{mul.f16x2 %r7018,%r2079,%r7148;
}
	// end inline asm
	mov.u32 	%r2084, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2082,%r1851,%r2084,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2088, %r6803, %r2082, %p11;
	// begin inline asm
	{mul.f16x2 %r7019,%r2088,%r7149;
}
	// end inline asm
	selp.b32 	%r2091, %r6807, %r2082, %p11;
	// begin inline asm
	{mul.f16x2 %r7017,%r2091,%r7147;
}
	// end inline asm
	mov.u32 	%r2096, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2094,%r1851,%r2096,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2100, %r6803, %r2094, %p11;
	// begin inline asm
	{mul.f16x2 %r7016,%r2100,%r7146;
}
	// end inline asm
	selp.b32 	%r2103, %r6807, %r2094, %p11;
	// begin inline asm
	{mul.f16x2 %r7013,%r2103,%r7145;
}
	// end inline asm
	mov.u32 	%r2108, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2106,%r1851,%r2108,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2112, %r6803, %r2106, %p11;
	// begin inline asm
	{mul.f16x2 %r7015,%r2112,%r6939;
}
	// end inline asm
	selp.b32 	%r2115, %r6807, %r2106, %p11;
	// begin inline asm
	{mul.f16x2 %r7012,%r2115,%r6938;
}
	// end inline asm
	mov.u32 	%r2120, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2118,%r1851,%r2120,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2124, %r6803, %r2118, %p11;
	// begin inline asm
	{mul.f16x2 %r7014,%r2124,%r6937;
}
	// end inline asm
	selp.b32 	%r2127, %r6807, %r2118, %p11;
	// begin inline asm
	{mul.f16x2 %r7011,%r2127,%r6936;
}
	// end inline asm
	mov.u32 	%r2132, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2130,%r1851,%r2132,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2136, %r6803, %r2130, %p11;
	// begin inline asm
	{mul.f16x2 %r7010,%r2136,%r7138;
}
	// end inline asm
	selp.b32 	%r2139, %r6807, %r2130, %p11;
	// begin inline asm
	{mul.f16x2 %r7007,%r2139,%r7136;
}
	// end inline asm
	mov.u32 	%r2144, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2142,%r1851,%r2144,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2148, %r6803, %r2142, %p11;
	// begin inline asm
	{mul.f16x2 %r7009,%r2148,%r7137;
}
	// end inline asm
	selp.b32 	%r2151, %r6807, %r2142, %p11;
	// begin inline asm
	{mul.f16x2 %r7006,%r2151,%r7135;
}
	// end inline asm
	mov.u32 	%r2156, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2154,%r1851,%r2156,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2160, %r6803, %r2154, %p11;
	// begin inline asm
	{mul.f16x2 %r7008,%r2160,%r6935;
}
	// end inline asm
	selp.b32 	%r2163, %r6807, %r2154, %p11;
	// begin inline asm
	{mul.f16x2 %r7005,%r2163,%r6934;
}
	// end inline asm
	mov.u32 	%r2168, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2166,%r1851,%r2168,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2172, %r6803, %r2166, %p11;
	// begin inline asm
	{mul.f16x2 %r7004,%r2172,%r7134;
}
	// end inline asm
	selp.b32 	%r2175, %r6807, %r2166, %p11;
	// begin inline asm
	{mul.f16x2 %r7003,%r2175,%r7133;
}
	// end inline asm
	mov.u32 	%r2180, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2178,%r1851,%r2180,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2184, %r6803, %r2178, %p11;
	// begin inline asm
	{mul.f16x2 %r7002,%r2184,%r7144;
}
	// end inline asm
	selp.b32 	%r2187, %r6807, %r2178, %p11;
	// begin inline asm
	{mul.f16x2 %r7000,%r2187,%r7142;
}
	// end inline asm
	mov.u32 	%r2192, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2190,%r1851,%r2192,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2196, %r6803, %r2190, %p11;
	// begin inline asm
	{mul.f16x2 %r7001,%r2196,%r7143;
}
	// end inline asm
	selp.b32 	%r2199, %r6807, %r2190, %p11;
	// begin inline asm
	{mul.f16x2 %r6999,%r2199,%r7141;
}
	// end inline asm
	mov.u32 	%r2204, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2202,%r1851,%r2204,%r1929,%r2206;
}
	// end inline asm
	selp.b32 	%r2208, %r6803, %r2202, %p11;
	// begin inline asm
	{mul.f16x2 %r6998,%r2208,%r7132;
}
	// end inline asm
	selp.b32 	%r2211, %r6807, %r2202, %p11;
	// begin inline asm
	{mul.f16x2 %r6997,%r2211,%r7131;
}
	// end inline asm
	sub.s32 	%r612, %r2233, %r2236;
	sub.s32 	%r613, %r2243, %r2246;
	mad.lo.s32 	%r614, %r2245, %r2249, %r2244;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2298, %r614, 1;
	mul.wide.s32 	%rd256, %r2298, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p70 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2501, %r1448, 1;
	setp.lt.s32 	%p159, %r614, %r2501;
	setp.eq.s32 	%p160, %r409, %r28;
	setp.gt.s32 	%p161, %r614, -1;
	and.pred  	%p162, %p160, %p161;
	and.pred  	%p163, %p159, %p162;
	@%p163 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r6963, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r6964, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2301, %r1448, 1;
	setp.lt.s32 	%p154, %r614, %r2301;
	setp.gt.s32 	%p155, %r614, -1;
	and.pred  	%p156, %p155, %p154;
	@%p156 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r6961, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r6962, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6963, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6964, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2509, 0;
	mov.u32 	%r2520, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2507,%r6801,%r2509,%r1929,%r2520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2512,%r6963,%r2507;
}
	// end inline asm
	mov.u32 	%r2518, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2516,%r6801,%r2518,%r1929,%r2520;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2521,%r6964,%r2516;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6966,%r2512,%r2521;
}
	// end inline asm
	setp.eq.s32 	%p164, %r410, 0;
	mov.u32 	%r6965, %r6966;
	@%p164 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r6965, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7044,%r7044,%r6965;
}
	// end inline asm
	setp.eq.s32 	%p165, %r410, 1;
	@%p165 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r6966, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7042,%r7042,%r6966;
}
	// end inline asm
	mov.u32 	%r2542, 2;
	mov.u32 	%r2553, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2540,%r6801,%r2542,%r1929,%r2553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2545,%r6963,%r2540;
}
	// end inline asm
	mov.u32 	%r2551, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2549,%r6801,%r2551,%r1929,%r2553;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2554,%r6964,%r2549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6968,%r2545,%r2554;
}
	// end inline asm
	mov.u32 	%r6967, %r6968;
	@%p164 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r6967, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7043,%r7043,%r6967;
}
	// end inline asm
	@%p165 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r6968, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7041,%r7041,%r6968;
}
	// end inline asm
	mov.u32 	%r2575, 4;
	mov.u32 	%r2586, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2573,%r6801,%r2575,%r1929,%r2586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2578,%r6963,%r2573;
}
	// end inline asm
	mov.u32 	%r2584, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2582,%r6801,%r2584,%r1929,%r2586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2587,%r6964,%r2582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6970,%r2578,%r2587;
}
	// end inline asm
	mov.u32 	%r6969, %r6970;
	@%p164 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r6969, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7040,%r7040,%r6969;
}
	// end inline asm
	@%p165 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r6970, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7039,%r7039,%r6970;
}
	// end inline asm
	mov.u32 	%r2608, 6;
	mov.u32 	%r2619, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2606,%r6801,%r2608,%r1929,%r2619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2611,%r6963,%r2606;
}
	// end inline asm
	mov.u32 	%r2617, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2615,%r6801,%r2617,%r1929,%r2619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2620,%r6964,%r2615;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6972,%r2611,%r2620;
}
	// end inline asm
	mov.u32 	%r6971, %r6972;
	@%p164 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r6971, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7038,%r7038,%r6971;
}
	// end inline asm
	@%p165 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r6972, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7036,%r7036,%r6972;
}
	// end inline asm
	mov.u32 	%r2641, 8;
	mov.u32 	%r2652, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2639,%r6801,%r2641,%r1929,%r2652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2644,%r6963,%r2639;
}
	// end inline asm
	mov.u32 	%r2650, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2648,%r6801,%r2650,%r1929,%r2652;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2653,%r6964,%r2648;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6974,%r2644,%r2653;
}
	// end inline asm
	mov.u32 	%r6973, %r6974;
	@%p164 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r6973, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7037,%r7037,%r6973;
}
	// end inline asm
	@%p165 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r6974, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7035,%r7035,%r6974;
}
	// end inline asm
	mov.u32 	%r2674, 10;
	mov.u32 	%r2685, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2672,%r6801,%r2674,%r1929,%r2685;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2677,%r6963,%r2672;
}
	// end inline asm
	mov.u32 	%r2683, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2681,%r6801,%r2683,%r1929,%r2685;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2686,%r6964,%r2681;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6976,%r2677,%r2686;
}
	// end inline asm
	mov.u32 	%r6975, %r6976;
	@%p164 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r6975, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7034,%r7034,%r6975;
}
	// end inline asm
	@%p165 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r6976, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7031,%r7031,%r6976;
}
	// end inline asm
	mov.u32 	%r2707, 12;
	mov.u32 	%r2718, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2705,%r6801,%r2707,%r1929,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2710,%r6963,%r2705;
}
	// end inline asm
	mov.u32 	%r2716, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2714,%r6801,%r2716,%r1929,%r2718;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2719,%r6964,%r2714;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6978,%r2710,%r2719;
}
	// end inline asm
	mov.u32 	%r6977, %r6978;
	@%p164 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r6977, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7033,%r7033,%r6977;
}
	// end inline asm
	@%p165 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r6978, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7030,%r7030,%r6978;
}
	// end inline asm
	mov.u32 	%r2740, 14;
	mov.u32 	%r2751, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2738,%r6801,%r2740,%r1929,%r2751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2743,%r6963,%r2738;
}
	// end inline asm
	mov.u32 	%r2749, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2747,%r6801,%r2749,%r1929,%r2751;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2752,%r6964,%r2747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6980,%r2743,%r2752;
}
	// end inline asm
	mov.u32 	%r6979, %r6980;
	@%p164 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r6979, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7028,%r7028,%r6979;
}
	// end inline asm
	@%p165 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r6980, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7025,%r7025,%r6980;
}
	// end inline asm
	mov.u32 	%r2773, 16;
	mov.u32 	%r2784, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2771,%r6801,%r2773,%r1929,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2776,%r6963,%r2771;
}
	// end inline asm
	mov.u32 	%r2782, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2780,%r6801,%r2782,%r1929,%r2784;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2785,%r6964,%r2780;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6982,%r2776,%r2785;
}
	// end inline asm
	mov.u32 	%r6981, %r6982;
	@%p164 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r6981, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7027,%r7027,%r6981;
}
	// end inline asm
	@%p165 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r6982, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7024,%r7024,%r6982;
}
	// end inline asm
	mov.u32 	%r2806, 18;
	mov.u32 	%r2817, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2804,%r6801,%r2806,%r1929,%r2817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2809,%r6963,%r2804;
}
	// end inline asm
	mov.u32 	%r2815, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2813,%r6801,%r2815,%r1929,%r2817;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2818,%r6964,%r2813;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6984,%r2809,%r2818;
}
	// end inline asm
	mov.u32 	%r6983, %r6984;
	@%p164 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r6983, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7022,%r7022,%r6983;
}
	// end inline asm
	@%p165 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r6984, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7021,%r7021,%r6984;
}
	// end inline asm
	mov.u32 	%r2839, 20;
	mov.u32 	%r2850, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2837,%r6801,%r2839,%r1929,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2842,%r6963,%r2837;
}
	// end inline asm
	mov.u32 	%r2848, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2846,%r6801,%r2848,%r1929,%r2850;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2851,%r6964,%r2846;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6986,%r2842,%r2851;
}
	// end inline asm
	mov.u32 	%r6985, %r6986;
	@%p164 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r6985, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7020,%r7020,%r6985;
}
	// end inline asm
	@%p165 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r6986, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7018,%r7018,%r6986;
}
	// end inline asm
	mov.u32 	%r2872, 22;
	mov.u32 	%r2883, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2870,%r6801,%r2872,%r1929,%r2883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2875,%r6963,%r2870;
}
	// end inline asm
	mov.u32 	%r2881, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2879,%r6801,%r2881,%r1929,%r2883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2884,%r6964,%r2879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6988,%r2875,%r2884;
}
	// end inline asm
	mov.u32 	%r6987, %r6988;
	@%p164 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r6987, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7016,%r7016,%r6987;
}
	// end inline asm
	@%p165 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r6988, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7013,%r7013,%r6988;
}
	// end inline asm
	mov.u32 	%r2905, 24;
	mov.u32 	%r2916, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2903,%r6801,%r2905,%r1929,%r2916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2908,%r6963,%r2903;
}
	// end inline asm
	mov.u32 	%r2914, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2912,%r6801,%r2914,%r1929,%r2916;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2917,%r6964,%r2912;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6990,%r2908,%r2917;
}
	// end inline asm
	mov.u32 	%r6989, %r6990;
	@%p164 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r6989, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7015,%r7015,%r6989;
}
	// end inline asm
	@%p165 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r6990, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7012,%r7012,%r6990;
}
	// end inline asm
	mov.u32 	%r2938, 26;
	mov.u32 	%r2949, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2936,%r6801,%r2938,%r1929,%r2949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2941,%r6963,%r2936;
}
	// end inline asm
	mov.u32 	%r2947, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2945,%r6801,%r2947,%r1929,%r2949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2950,%r6964,%r2945;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6992,%r2941,%r2950;
}
	// end inline asm
	mov.u32 	%r6991, %r6992;
	@%p164 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r6991, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7010,%r7010,%r6991;
}
	// end inline asm
	@%p165 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r6992, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7007,%r7007,%r6992;
}
	// end inline asm
	mov.u32 	%r2971, 28;
	mov.u32 	%r2982, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2969,%r6801,%r2971,%r1929,%r2982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2974,%r6963,%r2969;
}
	// end inline asm
	mov.u32 	%r2980, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r2978,%r6801,%r2980,%r1929,%r2982;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2983,%r6964,%r2978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6994,%r2974,%r2983;
}
	// end inline asm
	mov.u32 	%r6993, %r6994;
	@%p164 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r6993, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7009,%r7009,%r6993;
}
	// end inline asm
	@%p165 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r6994, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7006,%r7006,%r6994;
}
	// end inline asm
	mov.u32 	%r3013, 31;
	mov.u32 	%r3004, 30;
	mov.u32 	%r3015, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3002,%r6801,%r3004,%r1929,%r3015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3007,%r6963,%r3002;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3011,%r6801,%r3013,%r1929,%r3015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3016,%r6964,%r3011;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6996,%r3007,%r3016;
}
	// end inline asm
	mov.u32 	%r6995, %r6996;
	@%p164 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r6995, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7002,%r7002,%r6995;
}
	// end inline asm
	@%p165 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r6996, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7000,%r7000,%r6996;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6961, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r6962, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p157, %r613, %r1442;
	@%p157 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2495, 0;
	// begin inline asm
	{mul.f16x2 %r2403,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7044,%r7044,%r2403;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2409,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7032,%r7032,%r2409;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2415,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r7034,%r2415;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2421,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7014,%r7014,%r2421;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2427,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7016,%r7016,%r2427;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2433,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7001,%r7001,%r2433;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2439,%r6962,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7038,%r7038,%r2439;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2445,%r6962,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r7019,%r2445;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2451,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7042,%r7042,%r2451;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2457,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7029,%r7029,%r2457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2463,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7031,%r7031,%r2463;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2469,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7011,%r7011,%r2469;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2475,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7013,%r7013,%r2475;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2481,%r6961,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6999,%r6999,%r2481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2487,%r6962,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7036,%r7036,%r2487;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2493,%r6962,%r2495;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7017,%r7017,%r2493;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2306, %r1442, -2;
	setp.ne.s32 	%p158, %r613, %r2306;
	@%p158 bra 	$L__BB0_378;

	mov.u32 	%r2399, 0;
	// begin inline asm
	{mul.f16x2 %r2307,%r6961,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7022,%r7022,%r2307;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2313,%r6961,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7004,%r7004,%r2313;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2319,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7040,%r7040,%r2319;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2325,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7026,%r7026,%r2325;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2331,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7028,%r7028,%r2331;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2337,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7008,%r7008,%r2337;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2343,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7010,%r7010,%r2343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2349,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6998,%r6998,%r2349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2355,%r6961,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7021,%r7021,%r2355;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2361,%r6961,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7003,%r7003,%r2361;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2367,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7039,%r7039,%r2367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2373,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r7023,%r2373;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2379,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7025,%r7025,%r2379;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2385,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7005,%r7005,%r2385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2391,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7007,%r7007,%r2391;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2397,%r6962,%r2399;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6997,%r6997,%r2397;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p196, %r23, 1;
	mov.u32 	%r6856, %r1852;
	mov.u32 	%r6857, %r1852;
	mov.u32 	%r7047, %r1852;
	mov.u32 	%r7048, %r1852;
	mov.u32 	%r7049, %r1852;
	mov.u32 	%r6883, %r1852;
	mov.u32 	%r7051, %r1852;
	mov.u32 	%r6891, %r1852;
	mov.u32 	%r7053, %r1852;
	mov.u32 	%r7054, %r1852;
	@%p196 bra 	$L__BB0_380;

	add.s32 	%r6712, %r51, %r51;
	mul.lo.s32 	%r3035, %r1433, 320;
	add.s32 	%r3037, %r23, -1;
	mul.lo.s32 	%r3039, %r24, 320;
	mad.lo.s32 	%r3040, %r3035, %r3037, %r3039;
	add.s32 	%r3043, %r6712, -64;
	mad.lo.s32 	%r3048, %r3043, %r1840, %r1837;
	add.s32 	%r3049, %r3040, %r3048;
	shl.b32 	%r3050, %r3049, 2;
	mov.u32 	%r3051, _ZN6kernel5shmemE;
	add.s32 	%r3052, %r3051, %r3050;
	shl.b32 	%r3053, %r28, 4;
	add.s32 	%r3054, %r3052, %r3053;
	ld.shared.v4.u32 	{%r6891, %r6883, %r6857, %r6856}, [%r3054];
	shl.b32 	%r3059, %r28, 3;
	add.s32 	%r3060, %r3052, %r3059;
	ld.shared.v2.u32 	{%r7051, %r7049}, [%r3060+512];
	ld.shared.v4.u32 	{%r7054, %r7053, %r7048, %r7047}, [%r3054+768];

$L__BB0_380:
	setp.lt.s32 	%p197, %r24, 1;
	mov.u32 	%r7055, %r1852;
	mov.u32 	%r7056, %r1852;
	mov.u32 	%r7057, %r1852;
	mov.u32 	%r7058, %r1852;
	mov.u32 	%r7059, %r1852;
	mov.u32 	%r7060, %r1852;
	mov.u32 	%r7061, %r1852;
	mov.u32 	%r7062, %r1852;
	mov.u32 	%r7063, %r1852;
	mov.u32 	%r7064, %r1852;
	mov.u32 	%r7065, %r1852;
	mov.u32 	%r7066, %r1852;
	@%p197 bra 	$L__BB0_383;

	not.b32 	%r6711, %r23;
	add.s32 	%r6710, %r1432, %r6711;
	mad.lo.s32 	%r3074, %r6710, 384, %r1843;
	add.s32 	%r3076, %r24, -1;
	mad.lo.s32 	%r3079, %r1838, %r3076, %r3074;
	add.s32 	%r3085, %r3079, %r1841;
	shl.b32 	%r3086, %r3085, 2;
	mov.u32 	%r3087, _ZN6kernel5shmemE;
	add.s32 	%r3088, %r3087, %r3086;
	shl.b32 	%r3089, %r28, 4;
	add.s32 	%r3090, %r3088, %r3089;
	ld.shared.v4.u32 	{%r7066, %r7065, %r7063, %r7061}, [%r3090];
	shl.b32 	%r3095, %r28, 3;
	add.s32 	%r3096, %r3088, %r3095;
	ld.shared.v2.u32 	{%r7064, %r7062}, [%r3096+512];
	ld.shared.v4.u32 	{%r7060, %r7059, %r7057, %r7055}, [%r3090+768];
	mov.u32 	%r7056, %r1852;
	mov.u32 	%r7058, %r1852;
	@%p196 bra 	$L__BB0_383;

	add.s32 	%r6698, %r3096, 512;
	ld.shared.v2.u32 	{%r7058, %r7056}, [%r6698+768];

$L__BB0_383:
	setp.eq.s32 	%p199, %r23, 0;
	@%p199 bra 	$L__BB0_388;

	setp.eq.s32 	%p200, %r24, %r1840;
	@%p200 bra 	$L__BB0_386;

	sub.s32 	%r3109, %r1432, %r23;
	mul.lo.s32 	%r3112, %r51, %r24;
	mad.lo.s32 	%r3113, %r3109, 384, %r3112;
	mad.lo.s32 	%r3116, %r1838, %r1840, %r3113;
	mad.lo.s32 	%r3119, %r1836, %r1835, %r3116;
	shl.b32 	%r3120, %r3119, 2;
	mov.u32 	%r3121, _ZN6kernel5shmemE;
	add.s32 	%r3122, %r3121, %r3120;
	shl.b32 	%r3123, %r28, 4;
	add.s32 	%r3124, %r3122, %r3123;
	ld.shared.v4.u32 	{%r7080, %r7079, %r7082, %r7081}, [%r3124];

$L__BB0_386:
	shl.b32 	%r3130, %r24, 8;
	shl.b32 	%r3134, %r1433, 8;
	or.b32  	%r3135, %r3134, 128;
	add.s32 	%r3137, %r23, -1;
	mad.lo.s32 	%r3138, %r3135, %r3137, %r1843;
	add.s32 	%r3139, %r3138, %r3130;
	shl.b32 	%r3140, %r3139, 2;
	mov.u32 	%r3141, _ZN6kernel5shmemE;
	add.s32 	%r3142, %r3141, %r3140;
	setp.ne.s32 	%p201, %r24, %r1840;
	shl.b32 	%r3144, %r28, 4;
	add.s32 	%r872, %r3142, %r3144;
	ld.shared.v4.u32 	{%r7073, %r7071, %r7074, %r7072}, [%r872];
	ld.shared.v4.u32 	{%r7078, %r7077, %r7076, %r7075}, [%r872+512];
	@%p201 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7080, %r7079, %r7082, %r7081}, [%r872+1024];

$L__BB0_388:
	setp.eq.s32 	%p202, %r24, 0;
	@%p202 bra 	$L__BB0_391;

	not.b32 	%r6709, %r23;
	add.s32 	%r6708, %r1432, %r6709;
	mul.lo.s32 	%r3160, %r51, %r24;
	sub.s32 	%r3161, %r3160, %r51;
	mad.lo.s32 	%r3165, %r6708, 384, %r3161;
	mad.lo.s32 	%r3168, %r1838, %r1840, %r3165;
	mad.lo.s32 	%r3171, %r1836, %r1835, %r3168;
	shl.b32 	%r3172, %r3171, 2;
	mov.u32 	%r3173, _ZN6kernel5shmemE;
	add.s32 	%r3174, %r3173, %r3172;
	shl.b32 	%r3175, %r28, 4;
	add.s32 	%r897, %r3174, %r3175;
	ld.shared.v4.u32 	{%r7096, %r7095, %r7098, %r7097}, [%r897];
	ld.shared.v4.u32 	{%r7094, %r7092, %r7090, %r7089}, [%r897+512];
	ld.shared.v4.u32 	{%r7093, %r7091, %r7088, %r7086}, [%r897+1024];
	@%p199 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7084, %r7083, %r7087, %r7085}, [%r897+1536];

$L__BB0_391:
	mov.u32 	%r3197, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3193,%r6931,%r411,%r1929,%r3197;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3193;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6931;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3200, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3201,%r6932,%r3200;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3204,%r6802,%r3201;
}
	// end inline asm
	@%p11 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r7099,%r7044;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r7099,%r6803,%r3201;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3217, 31;
	mov.u32 	%r3240, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3215,%r7099,%r3217,%r1929,%r3240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3220,%r3204,%r3215;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3223,%r6930,%r6929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3226,%r3223,%r3220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3229,%r6933,%r3226;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3232,%r7044,%r3229;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3236,%r6926,%r411,%r1929,%r3240;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3236;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6926;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3243, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3244,%r6927,%r3243;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3247,%r6802,%r3244;
}
	// end inline asm
	mov.u32 	%r7100, %r7043;
	@%p11 bra 	$L__BB0_396;

	// begin inline asm
	{mul.f16x2 %r7100,%r6803,%r3244;
}
	// end inline asm

$L__BB0_396:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3258,%r7100,%r3217,%r1929,%r3240;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3263,%r3247,%r3258;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3266,%r6930,%r6925;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3269,%r3263,%r3266;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3272,%r6928,%r3269;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3275,%r7043,%r3272;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3278,%r6931,%r6932;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3281,%r6806,%r3278;
}
	// end inline asm
	@%p11 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7101,%r7042;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7101,%r6807,%r3278;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3294, 31;
	mov.u32 	%r3296, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3292,%r7101,%r3294,%r1929,%r3296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3297,%r3281,%r3292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3300,%r6923,%r6922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3303,%r3300,%r3297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3306,%r6924,%r3303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3309,%r7042,%r3306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3312,%r6926,%r6927;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3315,%r6806,%r3312;
}
	// end inline asm
	mov.u32 	%r7102, %r7041;
	@%p11 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7102,%r6807,%r3312;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3324,%r7102,%r3294,%r1929,%r3296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3329,%r3315,%r3324;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3332,%r6923,%r6920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3335,%r3329,%r3332;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3338,%r6921,%r3335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3341,%r7041,%r3338;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3345,%r6917,%r411,%r1929,%r3296;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3345;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6917;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3352, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3353,%r6918,%r3352;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3356,%r6802,%r3353;
}
	// end inline asm
	@%p11 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7103,%r7040;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7103,%r6803,%r3353;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3371, 31;
	mov.u32 	%r3373, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3369,%r7103,%r3371,%r1929,%r3373;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3374,%r3356,%r3369;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3377,%r6916,%r6930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3380,%r3377,%r3374;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3383,%r6919,%r3380;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3386,%r7040,%r3383;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3389,%r6917,%r6918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3392,%r6806,%r3389;
}
	// end inline asm
	@%p11 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r7104,%r7039;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r7104,%r6807,%r3389;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3405, 31;
	mov.u32 	%r3428, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3403,%r7104,%r3405,%r1929,%r3428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3408,%r3392,%r3403;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3411,%r6914,%r6923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3414,%r3411,%r3408;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3417,%r6915,%r3414;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3420,%r7039,%r3417;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3424,%r6912,%r411,%r1929,%r3428;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3424;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6912;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3431, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3432,%r6913,%r3431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3435,%r6802,%r3432;
}
	// end inline asm
	@%p11 bra 	$L__BB0_409;
	bra.uni 	$L__BB0_408;

$L__BB0_409:
	// begin inline asm
	{neg.f16x2 %r7105,%r7038;
}
	// end inline asm
	bra.uni 	$L__BB0_410;

$L__BB0_408:
	// begin inline asm
	{mul.f16x2 %r7105,%r6803,%r3432;
}
	// end inline asm

$L__BB0_410:
	mov.u32 	%r3450, 31;
	mov.u32 	%r3473, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3448,%r7105,%r3450,%r1929,%r3473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3453,%r3435,%r3448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3456,%r6911,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3459,%r3456,%r3453;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3462,%r7066,%r3459;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3465,%r7038,%r3462;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3469,%r6907,%r411,%r1929,%r3473;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3469;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6907;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3476, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3477,%r6908,%r3476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3480,%r6802,%r3477;
}
	// end inline asm
	mov.u32 	%r7106, %r7037;
	@%p11 bra 	$L__BB0_412;

	// begin inline asm
	{mul.f16x2 %r7106,%r6803,%r3477;
}
	// end inline asm

$L__BB0_412:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3491,%r7106,%r3450,%r1929,%r3473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3496,%r3480,%r3491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3499,%r6911,%r6929;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3502,%r3496,%r3499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3505,%r6909,%r3502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3508,%r7037,%r3505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3511,%r6912,%r6913;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3514,%r6806,%r3511;
}
	// end inline asm
	@%p11 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7107,%r7036;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7107,%r6807,%r3511;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3527, 31;
	mov.u32 	%r3529, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3525,%r7107,%r3527,%r1929,%r3529;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3530,%r3514,%r3525;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3533,%r6906,%r7097;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3536,%r3533,%r3530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3539,%r7065,%r3536;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3542,%r7036,%r3539;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3545,%r6907,%r6908;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3548,%r6806,%r3545;
}
	// end inline asm
	mov.u32 	%r7108, %r7035;
	@%p11 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7108,%r6807,%r3545;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3557,%r7108,%r3527,%r1929,%r3529;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3562,%r3548,%r3557;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3565,%r6906,%r6922;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3568,%r3562,%r3565;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3571,%r6904,%r3568;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3574,%r7035,%r3571;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3578,%r6901,%r411,%r1929,%r3529;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3578;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6901;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3585, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3586,%r6902,%r3585;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3589,%r6802,%r3586;
}
	// end inline asm
	@%p11 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7109,%r7034;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7109,%r6803,%r3586;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3604, 31;
	mov.u32 	%r3627, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3602,%r7109,%r3604,%r1929,%r3627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3607,%r3589,%r3602;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3610,%r6900,%r6911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3613,%r3610,%r3607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3616,%r506,%r3613;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6959,%r7034,%r3616;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3623,%r6897,%r411,%r1929,%r3627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3623;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6897;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3630, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3631,%r6898,%r3630;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3634,%r6802,%r3631;
}
	// end inline asm
	mov.u32 	%r7110, %r7033;
	@%p11 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7110,%r6803,%r3631;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3645,%r7110,%r3604,%r1929,%r3627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3650,%r3634,%r3645;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3653,%r6900,%r6930;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3656,%r3650,%r3653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3659,%r502,%r3656;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6957,%r7033,%r3659;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3665,%r6902,%r6932;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3668,%r6898,%r6908;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3671,%r3665,%r3668;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3674,%r6896,%r3671;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3677,%r7032,%r3674;
}
	// end inline asm
	selp.b32 	%r997, %r7032, %r3677, %p11;
	// begin inline asm
	{sub.f16x2 %r3680,%r6901,%r6902;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3683,%r6806,%r3680;
}
	// end inline asm
	@%p11 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7111,%r7031;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7111,%r6807,%r3680;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3696, 31;
	mov.u32 	%r3698, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3694,%r7111,%r3696,%r1929,%r3698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3699,%r3683,%r3694;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3702,%r6894,%r6906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3705,%r3702,%r3699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3708,%r498,%r3705;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6958,%r7031,%r3708;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3714,%r6897,%r6898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3717,%r6806,%r3714;
}
	// end inline asm
	mov.u32 	%r7112, %r7030;
	@%p11 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7112,%r6807,%r3714;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3726,%r7112,%r3696,%r1929,%r3698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3731,%r3717,%r3726;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3734,%r6894,%r6923;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3737,%r3731,%r3734;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3740,%r496,%r3737;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6956,%r7030,%r3740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3746,%r6901,%r6931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3749,%r6897,%r6907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r3746,%r3749;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3755,%r6892,%r3752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3758,%r7029,%r3755;
}
	// end inline asm
	selp.b32 	%r1009, %r7029, %r3758, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3762,%r6889,%r411,%r1929,%r3698;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3762;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6889;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3769, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3770,%r6890,%r3769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3773,%r6802,%r3770;
}
	// end inline asm
	@%p11 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7113,%r7028;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7113,%r6803,%r3770;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3788, 31;
	mov.u32 	%r3811, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3786,%r7113,%r3788,%r1929,%r3811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3791,%r3773,%r3786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3794,%r6888,%r6900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3797,%r3794,%r3791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3800,%r494,%r3797;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6955,%r7028,%r3800;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3807,%r6885,%r411,%r1929,%r3811;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3807;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6885;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3814, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3815,%r6886,%r3814;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3818,%r6802,%r3815;
}
	// end inline asm
	mov.u32 	%r7114, %r7027;
	@%p11 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7114,%r6803,%r3815;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3829,%r7114,%r3788,%r1929,%r3811;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3834,%r3818,%r3829;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3837,%r6888,%r6916;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3840,%r3834,%r3837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3843,%r6887,%r3840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3846,%r7027,%r3843;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3849,%r6890,%r6918;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3852,%r6886,%r6898;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3855,%r3849,%r3852;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3858,%r6884,%r3855;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3861,%r7026,%r3858;
}
	// end inline asm
	selp.b32 	%r1021, %r7026, %r3861, %p11;
	// begin inline asm
	{sub.f16x2 %r3864,%r6889,%r6890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3867,%r6806,%r3864;
}
	// end inline asm
	@%p11 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7115,%r7025;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7115,%r6807,%r3864;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3880, 31;
	mov.u32 	%r3882, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3878,%r7115,%r3880,%r1929,%r3882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3883,%r3867,%r3878;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3886,%r6882,%r6894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3889,%r3886,%r3883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3892,%r486,%r3889;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6954,%r7025,%r3892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3898,%r6885,%r6886;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3901,%r6806,%r3898;
}
	// end inline asm
	mov.u32 	%r7116, %r7024;
	@%p11 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7116,%r6807,%r3898;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3910,%r7116,%r3880,%r1929,%r3882;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3915,%r3901,%r3910;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3918,%r6882,%r6914;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3921,%r3915,%r3918;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3924,%r6881,%r3921;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3927,%r7024,%r3924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3930,%r6889,%r6917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3933,%r6885,%r6897;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r3930,%r3933;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3939,%r6880,%r3936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3942,%r7023,%r3939;
}
	// end inline asm
	selp.b32 	%r1033, %r7023, %r3942, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r3946,%r6878,%r411,%r1929,%r3882;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3946;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6878;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3953, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3954,%r6879,%r3953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3957,%r6802,%r3954;
}
	// end inline asm
	@%p11 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7117,%r7022;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7117,%r6803,%r3954;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r3972, 31;
	mov.u32 	%r3974, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3970,%r7117,%r3972,%r1929,%r3974;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3975,%r3957,%r3970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3978,%r7082,%r6888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3981,%r3978,%r3975;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3984,%r7054,%r3981;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3987,%r7022,%r3984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3990,%r6878,%r6879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3993,%r6806,%r3990;
}
	// end inline asm
	@%p11 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7118,%r7021;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7118,%r6807,%r3990;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4006, 31;
	mov.u32 	%r4029, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4004,%r7118,%r4006,%r1929,%r4029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4009,%r3993,%r4004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4012,%r7081,%r6882;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4015,%r4012,%r4009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4018,%r7053,%r4015;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4021,%r7021,%r4018;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4025,%r6874,%r411,%r1929,%r4029;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4025;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6874;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4032, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4033,%r6875,%r4032;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4036,%r6802,%r4033;
}
	// end inline asm
	mov.u32 	%r7119, %r7020;
	@%p11 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7119,%r6803,%r4033;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4047,%r7119,%r4006,%r1929,%r4029;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4052,%r4036,%r4047;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4055,%r7093,%r6911;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4058,%r4052,%r4055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4061,%r7064,%r4058;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6953,%r7020,%r4061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4067,%r7094,%r6913;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4070,%r6875,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4073,%r4067,%r4070;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4076,%r7063,%r4073;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4079,%r7019,%r4076;
}
	// end inline asm
	selp.b32 	%r1051, %r7019, %r4079, %p11;
	// begin inline asm
	{sub.f16x2 %r4082,%r6874,%r6875;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4085,%r6806,%r4082;
}
	// end inline asm
	mov.u32 	%r7120, %r7018;
	@%p11 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7120,%r6807,%r4082;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r4096, 31;
	mov.u32 	%r4134, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4094,%r7120,%r4096,%r1929,%r4134;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4099,%r4085,%r4094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4102,%r7091,%r6906;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4105,%r4099,%r4102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4108,%r7062,%r4105;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6952,%r7018,%r4108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4114,%r7092,%r6912;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r6874,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r4114,%r4117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4123,%r7061,%r4120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4126,%r7017,%r4123;
}
	// end inline asm
	selp.b32 	%r1057, %r7017, %r4126, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r4130,%r6870,%r411,%r1929,%r4134;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4130;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6870;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4137, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4138,%r6871,%r4137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4141,%r6802,%r4138;
}
	// end inline asm
	@%p11 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7121,%r7016;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7121,%r6803,%r4138;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r4156, 31;
	mov.u32 	%r4179, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4154,%r7121,%r4156,%r1929,%r4179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4159,%r4141,%r4154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4162,%r6869,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4165,%r4162,%r4159;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4168,%r7060,%r4165;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6951,%r7016,%r4168;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4175,%r6866,%r411,%r1929,%r4179;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4175;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6866;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4182, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4183,%r6867,%r4182;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4186,%r6802,%r4183;
}
	// end inline asm
	mov.u32 	%r7122, %r7015;
	@%p11 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7122,%r6803,%r4183;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4197,%r7122,%r4156,%r1929,%r4179;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4202,%r4186,%r4197;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4205,%r6869,%r6900;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4208,%r4202,%r4205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4211,%r6899,%r4208;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6949,%r7015,%r4211;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4217,%r6871,%r6902;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4220,%r6867,%r6875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4223,%r4217,%r4220;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4226,%r468,%r4223;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4229,%r7014,%r4226;
}
	// end inline asm
	selp.b32 	%r6947, %r7014, %r4229, %p11;
	// begin inline asm
	{sub.f16x2 %r4232,%r6870,%r6871;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4235,%r6806,%r4232;
}
	// end inline asm
	@%p11 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7123,%r7013;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7123,%r6807,%r4232;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4248, 31;
	mov.u32 	%r4250, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4246,%r7123,%r4248,%r1929,%r4250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4251,%r4235,%r4246;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4254,%r6864,%r7091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4257,%r4254,%r4251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4260,%r7059,%r4257;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6950,%r7013,%r4260;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4266,%r6866,%r6867;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4269,%r6806,%r4266;
}
	// end inline asm
	mov.u32 	%r7124, %r7012;
	@%p11 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7124,%r6807,%r4266;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4278,%r7124,%r4248,%r1929,%r4250;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4283,%r4269,%r4278;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4286,%r6864,%r6894;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4289,%r4283,%r4286;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4292,%r6893,%r4289;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6948,%r7012,%r4292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4298,%r6870,%r6901;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4301,%r6866,%r6874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r4298,%r4301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4307,%r465,%r4304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4310,%r7011,%r4307;
}
	// end inline asm
	selp.b32 	%r6946, %r7011, %r4310, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r4314,%r6860,%r411,%r1929,%r4250;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4314;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6860;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4321, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r6861,%r4321;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4325,%r6802,%r4322;
}
	// end inline asm
	@%p11 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7125,%r7010;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7125,%r6803,%r4322;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4340, 31;
	mov.u32 	%r4363, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4338,%r7125,%r4340,%r1929,%r4363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4343,%r4325,%r4338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4346,%r7078,%r6869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4349,%r4346,%r4343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4352,%r6891,%r4349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6945,%r7010,%r4352;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4359,%r6858,%r411,%r1929,%r4363;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4359;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6858;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4366, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4367,%r6859,%r4366;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4370,%r6802,%r4367;
}
	// end inline asm
	mov.u32 	%r7126, %r7009;
	@%p11 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7126,%r6803,%r4367;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4381,%r7126,%r4340,%r1929,%r4363;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4386,%r4370,%r4381;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4389,%r7078,%r6888;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4392,%r4386,%r4389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4395,%r7051,%r4392;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6943,%r7009,%r4395;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4401,%r6861,%r6890;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4404,%r6859,%r6867;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4407,%r4401,%r4404;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4410,%r460,%r4407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4413,%r7008,%r4410;
}
	// end inline asm
	selp.b32 	%r6941, %r7008, %r4413, %p11;
	// begin inline asm
	{sub.f16x2 %r4416,%r6860,%r6861;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4419,%r6806,%r4416;
}
	// end inline asm
	@%p11 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7127,%r7007;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7127,%r6807,%r4416;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4432, 31;
	mov.u32 	%r4434, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4430,%r7127,%r4432,%r1929,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4435,%r4419,%r4430;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4438,%r7077,%r6864;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4441,%r4438,%r4435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4444,%r6883,%r4441;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6944,%r7007,%r4444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4450,%r6858,%r6859;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4453,%r6806,%r4450;
}
	// end inline asm
	mov.u32 	%r7128, %r7006;
	@%p11 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7128,%r6807,%r4450;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4462,%r7128,%r4432,%r1929,%r4434;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4467,%r4453,%r4462;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4470,%r7077,%r6882;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4473,%r4467,%r4470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4476,%r7049,%r4473;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6942,%r7006,%r4476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4482,%r6860,%r6889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4485,%r6858,%r6866;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r4482,%r4485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4491,%r459,%r4488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4494,%r7005,%r4491;
}
	// end inline asm
	selp.b32 	%r6940, %r7005, %r4494, %p11;
	// begin inline asm
	{sub.f16x2 %r4497,%r7076,%r6879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4500,%r7080,%r6859;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4503,%r4497,%r4500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4506,%r7048,%r4503;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4509,%r7004,%r4506;
}
	// end inline asm
	selp.b32 	%r1106, %r7004, %r4509, %p11;
	// begin inline asm
	{sub.f16x2 %r4512,%r7075,%r6878;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4515,%r7079,%r6858;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4518,%r4512,%r4515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4521,%r7047,%r4518;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4524,%r7003,%r4521;
}
	// end inline asm
	selp.b32 	%r1107, %r7003, %r4524, %p11;
	// begin inline asm
	{shfl.sync.idx.b32 %r4528,%r6852,%r411,%r1929,%r4434;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4528;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6852;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4535, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4536,%r6853,%r4535;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4539,%r6802,%r4536;
}
	// end inline asm
	mov.u32 	%r7129, %r7002;
	@%p11 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r7129,%r6803,%r4536;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4552, 31;
	mov.u32 	%r4554, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4550,%r7129,%r4552,%r1929,%r4554;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4555,%r4539,%r4550;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4558,%r7087,%r6869;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4561,%r4555,%r4558;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4564,%r7058,%r4561;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6939,%r7002,%r4564;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4570,%r7088,%r6871;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4573,%r6853,%r7090;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4576,%r4570,%r4573;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4579,%r7057,%r4576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4582,%r7001,%r4579;
}
	// end inline asm
	selp.b32 	%r6937, %r7001, %r4582, %p11;
	// begin inline asm
	{sub.f16x2 %r4585,%r6852,%r6853;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4588,%r6806,%r4585;
}
	// end inline asm
	mov.u32 	%r7130, %r7000;
	@%p11 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7130,%r6807,%r4585;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4597,%r7130,%r4552,%r1929,%r4554;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4602,%r4588,%r4597;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4605,%r7085,%r6864;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4608,%r4602,%r4605;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4611,%r7056,%r4608;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6938,%r7000,%r4611;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4617,%r7086,%r6870;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4620,%r6852,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4623,%r4617,%r4620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4626,%r7055,%r4623;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4629,%r6999,%r4626;
}
	// end inline asm
	selp.b32 	%r6936, %r6999, %r4629, %p11;
	// begin inline asm
	{sub.f16x2 %r4632,%r7073,%r6861;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4635,%r7074,%r6853;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4638,%r4632,%r4635;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4641,%r6857,%r4638;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4644,%r6998,%r4641;
}
	// end inline asm
	selp.b32 	%r6935, %r6998, %r4644, %p11;
	// begin inline asm
	{sub.f16x2 %r4647,%r7071,%r6860;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4650,%r7072,%r6852;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4653,%r4647,%r4650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4656,%r6856,%r4653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4659,%r6997,%r4656;
}
	// end inline asm
	selp.b32 	%r6934, %r6997, %r4659, %p11;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4664, %r1437, -1;
	setp.ge.s32 	%p237, %r612, %r4664;
	setp.lt.s32 	%p238, %r612, 2;
	or.pred  	%p239, %p238, %p237;
	setp.lt.s32 	%p240, %r613, 2;
	or.pred  	%p241, %p240, %p239;
	add.s32 	%r4665, %r1438, -2;
	setp.ge.s32 	%p242, %r613, %r4665;
	or.pred  	%p243, %p242, %p241;
	setp.lt.s32 	%p244, %r614, %r1443;
	or.pred  	%p245, %p244, %p243;
	mad.lo.s32 	%r4666, %r1445, %r1444, %r1443;
	setp.ge.s32 	%p246, %r614, %r4666;
	or.pred  	%p247, %p245, %p246;
	@%p247 bra 	$L__BB0_521;

	sub.s32 	%r1122, %r614, %r1443;
	rem.s32 	%r4667, %r1122, %r1444;
	setp.ne.s32 	%p248, %r4667, 0;
	@%p248 bra 	$L__BB0_521;

	div.s32 	%r4668, %r1122, %r1444;
	mul.lo.s32 	%r4669, %r4668, %r1437;
	mul.lo.s32 	%r1123, %r4669, 3;
	add.s32 	%r1124, %r612, -2;
	add.s32 	%r4670, %r1123, %r1124;
	mul.lo.s32 	%r1125, %r4670, %r1438;
	@%p11 bra 	$L__BB0_475;

	add.s32 	%r4675, %r1125, %r613;
	mul.lo.s32 	%r4676, %r4675, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3232;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4677, %r377, %r4676;
	mul.wide.s32 	%rd259, %r4677, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3232;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4678, %r378, %r4676;
	mul.wide.s32 	%rd261, %r4678, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3309;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4679, %r391, %r4676;
	mul.wide.s32 	%rd263, %r4679, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3309;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4680, %r392, %r4676;
	mul.wide.s32 	%rd265, %r4680, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_475:
	add.s32 	%r1126, %r1123, %r1437;
	@%p11 bra 	$L__BB0_477;

	add.s32 	%r4685, %r1126, %r1124;
	mad.lo.s32 	%r4686, %r4685, %r1438, %r613;
	mul.lo.s32 	%r4687, %r4686, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3275;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4688, %r377, %r4687;
	mul.wide.s32 	%rd267, %r4688, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3275;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4689, %r378, %r4687;
	mul.wide.s32 	%rd269, %r4689, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3341;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4690, %r391, %r4687;
	mul.wide.s32 	%rd271, %r4690, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3341;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4691, %r392, %r4687;
	mul.wide.s32 	%rd273, %r4691, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_477:
	add.s32 	%r1127, %r613, 1;
	@%p11 bra 	$L__BB0_479;

	add.s32 	%r4696, %r1125, %r1127;
	mul.lo.s32 	%r4697, %r4696, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3386;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4698, %r377, %r4697;
	mul.wide.s32 	%rd275, %r4698, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3386;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4699, %r378, %r4697;
	mul.wide.s32 	%rd277, %r4699, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3420;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4700, %r391, %r4697;
	mul.wide.s32 	%rd279, %r4700, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3420;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4701, %r392, %r4697;
	mul.wide.s32 	%rd281, %r4701, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_479:
	add.s32 	%r1128, %r612, -1;
	add.s32 	%r4702, %r1123, %r1128;
	mul.lo.s32 	%r1129, %r4702, %r1438;
	add.s32 	%r1130, %r613, -1;
	@%p11 bra 	$L__BB0_481;

	add.s32 	%r4707, %r1129, %r1130;
	mul.lo.s32 	%r4708, %r4707, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3465;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4709, %r377, %r4708;
	mul.wide.s32 	%rd283, %r4709, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3465;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4710, %r378, %r4708;
	mul.wide.s32 	%rd285, %r4710, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3542;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4711, %r391, %r4708;
	mul.wide.s32 	%rd287, %r4711, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3542;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4712, %r392, %r4708;
	mul.wide.s32 	%rd289, %r4712, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_481:
	add.s32 	%r4713, %r1126, %r1128;
	mul.lo.s32 	%r1131, %r4713, %r1438;
	@%p11 bra 	$L__BB0_483;

	add.s32 	%r4718, %r1131, %r1130;
	mul.lo.s32 	%r4719, %r4718, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3508;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4720, %r377, %r4719;
	mul.wide.s32 	%rd291, %r4720, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3508;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4721, %r378, %r4719;
	mul.wide.s32 	%rd293, %r4721, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3574;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4722, %r391, %r4719;
	mul.wide.s32 	%rd295, %r4722, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3574;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4723, %r392, %r4719;
	mul.wide.s32 	%rd297, %r4723, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_483:
	@%p11 bra 	$L__BB0_485;

	add.s32 	%r4728, %r1129, %r613;
	mul.lo.s32 	%r4729, %r4728, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6959;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4730, %r377, %r4729;
	mul.wide.s32 	%rd299, %r4730, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6959;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4731, %r378, %r4729;
	mul.wide.s32 	%rd301, %r4731, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6958;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4732, %r391, %r4729;
	mul.wide.s32 	%rd303, %r4732, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6958;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4733, %r392, %r4729;
	mul.wide.s32 	%rd305, %r4733, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_485:
	@%p11 bra 	$L__BB0_487;

	add.s32 	%r4738, %r1131, %r613;
	mul.lo.s32 	%r4739, %r4738, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6957;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4740, %r377, %r4739;
	mul.wide.s32 	%rd307, %r4740, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6957;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4741, %r378, %r4739;
	mul.wide.s32 	%rd309, %r4741, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6956;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4742, %r391, %r4739;
	mul.wide.s32 	%rd311, %r4742, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6956;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4743, %r392, %r4739;
	mul.wide.s32 	%rd313, %r4743, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_487:
	add.s32 	%r1132, %r1126, %r1437;
	add.s32 	%r4744, %r1132, %r1128;
	mul.lo.s32 	%r1133, %r4744, %r1438;
	@%p11 bra 	$L__BB0_489;

	add.s32 	%r4749, %r1133, %r613;
	mul.lo.s32 	%r4750, %r4749, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r997;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4751, %r377, %r4750;
	mul.wide.s32 	%rd315, %r4751, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r997;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4752, %r378, %r4750;
	mul.wide.s32 	%rd317, %r4752, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1009;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4753, %r391, %r4750;
	mul.wide.s32 	%rd319, %r4753, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1009;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4754, %r392, %r4750;
	mul.wide.s32 	%rd321, %r4754, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_489:
	@%p11 bra 	$L__BB0_491;

	add.s32 	%r4759, %r1129, %r1127;
	mul.lo.s32 	%r4760, %r4759, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6955;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4761, %r377, %r4760;
	mul.wide.s32 	%rd323, %r4761, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6955;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4762, %r378, %r4760;
	mul.wide.s32 	%rd325, %r4762, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6954;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4763, %r391, %r4760;
	mul.wide.s32 	%rd327, %r4763, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6954;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4764, %r392, %r4760;
	mul.wide.s32 	%rd329, %r4764, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_491:
	@%p11 bra 	$L__BB0_493;

	add.s32 	%r4769, %r1131, %r1127;
	mul.lo.s32 	%r4770, %r4769, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3846;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4771, %r377, %r4770;
	mul.wide.s32 	%rd331, %r4771, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3846;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4772, %r378, %r4770;
	mul.wide.s32 	%rd333, %r4772, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3927;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4773, %r391, %r4770;
	mul.wide.s32 	%rd335, %r4773, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3927;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4774, %r392, %r4770;
	mul.wide.s32 	%rd337, %r4774, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_493:
	@%p11 bra 	$L__BB0_495;

	add.s32 	%r4779, %r1133, %r1127;
	mul.lo.s32 	%r4780, %r4779, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1021;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4781, %r377, %r4780;
	mul.wide.s32 	%rd339, %r4781, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1021;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4782, %r378, %r4780;
	mul.wide.s32 	%rd341, %r4782, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1033;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4783, %r391, %r4780;
	mul.wide.s32 	%rd343, %r4783, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1033;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4784, %r392, %r4780;
	mul.wide.s32 	%rd345, %r4784, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_495:
	add.s32 	%r1134, %r613, 2;
	@%p11 bra 	$L__BB0_497;

	add.s32 	%r4789, %r1129, %r1134;
	mul.lo.s32 	%r4790, %r4789, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3987;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4791, %r377, %r4790;
	mul.wide.s32 	%rd347, %r4791, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3987;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4792, %r378, %r4790;
	mul.wide.s32 	%rd349, %r4792, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4021;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4793, %r391, %r4790;
	mul.wide.s32 	%rd351, %r4793, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4021;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4794, %r392, %r4790;
	mul.wide.s32 	%rd353, %r4794, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_497:
	add.s32 	%r4795, %r1126, %r612;
	mul.lo.s32 	%r1135, %r4795, %r1438;
	@%p11 bra 	$L__BB0_499;

	add.s32 	%r4800, %r1135, %r1130;
	mul.lo.s32 	%r4801, %r4800, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6953;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4802, %r377, %r4801;
	mul.wide.s32 	%rd355, %r4802, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6953;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4803, %r378, %r4801;
	mul.wide.s32 	%rd357, %r4803, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6952;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4804, %r391, %r4801;
	mul.wide.s32 	%rd359, %r4804, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6952;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4805, %r392, %r4801;
	mul.wide.s32 	%rd361, %r4805, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_499:
	add.s32 	%r4806, %r1132, %r612;
	mul.lo.s32 	%r1136, %r4806, %r1438;
	@%p11 bra 	$L__BB0_501;

	add.s32 	%r4811, %r1136, %r1130;
	mul.lo.s32 	%r4812, %r4811, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1051;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4813, %r377, %r4812;
	mul.wide.s32 	%rd363, %r4813, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1051;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4814, %r378, %r4812;
	mul.wide.s32 	%rd365, %r4814, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1057;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4815, %r391, %r4812;
	mul.wide.s32 	%rd367, %r4815, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1057;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4816, %r392, %r4812;
	mul.wide.s32 	%rd369, %r4816, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_501:
	add.s32 	%r4817, %r1123, %r612;
	mul.lo.s32 	%r1137, %r4817, %r1438;
	@%p11 bra 	$L__BB0_503;

	add.s32 	%r4822, %r1137, %r613;
	mul.lo.s32 	%r4823, %r4822, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6951;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4824, %r377, %r4823;
	mul.wide.s32 	%rd371, %r4824, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6951;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4825, %r378, %r4823;
	mul.wide.s32 	%rd373, %r4825, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6950;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4826, %r391, %r4823;
	mul.wide.s32 	%rd375, %r4826, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6950;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4827, %r392, %r4823;
	mul.wide.s32 	%rd377, %r4827, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_503:
	@%p11 bra 	$L__BB0_505;

	add.s32 	%r4832, %r1135, %r613;
	mul.lo.s32 	%r4833, %r4832, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6949;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4834, %r377, %r4833;
	mul.wide.s32 	%rd379, %r4834, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6949;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4835, %r378, %r4833;
	mul.wide.s32 	%rd381, %r4835, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6948;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4836, %r391, %r4833;
	mul.wide.s32 	%rd383, %r4836, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6948;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4837, %r392, %r4833;
	mul.wide.s32 	%rd385, %r4837, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_505:
	@%p11 bra 	$L__BB0_507;

	add.s32 	%r4842, %r1136, %r613;
	mul.lo.s32 	%r4843, %r4842, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6947;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4844, %r377, %r4843;
	mul.wide.s32 	%rd387, %r4844, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6947;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4845, %r378, %r4843;
	mul.wide.s32 	%rd389, %r4845, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6946;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4846, %r391, %r4843;
	mul.wide.s32 	%rd391, %r4846, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6946;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4847, %r392, %r4843;
	mul.wide.s32 	%rd393, %r4847, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_507:
	@%p11 bra 	$L__BB0_509;

	add.s32 	%r4852, %r1137, %r1127;
	mul.lo.s32 	%r4853, %r4852, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6945;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4854, %r377, %r4853;
	mul.wide.s32 	%rd395, %r4854, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6945;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4855, %r378, %r4853;
	mul.wide.s32 	%rd397, %r4855, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6944;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4856, %r391, %r4853;
	mul.wide.s32 	%rd399, %r4856, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6944;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4857, %r392, %r4853;
	mul.wide.s32 	%rd401, %r4857, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_509:
	@%p11 bra 	$L__BB0_511;

	add.s32 	%r4862, %r1135, %r1127;
	mul.lo.s32 	%r4863, %r4862, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6943;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4864, %r377, %r4863;
	mul.wide.s32 	%rd403, %r4864, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6943;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4865, %r378, %r4863;
	mul.wide.s32 	%rd405, %r4865, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6942;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4866, %r391, %r4863;
	mul.wide.s32 	%rd407, %r4866, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6942;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4867, %r392, %r4863;
	mul.wide.s32 	%rd409, %r4867, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_511:
	@%p11 bra 	$L__BB0_513;

	add.s32 	%r4872, %r1136, %r1127;
	mul.lo.s32 	%r4873, %r4872, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6941;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4874, %r377, %r4873;
	mul.wide.s32 	%rd411, %r4874, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6941;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4875, %r378, %r4873;
	mul.wide.s32 	%rd413, %r4875, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6940;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4876, %r391, %r4873;
	mul.wide.s32 	%rd415, %r4876, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6940;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4877, %r392, %r4873;
	mul.wide.s32 	%rd417, %r4877, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_513:
	add.s32 	%r1138, %r1136, %r1134;
	@%p11 bra 	$L__BB0_515;

	mul.lo.s32 	%r4882, %r1138, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1106;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4883, %r377, %r4882;
	mul.wide.s32 	%rd419, %r4883, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1106;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4884, %r378, %r4882;
	mul.wide.s32 	%rd421, %r4884, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4885, %r391, %r4882;
	mul.wide.s32 	%rd423, %r4885, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1107;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4886, %r392, %r4882;
	mul.wide.s32 	%rd425, %r4886, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_515:
	add.s32 	%r1139, %r612, 1;
	@%p11 bra 	$L__BB0_517;

	add.s32 	%r4891, %r1126, %r1139;
	mad.lo.s32 	%r4892, %r4891, %r1438, %r613;
	mul.lo.s32 	%r4893, %r4892, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6939;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4894, %r377, %r4893;
	mul.wide.s32 	%rd427, %r4894, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6939;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4895, %r378, %r4893;
	mul.wide.s32 	%rd429, %r4895, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6938;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4896, %r391, %r4893;
	mul.wide.s32 	%rd431, %r4896, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6938;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4897, %r392, %r4893;
	mul.wide.s32 	%rd433, %r4897, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_517:
	add.s32 	%r4898, %r1132, %r1139;
	mul.lo.s32 	%r1140, %r4898, %r1438;
	@%p11 bra 	$L__BB0_519;

	add.s32 	%r4903, %r1140, %r613;
	mul.lo.s32 	%r4904, %r4903, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6937;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4905, %r377, %r4904;
	mul.wide.s32 	%rd435, %r4905, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6937;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4906, %r378, %r4904;
	mul.wide.s32 	%rd437, %r4906, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6936;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4907, %r391, %r4904;
	mul.wide.s32 	%rd439, %r4907, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6936;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4908, %r392, %r4904;
	mul.wide.s32 	%rd441, %r4908, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_519:
	add.s32 	%r1141, %r1140, %r1127;
	@%p11 bra 	$L__BB0_521;

	mul.lo.s32 	%r4913, %r1141, %r40;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6935;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4914, %r377, %r4913;
	mul.wide.s32 	%rd443, %r4914, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6935;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4915, %r378, %r4913;
	mul.wide.s32 	%rd445, %r4915, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6934;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4916, %r391, %r4913;
	mul.wide.s32 	%rd447, %r4916, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;
	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r6934;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4917, %r392, %r4913;
	mul.wide.s32 	%rd449, %r4917, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_521:
	setp.eq.s32 	%p273, %r23, %r1835;
	@%p273 bra 	$L__BB0_523;

	mad.lo.s32 	%r4920, %r1433, %r23, %r24;
	mov.u32 	%r4921, _ZN6kernel5shmemE;
	mad.lo.s32 	%r4922, %r4920, 1280, %r4921;
	add.s32 	%r4923, %r4922, -256;
	shl.b32 	%r4924, %r28, 4;
	add.s32 	%r4925, %r4923, %r4924;
	st.shared.v4.u32 	[%r4925+256], {%r3465, %r3542, %r1051, %r1057};
	st.shared.v4.u32 	[%r4925+1024], {%r3232, %r3309, %r997, %r1009};
	shl.b32 	%r4926, %r28, 3;
	add.s32 	%r4927, %r4923, %r4926;
	st.shared.v2.u32 	[%r4927+768], {%r3508, %r3574};

$L__BB0_523:
	setp.eq.s32 	%p274, %r24, %r1840;
	@%p274 bra 	$L__BB0_527;

	not.b32 	%r6701, %r23;
	add.s32 	%r6700, %r1432, %r6701;
	mul.lo.s32 	%r4933, %r1432, %r24;
	mul.lo.s32 	%r4934, %r4933, 384;
	shl.b32 	%r4935, %r24, 6;
	sub.s32 	%r4936, %r4934, %r4935;
	mad.lo.s32 	%r4938, %r1836, %r1835, %r4936;
	mad.lo.s32 	%r4939, %r6700, 384, %r4938;
	shl.b32 	%r4940, %r4939, 2;
	mov.u32 	%r4941, _ZN6kernel5shmemE;
	add.s32 	%r4942, %r4941, %r4940;
	add.s32 	%r4943, %r4942, -256;
	shl.b32 	%r4944, %r28, 4;
	add.s32 	%r4945, %r4943, %r4944;
	st.shared.v4.u32 	[%r4945+256], {%r3386, %r3420, %r1021, %r1033};
	st.shared.v4.u32 	[%r4945+1024], {%r3987, %r4021, %r1106, %r1107};
	shl.b32 	%r4946, %r28, 3;
	add.s32 	%r1146, %r4943, %r4946;
	@%p273 bra 	$L__BB0_526;

	st.shared.v2.u32 	[%r1146], {%r3275, %r3341};

$L__BB0_526:
	st.shared.v2.u32 	[%r1146+768], {%r3846, %r3927};

$L__BB0_527:
	bar.sync 	0;
	@%p199 bra 	$L__BB0_529;

	mul.lo.s32 	%r4947, %r1433, 320;
	add.s32 	%r4949, %r23, -1;
	mul.lo.s32 	%r4951, %r24, 320;
	mad.lo.s32 	%r4952, %r4947, %r4949, %r4951;
	shl.b32 	%r4953, %r4952, 2;
	mov.u32 	%r4954, _ZN6kernel5shmemE;
	add.s32 	%r4955, %r4954, %r4953;
	add.s32 	%r4956, %r4955, -256;
	shl.b32 	%r4957, %r28, 4;
	add.s32 	%r4958, %r4956, %r4957;
	ld.shared.v4.u32 	{%r7138, %r7136, %r7132, %r7131}, [%r4958+256];
	ld.shared.v4.u32 	{%r7140, %r7139, %r7134, %r7133}, [%r4958+1024];
	shl.b32 	%r4967, %r28, 3;
	add.s32 	%r4968, %r4956, %r4967;
	ld.shared.v2.u32 	{%r7137, %r7135}, [%r4968+768];

$L__BB0_529:
	setp.eq.s32 	%p320, %r24, 0;
	@%p320 bra 	$L__BB0_532;

	not.b32 	%r6703, %r23;
	add.s32 	%r6702, %r1432, %r6703;
	mad.lo.s32 	%r4974, %r1432, 384, -64;
	add.s32 	%r4976, %r24, -1;
	mul.lo.s32 	%r4977, %r4974, %r4976;
	mad.lo.s32 	%r4980, %r1836, %r1835, %r4977;
	mad.lo.s32 	%r4981, %r6702, 384, %r4980;
	shl.b32 	%r4982, %r4981, 2;
	mov.u32 	%r4983, _ZN6kernel5shmemE;
	add.s32 	%r4984, %r4983, %r4982;
	add.s32 	%r4985, %r4984, -256;
	shl.b32 	%r4986, %r28, 4;
	add.s32 	%r4987, %r4985, %r4986;
	ld.shared.v4.u32 	{%r7152, %r7151, %r7149, %r7147}, [%r4987+256];
	ld.shared.v4.u32 	{%r7146, %r7145, %r7143, %r7141}, [%r4987+1024];
	shl.b32 	%r4996, %r28, 3;
	add.s32 	%r4997, %r4985, %r4996;
	ld.shared.v2.u32 	{%r7150, %r7148}, [%r4997+768];
	@%p199 bra 	$L__BB0_532;

	add.s32 	%r6699, %r4997, 768;
	ld.shared.v2.u32 	{%r7144, %r7142}, [%r6699+768];

$L__BB0_532:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5002, {low,high};}

	// end inline asm
	selp.b32 	%r5004, %r6805, %r5002, %p11;
	// begin inline asm
	{mul.f16x2 %r5003,%r5004,%r6930;
}
	// end inline asm
	selp.b32 	%r5007, %r6809, %r5002, %p11;
	// begin inline asm
	{mul.f16x2 %r5006,%r5007,%r6923;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5009, {low,high};}

	// end inline asm
	selp.b32 	%r5011, %r6805, %r5009, %p11;
	// begin inline asm
	{mul.f16x2 %r5010,%r5011,%r6911;
}
	// end inline asm
	selp.b32 	%r5014, %r6809, %r5009, %p11;
	// begin inline asm
	{mul.f16x2 %r5013,%r5014,%r6906;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5016, {low,high};}

	// end inline asm
	selp.b32 	%r5018, %r6805, %r5016, %p11;
	// begin inline asm
	{mul.f16x2 %r5017,%r5018,%r6898;
}
	// end inline asm
	selp.b32 	%r5021, %r6809, %r5016, %p11;
	// begin inline asm
	{mul.f16x2 %r5020,%r5021,%r6897;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5023, {low,high};}

	// end inline asm
	selp.b32 	%r5025, %r6805, %r5023, %p11;
	// begin inline asm
	{mul.f16x2 %r5024,%r5025,%r6902;
}
	// end inline asm
	selp.b32 	%r5028, %r6809, %r5023, %p11;
	// begin inline asm
	{mul.f16x2 %r5027,%r5028,%r6901;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5030, {low,high};}

	// end inline asm
	selp.b32 	%r5032, %r6805, %r5030, %p11;
	// begin inline asm
	{mul.f16x2 %r5031,%r5032,%r6900;
}
	// end inline asm
	selp.b32 	%r5035, %r6809, %r5030, %p11;
	// begin inline asm
	{mul.f16x2 %r5034,%r5035,%r6894;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5037, {low,high};}

	// end inline asm
	selp.b32 	%r5039, %r6805, %r5037, %p11;
	// begin inline asm
	{mul.f16x2 %r5038,%r5039,%r6890;
}
	// end inline asm
	selp.b32 	%r5042, %r6809, %r5037, %p11;
	// begin inline asm
	{mul.f16x2 %r5041,%r5042,%r6889;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5044, {low,high};}

	// end inline asm
	selp.b32 	%r5046, %r6805, %r5044, %p11;
	// begin inline asm
	{mul.f16x2 %r5045,%r5046,%r6888;
}
	// end inline asm
	selp.b32 	%r5049, %r6809, %r5044, %p11;
	// begin inline asm
	{mul.f16x2 %r5048,%r5049,%r6882;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5051, {low,high};}

	// end inline asm
	selp.b32 	%r5053, %r6805, %r5051, %p11;
	// begin inline asm
	{mul.f16x2 %r5052,%r5053,%r6875;
}
	// end inline asm
	selp.b32 	%r5056, %r6809, %r5051, %p11;
	// begin inline asm
	{mul.f16x2 %r5055,%r5056,%r6874;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5058, {low,high};}

	// end inline asm
	selp.b32 	%r5060, %r6805, %r5058, %p11;
	// begin inline asm
	{mul.f16x2 %r5059,%r5060,%r7094;
}
	// end inline asm
	selp.b32 	%r5063, %r6809, %r5058, %p11;
	// begin inline asm
	{mul.f16x2 %r5062,%r5063,%r7092;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5065, {low,high};}

	// end inline asm
	selp.b32 	%r5067, %r6805, %r5065, %p11;
	// begin inline asm
	{mul.f16x2 %r5066,%r5067,%r7093;
}
	// end inline asm
	selp.b32 	%r5070, %r6809, %r5065, %p11;
	// begin inline asm
	{mul.f16x2 %r5069,%r5070,%r7091;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5072, {low,high};}

	// end inline asm
	selp.b32 	%r5074, %r6805, %r5072, %p11;
	// begin inline asm
	{mul.f16x2 %r5073,%r5074,%r6867;
}
	// end inline asm
	selp.b32 	%r5077, %r6809, %r5072, %p11;
	// begin inline asm
	{mul.f16x2 %r5076,%r5077,%r6866;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5079, {low,high};}

	// end inline asm
	selp.b32 	%r5081, %r6805, %r5079, %p11;
	// begin inline asm
	{mul.f16x2 %r5080,%r5081,%r6871;
}
	// end inline asm
	selp.b32 	%r5084, %r6809, %r5079, %p11;
	// begin inline asm
	{mul.f16x2 %r5083,%r5084,%r6870;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5086, {low,high};}

	// end inline asm
	selp.b32 	%r5088, %r6805, %r5086, %p11;
	// begin inline asm
	{mul.f16x2 %r5087,%r5088,%r6869;
}
	// end inline asm
	selp.b32 	%r5091, %r6809, %r5086, %p11;
	// begin inline asm
	{mul.f16x2 %r5090,%r5091,%r6864;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5093, {low,high};}

	// end inline asm
	selp.b32 	%r5095, %r6805, %r5093, %p11;
	// begin inline asm
	{mul.f16x2 %r5094,%r5095,%r6859;
}
	// end inline asm
	selp.b32 	%r5098, %r6809, %r5093, %p11;
	// begin inline asm
	{mul.f16x2 %r5097,%r5098,%r6858;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5100, {low,high};}

	// end inline asm
	selp.b32 	%r5102, %r6805, %r5100, %p11;
	// begin inline asm
	{mul.f16x2 %r5101,%r5102,%r6861;
}
	// end inline asm
	selp.b32 	%r5105, %r6809, %r5100, %p11;
	// begin inline asm
	{mul.f16x2 %r5104,%r5105,%r6860;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5107, {low,high};}

	// end inline asm
	selp.b32 	%r5109, %r6805, %r5107, %p11;
	// begin inline asm
	{mul.f16x2 %r5108,%r5109,%r7078;
}
	// end inline asm
	selp.b32 	%r5112, %r6809, %r5107, %p11;
	// begin inline asm
	{mul.f16x2 %r5111,%r5112,%r7077;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5114, {low,high};}

	// end inline asm
	selp.b32 	%r5116, %r6805, %r5114, %p11;
	// begin inline asm
	{mul.f16x2 %r5115,%r5116,%r7076;
}
	// end inline asm
	selp.b32 	%r5119, %r6809, %r5114, %p11;
	// begin inline asm
	{mul.f16x2 %r5118,%r5119,%r7075;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5121, {low,high};}

	// end inline asm
	selp.b32 	%r5123, %r6805, %r5121, %p11;
	// begin inline asm
	{mul.f16x2 %r5122,%r5123,%r7090;
}
	// end inline asm
	selp.b32 	%r5126, %r6809, %r5121, %p11;
	// begin inline asm
	{mul.f16x2 %r5125,%r5126,%r7089;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5128, {low,high};}

	// end inline asm
	selp.b32 	%r5130, %r6805, %r5128, %p11;
	// begin inline asm
	{mul.f16x2 %r5129,%r5130,%r6853;
}
	// end inline asm
	selp.b32 	%r5133, %r6809, %r5128, %p11;
	// begin inline asm
	{mul.f16x2 %r5132,%r5133,%r6852;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5135, {low,high};}

	// end inline asm
	selp.b32 	%r5137, %r6805, %r5135, %p11;
	// begin inline asm
	{mul.f16x2 %r5136,%r5137,%r7088;
}
	// end inline asm
	selp.b32 	%r5140, %r6809, %r5135, %p11;
	// begin inline asm
	{mul.f16x2 %r5139,%r5140,%r7086;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5142, {low,high};}

	// end inline asm
	selp.b32 	%r5144, %r6805, %r5142, %p11;
	// begin inline asm
	{mul.f16x2 %r5143,%r5144,%r7087;
}
	// end inline asm
	selp.b32 	%r5147, %r6809, %r5142, %p11;
	// begin inline asm
	{mul.f16x2 %r5146,%r5147,%r7085;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5149, {low,high};}

	// end inline asm
	selp.b32 	%r5151, %r6805, %r5149, %p11;
	// begin inline asm
	{mul.f16x2 %r5150,%r5151,%r7074;
}
	// end inline asm
	selp.b32 	%r5154, %r6809, %r5149, %p11;
	// begin inline asm
	{mul.f16x2 %r5153,%r5154,%r7072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5156, {low,high};}

	// end inline asm
	selp.b32 	%r5158, %r6805, %r5156, %p11;
	// begin inline asm
	{mul.f16x2 %r5157,%r5158,%r7073;
}
	// end inline asm
	selp.b32 	%r5161, %r6809, %r5156, %p11;
	// begin inline asm
	{mul.f16x2 %r5160,%r5161,%r7071;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5163, {low,high};}

	// end inline asm
	selp.b32 	%r5165, %r6805, %r5163, %p11;
	// begin inline asm
	{mul.f16x2 %r5164,%r5165,%r7084;
}
	// end inline asm
	selp.b32 	%r5168, %r6809, %r5163, %p11;
	// begin inline asm
	{mul.f16x2 %r5167,%r5168,%r7083;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5170,%r6957,%r3275;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5173,%r3386,%r3232;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5176,%r5170,%r5173;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5179,%r6713,%r5176;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5182,%r5003,%r5179;
}
	// end inline asm
	selp.b32 	%r6925, %r5003, %r5182, %p11;
	// begin inline asm
	{sub.f16x2 %r5185,%r6956,%r3341;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5188,%r3420,%r3309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5191,%r5185,%r5188;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5194,%r6713,%r5191;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5197,%r5006,%r5194;
}
	// end inline asm
	selp.b32 	%r6920, %r5006, %r5197, %p11;
	// begin inline asm
	{sub.f16x2 %r5200,%r6953,%r3508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5203,%r6959,%r3465;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5206,%r5200,%r5203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5209,%r6713,%r5206;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5212,%r5010,%r5209;
}
	// end inline asm
	selp.b32 	%r6929, %r5010, %r5212, %p11;
	// begin inline asm
	{sub.f16x2 %r5215,%r6952,%r3574;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5218,%r6958,%r3542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5221,%r5215,%r5218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5224,%r6713,%r5221;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5227,%r5013,%r5224;
}
	// end inline asm
	selp.b32 	%r6922, %r5013, %r5227, %p11;
	// begin inline asm
	{sub.f16x2 %r5230,%r6956,%r6957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5233,%r6804,%r5230;
}
	// end inline asm
	@%p11 bra 	$L__BB0_534;
	bra.uni 	$L__BB0_533;

$L__BB0_534:
	// begin inline asm
	{neg.f16x2 %r7153,%r5017;
}
	// end inline asm
	bra.uni 	$L__BB0_535;

$L__BB0_533:
	// begin inline asm
	{mul.f16x2 %r7153,%r6805,%r5230;
}
	// end inline asm

$L__BB0_535:
	mov.u32 	%r5244, 31;
	mov.u32 	%r5246, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5242,%r7153,%r5244,%r1929,%r5246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5247,%r5233,%r5242;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5250,%r1021,%r997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5253,%r5250,%r5247;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5256,%r6713,%r5253;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6927,%r5017,%r5256;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5262,%r6958,%r6959;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5265,%r6804,%r5262;
}
	// end inline asm
	mov.u32 	%r7154, %r5024;
	@%p11 bra 	$L__BB0_537;

	// begin inline asm
	{mul.f16x2 %r7154,%r6805,%r5262;
}
	// end inline asm

$L__BB0_537:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5274,%r7154,%r5244,%r1929,%r5246;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5279,%r5265,%r5274;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5282,%r6947,%r997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5285,%r5279,%r5282;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5288,%r6713,%r5285;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6932,%r5024,%r5288;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5294,%r6949,%r6957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5297,%r6955,%r6959;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5300,%r5294,%r5297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5303,%r6713,%r5300;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5306,%r5031,%r5303;
}
	// end inline asm
	selp.b32 	%r6930, %r5031, %r5306, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6957;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5311,%r6957,%r412,%r1929,%r5246;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5311;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5317, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5318,%r5317,%r6956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5321,%r6808,%r5318;
}
	// end inline asm
	@%p11 bra 	$L__BB0_539;
	bra.uni 	$L__BB0_538;

$L__BB0_539:
	// begin inline asm
	{neg.f16x2 %r7155,%r5020;
}
	// end inline asm
	bra.uni 	$L__BB0_540;

$L__BB0_538:
	// begin inline asm
	{mul.f16x2 %r7155,%r6809,%r5318;
}
	// end inline asm

$L__BB0_540:
	mov.u32 	%r5336, 31;
	mov.u32 	%r5360, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5334,%r7155,%r5336,%r1929,%r5360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5339,%r5321,%r5334;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5342,%r1033,%r1009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5345,%r5342,%r5339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5348,%r6713,%r5345;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6926,%r5020,%r5348;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6959;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5356,%r6959,%r412,%r1929,%r5360;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5356;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5362, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5363,%r5362,%r6958;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5366,%r6808,%r5363;
}
	// end inline asm
	mov.u32 	%r7156, %r5027;
	@%p11 bra 	$L__BB0_542;

	// begin inline asm
	{mul.f16x2 %r7156,%r6809,%r5363;
}
	// end inline asm

$L__BB0_542:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5377,%r7156,%r5336,%r1929,%r5360;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5382,%r5366,%r5377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5385,%r6946,%r1009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5388,%r5382,%r5385;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5391,%r6713,%r5388;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6931,%r5027,%r5391;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5397,%r6948,%r6956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5400,%r6954,%r6958;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5403,%r5397,%r5400;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5406,%r6713,%r5403;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5409,%r5034,%r5406;
}
	// end inline asm
	selp.b32 	%r6923, %r5034, %r5409, %p11;
	// begin inline asm
	{sub.f16x2 %r5412,%r6954,%r6955;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5415,%r6804,%r5412;
}
	// end inline asm
	mov.u32 	%r7157, %r5038;
	@%p11 bra 	$L__BB0_544;

	// begin inline asm
	{mul.f16x2 %r7157,%r6805,%r5412;
}
	// end inline asm

$L__BB0_544:
	mov.u32 	%r5426, 31;
	mov.u32 	%r5465, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5424,%r7157,%r5426,%r1929,%r5465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5429,%r5415,%r5424;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5432,%r6941,%r1021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5435,%r5429,%r5432;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5438,%r6713,%r5435;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6918,%r5038,%r5438;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5444,%r6943,%r3846;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5447,%r3987,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5450,%r5444,%r5447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5453,%r6713,%r5450;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5456,%r5045,%r5453;
}
	// end inline asm
	selp.b32 	%r6916, %r5045, %r5456, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6955;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5461,%r6955,%r412,%r1929,%r5465;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5461;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5467, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5468,%r5467,%r6954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5471,%r6808,%r5468;
}
	// end inline asm
	mov.u32 	%r7158, %r5041;
	@%p11 bra 	$L__BB0_546;

	// begin inline asm
	{mul.f16x2 %r7158,%r6809,%r5468;
}
	// end inline asm

$L__BB0_546:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5482,%r7158,%r5426,%r1929,%r5465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5487,%r5471,%r5482;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5490,%r6940,%r1033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5493,%r5487,%r5490;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5496,%r6713,%r5493;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6917,%r5041,%r5496;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5502,%r6942,%r3927;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5505,%r4021,%r6954;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5508,%r5502,%r5505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5511,%r6713,%r5508;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5514,%r5048,%r5511;
}
	// end inline asm
	selp.b32 	%r6914, %r5048, %r5514, %p11;
	// begin inline asm
	{sub.f16x2 %r5517,%r6952,%r6953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5520,%r6804,%r5517;
}
	// end inline asm
	@%p11 bra 	$L__BB0_548;
	bra.uni 	$L__BB0_547;

$L__BB0_548:
	// begin inline asm
	{neg.f16x2 %r7159,%r5052;
}
	// end inline asm
	bra.uni 	$L__BB0_549;

$L__BB0_547:
	// begin inline asm
	{mul.f16x2 %r7159,%r6805,%r5517;
}
	// end inline asm

$L__BB0_549:
	mov.u32 	%r5533, 31;
	mov.u32 	%r5535, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5531,%r7159,%r5533,%r1929,%r5535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5536,%r5520,%r5531;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5539,%r6947,%r1051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5542,%r5539,%r5536;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5545,%r6713,%r5542;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6908,%r5052,%r5545;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5551,%r7151,%r7152;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5554,%r6804,%r5551;
}
	// end inline asm
	mov.u32 	%r7160, %r5059;
	@%p11 bra 	$L__BB0_551;

	// begin inline asm
	{mul.f16x2 %r7160,%r6805,%r5551;
}
	// end inline asm

$L__BB0_551:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5563,%r7160,%r5533,%r1929,%r5535;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5568,%r5554,%r5563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5571,%r7149,%r1051;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5574,%r5568,%r5571;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5577,%r6713,%r5574;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6913,%r5059,%r5577;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5583,%r7150,%r6953;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5586,%r6951,%r7152;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5589,%r5583,%r5586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5592,%r6713,%r5589;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5595,%r5066,%r5592;
}
	// end inline asm
	selp.b32 	%r6911, %r5066, %r5595, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6953;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5600,%r6953,%r412,%r1929,%r5535;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5600;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5606, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5607,%r5606,%r6952;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5610,%r6808,%r5607;
}
	// end inline asm
	@%p11 bra 	$L__BB0_553;
	bra.uni 	$L__BB0_552;

$L__BB0_553:
	// begin inline asm
	{neg.f16x2 %r7161,%r5055;
}
	// end inline asm
	bra.uni 	$L__BB0_554;

$L__BB0_552:
	// begin inline asm
	{mul.f16x2 %r7161,%r6809,%r5607;
}
	// end inline asm

$L__BB0_554:
	mov.u32 	%r5625, 31;
	mov.u32 	%r5649, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5623,%r7161,%r5625,%r1929,%r5649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5628,%r5610,%r5623;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5631,%r6946,%r1057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5634,%r5631,%r5628;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5637,%r6713,%r5634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6907,%r5055,%r5637;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7152;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5645,%r7152,%r412,%r1929,%r5649;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5645;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5651, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5652,%r5651,%r7151;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5655,%r6808,%r5652;
}
	// end inline asm
	mov.u32 	%r7162, %r5062;
	@%p11 bra 	$L__BB0_556;

	// begin inline asm
	{mul.f16x2 %r7162,%r6809,%r5652;
}
	// end inline asm

$L__BB0_556:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5666,%r7162,%r5625,%r1929,%r5649;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5671,%r5655,%r5666;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r7147,%r1057;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5677,%r5671,%r5674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5680,%r6713,%r5677;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6912,%r5062,%r5680;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5686,%r7148,%r6952;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5689,%r6950,%r7151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5692,%r5686,%r5689;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5695,%r6713,%r5692;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5698,%r5069,%r5695;
}
	// end inline asm
	selp.b32 	%r6906, %r5069, %r5698, %p11;
	// begin inline asm
	{sub.f16x2 %r5701,%r6948,%r6949;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5704,%r6804,%r5701;
}
	// end inline asm
	@%p11 bra 	$L__BB0_558;
	bra.uni 	$L__BB0_557;

$L__BB0_558:
	// begin inline asm
	{neg.f16x2 %r7163,%r5073;
}
	// end inline asm
	bra.uni 	$L__BB0_559;

$L__BB0_557:
	// begin inline asm
	{mul.f16x2 %r7163,%r6805,%r5701;
}
	// end inline asm

$L__BB0_559:
	mov.u32 	%r5717, 31;
	mov.u32 	%r5719, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5715,%r7163,%r5717,%r1929,%r5719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5720,%r5704,%r5715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5723,%r6941,%r6947;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5726,%r5723,%r5720;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5729,%r6713,%r5726;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6898,%r5073,%r5729;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5735,%r6950,%r6951;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5738,%r6804,%r5735;
}
	// end inline asm
	mov.u32 	%r7164, %r5080;
	@%p11 bra 	$L__BB0_561;

	// begin inline asm
	{mul.f16x2 %r7164,%r6805,%r5735;
}
	// end inline asm

$L__BB0_561:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5747,%r7164,%r5717,%r1929,%r5719;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5752,%r5738,%r5747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5755,%r6937,%r6947;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5758,%r5752,%r5755;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5761,%r6713,%r5758;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6902,%r5080,%r5761;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5767,%r6939,%r6949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5770,%r6945,%r6951;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5773,%r5767,%r5770;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5776,%r6713,%r5773;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5779,%r5087,%r5776;
}
	// end inline asm
	selp.b32 	%r6900, %r5087, %r5779, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6949;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5784,%r6949,%r412,%r1929,%r5719;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5784;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5790, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5791,%r5790,%r6948;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5794,%r6808,%r5791;
}
	// end inline asm
	@%p11 bra 	$L__BB0_563;
	bra.uni 	$L__BB0_562;

$L__BB0_563:
	// begin inline asm
	{neg.f16x2 %r7165,%r5076;
}
	// end inline asm
	bra.uni 	$L__BB0_564;

$L__BB0_562:
	// begin inline asm
	{mul.f16x2 %r7165,%r6809,%r5791;
}
	// end inline asm

$L__BB0_564:
	mov.u32 	%r5809, 31;
	mov.u32 	%r5833, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5807,%r7165,%r5809,%r1929,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5812,%r5794,%r5807;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5815,%r6940,%r6946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5818,%r5815,%r5812;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5821,%r6713,%r5818;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6897,%r5076,%r5821;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6951;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5829,%r6951,%r412,%r1929,%r5833;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5829;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5835, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5836,%r5835,%r6950;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5839,%r6808,%r5836;
}
	// end inline asm
	mov.u32 	%r7166, %r5083;
	@%p11 bra 	$L__BB0_566;

	// begin inline asm
	{mul.f16x2 %r7166,%r6809,%r5836;
}
	// end inline asm

$L__BB0_566:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5850,%r7166,%r5809,%r1929,%r5833;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5855,%r5839,%r5850;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5858,%r6936,%r6946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5861,%r5855,%r5858;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5864,%r6713,%r5861;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6901,%r5083,%r5864;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5870,%r6938,%r6948;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5873,%r6944,%r6950;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5876,%r5870,%r5873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5879,%r6713,%r5876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5882,%r5090,%r5879;
}
	// end inline asm
	selp.b32 	%r6894, %r5090, %r5882, %p11;
	// begin inline asm
	{sub.f16x2 %r5885,%r6942,%r6943;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5888,%r6804,%r5885;
}
	// end inline asm
	@%p11 bra 	$L__BB0_568;
	bra.uni 	$L__BB0_567;

$L__BB0_568:
	// begin inline asm
	{neg.f16x2 %r7167,%r5094;
}
	// end inline asm
	bra.uni 	$L__BB0_569;

$L__BB0_567:
	// begin inline asm
	{mul.f16x2 %r7167,%r6805,%r5885;
}
	// end inline asm

$L__BB0_569:
	mov.u32 	%r5901, 31;
	mov.u32 	%r5903, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5899,%r7167,%r5901,%r1929,%r5903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5904,%r5888,%r5899;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5907,%r1106,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5910,%r5907,%r5904;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5913,%r6713,%r5910;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6886,%r5094,%r5913;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5919,%r6944,%r6945;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5922,%r6804,%r5919;
}
	// end inline asm
	mov.u32 	%r7168, %r5101;
	@%p11 bra 	$L__BB0_571;

	// begin inline asm
	{mul.f16x2 %r7168,%r6805,%r5919;
}
	// end inline asm

$L__BB0_571:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5931,%r7168,%r5901,%r1929,%r5903;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5936,%r5922,%r5931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5939,%r6935,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5942,%r5936,%r5939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5945,%r6713,%r5942;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6890,%r5101,%r5945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5951,%r7137,%r6943;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5954,%r7140,%r6945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5957,%r5951,%r5954;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5960,%r6713,%r5957;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5963,%r5108,%r5960;
}
	// end inline asm
	selp.b32 	%r6888, %r5108, %r5963, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6943;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5968,%r6943,%r412,%r1929,%r5903;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5968;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5974, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5975,%r5974,%r6942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5978,%r6808,%r5975;
}
	// end inline asm
	@%p11 bra 	$L__BB0_573;
	bra.uni 	$L__BB0_572;

$L__BB0_573:
	// begin inline asm
	{neg.f16x2 %r7169,%r5097;
}
	// end inline asm
	bra.uni 	$L__BB0_574;

$L__BB0_572:
	// begin inline asm
	{mul.f16x2 %r7169,%r6809,%r5975;
}
	// end inline asm

$L__BB0_574:
	mov.u32 	%r5993, 31;
	mov.u32 	%r6017, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5991,%r7169,%r5993,%r1929,%r6017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5996,%r5978,%r5991;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5999,%r1107,%r6940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6002,%r5999,%r5996;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6005,%r6713,%r6002;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6885,%r5097,%r6005;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6945;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6013,%r6945,%r412,%r1929,%r6017;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6013;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6019, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6020,%r6019,%r6944;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6023,%r6808,%r6020;
}
	// end inline asm
	mov.u32 	%r7170, %r5104;
	@%p11 bra 	$L__BB0_576;

	// begin inline asm
	{mul.f16x2 %r7170,%r6809,%r6020;
}
	// end inline asm

$L__BB0_576:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6034,%r7170,%r5993,%r1929,%r6017;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6039,%r6023,%r6034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6042,%r6934,%r6940;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6045,%r6039,%r6042;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6048,%r6713,%r6045;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6889,%r5104,%r6048;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6054,%r7135,%r6942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6057,%r7139,%r6944;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6060,%r6054,%r6057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6063,%r6713,%r6060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6066,%r5111,%r6063;
}
	// end inline asm
	selp.b32 	%r6882, %r5111, %r6066, %p11;
	// begin inline asm
	{sub.f16x2 %r6069,%r7139,%r7140;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6072,%r6804,%r6069;
}
	// end inline asm
	mov.u32 	%r7171, %r5115;
	@%p11 bra 	$L__BB0_578;

	// begin inline asm
	{mul.f16x2 %r7171,%r6805,%r6069;
}
	// end inline asm

$L__BB0_578:
	mov.u32 	%r6083, 31;
	mov.u32 	%r6107, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6081,%r7171,%r6083,%r1929,%r6107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6086,%r6072,%r6081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6089,%r7134,%r1106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6092,%r6086,%r6089;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6095,%r6713,%r6092;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6879,%r5115,%r6095;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7140;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6103,%r7140,%r412,%r1929,%r6107;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6103;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6109, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6110,%r6109,%r7139;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6113,%r6808,%r6110;
}
	// end inline asm
	mov.u32 	%r7172, %r5118;
	@%p11 bra 	$L__BB0_580;

	// begin inline asm
	{mul.f16x2 %r7172,%r6809,%r6110;
}
	// end inline asm

$L__BB0_580:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6124,%r7172,%r6083,%r1929,%r6107;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6129,%r6113,%r6124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6132,%r7133,%r1107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6135,%r6129,%r6132;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6138,%r6713,%r6135;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6878,%r5118,%r6138;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6144,%r7148,%r7150;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6147,%r6804,%r6144;
}
	// end inline asm
	@%p11 bra 	$L__BB0_582;
	bra.uni 	$L__BB0_581;

$L__BB0_582:
	// begin inline asm
	{neg.f16x2 %r7173,%r5122;
}
	// end inline asm
	bra.uni 	$L__BB0_583;

$L__BB0_581:
	// begin inline asm
	{mul.f16x2 %r7173,%r6805,%r6144;
}
	// end inline asm

$L__BB0_583:
	mov.u32 	%r6160, 31;
	mov.u32 	%r6184, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6158,%r7173,%r6160,%r1929,%r6184;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6163,%r6147,%r6158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6166,%r6937,%r7149;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6169,%r6166,%r6163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6172,%r6713,%r6169;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6875,%r5122,%r6172;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7150;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6180,%r7150,%r412,%r1929,%r6184;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6180;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6186, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6187,%r6186,%r7148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6190,%r6808,%r6187;
}
	// end inline asm
	@%p11 bra 	$L__BB0_585;
	bra.uni 	$L__BB0_584;

$L__BB0_585:
	// begin inline asm
	{neg.f16x2 %r7174,%r5125;
}
	// end inline asm
	bra.uni 	$L__BB0_586;

$L__BB0_584:
	// begin inline asm
	{mul.f16x2 %r7174,%r6809,%r6187;
}
	// end inline asm

$L__BB0_586:
	mov.u32 	%r6205, 31;
	mov.u32 	%r6207, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6203,%r7174,%r6205,%r1929,%r6207;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6208,%r6190,%r6203;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6211,%r6936,%r7147;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6214,%r6211,%r6208;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6217,%r6713,%r6214;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6874,%r5125,%r6217;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6223,%r6938,%r6939;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6226,%r6804,%r6223;
}
	// end inline asm
	@%p11 bra 	$L__BB0_588;
	bra.uni 	$L__BB0_587;

$L__BB0_588:
	// begin inline asm
	{neg.f16x2 %r7175,%r5129;
}
	// end inline asm
	bra.uni 	$L__BB0_589;

$L__BB0_587:
	// begin inline asm
	{mul.f16x2 %r7175,%r6805,%r6223;
}
	// end inline asm

$L__BB0_589:
	mov.u32 	%r6239, 31;
	mov.u32 	%r6241, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6237,%r7175,%r6239,%r1929,%r6241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6242,%r6226,%r6237;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6245,%r6935,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6248,%r6245,%r6242;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6251,%r6713,%r6248;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6867,%r5129,%r6251;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6257,%r7145,%r7146;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6260,%r6804,%r6257;
}
	// end inline asm
	mov.u32 	%r7176, %r5136;
	@%p11 bra 	$L__BB0_591;

	// begin inline asm
	{mul.f16x2 %r7176,%r6805,%r6257;
}
	// end inline asm

$L__BB0_591:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6269,%r7176,%r6239,%r1929,%r6241;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6274,%r6260,%r6269;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6277,%r7143,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6280,%r6274,%r6277;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6283,%r6713,%r6280;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6871,%r5136,%r6283;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6289,%r7144,%r6939;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6292,%r7138,%r7146;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6295,%r6289,%r6292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6298,%r6713,%r6295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6301,%r5143,%r6298;
}
	// end inline asm
	selp.b32 	%r6869, %r5143, %r6301, %p11;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6939;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6306,%r6939,%r412,%r1929,%r6241;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6306;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6312, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6313,%r6312,%r6938;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6316,%r6808,%r6313;
}
	// end inline asm
	@%p11 bra 	$L__BB0_593;
	bra.uni 	$L__BB0_592;

$L__BB0_593:
	// begin inline asm
	{neg.f16x2 %r7177,%r5132;
}
	// end inline asm
	bra.uni 	$L__BB0_594;

$L__BB0_592:
	// begin inline asm
	{mul.f16x2 %r7177,%r6809,%r6313;
}
	// end inline asm

$L__BB0_594:
	mov.u32 	%r6331, 31;
	mov.u32 	%r6355, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6329,%r7177,%r6331,%r1929,%r6355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6334,%r6316,%r6329;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6337,%r6934,%r6936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6340,%r6337,%r6334;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6343,%r6713,%r6340;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6866,%r5132,%r6343;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7146;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6351,%r7146,%r412,%r1929,%r6355;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6351;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6357, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6358,%r6357,%r7145;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6361,%r6808,%r6358;
}
	// end inline asm
	mov.u32 	%r7178, %r5139;
	@%p11 bra 	$L__BB0_596;

	// begin inline asm
	{mul.f16x2 %r7178,%r6809,%r6358;
}
	// end inline asm

$L__BB0_596:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6372,%r7178,%r6331,%r1929,%r6355;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6377,%r6361,%r6372;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6380,%r7141,%r6936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6383,%r6377,%r6380;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6386,%r6713,%r6383;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6870,%r5139,%r6386;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6392,%r7142,%r6938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6395,%r7136,%r7145;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6398,%r6392,%r6395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6401,%r6713,%r6398;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6404,%r5146,%r6401;
}
	// end inline asm
	selp.b32 	%r6864, %r5146, %r6404, %p11;
	// begin inline asm
	{sub.f16x2 %r6407,%r7135,%r7137;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r6804,%r6407;
}
	// end inline asm
	@%p11 bra 	$L__BB0_598;
	bra.uni 	$L__BB0_597;

$L__BB0_598:
	// begin inline asm
	{neg.f16x2 %r7179,%r5150;
}
	// end inline asm
	bra.uni 	$L__BB0_599;

$L__BB0_597:
	// begin inline asm
	{mul.f16x2 %r7179,%r6805,%r6407;
}
	// end inline asm

$L__BB0_599:
	mov.u32 	%r6423, 31;
	mov.u32 	%r6425, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6421,%r7179,%r6423,%r1929,%r6425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6426,%r6410,%r6421;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6429,%r7134,%r6935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6432,%r6429,%r6426;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6435,%r6713,%r6432;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6859,%r5150,%r6435;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6441,%r7136,%r7138;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6444,%r6804,%r6441;
}
	// end inline asm
	mov.u32 	%r7180, %r5157;
	@%p11 bra 	$L__BB0_601;

	// begin inline asm
	{mul.f16x2 %r7180,%r6805,%r6441;
}
	// end inline asm

$L__BB0_601:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6453,%r7180,%r6423,%r1929,%r6425;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6458,%r6444,%r6453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6461,%r7132,%r6935;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6464,%r6458,%r6461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6467,%r6713,%r6464;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6861,%r5157,%r6467;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7137;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6475,%r7137,%r412,%r1929,%r6425;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6475;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6481, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6482,%r6481,%r7135;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6485,%r6808,%r6482;
}
	// end inline asm
	@%p11 bra 	$L__BB0_603;
	bra.uni 	$L__BB0_602;

$L__BB0_603:
	// begin inline asm
	{neg.f16x2 %r7181,%r5153;
}
	// end inline asm
	bra.uni 	$L__BB0_604;

$L__BB0_602:
	// begin inline asm
	{mul.f16x2 %r7181,%r6809,%r6482;
}
	// end inline asm

$L__BB0_604:
	mov.u32 	%r6500, 31;
	mov.u32 	%r6524, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6498,%r7181,%r6500,%r1929,%r6524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6503,%r6485,%r6498;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6506,%r7133,%r6934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6509,%r6506,%r6503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6512,%r6713,%r6509;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6858,%r5153,%r6512;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7138;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6520,%r7138,%r412,%r1929,%r6524;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6520;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6526, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6527,%r6526,%r7136;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6530,%r6808,%r6527;
}
	// end inline asm
	mov.u32 	%r7182, %r5160;
	@%p11 bra 	$L__BB0_606;

	// begin inline asm
	{mul.f16x2 %r7182,%r6809,%r6527;
}
	// end inline asm

$L__BB0_606:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6541,%r7182,%r6500,%r1929,%r6524;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6546,%r6530,%r6541;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6549,%r7131,%r6934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6552,%r6546,%r6549;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6555,%r6713,%r6552;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6860,%r5160,%r6555;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6561,%r7142,%r7144;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6564,%r6804,%r6561;
}
	// end inline asm
	@%p11 bra 	$L__BB0_608;
	bra.uni 	$L__BB0_607;

$L__BB0_608:
	// begin inline asm
	{neg.f16x2 %r7183,%r5164;
}
	// end inline asm
	bra.uni 	$L__BB0_609;

$L__BB0_607:
	// begin inline asm
	{mul.f16x2 %r7183,%r6805,%r6561;
}
	// end inline asm

$L__BB0_609:
	mov.u32 	%r6577, 31;
	mov.u32 	%r6601, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6575,%r7183,%r6577,%r1929,%r6601;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6580,%r6564,%r6575;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6583,%r7132,%r7143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6586,%r6583,%r6580;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6589,%r6713,%r6586;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6853,%r5164,%r6589;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7144;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6597,%r7144,%r412,%r1929,%r6601;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6597;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6603, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6604,%r6603,%r7142;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6607,%r6808,%r6604;
}
	// end inline asm
	@%p11 bra 	$L__BB0_611;
	bra.uni 	$L__BB0_610;

$L__BB0_611:
	// begin inline asm
	{neg.f16x2 %r7184,%r5167;
}
	// end inline asm
	bra.uni 	$L__BB0_612;

$L__BB0_610:
	// begin inline asm
	{mul.f16x2 %r7184,%r6809,%r6604;
}
	// end inline asm

$L__BB0_612:
	mov.u32 	%r6622, 31;
	mov.u32 	%r6624, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6620,%r7184,%r6622,%r1929,%r6624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6625,%r6607,%r6620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r7131,%r7141;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6631,%r6628,%r6625;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6634,%r6713,%r6631;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6852,%r5167,%r6634;
}
	// end inline asm
	bar.sync 	0;
	@%p273 bra 	$L__BB0_615;

	setp.ne.s32 	%p312, %r24, %r1840;
	shl.b32 	%r6644, %r24, 8;
	shl.b32 	%r6648, %r1433, 8;
	or.b32  	%r6649, %r6648, 128;
	mad.lo.s32 	%r6651, %r6649, %r23, %r1843;
	add.s32 	%r6652, %r6651, %r6644;
	shl.b32 	%r6653, %r6652, 2;
	mov.u32 	%r6654, _ZN6kernel5shmemE;
	add.s32 	%r6655, %r6654, %r6653;
	shl.b32 	%r6656, %r28, 4;
	add.s32 	%r1428, %r6655, %r6656;
	st.shared.v4.u32 	[%r1428], {%r6913, %r6912, %r6908, %r6907};
	st.shared.v4.u32 	[%r1428+512], {%r6929, %r6922, %r6932, %r6931};
	@%p312 bra 	$L__BB0_615;

	st.shared.v4.u32 	[%r1428+1024], {%r6927, %r6926, %r6925, %r6920};

$L__BB0_615:
	@%p274 bra 	$L__BB0_617;

	not.b32 	%r6705, %r23;
	add.s32 	%r6704, %r1432, %r6705;
	mul.lo.s32 	%r6662, %r6704, 384;
	mad.lo.s32 	%r6663, %r51, %r24, %r6662;
	mad.lo.s32 	%r6666, %r1838, %r1840, %r6663;
	mad.lo.s32 	%r6669, %r1836, %r1835, %r6666;
	shl.b32 	%r6670, %r6669, 2;
	mov.u32 	%r6671, _ZN6kernel5shmemE;
	add.s32 	%r6672, %r6671, %r6670;
	shl.b32 	%r6673, %r28, 4;
	add.s32 	%r6674, %r6672, %r6673;
	st.shared.v4.u32 	[%r6674], {%r6927, %r6926, %r6925, %r6920};
	st.shared.v4.u32 	[%r6674+512], {%r6918, %r6917, %r6886, %r6885};
	st.shared.v4.u32 	[%r6674+1024], {%r6916, %r6914, %r6879, %r6878};

$L__BB0_617:
	rem.s32 	%r6675, %r6960, %r1436;
	setp.eq.s32 	%p314, %r6675, 0;
	@%p314 bra 	$L__BB0_619;

	bar.sync 	0;
	bra.uni 	$L__BB0_626;

$L__BB0_619:
	@%p146 bra 	$L__BB0_621;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_621:
	bar.sync 	0;
	@%p147 bra 	$L__BB0_625;

	membar.gl;
	setp.eq.s32 	%p317, %r406, %r407;
	mov.u32 	%r6692, -2147483647;
	sub.s32 	%r6693, %r6692, %r405;
	selp.b32 	%r6681, %r6693, 1, %p317;
	// begin inline asm
	atom.add.release.gpu.u32 %r6680,[%rd25],%r6681;
	// end inline asm

$L__BB0_623:
	ld.volatile.u32 	%r6694, [%rd25];
	xor.b32  	%r6695, %r6694, %r6680;
	setp.gt.s32 	%p318, %r6695, -1;
	@%p318 bra 	$L__BB0_623;

	// begin inline asm
	ld.acquire.gpu.u32 %r6696,[%rd25];
	// end inline asm

$L__BB0_625:
	bar.sync 	0;

$L__BB0_626:
	add.s32 	%r6960, %r6960, 1;
	setp.lt.s32 	%p319, %r6960, %r31;
	mov.u32 	%r6880, %r459;
	mov.u32 	%r6881, %r7049;
	mov.u32 	%r6884, %r460;
	mov.u32 	%r6887, %r7051;
	mov.u32 	%r6892, %r465;
	mov.u32 	%r6896, %r468;
	mov.u32 	%r6904, %r7062;
	mov.u32 	%r6909, %r7064;
	mov.u32 	%r6915, %r486;
	mov.u32 	%r6919, %r494;
	mov.u32 	%r6921, %r496;
	mov.u32 	%r6924, %r498;
	mov.u32 	%r6928, %r502;
	mov.u32 	%r6933, %r506;
	@%p319 bra 	$L__BB0_302;

$L__BB0_627:
	ret;

}

