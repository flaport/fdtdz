//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<488>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<553>;
	.reg .b32 	%r<7349>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<462>;


	mov.b64 	%rd32, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd32;
	ld.param.v2.u32 	{%r1472, %r1473}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1474, %r1475}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1476, %r1477}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1478, %r1479}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1480, %r1481}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1482, %r1483}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1484, %r1485}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1486, %r1487}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1488, %r1489}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1490, %r1491}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r35, %tid.y;
	mov.u32 	%r36, %tid.z;
	mov.u32 	%r37, %ctaid.y;
	mov.u32 	%r38, %ctaid.z;
	mov.u32 	%r1492, 32;
	sub.s32 	%r39, %r1492, %r1479;
	mov.u32 	%r40, %tid.x;
	setp.le.s32 	%p17, %r39, %r40;
	add.s32 	%r1493, %r1485, -1;
	mad.lo.s32 	%r1494, %r1493, %r1484, %r1483;
	add.s32 	%r1495, %r1478, %r1477;
	add.s32 	%r1496, %r1495, %r1494;
	add.s32 	%r1497, %r1496, 1;
	mul.lo.s32 	%r1498, %r1472, %r1474;
	shl.b32 	%r41, %r1498, 1;
	shl.b32 	%r1499, %r1498, 2;
	div.s32 	%r1500, %r1497, %r1499;
	add.s32 	%r1501, %r1500, 1;
	mul.lo.s32 	%r1502, %r1501, %r1478;
	mul.lo.s32 	%r1503, %r1473, %r1475;
	shl.b32 	%r42, %r1503, 1;
	div.s32 	%r1504, %r1502, %r42;
	add.s32 	%r1505, %r1504, 1;
	mul.lo.s32 	%r43, %r1505, %r1477;
	@%p17 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6881, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6881, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd33, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd33;
	mad.lo.s32 	%r1508, %r1474, %r38, %r37;
	mad.lo.s32 	%r1509, %r1508, %r1473, %r36;
	mad.lo.s32 	%r1510, %r1509, %r1472, %r35;
	shl.b32 	%r47, %r1510, 5;
	add.s32 	%r6886, %r47, %r40;
	mul.lo.s32 	%r1511, %r1503, %r1498;
	shl.b32 	%r51, %r1511, 5;
	sub.s32 	%r52, %r1487, %r1486;
	mul.lo.s32 	%r1512, %r1485, %r52;
	sub.s32 	%r53, %r1489, %r1488;
	mul.lo.s32 	%r1513, %r1512, %r53;
	sub.s32 	%r54, %r1491, %r1490;
	mul.lo.s32 	%r1514, %r1513, %r54;
	mul.lo.s32 	%r55, %r1514, 3;
	setp.ge.s32 	%p18, %r6886, %r55;
	@%p18 bra 	$L__BB0_10;

	not.b32 	%r1515, %r40;
	add.s32 	%r1516, %r55, %r1515;
	sub.s32 	%r1517, %r1516, %r47;
	mul.lo.s32 	%r1518, %r1503, %r1472;
	mul.lo.s32 	%r1519, %r1518, %r1474;
	shl.b32 	%r1520, %r1519, 5;
	div.u32 	%r56, %r1517, %r1520;
	add.s32 	%r1521, %r56, 1;
	and.b32  	%r6883, %r1521, 3;
	setp.eq.s32 	%p19, %r6883, 0;
	mov.u32 	%r6884, %r6886;
	@%p19 bra 	$L__BB0_7;

	mov.u32 	%r6884, %r6886;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd34, %r6884, 4;
	add.s64 	%rd35, %rd2, %rd34;
	mov.u32 	%r1522, 0;
	st.global.u32 	[%rd35], %r1522;
	add.s32 	%r6884, %r6884, %r51;
	add.s32 	%r6883, %r6883, -1;
	setp.ne.s32 	%p20, %r6883, 0;
	@%p20 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p21, %r56, 3;
	@%p21 bra 	$L__BB0_10;

	mul.wide.s32 	%rd38, %r51, 4;

$L__BB0_9:
	mul.wide.s32 	%rd36, %r6884, 4;
	add.s64 	%rd37, %rd2, %rd36;
	mov.u32 	%r1523, 0;
	st.global.u32 	[%rd37], %r1523;
	add.s64 	%rd39, %rd37, %rd38;
	st.global.u32 	[%rd39], %r1523;
	add.s32 	%r1524, %r6884, %r51;
	add.s32 	%r1525, %r1524, %r51;
	add.s64 	%rd40, %rd39, %rd38;
	st.global.u32 	[%rd40], %r1523;
	add.s32 	%r1526, %r1525, %r51;
	add.s64 	%rd41, %rd40, %rd38;
	st.global.u32 	[%rd41], %r1523;
	add.s32 	%r6884, %r1526, %r51;
	setp.lt.s32 	%p22, %r6884, %r55;
	@%p22 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd42, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd42;
	sub.s32 	%r1527, %r1478, %r41;
	div.s32 	%r1528, %r1527, %r42;
	mul.lo.s32 	%r1529, %r1528, %r1477;
	sub.s32 	%r1530, %r1529, %r41;
	sub.s32 	%r1531, %r1477, %r42;
	mul.lo.s32 	%r1532, %r1531, %r1474;
	mul.lo.s32 	%r65, %r1472, 384;
	add.s32 	%r1533, %r65, %r65;
	add.s32 	%r1534, %r1533, 128;
	mul.lo.s32 	%r1536, %r1503, 768;
	mul.lo.s32 	%r1537, %r1532, %r1534;
	mad.lo.s32 	%r66, %r1536, %r1530, %r1537;
	bra.uni 	$L__BB0_11;

$L__BB0_834:
	mov.f32 	%f552, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f552;
  cvt.rn.f16.f32 high, %f552;
  mov.b32 %r6857, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd457, %r6886, 4;
	add.s64 	%rd458, %rd3, %rd457;
	st.global.u32 	[%rd458], %r6857;
	add.s32 	%r6886, %r6886, %r51;

$L__BB0_11:
	setp.lt.s32 	%p23, %r6886, %r66;
	@%p23 bra 	$L__BB0_834;

	ld.param.u64 	%rd43, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd43;
	ld.param.u64 	%rd44, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd44;
	mad.lo.s32 	%r6924, %r1472, %r37, %r35;
	mul.lo.s32 	%r70, %r1473, %r38;
	add.s32 	%r71, %r70, %r36;
	setp.ge.s32 	%p24, %r6924, %r1477;
	@%p24 bra 	$L__BB0_50;

	setp.gt.s32 	%p25, %r39, %r40;
	add.s32 	%r72, %r1477, -4;
	add.s32 	%r73, %r1478, -4;
	mov.u32 	%r1538, 31;
	sub.s32 	%r1539, %r1538, %r40;
	selp.b32 	%r1540, %r40, %r1539, %p25;
	shl.b32 	%r1541, %r1540, 2;
	mov.u32 	%r1542, 2;
	sub.s32 	%r74, %r1541, %r1480;
	shl.b32 	%r1543, %r1479, 2;
	mov.u32 	%r1544, 128;
	sub.s32 	%r75, %r1544, %r1543;
	add.s32 	%r76, %r1487, -1;
	add.s32 	%r77, %r1489, -1;
	add.s32 	%r78, %r1491, -1;
	sub.s32 	%r1545, %r1542, %r1480;
	add.s32 	%r79, %r1545, %r1541;
	mul.lo.s32 	%r1546, %r1478, %r1477;
	shl.b32 	%r80, %r1546, 6;
	add.s32 	%r81, %r1477, -1;
	shl.b32 	%r82, %r40, 1;
	or.b32  	%r83, %r82, 1;
	add.s32 	%r84, %r74, 1;
	add.s32 	%r85, %r79, 1;
	shr.u32 	%r1547, %r83, 31;
	add.s32 	%r1548, %r83, %r1547;
	shr.s32 	%r87, %r1548, 1;
	and.b32  	%r1549, %r1548, -2;
	sub.s32 	%r1550, %r83, %r1549;
	add.s32 	%r86, %r1550, %r80;
	mov.u32 	%r6887, %r6924;

$L__BB0_14:
	setp.ge.s32 	%p26, %r71, %r1478;
	@%p26 bra 	$L__BB0_49;

	setp.lt.s32 	%p27, %r6887, 4;
	setp.ge.s32 	%p28, %r6887, %r72;
	or.pred  	%p1, %p27, %p28;
	setp.gt.s32 	%p29, %r1487, %r6887;
	selp.b32 	%r1551, %r6887, %r76, %p29;
	setp.gt.s32 	%p30, %r1486, %r6887;
	selp.b32 	%r1552, %r1486, %r1551, %p30;
	sub.s32 	%r1553, %r1552, %r1486;
	add.s32 	%r89, %r81, %r6887;
	mul.lo.s32 	%r90, %r1553, %r53;
	add.s32 	%r1554, %r1553, %r52;
	mul.lo.s32 	%r91, %r1554, %r53;
	add.s32 	%r1555, %r1554, %r52;
	mul.lo.s32 	%r92, %r1555, %r53;
	mov.u32 	%r6888, %r71;

$L__BB0_16:
	setp.lt.s32 	%p31, %r6888, 4;
	or.pred  	%p32, %p1, %p31;
	setp.ge.s32 	%p33, %r6888, %r73;
	or.pred  	%p2, %p33, %p32;
	setp.gt.s32 	%p34, %r1489, %r6888;
	selp.b32 	%r1556, %r6888, %r77, %p34;
	setp.gt.s32 	%p35, %r1488, %r6888;
	selp.b32 	%r1557, %r1488, %r1556, %p35;
	mul.lo.s32 	%r94, %r6888, %r1477;
	add.s32 	%r95, %r94, %r6887;
	shl.b32 	%r96, %r95, 6;
	sub.s32 	%r97, %r1557, %r1488;
	shl.b32 	%r1558, %r95, 5;
	add.s32 	%r1559, %r1558, %r40;
	shl.b32 	%r1560, %r1559, 2;
	add.s32 	%r1561, %r80, %r1560;
	mul.wide.s32 	%rd45, %r1561, 4;
	add.s64 	%rd7, %rd6, %rd45;
	@%p2 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_17;

$L__BB0_20:
	mov.f32 	%f44, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r1579, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1579;
	bra.uni 	$L__BB0_21;

$L__BB0_17:
	@%p25 bra 	$L__BB0_19;
	bra.uni 	$L__BB0_18;

$L__BB0_19:
	rem.s32 	%r1564, %r74, %r75;
	add.s32 	%r1565, %r1564, %r75;
	rem.s32 	%r1566, %r1565, %r75;
	rem.s32 	%r1567, %r79, %r75;
	add.s32 	%r1568, %r1567, %r75;
	rem.s32 	%r1569, %r1568, %r75;
	add.s32 	%r1570, %r97, %r90;
	mul.lo.s32 	%r1571, %r1570, %r54;
	sub.s32 	%r1572, %r1571, %r1490;
	setp.gt.s32 	%p37, %r1491, %r1566;
	selp.b32 	%r1573, %r1566, %r78, %p37;
	setp.gt.s32 	%p38, %r1490, %r1566;
	selp.b32 	%r1574, %r1490, %r1573, %p38;
	add.s32 	%r1575, %r1572, %r1574;
	mul.wide.s32 	%rd46, %r1575, 4;
	add.s64 	%rd47, %rd5, %rd46;
	ld.global.f32 	%f41, [%rd47];
	setp.gt.s32 	%p39, %r1491, %r1569;
	selp.b32 	%r1576, %r1569, %r78, %p39;
	setp.gt.s32 	%p40, %r1490, %r1569;
	selp.b32 	%r1577, %r1490, %r1576, %p40;
	add.s32 	%r1578, %r1572, %r1577;
	mul.wide.s32 	%rd48, %r1578, 4;
	add.s64 	%rd49, %rd5, %rd48;
	ld.global.f32 	%f42, [%rd49];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r1563, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1563;
	bra.uni 	$L__BB0_21;

$L__BB0_18:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r1562, {low,high};}

	// end inline asm
	st.global.u32 	[%rd7], %r1562;

$L__BB0_21:
	add.s32 	%r1580, %r82, %r96;
	mul.wide.s32 	%rd50, %r1580, 4;
	add.s64 	%rd8, %rd6, %rd50;
	@%p2 bra 	$L__BB0_25;
	bra.uni 	$L__BB0_22;

$L__BB0_25:
	mov.f32 	%f50, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f50;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r1598, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1598;
	bra.uni 	$L__BB0_26;

$L__BB0_22:
	@%p25 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	rem.s32 	%r1583, %r74, %r75;
	add.s32 	%r1584, %r1583, %r75;
	rem.s32 	%r1585, %r1584, %r75;
	rem.s32 	%r1586, %r79, %r75;
	add.s32 	%r1587, %r1586, %r75;
	rem.s32 	%r1588, %r1587, %r75;
	add.s32 	%r1589, %r97, %r91;
	mul.lo.s32 	%r1590, %r1589, %r54;
	sub.s32 	%r1591, %r1590, %r1490;
	setp.gt.s32 	%p42, %r1491, %r1585;
	selp.b32 	%r1592, %r1585, %r78, %p42;
	setp.gt.s32 	%p43, %r1490, %r1585;
	selp.b32 	%r1593, %r1490, %r1592, %p43;
	add.s32 	%r1594, %r1591, %r1593;
	mul.wide.s32 	%rd51, %r1594, 4;
	add.s64 	%rd52, %rd5, %rd51;
	ld.global.f32 	%f47, [%rd52];
	setp.gt.s32 	%p44, %r1491, %r1588;
	selp.b32 	%r1595, %r1588, %r78, %p44;
	setp.gt.s32 	%p45, %r1490, %r1588;
	selp.b32 	%r1596, %r1490, %r1595, %p45;
	add.s32 	%r1597, %r1591, %r1596;
	mul.wide.s32 	%rd53, %r1597, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f48, [%rd54];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f47;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r1582, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1582;
	bra.uni 	$L__BB0_26;

$L__BB0_23:
	mov.f32 	%f46, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f46;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r1581, {low,high};}

	// end inline asm
	st.global.u32 	[%rd8], %r1581;

$L__BB0_26:
	@%p2 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_27;

$L__BB0_31:
	mov.f32 	%f56, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r1623, {low,high};}

	// end inline asm
	rem.s32 	%r1624, %r89, %r1477;
	add.s32 	%r1625, %r1624, %r94;
	shl.b32 	%r1626, %r1625, 5;
	add.s32 	%r1627, %r1626, %r40;
	shl.b32 	%r1628, %r1627, 2;
	add.s32 	%r1629, %r80, %r1628;
	add.s32 	%r1630, %r1629, 2;
	mul.wide.s32 	%rd61, %r1630, 4;
	add.s64 	%rd62, %rd6, %rd61;
	st.global.u32 	[%rd62], %r1623;
	bra.uni 	$L__BB0_32;

$L__BB0_27:
	@%p25 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_29:
	rem.s32 	%r1601, %r74, %r75;
	add.s32 	%r1602, %r1601, %r75;
	rem.s32 	%r1603, %r1602, %r75;
	rem.s32 	%r1604, %r79, %r75;
	add.s32 	%r1605, %r1604, %r75;
	rem.s32 	%r1606, %r1605, %r75;
	add.s32 	%r1607, %r97, %r92;
	mul.lo.s32 	%r1608, %r1607, %r54;
	sub.s32 	%r1609, %r1608, %r1490;
	setp.gt.s32 	%p47, %r1491, %r1603;
	selp.b32 	%r1610, %r1603, %r78, %p47;
	setp.gt.s32 	%p48, %r1490, %r1603;
	selp.b32 	%r1611, %r1490, %r1610, %p48;
	add.s32 	%r1612, %r1609, %r1611;
	mul.wide.s32 	%rd55, %r1612, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f53, [%rd56];
	setp.gt.s32 	%p49, %r1491, %r1606;
	selp.b32 	%r1613, %r1606, %r78, %p49;
	setp.gt.s32 	%p50, %r1490, %r1606;
	selp.b32 	%r1614, %r1490, %r1613, %p50;
	add.s32 	%r1615, %r1609, %r1614;
	mul.wide.s32 	%rd57, %r1615, 4;
	add.s64 	%rd58, %rd5, %rd57;
	ld.global.f32 	%f54, [%rd58];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6889, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_30;

$L__BB0_28:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6889, {low,high};}

	// end inline asm

$L__BB0_30:
	rem.s32 	%r1616, %r89, %r1477;
	add.s32 	%r1617, %r1616, %r94;
	shl.b32 	%r1618, %r1617, 5;
	add.s32 	%r1619, %r1618, %r40;
	shl.b32 	%r1620, %r1619, 2;
	add.s32 	%r1621, %r80, %r1620;
	add.s32 	%r1622, %r1621, 2;
	mul.wide.s32 	%rd59, %r1622, 4;
	add.s64 	%rd60, %rd6, %rd59;
	st.global.u32 	[%rd60], %r6889;

$L__BB0_32:
	add.s32 	%r1632, %r1558, %r87;
	shl.b32 	%r1633, %r1632, 2;
	add.s32 	%r1634, %r86, %r1633;
	mul.wide.s32 	%rd63, %r1634, 4;
	add.s64 	%rd9, %rd6, %rd63;
	@%p2 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_33;

$L__BB0_36:
	mov.f32 	%f62, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f62;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r1652, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1652;
	bra.uni 	$L__BB0_37;

$L__BB0_33:
	@%p25 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_34;

$L__BB0_35:
	rem.s32 	%r1637, %r84, %r75;
	add.s32 	%r1638, %r1637, %r75;
	rem.s32 	%r1639, %r1638, %r75;
	rem.s32 	%r1640, %r85, %r75;
	add.s32 	%r1641, %r1640, %r75;
	rem.s32 	%r1642, %r1641, %r75;
	add.s32 	%r1643, %r97, %r90;
	mul.lo.s32 	%r1644, %r1643, %r54;
	sub.s32 	%r1645, %r1644, %r1490;
	setp.gt.s32 	%p52, %r1491, %r1639;
	selp.b32 	%r1646, %r1639, %r78, %p52;
	setp.gt.s32 	%p53, %r1490, %r1639;
	selp.b32 	%r1647, %r1490, %r1646, %p53;
	add.s32 	%r1648, %r1645, %r1647;
	mul.wide.s32 	%rd64, %r1648, 4;
	add.s64 	%rd65, %rd5, %rd64;
	ld.global.f32 	%f59, [%rd65];
	setp.gt.s32 	%p54, %r1491, %r1642;
	selp.b32 	%r1649, %r1642, %r78, %p54;
	setp.gt.s32 	%p55, %r1490, %r1642;
	selp.b32 	%r1650, %r1490, %r1649, %p55;
	add.s32 	%r1651, %r1645, %r1650;
	mul.wide.s32 	%rd66, %r1651, 4;
	add.s64 	%rd67, %rd5, %rd66;
	ld.global.f32 	%f60, [%rd67];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f59;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r1636, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1636;
	bra.uni 	$L__BB0_37;

$L__BB0_34:
	mov.f32 	%f58, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f58;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r1635, {low,high};}

	// end inline asm
	st.global.u32 	[%rd9], %r1635;

$L__BB0_37:
	add.s32 	%r1653, %r83, %r96;
	mul.wide.s32 	%rd68, %r1653, 4;
	add.s64 	%rd10, %rd6, %rd68;
	@%p2 bra 	$L__BB0_41;
	bra.uni 	$L__BB0_38;

$L__BB0_41:
	mov.f32 	%f68, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f68;
  cvt.rn.f16.f32 high, %f68;
  mov.b32 %r1671, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1671;
	bra.uni 	$L__BB0_42;

$L__BB0_38:
	@%p25 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_39;

$L__BB0_40:
	rem.s32 	%r1656, %r84, %r75;
	add.s32 	%r1657, %r1656, %r75;
	rem.s32 	%r1658, %r1657, %r75;
	rem.s32 	%r1659, %r85, %r75;
	add.s32 	%r1660, %r1659, %r75;
	rem.s32 	%r1661, %r1660, %r75;
	add.s32 	%r1662, %r97, %r91;
	mul.lo.s32 	%r1663, %r1662, %r54;
	sub.s32 	%r1664, %r1663, %r1490;
	setp.gt.s32 	%p57, %r1491, %r1658;
	selp.b32 	%r1665, %r1658, %r78, %p57;
	setp.gt.s32 	%p58, %r1490, %r1658;
	selp.b32 	%r1666, %r1490, %r1665, %p58;
	add.s32 	%r1667, %r1664, %r1666;
	mul.wide.s32 	%rd69, %r1667, 4;
	add.s64 	%rd70, %rd5, %rd69;
	ld.global.f32 	%f65, [%rd70];
	setp.gt.s32 	%p59, %r1491, %r1661;
	selp.b32 	%r1668, %r1661, %r78, %p59;
	setp.gt.s32 	%p60, %r1490, %r1661;
	selp.b32 	%r1669, %r1490, %r1668, %p60;
	add.s32 	%r1670, %r1664, %r1669;
	mul.wide.s32 	%rd71, %r1670, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f66, [%rd72];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f65;
  cvt.rn.f16.f32 high, %f66;
  mov.b32 %r1655, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1655;
	bra.uni 	$L__BB0_42;

$L__BB0_39:
	mov.f32 	%f64, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f64;
  cvt.rn.f16.f32 high, %f64;
  mov.b32 %r1654, {low,high};}

	// end inline asm
	st.global.u32 	[%rd10], %r1654;

$L__BB0_42:
	@%p2 bra 	$L__BB0_47;
	bra.uni 	$L__BB0_43;

$L__BB0_47:
	mov.f32 	%f74, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f74;
  cvt.rn.f16.f32 high, %f74;
  mov.b32 %r1696, {low,high};}

	// end inline asm
	rem.s32 	%r1697, %r89, %r1477;
	add.s32 	%r1698, %r1697, %r94;
	shl.b32 	%r1699, %r1698, 5;
	add.s32 	%r1700, %r1699, %r87;
	shl.b32 	%r1701, %r1700, 2;
	add.s32 	%r1702, %r86, %r1701;
	add.s32 	%r1703, %r1702, 2;
	mul.wide.s32 	%rd79, %r1703, 4;
	add.s64 	%rd80, %rd6, %rd79;
	st.global.u32 	[%rd80], %r1696;
	bra.uni 	$L__BB0_48;

$L__BB0_43:
	@%p25 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	rem.s32 	%r1674, %r84, %r75;
	add.s32 	%r1675, %r1674, %r75;
	rem.s32 	%r1676, %r1675, %r75;
	rem.s32 	%r1677, %r85, %r75;
	add.s32 	%r1678, %r1677, %r75;
	rem.s32 	%r1679, %r1678, %r75;
	add.s32 	%r1680, %r97, %r92;
	mul.lo.s32 	%r1681, %r1680, %r54;
	sub.s32 	%r1682, %r1681, %r1490;
	setp.gt.s32 	%p62, %r1491, %r1676;
	selp.b32 	%r1683, %r1676, %r78, %p62;
	setp.gt.s32 	%p63, %r1490, %r1676;
	selp.b32 	%r1684, %r1490, %r1683, %p63;
	add.s32 	%r1685, %r1682, %r1684;
	mul.wide.s32 	%rd73, %r1685, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f71, [%rd74];
	setp.gt.s32 	%p64, %r1491, %r1679;
	selp.b32 	%r1686, %r1679, %r78, %p64;
	setp.gt.s32 	%p65, %r1490, %r1679;
	selp.b32 	%r1687, %r1490, %r1686, %p65;
	add.s32 	%r1688, %r1682, %r1687;
	mul.wide.s32 	%rd75, %r1688, 4;
	add.s64 	%rd76, %rd5, %rd75;
	ld.global.f32 	%f72, [%rd76];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f71;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6890, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f70, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f70;
  cvt.rn.f16.f32 high, %f70;
  mov.b32 %r6890, {low,high};}

	// end inline asm

$L__BB0_46:
	rem.s32 	%r1689, %r89, %r1477;
	add.s32 	%r1690, %r1689, %r94;
	shl.b32 	%r1691, %r1690, 5;
	add.s32 	%r1692, %r1691, %r87;
	shl.b32 	%r1693, %r1692, 2;
	add.s32 	%r1694, %r86, %r1693;
	add.s32 	%r1695, %r1694, 2;
	mul.wide.s32 	%rd77, %r1695, 4;
	add.s64 	%rd78, %rd6, %rd77;
	st.global.u32 	[%rd78], %r6890;

$L__BB0_48:
	add.s32 	%r6888, %r6888, %r1503;
	setp.lt.s32 	%p66, %r6888, %r1478;
	@%p66 bra 	$L__BB0_16;

$L__BB0_49:
	add.s32 	%r6887, %r6887, %r1498;
	setp.lt.s32 	%p67, %r6887, %r1477;
	@%p67 bra 	$L__BB0_14;

$L__BB0_50:
	ld.param.u64 	%rd81, [%rd1+128];
	cvta.to.global.u64 	%rd11, %rd81;
	ld.param.u64 	%rd82, [%rd1+96];
	cvta.to.global.u64 	%rd12, %rd82;
	@%p24 bra 	$L__BB0_134;

	shl.b32 	%r118, %r71, 1;
	mov.u64 	%rd83, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6891, %r6924;

$L__BB0_52:
	setp.ge.s32 	%p69, %r118, %r1478;
	@%p69 bra 	$L__BB0_133;

	mov.u32 	%r6892, %r118;

$L__BB0_54:
	setp.ne.s32 	%p70, %r40, 0;
	@%p70 bra 	$L__BB0_132;

	shr.u32 	%r1705, %r6892, 31;
	add.s32 	%r1706, %r6892, %r1705;
	shr.s32 	%r1707, %r1706, 1;
	mad.lo.s32 	%r1708, %r1707, %r1477, %r6891;
	shl.b32 	%r122, %r1708, 5;
	add.s32 	%r123, %r6892, -2;
	mul.lo.s32 	%r124, %r123, %r1477;
	add.s32 	%r1709, %r1478, %r123;
	mul.lo.s32 	%r125, %r1709, %r1477;
	add.s32 	%r1710, %r1709, %r1478;
	mul.lo.s32 	%r126, %r1710, %r1477;
	add.s32 	%r127, %r124, %r1477;
	add.s32 	%r128, %r6892, -1;
	add.s32 	%r1711, %r1478, %r128;
	mul.lo.s32 	%r129, %r1711, %r1477;
	add.s32 	%r1712, %r1711, %r1478;
	mul.lo.s32 	%r130, %r1712, %r1477;
	add.s32 	%r1713, %r1478, %r6892;
	mul.lo.s32 	%r131, %r1713, %r1477;
	add.s32 	%r1714, %r1713, %r1478;
	mul.lo.s32 	%r132, %r1714, %r1477;
	mul.lo.s32 	%r133, %r6892, %r1477;
	add.s32 	%r134, %r133, %r1477;
	add.s32 	%r135, %r6892, 1;
	add.s32 	%r1715, %r1478, %r135;
	mul.lo.s32 	%r136, %r1715, %r1477;
	add.s32 	%r1716, %r1715, %r1478;
	mul.lo.s32 	%r137, %r1716, %r1477;
	add.s32 	%r138, %r134, %r1477;
	add.s32 	%r139, %r6892, 2;
	add.s32 	%r1717, %r1478, %r139;
	mul.lo.s32 	%r140, %r1717, %r1477;
	add.s32 	%r1718, %r1717, %r1478;
	mul.lo.s32 	%r141, %r1718, %r1477;
	mov.u32 	%r6895, 0;
	mov.u64 	%rd459, %rd83;

$L__BB0_56:
	ld.global.nc.u32 	%r1719, [%rd459];
	cvt.rn.f64.s32 	%fd1, %r1719;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r143, %r1719, %r6891;
	setp.lt.s32 	%p71, %r143, %r1477;
	or.b32  	%r1720, %r123, %r143;
	setp.gt.s32 	%p72, %r1720, -1;
	and.pred  	%p73, %p71, %p72;
	setp.lt.s32 	%p74, %r123, %r1478;
	and.pred  	%p3, %p74, %p73;
	cvt.rn.f32.f64 	%f75, %fd3;
	add.f32 	%f76, %f75, 0f3E800000;
	abs.f32 	%f1, %f76;
	add.f32 	%f77, %f1, 0f40200000;
	setp.geu.f32 	%p75, %f77, 0f40000000;
	@%p75 bra 	$L__BB0_61;

	@%p3 bra 	$L__BB0_59;
	bra.uni 	$L__BB0_58;

$L__BB0_59:
	add.s32 	%r1723, %r124, %r143;
	mul.wide.s32 	%rd84, %r1723, 4;
	add.s64 	%rd85, %rd11, %rd84;
	ld.global.f32 	%f80, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6894, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_60;

$L__BB0_58:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6894, {low,high};}

	// end inline asm

$L__BB0_60:
	add.s32 	%r1724, %r6895, %r122;
	mul.wide.s32 	%rd86, %r1724, 4;
	add.s64 	%rd87, %rd12, %rd86;
	st.global.u32 	[%rd87], %r6894;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_61:
	cvt.rn.f32.f64 	%f81, %fd1;
	add.f32 	%f82, %f81, 0f3E800000;
	abs.f32 	%f2, %f82;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p76, %f3, 0f40000000;
	@%p76 bra 	$L__BB0_66;

	@%p3 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_63;

$L__BB0_64:
	add.s32 	%r1727, %r125, %r143;
	mul.wide.s32 	%rd88, %r1727, 4;
	add.s64 	%rd89, %rd11, %rd88;
	ld.global.f32 	%f85, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f85;
  mov.b32 %r6896, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_65;

$L__BB0_63:
	mov.f32 	%f84, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f84;
  cvt.rn.f16.f32 high, %f84;
  mov.b32 %r6896, {low,high};}

	// end inline asm

$L__BB0_65:
	add.s32 	%r1728, %r6895, %r122;
	mul.wide.s32 	%rd90, %r1728, 4;
	add.s64 	%rd91, %rd12, %rd90;
	st.global.u32 	[%rd91], %r6896;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_66:
	add.f32 	%f86, %f2, 0f40200000;
	setp.geu.f32 	%p77, %f86, 0f40000000;
	@%p77 bra 	$L__BB0_71;

	@%p3 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_68;

$L__BB0_69:
	add.s32 	%r1731, %r126, %r143;
	mul.wide.s32 	%rd92, %r1731, 4;
	add.s64 	%rd93, %rd11, %rd92;
	ld.global.f32 	%f89, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6898, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_70;

$L__BB0_68:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6898, {low,high};}

	// end inline asm

$L__BB0_70:
	add.s32 	%r1732, %r6895, %r122;
	mul.wide.s32 	%rd94, %r1732, 4;
	add.s64 	%rd95, %rd12, %rd94;
	st.global.u32 	[%rd95], %r6898;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_71:
	or.b32  	%r1733, %r128, %r143;
	setp.gt.s32 	%p78, %r1733, -1;
	and.pred  	%p80, %p71, %p78;
	setp.le.s32 	%p81, %r6892, %r1478;
	and.pred  	%p4, %p81, %p80;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p82, %f4, 0f40000000;
	@%p82 bra 	$L__BB0_76;

	@%p4 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_73;

$L__BB0_74:
	add.s32 	%r1736, %r127, %r143;
	mul.wide.s32 	%rd96, %r1736, 4;
	add.s64 	%rd97, %rd11, %rd96;
	ld.global.f32 	%f92, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f92;
  mov.b32 %r6900, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_75;

$L__BB0_73:
	mov.f32 	%f91, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f91;
  cvt.rn.f16.f32 high, %f91;
  mov.b32 %r6900, {low,high};}

	// end inline asm

$L__BB0_75:
	add.s32 	%r1737, %r6895, %r122;
	mul.wide.s32 	%rd98, %r1737, 4;
	add.s64 	%rd99, %rd12, %rd98;
	st.global.u32 	[%rd99], %r6900;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_76:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p83, %f5, 0f40000000;
	@%p83 bra 	$L__BB0_81;

	@%p4 bra 	$L__BB0_79;
	bra.uni 	$L__BB0_78;

$L__BB0_79:
	add.s32 	%r1740, %r129, %r143;
	mul.wide.s32 	%rd100, %r1740, 4;
	add.s64 	%rd101, %rd11, %rd100;
	ld.global.f32 	%f95, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f95;
  mov.b32 %r6902, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_80;

$L__BB0_78:
	mov.f32 	%f94, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f94;
  cvt.rn.f16.f32 high, %f94;
  mov.b32 %r6902, {low,high};}

	// end inline asm

$L__BB0_80:
	add.s32 	%r1741, %r6895, %r122;
	mul.wide.s32 	%rd102, %r1741, 4;
	add.s64 	%rd103, %rd12, %rd102;
	st.global.u32 	[%rd103], %r6902;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_81:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p84, %f6, 0f40000000;
	@%p84 bra 	$L__BB0_86;

	@%p4 bra 	$L__BB0_84;
	bra.uni 	$L__BB0_83;

$L__BB0_84:
	add.s32 	%r1744, %r130, %r143;
	mul.wide.s32 	%rd104, %r1744, 4;
	add.s64 	%rd105, %rd11, %rd104;
	ld.global.f32 	%f98, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f98;
  mov.b32 %r6904, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_85;

$L__BB0_83:
	mov.f32 	%f97, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f97;
  cvt.rn.f16.f32 high, %f97;
  mov.b32 %r6904, {low,high};}

	// end inline asm

$L__BB0_85:
	add.s32 	%r1745, %r6895, %r122;
	mul.wide.s32 	%rd106, %r1745, 4;
	add.s64 	%rd107, %rd12, %rd106;
	st.global.u32 	[%rd107], %r6904;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_86:
	or.b32  	%r1746, %r6892, %r143;
	setp.gt.s32 	%p85, %r1746, -1;
	and.pred  	%p87, %p71, %p85;
	setp.lt.s32 	%p88, %r6892, %r1478;
	and.pred  	%p5, %p88, %p87;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p89, %f7, 0f40000000;
	@%p89 bra 	$L__BB0_91;

	@%p5 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_88;

$L__BB0_89:
	add.s32 	%r1749, %r133, %r143;
	mul.wide.s32 	%rd108, %r1749, 4;
	add.s64 	%rd109, %rd11, %rd108;
	ld.global.f32 	%f101, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f101;
  mov.b32 %r6906, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_90;

$L__BB0_88:
	mov.f32 	%f100, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f100;
  cvt.rn.f16.f32 high, %f100;
  mov.b32 %r6906, {low,high};}

	// end inline asm

$L__BB0_90:
	add.s32 	%r1750, %r6895, %r122;
	mul.wide.s32 	%rd110, %r1750, 4;
	add.s64 	%rd111, %rd12, %rd110;
	st.global.u32 	[%rd111], %r6906;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_91:
	add.f32 	%f102, %f2, 0f00000000;
	setp.geu.f32 	%p90, %f102, 0f40000000;
	@%p90 bra 	$L__BB0_96;

	@%p5 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_93;

$L__BB0_94:
	add.s32 	%r1753, %r131, %r143;
	mul.wide.s32 	%rd112, %r1753, 4;
	add.s64 	%rd113, %rd11, %rd112;
	ld.global.f32 	%f105, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6908, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_95;

$L__BB0_93:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6908, {low,high};}

	// end inline asm

$L__BB0_95:
	add.s32 	%r1754, %r6895, %r122;
	mul.wide.s32 	%rd114, %r1754, 4;
	add.s64 	%rd115, %rd12, %rd114;
	st.global.u32 	[%rd115], %r6908;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_96:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p91, %f8, 0f40000000;
	@%p91 bra 	$L__BB0_101;

	@%p5 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;

$L__BB0_99:
	add.s32 	%r1757, %r132, %r143;
	mul.wide.s32 	%rd116, %r1757, 4;
	add.s64 	%rd117, %rd11, %rd116;
	ld.global.f32 	%f108, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6910, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_100;

$L__BB0_98:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6910, {low,high};}

	// end inline asm

$L__BB0_100:
	add.s32 	%r1758, %r6895, %r122;
	mul.wide.s32 	%rd118, %r1758, 4;
	add.s64 	%rd119, %rd12, %rd118;
	st.global.u32 	[%rd119], %r6910;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_101:
	or.b32  	%r1759, %r135, %r143;
	setp.gt.s32 	%p92, %r1759, -1;
	and.pred  	%p94, %p71, %p92;
	setp.lt.s32 	%p95, %r135, %r1478;
	and.pred  	%p6, %p95, %p94;
	@%p89 bra 	$L__BB0_106;

	@%p6 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_103;

$L__BB0_104:
	add.s32 	%r1762, %r134, %r143;
	mul.wide.s32 	%rd120, %r1762, 4;
	add.s64 	%rd121, %rd11, %rd120;
	ld.global.f32 	%f111, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6912, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_105;

$L__BB0_103:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6912, {low,high};}

	// end inline asm

$L__BB0_105:
	add.s32 	%r1763, %r6895, %r122;
	mul.wide.s32 	%rd122, %r1763, 4;
	add.s64 	%rd123, %rd12, %rd122;
	st.global.u32 	[%rd123], %r6912;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_106:
	@%p83 bra 	$L__BB0_111;

	@%p6 bra 	$L__BB0_109;
	bra.uni 	$L__BB0_108;

$L__BB0_109:
	add.s32 	%r1766, %r136, %r143;
	mul.wide.s32 	%rd124, %r1766, 4;
	add.s64 	%rd125, %rd11, %rd124;
	ld.global.f32 	%f114, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6914, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_110;

$L__BB0_108:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6914, {low,high};}

	// end inline asm

$L__BB0_110:
	add.s32 	%r1767, %r6895, %r122;
	mul.wide.s32 	%rd126, %r1767, 4;
	add.s64 	%rd127, %rd12, %rd126;
	st.global.u32 	[%rd127], %r6914;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_111:
	@%p91 bra 	$L__BB0_116;

	@%p6 bra 	$L__BB0_114;
	bra.uni 	$L__BB0_113;

$L__BB0_114:
	add.s32 	%r1770, %r137, %r143;
	mul.wide.s32 	%rd128, %r1770, 4;
	add.s64 	%rd129, %rd11, %rd128;
	ld.global.f32 	%f117, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f117;
  mov.b32 %r6916, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_115;

$L__BB0_113:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6916, {low,high};}

	// end inline asm

$L__BB0_115:
	add.s32 	%r1771, %r6895, %r122;
	mul.wide.s32 	%rd130, %r1771, 4;
	add.s64 	%rd131, %rd12, %rd130;
	st.global.u32 	[%rd131], %r6916;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_116:
	or.b32  	%r1772, %r139, %r143;
	setp.gt.s32 	%p99, %r1772, -1;
	and.pred  	%p101, %p71, %p99;
	setp.lt.s32 	%p102, %r139, %r1478;
	and.pred  	%p7, %p102, %p101;
	@%p82 bra 	$L__BB0_121;

	@%p7 bra 	$L__BB0_119;
	bra.uni 	$L__BB0_118;

$L__BB0_119:
	add.s32 	%r1775, %r138, %r143;
	mul.wide.s32 	%rd132, %r1775, 4;
	add.s64 	%rd133, %rd11, %rd132;
	ld.global.f32 	%f120, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f120;
  mov.b32 %r6918, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_120;

$L__BB0_118:
	mov.f32 	%f119, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f119;
  cvt.rn.f16.f32 high, %f119;
  mov.b32 %r6918, {low,high};}

	// end inline asm

$L__BB0_120:
	add.s32 	%r1776, %r6895, %r122;
	mul.wide.s32 	%rd134, %r1776, 4;
	add.s64 	%rd135, %rd12, %rd134;
	st.global.u32 	[%rd135], %r6918;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_121:
	@%p76 bra 	$L__BB0_126;

	@%p7 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_123;

$L__BB0_124:
	add.s32 	%r1779, %r140, %r143;
	mul.wide.s32 	%rd136, %r1779, 4;
	add.s64 	%rd137, %rd11, %rd136;
	ld.global.f32 	%f123, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f123;
  mov.b32 %r6920, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_125;

$L__BB0_123:
	mov.f32 	%f122, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f122;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6920, {low,high};}

	// end inline asm

$L__BB0_125:
	add.s32 	%r1780, %r6895, %r122;
	mul.wide.s32 	%rd138, %r1780, 4;
	add.s64 	%rd139, %rd12, %rd138;
	st.global.u32 	[%rd139], %r6920;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_126:
	@%p84 bra 	$L__BB0_131;

	@%p7 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1783, %r141, %r143;
	mul.wide.s32 	%rd140, %r1783, 4;
	add.s64 	%rd141, %rd11, %rd140;
	ld.global.f32 	%f126, [%rd141];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f126;
  mov.b32 %r6922, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f125, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f125;
  mov.b32 %r6922, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1784, %r6895, %r122;
	mul.wide.s32 	%rd142, %r1784, 4;
	add.s64 	%rd143, %rd12, %rd142;
	st.global.u32 	[%rd143], %r6922;
	add.s32 	%r6895, %r6895, 1;

$L__BB0_131:
	add.s64 	%rd459, %rd459, 4;
	mov.u64 	%rd144, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd145, %rd144, 24;
	setp.ne.s64 	%p106, %rd459, %rd145;
	@%p106 bra 	$L__BB0_56;

$L__BB0_132:
	add.s32 	%r6892, %r6892, %r42;
	setp.lt.s32 	%p107, %r6892, %r1478;
	@%p107 bra 	$L__BB0_54;

$L__BB0_133:
	add.s32 	%r6891, %r6891, %r1498;
	setp.lt.s32 	%p108, %r6891, %r1477;
	@%p108 bra 	$L__BB0_52;

$L__BB0_134:
	setp.eq.s32 	%p109, %r1481, 1;
	ld.param.u64 	%rd146, [%rd1+136];
	cvta.to.global.u64 	%rd15, %rd146;
	ld.param.u64 	%rd147, [%rd1+104];
	cvta.to.global.u64 	%rd16, %rd147;
	@%p109 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_135;

$L__BB0_152:
	@%p24 bra 	$L__BB0_281;

	shl.b32 	%r247, %r71, 1;
	shr.u32 	%r1832, %r1482, 31;
	add.s32 	%r1833, %r1482, %r1832;
	shr.u32 	%r1834, %r1833, 1;
	and.b32  	%r248, %r1834, 1;
	mov.u64 	%rd167, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_154:
	setp.ge.s32 	%p119, %r247, %r1478;
	@%p119 bra 	$L__BB0_280;

	mov.u32 	%r6930, %r247;

$L__BB0_156:
	setp.ne.s32 	%p120, %r40, 0;
	@%p120 bra 	$L__BB0_279;

	shr.u32 	%r1836, %r6930, 31;
	add.s32 	%r1837, %r6930, %r1836;
	shr.s32 	%r1838, %r1837, 1;
	mad.lo.s32 	%r1839, %r1838, %r1477, %r6924;
	shl.b32 	%r252, %r1839, 5;
	add.s32 	%r253, %r6930, -2;
	mul.lo.s32 	%r254, %r253, %r1477;
	add.s32 	%r1840, %r1478, %r253;
	mul.lo.s32 	%r255, %r1840, %r1477;
	add.s32 	%r256, %r254, %r1477;
	add.s32 	%r257, %r6930, -1;
	add.s32 	%r1841, %r1478, %r257;
	mul.lo.s32 	%r258, %r1841, %r1477;
	add.s32 	%r1842, %r1478, %r6930;
	mul.lo.s32 	%r259, %r1842, %r1477;
	mul.lo.s32 	%r260, %r6930, %r1477;
	add.s32 	%r261, %r260, %r1477;
	add.s32 	%r262, %r6930, 1;
	add.s32 	%r1843, %r1478, %r262;
	mul.lo.s32 	%r263, %r1843, %r1477;
	add.s32 	%r264, %r261, %r1477;
	add.s32 	%r265, %r6930, 2;
	add.s32 	%r1844, %r1478, %r265;
	mul.lo.s32 	%r266, %r1844, %r1477;
	mov.u32 	%r6934, 0;
	mov.u64 	%rd460, 24;
	mov.u64 	%rd461, %rd167;

$L__BB0_158:
	ld.global.nc.u32 	%r1845, [%rd461];
	cvt.rn.f64.s32 	%fd2, %r1845;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r268, %r1845, %r6924;
	setp.lt.s32 	%p121, %r268, %r1477;
	or.b32  	%r1846, %r253, %r268;
	setp.gt.s32 	%p122, %r1846, -1;
	and.pred  	%p123, %p121, %p122;
	setp.lt.s32 	%p124, %r253, %r1478;
	and.pred  	%p8, %p124, %p123;
	cvt.rn.f32.f64 	%f143, %fd4;
	add.f32 	%f144, %f143, 0f3E800000;
	abs.f32 	%f9, %f144;
	add.f32 	%f145, %f9, 0f40200000;
	setp.geu.f32 	%p125, %f145, 0f40000000;
	@%p125 bra 	$L__BB0_170;

	@%p8 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	setp.eq.s32 	%p126, %r248, 0;
	add.s32 	%r1848, %r254, %r268;
	shl.b32 	%r1849, %r1848, 1;
	mul.wide.s32 	%rd168, %r1849, 4;
	add.s64 	%rd169, %rd15, %rd168;
	ld.global.f32 	%f10, [%rd169];
	@%p126 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_162;

$L__BB0_163:
	mov.f32 	%f151, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f151;
  mov.b32 %r6932, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_160:
	mov.f32 	%f147, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f147;
  cvt.rn.f16.f32 high, %f147;
  mov.b32 %r6932, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_164;

$L__BB0_162:
	mov.f32 	%f148, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f148;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6932, {low,high};}

	// end inline asm

$L__BB0_164:
	add.s32 	%r273, %r6934, %r252;
	mul.wide.s32 	%rd170, %r273, 4;
	add.s64 	%rd171, %rd16, %rd170;
	st.global.u32 	[%rd171], %r6932;
	@%p8 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	setp.eq.s32 	%p127, %r248, 0;
	add.s32 	%r1853, %r255, %r268;
	shl.b32 	%r1854, %r1853, 1;
	mul.wide.s32 	%rd172, %r1854, 4;
	add.s64 	%rd173, %rd15, %rd172;
	ld.global.f32 	%f11, [%rd173];
	@%p127 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_167;

$L__BB0_168:
	mov.f32 	%f157, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f157;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_165:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f153;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6933, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_169;

$L__BB0_167:
	mov.f32 	%f154, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f154;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6933, {low,high};}

	// end inline asm

$L__BB0_169:
	add.s32 	%r1857, %r273, 1;
	mul.wide.s32 	%rd174, %r1857, 4;
	add.s64 	%rd175, %rd16, %rd174;
	st.global.u32 	[%rd175], %r6933;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_170:
	cvt.rn.f32.f64 	%f158, %fd2;
	add.f32 	%f159, %f158, 0f3E800000;
	abs.f32 	%f12, %f159;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p128, %f13, 0f40000000;
	@%p128 bra 	$L__BB0_182;

	@%p8 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	setp.eq.s32 	%p129, %r248, 0;
	add.s32 	%r1859, %r254, %r268;
	shl.b32 	%r1860, %r1859, 1;
	or.b32  	%r1861, %r1860, 1;
	mul.wide.s32 	%rd176, %r1861, 4;
	add.s64 	%rd177, %rd15, %rd176;
	ld.global.f32 	%f14, [%rd177];
	@%p129 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_174;

$L__BB0_175:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6935, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_172:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6935, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_176;

$L__BB0_174:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6935, {low,high};}

	// end inline asm

$L__BB0_176:
	add.s32 	%r284, %r6934, %r252;
	mul.wide.s32 	%rd178, %r284, 4;
	add.s64 	%rd179, %rd16, %rd178;
	st.global.u32 	[%rd179], %r6935;
	@%p8 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	setp.eq.s32 	%p130, %r248, 0;
	add.s32 	%r1865, %r255, %r268;
	shl.b32 	%r1866, %r1865, 1;
	or.b32  	%r1867, %r1866, 1;
	mul.wide.s32 	%rd180, %r1867, 4;
	add.s64 	%rd181, %rd15, %rd180;
	ld.global.f32 	%f15, [%rd181];
	@%p130 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_179;

$L__BB0_180:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_177:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6936, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_181;

$L__BB0_179:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6936, {low,high};}

	// end inline asm

$L__BB0_181:
	add.s32 	%r1870, %r284, 1;
	mul.wide.s32 	%rd182, %r1870, 4;
	add.s64 	%rd183, %rd16, %rd182;
	st.global.u32 	[%rd183], %r6936;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_182:
	or.b32  	%r1871, %r257, %r268;
	setp.gt.s32 	%p131, %r1871, -1;
	and.pred  	%p133, %p121, %p131;
	setp.le.s32 	%p134, %r6930, %r1478;
	and.pred  	%p9, %p134, %p133;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p135, %f16, 0f40000000;
	@%p135 bra 	$L__BB0_194;

	@%p9 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	setp.eq.s32 	%p136, %r248, 0;
	add.s32 	%r1873, %r256, %r268;
	shl.b32 	%r1874, %r1873, 1;
	mul.wide.s32 	%rd184, %r1874, 4;
	add.s64 	%rd185, %rd15, %rd184;
	ld.global.f32 	%f17, [%rd185];
	@%p136 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_186;

$L__BB0_187:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6938, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_184:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6938, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_188;

$L__BB0_186:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6938, {low,high};}

	// end inline asm

$L__BB0_188:
	add.s32 	%r295, %r6934, %r252;
	mul.wide.s32 	%rd186, %r295, 4;
	add.s64 	%rd187, %rd16, %rd186;
	st.global.u32 	[%rd187], %r6938;
	@%p9 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	setp.eq.s32 	%p137, %r248, 0;
	add.s32 	%r1878, %r258, %r268;
	shl.b32 	%r1879, %r1878, 1;
	mul.wide.s32 	%rd188, %r1879, 4;
	add.s64 	%rd189, %rd15, %rd188;
	ld.global.f32 	%f18, [%rd189];
	@%p137 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_191;

$L__BB0_192:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_189:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6939, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_193;

$L__BB0_191:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6939, {low,high};}

	// end inline asm

$L__BB0_193:
	add.s32 	%r1882, %r295, 1;
	mul.wide.s32 	%rd190, %r1882, 4;
	add.s64 	%rd191, %rd16, %rd190;
	st.global.u32 	[%rd191], %r6939;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_194:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p138, %f19, 0f40000000;
	@%p138 bra 	$L__BB0_206;

	@%p9 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	setp.eq.s32 	%p139, %r248, 0;
	add.s32 	%r1884, %r256, %r268;
	shl.b32 	%r1885, %r1884, 1;
	or.b32  	%r1886, %r1885, 1;
	mul.wide.s32 	%rd192, %r1886, 4;
	add.s64 	%rd193, %rd15, %rd192;
	ld.global.f32 	%f20, [%rd193];
	@%p139 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_198;

$L__BB0_199:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6941, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_196:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6941, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_200;

$L__BB0_198:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6941, {low,high};}

	// end inline asm

$L__BB0_200:
	add.s32 	%r306, %r6934, %r252;
	mul.wide.s32 	%rd194, %r306, 4;
	add.s64 	%rd195, %rd16, %rd194;
	st.global.u32 	[%rd195], %r6941;
	@%p9 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	setp.eq.s32 	%p140, %r248, 0;
	add.s32 	%r1890, %r258, %r268;
	shl.b32 	%r1891, %r1890, 1;
	or.b32  	%r1892, %r1891, 1;
	mul.wide.s32 	%rd196, %r1892, 4;
	add.s64 	%rd197, %rd15, %rd196;
	ld.global.f32 	%f21, [%rd197];
	@%p140 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;

$L__BB0_204:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_201:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6942, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_205;

$L__BB0_203:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6942, {low,high};}

	// end inline asm

$L__BB0_205:
	add.s32 	%r1895, %r306, 1;
	mul.wide.s32 	%rd198, %r1895, 4;
	add.s64 	%rd199, %rd16, %rd198;
	st.global.u32 	[%rd199], %r6942;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_206:
	or.b32  	%r1896, %r6930, %r268;
	setp.gt.s32 	%p141, %r1896, -1;
	and.pred  	%p143, %p121, %p141;
	setp.lt.s32 	%p144, %r6930, %r1478;
	and.pred  	%p10, %p144, %p143;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p145, %f22, 0f40000000;
	@%p145 bra 	$L__BB0_218;

	@%p10 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	setp.eq.s32 	%p146, %r248, 0;
	add.s32 	%r1898, %r260, %r268;
	shl.b32 	%r1899, %r1898, 1;
	mul.wide.s32 	%rd200, %r1899, 4;
	add.s64 	%rd201, %rd15, %rd200;
	ld.global.f32 	%f23, [%rd201];
	@%p146 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;

$L__BB0_211:
	mov.f32 	%f201, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f201;
  mov.b32 %r6944, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_208:
	mov.f32 	%f197, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f197;
  cvt.rn.f16.f32 high, %f197;
  mov.b32 %r6944, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_212;

$L__BB0_210:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6944, {low,high};}

	// end inline asm

$L__BB0_212:
	add.s32 	%r317, %r6934, %r252;
	mul.wide.s32 	%rd202, %r317, 4;
	add.s64 	%rd203, %rd16, %rd202;
	st.global.u32 	[%rd203], %r6944;
	@%p10 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	setp.eq.s32 	%p147, %r248, 0;
	add.s32 	%r1903, %r259, %r268;
	shl.b32 	%r1904, %r1903, 1;
	mul.wide.s32 	%rd204, %r1904, 4;
	add.s64 	%rd205, %rd15, %rd204;
	ld.global.f32 	%f24, [%rd205];
	@%p147 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_215;

$L__BB0_216:
	mov.f32 	%f207, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f207;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_213:
	mov.f32 	%f203, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f203;
  cvt.rn.f16.f32 high, %f203;
  mov.b32 %r6945, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_217;

$L__BB0_215:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6945, {low,high};}

	// end inline asm

$L__BB0_217:
	add.s32 	%r1907, %r317, 1;
	mul.wide.s32 	%rd206, %r1907, 4;
	add.s64 	%rd207, %rd16, %rd206;
	st.global.u32 	[%rd207], %r6945;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_218:
	add.f32 	%f208, %f12, 0f00000000;
	setp.geu.f32 	%p148, %f208, 0f40000000;
	@%p148 bra 	$L__BB0_230;

	@%p10 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	setp.eq.s32 	%p149, %r248, 0;
	add.s32 	%r1909, %r260, %r268;
	shl.b32 	%r1910, %r1909, 1;
	or.b32  	%r1911, %r1910, 1;
	mul.wide.s32 	%rd208, %r1911, 4;
	add.s64 	%rd209, %rd15, %rd208;
	ld.global.f32 	%f25, [%rd209];
	@%p149 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;

$L__BB0_223:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6947, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_220:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6947, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_224;

$L__BB0_222:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6947, {low,high};}

	// end inline asm

$L__BB0_224:
	add.s32 	%r328, %r6934, %r252;
	mul.wide.s32 	%rd210, %r328, 4;
	add.s64 	%rd211, %rd16, %rd210;
	st.global.u32 	[%rd211], %r6947;
	@%p10 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	setp.eq.s32 	%p150, %r248, 0;
	add.s32 	%r1915, %r259, %r268;
	shl.b32 	%r1916, %r1915, 1;
	or.b32  	%r1917, %r1916, 1;
	mul.wide.s32 	%rd212, %r1917, 4;
	add.s64 	%rd213, %rd15, %rd212;
	ld.global.f32 	%f26, [%rd213];
	@%p150 bra 	$L__BB0_228;
	bra.uni 	$L__BB0_227;

$L__BB0_228:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6948, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_225:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6948, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_229;

$L__BB0_227:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6948, {low,high};}

	// end inline asm

$L__BB0_229:
	add.s32 	%r1920, %r328, 1;
	mul.wide.s32 	%rd214, %r1920, 4;
	add.s64 	%rd215, %rd16, %rd214;
	st.global.u32 	[%rd215], %r6948;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_230:
	or.b32  	%r1921, %r262, %r268;
	setp.gt.s32 	%p151, %r1921, -1;
	and.pred  	%p153, %p121, %p151;
	setp.lt.s32 	%p154, %r262, %r1478;
	and.pred  	%p11, %p154, %p153;
	@%p145 bra 	$L__BB0_242;

	@%p11 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	setp.eq.s32 	%p156, %r248, 0;
	add.s32 	%r1923, %r261, %r268;
	shl.b32 	%r1924, %r1923, 1;
	mul.wide.s32 	%rd216, %r1924, 4;
	add.s64 	%rd217, %rd15, %rd216;
	ld.global.f32 	%f27, [%rd217];
	@%p156 bra 	$L__BB0_235;
	bra.uni 	$L__BB0_234;

$L__BB0_235:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6950, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_232:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6950, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_236;

$L__BB0_234:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6950, {low,high};}

	// end inline asm

$L__BB0_236:
	add.s32 	%r339, %r6934, %r252;
	mul.wide.s32 	%rd218, %r339, 4;
	add.s64 	%rd219, %rd16, %rd218;
	st.global.u32 	[%rd219], %r6950;
	@%p11 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	setp.eq.s32 	%p157, %r248, 0;
	add.s32 	%r1928, %r263, %r268;
	shl.b32 	%r1929, %r1928, 1;
	mul.wide.s32 	%rd220, %r1929, 4;
	add.s64 	%rd221, %rd15, %rd220;
	ld.global.f32 	%f28, [%rd221];
	@%p157 bra 	$L__BB0_240;
	bra.uni 	$L__BB0_239;

$L__BB0_240:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6951, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_237:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6951, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_241;

$L__BB0_239:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6951, {low,high};}

	// end inline asm

$L__BB0_241:
	add.s32 	%r1932, %r339, 1;
	mul.wide.s32 	%rd222, %r1932, 4;
	add.s64 	%rd223, %rd16, %rd222;
	st.global.u32 	[%rd223], %r6951;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_242:
	@%p138 bra 	$L__BB0_254;

	@%p11 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	setp.eq.s32 	%p159, %r248, 0;
	add.s32 	%r1934, %r261, %r268;
	shl.b32 	%r1935, %r1934, 1;
	or.b32  	%r1936, %r1935, 1;
	mul.wide.s32 	%rd224, %r1936, 4;
	add.s64 	%rd225, %rd15, %rd224;
	ld.global.f32 	%f29, [%rd225];
	@%p159 bra 	$L__BB0_247;
	bra.uni 	$L__BB0_246;

$L__BB0_247:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6953, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_244:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6953, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_248;

$L__BB0_246:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6953, {low,high};}

	// end inline asm

$L__BB0_248:
	add.s32 	%r350, %r6934, %r252;
	mul.wide.s32 	%rd226, %r350, 4;
	add.s64 	%rd227, %rd16, %rd226;
	st.global.u32 	[%rd227], %r6953;
	@%p11 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	setp.eq.s32 	%p160, %r248, 0;
	add.s32 	%r1940, %r263, %r268;
	shl.b32 	%r1941, %r1940, 1;
	or.b32  	%r1942, %r1941, 1;
	mul.wide.s32 	%rd228, %r1942, 4;
	add.s64 	%rd229, %rd15, %rd228;
	ld.global.f32 	%f30, [%rd229];
	@%p160 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_251;

$L__BB0_252:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_249:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6954, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_253;

$L__BB0_251:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6954, {low,high};}

	// end inline asm

$L__BB0_253:
	add.s32 	%r1945, %r350, 1;
	mul.wide.s32 	%rd230, %r1945, 4;
	add.s64 	%rd231, %rd16, %rd230;
	st.global.u32 	[%rd231], %r6954;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_254:
	or.b32  	%r1946, %r265, %r268;
	setp.gt.s32 	%p161, %r1946, -1;
	and.pred  	%p163, %p121, %p161;
	setp.lt.s32 	%p164, %r265, %r1478;
	and.pred  	%p12, %p164, %p163;
	@%p135 bra 	$L__BB0_266;

	@%p12 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	setp.eq.s32 	%p166, %r248, 0;
	add.s32 	%r1948, %r264, %r268;
	shl.b32 	%r1949, %r1948, 1;
	mul.wide.s32 	%rd232, %r1949, 4;
	add.s64 	%rd233, %rd15, %rd232;
	ld.global.f32 	%f31, [%rd233];
	@%p166 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_258;

$L__BB0_259:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_256:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6956, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_260;

$L__BB0_258:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6956, {low,high};}

	// end inline asm

$L__BB0_260:
	add.s32 	%r361, %r6934, %r252;
	mul.wide.s32 	%rd234, %r361, 4;
	add.s64 	%rd235, %rd16, %rd234;
	st.global.u32 	[%rd235], %r6956;
	@%p12 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	setp.eq.s32 	%p167, %r248, 0;
	add.s32 	%r1953, %r266, %r268;
	shl.b32 	%r1954, %r1953, 1;
	mul.wide.s32 	%rd236, %r1954, 4;
	add.s64 	%rd237, %rd15, %rd236;
	ld.global.f32 	%f32, [%rd237];
	@%p167 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_263;

$L__BB0_264:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_261:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6957, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_265;

$L__BB0_263:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6957, {low,high};}

	// end inline asm

$L__BB0_265:
	add.s32 	%r1957, %r361, 1;
	mul.wide.s32 	%rd238, %r1957, 4;
	add.s64 	%rd239, %rd16, %rd238;
	st.global.u32 	[%rd239], %r6957;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_266:
	@%p128 bra 	$L__BB0_278;

	@%p12 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_268;

$L__BB0_269:
	setp.eq.s32 	%p169, %r248, 0;
	add.s32 	%r1959, %r264, %r268;
	shl.b32 	%r1960, %r1959, 1;
	or.b32  	%r1961, %r1960, 1;
	mul.wide.s32 	%rd240, %r1961, 4;
	add.s64 	%rd241, %rd15, %rd240;
	ld.global.f32 	%f33, [%rd241];
	@%p169 bra 	$L__BB0_271;
	bra.uni 	$L__BB0_270;

$L__BB0_271:
	mov.f32 	%f262, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f262;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_268:
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6959, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_272;

$L__BB0_270:
	mov.f32 	%f259, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f259;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6959, {low,high};}

	// end inline asm

$L__BB0_272:
	add.s32 	%r372, %r6934, %r252;
	mul.wide.s32 	%rd242, %r372, 4;
	add.s64 	%rd243, %rd16, %rd242;
	st.global.u32 	[%rd243], %r6959;
	@%p12 bra 	$L__BB0_274;
	bra.uni 	$L__BB0_273;

$L__BB0_274:
	setp.eq.s32 	%p170, %r248, 0;
	add.s32 	%r1965, %r266, %r268;
	shl.b32 	%r1966, %r1965, 1;
	or.b32  	%r1967, %r1966, 1;
	mul.wide.s32 	%rd244, %r1967, 4;
	add.s64 	%rd245, %rd15, %rd244;
	ld.global.f32 	%f34, [%rd245];
	@%p170 bra 	$L__BB0_276;
	bra.uni 	$L__BB0_275;

$L__BB0_276:
	mov.f32 	%f268, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f268;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_273:
	mov.f32 	%f264, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f264;
  cvt.rn.f16.f32 high, %f264;
  mov.b32 %r6960, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_277;

$L__BB0_275:
	mov.f32 	%f265, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f265;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6960, {low,high};}

	// end inline asm

$L__BB0_277:
	add.s32 	%r1970, %r372, 1;
	mul.wide.s32 	%rd246, %r1970, 4;
	add.s64 	%rd247, %rd16, %rd246;
	st.global.u32 	[%rd247], %r6960;
	add.s32 	%r6934, %r6934, 2;

$L__BB0_278:
	add.s64 	%rd461, %rd461, 4;
	add.s64 	%rd460, %rd460, -4;
	setp.ne.s64 	%p171, %rd460, 0;
	@%p171 bra 	$L__BB0_158;

$L__BB0_279:
	add.s32 	%r6930, %r6930, %r42;
	setp.lt.s32 	%p172, %r6930, %r1478;
	@%p172 bra 	$L__BB0_156;

$L__BB0_280:
	add.s32 	%r6924, %r6924, %r1498;
	setp.lt.s32 	%p173, %r6924, %r1477;
	@%p173 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_281;

$L__BB0_135:
	@%p24 bra 	$L__BB0_281;

	neg.s32 	%r221, %r70;
	mov.u32 	%r1785, 31;
	sub.s32 	%r1786, %r1785, %r40;
	setp.gt.s32 	%p111, %r39, %r40;
	selp.b32 	%r1787, %r40, %r1786, %p111;
	shl.b32 	%r1788, %r1787, 2;
	mov.u32 	%r1789, 2;
	sub.s32 	%r222, %r1788, %r1480;
	shl.b32 	%r1790, %r1479, 2;
	mov.u32 	%r1791, 128;
	sub.s32 	%r223, %r1791, %r1790;
	sub.s32 	%r1792, %r1789, %r1480;
	add.s32 	%r224, %r1792, %r1788;
	add.s32 	%r225, %r1477, -1;
	add.s32 	%r226, %r222, 1;
	add.s32 	%r227, %r224, 1;
	rem.s32 	%r1817, %r226, %r223;
	add.s32 	%r1818, %r1817, %r223;
	rem.s32 	%r238, %r1818, %r223;
	rem.s32 	%r1819, %r227, %r223;
	add.s32 	%r1820, %r1819, %r223;
	rem.s32 	%r239, %r1820, %r223;

$L__BB0_137:
	setp.ne.s32 	%p112, %r36, %r221;
	@%p112 bra 	$L__BB0_151;

	shl.b32 	%r229, %r6924, 1;
	rem.s32 	%r1793, %r222, %r223;
	add.s32 	%r1794, %r1793, %r223;
	rem.s32 	%r230, %r1794, %r223;
	rem.s32 	%r1795, %r224, %r223;
	add.s32 	%r1796, %r1795, %r223;
	rem.s32 	%r231, %r1796, %r223;
	@%p111 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_139;

$L__BB0_140:
	mul.lo.s32 	%r1799, %r229, %r223;
	add.s32 	%r1800, %r1799, %r230;
	mul.wide.s32 	%rd148, %r1800, 4;
	add.s64 	%rd149, %rd15, %rd148;
	ld.global.f32 	%f129, [%rd149];
	add.s32 	%r1801, %r1799, %r231;
	mul.wide.s32 	%rd150, %r1801, 4;
	add.s64 	%rd151, %rd15, %rd150;
	ld.global.f32 	%f130, [%rd151];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6925, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_141;

$L__BB0_139:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6925, {low,high};}

	// end inline asm

$L__BB0_141:
	shl.b32 	%r1802, %r6924, 5;
	add.s32 	%r1803, %r1802, %r40;
	shl.b32 	%r1804, %r1803, 2;
	mul.wide.s32 	%rd152, %r1804, 4;
	add.s64 	%rd17, %rd16, %rd152;
	st.global.u32 	[%rd17], %r6925;
	@%p111 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_142;

$L__BB0_143:
	add.s32 	%r1807, %r229, 1;
	mul.lo.s32 	%r1808, %r1807, %r223;
	add.s32 	%r1809, %r1808, %r230;
	mul.wide.s32 	%rd153, %r1809, 4;
	add.s64 	%rd154, %rd15, %rd153;
	ld.global.f32 	%f133, [%rd154];
	add.s32 	%r1810, %r1808, %r231;
	mul.wide.s32 	%rd155, %r1810, 4;
	add.s64 	%rd156, %rd15, %rd155;
	ld.global.f32 	%f134, [%rd156];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f133;
  cvt.rn.f16.f32 high, %f134;
  mov.b32 %r6926, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_144;

$L__BB0_142:
	mov.f32 	%f132, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f132;
  cvt.rn.f16.f32 high, %f132;
  mov.b32 %r6926, {low,high};}

	// end inline asm

$L__BB0_144:
	add.s32 	%r1811, %r225, %r6924;
	rem.s32 	%r1812, %r1811, %r1477;
	shl.b32 	%r1813, %r1812, 5;
	add.s32 	%r1814, %r1813, %r40;
	shl.b32 	%r1815, %r1814, 2;
	or.b32  	%r1816, %r1815, 2;
	mul.wide.s32 	%rd157, %r1816, 4;
	add.s64 	%rd18, %rd16, %rd157;
	st.global.u32 	[%rd18], %r6926;
	@%p111 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_145;

$L__BB0_146:
	mul.lo.s32 	%r1823, %r229, %r223;
	add.s32 	%r1824, %r1823, %r238;
	mul.wide.s32 	%rd158, %r1824, 4;
	add.s64 	%rd159, %rd15, %rd158;
	ld.global.f32 	%f137, [%rd159];
	add.s32 	%r1825, %r1823, %r239;
	mul.wide.s32 	%rd160, %r1825, 4;
	add.s64 	%rd161, %rd15, %rd160;
	ld.global.f32 	%f138, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f137;
  cvt.rn.f16.f32 high, %f138;
  mov.b32 %r6927, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_147;

$L__BB0_145:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f136;
  mov.b32 %r6927, {low,high};}

	// end inline asm

$L__BB0_147:
	st.global.u32 	[%rd17+4], %r6927;
	@%p111 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	add.s32 	%r1828, %r229, 1;
	mul.lo.s32 	%r1829, %r1828, %r223;
	add.s32 	%r1830, %r1829, %r238;
	mul.wide.s32 	%rd162, %r1830, 4;
	add.s64 	%rd163, %rd15, %rd162;
	ld.global.f32 	%f141, [%rd163];
	add.s32 	%r1831, %r1829, %r239;
	mul.wide.s32 	%rd164, %r1831, 4;
	add.s64 	%rd165, %rd15, %rd164;
	ld.global.f32 	%f142, [%rd165];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f142;
  mov.b32 %r6928, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f140, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f140;
  cvt.rn.f16.f32 high, %f140;
  mov.b32 %r6928, {low,high};}

	// end inline asm

$L__BB0_150:
	st.global.u32 	[%rd18+4], %r6928;

$L__BB0_151:
	add.s32 	%r6924, %r6924, %r1498;
	setp.lt.s32 	%p117, %r6924, %r1477;
	@%p117 bra 	$L__BB0_137;

$L__BB0_281:
	add.s32 	%r1972, %r1472, -1;
	mad.lo.s32 	%r1973, %r1473, 576, 128;
	mul.lo.s32 	%r1974, %r1973, %r1972;
	add.s32 	%r1975, %r65, -64;
	add.s32 	%r1976, %r1975, %r65;
	add.s32 	%r1977, %r1473, -1;
	mad.lo.s32 	%r1978, %r1976, %r1977, %r1974;
	mul.lo.s32 	%r1979, %r1972, %r1473;
	mul.lo.s32 	%r1980, %r1979, 320;
	mad.lo.s32 	%r1981, %r1975, %r1977, %r1980;
	add.s32 	%r381, %r1981, %r1978;
	setp.lt.s32 	%p174, %r381, 1;
	mov.f32 	%f270, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r6965, {low,high};}

	// end inline asm
	@%p174 bra 	$L__BB0_284;

	mov.u32 	%r6964, 0;
	mov.u32 	%r6962, _ZN6kernel5shmemE;

$L__BB0_283:
	st.shared.u32 	[%r6962], %r6965;
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1984, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6962+4], %r1984;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1985, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6962+8], %r1985;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r1986, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6962+12], %r1986;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6965, {low,high};}

	// end inline asm
	add.s32 	%r6962, %r6962, 16;
	add.s32 	%r6964, %r6964, 4;
	setp.lt.s32 	%p175, %r6964, %r381;
	@%p175 bra 	$L__BB0_283;

$L__BB0_284:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r1988, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f270;
  cvt.rn.f16.f32 high, %f270;
  mov.b32 %r1989, {low,high};}

	// end inline asm
	ld.param.u64 	%rd248, [%rd1+152];
	cvta.to.global.u64 	%rd23, %rd248;
	mov.u32 	%r1990, 31;
	sub.s32 	%r1991, %r1990, %r40;
	setp.gt.s32 	%p176, %r39, %r40;
	selp.b32 	%r1992, %r40, %r1991, %p176;
	shl.b32 	%r1993, %r1992, 2;
	sub.s32 	%r392, %r1993, %r1480;
	shl.b32 	%r1994, %r1479, 2;
	mov.u32 	%r1995, 128;
	sub.s32 	%r393, %r1995, %r1994;
	rem.s32 	%r1996, %r392, %r393;
	add.s32 	%r1997, %r1996, %r393;
	rem.s32 	%r394, %r1997, %r393;
	add.s32 	%r1998, %r392, 2;
	rem.s32 	%r1999, %r1998, %r393;
	add.s32 	%r2000, %r1999, %r393;
	rem.s32 	%r395, %r2000, %r393;
	mul.lo.s32 	%r2001, %r394, 6;
	mul.lo.s32 	%r2002, %r395, 6;
	mul.wide.s32 	%rd249, %r2001, 4;
	add.s64 	%rd24, %rd23, %rd249;
	mul.wide.s32 	%rd250, %r2002, 4;
	add.s64 	%rd25, %rd23, %rd250;
	@%p17 bra 	$L__BB0_286;
	bra.uni 	$L__BB0_285;

$L__BB0_286:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6966, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_287;

$L__BB0_285:
	ld.global.f32 	%f285, [%rd24];
	ld.global.f32 	%f286, [%rd24+8];
	add.f32 	%f283, %f285, %f286;
	ld.global.f32 	%f287, [%rd25+8];
	ld.global.f32 	%f288, [%rd25];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6966, {low,high};}

	// end inline asm

$L__BB0_287:
	@%p17 bra 	$L__BB0_289;
	bra.uni 	$L__BB0_288;

$L__BB0_289:
	ld.global.f32 	%f293, [%rd24+4];
	ld.global.f32 	%f294, [%rd25+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6967, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_290;

$L__BB0_288:
	ld.global.f32 	%f291, [%rd24];
	ld.global.f32 	%f292, [%rd25];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6967, {low,high};}

	// end inline asm

$L__BB0_290:
	@%p17 bra 	$L__BB0_292;
	bra.uni 	$L__BB0_291;

$L__BB0_292:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6968, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_293;

$L__BB0_291:
	ld.global.f32 	%f297, [%rd24+20];
	ld.global.f32 	%f298, [%rd24+12];
	add.f32 	%f295, %f298, %f297;
	ld.global.f32 	%f299, [%rd25+20];
	ld.global.f32 	%f300, [%rd25+12];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6968, {low,high};}

	// end inline asm

$L__BB0_293:
	@%p17 bra 	$L__BB0_295;
	bra.uni 	$L__BB0_294;

$L__BB0_295:
	ld.global.f32 	%f305, [%rd24+16];
	ld.global.f32 	%f306, [%rd25+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6969, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_296;

$L__BB0_294:
	ld.global.f32 	%f303, [%rd24+12];
	ld.global.f32 	%f304, [%rd25+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6969, {low,high};}

	// end inline asm

$L__BB0_296:
	add.s32 	%r2011, %r392, 1;
	rem.s32 	%r2012, %r2011, %r393;
	add.s32 	%r2013, %r2012, %r393;
	rem.s32 	%r408, %r2013, %r393;
	add.s32 	%r2014, %r392, 3;
	rem.s32 	%r2015, %r2014, %r393;
	add.s32 	%r2016, %r2015, %r393;
	rem.s32 	%r409, %r2016, %r393;
	mul.lo.s32 	%r2017, %r408, 6;
	mul.lo.s32 	%r2018, %r409, 6;
	mul.wide.s32 	%rd251, %r2017, 4;
	add.s64 	%rd26, %rd23, %rd251;
	mul.wide.s32 	%rd252, %r2018, 4;
	add.s64 	%rd27, %rd23, %rd252;
	@%p17 bra 	$L__BB0_298;
	bra.uni 	$L__BB0_297;

$L__BB0_298:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6970, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_299;

$L__BB0_297:
	ld.global.f32 	%f309, [%rd26];
	ld.global.f32 	%f310, [%rd26+8];
	add.f32 	%f307, %f309, %f310;
	ld.global.f32 	%f311, [%rd27+8];
	ld.global.f32 	%f312, [%rd27];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6970, {low,high};}

	// end inline asm

$L__BB0_299:
	@%p17 bra 	$L__BB0_301;
	bra.uni 	$L__BB0_300;

$L__BB0_301:
	ld.global.f32 	%f317, [%rd26+4];
	ld.global.f32 	%f318, [%rd27+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6971, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_302;

$L__BB0_300:
	ld.global.f32 	%f315, [%rd26];
	ld.global.f32 	%f316, [%rd27];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6971, {low,high};}

	// end inline asm

$L__BB0_302:
	@%p17 bra 	$L__BB0_304;
	bra.uni 	$L__BB0_303;

$L__BB0_304:
	mov.f32 	%f326, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f326;
  cvt.rn.f16.f32 high, %f326;
  mov.b32 %r6972, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_305;

$L__BB0_303:
	ld.global.f32 	%f321, [%rd26+20];
	ld.global.f32 	%f322, [%rd26+12];
	add.f32 	%f319, %f322, %f321;
	ld.global.f32 	%f323, [%rd27+20];
	ld.global.f32 	%f324, [%rd27+12];
	add.f32 	%f320, %f324, %f323;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f319;
  cvt.rn.f16.f32 high, %f320;
  mov.b32 %r6972, {low,high};}

	// end inline asm

$L__BB0_305:
	@%p17 bra 	$L__BB0_307;
	bra.uni 	$L__BB0_306;

$L__BB0_307:
	ld.global.f32 	%f329, [%rd26+16];
	ld.global.f32 	%f330, [%rd27+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f329;
  cvt.rn.f16.f32 high, %f330;
  mov.b32 %r6973, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_308;

$L__BB0_306:
	ld.global.f32 	%f327, [%rd26+12];
	ld.global.f32 	%f328, [%rd27+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f327;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r6973, {low,high};}

	// end inline asm

$L__BB0_308:
	// begin inline asm
	mov.u32 %r2027, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd253, %r2027;
	// begin inline asm
	mov.u32 %r2028, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd254, %r2028;
	bfi.b64 	%rd28, %rd254, %rd253, 32, 32;
	setp.ne.s64 	%p185, %rd28, 0;
	@%p185 bra 	$L__BB0_310;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_310:
	add.s64 	%rd29, %rd28, 4;
	mov.u32 	%r2029, %nctaid.y;
	mov.u32 	%r2030, %nctaid.x;
	mul.lo.s32 	%r2031, %r2030, %r2029;
	mov.u32 	%r2032, %nctaid.z;
	mul.lo.s32 	%r422, %r2031, %r2032;
	neg.s32 	%r2033, %r36;
	add.s32 	%r2034, %r40, %r35;
	setp.ne.s32 	%p186, %r2034, %r2033;
	mov.u32 	%r2035, %ctaid.x;
	add.s32 	%r423, %r2035, %r37;
	neg.s32 	%r424, %r38;
	bar.sync 	0;
	@%p186 bra 	$L__BB0_314;

	setp.eq.s32 	%p187, %r423, %r424;
	mov.u32 	%r2038, -2147483647;
	sub.s32 	%r2039, %r2038, %r422;
	selp.b32 	%r2037, %r2039, 1, %p187;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r2036,[%rd29],%r2037;
	// end inline asm

$L__BB0_312:
	ld.volatile.u32 	%r2040, [%rd29];
	xor.b32  	%r2041, %r2040, %r2036;
	setp.gt.s32 	%p188, %r2041, -1;
	@%p188 bra 	$L__BB0_312;

	// begin inline asm
	ld.acquire.gpu.u32 %r2042,[%rd29];
	// end inline asm

$L__BB0_314:
	bar.sync 	0;
	setp.lt.s32 	%p189, %r43, 1;
	@%p189 bra 	$L__BB0_833;

	shr.s32 	%r2044, %r1482, 31;
	shr.u32 	%r2045, %r2044, 30;
	add.s32 	%r2046, %r1482, %r2045;
	shr.s32 	%r426, %r2046, 2;
	add.s32 	%r2047, %r40, 24;
	mul.hi.s32 	%r2048, %r2047, 1374389535;
	shr.u32 	%r2049, %r2048, 31;
	shr.s32 	%r2050, %r2048, 3;
	add.s32 	%r2051, %r2050, %r2049;
	mul.lo.s32 	%r2052, %r2051, 25;
	sub.s32 	%r2053, %r2047, %r2052;
	add.s32 	%r2054, %r40, 26;
	mul.hi.s32 	%r2055, %r2054, 1374389535;
	shr.u32 	%r2056, %r2055, 31;
	shr.s32 	%r2057, %r2055, 3;
	add.s32 	%r2058, %r2057, %r2056;
	mul.lo.s32 	%r2059, %r2058, 25;
	sub.s32 	%r2060, %r2054, %r2059;
	shr.u32 	%r2061, %r1482, 31;
	add.s32 	%r2062, %r1482, %r2061;
	and.b32  	%r2063, %r2062, -2;
	sub.s32 	%r427, %r1482, %r2063;
	setp.lt.s32 	%p190, %r40, 25;
	selp.b32 	%r428, %r2053, %r40, %p190;
	setp.lt.s32 	%p191, %r394, %r1491;
	setp.ge.s32 	%p192, %r394, %r1490;
	and.pred  	%p13, %p191, %p192;
	setp.lt.s32 	%p193, %r408, %r1491;
	setp.ge.s32 	%p194, %r408, %r1490;
	and.pred  	%p14, %p193, %p194;
	setp.lt.s32 	%p195, %r395, %r1491;
	setp.ge.s32 	%p196, %r395, %r1490;
	and.pred  	%p15, %p195, %p196;
	setp.lt.s32 	%p197, %r409, %r1491;
	setp.ge.s32 	%p198, %r409, %r1490;
	and.pred  	%p16, %p197, %p198;
	selp.b32 	%r429, %r2060, %r40, %p190;
	mov.u32 	%r2043, 0;
	// begin inline asm
	{mov.u32 %r2064, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2389, %r2064, 8;
	add.s32 	%r2390, %r2389, -8192;
	or.b32  	%r2068, %r2390, 31;
	mov.u32 	%r7295, %r1989;
	mov.u32 	%r7296, %r1989;
	mov.u32 	%r7305, %r1989;
	mov.u32 	%r7306, %r1989;
	mov.u32 	%r7307, %r1989;
	mov.u32 	%r7308, %r1989;
	mov.u32 	%r7297, %r1989;
	mov.u32 	%r7298, %r1989;
	mov.u32 	%r7299, %r1989;
	mov.u32 	%r7300, %r1989;
	mov.u32 	%r7301, %r1989;
	mov.u32 	%r7302, %r1989;
	mov.u32 	%r7309, %r1989;
	mov.u32 	%r7310, %r1989;
	mov.u32 	%r7311, %r1989;
	mov.u32 	%r7312, %r1989;
	mov.u32 	%r7313, %r1989;
	mov.u32 	%r7314, %r1989;
	mov.u32 	%r7303, %r1989;
	mov.u32 	%r7304, %r1989;
	mov.u32 	%r7315, %r1989;
	mov.u32 	%r7316, %r1989;
	mov.u32 	%r7247, %r1989;
	mov.u32 	%r7248, %r1989;
	mov.u32 	%r7235, %r1989;
	mov.u32 	%r7236, %r1989;
	mov.u32 	%r7237, %r1989;
	mov.u32 	%r7238, %r1989;
	mov.u32 	%r7249, %r1989;
	mov.u32 	%r7250, %r1989;
	mov.u32 	%r7251, %r1989;
	mov.u32 	%r7252, %r1989;
	mov.u32 	%r7253, %r1989;
	mov.u32 	%r7254, %r1989;
	mov.u32 	%r7239, %r1989;
	mov.u32 	%r7240, %r1989;
	mov.u32 	%r7241, %r1989;
	mov.u32 	%r7242, %r1989;
	mov.u32 	%r7255, %r1989;
	mov.u32 	%r7256, %r1989;
	mov.u32 	%r7257, %r1989;
	mov.u32 	%r7258, %r1989;
	mov.u32 	%r7016, %r1989;
	mov.u32 	%r7017, %r1989;
	mov.u32 	%r7243, %r1989;
	mov.u32 	%r7244, %r1989;
	mov.u32 	%r7020, %r1989;
	mov.u32 	%r7021, %r1989;
	mov.u32 	%r7022, %r1989;
	mov.u32 	%r7023, %r1989;
	mov.u32 	%r7024, %r1989;
	mov.u32 	%r7025, %r1989;
	mov.u32 	%r7219, %r1989;
	mov.u32 	%r7220, %r1989;
	mov.u32 	%r7028, %r1989;
	mov.u32 	%r7221, %r1989;
	mov.u32 	%r7030, %r1989;
	mov.u32 	%r7031, %r1989;
	mov.u32 	%r7222, %r1989;
	mov.u32 	%r7033, %r1989;
	mov.u32 	%r7034, %r1989;
	mov.u32 	%r7035, %r1989;
	mov.u32 	%r7259, %r1989;
	mov.u32 	%r7260, %r1989;
	mov.u32 	%r7038, %r1989;
	mov.u32 	%r7039, %r1989;
	mov.u32 	%r7245, %r1989;
	mov.u32 	%r7246, %r1989;
	mov.u32 	%r7042, %r1989;
	mov.u32 	%r7043, %r1989;
	mov.u32 	%r7044, %r1989;
	mov.u32 	%r7045, %r1989;
	mov.u32 	%r7046, %r1989;
	mov.u32 	%r7047, %r1989;
	mov.u32 	%r7048, %r1989;
	mov.u32 	%r7049, %r1989;
	mov.u32 	%r7050, %r1989;
	mov.u32 	%r7051, %r1989;
	mov.u32 	%r7052, %r1989;
	mov.u32 	%r7053, %r1989;
	mov.u32 	%r7054, %r1989;
	mov.u32 	%r7055, %r1989;
	mov.u32 	%r7056, %r1989;
	mov.u32 	%r7057, %r1989;
	mov.u32 	%r7058, %r1989;
	mov.u32 	%r7223, %r1989;
	mov.u32 	%r7060, %r1989;
	mov.u32 	%r7061, %r1989;
	mov.u32 	%r7062, %r1989;
	mov.u32 	%r7063, %r1989;
	mov.u32 	%r7064, %r1989;
	mov.u32 	%r7065, %r1989;
	mov.u32 	%r7066, %r1989;
	mov.u32 	%r7224, %r1989;
	mov.u32 	%r7068, %r1989;
	mov.u32 	%r7261, %r1989;
	mov.u32 	%r7070, %r1989;
	mov.u32 	%r7071, %r1989;
	mov.u32 	%r7072, %r1989;
	mov.u32 	%r7073, %r1989;
	mov.u32 	%r7262, %r1989;
	mov.u32 	%r7075, %r1989;
	mov.u32 	%r7076, %r1989;
	mov.u32 	%r7077, %r1989;
	mov.u32 	%r7078, %r1989;
	mov.u32 	%r7079, %r1989;
	mov.u32 	%r7080, %r1989;
	mov.u32 	%r7081, %r1989;
	mov.u32 	%r7082, %r1989;
	mov.u32 	%r7083, %r1989;
	mov.u32 	%r7084, %r1989;
	mov.u32 	%r7085, %r1989;
	mov.u32 	%r7086, %r1989;
	mov.u32 	%r7087, %r1989;
	mov.u32 	%r7088, %r1989;
	mov.u32 	%r7089, %r1989;
	mov.u32 	%r7090, %r1989;
	mov.u32 	%r7091, %r1989;
	mov.u32 	%r7092, %r1989;
	mov.u32 	%r7093, %r1989;
	mov.u32 	%r7094, %r1989;
	mov.u32 	%r7095, %r1989;
	mov.u32 	%r7096, %r1989;
	mov.u32 	%r7097, %r1989;
	mov.u32 	%r7098, %r1989;
	mov.u32 	%r7099, %r1989;
	mov.u32 	%r7100, %r1989;
	mov.u32 	%r7101, %r1989;
	mov.u32 	%r7102, %r1989;
	mov.u32 	%r7103, %r1989;
	mov.u32 	%r7104, %r1989;
	mov.u32 	%r7105, %r1989;
	mov.u32 	%r7106, %r1989;
	mov.u32 	%r7107, %r1989;
	mov.u32 	%r7108, %r1989;
	mov.u32 	%r7109, %r1989;
	mov.u32 	%r7110, %r1989;
	mov.u32 	%r7111, %r1989;
	mov.u32 	%r7112, %r1989;
	mov.u32 	%r7113, %r1989;
	mov.u32 	%r7114, %r1989;
	mov.u32 	%r7115, %r1989;
	mov.u32 	%r7116, %r1989;
	mov.u32 	%r7117, %r1989;
	mov.u32 	%r7118, %r1989;
	mov.u32 	%r7119, %r1989;
	mov.u32 	%r7120, %r1989;
	mov.u32 	%r7121, %r1989;
	mov.u32 	%r7122, %r1989;
	mov.u32 	%r7123, %r1989;
	mov.u32 	%r7124, %r2043;

$L__BB0_316:
	mov.u32 	%r523, %r7224;
	mov.u32 	%r519, %r7063;
	mov.u32 	%r515, %r7223;
	mov.u32 	%r513, %r7057;
	mov.u32 	%r511, %r7055;
	mov.u32 	%r503, %r7047;
	mov.u32 	%r7063, %r7222;
	mov.u32 	%r485, %r7221;
	mov.u32 	%r7057, %r7220;
	mov.u32 	%r482, %r7219;
	mov.u32 	%r477, %r7021;
	mov.u32 	%r476, %r7020;
	mov.u32 	%r6875, %ctaid.y;
	mov.u32 	%r6874, %ctaid.z;
	mov.u32 	%r2079, 1;
	not.b32 	%r2353, %r6874;
	mov.u32 	%r2345, -1;
	add.s32 	%r2354, %r1475, %r2353;
	not.b32 	%r2356, %r6875;
	add.s32 	%r2357, %r1474, %r2356;
	add.s32 	%r2358, %r2357, %r2354;
	mul.lo.s32 	%r2359, %r2358, %r1476;
	add.s32 	%r2360, %r2359, %r1477;
	not.b32 	%r2362, %r35;
	add.s32 	%r2363, %r1472, %r2362;
	mad.lo.s32 	%r2364, %r2357, %r1472, %r2363;
	not.b32 	%r2366, %r36;
	add.s32 	%r2367, %r1473, %r2366;
	mad.lo.s32 	%r2368, %r2354, %r1473, %r2367;
	add.s32 	%r2369, %r2364, %r2368;
	shl.b32 	%r2370, %r2369, 1;
	add.s32 	%r2371, %r2360, %r2370;
	add.s32 	%r2372, %r2371, %r7124;
	add.s32 	%r2373, %r7124, %r2359;
	div.s32 	%r2374, %r2372, %r1477;
	mul.lo.s32 	%r2375, %r2374, %r1477;
	sub.s32 	%r2378, %r42, %r1477;
	sub.s32 	%r2379, %r2364, %r2368;
	shl.b32 	%r2380, %r2379, 1;
	add.s32 	%r2381, %r2380, %r1478;
	mad.lo.s32 	%r2382, %r2374, %r42, %r2381;
	mad.lo.s32 	%r2383, %r2374, %r2378, %r2373;
	div.s32 	%r2384, %r2382, %r1478;
	mul.lo.s32 	%r2385, %r2384, %r1478;
	sub.s32 	%r2388, %r1499, %r1478;
	mov.u32 	%r2163, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r2065,%r1988,%r2043,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2071, %r6967, %r2065, %p17;
	// begin inline asm
	{mul.f16x2 %r7208,%r2071,%r7123;
}
	// end inline asm
	selp.b32 	%r2074, %r6971, %r2065, %p17;
	// begin inline asm
	{mul.f16x2 %r7206,%r2074,%r7122;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2077,%r1988,%r2079,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2083, %r6967, %r2077, %p17;
	// begin inline asm
	{mul.f16x2 %r7207,%r2083,%r7121;
}
	// end inline asm
	selp.b32 	%r2086, %r6971, %r2077, %p17;
	// begin inline asm
	{mul.f16x2 %r7205,%r2086,%r7120;
}
	// end inline asm
	mov.u32 	%r2091, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r2089,%r1988,%r2091,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2095, %r6967, %r2089, %p17;
	// begin inline asm
	{mul.f16x2 %r7204,%r2095,%r7119;
}
	// end inline asm
	selp.b32 	%r2098, %r6971, %r2089, %p17;
	// begin inline asm
	{mul.f16x2 %r7203,%r2098,%r7118;
}
	// end inline asm
	mov.u32 	%r2103, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2101,%r1988,%r2103,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2107, %r6967, %r2101, %p17;
	// begin inline asm
	{mul.f16x2 %r7202,%r2107,%r7316;
}
	// end inline asm
	selp.b32 	%r2110, %r6971, %r2101, %p17;
	// begin inline asm
	{mul.f16x2 %r7200,%r2110,%r7315;
}
	// end inline asm
	mov.u32 	%r2115, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2113,%r1988,%r2115,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2119, %r6967, %r2113, %p17;
	// begin inline asm
	{mul.f16x2 %r7201,%r2119,%r7117;
}
	// end inline asm
	selp.b32 	%r2122, %r6971, %r2113, %p17;
	// begin inline asm
	{mul.f16x2 %r7199,%r2122,%r7116;
}
	// end inline asm
	mov.u32 	%r2127, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2125,%r1988,%r2127,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2131, %r6967, %r2125, %p17;
	// begin inline asm
	{mul.f16x2 %r7198,%r2131,%r7115;
}
	// end inline asm
	selp.b32 	%r2134, %r6971, %r2125, %p17;
	// begin inline asm
	{mul.f16x2 %r7195,%r2134,%r7114;
}
	// end inline asm
	mov.u32 	%r2139, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2137,%r1988,%r2139,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2143, %r6967, %r2137, %p17;
	// begin inline asm
	{mul.f16x2 %r7197,%r2143,%r7113;
}
	// end inline asm
	selp.b32 	%r2146, %r6971, %r2137, %p17;
	// begin inline asm
	{mul.f16x2 %r7194,%r2146,%r7112;
}
	// end inline asm
	mov.u32 	%r2151, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2149,%r1988,%r2151,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2155, %r6967, %r2149, %p17;
	// begin inline asm
	{mul.f16x2 %r7196,%r2155,%r7111;
}
	// end inline asm
	selp.b32 	%r2158, %r6971, %r2149, %p17;
	// begin inline asm
	{mul.f16x2 %r7193,%r2158,%r7110;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2161,%r1988,%r2163,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2167, %r6967, %r2161, %p17;
	// begin inline asm
	{mul.f16x2 %r7192,%r2167,%r7109;
}
	// end inline asm
	selp.b32 	%r2170, %r6971, %r2161, %p17;
	// begin inline asm
	{mul.f16x2 %r7189,%r2170,%r7108;
}
	// end inline asm
	mov.u32 	%r2175, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2173,%r1988,%r2175,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2179, %r6967, %r2173, %p17;
	// begin inline asm
	{mul.f16x2 %r7191,%r2179,%r7107;
}
	// end inline asm
	selp.b32 	%r2182, %r6971, %r2173, %p17;
	// begin inline asm
	{mul.f16x2 %r7188,%r2182,%r7106;
}
	// end inline asm
	mov.u32 	%r2187, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2185,%r1988,%r2187,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2191, %r6967, %r2185, %p17;
	// begin inline asm
	{mul.f16x2 %r7190,%r2191,%r7105;
}
	// end inline asm
	selp.b32 	%r2194, %r6971, %r2185, %p17;
	// begin inline asm
	{mul.f16x2 %r7187,%r2194,%r7104;
}
	// end inline asm
	mov.u32 	%r2199, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2197,%r1988,%r2199,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2203, %r6967, %r2197, %p17;
	// begin inline asm
	{mul.f16x2 %r7186,%r2203,%r7304;
}
	// end inline asm
	selp.b32 	%r2206, %r6971, %r2197, %p17;
	// begin inline asm
	{mul.f16x2 %r7185,%r2206,%r7303;
}
	// end inline asm
	mov.u32 	%r2211, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2209,%r1988,%r2211,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2215, %r6967, %r2209, %p17;
	// begin inline asm
	{mul.f16x2 %r7184,%r2215,%r7314;
}
	// end inline asm
	selp.b32 	%r2218, %r6971, %r2209, %p17;
	// begin inline asm
	{mul.f16x2 %r7182,%r2218,%r7312;
}
	// end inline asm
	mov.u32 	%r2223, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2221,%r1988,%r2223,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2227, %r6967, %r2221, %p17;
	// begin inline asm
	{mul.f16x2 %r7183,%r2227,%r7313;
}
	// end inline asm
	selp.b32 	%r2230, %r6971, %r2221, %p17;
	// begin inline asm
	{mul.f16x2 %r7181,%r2230,%r7311;
}
	// end inline asm
	mov.u32 	%r2235, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2233,%r1988,%r2235,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2239, %r6967, %r2233, %p17;
	// begin inline asm
	{mul.f16x2 %r7180,%r2239,%r7310;
}
	// end inline asm
	selp.b32 	%r2242, %r6971, %r2233, %p17;
	// begin inline asm
	{mul.f16x2 %r7177,%r2242,%r7309;
}
	// end inline asm
	mov.u32 	%r2247, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2245,%r1988,%r2247,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2251, %r6967, %r2245, %p17;
	// begin inline asm
	{mul.f16x2 %r7179,%r2251,%r7103;
}
	// end inline asm
	selp.b32 	%r2254, %r6971, %r2245, %p17;
	// begin inline asm
	{mul.f16x2 %r7176,%r2254,%r7102;
}
	// end inline asm
	mov.u32 	%r2259, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2257,%r1988,%r2259,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2263, %r6967, %r2257, %p17;
	// begin inline asm
	{mul.f16x2 %r7178,%r2263,%r7101;
}
	// end inline asm
	selp.b32 	%r2266, %r6971, %r2257, %p17;
	// begin inline asm
	{mul.f16x2 %r7175,%r2266,%r7100;
}
	// end inline asm
	mov.u32 	%r2271, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2269,%r1988,%r2271,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2275, %r6967, %r2269, %p17;
	// begin inline asm
	{mul.f16x2 %r7174,%r2275,%r7302;
}
	// end inline asm
	selp.b32 	%r2278, %r6971, %r2269, %p17;
	// begin inline asm
	{mul.f16x2 %r7171,%r2278,%r7300;
}
	// end inline asm
	mov.u32 	%r2283, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2281,%r1988,%r2283,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2287, %r6967, %r2281, %p17;
	// begin inline asm
	{mul.f16x2 %r7173,%r2287,%r7301;
}
	// end inline asm
	selp.b32 	%r2290, %r6971, %r2281, %p17;
	// begin inline asm
	{mul.f16x2 %r7170,%r2290,%r7299;
}
	// end inline asm
	mov.u32 	%r2295, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2293,%r1988,%r2295,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2299, %r6967, %r2293, %p17;
	// begin inline asm
	{mul.f16x2 %r7172,%r2299,%r7099;
}
	// end inline asm
	selp.b32 	%r2302, %r6971, %r2293, %p17;
	// begin inline asm
	{mul.f16x2 %r7169,%r2302,%r7098;
}
	// end inline asm
	mov.u32 	%r2307, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2305,%r1988,%r2307,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2311, %r6967, %r2305, %p17;
	// begin inline asm
	{mul.f16x2 %r7168,%r2311,%r7298;
}
	// end inline asm
	selp.b32 	%r2314, %r6971, %r2305, %p17;
	// begin inline asm
	{mul.f16x2 %r7167,%r2314,%r7297;
}
	// end inline asm
	mov.u32 	%r2319, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2317,%r1988,%r2319,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2323, %r6967, %r2317, %p17;
	// begin inline asm
	{mul.f16x2 %r7166,%r2323,%r7308;
}
	// end inline asm
	selp.b32 	%r2326, %r6971, %r2317, %p17;
	// begin inline asm
	{mul.f16x2 %r7164,%r2326,%r7306;
}
	// end inline asm
	mov.u32 	%r2331, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2329,%r1988,%r2331,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2335, %r6967, %r2329, %p17;
	// begin inline asm
	{mul.f16x2 %r7165,%r2335,%r7307;
}
	// end inline asm
	selp.b32 	%r2338, %r6971, %r2329, %p17;
	// begin inline asm
	{mul.f16x2 %r7163,%r2338,%r7305;
}
	// end inline asm
	mov.u32 	%r2343, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2341,%r1988,%r2343,%r2068,%r2345;
}
	// end inline asm
	selp.b32 	%r2347, %r6967, %r2341, %p17;
	// begin inline asm
	{mul.f16x2 %r7162,%r2347,%r7296;
}
	// end inline asm
	selp.b32 	%r2350, %r6971, %r2341, %p17;
	// begin inline asm
	{mul.f16x2 %r7161,%r2350,%r7295;
}
	// end inline asm
	sub.s32 	%r629, %r2372, %r2375;
	sub.s32 	%r630, %r2382, %r2385;
	mad.lo.s32 	%r631, %r2384, %r2388, %r2383;
	ld.param.u64 	%rd258, [%rd1+144];
	cvta.to.global.u64 	%rd259, %rd258;
	shl.b32 	%r2437, %r631, 1;
	mul.wide.s32 	%rd260, %r2437, 4;
	add.s64 	%rd30, %rd259, %rd260;
	@%p109 bra 	$L__BB0_324;
	bra.uni 	$L__BB0_317;

$L__BB0_324:
	add.s32 	%r2640, %r1494, 1;
	setp.lt.s32 	%p206, %r631, %r2640;
	setp.eq.s32 	%p207, %r426, %r40;
	setp.gt.s32 	%p208, %r631, -1;
	and.pred  	%p209, %p207, %p208;
	and.pred  	%p210, %p206, %p209;
	@%p210 bra 	$L__BB0_326;
	bra.uni 	$L__BB0_325;

$L__BB0_326:
	ld.global.f32 	%f341, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f341;
  mov.b32 %r7127, {low,low};}

	// end inline asm
	ld.global.f32 	%f342, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f342;
  mov.b32 %r7128, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_327;

$L__BB0_317:
	add.s32 	%r2440, %r1494, 1;
	setp.lt.s32 	%p201, %r631, %r2440;
	setp.gt.s32 	%p202, %r631, -1;
	and.pred  	%p203, %p202, %p201;
	@%p203 bra 	$L__BB0_319;
	bra.uni 	$L__BB0_318;

$L__BB0_319:
	ld.global.f32 	%f335, [%rd30];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f335;
  mov.b32 %r7125, {low,low};}

	// end inline asm
	ld.global.f32 	%f336, [%rd30+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f336;
  mov.b32 %r7126, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_320;

$L__BB0_325:
	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7127, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7128, {low,high};}

	// end inline asm

$L__BB0_327:
	mov.u32 	%r2648, 0;
	mov.u32 	%r2659, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2646,%r6965,%r2648,%r2068,%r2659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2651,%r7127,%r2646;
}
	// end inline asm
	mov.u32 	%r2657, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2655,%r6965,%r2657,%r2068,%r2659;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2660,%r7128,%r2655;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7130,%r2651,%r2660;
}
	// end inline asm
	setp.eq.s32 	%p211, %r427, 0;
	mov.u32 	%r7129, %r7130;
	@%p211 bra 	$L__BB0_329;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7129, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7208,%r7208,%r7129;
}
	// end inline asm
	setp.eq.s32 	%p212, %r427, 1;
	@%p212 bra 	$L__BB0_331;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7130, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7206,%r7206,%r7130;
}
	// end inline asm
	mov.u32 	%r2681, 2;
	mov.u32 	%r2692, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2679,%r6965,%r2681,%r2068,%r2692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2684,%r7127,%r2679;
}
	// end inline asm
	mov.u32 	%r2690, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2688,%r6965,%r2690,%r2068,%r2692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2693,%r7128,%r2688;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7132,%r2684,%r2693;
}
	// end inline asm
	mov.u32 	%r7131, %r7132;
	@%p211 bra 	$L__BB0_333;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7131, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7207,%r7207,%r7131;
}
	// end inline asm
	@%p212 bra 	$L__BB0_335;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7132, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7205,%r7205,%r7132;
}
	// end inline asm
	mov.u32 	%r2714, 4;
	mov.u32 	%r2725, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2712,%r6965,%r2714,%r2068,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2717,%r7127,%r2712;
}
	// end inline asm
	mov.u32 	%r2723, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2721,%r6965,%r2723,%r2068,%r2725;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2726,%r7128,%r2721;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7134,%r2717,%r2726;
}
	// end inline asm
	mov.u32 	%r7133, %r7134;
	@%p211 bra 	$L__BB0_337;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7133, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7204,%r7204,%r7133;
}
	// end inline asm
	@%p212 bra 	$L__BB0_339;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7134, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7203,%r7203,%r7134;
}
	// end inline asm
	mov.u32 	%r2747, 6;
	mov.u32 	%r2758, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2745,%r6965,%r2747,%r2068,%r2758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2750,%r7127,%r2745;
}
	// end inline asm
	mov.u32 	%r2756, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2754,%r6965,%r2756,%r2068,%r2758;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2759,%r7128,%r2754;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7136,%r2750,%r2759;
}
	// end inline asm
	mov.u32 	%r7135, %r7136;
	@%p211 bra 	$L__BB0_341;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7135, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7202,%r7202,%r7135;
}
	// end inline asm
	@%p212 bra 	$L__BB0_343;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7136, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7200,%r7200,%r7136;
}
	// end inline asm
	mov.u32 	%r2780, 8;
	mov.u32 	%r2791, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2778,%r6965,%r2780,%r2068,%r2791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2783,%r7127,%r2778;
}
	// end inline asm
	mov.u32 	%r2789, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2787,%r6965,%r2789,%r2068,%r2791;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2792,%r7128,%r2787;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7138,%r2783,%r2792;
}
	// end inline asm
	mov.u32 	%r7137, %r7138;
	@%p211 bra 	$L__BB0_345;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7137, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7201,%r7201,%r7137;
}
	// end inline asm
	@%p212 bra 	$L__BB0_347;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7138, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7199,%r7199,%r7138;
}
	// end inline asm
	mov.u32 	%r2813, 10;
	mov.u32 	%r2824, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2811,%r6965,%r2813,%r2068,%r2824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2816,%r7127,%r2811;
}
	// end inline asm
	mov.u32 	%r2822, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2820,%r6965,%r2822,%r2068,%r2824;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2825,%r7128,%r2820;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7140,%r2816,%r2825;
}
	// end inline asm
	mov.u32 	%r7139, %r7140;
	@%p211 bra 	$L__BB0_349;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7139, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7198,%r7198,%r7139;
}
	// end inline asm
	@%p212 bra 	$L__BB0_351;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7140, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7195,%r7195,%r7140;
}
	// end inline asm
	mov.u32 	%r2846, 12;
	mov.u32 	%r2857, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2844,%r6965,%r2846,%r2068,%r2857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2849,%r7127,%r2844;
}
	// end inline asm
	mov.u32 	%r2855, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2853,%r6965,%r2855,%r2068,%r2857;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2858,%r7128,%r2853;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7142,%r2849,%r2858;
}
	// end inline asm
	mov.u32 	%r7141, %r7142;
	@%p211 bra 	$L__BB0_353;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7141, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7197,%r7197,%r7141;
}
	// end inline asm
	@%p212 bra 	$L__BB0_355;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7142, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7194,%r7194,%r7142;
}
	// end inline asm
	mov.u32 	%r2879, 14;
	mov.u32 	%r2890, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2877,%r6965,%r2879,%r2068,%r2890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2882,%r7127,%r2877;
}
	// end inline asm
	mov.u32 	%r2888, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2886,%r6965,%r2888,%r2068,%r2890;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2891,%r7128,%r2886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7144,%r2882,%r2891;
}
	// end inline asm
	mov.u32 	%r7143, %r7144;
	@%p211 bra 	$L__BB0_357;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7143, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7192,%r7192,%r7143;
}
	// end inline asm
	@%p212 bra 	$L__BB0_359;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7144, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r7144;
}
	// end inline asm
	mov.u32 	%r2912, 16;
	mov.u32 	%r2923, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2910,%r6965,%r2912,%r2068,%r2923;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2915,%r7127,%r2910;
}
	// end inline asm
	mov.u32 	%r2921, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2919,%r6965,%r2921,%r2068,%r2923;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2924,%r7128,%r2919;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7146,%r2915,%r2924;
}
	// end inline asm
	mov.u32 	%r7145, %r7146;
	@%p211 bra 	$L__BB0_361;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7145, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7191,%r7191,%r7145;
}
	// end inline asm
	@%p212 bra 	$L__BB0_363;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7146, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7188,%r7188,%r7146;
}
	// end inline asm
	mov.u32 	%r2945, 18;
	mov.u32 	%r2956, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2943,%r6965,%r2945,%r2068,%r2956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2948,%r7127,%r2943;
}
	// end inline asm
	mov.u32 	%r2954, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2952,%r6965,%r2954,%r2068,%r2956;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2957,%r7128,%r2952;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7148,%r2948,%r2957;
}
	// end inline asm
	mov.u32 	%r7147, %r7148;
	@%p211 bra 	$L__BB0_365;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7147, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7186,%r7186,%r7147;
}
	// end inline asm
	@%p212 bra 	$L__BB0_367;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7148, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7185,%r7185,%r7148;
}
	// end inline asm
	mov.u32 	%r2978, 20;
	mov.u32 	%r2989, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2976,%r6965,%r2978,%r2068,%r2989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2981,%r7127,%r2976;
}
	// end inline asm
	mov.u32 	%r2987, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2985,%r6965,%r2987,%r2068,%r2989;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2990,%r7128,%r2985;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7150,%r2981,%r2990;
}
	// end inline asm
	mov.u32 	%r7149, %r7150;
	@%p211 bra 	$L__BB0_369;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7149, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7184,%r7184,%r7149;
}
	// end inline asm
	@%p212 bra 	$L__BB0_371;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7150, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7182,%r7182,%r7150;
}
	// end inline asm
	mov.u32 	%r3011, 22;
	mov.u32 	%r3022, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3009,%r6965,%r3011,%r2068,%r3022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3014,%r7127,%r3009;
}
	// end inline asm
	mov.u32 	%r3020, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r3018,%r6965,%r3020,%r2068,%r3022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3023,%r7128,%r3018;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7152,%r3014,%r3023;
}
	// end inline asm
	mov.u32 	%r7151, %r7152;
	@%p211 bra 	$L__BB0_373;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7151, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7180,%r7180,%r7151;
}
	// end inline asm
	@%p212 bra 	$L__BB0_375;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7152, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7177,%r7177,%r7152;
}
	// end inline asm
	mov.u32 	%r3044, 24;
	mov.u32 	%r3055, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3042,%r6965,%r3044,%r2068,%r3055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3047,%r7127,%r3042;
}
	// end inline asm
	mov.u32 	%r3053, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r3051,%r6965,%r3053,%r2068,%r3055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3056,%r7128,%r3051;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7154,%r3047,%r3056;
}
	// end inline asm
	mov.u32 	%r7153, %r7154;
	@%p211 bra 	$L__BB0_377;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7153, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7179,%r7179,%r7153;
}
	// end inline asm
	@%p212 bra 	$L__BB0_379;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7154, {low,high};}

	// end inline asm

$L__BB0_379:
	// begin inline asm
	{add.f16x2 %r7176,%r7176,%r7154;
}
	// end inline asm
	mov.u32 	%r3077, 26;
	mov.u32 	%r3088, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3075,%r6965,%r3077,%r2068,%r3088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3080,%r7127,%r3075;
}
	// end inline asm
	mov.u32 	%r3086, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r3084,%r6965,%r3086,%r2068,%r3088;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3089,%r7128,%r3084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7156,%r3080,%r3089;
}
	// end inline asm
	mov.u32 	%r7155, %r7156;
	@%p211 bra 	$L__BB0_381;

	mov.f32 	%f396, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f396;
  cvt.rn.f16.f32 high, %f396;
  mov.b32 %r7155, {low,high};}

	// end inline asm

$L__BB0_381:
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r7155;
}
	// end inline asm
	@%p212 bra 	$L__BB0_383;

	mov.f32 	%f398, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f398;
  cvt.rn.f16.f32 high, %f398;
  mov.b32 %r7156, {low,high};}

	// end inline asm

$L__BB0_383:
	// begin inline asm
	{add.f16x2 %r7171,%r7171,%r7156;
}
	// end inline asm
	mov.u32 	%r3110, 28;
	mov.u32 	%r3121, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3108,%r6965,%r3110,%r2068,%r3121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3113,%r7127,%r3108;
}
	// end inline asm
	mov.u32 	%r3119, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3117,%r6965,%r3119,%r2068,%r3121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3122,%r7128,%r3117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7158,%r3113,%r3122;
}
	// end inline asm
	mov.u32 	%r7157, %r7158;
	@%p211 bra 	$L__BB0_385;

	mov.f32 	%f400, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f400;
  cvt.rn.f16.f32 high, %f400;
  mov.b32 %r7157, {low,high};}

	// end inline asm

$L__BB0_385:
	// begin inline asm
	{add.f16x2 %r7173,%r7173,%r7157;
}
	// end inline asm
	@%p212 bra 	$L__BB0_387;

	mov.f32 	%f402, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f402;
  cvt.rn.f16.f32 high, %f402;
  mov.b32 %r7158, {low,high};}

	// end inline asm

$L__BB0_387:
	// begin inline asm
	{add.f16x2 %r7170,%r7170,%r7158;
}
	// end inline asm
	mov.u32 	%r3152, 31;
	mov.u32 	%r3143, 30;
	mov.u32 	%r3154, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3141,%r6965,%r3143,%r2068,%r3154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3146,%r7127,%r3141;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3150,%r6965,%r3152,%r2068,%r3154;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3155,%r7128,%r3150;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7160,%r3146,%r3155;
}
	// end inline asm
	mov.u32 	%r7159, %r7160;
	@%p211 bra 	$L__BB0_389;

	mov.f32 	%f404, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f404;
  cvt.rn.f16.f32 high, %f404;
  mov.b32 %r7159, {low,high};}

	// end inline asm

$L__BB0_389:
	// begin inline asm
	{add.f16x2 %r7166,%r7166,%r7159;
}
	// end inline asm
	@%p212 bra 	$L__BB0_391;

	mov.f32 	%f406, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f406;
  cvt.rn.f16.f32 high, %f406;
  mov.b32 %r7160, {low,high};}

	// end inline asm

$L__BB0_391:
	// begin inline asm
	{add.f16x2 %r7164,%r7164,%r7160;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_318:
	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7125, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7126, {low,high};}

	// end inline asm

$L__BB0_320:
	setp.eq.s32 	%p204, %r630, %r1482;
	@%p204 bra 	$L__BB0_323;
	bra.uni 	$L__BB0_321;

$L__BB0_323:
	mov.u32 	%r2634, 0;
	// begin inline asm
	{mul.f16x2 %r2542,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7208,%r7208,%r2542;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2548,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7196,%r7196,%r2548;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2554,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7198,%r7198,%r2554;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2560,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7178,%r7178,%r2560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2566,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7180,%r7180,%r2566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2572,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7165,%r7165,%r2572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2578,%r7126,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7202,%r7202,%r2578;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2584,%r7126,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7183,%r7183,%r2584;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2590,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7206,%r7206,%r2590;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2596,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7193,%r7193,%r2596;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2602,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7195,%r7195,%r2602;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2608,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7175,%r7175,%r2608;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2614,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7177,%r7177,%r2614;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2620,%r7125,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7163,%r7163,%r2620;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2626,%r7126,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7200,%r7200,%r2626;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2632,%r7126,%r2634;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7181,%r7181,%r2632;
}
	// end inline asm
	bra.uni 	$L__BB0_392;

$L__BB0_321:
	add.s32 	%r2445, %r1482, -2;
	setp.ne.s32 	%p205, %r630, %r2445;
	@%p205 bra 	$L__BB0_392;

	mov.u32 	%r2538, 0;
	// begin inline asm
	{mul.f16x2 %r2446,%r7125,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7186,%r7186,%r2446;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2452,%r7125,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7168,%r7168,%r2452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2458,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7204,%r7204,%r2458;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2464,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7190,%r7190,%r2464;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2470,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7192,%r7192,%r2470;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2476,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7172,%r7172,%r2476;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2482,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7174,%r7174,%r2482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2488,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7162,%r7162,%r2488;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2494,%r7125,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7185,%r7185,%r2494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2500,%r7125,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7167,%r7167,%r2500;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2506,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7203,%r7203,%r2506;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2512,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7187,%r7187,%r2512;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2518,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7189,%r7189,%r2518;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2524,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7169,%r7169,%r2524;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2530,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7171,%r7171,%r2530;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2536,%r7126,%r2538;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7161,%r7161,%r2536;
}
	// end inline asm

$L__BB0_392:
	setp.lt.s32 	%p243, %r35, 1;
	mov.u32 	%r7020, %r1989;
	mov.u32 	%r7021, %r1989;
	mov.u32 	%r7211, %r1989;
	mov.u32 	%r7212, %r1989;
	mov.u32 	%r7213, %r1989;
	mov.u32 	%r7047, %r1989;
	mov.u32 	%r7215, %r1989;
	mov.u32 	%r7055, %r1989;
	mov.u32 	%r7217, %r1989;
	mov.u32 	%r7218, %r1989;
	@%p243 bra 	$L__BB0_394;

	add.s32 	%r6880, %r65, %r65;
	mul.lo.s32 	%r3174, %r1473, 320;
	add.s32 	%r3176, %r35, -1;
	mul.lo.s32 	%r3178, %r36, 320;
	mad.lo.s32 	%r3179, %r3174, %r3176, %r3178;
	add.s32 	%r3182, %r6880, -64;
	mad.lo.s32 	%r3187, %r3182, %r1977, %r1974;
	add.s32 	%r3188, %r3179, %r3187;
	shl.b32 	%r3189, %r3188, 2;
	mov.u32 	%r3190, _ZN6kernel5shmemE;
	add.s32 	%r3191, %r3190, %r3189;
	shl.b32 	%r3192, %r40, 4;
	add.s32 	%r3193, %r3191, %r3192;
	ld.shared.v4.u32 	{%r7055, %r7047, %r7021, %r7020}, [%r3193];
	shl.b32 	%r3198, %r40, 3;
	add.s32 	%r3199, %r3191, %r3198;
	ld.shared.v2.u32 	{%r7215, %r7213}, [%r3199+512];
	ld.shared.v4.u32 	{%r7218, %r7217, %r7212, %r7211}, [%r3193+768];

$L__BB0_394:
	setp.lt.s32 	%p244, %r36, 1;
	mov.u32 	%r7219, %r1989;
	mov.u32 	%r7220, %r1989;
	mov.u32 	%r7221, %r1989;
	mov.u32 	%r7222, %r1989;
	mov.u32 	%r7223, %r1989;
	mov.u32 	%r7224, %r1989;
	mov.u32 	%r7225, %r1989;
	mov.u32 	%r7226, %r1989;
	mov.u32 	%r7227, %r1989;
	mov.u32 	%r7228, %r1989;
	mov.u32 	%r7229, %r1989;
	mov.u32 	%r7230, %r1989;
	@%p244 bra 	$L__BB0_397;

	not.b32 	%r6879, %r35;
	add.s32 	%r6878, %r1472, %r6879;
	mad.lo.s32 	%r3213, %r6878, 384, %r1980;
	add.s32 	%r3215, %r36, -1;
	mad.lo.s32 	%r3218, %r1975, %r3215, %r3213;
	add.s32 	%r3224, %r3218, %r1978;
	shl.b32 	%r3225, %r3224, 2;
	mov.u32 	%r3226, _ZN6kernel5shmemE;
	add.s32 	%r3227, %r3226, %r3225;
	shl.b32 	%r3228, %r40, 4;
	add.s32 	%r3229, %r3227, %r3228;
	ld.shared.v4.u32 	{%r7230, %r7229, %r7227, %r7225}, [%r3229];
	shl.b32 	%r3234, %r40, 3;
	add.s32 	%r3235, %r3227, %r3234;
	ld.shared.v2.u32 	{%r7228, %r7226}, [%r3235+512];
	ld.shared.v4.u32 	{%r7224, %r7223, %r7221, %r7219}, [%r3229+768];
	mov.u32 	%r7220, %r1989;
	mov.u32 	%r7222, %r1989;
	@%p243 bra 	$L__BB0_397;

	add.s32 	%r6866, %r3235, 512;
	ld.shared.v2.u32 	{%r7222, %r7220}, [%r6866+768];

$L__BB0_397:
	setp.eq.s32 	%p246, %r35, 0;
	@%p246 bra 	$L__BB0_402;

	setp.eq.s32 	%p247, %r36, %r1977;
	@%p247 bra 	$L__BB0_400;

	sub.s32 	%r3248, %r1472, %r35;
	mul.lo.s32 	%r3251, %r65, %r36;
	mad.lo.s32 	%r3252, %r3248, 384, %r3251;
	mad.lo.s32 	%r3255, %r1975, %r1977, %r3252;
	mad.lo.s32 	%r3258, %r1973, %r1972, %r3255;
	shl.b32 	%r3259, %r3258, 2;
	mov.u32 	%r3260, _ZN6kernel5shmemE;
	add.s32 	%r3261, %r3260, %r3259;
	shl.b32 	%r3262, %r40, 4;
	add.s32 	%r3263, %r3261, %r3262;
	ld.shared.v4.u32 	{%r7244, %r7243, %r7246, %r7245}, [%r3263];

$L__BB0_400:
	shl.b32 	%r3269, %r36, 8;
	shl.b32 	%r3273, %r1473, 8;
	or.b32  	%r3274, %r3273, 128;
	add.s32 	%r3276, %r35, -1;
	mad.lo.s32 	%r3277, %r3274, %r3276, %r1980;
	add.s32 	%r3278, %r3277, %r3269;
	shl.b32 	%r3279, %r3278, 2;
	mov.u32 	%r3280, _ZN6kernel5shmemE;
	add.s32 	%r3281, %r3280, %r3279;
	setp.ne.s32 	%p248, %r36, %r1977;
	shl.b32 	%r3283, %r40, 4;
	add.s32 	%r889, %r3281, %r3283;
	ld.shared.v4.u32 	{%r7237, %r7235, %r7238, %r7236}, [%r889];
	ld.shared.v4.u32 	{%r7242, %r7241, %r7240, %r7239}, [%r889+512];
	@%p248 bra 	$L__BB0_402;

	ld.shared.v4.u32 	{%r7244, %r7243, %r7246, %r7245}, [%r889+1024];

$L__BB0_402:
	setp.eq.s32 	%p249, %r36, 0;
	@%p249 bra 	$L__BB0_405;

	not.b32 	%r6877, %r35;
	add.s32 	%r6876, %r1472, %r6877;
	mul.lo.s32 	%r3299, %r65, %r36;
	sub.s32 	%r3300, %r3299, %r65;
	mad.lo.s32 	%r3304, %r6876, 384, %r3300;
	mad.lo.s32 	%r3307, %r1975, %r1977, %r3304;
	mad.lo.s32 	%r3310, %r1973, %r1972, %r3307;
	shl.b32 	%r3311, %r3310, 2;
	mov.u32 	%r3312, _ZN6kernel5shmemE;
	add.s32 	%r3313, %r3312, %r3311;
	shl.b32 	%r3314, %r40, 4;
	add.s32 	%r914, %r3313, %r3314;
	ld.shared.v4.u32 	{%r7260, %r7259, %r7262, %r7261}, [%r914];
	ld.shared.v4.u32 	{%r7258, %r7256, %r7254, %r7253}, [%r914+512];
	ld.shared.v4.u32 	{%r7257, %r7255, %r7252, %r7250}, [%r914+1024];
	@%p246 bra 	$L__BB0_405;

	ld.shared.v4.u32 	{%r7248, %r7247, %r7251, %r7249}, [%r914+1536];

$L__BB0_405:
	mov.u32 	%r3336, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3332,%r7095,%r428,%r2068,%r3336;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3332;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7095;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3339, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3340,%r7096,%r3339;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3343,%r6966,%r3340;
}
	// end inline asm
	@%p17 bra 	$L__BB0_407;
	bra.uni 	$L__BB0_406;

$L__BB0_407:
	// begin inline asm
	{neg.f16x2 %r7263,%r7208;
}
	// end inline asm
	bra.uni 	$L__BB0_408;

$L__BB0_406:
	// begin inline asm
	{mul.f16x2 %r7263,%r6967,%r3340;
}
	// end inline asm

$L__BB0_408:
	mov.u32 	%r3356, 31;
	mov.u32 	%r3379, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3354,%r7263,%r3356,%r2068,%r3379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3359,%r3343,%r3354;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3362,%r7094,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3365,%r3362,%r3359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3368,%r7097,%r3365;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3371,%r7208,%r3368;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3375,%r7090,%r428,%r2068,%r3379;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3375;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7090;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3382, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3383,%r7091,%r3382;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3386,%r6966,%r3383;
}
	// end inline asm
	mov.u32 	%r7264, %r7207;
	@%p17 bra 	$L__BB0_410;

	// begin inline asm
	{mul.f16x2 %r7264,%r6967,%r3383;
}
	// end inline asm

$L__BB0_410:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3397,%r7264,%r3356,%r2068,%r3379;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3402,%r3386,%r3397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3405,%r7094,%r7089;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3408,%r3402,%r3405;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3411,%r7092,%r3408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3414,%r7207,%r3411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3417,%r7095,%r7096;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3420,%r6970,%r3417;
}
	// end inline asm
	@%p17 bra 	$L__BB0_412;
	bra.uni 	$L__BB0_411;

$L__BB0_412:
	// begin inline asm
	{neg.f16x2 %r7265,%r7206;
}
	// end inline asm
	bra.uni 	$L__BB0_413;

$L__BB0_411:
	// begin inline asm
	{mul.f16x2 %r7265,%r6971,%r3417;
}
	// end inline asm

$L__BB0_413:
	mov.u32 	%r3433, 31;
	mov.u32 	%r3435, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3431,%r7265,%r3433,%r2068,%r3435;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3436,%r3420,%r3431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3439,%r7087,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3442,%r3439,%r3436;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3445,%r7088,%r3442;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3448,%r7206,%r3445;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3451,%r7090,%r7091;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3454,%r6970,%r3451;
}
	// end inline asm
	mov.u32 	%r7266, %r7205;
	@%p17 bra 	$L__BB0_415;

	// begin inline asm
	{mul.f16x2 %r7266,%r6971,%r3451;
}
	// end inline asm

$L__BB0_415:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3463,%r7266,%r3433,%r2068,%r3435;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3468,%r3454,%r3463;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3471,%r7087,%r7084;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3474,%r3468,%r3471;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3477,%r7085,%r3474;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3480,%r7205,%r3477;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3484,%r7081,%r428,%r2068,%r3435;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3484;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7081;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3491, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3492,%r7082,%r3491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3495,%r6966,%r3492;
}
	// end inline asm
	@%p17 bra 	$L__BB0_417;
	bra.uni 	$L__BB0_416;

$L__BB0_417:
	// begin inline asm
	{neg.f16x2 %r7267,%r7204;
}
	// end inline asm
	bra.uni 	$L__BB0_418;

$L__BB0_416:
	// begin inline asm
	{mul.f16x2 %r7267,%r6967,%r3492;
}
	// end inline asm

$L__BB0_418:
	mov.u32 	%r3510, 31;
	mov.u32 	%r3512, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3508,%r7267,%r3510,%r2068,%r3512;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3513,%r3495,%r3508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3516,%r7080,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3519,%r3516,%r3513;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3522,%r7083,%r3519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3525,%r7204,%r3522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3528,%r7081,%r7082;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3531,%r6970,%r3528;
}
	// end inline asm
	@%p17 bra 	$L__BB0_420;
	bra.uni 	$L__BB0_419;

$L__BB0_420:
	// begin inline asm
	{neg.f16x2 %r7268,%r7203;
}
	// end inline asm
	bra.uni 	$L__BB0_421;

$L__BB0_419:
	// begin inline asm
	{mul.f16x2 %r7268,%r6971,%r3528;
}
	// end inline asm

$L__BB0_421:
	mov.u32 	%r3544, 31;
	mov.u32 	%r3567, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3542,%r7268,%r3544,%r2068,%r3567;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3547,%r3531,%r3542;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3550,%r7078,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3553,%r3550,%r3547;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3556,%r7079,%r3553;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3559,%r7203,%r3556;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3563,%r7076,%r428,%r2068,%r3567;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3563;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7076;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3570, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3571,%r7077,%r3570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3574,%r6966,%r3571;
}
	// end inline asm
	@%p17 bra 	$L__BB0_423;
	bra.uni 	$L__BB0_422;

$L__BB0_423:
	// begin inline asm
	{neg.f16x2 %r7269,%r7202;
}
	// end inline asm
	bra.uni 	$L__BB0_424;

$L__BB0_422:
	// begin inline asm
	{mul.f16x2 %r7269,%r6967,%r3571;
}
	// end inline asm

$L__BB0_424:
	mov.u32 	%r3589, 31;
	mov.u32 	%r3612, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3587,%r7269,%r3589,%r2068,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3592,%r3574,%r3587;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3595,%r7075,%r7262;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3598,%r3595,%r3592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3601,%r7230,%r3598;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3604,%r7202,%r3601;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3608,%r7071,%r428,%r2068,%r3612;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3608;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7071;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3615, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3616,%r7072,%r3615;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3619,%r6966,%r3616;
}
	// end inline asm
	mov.u32 	%r7270, %r7201;
	@%p17 bra 	$L__BB0_426;

	// begin inline asm
	{mul.f16x2 %r7270,%r6967,%r3616;
}
	// end inline asm

$L__BB0_426:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3630,%r7270,%r3589,%r2068,%r3612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3635,%r3619,%r3630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3638,%r7075,%r7093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3641,%r3635,%r3638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3644,%r7073,%r3641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3647,%r7201,%r3644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3650,%r7076,%r7077;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3653,%r6970,%r3650;
}
	// end inline asm
	@%p17 bra 	$L__BB0_428;
	bra.uni 	$L__BB0_427;

$L__BB0_428:
	// begin inline asm
	{neg.f16x2 %r7271,%r7200;
}
	// end inline asm
	bra.uni 	$L__BB0_429;

$L__BB0_427:
	// begin inline asm
	{mul.f16x2 %r7271,%r6971,%r3650;
}
	// end inline asm

$L__BB0_429:
	mov.u32 	%r3666, 31;
	mov.u32 	%r3668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3664,%r7271,%r3666,%r2068,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3669,%r3653,%r3664;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3672,%r7070,%r7261;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3675,%r3672,%r3669;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3678,%r7229,%r3675;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3681,%r7200,%r3678;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3684,%r7071,%r7072;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3687,%r6970,%r3684;
}
	// end inline asm
	mov.u32 	%r7272, %r7199;
	@%p17 bra 	$L__BB0_431;

	// begin inline asm
	{mul.f16x2 %r7272,%r6971,%r3684;
}
	// end inline asm

$L__BB0_431:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3696,%r7272,%r3666,%r2068,%r3668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3701,%r3687,%r3696;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3704,%r7070,%r7086;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3707,%r3701,%r3704;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3710,%r7068,%r3707;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3713,%r7199,%r3710;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3717,%r7065,%r428,%r2068,%r3668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3717;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7065;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3724, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3725,%r7066,%r3724;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3728,%r6966,%r3725;
}
	// end inline asm
	@%p17 bra 	$L__BB0_433;
	bra.uni 	$L__BB0_432;

$L__BB0_433:
	// begin inline asm
	{neg.f16x2 %r7273,%r7198;
}
	// end inline asm
	bra.uni 	$L__BB0_434;

$L__BB0_432:
	// begin inline asm
	{mul.f16x2 %r7273,%r6967,%r3725;
}
	// end inline asm

$L__BB0_434:
	mov.u32 	%r3743, 31;
	mov.u32 	%r3766, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3741,%r7273,%r3743,%r2068,%r3766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3746,%r3728,%r3741;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3749,%r7064,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3752,%r3749,%r3746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3755,%r523,%r3752;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7123,%r7198,%r3755;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3762,%r7061,%r428,%r2068,%r3766;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3762;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7061;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3769, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3770,%r7062,%r3769;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3773,%r6966,%r3770;
}
	// end inline asm
	mov.u32 	%r7274, %r7197;
	@%p17 bra 	$L__BB0_436;

	// begin inline asm
	{mul.f16x2 %r7274,%r6967,%r3770;
}
	// end inline asm

$L__BB0_436:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3784,%r7274,%r3743,%r2068,%r3766;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3789,%r3773,%r3784;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3792,%r7064,%r7094;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3795,%r3789,%r3792;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3798,%r519,%r3795;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7121,%r7197,%r3798;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3804,%r7066,%r7096;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3807,%r7062,%r7072;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3810,%r3804,%r3807;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3813,%r7060,%r3810;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3816,%r7196,%r3813;
}
	// end inline asm
	selp.b32 	%r1014, %r7196, %r3816, %p17;
	// begin inline asm
	{sub.f16x2 %r3819,%r7065,%r7066;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3822,%r6970,%r3819;
}
	// end inline asm
	@%p17 bra 	$L__BB0_438;
	bra.uni 	$L__BB0_437;

$L__BB0_438:
	// begin inline asm
	{neg.f16x2 %r7275,%r7195;
}
	// end inline asm
	bra.uni 	$L__BB0_439;

$L__BB0_437:
	// begin inline asm
	{mul.f16x2 %r7275,%r6971,%r3819;
}
	// end inline asm

$L__BB0_439:
	mov.u32 	%r3835, 31;
	mov.u32 	%r3837, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3833,%r7275,%r3835,%r2068,%r3837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3838,%r3822,%r3833;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3841,%r7058,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3844,%r3841,%r3838;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3847,%r515,%r3844;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7122,%r7195,%r3847;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3853,%r7061,%r7062;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3856,%r6970,%r3853;
}
	// end inline asm
	mov.u32 	%r7276, %r7194;
	@%p17 bra 	$L__BB0_441;

	// begin inline asm
	{mul.f16x2 %r7276,%r6971,%r3853;
}
	// end inline asm

$L__BB0_441:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3865,%r7276,%r3835,%r2068,%r3837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3870,%r3856,%r3865;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3873,%r7058,%r7087;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3876,%r3870,%r3873;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3879,%r513,%r3876;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7120,%r7194,%r3879;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3885,%r7065,%r7095;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3888,%r7061,%r7071;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3891,%r3885,%r3888;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3894,%r7056,%r3891;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3897,%r7193,%r3894;
}
	// end inline asm
	selp.b32 	%r1026, %r7193, %r3897, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r3901,%r7053,%r428,%r2068,%r3837;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3901;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7053;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3908, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3909,%r7054,%r3908;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3912,%r6966,%r3909;
}
	// end inline asm
	@%p17 bra 	$L__BB0_443;
	bra.uni 	$L__BB0_442;

$L__BB0_443:
	// begin inline asm
	{neg.f16x2 %r7277,%r7192;
}
	// end inline asm
	bra.uni 	$L__BB0_444;

$L__BB0_442:
	// begin inline asm
	{mul.f16x2 %r7277,%r6967,%r3909;
}
	// end inline asm

$L__BB0_444:
	mov.u32 	%r3927, 31;
	mov.u32 	%r3950, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3925,%r7277,%r3927,%r2068,%r3950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3930,%r3912,%r3925;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3933,%r7052,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3936,%r3933,%r3930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3939,%r511,%r3936;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7119,%r7192,%r3939;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3946,%r7049,%r428,%r2068,%r3950;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3946;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7049;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3953, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3954,%r7050,%r3953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3957,%r6966,%r3954;
}
	// end inline asm
	mov.u32 	%r7278, %r7191;
	@%p17 bra 	$L__BB0_446;

	// begin inline asm
	{mul.f16x2 %r7278,%r6967,%r3954;
}
	// end inline asm

$L__BB0_446:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3968,%r7278,%r3927,%r2068,%r3950;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3973,%r3957,%r3968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3976,%r7052,%r7080;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3979,%r3973,%r3976;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3982,%r7051,%r3979;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3985,%r7191,%r3982;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3988,%r7054,%r7082;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3991,%r7050,%r7062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3994,%r3988,%r3991;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3997,%r7048,%r3994;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4000,%r7190,%r3997;
}
	// end inline asm
	selp.b32 	%r1038, %r7190, %r4000, %p17;
	// begin inline asm
	{sub.f16x2 %r4003,%r7053,%r7054;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4006,%r6970,%r4003;
}
	// end inline asm
	@%p17 bra 	$L__BB0_448;
	bra.uni 	$L__BB0_447;

$L__BB0_448:
	// begin inline asm
	{neg.f16x2 %r7279,%r7189;
}
	// end inline asm
	bra.uni 	$L__BB0_449;

$L__BB0_447:
	// begin inline asm
	{mul.f16x2 %r7279,%r6971,%r4003;
}
	// end inline asm

$L__BB0_449:
	mov.u32 	%r4019, 31;
	mov.u32 	%r4021, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4017,%r7279,%r4019,%r2068,%r4021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4022,%r4006,%r4017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4025,%r7046,%r7058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4028,%r4025,%r4022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4031,%r503,%r4028;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7118,%r7189,%r4031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4037,%r7049,%r7050;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4040,%r6970,%r4037;
}
	// end inline asm
	mov.u32 	%r7280, %r7188;
	@%p17 bra 	$L__BB0_451;

	// begin inline asm
	{mul.f16x2 %r7280,%r6971,%r4037;
}
	// end inline asm

$L__BB0_451:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4049,%r7280,%r4019,%r2068,%r4021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4054,%r4040,%r4049;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4057,%r7046,%r7078;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4060,%r4054,%r4057;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4063,%r7045,%r4060;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4066,%r7188,%r4063;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4069,%r7053,%r7081;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4072,%r7049,%r7061;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4075,%r4069,%r4072;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4078,%r7044,%r4075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4081,%r7187,%r4078;
}
	// end inline asm
	selp.b32 	%r1050, %r7187, %r4081, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4085,%r7042,%r428,%r2068,%r4021;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4085;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7042;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4092, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4093,%r7043,%r4092;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4096,%r6966,%r4093;
}
	// end inline asm
	@%p17 bra 	$L__BB0_453;
	bra.uni 	$L__BB0_452;

$L__BB0_453:
	// begin inline asm
	{neg.f16x2 %r7281,%r7186;
}
	// end inline asm
	bra.uni 	$L__BB0_454;

$L__BB0_452:
	// begin inline asm
	{mul.f16x2 %r7281,%r6967,%r4093;
}
	// end inline asm

$L__BB0_454:
	mov.u32 	%r4111, 31;
	mov.u32 	%r4113, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4109,%r7281,%r4111,%r2068,%r4113;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4114,%r4096,%r4109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4117,%r7246,%r7052;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4120,%r4117,%r4114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4123,%r7218,%r4120;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4126,%r7186,%r4123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4129,%r7042,%r7043;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4132,%r6970,%r4129;
}
	// end inline asm
	@%p17 bra 	$L__BB0_456;
	bra.uni 	$L__BB0_455;

$L__BB0_456:
	// begin inline asm
	{neg.f16x2 %r7282,%r7185;
}
	// end inline asm
	bra.uni 	$L__BB0_457;

$L__BB0_455:
	// begin inline asm
	{mul.f16x2 %r7282,%r6971,%r4129;
}
	// end inline asm

$L__BB0_457:
	mov.u32 	%r4145, 31;
	mov.u32 	%r4168, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4143,%r7282,%r4145,%r2068,%r4168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4148,%r4132,%r4143;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4151,%r7245,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4154,%r4151,%r4148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4157,%r7217,%r4154;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4160,%r7185,%r4157;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4164,%r7038,%r428,%r2068,%r4168;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4164;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7038;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4171, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4172,%r7039,%r4171;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4175,%r6966,%r4172;
}
	// end inline asm
	mov.u32 	%r7283, %r7184;
	@%p17 bra 	$L__BB0_459;

	// begin inline asm
	{mul.f16x2 %r7283,%r6967,%r4172;
}
	// end inline asm

$L__BB0_459:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4186,%r7283,%r4145,%r2068,%r4168;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4191,%r4175,%r4186;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4194,%r7257,%r7075;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4197,%r4191,%r4194;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4200,%r7228,%r4197;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7117,%r7184,%r4200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4206,%r7258,%r7077;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4209,%r7039,%r7260;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4212,%r4206,%r4209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4215,%r7227,%r4212;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4218,%r7183,%r4215;
}
	// end inline asm
	selp.b32 	%r1068, %r7183, %r4218, %p17;
	// begin inline asm
	{sub.f16x2 %r4221,%r7038,%r7039;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4224,%r6970,%r4221;
}
	// end inline asm
	mov.u32 	%r7284, %r7182;
	@%p17 bra 	$L__BB0_461;

	// begin inline asm
	{mul.f16x2 %r7284,%r6971,%r4221;
}
	// end inline asm

$L__BB0_461:
	mov.u32 	%r4235, 31;
	mov.u32 	%r4273, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4233,%r7284,%r4235,%r2068,%r4273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4238,%r4224,%r4233;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4241,%r7255,%r7070;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4244,%r4238,%r4241;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4247,%r7226,%r4244;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7116,%r7182,%r4247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4253,%r7256,%r7076;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4256,%r7038,%r7259;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4259,%r4253,%r4256;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4262,%r7225,%r4259;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4265,%r7181,%r4262;
}
	// end inline asm
	selp.b32 	%r1074, %r7181, %r4265, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4269,%r7034,%r428,%r2068,%r4273;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4269;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7034;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4276, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4277,%r7035,%r4276;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4280,%r6966,%r4277;
}
	// end inline asm
	@%p17 bra 	$L__BB0_463;
	bra.uni 	$L__BB0_462;

$L__BB0_463:
	// begin inline asm
	{neg.f16x2 %r7285,%r7180;
}
	// end inline asm
	bra.uni 	$L__BB0_464;

$L__BB0_462:
	// begin inline asm
	{mul.f16x2 %r7285,%r6967,%r4277;
}
	// end inline asm

$L__BB0_464:
	mov.u32 	%r4295, 31;
	mov.u32 	%r4318, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4293,%r7285,%r4295,%r2068,%r4318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4298,%r4280,%r4293;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4301,%r7033,%r7257;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4304,%r4301,%r4298;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4307,%r7224,%r4304;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7115,%r7180,%r4307;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4314,%r7030,%r428,%r2068,%r4318;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4314;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7030;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4321, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4322,%r7031,%r4321;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4325,%r6966,%r4322;
}
	// end inline asm
	mov.u32 	%r7286, %r7179;
	@%p17 bra 	$L__BB0_466;

	// begin inline asm
	{mul.f16x2 %r7286,%r6967,%r4322;
}
	// end inline asm

$L__BB0_466:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4336,%r7286,%r4295,%r2068,%r4318;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4341,%r4325,%r4336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4344,%r7033,%r7064;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4347,%r4341,%r4344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4350,%r7063,%r4347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7113,%r7179,%r4350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4356,%r7035,%r7066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4359,%r7031,%r7039;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4362,%r4356,%r4359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4365,%r485,%r4362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4368,%r7178,%r4365;
}
	// end inline asm
	selp.b32 	%r7111, %r7178, %r4368, %p17;
	// begin inline asm
	{sub.f16x2 %r4371,%r7034,%r7035;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4374,%r6970,%r4371;
}
	// end inline asm
	@%p17 bra 	$L__BB0_468;
	bra.uni 	$L__BB0_467;

$L__BB0_468:
	// begin inline asm
	{neg.f16x2 %r7287,%r7177;
}
	// end inline asm
	bra.uni 	$L__BB0_469;

$L__BB0_467:
	// begin inline asm
	{mul.f16x2 %r7287,%r6971,%r4371;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4387, 31;
	mov.u32 	%r4389, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4385,%r7287,%r4387,%r2068,%r4389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4390,%r4374,%r4385;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4393,%r7028,%r7255;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4396,%r4393,%r4390;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4399,%r7223,%r4396;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7114,%r7177,%r4399;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4405,%r7030,%r7031;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4408,%r6970,%r4405;
}
	// end inline asm
	mov.u32 	%r7288, %r7176;
	@%p17 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7288,%r6971,%r4405;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4417,%r7288,%r4387,%r2068,%r4389;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4422,%r4408,%r4417;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4425,%r7028,%r7058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4428,%r4422,%r4425;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4431,%r7057,%r4428;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7112,%r7176,%r4431;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4437,%r7034,%r7065;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4440,%r7030,%r7038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4443,%r4437,%r4440;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4446,%r482,%r4443;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4449,%r7175,%r4446;
}
	// end inline asm
	selp.b32 	%r7110, %r7175, %r4449, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4453,%r7024,%r428,%r2068,%r4389;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4453;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7024;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4460, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4461,%r7025,%r4460;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4464,%r6966,%r4461;
}
	// end inline asm
	@%p17 bra 	$L__BB0_473;
	bra.uni 	$L__BB0_472;

$L__BB0_473:
	// begin inline asm
	{neg.f16x2 %r7289,%r7174;
}
	// end inline asm
	bra.uni 	$L__BB0_474;

$L__BB0_472:
	// begin inline asm
	{mul.f16x2 %r7289,%r6967,%r4461;
}
	// end inline asm

$L__BB0_474:
	mov.u32 	%r4479, 31;
	mov.u32 	%r4502, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4477,%r7289,%r4479,%r2068,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4482,%r4464,%r4477;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4485,%r7242,%r7033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4488,%r4485,%r4482;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4491,%r7055,%r4488;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7174,%r4491;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4498,%r7022,%r428,%r2068,%r4502;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4498;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7022;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4505, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4506,%r7023,%r4505;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4509,%r6966,%r4506;
}
	// end inline asm
	mov.u32 	%r7290, %r7173;
	@%p17 bra 	$L__BB0_476;

	// begin inline asm
	{mul.f16x2 %r7290,%r6967,%r4506;
}
	// end inline asm

$L__BB0_476:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4520,%r7290,%r4479,%r2068,%r4502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4525,%r4509,%r4520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4528,%r7242,%r7052;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4531,%r4525,%r4528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4534,%r7215,%r4531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7107,%r7173,%r4534;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4540,%r7025,%r7054;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4543,%r7023,%r7031;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r4540,%r4543;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4549,%r477,%r4546;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4552,%r7172,%r4549;
}
	// end inline asm
	selp.b32 	%r7105, %r7172, %r4552, %p17;
	// begin inline asm
	{sub.f16x2 %r4555,%r7024,%r7025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4558,%r6970,%r4555;
}
	// end inline asm
	@%p17 bra 	$L__BB0_478;
	bra.uni 	$L__BB0_477;

$L__BB0_478:
	// begin inline asm
	{neg.f16x2 %r7291,%r7171;
}
	// end inline asm
	bra.uni 	$L__BB0_479;

$L__BB0_477:
	// begin inline asm
	{mul.f16x2 %r7291,%r6971,%r4555;
}
	// end inline asm

$L__BB0_479:
	mov.u32 	%r4571, 31;
	mov.u32 	%r4573, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4569,%r7291,%r4571,%r2068,%r4573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4574,%r4558,%r4569;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4577,%r7241,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4580,%r4577,%r4574;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4583,%r7047,%r4580;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7108,%r7171,%r4583;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4589,%r7022,%r7023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4592,%r6970,%r4589;
}
	// end inline asm
	mov.u32 	%r7292, %r7170;
	@%p17 bra 	$L__BB0_481;

	// begin inline asm
	{mul.f16x2 %r7292,%r6971,%r4589;
}
	// end inline asm

$L__BB0_481:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4601,%r7292,%r4571,%r2068,%r4573;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4606,%r4592,%r4601;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4609,%r7241,%r7046;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4612,%r4606,%r4609;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4615,%r7213,%r4612;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7170,%r4615;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4621,%r7024,%r7053;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4624,%r7022,%r7030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4627,%r4621,%r4624;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4630,%r476,%r4627;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4633,%r7169,%r4630;
}
	// end inline asm
	selp.b32 	%r7104, %r7169, %r4633, %p17;
	// begin inline asm
	{sub.f16x2 %r4636,%r7240,%r7043;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4639,%r7244,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4642,%r4636,%r4639;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4645,%r7212,%r4642;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4648,%r7168,%r4645;
}
	// end inline asm
	selp.b32 	%r1123, %r7168, %r4648, %p17;
	// begin inline asm
	{sub.f16x2 %r4651,%r7239,%r7042;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4654,%r7243,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4657,%r4651,%r4654;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4660,%r7211,%r4657;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4663,%r7167,%r4660;
}
	// end inline asm
	selp.b32 	%r1124, %r7167, %r4663, %p17;
	// begin inline asm
	{shfl.sync.idx.b32 %r4667,%r7016,%r428,%r2068,%r4573;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4667;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7016;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4674, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4675,%r7017,%r4674;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4678,%r6966,%r4675;
}
	// end inline asm
	mov.u32 	%r7293, %r7166;
	@%p17 bra 	$L__BB0_483;

	// begin inline asm
	{mul.f16x2 %r7293,%r6967,%r4675;
}
	// end inline asm

$L__BB0_483:
	mov.u32 	%r4691, 31;
	mov.u32 	%r4693, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4689,%r7293,%r4691,%r2068,%r4693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4694,%r4678,%r4689;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4697,%r7251,%r7033;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4700,%r4694,%r4697;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4703,%r7222,%r4700;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r7166,%r4703;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4709,%r7252,%r7035;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4712,%r7017,%r7254;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4715,%r4709,%r4712;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4718,%r7221,%r4715;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4721,%r7165,%r4718;
}
	// end inline asm
	selp.b32 	%r7101, %r7165, %r4721, %p17;
	// begin inline asm
	{sub.f16x2 %r4724,%r7016,%r7017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4727,%r6970,%r4724;
}
	// end inline asm
	mov.u32 	%r7294, %r7164;
	@%p17 bra 	$L__BB0_485;

	// begin inline asm
	{mul.f16x2 %r7294,%r6971,%r4724;
}
	// end inline asm

$L__BB0_485:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4736,%r7294,%r4691,%r2068,%r4693;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4741,%r4727,%r4736;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4744,%r7249,%r7028;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4747,%r4741,%r4744;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4750,%r7220,%r4747;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7102,%r7164,%r4750;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4756,%r7250,%r7034;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4759,%r7016,%r7253;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4762,%r4756,%r4759;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4765,%r7219,%r4762;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4768,%r7163,%r4765;
}
	// end inline asm
	selp.b32 	%r7100, %r7163, %r4768, %p17;
	// begin inline asm
	{sub.f16x2 %r4771,%r7237,%r7025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4774,%r7238,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4777,%r4771,%r4774;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4780,%r7021,%r4777;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4783,%r7162,%r4780;
}
	// end inline asm
	selp.b32 	%r7099, %r7162, %r4783, %p17;
	// begin inline asm
	{sub.f16x2 %r4786,%r7235,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4789,%r7236,%r7016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4792,%r4786,%r4789;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4795,%r7020,%r4792;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4798,%r7161,%r4795;
}
	// end inline asm
	selp.b32 	%r7098, %r7161, %r4798, %p17;
	bar.sync 	0;
	ld.param.u64 	%rd262, [%rd1+160];
	cvta.to.global.u64 	%rd31, %rd262;
	add.s32 	%r4803, %r1486, 2;
	setp.lt.s32 	%p284, %r629, %r4803;
	add.s32 	%r4804, %r1487, -1;
	setp.ge.s32 	%p285, %r629, %r4804;
	or.pred  	%p286, %p285, %p284;
	add.s32 	%r4805, %r1488, 2;
	setp.lt.s32 	%p287, %r630, %r4805;
	or.pred  	%p288, %p286, %p287;
	add.s32 	%r4806, %r1489, -2;
	setp.ge.s32 	%p289, %r630, %r4806;
	or.pred  	%p290, %p289, %p288;
	setp.lt.s32 	%p291, %r631, %r1483;
	or.pred  	%p292, %p291, %p290;
	mad.lo.s32 	%r4807, %r1485, %r1484, %r1483;
	setp.ge.s32 	%p293, %r631, %r4807;
	or.pred  	%p294, %p292, %p293;
	@%p294 bra 	$L__BB0_727;

	sub.s32 	%r1139, %r631, %r1483;
	rem.s32 	%r4808, %r1139, %r1484;
	setp.ne.s32 	%p295, %r4808, 0;
	@%p295 bra 	$L__BB0_727;

	div.s32 	%r4809, %r1139, %r1484;
	mul.lo.s32 	%r4811, %r4809, %r52;
	sub.s32 	%r1140, %r629, %r1486;
	sub.s32 	%r1141, %r630, %r1488;
	mul.lo.s32 	%r1142, %r4811, 3;
	add.s32 	%r4812, %r1140, %r1142;
	add.s32 	%r4813, %r4812, -2;
	mul.lo.s32 	%r1143, %r4813, %r53;
	add.s32 	%r4815, %r1141, %r1143;
	mul.lo.s32 	%r4816, %r4815, %r54;
	sub.s32 	%r1144, %r4816, %r1490;
	@%p17 bra 	$L__BB0_492;

	not.pred 	%p297, %p13;
	@%p297 bra 	$L__BB0_490;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3371;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4818, %r1144, %r394;
	mul.wide.s32 	%rd263, %r4818, 4;
	add.s64 	%rd264, %rd31, %rd263;
	st.global.f32 	[%rd264], %f407;

$L__BB0_490:
	not.pred 	%p298, %p15;
	@%p298 bra 	$L__BB0_492;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3371;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4820, %r1144, %r395;
	mul.wide.s32 	%rd265, %r4820, 4;
	add.s64 	%rd266, %rd31, %rd265;
	st.global.f32 	[%rd266], %f408;

$L__BB0_492:
	@%p17 bra 	$L__BB0_497;

	not.pred 	%p300, %p14;
	@%p300 bra 	$L__BB0_495;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3448;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4822, %r1144, %r408;
	mul.wide.s32 	%rd267, %r4822, 4;
	add.s64 	%rd268, %rd31, %rd267;
	st.global.f32 	[%rd268], %f409;

$L__BB0_495:
	not.pred 	%p301, %p16;
	@%p301 bra 	$L__BB0_497;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3448;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4824, %r1144, %r409;
	mul.wide.s32 	%rd269, %r4824, 4;
	add.s64 	%rd270, %rd31, %rd269;
	st.global.f32 	[%rd270], %f410;

$L__BB0_497:
	add.s32 	%r1145, %r1142, %r52;
	add.s32 	%r4826, %r1140, %r1145;
	add.s32 	%r4827, %r4826, -2;
	mad.lo.s32 	%r4829, %r4827, %r53, %r1141;
	mul.lo.s32 	%r4830, %r4829, %r54;
	sub.s32 	%r1146, %r4830, %r1490;
	@%p17 bra 	$L__BB0_502;

	not.pred 	%p303, %p13;
	@%p303 bra 	$L__BB0_500;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3414;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4832, %r1146, %r394;
	mul.wide.s32 	%rd271, %r4832, 4;
	add.s64 	%rd272, %rd31, %rd271;
	st.global.f32 	[%rd272], %f411;

$L__BB0_500:
	not.pred 	%p304, %p15;
	@%p304 bra 	$L__BB0_502;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3414;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4834, %r1146, %r395;
	mul.wide.s32 	%rd273, %r4834, 4;
	add.s64 	%rd274, %rd31, %rd273;
	st.global.f32 	[%rd274], %f412;

$L__BB0_502:
	@%p17 bra 	$L__BB0_507;

	not.pred 	%p306, %p14;
	@%p306 bra 	$L__BB0_505;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3480;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4836, %r1146, %r408;
	mul.wide.s32 	%rd275, %r4836, 4;
	add.s64 	%rd276, %rd31, %rd275;
	st.global.f32 	[%rd276], %f413;

$L__BB0_505:
	not.pred 	%p307, %p16;
	@%p307 bra 	$L__BB0_507;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3480;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4838, %r1146, %r409;
	mul.wide.s32 	%rd277, %r4838, 4;
	add.s64 	%rd278, %rd31, %rd277;
	st.global.f32 	[%rd278], %f414;

$L__BB0_507:
	add.s32 	%r1147, %r1141, 1;
	add.s32 	%r4839, %r1147, %r1143;
	mul.lo.s32 	%r4840, %r4839, %r54;
	sub.s32 	%r1148, %r4840, %r1490;
	@%p17 bra 	$L__BB0_512;

	not.pred 	%p309, %p13;
	@%p309 bra 	$L__BB0_510;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3525;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4842, %r1148, %r394;
	mul.wide.s32 	%rd279, %r4842, 4;
	add.s64 	%rd280, %rd31, %rd279;
	st.global.f32 	[%rd280], %f415;

$L__BB0_510:
	not.pred 	%p310, %p15;
	@%p310 bra 	$L__BB0_512;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3525;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4844, %r1148, %r395;
	mul.wide.s32 	%rd281, %r4844, 4;
	add.s64 	%rd282, %rd31, %rd281;
	st.global.f32 	[%rd282], %f416;

$L__BB0_512:
	@%p17 bra 	$L__BB0_517;

	not.pred 	%p312, %p14;
	@%p312 bra 	$L__BB0_515;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4846, %r1148, %r408;
	mul.wide.s32 	%rd283, %r4846, 4;
	add.s64 	%rd284, %rd31, %rd283;
	st.global.f32 	[%rd284], %f417;

$L__BB0_515:
	not.pred 	%p313, %p16;
	@%p313 bra 	$L__BB0_517;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3559;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4848, %r1148, %r409;
	mul.wide.s32 	%rd285, %r4848, 4;
	add.s64 	%rd286, %rd31, %rd285;
	st.global.f32 	[%rd286], %f418;

$L__BB0_517:
	not.b32 	%r4849, %r1486;
	add.s32 	%r1149, %r629, %r4849;
	not.b32 	%r4850, %r1488;
	add.s32 	%r1150, %r630, %r4850;
	add.s32 	%r4851, %r1149, %r1142;
	mul.lo.s32 	%r1151, %r4851, %r53;
	add.s32 	%r4853, %r1150, %r1151;
	mul.lo.s32 	%r4854, %r4853, %r54;
	sub.s32 	%r1152, %r4854, %r1490;
	@%p17 bra 	$L__BB0_522;

	not.pred 	%p315, %p13;
	@%p315 bra 	$L__BB0_520;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4856, %r1152, %r394;
	mul.wide.s32 	%rd287, %r4856, 4;
	add.s64 	%rd288, %rd31, %rd287;
	st.global.f32 	[%rd288], %f419;

$L__BB0_520:
	not.pred 	%p316, %p15;
	@%p316 bra 	$L__BB0_522;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3604;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4858, %r1152, %r395;
	mul.wide.s32 	%rd289, %r4858, 4;
	add.s64 	%rd290, %rd31, %rd289;
	st.global.f32 	[%rd290], %f420;

$L__BB0_522:
	@%p17 bra 	$L__BB0_527;

	not.pred 	%p318, %p14;
	@%p318 bra 	$L__BB0_525;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4860, %r1152, %r408;
	mul.wide.s32 	%rd291, %r4860, 4;
	add.s64 	%rd292, %rd31, %rd291;
	st.global.f32 	[%rd292], %f421;

$L__BB0_525:
	not.pred 	%p319, %p16;
	@%p319 bra 	$L__BB0_527;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3681;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4862, %r1152, %r409;
	mul.wide.s32 	%rd293, %r4862, 4;
	add.s64 	%rd294, %rd31, %rd293;
	st.global.f32 	[%rd294], %f422;

$L__BB0_527:
	add.s32 	%r4864, %r1149, %r1145;
	mul.lo.s32 	%r1153, %r4864, %r53;
	add.s32 	%r4865, %r1150, %r1153;
	mul.lo.s32 	%r4866, %r4865, %r54;
	sub.s32 	%r1154, %r4866, %r1490;
	@%p17 bra 	$L__BB0_532;

	not.pred 	%p321, %p13;
	@%p321 bra 	$L__BB0_530;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4868, %r1154, %r394;
	mul.wide.s32 	%rd295, %r4868, 4;
	add.s64 	%rd296, %rd31, %rd295;
	st.global.f32 	[%rd296], %f423;

$L__BB0_530:
	not.pred 	%p322, %p15;
	@%p322 bra 	$L__BB0_532;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3647;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4870, %r1154, %r395;
	mul.wide.s32 	%rd297, %r4870, 4;
	add.s64 	%rd298, %rd31, %rd297;
	st.global.f32 	[%rd298], %f424;

$L__BB0_532:
	@%p17 bra 	$L__BB0_537;

	not.pred 	%p324, %p14;
	@%p324 bra 	$L__BB0_535;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4872, %r1154, %r408;
	mul.wide.s32 	%rd299, %r4872, 4;
	add.s64 	%rd300, %rd31, %rd299;
	st.global.f32 	[%rd300], %f425;

$L__BB0_535:
	not.pred 	%p325, %p16;
	@%p325 bra 	$L__BB0_537;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3713;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4874, %r1154, %r409;
	mul.wide.s32 	%rd301, %r4874, 4;
	add.s64 	%rd302, %rd31, %rd301;
	st.global.f32 	[%rd302], %f426;

$L__BB0_537:
	add.s32 	%r4875, %r1141, %r1151;
	mul.lo.s32 	%r4876, %r4875, %r54;
	sub.s32 	%r1155, %r4876, %r1490;
	@%p17 bra 	$L__BB0_542;

	not.pred 	%p327, %p13;
	@%p327 bra 	$L__BB0_540;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7123;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4878, %r1155, %r394;
	mul.wide.s32 	%rd303, %r4878, 4;
	add.s64 	%rd304, %rd31, %rd303;
	st.global.f32 	[%rd304], %f427;

$L__BB0_540:
	not.pred 	%p328, %p15;
	@%p328 bra 	$L__BB0_542;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7123;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4880, %r1155, %r395;
	mul.wide.s32 	%rd305, %r4880, 4;
	add.s64 	%rd306, %rd31, %rd305;
	st.global.f32 	[%rd306], %f428;

$L__BB0_542:
	@%p17 bra 	$L__BB0_547;

	not.pred 	%p330, %p14;
	@%p330 bra 	$L__BB0_545;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7122;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4882, %r1155, %r408;
	mul.wide.s32 	%rd307, %r4882, 4;
	add.s64 	%rd308, %rd31, %rd307;
	st.global.f32 	[%rd308], %f429;

$L__BB0_545:
	not.pred 	%p331, %p16;
	@%p331 bra 	$L__BB0_547;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7122;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4884, %r1155, %r409;
	mul.wide.s32 	%rd309, %r4884, 4;
	add.s64 	%rd310, %rd31, %rd309;
	st.global.f32 	[%rd310], %f430;

$L__BB0_547:
	add.s32 	%r4885, %r1141, %r1153;
	mul.lo.s32 	%r4886, %r4885, %r54;
	sub.s32 	%r1156, %r4886, %r1490;
	@%p17 bra 	$L__BB0_552;

	not.pred 	%p333, %p13;
	@%p333 bra 	$L__BB0_550;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7121;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4888, %r1156, %r394;
	mul.wide.s32 	%rd311, %r4888, 4;
	add.s64 	%rd312, %rd31, %rd311;
	st.global.f32 	[%rd312], %f431;

$L__BB0_550:
	not.pred 	%p334, %p15;
	@%p334 bra 	$L__BB0_552;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7121;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4890, %r1156, %r395;
	mul.wide.s32 	%rd313, %r4890, 4;
	add.s64 	%rd314, %rd31, %rd313;
	st.global.f32 	[%rd314], %f432;

$L__BB0_552:
	@%p17 bra 	$L__BB0_557;

	not.pred 	%p336, %p14;
	@%p336 bra 	$L__BB0_555;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7120;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4892, %r1156, %r408;
	mul.wide.s32 	%rd315, %r4892, 4;
	add.s64 	%rd316, %rd31, %rd315;
	st.global.f32 	[%rd316], %f433;

$L__BB0_555:
	not.pred 	%p337, %p16;
	@%p337 bra 	$L__BB0_557;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7120;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4894, %r1156, %r409;
	mul.wide.s32 	%rd317, %r4894, 4;
	add.s64 	%rd318, %rd31, %rd317;
	st.global.f32 	[%rd318], %f434;

$L__BB0_557:
	add.s32 	%r1157, %r1145, %r52;
	add.s32 	%r4896, %r1149, %r1157;
	mul.lo.s32 	%r1158, %r4896, %r53;
	add.s32 	%r4898, %r1141, %r1158;
	mul.lo.s32 	%r4899, %r4898, %r54;
	sub.s32 	%r1159, %r4899, %r1490;
	@%p17 bra 	$L__BB0_562;

	not.pred 	%p339, %p13;
	@%p339 bra 	$L__BB0_560;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1014;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4901, %r1159, %r394;
	mul.wide.s32 	%rd319, %r4901, 4;
	add.s64 	%rd320, %rd31, %rd319;
	st.global.f32 	[%rd320], %f435;

$L__BB0_560:
	not.pred 	%p340, %p15;
	@%p340 bra 	$L__BB0_562;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1014;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4903, %r1159, %r395;
	mul.wide.s32 	%rd321, %r4903, 4;
	add.s64 	%rd322, %rd31, %rd321;
	st.global.f32 	[%rd322], %f436;

$L__BB0_562:
	@%p17 bra 	$L__BB0_567;

	not.pred 	%p342, %p14;
	@%p342 bra 	$L__BB0_565;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1026;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4905, %r1159, %r408;
	mul.wide.s32 	%rd323, %r4905, 4;
	add.s64 	%rd324, %rd31, %rd323;
	st.global.f32 	[%rd324], %f437;

$L__BB0_565:
	not.pred 	%p343, %p16;
	@%p343 bra 	$L__BB0_567;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1026;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4907, %r1159, %r409;
	mul.wide.s32 	%rd325, %r4907, 4;
	add.s64 	%rd326, %rd31, %rd325;
	st.global.f32 	[%rd326], %f438;

$L__BB0_567:
	add.s32 	%r4908, %r1147, %r1151;
	mul.lo.s32 	%r4909, %r4908, %r54;
	sub.s32 	%r1160, %r4909, %r1490;
	@%p17 bra 	$L__BB0_572;

	not.pred 	%p345, %p13;
	@%p345 bra 	$L__BB0_570;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7119;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4911, %r1160, %r394;
	mul.wide.s32 	%rd327, %r4911, 4;
	add.s64 	%rd328, %rd31, %rd327;
	st.global.f32 	[%rd328], %f439;

$L__BB0_570:
	not.pred 	%p346, %p15;
	@%p346 bra 	$L__BB0_572;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7119;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4913, %r1160, %r395;
	mul.wide.s32 	%rd329, %r4913, 4;
	add.s64 	%rd330, %rd31, %rd329;
	st.global.f32 	[%rd330], %f440;

$L__BB0_572:
	@%p17 bra 	$L__BB0_577;

	not.pred 	%p348, %p14;
	@%p348 bra 	$L__BB0_575;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7118;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4915, %r1160, %r408;
	mul.wide.s32 	%rd331, %r4915, 4;
	add.s64 	%rd332, %rd31, %rd331;
	st.global.f32 	[%rd332], %f441;

$L__BB0_575:
	not.pred 	%p349, %p16;
	@%p349 bra 	$L__BB0_577;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7118;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4917, %r1160, %r409;
	mul.wide.s32 	%rd333, %r4917, 4;
	add.s64 	%rd334, %rd31, %rd333;
	st.global.f32 	[%rd334], %f442;

$L__BB0_577:
	add.s32 	%r4918, %r1147, %r1153;
	mul.lo.s32 	%r4919, %r4918, %r54;
	sub.s32 	%r1161, %r4919, %r1490;
	@%p17 bra 	$L__BB0_582;

	not.pred 	%p351, %p13;
	@%p351 bra 	$L__BB0_580;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3985;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4921, %r1161, %r394;
	mul.wide.s32 	%rd335, %r4921, 4;
	add.s64 	%rd336, %rd31, %rd335;
	st.global.f32 	[%rd336], %f443;

$L__BB0_580:
	not.pred 	%p352, %p15;
	@%p352 bra 	$L__BB0_582;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3985;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4923, %r1161, %r395;
	mul.wide.s32 	%rd337, %r4923, 4;
	add.s64 	%rd338, %rd31, %rd337;
	st.global.f32 	[%rd338], %f444;

$L__BB0_582:
	@%p17 bra 	$L__BB0_587;

	not.pred 	%p354, %p14;
	@%p354 bra 	$L__BB0_585;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4066;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4925, %r1161, %r408;
	mul.wide.s32 	%rd339, %r4925, 4;
	add.s64 	%rd340, %rd31, %rd339;
	st.global.f32 	[%rd340], %f445;

$L__BB0_585:
	not.pred 	%p355, %p16;
	@%p355 bra 	$L__BB0_587;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4066;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4927, %r1161, %r409;
	mul.wide.s32 	%rd341, %r4927, 4;
	add.s64 	%rd342, %rd31, %rd341;
	st.global.f32 	[%rd342], %f446;

$L__BB0_587:
	add.s32 	%r4928, %r1147, %r1158;
	mul.lo.s32 	%r4929, %r4928, %r54;
	sub.s32 	%r1162, %r4929, %r1490;
	@%p17 bra 	$L__BB0_592;

	not.pred 	%p357, %p13;
	@%p357 bra 	$L__BB0_590;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1038;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4931, %r1162, %r394;
	mul.wide.s32 	%rd343, %r4931, 4;
	add.s64 	%rd344, %rd31, %rd343;
	st.global.f32 	[%rd344], %f447;

$L__BB0_590:
	not.pred 	%p358, %p15;
	@%p358 bra 	$L__BB0_592;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1038;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4933, %r1162, %r395;
	mul.wide.s32 	%rd345, %r4933, 4;
	add.s64 	%rd346, %rd31, %rd345;
	st.global.f32 	[%rd346], %f448;

$L__BB0_592:
	@%p17 bra 	$L__BB0_597;

	not.pred 	%p360, %p14;
	@%p360 bra 	$L__BB0_595;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1050;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4935, %r1162, %r408;
	mul.wide.s32 	%rd347, %r4935, 4;
	add.s64 	%rd348, %rd31, %rd347;
	st.global.f32 	[%rd348], %f449;

$L__BB0_595:
	not.pred 	%p361, %p16;
	@%p361 bra 	$L__BB0_597;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1050;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4937, %r1162, %r409;
	mul.wide.s32 	%rd349, %r4937, 4;
	add.s64 	%rd350, %rd31, %rd349;
	st.global.f32 	[%rd350], %f450;

$L__BB0_597:
	add.s32 	%r1163, %r1141, 2;
	add.s32 	%r4938, %r1163, %r1151;
	mul.lo.s32 	%r4939, %r4938, %r54;
	sub.s32 	%r1164, %r4939, %r1490;
	@%p17 bra 	$L__BB0_602;

	not.pred 	%p363, %p13;
	@%p363 bra 	$L__BB0_600;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4126;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4941, %r1164, %r394;
	mul.wide.s32 	%rd351, %r4941, 4;
	add.s64 	%rd352, %rd31, %rd351;
	st.global.f32 	[%rd352], %f451;

$L__BB0_600:
	not.pred 	%p364, %p15;
	@%p364 bra 	$L__BB0_602;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4126;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4943, %r1164, %r395;
	mul.wide.s32 	%rd353, %r4943, 4;
	add.s64 	%rd354, %rd31, %rd353;
	st.global.f32 	[%rd354], %f452;

$L__BB0_602:
	@%p17 bra 	$L__BB0_607;

	not.pred 	%p366, %p14;
	@%p366 bra 	$L__BB0_605;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4160;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4945, %r1164, %r408;
	mul.wide.s32 	%rd355, %r4945, 4;
	add.s64 	%rd356, %rd31, %rd355;
	st.global.f32 	[%rd356], %f453;

$L__BB0_605:
	not.pred 	%p367, %p16;
	@%p367 bra 	$L__BB0_607;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4160;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4947, %r1164, %r409;
	mul.wide.s32 	%rd357, %r4947, 4;
	add.s64 	%rd358, %rd31, %rd357;
	st.global.f32 	[%rd358], %f454;

$L__BB0_607:
	mul.lo.s32 	%r1165, %r4826, %r53;
	add.s32 	%r4950, %r1150, %r1165;
	mul.lo.s32 	%r4951, %r4950, %r54;
	sub.s32 	%r1166, %r4951, %r1490;
	@%p17 bra 	$L__BB0_612;

	not.pred 	%p369, %p13;
	@%p369 bra 	$L__BB0_610;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7117;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4953, %r1166, %r394;
	mul.wide.s32 	%rd359, %r4953, 4;
	add.s64 	%rd360, %rd31, %rd359;
	st.global.f32 	[%rd360], %f455;

$L__BB0_610:
	not.pred 	%p370, %p15;
	@%p370 bra 	$L__BB0_612;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7117;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4955, %r1166, %r395;
	mul.wide.s32 	%rd361, %r4955, 4;
	add.s64 	%rd362, %rd31, %rd361;
	st.global.f32 	[%rd362], %f456;

$L__BB0_612:
	@%p17 bra 	$L__BB0_617;

	not.pred 	%p372, %p14;
	@%p372 bra 	$L__BB0_615;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7116;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4957, %r1166, %r408;
	mul.wide.s32 	%rd363, %r4957, 4;
	add.s64 	%rd364, %rd31, %rd363;
	st.global.f32 	[%rd364], %f457;

$L__BB0_615:
	not.pred 	%p373, %p16;
	@%p373 bra 	$L__BB0_617;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7116;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4959, %r1166, %r409;
	mul.wide.s32 	%rd365, %r4959, 4;
	add.s64 	%rd366, %rd31, %rd365;
	st.global.f32 	[%rd366], %f458;

$L__BB0_617:
	add.s32 	%r4961, %r1140, %r1157;
	mul.lo.s32 	%r1167, %r4961, %r53;
	add.s32 	%r4962, %r1150, %r1167;
	mul.lo.s32 	%r4963, %r4962, %r54;
	sub.s32 	%r1168, %r4963, %r1490;
	@%p17 bra 	$L__BB0_622;

	not.pred 	%p375, %p13;
	@%p375 bra 	$L__BB0_620;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1068;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4965, %r1168, %r394;
	mul.wide.s32 	%rd367, %r4965, 4;
	add.s64 	%rd368, %rd31, %rd367;
	st.global.f32 	[%rd368], %f459;

$L__BB0_620:
	not.pred 	%p376, %p15;
	@%p376 bra 	$L__BB0_622;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1068;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4967, %r1168, %r395;
	mul.wide.s32 	%rd369, %r4967, 4;
	add.s64 	%rd370, %rd31, %rd369;
	st.global.f32 	[%rd370], %f460;

$L__BB0_622:
	@%p17 bra 	$L__BB0_627;

	not.pred 	%p378, %p14;
	@%p378 bra 	$L__BB0_625;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1074;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4969, %r1168, %r408;
	mul.wide.s32 	%rd371, %r4969, 4;
	add.s64 	%rd372, %rd31, %rd371;
	st.global.f32 	[%rd372], %f461;

$L__BB0_625:
	not.pred 	%p379, %p16;
	@%p379 bra 	$L__BB0_627;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1074;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4971, %r1168, %r409;
	mul.wide.s32 	%rd373, %r4971, 4;
	add.s64 	%rd374, %rd31, %rd373;
	st.global.f32 	[%rd374], %f462;

$L__BB0_627:
	mul.lo.s32 	%r1169, %r4812, %r53;
	add.s32 	%r4974, %r1141, %r1169;
	mul.lo.s32 	%r4975, %r4974, %r54;
	sub.s32 	%r1170, %r4975, %r1490;
	@%p17 bra 	$L__BB0_632;

	not.pred 	%p381, %p13;
	@%p381 bra 	$L__BB0_630;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7115;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4977, %r1170, %r394;
	mul.wide.s32 	%rd375, %r4977, 4;
	add.s64 	%rd376, %rd31, %rd375;
	st.global.f32 	[%rd376], %f463;

$L__BB0_630:
	not.pred 	%p382, %p15;
	@%p382 bra 	$L__BB0_632;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7115;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4979, %r1170, %r395;
	mul.wide.s32 	%rd377, %r4979, 4;
	add.s64 	%rd378, %rd31, %rd377;
	st.global.f32 	[%rd378], %f464;

$L__BB0_632:
	@%p17 bra 	$L__BB0_637;

	not.pred 	%p384, %p14;
	@%p384 bra 	$L__BB0_635;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7114;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4981, %r1170, %r408;
	mul.wide.s32 	%rd379, %r4981, 4;
	add.s64 	%rd380, %rd31, %rd379;
	st.global.f32 	[%rd380], %f465;

$L__BB0_635:
	not.pred 	%p385, %p16;
	@%p385 bra 	$L__BB0_637;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7114;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4983, %r1170, %r409;
	mul.wide.s32 	%rd381, %r4983, 4;
	add.s64 	%rd382, %rd31, %rd381;
	st.global.f32 	[%rd382], %f466;

$L__BB0_637:
	add.s32 	%r4984, %r1141, %r1165;
	mul.lo.s32 	%r4985, %r4984, %r54;
	sub.s32 	%r1171, %r4985, %r1490;
	@%p17 bra 	$L__BB0_642;

	not.pred 	%p387, %p13;
	@%p387 bra 	$L__BB0_640;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7113;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4987, %r1171, %r394;
	mul.wide.s32 	%rd383, %r4987, 4;
	add.s64 	%rd384, %rd31, %rd383;
	st.global.f32 	[%rd384], %f467;

$L__BB0_640:
	not.pred 	%p388, %p15;
	@%p388 bra 	$L__BB0_642;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7113;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4989, %r1171, %r395;
	mul.wide.s32 	%rd385, %r4989, 4;
	add.s64 	%rd386, %rd31, %rd385;
	st.global.f32 	[%rd386], %f468;

$L__BB0_642:
	@%p17 bra 	$L__BB0_647;

	not.pred 	%p390, %p14;
	@%p390 bra 	$L__BB0_645;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7112;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4991, %r1171, %r408;
	mul.wide.s32 	%rd387, %r4991, 4;
	add.s64 	%rd388, %rd31, %rd387;
	st.global.f32 	[%rd388], %f469;

$L__BB0_645:
	not.pred 	%p391, %p16;
	@%p391 bra 	$L__BB0_647;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7112;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4993, %r1171, %r409;
	mul.wide.s32 	%rd389, %r4993, 4;
	add.s64 	%rd390, %rd31, %rd389;
	st.global.f32 	[%rd390], %f470;

$L__BB0_647:
	add.s32 	%r4994, %r1141, %r1167;
	mul.lo.s32 	%r4995, %r4994, %r54;
	sub.s32 	%r1172, %r4995, %r1490;
	@%p17 bra 	$L__BB0_652;

	not.pred 	%p393, %p13;
	@%p393 bra 	$L__BB0_650;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7111;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4997, %r1172, %r394;
	mul.wide.s32 	%rd391, %r4997, 4;
	add.s64 	%rd392, %rd31, %rd391;
	st.global.f32 	[%rd392], %f471;

$L__BB0_650:
	not.pred 	%p394, %p15;
	@%p394 bra 	$L__BB0_652;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7111;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4999, %r1172, %r395;
	mul.wide.s32 	%rd393, %r4999, 4;
	add.s64 	%rd394, %rd31, %rd393;
	st.global.f32 	[%rd394], %f472;

$L__BB0_652:
	@%p17 bra 	$L__BB0_657;

	not.pred 	%p396, %p14;
	@%p396 bra 	$L__BB0_655;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7110;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r5001, %r1172, %r408;
	mul.wide.s32 	%rd395, %r5001, 4;
	add.s64 	%rd396, %rd31, %rd395;
	st.global.f32 	[%rd396], %f473;

$L__BB0_655:
	not.pred 	%p397, %p16;
	@%p397 bra 	$L__BB0_657;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7110;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r5003, %r1172, %r409;
	mul.wide.s32 	%rd397, %r5003, 4;
	add.s64 	%rd398, %rd31, %rd397;
	st.global.f32 	[%rd398], %f474;

$L__BB0_657:
	add.s32 	%r5004, %r1147, %r1169;
	mul.lo.s32 	%r5005, %r5004, %r54;
	sub.s32 	%r1173, %r5005, %r1490;
	@%p17 bra 	$L__BB0_662;

	not.pred 	%p399, %p13;
	@%p399 bra 	$L__BB0_660;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7109;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r5007, %r1173, %r394;
	mul.wide.s32 	%rd399, %r5007, 4;
	add.s64 	%rd400, %rd31, %rd399;
	st.global.f32 	[%rd400], %f475;

$L__BB0_660:
	not.pred 	%p400, %p15;
	@%p400 bra 	$L__BB0_662;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7109;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r5009, %r1173, %r395;
	mul.wide.s32 	%rd401, %r5009, 4;
	add.s64 	%rd402, %rd31, %rd401;
	st.global.f32 	[%rd402], %f476;

$L__BB0_662:
	@%p17 bra 	$L__BB0_667;

	not.pred 	%p402, %p14;
	@%p402 bra 	$L__BB0_665;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r5011, %r1173, %r408;
	mul.wide.s32 	%rd403, %r5011, 4;
	add.s64 	%rd404, %rd31, %rd403;
	st.global.f32 	[%rd404], %f477;

$L__BB0_665:
	not.pred 	%p403, %p16;
	@%p403 bra 	$L__BB0_667;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7108;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r5013, %r1173, %r409;
	mul.wide.s32 	%rd405, %r5013, 4;
	add.s64 	%rd406, %rd31, %rd405;
	st.global.f32 	[%rd406], %f478;

$L__BB0_667:
	add.s32 	%r5014, %r1147, %r1165;
	mul.lo.s32 	%r5015, %r5014, %r54;
	sub.s32 	%r1174, %r5015, %r1490;
	@%p17 bra 	$L__BB0_672;

	not.pred 	%p405, %p13;
	@%p405 bra 	$L__BB0_670;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r5017, %r1174, %r394;
	mul.wide.s32 	%rd407, %r5017, 4;
	add.s64 	%rd408, %rd31, %rd407;
	st.global.f32 	[%rd408], %f479;

$L__BB0_670:
	not.pred 	%p406, %p15;
	@%p406 bra 	$L__BB0_672;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7107;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r5019, %r1174, %r395;
	mul.wide.s32 	%rd409, %r5019, 4;
	add.s64 	%rd410, %rd31, %rd409;
	st.global.f32 	[%rd410], %f480;

$L__BB0_672:
	@%p17 bra 	$L__BB0_677;

	not.pred 	%p408, %p14;
	@%p408 bra 	$L__BB0_675;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r5021, %r1174, %r408;
	mul.wide.s32 	%rd411, %r5021, 4;
	add.s64 	%rd412, %rd31, %rd411;
	st.global.f32 	[%rd412], %f481;

$L__BB0_675:
	not.pred 	%p409, %p16;
	@%p409 bra 	$L__BB0_677;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7106;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r5023, %r1174, %r409;
	mul.wide.s32 	%rd413, %r5023, 4;
	add.s64 	%rd414, %rd31, %rd413;
	st.global.f32 	[%rd414], %f482;

$L__BB0_677:
	add.s32 	%r5024, %r1147, %r1167;
	mul.lo.s32 	%r5025, %r5024, %r54;
	sub.s32 	%r1175, %r5025, %r1490;
	@%p17 bra 	$L__BB0_682;

	not.pred 	%p411, %p13;
	@%p411 bra 	$L__BB0_680;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r5027, %r1175, %r394;
	mul.wide.s32 	%rd415, %r5027, 4;
	add.s64 	%rd416, %rd31, %rd415;
	st.global.f32 	[%rd416], %f483;

$L__BB0_680:
	not.pred 	%p412, %p15;
	@%p412 bra 	$L__BB0_682;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7105;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r5029, %r1175, %r395;
	mul.wide.s32 	%rd417, %r5029, 4;
	add.s64 	%rd418, %rd31, %rd417;
	st.global.f32 	[%rd418], %f484;

$L__BB0_682:
	@%p17 bra 	$L__BB0_687;

	not.pred 	%p414, %p14;
	@%p414 bra 	$L__BB0_685;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r5031, %r1175, %r408;
	mul.wide.s32 	%rd419, %r5031, 4;
	add.s64 	%rd420, %rd31, %rd419;
	st.global.f32 	[%rd420], %f485;

$L__BB0_685:
	not.pred 	%p415, %p16;
	@%p415 bra 	$L__BB0_687;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7104;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r5033, %r1175, %r409;
	mul.wide.s32 	%rd421, %r5033, 4;
	add.s64 	%rd422, %rd31, %rd421;
	st.global.f32 	[%rd422], %f486;

$L__BB0_687:
	add.s32 	%r5034, %r1163, %r1167;
	mul.lo.s32 	%r5035, %r5034, %r54;
	sub.s32 	%r1176, %r5035, %r1490;
	@%p17 bra 	$L__BB0_692;

	not.pred 	%p417, %p13;
	@%p417 bra 	$L__BB0_690;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1123;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r5037, %r1176, %r394;
	mul.wide.s32 	%rd423, %r5037, 4;
	add.s64 	%rd424, %rd31, %rd423;
	st.global.f32 	[%rd424], %f487;

$L__BB0_690:
	not.pred 	%p418, %p15;
	@%p418 bra 	$L__BB0_692;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1123;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r5039, %r1176, %r395;
	mul.wide.s32 	%rd425, %r5039, 4;
	add.s64 	%rd426, %rd31, %rd425;
	st.global.f32 	[%rd426], %f488;

$L__BB0_692:
	@%p17 bra 	$L__BB0_697;

	not.pred 	%p420, %p14;
	@%p420 bra 	$L__BB0_695;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1124;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r5041, %r1176, %r408;
	mul.wide.s32 	%rd427, %r5041, 4;
	add.s64 	%rd428, %rd31, %rd427;
	st.global.f32 	[%rd428], %f489;

$L__BB0_695:
	not.pred 	%p421, %p16;
	@%p421 bra 	$L__BB0_697;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1124;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r5043, %r1176, %r409;
	mul.wide.s32 	%rd429, %r5043, 4;
	add.s64 	%rd430, %rd31, %rd429;
	st.global.f32 	[%rd430], %f490;

$L__BB0_697:
	add.s32 	%r1177, %r1140, 1;
	add.s32 	%r5044, %r1177, %r1145;
	mad.lo.s32 	%r5046, %r5044, %r53, %r1141;
	mul.lo.s32 	%r5047, %r5046, %r54;
	sub.s32 	%r1178, %r5047, %r1490;
	@%p17 bra 	$L__BB0_702;

	not.pred 	%p423, %p13;
	@%p423 bra 	$L__BB0_700;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f491, low;}

	// end inline asm
	add.s32 	%r5049, %r1178, %r394;
	mul.wide.s32 	%rd431, %r5049, 4;
	add.s64 	%rd432, %rd31, %rd431;
	st.global.f32 	[%rd432], %f491;

$L__BB0_700:
	not.pred 	%p424, %p15;
	@%p424 bra 	$L__BB0_702;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7103;
  cvt.f32.f16 %f492, high;}

	// end inline asm
	add.s32 	%r5051, %r1178, %r395;
	mul.wide.s32 	%rd433, %r5051, 4;
	add.s64 	%rd434, %rd31, %rd433;
	st.global.f32 	[%rd434], %f492;

$L__BB0_702:
	@%p17 bra 	$L__BB0_707;

	not.pred 	%p426, %p14;
	@%p426 bra 	$L__BB0_705;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f493, low;}

	// end inline asm
	add.s32 	%r5053, %r1178, %r408;
	mul.wide.s32 	%rd435, %r5053, 4;
	add.s64 	%rd436, %rd31, %rd435;
	st.global.f32 	[%rd436], %f493;

$L__BB0_705:
	not.pred 	%p427, %p16;
	@%p427 bra 	$L__BB0_707;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7102;
  cvt.f32.f16 %f494, high;}

	// end inline asm
	add.s32 	%r5055, %r1178, %r409;
	mul.wide.s32 	%rd437, %r5055, 4;
	add.s64 	%rd438, %rd31, %rd437;
	st.global.f32 	[%rd438], %f494;

$L__BB0_707:
	add.s32 	%r5057, %r1177, %r1157;
	mul.lo.s32 	%r1179, %r5057, %r53;
	add.s32 	%r5058, %r1141, %r1179;
	mul.lo.s32 	%r5059, %r5058, %r54;
	sub.s32 	%r1180, %r5059, %r1490;
	@%p17 bra 	$L__BB0_712;

	not.pred 	%p429, %p13;
	@%p429 bra 	$L__BB0_710;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f495, low;}

	// end inline asm
	add.s32 	%r5061, %r1180, %r394;
	mul.wide.s32 	%rd439, %r5061, 4;
	add.s64 	%rd440, %rd31, %rd439;
	st.global.f32 	[%rd440], %f495;

$L__BB0_710:
	not.pred 	%p430, %p15;
	@%p430 bra 	$L__BB0_712;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7101;
  cvt.f32.f16 %f496, high;}

	// end inline asm
	add.s32 	%r5063, %r1180, %r395;
	mul.wide.s32 	%rd441, %r5063, 4;
	add.s64 	%rd442, %rd31, %rd441;
	st.global.f32 	[%rd442], %f496;

$L__BB0_712:
	@%p17 bra 	$L__BB0_717;

	not.pred 	%p432, %p14;
	@%p432 bra 	$L__BB0_715;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f497, low;}

	// end inline asm
	add.s32 	%r5065, %r1180, %r408;
	mul.wide.s32 	%rd443, %r5065, 4;
	add.s64 	%rd444, %rd31, %rd443;
	st.global.f32 	[%rd444], %f497;

$L__BB0_715:
	not.pred 	%p433, %p16;
	@%p433 bra 	$L__BB0_717;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7100;
  cvt.f32.f16 %f498, high;}

	// end inline asm
	add.s32 	%r5067, %r1180, %r409;
	mul.wide.s32 	%rd445, %r5067, 4;
	add.s64 	%rd446, %rd31, %rd445;
	st.global.f32 	[%rd446], %f498;

$L__BB0_717:
	add.s32 	%r5068, %r1147, %r1179;
	mul.lo.s32 	%r5069, %r5068, %r54;
	sub.s32 	%r1181, %r5069, %r1490;
	@%p17 bra 	$L__BB0_722;

	not.pred 	%p435, %p13;
	@%p435 bra 	$L__BB0_720;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f499, low;}

	// end inline asm
	add.s32 	%r5071, %r1181, %r394;
	mul.wide.s32 	%rd447, %r5071, 4;
	add.s64 	%rd448, %rd31, %rd447;
	st.global.f32 	[%rd448], %f499;

$L__BB0_720:
	not.pred 	%p436, %p15;
	@%p436 bra 	$L__BB0_722;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7099;
  cvt.f32.f16 %f500, high;}

	// end inline asm
	add.s32 	%r5073, %r1181, %r395;
	mul.wide.s32 	%rd449, %r5073, 4;
	add.s64 	%rd450, %rd31, %rd449;
	st.global.f32 	[%rd450], %f500;

$L__BB0_722:
	@%p17 bra 	$L__BB0_727;

	not.pred 	%p438, %p14;
	@%p438 bra 	$L__BB0_725;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f501, low;}

	// end inline asm
	add.s32 	%r5075, %r1181, %r408;
	mul.wide.s32 	%rd451, %r5075, 4;
	add.s64 	%rd452, %rd31, %rd451;
	st.global.f32 	[%rd452], %f501;

$L__BB0_725:
	not.pred 	%p439, %p16;
	@%p439 bra 	$L__BB0_727;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7098;
  cvt.f32.f16 %f502, high;}

	// end inline asm
	add.s32 	%r5077, %r1181, %r409;
	mul.wide.s32 	%rd453, %r5077, 4;
	add.s64 	%rd454, %rd31, %rd453;
	st.global.f32 	[%rd454], %f502;

$L__BB0_727:
	setp.eq.s32 	%p440, %r35, %r1972;
	@%p440 bra 	$L__BB0_729;

	mad.lo.s32 	%r5080, %r1473, %r35, %r36;
	mov.u32 	%r5081, _ZN6kernel5shmemE;
	mad.lo.s32 	%r5082, %r5080, 1280, %r5081;
	add.s32 	%r5083, %r5082, -256;
	shl.b32 	%r5084, %r40, 4;
	add.s32 	%r5085, %r5083, %r5084;
	st.shared.v4.u32 	[%r5085+256], {%r3604, %r3681, %r1068, %r1074};
	st.shared.v4.u32 	[%r5085+1024], {%r3371, %r3448, %r1014, %r1026};
	shl.b32 	%r5086, %r40, 3;
	add.s32 	%r5087, %r5083, %r5086;
	st.shared.v2.u32 	[%r5087+768], {%r3647, %r3713};

$L__BB0_729:
	setp.eq.s32 	%p441, %r36, %r1977;
	@%p441 bra 	$L__BB0_733;

	not.b32 	%r6869, %r35;
	add.s32 	%r6868, %r1472, %r6869;
	mul.lo.s32 	%r5093, %r1472, %r36;
	mul.lo.s32 	%r5094, %r5093, 384;
	shl.b32 	%r5095, %r36, 6;
	sub.s32 	%r5096, %r5094, %r5095;
	mad.lo.s32 	%r5098, %r1973, %r1972, %r5096;
	mad.lo.s32 	%r5099, %r6868, 384, %r5098;
	shl.b32 	%r5100, %r5099, 2;
	mov.u32 	%r5101, _ZN6kernel5shmemE;
	add.s32 	%r5102, %r5101, %r5100;
	add.s32 	%r5103, %r5102, -256;
	shl.b32 	%r5104, %r40, 4;
	add.s32 	%r5105, %r5103, %r5104;
	st.shared.v4.u32 	[%r5105+256], {%r3525, %r3559, %r1038, %r1050};
	st.shared.v4.u32 	[%r5105+1024], {%r4126, %r4160, %r1123, %r1124};
	shl.b32 	%r5106, %r40, 3;
	add.s32 	%r1186, %r5103, %r5106;
	@%p440 bra 	$L__BB0_732;

	st.shared.v2.u32 	[%r1186], {%r3414, %r3480};

$L__BB0_732:
	st.shared.v2.u32 	[%r1186+768], {%r3985, %r4066};

$L__BB0_733:
	bar.sync 	0;
	@%p246 bra 	$L__BB0_735;

	mul.lo.s32 	%r5107, %r1473, 320;
	add.s32 	%r5109, %r35, -1;
	mul.lo.s32 	%r5111, %r36, 320;
	mad.lo.s32 	%r5112, %r5107, %r5109, %r5111;
	shl.b32 	%r5113, %r5112, 2;
	mov.u32 	%r5114, _ZN6kernel5shmemE;
	add.s32 	%r5115, %r5114, %r5113;
	add.s32 	%r5116, %r5115, -256;
	shl.b32 	%r5117, %r40, 4;
	add.s32 	%r5118, %r5116, %r5117;
	ld.shared.v4.u32 	{%r7302, %r7300, %r7296, %r7295}, [%r5118+256];
	ld.shared.v4.u32 	{%r7304, %r7303, %r7298, %r7297}, [%r5118+1024];
	shl.b32 	%r5127, %r40, 3;
	add.s32 	%r5128, %r5116, %r5127;
	ld.shared.v2.u32 	{%r7301, %r7299}, [%r5128+768];

$L__BB0_735:
	setp.eq.s32 	%p487, %r36, 0;
	@%p487 bra 	$L__BB0_738;

	not.b32 	%r6871, %r35;
	add.s32 	%r6870, %r1472, %r6871;
	mad.lo.s32 	%r5134, %r1472, 384, -64;
	add.s32 	%r5136, %r36, -1;
	mul.lo.s32 	%r5137, %r5134, %r5136;
	mad.lo.s32 	%r5140, %r1973, %r1972, %r5137;
	mad.lo.s32 	%r5141, %r6870, 384, %r5140;
	shl.b32 	%r5142, %r5141, 2;
	mov.u32 	%r5143, _ZN6kernel5shmemE;
	add.s32 	%r5144, %r5143, %r5142;
	add.s32 	%r5145, %r5144, -256;
	shl.b32 	%r5146, %r40, 4;
	add.s32 	%r5147, %r5145, %r5146;
	ld.shared.v4.u32 	{%r7316, %r7315, %r7313, %r7311}, [%r5147+256];
	ld.shared.v4.u32 	{%r7310, %r7309, %r7307, %r7305}, [%r5147+1024];
	shl.b32 	%r5156, %r40, 3;
	add.s32 	%r5157, %r5145, %r5156;
	ld.shared.v2.u32 	{%r7314, %r7312}, [%r5157+768];
	@%p246 bra 	$L__BB0_738;

	add.s32 	%r6867, %r5157, 768;
	ld.shared.v2.u32 	{%r7308, %r7306}, [%r6867+768];

$L__BB0_738:
	mov.f32 	%f550, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5162, {low,high};}

	// end inline asm
	selp.b32 	%r5164, %r6969, %r5162, %p17;
	// begin inline asm
	{mul.f16x2 %r5163,%r5164,%r7094;
}
	// end inline asm
	selp.b32 	%r5167, %r6973, %r5162, %p17;
	// begin inline asm
	{mul.f16x2 %r5166,%r5167,%r7087;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5169, {low,high};}

	// end inline asm
	selp.b32 	%r5171, %r6969, %r5169, %p17;
	// begin inline asm
	{mul.f16x2 %r5170,%r5171,%r7075;
}
	// end inline asm
	selp.b32 	%r5174, %r6973, %r5169, %p17;
	// begin inline asm
	{mul.f16x2 %r5173,%r5174,%r7070;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5176, {low,high};}

	// end inline asm
	selp.b32 	%r5178, %r6969, %r5176, %p17;
	// begin inline asm
	{mul.f16x2 %r5177,%r5178,%r7062;
}
	// end inline asm
	selp.b32 	%r5181, %r6973, %r5176, %p17;
	// begin inline asm
	{mul.f16x2 %r5180,%r5181,%r7061;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5183, {low,high};}

	// end inline asm
	selp.b32 	%r5185, %r6969, %r5183, %p17;
	// begin inline asm
	{mul.f16x2 %r5184,%r5185,%r7066;
}
	// end inline asm
	selp.b32 	%r5188, %r6973, %r5183, %p17;
	// begin inline asm
	{mul.f16x2 %r5187,%r5188,%r7065;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5190, {low,high};}

	// end inline asm
	selp.b32 	%r5192, %r6969, %r5190, %p17;
	// begin inline asm
	{mul.f16x2 %r5191,%r5192,%r7064;
}
	// end inline asm
	selp.b32 	%r5195, %r6973, %r5190, %p17;
	// begin inline asm
	{mul.f16x2 %r5194,%r5195,%r7058;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5197, {low,high};}

	// end inline asm
	selp.b32 	%r5199, %r6969, %r5197, %p17;
	// begin inline asm
	{mul.f16x2 %r5198,%r5199,%r7054;
}
	// end inline asm
	selp.b32 	%r5202, %r6973, %r5197, %p17;
	// begin inline asm
	{mul.f16x2 %r5201,%r5202,%r7053;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5204, {low,high};}

	// end inline asm
	selp.b32 	%r5206, %r6969, %r5204, %p17;
	// begin inline asm
	{mul.f16x2 %r5205,%r5206,%r7052;
}
	// end inline asm
	selp.b32 	%r5209, %r6973, %r5204, %p17;
	// begin inline asm
	{mul.f16x2 %r5208,%r5209,%r7046;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5211, {low,high};}

	// end inline asm
	selp.b32 	%r5213, %r6969, %r5211, %p17;
	// begin inline asm
	{mul.f16x2 %r5212,%r5213,%r7039;
}
	// end inline asm
	selp.b32 	%r5216, %r6973, %r5211, %p17;
	// begin inline asm
	{mul.f16x2 %r5215,%r5216,%r7038;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5218, {low,high};}

	// end inline asm
	selp.b32 	%r5220, %r6969, %r5218, %p17;
	// begin inline asm
	{mul.f16x2 %r5219,%r5220,%r7258;
}
	// end inline asm
	selp.b32 	%r5223, %r6973, %r5218, %p17;
	// begin inline asm
	{mul.f16x2 %r5222,%r5223,%r7256;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5225, {low,high};}

	// end inline asm
	selp.b32 	%r5227, %r6969, %r5225, %p17;
	// begin inline asm
	{mul.f16x2 %r5226,%r5227,%r7257;
}
	// end inline asm
	selp.b32 	%r5230, %r6973, %r5225, %p17;
	// begin inline asm
	{mul.f16x2 %r5229,%r5230,%r7255;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5232, {low,high};}

	// end inline asm
	selp.b32 	%r5234, %r6969, %r5232, %p17;
	// begin inline asm
	{mul.f16x2 %r5233,%r5234,%r7031;
}
	// end inline asm
	selp.b32 	%r5237, %r6973, %r5232, %p17;
	// begin inline asm
	{mul.f16x2 %r5236,%r5237,%r7030;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5239, {low,high};}

	// end inline asm
	selp.b32 	%r5241, %r6969, %r5239, %p17;
	// begin inline asm
	{mul.f16x2 %r5240,%r5241,%r7035;
}
	// end inline asm
	selp.b32 	%r5244, %r6973, %r5239, %p17;
	// begin inline asm
	{mul.f16x2 %r5243,%r5244,%r7034;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5246, {low,high};}

	// end inline asm
	selp.b32 	%r5248, %r6969, %r5246, %p17;
	// begin inline asm
	{mul.f16x2 %r5247,%r5248,%r7033;
}
	// end inline asm
	selp.b32 	%r5251, %r6973, %r5246, %p17;
	// begin inline asm
	{mul.f16x2 %r5250,%r5251,%r7028;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5253, {low,high};}

	// end inline asm
	selp.b32 	%r5255, %r6969, %r5253, %p17;
	// begin inline asm
	{mul.f16x2 %r5254,%r5255,%r7023;
}
	// end inline asm
	selp.b32 	%r5258, %r6973, %r5253, %p17;
	// begin inline asm
	{mul.f16x2 %r5257,%r5258,%r7022;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5260, {low,high};}

	// end inline asm
	selp.b32 	%r5262, %r6969, %r5260, %p17;
	// begin inline asm
	{mul.f16x2 %r5261,%r5262,%r7025;
}
	// end inline asm
	selp.b32 	%r5265, %r6973, %r5260, %p17;
	// begin inline asm
	{mul.f16x2 %r5264,%r5265,%r7024;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5267, {low,high};}

	// end inline asm
	selp.b32 	%r5269, %r6969, %r5267, %p17;
	// begin inline asm
	{mul.f16x2 %r5268,%r5269,%r7242;
}
	// end inline asm
	selp.b32 	%r5272, %r6973, %r5267, %p17;
	// begin inline asm
	{mul.f16x2 %r5271,%r5272,%r7241;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5274, {low,high};}

	// end inline asm
	selp.b32 	%r5276, %r6969, %r5274, %p17;
	// begin inline asm
	{mul.f16x2 %r5275,%r5276,%r7240;
}
	// end inline asm
	selp.b32 	%r5279, %r6973, %r5274, %p17;
	// begin inline asm
	{mul.f16x2 %r5278,%r5279,%r7239;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5281, {low,high};}

	// end inline asm
	selp.b32 	%r5283, %r6969, %r5281, %p17;
	// begin inline asm
	{mul.f16x2 %r5282,%r5283,%r7254;
}
	// end inline asm
	selp.b32 	%r5286, %r6973, %r5281, %p17;
	// begin inline asm
	{mul.f16x2 %r5285,%r5286,%r7253;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5288, {low,high};}

	// end inline asm
	selp.b32 	%r5290, %r6969, %r5288, %p17;
	// begin inline asm
	{mul.f16x2 %r5289,%r5290,%r7017;
}
	// end inline asm
	selp.b32 	%r5293, %r6973, %r5288, %p17;
	// begin inline asm
	{mul.f16x2 %r5292,%r5293,%r7016;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5295, {low,high};}

	// end inline asm
	selp.b32 	%r5297, %r6969, %r5295, %p17;
	// begin inline asm
	{mul.f16x2 %r5296,%r5297,%r7252;
}
	// end inline asm
	selp.b32 	%r5300, %r6973, %r5295, %p17;
	// begin inline asm
	{mul.f16x2 %r5299,%r5300,%r7250;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5302, {low,high};}

	// end inline asm
	selp.b32 	%r5304, %r6969, %r5302, %p17;
	// begin inline asm
	{mul.f16x2 %r5303,%r5304,%r7251;
}
	// end inline asm
	selp.b32 	%r5307, %r6973, %r5302, %p17;
	// begin inline asm
	{mul.f16x2 %r5306,%r5307,%r7249;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5309, {low,high};}

	// end inline asm
	selp.b32 	%r5311, %r6969, %r5309, %p17;
	// begin inline asm
	{mul.f16x2 %r5310,%r5311,%r7238;
}
	// end inline asm
	selp.b32 	%r5314, %r6973, %r5309, %p17;
	// begin inline asm
	{mul.f16x2 %r5313,%r5314,%r7236;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5316, {low,high};}

	// end inline asm
	selp.b32 	%r5318, %r6969, %r5316, %p17;
	// begin inline asm
	{mul.f16x2 %r5317,%r5318,%r7237;
}
	// end inline asm
	selp.b32 	%r5321, %r6973, %r5316, %p17;
	// begin inline asm
	{mul.f16x2 %r5320,%r5321,%r7235;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f550;
  cvt.rn.f16.f32 high, %f550;
  mov.b32 %r5323, {low,high};}

	// end inline asm
	selp.b32 	%r5325, %r6969, %r5323, %p17;
	// begin inline asm
	{mul.f16x2 %r5324,%r5325,%r7248;
}
	// end inline asm
	selp.b32 	%r5328, %r6973, %r5323, %p17;
	// begin inline asm
	{mul.f16x2 %r5327,%r5328,%r7247;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5330,%r7121,%r3414;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5333,%r3525,%r3371;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5336,%r5330,%r5333;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5339,%r6881,%r5336;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5342,%r5163,%r5339;
}
	// end inline asm
	selp.b32 	%r7089, %r5163, %r5342, %p17;
	// begin inline asm
	{sub.f16x2 %r5345,%r7120,%r3480;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5348,%r3559,%r3448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5351,%r5345,%r5348;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5354,%r6881,%r5351;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5357,%r5166,%r5354;
}
	// end inline asm
	selp.b32 	%r7084, %r5166, %r5357, %p17;
	// begin inline asm
	{sub.f16x2 %r5360,%r7117,%r3647;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5363,%r7123,%r3604;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5366,%r5360,%r5363;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5369,%r6881,%r5366;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5372,%r5170,%r5369;
}
	// end inline asm
	selp.b32 	%r7093, %r5170, %r5372, %p17;
	// begin inline asm
	{sub.f16x2 %r5375,%r7116,%r3713;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5378,%r7122,%r3681;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5381,%r5375,%r5378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5384,%r6881,%r5381;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5387,%r5173,%r5384;
}
	// end inline asm
	selp.b32 	%r7086, %r5173, %r5387, %p17;
	// begin inline asm
	{sub.f16x2 %r5390,%r7120,%r7121;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5393,%r6968,%r5390;
}
	// end inline asm
	@%p17 bra 	$L__BB0_740;
	bra.uni 	$L__BB0_739;

$L__BB0_740:
	// begin inline asm
	{neg.f16x2 %r7317,%r5177;
}
	// end inline asm
	bra.uni 	$L__BB0_741;

$L__BB0_739:
	// begin inline asm
	{mul.f16x2 %r7317,%r6969,%r5390;
}
	// end inline asm

$L__BB0_741:
	mov.u32 	%r5404, 31;
	mov.u32 	%r5406, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5402,%r7317,%r5404,%r2068,%r5406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5407,%r5393,%r5402;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5410,%r1038,%r1014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5413,%r5410,%r5407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5416,%r6881,%r5413;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7091,%r5177,%r5416;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5422,%r7122,%r7123;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5425,%r6968,%r5422;
}
	// end inline asm
	mov.u32 	%r7318, %r5184;
	@%p17 bra 	$L__BB0_743;

	// begin inline asm
	{mul.f16x2 %r7318,%r6969,%r5422;
}
	// end inline asm

$L__BB0_743:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5434,%r7318,%r5404,%r2068,%r5406;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5439,%r5425,%r5434;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5442,%r7111,%r1014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5445,%r5439,%r5442;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5448,%r6881,%r5445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r5184,%r5448;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5454,%r7113,%r7121;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5457,%r7119,%r7123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5460,%r5454,%r5457;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5463,%r6881,%r5460;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5466,%r5191,%r5463;
}
	// end inline asm
	selp.b32 	%r7094, %r5191, %r5466, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7121;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5471,%r7121,%r429,%r2068,%r5406;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5471;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5477, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5478,%r5477,%r7120;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5481,%r6972,%r5478;
}
	// end inline asm
	@%p17 bra 	$L__BB0_745;
	bra.uni 	$L__BB0_744;

$L__BB0_745:
	// begin inline asm
	{neg.f16x2 %r7319,%r5180;
}
	// end inline asm
	bra.uni 	$L__BB0_746;

$L__BB0_744:
	// begin inline asm
	{mul.f16x2 %r7319,%r6973,%r5478;
}
	// end inline asm

$L__BB0_746:
	mov.u32 	%r5496, 31;
	mov.u32 	%r5520, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5494,%r7319,%r5496,%r2068,%r5520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5499,%r5481,%r5494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5502,%r1050,%r1026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5505,%r5502,%r5499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5508,%r6881,%r5505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7090,%r5180,%r5508;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7123;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5516,%r7123,%r429,%r2068,%r5520;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5516;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5522, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5523,%r5522,%r7122;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5526,%r6972,%r5523;
}
	// end inline asm
	mov.u32 	%r7320, %r5187;
	@%p17 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r7320,%r6973,%r5523;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5537,%r7320,%r5496,%r2068,%r5520;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5542,%r5526,%r5537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5545,%r7110,%r1026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5548,%r5542,%r5545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5551,%r6881,%r5548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7095,%r5187,%r5551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5557,%r7112,%r7120;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r7118,%r7122;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5563,%r5557,%r5560;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5566,%r6881,%r5563;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5569,%r5194,%r5566;
}
	// end inline asm
	selp.b32 	%r7087, %r5194, %r5569, %p17;
	// begin inline asm
	{sub.f16x2 %r5572,%r7118,%r7119;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5575,%r6968,%r5572;
}
	// end inline asm
	mov.u32 	%r7321, %r5198;
	@%p17 bra 	$L__BB0_750;

	// begin inline asm
	{mul.f16x2 %r7321,%r6969,%r5572;
}
	// end inline asm

$L__BB0_750:
	mov.u32 	%r5586, 31;
	mov.u32 	%r5625, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5584,%r7321,%r5586,%r2068,%r5625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5589,%r5575,%r5584;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5592,%r7105,%r1038;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5595,%r5589,%r5592;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5598,%r6881,%r5595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7082,%r5198,%r5598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5604,%r7107,%r3985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5607,%r4126,%r7119;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5610,%r5604,%r5607;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5613,%r6881,%r5610;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5616,%r5205,%r5613;
}
	// end inline asm
	selp.b32 	%r7080, %r5205, %r5616, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7119;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5621,%r7119,%r429,%r2068,%r5625;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5621;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5627, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5628,%r5627,%r7118;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5631,%r6972,%r5628;
}
	// end inline asm
	mov.u32 	%r7322, %r5201;
	@%p17 bra 	$L__BB0_752;

	// begin inline asm
	{mul.f16x2 %r7322,%r6973,%r5628;
}
	// end inline asm

$L__BB0_752:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5642,%r7322,%r5586,%r2068,%r5625;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5647,%r5631,%r5642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5650,%r7104,%r1050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5653,%r5647,%r5650;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5656,%r6881,%r5653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r5201,%r5656;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5662,%r7106,%r4066;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5665,%r4160,%r7118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5668,%r5662,%r5665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5671,%r6881,%r5668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5674,%r5208,%r5671;
}
	// end inline asm
	selp.b32 	%r7078, %r5208, %r5674, %p17;
	// begin inline asm
	{sub.f16x2 %r5677,%r7116,%r7117;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5680,%r6968,%r5677;
}
	// end inline asm
	@%p17 bra 	$L__BB0_754;
	bra.uni 	$L__BB0_753;

$L__BB0_754:
	// begin inline asm
	{neg.f16x2 %r7323,%r5212;
}
	// end inline asm
	bra.uni 	$L__BB0_755;

$L__BB0_753:
	// begin inline asm
	{mul.f16x2 %r7323,%r6969,%r5677;
}
	// end inline asm

$L__BB0_755:
	mov.u32 	%r5693, 31;
	mov.u32 	%r5695, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5691,%r7323,%r5693,%r2068,%r5695;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5696,%r5680,%r5691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5699,%r7111,%r1068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5702,%r5699,%r5696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5705,%r6881,%r5702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7072,%r5212,%r5705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5711,%r7315,%r7316;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5714,%r6968,%r5711;
}
	// end inline asm
	mov.u32 	%r7324, %r5219;
	@%p17 bra 	$L__BB0_757;

	// begin inline asm
	{mul.f16x2 %r7324,%r6969,%r5711;
}
	// end inline asm

$L__BB0_757:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5723,%r7324,%r5693,%r2068,%r5695;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5728,%r5714,%r5723;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5731,%r7313,%r1068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5734,%r5728,%r5731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5737,%r6881,%r5734;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7077,%r5219,%r5737;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5743,%r7314,%r7117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5746,%r7115,%r7316;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5749,%r5743,%r5746;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5752,%r6881,%r5749;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5755,%r5226,%r5752;
}
	// end inline asm
	selp.b32 	%r7075, %r5226, %r5755, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7117;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5760,%r7117,%r429,%r2068,%r5695;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5760;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5766, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5767,%r5766,%r7116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5770,%r6972,%r5767;
}
	// end inline asm
	@%p17 bra 	$L__BB0_759;
	bra.uni 	$L__BB0_758;

$L__BB0_759:
	// begin inline asm
	{neg.f16x2 %r7325,%r5215;
}
	// end inline asm
	bra.uni 	$L__BB0_760;

$L__BB0_758:
	// begin inline asm
	{mul.f16x2 %r7325,%r6973,%r5767;
}
	// end inline asm

$L__BB0_760:
	mov.u32 	%r5785, 31;
	mov.u32 	%r5809, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5783,%r7325,%r5785,%r2068,%r5809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5788,%r5770,%r5783;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5791,%r7110,%r1074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5794,%r5791,%r5788;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5797,%r6881,%r5794;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7071,%r5215,%r5797;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7316;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5805,%r7316,%r429,%r2068,%r5809;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5805;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5811, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5812,%r5811,%r7315;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5815,%r6972,%r5812;
}
	// end inline asm
	mov.u32 	%r7326, %r5222;
	@%p17 bra 	$L__BB0_762;

	// begin inline asm
	{mul.f16x2 %r7326,%r6973,%r5812;
}
	// end inline asm

$L__BB0_762:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5826,%r7326,%r5785,%r2068,%r5809;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5831,%r5815,%r5826;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5834,%r7311,%r1074;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5837,%r5831,%r5834;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5840,%r6881,%r5837;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7076,%r5222,%r5840;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5846,%r7312,%r7116;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5849,%r7114,%r7315;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5852,%r5846,%r5849;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5855,%r6881,%r5852;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5858,%r5229,%r5855;
}
	// end inline asm
	selp.b32 	%r7070, %r5229, %r5858, %p17;
	// begin inline asm
	{sub.f16x2 %r5861,%r7112,%r7113;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5864,%r6968,%r5861;
}
	// end inline asm
	@%p17 bra 	$L__BB0_764;
	bra.uni 	$L__BB0_763;

$L__BB0_764:
	// begin inline asm
	{neg.f16x2 %r7327,%r5233;
}
	// end inline asm
	bra.uni 	$L__BB0_765;

$L__BB0_763:
	// begin inline asm
	{mul.f16x2 %r7327,%r6969,%r5861;
}
	// end inline asm

$L__BB0_765:
	mov.u32 	%r5877, 31;
	mov.u32 	%r5879, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5875,%r7327,%r5877,%r2068,%r5879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5880,%r5864,%r5875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5883,%r7105,%r7111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5886,%r5883,%r5880;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5889,%r6881,%r5886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7062,%r5233,%r5889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5895,%r7114,%r7115;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5898,%r6968,%r5895;
}
	// end inline asm
	mov.u32 	%r7328, %r5240;
	@%p17 bra 	$L__BB0_767;

	// begin inline asm
	{mul.f16x2 %r7328,%r6969,%r5895;
}
	// end inline asm

$L__BB0_767:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5907,%r7328,%r5877,%r2068,%r5879;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5912,%r5898,%r5907;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5915,%r7101,%r7111;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5918,%r5912,%r5915;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5921,%r6881,%r5918;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r5240,%r5921;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5927,%r7103,%r7113;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5930,%r7109,%r7115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5933,%r5927,%r5930;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5936,%r6881,%r5933;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5939,%r5247,%r5936;
}
	// end inline asm
	selp.b32 	%r7064, %r5247, %r5939, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7113;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5944,%r7113,%r429,%r2068,%r5879;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5944;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5950, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5951,%r5950,%r7112;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5954,%r6972,%r5951;
}
	// end inline asm
	@%p17 bra 	$L__BB0_769;
	bra.uni 	$L__BB0_768;

$L__BB0_769:
	// begin inline asm
	{neg.f16x2 %r7329,%r5236;
}
	// end inline asm
	bra.uni 	$L__BB0_770;

$L__BB0_768:
	// begin inline asm
	{mul.f16x2 %r7329,%r6973,%r5951;
}
	// end inline asm

$L__BB0_770:
	mov.u32 	%r5969, 31;
	mov.u32 	%r5993, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5967,%r7329,%r5969,%r2068,%r5993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5972,%r5954,%r5967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5975,%r7104,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5978,%r5975,%r5972;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5981,%r6881,%r5978;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7061,%r5236,%r5981;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7115;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5989,%r7115,%r429,%r2068,%r5993;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5989;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5995, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5996,%r5995,%r7114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5999,%r6972,%r5996;
}
	// end inline asm
	mov.u32 	%r7330, %r5243;
	@%p17 bra 	$L__BB0_772;

	// begin inline asm
	{mul.f16x2 %r7330,%r6973,%r5996;
}
	// end inline asm

$L__BB0_772:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6010,%r7330,%r5969,%r2068,%r5993;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6015,%r5999,%r6010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6018,%r7100,%r7110;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r6015,%r6018;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6024,%r6881,%r6021;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7065,%r5243,%r6024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6030,%r7102,%r7112;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6033,%r7108,%r7114;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6036,%r6030,%r6033;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6039,%r6881,%r6036;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6042,%r5250,%r6039;
}
	// end inline asm
	selp.b32 	%r7058, %r5250, %r6042, %p17;
	// begin inline asm
	{sub.f16x2 %r6045,%r7106,%r7107;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6048,%r6968,%r6045;
}
	// end inline asm
	@%p17 bra 	$L__BB0_774;
	bra.uni 	$L__BB0_773;

$L__BB0_774:
	// begin inline asm
	{neg.f16x2 %r7331,%r5254;
}
	// end inline asm
	bra.uni 	$L__BB0_775;

$L__BB0_773:
	// begin inline asm
	{mul.f16x2 %r7331,%r6969,%r6045;
}
	// end inline asm

$L__BB0_775:
	mov.u32 	%r6061, 31;
	mov.u32 	%r6063, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6059,%r7331,%r6061,%r2068,%r6063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6064,%r6048,%r6059;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6067,%r1123,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6070,%r6067,%r6064;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6073,%r6881,%r6070;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7050,%r5254,%r6073;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6079,%r7108,%r7109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6082,%r6968,%r6079;
}
	// end inline asm
	mov.u32 	%r7332, %r5261;
	@%p17 bra 	$L__BB0_777;

	// begin inline asm
	{mul.f16x2 %r7332,%r6969,%r6079;
}
	// end inline asm

$L__BB0_777:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6091,%r7332,%r6061,%r2068,%r6063;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6096,%r6082,%r6091;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6099,%r7099,%r7105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6102,%r6096,%r6099;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6105,%r6881,%r6102;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7054,%r5261,%r6105;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6111,%r7301,%r7107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6114,%r7304,%r7109;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6117,%r6111,%r6114;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6120,%r6881,%r6117;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6123,%r5268,%r6120;
}
	// end inline asm
	selp.b32 	%r7052, %r5268, %r6123, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7107;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6128,%r7107,%r429,%r2068,%r6063;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6128;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6134, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6135,%r6134,%r7106;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6138,%r6972,%r6135;
}
	// end inline asm
	@%p17 bra 	$L__BB0_779;
	bra.uni 	$L__BB0_778;

$L__BB0_779:
	// begin inline asm
	{neg.f16x2 %r7333,%r5257;
}
	// end inline asm
	bra.uni 	$L__BB0_780;

$L__BB0_778:
	// begin inline asm
	{mul.f16x2 %r7333,%r6973,%r6135;
}
	// end inline asm

$L__BB0_780:
	mov.u32 	%r6153, 31;
	mov.u32 	%r6177, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6151,%r7333,%r6153,%r2068,%r6177;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6156,%r6138,%r6151;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6159,%r1124,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6162,%r6159,%r6156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6165,%r6881,%r6162;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7049,%r5257,%r6165;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7109;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6173,%r7109,%r429,%r2068,%r6177;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6173;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6179, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6180,%r6179,%r7108;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6183,%r6972,%r6180;
}
	// end inline asm
	mov.u32 	%r7334, %r5264;
	@%p17 bra 	$L__BB0_782;

	// begin inline asm
	{mul.f16x2 %r7334,%r6973,%r6180;
}
	// end inline asm

$L__BB0_782:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6194,%r7334,%r6153,%r2068,%r6177;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6199,%r6183,%r6194;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r7098,%r7104;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6205,%r6199,%r6202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6208,%r6881,%r6205;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7053,%r5264,%r6208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6214,%r7299,%r7106;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6217,%r7303,%r7108;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6220,%r6214,%r6217;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6223,%r6881,%r6220;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6226,%r5271,%r6223;
}
	// end inline asm
	selp.b32 	%r7046, %r5271, %r6226, %p17;
	// begin inline asm
	{sub.f16x2 %r6229,%r7303,%r7304;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6232,%r6968,%r6229;
}
	// end inline asm
	mov.u32 	%r7335, %r5275;
	@%p17 bra 	$L__BB0_784;

	// begin inline asm
	{mul.f16x2 %r7335,%r6969,%r6229;
}
	// end inline asm

$L__BB0_784:
	mov.u32 	%r6243, 31;
	mov.u32 	%r6267, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6241,%r7335,%r6243,%r2068,%r6267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6246,%r6232,%r6241;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6249,%r7298,%r1123;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6252,%r6246,%r6249;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6255,%r6881,%r6252;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7043,%r5275,%r6255;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7304;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6263,%r7304,%r429,%r2068,%r6267;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6263;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6269, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6270,%r6269,%r7303;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6273,%r6972,%r6270;
}
	// end inline asm
	mov.u32 	%r7336, %r5278;
	@%p17 bra 	$L__BB0_786;

	// begin inline asm
	{mul.f16x2 %r7336,%r6973,%r6270;
}
	// end inline asm

$L__BB0_786:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6284,%r7336,%r6243,%r2068,%r6267;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6289,%r6273,%r6284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6292,%r7297,%r1124;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6295,%r6289,%r6292;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6298,%r6881,%r6295;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7042,%r5278,%r6298;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6304,%r7312,%r7314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6307,%r6968,%r6304;
}
	// end inline asm
	@%p17 bra 	$L__BB0_788;
	bra.uni 	$L__BB0_787;

$L__BB0_788:
	// begin inline asm
	{neg.f16x2 %r7337,%r5282;
}
	// end inline asm
	bra.uni 	$L__BB0_789;

$L__BB0_787:
	// begin inline asm
	{mul.f16x2 %r7337,%r6969,%r6304;
}
	// end inline asm

$L__BB0_789:
	mov.u32 	%r6320, 31;
	mov.u32 	%r6344, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6318,%r7337,%r6320,%r2068,%r6344;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6323,%r6307,%r6318;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6326,%r7101,%r7313;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6329,%r6326,%r6323;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6332,%r6881,%r6329;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7039,%r5282,%r6332;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7314;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6340,%r7314,%r429,%r2068,%r6344;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6340;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6346, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6347,%r6346,%r7312;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6350,%r6972,%r6347;
}
	// end inline asm
	@%p17 bra 	$L__BB0_791;
	bra.uni 	$L__BB0_790;

$L__BB0_791:
	// begin inline asm
	{neg.f16x2 %r7338,%r5285;
}
	// end inline asm
	bra.uni 	$L__BB0_792;

$L__BB0_790:
	// begin inline asm
	{mul.f16x2 %r7338,%r6973,%r6347;
}
	// end inline asm

$L__BB0_792:
	mov.u32 	%r6365, 31;
	mov.u32 	%r6367, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6363,%r7338,%r6365,%r2068,%r6367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6368,%r6350,%r6363;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6371,%r7100,%r7311;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6374,%r6371,%r6368;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6377,%r6881,%r6374;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7038,%r5285,%r6377;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6383,%r7102,%r7103;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6386,%r6968,%r6383;
}
	// end inline asm
	@%p17 bra 	$L__BB0_794;
	bra.uni 	$L__BB0_793;

$L__BB0_794:
	// begin inline asm
	{neg.f16x2 %r7339,%r5289;
}
	// end inline asm
	bra.uni 	$L__BB0_795;

$L__BB0_793:
	// begin inline asm
	{mul.f16x2 %r7339,%r6969,%r6383;
}
	// end inline asm

$L__BB0_795:
	mov.u32 	%r6399, 31;
	mov.u32 	%r6401, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6397,%r7339,%r6399,%r2068,%r6401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6402,%r6386,%r6397;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6405,%r7099,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6408,%r6405,%r6402;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6411,%r6881,%r6408;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7031,%r5289,%r6411;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6417,%r7309,%r7310;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6420,%r6968,%r6417;
}
	// end inline asm
	mov.u32 	%r7340, %r5296;
	@%p17 bra 	$L__BB0_797;

	// begin inline asm
	{mul.f16x2 %r7340,%r6969,%r6417;
}
	// end inline asm

$L__BB0_797:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6429,%r7340,%r6399,%r2068,%r6401;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6434,%r6420,%r6429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6437,%r7307,%r7101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6440,%r6434,%r6437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6443,%r6881,%r6440;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7035,%r5296,%r6443;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6449,%r7308,%r7103;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6452,%r7302,%r7310;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6455,%r6449,%r6452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6458,%r6881,%r6455;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6461,%r5303,%r6458;
}
	// end inline asm
	selp.b32 	%r7033, %r5303, %r6461, %p17;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7103;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6466,%r7103,%r429,%r2068,%r6401;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6466;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6472, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6473,%r6472,%r7102;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6476,%r6972,%r6473;
}
	// end inline asm
	@%p17 bra 	$L__BB0_799;
	bra.uni 	$L__BB0_798;

$L__BB0_799:
	// begin inline asm
	{neg.f16x2 %r7341,%r5292;
}
	// end inline asm
	bra.uni 	$L__BB0_800;

$L__BB0_798:
	// begin inline asm
	{mul.f16x2 %r7341,%r6973,%r6473;
}
	// end inline asm

$L__BB0_800:
	mov.u32 	%r6491, 31;
	mov.u32 	%r6515, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6489,%r7341,%r6491,%r2068,%r6515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6494,%r6476,%r6489;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6497,%r7098,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6500,%r6497,%r6494;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6503,%r6881,%r6500;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7030,%r5292,%r6503;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7310;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6511,%r7310,%r429,%r2068,%r6515;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6511;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6517, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6518,%r6517,%r7309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6521,%r6972,%r6518;
}
	// end inline asm
	mov.u32 	%r7342, %r5299;
	@%p17 bra 	$L__BB0_802;

	// begin inline asm
	{mul.f16x2 %r7342,%r6973,%r6518;
}
	// end inline asm

$L__BB0_802:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6532,%r7342,%r6491,%r2068,%r6515;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6537,%r6521,%r6532;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6540,%r7305,%r7100;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6543,%r6537,%r6540;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6546,%r6881,%r6543;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7034,%r5299,%r6546;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6552,%r7306,%r7102;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6555,%r7300,%r7309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6558,%r6552,%r6555;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6561,%r6881,%r6558;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6564,%r5306,%r6561;
}
	// end inline asm
	selp.b32 	%r7028, %r5306, %r6564, %p17;
	// begin inline asm
	{sub.f16x2 %r6567,%r7299,%r7301;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6570,%r6968,%r6567;
}
	// end inline asm
	@%p17 bra 	$L__BB0_804;
	bra.uni 	$L__BB0_803;

$L__BB0_804:
	// begin inline asm
	{neg.f16x2 %r7343,%r5310;
}
	// end inline asm
	bra.uni 	$L__BB0_805;

$L__BB0_803:
	// begin inline asm
	{mul.f16x2 %r7343,%r6969,%r6567;
}
	// end inline asm

$L__BB0_805:
	mov.u32 	%r6583, 31;
	mov.u32 	%r6585, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6581,%r7343,%r6583,%r2068,%r6585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6586,%r6570,%r6581;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6589,%r7298,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6592,%r6589,%r6586;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6595,%r6881,%r6592;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r5310,%r6595;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6601,%r7300,%r7302;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6604,%r6968,%r6601;
}
	// end inline asm
	mov.u32 	%r7344, %r5317;
	@%p17 bra 	$L__BB0_807;

	// begin inline asm
	{mul.f16x2 %r7344,%r6969,%r6601;
}
	// end inline asm

$L__BB0_807:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6613,%r7344,%r6583,%r2068,%r6585;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6618,%r6604,%r6613;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6621,%r7296,%r7099;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6624,%r6618,%r6621;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6627,%r6881,%r6624;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7025,%r5317,%r6627;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7301;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6635,%r7301,%r429,%r2068,%r6585;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6635;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6641, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6642,%r6641,%r7299;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6645,%r6972,%r6642;
}
	// end inline asm
	@%p17 bra 	$L__BB0_809;
	bra.uni 	$L__BB0_808;

$L__BB0_809:
	// begin inline asm
	{neg.f16x2 %r7345,%r5313;
}
	// end inline asm
	bra.uni 	$L__BB0_810;

$L__BB0_808:
	// begin inline asm
	{mul.f16x2 %r7345,%r6973,%r6642;
}
	// end inline asm

$L__BB0_810:
	mov.u32 	%r6660, 31;
	mov.u32 	%r6684, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6658,%r7345,%r6660,%r2068,%r6684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6663,%r6645,%r6658;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6666,%r7297,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6669,%r6666,%r6663;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6672,%r6881,%r6669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7022,%r5313,%r6672;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7302;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6680,%r7302,%r429,%r2068,%r6684;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6680;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6686, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6687,%r6686,%r7300;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6690,%r6972,%r6687;
}
	// end inline asm
	mov.u32 	%r7346, %r5320;
	@%p17 bra 	$L__BB0_812;

	// begin inline asm
	{mul.f16x2 %r7346,%r6973,%r6687;
}
	// end inline asm

$L__BB0_812:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6701,%r7346,%r6660,%r2068,%r6684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6706,%r6690,%r6701;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6709,%r7295,%r7098;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6712,%r6706,%r6709;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6715,%r6881,%r6712;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r5320,%r6715;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6721,%r7306,%r7308;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6724,%r6968,%r6721;
}
	// end inline asm
	@%p17 bra 	$L__BB0_814;
	bra.uni 	$L__BB0_813;

$L__BB0_814:
	// begin inline asm
	{neg.f16x2 %r7347,%r5324;
}
	// end inline asm
	bra.uni 	$L__BB0_815;

$L__BB0_813:
	// begin inline asm
	{mul.f16x2 %r7347,%r6969,%r6721;
}
	// end inline asm

$L__BB0_815:
	mov.u32 	%r6737, 31;
	mov.u32 	%r6761, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6735,%r7347,%r6737,%r2068,%r6761;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6740,%r6724,%r6735;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6743,%r7296,%r7307;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6746,%r6743,%r6740;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6749,%r6881,%r6746;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7017,%r5324,%r6749;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7308;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6757,%r7308,%r429,%r2068,%r6761;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6757;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6763, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6764,%r6763,%r7306;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6767,%r6972,%r6764;
}
	// end inline asm
	@%p17 bra 	$L__BB0_817;
	bra.uni 	$L__BB0_816;

$L__BB0_817:
	// begin inline asm
	{neg.f16x2 %r7348,%r5327;
}
	// end inline asm
	bra.uni 	$L__BB0_818;

$L__BB0_816:
	// begin inline asm
	{mul.f16x2 %r7348,%r6973,%r6764;
}
	// end inline asm

$L__BB0_818:
	mov.u32 	%r6782, 31;
	mov.u32 	%r6784, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6780,%r7348,%r6782,%r2068,%r6784;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6785,%r6767,%r6780;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6788,%r7295,%r7305;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6791,%r6788,%r6785;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6794,%r6881,%r6791;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7016,%r5327,%r6794;
}
	// end inline asm
	bar.sync 	0;
	@%p440 bra 	$L__BB0_821;

	setp.ne.s32 	%p479, %r36, %r1977;
	shl.b32 	%r6804, %r36, 8;
	shl.b32 	%r6808, %r1473, 8;
	or.b32  	%r6809, %r6808, 128;
	mad.lo.s32 	%r6811, %r6809, %r35, %r1980;
	add.s32 	%r6812, %r6811, %r6804;
	shl.b32 	%r6813, %r6812, 2;
	mov.u32 	%r6814, _ZN6kernel5shmemE;
	add.s32 	%r6815, %r6814, %r6813;
	shl.b32 	%r6816, %r40, 4;
	add.s32 	%r1468, %r6815, %r6816;
	st.shared.v4.u32 	[%r1468], {%r7077, %r7076, %r7072, %r7071};
	st.shared.v4.u32 	[%r1468+512], {%r7093, %r7086, %r7096, %r7095};
	@%p479 bra 	$L__BB0_821;

	st.shared.v4.u32 	[%r1468+1024], {%r7091, %r7090, %r7089, %r7084};

$L__BB0_821:
	@%p441 bra 	$L__BB0_823;

	not.b32 	%r6873, %r35;
	add.s32 	%r6872, %r1472, %r6873;
	mul.lo.s32 	%r6822, %r6872, 384;
	mad.lo.s32 	%r6823, %r65, %r36, %r6822;
	mad.lo.s32 	%r6826, %r1975, %r1977, %r6823;
	mad.lo.s32 	%r6829, %r1973, %r1972, %r6826;
	shl.b32 	%r6830, %r6829, 2;
	mov.u32 	%r6831, _ZN6kernel5shmemE;
	add.s32 	%r6832, %r6831, %r6830;
	shl.b32 	%r6833, %r40, 4;
	add.s32 	%r6834, %r6832, %r6833;
	st.shared.v4.u32 	[%r6834], {%r7091, %r7090, %r7089, %r7084};
	st.shared.v4.u32 	[%r6834+512], {%r7082, %r7081, %r7050, %r7049};
	st.shared.v4.u32 	[%r6834+1024], {%r7080, %r7078, %r7043, %r7042};

$L__BB0_823:
	rem.s32 	%r6835, %r7124, %r1476;
	setp.eq.s32 	%p481, %r6835, 0;
	@%p481 bra 	$L__BB0_825;

	bar.sync 	0;
	bra.uni 	$L__BB0_832;

$L__BB0_825:
	@%p185 bra 	$L__BB0_827;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_827:
	bar.sync 	0;
	@%p186 bra 	$L__BB0_831;

	membar.gl;
	setp.eq.s32 	%p484, %r423, %r424;
	mov.u32 	%r6852, -2147483647;
	sub.s32 	%r6853, %r6852, %r422;
	selp.b32 	%r6841, %r6853, 1, %p484;
	// begin inline asm
	atom.add.release.gpu.u32 %r6840,[%rd29],%r6841;
	// end inline asm

$L__BB0_829:
	ld.volatile.u32 	%r6854, [%rd29];
	xor.b32  	%r6855, %r6854, %r6840;
	setp.gt.s32 	%p485, %r6855, -1;
	@%p485 bra 	$L__BB0_829;

	// begin inline asm
	ld.acquire.gpu.u32 %r6856,[%rd29];
	// end inline asm

$L__BB0_831:
	bar.sync 	0;

$L__BB0_832:
	add.s32 	%r7124, %r7124, 1;
	setp.lt.s32 	%p486, %r7124, %r43;
	mov.u32 	%r7044, %r476;
	mov.u32 	%r7045, %r7213;
	mov.u32 	%r7048, %r477;
	mov.u32 	%r7051, %r7215;
	mov.u32 	%r7056, %r482;
	mov.u32 	%r7060, %r485;
	mov.u32 	%r7068, %r7226;
	mov.u32 	%r7073, %r7228;
	mov.u32 	%r7079, %r503;
	mov.u32 	%r7083, %r511;
	mov.u32 	%r7085, %r513;
	mov.u32 	%r7088, %r515;
	mov.u32 	%r7092, %r519;
	mov.u32 	%r7097, %r523;
	@%p486 bra 	$L__BB0_316;

$L__BB0_833:
	ret;

}

