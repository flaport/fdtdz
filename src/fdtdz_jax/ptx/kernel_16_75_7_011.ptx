//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_75
.address_size 64

	// .globl	_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE
.global .align 4 .b8 _ZZN4cuda3std3__48__detail21__stronger_order_cudaEiiE7__xform[16] = {3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE[24] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllJE[20] = {254, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllKE[8] = {0, 0, 0, 0, 1, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllEhcE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.global .align 4 .b8 _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond6AllXyzE[12] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0};
.extern .shared .align 16 .b8 _ZN6kernel5shmemE[];

.visible .entry _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE(
	.param .align 8 .b8 _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0[168]
)
{
	.reg .pred 	%p<453>;
	.reg .b16 	%rs<129>;
	.reg .f32 	%f<541>;
	.reg .b32 	%r<7252>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<458>;


	mov.b64 	%rd28, _ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0;
	mov.u64 	%rd1, %rd28;
	ld.param.v2.u32 	{%r1466, %r1467}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0];
	ld.param.v2.u32 	{%r1468, %r1469}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+8];
	ld.param.v2.u32 	{%r1470, %r1471}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+16];
	ld.param.v2.u32 	{%r1472, %r1473}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+24];
	ld.param.v2.u32 	{%r1474, %r1475}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+32];
	ld.param.v2.u32 	{%r1476, %r1477}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+40];
	ld.param.v2.u32 	{%r1478, %r1479}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+48];
	ld.param.v2.u32 	{%r1480, %r1481}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+56];
	ld.param.v2.u32 	{%r1482, %r1483}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+64];
	ld.param.v2.u32 	{%r1484, %r1485}, [_ZN6kernel16SimulationKernelI7__half2fLi7ELb0ELb1ELb1EEEvNS_10KernelArgsIT_T0_EE_param_0+72];
	mov.u32 	%r31, %tid.y;
	mov.u32 	%r32, %tid.z;
	mov.u32 	%r33, %ctaid.y;
	mov.u32 	%r34, %ctaid.z;
	mov.u32 	%r1486, 32;
	sub.s32 	%r35, %r1486, %r1473;
	mov.u32 	%r36, %tid.x;
	setp.le.s32 	%p15, %r35, %r36;
	add.s32 	%r1487, %r1479, -1;
	mad.lo.s32 	%r1488, %r1487, %r1478, %r1477;
	add.s32 	%r1489, %r1472, %r1471;
	add.s32 	%r1490, %r1489, %r1488;
	add.s32 	%r1491, %r1490, 1;
	mul.lo.s32 	%r1492, %r1466, %r1468;
	shl.b32 	%r37, %r1492, 1;
	shl.b32 	%r1493, %r1492, 2;
	div.s32 	%r1494, %r1491, %r1493;
	add.s32 	%r1495, %r1494, 1;
	mul.lo.s32 	%r1496, %r1495, %r1472;
	mul.lo.s32 	%r1497, %r1467, %r1469;
	shl.b32 	%r38, %r1497, 1;
	div.s32 	%r1498, %r1496, %r38;
	add.s32 	%r1499, %r1498, 1;
	mul.lo.s32 	%r39, %r1499, %r1471;
	@%p15 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;

$L__BB0_2:
	mov.f32 	%f38, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f38;
  cvt.rn.f16.f32 high, %f38;
  mov.b32 %r6780, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_3;

$L__BB0_1:
	ld.param.f32 	%f36, [%rd1+112];
	neg.f32 	%f35, %f36;
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f35;
  mov.b32 %r6780, {low,low};}

	// end inline asm

$L__BB0_3:
	ld.param.u64 	%rd29, [%rd1+160];
	cvta.to.global.u64 	%rd2, %rd29;
	mad.lo.s32 	%r1502, %r1468, %r34, %r33;
	mad.lo.s32 	%r1503, %r1502, %r1467, %r32;
	mad.lo.s32 	%r1504, %r1503, %r1466, %r31;
	shl.b32 	%r43, %r1504, 5;
	add.s32 	%r6785, %r43, %r36;
	mul.lo.s32 	%r1505, %r1497, %r1492;
	shl.b32 	%r47, %r1505, 5;
	sub.s32 	%r1506, %r1481, %r1480;
	mul.lo.s32 	%r1507, %r1479, %r1506;
	sub.s32 	%r1508, %r1483, %r1482;
	mul.lo.s32 	%r1509, %r1507, %r1508;
	sub.s32 	%r48, %r1485, %r1484;
	mul.lo.s32 	%r1510, %r1509, %r48;
	mul.lo.s32 	%r49, %r1510, 3;
	setp.ge.s32 	%p16, %r6785, %r49;
	@%p16 bra 	$L__BB0_10;

	not.b32 	%r1511, %r36;
	add.s32 	%r1512, %r49, %r1511;
	sub.s32 	%r1513, %r1512, %r43;
	mul.lo.s32 	%r1514, %r1497, %r1466;
	mul.lo.s32 	%r1515, %r1514, %r1468;
	shl.b32 	%r1516, %r1515, 5;
	div.u32 	%r50, %r1513, %r1516;
	add.s32 	%r1517, %r50, 1;
	and.b32  	%r6782, %r1517, 3;
	setp.eq.s32 	%p17, %r6782, 0;
	mov.u32 	%r6783, %r6785;
	@%p17 bra 	$L__BB0_7;

	mov.u32 	%r6783, %r6785;

$L__BB0_6:
	.pragma "nounroll";
	mul.wide.s32 	%rd30, %r6783, 4;
	add.s64 	%rd31, %rd2, %rd30;
	mov.u32 	%r1518, 0;
	st.global.u32 	[%rd31], %r1518;
	add.s32 	%r6783, %r6783, %r47;
	add.s32 	%r6782, %r6782, -1;
	setp.ne.s32 	%p18, %r6782, 0;
	@%p18 bra 	$L__BB0_6;

$L__BB0_7:
	setp.lt.u32 	%p19, %r50, 3;
	@%p19 bra 	$L__BB0_10;

	mul.wide.s32 	%rd34, %r47, 4;

$L__BB0_9:
	mul.wide.s32 	%rd32, %r6783, 4;
	add.s64 	%rd33, %rd2, %rd32;
	mov.u32 	%r1519, 0;
	st.global.u32 	[%rd33], %r1519;
	add.s64 	%rd35, %rd33, %rd34;
	st.global.u32 	[%rd35], %r1519;
	add.s32 	%r1520, %r6783, %r47;
	add.s32 	%r1521, %r1520, %r47;
	add.s64 	%rd36, %rd35, %rd34;
	st.global.u32 	[%rd36], %r1519;
	add.s32 	%r1522, %r1521, %r47;
	add.s64 	%rd37, %rd36, %rd34;
	st.global.u32 	[%rd37], %r1519;
	add.s32 	%r6783, %r1522, %r47;
	setp.lt.s32 	%p20, %r6783, %r49;
	@%p20 bra 	$L__BB0_9;

$L__BB0_10:
	ld.param.u64 	%rd38, [%rd1+80];
	cvta.to.global.u64 	%rd3, %rd38;
	sub.s32 	%r1523, %r1472, %r37;
	div.s32 	%r1524, %r1523, %r38;
	mul.lo.s32 	%r1525, %r1524, %r1471;
	sub.s32 	%r1526, %r1525, %r37;
	sub.s32 	%r1527, %r1471, %r38;
	mul.lo.s32 	%r1528, %r1527, %r1468;
	mul.lo.s32 	%r59, %r1466, 384;
	add.s32 	%r1529, %r59, %r59;
	add.s32 	%r1530, %r1529, 128;
	mul.lo.s32 	%r1532, %r1497, 768;
	mul.lo.s32 	%r1533, %r1528, %r1530;
	mad.lo.s32 	%r60, %r1532, %r1526, %r1533;
	bra.uni 	$L__BB0_11;

$L__BB0_820:
	mov.f32 	%f540, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f540;
  cvt.rn.f16.f32 high, %f540;
  mov.b32 %r6764, {low,high};}

	// end inline asm
	mul.wide.s32 	%rd453, %r6785, 4;
	add.s64 	%rd454, %rd3, %rd453;
	st.global.u32 	[%rd454], %r6764;
	add.s32 	%r6785, %r6785, %r47;

$L__BB0_11:
	setp.lt.s32 	%p21, %r6785, %r60;
	@%p21 bra 	$L__BB0_820;

	ld.param.u64 	%rd39, [%rd1+120];
	cvta.to.global.u64 	%rd5, %rd39;
	ld.param.u64 	%rd40, [%rd1+88];
	cvta.to.global.u64 	%rd6, %rd40;
	mad.lo.s32 	%r6827, %r1466, %r33, %r31;
	mul.lo.s32 	%r64, %r1467, %r34;
	add.s32 	%r65, %r64, %r32;
	setp.ge.s32 	%p22, %r6827, %r1471;
	@%p22 bra 	$L__BB0_36;

	setp.gt.s32 	%p23, %r35, %r36;
	mov.u32 	%r1534, 31;
	sub.s32 	%r1535, %r1534, %r36;
	selp.b32 	%r1536, %r36, %r1535, %p23;
	shl.b32 	%r1537, %r1536, 2;
	mov.u32 	%r1538, 2;
	sub.s32 	%r66, %r1537, %r1474;
	shl.b32 	%r1539, %r1473, 2;
	mov.u32 	%r1540, 128;
	sub.s32 	%r67, %r1540, %r1539;
	sub.s32 	%r1541, %r1538, %r1474;
	add.s32 	%r68, %r1541, %r1537;
	mul.lo.s32 	%r1542, %r1472, %r1471;
	shl.b32 	%r69, %r1542, 6;
	add.s32 	%r70, %r1471, -1;
	add.s32 	%r71, %r66, 1;
	add.s32 	%r72, %r68, 1;
	shl.b32 	%r73, %r36, 1;
	or.b32  	%r74, %r73, 1;
	shr.u32 	%r1543, %r74, 31;
	add.s32 	%r1544, %r74, %r1543;
	shr.s32 	%r76, %r1544, 1;
	and.b32  	%r1545, %r1544, -2;
	sub.s32 	%r1546, %r74, %r1545;
	add.s32 	%r75, %r1546, %r69;
	rem.s32 	%r1581, %r71, %r67;
	add.s32 	%r1582, %r1581, %r67;
	rem.s32 	%r99, %r1582, %r67;
	rem.s32 	%r1583, %r72, %r67;
	add.s32 	%r1584, %r1583, %r67;
	rem.s32 	%r100, %r1584, %r67;
	mov.u32 	%r6786, %r6827;

$L__BB0_14:
	setp.ge.s32 	%p24, %r65, %r1472;
	@%p24 bra 	$L__BB0_35;

	add.s32 	%r78, %r70, %r6786;
	rem.s32 	%r1547, %r66, %r67;
	add.s32 	%r1548, %r1547, %r67;
	rem.s32 	%r79, %r1548, %r67;
	rem.s32 	%r1549, %r68, %r67;
	add.s32 	%r1550, %r1549, %r67;
	rem.s32 	%r80, %r1550, %r67;
	mul.lo.s32 	%r81, %r6786, %r1472;
	add.s32 	%r1551, %r1471, %r6786;
	mul.lo.s32 	%r82, %r1551, %r1472;
	add.s32 	%r1552, %r1551, %r1471;
	mul.lo.s32 	%r83, %r1552, %r1472;
	mov.u32 	%r6787, %r65;

$L__BB0_16:
	mul.lo.s32 	%r85, %r6787, %r1471;
	add.s32 	%r86, %r85, %r6786;
	shl.b32 	%r87, %r86, 6;
	@%p23 bra 	$L__BB0_18;
	bra.uni 	$L__BB0_17;

$L__BB0_18:
	add.s32 	%r1555, %r81, %r6787;
	mul.lo.s32 	%r1556, %r1555, %r67;
	add.s32 	%r1557, %r1556, %r79;
	mul.wide.s32 	%rd41, %r1557, 4;
	add.s64 	%rd42, %rd5, %rd41;
	ld.global.f32 	%f41, [%rd42];
	add.s32 	%r1558, %r1556, %r80;
	mul.wide.s32 	%rd43, %r1558, 4;
	add.s64 	%rd44, %rd5, %rd43;
	ld.global.f32 	%f42, [%rd44];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f41;
  cvt.rn.f16.f32 high, %f42;
  mov.b32 %r6788, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_19;

$L__BB0_17:
	mov.f32 	%f40, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f40;
  cvt.rn.f16.f32 high, %f40;
  mov.b32 %r6788, {low,high};}

	// end inline asm

$L__BB0_19:
	shl.b32 	%r91, %r86, 5;
	add.s32 	%r1559, %r91, %r36;
	shl.b32 	%r1560, %r1559, 2;
	add.s32 	%r1561, %r69, %r1560;
	mul.wide.s32 	%rd45, %r1561, 4;
	add.s64 	%rd46, %rd6, %rd45;
	st.global.u32 	[%rd46], %r6788;
	@%p23 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	add.s32 	%r1564, %r82, %r6787;
	mul.lo.s32 	%r1565, %r1564, %r67;
	add.s32 	%r1566, %r1565, %r79;
	mul.wide.s32 	%rd47, %r1566, 4;
	add.s64 	%rd48, %rd5, %rd47;
	ld.global.f32 	%f45, [%rd48];
	add.s32 	%r1567, %r1565, %r80;
	mul.wide.s32 	%rd49, %r1567, 4;
	add.s64 	%rd50, %rd5, %rd49;
	ld.global.f32 	%f46, [%rd50];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f45;
  cvt.rn.f16.f32 high, %f46;
  mov.b32 %r6789, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	mov.f32 	%f44, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f44;
  cvt.rn.f16.f32 high, %f44;
  mov.b32 %r6789, {low,high};}

	// end inline asm

$L__BB0_22:
	add.s32 	%r1568, %r73, %r87;
	mul.wide.s32 	%rd51, %r1568, 4;
	add.s64 	%rd52, %rd6, %rd51;
	st.global.u32 	[%rd52], %r6789;
	@%p23 bra 	$L__BB0_24;
	bra.uni 	$L__BB0_23;

$L__BB0_24:
	add.s32 	%r1571, %r83, %r6787;
	mul.lo.s32 	%r1572, %r1571, %r67;
	add.s32 	%r1573, %r1572, %r79;
	mul.wide.s32 	%rd53, %r1573, 4;
	add.s64 	%rd54, %rd5, %rd53;
	ld.global.f32 	%f49, [%rd54];
	add.s32 	%r1574, %r1572, %r80;
	mul.wide.s32 	%rd55, %r1574, 4;
	add.s64 	%rd56, %rd5, %rd55;
	ld.global.f32 	%f50, [%rd56];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f49;
  cvt.rn.f16.f32 high, %f50;
  mov.b32 %r6790, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_25;

$L__BB0_23:
	mov.f32 	%f48, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f48;
  cvt.rn.f16.f32 high, %f48;
  mov.b32 %r6790, {low,high};}

	// end inline asm

$L__BB0_25:
	rem.s32 	%r1575, %r78, %r1471;
	add.s32 	%r1576, %r1575, %r85;
	shl.b32 	%r98, %r1576, 5;
	add.s32 	%r1577, %r98, %r36;
	shl.b32 	%r1578, %r1577, 2;
	add.s32 	%r1579, %r69, %r1578;
	add.s32 	%r1580, %r1579, 2;
	mul.wide.s32 	%rd57, %r1580, 4;
	add.s64 	%rd58, %rd6, %rd57;
	st.global.u32 	[%rd58], %r6790;
	@%p23 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_27:
	add.s32 	%r1587, %r81, %r6787;
	mul.lo.s32 	%r1588, %r1587, %r67;
	add.s32 	%r1589, %r1588, %r99;
	mul.wide.s32 	%rd59, %r1589, 4;
	add.s64 	%rd60, %rd5, %rd59;
	ld.global.f32 	%f53, [%rd60];
	add.s32 	%r1590, %r1588, %r100;
	mul.wide.s32 	%rd61, %r1590, 4;
	add.s64 	%rd62, %rd5, %rd61;
	ld.global.f32 	%f54, [%rd62];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f53;
  cvt.rn.f16.f32 high, %f54;
  mov.b32 %r6791, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_28;

$L__BB0_26:
	mov.f32 	%f52, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f52;
  cvt.rn.f16.f32 high, %f52;
  mov.b32 %r6791, {low,high};}

	// end inline asm

$L__BB0_28:
	add.s32 	%r1591, %r91, %r76;
	shl.b32 	%r1592, %r1591, 2;
	add.s32 	%r1593, %r75, %r1592;
	mul.wide.s32 	%rd63, %r1593, 4;
	add.s64 	%rd64, %rd6, %rd63;
	st.global.u32 	[%rd64], %r6791;
	@%p23 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	add.s32 	%r1596, %r82, %r6787;
	mul.lo.s32 	%r1597, %r1596, %r67;
	add.s32 	%r1598, %r1597, %r99;
	mul.wide.s32 	%rd65, %r1598, 4;
	add.s64 	%rd66, %rd5, %rd65;
	ld.global.f32 	%f57, [%rd66];
	add.s32 	%r1599, %r1597, %r100;
	mul.wide.s32 	%rd67, %r1599, 4;
	add.s64 	%rd68, %rd5, %rd67;
	ld.global.f32 	%f58, [%rd68];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f57;
  cvt.rn.f16.f32 high, %f58;
  mov.b32 %r6792, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mov.f32 	%f56, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f56;
  cvt.rn.f16.f32 high, %f56;
  mov.b32 %r6792, {low,high};}

	// end inline asm

$L__BB0_31:
	add.s32 	%r1600, %r74, %r87;
	mul.wide.s32 	%rd69, %r1600, 4;
	add.s64 	%rd70, %rd6, %rd69;
	st.global.u32 	[%rd70], %r6792;
	@%p23 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;

$L__BB0_33:
	add.s32 	%r1603, %r83, %r6787;
	mul.lo.s32 	%r1604, %r1603, %r67;
	add.s32 	%r1605, %r1604, %r99;
	mul.wide.s32 	%rd71, %r1605, 4;
	add.s64 	%rd72, %rd5, %rd71;
	ld.global.f32 	%f61, [%rd72];
	add.s32 	%r1606, %r1604, %r100;
	mul.wide.s32 	%rd73, %r1606, 4;
	add.s64 	%rd74, %rd5, %rd73;
	ld.global.f32 	%f62, [%rd74];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f61;
  cvt.rn.f16.f32 high, %f62;
  mov.b32 %r6793, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_34;

$L__BB0_32:
	mov.f32 	%f60, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f60;
  cvt.rn.f16.f32 high, %f60;
  mov.b32 %r6793, {low,high};}

	// end inline asm

$L__BB0_34:
	add.s32 	%r1607, %r98, %r76;
	shl.b32 	%r1608, %r1607, 2;
	add.s32 	%r1609, %r75, %r1608;
	add.s32 	%r1610, %r1609, 2;
	mul.wide.s32 	%rd75, %r1610, 4;
	add.s64 	%rd76, %rd6, %rd75;
	st.global.u32 	[%rd76], %r6793;
	add.s32 	%r6787, %r6787, %r1497;
	setp.lt.s32 	%p31, %r6787, %r1472;
	@%p31 bra 	$L__BB0_16;

$L__BB0_35:
	add.s32 	%r6786, %r6786, %r1492;
	setp.lt.s32 	%p32, %r6786, %r1471;
	@%p32 bra 	$L__BB0_14;

$L__BB0_36:
	ld.param.u64 	%rd77, [%rd1+128];
	cvta.to.global.u64 	%rd7, %rd77;
	ld.param.u64 	%rd78, [%rd1+96];
	cvta.to.global.u64 	%rd8, %rd78;
	@%p22 bra 	$L__BB0_120;

	shl.b32 	%r112, %r65, 1;
	mov.u64 	%rd79, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	mov.u32 	%r6794, %r6827;

$L__BB0_38:
	setp.ge.s32 	%p34, %r112, %r1472;
	@%p34 bra 	$L__BB0_119;

	mov.u32 	%r6795, %r112;

$L__BB0_40:
	setp.ne.s32 	%p35, %r36, 0;
	@%p35 bra 	$L__BB0_118;

	shr.u32 	%r1612, %r6795, 31;
	add.s32 	%r1613, %r6795, %r1612;
	shr.s32 	%r1614, %r1613, 1;
	mad.lo.s32 	%r1615, %r1614, %r1471, %r6794;
	shl.b32 	%r116, %r1615, 5;
	add.s32 	%r117, %r6795, -2;
	mul.lo.s32 	%r118, %r117, %r1471;
	add.s32 	%r1616, %r1472, %r117;
	mul.lo.s32 	%r119, %r1616, %r1471;
	add.s32 	%r1617, %r1616, %r1472;
	mul.lo.s32 	%r120, %r1617, %r1471;
	add.s32 	%r121, %r118, %r1471;
	add.s32 	%r122, %r6795, -1;
	add.s32 	%r1618, %r1472, %r122;
	mul.lo.s32 	%r123, %r1618, %r1471;
	add.s32 	%r1619, %r1618, %r1472;
	mul.lo.s32 	%r124, %r1619, %r1471;
	add.s32 	%r1620, %r1472, %r6795;
	mul.lo.s32 	%r125, %r1620, %r1471;
	add.s32 	%r1621, %r1620, %r1472;
	mul.lo.s32 	%r126, %r1621, %r1471;
	mul.lo.s32 	%r127, %r6795, %r1471;
	add.s32 	%r128, %r127, %r1471;
	add.s32 	%r129, %r6795, 1;
	add.s32 	%r1622, %r1472, %r129;
	mul.lo.s32 	%r130, %r1622, %r1471;
	add.s32 	%r1623, %r1622, %r1472;
	mul.lo.s32 	%r131, %r1623, %r1471;
	add.s32 	%r132, %r128, %r1471;
	add.s32 	%r133, %r6795, 2;
	add.s32 	%r1624, %r1472, %r133;
	mul.lo.s32 	%r134, %r1624, %r1471;
	add.s32 	%r1625, %r1624, %r1472;
	mul.lo.s32 	%r135, %r1625, %r1471;
	mov.u32 	%r6798, 0;
	mov.u64 	%rd455, %rd79;

$L__BB0_42:
	ld.global.nc.u32 	%r1626, [%rd455];
	cvt.rn.f64.s32 	%fd1, %r1626;
	add.f64 	%fd3, %fd1, 0d3FE0000000000000;
	add.s32 	%r137, %r1626, %r6794;
	setp.lt.s32 	%p36, %r137, %r1471;
	or.b32  	%r1627, %r117, %r137;
	setp.gt.s32 	%p37, %r1627, -1;
	and.pred  	%p38, %p36, %p37;
	setp.lt.s32 	%p39, %r117, %r1472;
	and.pred  	%p1, %p39, %p38;
	cvt.rn.f32.f64 	%f63, %fd3;
	add.f32 	%f64, %f63, 0f3E800000;
	abs.f32 	%f1, %f64;
	add.f32 	%f65, %f1, 0f40200000;
	setp.geu.f32 	%p40, %f65, 0f40000000;
	@%p40 bra 	$L__BB0_47;

	@%p1 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_45:
	add.s32 	%r1630, %r118, %r137;
	mul.wide.s32 	%rd80, %r1630, 4;
	add.s64 	%rd81, %rd7, %rd80;
	ld.global.f32 	%f68, [%rd81];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f68;
  mov.b32 %r6797, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_46;

$L__BB0_44:
	mov.f32 	%f67, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f67;
  cvt.rn.f16.f32 high, %f67;
  mov.b32 %r6797, {low,high};}

	// end inline asm

$L__BB0_46:
	add.s32 	%r1631, %r6798, %r116;
	mul.wide.s32 	%rd82, %r1631, 4;
	add.s64 	%rd83, %rd8, %rd82;
	st.global.u32 	[%rd83], %r6797;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_47:
	cvt.rn.f32.f64 	%f69, %fd1;
	add.f32 	%f70, %f69, 0f3E800000;
	abs.f32 	%f2, %f70;
	add.f32 	%f3, %f2, 0f40000000;
	setp.geu.f32 	%p41, %f3, 0f40000000;
	@%p41 bra 	$L__BB0_52;

	@%p1 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_50:
	add.s32 	%r1634, %r119, %r137;
	mul.wide.s32 	%rd84, %r1634, 4;
	add.s64 	%rd85, %rd7, %rd84;
	ld.global.f32 	%f73, [%rd85];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f73;
  mov.b32 %r6799, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_51;

$L__BB0_49:
	mov.f32 	%f72, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f72;
  cvt.rn.f16.f32 high, %f72;
  mov.b32 %r6799, {low,high};}

	// end inline asm

$L__BB0_51:
	add.s32 	%r1635, %r6798, %r116;
	mul.wide.s32 	%rd86, %r1635, 4;
	add.s64 	%rd87, %rd8, %rd86;
	st.global.u32 	[%rd87], %r6799;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_52:
	add.f32 	%f74, %f2, 0f40200000;
	setp.geu.f32 	%p42, %f74, 0f40000000;
	@%p42 bra 	$L__BB0_57;

	@%p1 bra 	$L__BB0_55;
	bra.uni 	$L__BB0_54;

$L__BB0_55:
	add.s32 	%r1638, %r120, %r137;
	mul.wide.s32 	%rd88, %r1638, 4;
	add.s64 	%rd89, %rd7, %rd88;
	ld.global.f32 	%f77, [%rd89];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f77;
  mov.b32 %r6801, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_56;

$L__BB0_54:
	mov.f32 	%f76, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f76;
  cvt.rn.f16.f32 high, %f76;
  mov.b32 %r6801, {low,high};}

	// end inline asm

$L__BB0_56:
	add.s32 	%r1639, %r6798, %r116;
	mul.wide.s32 	%rd90, %r1639, 4;
	add.s64 	%rd91, %rd8, %rd90;
	st.global.u32 	[%rd91], %r6801;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_57:
	or.b32  	%r1640, %r122, %r137;
	setp.gt.s32 	%p43, %r1640, -1;
	and.pred  	%p45, %p36, %p43;
	setp.le.s32 	%p46, %r6795, %r1472;
	and.pred  	%p2, %p46, %p45;
	add.f32 	%f4, %f1, 0f3FC00000;
	setp.geu.f32 	%p47, %f4, 0f40000000;
	@%p47 bra 	$L__BB0_62;

	@%p2 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_59;

$L__BB0_60:
	add.s32 	%r1643, %r121, %r137;
	mul.wide.s32 	%rd92, %r1643, 4;
	add.s64 	%rd93, %rd7, %rd92;
	ld.global.f32 	%f80, [%rd93];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f80;
  mov.b32 %r6803, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_61;

$L__BB0_59:
	mov.f32 	%f79, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f79;
  cvt.rn.f16.f32 high, %f79;
  mov.b32 %r6803, {low,high};}

	// end inline asm

$L__BB0_61:
	add.s32 	%r1644, %r6798, %r116;
	mul.wide.s32 	%rd94, %r1644, 4;
	add.s64 	%rd95, %rd8, %rd94;
	st.global.u32 	[%rd95], %r6803;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_62:
	add.f32 	%f5, %f2, 0f3F800000;
	setp.geu.f32 	%p48, %f5, 0f40000000;
	@%p48 bra 	$L__BB0_67;

	@%p2 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_65:
	add.s32 	%r1647, %r123, %r137;
	mul.wide.s32 	%rd96, %r1647, 4;
	add.s64 	%rd97, %rd7, %rd96;
	ld.global.f32 	%f83, [%rd97];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f83;
  mov.b32 %r6805, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_66;

$L__BB0_64:
	mov.f32 	%f82, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f82;
  cvt.rn.f16.f32 high, %f82;
  mov.b32 %r6805, {low,high};}

	// end inline asm

$L__BB0_66:
	add.s32 	%r1648, %r6798, %r116;
	mul.wide.s32 	%rd98, %r1648, 4;
	add.s64 	%rd99, %rd8, %rd98;
	st.global.u32 	[%rd99], %r6805;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_67:
	add.f32 	%f6, %f2, 0f3FC00000;
	setp.geu.f32 	%p49, %f6, 0f40000000;
	@%p49 bra 	$L__BB0_72;

	@%p2 bra 	$L__BB0_70;
	bra.uni 	$L__BB0_69;

$L__BB0_70:
	add.s32 	%r1651, %r124, %r137;
	mul.wide.s32 	%rd100, %r1651, 4;
	add.s64 	%rd101, %rd7, %rd100;
	ld.global.f32 	%f86, [%rd101];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f86;
  mov.b32 %r6807, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_71;

$L__BB0_69:
	mov.f32 	%f85, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f85;
  cvt.rn.f16.f32 high, %f85;
  mov.b32 %r6807, {low,high};}

	// end inline asm

$L__BB0_71:
	add.s32 	%r1652, %r6798, %r116;
	mul.wide.s32 	%rd102, %r1652, 4;
	add.s64 	%rd103, %rd8, %rd102;
	st.global.u32 	[%rd103], %r6807;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_72:
	or.b32  	%r1653, %r6795, %r137;
	setp.gt.s32 	%p50, %r1653, -1;
	and.pred  	%p52, %p36, %p50;
	setp.lt.s32 	%p53, %r6795, %r1472;
	and.pred  	%p3, %p53, %p52;
	add.f32 	%f7, %f1, 0f3F000000;
	setp.geu.f32 	%p54, %f7, 0f40000000;
	@%p54 bra 	$L__BB0_77;

	@%p3 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_74;

$L__BB0_75:
	add.s32 	%r1656, %r127, %r137;
	mul.wide.s32 	%rd104, %r1656, 4;
	add.s64 	%rd105, %rd7, %rd104;
	ld.global.f32 	%f89, [%rd105];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f89;
  mov.b32 %r6809, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_76;

$L__BB0_74:
	mov.f32 	%f88, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f88;
  cvt.rn.f16.f32 high, %f88;
  mov.b32 %r6809, {low,high};}

	// end inline asm

$L__BB0_76:
	add.s32 	%r1657, %r6798, %r116;
	mul.wide.s32 	%rd106, %r1657, 4;
	add.s64 	%rd107, %rd8, %rd106;
	st.global.u32 	[%rd107], %r6809;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_77:
	add.f32 	%f90, %f2, 0f00000000;
	setp.geu.f32 	%p55, %f90, 0f40000000;
	@%p55 bra 	$L__BB0_82;

	@%p3 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_79;

$L__BB0_80:
	add.s32 	%r1660, %r125, %r137;
	mul.wide.s32 	%rd108, %r1660, 4;
	add.s64 	%rd109, %rd7, %rd108;
	ld.global.f32 	%f93, [%rd109];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f93;
  mov.b32 %r6811, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_81;

$L__BB0_79:
	mov.f32 	%f92, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f92;
  cvt.rn.f16.f32 high, %f92;
  mov.b32 %r6811, {low,high};}

	// end inline asm

$L__BB0_81:
	add.s32 	%r1661, %r6798, %r116;
	mul.wide.s32 	%rd110, %r1661, 4;
	add.s64 	%rd111, %rd8, %rd110;
	st.global.u32 	[%rd111], %r6811;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_82:
	add.f32 	%f8, %f2, 0f3F000000;
	setp.geu.f32 	%p56, %f8, 0f40000000;
	@%p56 bra 	$L__BB0_87;

	@%p3 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;

$L__BB0_85:
	add.s32 	%r1664, %r126, %r137;
	mul.wide.s32 	%rd112, %r1664, 4;
	add.s64 	%rd113, %rd7, %rd112;
	ld.global.f32 	%f96, [%rd113];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f96;
  mov.b32 %r6813, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_86;

$L__BB0_84:
	mov.f32 	%f95, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f95;
  cvt.rn.f16.f32 high, %f95;
  mov.b32 %r6813, {low,high};}

	// end inline asm

$L__BB0_86:
	add.s32 	%r1665, %r6798, %r116;
	mul.wide.s32 	%rd114, %r1665, 4;
	add.s64 	%rd115, %rd8, %rd114;
	st.global.u32 	[%rd115], %r6813;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_87:
	or.b32  	%r1666, %r129, %r137;
	setp.gt.s32 	%p57, %r1666, -1;
	and.pred  	%p59, %p36, %p57;
	setp.lt.s32 	%p60, %r129, %r1472;
	and.pred  	%p4, %p60, %p59;
	@%p54 bra 	$L__BB0_92;

	@%p4 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_89;

$L__BB0_90:
	add.s32 	%r1669, %r128, %r137;
	mul.wide.s32 	%rd116, %r1669, 4;
	add.s64 	%rd117, %rd7, %rd116;
	ld.global.f32 	%f99, [%rd117];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f99;
  mov.b32 %r6815, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_91;

$L__BB0_89:
	mov.f32 	%f98, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f98;
  cvt.rn.f16.f32 high, %f98;
  mov.b32 %r6815, {low,high};}

	// end inline asm

$L__BB0_91:
	add.s32 	%r1670, %r6798, %r116;
	mul.wide.s32 	%rd118, %r1670, 4;
	add.s64 	%rd119, %rd8, %rd118;
	st.global.u32 	[%rd119], %r6815;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_92:
	@%p48 bra 	$L__BB0_97;

	@%p4 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	add.s32 	%r1673, %r130, %r137;
	mul.wide.s32 	%rd120, %r1673, 4;
	add.s64 	%rd121, %rd7, %rd120;
	ld.global.f32 	%f102, [%rd121];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f102;
  mov.b32 %r6817, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	mov.f32 	%f101, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f101;
  cvt.rn.f16.f32 high, %f101;
  mov.b32 %r6817, {low,high};}

	// end inline asm

$L__BB0_96:
	add.s32 	%r1674, %r6798, %r116;
	mul.wide.s32 	%rd122, %r1674, 4;
	add.s64 	%rd123, %rd8, %rd122;
	st.global.u32 	[%rd123], %r6817;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_97:
	@%p56 bra 	$L__BB0_102;

	@%p4 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_99;

$L__BB0_100:
	add.s32 	%r1677, %r131, %r137;
	mul.wide.s32 	%rd124, %r1677, 4;
	add.s64 	%rd125, %rd7, %rd124;
	ld.global.f32 	%f105, [%rd125];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f105;
  mov.b32 %r6819, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_101;

$L__BB0_99:
	mov.f32 	%f104, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f104;
  cvt.rn.f16.f32 high, %f104;
  mov.b32 %r6819, {low,high};}

	// end inline asm

$L__BB0_101:
	add.s32 	%r1678, %r6798, %r116;
	mul.wide.s32 	%rd126, %r1678, 4;
	add.s64 	%rd127, %rd8, %rd126;
	st.global.u32 	[%rd127], %r6819;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_102:
	or.b32  	%r1679, %r133, %r137;
	setp.gt.s32 	%p64, %r1679, -1;
	and.pred  	%p66, %p36, %p64;
	setp.lt.s32 	%p67, %r133, %r1472;
	and.pred  	%p5, %p67, %p66;
	@%p47 bra 	$L__BB0_107;

	@%p5 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_104;

$L__BB0_105:
	add.s32 	%r1682, %r132, %r137;
	mul.wide.s32 	%rd128, %r1682, 4;
	add.s64 	%rd129, %rd7, %rd128;
	ld.global.f32 	%f108, [%rd129];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f108;
  mov.b32 %r6821, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_106;

$L__BB0_104:
	mov.f32 	%f107, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f107;
  cvt.rn.f16.f32 high, %f107;
  mov.b32 %r6821, {low,high};}

	// end inline asm

$L__BB0_106:
	add.s32 	%r1683, %r6798, %r116;
	mul.wide.s32 	%rd130, %r1683, 4;
	add.s64 	%rd131, %rd8, %rd130;
	st.global.u32 	[%rd131], %r6821;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_107:
	@%p41 bra 	$L__BB0_112;

	@%p5 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_109;

$L__BB0_110:
	add.s32 	%r1686, %r134, %r137;
	mul.wide.s32 	%rd132, %r1686, 4;
	add.s64 	%rd133, %rd7, %rd132;
	ld.global.f32 	%f111, [%rd133];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f111;
  mov.b32 %r6823, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_111;

$L__BB0_109:
	mov.f32 	%f110, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f110;
  cvt.rn.f16.f32 high, %f110;
  mov.b32 %r6823, {low,high};}

	// end inline asm

$L__BB0_111:
	add.s32 	%r1687, %r6798, %r116;
	mul.wide.s32 	%rd134, %r1687, 4;
	add.s64 	%rd135, %rd8, %rd134;
	st.global.u32 	[%rd135], %r6823;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_112:
	@%p49 bra 	$L__BB0_117;

	@%p5 bra 	$L__BB0_115;
	bra.uni 	$L__BB0_114;

$L__BB0_115:
	add.s32 	%r1690, %r135, %r137;
	mul.wide.s32 	%rd136, %r1690, 4;
	add.s64 	%rd137, %rd7, %rd136;
	ld.global.f32 	%f114, [%rd137];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f114;
  mov.b32 %r6825, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_116;

$L__BB0_114:
	mov.f32 	%f113, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f113;
  cvt.rn.f16.f32 high, %f113;
  mov.b32 %r6825, {low,high};}

	// end inline asm

$L__BB0_116:
	add.s32 	%r1691, %r6798, %r116;
	mul.wide.s32 	%rd138, %r1691, 4;
	add.s64 	%rd139, %rd8, %rd138;
	st.global.u32 	[%rd139], %r6825;
	add.s32 	%r6798, %r6798, 1;

$L__BB0_117:
	add.s64 	%rd455, %rd455, 4;
	mov.u64 	%rd140, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;
	add.s64 	%rd141, %rd140, 24;
	setp.ne.s64 	%p71, %rd455, %rd141;
	@%p71 bra 	$L__BB0_42;

$L__BB0_118:
	add.s32 	%r6795, %r6795, %r38;
	setp.lt.s32 	%p72, %r6795, %r1472;
	@%p72 bra 	$L__BB0_40;

$L__BB0_119:
	add.s32 	%r6794, %r6794, %r1492;
	setp.lt.s32 	%p73, %r6794, %r1471;
	@%p73 bra 	$L__BB0_38;

$L__BB0_120:
	setp.eq.s32 	%p74, %r1475, 1;
	ld.param.u64 	%rd142, [%rd1+136];
	cvta.to.global.u64 	%rd11, %rd142;
	ld.param.u64 	%rd143, [%rd1+104];
	cvta.to.global.u64 	%rd12, %rd143;
	@%p74 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_121;

$L__BB0_138:
	@%p22 bra 	$L__BB0_267;

	shl.b32 	%r241, %r65, 1;
	shr.u32 	%r1739, %r1476, 31;
	add.s32 	%r1740, %r1476, %r1739;
	shr.u32 	%r1741, %r1740, 1;
	and.b32  	%r242, %r1741, 1;
	mov.u64 	%rd163, _ZN44_INTERNAL_3aa255b4_13_kernel_ptx_cu_c13d142d7diamond4AllIE;

$L__BB0_140:
	setp.ge.s32 	%p84, %r241, %r1472;
	@%p84 bra 	$L__BB0_266;

	mov.u32 	%r6833, %r241;

$L__BB0_142:
	setp.ne.s32 	%p85, %r36, 0;
	@%p85 bra 	$L__BB0_265;

	shr.u32 	%r1743, %r6833, 31;
	add.s32 	%r1744, %r6833, %r1743;
	shr.s32 	%r1745, %r1744, 1;
	mad.lo.s32 	%r1746, %r1745, %r1471, %r6827;
	shl.b32 	%r246, %r1746, 5;
	add.s32 	%r247, %r6833, -2;
	mul.lo.s32 	%r248, %r247, %r1471;
	add.s32 	%r1747, %r1472, %r247;
	mul.lo.s32 	%r249, %r1747, %r1471;
	add.s32 	%r250, %r248, %r1471;
	add.s32 	%r251, %r6833, -1;
	add.s32 	%r1748, %r1472, %r251;
	mul.lo.s32 	%r252, %r1748, %r1471;
	add.s32 	%r1749, %r1472, %r6833;
	mul.lo.s32 	%r253, %r1749, %r1471;
	mul.lo.s32 	%r254, %r6833, %r1471;
	add.s32 	%r255, %r254, %r1471;
	add.s32 	%r256, %r6833, 1;
	add.s32 	%r1750, %r1472, %r256;
	mul.lo.s32 	%r257, %r1750, %r1471;
	add.s32 	%r258, %r255, %r1471;
	add.s32 	%r259, %r6833, 2;
	add.s32 	%r1751, %r1472, %r259;
	mul.lo.s32 	%r260, %r1751, %r1471;
	mov.u32 	%r6837, 0;
	mov.u64 	%rd456, 24;
	mov.u64 	%rd457, %rd163;

$L__BB0_144:
	ld.global.nc.u32 	%r1752, [%rd457];
	cvt.rn.f64.s32 	%fd2, %r1752;
	add.f64 	%fd4, %fd2, 0d3FE0000000000000;
	add.s32 	%r262, %r1752, %r6827;
	setp.lt.s32 	%p86, %r262, %r1471;
	or.b32  	%r1753, %r247, %r262;
	setp.gt.s32 	%p87, %r1753, -1;
	and.pred  	%p88, %p86, %p87;
	setp.lt.s32 	%p89, %r247, %r1472;
	and.pred  	%p6, %p89, %p88;
	cvt.rn.f32.f64 	%f131, %fd4;
	add.f32 	%f132, %f131, 0f3E800000;
	abs.f32 	%f9, %f132;
	add.f32 	%f133, %f9, 0f40200000;
	setp.geu.f32 	%p90, %f133, 0f40000000;
	@%p90 bra 	$L__BB0_156;

	@%p6 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_146;

$L__BB0_147:
	setp.eq.s32 	%p91, %r242, 0;
	add.s32 	%r1755, %r248, %r262;
	shl.b32 	%r1756, %r1755, 1;
	mul.wide.s32 	%rd164, %r1756, 4;
	add.s64 	%rd165, %rd11, %rd164;
	ld.global.f32 	%f10, [%rd165];
	@%p91 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_148;

$L__BB0_149:
	mov.f32 	%f139, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f10;
  cvt.rn.f16.f32 high, %f139;
  mov.b32 %r6835, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_146:
	mov.f32 	%f135, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f135;
  cvt.rn.f16.f32 high, %f135;
  mov.b32 %r6835, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_150;

$L__BB0_148:
	mov.f32 	%f136, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f136;
  cvt.rn.f16.f32 high, %f10;
  mov.b32 %r6835, {low,high};}

	// end inline asm

$L__BB0_150:
	add.s32 	%r267, %r6837, %r246;
	mul.wide.s32 	%rd166, %r267, 4;
	add.s64 	%rd167, %rd12, %rd166;
	st.global.u32 	[%rd167], %r6835;
	@%p6 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_151;

$L__BB0_152:
	setp.eq.s32 	%p92, %r242, 0;
	add.s32 	%r1760, %r249, %r262;
	shl.b32 	%r1761, %r1760, 1;
	mul.wide.s32 	%rd168, %r1761, 4;
	add.s64 	%rd169, %rd11, %rd168;
	ld.global.f32 	%f11, [%rd169];
	@%p92 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_153;

$L__BB0_154:
	mov.f32 	%f145, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f11;
  cvt.rn.f16.f32 high, %f145;
  mov.b32 %r6836, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_151:
	mov.f32 	%f141, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f141;
  cvt.rn.f16.f32 high, %f141;
  mov.b32 %r6836, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_155;

$L__BB0_153:
	mov.f32 	%f142, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f142;
  cvt.rn.f16.f32 high, %f11;
  mov.b32 %r6836, {low,high};}

	// end inline asm

$L__BB0_155:
	add.s32 	%r1764, %r267, 1;
	mul.wide.s32 	%rd170, %r1764, 4;
	add.s64 	%rd171, %rd12, %rd170;
	st.global.u32 	[%rd171], %r6836;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_156:
	cvt.rn.f32.f64 	%f146, %fd2;
	add.f32 	%f147, %f146, 0f3E800000;
	abs.f32 	%f12, %f147;
	add.f32 	%f13, %f12, 0f40000000;
	setp.geu.f32 	%p93, %f13, 0f40000000;
	@%p93 bra 	$L__BB0_168;

	@%p6 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_158;

$L__BB0_159:
	setp.eq.s32 	%p94, %r242, 0;
	add.s32 	%r1766, %r248, %r262;
	shl.b32 	%r1767, %r1766, 1;
	or.b32  	%r1768, %r1767, 1;
	mul.wide.s32 	%rd172, %r1768, 4;
	add.s64 	%rd173, %rd11, %rd172;
	ld.global.f32 	%f14, [%rd173];
	@%p94 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_160;

$L__BB0_161:
	mov.f32 	%f153, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f14;
  cvt.rn.f16.f32 high, %f153;
  mov.b32 %r6838, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_158:
	mov.f32 	%f149, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f149;
  cvt.rn.f16.f32 high, %f149;
  mov.b32 %r6838, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_162;

$L__BB0_160:
	mov.f32 	%f150, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f150;
  cvt.rn.f16.f32 high, %f14;
  mov.b32 %r6838, {low,high};}

	// end inline asm

$L__BB0_162:
	add.s32 	%r278, %r6837, %r246;
	mul.wide.s32 	%rd174, %r278, 4;
	add.s64 	%rd175, %rd12, %rd174;
	st.global.u32 	[%rd175], %r6838;
	@%p6 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_163;

$L__BB0_164:
	setp.eq.s32 	%p95, %r242, 0;
	add.s32 	%r1772, %r249, %r262;
	shl.b32 	%r1773, %r1772, 1;
	or.b32  	%r1774, %r1773, 1;
	mul.wide.s32 	%rd176, %r1774, 4;
	add.s64 	%rd177, %rd11, %rd176;
	ld.global.f32 	%f15, [%rd177];
	@%p95 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_165;

$L__BB0_166:
	mov.f32 	%f159, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f15;
  cvt.rn.f16.f32 high, %f159;
  mov.b32 %r6839, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_163:
	mov.f32 	%f155, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f155;
  cvt.rn.f16.f32 high, %f155;
  mov.b32 %r6839, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_167;

$L__BB0_165:
	mov.f32 	%f156, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f156;
  cvt.rn.f16.f32 high, %f15;
  mov.b32 %r6839, {low,high};}

	// end inline asm

$L__BB0_167:
	add.s32 	%r1777, %r278, 1;
	mul.wide.s32 	%rd178, %r1777, 4;
	add.s64 	%rd179, %rd12, %rd178;
	st.global.u32 	[%rd179], %r6839;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_168:
	or.b32  	%r1778, %r251, %r262;
	setp.gt.s32 	%p96, %r1778, -1;
	and.pred  	%p98, %p86, %p96;
	setp.le.s32 	%p99, %r6833, %r1472;
	and.pred  	%p7, %p99, %p98;
	add.f32 	%f16, %f9, 0f3FC00000;
	setp.geu.f32 	%p100, %f16, 0f40000000;
	@%p100 bra 	$L__BB0_180;

	@%p7 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_170;

$L__BB0_171:
	setp.eq.s32 	%p101, %r242, 0;
	add.s32 	%r1780, %r250, %r262;
	shl.b32 	%r1781, %r1780, 1;
	mul.wide.s32 	%rd180, %r1781, 4;
	add.s64 	%rd181, %rd11, %rd180;
	ld.global.f32 	%f17, [%rd181];
	@%p101 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_172;

$L__BB0_173:
	mov.f32 	%f165, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f17;
  cvt.rn.f16.f32 high, %f165;
  mov.b32 %r6841, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_170:
	mov.f32 	%f161, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f161;
  cvt.rn.f16.f32 high, %f161;
  mov.b32 %r6841, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_174;

$L__BB0_172:
	mov.f32 	%f162, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f162;
  cvt.rn.f16.f32 high, %f17;
  mov.b32 %r6841, {low,high};}

	// end inline asm

$L__BB0_174:
	add.s32 	%r289, %r6837, %r246;
	mul.wide.s32 	%rd182, %r289, 4;
	add.s64 	%rd183, %rd12, %rd182;
	st.global.u32 	[%rd183], %r6841;
	@%p7 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_175;

$L__BB0_176:
	setp.eq.s32 	%p102, %r242, 0;
	add.s32 	%r1785, %r252, %r262;
	shl.b32 	%r1786, %r1785, 1;
	mul.wide.s32 	%rd184, %r1786, 4;
	add.s64 	%rd185, %rd11, %rd184;
	ld.global.f32 	%f18, [%rd185];
	@%p102 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_177;

$L__BB0_178:
	mov.f32 	%f171, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f18;
  cvt.rn.f16.f32 high, %f171;
  mov.b32 %r6842, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_175:
	mov.f32 	%f167, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f167;
  cvt.rn.f16.f32 high, %f167;
  mov.b32 %r6842, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_179;

$L__BB0_177:
	mov.f32 	%f168, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f168;
  cvt.rn.f16.f32 high, %f18;
  mov.b32 %r6842, {low,high};}

	// end inline asm

$L__BB0_179:
	add.s32 	%r1789, %r289, 1;
	mul.wide.s32 	%rd186, %r1789, 4;
	add.s64 	%rd187, %rd12, %rd186;
	st.global.u32 	[%rd187], %r6842;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_180:
	add.f32 	%f19, %f12, 0f3F800000;
	setp.geu.f32 	%p103, %f19, 0f40000000;
	@%p103 bra 	$L__BB0_192;

	@%p7 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_182;

$L__BB0_183:
	setp.eq.s32 	%p104, %r242, 0;
	add.s32 	%r1791, %r250, %r262;
	shl.b32 	%r1792, %r1791, 1;
	or.b32  	%r1793, %r1792, 1;
	mul.wide.s32 	%rd188, %r1793, 4;
	add.s64 	%rd189, %rd11, %rd188;
	ld.global.f32 	%f20, [%rd189];
	@%p104 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_184;

$L__BB0_185:
	mov.f32 	%f177, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f20;
  cvt.rn.f16.f32 high, %f177;
  mov.b32 %r6844, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_182:
	mov.f32 	%f173, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f173;
  cvt.rn.f16.f32 high, %f173;
  mov.b32 %r6844, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_186;

$L__BB0_184:
	mov.f32 	%f174, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f174;
  cvt.rn.f16.f32 high, %f20;
  mov.b32 %r6844, {low,high};}

	// end inline asm

$L__BB0_186:
	add.s32 	%r300, %r6837, %r246;
	mul.wide.s32 	%rd190, %r300, 4;
	add.s64 	%rd191, %rd12, %rd190;
	st.global.u32 	[%rd191], %r6844;
	@%p7 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_187;

$L__BB0_188:
	setp.eq.s32 	%p105, %r242, 0;
	add.s32 	%r1797, %r252, %r262;
	shl.b32 	%r1798, %r1797, 1;
	or.b32  	%r1799, %r1798, 1;
	mul.wide.s32 	%rd192, %r1799, 4;
	add.s64 	%rd193, %rd11, %rd192;
	ld.global.f32 	%f21, [%rd193];
	@%p105 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_189;

$L__BB0_190:
	mov.f32 	%f183, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f21;
  cvt.rn.f16.f32 high, %f183;
  mov.b32 %r6845, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_187:
	mov.f32 	%f179, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f179;
  cvt.rn.f16.f32 high, %f179;
  mov.b32 %r6845, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_191;

$L__BB0_189:
	mov.f32 	%f180, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f180;
  cvt.rn.f16.f32 high, %f21;
  mov.b32 %r6845, {low,high};}

	// end inline asm

$L__BB0_191:
	add.s32 	%r1802, %r300, 1;
	mul.wide.s32 	%rd194, %r1802, 4;
	add.s64 	%rd195, %rd12, %rd194;
	st.global.u32 	[%rd195], %r6845;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_192:
	or.b32  	%r1803, %r6833, %r262;
	setp.gt.s32 	%p106, %r1803, -1;
	and.pred  	%p108, %p86, %p106;
	setp.lt.s32 	%p109, %r6833, %r1472;
	and.pred  	%p8, %p109, %p108;
	add.f32 	%f22, %f9, 0f3F000000;
	setp.geu.f32 	%p110, %f22, 0f40000000;
	@%p110 bra 	$L__BB0_204;

	@%p8 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_194;

$L__BB0_195:
	setp.eq.s32 	%p111, %r242, 0;
	add.s32 	%r1805, %r254, %r262;
	shl.b32 	%r1806, %r1805, 1;
	mul.wide.s32 	%rd196, %r1806, 4;
	add.s64 	%rd197, %rd11, %rd196;
	ld.global.f32 	%f23, [%rd197];
	@%p111 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_196;

$L__BB0_197:
	mov.f32 	%f189, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f23;
  cvt.rn.f16.f32 high, %f189;
  mov.b32 %r6847, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_194:
	mov.f32 	%f185, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f185;
  cvt.rn.f16.f32 high, %f185;
  mov.b32 %r6847, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_198;

$L__BB0_196:
	mov.f32 	%f186, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f186;
  cvt.rn.f16.f32 high, %f23;
  mov.b32 %r6847, {low,high};}

	// end inline asm

$L__BB0_198:
	add.s32 	%r311, %r6837, %r246;
	mul.wide.s32 	%rd198, %r311, 4;
	add.s64 	%rd199, %rd12, %rd198;
	st.global.u32 	[%rd199], %r6847;
	@%p8 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_199;

$L__BB0_200:
	setp.eq.s32 	%p112, %r242, 0;
	add.s32 	%r1810, %r253, %r262;
	shl.b32 	%r1811, %r1810, 1;
	mul.wide.s32 	%rd200, %r1811, 4;
	add.s64 	%rd201, %rd11, %rd200;
	ld.global.f32 	%f24, [%rd201];
	@%p112 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_201;

$L__BB0_202:
	mov.f32 	%f195, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f24;
  cvt.rn.f16.f32 high, %f195;
  mov.b32 %r6848, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_199:
	mov.f32 	%f191, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f191;
  cvt.rn.f16.f32 high, %f191;
  mov.b32 %r6848, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_203;

$L__BB0_201:
	mov.f32 	%f192, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f192;
  cvt.rn.f16.f32 high, %f24;
  mov.b32 %r6848, {low,high};}

	// end inline asm

$L__BB0_203:
	add.s32 	%r1814, %r311, 1;
	mul.wide.s32 	%rd202, %r1814, 4;
	add.s64 	%rd203, %rd12, %rd202;
	st.global.u32 	[%rd203], %r6848;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_204:
	add.f32 	%f196, %f12, 0f00000000;
	setp.geu.f32 	%p113, %f196, 0f40000000;
	@%p113 bra 	$L__BB0_216;

	@%p8 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;

$L__BB0_207:
	setp.eq.s32 	%p114, %r242, 0;
	add.s32 	%r1816, %r254, %r262;
	shl.b32 	%r1817, %r1816, 1;
	or.b32  	%r1818, %r1817, 1;
	mul.wide.s32 	%rd204, %r1818, 4;
	add.s64 	%rd205, %rd11, %rd204;
	ld.global.f32 	%f25, [%rd205];
	@%p114 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_208;

$L__BB0_209:
	mov.f32 	%f202, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f25;
  cvt.rn.f16.f32 high, %f202;
  mov.b32 %r6850, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_206:
	mov.f32 	%f198, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f198;
  cvt.rn.f16.f32 high, %f198;
  mov.b32 %r6850, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_210;

$L__BB0_208:
	mov.f32 	%f199, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f199;
  cvt.rn.f16.f32 high, %f25;
  mov.b32 %r6850, {low,high};}

	// end inline asm

$L__BB0_210:
	add.s32 	%r322, %r6837, %r246;
	mul.wide.s32 	%rd206, %r322, 4;
	add.s64 	%rd207, %rd12, %rd206;
	st.global.u32 	[%rd207], %r6850;
	@%p8 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;

$L__BB0_212:
	setp.eq.s32 	%p115, %r242, 0;
	add.s32 	%r1822, %r253, %r262;
	shl.b32 	%r1823, %r1822, 1;
	or.b32  	%r1824, %r1823, 1;
	mul.wide.s32 	%rd208, %r1824, 4;
	add.s64 	%rd209, %rd11, %rd208;
	ld.global.f32 	%f26, [%rd209];
	@%p115 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_213;

$L__BB0_214:
	mov.f32 	%f208, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f26;
  cvt.rn.f16.f32 high, %f208;
  mov.b32 %r6851, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_211:
	mov.f32 	%f204, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f204;
  cvt.rn.f16.f32 high, %f204;
  mov.b32 %r6851, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_215;

$L__BB0_213:
	mov.f32 	%f205, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f205;
  cvt.rn.f16.f32 high, %f26;
  mov.b32 %r6851, {low,high};}

	// end inline asm

$L__BB0_215:
	add.s32 	%r1827, %r322, 1;
	mul.wide.s32 	%rd210, %r1827, 4;
	add.s64 	%rd211, %rd12, %rd210;
	st.global.u32 	[%rd211], %r6851;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_216:
	or.b32  	%r1828, %r256, %r262;
	setp.gt.s32 	%p116, %r1828, -1;
	and.pred  	%p118, %p86, %p116;
	setp.lt.s32 	%p119, %r256, %r1472;
	and.pred  	%p9, %p119, %p118;
	@%p110 bra 	$L__BB0_228;

	@%p9 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_218;

$L__BB0_219:
	setp.eq.s32 	%p121, %r242, 0;
	add.s32 	%r1830, %r255, %r262;
	shl.b32 	%r1831, %r1830, 1;
	mul.wide.s32 	%rd212, %r1831, 4;
	add.s64 	%rd213, %rd11, %rd212;
	ld.global.f32 	%f27, [%rd213];
	@%p121 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;

$L__BB0_221:
	mov.f32 	%f214, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f27;
  cvt.rn.f16.f32 high, %f214;
  mov.b32 %r6853, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_218:
	mov.f32 	%f210, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f210;
  cvt.rn.f16.f32 high, %f210;
  mov.b32 %r6853, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_222;

$L__BB0_220:
	mov.f32 	%f211, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f211;
  cvt.rn.f16.f32 high, %f27;
  mov.b32 %r6853, {low,high};}

	// end inline asm

$L__BB0_222:
	add.s32 	%r333, %r6837, %r246;
	mul.wide.s32 	%rd214, %r333, 4;
	add.s64 	%rd215, %rd12, %rd214;
	st.global.u32 	[%rd215], %r6853;
	@%p9 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_223;

$L__BB0_224:
	setp.eq.s32 	%p122, %r242, 0;
	add.s32 	%r1835, %r257, %r262;
	shl.b32 	%r1836, %r1835, 1;
	mul.wide.s32 	%rd216, %r1836, 4;
	add.s64 	%rd217, %rd11, %rd216;
	ld.global.f32 	%f28, [%rd217];
	@%p122 bra 	$L__BB0_226;
	bra.uni 	$L__BB0_225;

$L__BB0_226:
	mov.f32 	%f220, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f28;
  cvt.rn.f16.f32 high, %f220;
  mov.b32 %r6854, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_223:
	mov.f32 	%f216, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f216;
  cvt.rn.f16.f32 high, %f216;
  mov.b32 %r6854, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_227;

$L__BB0_225:
	mov.f32 	%f217, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f217;
  cvt.rn.f16.f32 high, %f28;
  mov.b32 %r6854, {low,high};}

	// end inline asm

$L__BB0_227:
	add.s32 	%r1839, %r333, 1;
	mul.wide.s32 	%rd218, %r1839, 4;
	add.s64 	%rd219, %rd12, %rd218;
	st.global.u32 	[%rd219], %r6854;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_228:
	@%p103 bra 	$L__BB0_240;

	@%p9 bra 	$L__BB0_231;
	bra.uni 	$L__BB0_230;

$L__BB0_231:
	setp.eq.s32 	%p124, %r242, 0;
	add.s32 	%r1841, %r255, %r262;
	shl.b32 	%r1842, %r1841, 1;
	or.b32  	%r1843, %r1842, 1;
	mul.wide.s32 	%rd220, %r1843, 4;
	add.s64 	%rd221, %rd11, %rd220;
	ld.global.f32 	%f29, [%rd221];
	@%p124 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_232;

$L__BB0_233:
	mov.f32 	%f226, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f29;
  cvt.rn.f16.f32 high, %f226;
  mov.b32 %r6856, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_230:
	mov.f32 	%f222, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f222;
  cvt.rn.f16.f32 high, %f222;
  mov.b32 %r6856, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_234;

$L__BB0_232:
	mov.f32 	%f223, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f223;
  cvt.rn.f16.f32 high, %f29;
  mov.b32 %r6856, {low,high};}

	// end inline asm

$L__BB0_234:
	add.s32 	%r344, %r6837, %r246;
	mul.wide.s32 	%rd222, %r344, 4;
	add.s64 	%rd223, %rd12, %rd222;
	st.global.u32 	[%rd223], %r6856;
	@%p9 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_235;

$L__BB0_236:
	setp.eq.s32 	%p125, %r242, 0;
	add.s32 	%r1847, %r257, %r262;
	shl.b32 	%r1848, %r1847, 1;
	or.b32  	%r1849, %r1848, 1;
	mul.wide.s32 	%rd224, %r1849, 4;
	add.s64 	%rd225, %rd11, %rd224;
	ld.global.f32 	%f30, [%rd225];
	@%p125 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_237;

$L__BB0_238:
	mov.f32 	%f232, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f30;
  cvt.rn.f16.f32 high, %f232;
  mov.b32 %r6857, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_235:
	mov.f32 	%f228, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f228;
  cvt.rn.f16.f32 high, %f228;
  mov.b32 %r6857, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_239;

$L__BB0_237:
	mov.f32 	%f229, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f229;
  cvt.rn.f16.f32 high, %f30;
  mov.b32 %r6857, {low,high};}

	// end inline asm

$L__BB0_239:
	add.s32 	%r1852, %r344, 1;
	mul.wide.s32 	%rd226, %r1852, 4;
	add.s64 	%rd227, %rd12, %rd226;
	st.global.u32 	[%rd227], %r6857;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_240:
	or.b32  	%r1853, %r259, %r262;
	setp.gt.s32 	%p126, %r1853, -1;
	and.pred  	%p128, %p86, %p126;
	setp.lt.s32 	%p129, %r259, %r1472;
	and.pred  	%p10, %p129, %p128;
	@%p100 bra 	$L__BB0_252;

	@%p10 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_242;

$L__BB0_243:
	setp.eq.s32 	%p131, %r242, 0;
	add.s32 	%r1855, %r258, %r262;
	shl.b32 	%r1856, %r1855, 1;
	mul.wide.s32 	%rd228, %r1856, 4;
	add.s64 	%rd229, %rd11, %rd228;
	ld.global.f32 	%f31, [%rd229];
	@%p131 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_244;

$L__BB0_245:
	mov.f32 	%f238, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f31;
  cvt.rn.f16.f32 high, %f238;
  mov.b32 %r6859, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_242:
	mov.f32 	%f234, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f234;
  cvt.rn.f16.f32 high, %f234;
  mov.b32 %r6859, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_246;

$L__BB0_244:
	mov.f32 	%f235, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f235;
  cvt.rn.f16.f32 high, %f31;
  mov.b32 %r6859, {low,high};}

	// end inline asm

$L__BB0_246:
	add.s32 	%r355, %r6837, %r246;
	mul.wide.s32 	%rd230, %r355, 4;
	add.s64 	%rd231, %rd12, %rd230;
	st.global.u32 	[%rd231], %r6859;
	@%p10 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_247;

$L__BB0_248:
	setp.eq.s32 	%p132, %r242, 0;
	add.s32 	%r1860, %r260, %r262;
	shl.b32 	%r1861, %r1860, 1;
	mul.wide.s32 	%rd232, %r1861, 4;
	add.s64 	%rd233, %rd11, %rd232;
	ld.global.f32 	%f32, [%rd233];
	@%p132 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_249;

$L__BB0_250:
	mov.f32 	%f244, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f32;
  cvt.rn.f16.f32 high, %f244;
  mov.b32 %r6860, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_247:
	mov.f32 	%f240, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f240;
  cvt.rn.f16.f32 high, %f240;
  mov.b32 %r6860, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_251;

$L__BB0_249:
	mov.f32 	%f241, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f241;
  cvt.rn.f16.f32 high, %f32;
  mov.b32 %r6860, {low,high};}

	// end inline asm

$L__BB0_251:
	add.s32 	%r1864, %r355, 1;
	mul.wide.s32 	%rd234, %r1864, 4;
	add.s64 	%rd235, %rd12, %rd234;
	st.global.u32 	[%rd235], %r6860;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_252:
	@%p93 bra 	$L__BB0_264;

	@%p10 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_254;

$L__BB0_255:
	setp.eq.s32 	%p134, %r242, 0;
	add.s32 	%r1866, %r258, %r262;
	shl.b32 	%r1867, %r1866, 1;
	or.b32  	%r1868, %r1867, 1;
	mul.wide.s32 	%rd236, %r1868, 4;
	add.s64 	%rd237, %rd11, %rd236;
	ld.global.f32 	%f33, [%rd237];
	@%p134 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_256;

$L__BB0_257:
	mov.f32 	%f250, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f33;
  cvt.rn.f16.f32 high, %f250;
  mov.b32 %r6862, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_254:
	mov.f32 	%f246, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f246;
  cvt.rn.f16.f32 high, %f246;
  mov.b32 %r6862, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_258;

$L__BB0_256:
	mov.f32 	%f247, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f247;
  cvt.rn.f16.f32 high, %f33;
  mov.b32 %r6862, {low,high};}

	// end inline asm

$L__BB0_258:
	add.s32 	%r366, %r6837, %r246;
	mul.wide.s32 	%rd238, %r366, 4;
	add.s64 	%rd239, %rd12, %rd238;
	st.global.u32 	[%rd239], %r6862;
	@%p10 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_259;

$L__BB0_260:
	setp.eq.s32 	%p135, %r242, 0;
	add.s32 	%r1872, %r260, %r262;
	shl.b32 	%r1873, %r1872, 1;
	or.b32  	%r1874, %r1873, 1;
	mul.wide.s32 	%rd240, %r1874, 4;
	add.s64 	%rd241, %rd11, %rd240;
	ld.global.f32 	%f34, [%rd241];
	@%p135 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_261;

$L__BB0_262:
	mov.f32 	%f256, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f34;
  cvt.rn.f16.f32 high, %f256;
  mov.b32 %r6863, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_259:
	mov.f32 	%f252, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f252;
  cvt.rn.f16.f32 high, %f252;
  mov.b32 %r6863, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_263;

$L__BB0_261:
	mov.f32 	%f253, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f253;
  cvt.rn.f16.f32 high, %f34;
  mov.b32 %r6863, {low,high};}

	// end inline asm

$L__BB0_263:
	add.s32 	%r1877, %r366, 1;
	mul.wide.s32 	%rd242, %r1877, 4;
	add.s64 	%rd243, %rd12, %rd242;
	st.global.u32 	[%rd243], %r6863;
	add.s32 	%r6837, %r6837, 2;

$L__BB0_264:
	add.s64 	%rd457, %rd457, 4;
	add.s64 	%rd456, %rd456, -4;
	setp.ne.s64 	%p136, %rd456, 0;
	@%p136 bra 	$L__BB0_144;

$L__BB0_265:
	add.s32 	%r6833, %r6833, %r38;
	setp.lt.s32 	%p137, %r6833, %r1472;
	@%p137 bra 	$L__BB0_142;

$L__BB0_266:
	add.s32 	%r6827, %r6827, %r1492;
	setp.lt.s32 	%p138, %r6827, %r1471;
	@%p138 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_267;

$L__BB0_121:
	@%p22 bra 	$L__BB0_267;

	neg.s32 	%r215, %r64;
	mov.u32 	%r1692, 31;
	sub.s32 	%r1693, %r1692, %r36;
	setp.gt.s32 	%p76, %r35, %r36;
	selp.b32 	%r1694, %r36, %r1693, %p76;
	shl.b32 	%r1695, %r1694, 2;
	mov.u32 	%r1696, 2;
	sub.s32 	%r216, %r1695, %r1474;
	shl.b32 	%r1697, %r1473, 2;
	mov.u32 	%r1698, 128;
	sub.s32 	%r217, %r1698, %r1697;
	sub.s32 	%r1699, %r1696, %r1474;
	add.s32 	%r218, %r1699, %r1695;
	add.s32 	%r219, %r1471, -1;
	add.s32 	%r220, %r216, 1;
	add.s32 	%r221, %r218, 1;
	rem.s32 	%r1724, %r220, %r217;
	add.s32 	%r1725, %r1724, %r217;
	rem.s32 	%r232, %r1725, %r217;
	rem.s32 	%r1726, %r221, %r217;
	add.s32 	%r1727, %r1726, %r217;
	rem.s32 	%r233, %r1727, %r217;

$L__BB0_123:
	setp.ne.s32 	%p77, %r32, %r215;
	@%p77 bra 	$L__BB0_137;

	shl.b32 	%r223, %r6827, 1;
	rem.s32 	%r1700, %r216, %r217;
	add.s32 	%r1701, %r1700, %r217;
	rem.s32 	%r224, %r1701, %r217;
	rem.s32 	%r1702, %r218, %r217;
	add.s32 	%r1703, %r1702, %r217;
	rem.s32 	%r225, %r1703, %r217;
	@%p76 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_125;

$L__BB0_126:
	mul.lo.s32 	%r1706, %r223, %r217;
	add.s32 	%r1707, %r1706, %r224;
	mul.wide.s32 	%rd144, %r1707, 4;
	add.s64 	%rd145, %rd11, %rd144;
	ld.global.f32 	%f117, [%rd145];
	add.s32 	%r1708, %r1706, %r225;
	mul.wide.s32 	%rd146, %r1708, 4;
	add.s64 	%rd147, %rd11, %rd146;
	ld.global.f32 	%f118, [%rd147];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f117;
  cvt.rn.f16.f32 high, %f118;
  mov.b32 %r6828, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_127;

$L__BB0_125:
	mov.f32 	%f116, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f116;
  cvt.rn.f16.f32 high, %f116;
  mov.b32 %r6828, {low,high};}

	// end inline asm

$L__BB0_127:
	shl.b32 	%r1709, %r6827, 5;
	add.s32 	%r1710, %r1709, %r36;
	shl.b32 	%r1711, %r1710, 2;
	mul.wide.s32 	%rd148, %r1711, 4;
	add.s64 	%rd13, %rd12, %rd148;
	st.global.u32 	[%rd13], %r6828;
	@%p76 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_128;

$L__BB0_129:
	add.s32 	%r1714, %r223, 1;
	mul.lo.s32 	%r1715, %r1714, %r217;
	add.s32 	%r1716, %r1715, %r224;
	mul.wide.s32 	%rd149, %r1716, 4;
	add.s64 	%rd150, %rd11, %rd149;
	ld.global.f32 	%f121, [%rd150];
	add.s32 	%r1717, %r1715, %r225;
	mul.wide.s32 	%rd151, %r1717, 4;
	add.s64 	%rd152, %rd11, %rd151;
	ld.global.f32 	%f122, [%rd152];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f121;
  cvt.rn.f16.f32 high, %f122;
  mov.b32 %r6829, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_130;

$L__BB0_128:
	mov.f32 	%f120, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f120;
  cvt.rn.f16.f32 high, %f120;
  mov.b32 %r6829, {low,high};}

	// end inline asm

$L__BB0_130:
	add.s32 	%r1718, %r219, %r6827;
	rem.s32 	%r1719, %r1718, %r1471;
	shl.b32 	%r1720, %r1719, 5;
	add.s32 	%r1721, %r1720, %r36;
	shl.b32 	%r1722, %r1721, 2;
	or.b32  	%r1723, %r1722, 2;
	mul.wide.s32 	%rd153, %r1723, 4;
	add.s64 	%rd14, %rd12, %rd153;
	st.global.u32 	[%rd14], %r6829;
	@%p76 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_131;

$L__BB0_132:
	mul.lo.s32 	%r1730, %r223, %r217;
	add.s32 	%r1731, %r1730, %r232;
	mul.wide.s32 	%rd154, %r1731, 4;
	add.s64 	%rd155, %rd11, %rd154;
	ld.global.f32 	%f125, [%rd155];
	add.s32 	%r1732, %r1730, %r233;
	mul.wide.s32 	%rd156, %r1732, 4;
	add.s64 	%rd157, %rd11, %rd156;
	ld.global.f32 	%f126, [%rd157];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f125;
  cvt.rn.f16.f32 high, %f126;
  mov.b32 %r6830, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_133;

$L__BB0_131:
	mov.f32 	%f124, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f124;
  cvt.rn.f16.f32 high, %f124;
  mov.b32 %r6830, {low,high};}

	// end inline asm

$L__BB0_133:
	st.global.u32 	[%rd13+4], %r6830;
	@%p76 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_134;

$L__BB0_135:
	add.s32 	%r1735, %r223, 1;
	mul.lo.s32 	%r1736, %r1735, %r217;
	add.s32 	%r1737, %r1736, %r232;
	mul.wide.s32 	%rd158, %r1737, 4;
	add.s64 	%rd159, %rd11, %rd158;
	ld.global.f32 	%f129, [%rd159];
	add.s32 	%r1738, %r1736, %r233;
	mul.wide.s32 	%rd160, %r1738, 4;
	add.s64 	%rd161, %rd11, %rd160;
	ld.global.f32 	%f130, [%rd161];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f129;
  cvt.rn.f16.f32 high, %f130;
  mov.b32 %r6831, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_136;

$L__BB0_134:
	mov.f32 	%f128, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f128;
  cvt.rn.f16.f32 high, %f128;
  mov.b32 %r6831, {low,high};}

	// end inline asm

$L__BB0_136:
	st.global.u32 	[%rd14+4], %r6831;

$L__BB0_137:
	add.s32 	%r6827, %r6827, %r1492;
	setp.lt.s32 	%p82, %r6827, %r1471;
	@%p82 bra 	$L__BB0_123;

$L__BB0_267:
	add.s32 	%r1879, %r1466, -1;
	mad.lo.s32 	%r1880, %r1467, 576, 128;
	mul.lo.s32 	%r1881, %r1880, %r1879;
	add.s32 	%r1882, %r59, -64;
	add.s32 	%r1883, %r1882, %r59;
	add.s32 	%r1884, %r1467, -1;
	mad.lo.s32 	%r1885, %r1883, %r1884, %r1881;
	mul.lo.s32 	%r1886, %r1879, %r1467;
	mul.lo.s32 	%r1887, %r1886, 320;
	mad.lo.s32 	%r1888, %r1882, %r1884, %r1887;
	add.s32 	%r375, %r1888, %r1885;
	setp.lt.s32 	%p139, %r375, 1;
	mov.f32 	%f258, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r6868, {low,high};}

	// end inline asm
	@%p139 bra 	$L__BB0_270;

	mov.u32 	%r6867, 0;
	mov.u32 	%r6865, _ZN6kernel5shmemE;

$L__BB0_269:
	st.shared.u32 	[%r6865], %r6868;
	mov.f32 	%f266, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1891, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6865+4], %r1891;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1892, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6865+8], %r1892;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r1893, {low,high};}

	// end inline asm
	st.shared.u32 	[%r6865+12], %r1893;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f266;
  cvt.rn.f16.f32 high, %f266;
  mov.b32 %r6868, {low,high};}

	// end inline asm
	add.s32 	%r6865, %r6865, 16;
	add.s32 	%r6867, %r6867, 4;
	setp.lt.s32 	%p140, %r6867, %r375;
	@%p140 bra 	$L__BB0_269;

$L__BB0_270:
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1895, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f258;
  cvt.rn.f16.f32 high, %f258;
  mov.b32 %r1896, {low,high};}

	// end inline asm
	ld.param.u64 	%rd244, [%rd1+152];
	cvta.to.global.u64 	%rd19, %rd244;
	mov.u32 	%r1897, 31;
	sub.s32 	%r1898, %r1897, %r36;
	setp.gt.s32 	%p141, %r35, %r36;
	selp.b32 	%r1899, %r36, %r1898, %p141;
	shl.b32 	%r1900, %r1899, 2;
	sub.s32 	%r386, %r1900, %r1474;
	shl.b32 	%r1901, %r1473, 2;
	mov.u32 	%r1902, 128;
	sub.s32 	%r387, %r1902, %r1901;
	rem.s32 	%r1903, %r386, %r387;
	add.s32 	%r1904, %r1903, %r387;
	rem.s32 	%r388, %r1904, %r387;
	add.s32 	%r1905, %r386, 2;
	rem.s32 	%r1906, %r1905, %r387;
	add.s32 	%r1907, %r1906, %r387;
	rem.s32 	%r389, %r1907, %r387;
	mul.lo.s32 	%r1908, %r388, 6;
	mul.lo.s32 	%r1909, %r389, 6;
	mul.wide.s32 	%rd245, %r1908, 4;
	add.s64 	%rd20, %rd19, %rd245;
	mul.wide.s32 	%rd246, %r1909, 4;
	add.s64 	%rd21, %rd19, %rd246;
	@%p15 bra 	$L__BB0_272;
	bra.uni 	$L__BB0_271;

$L__BB0_272:
	mov.f32 	%f278, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f278;
  cvt.rn.f16.f32 high, %f278;
  mov.b32 %r6869, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_273;

$L__BB0_271:
	ld.global.f32 	%f273, [%rd20];
	ld.global.f32 	%f274, [%rd20+8];
	add.f32 	%f271, %f273, %f274;
	ld.global.f32 	%f275, [%rd21+8];
	ld.global.f32 	%f276, [%rd21];
	add.f32 	%f272, %f276, %f275;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f271;
  cvt.rn.f16.f32 high, %f272;
  mov.b32 %r6869, {low,high};}

	// end inline asm

$L__BB0_273:
	@%p15 bra 	$L__BB0_275;
	bra.uni 	$L__BB0_274;

$L__BB0_275:
	ld.global.f32 	%f281, [%rd20+4];
	ld.global.f32 	%f282, [%rd21+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f281;
  cvt.rn.f16.f32 high, %f282;
  mov.b32 %r6870, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_276;

$L__BB0_274:
	ld.global.f32 	%f279, [%rd20];
	ld.global.f32 	%f280, [%rd21];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f279;
  cvt.rn.f16.f32 high, %f280;
  mov.b32 %r6870, {low,high};}

	// end inline asm

$L__BB0_276:
	@%p15 bra 	$L__BB0_278;
	bra.uni 	$L__BB0_277;

$L__BB0_278:
	mov.f32 	%f290, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f290;
  cvt.rn.f16.f32 high, %f290;
  mov.b32 %r6871, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_279;

$L__BB0_277:
	ld.global.f32 	%f285, [%rd20+20];
	ld.global.f32 	%f286, [%rd20+12];
	add.f32 	%f283, %f286, %f285;
	ld.global.f32 	%f287, [%rd21+20];
	ld.global.f32 	%f288, [%rd21+12];
	add.f32 	%f284, %f288, %f287;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f283;
  cvt.rn.f16.f32 high, %f284;
  mov.b32 %r6871, {low,high};}

	// end inline asm

$L__BB0_279:
	@%p15 bra 	$L__BB0_281;
	bra.uni 	$L__BB0_280;

$L__BB0_281:
	ld.global.f32 	%f293, [%rd20+16];
	ld.global.f32 	%f294, [%rd21+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f293;
  cvt.rn.f16.f32 high, %f294;
  mov.b32 %r6872, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_282;

$L__BB0_280:
	ld.global.f32 	%f291, [%rd20+12];
	ld.global.f32 	%f292, [%rd21+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f291;
  cvt.rn.f16.f32 high, %f292;
  mov.b32 %r6872, {low,high};}

	// end inline asm

$L__BB0_282:
	add.s32 	%r1918, %r386, 1;
	rem.s32 	%r1919, %r1918, %r387;
	add.s32 	%r1920, %r1919, %r387;
	rem.s32 	%r402, %r1920, %r387;
	add.s32 	%r1921, %r386, 3;
	rem.s32 	%r1922, %r1921, %r387;
	add.s32 	%r1923, %r1922, %r387;
	rem.s32 	%r403, %r1923, %r387;
	mul.lo.s32 	%r1924, %r402, 6;
	mul.lo.s32 	%r1925, %r403, 6;
	mul.wide.s32 	%rd247, %r1924, 4;
	add.s64 	%rd22, %rd19, %rd247;
	mul.wide.s32 	%rd248, %r1925, 4;
	add.s64 	%rd23, %rd19, %rd248;
	@%p15 bra 	$L__BB0_284;
	bra.uni 	$L__BB0_283;

$L__BB0_284:
	mov.f32 	%f302, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f302;
  cvt.rn.f16.f32 high, %f302;
  mov.b32 %r6873, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_285;

$L__BB0_283:
	ld.global.f32 	%f297, [%rd22];
	ld.global.f32 	%f298, [%rd22+8];
	add.f32 	%f295, %f297, %f298;
	ld.global.f32 	%f299, [%rd23+8];
	ld.global.f32 	%f300, [%rd23];
	add.f32 	%f296, %f300, %f299;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f295;
  cvt.rn.f16.f32 high, %f296;
  mov.b32 %r6873, {low,high};}

	// end inline asm

$L__BB0_285:
	@%p15 bra 	$L__BB0_287;
	bra.uni 	$L__BB0_286;

$L__BB0_287:
	ld.global.f32 	%f305, [%rd22+4];
	ld.global.f32 	%f306, [%rd23+4];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f305;
  cvt.rn.f16.f32 high, %f306;
  mov.b32 %r6874, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_288;

$L__BB0_286:
	ld.global.f32 	%f303, [%rd22];
	ld.global.f32 	%f304, [%rd23];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f303;
  cvt.rn.f16.f32 high, %f304;
  mov.b32 %r6874, {low,high};}

	// end inline asm

$L__BB0_288:
	@%p15 bra 	$L__BB0_290;
	bra.uni 	$L__BB0_289;

$L__BB0_290:
	mov.f32 	%f314, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f314;
  cvt.rn.f16.f32 high, %f314;
  mov.b32 %r6875, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_291;

$L__BB0_289:
	ld.global.f32 	%f309, [%rd22+20];
	ld.global.f32 	%f310, [%rd22+12];
	add.f32 	%f307, %f310, %f309;
	ld.global.f32 	%f311, [%rd23+20];
	ld.global.f32 	%f312, [%rd23+12];
	add.f32 	%f308, %f312, %f311;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f307;
  cvt.rn.f16.f32 high, %f308;
  mov.b32 %r6875, {low,high};}

	// end inline asm

$L__BB0_291:
	@%p15 bra 	$L__BB0_293;
	bra.uni 	$L__BB0_292;

$L__BB0_293:
	ld.global.f32 	%f317, [%rd22+16];
	ld.global.f32 	%f318, [%rd23+16];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f317;
  cvt.rn.f16.f32 high, %f318;
  mov.b32 %r6876, {low,high};}

	// end inline asm
	bra.uni 	$L__BB0_294;

$L__BB0_292:
	ld.global.f32 	%f315, [%rd22+12];
	ld.global.f32 	%f316, [%rd23+12];
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f315;
  cvt.rn.f16.f32 high, %f316;
  mov.b32 %r6876, {low,high};}

	// end inline asm

$L__BB0_294:
	// begin inline asm
	mov.u32 %r1934, %envreg2;
	// end inline asm
	cvt.u64.u32 	%rd249, %r1934;
	// begin inline asm
	mov.u32 %r1935, %envreg1;
	// end inline asm
	cvt.u64.u32 	%rd250, %r1935;
	bfi.b64 	%rd24, %rd250, %rd249, 32, 32;
	setp.ne.s64 	%p150, %rd24, 0;
	@%p150 bra 	$L__BB0_296;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_296:
	add.s64 	%rd25, %rd24, 4;
	mov.u32 	%r1936, %nctaid.y;
	mov.u32 	%r1937, %nctaid.x;
	mul.lo.s32 	%r1938, %r1937, %r1936;
	mov.u32 	%r1939, %nctaid.z;
	mul.lo.s32 	%r416, %r1938, %r1939;
	neg.s32 	%r1940, %r32;
	add.s32 	%r1941, %r36, %r31;
	setp.ne.s32 	%p151, %r1941, %r1940;
	mov.u32 	%r1942, %ctaid.x;
	add.s32 	%r417, %r1942, %r33;
	neg.s32 	%r418, %r34;
	bar.sync 	0;
	@%p151 bra 	$L__BB0_300;

	setp.eq.s32 	%p152, %r417, %r418;
	mov.u32 	%r1945, -2147483647;
	sub.s32 	%r1946, %r1945, %r416;
	selp.b32 	%r1944, %r1946, 1, %p152;
	membar.gl;
	// begin inline asm
	atom.add.release.gpu.u32 %r1943,[%rd25],%r1944;
	// end inline asm

$L__BB0_298:
	ld.volatile.u32 	%r1947, [%rd25];
	xor.b32  	%r1948, %r1947, %r1943;
	setp.gt.s32 	%p153, %r1948, -1;
	@%p153 bra 	$L__BB0_298;

	// begin inline asm
	ld.acquire.gpu.u32 %r1949,[%rd25];
	// end inline asm

$L__BB0_300:
	bar.sync 	0;
	setp.lt.s32 	%p154, %r39, 1;
	@%p154 bra 	$L__BB0_819;

	shr.s32 	%r1951, %r1476, 31;
	shr.u32 	%r1952, %r1951, 30;
	add.s32 	%r1953, %r1476, %r1952;
	shr.s32 	%r420, %r1953, 2;
	add.s32 	%r1954, %r36, 24;
	mul.hi.s32 	%r1955, %r1954, 1374389535;
	shr.u32 	%r1956, %r1955, 31;
	shr.s32 	%r1957, %r1955, 3;
	add.s32 	%r1958, %r1957, %r1956;
	mul.lo.s32 	%r1959, %r1958, 25;
	sub.s32 	%r1960, %r1954, %r1959;
	add.s32 	%r1961, %r36, 26;
	mul.hi.s32 	%r1962, %r1961, 1374389535;
	shr.u32 	%r1963, %r1962, 31;
	shr.s32 	%r1964, %r1962, 3;
	add.s32 	%r1965, %r1964, %r1963;
	mul.lo.s32 	%r1966, %r1965, 25;
	sub.s32 	%r1967, %r1961, %r1966;
	shr.u32 	%r1968, %r1476, 31;
	add.s32 	%r1969, %r1476, %r1968;
	and.b32  	%r1970, %r1969, -2;
	sub.s32 	%r421, %r1476, %r1970;
	setp.lt.s32 	%p155, %r36, 25;
	selp.b32 	%r422, %r1960, %r36, %p155;
	setp.lt.s32 	%p156, %r388, %r1485;
	setp.ge.s32 	%p157, %r388, %r1484;
	and.pred  	%p11, %p156, %p157;
	setp.lt.s32 	%p158, %r402, %r1485;
	setp.ge.s32 	%p159, %r402, %r1484;
	and.pred  	%p12, %p158, %p159;
	setp.lt.s32 	%p160, %r389, %r1485;
	setp.ge.s32 	%p161, %r389, %r1484;
	and.pred  	%p13, %p160, %p161;
	setp.lt.s32 	%p162, %r403, %r1485;
	setp.ge.s32 	%p163, %r403, %r1484;
	and.pred  	%p14, %p162, %p163;
	selp.b32 	%r423, %r1967, %r36, %p155;
	mov.u32 	%r1950, 0;
	// begin inline asm
	{mov.u32 %r1971, WARP_SZ;
}
	// end inline asm
	shl.b32 	%r2296, %r1971, 8;
	add.s32 	%r2297, %r2296, -8192;
	or.b32  	%r1975, %r2297, 31;
	mov.u32 	%r7198, %r1896;
	mov.u32 	%r7199, %r1896;
	mov.u32 	%r7208, %r1896;
	mov.u32 	%r7209, %r1896;
	mov.u32 	%r7210, %r1896;
	mov.u32 	%r7211, %r1896;
	mov.u32 	%r7200, %r1896;
	mov.u32 	%r7201, %r1896;
	mov.u32 	%r7202, %r1896;
	mov.u32 	%r7203, %r1896;
	mov.u32 	%r7204, %r1896;
	mov.u32 	%r7205, %r1896;
	mov.u32 	%r7212, %r1896;
	mov.u32 	%r7213, %r1896;
	mov.u32 	%r7214, %r1896;
	mov.u32 	%r7215, %r1896;
	mov.u32 	%r7216, %r1896;
	mov.u32 	%r7217, %r1896;
	mov.u32 	%r7206, %r1896;
	mov.u32 	%r7207, %r1896;
	mov.u32 	%r7218, %r1896;
	mov.u32 	%r7219, %r1896;
	mov.u32 	%r7150, %r1896;
	mov.u32 	%r7151, %r1896;
	mov.u32 	%r7138, %r1896;
	mov.u32 	%r7139, %r1896;
	mov.u32 	%r7140, %r1896;
	mov.u32 	%r7141, %r1896;
	mov.u32 	%r7152, %r1896;
	mov.u32 	%r7153, %r1896;
	mov.u32 	%r7154, %r1896;
	mov.u32 	%r7155, %r1896;
	mov.u32 	%r7156, %r1896;
	mov.u32 	%r7157, %r1896;
	mov.u32 	%r7142, %r1896;
	mov.u32 	%r7143, %r1896;
	mov.u32 	%r7144, %r1896;
	mov.u32 	%r7145, %r1896;
	mov.u32 	%r7158, %r1896;
	mov.u32 	%r7159, %r1896;
	mov.u32 	%r7160, %r1896;
	mov.u32 	%r7161, %r1896;
	mov.u32 	%r6919, %r1896;
	mov.u32 	%r6920, %r1896;
	mov.u32 	%r7146, %r1896;
	mov.u32 	%r7147, %r1896;
	mov.u32 	%r6923, %r1896;
	mov.u32 	%r6924, %r1896;
	mov.u32 	%r6925, %r1896;
	mov.u32 	%r6926, %r1896;
	mov.u32 	%r6927, %r1896;
	mov.u32 	%r6928, %r1896;
	mov.u32 	%r7122, %r1896;
	mov.u32 	%r7123, %r1896;
	mov.u32 	%r6931, %r1896;
	mov.u32 	%r7124, %r1896;
	mov.u32 	%r6933, %r1896;
	mov.u32 	%r6934, %r1896;
	mov.u32 	%r7125, %r1896;
	mov.u32 	%r6936, %r1896;
	mov.u32 	%r6937, %r1896;
	mov.u32 	%r6938, %r1896;
	mov.u32 	%r7162, %r1896;
	mov.u32 	%r7163, %r1896;
	mov.u32 	%r6941, %r1896;
	mov.u32 	%r6942, %r1896;
	mov.u32 	%r7148, %r1896;
	mov.u32 	%r7149, %r1896;
	mov.u32 	%r6945, %r1896;
	mov.u32 	%r6946, %r1896;
	mov.u32 	%r6947, %r1896;
	mov.u32 	%r6948, %r1896;
	mov.u32 	%r6949, %r1896;
	mov.u32 	%r6950, %r1896;
	mov.u32 	%r6951, %r1896;
	mov.u32 	%r6952, %r1896;
	mov.u32 	%r6953, %r1896;
	mov.u32 	%r6954, %r1896;
	mov.u32 	%r6955, %r1896;
	mov.u32 	%r6956, %r1896;
	mov.u32 	%r6957, %r1896;
	mov.u32 	%r6958, %r1896;
	mov.u32 	%r6959, %r1896;
	mov.u32 	%r6960, %r1896;
	mov.u32 	%r6961, %r1896;
	mov.u32 	%r7126, %r1896;
	mov.u32 	%r6963, %r1896;
	mov.u32 	%r6964, %r1896;
	mov.u32 	%r6965, %r1896;
	mov.u32 	%r6966, %r1896;
	mov.u32 	%r6967, %r1896;
	mov.u32 	%r6968, %r1896;
	mov.u32 	%r6969, %r1896;
	mov.u32 	%r7127, %r1896;
	mov.u32 	%r6971, %r1896;
	mov.u32 	%r7164, %r1896;
	mov.u32 	%r6973, %r1896;
	mov.u32 	%r6974, %r1896;
	mov.u32 	%r6975, %r1896;
	mov.u32 	%r6976, %r1896;
	mov.u32 	%r7165, %r1896;
	mov.u32 	%r6978, %r1896;
	mov.u32 	%r6979, %r1896;
	mov.u32 	%r6980, %r1896;
	mov.u32 	%r6981, %r1896;
	mov.u32 	%r6982, %r1896;
	mov.u32 	%r6983, %r1896;
	mov.u32 	%r6984, %r1896;
	mov.u32 	%r6985, %r1896;
	mov.u32 	%r6986, %r1896;
	mov.u32 	%r6987, %r1896;
	mov.u32 	%r6988, %r1896;
	mov.u32 	%r6989, %r1896;
	mov.u32 	%r6990, %r1896;
	mov.u32 	%r6991, %r1896;
	mov.u32 	%r6992, %r1896;
	mov.u32 	%r6993, %r1896;
	mov.u32 	%r6994, %r1896;
	mov.u32 	%r6995, %r1896;
	mov.u32 	%r6996, %r1896;
	mov.u32 	%r6997, %r1896;
	mov.u32 	%r6998, %r1896;
	mov.u32 	%r6999, %r1896;
	mov.u32 	%r7000, %r1896;
	mov.u32 	%r7001, %r1896;
	mov.u32 	%r7002, %r1896;
	mov.u32 	%r7003, %r1896;
	mov.u32 	%r7004, %r1896;
	mov.u32 	%r7005, %r1896;
	mov.u32 	%r7006, %r1896;
	mov.u32 	%r7007, %r1896;
	mov.u32 	%r7008, %r1896;
	mov.u32 	%r7009, %r1896;
	mov.u32 	%r7010, %r1896;
	mov.u32 	%r7011, %r1896;
	mov.u32 	%r7012, %r1896;
	mov.u32 	%r7013, %r1896;
	mov.u32 	%r7014, %r1896;
	mov.u32 	%r7015, %r1896;
	mov.u32 	%r7016, %r1896;
	mov.u32 	%r7017, %r1896;
	mov.u32 	%r7018, %r1896;
	mov.u32 	%r7019, %r1896;
	mov.u32 	%r7020, %r1896;
	mov.u32 	%r7021, %r1896;
	mov.u32 	%r7022, %r1896;
	mov.u32 	%r7023, %r1896;
	mov.u32 	%r7024, %r1896;
	mov.u32 	%r7025, %r1896;
	mov.u32 	%r7026, %r1896;
	mov.u32 	%r7027, %r1950;

$L__BB0_302:
	mov.u32 	%r517, %r7127;
	mov.u32 	%r513, %r6966;
	mov.u32 	%r509, %r7126;
	mov.u32 	%r507, %r6960;
	mov.u32 	%r505, %r6958;
	mov.u32 	%r497, %r6950;
	mov.u32 	%r6966, %r7125;
	mov.u32 	%r479, %r7124;
	mov.u32 	%r6960, %r7123;
	mov.u32 	%r476, %r7122;
	mov.u32 	%r471, %r6924;
	mov.u32 	%r470, %r6923;
	mov.u32 	%r6774, %ctaid.y;
	mov.u32 	%r6773, %ctaid.z;
	mov.u32 	%r1986, 1;
	not.b32 	%r2260, %r6773;
	mov.u32 	%r2252, -1;
	add.s32 	%r2261, %r1469, %r2260;
	not.b32 	%r2263, %r6774;
	add.s32 	%r2264, %r1468, %r2263;
	add.s32 	%r2265, %r2264, %r2261;
	mul.lo.s32 	%r2266, %r2265, %r1470;
	add.s32 	%r2267, %r2266, %r1471;
	not.b32 	%r2269, %r31;
	add.s32 	%r2270, %r1466, %r2269;
	mad.lo.s32 	%r2271, %r2264, %r1466, %r2270;
	not.b32 	%r2273, %r32;
	add.s32 	%r2274, %r1467, %r2273;
	mad.lo.s32 	%r2275, %r2261, %r1467, %r2274;
	add.s32 	%r2276, %r2271, %r2275;
	shl.b32 	%r2277, %r2276, 1;
	add.s32 	%r2278, %r2267, %r2277;
	add.s32 	%r2279, %r2278, %r7027;
	add.s32 	%r2280, %r7027, %r2266;
	div.s32 	%r2281, %r2279, %r1471;
	mul.lo.s32 	%r2282, %r2281, %r1471;
	sub.s32 	%r2285, %r38, %r1471;
	sub.s32 	%r2286, %r2271, %r2275;
	shl.b32 	%r2287, %r2286, 1;
	add.s32 	%r2288, %r2287, %r1472;
	mad.lo.s32 	%r2289, %r2281, %r38, %r2288;
	mad.lo.s32 	%r2290, %r2281, %r2285, %r2280;
	div.s32 	%r2291, %r2289, %r1472;
	mul.lo.s32 	%r2292, %r2291, %r1472;
	sub.s32 	%r2295, %r1493, %r1472;
	mov.u32 	%r2070, 8;
	// begin inline asm
	{shfl.sync.idx.b32 %r1972,%r1895,%r1950,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r1978, %r6870, %r1972, %p15;
	// begin inline asm
	{mul.f16x2 %r7111,%r1978,%r7026;
}
	// end inline asm
	selp.b32 	%r1981, %r6874, %r1972, %p15;
	// begin inline asm
	{mul.f16x2 %r7109,%r1981,%r7025;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r1984,%r1895,%r1986,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r1990, %r6870, %r1984, %p15;
	// begin inline asm
	{mul.f16x2 %r7110,%r1990,%r7024;
}
	// end inline asm
	selp.b32 	%r1993, %r6874, %r1984, %p15;
	// begin inline asm
	{mul.f16x2 %r7108,%r1993,%r7023;
}
	// end inline asm
	mov.u32 	%r1998, 2;
	// begin inline asm
	{shfl.sync.idx.b32 %r1996,%r1895,%r1998,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2002, %r6870, %r1996, %p15;
	// begin inline asm
	{mul.f16x2 %r7107,%r2002,%r7022;
}
	// end inline asm
	selp.b32 	%r2005, %r6874, %r1996, %p15;
	// begin inline asm
	{mul.f16x2 %r7106,%r2005,%r7021;
}
	// end inline asm
	mov.u32 	%r2010, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2008,%r1895,%r2010,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2014, %r6870, %r2008, %p15;
	// begin inline asm
	{mul.f16x2 %r7105,%r2014,%r7219;
}
	// end inline asm
	selp.b32 	%r2017, %r6874, %r2008, %p15;
	// begin inline asm
	{mul.f16x2 %r7103,%r2017,%r7218;
}
	// end inline asm
	mov.u32 	%r2022, 4;
	// begin inline asm
	{shfl.sync.idx.b32 %r2020,%r1895,%r2022,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2026, %r6870, %r2020, %p15;
	// begin inline asm
	{mul.f16x2 %r7104,%r2026,%r7020;
}
	// end inline asm
	selp.b32 	%r2029, %r6874, %r2020, %p15;
	// begin inline asm
	{mul.f16x2 %r7102,%r2029,%r7019;
}
	// end inline asm
	mov.u32 	%r2034, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2032,%r1895,%r2034,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2038, %r6870, %r2032, %p15;
	// begin inline asm
	{mul.f16x2 %r7101,%r2038,%r7018;
}
	// end inline asm
	selp.b32 	%r2041, %r6874, %r2032, %p15;
	// begin inline asm
	{mul.f16x2 %r7098,%r2041,%r7017;
}
	// end inline asm
	mov.u32 	%r2046, 6;
	// begin inline asm
	{shfl.sync.idx.b32 %r2044,%r1895,%r2046,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2050, %r6870, %r2044, %p15;
	// begin inline asm
	{mul.f16x2 %r7100,%r2050,%r7016;
}
	// end inline asm
	selp.b32 	%r2053, %r6874, %r2044, %p15;
	// begin inline asm
	{mul.f16x2 %r7097,%r2053,%r7015;
}
	// end inline asm
	mov.u32 	%r2058, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2056,%r1895,%r2058,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2062, %r6870, %r2056, %p15;
	// begin inline asm
	{mul.f16x2 %r7099,%r2062,%r7014;
}
	// end inline asm
	selp.b32 	%r2065, %r6874, %r2056, %p15;
	// begin inline asm
	{mul.f16x2 %r7096,%r2065,%r7013;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r2068,%r1895,%r2070,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2074, %r6870, %r2068, %p15;
	// begin inline asm
	{mul.f16x2 %r7095,%r2074,%r7012;
}
	// end inline asm
	selp.b32 	%r2077, %r6874, %r2068, %p15;
	// begin inline asm
	{mul.f16x2 %r7092,%r2077,%r7011;
}
	// end inline asm
	mov.u32 	%r2082, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2080,%r1895,%r2082,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2086, %r6870, %r2080, %p15;
	// begin inline asm
	{mul.f16x2 %r7094,%r2086,%r7010;
}
	// end inline asm
	selp.b32 	%r2089, %r6874, %r2080, %p15;
	// begin inline asm
	{mul.f16x2 %r7091,%r2089,%r7009;
}
	// end inline asm
	mov.u32 	%r2094, 10;
	// begin inline asm
	{shfl.sync.idx.b32 %r2092,%r1895,%r2094,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2098, %r6870, %r2092, %p15;
	// begin inline asm
	{mul.f16x2 %r7093,%r2098,%r7008;
}
	// end inline asm
	selp.b32 	%r2101, %r6874, %r2092, %p15;
	// begin inline asm
	{mul.f16x2 %r7090,%r2101,%r7007;
}
	// end inline asm
	mov.u32 	%r2106, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2104,%r1895,%r2106,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2110, %r6870, %r2104, %p15;
	// begin inline asm
	{mul.f16x2 %r7089,%r2110,%r7207;
}
	// end inline asm
	selp.b32 	%r2113, %r6874, %r2104, %p15;
	// begin inline asm
	{mul.f16x2 %r7088,%r2113,%r7206;
}
	// end inline asm
	mov.u32 	%r2118, 12;
	// begin inline asm
	{shfl.sync.idx.b32 %r2116,%r1895,%r2118,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2122, %r6870, %r2116, %p15;
	// begin inline asm
	{mul.f16x2 %r7087,%r2122,%r7217;
}
	// end inline asm
	selp.b32 	%r2125, %r6874, %r2116, %p15;
	// begin inline asm
	{mul.f16x2 %r7085,%r2125,%r7215;
}
	// end inline asm
	mov.u32 	%r2130, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2128,%r1895,%r2130,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2134, %r6870, %r2128, %p15;
	// begin inline asm
	{mul.f16x2 %r7086,%r2134,%r7216;
}
	// end inline asm
	selp.b32 	%r2137, %r6874, %r2128, %p15;
	// begin inline asm
	{mul.f16x2 %r7084,%r2137,%r7214;
}
	// end inline asm
	mov.u32 	%r2142, 14;
	// begin inline asm
	{shfl.sync.idx.b32 %r2140,%r1895,%r2142,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2146, %r6870, %r2140, %p15;
	// begin inline asm
	{mul.f16x2 %r7083,%r2146,%r7213;
}
	// end inline asm
	selp.b32 	%r2149, %r6874, %r2140, %p15;
	// begin inline asm
	{mul.f16x2 %r7080,%r2149,%r7212;
}
	// end inline asm
	mov.u32 	%r2154, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2152,%r1895,%r2154,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2158, %r6870, %r2152, %p15;
	// begin inline asm
	{mul.f16x2 %r7082,%r2158,%r7006;
}
	// end inline asm
	selp.b32 	%r2161, %r6874, %r2152, %p15;
	// begin inline asm
	{mul.f16x2 %r7079,%r2161,%r7005;
}
	// end inline asm
	mov.u32 	%r2166, 16;
	// begin inline asm
	{shfl.sync.idx.b32 %r2164,%r1895,%r2166,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2170, %r6870, %r2164, %p15;
	// begin inline asm
	{mul.f16x2 %r7081,%r2170,%r7004;
}
	// end inline asm
	selp.b32 	%r2173, %r6874, %r2164, %p15;
	// begin inline asm
	{mul.f16x2 %r7078,%r2173,%r7003;
}
	// end inline asm
	mov.u32 	%r2178, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2176,%r1895,%r2178,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2182, %r6870, %r2176, %p15;
	// begin inline asm
	{mul.f16x2 %r7077,%r2182,%r7205;
}
	// end inline asm
	selp.b32 	%r2185, %r6874, %r2176, %p15;
	// begin inline asm
	{mul.f16x2 %r7074,%r2185,%r7203;
}
	// end inline asm
	mov.u32 	%r2190, 18;
	// begin inline asm
	{shfl.sync.idx.b32 %r2188,%r1895,%r2190,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2194, %r6870, %r2188, %p15;
	// begin inline asm
	{mul.f16x2 %r7076,%r2194,%r7204;
}
	// end inline asm
	selp.b32 	%r2197, %r6874, %r2188, %p15;
	// begin inline asm
	{mul.f16x2 %r7073,%r2197,%r7202;
}
	// end inline asm
	mov.u32 	%r2202, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2200,%r1895,%r2202,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2206, %r6870, %r2200, %p15;
	// begin inline asm
	{mul.f16x2 %r7075,%r2206,%r7002;
}
	// end inline asm
	selp.b32 	%r2209, %r6874, %r2200, %p15;
	// begin inline asm
	{mul.f16x2 %r7072,%r2209,%r7001;
}
	// end inline asm
	mov.u32 	%r2214, 20;
	// begin inline asm
	{shfl.sync.idx.b32 %r2212,%r1895,%r2214,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2218, %r6870, %r2212, %p15;
	// begin inline asm
	{mul.f16x2 %r7071,%r2218,%r7201;
}
	// end inline asm
	selp.b32 	%r2221, %r6874, %r2212, %p15;
	// begin inline asm
	{mul.f16x2 %r7070,%r2221,%r7200;
}
	// end inline asm
	mov.u32 	%r2226, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2224,%r1895,%r2226,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2230, %r6870, %r2224, %p15;
	// begin inline asm
	{mul.f16x2 %r7069,%r2230,%r7211;
}
	// end inline asm
	selp.b32 	%r2233, %r6874, %r2224, %p15;
	// begin inline asm
	{mul.f16x2 %r7067,%r2233,%r7209;
}
	// end inline asm
	mov.u32 	%r2238, 22;
	// begin inline asm
	{shfl.sync.idx.b32 %r2236,%r1895,%r2238,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2242, %r6870, %r2236, %p15;
	// begin inline asm
	{mul.f16x2 %r7068,%r2242,%r7210;
}
	// end inline asm
	selp.b32 	%r2245, %r6874, %r2236, %p15;
	// begin inline asm
	{mul.f16x2 %r7066,%r2245,%r7208;
}
	// end inline asm
	mov.u32 	%r2250, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2248,%r1895,%r2250,%r1975,%r2252;
}
	// end inline asm
	selp.b32 	%r2254, %r6870, %r2248, %p15;
	// begin inline asm
	{mul.f16x2 %r7065,%r2254,%r7199;
}
	// end inline asm
	selp.b32 	%r2257, %r6874, %r2248, %p15;
	// begin inline asm
	{mul.f16x2 %r7064,%r2257,%r7198;
}
	// end inline asm
	sub.s32 	%r623, %r2279, %r2282;
	sub.s32 	%r624, %r2289, %r2292;
	mad.lo.s32 	%r625, %r2291, %r2295, %r2290;
	ld.param.u64 	%rd254, [%rd1+144];
	cvta.to.global.u64 	%rd255, %rd254;
	shl.b32 	%r2344, %r625, 1;
	mul.wide.s32 	%rd256, %r2344, 4;
	add.s64 	%rd26, %rd255, %rd256;
	@%p74 bra 	$L__BB0_310;
	bra.uni 	$L__BB0_303;

$L__BB0_310:
	add.s32 	%r2547, %r1488, 1;
	setp.lt.s32 	%p171, %r625, %r2547;
	setp.eq.s32 	%p172, %r420, %r36;
	setp.gt.s32 	%p173, %r625, -1;
	and.pred  	%p174, %p172, %p173;
	and.pred  	%p175, %p171, %p174;
	@%p175 bra 	$L__BB0_312;
	bra.uni 	$L__BB0_311;

$L__BB0_312:
	ld.global.f32 	%f329, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f329;
  mov.b32 %r7030, {low,low};}

	// end inline asm
	ld.global.f32 	%f330, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f330;
  mov.b32 %r7031, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_313;

$L__BB0_303:
	add.s32 	%r2347, %r1488, 1;
	setp.lt.s32 	%p166, %r625, %r2347;
	setp.gt.s32 	%p167, %r625, -1;
	and.pred  	%p168, %p167, %p166;
	@%p168 bra 	$L__BB0_305;
	bra.uni 	$L__BB0_304;

$L__BB0_305:
	ld.global.f32 	%f323, [%rd26];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f323;
  mov.b32 %r7028, {low,low};}

	// end inline asm
	ld.global.f32 	%f324, [%rd26+4];
	// begin inline asm
	{.reg .f16 low;
  cvt.rn.f16.f32 low, %f324;
  mov.b32 %r7029, {low,low};}

	// end inline asm
	bra.uni 	$L__BB0_306;

$L__BB0_311:
	mov.f32 	%f328, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7030, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f328;
  cvt.rn.f16.f32 high, %f328;
  mov.b32 %r7031, {low,high};}

	// end inline asm

$L__BB0_313:
	mov.u32 	%r2555, 0;
	mov.u32 	%r2566, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2553,%r6868,%r2555,%r1975,%r2566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2558,%r7030,%r2553;
}
	// end inline asm
	mov.u32 	%r2564, 1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2562,%r6868,%r2564,%r1975,%r2566;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2567,%r7031,%r2562;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7033,%r2558,%r2567;
}
	// end inline asm
	setp.eq.s32 	%p176, %r421, 0;
	mov.u32 	%r7032, %r7033;
	@%p176 bra 	$L__BB0_315;

	mov.f32 	%f332, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f332;
  cvt.rn.f16.f32 high, %f332;
  mov.b32 %r7032, {low,high};}

	// end inline asm

$L__BB0_315:
	// begin inline asm
	{add.f16x2 %r7111,%r7111,%r7032;
}
	// end inline asm
	setp.eq.s32 	%p177, %r421, 1;
	@%p177 bra 	$L__BB0_317;

	mov.f32 	%f334, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f334;
  cvt.rn.f16.f32 high, %f334;
  mov.b32 %r7033, {low,high};}

	// end inline asm

$L__BB0_317:
	// begin inline asm
	{add.f16x2 %r7109,%r7109,%r7033;
}
	// end inline asm
	mov.u32 	%r2588, 2;
	mov.u32 	%r2599, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2586,%r6868,%r2588,%r1975,%r2599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2591,%r7030,%r2586;
}
	// end inline asm
	mov.u32 	%r2597, 3;
	// begin inline asm
	{shfl.sync.idx.b32 %r2595,%r6868,%r2597,%r1975,%r2599;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2600,%r7031,%r2595;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7035,%r2591,%r2600;
}
	// end inline asm
	mov.u32 	%r7034, %r7035;
	@%p176 bra 	$L__BB0_319;

	mov.f32 	%f336, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f336;
  cvt.rn.f16.f32 high, %f336;
  mov.b32 %r7034, {low,high};}

	// end inline asm

$L__BB0_319:
	// begin inline asm
	{add.f16x2 %r7110,%r7110,%r7034;
}
	// end inline asm
	@%p177 bra 	$L__BB0_321;

	mov.f32 	%f338, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f338;
  cvt.rn.f16.f32 high, %f338;
  mov.b32 %r7035, {low,high};}

	// end inline asm

$L__BB0_321:
	// begin inline asm
	{add.f16x2 %r7108,%r7108,%r7035;
}
	// end inline asm
	mov.u32 	%r2621, 4;
	mov.u32 	%r2632, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2619,%r6868,%r2621,%r1975,%r2632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2624,%r7030,%r2619;
}
	// end inline asm
	mov.u32 	%r2630, 5;
	// begin inline asm
	{shfl.sync.idx.b32 %r2628,%r6868,%r2630,%r1975,%r2632;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2633,%r7031,%r2628;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7037,%r2624,%r2633;
}
	// end inline asm
	mov.u32 	%r7036, %r7037;
	@%p176 bra 	$L__BB0_323;

	mov.f32 	%f340, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f340;
  cvt.rn.f16.f32 high, %f340;
  mov.b32 %r7036, {low,high};}

	// end inline asm

$L__BB0_323:
	// begin inline asm
	{add.f16x2 %r7107,%r7107,%r7036;
}
	// end inline asm
	@%p177 bra 	$L__BB0_325;

	mov.f32 	%f342, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f342;
  cvt.rn.f16.f32 high, %f342;
  mov.b32 %r7037, {low,high};}

	// end inline asm

$L__BB0_325:
	// begin inline asm
	{add.f16x2 %r7106,%r7106,%r7037;
}
	// end inline asm
	mov.u32 	%r2654, 6;
	mov.u32 	%r2665, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2652,%r6868,%r2654,%r1975,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2657,%r7030,%r2652;
}
	// end inline asm
	mov.u32 	%r2663, 7;
	// begin inline asm
	{shfl.sync.idx.b32 %r2661,%r6868,%r2663,%r1975,%r2665;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2666,%r7031,%r2661;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7039,%r2657,%r2666;
}
	// end inline asm
	mov.u32 	%r7038, %r7039;
	@%p176 bra 	$L__BB0_327;

	mov.f32 	%f344, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f344;
  cvt.rn.f16.f32 high, %f344;
  mov.b32 %r7038, {low,high};}

	// end inline asm

$L__BB0_327:
	// begin inline asm
	{add.f16x2 %r7105,%r7105,%r7038;
}
	// end inline asm
	@%p177 bra 	$L__BB0_329;

	mov.f32 	%f346, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f346;
  cvt.rn.f16.f32 high, %f346;
  mov.b32 %r7039, {low,high};}

	// end inline asm

$L__BB0_329:
	// begin inline asm
	{add.f16x2 %r7103,%r7103,%r7039;
}
	// end inline asm
	mov.u32 	%r2687, 8;
	mov.u32 	%r2698, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2685,%r6868,%r2687,%r1975,%r2698;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2690,%r7030,%r2685;
}
	// end inline asm
	mov.u32 	%r2696, 9;
	// begin inline asm
	{shfl.sync.idx.b32 %r2694,%r6868,%r2696,%r1975,%r2698;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2699,%r7031,%r2694;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7041,%r2690,%r2699;
}
	// end inline asm
	mov.u32 	%r7040, %r7041;
	@%p176 bra 	$L__BB0_331;

	mov.f32 	%f348, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f348;
  cvt.rn.f16.f32 high, %f348;
  mov.b32 %r7040, {low,high};}

	// end inline asm

$L__BB0_331:
	// begin inline asm
	{add.f16x2 %r7104,%r7104,%r7040;
}
	// end inline asm
	@%p177 bra 	$L__BB0_333;

	mov.f32 	%f350, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f350;
  cvt.rn.f16.f32 high, %f350;
  mov.b32 %r7041, {low,high};}

	// end inline asm

$L__BB0_333:
	// begin inline asm
	{add.f16x2 %r7102,%r7102,%r7041;
}
	// end inline asm
	mov.u32 	%r2720, 10;
	mov.u32 	%r2731, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2718,%r6868,%r2720,%r1975,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2723,%r7030,%r2718;
}
	// end inline asm
	mov.u32 	%r2729, 11;
	// begin inline asm
	{shfl.sync.idx.b32 %r2727,%r6868,%r2729,%r1975,%r2731;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2732,%r7031,%r2727;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7043,%r2723,%r2732;
}
	// end inline asm
	mov.u32 	%r7042, %r7043;
	@%p176 bra 	$L__BB0_335;

	mov.f32 	%f352, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f352;
  cvt.rn.f16.f32 high, %f352;
  mov.b32 %r7042, {low,high};}

	// end inline asm

$L__BB0_335:
	// begin inline asm
	{add.f16x2 %r7101,%r7101,%r7042;
}
	// end inline asm
	@%p177 bra 	$L__BB0_337;

	mov.f32 	%f354, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f354;
  cvt.rn.f16.f32 high, %f354;
  mov.b32 %r7043, {low,high};}

	// end inline asm

$L__BB0_337:
	// begin inline asm
	{add.f16x2 %r7098,%r7098,%r7043;
}
	// end inline asm
	mov.u32 	%r2753, 12;
	mov.u32 	%r2764, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2751,%r6868,%r2753,%r1975,%r2764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2756,%r7030,%r2751;
}
	// end inline asm
	mov.u32 	%r2762, 13;
	// begin inline asm
	{shfl.sync.idx.b32 %r2760,%r6868,%r2762,%r1975,%r2764;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2765,%r7031,%r2760;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7045,%r2756,%r2765;
}
	// end inline asm
	mov.u32 	%r7044, %r7045;
	@%p176 bra 	$L__BB0_339;

	mov.f32 	%f356, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f356;
  cvt.rn.f16.f32 high, %f356;
  mov.b32 %r7044, {low,high};}

	// end inline asm

$L__BB0_339:
	// begin inline asm
	{add.f16x2 %r7100,%r7100,%r7044;
}
	// end inline asm
	@%p177 bra 	$L__BB0_341;

	mov.f32 	%f358, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f358;
  cvt.rn.f16.f32 high, %f358;
  mov.b32 %r7045, {low,high};}

	// end inline asm

$L__BB0_341:
	// begin inline asm
	{add.f16x2 %r7097,%r7097,%r7045;
}
	// end inline asm
	mov.u32 	%r2786, 14;
	mov.u32 	%r2797, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2784,%r6868,%r2786,%r1975,%r2797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2789,%r7030,%r2784;
}
	// end inline asm
	mov.u32 	%r2795, 15;
	// begin inline asm
	{shfl.sync.idx.b32 %r2793,%r6868,%r2795,%r1975,%r2797;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2798,%r7031,%r2793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7047,%r2789,%r2798;
}
	// end inline asm
	mov.u32 	%r7046, %r7047;
	@%p176 bra 	$L__BB0_343;

	mov.f32 	%f360, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f360;
  cvt.rn.f16.f32 high, %f360;
  mov.b32 %r7046, {low,high};}

	// end inline asm

$L__BB0_343:
	// begin inline asm
	{add.f16x2 %r7095,%r7095,%r7046;
}
	// end inline asm
	@%p177 bra 	$L__BB0_345;

	mov.f32 	%f362, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f362;
  cvt.rn.f16.f32 high, %f362;
  mov.b32 %r7047, {low,high};}

	// end inline asm

$L__BB0_345:
	// begin inline asm
	{add.f16x2 %r7092,%r7092,%r7047;
}
	// end inline asm
	mov.u32 	%r2819, 16;
	mov.u32 	%r2830, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2817,%r6868,%r2819,%r1975,%r2830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2822,%r7030,%r2817;
}
	// end inline asm
	mov.u32 	%r2828, 17;
	// begin inline asm
	{shfl.sync.idx.b32 %r2826,%r6868,%r2828,%r1975,%r2830;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2831,%r7031,%r2826;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7049,%r2822,%r2831;
}
	// end inline asm
	mov.u32 	%r7048, %r7049;
	@%p176 bra 	$L__BB0_347;

	mov.f32 	%f364, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f364;
  cvt.rn.f16.f32 high, %f364;
  mov.b32 %r7048, {low,high};}

	// end inline asm

$L__BB0_347:
	// begin inline asm
	{add.f16x2 %r7094,%r7094,%r7048;
}
	// end inline asm
	@%p177 bra 	$L__BB0_349;

	mov.f32 	%f366, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f366;
  cvt.rn.f16.f32 high, %f366;
  mov.b32 %r7049, {low,high};}

	// end inline asm

$L__BB0_349:
	// begin inline asm
	{add.f16x2 %r7091,%r7091,%r7049;
}
	// end inline asm
	mov.u32 	%r2852, 18;
	mov.u32 	%r2863, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2850,%r6868,%r2852,%r1975,%r2863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2855,%r7030,%r2850;
}
	// end inline asm
	mov.u32 	%r2861, 19;
	// begin inline asm
	{shfl.sync.idx.b32 %r2859,%r6868,%r2861,%r1975,%r2863;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2864,%r7031,%r2859;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7051,%r2855,%r2864;
}
	// end inline asm
	mov.u32 	%r7050, %r7051;
	@%p176 bra 	$L__BB0_351;

	mov.f32 	%f368, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f368;
  cvt.rn.f16.f32 high, %f368;
  mov.b32 %r7050, {low,high};}

	// end inline asm

$L__BB0_351:
	// begin inline asm
	{add.f16x2 %r7089,%r7089,%r7050;
}
	// end inline asm
	@%p177 bra 	$L__BB0_353;

	mov.f32 	%f370, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f370;
  cvt.rn.f16.f32 high, %f370;
  mov.b32 %r7051, {low,high};}

	// end inline asm

$L__BB0_353:
	// begin inline asm
	{add.f16x2 %r7088,%r7088,%r7051;
}
	// end inline asm
	mov.u32 	%r2885, 20;
	mov.u32 	%r2896, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2883,%r6868,%r2885,%r1975,%r2896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2888,%r7030,%r2883;
}
	// end inline asm
	mov.u32 	%r2894, 21;
	// begin inline asm
	{shfl.sync.idx.b32 %r2892,%r6868,%r2894,%r1975,%r2896;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2897,%r7031,%r2892;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7053,%r2888,%r2897;
}
	// end inline asm
	mov.u32 	%r7052, %r7053;
	@%p176 bra 	$L__BB0_355;

	mov.f32 	%f372, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f372;
  cvt.rn.f16.f32 high, %f372;
  mov.b32 %r7052, {low,high};}

	// end inline asm

$L__BB0_355:
	// begin inline asm
	{add.f16x2 %r7087,%r7087,%r7052;
}
	// end inline asm
	@%p177 bra 	$L__BB0_357;

	mov.f32 	%f374, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f374;
  cvt.rn.f16.f32 high, %f374;
  mov.b32 %r7053, {low,high};}

	// end inline asm

$L__BB0_357:
	// begin inline asm
	{add.f16x2 %r7085,%r7085,%r7053;
}
	// end inline asm
	mov.u32 	%r2918, 22;
	mov.u32 	%r2929, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2916,%r6868,%r2918,%r1975,%r2929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2921,%r7030,%r2916;
}
	// end inline asm
	mov.u32 	%r2927, 23;
	// begin inline asm
	{shfl.sync.idx.b32 %r2925,%r6868,%r2927,%r1975,%r2929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2930,%r7031,%r2925;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7055,%r2921,%r2930;
}
	// end inline asm
	mov.u32 	%r7054, %r7055;
	@%p176 bra 	$L__BB0_359;

	mov.f32 	%f376, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f376;
  cvt.rn.f16.f32 high, %f376;
  mov.b32 %r7054, {low,high};}

	// end inline asm

$L__BB0_359:
	// begin inline asm
	{add.f16x2 %r7083,%r7083,%r7054;
}
	// end inline asm
	@%p177 bra 	$L__BB0_361;

	mov.f32 	%f378, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f378;
  cvt.rn.f16.f32 high, %f378;
  mov.b32 %r7055, {low,high};}

	// end inline asm

$L__BB0_361:
	// begin inline asm
	{add.f16x2 %r7080,%r7080,%r7055;
}
	// end inline asm
	mov.u32 	%r2951, 24;
	mov.u32 	%r2962, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2949,%r6868,%r2951,%r1975,%r2962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2954,%r7030,%r2949;
}
	// end inline asm
	mov.u32 	%r2960, 25;
	// begin inline asm
	{shfl.sync.idx.b32 %r2958,%r6868,%r2960,%r1975,%r2962;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2963,%r7031,%r2958;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7057,%r2954,%r2963;
}
	// end inline asm
	mov.u32 	%r7056, %r7057;
	@%p176 bra 	$L__BB0_363;

	mov.f32 	%f380, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f380;
  cvt.rn.f16.f32 high, %f380;
  mov.b32 %r7056, {low,high};}

	// end inline asm

$L__BB0_363:
	// begin inline asm
	{add.f16x2 %r7082,%r7082,%r7056;
}
	// end inline asm
	@%p177 bra 	$L__BB0_365;

	mov.f32 	%f382, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f382;
  cvt.rn.f16.f32 high, %f382;
  mov.b32 %r7057, {low,high};}

	// end inline asm

$L__BB0_365:
	// begin inline asm
	{add.f16x2 %r7079,%r7079,%r7057;
}
	// end inline asm
	mov.u32 	%r2984, 26;
	mov.u32 	%r2995, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r2982,%r6868,%r2984,%r1975,%r2995;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2987,%r7030,%r2982;
}
	// end inline asm
	mov.u32 	%r2993, 27;
	// begin inline asm
	{shfl.sync.idx.b32 %r2991,%r6868,%r2993,%r1975,%r2995;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2996,%r7031,%r2991;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7059,%r2987,%r2996;
}
	// end inline asm
	mov.u32 	%r7058, %r7059;
	@%p176 bra 	$L__BB0_367;

	mov.f32 	%f384, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f384;
  cvt.rn.f16.f32 high, %f384;
  mov.b32 %r7058, {low,high};}

	// end inline asm

$L__BB0_367:
	// begin inline asm
	{add.f16x2 %r7077,%r7077,%r7058;
}
	// end inline asm
	@%p177 bra 	$L__BB0_369;

	mov.f32 	%f386, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f386;
  cvt.rn.f16.f32 high, %f386;
  mov.b32 %r7059, {low,high};}

	// end inline asm

$L__BB0_369:
	// begin inline asm
	{add.f16x2 %r7074,%r7074,%r7059;
}
	// end inline asm
	mov.u32 	%r3017, 28;
	mov.u32 	%r3028, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3015,%r6868,%r3017,%r1975,%r3028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3020,%r7030,%r3015;
}
	// end inline asm
	mov.u32 	%r3026, 29;
	// begin inline asm
	{shfl.sync.idx.b32 %r3024,%r6868,%r3026,%r1975,%r3028;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3029,%r7031,%r3024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7061,%r3020,%r3029;
}
	// end inline asm
	mov.u32 	%r7060, %r7061;
	@%p176 bra 	$L__BB0_371;

	mov.f32 	%f388, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f388;
  cvt.rn.f16.f32 high, %f388;
  mov.b32 %r7060, {low,high};}

	// end inline asm

$L__BB0_371:
	// begin inline asm
	{add.f16x2 %r7076,%r7076,%r7060;
}
	// end inline asm
	@%p177 bra 	$L__BB0_373;

	mov.f32 	%f390, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f390;
  cvt.rn.f16.f32 high, %f390;
  mov.b32 %r7061, {low,high};}

	// end inline asm

$L__BB0_373:
	// begin inline asm
	{add.f16x2 %r7073,%r7073,%r7061;
}
	// end inline asm
	mov.u32 	%r3059, 31;
	mov.u32 	%r3050, 30;
	mov.u32 	%r3061, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3048,%r6868,%r3050,%r1975,%r3061;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3053,%r7030,%r3048;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3057,%r6868,%r3059,%r1975,%r3061;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3062,%r7031,%r3057;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7063,%r3053,%r3062;
}
	// end inline asm
	mov.u32 	%r7062, %r7063;
	@%p176 bra 	$L__BB0_375;

	mov.f32 	%f392, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f392;
  cvt.rn.f16.f32 high, %f392;
  mov.b32 %r7062, {low,high};}

	// end inline asm

$L__BB0_375:
	// begin inline asm
	{add.f16x2 %r7069,%r7069,%r7062;
}
	// end inline asm
	@%p177 bra 	$L__BB0_377;

	mov.f32 	%f394, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f394;
  cvt.rn.f16.f32 high, %f394;
  mov.b32 %r7063, {low,high};}

	// end inline asm

$L__BB0_377:
	// begin inline asm
	{add.f16x2 %r7067,%r7067,%r7063;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_304:
	mov.f32 	%f322, 0f00000000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7028, {low,high};}

	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f322;
  cvt.rn.f16.f32 high, %f322;
  mov.b32 %r7029, {low,high};}

	// end inline asm

$L__BB0_306:
	setp.eq.s32 	%p169, %r624, %r1476;
	@%p169 bra 	$L__BB0_309;
	bra.uni 	$L__BB0_307;

$L__BB0_309:
	mov.u32 	%r2541, 0;
	// begin inline asm
	{mul.f16x2 %r2449,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7111,%r7111,%r2449;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2455,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7099,%r7099,%r2455;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2461,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7101,%r7101,%r2461;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2467,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7081,%r7081,%r2467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2473,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7083,%r7083,%r2473;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2479,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7068,%r7068,%r2479;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2485,%r7029,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7105,%r7105,%r2485;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2491,%r7029,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7086,%r7086,%r2491;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2497,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7109,%r7109,%r2497;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2503,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7096,%r7096,%r2503;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2509,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7098,%r7098,%r2509;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2515,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7078,%r7078,%r2515;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2521,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7080,%r7080,%r2521;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2527,%r7028,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7066,%r7066,%r2527;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2533,%r7029,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7103,%r7103,%r2533;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2539,%r7029,%r2541;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7084,%r7084,%r2539;
}
	// end inline asm
	bra.uni 	$L__BB0_378;

$L__BB0_307:
	add.s32 	%r2352, %r1476, -2;
	setp.ne.s32 	%p170, %r624, %r2352;
	@%p170 bra 	$L__BB0_378;

	mov.u32 	%r2445, 0;
	// begin inline asm
	{mul.f16x2 %r2353,%r7028,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7089,%r7089,%r2353;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2359,%r7028,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7071,%r7071,%r2359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2365,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7107,%r7107,%r2365;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2371,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7093,%r7093,%r2371;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2377,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7095,%r7095,%r2377;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2383,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7075,%r7075,%r2383;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2389,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7077,%r7077,%r2389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2395,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7065,%r7065,%r2395;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2401,%r7028,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7088,%r7088,%r2401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2407,%r7028,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7070,%r7070,%r2407;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2413,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7106,%r7106,%r2413;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2419,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7090,%r7090,%r2419;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2425,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7092,%r7092,%r2425;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2431,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7072,%r7072,%r2431;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2437,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7074,%r7074,%r2437;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r2443,%r7029,%r2445;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7064,%r7064,%r2443;
}
	// end inline asm

$L__BB0_378:
	setp.lt.s32 	%p208, %r31, 1;
	mov.u32 	%r6923, %r1896;
	mov.u32 	%r6924, %r1896;
	mov.u32 	%r7114, %r1896;
	mov.u32 	%r7115, %r1896;
	mov.u32 	%r7116, %r1896;
	mov.u32 	%r6950, %r1896;
	mov.u32 	%r7118, %r1896;
	mov.u32 	%r6958, %r1896;
	mov.u32 	%r7120, %r1896;
	mov.u32 	%r7121, %r1896;
	@%p208 bra 	$L__BB0_380;

	add.s32 	%r6779, %r59, %r59;
	mul.lo.s32 	%r3081, %r1467, 320;
	add.s32 	%r3083, %r31, -1;
	mul.lo.s32 	%r3085, %r32, 320;
	mad.lo.s32 	%r3086, %r3081, %r3083, %r3085;
	add.s32 	%r3089, %r6779, -64;
	mad.lo.s32 	%r3094, %r3089, %r1884, %r1881;
	add.s32 	%r3095, %r3086, %r3094;
	shl.b32 	%r3096, %r3095, 2;
	mov.u32 	%r3097, _ZN6kernel5shmemE;
	add.s32 	%r3098, %r3097, %r3096;
	shl.b32 	%r3099, %r36, 4;
	add.s32 	%r3100, %r3098, %r3099;
	ld.shared.v4.u32 	{%r6958, %r6950, %r6924, %r6923}, [%r3100];
	shl.b32 	%r3105, %r36, 3;
	add.s32 	%r3106, %r3098, %r3105;
	ld.shared.v2.u32 	{%r7118, %r7116}, [%r3106+512];
	ld.shared.v4.u32 	{%r7121, %r7120, %r7115, %r7114}, [%r3100+768];

$L__BB0_380:
	setp.lt.s32 	%p209, %r32, 1;
	mov.u32 	%r7122, %r1896;
	mov.u32 	%r7123, %r1896;
	mov.u32 	%r7124, %r1896;
	mov.u32 	%r7125, %r1896;
	mov.u32 	%r7126, %r1896;
	mov.u32 	%r7127, %r1896;
	mov.u32 	%r7128, %r1896;
	mov.u32 	%r7129, %r1896;
	mov.u32 	%r7130, %r1896;
	mov.u32 	%r7131, %r1896;
	mov.u32 	%r7132, %r1896;
	mov.u32 	%r7133, %r1896;
	@%p209 bra 	$L__BB0_383;

	not.b32 	%r6778, %r31;
	add.s32 	%r6777, %r1466, %r6778;
	mad.lo.s32 	%r3120, %r6777, 384, %r1887;
	add.s32 	%r3122, %r32, -1;
	mad.lo.s32 	%r3125, %r1882, %r3122, %r3120;
	add.s32 	%r3131, %r3125, %r1885;
	shl.b32 	%r3132, %r3131, 2;
	mov.u32 	%r3133, _ZN6kernel5shmemE;
	add.s32 	%r3134, %r3133, %r3132;
	shl.b32 	%r3135, %r36, 4;
	add.s32 	%r3136, %r3134, %r3135;
	ld.shared.v4.u32 	{%r7133, %r7132, %r7130, %r7128}, [%r3136];
	shl.b32 	%r3141, %r36, 3;
	add.s32 	%r3142, %r3134, %r3141;
	ld.shared.v2.u32 	{%r7131, %r7129}, [%r3142+512];
	ld.shared.v4.u32 	{%r7127, %r7126, %r7124, %r7122}, [%r3136+768];
	mov.u32 	%r7123, %r1896;
	mov.u32 	%r7125, %r1896;
	@%p208 bra 	$L__BB0_383;

	add.s32 	%r6765, %r3142, 512;
	ld.shared.v2.u32 	{%r7125, %r7123}, [%r6765+768];

$L__BB0_383:
	setp.eq.s32 	%p211, %r31, 0;
	@%p211 bra 	$L__BB0_388;

	setp.eq.s32 	%p212, %r32, %r1884;
	@%p212 bra 	$L__BB0_386;

	sub.s32 	%r3155, %r1466, %r31;
	mul.lo.s32 	%r3158, %r59, %r32;
	mad.lo.s32 	%r3159, %r3155, 384, %r3158;
	mad.lo.s32 	%r3162, %r1882, %r1884, %r3159;
	mad.lo.s32 	%r3165, %r1880, %r1879, %r3162;
	shl.b32 	%r3166, %r3165, 2;
	mov.u32 	%r3167, _ZN6kernel5shmemE;
	add.s32 	%r3168, %r3167, %r3166;
	shl.b32 	%r3169, %r36, 4;
	add.s32 	%r3170, %r3168, %r3169;
	ld.shared.v4.u32 	{%r7147, %r7146, %r7149, %r7148}, [%r3170];

$L__BB0_386:
	shl.b32 	%r3176, %r32, 8;
	shl.b32 	%r3180, %r1467, 8;
	or.b32  	%r3181, %r3180, 128;
	add.s32 	%r3183, %r31, -1;
	mad.lo.s32 	%r3184, %r3181, %r3183, %r1887;
	add.s32 	%r3185, %r3184, %r3176;
	shl.b32 	%r3186, %r3185, 2;
	mov.u32 	%r3187, _ZN6kernel5shmemE;
	add.s32 	%r3188, %r3187, %r3186;
	setp.ne.s32 	%p213, %r32, %r1884;
	shl.b32 	%r3190, %r36, 4;
	add.s32 	%r883, %r3188, %r3190;
	ld.shared.v4.u32 	{%r7140, %r7138, %r7141, %r7139}, [%r883];
	ld.shared.v4.u32 	{%r7145, %r7144, %r7143, %r7142}, [%r883+512];
	@%p213 bra 	$L__BB0_388;

	ld.shared.v4.u32 	{%r7147, %r7146, %r7149, %r7148}, [%r883+1024];

$L__BB0_388:
	setp.eq.s32 	%p214, %r32, 0;
	@%p214 bra 	$L__BB0_391;

	not.b32 	%r6776, %r31;
	add.s32 	%r6775, %r1466, %r6776;
	mul.lo.s32 	%r3206, %r59, %r32;
	sub.s32 	%r3207, %r3206, %r59;
	mad.lo.s32 	%r3211, %r6775, 384, %r3207;
	mad.lo.s32 	%r3214, %r1882, %r1884, %r3211;
	mad.lo.s32 	%r3217, %r1880, %r1879, %r3214;
	shl.b32 	%r3218, %r3217, 2;
	mov.u32 	%r3219, _ZN6kernel5shmemE;
	add.s32 	%r3220, %r3219, %r3218;
	shl.b32 	%r3221, %r36, 4;
	add.s32 	%r908, %r3220, %r3221;
	ld.shared.v4.u32 	{%r7163, %r7162, %r7165, %r7164}, [%r908];
	ld.shared.v4.u32 	{%r7161, %r7159, %r7157, %r7156}, [%r908+512];
	ld.shared.v4.u32 	{%r7160, %r7158, %r7155, %r7153}, [%r908+1024];
	@%p211 bra 	$L__BB0_391;

	ld.shared.v4.u32 	{%r7151, %r7150, %r7154, %r7152}, [%r908+1536];

$L__BB0_391:
	mov.u32 	%r3243, -1;
	// begin inline asm
	{shfl.sync.idx.b32 %r3239,%r6998,%r422,%r1975,%r3243;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3239;
 mov.b16 %rs1, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6998;
 mov.b16 %rs2, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3246, {%rs1,%rs2};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3247,%r6999,%r3246;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3250,%r6869,%r3247;
}
	// end inline asm
	@%p15 bra 	$L__BB0_393;
	bra.uni 	$L__BB0_392;

$L__BB0_393:
	// begin inline asm
	{neg.f16x2 %r7166,%r7111;
}
	// end inline asm
	bra.uni 	$L__BB0_394;

$L__BB0_392:
	// begin inline asm
	{mul.f16x2 %r7166,%r6870,%r3247;
}
	// end inline asm

$L__BB0_394:
	mov.u32 	%r3263, 31;
	mov.u32 	%r3286, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3261,%r7166,%r3263,%r1975,%r3286;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3266,%r3250,%r3261;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3269,%r6997,%r6996;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3272,%r3269,%r3266;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3275,%r7000,%r3272;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3278,%r7111,%r3275;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3282,%r6993,%r422,%r1975,%r3286;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3282;
 mov.b16 %rs5, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6993;
 mov.b16 %rs6, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3289, {%rs5,%rs6};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3290,%r6994,%r3289;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3293,%r6869,%r3290;
}
	// end inline asm
	mov.u32 	%r7167, %r7110;
	@%p15 bra 	$L__BB0_396;

	// begin inline asm
	{mul.f16x2 %r7167,%r6870,%r3290;
}
	// end inline asm

$L__BB0_396:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3304,%r7167,%r3263,%r1975,%r3286;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3309,%r3293,%r3304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3312,%r6997,%r6992;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3315,%r3309,%r3312;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3318,%r6995,%r3315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3321,%r7110,%r3318;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3324,%r6998,%r6999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3327,%r6873,%r3324;
}
	// end inline asm
	@%p15 bra 	$L__BB0_398;
	bra.uni 	$L__BB0_397;

$L__BB0_398:
	// begin inline asm
	{neg.f16x2 %r7168,%r7109;
}
	// end inline asm
	bra.uni 	$L__BB0_399;

$L__BB0_397:
	// begin inline asm
	{mul.f16x2 %r7168,%r6874,%r3324;
}
	// end inline asm

$L__BB0_399:
	mov.u32 	%r3340, 31;
	mov.u32 	%r3342, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3338,%r7168,%r3340,%r1975,%r3342;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3343,%r3327,%r3338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3346,%r6990,%r6989;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3349,%r3346,%r3343;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3352,%r6991,%r3349;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3355,%r7109,%r3352;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3358,%r6993,%r6994;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3361,%r6873,%r3358;
}
	// end inline asm
	mov.u32 	%r7169, %r7108;
	@%p15 bra 	$L__BB0_401;

	// begin inline asm
	{mul.f16x2 %r7169,%r6874,%r3358;
}
	// end inline asm

$L__BB0_401:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3370,%r7169,%r3340,%r1975,%r3342;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3375,%r3361,%r3370;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3378,%r6990,%r6987;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3381,%r3375,%r3378;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3384,%r6988,%r3381;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3387,%r7108,%r3384;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3391,%r6984,%r422,%r1975,%r3342;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3391;
 mov.b16 %rs9, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6984;
 mov.b16 %rs10, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3398, {%rs9,%rs10};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3399,%r6985,%r3398;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3402,%r6869,%r3399;
}
	// end inline asm
	@%p15 bra 	$L__BB0_403;
	bra.uni 	$L__BB0_402;

$L__BB0_403:
	// begin inline asm
	{neg.f16x2 %r7170,%r7107;
}
	// end inline asm
	bra.uni 	$L__BB0_404;

$L__BB0_402:
	// begin inline asm
	{mul.f16x2 %r7170,%r6870,%r3399;
}
	// end inline asm

$L__BB0_404:
	mov.u32 	%r3417, 31;
	mov.u32 	%r3419, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3415,%r7170,%r3417,%r1975,%r3419;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3420,%r3402,%r3415;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3423,%r6983,%r6997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3426,%r3423,%r3420;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3429,%r6986,%r3426;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3432,%r7107,%r3429;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3435,%r6984,%r6985;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3438,%r6873,%r3435;
}
	// end inline asm
	@%p15 bra 	$L__BB0_406;
	bra.uni 	$L__BB0_405;

$L__BB0_406:
	// begin inline asm
	{neg.f16x2 %r7171,%r7106;
}
	// end inline asm
	bra.uni 	$L__BB0_407;

$L__BB0_405:
	// begin inline asm
	{mul.f16x2 %r7171,%r6874,%r3435;
}
	// end inline asm

$L__BB0_407:
	mov.u32 	%r3451, 31;
	mov.u32 	%r3474, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3449,%r7171,%r3451,%r1975,%r3474;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3454,%r3438,%r3449;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3457,%r6981,%r6990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3460,%r3457,%r3454;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3463,%r6982,%r3460;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3466,%r7106,%r3463;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3470,%r6979,%r422,%r1975,%r3474;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3470;
 mov.b16 %rs13, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6979;
 mov.b16 %rs14, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3477, {%rs13,%rs14};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3478,%r6980,%r3477;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3481,%r6869,%r3478;
}
	// end inline asm
	@%p15 bra 	$L__BB0_409;
	bra.uni 	$L__BB0_408;

$L__BB0_409:
	// begin inline asm
	{neg.f16x2 %r7172,%r7105;
}
	// end inline asm
	bra.uni 	$L__BB0_410;

$L__BB0_408:
	// begin inline asm
	{mul.f16x2 %r7172,%r6870,%r3478;
}
	// end inline asm

$L__BB0_410:
	mov.u32 	%r3496, 31;
	mov.u32 	%r3519, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3494,%r7172,%r3496,%r1975,%r3519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3499,%r3481,%r3494;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3502,%r6978,%r7165;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3505,%r3502,%r3499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3508,%r7133,%r3505;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3511,%r7105,%r3508;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3515,%r6974,%r422,%r1975,%r3519;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3515;
 mov.b16 %rs17, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6974;
 mov.b16 %rs18, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3522, {%rs17,%rs18};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3523,%r6975,%r3522;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3526,%r6869,%r3523;
}
	// end inline asm
	mov.u32 	%r7173, %r7104;
	@%p15 bra 	$L__BB0_412;

	// begin inline asm
	{mul.f16x2 %r7173,%r6870,%r3523;
}
	// end inline asm

$L__BB0_412:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3537,%r7173,%r3496,%r1975,%r3519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3542,%r3526,%r3537;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3545,%r6978,%r6996;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3548,%r3542,%r3545;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3551,%r6976,%r3548;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3554,%r7104,%r3551;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3557,%r6979,%r6980;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3560,%r6873,%r3557;
}
	// end inline asm
	@%p15 bra 	$L__BB0_414;
	bra.uni 	$L__BB0_413;

$L__BB0_414:
	// begin inline asm
	{neg.f16x2 %r7174,%r7103;
}
	// end inline asm
	bra.uni 	$L__BB0_415;

$L__BB0_413:
	// begin inline asm
	{mul.f16x2 %r7174,%r6874,%r3557;
}
	// end inline asm

$L__BB0_415:
	mov.u32 	%r3573, 31;
	mov.u32 	%r3575, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3571,%r7174,%r3573,%r1975,%r3575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3576,%r3560,%r3571;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3579,%r6973,%r7164;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3582,%r3579,%r3576;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3585,%r7132,%r3582;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3588,%r7103,%r3585;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3591,%r6974,%r6975;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3594,%r6873,%r3591;
}
	// end inline asm
	mov.u32 	%r7175, %r7102;
	@%p15 bra 	$L__BB0_417;

	// begin inline asm
	{mul.f16x2 %r7175,%r6874,%r3591;
}
	// end inline asm

$L__BB0_417:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3603,%r7175,%r3573,%r1975,%r3575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3608,%r3594,%r3603;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3611,%r6973,%r6989;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3614,%r3608,%r3611;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3617,%r6971,%r3614;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3620,%r7102,%r3617;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3624,%r6968,%r422,%r1975,%r3575;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3624;
 mov.b16 %rs21, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6968;
 mov.b16 %rs22, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3631, {%rs21,%rs22};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3632,%r6969,%r3631;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3635,%r6869,%r3632;
}
	// end inline asm
	@%p15 bra 	$L__BB0_419;
	bra.uni 	$L__BB0_418;

$L__BB0_419:
	// begin inline asm
	{neg.f16x2 %r7176,%r7101;
}
	// end inline asm
	bra.uni 	$L__BB0_420;

$L__BB0_418:
	// begin inline asm
	{mul.f16x2 %r7176,%r6870,%r3632;
}
	// end inline asm

$L__BB0_420:
	mov.u32 	%r3650, 31;
	mov.u32 	%r3673, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3648,%r7176,%r3650,%r1975,%r3673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3653,%r3635,%r3648;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3656,%r6967,%r6978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3659,%r3656,%r3653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3662,%r517,%r3659;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7026,%r7101,%r3662;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3669,%r6964,%r422,%r1975,%r3673;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3669;
 mov.b16 %rs25, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6964;
 mov.b16 %rs26, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3676, {%rs25,%rs26};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3677,%r6965,%r3676;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3680,%r6869,%r3677;
}
	// end inline asm
	mov.u32 	%r7177, %r7100;
	@%p15 bra 	$L__BB0_422;

	// begin inline asm
	{mul.f16x2 %r7177,%r6870,%r3677;
}
	// end inline asm

$L__BB0_422:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3691,%r7177,%r3650,%r1975,%r3673;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3696,%r3680,%r3691;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3699,%r6967,%r6997;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3702,%r3696,%r3699;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3705,%r513,%r3702;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7024,%r7100,%r3705;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3711,%r6969,%r6999;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3714,%r6965,%r6975;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3717,%r3711,%r3714;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3720,%r6963,%r3717;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3723,%r7099,%r3720;
}
	// end inline asm
	selp.b32 	%r1008, %r7099, %r3723, %p15;
	// begin inline asm
	{sub.f16x2 %r3726,%r6968,%r6969;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3729,%r6873,%r3726;
}
	// end inline asm
	@%p15 bra 	$L__BB0_424;
	bra.uni 	$L__BB0_423;

$L__BB0_424:
	// begin inline asm
	{neg.f16x2 %r7178,%r7098;
}
	// end inline asm
	bra.uni 	$L__BB0_425;

$L__BB0_423:
	// begin inline asm
	{mul.f16x2 %r7178,%r6874,%r3726;
}
	// end inline asm

$L__BB0_425:
	mov.u32 	%r3742, 31;
	mov.u32 	%r3744, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3740,%r7178,%r3742,%r1975,%r3744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3745,%r3729,%r3740;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3748,%r6961,%r6973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3751,%r3748,%r3745;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3754,%r509,%r3751;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7025,%r7098,%r3754;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3760,%r6964,%r6965;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3763,%r6873,%r3760;
}
	// end inline asm
	mov.u32 	%r7179, %r7097;
	@%p15 bra 	$L__BB0_427;

	// begin inline asm
	{mul.f16x2 %r7179,%r6874,%r3760;
}
	// end inline asm

$L__BB0_427:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3772,%r7179,%r3742,%r1975,%r3744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3777,%r3763,%r3772;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3780,%r6961,%r6990;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3783,%r3777,%r3780;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3786,%r507,%r3783;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7023,%r7097,%r3786;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3792,%r6968,%r6998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3795,%r6964,%r6974;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3798,%r3792,%r3795;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3801,%r6959,%r3798;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3804,%r7096,%r3801;
}
	// end inline asm
	selp.b32 	%r1020, %r7096, %r3804, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3808,%r6956,%r422,%r1975,%r3744;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3808;
 mov.b16 %rs29, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6956;
 mov.b16 %rs30, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3815, {%rs29,%rs30};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3816,%r6957,%r3815;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3819,%r6869,%r3816;
}
	// end inline asm
	@%p15 bra 	$L__BB0_429;
	bra.uni 	$L__BB0_428;

$L__BB0_429:
	// begin inline asm
	{neg.f16x2 %r7180,%r7095;
}
	// end inline asm
	bra.uni 	$L__BB0_430;

$L__BB0_428:
	// begin inline asm
	{mul.f16x2 %r7180,%r6870,%r3816;
}
	// end inline asm

$L__BB0_430:
	mov.u32 	%r3834, 31;
	mov.u32 	%r3857, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3832,%r7180,%r3834,%r1975,%r3857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3837,%r3819,%r3832;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3840,%r6955,%r6967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3843,%r3840,%r3837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3846,%r505,%r3843;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7022,%r7095,%r3846;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r3853,%r6952,%r422,%r1975,%r3857;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3853;
 mov.b16 %rs33, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6952;
 mov.b16 %rs34, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3860, {%rs33,%rs34};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3861,%r6953,%r3860;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3864,%r6869,%r3861;
}
	// end inline asm
	mov.u32 	%r7181, %r7094;
	@%p15 bra 	$L__BB0_432;

	// begin inline asm
	{mul.f16x2 %r7181,%r6870,%r3861;
}
	// end inline asm

$L__BB0_432:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3875,%r7181,%r3834,%r1975,%r3857;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3880,%r3864,%r3875;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3883,%r6955,%r6983;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3886,%r3880,%r3883;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3889,%r6954,%r3886;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3892,%r7094,%r3889;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3895,%r6957,%r6985;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3898,%r6953,%r6965;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3901,%r3895,%r3898;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3904,%r6951,%r3901;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3907,%r7093,%r3904;
}
	// end inline asm
	selp.b32 	%r1032, %r7093, %r3907, %p15;
	// begin inline asm
	{sub.f16x2 %r3910,%r6956,%r6957;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3913,%r6873,%r3910;
}
	// end inline asm
	@%p15 bra 	$L__BB0_434;
	bra.uni 	$L__BB0_433;

$L__BB0_434:
	// begin inline asm
	{neg.f16x2 %r7182,%r7092;
}
	// end inline asm
	bra.uni 	$L__BB0_435;

$L__BB0_433:
	// begin inline asm
	{mul.f16x2 %r7182,%r6874,%r3910;
}
	// end inline asm

$L__BB0_435:
	mov.u32 	%r3926, 31;
	mov.u32 	%r3928, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r3924,%r7182,%r3926,%r1975,%r3928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3929,%r3913,%r3924;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3932,%r6949,%r6961;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3935,%r3932,%r3929;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3938,%r497,%r3935;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7021,%r7092,%r3938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3944,%r6952,%r6953;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3947,%r6873,%r3944;
}
	// end inline asm
	mov.u32 	%r7183, %r7091;
	@%p15 bra 	$L__BB0_437;

	// begin inline asm
	{mul.f16x2 %r7183,%r6874,%r3944;
}
	// end inline asm

$L__BB0_437:
	// begin inline asm
	{shfl.sync.bfly.b32 %r3956,%r7183,%r3926,%r1975,%r3928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3961,%r3947,%r3956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3964,%r6949,%r6981;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3967,%r3961,%r3964;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3970,%r6948,%r3967;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3973,%r7091,%r3970;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3976,%r6956,%r6984;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3979,%r6952,%r6964;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r3982,%r3976,%r3979;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r3985,%r6947,%r3982;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r3988,%r7090,%r3985;
}
	// end inline asm
	selp.b32 	%r1044, %r7090, %r3988, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r3992,%r6945,%r422,%r1975,%r3928;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r3992;
 mov.b16 %rs37, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6945;
 mov.b16 %rs38, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r3999, {%rs37,%rs38};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4000,%r6946,%r3999;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4003,%r6869,%r4000;
}
	// end inline asm
	@%p15 bra 	$L__BB0_439;
	bra.uni 	$L__BB0_438;

$L__BB0_439:
	// begin inline asm
	{neg.f16x2 %r7184,%r7089;
}
	// end inline asm
	bra.uni 	$L__BB0_440;

$L__BB0_438:
	// begin inline asm
	{mul.f16x2 %r7184,%r6870,%r4000;
}
	// end inline asm

$L__BB0_440:
	mov.u32 	%r4018, 31;
	mov.u32 	%r4020, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4016,%r7184,%r4018,%r1975,%r4020;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4021,%r4003,%r4016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4024,%r7149,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4027,%r4024,%r4021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4030,%r7121,%r4027;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4033,%r7089,%r4030;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4036,%r6945,%r6946;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4039,%r6873,%r4036;
}
	// end inline asm
	@%p15 bra 	$L__BB0_442;
	bra.uni 	$L__BB0_441;

$L__BB0_442:
	// begin inline asm
	{neg.f16x2 %r7185,%r7088;
}
	// end inline asm
	bra.uni 	$L__BB0_443;

$L__BB0_441:
	// begin inline asm
	{mul.f16x2 %r7185,%r6874,%r4036;
}
	// end inline asm

$L__BB0_443:
	mov.u32 	%r4052, 31;
	mov.u32 	%r4075, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4050,%r7185,%r4052,%r1975,%r4075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4055,%r4039,%r4050;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4058,%r7148,%r6949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4061,%r4058,%r4055;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4064,%r7120,%r4061;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4067,%r7088,%r4064;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4071,%r6941,%r422,%r1975,%r4075;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4071;
 mov.b16 %rs41, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6941;
 mov.b16 %rs42, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4078, {%rs41,%rs42};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4079,%r6942,%r4078;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4082,%r6869,%r4079;
}
	// end inline asm
	mov.u32 	%r7186, %r7087;
	@%p15 bra 	$L__BB0_445;

	// begin inline asm
	{mul.f16x2 %r7186,%r6870,%r4079;
}
	// end inline asm

$L__BB0_445:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4093,%r7186,%r4052,%r1975,%r4075;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4098,%r4082,%r4093;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4101,%r7160,%r6978;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4104,%r4098,%r4101;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4107,%r7131,%r4104;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7020,%r7087,%r4107;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4113,%r7161,%r6980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4116,%r6942,%r7163;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4119,%r4113,%r4116;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4122,%r7130,%r4119;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4125,%r7086,%r4122;
}
	// end inline asm
	selp.b32 	%r1062, %r7086, %r4125, %p15;
	// begin inline asm
	{sub.f16x2 %r4128,%r6941,%r6942;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4131,%r6873,%r4128;
}
	// end inline asm
	mov.u32 	%r7187, %r7085;
	@%p15 bra 	$L__BB0_447;

	// begin inline asm
	{mul.f16x2 %r7187,%r6874,%r4128;
}
	// end inline asm

$L__BB0_447:
	mov.u32 	%r4142, 31;
	mov.u32 	%r4180, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4140,%r7187,%r4142,%r1975,%r4180;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4145,%r4131,%r4140;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4148,%r7158,%r6973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4151,%r4145,%r4148;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4154,%r7129,%r4151;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7019,%r7085,%r4154;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4160,%r7159,%r6979;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4163,%r6941,%r7162;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4166,%r4160,%r4163;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4169,%r7128,%r4166;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4172,%r7084,%r4169;
}
	// end inline asm
	selp.b32 	%r1068, %r7084, %r4172, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4176,%r6937,%r422,%r1975,%r4180;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4176;
 mov.b16 %rs45, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6937;
 mov.b16 %rs46, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4183, {%rs45,%rs46};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4184,%r6938,%r4183;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4187,%r6869,%r4184;
}
	// end inline asm
	@%p15 bra 	$L__BB0_449;
	bra.uni 	$L__BB0_448;

$L__BB0_449:
	// begin inline asm
	{neg.f16x2 %r7188,%r7083;
}
	// end inline asm
	bra.uni 	$L__BB0_450;

$L__BB0_448:
	// begin inline asm
	{mul.f16x2 %r7188,%r6870,%r4184;
}
	// end inline asm

$L__BB0_450:
	mov.u32 	%r4202, 31;
	mov.u32 	%r4225, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4200,%r7188,%r4202,%r1975,%r4225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4205,%r4187,%r4200;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4208,%r6936,%r7160;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4211,%r4208,%r4205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4214,%r7127,%r4211;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7018,%r7083,%r4214;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4221,%r6933,%r422,%r1975,%r4225;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4221;
 mov.b16 %rs49, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6933;
 mov.b16 %rs50, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4228, {%rs49,%rs50};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4229,%r6934,%r4228;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4232,%r6869,%r4229;
}
	// end inline asm
	mov.u32 	%r7189, %r7082;
	@%p15 bra 	$L__BB0_452;

	// begin inline asm
	{mul.f16x2 %r7189,%r6870,%r4229;
}
	// end inline asm

$L__BB0_452:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4243,%r7189,%r4202,%r1975,%r4225;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4248,%r4232,%r4243;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4251,%r6936,%r6967;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4254,%r4248,%r4251;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4257,%r6966,%r4254;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7016,%r7082,%r4257;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4263,%r6938,%r6969;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4266,%r6934,%r6942;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4269,%r4263,%r4266;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4272,%r479,%r4269;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4275,%r7081,%r4272;
}
	// end inline asm
	selp.b32 	%r7014, %r7081, %r4275, %p15;
	// begin inline asm
	{sub.f16x2 %r4278,%r6937,%r6938;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4281,%r6873,%r4278;
}
	// end inline asm
	@%p15 bra 	$L__BB0_454;
	bra.uni 	$L__BB0_453;

$L__BB0_454:
	// begin inline asm
	{neg.f16x2 %r7190,%r7080;
}
	// end inline asm
	bra.uni 	$L__BB0_455;

$L__BB0_453:
	// begin inline asm
	{mul.f16x2 %r7190,%r6874,%r4278;
}
	// end inline asm

$L__BB0_455:
	mov.u32 	%r4294, 31;
	mov.u32 	%r4296, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4292,%r7190,%r4294,%r1975,%r4296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4297,%r4281,%r4292;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4300,%r6931,%r7158;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4303,%r4300,%r4297;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4306,%r7126,%r4303;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7017,%r7080,%r4306;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4312,%r6933,%r6934;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4315,%r6873,%r4312;
}
	// end inline asm
	mov.u32 	%r7191, %r7079;
	@%p15 bra 	$L__BB0_457;

	// begin inline asm
	{mul.f16x2 %r7191,%r6874,%r4312;
}
	// end inline asm

$L__BB0_457:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4324,%r7191,%r4294,%r1975,%r4296;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4329,%r4315,%r4324;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4332,%r6931,%r6961;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4335,%r4329,%r4332;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4338,%r6960,%r4335;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7015,%r7079,%r4338;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4344,%r6937,%r6968;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4347,%r6933,%r6941;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4350,%r4344,%r4347;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4353,%r476,%r4350;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4356,%r7078,%r4353;
}
	// end inline asm
	selp.b32 	%r7013, %r7078, %r4356, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4360,%r6927,%r422,%r1975,%r4296;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4360;
 mov.b16 %rs53, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6927;
 mov.b16 %rs54, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4367, {%rs53,%rs54};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4368,%r6928,%r4367;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4371,%r6869,%r4368;
}
	// end inline asm
	@%p15 bra 	$L__BB0_459;
	bra.uni 	$L__BB0_458;

$L__BB0_459:
	// begin inline asm
	{neg.f16x2 %r7192,%r7077;
}
	// end inline asm
	bra.uni 	$L__BB0_460;

$L__BB0_458:
	// begin inline asm
	{mul.f16x2 %r7192,%r6870,%r4368;
}
	// end inline asm

$L__BB0_460:
	mov.u32 	%r4386, 31;
	mov.u32 	%r4409, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4384,%r7192,%r4386,%r1975,%r4409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4389,%r4371,%r4384;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4392,%r7145,%r6936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4395,%r4392,%r4389;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4398,%r6958,%r4395;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7012,%r7077,%r4398;
}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r4405,%r6925,%r422,%r1975,%r4409;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4405;
 mov.b16 %rs57, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6925;
 mov.b16 %rs58, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4412, {%rs57,%rs58};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4413,%r6926,%r4412;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4416,%r6869,%r4413;
}
	// end inline asm
	mov.u32 	%r7193, %r7076;
	@%p15 bra 	$L__BB0_462;

	// begin inline asm
	{mul.f16x2 %r7193,%r6870,%r4413;
}
	// end inline asm

$L__BB0_462:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4427,%r7193,%r4386,%r1975,%r4409;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4432,%r4416,%r4427;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4435,%r7145,%r6955;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4438,%r4432,%r4435;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4441,%r7118,%r4438;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7010,%r7076,%r4441;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4447,%r6928,%r6957;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4450,%r6926,%r6934;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4453,%r4447,%r4450;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4456,%r471,%r4453;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4459,%r7075,%r4456;
}
	// end inline asm
	selp.b32 	%r7008, %r7075, %r4459, %p15;
	// begin inline asm
	{sub.f16x2 %r4462,%r6927,%r6928;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4465,%r6873,%r4462;
}
	// end inline asm
	@%p15 bra 	$L__BB0_464;
	bra.uni 	$L__BB0_463;

$L__BB0_464:
	// begin inline asm
	{neg.f16x2 %r7194,%r7074;
}
	// end inline asm
	bra.uni 	$L__BB0_465;

$L__BB0_463:
	// begin inline asm
	{mul.f16x2 %r7194,%r6874,%r4462;
}
	// end inline asm

$L__BB0_465:
	mov.u32 	%r4478, 31;
	mov.u32 	%r4480, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4476,%r7194,%r4478,%r1975,%r4480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4481,%r4465,%r4476;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4484,%r7144,%r6931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4487,%r4484,%r4481;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4490,%r6950,%r4487;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7011,%r7074,%r4490;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4496,%r6925,%r6926;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4499,%r6873,%r4496;
}
	// end inline asm
	mov.u32 	%r7195, %r7073;
	@%p15 bra 	$L__BB0_467;

	// begin inline asm
	{mul.f16x2 %r7195,%r6874,%r4496;
}
	// end inline asm

$L__BB0_467:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4508,%r7195,%r4478,%r1975,%r4480;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4513,%r4499,%r4508;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4516,%r7144,%r6949;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4519,%r4513,%r4516;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4522,%r7116,%r4519;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7009,%r7073,%r4522;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4528,%r6927,%r6956;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4531,%r6925,%r6933;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4534,%r4528,%r4531;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4537,%r470,%r4534;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4540,%r7072,%r4537;
}
	// end inline asm
	selp.b32 	%r7007, %r7072, %r4540, %p15;
	// begin inline asm
	{sub.f16x2 %r4543,%r7143,%r6946;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4546,%r7147,%r6926;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4549,%r4543,%r4546;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4552,%r7115,%r4549;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4555,%r7071,%r4552;
}
	// end inline asm
	selp.b32 	%r1117, %r7071, %r4555, %p15;
	// begin inline asm
	{sub.f16x2 %r4558,%r7142,%r6945;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4561,%r7146,%r6925;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4564,%r4558,%r4561;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4567,%r7114,%r4564;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4570,%r7070,%r4567;
}
	// end inline asm
	selp.b32 	%r1118, %r7070, %r4570, %p15;
	// begin inline asm
	{shfl.sync.idx.b32 %r4574,%r6919,%r422,%r1975,%r4480;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r4574;
 mov.b16 %rs61, high;}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6919;
 mov.b16 %rs62, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r4581, {%rs61,%rs62};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4582,%r6920,%r4581;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4585,%r6869,%r4582;
}
	// end inline asm
	mov.u32 	%r7196, %r7069;
	@%p15 bra 	$L__BB0_469;

	// begin inline asm
	{mul.f16x2 %r7196,%r6870,%r4582;
}
	// end inline asm

$L__BB0_469:
	mov.u32 	%r4598, 31;
	mov.u32 	%r4600, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r4596,%r7196,%r4598,%r1975,%r4600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4601,%r4585,%r4596;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4604,%r7154,%r6936;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4607,%r4601,%r4604;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4610,%r7125,%r4607;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7006,%r7069,%r4610;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4616,%r7155,%r6938;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4619,%r6920,%r7157;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4622,%r4616,%r4619;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4625,%r7124,%r4622;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4628,%r7068,%r4625;
}
	// end inline asm
	selp.b32 	%r7004, %r7068, %r4628, %p15;
	// begin inline asm
	{sub.f16x2 %r4631,%r6919,%r6920;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4634,%r6873,%r4631;
}
	// end inline asm
	mov.u32 	%r7197, %r7067;
	@%p15 bra 	$L__BB0_471;

	// begin inline asm
	{mul.f16x2 %r7197,%r6874,%r4631;
}
	// end inline asm

$L__BB0_471:
	// begin inline asm
	{shfl.sync.bfly.b32 %r4643,%r7197,%r4598,%r1975,%r4600;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4648,%r4634,%r4643;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4651,%r7152,%r6931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4654,%r4648,%r4651;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4657,%r7123,%r4654;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r7005,%r7067,%r4657;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4663,%r7153,%r6937;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4666,%r6919,%r7156;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4669,%r4663,%r4666;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4672,%r7122,%r4669;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4675,%r7066,%r4672;
}
	// end inline asm
	selp.b32 	%r7003, %r7066, %r4675, %p15;
	// begin inline asm
	{sub.f16x2 %r4678,%r7140,%r6928;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4681,%r7141,%r6920;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4684,%r4678,%r4681;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4687,%r6924,%r4684;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4690,%r7065,%r4687;
}
	// end inline asm
	selp.b32 	%r7002, %r7065, %r4690, %p15;
	// begin inline asm
	{sub.f16x2 %r4693,%r7138,%r6927;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4696,%r7139,%r6919;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r4699,%r4693,%r4696;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r4702,%r6923,%r4699;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r4705,%r7064,%r4702;
}
	// end inline asm
	selp.b32 	%r7001, %r7064, %r4705, %p15;
	bar.sync 	0;
	ld.param.u64 	%rd258, [%rd1+160];
	cvta.to.global.u64 	%rd27, %rd258;
	add.s32 	%r4710, %r1480, 2;
	setp.lt.s32 	%p249, %r623, %r4710;
	add.s32 	%r4711, %r1481, -1;
	setp.ge.s32 	%p250, %r623, %r4711;
	or.pred  	%p251, %p250, %p249;
	add.s32 	%r4712, %r1482, 2;
	setp.lt.s32 	%p252, %r624, %r4712;
	or.pred  	%p253, %p251, %p252;
	add.s32 	%r4713, %r1483, -2;
	setp.ge.s32 	%p254, %r624, %r4713;
	or.pred  	%p255, %p254, %p253;
	setp.lt.s32 	%p256, %r625, %r1477;
	or.pred  	%p257, %p256, %p255;
	mad.lo.s32 	%r4714, %r1479, %r1478, %r1477;
	setp.ge.s32 	%p258, %r625, %r4714;
	or.pred  	%p259, %p257, %p258;
	@%p259 bra 	$L__BB0_713;

	sub.s32 	%r1133, %r625, %r1477;
	rem.s32 	%r4715, %r1133, %r1478;
	setp.ne.s32 	%p260, %r4715, 0;
	@%p260 bra 	$L__BB0_713;

	div.s32 	%r4716, %r1133, %r1478;
	mul.lo.s32 	%r4718, %r4716, %r1506;
	sub.s32 	%r1134, %r623, %r1480;
	sub.s32 	%r1135, %r624, %r1482;
	mul.lo.s32 	%r1136, %r4718, 3;
	add.s32 	%r4719, %r1134, %r1136;
	add.s32 	%r4720, %r4719, -2;
	mul.lo.s32 	%r1137, %r4720, %r1508;
	add.s32 	%r4722, %r1135, %r1137;
	mul.lo.s32 	%r4723, %r4722, %r48;
	sub.s32 	%r1138, %r4723, %r1484;
	@%p15 bra 	$L__BB0_478;

	not.pred 	%p262, %p11;
	@%p262 bra 	$L__BB0_476;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3278;
  cvt.f32.f16 %f395, low;}

	// end inline asm
	add.s32 	%r4725, %r1138, %r388;
	mul.wide.s32 	%rd259, %r4725, 4;
	add.s64 	%rd260, %rd27, %rd259;
	st.global.f32 	[%rd260], %f395;

$L__BB0_476:
	not.pred 	%p263, %p13;
	@%p263 bra 	$L__BB0_478;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3278;
  cvt.f32.f16 %f396, high;}

	// end inline asm
	add.s32 	%r4727, %r1138, %r389;
	mul.wide.s32 	%rd261, %r4727, 4;
	add.s64 	%rd262, %rd27, %rd261;
	st.global.f32 	[%rd262], %f396;

$L__BB0_478:
	@%p15 bra 	$L__BB0_483;

	not.pred 	%p265, %p12;
	@%p265 bra 	$L__BB0_481;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3355;
  cvt.f32.f16 %f397, low;}

	// end inline asm
	add.s32 	%r4729, %r1138, %r402;
	mul.wide.s32 	%rd263, %r4729, 4;
	add.s64 	%rd264, %rd27, %rd263;
	st.global.f32 	[%rd264], %f397;

$L__BB0_481:
	not.pred 	%p266, %p14;
	@%p266 bra 	$L__BB0_483;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3355;
  cvt.f32.f16 %f398, high;}

	// end inline asm
	add.s32 	%r4731, %r1138, %r403;
	mul.wide.s32 	%rd265, %r4731, 4;
	add.s64 	%rd266, %rd27, %rd265;
	st.global.f32 	[%rd266], %f398;

$L__BB0_483:
	add.s32 	%r1139, %r1136, %r1506;
	add.s32 	%r4733, %r1134, %r1139;
	add.s32 	%r4734, %r4733, -2;
	mad.lo.s32 	%r4736, %r4734, %r1508, %r1135;
	mul.lo.s32 	%r4737, %r4736, %r48;
	sub.s32 	%r1140, %r4737, %r1484;
	@%p15 bra 	$L__BB0_488;

	not.pred 	%p268, %p11;
	@%p268 bra 	$L__BB0_486;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3321;
  cvt.f32.f16 %f399, low;}

	// end inline asm
	add.s32 	%r4739, %r1140, %r388;
	mul.wide.s32 	%rd267, %r4739, 4;
	add.s64 	%rd268, %rd27, %rd267;
	st.global.f32 	[%rd268], %f399;

$L__BB0_486:
	not.pred 	%p269, %p13;
	@%p269 bra 	$L__BB0_488;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3321;
  cvt.f32.f16 %f400, high;}

	// end inline asm
	add.s32 	%r4741, %r1140, %r389;
	mul.wide.s32 	%rd269, %r4741, 4;
	add.s64 	%rd270, %rd27, %rd269;
	st.global.f32 	[%rd270], %f400;

$L__BB0_488:
	@%p15 bra 	$L__BB0_493;

	not.pred 	%p271, %p12;
	@%p271 bra 	$L__BB0_491;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3387;
  cvt.f32.f16 %f401, low;}

	// end inline asm
	add.s32 	%r4743, %r1140, %r402;
	mul.wide.s32 	%rd271, %r4743, 4;
	add.s64 	%rd272, %rd27, %rd271;
	st.global.f32 	[%rd272], %f401;

$L__BB0_491:
	not.pred 	%p272, %p14;
	@%p272 bra 	$L__BB0_493;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3387;
  cvt.f32.f16 %f402, high;}

	// end inline asm
	add.s32 	%r4745, %r1140, %r403;
	mul.wide.s32 	%rd273, %r4745, 4;
	add.s64 	%rd274, %rd27, %rd273;
	st.global.f32 	[%rd274], %f402;

$L__BB0_493:
	add.s32 	%r1141, %r1135, 1;
	add.s32 	%r4746, %r1141, %r1137;
	mul.lo.s32 	%r4747, %r4746, %r48;
	sub.s32 	%r1142, %r4747, %r1484;
	@%p15 bra 	$L__BB0_498;

	not.pred 	%p274, %p11;
	@%p274 bra 	$L__BB0_496;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3432;
  cvt.f32.f16 %f403, low;}

	// end inline asm
	add.s32 	%r4749, %r1142, %r388;
	mul.wide.s32 	%rd275, %r4749, 4;
	add.s64 	%rd276, %rd27, %rd275;
	st.global.f32 	[%rd276], %f403;

$L__BB0_496:
	not.pred 	%p275, %p13;
	@%p275 bra 	$L__BB0_498;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3432;
  cvt.f32.f16 %f404, high;}

	// end inline asm
	add.s32 	%r4751, %r1142, %r389;
	mul.wide.s32 	%rd277, %r4751, 4;
	add.s64 	%rd278, %rd27, %rd277;
	st.global.f32 	[%rd278], %f404;

$L__BB0_498:
	@%p15 bra 	$L__BB0_503;

	not.pred 	%p277, %p12;
	@%p277 bra 	$L__BB0_501;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3466;
  cvt.f32.f16 %f405, low;}

	// end inline asm
	add.s32 	%r4753, %r1142, %r402;
	mul.wide.s32 	%rd279, %r4753, 4;
	add.s64 	%rd280, %rd27, %rd279;
	st.global.f32 	[%rd280], %f405;

$L__BB0_501:
	not.pred 	%p278, %p14;
	@%p278 bra 	$L__BB0_503;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3466;
  cvt.f32.f16 %f406, high;}

	// end inline asm
	add.s32 	%r4755, %r1142, %r403;
	mul.wide.s32 	%rd281, %r4755, 4;
	add.s64 	%rd282, %rd27, %rd281;
	st.global.f32 	[%rd282], %f406;

$L__BB0_503:
	not.b32 	%r4756, %r1480;
	add.s32 	%r1143, %r623, %r4756;
	not.b32 	%r4757, %r1482;
	add.s32 	%r1144, %r624, %r4757;
	add.s32 	%r4758, %r1143, %r1136;
	mul.lo.s32 	%r1145, %r4758, %r1508;
	add.s32 	%r4760, %r1144, %r1145;
	mul.lo.s32 	%r4761, %r4760, %r48;
	sub.s32 	%r1146, %r4761, %r1484;
	@%p15 bra 	$L__BB0_508;

	not.pred 	%p280, %p11;
	@%p280 bra 	$L__BB0_506;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3511;
  cvt.f32.f16 %f407, low;}

	// end inline asm
	add.s32 	%r4763, %r1146, %r388;
	mul.wide.s32 	%rd283, %r4763, 4;
	add.s64 	%rd284, %rd27, %rd283;
	st.global.f32 	[%rd284], %f407;

$L__BB0_506:
	not.pred 	%p281, %p13;
	@%p281 bra 	$L__BB0_508;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3511;
  cvt.f32.f16 %f408, high;}

	// end inline asm
	add.s32 	%r4765, %r1146, %r389;
	mul.wide.s32 	%rd285, %r4765, 4;
	add.s64 	%rd286, %rd27, %rd285;
	st.global.f32 	[%rd286], %f408;

$L__BB0_508:
	@%p15 bra 	$L__BB0_513;

	not.pred 	%p283, %p12;
	@%p283 bra 	$L__BB0_511;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3588;
  cvt.f32.f16 %f409, low;}

	// end inline asm
	add.s32 	%r4767, %r1146, %r402;
	mul.wide.s32 	%rd287, %r4767, 4;
	add.s64 	%rd288, %rd27, %rd287;
	st.global.f32 	[%rd288], %f409;

$L__BB0_511:
	not.pred 	%p284, %p14;
	@%p284 bra 	$L__BB0_513;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3588;
  cvt.f32.f16 %f410, high;}

	// end inline asm
	add.s32 	%r4769, %r1146, %r403;
	mul.wide.s32 	%rd289, %r4769, 4;
	add.s64 	%rd290, %rd27, %rd289;
	st.global.f32 	[%rd290], %f410;

$L__BB0_513:
	add.s32 	%r4771, %r1143, %r1139;
	mul.lo.s32 	%r1147, %r4771, %r1508;
	add.s32 	%r4772, %r1144, %r1147;
	mul.lo.s32 	%r4773, %r4772, %r48;
	sub.s32 	%r1148, %r4773, %r1484;
	@%p15 bra 	$L__BB0_518;

	not.pred 	%p286, %p11;
	@%p286 bra 	$L__BB0_516;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3554;
  cvt.f32.f16 %f411, low;}

	// end inline asm
	add.s32 	%r4775, %r1148, %r388;
	mul.wide.s32 	%rd291, %r4775, 4;
	add.s64 	%rd292, %rd27, %rd291;
	st.global.f32 	[%rd292], %f411;

$L__BB0_516:
	not.pred 	%p287, %p13;
	@%p287 bra 	$L__BB0_518;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3554;
  cvt.f32.f16 %f412, high;}

	// end inline asm
	add.s32 	%r4777, %r1148, %r389;
	mul.wide.s32 	%rd293, %r4777, 4;
	add.s64 	%rd294, %rd27, %rd293;
	st.global.f32 	[%rd294], %f412;

$L__BB0_518:
	@%p15 bra 	$L__BB0_523;

	not.pred 	%p289, %p12;
	@%p289 bra 	$L__BB0_521;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3620;
  cvt.f32.f16 %f413, low;}

	// end inline asm
	add.s32 	%r4779, %r1148, %r402;
	mul.wide.s32 	%rd295, %r4779, 4;
	add.s64 	%rd296, %rd27, %rd295;
	st.global.f32 	[%rd296], %f413;

$L__BB0_521:
	not.pred 	%p290, %p14;
	@%p290 bra 	$L__BB0_523;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3620;
  cvt.f32.f16 %f414, high;}

	// end inline asm
	add.s32 	%r4781, %r1148, %r403;
	mul.wide.s32 	%rd297, %r4781, 4;
	add.s64 	%rd298, %rd27, %rd297;
	st.global.f32 	[%rd298], %f414;

$L__BB0_523:
	add.s32 	%r4782, %r1135, %r1145;
	mul.lo.s32 	%r4783, %r4782, %r48;
	sub.s32 	%r1149, %r4783, %r1484;
	@%p15 bra 	$L__BB0_528;

	not.pred 	%p292, %p11;
	@%p292 bra 	$L__BB0_526;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7026;
  cvt.f32.f16 %f415, low;}

	// end inline asm
	add.s32 	%r4785, %r1149, %r388;
	mul.wide.s32 	%rd299, %r4785, 4;
	add.s64 	%rd300, %rd27, %rd299;
	st.global.f32 	[%rd300], %f415;

$L__BB0_526:
	not.pred 	%p293, %p13;
	@%p293 bra 	$L__BB0_528;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7026;
  cvt.f32.f16 %f416, high;}

	// end inline asm
	add.s32 	%r4787, %r1149, %r389;
	mul.wide.s32 	%rd301, %r4787, 4;
	add.s64 	%rd302, %rd27, %rd301;
	st.global.f32 	[%rd302], %f416;

$L__BB0_528:
	@%p15 bra 	$L__BB0_533;

	not.pred 	%p295, %p12;
	@%p295 bra 	$L__BB0_531;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7025;
  cvt.f32.f16 %f417, low;}

	// end inline asm
	add.s32 	%r4789, %r1149, %r402;
	mul.wide.s32 	%rd303, %r4789, 4;
	add.s64 	%rd304, %rd27, %rd303;
	st.global.f32 	[%rd304], %f417;

$L__BB0_531:
	not.pred 	%p296, %p14;
	@%p296 bra 	$L__BB0_533;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7025;
  cvt.f32.f16 %f418, high;}

	// end inline asm
	add.s32 	%r4791, %r1149, %r403;
	mul.wide.s32 	%rd305, %r4791, 4;
	add.s64 	%rd306, %rd27, %rd305;
	st.global.f32 	[%rd306], %f418;

$L__BB0_533:
	add.s32 	%r4792, %r1135, %r1147;
	mul.lo.s32 	%r4793, %r4792, %r48;
	sub.s32 	%r1150, %r4793, %r1484;
	@%p15 bra 	$L__BB0_538;

	not.pred 	%p298, %p11;
	@%p298 bra 	$L__BB0_536;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7024;
  cvt.f32.f16 %f419, low;}

	// end inline asm
	add.s32 	%r4795, %r1150, %r388;
	mul.wide.s32 	%rd307, %r4795, 4;
	add.s64 	%rd308, %rd27, %rd307;
	st.global.f32 	[%rd308], %f419;

$L__BB0_536:
	not.pred 	%p299, %p13;
	@%p299 bra 	$L__BB0_538;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7024;
  cvt.f32.f16 %f420, high;}

	// end inline asm
	add.s32 	%r4797, %r1150, %r389;
	mul.wide.s32 	%rd309, %r4797, 4;
	add.s64 	%rd310, %rd27, %rd309;
	st.global.f32 	[%rd310], %f420;

$L__BB0_538:
	@%p15 bra 	$L__BB0_543;

	not.pred 	%p301, %p12;
	@%p301 bra 	$L__BB0_541;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7023;
  cvt.f32.f16 %f421, low;}

	// end inline asm
	add.s32 	%r4799, %r1150, %r402;
	mul.wide.s32 	%rd311, %r4799, 4;
	add.s64 	%rd312, %rd27, %rd311;
	st.global.f32 	[%rd312], %f421;

$L__BB0_541:
	not.pred 	%p302, %p14;
	@%p302 bra 	$L__BB0_543;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7023;
  cvt.f32.f16 %f422, high;}

	// end inline asm
	add.s32 	%r4801, %r1150, %r403;
	mul.wide.s32 	%rd313, %r4801, 4;
	add.s64 	%rd314, %rd27, %rd313;
	st.global.f32 	[%rd314], %f422;

$L__BB0_543:
	add.s32 	%r1151, %r1139, %r1506;
	add.s32 	%r4803, %r1143, %r1151;
	mul.lo.s32 	%r1152, %r4803, %r1508;
	add.s32 	%r4805, %r1135, %r1152;
	mul.lo.s32 	%r4806, %r4805, %r48;
	sub.s32 	%r1153, %r4806, %r1484;
	@%p15 bra 	$L__BB0_548;

	not.pred 	%p304, %p11;
	@%p304 bra 	$L__BB0_546;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1008;
  cvt.f32.f16 %f423, low;}

	// end inline asm
	add.s32 	%r4808, %r1153, %r388;
	mul.wide.s32 	%rd315, %r4808, 4;
	add.s64 	%rd316, %rd27, %rd315;
	st.global.f32 	[%rd316], %f423;

$L__BB0_546:
	not.pred 	%p305, %p13;
	@%p305 bra 	$L__BB0_548;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1008;
  cvt.f32.f16 %f424, high;}

	// end inline asm
	add.s32 	%r4810, %r1153, %r389;
	mul.wide.s32 	%rd317, %r4810, 4;
	add.s64 	%rd318, %rd27, %rd317;
	st.global.f32 	[%rd318], %f424;

$L__BB0_548:
	@%p15 bra 	$L__BB0_553;

	not.pred 	%p307, %p12;
	@%p307 bra 	$L__BB0_551;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1020;
  cvt.f32.f16 %f425, low;}

	// end inline asm
	add.s32 	%r4812, %r1153, %r402;
	mul.wide.s32 	%rd319, %r4812, 4;
	add.s64 	%rd320, %rd27, %rd319;
	st.global.f32 	[%rd320], %f425;

$L__BB0_551:
	not.pred 	%p308, %p14;
	@%p308 bra 	$L__BB0_553;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1020;
  cvt.f32.f16 %f426, high;}

	// end inline asm
	add.s32 	%r4814, %r1153, %r403;
	mul.wide.s32 	%rd321, %r4814, 4;
	add.s64 	%rd322, %rd27, %rd321;
	st.global.f32 	[%rd322], %f426;

$L__BB0_553:
	add.s32 	%r4815, %r1141, %r1145;
	mul.lo.s32 	%r4816, %r4815, %r48;
	sub.s32 	%r1154, %r4816, %r1484;
	@%p15 bra 	$L__BB0_558;

	not.pred 	%p310, %p11;
	@%p310 bra 	$L__BB0_556;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7022;
  cvt.f32.f16 %f427, low;}

	// end inline asm
	add.s32 	%r4818, %r1154, %r388;
	mul.wide.s32 	%rd323, %r4818, 4;
	add.s64 	%rd324, %rd27, %rd323;
	st.global.f32 	[%rd324], %f427;

$L__BB0_556:
	not.pred 	%p311, %p13;
	@%p311 bra 	$L__BB0_558;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7022;
  cvt.f32.f16 %f428, high;}

	// end inline asm
	add.s32 	%r4820, %r1154, %r389;
	mul.wide.s32 	%rd325, %r4820, 4;
	add.s64 	%rd326, %rd27, %rd325;
	st.global.f32 	[%rd326], %f428;

$L__BB0_558:
	@%p15 bra 	$L__BB0_563;

	not.pred 	%p313, %p12;
	@%p313 bra 	$L__BB0_561;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7021;
  cvt.f32.f16 %f429, low;}

	// end inline asm
	add.s32 	%r4822, %r1154, %r402;
	mul.wide.s32 	%rd327, %r4822, 4;
	add.s64 	%rd328, %rd27, %rd327;
	st.global.f32 	[%rd328], %f429;

$L__BB0_561:
	not.pred 	%p314, %p14;
	@%p314 bra 	$L__BB0_563;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7021;
  cvt.f32.f16 %f430, high;}

	// end inline asm
	add.s32 	%r4824, %r1154, %r403;
	mul.wide.s32 	%rd329, %r4824, 4;
	add.s64 	%rd330, %rd27, %rd329;
	st.global.f32 	[%rd330], %f430;

$L__BB0_563:
	add.s32 	%r4825, %r1141, %r1147;
	mul.lo.s32 	%r4826, %r4825, %r48;
	sub.s32 	%r1155, %r4826, %r1484;
	@%p15 bra 	$L__BB0_568;

	not.pred 	%p316, %p11;
	@%p316 bra 	$L__BB0_566;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3892;
  cvt.f32.f16 %f431, low;}

	// end inline asm
	add.s32 	%r4828, %r1155, %r388;
	mul.wide.s32 	%rd331, %r4828, 4;
	add.s64 	%rd332, %rd27, %rd331;
	st.global.f32 	[%rd332], %f431;

$L__BB0_566:
	not.pred 	%p317, %p13;
	@%p317 bra 	$L__BB0_568;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3892;
  cvt.f32.f16 %f432, high;}

	// end inline asm
	add.s32 	%r4830, %r1155, %r389;
	mul.wide.s32 	%rd333, %r4830, 4;
	add.s64 	%rd334, %rd27, %rd333;
	st.global.f32 	[%rd334], %f432;

$L__BB0_568:
	@%p15 bra 	$L__BB0_573;

	not.pred 	%p319, %p12;
	@%p319 bra 	$L__BB0_571;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3973;
  cvt.f32.f16 %f433, low;}

	// end inline asm
	add.s32 	%r4832, %r1155, %r402;
	mul.wide.s32 	%rd335, %r4832, 4;
	add.s64 	%rd336, %rd27, %rd335;
	st.global.f32 	[%rd336], %f433;

$L__BB0_571:
	not.pred 	%p320, %p14;
	@%p320 bra 	$L__BB0_573;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r3973;
  cvt.f32.f16 %f434, high;}

	// end inline asm
	add.s32 	%r4834, %r1155, %r403;
	mul.wide.s32 	%rd337, %r4834, 4;
	add.s64 	%rd338, %rd27, %rd337;
	st.global.f32 	[%rd338], %f434;

$L__BB0_573:
	add.s32 	%r4835, %r1141, %r1152;
	mul.lo.s32 	%r4836, %r4835, %r48;
	sub.s32 	%r1156, %r4836, %r1484;
	@%p15 bra 	$L__BB0_578;

	not.pred 	%p322, %p11;
	@%p322 bra 	$L__BB0_576;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1032;
  cvt.f32.f16 %f435, low;}

	// end inline asm
	add.s32 	%r4838, %r1156, %r388;
	mul.wide.s32 	%rd339, %r4838, 4;
	add.s64 	%rd340, %rd27, %rd339;
	st.global.f32 	[%rd340], %f435;

$L__BB0_576:
	not.pred 	%p323, %p13;
	@%p323 bra 	$L__BB0_578;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1032;
  cvt.f32.f16 %f436, high;}

	// end inline asm
	add.s32 	%r4840, %r1156, %r389;
	mul.wide.s32 	%rd341, %r4840, 4;
	add.s64 	%rd342, %rd27, %rd341;
	st.global.f32 	[%rd342], %f436;

$L__BB0_578:
	@%p15 bra 	$L__BB0_583;

	not.pred 	%p325, %p12;
	@%p325 bra 	$L__BB0_581;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1044;
  cvt.f32.f16 %f437, low;}

	// end inline asm
	add.s32 	%r4842, %r1156, %r402;
	mul.wide.s32 	%rd343, %r4842, 4;
	add.s64 	%rd344, %rd27, %rd343;
	st.global.f32 	[%rd344], %f437;

$L__BB0_581:
	not.pred 	%p326, %p14;
	@%p326 bra 	$L__BB0_583;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1044;
  cvt.f32.f16 %f438, high;}

	// end inline asm
	add.s32 	%r4844, %r1156, %r403;
	mul.wide.s32 	%rd345, %r4844, 4;
	add.s64 	%rd346, %rd27, %rd345;
	st.global.f32 	[%rd346], %f438;

$L__BB0_583:
	add.s32 	%r1157, %r1135, 2;
	add.s32 	%r4845, %r1157, %r1145;
	mul.lo.s32 	%r4846, %r4845, %r48;
	sub.s32 	%r1158, %r4846, %r1484;
	@%p15 bra 	$L__BB0_588;

	not.pred 	%p328, %p11;
	@%p328 bra 	$L__BB0_586;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4033;
  cvt.f32.f16 %f439, low;}

	// end inline asm
	add.s32 	%r4848, %r1158, %r388;
	mul.wide.s32 	%rd347, %r4848, 4;
	add.s64 	%rd348, %rd27, %rd347;
	st.global.f32 	[%rd348], %f439;

$L__BB0_586:
	not.pred 	%p329, %p13;
	@%p329 bra 	$L__BB0_588;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4033;
  cvt.f32.f16 %f440, high;}

	// end inline asm
	add.s32 	%r4850, %r1158, %r389;
	mul.wide.s32 	%rd349, %r4850, 4;
	add.s64 	%rd350, %rd27, %rd349;
	st.global.f32 	[%rd350], %f440;

$L__BB0_588:
	@%p15 bra 	$L__BB0_593;

	not.pred 	%p331, %p12;
	@%p331 bra 	$L__BB0_591;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4067;
  cvt.f32.f16 %f441, low;}

	// end inline asm
	add.s32 	%r4852, %r1158, %r402;
	mul.wide.s32 	%rd351, %r4852, 4;
	add.s64 	%rd352, %rd27, %rd351;
	st.global.f32 	[%rd352], %f441;

$L__BB0_591:
	not.pred 	%p332, %p14;
	@%p332 bra 	$L__BB0_593;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r4067;
  cvt.f32.f16 %f442, high;}

	// end inline asm
	add.s32 	%r4854, %r1158, %r403;
	mul.wide.s32 	%rd353, %r4854, 4;
	add.s64 	%rd354, %rd27, %rd353;
	st.global.f32 	[%rd354], %f442;

$L__BB0_593:
	mul.lo.s32 	%r1159, %r4733, %r1508;
	add.s32 	%r4857, %r1144, %r1159;
	mul.lo.s32 	%r4858, %r4857, %r48;
	sub.s32 	%r1160, %r4858, %r1484;
	@%p15 bra 	$L__BB0_598;

	not.pred 	%p334, %p11;
	@%p334 bra 	$L__BB0_596;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7020;
  cvt.f32.f16 %f443, low;}

	// end inline asm
	add.s32 	%r4860, %r1160, %r388;
	mul.wide.s32 	%rd355, %r4860, 4;
	add.s64 	%rd356, %rd27, %rd355;
	st.global.f32 	[%rd356], %f443;

$L__BB0_596:
	not.pred 	%p335, %p13;
	@%p335 bra 	$L__BB0_598;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7020;
  cvt.f32.f16 %f444, high;}

	// end inline asm
	add.s32 	%r4862, %r1160, %r389;
	mul.wide.s32 	%rd357, %r4862, 4;
	add.s64 	%rd358, %rd27, %rd357;
	st.global.f32 	[%rd358], %f444;

$L__BB0_598:
	@%p15 bra 	$L__BB0_603;

	not.pred 	%p337, %p12;
	@%p337 bra 	$L__BB0_601;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7019;
  cvt.f32.f16 %f445, low;}

	// end inline asm
	add.s32 	%r4864, %r1160, %r402;
	mul.wide.s32 	%rd359, %r4864, 4;
	add.s64 	%rd360, %rd27, %rd359;
	st.global.f32 	[%rd360], %f445;

$L__BB0_601:
	not.pred 	%p338, %p14;
	@%p338 bra 	$L__BB0_603;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7019;
  cvt.f32.f16 %f446, high;}

	// end inline asm
	add.s32 	%r4866, %r1160, %r403;
	mul.wide.s32 	%rd361, %r4866, 4;
	add.s64 	%rd362, %rd27, %rd361;
	st.global.f32 	[%rd362], %f446;

$L__BB0_603:
	add.s32 	%r4868, %r1134, %r1151;
	mul.lo.s32 	%r1161, %r4868, %r1508;
	add.s32 	%r4869, %r1144, %r1161;
	mul.lo.s32 	%r4870, %r4869, %r48;
	sub.s32 	%r1162, %r4870, %r1484;
	@%p15 bra 	$L__BB0_608;

	not.pred 	%p340, %p11;
	@%p340 bra 	$L__BB0_606;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1062;
  cvt.f32.f16 %f447, low;}

	// end inline asm
	add.s32 	%r4872, %r1162, %r388;
	mul.wide.s32 	%rd363, %r4872, 4;
	add.s64 	%rd364, %rd27, %rd363;
	st.global.f32 	[%rd364], %f447;

$L__BB0_606:
	not.pred 	%p341, %p13;
	@%p341 bra 	$L__BB0_608;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1062;
  cvt.f32.f16 %f448, high;}

	// end inline asm
	add.s32 	%r4874, %r1162, %r389;
	mul.wide.s32 	%rd365, %r4874, 4;
	add.s64 	%rd366, %rd27, %rd365;
	st.global.f32 	[%rd366], %f448;

$L__BB0_608:
	@%p15 bra 	$L__BB0_613;

	not.pred 	%p343, %p12;
	@%p343 bra 	$L__BB0_611;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1068;
  cvt.f32.f16 %f449, low;}

	// end inline asm
	add.s32 	%r4876, %r1162, %r402;
	mul.wide.s32 	%rd367, %r4876, 4;
	add.s64 	%rd368, %rd27, %rd367;
	st.global.f32 	[%rd368], %f449;

$L__BB0_611:
	not.pred 	%p344, %p14;
	@%p344 bra 	$L__BB0_613;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1068;
  cvt.f32.f16 %f450, high;}

	// end inline asm
	add.s32 	%r4878, %r1162, %r403;
	mul.wide.s32 	%rd369, %r4878, 4;
	add.s64 	%rd370, %rd27, %rd369;
	st.global.f32 	[%rd370], %f450;

$L__BB0_613:
	mul.lo.s32 	%r1163, %r4719, %r1508;
	add.s32 	%r4881, %r1135, %r1163;
	mul.lo.s32 	%r4882, %r4881, %r48;
	sub.s32 	%r1164, %r4882, %r1484;
	@%p15 bra 	$L__BB0_618;

	not.pred 	%p346, %p11;
	@%p346 bra 	$L__BB0_616;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7018;
  cvt.f32.f16 %f451, low;}

	// end inline asm
	add.s32 	%r4884, %r1164, %r388;
	mul.wide.s32 	%rd371, %r4884, 4;
	add.s64 	%rd372, %rd27, %rd371;
	st.global.f32 	[%rd372], %f451;

$L__BB0_616:
	not.pred 	%p347, %p13;
	@%p347 bra 	$L__BB0_618;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7018;
  cvt.f32.f16 %f452, high;}

	// end inline asm
	add.s32 	%r4886, %r1164, %r389;
	mul.wide.s32 	%rd373, %r4886, 4;
	add.s64 	%rd374, %rd27, %rd373;
	st.global.f32 	[%rd374], %f452;

$L__BB0_618:
	@%p15 bra 	$L__BB0_623;

	not.pred 	%p349, %p12;
	@%p349 bra 	$L__BB0_621;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7017;
  cvt.f32.f16 %f453, low;}

	// end inline asm
	add.s32 	%r4888, %r1164, %r402;
	mul.wide.s32 	%rd375, %r4888, 4;
	add.s64 	%rd376, %rd27, %rd375;
	st.global.f32 	[%rd376], %f453;

$L__BB0_621:
	not.pred 	%p350, %p14;
	@%p350 bra 	$L__BB0_623;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7017;
  cvt.f32.f16 %f454, high;}

	// end inline asm
	add.s32 	%r4890, %r1164, %r403;
	mul.wide.s32 	%rd377, %r4890, 4;
	add.s64 	%rd378, %rd27, %rd377;
	st.global.f32 	[%rd378], %f454;

$L__BB0_623:
	add.s32 	%r4891, %r1135, %r1159;
	mul.lo.s32 	%r4892, %r4891, %r48;
	sub.s32 	%r1165, %r4892, %r1484;
	@%p15 bra 	$L__BB0_628;

	not.pred 	%p352, %p11;
	@%p352 bra 	$L__BB0_626;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7016;
  cvt.f32.f16 %f455, low;}

	// end inline asm
	add.s32 	%r4894, %r1165, %r388;
	mul.wide.s32 	%rd379, %r4894, 4;
	add.s64 	%rd380, %rd27, %rd379;
	st.global.f32 	[%rd380], %f455;

$L__BB0_626:
	not.pred 	%p353, %p13;
	@%p353 bra 	$L__BB0_628;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7016;
  cvt.f32.f16 %f456, high;}

	// end inline asm
	add.s32 	%r4896, %r1165, %r389;
	mul.wide.s32 	%rd381, %r4896, 4;
	add.s64 	%rd382, %rd27, %rd381;
	st.global.f32 	[%rd382], %f456;

$L__BB0_628:
	@%p15 bra 	$L__BB0_633;

	not.pred 	%p355, %p12;
	@%p355 bra 	$L__BB0_631;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7015;
  cvt.f32.f16 %f457, low;}

	// end inline asm
	add.s32 	%r4898, %r1165, %r402;
	mul.wide.s32 	%rd383, %r4898, 4;
	add.s64 	%rd384, %rd27, %rd383;
	st.global.f32 	[%rd384], %f457;

$L__BB0_631:
	not.pred 	%p356, %p14;
	@%p356 bra 	$L__BB0_633;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7015;
  cvt.f32.f16 %f458, high;}

	// end inline asm
	add.s32 	%r4900, %r1165, %r403;
	mul.wide.s32 	%rd385, %r4900, 4;
	add.s64 	%rd386, %rd27, %rd385;
	st.global.f32 	[%rd386], %f458;

$L__BB0_633:
	add.s32 	%r4901, %r1135, %r1161;
	mul.lo.s32 	%r4902, %r4901, %r48;
	sub.s32 	%r1166, %r4902, %r1484;
	@%p15 bra 	$L__BB0_638;

	not.pred 	%p358, %p11;
	@%p358 bra 	$L__BB0_636;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7014;
  cvt.f32.f16 %f459, low;}

	// end inline asm
	add.s32 	%r4904, %r1166, %r388;
	mul.wide.s32 	%rd387, %r4904, 4;
	add.s64 	%rd388, %rd27, %rd387;
	st.global.f32 	[%rd388], %f459;

$L__BB0_636:
	not.pred 	%p359, %p13;
	@%p359 bra 	$L__BB0_638;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7014;
  cvt.f32.f16 %f460, high;}

	// end inline asm
	add.s32 	%r4906, %r1166, %r389;
	mul.wide.s32 	%rd389, %r4906, 4;
	add.s64 	%rd390, %rd27, %rd389;
	st.global.f32 	[%rd390], %f460;

$L__BB0_638:
	@%p15 bra 	$L__BB0_643;

	not.pred 	%p361, %p12;
	@%p361 bra 	$L__BB0_641;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7013;
  cvt.f32.f16 %f461, low;}

	// end inline asm
	add.s32 	%r4908, %r1166, %r402;
	mul.wide.s32 	%rd391, %r4908, 4;
	add.s64 	%rd392, %rd27, %rd391;
	st.global.f32 	[%rd392], %f461;

$L__BB0_641:
	not.pred 	%p362, %p14;
	@%p362 bra 	$L__BB0_643;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7013;
  cvt.f32.f16 %f462, high;}

	// end inline asm
	add.s32 	%r4910, %r1166, %r403;
	mul.wide.s32 	%rd393, %r4910, 4;
	add.s64 	%rd394, %rd27, %rd393;
	st.global.f32 	[%rd394], %f462;

$L__BB0_643:
	add.s32 	%r4911, %r1141, %r1163;
	mul.lo.s32 	%r4912, %r4911, %r48;
	sub.s32 	%r1167, %r4912, %r1484;
	@%p15 bra 	$L__BB0_648;

	not.pred 	%p364, %p11;
	@%p364 bra 	$L__BB0_646;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7012;
  cvt.f32.f16 %f463, low;}

	// end inline asm
	add.s32 	%r4914, %r1167, %r388;
	mul.wide.s32 	%rd395, %r4914, 4;
	add.s64 	%rd396, %rd27, %rd395;
	st.global.f32 	[%rd396], %f463;

$L__BB0_646:
	not.pred 	%p365, %p13;
	@%p365 bra 	$L__BB0_648;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7012;
  cvt.f32.f16 %f464, high;}

	// end inline asm
	add.s32 	%r4916, %r1167, %r389;
	mul.wide.s32 	%rd397, %r4916, 4;
	add.s64 	%rd398, %rd27, %rd397;
	st.global.f32 	[%rd398], %f464;

$L__BB0_648:
	@%p15 bra 	$L__BB0_653;

	not.pred 	%p367, %p12;
	@%p367 bra 	$L__BB0_651;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7011;
  cvt.f32.f16 %f465, low;}

	// end inline asm
	add.s32 	%r4918, %r1167, %r402;
	mul.wide.s32 	%rd399, %r4918, 4;
	add.s64 	%rd400, %rd27, %rd399;
	st.global.f32 	[%rd400], %f465;

$L__BB0_651:
	not.pred 	%p368, %p14;
	@%p368 bra 	$L__BB0_653;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7011;
  cvt.f32.f16 %f466, high;}

	// end inline asm
	add.s32 	%r4920, %r1167, %r403;
	mul.wide.s32 	%rd401, %r4920, 4;
	add.s64 	%rd402, %rd27, %rd401;
	st.global.f32 	[%rd402], %f466;

$L__BB0_653:
	add.s32 	%r4921, %r1141, %r1159;
	mul.lo.s32 	%r4922, %r4921, %r48;
	sub.s32 	%r1168, %r4922, %r1484;
	@%p15 bra 	$L__BB0_658;

	not.pred 	%p370, %p11;
	@%p370 bra 	$L__BB0_656;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7010;
  cvt.f32.f16 %f467, low;}

	// end inline asm
	add.s32 	%r4924, %r1168, %r388;
	mul.wide.s32 	%rd403, %r4924, 4;
	add.s64 	%rd404, %rd27, %rd403;
	st.global.f32 	[%rd404], %f467;

$L__BB0_656:
	not.pred 	%p371, %p13;
	@%p371 bra 	$L__BB0_658;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7010;
  cvt.f32.f16 %f468, high;}

	// end inline asm
	add.s32 	%r4926, %r1168, %r389;
	mul.wide.s32 	%rd405, %r4926, 4;
	add.s64 	%rd406, %rd27, %rd405;
	st.global.f32 	[%rd406], %f468;

$L__BB0_658:
	@%p15 bra 	$L__BB0_663;

	not.pred 	%p373, %p12;
	@%p373 bra 	$L__BB0_661;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7009;
  cvt.f32.f16 %f469, low;}

	// end inline asm
	add.s32 	%r4928, %r1168, %r402;
	mul.wide.s32 	%rd407, %r4928, 4;
	add.s64 	%rd408, %rd27, %rd407;
	st.global.f32 	[%rd408], %f469;

$L__BB0_661:
	not.pred 	%p374, %p14;
	@%p374 bra 	$L__BB0_663;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7009;
  cvt.f32.f16 %f470, high;}

	// end inline asm
	add.s32 	%r4930, %r1168, %r403;
	mul.wide.s32 	%rd409, %r4930, 4;
	add.s64 	%rd410, %rd27, %rd409;
	st.global.f32 	[%rd410], %f470;

$L__BB0_663:
	add.s32 	%r4931, %r1141, %r1161;
	mul.lo.s32 	%r4932, %r4931, %r48;
	sub.s32 	%r1169, %r4932, %r1484;
	@%p15 bra 	$L__BB0_668;

	not.pred 	%p376, %p11;
	@%p376 bra 	$L__BB0_666;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7008;
  cvt.f32.f16 %f471, low;}

	// end inline asm
	add.s32 	%r4934, %r1169, %r388;
	mul.wide.s32 	%rd411, %r4934, 4;
	add.s64 	%rd412, %rd27, %rd411;
	st.global.f32 	[%rd412], %f471;

$L__BB0_666:
	not.pred 	%p377, %p13;
	@%p377 bra 	$L__BB0_668;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7008;
  cvt.f32.f16 %f472, high;}

	// end inline asm
	add.s32 	%r4936, %r1169, %r389;
	mul.wide.s32 	%rd413, %r4936, 4;
	add.s64 	%rd414, %rd27, %rd413;
	st.global.f32 	[%rd414], %f472;

$L__BB0_668:
	@%p15 bra 	$L__BB0_673;

	not.pred 	%p379, %p12;
	@%p379 bra 	$L__BB0_671;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7007;
  cvt.f32.f16 %f473, low;}

	// end inline asm
	add.s32 	%r4938, %r1169, %r402;
	mul.wide.s32 	%rd415, %r4938, 4;
	add.s64 	%rd416, %rd27, %rd415;
	st.global.f32 	[%rd416], %f473;

$L__BB0_671:
	not.pred 	%p380, %p14;
	@%p380 bra 	$L__BB0_673;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7007;
  cvt.f32.f16 %f474, high;}

	// end inline asm
	add.s32 	%r4940, %r1169, %r403;
	mul.wide.s32 	%rd417, %r4940, 4;
	add.s64 	%rd418, %rd27, %rd417;
	st.global.f32 	[%rd418], %f474;

$L__BB0_673:
	add.s32 	%r4941, %r1157, %r1161;
	mul.lo.s32 	%r4942, %r4941, %r48;
	sub.s32 	%r1170, %r4942, %r1484;
	@%p15 bra 	$L__BB0_678;

	not.pred 	%p382, %p11;
	@%p382 bra 	$L__BB0_676;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1117;
  cvt.f32.f16 %f475, low;}

	// end inline asm
	add.s32 	%r4944, %r1170, %r388;
	mul.wide.s32 	%rd419, %r4944, 4;
	add.s64 	%rd420, %rd27, %rd419;
	st.global.f32 	[%rd420], %f475;

$L__BB0_676:
	not.pred 	%p383, %p13;
	@%p383 bra 	$L__BB0_678;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1117;
  cvt.f32.f16 %f476, high;}

	// end inline asm
	add.s32 	%r4946, %r1170, %r389;
	mul.wide.s32 	%rd421, %r4946, 4;
	add.s64 	%rd422, %rd27, %rd421;
	st.global.f32 	[%rd422], %f476;

$L__BB0_678:
	@%p15 bra 	$L__BB0_683;

	not.pred 	%p385, %p12;
	@%p385 bra 	$L__BB0_681;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1118;
  cvt.f32.f16 %f477, low;}

	// end inline asm
	add.s32 	%r4948, %r1170, %r402;
	mul.wide.s32 	%rd423, %r4948, 4;
	add.s64 	%rd424, %rd27, %rd423;
	st.global.f32 	[%rd424], %f477;

$L__BB0_681:
	not.pred 	%p386, %p14;
	@%p386 bra 	$L__BB0_683;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r1118;
  cvt.f32.f16 %f478, high;}

	// end inline asm
	add.s32 	%r4950, %r1170, %r403;
	mul.wide.s32 	%rd425, %r4950, 4;
	add.s64 	%rd426, %rd27, %rd425;
	st.global.f32 	[%rd426], %f478;

$L__BB0_683:
	add.s32 	%r1171, %r1134, 1;
	add.s32 	%r4951, %r1171, %r1139;
	mad.lo.s32 	%r4953, %r4951, %r1508, %r1135;
	mul.lo.s32 	%r4954, %r4953, %r48;
	sub.s32 	%r1172, %r4954, %r1484;
	@%p15 bra 	$L__BB0_688;

	not.pred 	%p388, %p11;
	@%p388 bra 	$L__BB0_686;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7006;
  cvt.f32.f16 %f479, low;}

	// end inline asm
	add.s32 	%r4956, %r1172, %r388;
	mul.wide.s32 	%rd427, %r4956, 4;
	add.s64 	%rd428, %rd27, %rd427;
	st.global.f32 	[%rd428], %f479;

$L__BB0_686:
	not.pred 	%p389, %p13;
	@%p389 bra 	$L__BB0_688;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7006;
  cvt.f32.f16 %f480, high;}

	// end inline asm
	add.s32 	%r4958, %r1172, %r389;
	mul.wide.s32 	%rd429, %r4958, 4;
	add.s64 	%rd430, %rd27, %rd429;
	st.global.f32 	[%rd430], %f480;

$L__BB0_688:
	@%p15 bra 	$L__BB0_693;

	not.pred 	%p391, %p12;
	@%p391 bra 	$L__BB0_691;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7005;
  cvt.f32.f16 %f481, low;}

	// end inline asm
	add.s32 	%r4960, %r1172, %r402;
	mul.wide.s32 	%rd431, %r4960, 4;
	add.s64 	%rd432, %rd27, %rd431;
	st.global.f32 	[%rd432], %f481;

$L__BB0_691:
	not.pred 	%p392, %p14;
	@%p392 bra 	$L__BB0_693;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7005;
  cvt.f32.f16 %f482, high;}

	// end inline asm
	add.s32 	%r4962, %r1172, %r403;
	mul.wide.s32 	%rd433, %r4962, 4;
	add.s64 	%rd434, %rd27, %rd433;
	st.global.f32 	[%rd434], %f482;

$L__BB0_693:
	add.s32 	%r4964, %r1171, %r1151;
	mul.lo.s32 	%r1173, %r4964, %r1508;
	add.s32 	%r4965, %r1135, %r1173;
	mul.lo.s32 	%r4966, %r4965, %r48;
	sub.s32 	%r1174, %r4966, %r1484;
	@%p15 bra 	$L__BB0_698;

	not.pred 	%p394, %p11;
	@%p394 bra 	$L__BB0_696;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7004;
  cvt.f32.f16 %f483, low;}

	// end inline asm
	add.s32 	%r4968, %r1174, %r388;
	mul.wide.s32 	%rd435, %r4968, 4;
	add.s64 	%rd436, %rd27, %rd435;
	st.global.f32 	[%rd436], %f483;

$L__BB0_696:
	not.pred 	%p395, %p13;
	@%p395 bra 	$L__BB0_698;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7004;
  cvt.f32.f16 %f484, high;}

	// end inline asm
	add.s32 	%r4970, %r1174, %r389;
	mul.wide.s32 	%rd437, %r4970, 4;
	add.s64 	%rd438, %rd27, %rd437;
	st.global.f32 	[%rd438], %f484;

$L__BB0_698:
	@%p15 bra 	$L__BB0_703;

	not.pred 	%p397, %p12;
	@%p397 bra 	$L__BB0_701;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7003;
  cvt.f32.f16 %f485, low;}

	// end inline asm
	add.s32 	%r4972, %r1174, %r402;
	mul.wide.s32 	%rd439, %r4972, 4;
	add.s64 	%rd440, %rd27, %rd439;
	st.global.f32 	[%rd440], %f485;

$L__BB0_701:
	not.pred 	%p398, %p14;
	@%p398 bra 	$L__BB0_703;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7003;
  cvt.f32.f16 %f486, high;}

	// end inline asm
	add.s32 	%r4974, %r1174, %r403;
	mul.wide.s32 	%rd441, %r4974, 4;
	add.s64 	%rd442, %rd27, %rd441;
	st.global.f32 	[%rd442], %f486;

$L__BB0_703:
	add.s32 	%r4975, %r1141, %r1173;
	mul.lo.s32 	%r4976, %r4975, %r48;
	sub.s32 	%r1175, %r4976, %r1484;
	@%p15 bra 	$L__BB0_708;

	not.pred 	%p400, %p11;
	@%p400 bra 	$L__BB0_706;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7002;
  cvt.f32.f16 %f487, low;}

	// end inline asm
	add.s32 	%r4978, %r1175, %r388;
	mul.wide.s32 	%rd443, %r4978, 4;
	add.s64 	%rd444, %rd27, %rd443;
	st.global.f32 	[%rd444], %f487;

$L__BB0_706:
	not.pred 	%p401, %p13;
	@%p401 bra 	$L__BB0_708;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7002;
  cvt.f32.f16 %f488, high;}

	// end inline asm
	add.s32 	%r4980, %r1175, %r389;
	mul.wide.s32 	%rd445, %r4980, 4;
	add.s64 	%rd446, %rd27, %rd445;
	st.global.f32 	[%rd446], %f488;

$L__BB0_708:
	@%p15 bra 	$L__BB0_713;

	not.pred 	%p403, %p12;
	@%p403 bra 	$L__BB0_711;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7001;
  cvt.f32.f16 %f489, low;}

	// end inline asm
	add.s32 	%r4982, %r1175, %r402;
	mul.wide.s32 	%rd447, %r4982, 4;
	add.s64 	%rd448, %rd27, %rd447;
	st.global.f32 	[%rd448], %f489;

$L__BB0_711:
	not.pred 	%p404, %p14;
	@%p404 bra 	$L__BB0_713;

	// begin inline asm
	{.reg .f16 low,high;
  mov.b32 {low,high},%r7001;
  cvt.f32.f16 %f490, high;}

	// end inline asm
	add.s32 	%r4984, %r1175, %r403;
	mul.wide.s32 	%rd449, %r4984, 4;
	add.s64 	%rd450, %rd27, %rd449;
	st.global.f32 	[%rd450], %f490;

$L__BB0_713:
	setp.eq.s32 	%p405, %r31, %r1879;
	@%p405 bra 	$L__BB0_715;

	mad.lo.s32 	%r4987, %r1467, %r31, %r32;
	mov.u32 	%r4988, _ZN6kernel5shmemE;
	mad.lo.s32 	%r4989, %r4987, 1280, %r4988;
	add.s32 	%r4990, %r4989, -256;
	shl.b32 	%r4991, %r36, 4;
	add.s32 	%r4992, %r4990, %r4991;
	st.shared.v4.u32 	[%r4992+256], {%r3511, %r3588, %r1062, %r1068};
	st.shared.v4.u32 	[%r4992+1024], {%r3278, %r3355, %r1008, %r1020};
	shl.b32 	%r4993, %r36, 3;
	add.s32 	%r4994, %r4990, %r4993;
	st.shared.v2.u32 	[%r4994+768], {%r3554, %r3620};

$L__BB0_715:
	setp.eq.s32 	%p406, %r32, %r1884;
	@%p406 bra 	$L__BB0_719;

	not.b32 	%r6768, %r31;
	add.s32 	%r6767, %r1466, %r6768;
	mul.lo.s32 	%r5000, %r1466, %r32;
	mul.lo.s32 	%r5001, %r5000, 384;
	shl.b32 	%r5002, %r32, 6;
	sub.s32 	%r5003, %r5001, %r5002;
	mad.lo.s32 	%r5005, %r1880, %r1879, %r5003;
	mad.lo.s32 	%r5006, %r6767, 384, %r5005;
	shl.b32 	%r5007, %r5006, 2;
	mov.u32 	%r5008, _ZN6kernel5shmemE;
	add.s32 	%r5009, %r5008, %r5007;
	add.s32 	%r5010, %r5009, -256;
	shl.b32 	%r5011, %r36, 4;
	add.s32 	%r5012, %r5010, %r5011;
	st.shared.v4.u32 	[%r5012+256], {%r3432, %r3466, %r1032, %r1044};
	st.shared.v4.u32 	[%r5012+1024], {%r4033, %r4067, %r1117, %r1118};
	shl.b32 	%r5013, %r36, 3;
	add.s32 	%r1180, %r5010, %r5013;
	@%p405 bra 	$L__BB0_718;

	st.shared.v2.u32 	[%r1180], {%r3321, %r3387};

$L__BB0_718:
	st.shared.v2.u32 	[%r1180+768], {%r3892, %r3973};

$L__BB0_719:
	bar.sync 	0;
	@%p211 bra 	$L__BB0_721;

	mul.lo.s32 	%r5014, %r1467, 320;
	add.s32 	%r5016, %r31, -1;
	mul.lo.s32 	%r5018, %r32, 320;
	mad.lo.s32 	%r5019, %r5014, %r5016, %r5018;
	shl.b32 	%r5020, %r5019, 2;
	mov.u32 	%r5021, _ZN6kernel5shmemE;
	add.s32 	%r5022, %r5021, %r5020;
	add.s32 	%r5023, %r5022, -256;
	shl.b32 	%r5024, %r36, 4;
	add.s32 	%r5025, %r5023, %r5024;
	ld.shared.v4.u32 	{%r7205, %r7203, %r7199, %r7198}, [%r5025+256];
	ld.shared.v4.u32 	{%r7207, %r7206, %r7201, %r7200}, [%r5025+1024];
	shl.b32 	%r5034, %r36, 3;
	add.s32 	%r5035, %r5023, %r5034;
	ld.shared.v2.u32 	{%r7204, %r7202}, [%r5035+768];

$L__BB0_721:
	setp.eq.s32 	%p452, %r32, 0;
	@%p452 bra 	$L__BB0_724;

	not.b32 	%r6770, %r31;
	add.s32 	%r6769, %r1466, %r6770;
	mad.lo.s32 	%r5041, %r1466, 384, -64;
	add.s32 	%r5043, %r32, -1;
	mul.lo.s32 	%r5044, %r5041, %r5043;
	mad.lo.s32 	%r5047, %r1880, %r1879, %r5044;
	mad.lo.s32 	%r5048, %r6769, 384, %r5047;
	shl.b32 	%r5049, %r5048, 2;
	mov.u32 	%r5050, _ZN6kernel5shmemE;
	add.s32 	%r5051, %r5050, %r5049;
	add.s32 	%r5052, %r5051, -256;
	shl.b32 	%r5053, %r36, 4;
	add.s32 	%r5054, %r5052, %r5053;
	ld.shared.v4.u32 	{%r7219, %r7218, %r7216, %r7214}, [%r5054+256];
	ld.shared.v4.u32 	{%r7213, %r7212, %r7210, %r7208}, [%r5054+1024];
	shl.b32 	%r5063, %r36, 3;
	add.s32 	%r5064, %r5052, %r5063;
	ld.shared.v2.u32 	{%r7217, %r7215}, [%r5064+768];
	@%p211 bra 	$L__BB0_724;

	add.s32 	%r6766, %r5064, 768;
	ld.shared.v2.u32 	{%r7211, %r7209}, [%r6766+768];

$L__BB0_724:
	mov.f32 	%f538, 0f3F800000;
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5069, {low,high};}

	// end inline asm
	selp.b32 	%r5071, %r6872, %r5069, %p15;
	// begin inline asm
	{mul.f16x2 %r5070,%r5071,%r6997;
}
	// end inline asm
	selp.b32 	%r5074, %r6876, %r5069, %p15;
	// begin inline asm
	{mul.f16x2 %r5073,%r5074,%r6990;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5076, {low,high};}

	// end inline asm
	selp.b32 	%r5078, %r6872, %r5076, %p15;
	// begin inline asm
	{mul.f16x2 %r5077,%r5078,%r6978;
}
	// end inline asm
	selp.b32 	%r5081, %r6876, %r5076, %p15;
	// begin inline asm
	{mul.f16x2 %r5080,%r5081,%r6973;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5083, {low,high};}

	// end inline asm
	selp.b32 	%r5085, %r6872, %r5083, %p15;
	// begin inline asm
	{mul.f16x2 %r5084,%r5085,%r6965;
}
	// end inline asm
	selp.b32 	%r5088, %r6876, %r5083, %p15;
	// begin inline asm
	{mul.f16x2 %r5087,%r5088,%r6964;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5090, {low,high};}

	// end inline asm
	selp.b32 	%r5092, %r6872, %r5090, %p15;
	// begin inline asm
	{mul.f16x2 %r5091,%r5092,%r6969;
}
	// end inline asm
	selp.b32 	%r5095, %r6876, %r5090, %p15;
	// begin inline asm
	{mul.f16x2 %r5094,%r5095,%r6968;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5097, {low,high};}

	// end inline asm
	selp.b32 	%r5099, %r6872, %r5097, %p15;
	// begin inline asm
	{mul.f16x2 %r5098,%r5099,%r6967;
}
	// end inline asm
	selp.b32 	%r5102, %r6876, %r5097, %p15;
	// begin inline asm
	{mul.f16x2 %r5101,%r5102,%r6961;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5104, {low,high};}

	// end inline asm
	selp.b32 	%r5106, %r6872, %r5104, %p15;
	// begin inline asm
	{mul.f16x2 %r5105,%r5106,%r6957;
}
	// end inline asm
	selp.b32 	%r5109, %r6876, %r5104, %p15;
	// begin inline asm
	{mul.f16x2 %r5108,%r5109,%r6956;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5111, {low,high};}

	// end inline asm
	selp.b32 	%r5113, %r6872, %r5111, %p15;
	// begin inline asm
	{mul.f16x2 %r5112,%r5113,%r6955;
}
	// end inline asm
	selp.b32 	%r5116, %r6876, %r5111, %p15;
	// begin inline asm
	{mul.f16x2 %r5115,%r5116,%r6949;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5118, {low,high};}

	// end inline asm
	selp.b32 	%r5120, %r6872, %r5118, %p15;
	// begin inline asm
	{mul.f16x2 %r5119,%r5120,%r6942;
}
	// end inline asm
	selp.b32 	%r5123, %r6876, %r5118, %p15;
	// begin inline asm
	{mul.f16x2 %r5122,%r5123,%r6941;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5125, {low,high};}

	// end inline asm
	selp.b32 	%r5127, %r6872, %r5125, %p15;
	// begin inline asm
	{mul.f16x2 %r5126,%r5127,%r7161;
}
	// end inline asm
	selp.b32 	%r5130, %r6876, %r5125, %p15;
	// begin inline asm
	{mul.f16x2 %r5129,%r5130,%r7159;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5132, {low,high};}

	// end inline asm
	selp.b32 	%r5134, %r6872, %r5132, %p15;
	// begin inline asm
	{mul.f16x2 %r5133,%r5134,%r7160;
}
	// end inline asm
	selp.b32 	%r5137, %r6876, %r5132, %p15;
	// begin inline asm
	{mul.f16x2 %r5136,%r5137,%r7158;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5139, {low,high};}

	// end inline asm
	selp.b32 	%r5141, %r6872, %r5139, %p15;
	// begin inline asm
	{mul.f16x2 %r5140,%r5141,%r6934;
}
	// end inline asm
	selp.b32 	%r5144, %r6876, %r5139, %p15;
	// begin inline asm
	{mul.f16x2 %r5143,%r5144,%r6933;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5146, {low,high};}

	// end inline asm
	selp.b32 	%r5148, %r6872, %r5146, %p15;
	// begin inline asm
	{mul.f16x2 %r5147,%r5148,%r6938;
}
	// end inline asm
	selp.b32 	%r5151, %r6876, %r5146, %p15;
	// begin inline asm
	{mul.f16x2 %r5150,%r5151,%r6937;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5153, {low,high};}

	// end inline asm
	selp.b32 	%r5155, %r6872, %r5153, %p15;
	// begin inline asm
	{mul.f16x2 %r5154,%r5155,%r6936;
}
	// end inline asm
	selp.b32 	%r5158, %r6876, %r5153, %p15;
	// begin inline asm
	{mul.f16x2 %r5157,%r5158,%r6931;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5160, {low,high};}

	// end inline asm
	selp.b32 	%r5162, %r6872, %r5160, %p15;
	// begin inline asm
	{mul.f16x2 %r5161,%r5162,%r6926;
}
	// end inline asm
	selp.b32 	%r5165, %r6876, %r5160, %p15;
	// begin inline asm
	{mul.f16x2 %r5164,%r5165,%r6925;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5167, {low,high};}

	// end inline asm
	selp.b32 	%r5169, %r6872, %r5167, %p15;
	// begin inline asm
	{mul.f16x2 %r5168,%r5169,%r6928;
}
	// end inline asm
	selp.b32 	%r5172, %r6876, %r5167, %p15;
	// begin inline asm
	{mul.f16x2 %r5171,%r5172,%r6927;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5174, {low,high};}

	// end inline asm
	selp.b32 	%r5176, %r6872, %r5174, %p15;
	// begin inline asm
	{mul.f16x2 %r5175,%r5176,%r7145;
}
	// end inline asm
	selp.b32 	%r5179, %r6876, %r5174, %p15;
	// begin inline asm
	{mul.f16x2 %r5178,%r5179,%r7144;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5181, {low,high};}

	// end inline asm
	selp.b32 	%r5183, %r6872, %r5181, %p15;
	// begin inline asm
	{mul.f16x2 %r5182,%r5183,%r7143;
}
	// end inline asm
	selp.b32 	%r5186, %r6876, %r5181, %p15;
	// begin inline asm
	{mul.f16x2 %r5185,%r5186,%r7142;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5188, {low,high};}

	// end inline asm
	selp.b32 	%r5190, %r6872, %r5188, %p15;
	// begin inline asm
	{mul.f16x2 %r5189,%r5190,%r7157;
}
	// end inline asm
	selp.b32 	%r5193, %r6876, %r5188, %p15;
	// begin inline asm
	{mul.f16x2 %r5192,%r5193,%r7156;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5195, {low,high};}

	// end inline asm
	selp.b32 	%r5197, %r6872, %r5195, %p15;
	// begin inline asm
	{mul.f16x2 %r5196,%r5197,%r6920;
}
	// end inline asm
	selp.b32 	%r5200, %r6876, %r5195, %p15;
	// begin inline asm
	{mul.f16x2 %r5199,%r5200,%r6919;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5202, {low,high};}

	// end inline asm
	selp.b32 	%r5204, %r6872, %r5202, %p15;
	// begin inline asm
	{mul.f16x2 %r5203,%r5204,%r7155;
}
	// end inline asm
	selp.b32 	%r5207, %r6876, %r5202, %p15;
	// begin inline asm
	{mul.f16x2 %r5206,%r5207,%r7153;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5209, {low,high};}

	// end inline asm
	selp.b32 	%r5211, %r6872, %r5209, %p15;
	// begin inline asm
	{mul.f16x2 %r5210,%r5211,%r7154;
}
	// end inline asm
	selp.b32 	%r5214, %r6876, %r5209, %p15;
	// begin inline asm
	{mul.f16x2 %r5213,%r5214,%r7152;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5216, {low,high};}

	// end inline asm
	selp.b32 	%r5218, %r6872, %r5216, %p15;
	// begin inline asm
	{mul.f16x2 %r5217,%r5218,%r7141;
}
	// end inline asm
	selp.b32 	%r5221, %r6876, %r5216, %p15;
	// begin inline asm
	{mul.f16x2 %r5220,%r5221,%r7139;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5223, {low,high};}

	// end inline asm
	selp.b32 	%r5225, %r6872, %r5223, %p15;
	// begin inline asm
	{mul.f16x2 %r5224,%r5225,%r7140;
}
	// end inline asm
	selp.b32 	%r5228, %r6876, %r5223, %p15;
	// begin inline asm
	{mul.f16x2 %r5227,%r5228,%r7138;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
  cvt.rn.f16.f32 low, %f538;
  cvt.rn.f16.f32 high, %f538;
  mov.b32 %r5230, {low,high};}

	// end inline asm
	selp.b32 	%r5232, %r6872, %r5230, %p15;
	// begin inline asm
	{mul.f16x2 %r5231,%r5232,%r7151;
}
	// end inline asm
	selp.b32 	%r5235, %r6876, %r5230, %p15;
	// begin inline asm
	{mul.f16x2 %r5234,%r5235,%r7150;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5237,%r7024,%r3321;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5240,%r3432,%r3278;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5243,%r5237,%r5240;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5246,%r6780,%r5243;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5249,%r5070,%r5246;
}
	// end inline asm
	selp.b32 	%r6992, %r5070, %r5249, %p15;
	// begin inline asm
	{sub.f16x2 %r5252,%r7023,%r3387;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5255,%r3466,%r3355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5258,%r5252,%r5255;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5261,%r6780,%r5258;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5264,%r5073,%r5261;
}
	// end inline asm
	selp.b32 	%r6987, %r5073, %r5264, %p15;
	// begin inline asm
	{sub.f16x2 %r5267,%r7020,%r3554;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5270,%r7026,%r3511;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5273,%r5267,%r5270;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5276,%r6780,%r5273;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5279,%r5077,%r5276;
}
	// end inline asm
	selp.b32 	%r6996, %r5077, %r5279, %p15;
	// begin inline asm
	{sub.f16x2 %r5282,%r7019,%r3620;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5285,%r7025,%r3588;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5288,%r5282,%r5285;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5291,%r6780,%r5288;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5294,%r5080,%r5291;
}
	// end inline asm
	selp.b32 	%r6989, %r5080, %r5294, %p15;
	// begin inline asm
	{sub.f16x2 %r5297,%r7023,%r7024;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5300,%r6871,%r5297;
}
	// end inline asm
	@%p15 bra 	$L__BB0_726;
	bra.uni 	$L__BB0_725;

$L__BB0_726:
	// begin inline asm
	{neg.f16x2 %r7220,%r5084;
}
	// end inline asm
	bra.uni 	$L__BB0_727;

$L__BB0_725:
	// begin inline asm
	{mul.f16x2 %r7220,%r6872,%r5297;
}
	// end inline asm

$L__BB0_727:
	mov.u32 	%r5311, 31;
	mov.u32 	%r5313, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5309,%r7220,%r5311,%r1975,%r5313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5314,%r5300,%r5309;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5317,%r1032,%r1008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5320,%r5317,%r5314;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5323,%r6780,%r5320;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6994,%r5084,%r5323;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5329,%r7025,%r7026;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5332,%r6871,%r5329;
}
	// end inline asm
	mov.u32 	%r7221, %r5091;
	@%p15 bra 	$L__BB0_729;

	// begin inline asm
	{mul.f16x2 %r7221,%r6872,%r5329;
}
	// end inline asm

$L__BB0_729:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5341,%r7221,%r5311,%r1975,%r5313;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5346,%r5332,%r5341;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5349,%r7014,%r1008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5352,%r5346,%r5349;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5355,%r6780,%r5352;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6999,%r5091,%r5355;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5361,%r7016,%r7024;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5364,%r7022,%r7026;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5367,%r5361,%r5364;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5370,%r6780,%r5367;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5373,%r5098,%r5370;
}
	// end inline asm
	selp.b32 	%r6997, %r5098, %r5373, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7024;
 mov.b16 %rs65, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5378,%r7024,%r423,%r1975,%r5313;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5378;
 mov.b16 %rs66, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5384, {%rs65,%rs66};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5385,%r5384,%r7023;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5388,%r6875,%r5385;
}
	// end inline asm
	@%p15 bra 	$L__BB0_731;
	bra.uni 	$L__BB0_730;

$L__BB0_731:
	// begin inline asm
	{neg.f16x2 %r7222,%r5087;
}
	// end inline asm
	bra.uni 	$L__BB0_732;

$L__BB0_730:
	// begin inline asm
	{mul.f16x2 %r7222,%r6876,%r5385;
}
	// end inline asm

$L__BB0_732:
	mov.u32 	%r5403, 31;
	mov.u32 	%r5427, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5401,%r7222,%r5403,%r1975,%r5427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5406,%r5388,%r5401;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5409,%r1044,%r1020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5412,%r5409,%r5406;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5415,%r6780,%r5412;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6993,%r5087,%r5415;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7026;
 mov.b16 %rs69, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5423,%r7026,%r423,%r1975,%r5427;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5423;
 mov.b16 %rs70, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5429, {%rs69,%rs70};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5430,%r5429,%r7025;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5433,%r6875,%r5430;
}
	// end inline asm
	mov.u32 	%r7223, %r5094;
	@%p15 bra 	$L__BB0_734;

	// begin inline asm
	{mul.f16x2 %r7223,%r6876,%r5430;
}
	// end inline asm

$L__BB0_734:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5444,%r7223,%r5403,%r1975,%r5427;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5449,%r5433,%r5444;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5452,%r7013,%r1020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5455,%r5449,%r5452;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5458,%r6780,%r5455;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6998,%r5094,%r5458;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5464,%r7015,%r7023;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5467,%r7021,%r7025;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5470,%r5464,%r5467;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5473,%r6780,%r5470;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5476,%r5101,%r5473;
}
	// end inline asm
	selp.b32 	%r6990, %r5101, %r5476, %p15;
	// begin inline asm
	{sub.f16x2 %r5479,%r7021,%r7022;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5482,%r6871,%r5479;
}
	// end inline asm
	mov.u32 	%r7224, %r5105;
	@%p15 bra 	$L__BB0_736;

	// begin inline asm
	{mul.f16x2 %r7224,%r6872,%r5479;
}
	// end inline asm

$L__BB0_736:
	mov.u32 	%r5493, 31;
	mov.u32 	%r5532, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5491,%r7224,%r5493,%r1975,%r5532;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5496,%r5482,%r5491;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5499,%r7008,%r1032;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5502,%r5496,%r5499;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5505,%r6780,%r5502;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6985,%r5105,%r5505;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5511,%r7010,%r3892;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5514,%r4033,%r7022;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5517,%r5511,%r5514;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5520,%r6780,%r5517;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5523,%r5112,%r5520;
}
	// end inline asm
	selp.b32 	%r6983, %r5112, %r5523, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7022;
 mov.b16 %rs73, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5528,%r7022,%r423,%r1975,%r5532;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5528;
 mov.b16 %rs74, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5534, {%rs73,%rs74};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5535,%r5534,%r7021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5538,%r6875,%r5535;
}
	// end inline asm
	mov.u32 	%r7225, %r5108;
	@%p15 bra 	$L__BB0_738;

	// begin inline asm
	{mul.f16x2 %r7225,%r6876,%r5535;
}
	// end inline asm

$L__BB0_738:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5549,%r7225,%r5493,%r1975,%r5532;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5554,%r5538,%r5549;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5557,%r7007,%r1044;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5560,%r5554,%r5557;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5563,%r6780,%r5560;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6984,%r5108,%r5563;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5569,%r7009,%r3973;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5572,%r4067,%r7021;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5575,%r5569,%r5572;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5578,%r6780,%r5575;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5581,%r5115,%r5578;
}
	// end inline asm
	selp.b32 	%r6981, %r5115, %r5581, %p15;
	// begin inline asm
	{sub.f16x2 %r5584,%r7019,%r7020;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5587,%r6871,%r5584;
}
	// end inline asm
	@%p15 bra 	$L__BB0_740;
	bra.uni 	$L__BB0_739;

$L__BB0_740:
	// begin inline asm
	{neg.f16x2 %r7226,%r5119;
}
	// end inline asm
	bra.uni 	$L__BB0_741;

$L__BB0_739:
	// begin inline asm
	{mul.f16x2 %r7226,%r6872,%r5584;
}
	// end inline asm

$L__BB0_741:
	mov.u32 	%r5600, 31;
	mov.u32 	%r5602, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5598,%r7226,%r5600,%r1975,%r5602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5603,%r5587,%r5598;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5606,%r7014,%r1062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5609,%r5606,%r5603;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5612,%r6780,%r5609;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6975,%r5119,%r5612;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5618,%r7218,%r7219;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5621,%r6871,%r5618;
}
	// end inline asm
	mov.u32 	%r7227, %r5126;
	@%p15 bra 	$L__BB0_743;

	// begin inline asm
	{mul.f16x2 %r7227,%r6872,%r5618;
}
	// end inline asm

$L__BB0_743:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5630,%r7227,%r5600,%r1975,%r5602;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5635,%r5621,%r5630;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5638,%r7216,%r1062;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5641,%r5635,%r5638;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5644,%r6780,%r5641;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6980,%r5126,%r5644;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5650,%r7217,%r7020;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5653,%r7018,%r7219;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5656,%r5650,%r5653;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5659,%r6780,%r5656;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5662,%r5133,%r5659;
}
	// end inline asm
	selp.b32 	%r6978, %r5133, %r5662, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7020;
 mov.b16 %rs77, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5667,%r7020,%r423,%r1975,%r5602;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5667;
 mov.b16 %rs78, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5673, {%rs77,%rs78};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5674,%r5673,%r7019;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5677,%r6875,%r5674;
}
	// end inline asm
	@%p15 bra 	$L__BB0_745;
	bra.uni 	$L__BB0_744;

$L__BB0_745:
	// begin inline asm
	{neg.f16x2 %r7228,%r5122;
}
	// end inline asm
	bra.uni 	$L__BB0_746;

$L__BB0_744:
	// begin inline asm
	{mul.f16x2 %r7228,%r6876,%r5674;
}
	// end inline asm

$L__BB0_746:
	mov.u32 	%r5692, 31;
	mov.u32 	%r5716, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5690,%r7228,%r5692,%r1975,%r5716;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5695,%r5677,%r5690;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5698,%r7013,%r1068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5701,%r5698,%r5695;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5704,%r6780,%r5701;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6974,%r5122,%r5704;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7219;
 mov.b16 %rs81, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5712,%r7219,%r423,%r1975,%r5716;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5712;
 mov.b16 %rs82, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5718, {%rs81,%rs82};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5719,%r5718,%r7218;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5722,%r6875,%r5719;
}
	// end inline asm
	mov.u32 	%r7229, %r5129;
	@%p15 bra 	$L__BB0_748;

	// begin inline asm
	{mul.f16x2 %r7229,%r6876,%r5719;
}
	// end inline asm

$L__BB0_748:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5733,%r7229,%r5692,%r1975,%r5716;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5738,%r5722,%r5733;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5741,%r7214,%r1068;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5744,%r5738,%r5741;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5747,%r6780,%r5744;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6979,%r5129,%r5747;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5753,%r7215,%r7019;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5756,%r7017,%r7218;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5759,%r5753,%r5756;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5762,%r6780,%r5759;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5765,%r5136,%r5762;
}
	// end inline asm
	selp.b32 	%r6973, %r5136, %r5765, %p15;
	// begin inline asm
	{sub.f16x2 %r5768,%r7015,%r7016;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5771,%r6871,%r5768;
}
	// end inline asm
	@%p15 bra 	$L__BB0_750;
	bra.uni 	$L__BB0_749;

$L__BB0_750:
	// begin inline asm
	{neg.f16x2 %r7230,%r5140;
}
	// end inline asm
	bra.uni 	$L__BB0_751;

$L__BB0_749:
	// begin inline asm
	{mul.f16x2 %r7230,%r6872,%r5768;
}
	// end inline asm

$L__BB0_751:
	mov.u32 	%r5784, 31;
	mov.u32 	%r5786, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5782,%r7230,%r5784,%r1975,%r5786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5787,%r5771,%r5782;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5790,%r7008,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5793,%r5790,%r5787;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5796,%r6780,%r5793;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6965,%r5140,%r5796;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5802,%r7017,%r7018;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5805,%r6871,%r5802;
}
	// end inline asm
	mov.u32 	%r7231, %r5147;
	@%p15 bra 	$L__BB0_753;

	// begin inline asm
	{mul.f16x2 %r7231,%r6872,%r5802;
}
	// end inline asm

$L__BB0_753:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5814,%r7231,%r5784,%r1975,%r5786;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5819,%r5805,%r5814;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5822,%r7004,%r7014;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5825,%r5819,%r5822;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5828,%r6780,%r5825;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6969,%r5147,%r5828;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5834,%r7006,%r7016;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5837,%r7012,%r7018;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5840,%r5834,%r5837;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5843,%r6780,%r5840;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5846,%r5154,%r5843;
}
	// end inline asm
	selp.b32 	%r6967, %r5154, %r5846, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7016;
 mov.b16 %rs85, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5851,%r7016,%r423,%r1975,%r5786;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5851;
 mov.b16 %rs86, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5857, {%rs85,%rs86};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5858,%r5857,%r7015;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5861,%r6875,%r5858;
}
	// end inline asm
	@%p15 bra 	$L__BB0_755;
	bra.uni 	$L__BB0_754;

$L__BB0_755:
	// begin inline asm
	{neg.f16x2 %r7232,%r5143;
}
	// end inline asm
	bra.uni 	$L__BB0_756;

$L__BB0_754:
	// begin inline asm
	{mul.f16x2 %r7232,%r6876,%r5858;
}
	// end inline asm

$L__BB0_756:
	mov.u32 	%r5876, 31;
	mov.u32 	%r5900, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5874,%r7232,%r5876,%r1975,%r5900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5879,%r5861,%r5874;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5882,%r7007,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5885,%r5882,%r5879;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5888,%r6780,%r5885;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6964,%r5143,%r5888;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7018;
 mov.b16 %rs89, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r5896,%r7018,%r423,%r1975,%r5900;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r5896;
 mov.b16 %rs90, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r5902, {%rs89,%rs90};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5903,%r5902,%r7017;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5906,%r6875,%r5903;
}
	// end inline asm
	mov.u32 	%r7233, %r5150;
	@%p15 bra 	$L__BB0_758;

	// begin inline asm
	{mul.f16x2 %r7233,%r6876,%r5903;
}
	// end inline asm

$L__BB0_758:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5917,%r7233,%r5876,%r1975,%r5900;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5922,%r5906,%r5917;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5925,%r7003,%r7013;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5928,%r5922,%r5925;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5931,%r6780,%r5928;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6968,%r5150,%r5931;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5937,%r7005,%r7015;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5940,%r7011,%r7017;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5943,%r5937,%r5940;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5946,%r6780,%r5943;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5949,%r5157,%r5946;
}
	// end inline asm
	selp.b32 	%r6961, %r5157, %r5949, %p15;
	// begin inline asm
	{sub.f16x2 %r5952,%r7009,%r7010;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5955,%r6871,%r5952;
}
	// end inline asm
	@%p15 bra 	$L__BB0_760;
	bra.uni 	$L__BB0_759;

$L__BB0_760:
	// begin inline asm
	{neg.f16x2 %r7234,%r5161;
}
	// end inline asm
	bra.uni 	$L__BB0_761;

$L__BB0_759:
	// begin inline asm
	{mul.f16x2 %r7234,%r6872,%r5952;
}
	// end inline asm

$L__BB0_761:
	mov.u32 	%r5968, 31;
	mov.u32 	%r5970, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r5966,%r7234,%r5968,%r1975,%r5970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r5971,%r5955,%r5966;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5974,%r1117,%r7008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5977,%r5974,%r5971;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5980,%r6780,%r5977;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6953,%r5161,%r5980;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r5986,%r7011,%r7012;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r5989,%r6871,%r5986;
}
	// end inline asm
	mov.u32 	%r7235, %r5168;
	@%p15 bra 	$L__BB0_763;

	// begin inline asm
	{mul.f16x2 %r7235,%r6872,%r5986;
}
	// end inline asm

$L__BB0_763:
	// begin inline asm
	{shfl.sync.bfly.b32 %r5998,%r7235,%r5968,%r1975,%r5970;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6003,%r5989,%r5998;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6006,%r7002,%r7008;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6009,%r6003,%r6006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6012,%r6780,%r6009;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6957,%r5168,%r6012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6018,%r7204,%r7010;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6021,%r7207,%r7012;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6024,%r6018,%r6021;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6027,%r6780,%r6024;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6030,%r5175,%r6027;
}
	// end inline asm
	selp.b32 	%r6955, %r5175, %r6030, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7010;
 mov.b16 %rs93, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6035,%r7010,%r423,%r1975,%r5970;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6035;
 mov.b16 %rs94, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6041, {%rs93,%rs94};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6042,%r6041,%r7009;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6045,%r6875,%r6042;
}
	// end inline asm
	@%p15 bra 	$L__BB0_765;
	bra.uni 	$L__BB0_764;

$L__BB0_765:
	// begin inline asm
	{neg.f16x2 %r7236,%r5164;
}
	// end inline asm
	bra.uni 	$L__BB0_766;

$L__BB0_764:
	// begin inline asm
	{mul.f16x2 %r7236,%r6876,%r6042;
}
	// end inline asm

$L__BB0_766:
	mov.u32 	%r6060, 31;
	mov.u32 	%r6084, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6058,%r7236,%r6060,%r1975,%r6084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6063,%r6045,%r6058;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6066,%r1118,%r7007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6069,%r6066,%r6063;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6072,%r6780,%r6069;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6952,%r5164,%r6072;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7012;
 mov.b16 %rs97, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6080,%r7012,%r423,%r1975,%r6084;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6080;
 mov.b16 %rs98, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6086, {%rs97,%rs98};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6087,%r6086,%r7011;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6090,%r6875,%r6087;
}
	// end inline asm
	mov.u32 	%r7237, %r5171;
	@%p15 bra 	$L__BB0_768;

	// begin inline asm
	{mul.f16x2 %r7237,%r6876,%r6087;
}
	// end inline asm

$L__BB0_768:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6101,%r7237,%r6060,%r1975,%r6084;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6106,%r6090,%r6101;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6109,%r7001,%r7007;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6112,%r6106,%r6109;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6115,%r6780,%r6112;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6956,%r5171,%r6115;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6121,%r7202,%r7009;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6124,%r7206,%r7011;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6127,%r6121,%r6124;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6130,%r6780,%r6127;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6133,%r5178,%r6130;
}
	// end inline asm
	selp.b32 	%r6949, %r5178, %r6133, %p15;
	// begin inline asm
	{sub.f16x2 %r6136,%r7206,%r7207;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6139,%r6871,%r6136;
}
	// end inline asm
	mov.u32 	%r7238, %r5182;
	@%p15 bra 	$L__BB0_770;

	// begin inline asm
	{mul.f16x2 %r7238,%r6872,%r6136;
}
	// end inline asm

$L__BB0_770:
	mov.u32 	%r6150, 31;
	mov.u32 	%r6174, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6148,%r7238,%r6150,%r1975,%r6174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6153,%r6139,%r6148;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6156,%r7201,%r1117;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6159,%r6153,%r6156;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6162,%r6780,%r6159;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6946,%r5182,%r6162;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7207;
 mov.b16 %rs101, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6170,%r7207,%r423,%r1975,%r6174;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6170;
 mov.b16 %rs102, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6176, {%rs101,%rs102};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6177,%r6176,%r7206;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6180,%r6875,%r6177;
}
	// end inline asm
	mov.u32 	%r7239, %r5185;
	@%p15 bra 	$L__BB0_772;

	// begin inline asm
	{mul.f16x2 %r7239,%r6876,%r6177;
}
	// end inline asm

$L__BB0_772:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6191,%r7239,%r6150,%r1975,%r6174;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6196,%r6180,%r6191;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6199,%r7200,%r1118;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6202,%r6196,%r6199;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6205,%r6780,%r6202;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6945,%r5185,%r6205;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6211,%r7215,%r7217;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6214,%r6871,%r6211;
}
	// end inline asm
	@%p15 bra 	$L__BB0_774;
	bra.uni 	$L__BB0_773;

$L__BB0_774:
	// begin inline asm
	{neg.f16x2 %r7240,%r5189;
}
	// end inline asm
	bra.uni 	$L__BB0_775;

$L__BB0_773:
	// begin inline asm
	{mul.f16x2 %r7240,%r6872,%r6211;
}
	// end inline asm

$L__BB0_775:
	mov.u32 	%r6227, 31;
	mov.u32 	%r6251, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6225,%r7240,%r6227,%r1975,%r6251;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6230,%r6214,%r6225;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6233,%r7004,%r7216;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6236,%r6233,%r6230;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6239,%r6780,%r6236;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6942,%r5189,%r6239;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7217;
 mov.b16 %rs105, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6247,%r7217,%r423,%r1975,%r6251;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6247;
 mov.b16 %rs106, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6253, {%rs105,%rs106};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6254,%r6253,%r7215;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6257,%r6875,%r6254;
}
	// end inline asm
	@%p15 bra 	$L__BB0_777;
	bra.uni 	$L__BB0_776;

$L__BB0_777:
	// begin inline asm
	{neg.f16x2 %r7241,%r5192;
}
	// end inline asm
	bra.uni 	$L__BB0_778;

$L__BB0_776:
	// begin inline asm
	{mul.f16x2 %r7241,%r6876,%r6254;
}
	// end inline asm

$L__BB0_778:
	mov.u32 	%r6272, 31;
	mov.u32 	%r6274, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6270,%r7241,%r6272,%r1975,%r6274;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6275,%r6257,%r6270;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6278,%r7003,%r7214;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6281,%r6278,%r6275;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6284,%r6780,%r6281;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6941,%r5192,%r6284;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6290,%r7005,%r7006;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6293,%r6871,%r6290;
}
	// end inline asm
	@%p15 bra 	$L__BB0_780;
	bra.uni 	$L__BB0_779;

$L__BB0_780:
	// begin inline asm
	{neg.f16x2 %r7242,%r5196;
}
	// end inline asm
	bra.uni 	$L__BB0_781;

$L__BB0_779:
	// begin inline asm
	{mul.f16x2 %r7242,%r6872,%r6290;
}
	// end inline asm

$L__BB0_781:
	mov.u32 	%r6306, 31;
	mov.u32 	%r6308, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6304,%r7242,%r6306,%r1975,%r6308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6309,%r6293,%r6304;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6312,%r7002,%r7004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6315,%r6312,%r6309;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6318,%r6780,%r6315;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6934,%r5196,%r6318;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6324,%r7212,%r7213;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6327,%r6871,%r6324;
}
	// end inline asm
	mov.u32 	%r7243, %r5203;
	@%p15 bra 	$L__BB0_783;

	// begin inline asm
	{mul.f16x2 %r7243,%r6872,%r6324;
}
	// end inline asm

$L__BB0_783:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6336,%r7243,%r6306,%r1975,%r6308;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6341,%r6327,%r6336;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6344,%r7210,%r7004;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6347,%r6341,%r6344;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6350,%r6780,%r6347;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6938,%r5203,%r6350;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6356,%r7211,%r7006;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6359,%r7205,%r7213;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6362,%r6356,%r6359;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6365,%r6780,%r6362;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6368,%r5210,%r6365;
}
	// end inline asm
	selp.b32 	%r6936, %r5210, %r6368, %p15;
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7006;
 mov.b16 %rs109, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6373,%r7006,%r423,%r1975,%r6308;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6373;
 mov.b16 %rs110, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6379, {%rs109,%rs110};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6380,%r6379,%r7005;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6383,%r6875,%r6380;
}
	// end inline asm
	@%p15 bra 	$L__BB0_785;
	bra.uni 	$L__BB0_784;

$L__BB0_785:
	// begin inline asm
	{neg.f16x2 %r7244,%r5199;
}
	// end inline asm
	bra.uni 	$L__BB0_786;

$L__BB0_784:
	// begin inline asm
	{mul.f16x2 %r7244,%r6876,%r6380;
}
	// end inline asm

$L__BB0_786:
	mov.u32 	%r6398, 31;
	mov.u32 	%r6422, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6396,%r7244,%r6398,%r1975,%r6422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6401,%r6383,%r6396;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6404,%r7001,%r7003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6407,%r6404,%r6401;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6410,%r6780,%r6407;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6933,%r5199,%r6410;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7213;
 mov.b16 %rs113, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6418,%r7213,%r423,%r1975,%r6422;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6418;
 mov.b16 %rs114, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6424, {%rs113,%rs114};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6425,%r6424,%r7212;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6428,%r6875,%r6425;
}
	// end inline asm
	mov.u32 	%r7245, %r5206;
	@%p15 bra 	$L__BB0_788;

	// begin inline asm
	{mul.f16x2 %r7245,%r6876,%r6425;
}
	// end inline asm

$L__BB0_788:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6439,%r7245,%r6398,%r1975,%r6422;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6444,%r6428,%r6439;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6447,%r7208,%r7003;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6450,%r6444,%r6447;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6453,%r6780,%r6450;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6937,%r5206,%r6453;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6459,%r7209,%r7005;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6462,%r7203,%r7212;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6465,%r6459,%r6462;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6468,%r6780,%r6465;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6471,%r5213,%r6468;
}
	// end inline asm
	selp.b32 	%r6931, %r5213, %r6471, %p15;
	// begin inline asm
	{sub.f16x2 %r6474,%r7202,%r7204;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6477,%r6871,%r6474;
}
	// end inline asm
	@%p15 bra 	$L__BB0_790;
	bra.uni 	$L__BB0_789;

$L__BB0_790:
	// begin inline asm
	{neg.f16x2 %r7246,%r5217;
}
	// end inline asm
	bra.uni 	$L__BB0_791;

$L__BB0_789:
	// begin inline asm
	{mul.f16x2 %r7246,%r6872,%r6474;
}
	// end inline asm

$L__BB0_791:
	mov.u32 	%r6490, 31;
	mov.u32 	%r6492, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6488,%r7246,%r6490,%r1975,%r6492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6493,%r6477,%r6488;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6496,%r7201,%r7002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6499,%r6496,%r6493;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6502,%r6780,%r6499;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6926,%r5217,%r6502;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6508,%r7203,%r7205;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6511,%r6871,%r6508;
}
	// end inline asm
	mov.u32 	%r7247, %r5224;
	@%p15 bra 	$L__BB0_793;

	// begin inline asm
	{mul.f16x2 %r7247,%r6872,%r6508;
}
	// end inline asm

$L__BB0_793:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6520,%r7247,%r6490,%r1975,%r6492;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6525,%r6511,%r6520;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6528,%r7199,%r7002;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6531,%r6525,%r6528;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6534,%r6780,%r6531;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6928,%r5224,%r6534;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7204;
 mov.b16 %rs117, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6542,%r7204,%r423,%r1975,%r6492;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6542;
 mov.b16 %rs118, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6548, {%rs117,%rs118};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6549,%r6548,%r7202;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6552,%r6875,%r6549;
}
	// end inline asm
	@%p15 bra 	$L__BB0_795;
	bra.uni 	$L__BB0_794;

$L__BB0_795:
	// begin inline asm
	{neg.f16x2 %r7248,%r5220;
}
	// end inline asm
	bra.uni 	$L__BB0_796;

$L__BB0_794:
	// begin inline asm
	{mul.f16x2 %r7248,%r6876,%r6549;
}
	// end inline asm

$L__BB0_796:
	mov.u32 	%r6567, 31;
	mov.u32 	%r6591, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6565,%r7248,%r6567,%r1975,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6570,%r6552,%r6565;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6573,%r7200,%r7001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6576,%r6573,%r6570;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6579,%r6780,%r6576;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6925,%r5220,%r6579;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7205;
 mov.b16 %rs121, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6587,%r7205,%r423,%r1975,%r6591;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6587;
 mov.b16 %rs122, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6593, {%rs121,%rs122};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6594,%r6593,%r7203;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6597,%r6875,%r6594;
}
	// end inline asm
	mov.u32 	%r7249, %r5227;
	@%p15 bra 	$L__BB0_798;

	// begin inline asm
	{mul.f16x2 %r7249,%r6876,%r6594;
}
	// end inline asm

$L__BB0_798:
	// begin inline asm
	{shfl.sync.bfly.b32 %r6608,%r7249,%r6567,%r1975,%r6591;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6613,%r6597,%r6608;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6616,%r7198,%r7001;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6619,%r6613,%r6616;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6622,%r6780,%r6619;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6927,%r5227,%r6622;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6628,%r7209,%r7211;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6631,%r6871,%r6628;
}
	// end inline asm
	@%p15 bra 	$L__BB0_800;
	bra.uni 	$L__BB0_799;

$L__BB0_800:
	// begin inline asm
	{neg.f16x2 %r7250,%r5231;
}
	// end inline asm
	bra.uni 	$L__BB0_801;

$L__BB0_799:
	// begin inline asm
	{mul.f16x2 %r7250,%r6872,%r6628;
}
	// end inline asm

$L__BB0_801:
	mov.u32 	%r6644, 31;
	mov.u32 	%r6668, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6642,%r7250,%r6644,%r1975,%r6668;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6647,%r6631,%r6642;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6650,%r7199,%r7210;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6653,%r6650,%r6647;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6656,%r6780,%r6653;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6920,%r5231,%r6656;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r7211;
 mov.b16 %rs125, high;}
	// end inline asm
	// begin inline asm
	{shfl.sync.idx.b32 %r6664,%r7211,%r423,%r1975,%r6668;
}
	// end inline asm
	// begin inline asm
	{.reg .f16 low,high;
 mov.b32 {low,high}, %r6664;
 mov.b16 %rs126, low;}
	// end inline asm
	// begin inline asm
	{  mov.b32 %r6670, {%rs125,%rs126};}

	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6671,%r6670,%r7209;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6674,%r6875,%r6671;
}
	// end inline asm
	@%p15 bra 	$L__BB0_803;
	bra.uni 	$L__BB0_802;

$L__BB0_803:
	// begin inline asm
	{neg.f16x2 %r7251,%r5234;
}
	// end inline asm
	bra.uni 	$L__BB0_804;

$L__BB0_802:
	// begin inline asm
	{mul.f16x2 %r7251,%r6876,%r6671;
}
	// end inline asm

$L__BB0_804:
	mov.u32 	%r6689, 31;
	mov.u32 	%r6691, -1;
	// begin inline asm
	{shfl.sync.bfly.b32 %r6687,%r7251,%r6689,%r1975,%r6691;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6692,%r6674,%r6687;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6695,%r7198,%r7208;
}
	// end inline asm
	// begin inline asm
	{sub.f16x2 %r6698,%r6695,%r6692;
}
	// end inline asm
	// begin inline asm
	{mul.f16x2 %r6701,%r6780,%r6698;
}
	// end inline asm
	// begin inline asm
	{add.f16x2 %r6919,%r5234,%r6701;
}
	// end inline asm
	bar.sync 	0;
	@%p405 bra 	$L__BB0_807;

	setp.ne.s32 	%p444, %r32, %r1884;
	shl.b32 	%r6711, %r32, 8;
	shl.b32 	%r6715, %r1467, 8;
	or.b32  	%r6716, %r6715, 128;
	mad.lo.s32 	%r6718, %r6716, %r31, %r1887;
	add.s32 	%r6719, %r6718, %r6711;
	shl.b32 	%r6720, %r6719, 2;
	mov.u32 	%r6721, _ZN6kernel5shmemE;
	add.s32 	%r6722, %r6721, %r6720;
	shl.b32 	%r6723, %r36, 4;
	add.s32 	%r1462, %r6722, %r6723;
	st.shared.v4.u32 	[%r1462], {%r6980, %r6979, %r6975, %r6974};
	st.shared.v4.u32 	[%r1462+512], {%r6996, %r6989, %r6999, %r6998};
	@%p444 bra 	$L__BB0_807;

	st.shared.v4.u32 	[%r1462+1024], {%r6994, %r6993, %r6992, %r6987};

$L__BB0_807:
	@%p406 bra 	$L__BB0_809;

	not.b32 	%r6772, %r31;
	add.s32 	%r6771, %r1466, %r6772;
	mul.lo.s32 	%r6729, %r6771, 384;
	mad.lo.s32 	%r6730, %r59, %r32, %r6729;
	mad.lo.s32 	%r6733, %r1882, %r1884, %r6730;
	mad.lo.s32 	%r6736, %r1880, %r1879, %r6733;
	shl.b32 	%r6737, %r6736, 2;
	mov.u32 	%r6738, _ZN6kernel5shmemE;
	add.s32 	%r6739, %r6738, %r6737;
	shl.b32 	%r6740, %r36, 4;
	add.s32 	%r6741, %r6739, %r6740;
	st.shared.v4.u32 	[%r6741], {%r6994, %r6993, %r6992, %r6987};
	st.shared.v4.u32 	[%r6741+512], {%r6985, %r6984, %r6953, %r6952};
	st.shared.v4.u32 	[%r6741+1024], {%r6983, %r6981, %r6946, %r6945};

$L__BB0_809:
	rem.s32 	%r6742, %r7027, %r1470;
	setp.eq.s32 	%p446, %r6742, 0;
	@%p446 bra 	$L__BB0_811;

	bar.sync 	0;
	bra.uni 	$L__BB0_818;

$L__BB0_811:
	@%p150 bra 	$L__BB0_813;

	// begin inline asm
	trap;
	// end inline asm

$L__BB0_813:
	bar.sync 	0;
	@%p151 bra 	$L__BB0_817;

	membar.gl;
	setp.eq.s32 	%p449, %r417, %r418;
	mov.u32 	%r6759, -2147483647;
	sub.s32 	%r6760, %r6759, %r416;
	selp.b32 	%r6748, %r6760, 1, %p449;
	// begin inline asm
	atom.add.release.gpu.u32 %r6747,[%rd25],%r6748;
	// end inline asm

$L__BB0_815:
	ld.volatile.u32 	%r6761, [%rd25];
	xor.b32  	%r6762, %r6761, %r6747;
	setp.gt.s32 	%p450, %r6762, -1;
	@%p450 bra 	$L__BB0_815;

	// begin inline asm
	ld.acquire.gpu.u32 %r6763,[%rd25];
	// end inline asm

$L__BB0_817:
	bar.sync 	0;

$L__BB0_818:
	add.s32 	%r7027, %r7027, 1;
	setp.lt.s32 	%p451, %r7027, %r39;
	mov.u32 	%r6947, %r470;
	mov.u32 	%r6948, %r7116;
	mov.u32 	%r6951, %r471;
	mov.u32 	%r6954, %r7118;
	mov.u32 	%r6959, %r476;
	mov.u32 	%r6963, %r479;
	mov.u32 	%r6971, %r7129;
	mov.u32 	%r6976, %r7131;
	mov.u32 	%r6982, %r497;
	mov.u32 	%r6986, %r505;
	mov.u32 	%r6988, %r507;
	mov.u32 	%r6991, %r509;
	mov.u32 	%r6995, %r513;
	mov.u32 	%r7000, %r517;
	@%p451 bra 	$L__BB0_302;

$L__BB0_819:
	ret;

}

